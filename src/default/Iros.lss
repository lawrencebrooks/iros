
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e55e  0000e65e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000e680  2**5
                  CONTENTS, READONLY
  2 .text         0000e55e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b4b  00800510  00800510  0000e66e  2**1
                  ALLOC
  4 .stab         000006fc  00000000  00000000  0000ea80  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000389  00000000  00000000  0000f17c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000f505  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000788  00000000  00000000  0000f518  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000abed  00000000  00000000  0000fca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000162d  00000000  00000000  0001a88d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000028a1  00000000  00000000  0001beba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000017e8  00000000  00000000  0001e75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002061  00000000  00000000  0001ff44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009576  00000000  00000000  00021fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000920  00000000  00000000  0002b520  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 38 	jmp	0x707e	; 0x707e <__ctors_end>
       4:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
       8:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
       c:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      10:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      14:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      18:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      1c:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      20:	0c 94 2d 3e 	jmp	0x7c5a	; 0x7c5a <__vector_8>
      24:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      28:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      2c:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      30:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      34:	0c 94 fb 3b 	jmp	0x77f6	; 0x77f6 <__vector_13>
      38:	0c 94 3b 3c 	jmp	0x7876	; 0x7876 <__vector_14>
      3c:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      40:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      44:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      48:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      4c:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      50:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      54:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      58:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      5c:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      60:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      64:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      68:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      6c:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <__bad_interrupt>
      70:	31 61       	ori	r19, 0x11	; 17
      72:	3d 61       	ori	r19, 0x1D	; 29
      74:	49 61       	ori	r20, 0x19	; 25
      76:	35 61       	ori	r19, 0x15	; 21
      78:	39 61       	ori	r19, 0x19	; 25
      7a:	41 61       	ori	r20, 0x11	; 17
      7c:	35 61       	ori	r19, 0x15	; 21
      7e:	35 61       	ori	r19, 0x15	; 21
      80:	45 61       	ori	r20, 0x15	; 21
      82:	d9 64       	ori	r29, 0x49	; 73
      84:	e5 64       	ori	r30, 0x45	; 69
      86:	dc 64       	ori	r29, 0x4C	; 76
      88:	e5 64       	ori	r30, 0x45	; 69
      8a:	df 64       	ori	r29, 0x4F	; 79
      8c:	e5 64       	ori	r30, 0x45	; 69
      8e:	e2 64       	ori	r30, 0x42	; 66
      90:	e5 64       	ori	r30, 0x45	; 69
      92:	e8 64       	ori	r30, 0x48	; 72
      94:	eb 64       	ori	r30, 0x4B	; 75

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	27 ff       	sbrs	r18, 7
      9c:	24 ff       	sbrs	r18, 4
      9e:	2a 90       	ld	r2, -Y
      a0:	2b 1c       	adc	r2, r11
      a2:	21 0c       	add	r2, r1
      a4:	22 fb       	bst	r18, 2
      a6:	85 00       	.word	0x0085	; ????
      a8:	84 00       	.word	0x0084	; ????
      aa:	89 03       	fmulsu	r16, r17
      ac:	88 8d       	ldd	r24, Y+24	; 0x18
      ae:	81 09       	sbc	r24, r1
      b0:	6f 02       	muls	r22, r31
      b2:	44 42       	sbci	r20, 0x24	; 36
      b4:	47 00       	.word	0x0047	; ????
      b6:	45 01       	movw	r8, r10
      b8:	b0 83       	st	Z, r27
      ba:	b3 00       	.word	0x00b3	; ????
      bc:	b1 01       	movw	r22, r2
      be:	25 11       	cpse	r18, r5
      c0:	8a 1c       	adc	r8, r10
      c2:	8b 03       	fmulsu	r16, r19

000000c4 <eeprom_format_table>:
      c4:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e4 <patchCommands>:
      e4:	d6 3f d9 3f 35 40 39 40 40 40 e1 3f e6 3f eb 3f     .?.?5@9@@@.?.?.?
      f4:	48 40 ee 3f f1 3f f4 3f 2f 40 32 40 58 40           H@.?.?.?/@2@X@

00000102 <fader>:
     102:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000010e <strChallenge>:
     10e:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     11e:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     12e:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     13e:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     14e:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     15e:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     16e:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     17e:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     18e:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     19e:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     1ae:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

000001be <strCongrats>:
     1be:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     1ce:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     1de:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     1ee:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     1fe:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     20e:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     21e:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     22e:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     23e:	49 4e 45 52 53 00 00 50 41 54 20 59 4f 55 52 53     INERS..PAT YOURS
     24e:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     25e:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     26e:	4f 4e 45 00 23 00                                   ONE.#.

00000274 <strIntro>:
     274:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     284:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     294:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     2a4:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     2b4:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     2c4:	45 43 41 55 53 45 20 54 48 45 59 20 53 55 43 4b     ECAUSE THEY SUCK
     2d4:	00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20 41     ..DESTROY THEM A
     2e4:	4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f 55     ND.TAKE BACK YOU
     2f4:	52 20 53 57 41 47 00 23 00                          R SWAG.#.

000002fd <default_scores>:
     2fd:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     30d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000031b <strTally>:
     31b:	54 41 4c 4c 59 20 00                                TALLY .

00000322 <strGameOver>:
     322:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000032c <strLevelBonus>:
     32c:	42 4f 4e 55 53 00                                   BONUS.

00000332 <strLevelClear>:
     332:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

0000033e <strPaused>:
     33e:	50 41 55 53 45 00                                   PAUSE.

00000344 <strExitGame>:
     344:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000350 <strMainMenu>:
     350:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

0000035c <strTime>:
     35c:	54 49 4d 45 20 00                                   TIME .

00000362 <strLives>:
     362:	4c 49 56 45 53 20 00                                LIVES .

00000369 <strShield>:
     369:	53 48 49 45 4c 44 20 00                             SHIELD .

00000371 <strScore>:
     371:	53 43 4f 52 45 20 00                                SCORE .

00000378 <strSelectHandle>:
	...

00000379 <strHighScores>:
     379:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000385 <str1Player>:
     385:	53 54 41 52 54 00                                   START.

0000038b <strCopyright>:
     38b:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     39b:	4f 4f 4b 53 00                                      OOKS.

000003a0 <spacesong>:
     3a0:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     3b0:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     3c0:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     3d0:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     3e0:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     3f0:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     400:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     410:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     420:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     430:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     440:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     450:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     460:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     470:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     480:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     490:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     4a0:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     4b0:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     4c0:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     4d0:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     4e0:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     4f0:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     500:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     510:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     520:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     530:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     540:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     550:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     560:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     570:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     580:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     590:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     5a0:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     5b0:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     5c0:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     5d0:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     5e0:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     5f0:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     600:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     610:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     620:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     630:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     640:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     650:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     660:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     670:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     680:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     690:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     6a0:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     6b0:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     6c0:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     6d0:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     6e0:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     6f0:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     700:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     710:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     720:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     730:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     740:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     750:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     760:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     770:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     780:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     790:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     7a0:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     7b0:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     7c0:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     7d0:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     7e0:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     7f0:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     800:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     810:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     820:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     830:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     840:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     850:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     860:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     870:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     880:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     890:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     8a0:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     8b0:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     8c0:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     8d0:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     8e0:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     8f0:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     900:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     910:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     920:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     930:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     940:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     950:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     960:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     970:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     980:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     990:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     9a0:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     9b0:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     9c0:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     9d0:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
     9e0:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
     9f0:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
     a00:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
     a10:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
     a20:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
     a30:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00000a40 <planetsong>:
     a40:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
     a50:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
     a60:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
     a70:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     a80:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
     a90:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
     aa0:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     ab0:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
     ac0:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
     ad0:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
     ae0:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
     af0:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     b00:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
     b10:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
     b20:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
     b30:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
     b40:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
     b50:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     b60:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     b70:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     b80:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     b90:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     ba0:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
     bb0:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
     bc0:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
     bd0:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
     be0:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
     bf0:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
     c00:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
     c10:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
     c20:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
     c30:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
     c40:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
     c50:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     c60:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
     c70:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
     c80:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     c90:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
     ca0:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
     cb0:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
     cc0:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
     cd0:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
     ce0:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
     cf0:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
     d00:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
     d10:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
     d20:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
     d30:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
     d40:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
     d50:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
     d60:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
     d70:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
     d80:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
     d90:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
     da0:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
     db0:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
     dc0:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
     dd0:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
     de0:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
     df0:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
     e00:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
     e10:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
     e20:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
     e30:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
     e40:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     e50:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
     e60:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
     e70:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     e80:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
     e90:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
     ea0:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
     eb0:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
     ec0:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     ed0:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
     ee0:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
     ef0:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
     f00:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
     f10:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
     f20:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     f30:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     f40:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     f50:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     f60:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     f70:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
     f80:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
     f90:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
     fa0:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
     fb0:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
     fc0:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
     fd0:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
     fe0:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
     ff0:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1000:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1010:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1020:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1030:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1040:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1050:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1060:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1070:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1080:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1090:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    10a0:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    10b0:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    10c0:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    10d0:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    10e0:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    10f0:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1100:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1110:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1120:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1130:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1140:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1150:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1160:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1170:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1180:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1190:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    11a0:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    11b0:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    11c0:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    11d0:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    11e0:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    11f0:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1200:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1210:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1220:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1230:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1240:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1250:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1260:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1270:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1280:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1290:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    12a0:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    12b0:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    12c0:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    12d0:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    12e0:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    12f0:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1300:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1310:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1320:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1330:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1340:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1350:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1360:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1370:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1380:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1390:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    13a0:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    13b0:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    13c0:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    13d0:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    13e0:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    13f0:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1400:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1410:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1420:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1430:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1440:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1450:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1460:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1470:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1480:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1490:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    14a0:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    14b0:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    14c0:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    14d0:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    14e0:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    14f0:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1500:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1510:	2f 00                                               /.

00001512 <my_patches>:
    1512:	00 00 00 89 16 00 00 00 00 00 00 00 89 16 00 00     ................
    1522:	00 00 00 00 00 78 16 00 00 00 00 00 00 00 22 16     .....x........".
    1532:	00 00 00 00 00 00 00 78 16 00 00 00 00 00 00 00     .......x........
    1542:	51 15 00 00 00 00 00 00 00 51 15 00 00 00 00        Q........Q.....

00001551 <explode>:
    1551:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1561:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1571:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1581:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1591:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    15a1:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    15b1:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    15c1:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    15d1:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    15e1:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    15f1:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1601:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1611:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1621:	ff                                                  .

00001622 <pshoot>:
    1622:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1632:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1642:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1652:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1662:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1672:	00 01 05 00 00 ff                                   ......

00001678 <navigate>:
    1678:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1688:	ff                                                  .

00001689 <instrument>:
    1689:	00 02 04 00 00 dd 00 ff                             ........

00001691 <sprites_data>:
    1691:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    16a1:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    16b1:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    16c1:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    16d1:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    16e1:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    16f1:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1701:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1711:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1721:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1731:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1741:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1751:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1761:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1771:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1781:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1791:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    17a1:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    17b1:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    17c1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    17d1:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    17e1:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    17f1:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1801:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1811:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    1821:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    1831:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    1841:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1851:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    1861:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    1871:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    1881:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1891:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    18a1:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    18b1:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    18c1:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    18d1:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    18e1:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    18f1:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    1901:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1911:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    1921:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    1931:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    1941:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    1951:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1961:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1971:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1981:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1991:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    19a1:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    19b1:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    19c1:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    19d1:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    19e1:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    19f1:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1a01:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1a11:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1a21:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1a31:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1a41:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    1a51:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1a61:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1a71:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1a81:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    1a91:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1aa1:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1ab1:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1ac1:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1ad1:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1ae1:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1af1:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    1b01:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1b11:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1b21:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1b31:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1b41:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    1b51:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b61:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    1b71:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    1b81:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b91:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    1ba1:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    1bb1:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    1bc1:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    1bd1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1be1:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    1bf1:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    1c01:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c11:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c21:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    1c31:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    1c41:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c51:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c61:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    1c71:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    1c81:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c91:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ca1:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    1cb1:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    1cc1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cd1:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    1ce1:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    1cf1:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    1d01:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    1d11:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    1d21:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1d31:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1d41:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    1d51:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1d61:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    1d71:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    1d81:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1d91:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    1da1:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1db1:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    1dc1:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1dd1:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1de1:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    1df1:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    1e01:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e11:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    1e21:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    1e31:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    1e41:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1e51:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1e61:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    1e71:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    1e81:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1e91:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    1ea1:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1eb1:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1ec1:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1ed1:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1ee1:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    1ef1:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    1f01:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    1f11:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    1f21:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    1f31:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    1f41:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f51:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    1f61:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    1f71:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    1f81:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    1f91:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    1fa1:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    1fb1:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    1fc1:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    1fd1:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    1fe1:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    1ff1:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2001:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2011:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    2021:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    2031:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2041:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    2051:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    2061:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    2071:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2081:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2091:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    20a1:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    20b1:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    20c1:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20d1:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    20e1:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    20f1:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2101:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2111:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2121:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    2131:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    2141:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2151:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    2161:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2171:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2181:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2191:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    21a1:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    21b1:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    21c1:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21d1:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    21e1:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    21f1:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2201:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2211:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2221:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2231:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2241:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2251:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2261:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2271:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2281:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2291:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22a1:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    22b1:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22c1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22d1:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    22e1:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    22f1:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2301:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2311:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2321:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2331:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2341:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2351:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2361:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2371:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2381:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2391:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    23a1:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    23b1:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    23c1:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    23d1:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    23e1:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    23f1:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2401:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2411:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2421:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    2431:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    2441:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2451:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2461:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2471:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2481:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2491:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24a1:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    24b1:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    24c1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24d1:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    24e1:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    24f1:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2501:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2511:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    2521:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    2531:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    2541:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    2551:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2561:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2571:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2581:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2591:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    25a1:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    25b1:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    25c1:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    25d1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25e1:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    25f1:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2601:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2611:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2621:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2631:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2641:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2651:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2661:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2671:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2681:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2691:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    26a1:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    26b1:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    26c1:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    26d1:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    26e1:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    26f1:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2701:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2711:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2721:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2731:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2741:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2751:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2761:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2771:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2781:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2791:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    27a1:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    27b1:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    27c1:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    27d1:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    27e1:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    27f1:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2801:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2811:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2821:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2831:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2841:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2851:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2861:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2871:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2881:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2891:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    28a1:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    28b1:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    28c1:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    28d1:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    28e1:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    28f1:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2901:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2911:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2921:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2931:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2941:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2951:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2961:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2971:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2981:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2991:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    29a1:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    29b1:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    29c1:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    29d1:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    29e1:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    29f1:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    2a01:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    2a11:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2a21:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    2a31:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2a41:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    2a51:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2a61:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    2a71:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    2a81:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    2a91:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    2aa1:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2ab1:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    2ac1:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    2ad1:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2ae1:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2af1:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2b01:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    2b11:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2b21:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2b31:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2b41:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    2b51:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    2b61:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    2b71:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2b81:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    2b91:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2ba1:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2bb1:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2bc1:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2bd1:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2be1:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2bf1:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    2c01:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2c11:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2c21:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2c31:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2c41:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    2c51:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    2c61:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    2c71:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    2c81:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    2c91:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    2ca1:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2cb1:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2cc1:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2cd1:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2ce1:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    2cf1:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    2d01:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2d11:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2d21:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2d31:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    2d41:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2d51:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2d61:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    2d71:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    2d81:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d91:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    2da1:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    2db1:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    2dc1:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    2dd1:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2de1:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    2df1:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    2e01:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2e11:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    2e21:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2e31:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2e41:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2e51:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2e61:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    2e71:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    2e81:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    2e91:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    2ea1:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    2eb1:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    2ec1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ed1:	00 00 00 fe fe fe fe fe fe 00 00 00 fe fe fe fe     ................
    2ee1:	fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe fe     ................
    2ef1:	fe fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe     ................
    2f01:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00002f11 <map_hazard_desert>:
    2f11:	01 01 28                                            ..(

00002f14 <map_hazard_city>:
    2f14:	01 01 29                                            ..)

00002f17 <map_hazard_jungle>:
    2f17:	01 01 27                                            ..'

00002f1a <map_hazard_fire>:
    2f1a:	01 01 26                                            ..&

00002f1d <map_hazard_ice>:
    2f1d:	01 01 25                                            ..%

00002f20 <map_enemy_boss_shot>:
    2f20:	01 01 39                                            ..9

00002f23 <map_enemy_boss_eye>:
    2f23:	01 01 37                                            ..7

00002f26 <map_enemy_boss_turret>:
    2f26:	01 01 36                                            ..6

00002f29 <map_enemy_drone>:
    2f29:	01 01 35                                            ..5

00002f2c <map_enemy_tank>:
    2f2c:	01 01 24                                            ..$

00002f2f <map_enemy_ball>:
    2f2f:	01 01 14                                            ...

00002f32 <map_enemy_spider_1>:
    2f32:	01 01 34                                            ..4

00002f35 <map_enemy_spider_0>:
    2f35:	01 01 23                                            ..#

00002f38 <map_enemy_xwing>:
    2f38:	01 01 3a                                            ..:

00002f3b <map_enemy_shark>:
    2f3b:	01 01 05                                            ...

00002f3e <map_enemy_shot>:
    2f3e:	01 01 13                                            ...

00002f41 <map_ahero_jump>:
    2f41:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

00002f49 <map_ahero_step_3>:
    2f49:	02 03 4e 4f 53 54 5b 61                             ..NOST[a

00002f51 <map_ahero_step_2>:
    2f51:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

00002f59 <map_ahero_step_1>:
    2f59:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

00002f61 <map_ahero_step_0>:
    2f61:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

00002f69 <map_ahero_idle>:
    2f69:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

00002f71 <map_hero_rplasma_shot>:
    2f71:	01 01 38                                            ..8

00002f74 <map_hero_space_bomb>:
    2f74:	01 01 18                                            ...

00002f77 <map_hero_space_shot>:
    2f77:	01 01 17                                            ...

00002f7a <map_hero_ice_shot>:
    2f7a:	01 01 16                                            ...

00002f7d <map_hero_ball_shot>:
    2f7d:	01 01 15                                            ...

00002f80 <map_hero_gplasma_shot>:
    2f80:	01 01 04                                            ...

00002f83 <map_hero_ship_large_1>:
    2f83:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

00002f8d <map_hero_ship_large_0>:
    2f8d:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

00002f97 <map_hero_ship_1>:
    2f97:	03 01 3b 2b 2c                                      ..;+,

00002f9c <map_hero_ship_0>:
    2f9c:	03 01 2a 2b 2c                                      ..*+,

00002fa1 <map_hero_prone>:
    2fa1:	03 01 47 48 49                                      ..GHI

00002fa6 <map_hero_jump>:
    2fa6:	02 03 02 03 0f 12 21 22                             ......!"

00002fae <map_hero_step_3>:
    2fae:	02 03 02 03 0f 44 45 46                             .....DEF

00002fb6 <map_hero_step_2>:
    2fb6:	02 03 00 01 0c 11 1f 20                             ....... 

00002fbe <map_hero_step_1>:
    2fbe:	02 03 02 03 0f 10 1d 1e                             ........

00002fc6 <map_hero_step_0>:
    2fc6:	02 03 00 01 0c 0e 1b 1c                             ........

00002fce <map_hero_idle>:
    2fce:	02 03 00 01 0c 0d 19 1a                             ........

00002fd6 <map_emerald_4>:
    2fd6:	01 01 0a                                            ...

00002fd9 <map_emerald_3>:
    2fd9:	01 01 09                                            ...

00002fdc <map_emerald_2>:
    2fdc:	01 01 08                                            ...

00002fdf <map_emerald_1>:
    2fdf:	01 01 07                                            ...

00002fe2 <map_emerald_0>:
    2fe2:	01 01 06                                            ...

00002fe5 <map_explosion_2>:
    2fe5:	01 01 2f                                            ../

00002fe8 <map_explosion_1>:
    2fe8:	01 01 2e                                            ...

00002feb <map_explosion_0>:
    2feb:	01 01 2d                                            ..-

00002fee <map_particle>:
    2fee:	01 01 30                                            ..0

00002ff1 <map_up_arrow>:
    2ff1:	01 01 33                                            ..3

00002ff4 <map_down_arrow>:
    2ff4:	01 01 32                                            ..2

00002ff7 <map_right_arrow>:
    2ff7:	01 01 31                                            ..1

00002ffa <map_none>:
    2ffa:	01 01 14                                            ...

00002ffd <tiles_data>:
	...
    303d:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    304d:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    305d:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    306d:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    307d:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    308d:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    309d:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    30ad:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    30bd:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    30cd:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    30dd:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    30ed:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    30fd:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    310d:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    311d:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    312d:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    313d:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    314d:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    315d:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    316d:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    317d:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    318d:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    319d:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    31ad:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    31bd:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    31cd:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    31dd:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    31ed:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    31fd:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    320d:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    321d:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    322d:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    323d:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    324d:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    325d:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    326d:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    327d:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    328d:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    329d:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    32ad:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    32bd:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    32cd:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    32dd:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    32ed:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    32fd:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    330d:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    331d:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    332d:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    333d:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    334d:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    335d:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    336d:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    337d:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    338d:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    339d:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    33ad:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    33bd:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    33cd:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    33dd:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    33ed:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    33fd:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    340d:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    341d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    342d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    343d:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    344d:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    345d:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    346d:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    347d:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    348d:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    349d:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    34ad:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    34bd:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    34cd:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    34dd:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    34ed:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    34fd:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    350d:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    351d:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    352d:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    353d:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    354d:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    355d:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    356d:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    357d:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    358d:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    359d:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    35ad:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    35bd:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    35cd:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    35dd:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    35ed:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    35fd:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    360d:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    361d:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    362d:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    363d:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    364d:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    365d:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    366d:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    367d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    368d:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    369d:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    36ad:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    36bd:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    36cd:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    36dd:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    36ed:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    36fd:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    370d:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    371d:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    372d:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    373d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    374d:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    377d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    378d:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    379d:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    37ad:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    37bd:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    37cd:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    37dd:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    37ed:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    37fd:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    380d:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    381d:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    382d:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3855:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3865:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3895:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    38a5:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38bd:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    38cd:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    38dd:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    38ed:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    38fd:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    390d:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    391d:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    392d:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    393d:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    394d:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    395d:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    396d:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    397d:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    398d:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    399d:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    39ad:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    39bd:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    39cd:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    39dd:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    39ed:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    39fd:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    3a0d:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    3a1d:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    3a2d:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    3a3d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3a4d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3a5d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3a6d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3a89:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3a99:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3aa9:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3ab9:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3ac9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ad9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ae9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3af9:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3b09:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3b19:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3b29:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3b39:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3b49:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3b59:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3b69:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3b79:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3b89:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3b99:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ba9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3bb9:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3bc9:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3bd9:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3be9:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    3bf9:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3c09:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3c19:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    3c29:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c39:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c65:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c75:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3c85:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3c95:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ca5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3cb5:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    3cc5:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    3cd5:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    3ce5:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    3cf5:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    3d05:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3d15:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    3d25:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3d35:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    3d45:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    3d55:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    3d65:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    3d75:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    3d85:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    3d95:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    3da5:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    3db5:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    3dc5:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3dd5:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3de5:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3df5:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    3e05:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    3e15:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e25:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e35:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    3e45:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    3e55:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3e65:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e7d:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3e8d:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    3e9d:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    3ead:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    3ebd:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3ecd:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3edd:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    3f05:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3f15:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    3f25:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3f45:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    3f55:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    3f65:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    3f85:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    3f95:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    3fa5:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    3fc5:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    3fd5:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    3fe5:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4009:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4019:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4029:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4045:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4055:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4065:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4085:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    4095:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    40a5:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    40c5:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    40d5:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    40e5:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4105:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4115:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4125:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4145:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4155:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4165:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    4185:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    4195:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    41a5:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    41c5:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    41d5:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    41e5:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4205:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4215:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4225:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4245:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4255:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4265:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4285:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4295:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    42a5:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    42c5:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    42d5:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    42e5:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4305:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4315:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4325:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4345:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4355:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4365:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4385:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4395:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    43a5:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    43c9:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    43d9:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    43e9:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4405:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4415:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4425:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4445:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4455:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4465:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4485:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4495:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    44a5:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    44c5:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    44d5:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    44e5:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4505:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4515:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4525:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4545:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4555:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4565:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4585:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4595:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    45a5:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    45c5:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    45d5:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    45e5:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4605:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4615:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4625:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4645:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4655:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4665:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4685:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4695:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    46a5:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    46c5:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    46d5:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    46e5:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4705:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4715:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4725:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4745:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4755:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4765:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4785:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4795:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    47a5:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    47c5:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    47d5:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    47e5:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    47fd:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    480d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    481d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    482d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    483d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    484d:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    485d:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    486d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    487d:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    488d:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    489d:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    48ad:	af af af af af af af af af af af af af af af af     ................
    48bd:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    48cd:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    48dd:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    48ed:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    48fd:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    490d:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    491d:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    492d:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    493d:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    494d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    495d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    496d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    497d:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    498d:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    499d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    49ad:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    49bd:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    49cd:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    49dd:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    49ed:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    49fd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a0d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a1d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a2d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a3d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a4d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a5d:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4a6d:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4a7d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4a8d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4a9d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4aad:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4abd:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4acd:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    4add:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4aed:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4afd:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4b0d:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4b1d:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4b2d:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4b3d:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    4b4d:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4b5d:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4b6d:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b7d:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4b8d:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4b9d:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4bad:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4bbd:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4bcd:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4bdd:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4bed:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    4bfd:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    4c0d:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    4c1d:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    4c2d:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c3d:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    4c4d:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4c5d:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4c6d:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4c7d:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    4c8d:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4c9d:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4cad:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4cbd:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    4ccd:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    4cdd:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4ced:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4cfd:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    4d0d:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4d1d:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4d2d:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4d3d:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    4d4d:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    4d5d:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4d6d:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4d7d:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    4d8d:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    4d9d:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    4dad:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    4dbd:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    4dcd:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    4ddd:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    4ded:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4dfd:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4e0d:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4e1d:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4e2d:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4e3d:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    4e4d:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    4e5d:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    4e6d:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    4e7d:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    4e8d:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    4e9d:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    4ead:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    4ebd:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    4ecd:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    4edd:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    4eed:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    4efd:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    4f0d:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    4f1d:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    4f2d:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    4f3d:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    4f4d:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    4f5d:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    4f6d:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    4f7d:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    4f8d:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    4f9d:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    4fad:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    4fbd:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    4fcd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    4fdd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    4fed:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    4ffd:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    500d:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    501d:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    502d:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    503d:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    504d:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    505d:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    506d:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    507d:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    508d:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    509d:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    50ad:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    50bd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    50cd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    50dd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    50ed:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    50fd:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    510d:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    511d:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    512d:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    513d:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    514d:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    515d:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    516d:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    517d:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    518d:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    519d:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    51ad:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    51bd:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    51cd:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    51dd:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    51ed:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    51fd:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    520d:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    521d:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    522d:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    523d:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    524d:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    525d:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    526d:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    527d:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    528d:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    529d:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    52ad:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    52bd:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    52cd:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    52dd:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    52ed:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    52fd:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    530d:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    531d:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    532d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    533d:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    534d:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    535d:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    536d:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    537d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    538d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    539d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    53ad:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    53bd:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    53d5:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    53e5:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    53f5:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5405:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5415:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5425:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5435:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5445:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5455:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5465:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5475:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5485:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5495:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    54a5:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    54b5:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    54c5:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    54d5:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    54e5:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    54f5:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5505:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5515:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5525:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5535:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5545:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5555:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5565:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5575:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5585:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5595:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    55a5:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    55b5:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    55c5:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    55d5:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    55e5:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    55f5:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5605:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5615:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5625:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5635:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5645:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5655:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5665:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5675:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5685:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5695:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    56a5:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    56b5:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    56c5:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    56d5:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56e5:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56f5:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5705:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5715:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5725:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5735:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5745:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5755:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5765:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5775:	5c 5c 5c 5c 5c 5c 5c 5c 00 00 00 00 00 00 00 00     \\\\\\\\........
    5785:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5795:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    57a5:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    57b5:	00 00 00 00 00 00 00 a4                             ........

000057bd <map_font>:
    57bd:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    57cd:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    57dd:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

000057e4 <map_atmosphere>:
    57e4:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    57f4:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5804:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5814:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

0000581e <map_dialog>:
    581e:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    582e:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    583e:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    584e:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    585e:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    586e:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    587e:	31 32                                               12

00005880 <map_canvas>:
    5880:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    5890:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    58a0:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    58bc:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    58cc:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    58dc:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    58f8:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5908:	32                                                  2

00005909 <map_splash>:
    5909:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    5919:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    5929:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    5939:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    5949:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

00005956 <map_tile_none>:
    5956:	01 01 00                                            ...

00005959 <map_level_mega_tiles>:
    5959:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5969:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    5979:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5989:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    5999:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    59a9:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    59b9:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    59c9:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    59d9:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    59e9:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    59f9:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5a09:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5a19:	02 02 02 63 63 04 11 11 63 63 63 63 63 63 63 63     ...cc...cccccccc
    5a29:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5a39:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5a49:	02 02 63 63 63 11 04 63 63 63 63 63 63 63 63 63     ..ccc..ccccccccc
    5a59:	63 63 63 63 63 63 63 63 63 63 63 64 63 63 63 63     cccccccccccdcccc
    5a69:	65 66 67 63 63 63 63 63 63 63 63 63 63 63 02 02     efgccccccccccc..
    5a79:	02 02 63 04 04 04 04 02 04 04 04 04 63 63 63 63     ..c.........cccc
    5a89:	63 63 63 02 63 63 02 02 04 02 02 04 04 04 04 04     ccc.cc..........
    5a99:	04 04 04 04 04 63 63 63 63 63 63 63 63 63 63 02     .....cccccccccc.
    5aa9:	02 02 02 02 04 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    5ab9:	63 63 63 63 63 02 63 63 02 02 04 02 63 04 04 04     ccccc.cc....c...
    5ac9:	04 02 04 04 04 04 04 63 63 63 63 63 63 63 63 63     .......ccccccccc
    5ad9:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 02     ccccccccccccccc.
    5ae9:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5af9:	63 63 63 63 02 63 63 63 02 63 63 63 63 63 63 63     cccc.ccc.ccccccc
    5b09:	63 63 02 63 63 63 63 04 63 63 63 63 63 02 63 63     cc.cccc.ccccc.cc
    5b19:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5b29:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5b39:	02 02 02 02 63 11 11 11 04 63 63 63 63 63 63 63     ....c....ccccccc
    5b49:	63 63 63 63 63 63 63 63 63 02 02 02 02 02 04 11     ccccccccc.......
    5b59:	11 11 04 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5b69:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5b79:	63 02 02 02 02 02 67 66 68 63 63 63 63 68 67 66     c.....gfhcccchgf
    5b89:	66 67 68 63 63 63 63 69 63 63 02 02 02 02 02 63     fghccccicc.....c
    5b99:	63 63 63 63 63 63 63 02 02 63 63 63 04 04 02 02     ccccccc..ccc....
    5ba9:	02 04 04 04 04 04 04 04 63 63 63 63 63 02 02 02     ........ccccc...
    5bb9:	63 63 04 04 04 02 63 04 04 04 04 02 04 04 04 04     cc....c.........
    5bc9:	04 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5bd9:	63 63 63 63 02 02 02 02 02 04 63 63 63 63 63 63     cccc......cccccc
    5be9:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 18 18     cccccccccccccc..
    5bf9:	18 18 18 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5c09:	63 63 02 63 63 63 02 04 02 02 02 04 63 63 63 63     cc.ccc......cccc
    5c19:	63 63 63 63 63 63 63 63 63 63 63 02 63 63 63 63     ccccccccccc.cccc
    5c29:	04 02 02 02 02 63 63 63 63 02 63 63 63 02 04 63     .....cccc.ccc..c
    5c39:	63 02 04 04 63 02 04 04 04 02 04 04 04 04 02 02     c...c...........
    5c49:	02 02 02 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5c59:	04 04 04 04 04 04 04 02 02 02 02 04 04 04 04 04     ................
    5c69:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5c79:	18 18 18 18 18 04 04 04 04 04 04 04 04 04 04 04     ................
    5c89:	04 04 04 04 04 04 04 04 04 04 02 02 02 04 04 04     ................
    5c99:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5ca9:	04 04 04 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    5cb9:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    5cc9:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    5cd9:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    5ce9:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    5cf9:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5d09:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    5d19:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5d29:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5d39:	6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lll.llllllllllll
    5d49:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05     lllllllllllllll.
    5d59:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5d69:	06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c     .....lllllllll.l
    5d79:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    5d89:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    5d99:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    5da9:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5db9:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    5dc9:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    5dd9:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5de9:	6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    5df9:	6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 13 13 13     llllll..lll.....
    5e09:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5e19:	6c 6c 6c 6c 13 13 13 13 13 6c 6c 6c 6c 6c 6c 6c     llll.....lllllll
    5e29:	6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 06     llllllll..lll...
    5e39:	06 06 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     .......lllllllll
    5e49:	6c 6c 6c 6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 06     llllll.....llll.
    5e59:	6c 6c 6c 06 05 6c 6c 06 05 05 06 06 05 05 05 05     lll..ll.........
    5e69:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e79:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e89:	05 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e99:	05 05 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c     ......lllll.llll
    5ea9:	05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 13 13 6c     ..lll...ll.....l
    5eb9:	6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 6c 06     lll.lll..ll...l.
    5ec9:	05 05 05 06 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c     ........lllll.ll
    5ed9:	6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 05     ll..lll...ll....
    5ee9:	05 6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05     .llll.lll..ll...
    5ef9:	6c 06 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c 06     l.........lllll.
    5f09:	6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05     llll..lll...ll..
    5f19:	05 06 06 72 73 74 74 73 74 73 74 74 73 74 73 74     ...rsttststtstst
    5f29:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    5f39:	73 74 73 74 74 73 74 73 74 74 73 74 73 74 74 73     ststtststtststts
    5f49:	74 73 74 74 73 74 73 74 74 75 74 73 74 74 73 74     tsttststtutsttst
    5f59:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 76 73     sttststtststtsvs
    5f69:	74 74 73 78 78 78 78 78 78 78 78 78 78 78 78 78     ttsxxxxxxxxxxxxx
    5f79:	78 78 78 78 78 78 78 74 73 74 74 73 79 7a 79 79     xxxxxxxtsttsyzyy
    5f89:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c     z{|{{|yzyyz{|{{|
    5f99:	74 73 74 74 77 78 78 78 78 78 78 78 78 78 78 78     tsttwxxxxxxxxxxx
    5fa9:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    5fb9:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    5fc9:	78 78 79 7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79     xxyzyyz{|{{|yzyy
    5fd9:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 0d 0e 0e 0d 0e     z{|{{|yzyyz.....
    5fe9:	78 78 12 78 78 78 78 78 78 78 78 78 78 78 78 78     xx.xxxxxxxxxxxxx
    5ff9:	78 78 78 78 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     xxxx{|{{|yzyyz{|
    6009:	7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78     {{|yzyyz{|{{|xxx
    6019:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6029:	78 07 07 07 07 07 79 7a 79 79 7a 7b 7c 7b 7b 7c     x.....yzyyz{|{{|
    6039:	79 7a 79 79 7a 7b 7c 7b 7b 7c 07 07 07 07 07 0d     yzyyz{|{{|......
    6049:	0e 0e 0d 0e 78 78 78 78 78 78 78 78 78 78 78 78     ....xxxxxxxxxxxx
    6059:	78 78 78 07 07 07 07 07 78 78 78 78 78 78 07 07     xxx.....xxxxxx..
    6069:	07 07 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    6079:	05 78 78 78 78 78 07 07 07 07 78 05 05 05 05 78     .xxxxx....x....x
    6089:	05 05 05 05 07 05 05 05 05 05 78 78 78 78 78 78     ..........xxxxxx
    6099:	78 78 78 78 78 78 78 78 78 07 78 78 78 78 05 14     xxxxxxxxx.xxxx..
    60a9:	14 14 14 78 78 78 78 78 78 78 78 78 78 78 78 78     ...xxxxxxxxxxxxx
    60b9:	78 78 78 78 78 78 07 14 14 14 14 05 0d 0e 0e 0d     xxxxxx..........
    60c9:	0e 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     .xxxxxxxxxx.xxxx
    60d9:	05 14 14 14 14 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d     .....}}}}}}}}}}}
    60e9:	0f 81 7d 0f 85 85 85 85 85 85 85 85 85 85 7d 7d     ..}...........}}
    60f9:	7d 7d 7d 7d 7d 7d 7e 7f 81 7d 0f 82 83 85 85 85     }}}}}}~..}......
    6109:	86 87 85 85 85 89 8a 7d 7d 7d 7d 7d 80 7d 7d 7d     .......}}}}}.}}}
    6119:	7d 84 81 7d 0f 81 88 85 85 85 85 84 85 85 85 85     }..}............
    6129:	7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 81 7d 0f 81 7d 85     }}}}}}}}}}.}..}.
    6139:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6149:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6159:	85 85 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    6169:	87 85 85 85 89 8a 85 85 85 86 87 88 85 85 85 85     ................
    6179:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 88     ................
    6189:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6199:	85 85 8b 85 85 85 8b 60 85 85 8b 60 60 85 85 85     .......`...``...
    61a9:	89 8a 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    61b9:	87 85 85 85 89 8a 84 85 85 85 85 88 85 85 85 85     ................
    61c9:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 85     ................
    61d9:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    61e9:	8c 8c 8c 85 85 8c 8c 8c 85 85 85 86 87 85 8d 85     ................
    61f9:	89 8a 8d 8e 85 85 8f 90 90 90 90 90 90 90 90 90     ................
    6209:	90 88 85 85 85 85 84 85 85 85 85 85 85 85 85 85     ................
    6219:	85 85 85 85 85 85 85 85 85 85 85 8c 8c 8c 8c 85     ................
    6229:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c     ................
    6239:	8c 8c 8c 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6249:	85 85 85 85 90 90 90 85 85 90 90 90 85 09 09 09     ................
    6259:	09 85 8d 85 89 8a 8d 8e 85 85 8f 90 90 90 90 90     ................
    6269:	90 90 90 90 90 09 85 85 85 85 84 85 85 85 85 85     ................
    6279:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6289:	85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    6299:	8c 8c 85 8c 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c     ................
    62a9:	8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09 09     ........```.....
    62b9:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    62c9:	90 90 90 90 09 09 09 09 09 85 85 85 85 85 85 8c     ................
    62d9:	8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09 09     .........``.....
    62e9:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    62f9:	8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90 90     ..````..........
    6309:	85 85 90 90 90 85 85 90 90 90 85 85 90 90 90 09     ................
    6319:	09 09 09 09 85 09 09 09 09 85 85 8c 8c 8c 85 85     ................
    6329:	8c 8c 8c 85 85 60 60 60 09 09 09 09 09 09 90 90     .....```........
    6339:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6349:	90 09 09 09 09 09 85 09 09 09 09 85 8c 8c 85 85     ................
    6359:	85 8c 8c 90 85 85 60 60 90 85 09 09 09 09 09 09     ......``........
    6369:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 60     ...............`
    6379:	60 60 60 09 09 09 09 09 85 85 90 90 90 85 85 90     ```.............
    6389:	90 90 85 85 90 90 90 85 09 90 90 90 09 08 15 15     ................
    6399:	15 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c     ................
    63a9:	85 85 09 60 60 15 15 08 09 09 90 90 90 90 90 90     ...``...........
    63b9:	90 90 90 90 90 90 90 90 90 90 90 90 09 90 09 09     ................
    63c9:	09 08 15 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    63d9:	85 85 85 85 85 85 09 15 15 15 15 08 90 90 90 90     ................
    63e9:	90 90 90 90 90 09 90 90 90 09 08 90 90 09 08 08     ................
    63f9:	09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c 15     ................
    6409:	15 15 15 15 08 08 08 08 08 08 08 08 08 08 85 8c     ................
    6419:	8c 8c 8c 85 09 09 8c 8c 15 08 08 15 15 08 08 08     ................
    6429:	08 08 08 08 08 08 08 85 85 90 90 90 85 85 09 09     ................
    6439:	90 15 15 08 08 15 08 08 08 08 08 08 08 08 08 08     ................
    6449:	85 85 8c 8c 8c 85 85 09 09 09 15 15 08 08 08 08     ................
    6459:	08 08 08 08 08 08 08 08 08 90 90 90 90 90 90 90     ................
    6469:	90 90 90 09 90 90 90 90 08 09 90 90 90 08 08 09     ................
    6479:	09 09 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6489:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6499:	91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 93     ................
    64a9:	93 93 93 93 91 91 91 91 91 91 91 91 91 91 91 91     ................
    64b9:	91 91 91 92 92 92 92 92 93 93 94 93 93 93 93 93     ................
    64c9:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    64d9:	93 93 93 93 93 93 93 95 96 97 93 95 96 96 96 97     ................
    64e9:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    64f9:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6509:	93 93 93 93 93 94 93 93 93 93 93 93 93 93 93 94     ................
    6519:	93 93 93 95 96 97 93 95 96 96 96 97 93 93 93 93     ................
    6529:	93 93 98 99 9a 93 95 9b 10 9c 97 93 93 93 93 93     ................
    6539:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6549:	93 94 93 93 93 98 99 9a 93 95 9b 10 9c 97 93 93     ................
    6559:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    6569:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6579:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6589:	93 93 93 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    6599:	93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93 93     ................
    65a9:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    65b9:	93 93 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 93 93 93 93     ................
    65c9:	93 93 93 93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a     ................
    65d9:	93 93 93 0a 0a 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a     ................
    65e9:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a 0a 0a 0a 0b 0b     ................
    65f9:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6609:	0b 0b 9d 0a 0a 93 93 0b 0b 0b 0a 93 0b 0b 0b 0b     ................
    6619:	0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 93 93 93 0a 16     ................
    6629:	93 93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b     ................
    6639:	0a 0a 0a 0a 16 16 16 16 0a 93 93 93 93 93 93 93     ................
    6649:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    6659:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6669:	0a 0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93     ................
    6679:	93 93 93 93 93 93 93 93 93 93 17 17 17 17 17 93     ................
    6689:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    6699:	93 93 93 0b 0b 17 17 17 93 93 93 93 93 93 93 93     ................
    66a9:	93 93 93 93 93 93 93 93 93 0a 0a 93 17 17 0b 0b     ................
    66b9:	17 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    66c9:	93 93 93 93 0a 17 17 17 17 0b 93 93 93 93 93 93     ................
    66d9:	93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 17     ................
    66e9:	17 17 17 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    66f9:	93 93 93 0a 93 93 93 17 0b 0a 0a 0a 0a 0a 0a 9d     ................
    6709:	0a 0a 16 16 16 0a 93 93 93 93 93 93 93 93 93 93     ................
    6719:	0a 0a 0a 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    6729:	93 93 93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 00 21     ...............!
	...
    6745:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6755:	00 00 00 00 22 00 21 00 00 00 00 00 00 00 00 00     ....".!.........
    6765:	00 00 00 21 00 00 00 00 00 00 00 22 00 00 00 21     ...!......."...!
	...
    677d:	00 00 00 22 00 22 00 00 00 00 00 00 00 00 00 00     ..."."..........
    678d:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 21     !..............!
    679d:	19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21 00     ..............!.
    67ad:	00 00 00 00 00 00 00 19 19 19 19 19 19 19 19 19     ................
    67bd:	19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00 00 21     ...............!
    67cd:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
    67dd:	21 00 00 00 00 00 00 00 00 19 19 9e 9e 9e 19 19     !...............
    67ed:	19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00     ................
    67fd:	00 21 9e 9e 9e 9e 9e 19 19 19 19 19 1a 1a 1a 1a     .!..............
    680d:	1a 00 21 00 00 00 00 00 00 00 00 9e 9e 19 19 19     ..!.............
    681d:	19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00     ................
    682d:	00 00 00 21 19 19 19 19 19 19 19 19 19 19 1a 1a     ...!............
    683d:	1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00 00 00     ................
    684d:	00 00 00 00 22 00 00 00 21 00 00 00 00 00 00 1a     ...."...!.......
    685d:	1a 00 00 00 22 00 22 00 00 00 00 00 00 00 00 00     ....".".........
    686d:	00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00 1b 19     .!..............
    687d:	19 00 00 00 19 19 22 00 00 19 19 00 00 00 1a 1a     ......".........
    688d:	1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00 00 1b     ......".........
    689d:	1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00 00 1b     ...!............
    68ad:	1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    68bd:	1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00 00 00     ................
    68cd:	00 22 1a 1a 00 21 00 00 00 00 00 00 00 00 00 00     ."...!..........
    68dd:	00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00 21 00     ."."..........!.
	...
    68f9:	1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00 19     ................
    6909:	19 00 00 00 19 19 00 22 00 00 21 00 00 00 00 00     ......."..!.....
    6919:	00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00 19     .........!......
    6929:	19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a 1a     ..........."....
    6939:	1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00 00     ............!...
    6949:	00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19 19     ................
    6959:	19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a 1a     ................
    6969:	1a 1a 1a 19 19 19 19 19 19 19 19 19 19              .............

00006976 <map_level_space_final>:
    6976:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6986:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6996:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 92 93 94 93     ................
    69a6:	94 95 96 97 98 90 91 90 91 90 91 90 91 90 91 90     ................
    69b6:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    69c6:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    69d6:	91 90 91 90 91 99 9a 9b 8e 8f 8e 8f 8e 8f 8e 8f     ................
    69e6:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    69f6:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6a06:	8e 8f 8e 8f 8e 8f 8e 8f 8e 9c 9d 90 91 90 91 90     ................
    6a16:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6a26:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6a36:	91 90 91 90 91 90 91 90 91 90 91 9e 9f a0 8e 8f     ................
    6a46:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6a56:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6a66:	8e 8f 8e 8f 8e 8f 8e 8f a1 a2 a3 a2 a3 a2 a3 a2     ................
    6a76:	a4                                                  .

00006a77 <map_level_space>:
    6a77:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6a87:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6a97:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6aa7:	8e 8f 8e 8f 8e 90 91 90 91 90 91 90 91 90 91 90     ................
    6ab7:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ac7:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ad7:	91 90 91 90 91 90 91 90 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ae7:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6af7:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b07:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 90 91 90 91 90     ................
    6b17:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b27:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b37:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 8e 8f     ................
    6b47:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b57:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b67:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b77:	8e                                                  .

00006b78 <map_level_desert>:
    6b78:	33 05 72 72 72 72 72 72 72 72 72 72 72 72 72 72     3.rrrrrrrrrrrrrr
    6b88:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6b98:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6ba8:	72 72 72 72 72 73 74 73 73 73 74 73 73 73 74 73     rrrrrstssstsssts
    6bb8:	73 73 74 73 73 73 73 73 73 73 74 73 73 73 74 73     sstssssssstsssts
    6bc8:	73 73 74 73 73 73 74 73 73 73 73 73 73 73 73 73     sstssstsssssssss
    6bd8:	73 73 73 73 73 73 73 73 75 76 75 77 75 76 75 78     ssssssssuvuwuvux
    6be8:	75 79 75 77 75 79 75 78 75 7a 75 77 75 79 75 78     uyuwuyuxuzuwuyux
    6bf8:	75 79 75 77 75 79 75 78 75 79 75 77 75 77 75 78     uyuwuyuxuyuwuwux
    6c08:	75 7a 75 77 75 77 75 78 75 78 75 75 75 75 76 75     uzuwuwuxuxuuuuvu
    6c18:	7b 75 75 75 75 75 76 7c 7d 75 75 75 75 75 76 75     {uuuuuv|}uuuuuvu
    6c28:	75 75 75 75 75 75 76 75 75 75 75 75 75 75 76 75     uuuuuuvuuuuuuuvu
    6c38:	79 75 75 75 75 75 76 75 76 75 75 75 75 75 7e 7e     yuuuuuvuvuuuuu~~
    6c48:	7e 7e 7f 7e 7f 7e 80 81 81 82 83 84 7e 7e 85 86     ~~.~.~......~~..
    6c58:	87 88 89 8a 8b 7e 7f 7e 7f 7e 8c 7e 7e 7e 80 81     .....~.~.~.~~~..
    6c68:	81 82 8d 7e 7e 7e 7e 8a 8b 7e 7e 7e 7e 7e 7e 7e     ...~~~~..~~~~~~~
    6c78:	7e                                                  ~

00006c79 <map_level_city>:
    6c79:	33 05 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d     3.MNOMPMNOMPMNOM
    6c89:	50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50     PMNOMPMNOMPMNOMP
    6c99:	4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d     MNOMPMNOMPMNOMPM
    6ca9:	4e 4f 4d 50 4d 51 52 53 51 51 51 52 53 51 51 51     NOMPMQRSQQQRSQQQ
    6cb9:	52 53 51 51 51 52 53 51 51 51 52 53 51 51 51 52     RSQQQRSQQQRSQQQR
    6cc9:	53 51 51 51 52 53 51 51 51 52 53 51 51 51 52 53     SQQQRSQQQRSQQQRS
    6cd9:	51 51 51 52 53 51 51 51 54 55 56 51 51 54 55 56     QQQRSQQQTUVQQTUV
    6ce9:	51 51 54 55 56 51 51 54 55 56 51 51 54 55 56 51     QQTUVQQTUVQQTUVQ
    6cf9:	51 54 55 56 51 51 54 55 56 51 51 54 55 56 51 51     QTUVQQTUVQQTUVQQ
    6d09:	54 55 56 51 51 54 55 56 51 51 54 57 58 59 5a 5b     TUVQQTUVQQTWXYZ[
    6d19:	57 5c 5d 5a 5b 57 58 59 5a 5b 57 5c 5d 5a 5b 57     W\]Z[WXYZ[W\]Z[W
    6d29:	58 59 5e 5b 57 58 59 5a 5b 57 58 59 5a 5b 57 58     XY^[WXYZ[WXYZ[WX
    6d39:	59 5a 5b 57 5c 5d 5a 5b 57 58 59 5a 5b 57 5f 60     YZ[W\]Z[WXYZ[W_`
    6d49:	61 62 63 64 65 66 67 68 69 6a 6b 62 63 64 65 66     abcdefghijkbcdef
    6d59:	67 63 5f 6c 6d 6e 6f 70 71 61 62 63 5f 6c 6d 6e     gc_lmnopqabc_lmn
    6d69:	6f 70 71 61 62 63 64 65 66 67 63 5f 60 61 62 63     opqabcdefgc_`abc
    6d79:	5f                                                  _

00006d7a <map_level_forest>:
    6d7a:	33 05 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     3.;<=;<=;<=;<=;<
    6d8a:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    6d9a:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    6daa:	3c 3d 3b 3c 3d 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f     <=;<=>?@>?@>?@>?
    6dba:	40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40     @>?@>?@>?@>?@>?@
    6dca:	3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e     >?@>?@>?@>?@>?@>
    6dda:	3f 40 3e 3f 40 3e 3f 40 41 42 41 41 42 41 41 42     ?@>?@>?@ABAABAAB
    6dea:	41 41 42 41 41 42 41 41 42 43 41 42 41 41 42 41     AABAABAABCABAABA
    6dfa:	41 42 41 41 42 41 41 42 41 41 42 43 41 42 43 41     ABAABAABAABCABCA
    6e0a:	42 41 41 42 41 41 42 41 41 42 41 41 44 41 41 44     BAABAABAABAADAAD
    6e1a:	41 41 44 43 41 44 43 41 44 41 43 44 41 41 44 41     AADCADCADACDAADA
    6e2a:	41 44 41 41 44 41 41 44 41 41 44 41 41 44 41 41     ADAADAADAADAADAA
    6e3a:	44 41 41 44 41 41 44 43 41 44 41 41 44 41 45 46     DAADAADCADAADAEF
    6e4a:	45 45 46 45 47 46 45 47 46 45 47 46 45 45 46 48     EEFEGFEGFEGFEEFH
    6e5a:	49 46 48 49 46 48 49 46 4a 4b 46 4c 4b 46 47 45     IFHIFHIFJKFLKFGE
    6e6a:	46 4a 4b 46 4a 4b 46 4a 4b 46 45 45 46 45 45 46     FJKFJKFJKFEEFEEF
    6e7a:	45                                                  E

00006e7b <map_level_fire>:
    6e7b:	33 05 23 23 23 23 23 23 23 23 23 23 23 23 23 23     3.##############
    6e8b:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6e9b:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6eab:	23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24     #####$$$$$$$$$$$
    6ebb:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6ecb:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6edb:	24 24 24 24 24 24 24 24 25 26 25 25 25 25 26 25     $$$$$$$$%&%%%%&%
    6eeb:	25 25 25 26 25 25 25 25 25 25 25 26 25 25 25 25     %%%&%%%%%%%&%%%%
    6efb:	25 25 25 25 25 27 28 26 25 25 25 25 26 25 25 25     %%%%%'(&%%%%&%%%
    6f0b:	25 25 25 25 25 25 25 26 25 25 25 25 25 25 25 25     %%%%%%%&%%%%%%%%
    6f1b:	25 25 25 25 25 25 25 25 25 25 25 25 29 25 25 25     %%%%%%%%%%%%)%%%
    6f2b:	25 25 25 25 25 25 25 2a 2b 2c 2d 25 25 25 25 25     %%%%%%%*+,-%%%%%
    6f3b:	25 27 28 25 25 27 28 25 25 25 25 25 25 25 2e 2e     %'(%%'(%%%%%%%..
    6f4b:	2f 30 2f 30 2f 30 2f 30 31 2e 32 2e 2e 32 2e 2e     /0/0/0/01.2..2..
    6f5b:	2e 32 2e 2e 2e 2f 30 2f 30 33 34 34 34 35 36 30     .2.../0/03444560
    6f6b:	2f 30 31 37 2b 2c 38 39 2b 2c 3a 2e 2e 2e 2e 2e     /017+,89+,:.....
    6f7b:	2e                                                  .

00006f7c <map_level_ice>:
    6f7c:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    6f8c:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    6f9c:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    6fac:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    6fbc:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    6fcc:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    6fdc:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    6fec:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    6ffc:	06 06 06 06 06 06 06 06 06 06 06 07 08 09 06 06     ................
    700c:	06 06 06 06 06 06 06 06 06 06 06 06 06 0a 06 06     ................
    701c:	06 06 06 0b 0c 0d 0e 06 06 06 0a 06 06 06 06 06     ................
    702c:	06 06 06 06 06 0f 06 10 06 10 06 11 12 13 06 06     ................
    703c:	06 14 06 06 0a 06 06 06 06 06 06 06 06 06 15 15     ................
    704c:	16 15 15 15 15 17 02 02 02 02 18 15 15 16 19 1a     ................
    705c:	1b 1a 1b 1a 1c 1d 1e 1e 1f 20 21 20 21 20 22 15     ......... ! ! ".
    706c:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    707c:	15 00                                               ..

0000707e <__ctors_end>:
    707e:	11 24       	eor	r1, r1
    7080:	1f be       	out	0x3f, r1	; 63
    7082:	cf ef       	ldi	r28, 0xFF	; 255
    7084:	d0 e1       	ldi	r29, 0x10	; 16
    7086:	de bf       	out	0x3e, r29	; 62
    7088:	cd bf       	out	0x3d, r28	; 61

0000708a <__do_copy_data>:
    708a:	15 e0       	ldi	r17, 0x05	; 5
    708c:	a0 e0       	ldi	r26, 0x00	; 0
    708e:	b5 e0       	ldi	r27, 0x05	; 5
    7090:	ee e5       	ldi	r30, 0x5E	; 94
    7092:	f5 ee       	ldi	r31, 0xE5	; 229
    7094:	02 c0       	rjmp	.+4      	; 0x709a <__do_copy_data+0x10>
    7096:	05 90       	lpm	r0, Z+
    7098:	0d 92       	st	X+, r0
    709a:	a0 31       	cpi	r26, 0x10	; 16
    709c:	b1 07       	cpc	r27, r17
    709e:	d9 f7       	brne	.-10     	; 0x7096 <__do_copy_data+0xc>

000070a0 <__do_clear_bss>:
    70a0:	10 e1       	ldi	r17, 0x10	; 16
    70a2:	a0 e1       	ldi	r26, 0x10	; 16
    70a4:	b5 e0       	ldi	r27, 0x05	; 5
    70a6:	01 c0       	rjmp	.+2      	; 0x70aa <.do_clear_bss_start>

000070a8 <.do_clear_bss_loop>:
    70a8:	1d 92       	st	X+, r1

000070aa <.do_clear_bss_start>:
    70aa:	ab 35       	cpi	r26, 0x5B	; 91
    70ac:	b1 07       	cpc	r27, r17
    70ae:	e1 f7       	brne	.-8      	; 0x70a8 <.do_clear_bss_loop>

000070b0 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    70b0:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <wdt_randomize>
#endif

    MCUSR = 0;
    70b4:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    70b6:	88 e1       	ldi	r24, 0x18	; 24
    70b8:	0f b6       	in	r0, 0x3f	; 63
    70ba:	f8 94       	cli
    70bc:	80 93 60 00 	sts	0x0060, r24
    70c0:	10 92 60 00 	sts	0x0060, r1
    70c4:	0f be       	out	0x3f, r0	; 63

000070c6 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    70c6:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <isEepromFormatted>
    70ca:	81 11       	cpse	r24, r1
    70cc:	02 c0       	rjmp	.+4      	; 0x70d2 <Initialize+0xc>
    70ce:	0e 94 a0 3e 	call	0x7d40	; 0x7d40 <FormatEeprom>

	cli();
    70d2:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    70d4:	81 e0       	ldi	r24, 0x01	; 1
    70d6:	80 93 e6 0c 	sts	0x0CE6, r24
		tr4_barrel_hi=1;		
    70da:	80 93 e7 0c 	sts	0x0CE7, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    70de:	80 93 e5 0c 	sts	0x0CE5, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    70e2:	10 92 d2 0c 	sts	0x0CD2, r1
    70e6:	10 92 d8 0c 	sts	0x0CD8, r1
    70ea:	10 92 de 0c 	sts	0x0CDE, r1
    70ee:	10 92 e4 0c 	sts	0x0CE4, r1
    70f2:	10 92 ea 0c 	sts	0x0CEA, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    70f6:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_flags=0;
    70fa:	10 92 ba 0c 	sts	0x0CBA, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    70fe:	92 e1       	ldi	r25, 0x12	; 18
    7100:	90 93 b9 0c 	sts	0x0CB9, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7104:	90 ee       	ldi	r25, 0xE0	; 224
    7106:	90 93 c0 0c 	sts	0x0CC0, r25
	first_render_line=FIRST_RENDER_LINE;
    710a:	94 e1       	ldi	r25, 0x14	; 20
    710c:	90 93 bf 0c 	sts	0x0CBF, r25

	joypad1_status_hi=0;
    7110:	10 92 c4 0c 	sts	0x0CC4, r1
    7114:	10 92 c3 0c 	sts	0x0CC3, r1
	joypad2_status_hi=0;
    7118:	10 92 c8 0c 	sts	0x0CC8, r1
    711c:	10 92 c7 0c 	sts	0x0CC7, r1
	sound_enabled=1;
    7120:	80 93 d1 0c 	sts	0x0CD1, r24

	InitializeVideoMode();
    7124:	0e 94 a7 4b 	call	0x974e	; 0x974e <InitializeVideoMode>
    7128:	86 e9       	ldi	r24, 0x96	; 150
    712a:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    712c:	fc 01       	movw	r30, r24
    712e:	25 91       	lpm	r18, Z+
    7130:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7132:	f9 01       	movw	r30, r18
    7134:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7136:	30 83       	st	Z, r19
    7138:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    713a:	20 e0       	ldi	r18, 0x00	; 0
    713c:	84 3c       	cpi	r24, 0xC4	; 196
    713e:	92 07       	cpc	r25, r18
    7140:	a9 f7       	brne	.-22     	; 0x712c <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7142:	78 94       	sei
	
	DisplayLogo();
    7144:	0e 94 a6 4b 	call	0x974c	; 0x974c <DisplayLogo>
    7148:	0e 94 48 70 	call	0xe090	; 0xe090 <main>
    714c:	0c 94 ad 72 	jmp	0xe55a	; 0xe55a <_exit>

00007150 <__bad_interrupt>:
    7150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007154 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    7154:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7156:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    715a:	ad e8       	ldi	r26, 0x8D	; 141
    715c:	aa 95       	dec	r26
    715e:	f1 f7       	brne	.-4      	; 0x715c <sub_video_mode3+0x8>
    7160:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,user_ram_tiles_c
    7162:	00 91 a5 0c 	lds	r16, 0x0CA5

		ldi ZL,lo8(ram_tiles_restore);
    7166:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    7168:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    716a:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    716c:	02 9f       	mul	r16, r18
		add ZL,r0
    716e:	e0 0d       	add	r30, r0
		adc ZH,r1
    7170:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    7172:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7174:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7176:	20 91 a4 0c 	lds	r18, 0x0CA4
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    717a:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    717c:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    717e:	30 0f       	add	r19, r16

		cp r18,r16
    7180:	20 17       	cp	r18, r16
		breq no_ramtiles
    7182:	51 f0       	breq	.+20     	; 0x7198 <no_ramtiles>
		nop
    7184:	00 00       	nop
	...

00007188 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7188:	a1 91       	ld	r26, Z+
		ld XH,Z+
    718a:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    718c:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    718e:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    7190:	0c 93       	st	X, r16

		inc r16
    7192:	03 95       	inc	r16
		cp r16,r18
    7194:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7196:	c0 f3       	brcs	.-16     	; 0x7188 <upd_loop>

00007198 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7198:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    719a:	1a 95       	dec	r17
		brne .-4
    719c:	f1 f7       	brne	.-4      	; 0x719a <no_ramtiles+0x2>
		rjmp .
    719e:	00 c0       	rjmp	.+0      	; 0x71a0 <no_ramtiles+0x8>
		dec r19
    71a0:	3a 95       	dec	r19
		brne 1b
    71a2:	d1 f7       	brne	.-12     	; 0x7198 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    71a4:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    71a6:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    71a8:	20 91 b5 0c 	lds	r18, 0x0CB5
		mov r25,r18
    71ac:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    71ae:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    71b0:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    71b2:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    71b4:	00 91 b6 0c 	lds	r16, 0x0CB6
		mov r22,r16
    71b8:	60 2f       	mov	r22, r16
		lsr r16
    71ba:	06 95       	lsr	r16
		lsr r16
    71bc:	06 95       	lsr	r16
		lsr r16 ;/8
    71be:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    71c0:	10 91 b7 0c 	lds	r17, 0x0CB7
        sub r17,r16
    71c4:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    71c6:	f1 2e       	mov	r15, r17

        mov r17,r16
    71c8:	10 2f       	mov	r17, r16
        lsr r16
    71ca:	06 95       	lsr	r16
        lsr r16
    71cc:	06 95       	lsr	r16
        lsr r16 ;/8
    71ce:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    71d0:	d0 0f       	add	r29, r16
		andi r17,0x7
    71d2:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    71d4:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    71d6:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    71d8:	40 91 b3 0c 	lds	r20, 0x0CB3
		lds r21,overlay_tile_table+1
    71dc:	50 91 b4 0c 	lds	r21, 0x0CB4
		lds r6,tile_table_lo
    71e0:	60 90 af 0c 	lds	r6, 0x0CAF
		lds r7,tile_table_hi
    71e4:	70 90 b0 0c 	lds	r7, 0x0CB0
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    71e8:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    71ea:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    71ec:	5e 01       	movw	r10, r28
		mov r23,r22
    71ee:	76 2f       	mov	r23, r22
		mov r24,r15
    71f0:	8f 2d       	mov	r24, r15
		mov r9,r25
    71f2:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    71f4:	00 91 b7 0c 	lds	r16, 0x0CB7
		mov r18,r16
    71f8:	20 2f       	mov	r18, r16
		lsr r16
    71fa:	06 95       	lsr	r16
		lsr r16
    71fc:	06 95       	lsr	r16
		lsr r16			;hi8
    71fe:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    7200:	03 95       	inc	r16
		andi r18,7		;lo8
    7202:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    7204:	30 91 b2 0c 	lds	r19, 0x0CB2
		cpi r19,0
    7208:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    720a:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    720c:	01 fe       	sbrs	r0, 1
		clr r22
    720e:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    7210:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    7212:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    7214:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    7216:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    7218:	01 fe       	sbrs	r0, 1
		ser r24
    721a:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    721c:	01 fe       	sbrs	r0, 1
		clr r9
    721e:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    7220:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    7222:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    7224:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    7226:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    7228:	80 90 c0 0c 	lds	r8, 0x0CC0

0000722c <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    722c:	c9 d3       	rcall	.+1938   	; 0x79c0 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    722e:	24 e0       	ldi	r18, 0x04	; 4
    7230:	2a 95       	dec	r18
    7232:	f1 f7       	brne	.-4      	; 0x7230 <next_tile_line+0x4>
    7234:	00 00       	nop
				
		call render_tile_line
    7236:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <render_tile_line>

		WAIT r18,58
    723a:	23 e1       	ldi	r18, 0x13	; 19
    723c:	2a 95       	dec	r18
    723e:	f1 f7       	brne	.-4      	; 0x723c <next_tile_line+0x10>
    7240:	00 00       	nop

		inc r22
    7242:	63 95       	inc	r22
		dec r8
    7244:	8a 94       	dec	r8
		breq text_frame_end
    7246:	09 f1       	breq	.+66     	; 0x728a <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    7248:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    724a:	29 f0       	breq	.+10     	; 0x7256 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    724c:	08 e0       	ldi	r16, 0x08	; 8
    724e:	0a 95       	dec	r16
    7250:	f1 f7       	brne	.-4      	; 0x724e <next_tile_line+0x22>
    7252:	00 00       	nop
		rjmp next_tile_line
    7254:	eb cf       	rjmp	.-42     	; 0x722c <next_tile_line>

00007256 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    7256:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    7258:	0c 2f       	mov	r16, r28
		andi r16,0x7
    725a:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    725c:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    725e:	11 f0       	breq	.+4      	; 0x7264 <next_tile_row+0xe>
		inc YL
    7260:	c3 95       	inc	r28
		rjmp 2f
    7262:	02 c0       	rjmp	.+4      	; 0x7268 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    7264:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    7266:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    7268:	8a 95       	dec	r24
		brne .+2
    726a:	09 f4       	brne	.+2      	; 0x726e <next_tile_row+0x18>
		movw YL,r12
    726c:	e6 01       	movw	r28, r12

		dec r19
    726e:	3a 95       	dec	r19
		brne .+2
    7270:	09 f4       	brne	.+2      	; 0x7274 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    7272:	67 2f       	mov	r22, r23
		brne .+2
    7274:	09 f4       	brne	.+2      	; 0x7278 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    7276:	e5 01       	movw	r28, r10
		brne .+2
    7278:	09 f4       	brne	.+2      	; 0x727c <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    727a:	8f 2d       	mov	r24, r15
		brne .+2
    727c:	09 f4       	brne	.+2      	; 0x7280 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    727e:	99 2e       	mov	r9, r25

		brne .+2
    7280:	09 f4       	brne	.+2      	; 0x7284 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7282:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    7284:	09 f4       	brne	.+2      	; 0x7288 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7286:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    7288:	d1 cf       	rjmp	.-94     	; 0x722c <next_tile_line>

0000728a <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    728a:	29 e0       	ldi	r18, 0x09	; 9
    728c:	2a 95       	dec	r18
    728e:	f1 f7       	brne	.-4      	; 0x728c <text_frame_end+0x2>
    7290:	00 00       	nop

		rcall hsync_pulse ;145
    7292:	96 d3       	rcall	.+1836   	; 0x79c0 <hsync_pulse>
	
		clr r1
    7294:	11 24       	eor	r1, r1
		call RestoreBackground
    7296:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    729a:	e0 91 ba 0c 	lds	r30, 0x0CBA
		ldi r20,SYNC_FLAG_FIELD
    729e:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    72a0:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    72a2:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    72a4:	e0 93 ba 0c 	sts	0x0CBA, r30
	
		cli 
    72a8:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    72aa:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    72ac:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    72b0:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    72b2:	e0 93 36 00 	sts	0x0036, r30

		ret
    72b6:	08 95       	ret

000072b8 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    72b8:	cf 93       	push	r28
		push YH
    72ba:	df 93       	push	r29
		push r23
    72bc:	7f 93       	push	r23
		push r22
    72be:	6f 93       	push	r22
		push r19
    72c0:	3f 93       	push	r19
		push r13
    72c2:	df 92       	push	r13
		push r12
    72c4:	cf 92       	push	r12
		push r9
    72c6:	9f 92       	push	r9
		push r7
    72c8:	7f 92       	push	r7
		push r6
    72ca:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    72cc:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    72ce:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    72d0:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    72d2:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    72d4:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    72d6:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    72d8:	00 0d       	add	r16, r0
		adc r17,r1
    72da:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    72dc:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    72de:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    72e0:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    72e2:	00 0d       	add	r16, r0
		adc r17,r1
    72e4:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    72e6:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    72e8:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    72ea:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    72ec:	69 2d       	mov	r22, r9
		andi r22,0x7		
    72ee:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    72f0:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    72f2:	f8 94       	cli
		breq .+2
    72f4:	09 f0       	breq	.+2      	; 0x72f8 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    72f6:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    72f8:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    72fa:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    72fc:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    72fe:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    7300:	02 0c       	add	r0, r2
	    adc r1,r3
    7302:	13 1c       	adc	r1, r3
		movw ZL,r0
    7304:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    7306:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    7308:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    730a:	28 81       	ld	r18, Y
		subi YL,-8
    730c:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    730e:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    7310:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    7312:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    7314:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    7316:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    7318:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    731a:	04 0e       	add	r0, r20
	    adc r1,r21
    731c:	15 1e       	adc	r1, r21
		movw XL,r0
    731e:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7320:	28 81       	ld	r18, Y
		subi YL,-8
    7322:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7324:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    7326:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    7328:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    732a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    732c:	a1 01       	movw	r20, r2
		brtc .+2
    732e:	0e f4       	brtc	.+2      	; 0x7332 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    7330:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    7332:	04 0e       	add	r0, r20
	    adc r1,r21
    7334:	15 1e       	adc	r1, r21
		movw ZL,r0
    7336:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    7338:	3f 01       	movw	r6, r30

0000733a <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    733a:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    733c:	a6 0f       	add	r26, r22
		adc XH,r0
    733e:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    7340:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    7342:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    7344:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    7346:	22 c0       	rjmp	.+68     	; 0x738c <rom_fine_scroll>

00007348 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    7348:	00 c0       	rjmp	.+0      	; 0x734a <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    734a:	6c ea       	ldi	r22, 0xAC	; 172
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    734c:	79 e3       	ldi	r23, 0x39	; 57
		add r22,r0
    734e:	60 0d       	add	r22, r0
		adc r23,r1
    7350:	71 1d       	adc	r23, r1
		push r22
    7352:	6f 93       	push	r22
		push r23	
    7354:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    7356:	08 95       	ret

00007358 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    7358:	0d 91       	ld	r16, X+
    735a:	c8 95       	lpm
    735c:	08 b9       	out	0x08, r16	; 8
    735e:	0d 91       	ld	r16, X+
    7360:	c8 95       	lpm
    7362:	08 b9       	out	0x08, r16	; 8
    7364:	0d 91       	ld	r16, X+
    7366:	c8 95       	lpm
    7368:	08 b9       	out	0x08, r16	; 8
    736a:	0d 91       	ld	r16, X+
    736c:	c8 95       	lpm
    736e:	08 b9       	out	0x08, r16	; 8
    7370:	0d 91       	ld	r16, X+
    7372:	c8 95       	lpm
    7374:	08 b9       	out	0x08, r16	; 8
    7376:	0d 91       	ld	r16, X+
    7378:	c8 95       	lpm
    737a:	08 b9       	out	0x08, r16	; 8
    737c:	0d 91       	ld	r16, X+
    737e:	c8 95       	lpm
    7380:	08 b9       	out	0x08, r16	; 8
    7382:	0d 91       	ld	r16, X+
    7384:	c8 95       	lpm
    7386:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    7388:	1e f5       	brtc	.+70     	; 0x73d0 <romloop>
		rjmp ramloop
    738a:	40 c0       	rjmp	.+128    	; 0x740c <ramloop>

0000738c <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    738c:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    738e:	6e ec       	ldi	r22, 0xCE	; 206
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    7390:	79 e3       	ldi	r23, 0x39	; 57
		add r22,r0
    7392:	60 0d       	add	r22, r0
		adc r23,r1
    7394:	71 1d       	adc	r23, r1
		push r22
    7396:	6f 93       	push	r22
		push r23	
    7398:	7f 93       	push	r23
		ret
    739a:	08 95       	ret

0000739c <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    739c:	05 91       	lpm	r16, Z+
    739e:	00 c0       	rjmp	.+0      	; 0x73a0 <rom_fine_scroll_loop+0x4>
    73a0:	08 b9       	out	0x08, r16	; 8
    73a2:	05 91       	lpm	r16, Z+
    73a4:	00 c0       	rjmp	.+0      	; 0x73a6 <rom_fine_scroll_loop+0xa>
    73a6:	08 b9       	out	0x08, r16	; 8
    73a8:	05 91       	lpm	r16, Z+
    73aa:	00 c0       	rjmp	.+0      	; 0x73ac <rom_fine_scroll_loop+0x10>
    73ac:	08 b9       	out	0x08, r16	; 8
    73ae:	05 91       	lpm	r16, Z+
    73b0:	00 c0       	rjmp	.+0      	; 0x73b2 <rom_fine_scroll_loop+0x16>
    73b2:	08 b9       	out	0x08, r16	; 8
    73b4:	05 91       	lpm	r16, Z+
    73b6:	00 c0       	rjmp	.+0      	; 0x73b8 <rom_fine_scroll_loop+0x1c>
    73b8:	08 b9       	out	0x08, r16	; 8
    73ba:	05 91       	lpm	r16, Z+
    73bc:	00 c0       	rjmp	.+0      	; 0x73be <rom_fine_scroll_loop+0x22>
    73be:	08 b9       	out	0x08, r16	; 8
    73c0:	05 91       	lpm	r16, Z+
    73c2:	00 c0       	rjmp	.+0      	; 0x73c4 <rom_fine_scroll_loop+0x28>
    73c4:	08 b9       	out	0x08, r16	; 8
    73c6:	05 91       	lpm	r16, Z+
    73c8:	00 c0       	rjmp	.+0      	; 0x73ca <rom_fine_scroll_loop+0x2e>
    73ca:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    73cc:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    73ce:	f6 f0       	brts	.+60     	; 0x740c <ramloop>

000073d0 <romloop>:

	
	romloop:
	    lpm r16,Z+
    73d0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    73d2:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    73d4:	28 81       	ld	r18, Y

	    lpm r16,Z+
    73d6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    73d8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    73da:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    73dc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    73de:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    73e0:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    73e2:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    73e4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    73e6:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    73e8:	08 f4       	brcc	.+2      	; 0x73ec <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    73ea:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    73ec:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    73ee:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    73f0:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    73f2:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    73f4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    73f6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    73f8:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    73fa:	1a 95       	dec	r17
   
	    lpm r16,Z+
    73fc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    73fe:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7400:	05 91       	lpm	r16, Z+

		breq end	
    7402:	39 f1       	breq	.+78     	; 0x7452 <end>
	    movw ZL,r0   	;copy next tile adress
    7404:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7406:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7408:	18 f7       	brcc	.-58     	; 0x73d0 <romloop>
	
		rjmp .
    740a:	00 c0       	rjmp	.+0      	; 0x740c <ramloop>

0000740c <ramloop>:

	ramloop:

	    ld r16,Z+
    740c:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    740e:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7410:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    7412:	01 91       	ld	r16, Z+
		subi YL,-8   		
    7414:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7416:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7418:	23 9f       	mul	r18, r19

	    ld r16,Z+
    741a:	01 91       	ld	r16, Z+
		nop
    741c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    741e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7420:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    7422:	00 c0       	rjmp	.+0      	; 0x7424 <ramloop+0x18>
   
	    ld r16,Z+
    7424:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7426:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7428:	08 f0       	brcs	.+2      	; 0x742c <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    742a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    742c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    742e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7430:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7432:	15 1e       	adc	r1, r21
		rjmp .
    7434:	00 c0       	rjmp	.+0      	; 0x7436 <ramloop+0x2a>
    
		ld r16,Z+		
    7436:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7438:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    743a:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    743c:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    743e:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7440:	78 b8       	out	0x08, r7	; 8
		nop
    7442:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7444:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7446:	1a 95       	dec	r17
	    breq end
    7448:	21 f0       	breq	.+8      	; 0x7452 <end>
	
		nop
    744a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    744c:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    744e:	00 f6       	brcc	.-128    	; 0x73d0 <romloop>
		rjmp ramloop
    7450:	dd cf       	rjmp	.-70     	; 0x740c <ramloop>

00007452 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7452:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    7454:	27 f5       	brid	.+72     	; 0x749e <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    7456:	30 f4       	brcc	.+12     	; 0x7464 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    7458:	f0 01       	movw	r30, r0

0000745a <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    745a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    745c:	08 b9       	out	0x08, r16	; 8
		dec r14
    745e:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    7460:	e1 f7       	brne	.-8      	; 0x745a <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    7462:	1f c0       	rjmp	.+62     	; 0x74a2 <end_fine_scroll_ram>

00007464 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    7464:	f6 01       	movw	r30, r12
		nop
    7466:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7468:	98 b8       	out	0x08, r9	; 8
		dec r14
    746a:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    746c:	c9 f0       	breq	.+50     	; 0x74a0 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    746e:	05 91       	lpm	r16, Z+
    7470:	08 b9       	out	0x08, r16	; 8
    7472:	ea 94       	dec	r14
    7474:	a9 f0       	breq	.+42     	; 0x74a0 <end_fine_scroll_rom>
    7476:	05 91       	lpm	r16, Z+
    7478:	08 b9       	out	0x08, r16	; 8
    747a:	ea 94       	dec	r14
    747c:	89 f0       	breq	.+34     	; 0x74a0 <end_fine_scroll_rom>
    747e:	05 91       	lpm	r16, Z+
    7480:	08 b9       	out	0x08, r16	; 8
    7482:	ea 94       	dec	r14
    7484:	69 f0       	breq	.+26     	; 0x74a0 <end_fine_scroll_rom>
    7486:	05 91       	lpm	r16, Z+
    7488:	08 b9       	out	0x08, r16	; 8
    748a:	ea 94       	dec	r14
    748c:	49 f0       	breq	.+18     	; 0x74a0 <end_fine_scroll_rom>
    748e:	05 91       	lpm	r16, Z+
    7490:	08 b9       	out	0x08, r16	; 8
    7492:	ea 94       	dec	r14
    7494:	29 f0       	breq	.+10     	; 0x74a0 <end_fine_scroll_rom>
    7496:	05 91       	lpm	r16, Z+
    7498:	08 b9       	out	0x08, r16	; 8
    749a:	ea 94       	dec	r14
    749c:	09 f0       	breq	.+2      	; 0x74a0 <end_fine_scroll_rom>

0000749e <end_fine_scroll>:
	...

000074a0 <end_fine_scroll_rom>:
	...

000074a2 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    74a2:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    74a4:	08 b9       	out	0x08, r16	; 8

		pop r6
    74a6:	6f 90       	pop	r6
		pop r7
    74a8:	7f 90       	pop	r7
		pop r9
    74aa:	9f 90       	pop	r9
		pop r12
    74ac:	cf 90       	pop	r12
		pop r13
    74ae:	df 90       	pop	r13
		pop r19
    74b0:	3f 91       	pop	r19
		pop r22
    74b2:	6f 91       	pop	r22
		pop r23
    74b4:	7f 91       	pop	r23
		pop YH
    74b6:	df 91       	pop	r29
		pop YL
    74b8:	cf 91       	pop	r28

		ret
    74ba:	08 95       	ret

000074bc <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    74bc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    74be:	e0 91 af 0c 	lds	r30, 0x0CAF
	lds ZH,tile_table_hi
    74c2:	f0 91 b0 0c 	lds	r31, 0x0CB0
	mul r24,r18
    74c6:	82 9f       	mul	r24, r18
	add ZL,r0
    74c8:	e0 0d       	add	r30, r0
	adc ZH,r1
    74ca:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    74cc:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    74ce:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    74d0:	62 9f       	mul	r22, r18
	add XL,r0
    74d2:	a0 0d       	add	r26, r0
	adc XH,r1
    74d4:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    74d6:	15 90       	lpm	r1, Z+
    74d8:	1d 92       	st	X+, r1
    74da:	15 90       	lpm	r1, Z+
    74dc:	1d 92       	st	X+, r1
    74de:	15 90       	lpm	r1, Z+
    74e0:	1d 92       	st	X+, r1
    74e2:	15 90       	lpm	r1, Z+
    74e4:	1d 92       	st	X+, r1
    74e6:	15 90       	lpm	r1, Z+
    74e8:	1d 92       	st	X+, r1
    74ea:	15 90       	lpm	r1, Z+
    74ec:	1d 92       	st	X+, r1
    74ee:	15 90       	lpm	r1, Z+
    74f0:	1d 92       	st	X+, r1
    74f2:	15 90       	lpm	r1, Z+
    74f4:	1d 92       	st	X+, r1
    74f6:	15 90       	lpm	r1, Z+
    74f8:	1d 92       	st	X+, r1
    74fa:	15 90       	lpm	r1, Z+
    74fc:	1d 92       	st	X+, r1
    74fe:	15 90       	lpm	r1, Z+
    7500:	1d 92       	st	X+, r1
    7502:	15 90       	lpm	r1, Z+
    7504:	1d 92       	st	X+, r1
    7506:	15 90       	lpm	r1, Z+
    7508:	1d 92       	st	X+, r1
    750a:	15 90       	lpm	r1, Z+
    750c:	1d 92       	st	X+, r1
    750e:	15 90       	lpm	r1, Z+
    7510:	1d 92       	st	X+, r1
    7512:	15 90       	lpm	r1, Z+
    7514:	1d 92       	st	X+, r1
    7516:	15 90       	lpm	r1, Z+
    7518:	1d 92       	st	X+, r1
    751a:	15 90       	lpm	r1, Z+
    751c:	1d 92       	st	X+, r1
    751e:	15 90       	lpm	r1, Z+
    7520:	1d 92       	st	X+, r1
    7522:	15 90       	lpm	r1, Z+
    7524:	1d 92       	st	X+, r1
    7526:	15 90       	lpm	r1, Z+
    7528:	1d 92       	st	X+, r1
    752a:	15 90       	lpm	r1, Z+
    752c:	1d 92       	st	X+, r1
    752e:	15 90       	lpm	r1, Z+
    7530:	1d 92       	st	X+, r1
    7532:	15 90       	lpm	r1, Z+
    7534:	1d 92       	st	X+, r1
    7536:	15 90       	lpm	r1, Z+
    7538:	1d 92       	st	X+, r1
    753a:	15 90       	lpm	r1, Z+
    753c:	1d 92       	st	X+, r1
    753e:	15 90       	lpm	r1, Z+
    7540:	1d 92       	st	X+, r1
    7542:	15 90       	lpm	r1, Z+
    7544:	1d 92       	st	X+, r1
    7546:	15 90       	lpm	r1, Z+
    7548:	1d 92       	st	X+, r1
    754a:	15 90       	lpm	r1, Z+
    754c:	1d 92       	st	X+, r1
    754e:	15 90       	lpm	r1, Z+
    7550:	1d 92       	st	X+, r1
    7552:	15 90       	lpm	r1, Z+
    7554:	1d 92       	st	X+, r1
    7556:	15 90       	lpm	r1, Z+
    7558:	1d 92       	st	X+, r1
    755a:	15 90       	lpm	r1, Z+
    755c:	1d 92       	st	X+, r1
    755e:	15 90       	lpm	r1, Z+
    7560:	1d 92       	st	X+, r1
    7562:	15 90       	lpm	r1, Z+
    7564:	1d 92       	st	X+, r1
    7566:	15 90       	lpm	r1, Z+
    7568:	1d 92       	st	X+, r1
    756a:	15 90       	lpm	r1, Z+
    756c:	1d 92       	st	X+, r1
    756e:	15 90       	lpm	r1, Z+
    7570:	1d 92       	st	X+, r1
    7572:	15 90       	lpm	r1, Z+
    7574:	1d 92       	st	X+, r1
    7576:	15 90       	lpm	r1, Z+
    7578:	1d 92       	st	X+, r1
    757a:	15 90       	lpm	r1, Z+
    757c:	1d 92       	st	X+, r1
    757e:	15 90       	lpm	r1, Z+
    7580:	1d 92       	st	X+, r1
    7582:	15 90       	lpm	r1, Z+
    7584:	1d 92       	st	X+, r1
    7586:	15 90       	lpm	r1, Z+
    7588:	1d 92       	st	X+, r1
    758a:	15 90       	lpm	r1, Z+
    758c:	1d 92       	st	X+, r1
    758e:	15 90       	lpm	r1, Z+
    7590:	1d 92       	st	X+, r1
    7592:	15 90       	lpm	r1, Z+
    7594:	1d 92       	st	X+, r1
    7596:	15 90       	lpm	r1, Z+
    7598:	1d 92       	st	X+, r1
    759a:	15 90       	lpm	r1, Z+
    759c:	1d 92       	st	X+, r1
    759e:	15 90       	lpm	r1, Z+
    75a0:	1d 92       	st	X+, r1
    75a2:	15 90       	lpm	r1, Z+
    75a4:	1d 92       	st	X+, r1
    75a6:	15 90       	lpm	r1, Z+
    75a8:	1d 92       	st	X+, r1
    75aa:	15 90       	lpm	r1, Z+
    75ac:	1d 92       	st	X+, r1
    75ae:	15 90       	lpm	r1, Z+
    75b0:	1d 92       	st	X+, r1
    75b2:	15 90       	lpm	r1, Z+
    75b4:	1d 92       	st	X+, r1
    75b6:	15 90       	lpm	r1, Z+
    75b8:	1d 92       	st	X+, r1
    75ba:	15 90       	lpm	r1, Z+
    75bc:	1d 92       	st	X+, r1
    75be:	15 90       	lpm	r1, Z+
    75c0:	1d 92       	st	X+, r1
    75c2:	15 90       	lpm	r1, Z+
    75c4:	1d 92       	st	X+, r1
    75c6:	15 90       	lpm	r1, Z+
    75c8:	1d 92       	st	X+, r1
    75ca:	15 90       	lpm	r1, Z+
    75cc:	1d 92       	st	X+, r1
    75ce:	15 90       	lpm	r1, Z+
    75d0:	1d 92       	st	X+, r1
    75d2:	15 90       	lpm	r1, Z+
    75d4:	1d 92       	st	X+, r1
	clr r1
    75d6:	11 24       	eor	r1, r1
	ret
    75d8:	08 95       	ret

000075da <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    75da:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    75dc:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    75de:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    75e0:	82 9f       	mul	r24, r18
	add ZL,r0
    75e2:	e0 0d       	add	r30, r0
	adc ZH,r1
    75e4:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    75e6:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    75e8:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    75ea:	62 9f       	mul	r22, r18
	add XL,r0
    75ec:	a0 0d       	add	r26, r0
	adc XH,r1
    75ee:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    75f0:	11 90       	ld	r1, Z+
    75f2:	1d 92       	st	X+, r1
    75f4:	11 90       	ld	r1, Z+
    75f6:	1d 92       	st	X+, r1
    75f8:	11 90       	ld	r1, Z+
    75fa:	1d 92       	st	X+, r1
    75fc:	11 90       	ld	r1, Z+
    75fe:	1d 92       	st	X+, r1
    7600:	11 90       	ld	r1, Z+
    7602:	1d 92       	st	X+, r1
    7604:	11 90       	ld	r1, Z+
    7606:	1d 92       	st	X+, r1
    7608:	11 90       	ld	r1, Z+
    760a:	1d 92       	st	X+, r1
    760c:	11 90       	ld	r1, Z+
    760e:	1d 92       	st	X+, r1
    7610:	11 90       	ld	r1, Z+
    7612:	1d 92       	st	X+, r1
    7614:	11 90       	ld	r1, Z+
    7616:	1d 92       	st	X+, r1
    7618:	11 90       	ld	r1, Z+
    761a:	1d 92       	st	X+, r1
    761c:	11 90       	ld	r1, Z+
    761e:	1d 92       	st	X+, r1
    7620:	11 90       	ld	r1, Z+
    7622:	1d 92       	st	X+, r1
    7624:	11 90       	ld	r1, Z+
    7626:	1d 92       	st	X+, r1
    7628:	11 90       	ld	r1, Z+
    762a:	1d 92       	st	X+, r1
    762c:	11 90       	ld	r1, Z+
    762e:	1d 92       	st	X+, r1
    7630:	11 90       	ld	r1, Z+
    7632:	1d 92       	st	X+, r1
    7634:	11 90       	ld	r1, Z+
    7636:	1d 92       	st	X+, r1
    7638:	11 90       	ld	r1, Z+
    763a:	1d 92       	st	X+, r1
    763c:	11 90       	ld	r1, Z+
    763e:	1d 92       	st	X+, r1
    7640:	11 90       	ld	r1, Z+
    7642:	1d 92       	st	X+, r1
    7644:	11 90       	ld	r1, Z+
    7646:	1d 92       	st	X+, r1
    7648:	11 90       	ld	r1, Z+
    764a:	1d 92       	st	X+, r1
    764c:	11 90       	ld	r1, Z+
    764e:	1d 92       	st	X+, r1
    7650:	11 90       	ld	r1, Z+
    7652:	1d 92       	st	X+, r1
    7654:	11 90       	ld	r1, Z+
    7656:	1d 92       	st	X+, r1
    7658:	11 90       	ld	r1, Z+
    765a:	1d 92       	st	X+, r1
    765c:	11 90       	ld	r1, Z+
    765e:	1d 92       	st	X+, r1
    7660:	11 90       	ld	r1, Z+
    7662:	1d 92       	st	X+, r1
    7664:	11 90       	ld	r1, Z+
    7666:	1d 92       	st	X+, r1
    7668:	11 90       	ld	r1, Z+
    766a:	1d 92       	st	X+, r1
    766c:	11 90       	ld	r1, Z+
    766e:	1d 92       	st	X+, r1
    7670:	11 90       	ld	r1, Z+
    7672:	1d 92       	st	X+, r1
    7674:	11 90       	ld	r1, Z+
    7676:	1d 92       	st	X+, r1
    7678:	11 90       	ld	r1, Z+
    767a:	1d 92       	st	X+, r1
    767c:	11 90       	ld	r1, Z+
    767e:	1d 92       	st	X+, r1
    7680:	11 90       	ld	r1, Z+
    7682:	1d 92       	st	X+, r1
    7684:	11 90       	ld	r1, Z+
    7686:	1d 92       	st	X+, r1
    7688:	11 90       	ld	r1, Z+
    768a:	1d 92       	st	X+, r1
    768c:	11 90       	ld	r1, Z+
    768e:	1d 92       	st	X+, r1
    7690:	11 90       	ld	r1, Z+
    7692:	1d 92       	st	X+, r1
    7694:	11 90       	ld	r1, Z+
    7696:	1d 92       	st	X+, r1
    7698:	11 90       	ld	r1, Z+
    769a:	1d 92       	st	X+, r1
    769c:	11 90       	ld	r1, Z+
    769e:	1d 92       	st	X+, r1
    76a0:	11 90       	ld	r1, Z+
    76a2:	1d 92       	st	X+, r1
    76a4:	11 90       	ld	r1, Z+
    76a6:	1d 92       	st	X+, r1
    76a8:	11 90       	ld	r1, Z+
    76aa:	1d 92       	st	X+, r1
    76ac:	11 90       	ld	r1, Z+
    76ae:	1d 92       	st	X+, r1
    76b0:	11 90       	ld	r1, Z+
    76b2:	1d 92       	st	X+, r1
    76b4:	11 90       	ld	r1, Z+
    76b6:	1d 92       	st	X+, r1
    76b8:	11 90       	ld	r1, Z+
    76ba:	1d 92       	st	X+, r1
    76bc:	11 90       	ld	r1, Z+
    76be:	1d 92       	st	X+, r1
    76c0:	11 90       	ld	r1, Z+
    76c2:	1d 92       	st	X+, r1
    76c4:	11 90       	ld	r1, Z+
    76c6:	1d 92       	st	X+, r1
    76c8:	11 90       	ld	r1, Z+
    76ca:	1d 92       	st	X+, r1
    76cc:	11 90       	ld	r1, Z+
    76ce:	1d 92       	st	X+, r1
    76d0:	11 90       	ld	r1, Z+
    76d2:	1d 92       	st	X+, r1
    76d4:	11 90       	ld	r1, Z+
    76d6:	1d 92       	st	X+, r1
    76d8:	11 90       	ld	r1, Z+
    76da:	1d 92       	st	X+, r1
    76dc:	11 90       	ld	r1, Z+
    76de:	1d 92       	st	X+, r1
    76e0:	11 90       	ld	r1, Z+
    76e2:	1d 92       	st	X+, r1
    76e4:	11 90       	ld	r1, Z+
    76e6:	1d 92       	st	X+, r1
    76e8:	11 90       	ld	r1, Z+
    76ea:	1d 92       	st	X+, r1
    76ec:	11 90       	ld	r1, Z+
    76ee:	1d 92       	st	X+, r1
	clr r1
    76f0:	11 24       	eor	r1, r1
	ret
    76f2:	08 95       	ret

000076f4 <RestoreBackground>:
RestoreBackground:

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    76f4:	e0 91 a5 0c 	lds	r30, 0x0CA5
	mov   r24,     ZL
    76f8:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    76fa:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    76fc:	e8 0f       	add	r30, r24
	clr   ZH
    76fe:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7700:	e0 5b       	subi	r30, 0xB0	; 176
	sbci  ZH,      hi8(-(ram_tiles_restore))
    7702:	f3 4f       	sbci	r31, 0xF3	; 243

	lds   r0,      free_tile_index
    7704:	00 90 a4 0c 	lds	r0, 0x0CA4
	sub   r24,     r0
    7708:	80 19       	sub	r24, r0
	brcc  rbg_exit
    770a:	30 f4       	brcc	.+12     	; 0x7718 <rbg_exit>

0000770c <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    770c:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    770e:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    7710:	01 90       	ld	r0, Z+
	st    X,       r0
    7712:	0c 92       	st	X, r0
	inc   r24
    7714:	83 95       	inc	r24
	brne  rbg_loop
    7716:	d1 f7       	brne	.-12     	; 0x770c <rbg_loop>

00007718 <rbg_exit>:

rbg_exit:

	ret
    7718:	08 95       	ret

0000771a <BlitSprite>:
;************************************
BlitSprite:

	; src = sprites_tiletable_lo + (sprites[i].tileIndex * TILE_HEIGHT * TILE_WIDTH)

	ldi   r25,     SPRITE_STRUCT_SIZE
    771a:	94 e0       	ldi	r25, 0x04	; 4
	mul   r24,     r25
    771c:	89 9f       	mul	r24, r25

	movw  ZL,      r0
    771e:	f0 01       	movw	r30, r0
	subi  ZL,      lo8(-(sprites))
    7720:	e0 5f       	subi	r30, 0xF0	; 240
	sbci  ZH,      hi8(-(sprites))
    7722:	fa 4f       	sbci	r31, 0xFA	; 250

	ldd   r23,     Z + sprFlags
    7724:	73 81       	ldd	r23, Z+3	; 0x03
	ldd   r24,     Z + sprTileIndex
    7726:	82 81       	ldd	r24, Z+2	; 0x02

	; Get tile bank addr

	ldi   r25,     4 * 2
    7728:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    772a:	79 9f       	mul	r23, r25
	mov   XL,      r1
    772c:	a1 2d       	mov	r26, r1
	clr   XH
    772e:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7730:	a9 55       	subi	r26, 0x59	; 89
	sbci  XH,      hi8(-(sprites_tile_banks))
    7732:	b3 4f       	sbci	r27, 0xF3	; 243
	ld    ZL,      X+
    7734:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7736:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7738:	90 e4       	ldi	r25, 0x40	; 64
	mul   r24,     r25
    773a:	89 9f       	mul	r24, r25
	add   ZL,      r0      ; Tile data src
    773c:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    773e:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r22,     r25
    7740:	69 9f       	mul	r22, r25
	movw  XL,      r0
    7742:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7744:	a0 5b       	subi	r26, 0xB0	; 176
	sbci  XH,      hi8(-(ram_tiles))
    7746:	ba 4f       	sbci	r27, 0xFA	; 250
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7748:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    774a:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    774c:	09 c0       	rjmp	.+18     	; 0x7760 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    774e:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7750:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7752:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7754:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7756:	0a c0       	rjmp	.+20     	; 0x776c <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7758:	17 96       	adiw	r26, 0x07	; 7

0000775a <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    775a:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    775c:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    775e:	08 c0       	rjmp	.+16     	; 0x7770 <x_check_end>

00007760 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7760:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7762:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7764:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7766:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7768:	f8 cf       	rjmp	.-16     	; 0x775a <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    776a:	11 97       	sbiw	r26, 0x01	; 1

0000776c <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    776c:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    776e:	b9 1f       	adc	r27, r25

00007770 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7770:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7772:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7774:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7776:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7778:	09 c0       	rjmp	.+18     	; 0x778c <y_2nd_tile>

	mul   r22,     r19
    777a:	63 9f       	mul	r22, r19
	add   XL,      r0
    777c:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    777e:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7780:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7782:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7784:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7786:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7788:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    778a:	08 c0       	rjmp	.+16     	; 0x779c <y_check_end>

0000778c <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    778c:	13 2e       	mov	r1, r19
	dec   r1
    778e:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    7790:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7792:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7794:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7796:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7798:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    779a:	13 2e       	mov	r1, r19

0000779c <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    779c:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    779e:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    77a0:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    77a2:	05 c0       	rjmp	.+10     	; 0x77ae <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    77a4:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    77a6:	54 0f       	add	r21, r20
	ldi   r23,     0x00
    77a8:	70 e0       	ldi	r23, 0x00	; 0
	ldi   r22,     0x01    ; step = 1
    77aa:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    77ac:	04 c0       	rjmp	.+8      	; 0x77b6 <x_diff_end>

000077ae <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    77ae:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    77b0:	54 1b       	sub	r21, r20
	ldi   r23,     0xFF
    77b2:	7f ef       	ldi	r23, 0xFF	; 255
	ldi   r22,     0xFF    ; step = -1
    77b4:	6f ef       	ldi	r22, 0xFF	; 255

000077b6 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    77b6:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    77b8:	04 2e       	mov	r0, r20
	lsr   r20
    77ba:	46 95       	lsr	r20
	brcc  x_loop1
    77bc:	30 f4       	brcc	.+12     	; 0x77ca <x_loop1>
	breq  x_loopx
    77be:	61 f0       	breq	.+24     	; 0x77d8 <x_loopx>

000077c0 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    77c0:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    77c2:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    77c4:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    77c6:	a6 0f       	add	r26, r22
	adc   XH,      r23
    77c8:	b7 1f       	adc	r27, r23

000077ca <x_loop1>:
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    77ca:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    77cc:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    77ce:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    77d0:	a6 0f       	add	r26, r22
	adc   XH,      r23
    77d2:	b7 1f       	adc	r27, r23
	subi  r20,     1
    77d4:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    77d6:	a1 f7       	brne	.-24     	; 0x77c0 <x_loop0>

000077d8 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    77d8:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    77da:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    77dc:	2c 93       	st	X, r18

	dec   r1
    77de:	1a 94       	dec	r1
	breq  loop_e
    77e0:	49 f0       	breq	.+18     	; 0x77f4 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    77e2:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    77e4:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    77e6:	a5 1b       	sub	r26, r21
	sbci  XH,      0xFF
    77e8:	bf 4f       	sbci	r27, 0xFF	; 255

	mov   r20,     r0      ; xspan
    77ea:	40 2d       	mov	r20, r0
	lsr   r20
    77ec:	46 95       	lsr	r20
	brcc  x_loop1
    77ee:	68 f7       	brcc	.-38     	; 0x77ca <x_loop1>
	brne  x_loop0
    77f0:	39 f7       	brne	.-50     	; 0x77c0 <x_loop0>
	rjmp  x_loopx
    77f2:	f2 cf       	rjmp	.-28     	; 0x77d8 <x_loopx>

000077f4 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    77f4:	08 95       	ret

000077f6 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    77f6:	0f 92       	push	r0
	push r1
    77f8:	1f 92       	push	r1
	push ZL;2
    77fa:	ef 93       	push	r30
	push ZH;2
    77fc:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    77fe:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7800:	ef 93       	push	r30
	; Use an alternate way to shave off 5 cycles jitter faster. It shifts
	; all timing 57 cycles "down", so every Timer related comment and code
	; should subtract 57 to align with this (Notes: Everything works as
	; normal except video modes using the Timer to terminate the line).

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x12 - 0x17 (5 cy jitter)
    7802:	e0 91 84 00 	lds	r30, 0x0084

	cpi   ZL,      0x16    ; ( 1)
    7806:	e6 31       	cpi	r30, 0x16	; 22
	breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    7808:	01 f0       	breq	.+0      	; 0x780a <__vector_13+0x14>
	brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    780a:	28 f4       	brcc	.+10     	; 0x7816 <__vector_13+0x20>
	cpi   ZL,      0x14    ; ()
    780c:	e4 31       	cpi	r30, 0x14	; 20
	breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    780e:	01 f0       	breq	.+0      	; 0x7810 <__vector_13+0x1a>
	brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    7810:	18 f4       	brcc	.+6      	; 0x7818 <__vector_13+0x22>
	cpi   ZL,      0x12    ; ()
    7812:	e2 31       	cpi	r30, 0x12	; 18
	breq  .                ; ()   +5 / +4 (10 / 9)
    7814:	01 f0       	breq	.+0      	; 0x7816 <__vector_13+0x20>
	nop                    ; ( 5) Timer at 0x1C
    7816:	00 00       	nop

;	WAIT  ZL,      57      ; Realigns with original kernel


	;decrement sync pulse counter
	lds ZL,sync_pulse
    7818:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    781c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    781e:	e0 93 b9 0c 	sts	0x0CB9, r30

	;process sync phases
	lds ZH,sync_phase
    7822:	f0 91 b8 0c 	lds	r31, 0x0CB8
	sbrc ZH,0
    7826:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7828:	55 c0       	rjmp	.+170    	; 0x78d4 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    782a:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    782c:	98 f0       	brcs	.+38     	; 0x7854 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    782e:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7830:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7834:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7836:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    783a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    783c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    783e:	26 f4       	brtc	.+8      	; 0x7848 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7840:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7842:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <update_sound>
	rjmp sync_end
    7846:	b5 c0       	rjmp	.+362    	; 0x79b2 <sync_end>

00007848 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7848:	e5 e1       	ldi	r30, 0x15	; 21
    784a:	ea 95       	dec	r30
    784c:	f1 f7       	brne	.-4      	; 0x784a <sync_pre_eq_no_sound_update+0x2>
    784e:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7850:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7852:	af c0       	rjmp	.+350    	; 0x79b2 <sync_end>

00007854 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7854:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7856:	28 f1       	brcs	.+74     	; 0x78a2 <sync_post_eq>

	rjmp .
    7858:	00 c0       	rjmp	.+0      	; 0x785a <sync_eq+0x6>
	rjmp .
    785a:	00 c0       	rjmp	.+0      	; 0x785c <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    785c:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    785e:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7860:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7862:	16 f4       	brtc	.+4      	; 0x7868 <sync_eq_skip>
	
	call update_sound
    7864:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <update_sound>

00007868 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7868:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    786a:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    786e:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7870:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7874:	9e c0       	rjmp	.+316    	; 0x79b2 <sync_end>

00007876 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7876:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7878:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    787a:	ef 93       	push	r30
;	breq  .                ; ()   +5 / +4 (10 / 9)
;	nop                    ; ( 5) Timer at 0x67

;	WAIT  ZL,      6       ; Realigns with original kernel

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x2A - 0x2F (5 cy jitter)
    787c:	e0 91 84 00 	lds	r30, 0x0084

	cpi   ZL,      0x2E    ; ( 1)
    7880:	ee 32       	cpi	r30, 0x2E	; 46
	breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    7882:	01 f0       	breq	.+0      	; 0x7884 <__vector_14+0xe>
	brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    7884:	28 f4       	brcc	.+10     	; 0x7890 <__vector_14+0x1a>
	cpi   ZL,      0x2C    ; ()
    7886:	ec 32       	cpi	r30, 0x2C	; 44
	breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    7888:	01 f0       	breq	.+0      	; 0x788a <__vector_14+0x14>
	brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    788a:	18 f4       	brcc	.+6      	; 0x7892 <__vector_14+0x1c>
	cpi   ZL,      0x2A    ; ()
    788c:	ea 32       	cpi	r30, 0x2A	; 42
	breq  .                ; ()   +5 / +4 (10 / 9)
    788e:	01 f0       	breq	.+0      	; 0x7890 <__vector_14+0x1a>
	nop                    ; ( 5) Timer at 0x34
    7890:	00 00       	nop

;	WAIT  ZL,      57      ; Realigns with original kernel


 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7892:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7894:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7896:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    789a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    789c:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    789e:	ef 91       	pop	r30
	reti
    78a0:	18 95       	reti

000078a2 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    78a2:	00 c0       	rjmp	.+0      	; 0x78a4 <sync_post_eq+0x2>

	bst ZL,0
    78a4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    78a6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    78a8:	26 f4       	brtc	.+8      	; 0x78b2 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    78aa:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    78ac:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <update_sound>
	rjmp sync_pre_eq_cont
    78b0:	05 c0       	rjmp	.+10     	; 0x78bc <sync_pre_eq_cont>

000078b2 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    78b2:	e5 e1       	ldi	r30, 0x15	; 21
    78b4:	ea 95       	dec	r30
    78b6:	f1 f7       	brne	.-4      	; 0x78b4 <sync_post_eq_no_sound_update+0x2>
    78b8:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    78ba:	28 9a       	sbi	0x05, 0	; 5

000078bc <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    78bc:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    78c0:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    78c2:	09 f0       	breq	.+2      	; 0x78c6 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    78c4:	76 c0       	rjmp	.+236    	; 0x79b2 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    78c6:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    78c8:	e0 93 b9 0c 	sts	0x0CB9, r30
	ldi ZL,1
    78cc:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    78ce:	e0 93 b8 0c 	sts	0x0CB8, r30
	
	rjmp sync_end
    78d2:	6f c0       	rjmp	.+222    	; 0x79b2 <sync_end>

000078d4 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    78d4:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    78d6:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    78da:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    78dc:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    78e0:	00 c0       	rjmp	.+0      	; 0x78e2 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    78e2:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    78e4:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    78e6:	00 c0       	rjmp	.+0      	; 0x78e8 <sync_hsync+0x14>
	call update_sound
    78e8:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    78ec:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    78ee:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    78f2:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    78f4:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cp ZL,ZH
    78f8:	ef 17       	cp	r30, r31
	brsh no_render
    78fa:	d0 f4       	brcc	.+52     	; 0x7930 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    78fc:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    78fe:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    7902:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7904:	00 90 c0 0c 	lds	r0, 0x0CC0
	sub ZH,r0			
    7908:	f0 19       	sub	r31, r0
	cp ZL,ZH
    790a:	ef 17       	cp	r30, r31
	brlo no_render
    790c:	88 f0       	brcs	.+34     	; 0x7930 <no_render>

	;push r1-r29
	ldi ZL,29
    790e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7910:	ff 27       	eor	r31, r31

00007912 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7912:	00 80       	ld	r0, Z
	push r0
    7914:	0f 92       	push	r0
	dec ZL
    7916:	ea 95       	dec	r30
	brne push_loop	
    7918:	e1 f7       	brne	.-8      	; 0x7912 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    791a:	06 e0       	ldi	r16, 0x06	; 6
    791c:	0a 95       	dec	r16
    791e:	f1 f7       	brne	.-4      	; 0x791c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7920:	0e 94 aa 38 	call	0x7154	; 0x7154 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7924:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7926:	ff 27       	eor	r31, r31

00007928 <pop_loop>:
pop_loop:
	pop r0
    7928:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    792a:	01 92       	st	Z+, r0
	cpi ZL,30
    792c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    792e:	e0 f3       	brcs	.-8      	; 0x7928 <pop_loop>

00007930 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7930:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    7934:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7936:	09 f0       	breq	.+2      	; 0x793a <no_render+0xa>
	rjmp sync_end
    7938:	3c c0       	rjmp	.+120    	; 0x79b2 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    793a:	2f 93       	push	r18
	push r19
    793c:	3f 93       	push	r19
	push r20
    793e:	4f 93       	push	r20
	push r21
    7940:	5f 93       	push	r21
	push r22
    7942:	6f 93       	push	r22
	push r23
    7944:	7f 93       	push	r23
	push r24
    7946:	8f 93       	push	r24
	push r25
    7948:	9f 93       	push	r25
	push r26
    794a:	af 93       	push	r26
	push r27
    794c:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    794e:	78 94       	sei
	clr r1
    7950:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7952:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7954:	e0 93 b8 0c 	sts	0x0CB8, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7958:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    795a:	e0 93 b9 0c 	sts	0x0CB9, r30



	;increment the vsync counter
	lds r24,vsync_counter
    795e:	80 91 c9 0c 	lds	r24, 0x0CC9
	lds r25,vsync_counter+1
    7962:	90 91 ca 0c 	lds	r25, 0x0CCA
	adiw r24,1
    7966:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7968:	80 93 c9 0c 	sts	0x0CC9, r24
	sts vsync_counter+1,r25
    796c:	90 93 ca 0c 	sts	0x0CCA, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7970:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,pre_vsync_user_callback+1
    7974:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7978:	e1 15       	cp	r30, r1
	cpc ZH,r1
    797a:	f1 05       	cpc	r31, r1
	breq .+2 
    797c:	09 f0       	breq	.+2      	; 0x7980 <no_render+0x50>
	icall
    797e:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7980:	0e 94 90 3e 	call	0x7d20	; 0x7d20 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7984:	0e 94 69 4c 	call	0x98d2	; 0x98d2 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7988:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <process_music>
	clr r1
    798c:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    798e:	e0 91 bd 0c 	lds	r30, 0x0CBD
	lds ZH,post_vsync_user_callback+1
    7992:	f0 91 be 0c 	lds	r31, 0x0CBE
	cp  ZL,r1
    7996:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7998:	f1 05       	cpc	r31, r1
	breq .+2 
    799a:	09 f0       	breq	.+2      	; 0x799e <no_render+0x6e>
	icall
    799c:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    799e:	bf 91       	pop	r27
	pop r26
    79a0:	af 91       	pop	r26
	pop r25
    79a2:	9f 91       	pop	r25
	pop r24
    79a4:	8f 91       	pop	r24
	pop r23
    79a6:	7f 91       	pop	r23
	pop r22
    79a8:	6f 91       	pop	r22
	pop r21
    79aa:	5f 91       	pop	r21
	pop r20
    79ac:	4f 91       	pop	r20
	pop r19
    79ae:	3f 91       	pop	r19
	pop r18
    79b0:	2f 91       	pop	r18

000079b2 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    79b2:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    79b4:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    79b6:	ff 91       	pop	r31
	pop ZL
    79b8:	ef 91       	pop	r30
	pop r1
    79ba:	1f 90       	pop	r1
	pop r0
    79bc:	0f 90       	pop	r0
	reti
    79be:	18 95       	reti

000079c0 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    79c0:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    79c2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    79c4:	00 c0       	rjmp	.+0      	; 0x79c6 <hsync_pulse+0x6>
	call update_sound
    79c6:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <update_sound>

	lds ZL,sync_pulse
    79ca:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    79ce:	ea 95       	dec	r30
	sts sync_pulse,ZL
    79d0:	e0 93 b9 0c 	sts	0x0CB9, r30

	ret
    79d4:	08 95       	ret

000079d6 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    79d6:	e0 91 d1 0c 	lds	r30, 0x0CD1
	sbrc ZL,0
    79da:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    79dc:	0e 94 1b 42 	call	0x8436	; 0x8436 <ProcessMusic>
#endif

	ret
    79e0:	08 95       	ret

000079e2 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    79e2:	0f 93       	push	r16
	push r17
    79e4:	1f 93       	push	r17
	push r18
    79e6:	2f 93       	push	r18
	push r28
    79e8:	cf 93       	push	r28
	push r29
    79ea:	df 93       	push	r29

	mov r18,ZL
    79ec:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    79ee:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr1_pos_frac
    79f2:	10 91 d5 0c 	lds	r17, 0x0CD5
	add	r17,r16	;add step to fractional part of sample pos
    79f6:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    79f8:	00 91 d4 0c 	lds	r16, 0x0CD4
	lds ZL,tr1_pos_lo
    79fc:	e0 91 d6 0c 	lds	r30, 0x0CD6
	lds ZH,tr1_pos_hi 
    7a00:	f0 91 d7 0c 	lds	r31, 0x0CD7
	adc ZL,r16	;add step to low byte of sample pos
    7a04:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7a06:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7a08:	e0 93 d6 0c 	sts	0x0CD6, r30
	sts tr1_pos_frac,r17
    7a0c:	10 93 d5 0c 	sts	0x0CD5, r17
	lds r17,tr1_vol
    7a10:	10 91 d2 0c 	lds	r17, 0x0CD2
	mulsu r16,r17;(sample*mixing vol)
    7a14:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7a16:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7a18:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7a1a:	d0 2d       	mov	r29, r0
	nop
    7a1c:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7a1e:	00 91 d9 0c 	lds	r16, 0x0CD9
	lds r17,tr2_pos_frac
    7a22:	10 91 db 0c 	lds	r17, 0x0CDB
	add	r17,r16	;add step to fractional part of sample pos
    7a26:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7a28:	00 91 da 0c 	lds	r16, 0x0CDA
	lds ZL,tr2_pos_lo
    7a2c:	e0 91 dc 0c 	lds	r30, 0x0CDC
	lds ZH,tr2_pos_hi 
    7a30:	f0 91 dd 0c 	lds	r31, 0x0CDD
	adc ZL,r16	;add step to low byte of sample pos
    7a34:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7a36:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7a38:	e0 93 dc 0c 	sts	0x0CDC, r30
	sts tr2_pos_frac,r17
    7a3c:	10 93 db 0c 	sts	0x0CDB, r17
	lds r17,tr2_vol
    7a40:	10 91 d8 0c 	lds	r17, 0x0CD8

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7a44:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7a46:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7a48:	20 ff       	sbrs	r18, 0
	rjmp .
    7a4a:	00 c0       	rjmp	.+0      	; 0x7a4c <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7a4c:	01 03       	mulsu	r16, r17
	clr r0
    7a4e:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7a50:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7a52:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7a54:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7a56:	00 91 df 0c 	lds	r16, 0x0CDF
	lds r17,tr3_pos_frac
    7a5a:	10 91 e1 0c 	lds	r17, 0x0CE1
	add	r17,r16				;add step to fractional part of sample pos
    7a5e:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7a60:	00 91 e0 0c 	lds	r16, 0x0CE0
	lds ZL,tr3_pos_lo
    7a64:	e0 91 e2 0c 	lds	r30, 0x0CE2
	lds ZH,tr3_pos_hi 
    7a68:	f0 91 e3 0c 	lds	r31, 0x0CE3
	adc ZL,r16				;add step to low byte of sample pos
    7a6c:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7a6e:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7a70:	e0 93 e2 0c 	sts	0x0CE2, r30
	sts tr3_pos_frac,r17
    7a74:	10 93 e1 0c 	sts	0x0CE1, r17
	lds r17,tr3_vol
    7a78:	10 91 de 0c 	lds	r17, 0x0CDE
	mulsu r16,r17			;(sample*mixing vol)
    7a7c:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7a7e:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7a80:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7a82:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7a84:	00 91 e6 0c 	lds	r16, 0x0CE6
	lds r17,tr4_barrel_hi
    7a88:	10 91 e7 0c 	lds	r17, 0x0CE7
	lds ZL,tr4_divider
    7a8c:	e0 91 e8 0c 	lds	r30, 0x0CE8
	dec ZL	
    7a90:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7a92:	92 f4       	brpl	.+36     	; 0x7ab8 <ch4_no_shift>

	lds ZH,tr4_params
    7a94:	f0 91 e5 0c 	lds	r31, 0x0CE5
	mov ZL,ZH
    7a98:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7a9a:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7a9c:	00 2e       	mov	r0, r16
	lsr r0
    7a9e:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7aa0:	00 26       	eor	r0, r16
	bst r0,0
    7aa2:	00 fa       	bst	r0, 0
	lsr r17
    7aa4:	16 95       	lsr	r17
	ror r16
    7aa6:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7aa8:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7aaa:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7aac:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7aae:	00 93 e6 0c 	sts	0x0CE6, r16
	sts tr4_barrel_hi,r17
    7ab2:	10 93 e7 0c 	sts	0x0CE7, r17

	rjmp ch4_end
    7ab6:	03 c0       	rjmp	.+6      	; 0x7abe <ch4_end>

00007ab8 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7ab8:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7aba:	1a 95       	dec	r17
	brne .-4
    7abc:	f1 f7       	brne	.-4      	; 0x7aba <ch4_no_shift+0x2>

00007abe <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7abe:	e0 93 e8 0c 	sts	0x0CE8, r30
	ldi r17,0x80 ;-128
    7ac2:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7ac4:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7ac6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7ac8:	21 ff       	sbrs	r18, 1
	rjmp .
    7aca:	00 c0       	rjmp	.+0      	; 0x7acc <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7acc:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7ace:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7ad0:	00 91 e4 0c 	lds	r16, 0x0CE4

	mulsu r17,r16;(sample*mixing vol)
    7ad4:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7ad6:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7ad8:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7ada:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7adc:	00 91 ed 0c 	lds	r16, 0x0CED
	lds r17,tr5_step_lo 
    7ae0:	10 91 eb 0c 	lds	r17, 0x0CEB
	add r16,r17
    7ae4:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7ae6:	00 93 ed 0c 	sts	0x0CED, r16

	;add lo
	lds ZL,tr5_pos_lo
    7aea:	e0 91 ee 0c 	lds	r30, 0x0CEE
	lds r17,tr5_step_hi 
    7aee:	10 91 ec 0c 	lds	r17, 0x0CEC
	adc ZL,r17
    7af2:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7af4:	f0 91 ef 0c 	lds	r31, 0x0CEF
	ldi r16,0
    7af8:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7afa:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7afc:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7afe:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_len_hi	
    7b02:	10 90 f1 0c 	lds	r1, 0x0CF1
	sub r16,r0
    7b06:	00 19       	sub	r16, r0
	sbc r17,r1
    7b08:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7b0a:	00 90 f2 0c 	lds	r0, 0x0CF2
	lds r1,tr5_loop_end_hi
    7b0e:	10 90 f3 0c 	lds	r1, 0x0CF3

	cp ZL,r0
    7b12:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7b14:	f1 05       	cpc	r31, r1
	brlo .+2
    7b16:	08 f0       	brcs	.+2      	; 0x7b1a <ch4_end+0x5c>
	movw ZL,r16
    7b18:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7b1a:	e0 93 ee 0c 	sts	0x0CEE, r30
	sts tr5_pos_hi,ZH
    7b1e:	f0 93 ef 0c 	sts	0x0CEF, r31

	lpm	r16,Z	;load sample
    7b22:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7b24:	10 91 ea 0c 	lds	r17, 0x0CEA

	mulsu r16,r17;(sample*mixing vol)
    7b28:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7b2a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7b2c:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7b2e:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7b30:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7b32:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7b34:	d0 05       	cpc	r29, r0
	brlt .+2
    7b36:	0c f0       	brlt	.+2      	; 0x7b3a <ch4_end+0x7c>
	ldi r28,127
    7b38:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7b3a:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7b3c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7b3e:	d0 05       	cpc	r29, r0
	brge .+2
    7b40:	0c f4       	brge	.+2      	; 0x7b44 <ch4_end+0x86>
	ldi r28,-128
    7b42:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7b44:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7b46:	c0 93 b3 00 	sts	0x00B3, r28

00007b4a <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7b4a:	df 91       	pop	r29
	pop r28
    7b4c:	cf 91       	pop	r28
	pop r18
    7b4e:	2f 91       	pop	r18
	pop r17
    7b50:	1f 91       	pop	r17
	pop r16
    7b52:	0f 91       	pop	r16
	
	ret
    7b54:	08 95       	ret

00007b56 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7b56:	80 93 a7 0c 	sts	0x0CA7, r24
	sts sprites_tile_banks+1,r25
    7b5a:	90 93 a8 0c 	sts	0x0CA8, r25
	ret
    7b5e:	08 95       	ret

00007b60 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7b60:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7b62:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7b64:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7b66:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7b68:	6c e1       	ldi	r22, 0x1C	; 28

00007b6a <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7b6a:	6d 93       	st	X+, r22
	sbiw r30,1
    7b6c:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7b6e:	e9 f7       	brne	.-6      	; 0x7b6a <fill_vram_loop>

	clr r1
    7b70:	11 24       	eor	r1, r1

	ret
    7b72:	08 95       	ret

00007b74 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7b74:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7b76:	76 2f       	mov	r23, r22
	lsr r22
    7b78:	66 95       	lsr	r22
	lsr r22
    7b7a:	66 95       	lsr	r22
	lsr r22			;y>>3
    7b7c:	66 95       	lsr	r22
	ldi r18,8		
    7b7e:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    7b80:	82 9f       	mul	r24, r18
	movw XL,r0
    7b82:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7b84:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7b86:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7b88:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7b8a:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7b8c:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7b8e:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    7b90:	4c 93       	st	X, r20

	clr r1
    7b92:	11 24       	eor	r1, r1

	ret
    7b94:	08 95       	ret

00007b96 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7b96:	80 93 af 0c 	sts	0x0CAF, r24
	sts tile_table_hi,r25	
    7b9a:	90 93 b0 0c 	sts	0x0CB0, r25
	ret
    7b9e:	08 95       	ret

00007ba0 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7ba0:	80 91 ba 0c 	lds	r24, 0x0CBA
	andi r24,SYNC_FLAG_VSYNC
    7ba4:	81 70       	andi	r24, 0x01	; 1
	ret
    7ba6:	08 95       	ret

00007ba8 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7ba8:	20 91 ba 0c 	lds	r18, 0x0CBA
	andi r18,~SYNC_FLAG_VSYNC
    7bac:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7bae:	20 93 ba 0c 	sts	0x0CBA, r18
	ret
    7bb2:	08 95       	ret

00007bb4 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7bb4:	88 23       	and	r24, r24
	brne rj_p2
    7bb6:	29 f4       	brne	.+10     	; 0x7bc2 <rj_p2>
		
	lds r24,joypad1_status_lo
    7bb8:	80 91 c1 0c 	lds	r24, 0x0CC1
	lds r25,joypad1_status_lo+1
    7bbc:	90 91 c2 0c 	lds	r25, 0x0CC2
	ret
    7bc0:	08 95       	ret

00007bc2 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7bc2:	80 91 c5 0c 	lds	r24, 0x0CC5
	lds r25,joypad2_status_lo+1	
    7bc6:	90 91 c6 0c 	lds	r25, 0x0CC6

	ret
    7bca:	08 95       	ret

00007bcc <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7bcc:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7bce:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7bd0:	f1 f7       	brne	.-4      	; 0x7bce <WaitUs+0x2>
	nop
    7bd2:	00 00       	nop
	sbiw r24,1
    7bd4:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7bd6:	d1 f7       	brne	.-12     	; 0x7bcc <WaitUs>

	ret
    7bd8:	08 95       	ret

00007bda <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7bda:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7bdc:	fe cf       	rjmp	.-4      	; 0x7bda <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7bde:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7be0:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7be2:	60 bd       	out	0x20, r22	; 32
   cli
    7be4:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7be6:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7be8:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7bea:	78 94       	sei
   ret
    7bec:	08 95       	ret

00007bee <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7bee:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7bf0:	fe cf       	rjmp	.-4      	; 0x7bee <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7bf2:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7bf4:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7bf6:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7bf8:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7bfa:	80 b5       	in	r24, 0x20	; 32
   sei
    7bfc:	78 94       	sei
   ret
    7bfe:	08 95       	ret

00007c00 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7c00:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7c02:	80 93 b9 0c 	sts	0x0CB9, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7c06:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7c0a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7c0e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7c12:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7c16:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7c1a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7c1e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7c22:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7c26:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7c28:	80 93 81 00 	sts	0x0081, r24

		cli
    7c2c:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7c2e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7c30:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7c34:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7c36:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7c3a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7c3c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7c40:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7c44:	78 94       	sei

00007c46 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7c46:	80 91 b9 0c 	lds	r24, 0x0CB9
		cpi r24,8
    7c4a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7c4c:	e0 f3       	brcs	.-8      	; 0x7c46 <wait>

		ret
    7c4e:	08 95       	ret

00007c50 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7c50:	80 91 cb 0c 	lds	r24, 0x0CCB
		lds r25,random_value+1
    7c54:	90 91 cc 0c 	lds	r25, 0x0CCC
		ret
    7c58:	08 95       	ret

00007c5a <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7c5a:	0f 93       	push	r16
		push r17
    7c5c:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7c5e:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7c60:	0f 93       	push	r16

		lds r16,sync_pulse
    7c62:	00 91 b9 0c 	lds	r16, 0x0CB9
		inc r16
    7c66:	03 95       	inc	r16
		sts sync_pulse,r16
    7c68:	00 93 b9 0c 	sts	0x0CB9, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7c6c:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7c6e:	08 c0       	rjmp	.+16     	; 0x7c80 <__vector_8+0x26>
		lds r17,random_value
    7c70:	10 91 cb 0c 	lds	r17, 0x0CCB
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7c74:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7c78:	10 27       	eor	r17, r16
		sts random_value,r17
    7c7a:	10 93 cb 0c 	sts	0x0CCB, r17
		rjmp 2f
    7c7e:	07 c0       	rjmp	.+14     	; 0x7c8e <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7c80:	10 91 cc 0c 	lds	r17, 0x0CCC
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7c84:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7c88:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7c8a:	10 93 cc 0c 	sts	0x0CCC, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7c8e:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7c90:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7c94:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7c96:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7c98:	1f 91       	pop	r17
		pop r16
    7c9a:	0f 91       	pop	r16
		reti
    7c9c:	18 95       	reti

00007c9e <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7c9e:	98 e0       	ldi	r25, 0x08	; 8
    7ca0:	88 e1       	ldi	r24, 0x18	; 24
    7ca2:	0f b6       	in	r0, 0x3f	; 63
    7ca4:	f8 94       	cli
    7ca6:	a8 95       	wdr
    7ca8:	80 93 60 00 	sts	0x0060, r24
    7cac:	0f be       	out	0x3f, r0	; 63
    7cae:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7cb2:	ff cf       	rjmp	.-2      	; 0x7cb2 <SoftReset+0x14>

00007cb4 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7cb4:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7cb6:	c8 95       	lpm
    7cb8:	c8 95       	lpm
		Wait200ns();
    7cba:	c8 95       	lpm
    7cbc:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7cbe:	12 98       	cbi	0x02, 2	; 2
    7cc0:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7cc2:	80 e0       	ldi	r24, 0x00	; 0
    7cc4:	90 e0       	ldi	r25, 0x00	; 0
    7cc6:	20 e0       	ldi	r18, 0x00	; 0
    7cc8:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7cca:	36 95       	lsr	r19
    7ccc:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7cce:	96 95       	lsr	r25
    7cd0:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7cd2:	c8 95       	lpm
    7cd4:	c8 95       	lpm
			Wait200ns();
    7cd6:	c8 95       	lpm
    7cd8:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7cda:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7cdc:	00 9b       	sbis	0x00, 0	; 0
    7cde:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7ce0:	01 9b       	sbis	0x00, 1	; 0
    7ce2:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7ce4:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7ce6:	c8 95       	lpm
    7ce8:	c8 95       	lpm
			Wait200ns();
    7cea:	c8 95       	lpm
    7cec:	c8 95       	lpm
    7cee:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7cf0:	61 f7       	brne	.-40     	; 0x7cca <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7cf2:	30 93 c2 0c 	sts	0x0CC2, r19
    7cf6:	20 93 c1 0c 	sts	0x0CC1, r18
		joypad2_status_lo=p2ButtonsLo;
    7cfa:	90 93 c6 0c 	sts	0x0CC6, r25
    7cfe:	80 93 c5 0c 	sts	0x0CC5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7d02:	80 91 c1 0c 	lds	r24, 0x0CC1
    7d06:	90 91 c2 0c 	lds	r25, 0x0CC2
    7d0a:	0f 97       	sbiw	r24, 0x0f	; 15
    7d0c:	31 f0       	breq	.+12     	; 0x7d1a <ReadButtons+0x66>
    7d0e:	80 91 c5 0c 	lds	r24, 0x0CC5
    7d12:	90 91 c6 0c 	lds	r25, 0x0CC6
    7d16:	0f 97       	sbiw	r24, 0x0f	; 15
    7d18:	11 f4       	brne	.+4      	; 0x7d1e <ReadButtons+0x6a>
		SoftReset();
    7d1a:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <SoftReset>
    7d1e:	08 95       	ret

00007d20 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7d20:	10 92 01 0d 	sts	0x0D01, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7d24:	00 99       	sbic	0x00, 0	; 0
    7d26:	03 c0       	rjmp	.+6      	; 0x7d2e <ReadControllers+0xe>
    7d28:	81 e0       	ldi	r24, 0x01	; 1
    7d2a:	80 93 01 0d 	sts	0x0D01, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7d2e:	01 99       	sbic	0x00, 1	; 0
    7d30:	05 c0       	rjmp	.+10     	; 0x7d3c <ReadControllers+0x1c>
    7d32:	80 91 01 0d 	lds	r24, 0x0D01
    7d36:	82 60       	ori	r24, 0x02	; 2
    7d38:	80 93 01 0d 	sts	0x0D01, r24
			
	//read the standard buttons
	ReadButtons();
    7d3c:	0c 94 5a 3e 	jmp	0x7cb4	; 0x7cb4 <ReadButtons>

00007d40 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7d40:	cf 93       	push	r28
    7d42:	df 93       	push	r29
    7d44:	c0 e0       	ldi	r28, 0x00	; 0
    7d46:	d0 e0       	ldi	r29, 0x00	; 0
    7d48:	fe 01       	movw	r30, r28
    7d4a:	ec 53       	subi	r30, 0x3C	; 60
    7d4c:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7d4e:	64 91       	lpm	r22, Z
    7d50:	ce 01       	movw	r24, r28
    7d52:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <WriteEeprom>
    7d56:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7d58:	c0 32       	cpi	r28, 0x20	; 32
    7d5a:	d1 05       	cpc	r29, r1
    7d5c:	a9 f7       	brne	.-22     	; 0x7d48 <FormatEeprom+0x8>
    7d5e:	c0 e2       	ldi	r28, 0x20	; 32
    7d60:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7d62:	6f ef       	ldi	r22, 0xFF	; 255
    7d64:	ce 01       	movw	r24, r28
    7d66:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7d6a:	6f ef       	ldi	r22, 0xFF	; 255
    7d6c:	ce 01       	movw	r24, r28
    7d6e:	01 96       	adiw	r24, 0x01	; 1
    7d70:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7d74:	a0 96       	adiw	r28, 0x20	; 32
    7d76:	c1 15       	cp	r28, r1
    7d78:	88 e0       	ldi	r24, 0x08	; 8
    7d7a:	d8 07       	cpc	r29, r24
    7d7c:	91 f7       	brne	.-28     	; 0x7d62 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7d7e:	df 91       	pop	r29
    7d80:	cf 91       	pop	r28
    7d82:	08 95       	ret

00007d84 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7d84:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7d86:	80 e0       	ldi	r24, 0x00	; 0
    7d88:	90 e0       	ldi	r25, 0x00	; 0
    7d8a:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <ReadEeprom>
    7d8e:	c8 2f       	mov	r28, r24
    7d90:	81 e0       	ldi	r24, 0x01	; 1
    7d92:	90 e0       	ldi	r25, 0x00	; 0
    7d94:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <ReadEeprom>
    7d98:	28 2f       	mov	r18, r24
    7d9a:	30 e0       	ldi	r19, 0x00	; 0
    7d9c:	32 2f       	mov	r19, r18
    7d9e:	22 27       	eor	r18, r18
    7da0:	2c 0f       	add	r18, r28
    7da2:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7da4:	81 e0       	ldi	r24, 0x01	; 1
    7da6:	2a 35       	cpi	r18, 0x5A	; 90
    7da8:	35 45       	sbci	r19, 0x55	; 85
    7daa:	09 f0       	breq	.+2      	; 0x7dae <isEepromFormatted+0x2a>
    7dac:	80 e0       	ldi	r24, 0x00	; 0
}
    7dae:	cf 91       	pop	r28
    7db0:	08 95       	ret

00007db2 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7db2:	8f 92       	push	r8
    7db4:	9f 92       	push	r9
    7db6:	af 92       	push	r10
    7db8:	bf 92       	push	r11
    7dba:	cf 92       	push	r12
    7dbc:	df 92       	push	r13
    7dbe:	ef 92       	push	r14
    7dc0:	ff 92       	push	r15
    7dc2:	0f 93       	push	r16
    7dc4:	1f 93       	push	r17
    7dc6:	cf 93       	push	r28
    7dc8:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7dca:	fb 01       	movw	r30, r22
    7dcc:	11 82       	std	Z+1, r1	; 0x01
    7dce:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7dd0:	8f 3f       	cpi	r24, 0xFF	; 255
    7dd2:	ff ef       	ldi	r31, 0xFF	; 255
    7dd4:	9f 07       	cpc	r25, r31
    7dd6:	89 f1       	breq	.+98     	; 0x7e3a <EepromBlockExists+0x88>
    7dd8:	6a 01       	movw	r12, r20
    7dda:	8b 01       	movw	r16, r22
    7ddc:	7c 01       	movw	r14, r24
    7dde:	a1 2c       	mov	r10, r1
    7de0:	b1 2c       	mov	r11, r1
    7de2:	c0 e0       	ldi	r28, 0x00	; 0
    7de4:	d3 e0       	ldi	r29, 0x03	; 3
    7de6:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7de8:	c5 01       	movw	r24, r10
    7dea:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <ReadEeprom>
    7dee:	88 2e       	mov	r8, r24
    7df0:	c5 01       	movw	r24, r10
    7df2:	01 96       	adiw	r24, 0x01	; 1
    7df4:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <ReadEeprom>
    7df8:	28 2f       	mov	r18, r24
    7dfa:	30 e0       	ldi	r19, 0x00	; 0
    7dfc:	32 2f       	mov	r19, r18
    7dfe:	22 27       	eor	r18, r18
    7e00:	28 0d       	add	r18, r8
    7e02:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7e04:	2e 15       	cp	r18, r14
    7e06:	3f 05       	cpc	r19, r15
    7e08:	29 f4       	brne	.+10     	; 0x7e14 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7e0a:	f8 01       	movw	r30, r16
    7e0c:	b1 82       	std	Z+1, r11	; 0x01
    7e0e:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7e10:	d0 e0       	ldi	r29, 0x00	; 0
    7e12:	0b c0       	rjmp	.+22     	; 0x7e2a <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7e14:	2f 3f       	cpi	r18, 0xFF	; 255
    7e16:	3f 4f       	sbci	r19, 0xFF	; 255
    7e18:	41 f4       	brne	.+16     	; 0x7e2a <EepromBlockExists+0x78>
    7e1a:	91 10       	cpse	r9, r1
    7e1c:	06 c0       	rjmp	.+12     	; 0x7e2a <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7e1e:	c1 14       	cp	r12, r1
    7e20:	d1 04       	cpc	r13, r1
    7e22:	11 f0       	breq	.+4      	; 0x7e28 <EepromBlockExists+0x76>
    7e24:	f6 01       	movw	r30, r12
    7e26:	c0 83       	st	Z, r28
    7e28:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7e2a:	cf 5f       	subi	r28, 0xFF	; 255
    7e2c:	f0 e2       	ldi	r31, 0x20	; 32
    7e2e:	af 0e       	add	r10, r31
    7e30:	b1 1c       	adc	r11, r1
    7e32:	c0 34       	cpi	r28, 0x40	; 64
    7e34:	c9 f6       	brne	.-78     	; 0x7de8 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7e36:	8d 2f       	mov	r24, r29
    7e38:	01 c0       	rjmp	.+2      	; 0x7e3c <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7e3a:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7e3c:	df 91       	pop	r29
    7e3e:	cf 91       	pop	r28
    7e40:	1f 91       	pop	r17
    7e42:	0f 91       	pop	r16
    7e44:	ff 90       	pop	r15
    7e46:	ef 90       	pop	r14
    7e48:	df 90       	pop	r13
    7e4a:	cf 90       	pop	r12
    7e4c:	bf 90       	pop	r11
    7e4e:	af 90       	pop	r10
    7e50:	9f 90       	pop	r9
    7e52:	8f 90       	pop	r8
    7e54:	08 95       	ret

00007e56 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7e56:	ef 92       	push	r14
    7e58:	ff 92       	push	r15
    7e5a:	0f 93       	push	r16
    7e5c:	1f 93       	push	r17
    7e5e:	cf 93       	push	r28
    7e60:	df 93       	push	r29
    7e62:	00 d0       	rcall	.+0      	; 0x7e64 <EepromWriteBlock+0xe>
    7e64:	1f 92       	push	r1
    7e66:	cd b7       	in	r28, 0x3d	; 61
    7e68:	de b7       	in	r29, 0x3e	; 62
    7e6a:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7e6c:	1a 82       	std	Y+2, r1	; 0x02
    7e6e:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    7e70:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    7e72:	ae 01       	movw	r20, r28
    7e74:	4d 5f       	subi	r20, 0xFD	; 253
    7e76:	5f 4f       	sbci	r21, 0xFF	; 255
    7e78:	be 01       	movw	r22, r28
    7e7a:	6f 5f       	subi	r22, 0xFF	; 255
    7e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e7e:	fc 01       	movw	r30, r24
    7e80:	80 81       	ld	r24, Z
    7e82:	91 81       	ldd	r25, Z+1	; 0x01
    7e84:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7e88:	88 23       	and	r24, r24
    7e8a:	11 f0       	breq	.+4      	; 0x7e90 <EepromWriteBlock+0x3a>
    7e8c:	83 30       	cpi	r24, 0x03	; 3
    7e8e:	19 f5       	brne	.+70     	; 0x7ed6 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7e90:	89 81       	ldd	r24, Y+1	; 0x01
    7e92:	9a 81       	ldd	r25, Y+2	; 0x02
    7e94:	89 2b       	or	r24, r25
    7e96:	49 f4       	brne	.+18     	; 0x7eaa <EepromWriteBlock+0x54>
    7e98:	8b 81       	ldd	r24, Y+3	; 0x03
    7e9a:	88 23       	and	r24, r24
    7e9c:	d9 f0       	breq	.+54     	; 0x7ed4 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7e9e:	f0 e2       	ldi	r31, 0x20	; 32
    7ea0:	8f 9f       	mul	r24, r31
    7ea2:	c0 01       	movw	r24, r0
    7ea4:	11 24       	eor	r1, r1
    7ea6:	9a 83       	std	Y+2, r25	; 0x02
    7ea8:	89 83       	std	Y+1, r24	; 0x01
    7eaa:	78 01       	movw	r14, r16
    7eac:	20 e2       	ldi	r18, 0x20	; 32
    7eae:	e2 0e       	add	r14, r18
    7eb0:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7eb2:	f8 01       	movw	r30, r16
    7eb4:	61 91       	ld	r22, Z+
    7eb6:	8f 01       	movw	r16, r30
    7eb8:	89 81       	ldd	r24, Y+1	; 0x01
    7eba:	9a 81       	ldd	r25, Y+2	; 0x02
    7ebc:	9c 01       	movw	r18, r24
    7ebe:	2f 5f       	subi	r18, 0xFF	; 255
    7ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ec2:	3a 83       	std	Y+2, r19	; 0x02
    7ec4:	29 83       	std	Y+1, r18	; 0x01
    7ec6:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7eca:	0e 15       	cp	r16, r14
    7ecc:	1f 05       	cpc	r17, r15
    7ece:	89 f7       	brne	.-30     	; 0x7eb2 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7ed0:	80 e0       	ldi	r24, 0x00	; 0
    7ed2:	01 c0       	rjmp	.+2      	; 0x7ed6 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7ed4:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7ed6:	0f 90       	pop	r0
    7ed8:	0f 90       	pop	r0
    7eda:	0f 90       	pop	r0
    7edc:	df 91       	pop	r29
    7ede:	cf 91       	pop	r28
    7ee0:	1f 91       	pop	r17
    7ee2:	0f 91       	pop	r16
    7ee4:	ff 90       	pop	r15
    7ee6:	ef 90       	pop	r14
    7ee8:	08 95       	ret

00007eea <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7eea:	cf 92       	push	r12
    7eec:	df 92       	push	r13
    7eee:	ff 92       	push	r15
    7ef0:	0f 93       	push	r16
    7ef2:	1f 93       	push	r17
    7ef4:	cf 93       	push	r28
    7ef6:	df 93       	push	r29
    7ef8:	00 d0       	rcall	.+0      	; 0x7efa <EepromReadBlock+0x10>
    7efa:	cd b7       	in	r28, 0x3d	; 61
    7efc:	de b7       	in	r29, 0x3e	; 62
    7efe:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7f00:	40 e0       	ldi	r20, 0x00	; 0
    7f02:	50 e0       	ldi	r21, 0x00	; 0
    7f04:	be 01       	movw	r22, r28
    7f06:	6f 5f       	subi	r22, 0xFF	; 255
    7f08:	7f 4f       	sbci	r23, 0xFF	; 255
    7f0a:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <EepromBlockExists>
    7f0e:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7f10:	81 11       	cpse	r24, r1
    7f12:	13 c0       	rjmp	.+38     	; 0x7f3a <EepromReadBlock+0x50>
    7f14:	68 01       	movw	r12, r16
    7f16:	80 e2       	ldi	r24, 0x20	; 32
    7f18:	c8 0e       	add	r12, r24
    7f1a:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7f1c:	89 81       	ldd	r24, Y+1	; 0x01
    7f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f20:	9c 01       	movw	r18, r24
    7f22:	2f 5f       	subi	r18, 0xFF	; 255
    7f24:	3f 4f       	sbci	r19, 0xFF	; 255
    7f26:	3a 83       	std	Y+2, r19	; 0x02
    7f28:	29 83       	std	Y+1, r18	; 0x01
    7f2a:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <ReadEeprom>
    7f2e:	f8 01       	movw	r30, r16
    7f30:	81 93       	st	Z+, r24
    7f32:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7f34:	ec 15       	cp	r30, r12
    7f36:	fd 05       	cpc	r31, r13
    7f38:	89 f7       	brne	.-30     	; 0x7f1c <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7f3a:	8f 2d       	mov	r24, r15
    7f3c:	0f 90       	pop	r0
    7f3e:	0f 90       	pop	r0
    7f40:	df 91       	pop	r29
    7f42:	cf 91       	pop	r28
    7f44:	1f 91       	pop	r17
    7f46:	0f 91       	pop	r16
    7f48:	ff 90       	pop	r15
    7f4a:	df 90       	pop	r13
    7f4c:	cf 90       	pop	r12
    7f4e:	08 95       	ret

00007f50 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7f50:	00 97       	sbiw	r24, 0x00	; 0
    7f52:	21 f0       	breq	.+8      	; 0x7f5c <GetPrngNumber+0xc>
    7f54:	90 93 cf 0c 	sts	0x0CCF, r25
    7f58:	80 93 ce 0c 	sts	0x0CCE, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7f5c:	20 91 ce 0c 	lds	r18, 0x0CCE
    7f60:	30 91 cf 0c 	lds	r19, 0x0CCF
    7f64:	a9 01       	movw	r20, r18
    7f66:	56 95       	lsr	r21
    7f68:	47 95       	ror	r20
    7f6a:	56 95       	lsr	r21
    7f6c:	47 95       	ror	r20
    7f6e:	c9 01       	movw	r24, r18
    7f70:	63 e0       	ldi	r22, 0x03	; 3
    7f72:	96 95       	lsr	r25
    7f74:	87 95       	ror	r24
    7f76:	6a 95       	dec	r22
    7f78:	e1 f7       	brne	.-8      	; 0x7f72 <GetPrngNumber+0x22>
    7f7a:	84 27       	eor	r24, r20
    7f7c:	95 27       	eor	r25, r21
    7f7e:	82 27       	eor	r24, r18
    7f80:	93 27       	eor	r25, r19
    7f82:	a9 01       	movw	r20, r18
    7f84:	75 e0       	ldi	r23, 0x05	; 5
    7f86:	56 95       	lsr	r21
    7f88:	47 95       	ror	r20
    7f8a:	7a 95       	dec	r23
    7f8c:	e1 f7       	brne	.-8      	; 0x7f86 <GetPrngNumber+0x36>
    7f8e:	84 27       	eor	r24, r20
    7f90:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    7f92:	99 27       	eor	r25, r25
    7f94:	86 95       	lsr	r24
    7f96:	97 95       	ror	r25
    7f98:	88 27       	eor	r24, r24
    7f9a:	36 95       	lsr	r19
    7f9c:	27 95       	ror	r18
    7f9e:	82 2b       	or	r24, r18
    7fa0:	93 2b       	or	r25, r19
    7fa2:	90 93 cf 0c 	sts	0x0CCF, r25
    7fa6:	80 93 ce 0c 	sts	0x0CCE, r24
	return prng_state;   
}
    7faa:	08 95       	ret

00007fac <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7fac:	fc 01       	movw	r30, r24
    7fae:	67 87       	std	Z+15, r22	; 0x0f
    7fb0:	08 95       	ret

00007fb2 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7fb2:	e2 ed       	ldi	r30, 0xD2	; 210
    7fb4:	fc e0       	ldi	r31, 0x0C	; 12
    7fb6:	81 e0       	ldi	r24, 0x01	; 1
    7fb8:	91 e0       	ldi	r25, 0x01	; 1
    7fba:	95 8b       	std	Z+21, r25	; 0x15
    7fbc:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7fbe:	63 8b       	std	Z+19, r22	; 0x13
    7fc0:	08 95       	ret

00007fc2 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7fc2:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7fc4:	90 81       	ld	r25, Z
    7fc6:	9f 75       	andi	r25, 0x5F	; 95
    7fc8:	90 83       	st	Z, r25
    7fca:	08 95       	ret

00007fcc <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7fcc:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7fce:	90 81       	ld	r25, Z
    7fd0:	90 64       	ori	r25, 0x40	; 64
    7fd2:	90 83       	st	Z, r25
    7fd4:	08 95       	ret

00007fd6 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7fd6:	fc 01       	movw	r30, r24
    7fd8:	66 87       	std	Z+14, r22	; 0x0e
    7fda:	08 95       	ret

00007fdc <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    7fdc:	fc 01       	movw	r30, r24
    7fde:	62 87       	std	Z+10, r22	; 0x0a
    7fe0:	08 95       	ret

00007fe2 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7fe2:	fc 01       	movw	r30, r24
    7fe4:	63 87       	std	Z+11, r22	; 0x0b
    7fe6:	08 95       	ret

00007fe8 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7fe8:	cf 93       	push	r28
    7fea:	df 93       	push	r29
    7fec:	ec 01       	movw	r28, r24
    7fee:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7ff0:	29 81       	ldd	r18, Y+1	; 0x01
    7ff2:	30 e0       	ldi	r19, 0x00	; 0
    7ff4:	f9 01       	movw	r30, r18
    7ff6:	ee 0f       	add	r30, r30
    7ff8:	ff 1f       	adc	r31, r31
    7ffa:	e8 5f       	subi	r30, 0xF8	; 248
    7ffc:	f6 47       	sbci	r31, 0x76	; 118
    7ffe:	65 91       	lpm	r22, Z+
    8000:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8002:	f9 01       	movw	r30, r18
    8004:	e4 0f       	add	r30, r20
    8006:	f1 1d       	adc	r31, r1
    8008:	47 fd       	sbrc	r20, 7
    800a:	fa 95       	dec	r31
    800c:	ee 0f       	add	r30, r30
    800e:	ff 1f       	adc	r31, r31
    8010:	e8 5f       	subi	r30, 0xF8	; 248
    8012:	f6 47       	sbci	r31, 0x76	; 118
    8014:	85 91       	lpm	r24, Z+
    8016:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8018:	86 1b       	sub	r24, r22
    801a:	97 0b       	sbc	r25, r23
    801c:	68 85       	ldd	r22, Y+8	; 0x08
    801e:	70 e0       	ldi	r23, 0x00	; 0
    8020:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
	if(delta==0)delta++;
    8024:	61 15       	cp	r22, r1
    8026:	71 05       	cpc	r23, r1
    8028:	11 f4       	brne	.+4      	; 0x802e <PatchCommand11+0x46>
    802a:	61 e0       	ldi	r22, 0x01	; 1
    802c:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    802e:	ea 81       	ldd	r30, Y+2	; 0x02
    8030:	86 e0       	ldi	r24, 0x06	; 6
    8032:	e8 9f       	mul	r30, r24
    8034:	f0 01       	movw	r30, r0
    8036:	11 24       	eor	r1, r1
    8038:	ee 52       	subi	r30, 0x2E	; 46
    803a:	f3 4f       	sbci	r31, 0xF3	; 243
    803c:	81 81       	ldd	r24, Z+1	; 0x01
    803e:	92 81       	ldd	r25, Z+2	; 0x02
    8040:	86 0f       	add	r24, r22
    8042:	97 1f       	adc	r25, r23
    8044:	92 83       	std	Z+2, r25	; 0x02
    8046:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8048:	7e 83       	std	Y+6, r23	; 0x06
    804a:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    804c:	88 81       	ld	r24, Y
    804e:	88 60       	ori	r24, 0x08	; 8
    8050:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8052:	89 81       	ldd	r24, Y+1	; 0x01
    8054:	48 0f       	add	r20, r24
    8056:	4f 83       	std	Y+7, r20	; 0x07
}
    8058:	df 91       	pop	r29
    805a:	cf 91       	pop	r28
    805c:	08 95       	ret

0000805e <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    805e:	fc 01       	movw	r30, r24
    8060:	60 87       	std	Z+8, r22	; 0x08
    8062:	08 95       	ret

00008064 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8064:	fc 01       	movw	r30, r24
    8066:	64 83       	std	Z+4, r22	; 0x04
    8068:	08 95       	ret

0000806a <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    806a:	fc 01       	movw	r30, r24
    806c:	82 81       	ldd	r24, Z+2	; 0x02
    806e:	0c 94 57 44 	jmp	0x88ae	; 0x88ae <SetMixerWave>

00008072 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8072:	fc 01       	movw	r30, r24
	track->note+=param;
    8074:	91 81       	ldd	r25, Z+1	; 0x01
    8076:	69 0f       	add	r22, r25
    8078:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    807a:	82 81       	ldd	r24, Z+2	; 0x02
    807c:	0c 94 40 44 	jmp	0x8880	; 0x8880 <SetMixerNote>

00008080 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8080:	fc 01       	movw	r30, r24
	track->note-=param;
    8082:	91 81       	ldd	r25, Z+1	; 0x01
    8084:	96 1b       	sub	r25, r22
    8086:	69 2f       	mov	r22, r25
    8088:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    808a:	82 81       	ldd	r24, Z+2	; 0x02
    808c:	0c 94 40 44 	jmp	0x8880	; 0x8880 <SetMixerNote>

00008090 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8090:	1f 93       	push	r17
    8092:	cf 93       	push	r28
    8094:	df 93       	push	r29
    8096:	ec 01       	movw	r28, r24
    8098:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    809a:	8a 81       	ldd	r24, Y+2	; 0x02
    809c:	0e 94 40 44 	call	0x8880	; 0x8880 <SetMixerNote>
	track->note=param;
    80a0:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    80a2:	88 81       	ld	r24, Y
    80a4:	87 7f       	andi	r24, 0xF7	; 247
    80a6:	88 83       	st	Y, r24
}
    80a8:	df 91       	pop	r29
    80aa:	cf 91       	pop	r28
    80ac:	1f 91       	pop	r17
    80ae:	08 95       	ret

000080b0 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    80b0:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    80b2:	14 96       	adiw	r26, 0x04	; 4
    80b4:	8c 91       	ld	r24, X
    80b6:	14 97       	sbiw	r26, 0x04	; 4
    80b8:	88 23       	and	r24, r24
    80ba:	19 f1       	breq	.+70     	; 0x8102 <PatchCommand14+0x52>
    80bc:	55 96       	adiw	r26, 0x15	; 21
    80be:	2d 91       	ld	r18, X+
    80c0:	3c 91       	ld	r19, X
    80c2:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    80c4:	66 23       	and	r22, r22
    80c6:	79 f0       	breq	.+30     	; 0x80e6 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    80c8:	77 27       	eor	r23, r23
    80ca:	67 fd       	sbrc	r22, 7
    80cc:	70 95       	com	r23
    80ce:	6f 5f       	subi	r22, 0xFF	; 255
    80d0:	7f 4f       	sbci	r23, 0xFF	; 255
    80d2:	ab 01       	movw	r20, r22
    80d4:	44 0f       	add	r20, r20
    80d6:	55 1f       	adc	r21, r21
    80d8:	64 0f       	add	r22, r20
    80da:	75 1f       	adc	r23, r21
    80dc:	26 1b       	sub	r18, r22
    80de:	37 0b       	sbc	r19, r23
    80e0:	09 c0       	rjmp	.+18     	; 0x80f4 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    80e2:	ef 3f       	cpi	r30, 0xFF	; 255
    80e4:	39 f0       	breq	.+14     	; 0x80f4 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    80e6:	23 50       	subi	r18, 0x03	; 3
    80e8:	31 09       	sbc	r19, r1
    80ea:	f9 01       	movw	r30, r18
    80ec:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    80ee:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    80f0:	ed 30       	cpi	r30, 0x0D	; 13
    80f2:	b9 f7       	brne	.-18     	; 0x80e2 <PatchCommand14+0x32>
    80f4:	56 96       	adiw	r26, 0x16	; 22
    80f6:	3c 93       	st	X, r19
    80f8:	2e 93       	st	-X, r18
    80fa:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    80fc:	81 50       	subi	r24, 0x01	; 1
    80fe:	14 96       	adiw	r26, 0x04	; 4
    8100:	8c 93       	st	X, r24
    8102:	08 95       	ret

00008104 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8104:	90 93 7a 0d 	sts	0x0D7A, r25
    8108:	80 93 79 0d 	sts	0x0D79, r24

	masterVolume=DEFAULT_MASTER_VOL;
    810c:	8f e6       	ldi	r24, 0x6F	; 111
    810e:	80 93 7c 0d 	sts	0x0D7C, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8112:	10 92 d0 0c 	sts	0x0CD0, r1
    8116:	e4 e1       	ldi	r30, 0x14	; 20
    8118:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    811a:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    811c:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    811e:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8120:	28 e1       	ldi	r18, 0x18	; 24
    8122:	df 01       	movw	r26, r30
    8124:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8126:	8c 93       	st	X, r24
    8128:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    812a:	9c 93       	st	X, r25
    812c:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    812e:	1c 92       	st	X, r1
    8130:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8132:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8134:	10 82       	st	Z, r1
    8136:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8138:	2c 93       	st	X, r18
    813a:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    813c:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    813e:	8f 5f       	subi	r24, 0xFF	; 255
    8140:	77 96       	adiw	r30, 0x17	; 23
    8142:	85 30       	cpi	r24, 0x05	; 5
    8144:	71 f7       	brne	.-36     	; 0x8122 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8146:	08 95       	ret

00008148 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    8148:	e4 e0       	ldi	r30, 0x04	; 4
    814a:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    814c:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    814e:	20 81       	ld	r18, Z
    8150:	2f 77       	andi	r18, 0x7F	; 127
    8152:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8154:	33 83       	std	Z+3, r19	; 0x03
    8156:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    8158:	2d e0       	ldi	r18, 0x0D	; 13
    815a:	e7 37       	cpi	r30, 0x77	; 119
    815c:	f2 07       	cpc	r31, r18
    815e:	b9 f7       	brne	.-18     	; 0x814e <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8160:	01 96       	adiw	r24, 0x01	; 1
    8162:	90 93 81 0d 	sts	0x0D81, r25
    8166:	80 93 80 0d 	sts	0x0D80, r24
		songStart=song+1;//skip first delta-time
    816a:	90 93 03 0d 	sts	0x0D03, r25
    816e:	80 93 02 0d 	sts	0x0D02, r24
		loopStart=song+1;
    8172:	90 93 83 0d 	sts	0x0D83, r25
    8176:	80 93 82 0d 	sts	0x0D82, r24
		nextDeltaTime=0;
    817a:	10 92 7e 0d 	sts	0x0D7E, r1
    817e:	10 92 7d 0d 	sts	0x0D7D, r1
		currDeltaTime=0;
    8182:	10 92 78 0d 	sts	0x0D78, r1
    8186:	10 92 77 0d 	sts	0x0D77, r1
		songSpeed=0;
    818a:	10 92 7f 0d 	sts	0x0D7F, r1

		lastStatus=0;
    818e:	10 92 7b 0d 	sts	0x0D7B, r1
		playSong=true;
    8192:	81 e0       	ldi	r24, 0x01	; 1
    8194:	80 93 d0 0c 	sts	0x0CD0, r24
    8198:	08 95       	ret

0000819a <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    819a:	e4 e0       	ldi	r30, 0x04	; 4
    819c:	fd e0       	ldi	r31, 0x0D	; 13
    819e:	8a ef       	ldi	r24, 0xFA	; 250
    81a0:	87 87       	std	Z+15, r24	; 0x0f
    81a2:	86 a3       	std	Z+38, r24	; 0x26
    81a4:	80 93 41 0d 	sts	0x0D41, r24
    81a8:	80 93 58 0d 	sts	0x0D58, r24
    81ac:	80 93 6f 0d 	sts	0x0D6F, r24
	}

	playSong=false;
    81b0:	10 92 d0 0c 	sts	0x0CD0, r1
    81b4:	08 95       	ret

000081b6 <ResumeSong>:
}


void ResumeSong(){
	playSong=true;
    81b6:	81 e0       	ldi	r24, 0x01	; 1
    81b8:	80 93 d0 0c 	sts	0x0CD0, r24
    81bc:	08 95       	ret

000081be <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    81be:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    81c0:	ed 91       	ld	r30, X+
    81c2:	fc 91       	ld	r31, X
    81c4:	11 97       	sbiw	r26, 0x01	; 1
    81c6:	9f 01       	movw	r18, r30
    81c8:	2f 5f       	subi	r18, 0xFF	; 255
    81ca:	3f 4f       	sbci	r19, 0xFF	; 255
    81cc:	11 96       	adiw	r26, 0x01	; 1
    81ce:	3c 93       	st	X, r19
    81d0:	2e 93       	st	-X, r18
    81d2:	e4 91       	lpm	r30, Z
    81d4:	e7 fd       	sbrc	r30, 7
    81d6:	03 c0       	rjmp	.+6      	; 0x81de <ReadVarLen+0x20>
    81d8:	8e 2f       	mov	r24, r30
    81da:	90 e0       	ldi	r25, 0x00	; 0
    81dc:	08 95       	ret
    {
       value &= 0x7F;
    81de:	ef 77       	andi	r30, 0x7F	; 127
    81e0:	8e 2f       	mov	r24, r30
    81e2:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    81e4:	96 95       	lsr	r25
    81e6:	98 2f       	mov	r25, r24
    81e8:	88 27       	eor	r24, r24
    81ea:	97 95       	ror	r25
    81ec:	87 95       	ror	r24
    81ee:	2f 5f       	subi	r18, 0xFF	; 255
    81f0:	3f 4f       	sbci	r19, 0xFF	; 255
    81f2:	f9 01       	movw	r30, r18
    81f4:	31 97       	sbiw	r30, 0x01	; 1
    81f6:	e4 91       	lpm	r30, Z
    81f8:	4e 2f       	mov	r20, r30
    81fa:	4f 77       	andi	r20, 0x7F	; 127
    81fc:	84 0f       	add	r24, r20
    81fe:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8200:	e7 fd       	sbrc	r30, 7
    8202:	f0 cf       	rjmp	.-32     	; 0x81e4 <ReadVarLen+0x26>
    8204:	2d 93       	st	X+, r18
    8206:	3c 93       	st	X, r19
    }


    return value;
}
    8208:	08 95       	ret

0000820a <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    820a:	ef 92       	push	r14
    820c:	ff 92       	push	r15
    820e:	0f 93       	push	r16
    8210:	1f 93       	push	r17
    8212:	cf 93       	push	r28
    8214:	df 93       	push	r29
    8216:	1f 92       	push	r1
    8218:	cd b7       	in	r28, 0x3d	; 61
    821a:	de b7       	in	r29, 0x3e	; 62
    821c:	7c 01       	movw	r14, r24
    821e:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8220:	fc 01       	movw	r30, r24
    8222:	80 81       	ld	r24, Z
    8224:	08 2f       	mov	r16, r24
    8226:	00 1f       	adc	r16, r16
    8228:	00 27       	eor	r16, r16
    822a:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    822c:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    822e:	9f ef       	ldi	r25, 0xFF	; 255
    8230:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8232:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8234:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8236:	87 7b       	andi	r24, 0xB7	; 183
    8238:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    823a:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    823c:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    823e:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8240:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8242:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8244:	82 81       	ldd	r24, Z+2	; 0x02
    8246:	83 30       	cpi	r24, 0x03	; 3
    8248:	69 f4       	brne	.+26     	; 0x8264 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    824a:	01 11       	cpse	r16, r1
    824c:	01 c0       	rjmp	.+2      	; 0x8250 <TriggerCommon+0x46>
    824e:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8250:	81 e0       	ldi	r24, 0x01	; 1
    8252:	91 e0       	ldi	r25, 0x01	; 1
    8254:	90 93 e7 0c 	sts	0x0CE7, r25
    8258:	80 93 e6 0c 	sts	0x0CE6, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    825c:	81 e0       	ldi	r24, 0x01	; 1
    825e:	80 93 e5 0c 	sts	0x0CE5, r24
    8262:	39 c0       	rjmp	.+114    	; 0x82d6 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8264:	84 30       	cpi	r24, 0x04	; 4
    8266:	69 f5       	brne	.+90     	; 0x82c2 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8268:	10 92 ed 0c 	sts	0x0CED, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    826c:	80 91 79 0d 	lds	r24, 0x0D79
    8270:	90 91 7a 0d 	lds	r25, 0x0D7A
    8274:	f9 e0       	ldi	r31, 0x09	; 9
    8276:	6f 9f       	mul	r22, r31
    8278:	80 0d       	add	r24, r0
    827a:	91 1d       	adc	r25, r1
    827c:	11 24       	eor	r1, r1
    827e:	fc 01       	movw	r30, r24
    8280:	31 96       	adiw	r30, 0x01	; 1
    8282:	a5 91       	lpm	r26, Z+
    8284:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8286:	b0 93 ef 0c 	sts	0x0CEF, r27
    828a:	a0 93 ee 0c 	sts	0x0CEE, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    828e:	ac 01       	movw	r20, r24
    8290:	49 5f       	subi	r20, 0xF9	; 249
    8292:	5f 4f       	sbci	r21, 0xFF	; 255
    8294:	fa 01       	movw	r30, r20
    8296:	65 91       	lpm	r22, Z+
    8298:	74 91       	lpm	r23, Z
    829a:	05 96       	adiw	r24, 0x05	; 5
    829c:	fc 01       	movw	r30, r24
    829e:	85 91       	lpm	r24, Z+
    82a0:	94 91       	lpm	r25, Z
    82a2:	68 1b       	sub	r22, r24
    82a4:	79 0b       	sbc	r23, r25
    82a6:	70 93 f1 0c 	sts	0x0CF1, r23
    82aa:	60 93 f0 0c 	sts	0x0CF0, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    82ae:	fa 01       	movw	r30, r20
    82b0:	85 91       	lpm	r24, Z+
    82b2:	94 91       	lpm	r25, Z
    82b4:	a8 0f       	add	r26, r24
    82b6:	b9 1f       	adc	r27, r25
    82b8:	b0 93 f3 0c 	sts	0x0CF3, r27
    82bc:	a0 93 f2 0c 	sts	0x0CF2, r26
    82c0:	05 c0       	rjmp	.+10     	; 0x82cc <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    82c2:	60 e0       	ldi	r22, 0x00	; 0
    82c4:	29 83       	std	Y+1, r18	; 0x01
    82c6:	0e 94 57 44 	call	0x88ae	; 0x88ae <SetMixerWave>
			SetMixerNote(track->channel,note);
    82ca:	29 81       	ldd	r18, Y+1	; 0x01
    82cc:	62 2f       	mov	r22, r18
    82ce:	f7 01       	movw	r30, r14
    82d0:	82 81       	ldd	r24, Z+2	; 0x02
    82d2:	0e 94 40 44 	call	0x8880	; 0x8880 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    82d6:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    82d8:	00 23       	and	r16, r16
    82da:	11 f0       	breq	.+4      	; 0x82e0 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    82dc:	11 8b       	std	Z+17, r17	; 0x11
    82de:	01 c0       	rjmp	.+2      	; 0x82e2 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    82e0:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    82e2:	e0 91 79 0d 	lds	r30, 0x0D79
    82e6:	f0 91 7a 0d 	lds	r31, 0x0D7A
    82ea:	39 e0       	ldi	r19, 0x09	; 9
    82ec:	13 9f       	mul	r17, r19
    82ee:	e0 0d       	add	r30, r0
    82f0:	f1 1d       	adc	r31, r1
    82f2:	11 24       	eor	r1, r1
    82f4:	33 96       	adiw	r30, 0x03	; 3
    82f6:	85 91       	lpm	r24, Z+
    82f8:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    82fa:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    82fc:	00 97       	sbiw	r24, 0x00	; 0
    82fe:	19 f4       	brne	.+6      	; 0x8306 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8300:	16 8a       	std	Z+22, r1	; 0x16
    8302:	15 8a       	std	Z+21, r1	; 0x15
    8304:	08 c0       	rjmp	.+16     	; 0x8316 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8306:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8308:	fc 01       	movw	r30, r24
    830a:	24 91       	lpm	r18, Z
    830c:	f7 01       	movw	r30, r14
    830e:	22 8b       	std	Z+18, r18	; 0x12
    8310:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8312:	96 8b       	std	Z+22, r25	; 0x16
    8314:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8316:	0f 90       	pop	r0
    8318:	df 91       	pop	r29
    831a:	cf 91       	pop	r28
    831c:	1f 91       	pop	r17
    831e:	0f 91       	pop	r16
    8320:	ff 90       	pop	r15
    8322:	ef 90       	pop	r14
    8324:	08 95       	ret

00008326 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8326:	cf 93       	push	r28
    8328:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    832a:	e0 91 79 0d 	lds	r30, 0x0D79
    832e:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8332:	99 e0       	ldi	r25, 0x09	; 9
    8334:	89 9f       	mul	r24, r25
    8336:	e0 0d       	add	r30, r0
    8338:	f1 1d       	adc	r31, r1
    833a:	11 24       	eor	r1, r1
    833c:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    833e:	e1 30       	cpi	r30, 0x01	; 1
    8340:	e9 f0       	breq	.+58     	; 0x837c <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8342:	e2 30       	cpi	r30, 0x02	; 2
    8344:	e9 f0       	breq	.+58     	; 0x8380 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8346:	20 91 1b 0d 	lds	r18, 0x0D1B
    834a:	27 ff       	sbrs	r18, 7
    834c:	1d c0       	rjmp	.+58     	; 0x8388 <TriggerFx+0x62>
    834e:	20 91 2c 0d 	lds	r18, 0x0D2C
    8352:	28 13       	cpse	r18, r24
    8354:	02 c0       	rjmp	.+4      	; 0x835a <TriggerFx+0x34>
    8356:	41 11       	cpse	r20, r1
    8358:	17 c0       	rjmp	.+46     	; 0x8388 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    835a:	20 91 32 0d 	lds	r18, 0x0D32
    835e:	27 ff       	sbrs	r18, 7
    8360:	11 c0       	rjmp	.+34     	; 0x8384 <TriggerFx+0x5e>
    8362:	20 91 43 0d 	lds	r18, 0x0D43
    8366:	28 13       	cpse	r18, r24
    8368:	02 c0       	rjmp	.+4      	; 0x836e <TriggerFx+0x48>
    836a:	41 11       	cpse	r20, r1
    836c:	0b c0       	rjmp	.+22     	; 0x8384 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    836e:	20 91 2f 0d 	lds	r18, 0x0D2F
    8372:	90 91 46 0d 	lds	r25, 0x0D46
    8376:	92 17       	cp	r25, r18
    8378:	28 f4       	brcc	.+10     	; 0x8384 <TriggerFx+0x5e>
    837a:	06 c0       	rjmp	.+12     	; 0x8388 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    837c:	c3 e0       	ldi	r28, 0x03	; 3
    837e:	05 c0       	rjmp	.+10     	; 0x838a <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8380:	c4 e0       	ldi	r28, 0x04	; 4
    8382:	03 c0       	rjmp	.+6      	; 0x838a <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8384:	c2 e0       	ldi	r28, 0x02	; 2
    8386:	01 c0       	rjmp	.+2      	; 0x838a <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8388:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    838a:	97 e1       	ldi	r25, 0x17	; 23
    838c:	c9 9f       	mul	r28, r25
    838e:	e0 01       	movw	r28, r0
    8390:	11 24       	eor	r1, r1
    8392:	cc 5f       	subi	r28, 0xFC	; 252
    8394:	d2 4f       	sbci	r29, 0xF2	; 242
    8396:	90 e8       	ldi	r25, 0x80	; 128
    8398:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    839a:	1e 8a       	std	Y+22, r1	; 0x16
    839c:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    839e:	20 e5       	ldi	r18, 0x50	; 80
    83a0:	46 2f       	mov	r20, r22
    83a2:	68 2f       	mov	r22, r24
    83a4:	ce 01       	movw	r24, r28
    83a6:	0e 94 05 41 	call	0x820a	; 0x820a <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    83aa:	88 81       	ld	r24, Y
    83ac:	80 62       	ori	r24, 0x20	; 32
    83ae:	88 83       	st	Y, r24
}
    83b0:	df 91       	pop	r29
    83b2:	cf 91       	pop	r28
    83b4:	08 95       	ret

000083b6 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    83b6:	cf 93       	push	r28
    83b8:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    83ba:	a8 2f       	mov	r26, r24
    83bc:	b0 e0       	ldi	r27, 0x00	; 0
    83be:	97 e1       	ldi	r25, 0x17	; 23
    83c0:	89 9f       	mul	r24, r25
    83c2:	f0 01       	movw	r30, r0
    83c4:	11 24       	eor	r1, r1
    83c6:	ec 5f       	subi	r30, 0xFC	; 252
    83c8:	f2 4f       	sbci	r31, 0xF2	; 242
    83ca:	80 81       	ld	r24, Z
    83cc:	85 ff       	sbrs	r24, 5
    83ce:	02 c0       	rjmp	.+4      	; 0x83d4 <TriggerNote+0x1e>
    83d0:	87 fd       	sbrc	r24, 7
    83d2:	2e c0       	rjmp	.+92     	; 0x8430 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    83d4:	21 11       	cpse	r18, r1
    83d6:	18 c0       	rjmp	.+48     	; 0x8408 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    83d8:	97 e1       	ldi	r25, 0x17	; 23
    83da:	9a 9f       	mul	r25, r26
    83dc:	f0 01       	movw	r30, r0
    83de:	9b 9f       	mul	r25, r27
    83e0:	f0 0d       	add	r31, r0
    83e2:	11 24       	eor	r1, r1
    83e4:	ec 5f       	subi	r30, 0xFC	; 252
    83e6:	f2 4f       	sbci	r31, 0xF2	; 242
    83e8:	97 85       	ldd	r25, Z+15	; 0x0f
    83ea:	91 11       	cpse	r25, r1
    83ec:	02 c0       	rjmp	.+4      	; 0x83f2 <TriggerNote+0x3c>
    83ee:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    83f0:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    83f2:	97 e1       	ldi	r25, 0x17	; 23
    83f4:	9a 9f       	mul	r25, r26
    83f6:	f0 01       	movw	r30, r0
    83f8:	9b 9f       	mul	r25, r27
    83fa:	f0 0d       	add	r31, r0
    83fc:	11 24       	eor	r1, r1
    83fe:	ec 5f       	subi	r30, 0xFC	; 252
    8400:	f2 4f       	sbci	r31, 0xF2	; 242
    8402:	8f 7b       	andi	r24, 0xBF	; 191
    8404:	80 83       	st	Z, r24
    8406:	14 c0       	rjmp	.+40     	; 0x8430 <TriggerNote+0x7a>
    8408:	82 2f       	mov	r24, r18
    840a:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    840c:	97 e1       	ldi	r25, 0x17	; 23
    840e:	9a 9f       	mul	r25, r26
    8410:	e0 01       	movw	r28, r0
    8412:	9b 9f       	mul	r25, r27
    8414:	d0 0d       	add	r29, r0
    8416:	11 24       	eor	r1, r1
    8418:	cc 5f       	subi	r28, 0xFC	; 252
    841a:	d2 4f       	sbci	r29, 0xF2	; 242
    841c:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    841e:	1e 8a       	std	Y+22, r1	; 0x16
    8420:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8422:	48 2f       	mov	r20, r24
    8424:	ce 01       	movw	r24, r28
    8426:	0e 94 05 41 	call	0x820a	; 0x820a <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    842a:	88 81       	ld	r24, Y
    842c:	80 62       	ori	r24, 0x20	; 32
    842e:	88 83       	st	Y, r24
		}

	}
}
    8430:	df 91       	pop	r29
    8432:	cf 91       	pop	r28
    8434:	08 95       	ret

00008436 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8436:	6f 92       	push	r6
    8438:	7f 92       	push	r7
    843a:	8f 92       	push	r8
    843c:	9f 92       	push	r9
    843e:	af 92       	push	r10
    8440:	bf 92       	push	r11
    8442:	cf 92       	push	r12
    8444:	df 92       	push	r13
    8446:	ef 92       	push	r14
    8448:	ff 92       	push	r15
    844a:	0f 93       	push	r16
    844c:	1f 93       	push	r17
    844e:	cf 93       	push	r28
    8450:	df 93       	push	r29
    8452:	c4 e0       	ldi	r28, 0x04	; 4
    8454:	dd e0       	ldi	r29, 0x0D	; 13
    8456:	02 ed       	ldi	r16, 0xD2	; 210
    8458:	1c e0       	ldi	r17, 0x0C	; 12
    845a:	d8 01       	movw	r26, r16
    845c:	9e 01       	movw	r18, r28
    845e:	40 e0       	ldi	r20, 0x00	; 0
    8460:	50 e0       	ldi	r21, 0x00	; 0
    8462:	ca 01       	movw	r24, r20
    8464:	8c 5f       	subi	r24, 0xFC	; 252
    8466:	92 4f       	sbci	r25, 0xF2	; 242
    8468:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    846a:	fc 01       	movw	r30, r24
    846c:	87 85       	ldd	r24, Z+15	; 0x0f
    846e:	88 23       	and	r24, r24
    8470:	91 f0       	breq	.+36     	; 0x8496 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8472:	66 85       	ldd	r22, Z+14	; 0x0e
    8474:	99 27       	eor	r25, r25
    8476:	87 fd       	sbrc	r24, 7
    8478:	90 95       	com	r25
    847a:	86 0f       	add	r24, r22
    847c:	91 1d       	adc	r25, r1
    847e:	8f 3f       	cpi	r24, 0xFF	; 255
    8480:	91 05       	cpc	r25, r1
    8482:	19 f0       	breq	.+6      	; 0x848a <ProcessMusic+0x54>
    8484:	14 f0       	brlt	.+4      	; 0x848a <ProcessMusic+0x54>
    8486:	8f ef       	ldi	r24, 0xFF	; 255
    8488:	90 e0       	ldi	r25, 0x00	; 0
    848a:	97 ff       	sbrs	r25, 7
    848c:	02 c0       	rjmp	.+4      	; 0x8492 <ProcessMusic+0x5c>
    848e:	80 e0       	ldi	r24, 0x00	; 0
    8490:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8492:	f6 01       	movw	r30, r12
    8494:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8496:	f9 01       	movw	r30, r18
    8498:	f0 80       	ld	r15, Z
    849a:	f3 fe       	sbrs	r15, 3
    849c:	2a c0       	rjmp	.+84     	; 0x84f2 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    849e:	65 81       	ldd	r22, Z+5	; 0x05
    84a0:	76 81       	ldd	r23, Z+6	; 0x06
    84a2:	11 96       	adiw	r26, 0x01	; 1
    84a4:	8d 91       	ld	r24, X+
    84a6:	9c 91       	ld	r25, X
    84a8:	12 97       	sbiw	r26, 0x02	; 2
    84aa:	86 0f       	add	r24, r22
    84ac:	97 1f       	adc	r25, r23
    84ae:	12 96       	adiw	r26, 0x02	; 2
    84b0:	9c 93       	st	X, r25
    84b2:	8e 93       	st	-X, r24
    84b4:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    84b6:	f6 01       	movw	r30, r12
    84b8:	e7 80       	ldd	r14, Z+7	; 0x07
    84ba:	ee 2d       	mov	r30, r14
    84bc:	f0 e0       	ldi	r31, 0x00	; 0
    84be:	ee 0f       	add	r30, r30
    84c0:	ff 1f       	adc	r31, r31
    84c2:	e8 5f       	subi	r30, 0xF8	; 248
    84c4:	f6 47       	sbci	r31, 0x76	; 118
    84c6:	c5 90       	lpm	r12, Z+
    84c8:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    84ca:	16 16       	cp	r1, r22
    84cc:	17 06       	cpc	r1, r23
    84ce:	24 f4       	brge	.+8      	; 0x84d8 <ProcessMusic+0xa2>
    84d0:	8c 15       	cp	r24, r12
    84d2:	9d 05       	cpc	r25, r13
    84d4:	30 f4       	brcc	.+12     	; 0x84e2 <ProcessMusic+0xac>
    84d6:	0d c0       	rjmp	.+26     	; 0x84f2 <ProcessMusic+0xbc>
    84d8:	67 2b       	or	r22, r23
    84da:	59 f0       	breq	.+22     	; 0x84f2 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    84dc:	c8 16       	cp	r12, r24
    84de:	d9 06       	cpc	r13, r25
    84e0:	40 f0       	brcs	.+16     	; 0x84f2 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    84e2:	12 96       	adiw	r26, 0x02	; 2
    84e4:	dc 92       	st	X, r13
    84e6:	ce 92       	st	-X, r12
    84e8:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    84ea:	8f 2d       	mov	r24, r15
    84ec:	87 7f       	andi	r24, 0xF7	; 247
    84ee:	f9 01       	movw	r30, r18
    84f0:	80 83       	st	Z, r24
    84f2:	49 5e       	subi	r20, 0xE9	; 233
    84f4:	5f 4f       	sbci	r21, 0xFF	; 255
    84f6:	29 5e       	subi	r18, 0xE9	; 233
    84f8:	3f 4f       	sbci	r19, 0xFF	; 255
    84fa:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    84fc:	43 37       	cpi	r20, 0x73	; 115
    84fe:	51 05       	cpc	r21, r1
    8500:	09 f0       	breq	.+2      	; 0x8504 <ProcessMusic+0xce>
    8502:	af cf       	rjmp	.-162    	; 0x8462 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8504:	80 91 d0 0c 	lds	r24, 0x0CD0
    8508:	88 23       	and	r24, r24
    850a:	09 f4       	brne	.+2      	; 0x850e <ProcessMusic+0xd8>
    850c:	cc c0       	rjmp	.+408    	; 0x86a6 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    850e:	57 e1       	ldi	r21, 0x17	; 23
    8510:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8512:	80 91 77 0d 	lds	r24, 0x0D77
    8516:	90 91 78 0d 	lds	r25, 0x0D78
    851a:	20 91 7d 0d 	lds	r18, 0x0D7D
    851e:	30 91 7e 0d 	lds	r19, 0x0D7E
    8522:	82 17       	cp	r24, r18
    8524:	93 07       	cpc	r25, r19
    8526:	09 f0       	breq	.+2      	; 0x852a <ProcessMusic+0xf4>
    8528:	b9 c0       	rjmp	.+370    	; 0x869c <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    852a:	20 91 80 0d 	lds	r18, 0x0D80
    852e:	30 91 81 0d 	lds	r19, 0x0D81
    8532:	b9 01       	movw	r22, r18
    8534:	6f 5f       	subi	r22, 0xFF	; 255
    8536:	7f 4f       	sbci	r23, 0xFF	; 255
    8538:	70 93 81 0d 	sts	0x0D81, r23
    853c:	60 93 80 0d 	sts	0x0D80, r22
    8540:	f9 01       	movw	r30, r18
    8542:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8544:	4f 3f       	cpi	r20, 0xFF	; 255
    8546:	79 f5       	brne	.+94     	; 0x85a6 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8548:	a9 01       	movw	r20, r18
    854a:	4e 5f       	subi	r20, 0xFE	; 254
    854c:	5f 4f       	sbci	r21, 0xFF	; 255
    854e:	50 93 81 0d 	sts	0x0D81, r21
    8552:	40 93 80 0d 	sts	0x0D80, r20
    8556:	fb 01       	movw	r30, r22
    8558:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    855a:	6f 32       	cpi	r22, 0x2F	; 47
    855c:	19 f4       	brne	.+6      	; 0x8564 <ProcessMusic+0x12e>
						playSong=false;
    855e:	10 92 d0 0c 	sts	0x0CD0, r1
						break;	
    8562:	9c c0       	rjmp	.+312    	; 0x869c <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8564:	66 30       	cpi	r22, 0x06	; 6
    8566:	09 f0       	breq	.+2      	; 0x856a <ProcessMusic+0x134>
    8568:	8c c0       	rjmp	.+280    	; 0x8682 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    856a:	fa 01       	movw	r30, r20
    856c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    856e:	c9 01       	movw	r24, r18
    8570:	04 96       	adiw	r24, 0x04	; 4
    8572:	90 93 81 0d 	sts	0x0D81, r25
    8576:	80 93 80 0d 	sts	0x0D80, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    857a:	f9 01       	movw	r30, r18
    857c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    857e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8580:	e3 35       	cpi	r30, 0x53	; 83
    8582:	29 f4       	brne	.+10     	; 0x858e <ProcessMusic+0x158>
							loopStart=songPos;
    8584:	90 93 83 0d 	sts	0x0D83, r25
    8588:	80 93 82 0d 	sts	0x0D82, r24
    858c:	7a c0       	rjmp	.+244    	; 0x8682 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    858e:	e5 34       	cpi	r30, 0x45	; 69
    8590:	09 f0       	breq	.+2      	; 0x8594 <ProcessMusic+0x15e>
    8592:	77 c0       	rjmp	.+238    	; 0x8682 <ProcessMusic+0x24c>
							songPos=loopStart;
    8594:	80 91 82 0d 	lds	r24, 0x0D82
    8598:	90 91 83 0d 	lds	r25, 0x0D83
    859c:	90 93 81 0d 	sts	0x0D81, r25
    85a0:	80 93 80 0d 	sts	0x0D80, r24
    85a4:	6e c0       	rjmp	.+220    	; 0x8682 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    85a6:	47 fd       	sbrc	r20, 7
    85a8:	40 93 7b 0d 	sts	0x0D7B, r20
					channel=lastStatus&0x0f;
    85ac:	90 91 7b 0d 	lds	r25, 0x0D7B
    85b0:	89 2f       	mov	r24, r25
    85b2:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    85b4:	47 ff       	sbrs	r20, 7
    85b6:	08 c0       	rjmp	.+16     	; 0x85c8 <ProcessMusic+0x192>
    85b8:	2e 5f       	subi	r18, 0xFE	; 254
    85ba:	3f 4f       	sbci	r19, 0xFF	; 255
    85bc:	30 93 81 0d 	sts	0x0D81, r19
    85c0:	20 93 80 0d 	sts	0x0D80, r18
    85c4:	fb 01       	movw	r30, r22
    85c6:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    85c8:	90 7f       	andi	r25, 0xF0	; 240
    85ca:	90 3b       	cpi	r25, 0xB0	; 176
    85cc:	e1 f0       	breq	.+56     	; 0x8606 <ProcessMusic+0x1d0>
    85ce:	90 3c       	cpi	r25, 0xC0	; 192
    85d0:	09 f4       	brne	.+2      	; 0x85d4 <ProcessMusic+0x19e>
    85d2:	51 c0       	rjmp	.+162    	; 0x8676 <ProcessMusic+0x240>
    85d4:	90 39       	cpi	r25, 0x90	; 144
    85d6:	09 f0       	breq	.+2      	; 0x85da <ProcessMusic+0x1a4>
    85d8:	54 c0       	rjmp	.+168    	; 0x8682 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    85da:	e0 91 80 0d 	lds	r30, 0x0D80
    85de:	f0 91 81 0d 	lds	r31, 0x0D81
    85e2:	9f 01       	movw	r18, r30
    85e4:	2f 5f       	subi	r18, 0xFF	; 255
    85e6:	3f 4f       	sbci	r19, 0xFF	; 255
    85e8:	30 93 81 0d 	sts	0x0D81, r19
    85ec:	20 93 80 0d 	sts	0x0D80, r18
    85f0:	24 91       	lpm	r18, Z
    85f2:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    85f4:	f8 9e       	mul	r15, r24
    85f6:	f0 01       	movw	r30, r0
    85f8:	11 24       	eor	r1, r1
    85fa:	ec 5f       	subi	r30, 0xFC	; 252
    85fc:	f2 4f       	sbci	r31, 0xF2	; 242
    85fe:	60 89       	ldd	r22, Z+16	; 0x10
    8600:	0e 94 db 41 	call	0x83b6	; 0x83b6 <TriggerNote>
    8604:	3e c0       	rjmp	.+124    	; 0x8682 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8606:	e0 91 80 0d 	lds	r30, 0x0D80
    860a:	f0 91 81 0d 	lds	r31, 0x0D81
    860e:	9f 01       	movw	r18, r30
    8610:	2f 5f       	subi	r18, 0xFF	; 255
    8612:	3f 4f       	sbci	r19, 0xFF	; 255
    8614:	30 93 81 0d 	sts	0x0D81, r19
    8618:	20 93 80 0d 	sts	0x0D80, r18
    861c:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    861e:	47 30       	cpi	r20, 0x07	; 7
    8620:	49 f4       	brne	.+18     	; 0x8634 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8622:	f8 9e       	mul	r15, r24
    8624:	d0 01       	movw	r26, r0
    8626:	11 24       	eor	r1, r1
    8628:	ac 5f       	subi	r26, 0xFC	; 252
    862a:	b2 4f       	sbci	r27, 0xF2	; 242
    862c:	ee 0f       	add	r30, r30
    862e:	1c 96       	adiw	r26, 0x0c	; 12
    8630:	ec 93       	st	X, r30
    8632:	27 c0       	rjmp	.+78     	; 0x8682 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8634:	4b 30       	cpi	r20, 0x0B	; 11
    8636:	49 f4       	brne	.+18     	; 0x864a <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8638:	f8 9e       	mul	r15, r24
    863a:	d0 01       	movw	r26, r0
    863c:	11 24       	eor	r1, r1
    863e:	ac 5f       	subi	r26, 0xFC	; 252
    8640:	b2 4f       	sbci	r27, 0xF2	; 242
    8642:	ee 0f       	add	r30, r30
    8644:	13 96       	adiw	r26, 0x03	; 3
    8646:	ec 93       	st	X, r30
    8648:	1c c0       	rjmp	.+56     	; 0x8682 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    864a:	4c 35       	cpi	r20, 0x5C	; 92
    864c:	49 f4       	brne	.+18     	; 0x8660 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    864e:	f8 9e       	mul	r15, r24
    8650:	d0 01       	movw	r26, r0
    8652:	11 24       	eor	r1, r1
    8654:	ac 5f       	subi	r26, 0xFC	; 252
    8656:	b2 4f       	sbci	r27, 0xF2	; 242
    8658:	ee 0f       	add	r30, r30
    865a:	1a 96       	adiw	r26, 0x0a	; 10
    865c:	ec 93       	st	X, r30
    865e:	11 c0       	rjmp	.+34     	; 0x8682 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8660:	44 36       	cpi	r20, 0x64	; 100
    8662:	79 f4       	brne	.+30     	; 0x8682 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8664:	f8 9e       	mul	r15, r24
    8666:	d0 01       	movw	r26, r0
    8668:	11 24       	eor	r1, r1
    866a:	ac 5f       	subi	r26, 0xFC	; 252
    866c:	b2 4f       	sbci	r27, 0xF2	; 242
    866e:	ee 0f       	add	r30, r30
    8670:	1b 96       	adiw	r26, 0x0b	; 11
    8672:	ec 93       	st	X, r30
    8674:	06 c0       	rjmp	.+12     	; 0x8682 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8676:	f8 9e       	mul	r15, r24
    8678:	f0 01       	movw	r30, r0
    867a:	11 24       	eor	r1, r1
    867c:	ec 5f       	subi	r30, 0xFC	; 252
    867e:	f2 4f       	sbci	r31, 0xF2	; 242
    8680:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8682:	80 e8       	ldi	r24, 0x80	; 128
    8684:	9d e0       	ldi	r25, 0x0D	; 13
    8686:	0e 94 df 40 	call	0x81be	; 0x81be <ReadVarLen>
    868a:	90 93 7e 0d 	sts	0x0D7E, r25
    868e:	80 93 7d 0d 	sts	0x0D7D, r24
				currDeltaTime=0;
    8692:	10 92 78 0d 	sts	0x0D78, r1
    8696:	10 92 77 0d 	sts	0x0D77, r1
    869a:	3b cf       	rjmp	.-394    	; 0x8512 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    869c:	01 96       	adiw	r24, 0x01	; 1
    869e:	90 93 78 0d 	sts	0x0D78, r25
    86a2:	80 93 77 0d 	sts	0x0D77, r24
    86a6:	9d e0       	ldi	r25, 0x0D	; 13
    86a8:	a9 2e       	mov	r10, r25
    86aa:	9d e0       	ldi	r25, 0x0D	; 13
    86ac:	b9 2e       	mov	r11, r25
    86ae:	27 e1       	ldi	r18, 0x17	; 23
    86b0:	c2 2e       	mov	r12, r18
    86b2:	2d e0       	ldi	r18, 0x0D	; 13
    86b4:	d2 2e       	mov	r13, r18
    86b6:	38 e1       	ldi	r19, 0x18	; 24
    86b8:	e3 2e       	mov	r14, r19
    86ba:	3d e0       	ldi	r19, 0x0D	; 13
    86bc:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    86be:	66 24       	eor	r6, r6
    86c0:	6a 94       	dec	r6
    86c2:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    86c4:	88 81       	ld	r24, Y
    86c6:	85 ff       	sbrs	r24, 5
    86c8:	42 c0       	rjmp	.+132    	; 0x874e <ProcessMusic+0x318>
    86ca:	2d 89       	ldd	r18, Y+21	; 0x15
    86cc:	3e 89       	ldd	r19, Y+22	; 0x16
    86ce:	23 2b       	or	r18, r19
    86d0:	09 f4       	brne	.+2      	; 0x86d4 <ProcessMusic+0x29e>
    86d2:	3d c0       	rjmp	.+122    	; 0x874e <ProcessMusic+0x318>
    86d4:	86 fd       	sbrc	r24, 6
    86d6:	3b c0       	rjmp	.+118    	; 0x874e <ProcessMusic+0x318>
    86d8:	47 01       	movw	r8, r14
    86da:	f2 e0       	ldi	r31, 0x02	; 2
    86dc:	8f 1a       	sub	r8, r31
    86de:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    86e0:	d6 01       	movw	r26, r12
    86e2:	9c 91       	ld	r25, X
    86e4:	f4 01       	movw	r30, r8
    86e6:	80 81       	ld	r24, Z
    86e8:	98 13       	cpse	r25, r24
    86ea:	2e c0       	rjmp	.+92     	; 0x8748 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    86ec:	ed 89       	ldd	r30, Y+21	; 0x15
    86ee:	fe 89       	ldd	r31, Y+22	; 0x16
    86f0:	bf 01       	movw	r22, r30
    86f2:	6f 5f       	subi	r22, 0xFF	; 255
    86f4:	7f 4f       	sbci	r23, 0xFF	; 255
    86f6:	7e 8b       	std	Y+22, r23	; 0x16
    86f8:	6d 8b       	std	Y+21, r22	; 0x15
    86fa:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    86fc:	8f 3f       	cpi	r24, 0xFF	; 255
    86fe:	31 f4       	brne	.+12     	; 0x870c <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8700:	88 81       	ld	r24, Y
    8702:	8f 77       	andi	r24, 0x7F	; 127
    8704:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8706:	1e 8a       	std	Y+22, r1	; 0x16
    8708:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    870a:	1e c0       	rjmp	.+60     	; 0x8748 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    870c:	9f 01       	movw	r18, r30
    870e:	2e 5f       	subi	r18, 0xFE	; 254
    8710:	3f 4f       	sbci	r19, 0xFF	; 255
    8712:	3e 8b       	std	Y+22, r19	; 0x16
    8714:	2d 8b       	std	Y+21, r18	; 0x15
    8716:	fb 01       	movw	r30, r22
    8718:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    871a:	e8 2f       	mov	r30, r24
    871c:	f0 e0       	ldi	r31, 0x00	; 0
    871e:	ee 0f       	add	r30, r30
    8720:	ff 1f       	adc	r31, r31
    8722:	ec 51       	subi	r30, 0x1C	; 28
    8724:	ff 4f       	sbci	r31, 0xFF	; 255
    8726:	25 91       	lpm	r18, Z+
    8728:	34 91       	lpm	r19, Z
    872a:	ce 01       	movw	r24, r28
    872c:	f9 01       	movw	r30, r18
    872e:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8730:	ed 89       	ldd	r30, Y+21	; 0x15
    8732:	fe 89       	ldd	r31, Y+22	; 0x16
    8734:	cf 01       	movw	r24, r30
    8736:	01 96       	adiw	r24, 0x01	; 1
    8738:	9e 8b       	std	Y+22, r25	; 0x16
    873a:	8d 8b       	std	Y+21, r24	; 0x15
    873c:	e4 91       	lpm	r30, Z
    873e:	d4 01       	movw	r26, r8
    8740:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8742:	f6 01       	movw	r30, r12
    8744:	10 82       	st	Z, r1
    8746:	cc cf       	rjmp	.-104    	; 0x86e0 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8748:	9f 5f       	subi	r25, 0xFF	; 255
    874a:	d6 01       	movw	r26, r12
    874c:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    874e:	98 81       	ld	r25, Y
    8750:	95 ff       	sbrs	r25, 5
    8752:	6c c0       	rjmp	.+216    	; 0x882c <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8754:	f7 01       	movw	r30, r14
    8756:	80 81       	ld	r24, Z
    8758:	8f 3f       	cpi	r24, 0xFF	; 255
    875a:	11 f0       	breq	.+4      	; 0x8760 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    875c:	8f 5f       	subi	r24, 0xFF	; 255
    875e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8760:	97 fd       	sbrc	r25, 7
    8762:	04 c0       	rjmp	.+8      	; 0x876c <ProcessMusic+0x336>
    8764:	f7 01       	movw	r30, r14
    8766:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8768:	90 81       	ld	r25, Z
    876a:	01 c0       	rjmp	.+2      	; 0x876e <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    876c:	9f ef       	ldi	r25, 0xFF	; 255
    876e:	f7 01       	movw	r30, r14
    8770:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8772:	80 81       	ld	r24, Z
    8774:	88 23       	and	r24, r24
    8776:	09 f4       	brne	.+2      	; 0x877a <ProcessMusic+0x344>
    8778:	4e c0       	rjmp	.+156    	; 0x8816 <ProcessMusic+0x3e0>
    877a:	31 96       	adiw	r30, 0x01	; 1
    877c:	50 81       	ld	r21, Z
    877e:	55 23       	and	r21, r21
    8780:	09 f4       	brne	.+2      	; 0x8784 <ProcessMusic+0x34e>
    8782:	49 c0       	rjmp	.+146    	; 0x8816 <ProcessMusic+0x3e0>
    8784:	99 23       	and	r25, r25
    8786:	09 f4       	brne	.+2      	; 0x878a <ProcessMusic+0x354>
    8788:	46 c0       	rjmp	.+140    	; 0x8816 <ProcessMusic+0x3e0>
    878a:	40 91 7c 0d 	lds	r20, 0x0D7C
    878e:	44 23       	and	r20, r20
    8790:	09 f4       	brne	.+2      	; 0x8794 <ProcessMusic+0x35e>
    8792:	41 c0       	rjmp	.+130    	; 0x8816 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8794:	89 9f       	mul	r24, r25
    8796:	c0 01       	movw	r24, r0
    8798:	11 24       	eor	r1, r1
    879a:	93 95       	inc	r25
				uVol>>=8;
    879c:	89 2f       	mov	r24, r25
    879e:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    87a0:	58 9f       	mul	r21, r24
    87a2:	90 01       	movw	r18, r0
    87a4:	59 9f       	mul	r21, r25
    87a6:	30 0d       	add	r19, r0
    87a8:	11 24       	eor	r1, r1
    87aa:	c9 01       	movw	r24, r18
    87ac:	93 95       	inc	r25
				uVol>>=8;
    87ae:	89 2f       	mov	r24, r25
    87b0:	99 27       	eor	r25, r25
    87b2:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    87b4:	50 81       	ld	r21, Z
    87b6:	58 9f       	mul	r21, r24
    87b8:	90 01       	movw	r18, r0
    87ba:	59 9f       	mul	r21, r25
    87bc:	30 0d       	add	r19, r0
    87be:	11 24       	eor	r1, r1
    87c0:	33 95       	inc	r19
					uVol>>=8;
    87c2:	23 2f       	mov	r18, r19
    87c4:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    87c6:	42 9f       	mul	r20, r18
    87c8:	c0 01       	movw	r24, r0
    87ca:	43 9f       	mul	r20, r19
    87cc:	90 0d       	add	r25, r0
    87ce:	11 24       	eor	r1, r1
    87d0:	93 95       	inc	r25
				uVol>>=8;
    87d2:	89 2f       	mov	r24, r25
    87d4:	99 27       	eor	r25, r25
    87d6:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    87d8:	20 81       	ld	r18, Z
    87da:	22 23       	and	r18, r18
    87dc:	f1 f0       	breq	.+60     	; 0x881a <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    87de:	d5 01       	movw	r26, r10
    87e0:	ec 91       	ld	r30, X
    87e2:	f0 e0       	ldi	r31, 0x00	; 0
    87e4:	e0 50       	subi	r30, 0x00	; 0
    87e6:	f5 47       	sbci	r31, 0x75	; 117
    87e8:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    87ea:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    87ec:	2e 9f       	mul	r18, r30
    87ee:	f0 01       	movw	r30, r0
    87f0:	11 24       	eor	r1, r1
    87f2:	f3 95       	inc	r31
					tVol>>=8;
    87f4:	ef 2f       	mov	r30, r31
    87f6:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    87f8:	a3 01       	movw	r20, r6
    87fa:	4e 1b       	sub	r20, r30
    87fc:	5f 0b       	sbc	r21, r31
    87fe:	48 9f       	mul	r20, r24
    8800:	90 01       	movw	r18, r0
    8802:	49 9f       	mul	r20, r25
    8804:	30 0d       	add	r19, r0
    8806:	58 9f       	mul	r21, r24
    8808:	30 0d       	add	r19, r0
    880a:	11 24       	eor	r1, r1
    880c:	c9 01       	movw	r24, r18
    880e:	93 95       	inc	r25
					uVol>>=8;
    8810:	89 2f       	mov	r24, r25
    8812:	99 27       	eor	r25, r25
    8814:	02 c0       	rjmp	.+4      	; 0x881a <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8816:	80 e0       	ldi	r24, 0x00	; 0
    8818:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    881a:	f5 01       	movw	r30, r10
    881c:	30 81       	ld	r19, Z
    881e:	f7 01       	movw	r30, r14
    8820:	39 97       	sbiw	r30, 0x09	; 9
    8822:	20 81       	ld	r18, Z
    8824:	23 0f       	add	r18, r19
    8826:	d5 01       	movw	r26, r10
    8828:	2c 93       	st	X, r18
    882a:	02 c0       	rjmp	.+4      	; 0x8830 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    882c:	80 e0       	ldi	r24, 0x00	; 0
    882e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8830:	f8 01       	movw	r30, r16
    8832:	80 83       	st	Z, r24
    8834:	67 96       	adiw	r28, 0x17	; 23
    8836:	0a 5f       	subi	r16, 0xFA	; 250
    8838:	1f 4f       	sbci	r17, 0xFF	; 255
    883a:	f7 e1       	ldi	r31, 0x17	; 23
    883c:	af 0e       	add	r10, r31
    883e:	b1 1c       	adc	r11, r1
    8840:	87 e1       	ldi	r24, 0x17	; 23
    8842:	c8 0e       	add	r12, r24
    8844:	d1 1c       	adc	r13, r1
    8846:	97 e1       	ldi	r25, 0x17	; 23
    8848:	e9 0e       	add	r14, r25
    884a:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    884c:	ad e0       	ldi	r26, 0x0D	; 13
    884e:	c7 37       	cpi	r28, 0x77	; 119
    8850:	da 07       	cpc	r29, r26
    8852:	09 f0       	breq	.+2      	; 0x8856 <ProcessMusic+0x420>
    8854:	37 cf       	rjmp	.-402    	; 0x86c4 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8856:	df 91       	pop	r29
    8858:	cf 91       	pop	r28
    885a:	1f 91       	pop	r17
    885c:	0f 91       	pop	r16
    885e:	ff 90       	pop	r15
    8860:	ef 90       	pop	r14
    8862:	df 90       	pop	r13
    8864:	cf 90       	pop	r12
    8866:	bf 90       	pop	r11
    8868:	af 90       	pop	r10
    886a:	9f 90       	pop	r9
    886c:	8f 90       	pop	r8
    886e:	7f 90       	pop	r7
    8870:	6f 90       	pop	r6
    8872:	08 95       	ret

00008874 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8874:	80 93 7c 0d 	sts	0x0D7C, r24
    8878:	08 95       	ret

0000887a <IsSongPlaying>:
	return masterVolume;
}

bool IsSongPlaying(){
	return playSong;
    887a:	80 91 d0 0c 	lds	r24, 0x0CD0
    887e:	08 95       	ret

00008880 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8880:	99 27       	eor	r25, r25
	clr r23
    8882:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8884:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8886:	09 f4       	brne	.+2      	; 0x888a <set_note_waves>
		ret
    8888:	08 95       	ret

0000888a <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    888a:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    888c:	f9 e8       	ldi	r31, 0x89	; 137
	lsl r22
    888e:	66 0f       	add	r22, r22
	rol r23
    8890:	77 1f       	adc	r23, r23
	add ZL,r22
    8892:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8894:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8896:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8898:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    889a:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    889c:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    889e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    88a0:	28 9f       	mul	r18, r24
	add ZL,r0
    88a2:	e0 0d       	add	r30, r0
	adc ZH,r1
    88a4:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    88a6:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    88a8:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    88aa:	11 24       	eor	r1, r1
	

	ret
    88ac:	08 95       	ret

000088ae <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    88ae:	99 27       	eor	r25, r25
	clr r23
    88b0:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    88b2:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    88b4:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    88b6:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    88b8:	28 9f       	mul	r18, r24
	add ZL,r0
    88ba:	e0 0d       	add	r30, r0
	adc ZH,r1
    88bc:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    88be:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    88c0:	31 f4       	brne	.+12     	; 0x88ce <smw1>
	lds r22,tr4_params
    88c2:	60 91 e5 0c 	lds	r22, 0x0CE5
	andi r22,0xfe;
    88c6:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    88c8:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw	
    88cc:	0b c0       	rjmp	.+22     	; 0x88e4 <esmw>

000088ce <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    88ce:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    88d0:	31 f4       	brne	.+12     	; 0x88de <smw2>
	lds r22,tr4_params
    88d2:	60 91 e5 0c 	lds	r22, 0x0CE5
	ori r22,0xfe;
    88d6:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    88d8:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw
    88dc:	03 c0       	rjmp	.+6      	; 0x88e4 <esmw>

000088de <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    88de:	7b e8       	ldi	r23, 0x8B	; 139
	add r23,r22
    88e0:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    88e2:	75 83       	std	Z+5, r23	; 0x05

000088e4 <esmw>:

esmw:
	clr r1	
    88e4:	11 24       	eor	r1, r1
	ret
    88e6:	08 95       	ret
	...

00008900 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8900:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8902:	80 93 d1 0c 	sts	0x0CD1, r24
	ret
    8906:	08 95       	ret

00008908 <steptable>:
    8908:	22 00       	.word	0x0022	; ????
    890a:	24 00       	.word	0x0024	; ????
    890c:	26 00       	.word	0x0026	; ????
    890e:	28 00       	.word	0x0028	; ????
    8910:	2b 00       	.word	0x002b	; ????
    8912:	2d 00       	.word	0x002d	; ????
    8914:	30 00       	.word	0x0030	; ????
    8916:	33 00       	.word	0x0033	; ????
    8918:	36 00       	.word	0x0036	; ????
    891a:	39 00       	.word	0x0039	; ????
    891c:	3d 00       	.word	0x003d	; ????
    891e:	40 00       	.word	0x0040	; ????
    8920:	44 00       	.word	0x0044	; ????
    8922:	48 00       	.word	0x0048	; ????
    8924:	4c 00       	.word	0x004c	; ????
    8926:	51 00       	.word	0x0051	; ????
    8928:	56 00       	.word	0x0056	; ????
    892a:	5b 00       	.word	0x005b	; ????
    892c:	60 00       	.word	0x0060	; ????
    892e:	66 00       	.word	0x0066	; ????
    8930:	6c 00       	.word	0x006c	; ????
    8932:	73 00       	.word	0x0073	; ????
    8934:	79 00       	.word	0x0079	; ????
    8936:	81 00       	.word	0x0081	; ????
    8938:	88 00       	.word	0x0088	; ????
    893a:	90 00       	.word	0x0090	; ????
    893c:	99 00       	.word	0x0099	; ????
    893e:	a2 00       	.word	0x00a2	; ????
    8940:	ac 00       	.word	0x00ac	; ????
    8942:	b6 00       	.word	0x00b6	; ????
    8944:	c1 00       	.word	0x00c1	; ????
    8946:	cc 00       	.word	0x00cc	; ????
    8948:	d8 00       	.word	0x00d8	; ????
    894a:	e5 00       	.word	0x00e5	; ????
    894c:	f3 00       	.word	0x00f3	; ????
    894e:	01 01       	movw	r0, r2
    8950:	10 01       	movw	r2, r0
    8952:	21 01       	movw	r4, r2
    8954:	32 01       	movw	r6, r4
    8956:	44 01       	movw	r8, r8
    8958:	57 01       	movw	r10, r14
    895a:	6c 01       	movw	r12, r24
    895c:	81 01       	movw	r16, r2
    895e:	98 01       	movw	r18, r16
    8960:	b0 01       	movw	r22, r0
    8962:	ca 01       	movw	r24, r20
    8964:	e5 01       	movw	r28, r10
    8966:	02 02       	muls	r16, r18
    8968:	21 02       	muls	r18, r17
    896a:	41 02       	muls	r20, r17
    896c:	64 02       	muls	r22, r20
    896e:	88 02       	muls	r24, r24
    8970:	ae 02       	muls	r26, r30
    8972:	d7 02       	muls	r29, r23
    8974:	03 03       	mulsu	r16, r19
    8976:	30 03       	mulsu	r19, r16
    8978:	61 03       	mulsu	r22, r17
    897a:	94 03       	fmuls	r17, r20
    897c:	cb 03       	fmulsu	r20, r19
    897e:	05 04       	cpc	r0, r5
    8980:	42 04       	cpc	r4, r2
    8982:	83 04       	cpc	r8, r3
    8984:	c7 04       	cpc	r12, r7
    8986:	10 05       	cpc	r17, r0
    8988:	5d 05       	cpc	r21, r13
    898a:	af 05       	cpc	r26, r15
    898c:	05 06       	cpc	r0, r21
    898e:	61 06       	cpc	r6, r17
    8990:	c2 06       	cpc	r12, r18
    8992:	29 07       	cpc	r18, r25
    8994:	96 07       	cpc	r25, r22
    8996:	09 08       	sbc	r0, r9
    8998:	83 08       	sbc	r8, r3
    899a:	05 09       	sbc	r16, r5
    899c:	8e 09       	sbc	r24, r14
    899e:	20 0a       	sbc	r2, r16
    89a0:	ba 0a       	sbc	r11, r26
    89a2:	5d 0b       	sbc	r21, r29
    89a4:	0a 0c       	add	r0, r10
    89a6:	c1 0c       	add	r12, r1
    89a8:	84 0d       	add	r24, r4
    89aa:	51 0e       	add	r5, r17
    89ac:	2b 0f       	add	r18, r27
    89ae:	12 10       	cpse	r1, r2
    89b0:	07 11       	cpse	r16, r7
    89b2:	0a 12       	cpse	r0, r26
    89b4:	1d 13       	cpse	r17, r29
    89b6:	40 14       	cp	r4, r0
    89b8:	74 15       	cp	r23, r4
    89ba:	ba 16       	cp	r11, r26
    89bc:	14 18       	sub	r1, r4
    89be:	83 19       	sub	r24, r3
    89c0:	07 1b       	sub	r16, r23
    89c2:	a3 1c       	adc	r10, r3
    89c4:	57 1e       	adc	r5, r23
    89c6:	24 20       	and	r2, r4
    89c8:	0e 22       	and	r0, r30
    89ca:	14 24       	eor	r1, r4
    89cc:	39 26       	eor	r3, r25
    89ce:	7f 28       	or	r7, r15
    89d0:	e8 2a       	or	r14, r24
    89d2:	75 2d       	mov	r23, r5
    89d4:	29 30       	cpi	r18, 0x09	; 9
    89d6:	06 33       	cpi	r16, 0x36	; 54
    89d8:	0f 36       	cpi	r16, 0x6F	; 111
    89da:	45 39       	cpi	r20, 0x95	; 149
    89dc:	ad 3c       	cpi	r26, 0xCD	; 205
    89de:	49 40       	sbci	r20, 0x09	; 9
    89e0:	1b 44       	sbci	r17, 0x4B	; 75
    89e2:	28 48       	sbci	r18, 0x88	; 136
    89e4:	73 4c       	sbci	r23, 0xC3	; 195
    89e6:	fe 50       	subi	r31, 0x0E	; 14
    89e8:	cf 55       	subi	r28, 0x5F	; 95
    89ea:	ea 5a       	subi	r30, 0xAA	; 170
    89ec:	51 60       	ori	r21, 0x01	; 1
    89ee:	0c 66       	ori	r16, 0x6C	; 108
    89f0:	1d 6c       	ori	r17, 0xCD	; 205
    89f2:	8b 72       	andi	r24, 0x2B	; 43
    89f4:	5a 79       	andi	r21, 0x9A	; 154
    89f6:	92 80       	ldd	r9, Z+2	; 0x02
    89f8:	37 88       	ldd	r3, Z+23	; 0x17
    89fa:	50 90 e5 98 	lds	r5, 0x98E5
    89fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8a00:	9f ab       	std	Y+55, r25	; 0x37
    8a02:	d3 b5       	in	r29, 0x23	; 35
    8a04:	a3 c0       	rjmp	.+326    	; 0x8b4c <waves+0x4c>
	...

00008b00 <waves>:
    8b00:	00 03       	mulsu	r16, r16
    8b02:	06 09       	sbc	r16, r6
    8b04:	0c 10       	cpse	r0, r12
    8b06:	13 16       	cp	r1, r19
    8b08:	19 1c       	adc	r1, r9
    8b0a:	1f 22       	and	r1, r31
    8b0c:	25 28       	or	r2, r5
    8b0e:	2b 2e       	mov	r2, r27
    8b10:	31 33       	cpi	r19, 0x31	; 49
    8b12:	36 39       	cpi	r19, 0x96	; 150
    8b14:	3c 3f       	cpi	r19, 0xFC	; 252
    8b16:	41 44       	sbci	r20, 0x41	; 65
    8b18:	47 49       	sbci	r20, 0x97	; 151
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	51 53       	subi	r21, 0x31	; 49
    8b1e:	55 58       	subi	r21, 0x85	; 133
    8b20:	5a 5c       	subi	r21, 0xCA	; 202
    8b22:	5e 60       	ori	r21, 0x0E	; 14
    8b24:	62 64       	ori	r22, 0x42	; 66
    8b26:	66 68       	ori	r22, 0x86	; 134
    8b28:	6a 6b       	ori	r22, 0xBA	; 186
    8b2a:	6d 6f       	ori	r22, 0xFD	; 253
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 76       	andi	r23, 0x65	; 101
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7a       	andi	r23, 0xAA	; 170
    8b36:	7b 7c       	andi	r23, 0xCB	; 203
    8b38:	7d 7d       	andi	r23, 0xDD	; 221
    8b3a:	7e 7e       	andi	r23, 0xEE	; 238
    8b3c:	7e 7f       	andi	r23, 0xFE	; 254
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7e 7e       	andi	r23, 0xEE	; 238
    8b46:	7e 7d       	andi	r23, 0xDE	; 222
    8b48:	7d 7c       	andi	r23, 0xCD	; 205
    8b4a:	7b 7a       	andi	r23, 0xAB	; 171
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 76       	andi	r23, 0x68	; 104
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6f       	ori	r23, 0xF0	; 240
    8b56:	6d 6b       	ori	r22, 0xBD	; 189
    8b58:	6a 68       	ori	r22, 0x8A	; 138
    8b5a:	66 64       	ori	r22, 0x46	; 70
    8b5c:	62 60       	ori	r22, 0x02	; 2
    8b5e:	5e 5c       	subi	r21, 0xCE	; 206
    8b60:	5a 58       	subi	r21, 0x8A	; 138
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	51 4e       	sbci	r21, 0xE1	; 225
    8b66:	4c 49       	sbci	r20, 0x9C	; 156
    8b68:	47 44       	sbci	r20, 0x47	; 71
    8b6a:	41 3f       	cpi	r20, 0xF1	; 241
    8b6c:	3c 39       	cpi	r19, 0x9C	; 156
    8b6e:	36 33       	cpi	r19, 0x36	; 54
    8b70:	31 2e       	mov	r3, r17
    8b72:	2b 28       	or	r2, r11
    8b74:	25 22       	and	r2, r21
    8b76:	1f 1c       	adc	r1, r15
    8b78:	19 16       	cp	r1, r25
    8b7a:	13 10       	cpse	r1, r3
    8b7c:	0c 09       	sbc	r16, r12
    8b7e:	06 03       	mulsu	r16, r22
    8b80:	00 fd       	sbrc	r16, 0
    8b82:	fa f7       	brpl	.-2      	; 0x8b82 <waves+0x82>
    8b84:	f4 f0       	brlt	.+60     	; 0x8bc2 <waves+0xc2>
    8b86:	ed ea       	ldi	r30, 0xAD	; 173
    8b88:	e7 e4       	ldi	r30, 0x47	; 71
    8b8a:	e1 de       	rcall	.-574    	; 0x894e <steptable+0x46>
    8b8c:	db d8       	rcall	.-3658   	; 0x7d44 <FormatEeprom+0x4>
    8b8e:	d5 d2       	rcall	.+1450   	; 0x913a <waves+0x63a>
    8b90:	cf cd       	rjmp	.-1122   	; 0x8730 <ProcessMusic+0x2fa>
    8b92:	ca c7       	rjmp	.+3988   	; 0x9b28 <LBPrintInt+0x3c>
    8b94:	c4 c1       	rjmp	.+904    	; 0x8f1e <waves+0x41e>
    8b96:	bf bc       	out	0x2f, r11	; 47
    8b98:	b9 b7       	in	r27, 0x39	; 57
    8b9a:	b4 b2       	in	r11, 0x14	; 20
    8b9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8ba0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8ba2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8ba4:	9e 9c       	mul	r9, r14
    8ba6:	9a 98       	cbi	0x13, 2	; 19
    8ba8:	96 95       	lsr	r25
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	88 87       	std	Y+8, r24	; 0x08
    8bb4:	86 86       	std	Z+14, r8	; 0x0e
    8bb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8bb8:	83 83       	std	Z+3, r24	; 0x03
    8bba:	82 82       	std	Z+2, r8	; 0x02
    8bbc:	82 81       	ldd	r24, Z+2	; 0x02
    8bbe:	81 81       	ldd	r24, Z+1	; 0x01
    8bc0:	81 81       	ldd	r24, Z+1	; 0x01
    8bc2:	81 81       	ldd	r24, Z+1	; 0x01
    8bc4:	82 82       	std	Z+2, r8	; 0x02
    8bc6:	82 83       	std	Z+2, r24	; 0x02
    8bc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8bca:	85 86       	std	Z+13, r8	; 0x0d
    8bcc:	86 87       	std	Z+14, r24	; 0x0e
    8bce:	88 8a       	std	Y+16, r8	; 0x10
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 95 	lds	r25, 0x9593
    8bd8:	96 98       	cbi	0x12, 6	; 18
    8bda:	9a 9c       	mul	r9, r10
    8bdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8bde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8be0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8be2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be4:	af b2       	in	r10, 0x1f	; 31
    8be6:	b4 b7       	in	r27, 0x34	; 52
    8be8:	b9 bc       	out	0x29, r11	; 41
    8bea:	bf c1       	rjmp	.+894    	; 0x8f6a <waves+0x46a>
    8bec:	c4 c7       	rjmp	.+3976   	; 0x9b76 <LBCollides+0x18>
    8bee:	ca cd       	rjmp	.-1132   	; 0x8784 <ProcessMusic+0x34e>
    8bf0:	cf d2       	rcall	.+1438   	; 0x9190 <waves+0x690>
    8bf2:	d5 d8       	rcall	.-3670   	; 0x7d9e <isEepromFormatted+0x1a>
    8bf4:	db de       	rcall	.-586    	; 0x89ac <steptable+0xa4>
    8bf6:	e1 e4       	ldi	r30, 0x41	; 65
    8bf8:	e7 ea       	ldi	r30, 0xA7	; 167
    8bfa:	ed f0       	brhs	.+58     	; 0x8c36 <waves+0x136>
    8bfc:	f4 f7       	brge	.-4      	; 0x8bfa <waves+0xfa>
    8bfe:	fa fd       	.word	0xfdfa	; ????
    8c00:	80 81       	ld	r24, Z
    8c02:	82 83       	std	Z+2, r24	; 0x02
    8c04:	84 85       	ldd	r24, Z+12	; 0x0c
    8c06:	86 87       	std	Z+14, r24	; 0x0e
    8c08:	88 89       	ldd	r24, Y+16	; 0x10
    8c0a:	8a 8b       	std	Y+18, r24	; 0x12
    8c0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8c10:	90 91 92 93 	lds	r25, 0x9392
    8c14:	94 95       	.word	0x9594	; ????
    8c16:	96 97       	sbiw	r26, 0x26	; 38
    8c18:	98 99       	sbic	0x13, 0	; 19
    8c1a:	9a 9b       	sbis	0x13, 2	; 19
    8c1c:	9c 9d       	mul	r25, r12
    8c1e:	9e 9f       	mul	r25, r30
    8c20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8c22:	a2 a3       	std	Z+34, r26	; 0x22
    8c24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8c26:	a6 a7       	std	Z+46, r26	; 0x2e
    8c28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8c2a:	aa ab       	std	Y+50, r26	; 0x32
    8c2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8c2e:	ae af       	std	Y+62, r26	; 0x3e
    8c30:	b0 b1       	in	r27, 0x00	; 0
    8c32:	b2 b3       	in	r27, 0x12	; 18
    8c34:	b4 b5       	in	r27, 0x24	; 36
    8c36:	b6 b7       	in	r27, 0x36	; 54
    8c38:	b8 b9       	out	0x08, r27	; 8
    8c3a:	ba bb       	out	0x1a, r27	; 26
    8c3c:	bc bd       	out	0x2c, r27	; 44
    8c3e:	be bf       	out	0x3e, r27	; 62
    8c40:	c0 c1       	rjmp	.+896    	; 0x8fc2 <waves+0x4c2>
    8c42:	c2 c3       	rjmp	.+1924   	; 0x93c8 <waves+0x8c8>
    8c44:	c4 c5       	rjmp	.+2952   	; 0x97ce <DrawMap+0x5a>
    8c46:	c6 c7       	rjmp	.+3980   	; 0x9bd4 <LBRandom+0x22>
    8c48:	c8 c9       	rjmp	.-3184   	; 0x7fda <PatchCommand07+0x4>
    8c4a:	ca cb       	rjmp	.-2156   	; 0x83e0 <TriggerNote+0x2a>
    8c4c:	cc cd       	rjmp	.-1128   	; 0x87e6 <ProcessMusic+0x3b0>
    8c4e:	ce cf       	rjmp	.-100    	; 0x8bec <waves+0xec>
    8c50:	d0 d1       	rcall	.+928    	; 0x8ff2 <waves+0x4f2>
    8c52:	d2 d3       	rcall	.+1956   	; 0x93f8 <waves+0x8f8>
    8c54:	d4 d5       	rcall	.+2984   	; 0x97fe <DrawMap+0x8a>
    8c56:	d6 d7       	rcall	.+4012   	; 0x9c04 <LBMapSprite+0x8>
    8c58:	d8 d9       	rcall	.-3152   	; 0x800a <PatchCommand11+0x22>
    8c5a:	da db       	rcall	.-2124   	; 0x8410 <TriggerNote+0x5a>
    8c5c:	dc dd       	rcall	.-1096   	; 0x8816 <ProcessMusic+0x3e0>
    8c5e:	de df       	rcall	.-68     	; 0x8c1c <waves+0x11c>
    8c60:	e0 e1       	ldi	r30, 0x10	; 16
    8c62:	e2 e3       	ldi	r30, 0x32	; 50
    8c64:	e4 e5       	ldi	r30, 0x54	; 84
    8c66:	e6 e7       	ldi	r30, 0x76	; 118
    8c68:	e8 e9       	ldi	r30, 0x98	; 152
    8c6a:	ea eb       	ldi	r30, 0xBA	; 186
    8c6c:	ec ed       	ldi	r30, 0xDC	; 220
    8c6e:	ee ef       	ldi	r30, 0xFE	; 254
    8c70:	f0 f1       	brcs	.+124    	; 0x8cee <waves+0x1ee>
    8c72:	f2 f3       	brmi	.-4      	; 0x8c70 <waves+0x170>
    8c74:	f4 f5       	brge	.+124    	; 0x8cf2 <waves+0x1f2>
    8c76:	f6 f7       	brtc	.-4      	; 0x8c74 <waves+0x174>
    8c78:	f8 f9       	.word	0xf9f8	; ????
    8c7a:	fa fb       	.word	0xfbfa	; ????
    8c7c:	fc fd       	.word	0xfdfc	; ????
    8c7e:	fe ff       	.word	0xfffe	; ????
    8c80:	00 01       	movw	r0, r0
    8c82:	02 03       	mulsu	r16, r18
    8c84:	04 05       	cpc	r16, r4
    8c86:	06 07       	cpc	r16, r22
    8c88:	08 09       	sbc	r16, r8
    8c8a:	0a 0b       	sbc	r16, r26
    8c8c:	0c 0d       	add	r16, r12
    8c8e:	0e 0f       	add	r16, r30
    8c90:	10 11       	cpse	r17, r0
    8c92:	12 13       	cpse	r17, r18
    8c94:	14 15       	cp	r17, r4
    8c96:	16 17       	cp	r17, r22
    8c98:	18 19       	sub	r17, r8
    8c9a:	1a 1b       	sub	r17, r26
    8c9c:	1c 1d       	adc	r17, r12
    8c9e:	1e 1f       	adc	r17, r30
    8ca0:	20 21       	and	r18, r0
    8ca2:	22 23       	and	r18, r18
    8ca4:	24 25       	eor	r18, r4
    8ca6:	26 27       	eor	r18, r22
    8ca8:	28 29       	or	r18, r8
    8caa:	2a 2b       	or	r18, r26
    8cac:	2c 2d       	mov	r18, r12
    8cae:	2e 2f       	mov	r18, r30
    8cb0:	30 31       	cpi	r19, 0x10	; 16
    8cb2:	32 33       	cpi	r19, 0x32	; 50
    8cb4:	34 35       	cpi	r19, 0x54	; 84
    8cb6:	36 37       	cpi	r19, 0x76	; 118
    8cb8:	38 39       	cpi	r19, 0x98	; 152
    8cba:	3a 3b       	cpi	r19, 0xBA	; 186
    8cbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8cbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8cc0:	40 41       	sbci	r20, 0x10	; 16
    8cc2:	42 43       	sbci	r20, 0x32	; 50
    8cc4:	44 45       	sbci	r20, 0x54	; 84
    8cc6:	46 47       	sbci	r20, 0x76	; 118
    8cc8:	48 49       	sbci	r20, 0x98	; 152
    8cca:	4a 4b       	sbci	r20, 0xBA	; 186
    8ccc:	4c 4d       	sbci	r20, 0xDC	; 220
    8cce:	4e 4f       	sbci	r20, 0xFE	; 254
    8cd0:	50 51       	subi	r21, 0x10	; 16
    8cd2:	52 53       	subi	r21, 0x32	; 50
    8cd4:	54 55       	subi	r21, 0x54	; 84
    8cd6:	56 57       	subi	r21, 0x76	; 118
    8cd8:	58 59       	subi	r21, 0x98	; 152
    8cda:	5a 5b       	subi	r21, 0xBA	; 186
    8cdc:	5c 5d       	subi	r21, 0xDC	; 220
    8cde:	5e 5f       	subi	r21, 0xFE	; 254
    8ce0:	60 61       	ori	r22, 0x10	; 16
    8ce2:	62 63       	ori	r22, 0x32	; 50
    8ce4:	64 65       	ori	r22, 0x54	; 84
    8ce6:	66 67       	ori	r22, 0x76	; 118
    8ce8:	68 69       	ori	r22, 0x98	; 152
    8cea:	6a 6b       	ori	r22, 0xBA	; 186
    8cec:	6c 6d       	ori	r22, 0xDC	; 220
    8cee:	6e 6f       	ori	r22, 0xFE	; 254
    8cf0:	70 71       	andi	r23, 0x10	; 16
    8cf2:	72 73       	andi	r23, 0x32	; 50
    8cf4:	74 75       	andi	r23, 0x54	; 84
    8cf6:	76 77       	andi	r23, 0x76	; 118
    8cf8:	78 79       	andi	r23, 0x98	; 152
    8cfa:	7a 7b       	andi	r23, 0xBA	; 186
    8cfc:	7c 7d       	andi	r23, 0xDC	; 220
    8cfe:	7e 7f       	andi	r23, 0xFE	; 254
    8d00:	00 02       	muls	r16, r16
    8d02:	04 06       	cpc	r0, r20
    8d04:	08 0a       	sbc	r0, r24
    8d06:	0c 0e       	add	r0, r28
    8d08:	10 12       	cpse	r1, r16
    8d0a:	14 16       	cp	r1, r20
    8d0c:	18 1a       	sub	r1, r24
    8d0e:	1c 1e       	adc	r1, r28
    8d10:	20 22       	and	r2, r16
    8d12:	24 26       	eor	r2, r20
    8d14:	28 2a       	or	r2, r24
    8d16:	2c 2e       	mov	r2, r28
    8d18:	30 32       	cpi	r19, 0x20	; 32
    8d1a:	34 36       	cpi	r19, 0x64	; 100
    8d1c:	38 3a       	cpi	r19, 0xA8	; 168
    8d1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8d20:	40 42       	sbci	r20, 0x20	; 32
    8d22:	44 46       	sbci	r20, 0x64	; 100
    8d24:	48 4a       	sbci	r20, 0xA8	; 168
    8d26:	4c 4e       	sbci	r20, 0xEC	; 236
    8d28:	50 52       	subi	r21, 0x20	; 32
    8d2a:	54 56       	subi	r21, 0x64	; 100
    8d2c:	58 5a       	subi	r21, 0xA8	; 168
    8d2e:	5c 5e       	subi	r21, 0xEC	; 236
    8d30:	60 62       	ori	r22, 0x20	; 32
    8d32:	64 66       	ori	r22, 0x64	; 100
    8d34:	68 6a       	ori	r22, 0xA8	; 168
    8d36:	6c 6e       	ori	r22, 0xEC	; 236
    8d38:	70 72       	andi	r23, 0x20	; 32
    8d3a:	74 76       	andi	r23, 0x64	; 100
    8d3c:	78 7a       	andi	r23, 0xA8	; 168
    8d3e:	7c 7e       	andi	r23, 0xEC	; 236
    8d40:	7f 7d       	andi	r23, 0xDF	; 223
    8d42:	7b 79       	andi	r23, 0x9B	; 155
    8d44:	77 75       	andi	r23, 0x57	; 87
    8d46:	73 71       	andi	r23, 0x13	; 19
    8d48:	6f 6d       	ori	r22, 0xDF	; 223
    8d4a:	6b 69       	ori	r22, 0x9B	; 155
    8d4c:	67 65       	ori	r22, 0x57	; 87
    8d4e:	63 61       	ori	r22, 0x13	; 19
    8d50:	5f 5d       	subi	r21, 0xDF	; 223
    8d52:	5b 59       	subi	r21, 0x9B	; 155
    8d54:	57 55       	subi	r21, 0x57	; 87
    8d56:	53 51       	subi	r21, 0x13	; 19
    8d58:	4f 4d       	sbci	r20, 0xDF	; 223
    8d5a:	4b 49       	sbci	r20, 0x9B	; 155
    8d5c:	47 45       	sbci	r20, 0x57	; 87
    8d5e:	43 41       	sbci	r20, 0x13	; 19
    8d60:	3f 3d       	cpi	r19, 0xDF	; 223
    8d62:	3b 39       	cpi	r19, 0x9B	; 155
    8d64:	37 35       	cpi	r19, 0x57	; 87
    8d66:	33 31       	cpi	r19, 0x13	; 19
    8d68:	2f 2d       	mov	r18, r15
    8d6a:	2b 29       	or	r18, r11
    8d6c:	27 25       	eor	r18, r7
    8d6e:	23 21       	and	r18, r3
    8d70:	1f 1d       	adc	r17, r15
    8d72:	1b 19       	sub	r17, r11
    8d74:	17 15       	cp	r17, r7
    8d76:	13 11       	cpse	r17, r3
    8d78:	0f 0d       	add	r16, r15
    8d7a:	0b 09       	sbc	r16, r11
    8d7c:	07 05       	cpc	r16, r7
    8d7e:	03 01       	movw	r0, r6
    8d80:	ff fd       	.word	0xfdff	; ????
    8d82:	fb f9       	.word	0xf9fb	; ????
    8d84:	f7 f5       	brid	.+124    	; 0x8e02 <waves+0x302>
    8d86:	f3 f1       	brvs	.+124    	; 0x8e04 <waves+0x304>
    8d88:	ef ed       	ldi	r30, 0xDF	; 223
    8d8a:	eb e9       	ldi	r30, 0x9B	; 155
    8d8c:	e7 e5       	ldi	r30, 0x57	; 87
    8d8e:	e3 e1       	ldi	r30, 0x13	; 19
    8d90:	df dd       	rcall	.-1090   	; 0x8950 <steptable+0x48>
    8d92:	db d9       	rcall	.-3146   	; 0x814a <StartSong+0x2>
    8d94:	d7 d5       	rcall	.+2990   	; 0x9944 <LBGetNextFrame+0x14>
    8d96:	d3 d1       	rcall	.+934    	; 0x913e <waves+0x63e>
    8d98:	cf cd       	rjmp	.-1122   	; 0x8938 <steptable+0x30>
    8d9a:	cb c9       	rjmp	.-3178   	; 0x8132 <InitMusicPlayer+0x2e>
    8d9c:	c7 c5       	rjmp	.+2958   	; 0x992c <LBMoveDelta+0x52>
    8d9e:	c3 c1       	rjmp	.+902    	; 0x9126 <waves+0x626>
    8da0:	bf bd       	out	0x2f, r27	; 47
    8da2:	bb b9       	out	0x0b, r27	; 11
    8da4:	b7 b5       	in	r27, 0x27	; 39
    8da6:	b3 b1       	in	r27, 0x03	; 3
    8da8:	af ad       	ldd	r26, Y+63	; 0x3f
    8daa:	ab a9       	ldd	r26, Y+51	; 0x33
    8dac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8dae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8db0:	9f 9d       	mul	r25, r15
    8db2:	9b 99       	sbic	0x13, 3	; 19
    8db4:	97 95       	ror	r25
    8db6:	93 91       	.word	0x9193	; ????
    8db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8dba:	8b 89       	ldd	r24, Y+19	; 0x13
    8dbc:	87 85       	ldd	r24, Z+15	; 0x0f
    8dbe:	83 81       	ldd	r24, Z+3	; 0x03
    8dc0:	80 82       	st	Z, r8
    8dc2:	84 86       	std	Z+12, r8	; 0x0c
    8dc4:	88 8a       	std	Y+16, r8	; 0x10
    8dc6:	8c 8e       	std	Y+28, r8	; 0x1c
    8dc8:	90 92 94 96 	sts	0x9694, r9
    8dcc:	98 9a       	sbi	0x13, 0	; 19
    8dce:	9c 9e       	mul	r9, r28
    8dd0:	a0 a2       	std	Z+32, r10	; 0x20
    8dd2:	a4 a6       	std	Z+44, r10	; 0x2c
    8dd4:	a8 aa       	std	Y+48, r10	; 0x30
    8dd6:	ac ae       	std	Y+60, r10	; 0x3c
    8dd8:	b0 b2       	in	r11, 0x10	; 16
    8dda:	b4 b6       	in	r11, 0x34	; 52
    8ddc:	b8 ba       	out	0x18, r11	; 24
    8dde:	bc be       	out	0x3c, r11	; 60
    8de0:	c0 c2       	rjmp	.+1408   	; 0x9362 <waves+0x862>
    8de2:	c4 c6       	rjmp	.+3464   	; 0x9b6c <LBCollides+0xe>
    8de4:	c8 ca       	rjmp	.-2672   	; 0x8376 <TriggerFx+0x50>
    8de6:	cc ce       	rjmp	.-616    	; 0x8b80 <waves+0x80>
    8de8:	d0 d2       	rcall	.+1440   	; 0x938a <waves+0x88a>
    8dea:	d4 d6       	rcall	.+3496   	; 0x9b94 <LBCollides+0x36>
    8dec:	d8 da       	rcall	.-2640   	; 0x839e <TriggerFx+0x78>
    8dee:	dc de       	rcall	.-584    	; 0x8ba8 <waves+0xa8>
    8df0:	e0 e2       	ldi	r30, 0x20	; 32
    8df2:	e4 e6       	ldi	r30, 0x64	; 100
    8df4:	e8 ea       	ldi	r30, 0xA8	; 168
    8df6:	ec ee       	ldi	r30, 0xEC	; 236
    8df8:	f0 f2       	brcs	.-68     	; 0x8db6 <waves+0x2b6>
    8dfa:	f4 f6       	brge	.-68     	; 0x8db8 <waves+0x2b8>
    8dfc:	f8 fa       	.word	0xfaf8	; ????
    8dfe:	fc fe       	.word	0xfefc	; ????
    8e00:	7f 7f       	andi	r23, 0xFF	; 255
    8e02:	7f 7f       	andi	r23, 0xFF	; 255
    8e04:	7f 7f       	andi	r23, 0xFF	; 255
    8e06:	7f 7f       	andi	r23, 0xFF	; 255
    8e08:	7f 7f       	andi	r23, 0xFF	; 255
    8e0a:	7f 7f       	andi	r23, 0xFF	; 255
    8e0c:	7f 7f       	andi	r23, 0xFF	; 255
    8e0e:	7f 7f       	andi	r23, 0xFF	; 255
    8e10:	7f 7f       	andi	r23, 0xFF	; 255
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	80 80       	ld	r8, Z
    8e42:	80 80       	ld	r8, Z
    8e44:	80 80       	ld	r8, Z
    8e46:	80 80       	ld	r8, Z
    8e48:	80 80       	ld	r8, Z
    8e4a:	80 80       	ld	r8, Z
    8e4c:	80 80       	ld	r8, Z
    8e4e:	80 80       	ld	r8, Z
    8e50:	80 80       	ld	r8, Z
    8e52:	80 80       	ld	r8, Z
    8e54:	80 80       	ld	r8, Z
    8e56:	80 80       	ld	r8, Z
    8e58:	80 80       	ld	r8, Z
    8e5a:	80 80       	ld	r8, Z
    8e5c:	80 80       	ld	r8, Z
    8e5e:	80 80       	ld	r8, Z
    8e60:	80 80       	ld	r8, Z
    8e62:	80 80       	ld	r8, Z
    8e64:	80 80       	ld	r8, Z
    8e66:	80 80       	ld	r8, Z
    8e68:	80 80       	ld	r8, Z
    8e6a:	80 80       	ld	r8, Z
    8e6c:	80 80       	ld	r8, Z
    8e6e:	80 80       	ld	r8, Z
    8e70:	80 80       	ld	r8, Z
    8e72:	80 80       	ld	r8, Z
    8e74:	80 80       	ld	r8, Z
    8e76:	80 80       	ld	r8, Z
    8e78:	80 80       	ld	r8, Z
    8e7a:	80 80       	ld	r8, Z
    8e7c:	80 80       	ld	r8, Z
    8e7e:	80 80       	ld	r8, Z
    8e80:	80 80       	ld	r8, Z
    8e82:	80 80       	ld	r8, Z
    8e84:	80 80       	ld	r8, Z
    8e86:	80 80       	ld	r8, Z
    8e88:	80 80       	ld	r8, Z
    8e8a:	80 80       	ld	r8, Z
    8e8c:	80 80       	ld	r8, Z
    8e8e:	80 80       	ld	r8, Z
    8e90:	80 80       	ld	r8, Z
    8e92:	80 80       	ld	r8, Z
    8e94:	80 80       	ld	r8, Z
    8e96:	80 80       	ld	r8, Z
    8e98:	80 80       	ld	r8, Z
    8e9a:	80 80       	ld	r8, Z
    8e9c:	80 80       	ld	r8, Z
    8e9e:	80 80       	ld	r8, Z
    8ea0:	80 80       	ld	r8, Z
    8ea2:	80 80       	ld	r8, Z
    8ea4:	80 80       	ld	r8, Z
    8ea6:	80 80       	ld	r8, Z
    8ea8:	80 80       	ld	r8, Z
    8eaa:	80 80       	ld	r8, Z
    8eac:	80 80       	ld	r8, Z
    8eae:	80 80       	ld	r8, Z
    8eb0:	80 80       	ld	r8, Z
    8eb2:	80 80       	ld	r8, Z
    8eb4:	80 80       	ld	r8, Z
    8eb6:	80 80       	ld	r8, Z
    8eb8:	80 80       	ld	r8, Z
    8eba:	80 80       	ld	r8, Z
    8ebc:	80 80       	ld	r8, Z
    8ebe:	80 80       	ld	r8, Z
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 80       	ld	r8, Z
    8ef6:	80 80       	ld	r8, Z
    8ef8:	80 80       	ld	r8, Z
    8efa:	80 80       	ld	r8, Z
    8efc:	80 80       	ld	r8, Z
    8efe:	80 80       	ld	r8, Z
    8f00:	7f 7f       	andi	r23, 0xFF	; 255
    8f02:	7f 7f       	andi	r23, 0xFF	; 255
    8f04:	7f 7f       	andi	r23, 0xFF	; 255
    8f06:	7f 7f       	andi	r23, 0xFF	; 255
    8f08:	7f 7f       	andi	r23, 0xFF	; 255
    8f0a:	7f 7f       	andi	r23, 0xFF	; 255
    8f0c:	7f 7f       	andi	r23, 0xFF	; 255
    8f0e:	7f 7f       	andi	r23, 0xFF	; 255
    8f10:	7f 7f       	andi	r23, 0xFF	; 255
    8f12:	7f 7f       	andi	r23, 0xFF	; 255
    8f14:	7f 7f       	andi	r23, 0xFF	; 255
    8f16:	7f 7f       	andi	r23, 0xFF	; 255
    8f18:	7f 7f       	andi	r23, 0xFF	; 255
    8f1a:	7f 7f       	andi	r23, 0xFF	; 255
    8f1c:	7f 7f       	andi	r23, 0xFF	; 255
    8f1e:	7f 7f       	andi	r23, 0xFF	; 255
    8f20:	7f 7f       	andi	r23, 0xFF	; 255
    8f22:	7f 7f       	andi	r23, 0xFF	; 255
    8f24:	7f 7f       	andi	r23, 0xFF	; 255
    8f26:	7f 7f       	andi	r23, 0xFF	; 255
    8f28:	7f 7f       	andi	r23, 0xFF	; 255
    8f2a:	7f 7f       	andi	r23, 0xFF	; 255
    8f2c:	7f 7f       	andi	r23, 0xFF	; 255
    8f2e:	7f 7f       	andi	r23, 0xFF	; 255
    8f30:	7f 7f       	andi	r23, 0xFF	; 255
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7f 7f       	andi	r23, 0xFF	; 255
    8f46:	7f 7f       	andi	r23, 0xFF	; 255
    8f48:	7f 7f       	andi	r23, 0xFF	; 255
    8f4a:	7f 7f       	andi	r23, 0xFF	; 255
    8f4c:	7f 7f       	andi	r23, 0xFF	; 255
    8f4e:	7f 7f       	andi	r23, 0xFF	; 255
    8f50:	7f 7f       	andi	r23, 0xFF	; 255
    8f52:	7f 7f       	andi	r23, 0xFF	; 255
    8f54:	7f 7f       	andi	r23, 0xFF	; 255
    8f56:	7f 7f       	andi	r23, 0xFF	; 255
    8f58:	7f 7f       	andi	r23, 0xFF	; 255
    8f5a:	7f 7f       	andi	r23, 0xFF	; 255
    8f5c:	7f 7f       	andi	r23, 0xFF	; 255
    8f5e:	7f 7f       	andi	r23, 0xFF	; 255
    8f60:	7f 7f       	andi	r23, 0xFF	; 255
    8f62:	7f 7f       	andi	r23, 0xFF	; 255
    8f64:	7f 7f       	andi	r23, 0xFF	; 255
    8f66:	7f 7f       	andi	r23, 0xFF	; 255
    8f68:	7f 7f       	andi	r23, 0xFF	; 255
    8f6a:	7f 7f       	andi	r23, 0xFF	; 255
    8f6c:	7f 7f       	andi	r23, 0xFF	; 255
    8f6e:	7f 7f       	andi	r23, 0xFF	; 255
    8f70:	7f 7f       	andi	r23, 0xFF	; 255
    8f72:	7f 7f       	andi	r23, 0xFF	; 255
    8f74:	7f 7f       	andi	r23, 0xFF	; 255
    8f76:	7f 7f       	andi	r23, 0xFF	; 255
    8f78:	7f 7f       	andi	r23, 0xFF	; 255
    8f7a:	7f 7f       	andi	r23, 0xFF	; 255
    8f7c:	7f 7f       	andi	r23, 0xFF	; 255
    8f7e:	7f 7f       	andi	r23, 0xFF	; 255
    8f80:	80 80       	ld	r8, Z
    8f82:	80 80       	ld	r8, Z
    8f84:	80 80       	ld	r8, Z
    8f86:	80 80       	ld	r8, Z
    8f88:	80 80       	ld	r8, Z
    8f8a:	80 80       	ld	r8, Z
    8f8c:	80 80       	ld	r8, Z
    8f8e:	80 80       	ld	r8, Z
    8f90:	80 80       	ld	r8, Z
    8f92:	80 80       	ld	r8, Z
    8f94:	80 80       	ld	r8, Z
    8f96:	80 80       	ld	r8, Z
    8f98:	80 80       	ld	r8, Z
    8f9a:	80 80       	ld	r8, Z
    8f9c:	80 80       	ld	r8, Z
    8f9e:	80 80       	ld	r8, Z
    8fa0:	80 80       	ld	r8, Z
    8fa2:	80 80       	ld	r8, Z
    8fa4:	80 80       	ld	r8, Z
    8fa6:	80 80       	ld	r8, Z
    8fa8:	80 80       	ld	r8, Z
    8faa:	80 80       	ld	r8, Z
    8fac:	80 80       	ld	r8, Z
    8fae:	80 80       	ld	r8, Z
    8fb0:	80 80       	ld	r8, Z
    8fb2:	80 80       	ld	r8, Z
    8fb4:	80 80       	ld	r8, Z
    8fb6:	80 80       	ld	r8, Z
    8fb8:	80 80       	ld	r8, Z
    8fba:	80 80       	ld	r8, Z
    8fbc:	80 80       	ld	r8, Z
    8fbe:	80 80       	ld	r8, Z
    8fc0:	80 80       	ld	r8, Z
    8fc2:	80 80       	ld	r8, Z
    8fc4:	80 80       	ld	r8, Z
    8fc6:	80 80       	ld	r8, Z
    8fc8:	80 80       	ld	r8, Z
    8fca:	80 80       	ld	r8, Z
    8fcc:	80 80       	ld	r8, Z
    8fce:	80 80       	ld	r8, Z
    8fd0:	80 80       	ld	r8, Z
    8fd2:	80 80       	ld	r8, Z
    8fd4:	80 80       	ld	r8, Z
    8fd6:	80 80       	ld	r8, Z
    8fd8:	80 80       	ld	r8, Z
    8fda:	80 80       	ld	r8, Z
    8fdc:	80 80       	ld	r8, Z
    8fde:	80 80       	ld	r8, Z
    8fe0:	80 80       	ld	r8, Z
    8fe2:	80 80       	ld	r8, Z
    8fe4:	80 80       	ld	r8, Z
    8fe6:	80 80       	ld	r8, Z
    8fe8:	80 80       	ld	r8, Z
    8fea:	80 80       	ld	r8, Z
    8fec:	80 80       	ld	r8, Z
    8fee:	80 80       	ld	r8, Z
    8ff0:	80 80       	ld	r8, Z
    8ff2:	80 80       	ld	r8, Z
    8ff4:	80 80       	ld	r8, Z
    8ff6:	80 80       	ld	r8, Z
    8ff8:	80 80       	ld	r8, Z
    8ffa:	80 80       	ld	r8, Z
    8ffc:	80 80       	ld	r8, Z
    8ffe:	80 80       	ld	r8, Z
    9000:	7f 7f       	andi	r23, 0xFF	; 255
    9002:	7f 7f       	andi	r23, 0xFF	; 255
    9004:	7f 7f       	andi	r23, 0xFF	; 255
    9006:	7f 7f       	andi	r23, 0xFF	; 255
    9008:	7f 7f       	andi	r23, 0xFF	; 255
    900a:	7f 7f       	andi	r23, 0xFF	; 255
    900c:	7f 7f       	andi	r23, 0xFF	; 255
    900e:	7f 7f       	andi	r23, 0xFF	; 255
    9010:	7f 7f       	andi	r23, 0xFF	; 255
    9012:	7f 7f       	andi	r23, 0xFF	; 255
    9014:	7f 7f       	andi	r23, 0xFF	; 255
    9016:	7f 7f       	andi	r23, 0xFF	; 255
    9018:	7f 7f       	andi	r23, 0xFF	; 255
    901a:	7f 7f       	andi	r23, 0xFF	; 255
    901c:	7f 7f       	andi	r23, 0xFF	; 255
    901e:	7f 7f       	andi	r23, 0xFF	; 255
    9020:	7f 7f       	andi	r23, 0xFF	; 255
    9022:	7f 7f       	andi	r23, 0xFF	; 255
    9024:	7f 7f       	andi	r23, 0xFF	; 255
    9026:	7f 7f       	andi	r23, 0xFF	; 255
    9028:	7f 7f       	andi	r23, 0xFF	; 255
    902a:	7f 7f       	andi	r23, 0xFF	; 255
    902c:	7f 7f       	andi	r23, 0xFF	; 255
    902e:	7f 7f       	andi	r23, 0xFF	; 255
    9030:	7f 7f       	andi	r23, 0xFF	; 255
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7f 7f       	andi	r23, 0xFF	; 255
    9046:	7f 7f       	andi	r23, 0xFF	; 255
    9048:	7f 7f       	andi	r23, 0xFF	; 255
    904a:	7f 7f       	andi	r23, 0xFF	; 255
    904c:	7f 7f       	andi	r23, 0xFF	; 255
    904e:	7f 7f       	andi	r23, 0xFF	; 255
    9050:	7f 7f       	andi	r23, 0xFF	; 255
    9052:	7f 7f       	andi	r23, 0xFF	; 255
    9054:	7f 7f       	andi	r23, 0xFF	; 255
    9056:	7f 7f       	andi	r23, 0xFF	; 255
    9058:	7f 7f       	andi	r23, 0xFF	; 255
    905a:	7f 7f       	andi	r23, 0xFF	; 255
    905c:	7f 7f       	andi	r23, 0xFF	; 255
    905e:	7f 7f       	andi	r23, 0xFF	; 255
    9060:	7f 7f       	andi	r23, 0xFF	; 255
    9062:	7f 7f       	andi	r23, 0xFF	; 255
    9064:	7f 7f       	andi	r23, 0xFF	; 255
    9066:	7f 7f       	andi	r23, 0xFF	; 255
    9068:	7f 7f       	andi	r23, 0xFF	; 255
    906a:	7f 7f       	andi	r23, 0xFF	; 255
    906c:	7f 7f       	andi	r23, 0xFF	; 255
    906e:	7f 7f       	andi	r23, 0xFF	; 255
    9070:	7f 7f       	andi	r23, 0xFF	; 255
    9072:	7f 7f       	andi	r23, 0xFF	; 255
    9074:	7f 7f       	andi	r23, 0xFF	; 255
    9076:	7f 7f       	andi	r23, 0xFF	; 255
    9078:	7f 7f       	andi	r23, 0xFF	; 255
    907a:	7f 7f       	andi	r23, 0xFF	; 255
    907c:	7f 7f       	andi	r23, 0xFF	; 255
    907e:	7f 7f       	andi	r23, 0xFF	; 255
    9080:	7f 7f       	andi	r23, 0xFF	; 255
    9082:	7f 7f       	andi	r23, 0xFF	; 255
    9084:	7f 7f       	andi	r23, 0xFF	; 255
    9086:	7f 7f       	andi	r23, 0xFF	; 255
    9088:	7f 7f       	andi	r23, 0xFF	; 255
    908a:	7f 7f       	andi	r23, 0xFF	; 255
    908c:	7f 7f       	andi	r23, 0xFF	; 255
    908e:	7f 7f       	andi	r23, 0xFF	; 255
    9090:	7f 7f       	andi	r23, 0xFF	; 255
    9092:	7f 7f       	andi	r23, 0xFF	; 255
    9094:	7f 7f       	andi	r23, 0xFF	; 255
    9096:	7f 7f       	andi	r23, 0xFF	; 255
    9098:	7f 7f       	andi	r23, 0xFF	; 255
    909a:	7f 7f       	andi	r23, 0xFF	; 255
    909c:	7f 7f       	andi	r23, 0xFF	; 255
    909e:	7f 7f       	andi	r23, 0xFF	; 255
    90a0:	7f 7f       	andi	r23, 0xFF	; 255
    90a2:	7f 7f       	andi	r23, 0xFF	; 255
    90a4:	7f 7f       	andi	r23, 0xFF	; 255
    90a6:	7f 7f       	andi	r23, 0xFF	; 255
    90a8:	7f 7f       	andi	r23, 0xFF	; 255
    90aa:	7f 7f       	andi	r23, 0xFF	; 255
    90ac:	7f 7f       	andi	r23, 0xFF	; 255
    90ae:	7f 7f       	andi	r23, 0xFF	; 255
    90b0:	7f 7f       	andi	r23, 0xFF	; 255
    90b2:	7f 7f       	andi	r23, 0xFF	; 255
    90b4:	7f 7f       	andi	r23, 0xFF	; 255
    90b6:	7f 7f       	andi	r23, 0xFF	; 255
    90b8:	7f 7f       	andi	r23, 0xFF	; 255
    90ba:	7f 7f       	andi	r23, 0xFF	; 255
    90bc:	7f 7f       	andi	r23, 0xFF	; 255
    90be:	7f 7f       	andi	r23, 0xFF	; 255
    90c0:	80 80       	ld	r8, Z
    90c2:	80 80       	ld	r8, Z
    90c4:	80 80       	ld	r8, Z
    90c6:	80 80       	ld	r8, Z
    90c8:	80 80       	ld	r8, Z
    90ca:	80 80       	ld	r8, Z
    90cc:	80 80       	ld	r8, Z
    90ce:	80 80       	ld	r8, Z
    90d0:	80 80       	ld	r8, Z
    90d2:	80 80       	ld	r8, Z
    90d4:	80 80       	ld	r8, Z
    90d6:	80 80       	ld	r8, Z
    90d8:	80 80       	ld	r8, Z
    90da:	80 80       	ld	r8, Z
    90dc:	80 80       	ld	r8, Z
    90de:	80 80       	ld	r8, Z
    90e0:	80 80       	ld	r8, Z
    90e2:	80 80       	ld	r8, Z
    90e4:	80 80       	ld	r8, Z
    90e6:	80 80       	ld	r8, Z
    90e8:	80 80       	ld	r8, Z
    90ea:	80 80       	ld	r8, Z
    90ec:	80 80       	ld	r8, Z
    90ee:	80 80       	ld	r8, Z
    90f0:	80 80       	ld	r8, Z
    90f2:	80 80       	ld	r8, Z
    90f4:	80 80       	ld	r8, Z
    90f6:	80 80       	ld	r8, Z
    90f8:	80 80       	ld	r8, Z
    90fa:	80 80       	ld	r8, Z
    90fc:	80 80       	ld	r8, Z
    90fe:	80 80       	ld	r8, Z
    9100:	03 09       	sbc	r16, r3
    9102:	13 1e       	adc	r1, r19
    9104:	28 31       	cpi	r18, 0x18	; 24
    9106:	3a 40       	sbci	r19, 0x0A	; 10
    9108:	46 4c       	sbci	r20, 0xC6	; 198
    910a:	50 54       	subi	r21, 0x40	; 64
    910c:	58 5b       	subi	r21, 0xB8	; 184
    910e:	5e 61       	ori	r21, 0x1E	; 30
    9110:	63 65       	ori	r22, 0x53	; 83
    9112:	67 69       	ori	r22, 0x97	; 151
    9114:	6b 6c       	ori	r22, 0xCB	; 203
    9116:	6e 6f       	ori	r22, 0xFE	; 254
    9118:	70 71       	andi	r23, 0x10	; 16
    911a:	72 73       	andi	r23, 0x32	; 50
    911c:	74 75       	andi	r23, 0x54	; 84
    911e:	76 77       	andi	r23, 0x76	; 118
    9120:	77 78       	andi	r23, 0x87	; 135
    9122:	79 79       	andi	r23, 0x99	; 153
    9124:	7a 7a       	andi	r23, 0xAA	; 170
    9126:	7b 7b       	andi	r23, 0xBB	; 187
    9128:	7c 7c       	andi	r23, 0xCC	; 204
    912a:	7c 7d       	andi	r23, 0xDC	; 220
    912c:	7d 7d       	andi	r23, 0xDD	; 221
    912e:	7e 7e       	andi	r23, 0xEE	; 238
    9130:	7e 7e       	andi	r23, 0xEE	; 238
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7f 7f       	andi	r23, 0xFF	; 255
    9148:	7f 7f       	andi	r23, 0xFF	; 255
    914a:	7f 7f       	andi	r23, 0xFF	; 255
    914c:	7f 7e       	andi	r23, 0xEF	; 239
    914e:	7e 7e       	andi	r23, 0xEE	; 238
    9150:	7e 7d       	andi	r23, 0xDE	; 222
    9152:	7d 7d       	andi	r23, 0xDD	; 221
    9154:	7c 7c       	andi	r23, 0xCC	; 204
    9156:	7c 7b       	andi	r23, 0xBC	; 188
    9158:	7b 7a       	andi	r23, 0xAB	; 171
    915a:	7a 79       	andi	r23, 0x9A	; 154
    915c:	79 78       	andi	r23, 0x89	; 137
    915e:	77 77       	andi	r23, 0x77	; 119
    9160:	76 75       	andi	r23, 0x56	; 86
    9162:	74 73       	andi	r23, 0x34	; 52
    9164:	72 71       	andi	r23, 0x12	; 18
    9166:	70 6f       	ori	r23, 0xF0	; 240
    9168:	6e 6c       	ori	r22, 0xCE	; 206
    916a:	6b 69       	ori	r22, 0x9B	; 155
    916c:	67 65       	ori	r22, 0x57	; 87
    916e:	63 61       	ori	r22, 0x13	; 19
    9170:	5e 5b       	subi	r21, 0xBE	; 190
    9172:	58 54       	subi	r21, 0x48	; 72
    9174:	50 4c       	sbci	r21, 0xC0	; 192
    9176:	46 40       	sbci	r20, 0x06	; 6
    9178:	3a 31       	cpi	r19, 0x1A	; 26
    917a:	28 1e       	adc	r2, r24
    917c:	13 09       	sbc	r17, r3
    917e:	03 00       	.word	0x0003	; ????
    9180:	c6 cc       	rjmp	.-1652   	; 0x8b0e <waves+0xe>
    9182:	d5 db       	rcall	.-2134   	; 0x892e <steptable+0x26>
    9184:	df e3       	ldi	r29, 0x3F	; 63
    9186:	e5 e7       	ldi	r30, 0x75	; 117
    9188:	e9 ea       	ldi	r30, 0xA9	; 169
    918a:	eb ec       	ldi	r30, 0xCB	; 203
    918c:	ed ee       	ldi	r30, 0xED	; 237
    918e:	ef ef       	ldi	r30, 0xFF	; 255
    9190:	f0 f0       	brcs	.+60     	; 0x91ce <waves+0x6ce>
    9192:	f0 f1       	brcs	.+124    	; 0x9210 <waves+0x710>
    9194:	f1 f1       	breq	.+124    	; 0x9212 <waves+0x712>
    9196:	f1 f2       	breq	.-68     	; 0x9154 <waves+0x654>
    9198:	f2 f2       	brmi	.-68     	; 0x9156 <waves+0x656>
    919a:	f2 f2       	brmi	.-68     	; 0x9158 <waves+0x658>
    919c:	f2 f2       	brmi	.-68     	; 0x915a <waves+0x65a>
    919e:	f2 f3       	brmi	.-4      	; 0x919c <waves+0x69c>
    91a0:	f3 f3       	brvs	.-4      	; 0x919e <waves+0x69e>
    91a2:	f3 f3       	brvs	.-4      	; 0x91a0 <waves+0x6a0>
    91a4:	f3 f3       	brvs	.-4      	; 0x91a2 <waves+0x6a2>
    91a6:	f3 f3       	brvs	.-4      	; 0x91a4 <waves+0x6a4>
    91a8:	f3 f3       	brvs	.-4      	; 0x91a6 <waves+0x6a6>
    91aa:	f3 f3       	brvs	.-4      	; 0x91a8 <waves+0x6a8>
    91ac:	f3 f3       	brvs	.-4      	; 0x91aa <waves+0x6aa>
    91ae:	f3 f3       	brvs	.-4      	; 0x91ac <waves+0x6ac>
    91b0:	f3 f3       	brvs	.-4      	; 0x91ae <waves+0x6ae>
    91b2:	f3 f3       	brvs	.-4      	; 0x91b0 <waves+0x6b0>
    91b4:	f3 f3       	brvs	.-4      	; 0x91b2 <waves+0x6b2>
    91b6:	f3 f3       	brvs	.-4      	; 0x91b4 <waves+0x6b4>
    91b8:	f3 f3       	brvs	.-4      	; 0x91b6 <waves+0x6b6>
    91ba:	f3 f3       	brvs	.-4      	; 0x91b8 <waves+0x6b8>
    91bc:	f3 f3       	brvs	.-4      	; 0x91ba <waves+0x6ba>
    91be:	f3 f3       	brvs	.-4      	; 0x91bc <waves+0x6bc>
    91c0:	f3 f3       	brvs	.-4      	; 0x91be <waves+0x6be>
    91c2:	f3 f3       	brvs	.-4      	; 0x91c0 <waves+0x6c0>
    91c4:	f3 f3       	brvs	.-4      	; 0x91c2 <waves+0x6c2>
    91c6:	f3 f3       	brvs	.-4      	; 0x91c4 <waves+0x6c4>
    91c8:	f3 f3       	brvs	.-4      	; 0x91c6 <waves+0x6c6>
    91ca:	f3 f3       	brvs	.-4      	; 0x91c8 <waves+0x6c8>
    91cc:	f3 f3       	brvs	.-4      	; 0x91ca <waves+0x6ca>
    91ce:	f3 f3       	brvs	.-4      	; 0x91cc <waves+0x6cc>
    91d0:	f3 f3       	brvs	.-4      	; 0x91ce <waves+0x6ce>
    91d2:	f3 f3       	brvs	.-4      	; 0x91d0 <waves+0x6d0>
    91d4:	f3 f3       	brvs	.-4      	; 0x91d2 <waves+0x6d2>
    91d6:	f3 f3       	brvs	.-4      	; 0x91d4 <waves+0x6d4>
    91d8:	f3 f3       	brvs	.-4      	; 0x91d6 <waves+0x6d6>
    91da:	f3 f3       	brvs	.-4      	; 0x91d8 <waves+0x6d8>
    91dc:	f3 f3       	brvs	.-4      	; 0x91da <waves+0x6da>
    91de:	f3 f3       	brvs	.-4      	; 0x91dc <waves+0x6dc>
    91e0:	f2 f2       	brmi	.-68     	; 0x919e <waves+0x69e>
    91e2:	f2 f2       	brmi	.-68     	; 0x91a0 <waves+0x6a0>
    91e4:	f2 f2       	brmi	.-68     	; 0x91a2 <waves+0x6a2>
    91e6:	f2 f2       	brmi	.-68     	; 0x91a4 <waves+0x6a4>
    91e8:	f1 f1       	breq	.+124    	; 0x9266 <waves+0x766>
    91ea:	f1 f1       	breq	.+124    	; 0x9268 <waves+0x768>
    91ec:	f0 f0       	brcs	.+60     	; 0x922a <waves+0x72a>
    91ee:	f0 ef       	ldi	r31, 0xF0	; 240
    91f0:	ef ee       	ldi	r30, 0xEF	; 239
    91f2:	ed ec       	ldi	r30, 0xCD	; 205
    91f4:	eb ea       	ldi	r30, 0xAB	; 171
    91f6:	e9 e7       	ldi	r30, 0x79	; 121
    91f8:	e5 e3       	ldi	r30, 0x35	; 53
    91fa:	df db       	rcall	.-2114   	; 0x89ba <steptable+0xb2>
    91fc:	d5 cc       	rjmp	.-1622   	; 0x8ba8 <waves+0xa8>
    91fe:	c6 00       	.word	0x00c6	; ????
    9200:	00 28       	or	r0, r0
    9202:	3d 42       	sbci	r19, 0x2D	; 45
    9204:	30 2d       	mov	r19, r0
    9206:	2c 2b       	or	r18, r28
    9208:	2c 2d       	mov	r18, r12
    920a:	2e 2f       	mov	r18, r30
    920c:	30 32       	cpi	r19, 0x20	; 32
    920e:	33 35       	cpi	r19, 0x53	; 83
    9210:	37 39       	cpi	r19, 0x97	; 151
    9212:	3b 3d       	cpi	r19, 0xDB	; 219
    9214:	3f 41       	sbci	r19, 0x1F	; 31
    9216:	43 45       	sbci	r20, 0x53	; 83
    9218:	48 4a       	sbci	r20, 0xA8	; 168
    921a:	4c 4e       	sbci	r20, 0xEC	; 236
    921c:	50 53       	subi	r21, 0x30	; 48
    921e:	55 57       	subi	r21, 0x75	; 117
    9220:	59 5b       	subi	r21, 0xB9	; 185
    9222:	5d 5f       	subi	r21, 0xFD	; 253
    9224:	61 63       	ori	r22, 0x31	; 49
    9226:	65 67       	ori	r22, 0x75	; 117
    9228:	69 6b       	ori	r22, 0xB9	; 185
    922a:	6c 6e       	ori	r22, 0xEC	; 236
    922c:	70 71       	andi	r23, 0x10	; 16
    922e:	73 74       	andi	r23, 0x43	; 67
    9230:	75 77       	andi	r23, 0x75	; 117
    9232:	78 79       	andi	r23, 0x98	; 152
    9234:	7a 7b       	andi	r23, 0xBA	; 186
    9236:	7c 7d       	andi	r23, 0xDC	; 220
    9238:	7d 7e       	andi	r23, 0xED	; 237
    923a:	7e 7f       	andi	r23, 0xFE	; 254
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7e 7e       	andi	r23, 0xEE	; 238
    9248:	7d 7d       	andi	r23, 0xDD	; 221
    924a:	7c 7b       	andi	r23, 0xBC	; 188
    924c:	7a 79       	andi	r23, 0x9A	; 154
    924e:	78 77       	andi	r23, 0x78	; 120
    9250:	75 74       	andi	r23, 0x45	; 69
    9252:	73 71       	andi	r23, 0x13	; 19
    9254:	70 6e       	ori	r23, 0xE0	; 224
    9256:	6c 6b       	ori	r22, 0xBC	; 188
    9258:	69 67       	ori	r22, 0x79	; 121
    925a:	65 63       	ori	r22, 0x35	; 53
    925c:	61 5f       	subi	r22, 0xF1	; 241
    925e:	5d 5b       	subi	r21, 0xBD	; 189
    9260:	59 57       	subi	r21, 0x79	; 121
    9262:	55 53       	subi	r21, 0x35	; 53
    9264:	50 4e       	sbci	r21, 0xE0	; 224
    9266:	4c 4a       	sbci	r20, 0xAC	; 172
    9268:	48 45       	sbci	r20, 0x58	; 88
    926a:	43 41       	sbci	r20, 0x13	; 19
    926c:	3f 3d       	cpi	r19, 0xDF	; 223
    926e:	3b 39       	cpi	r19, 0x9B	; 155
    9270:	37 35       	cpi	r19, 0x57	; 87
    9272:	33 32       	cpi	r19, 0x23	; 35
    9274:	30 2f       	mov	r19, r16
    9276:	2e 2d       	mov	r18, r14
    9278:	2c 2b       	or	r18, r28
    927a:	2c 2d       	mov	r18, r12
    927c:	30 42       	sbci	r19, 0x20	; 32
    927e:	3d 28       	or	r3, r13
    9280:	00 e9       	ldi	r16, 0x90	; 144
    9282:	e5 fe       	sbrs	r14, 5
    9284:	d4 d7       	rcall	.+4008   	; 0xa22e <init_boss_shot+0x12>
    9286:	d7 d7       	rcall	.+4014   	; 0xa236 <init_boss_shot+0x1a>
    9288:	d6 d4       	rcall	.+2476   	; 0x9c36 <LBMapSprite+0x3a>
    928a:	d2 d0       	rcall	.+420    	; 0x9430 <waves+0x930>
    928c:	ce cc       	rjmp	.-1636   	; 0x8c2a <waves+0x12a>
    928e:	ca c8       	rjmp	.-3692   	; 0x8424 <TriggerNote+0x6e>
    9290:	c6 c3       	rjmp	.+1932   	; 0x9a1e <LBPrintChar+0xc>
    9292:	c1 bf       	out	0x31, r28	; 49
    9294:	bd ba       	out	0x1d, r11	; 29
    9296:	b8 b6       	in	r11, 0x38	; 56
    9298:	b4 b1       	in	r27, 0x04	; 4
    929a:	af ad       	ldd	r26, Y+63	; 0x3f
    929c:	ab a9       	ldd	r26, Y+51	; 0x33
    929e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    92a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    92a2:	9f 9e       	mul	r9, r31
    92a4:	9c 9a       	sbi	0x13, 4	; 19
    92a6:	99 97       	sbiw	r26, 0x29	; 41
    92a8:	95 94       	asr	r9
    92aa:	93 91       	.word	0x9193	; ????
    92ac:	90 8f       	std	Z+24, r25	; 0x18
    92ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    92b0:	8b 8a       	std	Y+19, r8	; 0x13
    92b2:	89 88       	ldd	r8, Y+17	; 0x11
    92b4:	88 87       	std	Y+8, r24	; 0x08
    92b6:	86 85       	ldd	r24, Z+14	; 0x0e
    92b8:	85 84       	ldd	r8, Z+13	; 0x0d
    92ba:	84 84       	ldd	r8, Z+12	; 0x0c
    92bc:	83 83       	std	Z+3, r24	; 0x03
    92be:	83 83       	std	Z+3, r24	; 0x03
    92c0:	83 83       	std	Z+3, r24	; 0x03
    92c2:	83 83       	std	Z+3, r24	; 0x03
    92c4:	83 84       	ldd	r8, Z+11	; 0x0b
    92c6:	84 84       	ldd	r8, Z+12	; 0x0c
    92c8:	85 85       	ldd	r24, Z+13	; 0x0d
    92ca:	86 87       	std	Z+14, r24	; 0x0e
    92cc:	88 88       	ldd	r8, Y+16	; 0x10
    92ce:	89 8a       	std	Y+17, r8	; 0x11
    92d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    92d2:	8d 8f       	std	Y+29, r24	; 0x1d
    92d4:	90 91 93 94 	lds	r25, 0x9493
    92d8:	95 97       	sbiw	r26, 0x25	; 37
    92da:	99 9a       	sbi	0x13, 1	; 19
    92dc:	9c 9e       	mul	r9, r28
    92de:	9f a1       	ldd	r25, Y+39	; 0x27
    92e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    92e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    92e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    92e6:	af b1       	in	r26, 0x0f	; 15
    92e8:	b4 b6       	in	r11, 0x34	; 52
    92ea:	b8 ba       	out	0x18, r11	; 24
    92ec:	bd bf       	out	0x3d, r27	; 61
    92ee:	c1 c3       	rjmp	.+1922   	; 0x9a72 <LBPrint+0x20>
    92f0:	c6 c8       	rjmp	.-3700   	; 0x847e <ProcessMusic+0x48>
    92f2:	ca cc       	rjmp	.-1644   	; 0x8c88 <waves+0x188>
    92f4:	ce d0       	rcall	.+412    	; 0x9492 <waves+0x992>
    92f6:	d2 d4       	rcall	.+2468   	; 0x9c9c <LBMapSprite+0xa0>
    92f8:	d6 d7       	rcall	.+4012   	; 0xa2a6 <init_boss_shot+0x8a>
    92fa:	d7 d7       	rcall	.+4014   	; 0xa2aa <init_boss_shot+0x8e>
    92fc:	d4 fe       	sbrs	r13, 4
    92fe:	e5 e9       	ldi	r30, 0x95	; 149
    9300:	f9 f8       	.word	0xf8f9	; ????
    9302:	f9 f5       	brne	.+126    	; 0x9382 <waves+0x882>
    9304:	eb e1       	ldi	r30, 0x1B	; 27
    9306:	dd de       	rcall	.-582    	; 0x90c2 <waves+0x5c2>
    9308:	e0 e2       	ldi	r30, 0x20	; 32
    930a:	e4 e5       	ldi	r30, 0x54	; 84
    930c:	e6 e5       	ldi	r30, 0x56	; 86
    930e:	e4 e2       	ldi	r30, 0x24	; 36
    9310:	de d9       	rcall	.-3140   	; 0x86ce <ProcessMusic+0x298>
    9312:	d2 ca       	rjmp	.-2652   	; 0x88b8 <SetMixerWave+0xa>
    9314:	c1 b7       	in	r28, 0x31	; 49
    9316:	ac a2       	std	Y+36, r10	; 0x24
    9318:	99 91       	ld	r25, Y+
    931a:	8a 86       	std	Y+10, r8	; 0x0a
    931c:	83 81       	ldd	r24, Z+3	; 0x03
    931e:	80 80       	ld	r8, Z
    9320:	81 82       	std	Z+1, r8	; 0x01
    9322:	83 85       	ldd	r24, Z+11	; 0x0b
    9324:	86 88       	ldd	r8, Z+22	; 0x16
    9326:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9328:	8d 8f       	std	Y+29, r24	; 0x1d
    932a:	90 92 93 95 	sts	0x9593, r9
    932e:	96 97       	sbiw	r26, 0x26	; 38
    9330:	98 99       	sbic	0x13, 0	; 19
    9332:	9a 9b       	sbis	0x13, 2	; 19
    9334:	9b 9c       	mul	r9, r11
    9336:	9d 9d       	mul	r25, r13
    9338:	9d 9e       	mul	r9, r29
    933a:	9e 9e       	mul	r9, r30
    933c:	9f 9f       	mul	r25, r31
    933e:	9f 9f       	mul	r25, r31
    9340:	9f 9f       	mul	r25, r31
    9342:	9f 9e       	mul	r9, r31
    9344:	9e 9e       	mul	r9, r30
    9346:	9d 9d       	mul	r25, r13
    9348:	9d 9c       	mul	r9, r13
    934a:	9b 9b       	sbis	0x13, 3	; 19
    934c:	9a 99       	sbic	0x13, 2	; 19
    934e:	98 97       	sbiw	r26, 0x28	; 40
    9350:	96 95       	lsr	r25
    9352:	93 92       	.word	0x9293	; ????
    9354:	90 8f       	std	Z+24, r25	; 0x18
    9356:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9358:	8a 88       	ldd	r8, Y+18	; 0x12
    935a:	86 85       	ldd	r24, Z+14	; 0x0e
    935c:	83 82       	std	Z+3, r8	; 0x03
    935e:	81 80       	ldd	r8, Z+1	; 0x01
    9360:	80 81       	ld	r24, Z
    9362:	83 86       	std	Z+11, r8	; 0x0b
    9364:	8a 91       	ld	r24, -Y
    9366:	99 a2       	std	Y+33, r9	; 0x21
    9368:	ac b7       	in	r26, 0x3c	; 60
    936a:	c1 ca       	rjmp	.-2686   	; 0x88ee <esmw+0xa>
    936c:	d2 d9       	rcall	.-3164   	; 0x8712 <ProcessMusic+0x2dc>
    936e:	de e2       	ldi	r29, 0x2E	; 46
    9370:	e4 e5       	ldi	r30, 0x54	; 84
    9372:	e6 e5       	ldi	r30, 0x56	; 86
    9374:	e4 e2       	ldi	r30, 0x24	; 36
    9376:	e0 de       	rcall	.-576    	; 0x9138 <waves+0x638>
    9378:	dd e1       	ldi	r29, 0x1D	; 29
    937a:	eb f5       	brvc	.+122    	; 0x93f6 <waves+0x8f6>
    937c:	f9 f8       	.word	0xf8f9	; ????
    937e:	f9 00       	.word	0x00f9	; ????
    9380:	07 08       	sbc	r0, r7
    9382:	07 0b       	sbc	r16, r23
    9384:	15 1f       	adc	r17, r21
    9386:	23 22       	and	r2, r19
    9388:	20 1e       	adc	r2, r16
    938a:	1c 1b       	sub	r17, r28
    938c:	1a 1b       	sub	r17, r26
    938e:	1c 1e       	adc	r1, r28
    9390:	22 27       	eor	r18, r18
    9392:	2e 36       	cpi	r18, 0x6E	; 110
    9394:	3f 49       	sbci	r19, 0x9F	; 159
    9396:	54 5e       	subi	r21, 0xE4	; 228
    9398:	67 6f       	ori	r22, 0xF7	; 247
    939a:	76 7a       	andi	r23, 0xA6	; 166
    939c:	7e 7f       	andi	r23, 0xFE	; 254
    939e:	7f 7f       	andi	r23, 0xFF	; 255
    93a0:	7f 7e       	andi	r23, 0xEF	; 239
    93a2:	7d 7b       	andi	r23, 0xBD	; 189
    93a4:	7a 78       	andi	r23, 0x8A	; 138
    93a6:	76 74       	andi	r23, 0x46	; 70
    93a8:	73 71       	andi	r23, 0x13	; 19
    93aa:	70 6e       	ori	r23, 0xE0	; 224
    93ac:	6d 6b       	ori	r22, 0xBD	; 189
    93ae:	6a 69       	ori	r22, 0x9A	; 154
    93b0:	68 67       	ori	r22, 0x78	; 120
    93b2:	66 65       	ori	r22, 0x56	; 86
    93b4:	65 64       	ori	r22, 0x45	; 69
    93b6:	64 63       	ori	r22, 0x34	; 52
    93b8:	63 62       	ori	r22, 0x23	; 35
    93ba:	62 62       	ori	r22, 0x22	; 34
    93bc:	61 61       	ori	r22, 0x11	; 17
    93be:	61 61       	ori	r22, 0x11	; 17
    93c0:	61 61       	ori	r22, 0x11	; 17
    93c2:	61 62       	ori	r22, 0x21	; 33
    93c4:	62 62       	ori	r22, 0x22	; 34
    93c6:	63 63       	ori	r22, 0x33	; 51
    93c8:	63 64       	ori	r22, 0x43	; 67
    93ca:	65 65       	ori	r22, 0x55	; 85
    93cc:	66 67       	ori	r22, 0x76	; 118
    93ce:	68 69       	ori	r22, 0x98	; 152
    93d0:	6a 6b       	ori	r22, 0xBA	; 186
    93d2:	6d 6e       	ori	r22, 0xED	; 237
    93d4:	70 71       	andi	r23, 0x10	; 16
    93d6:	73 74       	andi	r23, 0x43	; 67
    93d8:	76 78       	andi	r23, 0x86	; 134
    93da:	7a 7b       	andi	r23, 0xBA	; 186
    93dc:	7d 7e       	andi	r23, 0xED	; 237
    93de:	7f 7f       	andi	r23, 0xFF	; 255
    93e0:	7f 7f       	andi	r23, 0xFF	; 255
    93e2:	7e 7a       	andi	r23, 0xAE	; 174
    93e4:	76 6f       	ori	r23, 0xF6	; 246
    93e6:	67 5e       	subi	r22, 0xE7	; 231
    93e8:	54 49       	sbci	r21, 0x94	; 148
    93ea:	3f 36       	cpi	r19, 0x6F	; 111
    93ec:	2e 27       	eor	r18, r30
    93ee:	22 1e       	adc	r2, r18
    93f0:	1c 1b       	sub	r17, r28
    93f2:	1a 1b       	sub	r17, r26
    93f4:	1c 1e       	adc	r1, r28
    93f6:	20 22       	and	r2, r16
    93f8:	23 1f       	adc	r18, r19
    93fa:	15 0b       	sbc	r17, r21
    93fc:	07 08       	sbc	r0, r7
    93fe:	07 00       	.word	0x0007	; ????
    9400:	1f 31       	cpi	r17, 0x1F	; 31
    9402:	3d 44       	sbci	r19, 0x4D	; 77
    9404:	4e 53       	subi	r20, 0x3E	; 62
    9406:	54 56       	subi	r21, 0x64	; 100
    9408:	5a 5f       	subi	r21, 0xFA	; 250
    940a:	64 69       	ori	r22, 0x94	; 148
    940c:	6e 74       	andi	r22, 0x4E	; 78
    940e:	76 79       	andi	r23, 0x96	; 150
    9410:	7c 7f       	andi	r23, 0xFC	; 252
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7c       	andi	r23, 0xCF	; 207
    947c:	78 71       	andi	r23, 0x18	; 24
    947e:	68 4c       	sbci	r22, 0xC8	; 200
    9480:	2c 1c       	adc	r2, r12
    9482:	12 0c       	add	r1, r2
    9484:	0a 0b       	sbc	r16, r26
    9486:	0a 05       	cpc	r16, r10
    9488:	fd f3       	brhs	.-2      	; 0x9488 <waves+0x988>
    948a:	e9 df       	rcall	.-46     	; 0x945e <waves+0x95e>
    948c:	d4 ca       	rjmp	.-2648   	; 0x8a36 <steptable+0x12e>
    948e:	c0 b7       	in	r28, 0x30	; 48
    9490:	ae a6       	std	Y+46, r10	; 0x2e
    9492:	9e 97       	sbiw	r26, 0x2e	; 46
    9494:	91 8b       	std	Z+17, r25	; 0x11
    9496:	86 85       	ldd	r24, Z+14	; 0x0e
    9498:	82 80       	ldd	r8, Z+2	; 0x02
    949a:	80 80       	ld	r8, Z
    949c:	80 80       	ld	r8, Z
    949e:	80 80       	ld	r8, Z
    94a0:	80 80       	ld	r8, Z
    94a2:	80 80       	ld	r8, Z
    94a4:	80 80       	ld	r8, Z
    94a6:	80 80       	ld	r8, Z
    94a8:	80 80       	ld	r8, Z
    94aa:	80 80       	ld	r8, Z
    94ac:	80 80       	ld	r8, Z
    94ae:	80 80       	ld	r8, Z
    94b0:	80 80       	ld	r8, Z
    94b2:	80 80       	ld	r8, Z
    94b4:	80 80       	ld	r8, Z
    94b6:	80 80       	ld	r8, Z
    94b8:	80 80       	ld	r8, Z
    94ba:	80 80       	ld	r8, Z
    94bc:	80 80       	ld	r8, Z
    94be:	80 80       	ld	r8, Z
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 87       	std	Z+8, r24	; 0x08
    94f6:	91 9d       	mul	r25, r1
    94f8:	ac c4       	rjmp	.+2392   	; 0x9e52 <init_player_shot+0x74>
    94fa:	cb d4       	rcall	.+2454   	; 0x9e92 <init_player_shot+0xb4>
    94fc:	dd f2       	brhs	.-74     	; 0x94b4 <waves+0x9b4>
    94fe:	fa fa       	.word	0xfafa	; ????

00009500 <ProcessSprites>:

void SetSpriteVisibility(bool visible){
	sprites_on = visible;
}

void ProcessSprites(){
    9500:	2f 92       	push	r2
    9502:	3f 92       	push	r3
    9504:	4f 92       	push	r4
    9506:	5f 92       	push	r5
    9508:	6f 92       	push	r6
    950a:	7f 92       	push	r7
    950c:	8f 92       	push	r8
    950e:	9f 92       	push	r9
    9510:	af 92       	push	r10
    9512:	bf 92       	push	r11
    9514:	cf 92       	push	r12
    9516:	df 92       	push	r13
    9518:	ef 92       	push	r14
    951a:	ff 92       	push	r15
    951c:	0f 93       	push	r16
    951e:	1f 93       	push	r17
    9520:	cf 93       	push	r28
    9522:	df 93       	push	r29
    9524:	00 d0       	rcall	.+0      	; 0x9526 <ProcessSprites+0x26>
    9526:	00 d0       	rcall	.+0      	; 0x9528 <ProcessSprites+0x28>
    9528:	cd b7       	in	r28, 0x3d	; 61
    952a:	de b7       	in	r29, 0x3e	; 62
	u16 ssy;
	#else
	u8  ssy;
	#endif

	if (!sprites_on){ return; }
    952c:	80 91 00 05 	lds	r24, 0x0500
    9530:	88 23       	and	r24, r24
    9532:	09 f4       	brne	.+2      	; 0x9536 <ProcessSprites+0x36>
    9534:	cf c0       	rjmp	.+414    	; 0x96d4 <ProcessSprites+0x1d4>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    9536:	80 91 a6 0c 	lds	r24, 0x0CA6
    953a:	80 93 a5 0c 	sts	0x0CA5, r24
	free_tile_index = user_ram_tiles_c;
    953e:	80 93 a4 0c 	sts	0x0CA4, r24
    9542:	f0 e1       	ldi	r31, 0x10	; 16
    9544:	af 2e       	mov	r10, r31
    9546:	f5 e0       	ldi	r31, 0x05	; 5
    9548:	bf 2e       	mov	r11, r31

	for (i = 0U; i < MAX_SPRITES; i++){
    954a:	51 2c       	mov	r5, r1
		by = sprites[i].y;

		/* get tile's screen section offsets */

		#if (SCROLLING != 0)
		ssx = bx + Screen.scrollX;
    954c:	f5 01       	movw	r30, r10
    954e:	20 81       	ld	r18, Z
    9550:	80 91 b5 0c 	lds	r24, 0x0CB5
    9554:	28 0f       	add	r18, r24
		ssy = by + Screen.scrollY;
    9556:	31 81       	ldd	r19, Z+1	; 0x01
    9558:	80 91 b6 0c 	lds	r24, 0x0CB6
    955c:	90 e0       	ldi	r25, 0x00	; 0
    955e:	83 0f       	add	r24, r19
    9560:	91 1d       	adc	r25, r1
		** layout, VRAM_TILES_H is also fixed 32 this case. */

		#if (SCROLLING == 0)
		bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
		#else
		bx = ssx / TILE_WIDTH;
    9562:	32 2e       	mov	r3, r18
    9564:	36 94       	lsr	r3
    9566:	36 94       	lsr	r3
    9568:	36 94       	lsr	r3
		#endif
		dx = ssx % TILE_WIDTH;
    956a:	27 70       	andi	r18, 0x07	; 7
		if (dx != 0U){ tx++; }
    956c:	19 f0       	breq	.+6      	; 0x9574 <ProcessSprites+0x74>
    956e:	e2 e0       	ldi	r30, 0x02	; 2
    9570:	2e 2e       	mov	r2, r30
    9572:	02 c0       	rjmp	.+4      	; 0x9578 <ProcessSprites+0x78>
		#else
		ssx = bx;
		ssy = by;
		#endif

		tx = 1U;
    9574:	22 24       	eor	r2, r2
    9576:	23 94       	inc	r2
		if (dx != 0U){ tx++; }

		#if (SCROLLING == 0)
		by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
		#else
		by = ssy / TILE_HEIGHT;
    9578:	ac 01       	movw	r20, r24
    957a:	73 e0       	ldi	r23, 0x03	; 3
    957c:	56 95       	lsr	r21
    957e:	47 95       	ror	r20
    9580:	7a 95       	dec	r23
    9582:	e1 f7       	brne	.-8      	; 0x957c <ProcessSprites+0x7c>
    9584:	44 2e       	mov	r4, r20
		#endif
		dy = ssy % TILE_HEIGHT;
    9586:	87 70       	andi	r24, 0x07	; 7
		if (dy != 0U){ ty++; }
    9588:	11 f0       	breq	.+4      	; 0x958e <ProcessSprites+0x8e>
    958a:	92 e0       	ldi	r25, 0x02	; 2
    958c:	01 c0       	rjmp	.+2      	; 0x9590 <ProcessSprites+0x90>
		ssx = bx;
		ssy = by;
		#endif

		tx = 1U;
		ty = 1U;
    958e:	91 e0       	ldi	r25, 0x01	; 1
    9590:	99 83       	std	Y+1, r25	; 0x01

					}

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSprite(i, bt, (y << 8) + x, (dy << 8) + dx);
    9592:	68 2e       	mov	r6, r24
    9594:	71 2c       	mov	r7, r1
    9596:	76 2c       	mov	r7, r6
    9598:	66 24       	eor	r6, r6
    959a:	62 0e       	add	r6, r18
    959c:	71 1c       	adc	r7, r1
    959e:	c1 2c       	mov	r12, r1
    95a0:	d1 2c       	mov	r13, r1

		for (y = 0U; y < ty; y++){

			wy = by + y;
			#if (SCROLLING != 0)
			if (Screen.scrollHeight == 0U){
    95a2:	80 91 b7 0c 	lds	r24, 0x0CB7
    95a6:	88 23       	and	r24, r24
    95a8:	31 f0       	breq	.+12     	; 0x95b6 <ProcessSprites+0xb6>
    95aa:	94 2d       	mov	r25, r4
    95ac:	9c 0d       	add	r25, r12
				wy = 0U;
			}else{
				while (wy >= Screen.scrollHeight){
    95ae:	98 17       	cp	r25, r24
    95b0:	18 f0       	brcs	.+6      	; 0x95b8 <ProcessSprites+0xb8>
					wy -= Screen.scrollHeight;
    95b2:	98 1b       	sub	r25, r24
    95b4:	fc cf       	rjmp	.-8      	; 0x95ae <ProcessSprites+0xae>
		for (y = 0U; y < ty; y++){

			wy = by + y;
			#if (SCROLLING != 0)
			if (Screen.scrollHeight == 0U){
				wy = 0U;
    95b6:	90 e0       	ldi	r25, 0x00	; 0

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    95b8:	89 2e       	mov	r8, r25
    95ba:	86 94       	lsr	r8
    95bc:	86 94       	lsr	r8
    95be:	86 94       	lsr	r8
    95c0:	e0 e2       	ldi	r30, 0x20	; 32
    95c2:	8e 9e       	mul	r8, r30
    95c4:	40 01       	movw	r8, r0
    95c6:	11 24       	eor	r1, r1
    95c8:	e1 2c       	mov	r14, r1
    95ca:	fc 2c       	mov	r15, r12
					         (wx * 8U) + (wy & 0x07U);
    95cc:	97 70       	andi	r25, 0x07	; 7
    95ce:	29 2f       	mov	r18, r25
    95d0:	30 e0       	ldi	r19, 0x00	; 0
    95d2:	3c 83       	std	Y+4, r19	; 0x04
    95d4:	2b 83       	std	Y+3, r18	; 0x03
    95d6:	83 2d       	mov	r24, r3
    95d8:	8e 0d       	add	r24, r14

				#if (SCROLLING == 0)
				if ( (wx < VRAM_TILES_H) &&
				     (wy < VRAM_TILES_V) ){
				#else
				wx = wx % VRAM_TILES_H;
    95da:	8f 71       	andi	r24, 0x1F	; 31

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    95dc:	84 01       	movw	r16, r8
    95de:	08 0f       	add	r16, r24
    95e0:	11 1d       	adc	r17, r1
    95e2:	53 e0       	ldi	r21, 0x03	; 3
    95e4:	00 0f       	add	r16, r16
    95e6:	11 1f       	adc	r17, r17
    95e8:	5a 95       	dec	r21
    95ea:	e1 f7       	brne	.-8      	; 0x95e4 <ProcessSprites+0xe4>
    95ec:	8b 81       	ldd	r24, Y+3	; 0x03
    95ee:	9c 81       	ldd	r25, Y+4	; 0x04
    95f0:	08 0f       	add	r16, r24
    95f2:	19 1f       	adc	r17, r25
					         (wx * 8U) + (wy & 0x07U);
					#endif

					bt = vram[ramPtr];
    95f4:	00 50       	subi	r16, 0x00	; 0
    95f6:	1f 4f       	sbci	r17, 0xFF	; 255
    95f8:	f8 01       	movw	r30, r16
    95fa:	90 81       	ld	r25, Z

					if ( ( (bt >= RAM_TILES_COUNT) |
    95fc:	81 e0       	ldi	r24, 0x01	; 1
    95fe:	9c 31       	cpi	r25, 0x1C	; 28
    9600:	08 f4       	brcc	.+2      	; 0x9604 <ProcessSprites+0x104>
    9602:	80 e0       	ldi	r24, 0x00	; 0
    9604:	21 e0       	ldi	r18, 0x01	; 1
    9606:	30 91 a5 0c 	lds	r19, 0x0CA5
    960a:	93 17       	cp	r25, r19
    960c:	18 f0       	brcs	.+6      	; 0x9614 <ProcessSprites+0x114>
    960e:	20 e0       	ldi	r18, 0x00	; 0
    9610:	88 23       	and	r24, r24
    9612:	51 f1       	breq	.+84     	; 0x9668 <ProcessSprites+0x168>
					       (bt < user_ram_tiles_c)) &&
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    9614:	60 91 a4 0c 	lds	r22, 0x0CA4
					#endif

					bt = vram[ramPtr];

					if ( ( (bt >= RAM_TILES_COUNT) |
					       (bt < user_ram_tiles_c)) &&
    9618:	6c 31       	cpi	r22, 0x1C	; 28
    961a:	20 f5       	brcc	.+72     	; 0x9664 <ProcessSprites+0x164>
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

						if (bt >= RAM_TILES_COUNT){
    961c:	88 23       	and	r24, r24
    961e:	31 f0       	breq	.+12     	; 0x962c <ProcessSprites+0x12c>
							/* tile is mapped to flash. Copy it to next free RAM tile. */
							CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    9620:	84 ee       	ldi	r24, 0xE4	; 228
    9622:	89 0f       	add	r24, r25
    9624:	9a 83       	std	Y+2, r25	; 0x02
    9626:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <CopyFlashTile>
    962a:	06 c0       	rjmp	.+12     	; 0x9638 <ProcessSprites+0x138>
						}else if (bt < user_ram_tiles_c){
    962c:	22 23       	and	r18, r18
    962e:	29 f0       	breq	.+10     	; 0x963a <ProcessSprites+0x13a>
							/* tile is a user ram tile. Copy it to next free RAM tile. */
							CopyRamTile(bt, free_tile_index);
    9630:	89 2f       	mov	r24, r25
    9632:	9a 83       	std	Y+2, r25	; 0x02
    9634:	0e 94 ed 3a 	call	0x75da	; 0x75da <CopyRamTile>
    9638:	9a 81       	ldd	r25, Y+2	; 0x02
						}
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    963a:	80 91 a4 0c 	lds	r24, 0x0CA4
    963e:	e8 2f       	mov	r30, r24
    9640:	f0 e0       	ldi	r31, 0x00	; 0
    9642:	9f 01       	movw	r18, r30
    9644:	22 0f       	add	r18, r18
    9646:	33 1f       	adc	r19, r19
    9648:	e2 0f       	add	r30, r18
    964a:	f3 1f       	adc	r31, r19
    964c:	e0 5b       	subi	r30, 0xB0	; 176
    964e:	f3 4f       	sbci	r31, 0xF3	; 243
    9650:	11 83       	std	Z+1, r17	; 0x01
    9652:	00 83       	st	Z, r16
						ram_tiles_restore[free_tile_index].tileIndex = bt;
    9654:	92 83       	std	Z+2, r25	; 0x02
						vram[ramPtr] = free_tile_index;
    9656:	f8 01       	movw	r30, r16
    9658:	80 83       	st	Z, r24
						bt = free_tile_index;
						free_tile_index++;
    965a:	91 e0       	ldi	r25, 0x01	; 1
    965c:	98 0f       	add	r25, r24
    965e:	90 93 a4 0c 	sts	0x0CA4, r25
							CopyRamTile(bt, free_tile_index);
						}
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
						ram_tiles_restore[free_tile_index].tileIndex = bt;
						vram[ramPtr] = free_tile_index;
						bt = free_tile_index;
    9662:	98 2f       	mov	r25, r24
						free_tile_index++;

					}

					if ( (bt < RAM_TILES_COUNT) &&
    9664:	9c 31       	cpi	r25, 0x1C	; 28
    9666:	50 f4       	brcc	.+20     	; 0x967c <ProcessSprites+0x17c>
    9668:	80 91 a5 0c 	lds	r24, 0x0CA5
    966c:	98 17       	cp	r25, r24
    966e:	30 f0       	brcs	.+12     	; 0x967c <ProcessSprites+0x17c>
					     (bt >= user_ram_tiles_c) ){
						BlitSprite(i, bt, (y << 8) + x, (dy << 8) + dx);
    9670:	93 01       	movw	r18, r6
    9672:	a7 01       	movw	r20, r14
    9674:	69 2f       	mov	r22, r25
    9676:	85 2d       	mov	r24, r5
    9678:	0e 94 8d 3b 	call	0x771a	; 0x771a <BlitSprite>
    967c:	ff ef       	ldi	r31, 0xFF	; 255
    967e:	ef 1a       	sub	r14, r31
    9680:	ff 0a       	sbc	r15, r31
					wy -= Screen.scrollHeight;
				}
			}
			#endif

			for (x = 0U; x < tx; x++){
    9682:	e2 14       	cp	r14, r2
    9684:	08 f4       	brcc	.+2      	; 0x9688 <ProcessSprites+0x188>
    9686:	a7 cf       	rjmp	.-178    	; 0x95d6 <ProcessSprites+0xd6>
    9688:	2f ef       	ldi	r18, 0xFF	; 255
    968a:	c2 1a       	sub	r12, r18
    968c:	d2 0a       	sbc	r13, r18
		dy = ssy % TILE_HEIGHT;
		if (dy != 0U){ ty++; }

		/* Output sprite tiles */

		for (y = 0U; y < ty; y++){
    968e:	99 81       	ldd	r25, Y+1	; 0x01
    9690:	c9 16       	cp	r12, r25
    9692:	08 f4       	brcc	.+2      	; 0x9696 <ProcessSprites+0x196>
    9694:	86 cf       	rjmp	.-244    	; 0x95a2 <ProcessSprites+0xa2>
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9696:	53 94       	inc	r5
    9698:	e4 e0       	ldi	r30, 0x04	; 4
    969a:	ae 0e       	add	r10, r30
    969c:	b1 1c       	adc	r11, r1
    969e:	f0 e1       	ldi	r31, 0x10	; 16
    96a0:	5f 12       	cpse	r5, r31
    96a2:	54 cf       	rjmp	.-344    	; 0x954c <ProcessSprites+0x4c>

	/* restore BG tiles */

	RestoreBackground();

}
    96a4:	0f 90       	pop	r0
    96a6:	0f 90       	pop	r0
    96a8:	0f 90       	pop	r0
    96aa:	0f 90       	pop	r0
    96ac:	df 91       	pop	r29
    96ae:	cf 91       	pop	r28
    96b0:	1f 91       	pop	r17
    96b2:	0f 91       	pop	r16
    96b4:	ff 90       	pop	r15
    96b6:	ef 90       	pop	r14
    96b8:	df 90       	pop	r13
    96ba:	cf 90       	pop	r12
    96bc:	bf 90       	pop	r11
    96be:	af 90       	pop	r10
    96c0:	9f 90       	pop	r9
    96c2:	8f 90       	pop	r8
    96c4:	7f 90       	pop	r7
    96c6:	6f 90       	pop	r6
    96c8:	5f 90       	pop	r5
    96ca:	4f 90       	pop	r4
    96cc:	3f 90       	pop	r3
    96ce:	2f 90       	pop	r2

	}

	/* restore BG tiles */

	RestoreBackground();
    96d0:	0c 94 7a 3b 	jmp	0x76f4	; 0x76f4 <RestoreBackground>

}
    96d4:	0f 90       	pop	r0
    96d6:	0f 90       	pop	r0
    96d8:	0f 90       	pop	r0
    96da:	0f 90       	pop	r0
    96dc:	df 91       	pop	r29
    96de:	cf 91       	pop	r28
    96e0:	1f 91       	pop	r17
    96e2:	0f 91       	pop	r16
    96e4:	ff 90       	pop	r15
    96e6:	ef 90       	pop	r14
    96e8:	df 90       	pop	r13
    96ea:	cf 90       	pop	r12
    96ec:	bf 90       	pop	r11
    96ee:	af 90       	pop	r10
    96f0:	9f 90       	pop	r9
    96f2:	8f 90       	pop	r8
    96f4:	7f 90       	pop	r7
    96f6:	6f 90       	pop	r6
    96f8:	5f 90       	pop	r5
    96fa:	4f 90       	pop	r4
    96fc:	3f 90       	pop	r3
    96fe:	2f 90       	pop	r2
    9700:	08 95       	ret

00009702 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9702:	90 91 b6 0c 	lds	r25, 0x0CB6
    9706:	96 0f       	add	r25, r22
    9708:	90 93 b6 0c 	sts	0x0CB6, r25
		Screen.scrollX+=dx;
    970c:	20 91 b5 0c 	lds	r18, 0x0CB5
    9710:	82 0f       	add	r24, r18
    9712:	80 93 b5 0c 	sts	0x0CB5, r24

		if(Screen.scrollHeight<32){
    9716:	80 91 b7 0c 	lds	r24, 0x0CB7
    971a:	80 32       	cpi	r24, 0x20	; 32
    971c:	b0 f4       	brcc	.+44     	; 0x974a <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    971e:	29 2f       	mov	r18, r25
    9720:	30 e0       	ldi	r19, 0x00	; 0
    9722:	78 e0       	ldi	r23, 0x08	; 8
    9724:	87 9f       	mul	r24, r23
    9726:	a0 01       	movw	r20, r0
    9728:	11 24       	eor	r1, r1
    972a:	24 17       	cp	r18, r20
    972c:	35 07       	cpc	r19, r21
    972e:	6c f0       	brlt	.+26     	; 0x974a <Scroll+0x48>
				if(dy>=0){	
    9730:	67 fd       	sbrc	r22, 7
    9732:	05 c0       	rjmp	.+10     	; 0x973e <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9734:	28 ef       	ldi	r18, 0xF8	; 248
    9736:	82 9f       	mul	r24, r18
    9738:	90 0d       	add	r25, r0
    973a:	11 24       	eor	r1, r1
    973c:	04 c0       	rjmp	.+8      	; 0x9746 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    973e:	78 e0       	ldi	r23, 0x08	; 8
    9740:	87 9f       	mul	r24, r23
    9742:	90 0d       	add	r25, r0
    9744:	11 24       	eor	r1, r1
    9746:	90 93 b6 0c 	sts	0x0CB6, r25
    974a:	08 95       	ret

0000974c <DisplayLogo>:
		}	

	}

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    974c:	08 95       	ret

0000974e <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    974e:	e0 e1       	ldi	r30, 0x10	; 16
    9750:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9752:	80 ee       	ldi	r24, 0xE0	; 224
    9754:	80 83       	st	Z, r24
    9756:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9758:	95 e0       	ldi	r25, 0x05	; 5
    975a:	e0 35       	cpi	r30, 0x50	; 80
    975c:	f9 07       	cpc	r31, r25
    975e:	d1 f7       	brne	.-12     	; 0x9754 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    9760:	80 e2       	ldi	r24, 0x20	; 32
    9762:	80 93 b7 0c 	sts	0x0CB7, r24
			Screen.overlayHeight=0;
    9766:	10 92 b2 0c 	sts	0x0CB2, r1
		#endif

		free_tile_index      = 0U;
    976a:	10 92 a4 0c 	sts	0x0CA4, r1
		user_ram_tiles_c_tmp = 0U;
    976e:	10 92 a6 0c 	sts	0x0CA6, r1
    9772:	08 95       	ret

00009774 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9774:	4f 92       	push	r4
    9776:	5f 92       	push	r5
    9778:	6f 92       	push	r6
    977a:	7f 92       	push	r7
    977c:	8f 92       	push	r8
    977e:	9f 92       	push	r9
    9780:	af 92       	push	r10
    9782:	bf 92       	push	r11
    9784:	cf 92       	push	r12
    9786:	df 92       	push	r13
    9788:	ef 92       	push	r14
    978a:	ff 92       	push	r15
    978c:	0f 93       	push	r16
    978e:	1f 93       	push	r17
    9790:	cf 93       	push	r28
    9792:	df 93       	push	r29
    9794:	68 2e       	mov	r6, r24
    9796:	56 2e       	mov	r5, r22
    9798:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    979a:	fa 01       	movw	r30, r20
    979c:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    979e:	31 96       	adiw	r30, 0x01	; 1
    97a0:	84 90       	lpm	r8, Z
    97a2:	c7 2c       	mov	r12, r7
    97a4:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    97a6:	00 e0       	ldi	r16, 0x00	; 0
    97a8:	10 e0       	ldi	r17, 0x00	; 0
    97aa:	91 2c       	mov	r9, r1
    97ac:	98 14       	cp	r9, r8
    97ae:	f1 f0       	breq	.+60     	; 0x97ec <DrawMap+0x78>
    97b0:	c0 e0       	ldi	r28, 0x00	; 0
    97b2:	d0 e0       	ldi	r29, 0x00	; 0
    97b4:	58 01       	movw	r10, r16
    97b6:	f2 e0       	ldi	r31, 0x02	; 2
    97b8:	af 0e       	add	r10, r31
    97ba:	b1 1c       	adc	r11, r1
    97bc:	49 2c       	mov	r4, r9
    97be:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    97c0:	c7 15       	cp	r28, r7
    97c2:	80 f4       	brcc	.+32     	; 0x97e4 <DrawMap+0x70>
    97c4:	95 01       	movw	r18, r10
    97c6:	2c 0f       	add	r18, r28
    97c8:	3d 1f       	adc	r19, r29
    97ca:	f7 01       	movw	r30, r14
    97cc:	e2 0f       	add	r30, r18
    97ce:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    97d0:	24 91       	lpm	r18, Z
    97d2:	42 2f       	mov	r20, r18
    97d4:	50 e0       	ldi	r21, 0x00	; 0
    97d6:	64 2d       	mov	r22, r4
    97d8:	8c 2f       	mov	r24, r28
    97da:	86 0d       	add	r24, r6
    97dc:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <SetTile>
    97e0:	21 96       	adiw	r28, 0x01	; 1
    97e2:	ee cf       	rjmp	.-36     	; 0x97c0 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    97e4:	93 94       	inc	r9
    97e6:	0c 0d       	add	r16, r12
    97e8:	1d 1d       	adc	r17, r13
    97ea:	e0 cf       	rjmp	.-64     	; 0x97ac <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    97ec:	df 91       	pop	r29
    97ee:	cf 91       	pop	r28
    97f0:	1f 91       	pop	r17
    97f2:	0f 91       	pop	r16
    97f4:	ff 90       	pop	r15
    97f6:	ef 90       	pop	r14
    97f8:	df 90       	pop	r13
    97fa:	cf 90       	pop	r12
    97fc:	bf 90       	pop	r11
    97fe:	af 90       	pop	r10
    9800:	9f 90       	pop	r9
    9802:	8f 90       	pop	r8
    9804:	7f 90       	pop	r7
    9806:	6f 90       	pop	r6
    9808:	5f 90       	pop	r5
    980a:	4f 90       	pop	r4
    980c:	08 95       	ret

0000980e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    980e:	0f 93       	push	r16
    9810:	1f 93       	push	r17
    9812:	cf 93       	push	r28
    9814:	df 93       	push	r29
    9816:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9818:	c0 e0       	ldi	r28, 0x00	; 0
    981a:	d0 e0       	ldi	r29, 0x00	; 0
    981c:	c0 17       	cp	r28, r16
    981e:	d1 07       	cpc	r29, r17
    9820:	44 f4       	brge	.+16     	; 0x9832 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9822:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <GetVsyncFlag>
    9826:	88 23       	and	r24, r24
    9828:	e1 f3       	breq	.-8      	; 0x9822 <WaitVsync+0x14>
		ClearVsyncFlag();		
    982a:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    982e:	21 96       	adiw	r28, 0x01	; 1
    9830:	f5 cf       	rjmp	.-22     	; 0x981c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9832:	df 91       	pop	r29
    9834:	cf 91       	pop	r28
    9836:	1f 91       	pop	r17
    9838:	0f 91       	pop	r16
    983a:	08 95       	ret

0000983c <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    983c:	80 93 85 0d 	sts	0x0D85, r24
	currFadeFrame=0;
    9840:	10 92 88 0d 	sts	0x0D88, r1
	fadeActive=true;
    9844:	81 e0       	ldi	r24, 0x01	; 1
    9846:	80 93 87 0d 	sts	0x0D87, r24
		
	if(blocking){
    984a:	66 23       	and	r22, r22
    984c:	21 f0       	breq	.+8      	; 0x9856 <doFade+0x1a>
		while(fadeActive==true);
    984e:	80 91 87 0d 	lds	r24, 0x0D87
    9852:	81 11       	cpse	r24, r1
    9854:	fc cf       	rjmp	.-8      	; 0x984e <doFade+0x12>
    9856:	08 95       	ret

00009858 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9858:	81 11       	cpse	r24, r1
    985a:	03 c0       	rjmp	.+6      	; 0x9862 <FadeIn+0xa>
		DDRC=0xff;
    985c:	8f ef       	ldi	r24, 0xFF	; 255
    985e:	87 b9       	out	0x07, r24	; 7
		return;
    9860:	08 95       	ret
	}
	fadeStep=1;
    9862:	91 e0       	ldi	r25, 0x01	; 1
    9864:	90 93 89 0d 	sts	0x0D89, r25
	fadeDir=1;
    9868:	90 93 86 0d 	sts	0x0D86, r25
	doFade(speed,blocking);
    986c:	0c 94 1e 4c 	jmp	0x983c	; 0x983c <doFade>

00009870 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9870:	81 11       	cpse	r24, r1
    9872:	02 c0       	rjmp	.+4      	; 0x9878 <FadeOut+0x8>
		DDRC=0;
    9874:	17 b8       	out	0x07, r1	; 7
		return;
    9876:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9878:	9c e0       	ldi	r25, 0x0C	; 12
    987a:	90 93 89 0d 	sts	0x0D89, r25
	fadeDir=-1;
    987e:	9f ef       	ldi	r25, 0xFF	; 255
    9880:	90 93 86 0d 	sts	0x0D86, r25
	doFade(speed,blocking);
    9884:	0c 94 1e 4c 	jmp	0x983c	; 0x983c <doFade>

00009888 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9888:	80 91 87 0d 	lds	r24, 0x0D87
    988c:	88 23       	and	r24, r24
    988e:	01 f1       	breq	.+64     	; 0x98d0 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9890:	80 91 88 0d 	lds	r24, 0x0D88
    9894:	81 11       	cpse	r24, r1
    9896:	19 c0       	rjmp	.+50     	; 0x98ca <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9898:	80 91 85 0d 	lds	r24, 0x0D85
    989c:	80 93 88 0d 	sts	0x0D88, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    98a0:	e0 91 89 0d 	lds	r30, 0x0D89
    98a4:	f0 e0       	ldi	r31, 0x00	; 0
    98a6:	ef 5f       	subi	r30, 0xFF	; 255
    98a8:	fe 4f       	sbci	r31, 0xFE	; 254
    98aa:	e4 91       	lpm	r30, Z
    98ac:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    98ae:	90 91 86 0d 	lds	r25, 0x0D86
    98b2:	80 91 89 0d 	lds	r24, 0x0D89
    98b6:	89 0f       	add	r24, r25
    98b8:	80 93 89 0d 	sts	0x0D89, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    98bc:	88 23       	and	r24, r24
    98be:	11 f0       	breq	.+4      	; 0x98c4 <ProcessFading+0x3c>
    98c0:	8d 30       	cpi	r24, 0x0D	; 13
    98c2:	31 f4       	brne	.+12     	; 0x98d0 <ProcessFading+0x48>
				fadeActive=false;
    98c4:	10 92 87 0d 	sts	0x0D87, r1
    98c8:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    98ca:	81 50       	subi	r24, 0x01	; 1
    98cc:	80 93 88 0d 	sts	0x0D88, r24
    98d0:	08 95       	ret

000098d2 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    98d2:	0e 94 44 4c 	call	0x9888	; 0x9888 <ProcessFading>
		ProcessSprites();
    98d6:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <ProcessSprites>

000098da <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    98da:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    98dc:	88 23       	and	r24, r24
    98de:	29 f1       	breq	.+74     	; 0x992a <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    98e0:	87 ff       	sbrs	r24, 7
    98e2:	03 c0       	rjmp	.+6      	; 0x98ea <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    98e4:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    98e6:	3f ef       	ldi	r19, 0xFF	; 255
    98e8:	01 c0       	rjmp	.+2      	; 0x98ec <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    98ea:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    98ec:	6c e3       	ldi	r22, 0x3C	; 60
    98ee:	0e 94 df 70 	call	0xe1be	; 0xe1be <__divmodqi4>
    98f2:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    98f4:	99 23       	and	r25, r25
    98f6:	a9 f0       	breq	.+42     	; 0x9922 <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    98f8:	69 2f       	mov	r22, r25
    98fa:	70 e0       	ldi	r23, 0x00	; 0
    98fc:	8c e3       	ldi	r24, 0x3C	; 60
    98fe:	90 e0       	ldi	r25, 0x00	; 0
    9900:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9904:	8e 2f       	mov	r24, r30
    9906:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    990a:	91 11       	cpse	r25, r1
    990c:	0a c0       	rjmp	.+20     	; 0x9922 <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    990e:	42 2f       	mov	r20, r18
    9910:	50 e0       	ldi	r21, 0x00	; 0
    9912:	4f 5f       	subi	r20, 0xFF	; 255
    9914:	5f 4f       	sbci	r21, 0xFF	; 255
    9916:	34 03       	mulsu	r19, r20
    9918:	c0 01       	movw	r24, r0
    991a:	35 9f       	mul	r19, r21
    991c:	90 0d       	add	r25, r0
    991e:	11 24       	eor	r1, r1
    9920:	08 95       	ret
	}
	return direction*base_delta;
    9922:	32 03       	mulsu	r19, r18
    9924:	c0 01       	movw	r24, r0
    9926:	11 24       	eor	r1, r1
    9928:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    992a:	80 e0       	ldi	r24, 0x00	; 0
    992c:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    992e:	08 95       	ret

00009930 <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    9930:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9932:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9934:	93 81       	ldd	r25, Z+3	; 0x03
    9936:	9f 5f       	subi	r25, 0xFF	; 255
    9938:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    993a:	42 81       	ldd	r20, Z+2	; 0x02
    993c:	80 81       	ld	r24, Z
    993e:	26 81       	ldd	r18, Z+6	; 0x06
    9940:	37 81       	ldd	r19, Z+7	; 0x07
    9942:	94 17       	cp	r25, r20
    9944:	30 f4       	brcc	.+12     	; 0x9952 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    9946:	f9 01       	movw	r30, r18
    9948:	e8 0f       	add	r30, r24
    994a:	f1 1d       	adc	r31, r1
    994c:	e8 0f       	add	r30, r24
    994e:	f1 1d       	adc	r31, r1
    9950:	12 c0       	rjmp	.+36     	; 0x9976 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    9952:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9954:	90 e0       	ldi	r25, 0x00	; 0
    9956:	01 96       	adiw	r24, 0x01	; 1
    9958:	61 81       	ldd	r22, Z+1	; 0x01
    995a:	70 e0       	ldi	r23, 0x00	; 0
    995c:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    9960:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9962:	81 11       	cpse	r24, r1
    9964:	02 c0       	rjmp	.+4      	; 0x996a <LBGetNextFrame+0x3a>
    9966:	41 e0       	ldi	r20, 0x01	; 1
    9968:	44 83       	std	Z+4, r20	; 0x04
    996a:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    996c:	88 0f       	add	r24, r24
    996e:	99 1f       	adc	r25, r25
    9970:	f9 01       	movw	r30, r18
    9972:	e8 0f       	add	r30, r24
    9974:	f9 1f       	adc	r31, r25
    9976:	80 81       	ld	r24, Z
    9978:	91 81       	ldd	r25, Z+1	; 0x01
}
    997a:	08 95       	ret

0000997c <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    997c:	0f 93       	push	r16
    997e:	1f 93       	push	r17
    9980:	cf 93       	push	r28
    9982:	df 93       	push	r29
    9984:	1f 92       	push	r1
    9986:	cd b7       	in	r28, 0x3d	; 61
    9988:	de b7       	in	r29, 0x3e	; 62
    998a:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    998c:	86 2f       	mov	r24, r22
    998e:	69 83       	std	Y+1, r22	; 0x01
    9990:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ReadJoypad>
    9994:	d8 01       	movw	r26, r16
    9996:	15 96       	adiw	r26, 0x05	; 5
    9998:	9c 93       	st	X, r25
    999a:	8e 93       	st	-X, r24
    999c:	14 97       	sbiw	r26, 0x04	; 4
    999e:	69 81       	ldd	r22, Y+1	; 0x01
    99a0:	e6 2f       	mov	r30, r22
    99a2:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    99a4:	00 97       	sbiw	r24, 0x00	; 0
    99a6:	51 f0       	breq	.+20     	; 0x99bc <LBGetJoyPadState+0x40>
    99a8:	df 01       	movw	r26, r30
    99aa:	aa 0f       	add	r26, r26
    99ac:	bb 1f       	adc	r27, r27
    99ae:	a3 50       	subi	r26, 0x03	; 3
    99b0:	b3 4f       	sbci	r27, 0xF3	; 243
    99b2:	2d 91       	ld	r18, X+
    99b4:	3c 91       	ld	r19, X
    99b6:	82 17       	cp	r24, r18
    99b8:	93 07       	cpc	r25, r19
    99ba:	21 f0       	breq	.+8      	; 0x99c4 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    99bc:	d8 01       	movw	r26, r16
    99be:	16 96       	adiw	r26, 0x06	; 6
    99c0:	1c 92       	st	X, r1
    99c2:	07 c0       	rjmp	.+14     	; 0x99d2 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    99c4:	d8 01       	movw	r26, r16
    99c6:	16 96       	adiw	r26, 0x06	; 6
    99c8:	2c 91       	ld	r18, X
    99ca:	16 97       	sbiw	r26, 0x06	; 6
    99cc:	2f 5f       	subi	r18, 0xFF	; 255
    99ce:	16 96       	adiw	r26, 0x06	; 6
    99d0:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    99d2:	ee 0f       	add	r30, r30
    99d4:	ff 1f       	adc	r31, r31
    99d6:	e3 50       	subi	r30, 0x03	; 3
    99d8:	f3 4f       	sbci	r31, 0xF3	; 243
    99da:	20 81       	ld	r18, Z
    99dc:	31 81       	ldd	r19, Z+1	; 0x01
    99de:	a9 01       	movw	r20, r18
    99e0:	40 95       	com	r20
    99e2:	50 95       	com	r21
    99e4:	48 23       	and	r20, r24
    99e6:	59 23       	and	r21, r25
    99e8:	d8 01       	movw	r26, r16
    99ea:	11 96       	adiw	r26, 0x01	; 1
    99ec:	5c 93       	st	X, r21
    99ee:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    99f0:	ac 01       	movw	r20, r24
    99f2:	40 95       	com	r20
    99f4:	50 95       	com	r21
    99f6:	24 23       	and	r18, r20
    99f8:	35 23       	and	r19, r21
    99fa:	13 96       	adiw	r26, 0x03	; 3
    99fc:	3c 93       	st	X, r19
    99fe:	2e 93       	st	-X, r18
    9a00:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9a02:	91 83       	std	Z+1, r25	; 0x01
    9a04:	80 83       	st	Z, r24
}
    9a06:	0f 90       	pop	r0
    9a08:	df 91       	pop	r29
    9a0a:	cf 91       	pop	r28
    9a0c:	1f 91       	pop	r17
    9a0e:	0f 91       	pop	r16
    9a10:	08 95       	ret

00009a12 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9a12:	90 ed       	ldi	r25, 0xD0	; 208
    9a14:	94 0f       	add	r25, r20
    9a16:	e0 91 8a 0d 	lds	r30, 0x0D8A
    9a1a:	f0 91 8b 0d 	lds	r31, 0x0D8B
    9a1e:	9a 30       	cpi	r25, 0x0A	; 10
    9a20:	38 f4       	brcc	.+14     	; 0x9a30 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9a22:	24 2f       	mov	r18, r20
    9a24:	30 e0       	ldi	r19, 0x00	; 0
    9a26:	2d 52       	subi	r18, 0x2D	; 45
    9a28:	31 09       	sbc	r19, r1
    9a2a:	e2 0f       	add	r30, r18
    9a2c:	f3 1f       	adc	r31, r19
    9a2e:	0c c0       	rjmp	.+24     	; 0x9a48 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    9a30:	9f eb       	ldi	r25, 0xBF	; 191
    9a32:	94 0f       	add	r25, r20
    9a34:	9a 31       	cpi	r25, 0x1A	; 26
    9a36:	38 f4       	brcc	.+14     	; 0x9a46 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9a38:	50 e0       	ldi	r21, 0x00	; 0
    9a3a:	44 53       	subi	r20, 0x34	; 52
    9a3c:	51 09       	sbc	r21, r1
    9a3e:	e4 0f       	add	r30, r20
    9a40:	f5 1f       	adc	r31, r21
    9a42:	44 91       	lpm	r20, Z
    9a44:	03 c0       	rjmp	.+6      	; 0x9a4c <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9a46:	32 96       	adiw	r30, 0x02	; 2
    9a48:	e4 91       	lpm	r30, Z
    9a4a:	4e 2f       	mov	r20, r30
    9a4c:	50 e0       	ldi	r21, 0x00	; 0
    9a4e:	0c 94 ba 3d 	jmp	0x7b74	; 0x7b74 <SetTile>

00009a52 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9a52:	ff 92       	push	r15
    9a54:	0f 93       	push	r16
    9a56:	1f 93       	push	r17
    9a58:	cf 93       	push	r28
    9a5a:	df 93       	push	r29
    9a5c:	d8 2f       	mov	r29, r24
    9a5e:	f6 2e       	mov	r15, r22
    9a60:	8a 01       	movw	r16, r20
	u8 i = 0;
    9a62:	c0 e0       	ldi	r28, 0x00	; 0
    9a64:	8c 2f       	mov	r24, r28
    9a66:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9a68:	f8 01       	movw	r30, r16
    9a6a:	ec 0f       	add	r30, r28
    9a6c:	f1 1d       	adc	r31, r1
    9a6e:	44 91       	lpm	r20, Z
    9a70:	44 23       	and	r20, r20
    9a72:	29 f0       	breq	.+10     	; 0x9a7e <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9a74:	6f 2d       	mov	r22, r15
    9a76:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		i++;
    9a7a:	cf 5f       	subi	r28, 0xFF	; 255
    9a7c:	f3 cf       	rjmp	.-26     	; 0x9a64 <LBPrint+0x12>
	}
}
    9a7e:	df 91       	pop	r29
    9a80:	cf 91       	pop	r28
    9a82:	1f 91       	pop	r17
    9a84:	0f 91       	pop	r16
    9a86:	ff 90       	pop	r15
    9a88:	08 95       	ret

00009a8a <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9a8a:	df 92       	push	r13
    9a8c:	ef 92       	push	r14
    9a8e:	ff 92       	push	r15
    9a90:	0f 93       	push	r16
    9a92:	1f 93       	push	r17
    9a94:	cf 93       	push	r28
    9a96:	df 93       	push	r29
    9a98:	1f 92       	push	r1
    9a9a:	cd b7       	in	r28, 0x3d	; 61
    9a9c:	de b7       	in	r29, 0x3e	; 62
    9a9e:	38 2f       	mov	r19, r24
    9aa0:	06 2f       	mov	r16, r22
    9aa2:	84 2f       	mov	r24, r20
    9aa4:	9d ef       	ldi	r25, 0xFD	; 253
    9aa6:	e9 2e       	mov	r14, r25
    9aa8:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9aaa:	4a e0       	ldi	r20, 0x0A	; 10
    9aac:	f4 2e       	mov	r15, r20
    9aae:	1f ef       	ldi	r17, 0xFF	; 255
    9ab0:	13 0f       	add	r17, r19
    9ab2:	6f 2d       	mov	r22, r15
    9ab4:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    9ab8:	d8 2e       	mov	r13, r24
    9aba:	40 e3       	ldi	r20, 0x30	; 48
    9abc:	49 0f       	add	r20, r25
    9abe:	60 2f       	mov	r22, r16
    9ac0:	83 2f       	mov	r24, r19
    9ac2:	29 83       	std	Y+1, r18	; 0x01
    9ac4:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		value /= 10;
    9ac8:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9aca:	29 81       	ldd	r18, Y+1	; 0x01
    9acc:	21 11       	cpse	r18, r1
    9ace:	02 c0       	rjmp	.+4      	; 0x9ad4 <LBPrintByte+0x4a>
    9ad0:	dd 20       	and	r13, r13
    9ad2:	19 f0       	breq	.+6      	; 0x9ada <LBPrintByte+0x50>
    9ad4:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9ad6:	1e 11       	cpse	r17, r14
    9ad8:	ea cf       	rjmp	.-44     	; 0x9aae <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9ada:	0f 90       	pop	r0
    9adc:	df 91       	pop	r29
    9ade:	cf 91       	pop	r28
    9ae0:	1f 91       	pop	r17
    9ae2:	0f 91       	pop	r16
    9ae4:	ff 90       	pop	r15
    9ae6:	ef 90       	pop	r14
    9ae8:	df 90       	pop	r13
    9aea:	08 95       	ret

00009aec <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9aec:	cf 92       	push	r12
    9aee:	df 92       	push	r13
    9af0:	ef 92       	push	r14
    9af2:	ff 92       	push	r15
    9af4:	0f 93       	push	r16
    9af6:	1f 93       	push	r17
    9af8:	cf 93       	push	r28
    9afa:	df 93       	push	r29
    9afc:	00 d0       	rcall	.+0      	; 0x9afe <LBPrintInt+0x12>
    9afe:	cd b7       	in	r28, 0x3d	; 61
    9b00:	de b7       	in	r29, 0x3e	; 62
    9b02:	38 2f       	mov	r19, r24
    9b04:	16 2f       	mov	r17, r22
    9b06:	ca 01       	movw	r24, r20
    9b08:	4b ef       	ldi	r20, 0xFB	; 251
    9b0a:	d4 2e       	mov	r13, r20
    9b0c:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9b0e:	5a e0       	ldi	r21, 0x0A	; 10
    9b10:	e5 2e       	mov	r14, r21
    9b12:	f1 2c       	mov	r15, r1
    9b14:	cc 24       	eor	r12, r12
    9b16:	ca 94       	dec	r12
    9b18:	c3 0e       	add	r12, r19
    9b1a:	b7 01       	movw	r22, r14
    9b1c:	0e 94 ed 70 	call	0xe1da	; 0xe1da <__udivmodhi4>
    9b20:	06 2f       	mov	r16, r22
    9b22:	40 e3       	ldi	r20, 0x30	; 48
    9b24:	48 0f       	add	r20, r24
    9b26:	61 2f       	mov	r22, r17
    9b28:	83 2f       	mov	r24, r19
    9b2a:	29 83       	std	Y+1, r18	; 0x01
    9b2c:	7a 83       	std	Y+2, r23	; 0x02
    9b2e:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		value /= 10;
    9b32:	80 2f       	mov	r24, r16
    9b34:	7a 81       	ldd	r23, Y+2	; 0x02
    9b36:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    9b38:	29 81       	ldd	r18, Y+1	; 0x01
    9b3a:	21 11       	cpse	r18, r1
    9b3c:	02 c0       	rjmp	.+4      	; 0x9b42 <LBPrintInt+0x56>
    9b3e:	00 97       	sbiw	r24, 0x00	; 0
    9b40:	19 f0       	breq	.+6      	; 0x9b48 <LBPrintInt+0x5c>
    9b42:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    9b44:	cd 10       	cpse	r12, r13
    9b46:	e6 cf       	rjmp	.-52     	; 0x9b14 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9b48:	0f 90       	pop	r0
    9b4a:	0f 90       	pop	r0
    9b4c:	df 91       	pop	r29
    9b4e:	cf 91       	pop	r28
    9b50:	1f 91       	pop	r17
    9b52:	0f 91       	pop	r16
    9b54:	ff 90       	pop	r15
    9b56:	ef 90       	pop	r14
    9b58:	df 90       	pop	r13
    9b5a:	cf 90       	pop	r12
    9b5c:	08 95       	ret

00009b5e <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9b5e:	af 92       	push	r10
    9b60:	cf 92       	push	r12
    9b62:	ef 92       	push	r14
    9b64:	ff 92       	push	r15
    9b66:	0f 93       	push	r16
    9b68:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9b6a:	70 e0       	ldi	r23, 0x00	; 0
    9b6c:	f1 2c       	mov	r15, r1
    9b6e:	fb 01       	movw	r30, r22
    9b70:	e2 0f       	add	r30, r18
    9b72:	f1 1d       	adc	r31, r1
    9b74:	ee 16       	cp	r14, r30
    9b76:	ff 06       	cpc	r15, r31
    9b78:	a4 f4       	brge	.+40     	; 0x9ba2 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9b7a:	ea 0c       	add	r14, r10
    9b7c:	f1 1c       	adc	r15, r1
    9b7e:	6e 15       	cp	r22, r14
    9b80:	7f 05       	cpc	r23, r15
    9b82:	7c f4       	brge	.+30     	; 0x9ba2 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9b84:	28 2f       	mov	r18, r24
    9b86:	30 e0       	ldi	r19, 0x00	; 0
    9b88:	10 e0       	ldi	r17, 0x00	; 0
    9b8a:	c9 01       	movw	r24, r18
    9b8c:	84 0f       	add	r24, r20
    9b8e:	91 1d       	adc	r25, r1
    9b90:	08 17       	cp	r16, r24
    9b92:	19 07       	cpc	r17, r25
    9b94:	34 f4       	brge	.+12     	; 0x9ba2 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9b96:	0c 0d       	add	r16, r12
    9b98:	11 1d       	adc	r17, r1
    9b9a:	81 e0       	ldi	r24, 0x01	; 1
    9b9c:	20 17       	cp	r18, r16
    9b9e:	31 07       	cpc	r19, r17
    9ba0:	0c f0       	brlt	.+2      	; 0x9ba4 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9ba2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9ba4:	1f 91       	pop	r17
    9ba6:	0f 91       	pop	r16
    9ba8:	ff 90       	pop	r15
    9baa:	ef 90       	pop	r14
    9bac:	cf 90       	pop	r12
    9bae:	af 90       	pop	r10
    9bb0:	08 95       	ret

00009bb2 <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9bb2:	cf 93       	push	r28
    9bb4:	df 93       	push	r29
    9bb6:	d8 2f       	mov	r29, r24
    9bb8:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9bba:	80 e0       	ldi	r24, 0x00	; 0
    9bbc:	90 e0       	ldi	r25, 0x00	; 0
    9bbe:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <GetPrngNumber>
    9bc2:	6f ef       	ldi	r22, 0xFF	; 255
    9bc4:	70 e0       	ldi	r23, 0x00	; 0
    9bc6:	0e 94 ed 70 	call	0xe1da	; 0xe1da <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9bca:	6c 2f       	mov	r22, r28
    9bcc:	70 e0       	ldi	r23, 0x00	; 0
    9bce:	6d 1b       	sub	r22, r29
    9bd0:	71 09       	sbc	r23, r1
    9bd2:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
}
    9bd6:	8d 0f       	add	r24, r29
    9bd8:	df 91       	pop	r29
    9bda:	cf 91       	pop	r28
    9bdc:	08 95       	ret

00009bde <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9bde:	cf 93       	push	r28
    9be0:	df 93       	push	r29
    9be2:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9be4:	c0 e0       	ldi	r28, 0x00	; 0
    9be6:	cd 17       	cp	r28, r29
    9be8:	31 f0       	breq	.+12     	; 0x9bf6 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9bea:	8f ef       	ldi	r24, 0xFF	; 255
    9bec:	9f ef       	ldi	r25, 0xFF	; 255
    9bee:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9bf2:	cf 5f       	subi	r28, 0xFF	; 255
    9bf4:	f8 cf       	rjmp	.-16     	; 0x9be6 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9bf6:	df 91       	pop	r29
    9bf8:	cf 91       	pop	r28
    9bfa:	08 95       	ret

00009bfc <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9bfc:	df 92       	push	r13
    9bfe:	ef 92       	push	r14
    9c00:	ff 92       	push	r15
    9c02:	0f 93       	push	r16
    9c04:	1f 93       	push	r17
    9c06:	cf 93       	push	r28
    9c08:	df 93       	push	r29
    9c0a:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9c0c:	fb 01       	movw	r30, r22
    9c0e:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9c10:	31 96       	adiw	r30, 0x01	; 1
    9c12:	64 91       	lpm	r22, Z
    9c14:	5f ef       	ldi	r21, 0xFF	; 255
    9c16:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9c18:	24 2f       	mov	r18, r20
    9c1a:	21 70       	andi	r18, 0x01	; 1
    9c1c:	40 ff       	sbrs	r20, 0
    9c1e:	04 c0       	rjmp	.+8      	; 0x9c28 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    9c20:	95 2f       	mov	r25, r21
		dx=-1;
    9c22:	ff 24       	eor	r15, r15
    9c24:	fa 94       	dec	r15
    9c26:	03 c0       	rjmp	.+6      	; 0x9c2e <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9c28:	ff 24       	eor	r15, r15
    9c2a:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    9c2c:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    9c2e:	41 ff       	sbrs	r20, 1
    9c30:	05 c0       	rjmp	.+10     	; 0x9c3c <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9c32:	7f ef       	ldi	r23, 0xFF	; 255
    9c34:	76 0f       	add	r23, r22
		dy=-1;
    9c36:	ee 24       	eor	r14, r14
    9c38:	ea 94       	dec	r14
    9c3a:	03 c0       	rjmp	.+6      	; 0x9c42 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    9c3c:	ee 24       	eor	r14, r14
    9c3e:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    9c40:	70 e0       	ldi	r23, 0x00	; 0
    9c42:	21 11       	cpse	r18, r1
    9c44:	01 c0       	rjmp	.+2      	; 0x9c48 <LBMapSprite+0x4c>
    9c46:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9c48:	00 e0       	ldi	r16, 0x00	; 0
    9c4a:	06 17       	cp	r16, r22
    9c4c:	09 f1       	breq	.+66     	; 0x9c90 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9c4e:	71 03       	mulsu	r23, r17
    9c50:	e0 01       	movw	r28, r0
    9c52:	11 24       	eor	r1, r1
    9c54:	d8 2e       	mov	r13, r24
    9c56:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    9c58:	8d 15       	cp	r24, r13
    9c5a:	b1 f0       	breq	.+44     	; 0x9c88 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9c5c:	9e 01       	movw	r18, r28
    9c5e:	29 0f       	add	r18, r25
    9c60:	31 1d       	adc	r19, r1
    9c62:	97 fd       	sbrc	r25, 7
    9c64:	3a 95       	dec	r19
    9c66:	2e 5f       	subi	r18, 0xFE	; 254
    9c68:	3f 4f       	sbci	r19, 0xFF	; 255
    9c6a:	fd 01       	movw	r30, r26
    9c6c:	e2 0f       	add	r30, r18
    9c6e:	f3 1f       	adc	r31, r19
    9c70:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    9c72:	34 e0       	ldi	r19, 0x04	; 4
    9c74:	83 9f       	mul	r24, r19
    9c76:	f0 01       	movw	r30, r0
    9c78:	11 24       	eor	r1, r1
    9c7a:	ed 51       	subi	r30, 0x1D	; 29
    9c7c:	f0 4f       	sbci	r31, 0xF0	; 240
    9c7e:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    9c80:	8f 5f       	subi	r24, 0xFF	; 255
    9c82:	43 83       	std	Z+3, r20	; 0x03
    9c84:	9f 0d       	add	r25, r15
    9c86:	e8 cf       	rjmp	.-48     	; 0x9c58 <LBMapSprite+0x5c>
    9c88:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9c8a:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9c8c:	95 2f       	mov	r25, r21
    9c8e:	dd cf       	rjmp	.-70     	; 0x9c4a <LBMapSprite+0x4e>
	}
}
    9c90:	df 91       	pop	r29
    9c92:	cf 91       	pop	r28
    9c94:	1f 91       	pop	r17
    9c96:	0f 91       	pop	r16
    9c98:	ff 90       	pop	r15
    9c9a:	ef 90       	pop	r14
    9c9c:	df 90       	pop	r13
    9c9e:	08 95       	ret

00009ca0 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    9ca0:	df 92       	push	r13
    9ca2:	ef 92       	push	r14
    9ca4:	ff 92       	push	r15
    9ca6:	0f 93       	push	r16
    9ca8:	1f 93       	push	r17
    9caa:	cf 93       	push	r28
    9cac:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9cae:	a0 91 b7 0c 	lds	r26, 0x0CB7
    9cb2:	98 e0       	ldi	r25, 0x08	; 8
    9cb4:	a9 9f       	mul	r26, r25
    9cb6:	70 01       	movw	r14, r0
    9cb8:	11 24       	eor	r1, r1
    9cba:	50 e0       	ldi	r21, 0x00	; 0
    9cbc:	38 ef       	ldi	r19, 0xF8	; 248
    9cbe:	a3 9f       	mul	r26, r19
    9cc0:	30 2d       	mov	r19, r0
    9cc2:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9cc4:	70 e0       	ldi	r23, 0x00	; 0
    9cc6:	70 17       	cp	r23, r16
    9cc8:	09 f1       	breq	.+66     	; 0x9d0c <LBMoveSprite+0x6c>
    9cca:	d4 2e       	mov	r13, r20
    9ccc:	13 2f       	mov	r17, r19
    9cce:	14 0f       	add	r17, r20
    9cd0:	b8 2f       	mov	r27, r24
    9cd2:	b2 0f       	add	r27, r18
    9cd4:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9cd6:	8b 17       	cp	r24, r27
    9cd8:	a9 f0       	breq	.+42     	; 0x9d04 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9cda:	c4 e0       	ldi	r28, 0x04	; 4
    9cdc:	8c 9f       	mul	r24, r28
    9cde:	f0 01       	movw	r30, r0
    9ce0:	11 24       	eor	r1, r1
    9ce2:	ef 01       	movw	r28, r30
    9ce4:	cd 51       	subi	r28, 0x1D	; 29
    9ce6:	d0 4f       	sbci	r29, 0xF0	; 240
    9ce8:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9cea:	a0 32       	cpi	r26, 0x20	; 32
    9cec:	28 f4       	brcc	.+10     	; 0x9cf8 <LBMoveSprite+0x58>
    9cee:	e4 16       	cp	r14, r20
    9cf0:	f5 06       	cpc	r15, r21
    9cf2:	14 f4       	brge	.+4      	; 0x9cf8 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9cf4:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9cf6:	03 c0       	rjmp	.+6      	; 0x9cfe <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9cf8:	ed 51       	subi	r30, 0x1D	; 29
    9cfa:	f0 4f       	sbci	r31, 0xF0	; 240
    9cfc:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    9cfe:	8f 5f       	subi	r24, 0xFF	; 255
    9d00:	98 5f       	subi	r25, 0xF8	; 248
    9d02:	e9 cf       	rjmp	.-46     	; 0x9cd6 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9d04:	7f 5f       	subi	r23, 0xFF	; 255
    9d06:	48 5f       	subi	r20, 0xF8	; 248
    9d08:	5f 4f       	sbci	r21, 0xFF	; 255
    9d0a:	dd cf       	rjmp	.-70     	; 0x9cc6 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9d0c:	df 91       	pop	r29
    9d0e:	cf 91       	pop	r28
    9d10:	1f 91       	pop	r17
    9d12:	0f 91       	pop	r16
    9d14:	ff 90       	pop	r15
    9d16:	ef 90       	pop	r14
    9d18:	df 90       	pop	r13
    9d1a:	08 95       	ret

00009d1c <LBRotateSprites>:

void LBRotateSprites()
{
    9d1c:	80 e0       	ldi	r24, 0x00	; 0
    9d1e:	90 e0       	ldi	r25, 0x00	; 0
    9d20:	dc 01       	movw	r26, r24
    9d22:	ad 51       	subi	r26, 0x1D	; 29
    9d24:	b0 4f       	sbci	r27, 0xF0	; 240
    9d26:	fc 01       	movw	r30, r24
    9d28:	e0 5f       	subi	r30, 0xF0	; 240
    9d2a:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9d2c:	13 96       	adiw	r26, 0x03	; 3
    9d2e:	2c 91       	ld	r18, X
    9d30:	13 97       	sbiw	r26, 0x03	; 3
    9d32:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9d34:	12 96       	adiw	r26, 0x02	; 2
    9d36:	2c 91       	ld	r18, X
    9d38:	12 97       	sbiw	r26, 0x02	; 2
    9d3a:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9d3c:	2c 91       	ld	r18, X
    9d3e:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9d40:	11 96       	adiw	r26, 0x01	; 1
    9d42:	2c 91       	ld	r18, X
    9d44:	21 83       	std	Z+1, r18	; 0x01
    9d46:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    9d48:	8c 33       	cpi	r24, 0x3C	; 60
    9d4a:	91 05       	cpc	r25, r1
    9d4c:	49 f7       	brne	.-46     	; 0x9d20 <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    9d4e:	80 91 01 05 	lds	r24, 0x0501
    9d52:	94 e0       	ldi	r25, 0x04	; 4
    9d54:	89 9f       	mul	r24, r25
    9d56:	f0 01       	movw	r30, r0
    9d58:	11 24       	eor	r1, r1
    9d5a:	ed 51       	subi	r30, 0x1D	; 29
    9d5c:	f0 4f       	sbci	r31, 0xF0	; 240
    9d5e:	93 81       	ldd	r25, Z+3	; 0x03
    9d60:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9d64:	92 81       	ldd	r25, Z+2	; 0x02
    9d66:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    9d6a:	90 81       	ld	r25, Z
    9d6c:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    9d70:	91 81       	ldd	r25, Z+1	; 0x01
    9d72:	90 93 4d 05 	sts	0x054D, r25
		if (++rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9d76:	8f 5f       	subi	r24, 0xFF	; 255
    9d78:	84 31       	cpi	r24, 0x14	; 20
    9d7a:	08 f0       	brcs	.+2      	; 0x9d7e <LBRotateSprites+0x62>
    9d7c:	8f e0       	ldi	r24, 0x0F	; 15
    9d7e:	80 93 01 05 	sts	0x0501, r24
    9d82:	08 95       	ret

00009d84 <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9d84:	80 91 cd 0d 	lds	r24, 0x0DCD
}
    9d88:	81 70       	andi	r24, 0x01	; 1
    9d8a:	08 95       	ret

00009d8c <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    9d8c:	8e e8       	ldi	r24, 0x8E	; 142
    9d8e:	90 e0       	ldi	r25, 0x00	; 0
    9d90:	90 93 99 0d 	sts	0x0D99, r25
    9d94:	80 93 98 0d 	sts	0x0D98, r24
    9d98:	80 e0       	ldi	r24, 0x00	; 0
    9d9a:	90 e0       	ldi	r25, 0x00	; 0
    9d9c:	fc 01       	movw	r30, r24
    9d9e:	e3 50       	subi	r30, 0x03	; 3
    9da0:	fd 4f       	sbci	r31, 0xFD	; 253
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9da2:	e4 91       	lpm	r30, Z
    9da4:	dc 01       	movw	r26, r24
    9da6:	a8 56       	subi	r26, 0x68	; 104
    9da8:	b2 4f       	sbci	r27, 0xF2	; 242
    9daa:	12 96       	adiw	r26, 0x02	; 2
    9dac:	ec 93       	st	X, r30
    9dae:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9db0:	8e 31       	cpi	r24, 0x1E	; 30
    9db2:	91 05       	cpc	r25, r1
    9db4:	99 f7       	brne	.-26     	; 0x9d9c <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9db6:	08 95       	ret

00009db8 <init_enemy_state>:

void init_enemy_state()
{
    9db8:	80 e0       	ldi	r24, 0x00	; 0
    9dba:	90 e0       	ldi	r25, 0x00	; 0
    9dbc:	9c 01       	movw	r18, r24
    9dbe:	28 54       	subi	r18, 0x48	; 72
    9dc0:	32 4f       	sbci	r19, 0xF2	; 242
    9dc2:	f9 01       	movw	r30, r18
    9dc4:	e3 5e       	subi	r30, 0xE3	; 227
    9dc6:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    9dc8:	10 82       	st	Z, r1
    9dca:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    9dcc:	10 82       	st	Z, r1
    9dce:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9dd0:	89 30       	cpi	r24, 0x09	; 9
    9dd2:	21 e0       	ldi	r18, 0x01	; 1
    9dd4:	92 07       	cpc	r25, r18
    9dd6:	91 f7       	brne	.-28     	; 0x9dbc <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    9dd8:	10 92 d3 0d 	sts	0x0DD3, r1
    9ddc:	08 95       	ret

00009dde <init_player_shot>:
	shot->active = 0;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    9dde:	81 11       	cpse	r24, r1
    9de0:	3f c0       	rjmp	.+126    	; 0x9e60 <init_player_shot+0x82>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9de2:	10 92 ef 0d 	sts	0x0DEF, r1
	shot->hit_count = damage;
    9de6:	81 e0       	ldi	r24, 0x01	; 1
    9de8:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->shot_speed = speed;
    9dec:	90 e5       	ldi	r25, 0x50	; 80
    9dee:	90 93 f2 0d 	sts	0x0DF2, r25
	shot->y_delta = y_delta;
    9df2:	10 92 f3 0d 	sts	0x0DF3, r1
	shot->anim.anim_count = 1;
    9df6:	80 93 f5 0d 	sts	0x0DF5, r24
	shot->anim.frames_per_anim = 1;
    9dfa:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.anims = anim;
    9dfe:	2c e8       	ldi	r18, 0x8C	; 140
    9e00:	3d e0       	ldi	r19, 0x0D	; 13
    9e02:	30 93 fb 0d 	sts	0x0DFB, r19
    9e06:	20 93 fa 0d 	sts	0x0DFA, r18
	shot->anim.anims[0] = (char*) map;
    9e0a:	2d e7       	ldi	r18, 0x7D	; 125
    9e0c:	3f e2       	ldi	r19, 0x2F	; 47
    9e0e:	30 93 8d 0d 	sts	0x0D8D, r19
    9e12:	20 93 8c 0d 	sts	0x0D8C, r18
	shot->shared.vx = speed;
    9e16:	90 93 ed 0d 	sts	0x0DED, r25
	shot->shared.vy = 0;
    9e1a:	10 92 ec 0d 	sts	0x0DEC, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9e1e:	10 92 f1 0d 	sts	0x0DF1, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9e22:	10 92 03 0e 	sts	0x0E03, r1
	shot->hit_count = damage;
    9e26:	80 93 04 0e 	sts	0x0E04, r24
	shot->shot_speed = speed;
    9e2a:	90 93 06 0e 	sts	0x0E06, r25
	shot->y_delta = y_delta;
    9e2e:	10 92 07 0e 	sts	0x0E07, r1
	shot->anim.anim_count = 1;
    9e32:	80 93 09 0e 	sts	0x0E09, r24
	shot->anim.frames_per_anim = 1;
    9e36:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.anims = anim;
    9e3a:	4f e3       	ldi	r20, 0x3F	; 63
    9e3c:	50 e1       	ldi	r21, 0x10	; 16
    9e3e:	50 93 0f 0e 	sts	0x0E0F, r21
    9e42:	40 93 0e 0e 	sts	0x0E0E, r20
	shot->anim.anims[0] = (char*) map;
    9e46:	30 93 40 10 	sts	0x1040, r19
    9e4a:	20 93 3f 10 	sts	0x103F, r18
	shot->shared.vx = speed;
    9e4e:	90 93 01 0e 	sts	0x0E01, r25
	shot->shared.vy = 0;
    9e52:	10 92 00 0e 	sts	0x0E00, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9e56:	10 92 05 0e 	sts	0x0E05, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9e5a:	10 92 17 0e 	sts	0x0E17, r1
    9e5e:	41 c0       	rjmp	.+130    	; 0x9ee2 <init_player_shot+0x104>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    9e60:	82 30       	cpi	r24, 0x02	; 2
    9e62:	09 f0       	breq	.+2      	; 0x9e66 <init_player_shot+0x88>
    9e64:	57 c0       	rjmp	.+174    	; 0x9f14 <init_player_shot+0x136>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9e66:	81 e0       	ldi	r24, 0x01	; 1
    9e68:	80 93 ef 0d 	sts	0x0DEF, r24
	shot->hit_count = damage;
    9e6c:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->shot_speed = speed;
    9e70:	94 e6       	ldi	r25, 0x64	; 100
    9e72:	90 93 f2 0d 	sts	0x0DF2, r25
	shot->y_delta = y_delta;
    9e76:	10 92 f3 0d 	sts	0x0DF3, r1
	shot->anim.anim_count = 1;
    9e7a:	80 93 f5 0d 	sts	0x0DF5, r24
	shot->anim.frames_per_anim = 1;
    9e7e:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.anims = anim;
    9e82:	2c e8       	ldi	r18, 0x8C	; 140
    9e84:	3d e0       	ldi	r19, 0x0D	; 13
    9e86:	30 93 fb 0d 	sts	0x0DFB, r19
    9e8a:	20 93 fa 0d 	sts	0x0DFA, r18
	shot->anim.anims[0] = (char*) map;
    9e8e:	2a e7       	ldi	r18, 0x7A	; 122
    9e90:	3f e2       	ldi	r19, 0x2F	; 47
    9e92:	30 93 8d 0d 	sts	0x0D8D, r19
    9e96:	20 93 8c 0d 	sts	0x0D8C, r18
	shot->shared.vx = speed;
    9e9a:	90 93 ed 0d 	sts	0x0DED, r25
	shot->shared.vy = 0;
    9e9e:	10 92 ec 0d 	sts	0x0DEC, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9ea2:	10 92 f1 0d 	sts	0x0DF1, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9ea6:	80 93 03 0e 	sts	0x0E03, r24
	shot->hit_count = damage;
    9eaa:	80 93 04 0e 	sts	0x0E04, r24
	shot->shot_speed = speed;
    9eae:	90 93 06 0e 	sts	0x0E06, r25
	shot->y_delta = y_delta;
    9eb2:	10 92 07 0e 	sts	0x0E07, r1
	shot->anim.anim_count = 1;
    9eb6:	80 93 09 0e 	sts	0x0E09, r24
	shot->anim.frames_per_anim = 1;
    9eba:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.anims = anim;
    9ebe:	4f e3       	ldi	r20, 0x3F	; 63
    9ec0:	50 e1       	ldi	r21, 0x10	; 16
    9ec2:	50 93 0f 0e 	sts	0x0E0F, r21
    9ec6:	40 93 0e 0e 	sts	0x0E0E, r20
	shot->anim.anims[0] = (char*) map;
    9eca:	30 93 40 10 	sts	0x1040, r19
    9ece:	20 93 3f 10 	sts	0x103F, r18
	shot->shared.vx = speed;
    9ed2:	90 93 01 0e 	sts	0x0E01, r25
	shot->shared.vy = 0;
    9ed6:	10 92 00 0e 	sts	0x0E00, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9eda:	10 92 05 0e 	sts	0x0E05, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9ede:	80 93 17 0e 	sts	0x0E17, r24
	shot->hit_count = damage;
    9ee2:	80 93 18 0e 	sts	0x0E18, r24
	shot->shot_speed = speed;
    9ee6:	90 93 1a 0e 	sts	0x0E1A, r25
	shot->y_delta = y_delta;
    9eea:	10 92 1b 0e 	sts	0x0E1B, r1
	shot->anim.anim_count = 1;
    9eee:	80 93 1d 0e 	sts	0x0E1D, r24
	shot->anim.frames_per_anim = 1;
    9ef2:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.anims = anim;
    9ef6:	4f e4       	ldi	r20, 0x4F	; 79
    9ef8:	50 e1       	ldi	r21, 0x10	; 16
    9efa:	50 93 23 0e 	sts	0x0E23, r21
    9efe:	40 93 22 0e 	sts	0x0E22, r20
	shot->anim.anims[0] = (char*) map;
    9f02:	30 93 50 10 	sts	0x1050, r19
    9f06:	20 93 4f 10 	sts	0x104F, r18
	shot->shared.vx = speed;
    9f0a:	90 93 15 0e 	sts	0x0E15, r25
	shot->shared.vy = 0;
    9f0e:	10 92 14 0e 	sts	0x0E14, r1
    9f12:	7f c1       	rjmp	.+766    	; 0xa212 <init_player_shot+0x434>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    9f14:	84 30       	cpi	r24, 0x04	; 4
    9f16:	09 f0       	breq	.+2      	; 0x9f1a <init_player_shot+0x13c>
    9f18:	5a c0       	rjmp	.+180    	; 0x9fce <init_player_shot+0x1f0>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f1a:	80 93 ef 0d 	sts	0x0DEF, r24
	shot->hit_count = damage;
    9f1e:	81 e0       	ldi	r24, 0x01	; 1
    9f20:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->shot_speed = speed;
    9f24:	9f e7       	ldi	r25, 0x7F	; 127
    9f26:	90 93 f2 0d 	sts	0x0DF2, r25
	shot->y_delta = y_delta;
    9f2a:	28 ef       	ldi	r18, 0xF8	; 248
    9f2c:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->anim.anim_count = 1;
    9f30:	80 93 f5 0d 	sts	0x0DF5, r24
	shot->anim.frames_per_anim = 1;
    9f34:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.anims = anim;
    9f38:	2c e8       	ldi	r18, 0x8C	; 140
    9f3a:	3d e0       	ldi	r19, 0x0D	; 13
    9f3c:	30 93 fb 0d 	sts	0x0DFB, r19
    9f40:	20 93 fa 0d 	sts	0x0DFA, r18
	shot->anim.anims[0] = (char*) map;
    9f44:	2d e7       	ldi	r18, 0x7D	; 125
    9f46:	3f e2       	ldi	r19, 0x2F	; 47
    9f48:	30 93 8d 0d 	sts	0x0D8D, r19
    9f4c:	20 93 8c 0d 	sts	0x0D8C, r18
	shot->shared.vx = speed;
    9f50:	90 93 ed 0d 	sts	0x0DED, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    9f54:	21 e8       	ldi	r18, 0x81	; 129
    9f56:	20 93 ec 0d 	sts	0x0DEC, r18
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9f5a:	10 92 f1 0d 	sts	0x0DF1, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f5e:	22 e0       	ldi	r18, 0x02	; 2
    9f60:	20 93 03 0e 	sts	0x0E03, r18
	shot->hit_count = damage;
    9f64:	80 93 04 0e 	sts	0x0E04, r24
	shot->shot_speed = speed;
    9f68:	90 93 06 0e 	sts	0x0E06, r25
	shot->y_delta = y_delta;
    9f6c:	10 92 07 0e 	sts	0x0E07, r1
	shot->anim.anim_count = 1;
    9f70:	80 93 09 0e 	sts	0x0E09, r24
	shot->anim.frames_per_anim = 1;
    9f74:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.anims = anim;
    9f78:	4f e3       	ldi	r20, 0x3F	; 63
    9f7a:	50 e1       	ldi	r21, 0x10	; 16
    9f7c:	50 93 0f 0e 	sts	0x0E0F, r21
    9f80:	40 93 0e 0e 	sts	0x0E0E, r20
	shot->anim.anims[0] = (char*) map;
    9f84:	41 e7       	ldi	r20, 0x71	; 113
    9f86:	5f e2       	ldi	r21, 0x2F	; 47
    9f88:	50 93 40 10 	sts	0x1040, r21
    9f8c:	40 93 3f 10 	sts	0x103F, r20
	shot->shared.vx = speed;
    9f90:	90 93 01 0e 	sts	0x0E01, r25
	shot->shared.vy = 0;
    9f94:	10 92 00 0e 	sts	0x0E00, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9f98:	10 92 05 0e 	sts	0x0E05, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f9c:	20 93 17 0e 	sts	0x0E17, r18
	shot->hit_count = damage;
    9fa0:	80 93 18 0e 	sts	0x0E18, r24
	shot->shot_speed = speed;
    9fa4:	90 93 1a 0e 	sts	0x0E1A, r25
	shot->y_delta = y_delta;
    9fa8:	10 92 1b 0e 	sts	0x0E1B, r1
	shot->anim.anim_count = 1;
    9fac:	80 93 1d 0e 	sts	0x0E1D, r24
	shot->anim.frames_per_anim = 1;
    9fb0:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.anims = anim;
    9fb4:	6f e4       	ldi	r22, 0x4F	; 79
    9fb6:	70 e1       	ldi	r23, 0x10	; 16
    9fb8:	70 93 23 0e 	sts	0x0E23, r23
    9fbc:	60 93 22 0e 	sts	0x0E22, r22
	shot->anim.anims[0] = (char*) map;
    9fc0:	50 93 50 10 	sts	0x1050, r21
    9fc4:	40 93 4f 10 	sts	0x104F, r20
	shot->shared.vx = speed;
    9fc8:	90 93 15 0e 	sts	0x0E15, r25
    9fcc:	5c c0       	rjmp	.+184    	; 0xa086 <init_player_shot+0x2a8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    9fce:	86 30       	cpi	r24, 0x06	; 6
    9fd0:	09 f0       	breq	.+2      	; 0x9fd4 <init_player_shot+0x1f6>
    9fd2:	60 c0       	rjmp	.+192    	; 0xa094 <init_player_shot+0x2b6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fd4:	33 e0       	ldi	r19, 0x03	; 3
    9fd6:	30 93 ef 0d 	sts	0x0DEF, r19
	shot->hit_count = damage;
    9fda:	22 e0       	ldi	r18, 0x02	; 2
    9fdc:	20 93 f0 0d 	sts	0x0DF0, r18
	shot->shot_speed = speed;
    9fe0:	8f e7       	ldi	r24, 0x7F	; 127
    9fe2:	80 93 f2 0d 	sts	0x0DF2, r24
	shot->y_delta = y_delta;
    9fe6:	98 ef       	ldi	r25, 0xF8	; 248
    9fe8:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->anim.anim_count = 1;
    9fec:	91 e0       	ldi	r25, 0x01	; 1
    9fee:	90 93 f5 0d 	sts	0x0DF5, r25
	shot->anim.frames_per_anim = 1;
    9ff2:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.anims = anim;
    9ff6:	4c e8       	ldi	r20, 0x8C	; 140
    9ff8:	5d e0       	ldi	r21, 0x0D	; 13
    9ffa:	50 93 fb 0d 	sts	0x0DFB, r21
    9ffe:	40 93 fa 0d 	sts	0x0DFA, r20
	shot->anim.anims[0] = (char*) map;
    a002:	40 e8       	ldi	r20, 0x80	; 128
    a004:	5f e2       	ldi	r21, 0x2F	; 47
    a006:	50 93 8d 0d 	sts	0x0D8D, r21
    a00a:	40 93 8c 0d 	sts	0x0D8C, r20
	shot->shared.vx = speed;
    a00e:	80 93 ed 0d 	sts	0x0DED, r24
	shot->shared.vy = 0;
    a012:	10 92 ec 0d 	sts	0x0DEC, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a016:	10 92 f1 0d 	sts	0x0DF1, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a01a:	20 93 03 0e 	sts	0x0E03, r18
	shot->hit_count = damage;
    a01e:	20 93 04 0e 	sts	0x0E04, r18
	shot->shot_speed = speed;
    a022:	80 93 06 0e 	sts	0x0E06, r24
	shot->y_delta = y_delta;
    a026:	10 92 07 0e 	sts	0x0E07, r1
	shot->anim.anim_count = 1;
    a02a:	90 93 09 0e 	sts	0x0E09, r25
	shot->anim.frames_per_anim = 1;
    a02e:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.anims = anim;
    a032:	6f e3       	ldi	r22, 0x3F	; 63
    a034:	70 e1       	ldi	r23, 0x10	; 16
    a036:	70 93 0f 0e 	sts	0x0E0F, r23
    a03a:	60 93 0e 0e 	sts	0x0E0E, r22
	shot->anim.anims[0] = (char*) map;
    a03e:	61 e7       	ldi	r22, 0x71	; 113
    a040:	7f e2       	ldi	r23, 0x2F	; 47
    a042:	70 93 40 10 	sts	0x1040, r23
    a046:	60 93 3f 10 	sts	0x103F, r22
	shot->shared.vx = speed;
    a04a:	80 93 01 0e 	sts	0x0E01, r24
	shot->shared.vy = 0;
    a04e:	10 92 00 0e 	sts	0x0E00, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a052:	10 92 05 0e 	sts	0x0E05, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a056:	30 93 17 0e 	sts	0x0E17, r19
	shot->hit_count = damage;
    a05a:	20 93 18 0e 	sts	0x0E18, r18
	shot->shot_speed = speed;
    a05e:	80 93 1a 0e 	sts	0x0E1A, r24
	shot->y_delta = y_delta;
    a062:	10 92 1b 0e 	sts	0x0E1B, r1
	shot->anim.anim_count = 1;
    a066:	90 93 1d 0e 	sts	0x0E1D, r25
	shot->anim.frames_per_anim = 1;
    a06a:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.anims = anim;
    a06e:	6f e4       	ldi	r22, 0x4F	; 79
    a070:	70 e1       	ldi	r23, 0x10	; 16
    a072:	70 93 23 0e 	sts	0x0E23, r23
    a076:	60 93 22 0e 	sts	0x0E22, r22
	shot->anim.anims[0] = (char*) map;
    a07a:	50 93 50 10 	sts	0x1050, r21
    a07e:	40 93 4f 10 	sts	0x104F, r20
	shot->shared.vx = speed;
    a082:	80 93 15 0e 	sts	0x0E15, r24
	shot->shared.vy = 0;
    a086:	10 92 14 0e 	sts	0x0E14, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a08a:	10 92 19 0e 	sts	0x0E19, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a08e:	20 93 e6 0d 	sts	0x0DE6, r18
    a092:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a094:	88 30       	cpi	r24, 0x08	; 8
    a096:	09 f0       	breq	.+2      	; 0xa09a <init_player_shot+0x2bc>
    a098:	60 c0       	rjmp	.+192    	; 0xa15a <init_player_shot+0x37c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a09a:	33 e0       	ldi	r19, 0x03	; 3
    a09c:	30 93 ef 0d 	sts	0x0DEF, r19
	shot->hit_count = damage;
    a0a0:	62 e0       	ldi	r22, 0x02	; 2
    a0a2:	60 93 f0 0d 	sts	0x0DF0, r22
	shot->shot_speed = speed;
    a0a6:	2f e7       	ldi	r18, 0x7F	; 127
    a0a8:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->y_delta = y_delta;
    a0ac:	98 ef       	ldi	r25, 0xF8	; 248
    a0ae:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->anim.anim_count = 1;
    a0b2:	91 e0       	ldi	r25, 0x01	; 1
    a0b4:	90 93 f5 0d 	sts	0x0DF5, r25
	shot->anim.frames_per_anim = 1;
    a0b8:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.anims = anim;
    a0bc:	4c e8       	ldi	r20, 0x8C	; 140
    a0be:	5d e0       	ldi	r21, 0x0D	; 13
    a0c0:	50 93 fb 0d 	sts	0x0DFB, r21
    a0c4:	40 93 fa 0d 	sts	0x0DFA, r20
	shot->anim.anims[0] = (char*) map;
    a0c8:	40 e8       	ldi	r20, 0x80	; 128
    a0ca:	5f e2       	ldi	r21, 0x2F	; 47
    a0cc:	50 93 8d 0d 	sts	0x0D8D, r21
    a0d0:	40 93 8c 0d 	sts	0x0D8C, r20
	shot->shared.vx = speed;
    a0d4:	20 93 ed 0d 	sts	0x0DED, r18
	shot->shared.vy = 0;
    a0d8:	10 92 ec 0d 	sts	0x0DEC, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a0dc:	10 92 f1 0d 	sts	0x0DF1, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a0e0:	90 93 03 0e 	sts	0x0E03, r25
	shot->hit_count = damage;
    a0e4:	90 93 04 0e 	sts	0x0E04, r25
	shot->shot_speed = speed;
    a0e8:	20 93 06 0e 	sts	0x0E06, r18
	shot->y_delta = y_delta;
    a0ec:	10 92 07 0e 	sts	0x0E07, r1
	shot->anim.anim_count = 1;
    a0f0:	90 93 09 0e 	sts	0x0E09, r25
	shot->anim.frames_per_anim = 1;
    a0f4:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.anims = anim;
    a0f8:	ef e3       	ldi	r30, 0x3F	; 63
    a0fa:	f0 e1       	ldi	r31, 0x10	; 16
    a0fc:	f0 93 0f 0e 	sts	0x0E0F, r31
    a100:	e0 93 0e 0e 	sts	0x0E0E, r30
	shot->anim.anims[0] = (char*) map;
    a104:	ea e7       	ldi	r30, 0x7A	; 122
    a106:	ff e2       	ldi	r31, 0x2F	; 47
    a108:	f0 93 40 10 	sts	0x1040, r31
    a10c:	e0 93 3f 10 	sts	0x103F, r30
	shot->shared.vx = speed;
    a110:	20 93 01 0e 	sts	0x0E01, r18
	shot->shared.vy = 0;
    a114:	10 92 00 0e 	sts	0x0E00, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a118:	10 92 05 0e 	sts	0x0E05, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a11c:	30 93 17 0e 	sts	0x0E17, r19
	shot->hit_count = damage;
    a120:	60 93 18 0e 	sts	0x0E18, r22
	shot->shot_speed = speed;
    a124:	20 93 1a 0e 	sts	0x0E1A, r18
	shot->y_delta = y_delta;
    a128:	80 93 1b 0e 	sts	0x0E1B, r24
	shot->anim.anim_count = 1;
    a12c:	90 93 1d 0e 	sts	0x0E1D, r25
	shot->anim.frames_per_anim = 1;
    a130:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.anims = anim;
    a134:	8f e4       	ldi	r24, 0x4F	; 79
    a136:	90 e1       	ldi	r25, 0x10	; 16
    a138:	90 93 23 0e 	sts	0x0E23, r25
    a13c:	80 93 22 0e 	sts	0x0E22, r24
	shot->anim.anims[0] = (char*) map;
    a140:	50 93 50 10 	sts	0x1050, r21
    a144:	40 93 4f 10 	sts	0x104F, r20
	shot->shared.vx = speed;
    a148:	20 93 15 0e 	sts	0x0E15, r18
	shot->shared.vy = 0;
    a14c:	10 92 14 0e 	sts	0x0E14, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a150:	10 92 19 0e 	sts	0x0E19, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a154:	30 93 e6 0d 	sts	0x0DE6, r19
    a158:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a15a:	55 e0       	ldi	r21, 0x05	; 5
    a15c:	50 93 ef 0d 	sts	0x0DEF, r21
	shot->hit_count = damage;
    a160:	42 e0       	ldi	r20, 0x02	; 2
    a162:	40 93 f0 0d 	sts	0x0DF0, r20
	shot->shot_speed = speed;
    a166:	9f e7       	ldi	r25, 0x7F	; 127
    a168:	90 93 f2 0d 	sts	0x0DF2, r25
	shot->y_delta = y_delta;
    a16c:	10 92 f3 0d 	sts	0x0DF3, r1
	shot->anim.anim_count = 1;
    a170:	81 e0       	ldi	r24, 0x01	; 1
    a172:	80 93 f5 0d 	sts	0x0DF5, r24
	shot->anim.frames_per_anim = 1;
    a176:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.anims = anim;
    a17a:	2c e8       	ldi	r18, 0x8C	; 140
    a17c:	3d e0       	ldi	r19, 0x0D	; 13
    a17e:	30 93 fb 0d 	sts	0x0DFB, r19
    a182:	20 93 fa 0d 	sts	0x0DFA, r18
	shot->anim.anims[0] = (char*) map;
    a186:	27 e7       	ldi	r18, 0x77	; 119
    a188:	3f e2       	ldi	r19, 0x2F	; 47
    a18a:	30 93 8d 0d 	sts	0x0D8D, r19
    a18e:	20 93 8c 0d 	sts	0x0D8C, r18
	shot->shared.vx = speed;
    a192:	90 93 ed 0d 	sts	0x0DED, r25
	shot->shared.vy = 0;
    a196:	10 92 ec 0d 	sts	0x0DEC, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a19a:	10 92 f1 0d 	sts	0x0DF1, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a19e:	50 93 03 0e 	sts	0x0E03, r21
	shot->hit_count = damage;
    a1a2:	40 93 04 0e 	sts	0x0E04, r20
	shot->shot_speed = speed;
    a1a6:	90 93 06 0e 	sts	0x0E06, r25
	shot->y_delta = y_delta;
    a1aa:	10 92 07 0e 	sts	0x0E07, r1
	shot->anim.anim_count = 1;
    a1ae:	80 93 09 0e 	sts	0x0E09, r24
	shot->anim.frames_per_anim = 1;
    a1b2:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.anims = anim;
    a1b6:	4f e3       	ldi	r20, 0x3F	; 63
    a1b8:	50 e1       	ldi	r21, 0x10	; 16
    a1ba:	50 93 0f 0e 	sts	0x0E0F, r21
    a1be:	40 93 0e 0e 	sts	0x0E0E, r20
	shot->anim.anims[0] = (char*) map;
    a1c2:	30 93 40 10 	sts	0x1040, r19
    a1c6:	20 93 3f 10 	sts	0x103F, r18
	shot->shared.vx = speed;
    a1ca:	90 93 01 0e 	sts	0x0E01, r25
	shot->shared.vy = 0;
    a1ce:	10 92 00 0e 	sts	0x0E00, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1d2:	10 92 05 0e 	sts	0x0E05, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1d6:	26 e0       	ldi	r18, 0x06	; 6
    a1d8:	20 93 17 0e 	sts	0x0E17, r18
	shot->hit_count = damage;
    a1dc:	24 e0       	ldi	r18, 0x04	; 4
    a1de:	20 93 18 0e 	sts	0x0E18, r18
	shot->shot_speed = speed;
    a1e2:	90 93 1a 0e 	sts	0x0E1A, r25
	shot->y_delta = y_delta;
    a1e6:	10 92 1b 0e 	sts	0x0E1B, r1
	shot->anim.anim_count = 1;
    a1ea:	80 93 1d 0e 	sts	0x0E1D, r24
	shot->anim.frames_per_anim = 1;
    a1ee:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.anims = anim;
    a1f2:	2f e4       	ldi	r18, 0x4F	; 79
    a1f4:	30 e1       	ldi	r19, 0x10	; 16
    a1f6:	30 93 23 0e 	sts	0x0E23, r19
    a1fa:	20 93 22 0e 	sts	0x0E22, r18
	shot->anim.anims[0] = (char*) map;
    a1fe:	24 e7       	ldi	r18, 0x74	; 116
    a200:	3f e2       	ldi	r19, 0x2F	; 47
    a202:	30 93 50 10 	sts	0x1050, r19
    a206:	20 93 4f 10 	sts	0x104F, r18
	shot->shared.vx = speed;
    a20a:	90 93 15 0e 	sts	0x0E15, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a20e:	90 93 14 0e 	sts	0x0E14, r25
	}
	shot->active = 0;
    a212:	10 92 19 0e 	sts	0x0E19, r1
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a216:	80 93 e6 0d 	sts	0x0DE6, r24
    a21a:	08 95       	ret

0000a21c <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a21c:	81 11       	cpse	r24, r1
    a21e:	55 c0       	rjmp	.+170    	; 0xa2ca <init_boss_shot+0xae>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a220:	81 e0       	ldi	r24, 0x01	; 1
    a222:	80 93 6a 0e 	sts	0x0E6A, r24
	shot->hit_count = damage;
    a226:	80 93 6b 0e 	sts	0x0E6B, r24
	shot->shot_speed = speed;
    a22a:	94 e6       	ldi	r25, 0x64	; 100
    a22c:	90 93 6d 0e 	sts	0x0E6D, r25
	shot->y_delta = y_delta;
    a230:	10 92 6e 0e 	sts	0x0E6E, r1
	shot->anim.anim_count = 1;
    a234:	80 93 70 0e 	sts	0x0E70, r24
	shot->anim.frames_per_anim = 1;
    a238:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.anims = anim;
    a23c:	29 ed       	ldi	r18, 0xD9	; 217
    a23e:	3f e0       	ldi	r19, 0x0F	; 15
    a240:	30 93 76 0e 	sts	0x0E76, r19
    a244:	20 93 75 0e 	sts	0x0E75, r18
	shot->anim.anims[0] = (char*) map;
    a248:	2a e7       	ldi	r18, 0x7A	; 122
    a24a:	3f e2       	ldi	r19, 0x2F	; 47
    a24c:	30 93 da 0f 	sts	0x0FDA, r19
    a250:	20 93 d9 0f 	sts	0x0FD9, r18
	shot->shared.vx = speed;
    a254:	90 93 68 0e 	sts	0x0E68, r25
	shot->shared.vy = 0;
    a258:	10 92 67 0e 	sts	0x0E67, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a25c:	10 92 6c 0e 	sts	0x0E6C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a260:	80 93 7e 0e 	sts	0x0E7E, r24
	shot->hit_count = damage;
    a264:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->shot_speed = speed;
    a268:	90 93 81 0e 	sts	0x0E81, r25
	shot->y_delta = y_delta;
    a26c:	10 92 82 0e 	sts	0x0E82, r1
	shot->anim.anim_count = 1;
    a270:	80 93 84 0e 	sts	0x0E84, r24
	shot->anim.frames_per_anim = 1;
    a274:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.anims = anim;
    a278:	43 e5       	ldi	r20, 0x53	; 83
    a27a:	50 e1       	ldi	r21, 0x10	; 16
    a27c:	50 93 8a 0e 	sts	0x0E8A, r21
    a280:	40 93 89 0e 	sts	0x0E89, r20
	shot->anim.anims[0] = (char*) map;
    a284:	30 93 54 10 	sts	0x1054, r19
    a288:	20 93 53 10 	sts	0x1053, r18
	shot->shared.vx = speed;
    a28c:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->shared.vy = 0;
    a290:	10 92 7b 0e 	sts	0x0E7B, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a294:	10 92 80 0e 	sts	0x0E80, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a298:	80 93 92 0e 	sts	0x0E92, r24
	shot->hit_count = damage;
    a29c:	80 93 93 0e 	sts	0x0E93, r24
	shot->shot_speed = speed;
    a2a0:	90 93 95 0e 	sts	0x0E95, r25
	shot->y_delta = y_delta;
    a2a4:	10 92 96 0e 	sts	0x0E96, r1
	shot->anim.anim_count = 1;
    a2a8:	80 93 98 0e 	sts	0x0E98, r24
	shot->anim.frames_per_anim = 1;
    a2ac:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.anims = anim;
    a2b0:	45 e3       	ldi	r20, 0x35	; 53
    a2b2:	50 e1       	ldi	r21, 0x10	; 16
    a2b4:	50 93 9e 0e 	sts	0x0E9E, r21
    a2b8:	40 93 9d 0e 	sts	0x0E9D, r20
	shot->anim.anims[0] = (char*) map;
    a2bc:	30 93 36 10 	sts	0x1036, r19
    a2c0:	20 93 35 10 	sts	0x1035, r18
	shot->shared.vx = speed;
    a2c4:	90 93 90 0e 	sts	0x0E90, r25
    a2c8:	5c c0       	rjmp	.+184    	; 0xa382 <init_boss_shot+0x166>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a2ca:	82 30       	cpi	r24, 0x02	; 2
    a2cc:	09 f0       	breq	.+2      	; 0xa2d0 <init_boss_shot+0xb4>
    a2ce:	5e c0       	rjmp	.+188    	; 0xa38c <init_boss_shot+0x170>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2d0:	94 e0       	ldi	r25, 0x04	; 4
    a2d2:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->hit_count = damage;
    a2d6:	91 e0       	ldi	r25, 0x01	; 1
    a2d8:	90 93 6b 0e 	sts	0x0E6B, r25
	shot->shot_speed = speed;
    a2dc:	2f e7       	ldi	r18, 0x7F	; 127
    a2de:	20 93 6d 0e 	sts	0x0E6D, r18
	shot->y_delta = y_delta;
    a2e2:	38 ef       	ldi	r19, 0xF8	; 248
    a2e4:	30 93 6e 0e 	sts	0x0E6E, r19
	shot->anim.anim_count = 1;
    a2e8:	90 93 70 0e 	sts	0x0E70, r25
	shot->anim.frames_per_anim = 1;
    a2ec:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.anims = anim;
    a2f0:	49 ed       	ldi	r20, 0xD9	; 217
    a2f2:	5f e0       	ldi	r21, 0x0F	; 15
    a2f4:	50 93 76 0e 	sts	0x0E76, r21
    a2f8:	40 93 75 0e 	sts	0x0E75, r20
	shot->anim.anims[0] = (char*) map;
    a2fc:	4d e7       	ldi	r20, 0x7D	; 125
    a2fe:	5f e2       	ldi	r21, 0x2F	; 47
    a300:	50 93 da 0f 	sts	0x0FDA, r21
    a304:	40 93 d9 0f 	sts	0x0FD9, r20
	shot->shared.vx = speed;
    a308:	20 93 68 0e 	sts	0x0E68, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a30c:	31 e8       	ldi	r19, 0x81	; 129
    a30e:	30 93 67 0e 	sts	0x0E67, r19
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a312:	10 92 6c 0e 	sts	0x0E6C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a316:	80 93 7e 0e 	sts	0x0E7E, r24
	shot->hit_count = damage;
    a31a:	90 93 7f 0e 	sts	0x0E7F, r25
	shot->shot_speed = speed;
    a31e:	20 93 81 0e 	sts	0x0E81, r18
	shot->y_delta = y_delta;
    a322:	10 92 82 0e 	sts	0x0E82, r1
	shot->anim.anim_count = 1;
    a326:	90 93 84 0e 	sts	0x0E84, r25
	shot->anim.frames_per_anim = 1;
    a32a:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.anims = anim;
    a32e:	43 e5       	ldi	r20, 0x53	; 83
    a330:	50 e1       	ldi	r21, 0x10	; 16
    a332:	50 93 8a 0e 	sts	0x0E8A, r21
    a336:	40 93 89 0e 	sts	0x0E89, r20
	shot->anim.anims[0] = (char*) map;
    a33a:	41 e7       	ldi	r20, 0x71	; 113
    a33c:	5f e2       	ldi	r21, 0x2F	; 47
    a33e:	50 93 54 10 	sts	0x1054, r21
    a342:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a346:	20 93 7c 0e 	sts	0x0E7C, r18
	shot->shared.vy = 0;
    a34a:	10 92 7b 0e 	sts	0x0E7B, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a34e:	10 92 80 0e 	sts	0x0E80, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a352:	80 93 92 0e 	sts	0x0E92, r24
	shot->hit_count = damage;
    a356:	90 93 93 0e 	sts	0x0E93, r25
	shot->shot_speed = speed;
    a35a:	20 93 95 0e 	sts	0x0E95, r18
	shot->y_delta = y_delta;
    a35e:	10 92 96 0e 	sts	0x0E96, r1
	shot->anim.anim_count = 1;
    a362:	90 93 98 0e 	sts	0x0E98, r25
	shot->anim.frames_per_anim = 1;
    a366:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.anims = anim;
    a36a:	65 e3       	ldi	r22, 0x35	; 53
    a36c:	70 e1       	ldi	r23, 0x10	; 16
    a36e:	70 93 9e 0e 	sts	0x0E9E, r23
    a372:	60 93 9d 0e 	sts	0x0E9D, r22
	shot->anim.anims[0] = (char*) map;
    a376:	50 93 36 10 	sts	0x1036, r21
    a37a:	40 93 35 10 	sts	0x1035, r20
	shot->shared.vx = speed;
    a37e:	20 93 90 0e 	sts	0x0E90, r18
	shot->shared.vy = 0;
    a382:	10 92 8f 0e 	sts	0x0E8F, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a386:	10 92 94 0e 	sts	0x0E94, r1
    a38a:	20 c1       	rjmp	.+576    	; 0xa5cc <init_boss_shot+0x3b0>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    a38c:	84 30       	cpi	r24, 0x04	; 4
    a38e:	09 f0       	breq	.+2      	; 0xa392 <init_boss_shot+0x176>
    a390:	5a c0       	rjmp	.+180    	; 0xa446 <init_boss_shot+0x22a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a392:	33 e0       	ldi	r19, 0x03	; 3
    a394:	30 93 6a 0e 	sts	0x0E6A, r19
	shot->hit_count = damage;
    a398:	22 e0       	ldi	r18, 0x02	; 2
    a39a:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->shot_speed = speed;
    a39e:	8f e7       	ldi	r24, 0x7F	; 127
    a3a0:	80 93 6d 0e 	sts	0x0E6D, r24
	shot->y_delta = y_delta;
    a3a4:	98 ef       	ldi	r25, 0xF8	; 248
    a3a6:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->anim.anim_count = 1;
    a3aa:	91 e0       	ldi	r25, 0x01	; 1
    a3ac:	90 93 70 0e 	sts	0x0E70, r25
	shot->anim.frames_per_anim = 1;
    a3b0:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.anims = anim;
    a3b4:	49 ed       	ldi	r20, 0xD9	; 217
    a3b6:	5f e0       	ldi	r21, 0x0F	; 15
    a3b8:	50 93 76 0e 	sts	0x0E76, r21
    a3bc:	40 93 75 0e 	sts	0x0E75, r20
	shot->anim.anims[0] = (char*) map;
    a3c0:	40 e8       	ldi	r20, 0x80	; 128
    a3c2:	5f e2       	ldi	r21, 0x2F	; 47
    a3c4:	50 93 da 0f 	sts	0x0FDA, r21
    a3c8:	40 93 d9 0f 	sts	0x0FD9, r20
	shot->shared.vx = speed;
    a3cc:	80 93 68 0e 	sts	0x0E68, r24
	shot->shared.vy = 0;
    a3d0:	10 92 67 0e 	sts	0x0E67, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3d4:	10 92 6c 0e 	sts	0x0E6C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3d8:	20 93 7e 0e 	sts	0x0E7E, r18
	shot->hit_count = damage;
    a3dc:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->shot_speed = speed;
    a3e0:	80 93 81 0e 	sts	0x0E81, r24
	shot->y_delta = y_delta;
    a3e4:	10 92 82 0e 	sts	0x0E82, r1
	shot->anim.anim_count = 1;
    a3e8:	90 93 84 0e 	sts	0x0E84, r25
	shot->anim.frames_per_anim = 1;
    a3ec:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.anims = anim;
    a3f0:	63 e5       	ldi	r22, 0x53	; 83
    a3f2:	70 e1       	ldi	r23, 0x10	; 16
    a3f4:	70 93 8a 0e 	sts	0x0E8A, r23
    a3f8:	60 93 89 0e 	sts	0x0E89, r22
	shot->anim.anims[0] = (char*) map;
    a3fc:	61 e7       	ldi	r22, 0x71	; 113
    a3fe:	7f e2       	ldi	r23, 0x2F	; 47
    a400:	70 93 54 10 	sts	0x1054, r23
    a404:	60 93 53 10 	sts	0x1053, r22
	shot->shared.vx = speed;
    a408:	80 93 7c 0e 	sts	0x0E7C, r24
	shot->shared.vy = 0;
    a40c:	10 92 7b 0e 	sts	0x0E7B, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a410:	10 92 80 0e 	sts	0x0E80, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a414:	30 93 92 0e 	sts	0x0E92, r19
	shot->hit_count = damage;
    a418:	20 93 93 0e 	sts	0x0E93, r18
	shot->shot_speed = speed;
    a41c:	80 93 95 0e 	sts	0x0E95, r24
	shot->y_delta = y_delta;
    a420:	10 92 96 0e 	sts	0x0E96, r1
	shot->anim.anim_count = 1;
    a424:	90 93 98 0e 	sts	0x0E98, r25
	shot->anim.frames_per_anim = 1;
    a428:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.anims = anim;
    a42c:	65 e3       	ldi	r22, 0x35	; 53
    a42e:	70 e1       	ldi	r23, 0x10	; 16
    a430:	70 93 9e 0e 	sts	0x0E9E, r23
    a434:	60 93 9d 0e 	sts	0x0E9D, r22
	shot->anim.anims[0] = (char*) map;
    a438:	50 93 36 10 	sts	0x1036, r21
    a43c:	40 93 35 10 	sts	0x1035, r20
	shot->shared.vx = speed;
    a440:	80 93 90 0e 	sts	0x0E90, r24
    a444:	5d c0       	rjmp	.+186    	; 0xa500 <init_boss_shot+0x2e4>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    a446:	86 30       	cpi	r24, 0x06	; 6
    a448:	09 f0       	breq	.+2      	; 0xa44c <init_boss_shot+0x230>
    a44a:	61 c0       	rjmp	.+194    	; 0xa50e <init_boss_shot+0x2f2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a44c:	23 e0       	ldi	r18, 0x03	; 3
    a44e:	20 93 6a 0e 	sts	0x0E6A, r18
	shot->hit_count = damage;
    a452:	32 e0       	ldi	r19, 0x02	; 2
    a454:	30 93 6b 0e 	sts	0x0E6B, r19
	shot->shot_speed = speed;
    a458:	9f e7       	ldi	r25, 0x7F	; 127
    a45a:	90 93 6d 0e 	sts	0x0E6D, r25
	shot->y_delta = y_delta;
    a45e:	88 ef       	ldi	r24, 0xF8	; 248
    a460:	80 93 6e 0e 	sts	0x0E6E, r24
	shot->anim.anim_count = 1;
    a464:	81 e0       	ldi	r24, 0x01	; 1
    a466:	80 93 70 0e 	sts	0x0E70, r24
	shot->anim.frames_per_anim = 1;
    a46a:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.anims = anim;
    a46e:	49 ed       	ldi	r20, 0xD9	; 217
    a470:	5f e0       	ldi	r21, 0x0F	; 15
    a472:	50 93 76 0e 	sts	0x0E76, r21
    a476:	40 93 75 0e 	sts	0x0E75, r20
	shot->anim.anims[0] = (char*) map;
    a47a:	40 e8       	ldi	r20, 0x80	; 128
    a47c:	5f e2       	ldi	r21, 0x2F	; 47
    a47e:	50 93 da 0f 	sts	0x0FDA, r21
    a482:	40 93 d9 0f 	sts	0x0FD9, r20
	shot->shared.vx = speed;
    a486:	90 93 68 0e 	sts	0x0E68, r25
	shot->shared.vy = 0;
    a48a:	10 92 67 0e 	sts	0x0E67, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a48e:	10 92 6c 0e 	sts	0x0E6C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a492:	80 93 7e 0e 	sts	0x0E7E, r24
	shot->hit_count = damage;
    a496:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->shot_speed = speed;
    a49a:	90 93 81 0e 	sts	0x0E81, r25
	shot->y_delta = y_delta;
    a49e:	10 92 82 0e 	sts	0x0E82, r1
	shot->anim.anim_count = 1;
    a4a2:	80 93 84 0e 	sts	0x0E84, r24
	shot->anim.frames_per_anim = 1;
    a4a6:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.anims = anim;
    a4aa:	63 e5       	ldi	r22, 0x53	; 83
    a4ac:	70 e1       	ldi	r23, 0x10	; 16
    a4ae:	70 93 8a 0e 	sts	0x0E8A, r23
    a4b2:	60 93 89 0e 	sts	0x0E89, r22
	shot->anim.anims[0] = (char*) map;
    a4b6:	6a e7       	ldi	r22, 0x7A	; 122
    a4b8:	7f e2       	ldi	r23, 0x2F	; 47
    a4ba:	70 93 54 10 	sts	0x1054, r23
    a4be:	60 93 53 10 	sts	0x1053, r22
	shot->shared.vx = speed;
    a4c2:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->shared.vy = 0;
    a4c6:	10 92 7b 0e 	sts	0x0E7B, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a4ca:	10 92 80 0e 	sts	0x0E80, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4ce:	20 93 92 0e 	sts	0x0E92, r18
	shot->hit_count = damage;
    a4d2:	30 93 93 0e 	sts	0x0E93, r19
	shot->shot_speed = speed;
    a4d6:	90 93 95 0e 	sts	0x0E95, r25
	shot->y_delta = y_delta;
    a4da:	38 e0       	ldi	r19, 0x08	; 8
    a4dc:	30 93 96 0e 	sts	0x0E96, r19
	shot->anim.anim_count = 1;
    a4e0:	80 93 98 0e 	sts	0x0E98, r24
	shot->anim.frames_per_anim = 1;
    a4e4:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.anims = anim;
    a4e8:	65 e3       	ldi	r22, 0x35	; 53
    a4ea:	70 e1       	ldi	r23, 0x10	; 16
    a4ec:	70 93 9e 0e 	sts	0x0E9E, r23
    a4f0:	60 93 9d 0e 	sts	0x0E9D, r22
	shot->anim.anims[0] = (char*) map;
    a4f4:	50 93 36 10 	sts	0x1036, r21
    a4f8:	40 93 35 10 	sts	0x1035, r20
	shot->shared.vx = speed;
    a4fc:	90 93 90 0e 	sts	0x0E90, r25
	shot->shared.vy = 0;
    a500:	10 92 8f 0e 	sts	0x0E8F, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a504:	10 92 94 0e 	sts	0x0E94, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a508:	20 93 61 0e 	sts	0x0E61, r18
    a50c:	08 95       	ret
	}
	else if (level == 8) // Dessert
    a50e:	88 30       	cpi	r24, 0x08	; 8
    a510:	09 f0       	breq	.+2      	; 0xa514 <init_boss_shot+0x2f8>
    a512:	5e c0       	rjmp	.+188    	; 0xa5d0 <init_boss_shot+0x3b4>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a514:	22 e0       	ldi	r18, 0x02	; 2
    a516:	20 93 6a 0e 	sts	0x0E6A, r18
	shot->hit_count = damage;
    a51a:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->shot_speed = speed;
    a51e:	3f e7       	ldi	r19, 0x7F	; 127
    a520:	30 93 6d 0e 	sts	0x0E6D, r19
	shot->y_delta = y_delta;
    a524:	98 ef       	ldi	r25, 0xF8	; 248
    a526:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->anim.anim_count = 1;
    a52a:	91 e0       	ldi	r25, 0x01	; 1
    a52c:	90 93 70 0e 	sts	0x0E70, r25
	shot->anim.frames_per_anim = 1;
    a530:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.anims = anim;
    a534:	49 ed       	ldi	r20, 0xD9	; 217
    a536:	5f e0       	ldi	r21, 0x0F	; 15
    a538:	50 93 76 0e 	sts	0x0E76, r21
    a53c:	40 93 75 0e 	sts	0x0E75, r20
	shot->anim.anims[0] = (char*) map;
    a540:	41 e7       	ldi	r20, 0x71	; 113
    a542:	5f e2       	ldi	r21, 0x2F	; 47
    a544:	50 93 da 0f 	sts	0x0FDA, r21
    a548:	40 93 d9 0f 	sts	0x0FD9, r20
	shot->shared.vx = speed;
    a54c:	30 93 68 0e 	sts	0x0E68, r19
	shot->shared.vy = 0;
    a550:	10 92 67 0e 	sts	0x0E67, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a554:	10 92 6c 0e 	sts	0x0E6C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a558:	20 93 7e 0e 	sts	0x0E7E, r18
	shot->hit_count = damage;
    a55c:	90 93 7f 0e 	sts	0x0E7F, r25
	shot->shot_speed = speed;
    a560:	64 e6       	ldi	r22, 0x64	; 100
    a562:	60 93 81 0e 	sts	0x0E81, r22
	shot->y_delta = y_delta;
    a566:	10 92 82 0e 	sts	0x0E82, r1
	shot->anim.anim_count = 1;
    a56a:	90 93 84 0e 	sts	0x0E84, r25
	shot->anim.frames_per_anim = 1;
    a56e:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.anims = anim;
    a572:	e3 e5       	ldi	r30, 0x53	; 83
    a574:	f0 e1       	ldi	r31, 0x10	; 16
    a576:	f0 93 8a 0e 	sts	0x0E8A, r31
    a57a:	e0 93 89 0e 	sts	0x0E89, r30
	shot->anim.anims[0] = (char*) map;
    a57e:	50 93 54 10 	sts	0x1054, r21
    a582:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a586:	60 93 7c 0e 	sts	0x0E7C, r22
	shot->shared.vy = 0;
    a58a:	10 92 7b 0e 	sts	0x0E7B, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a58e:	10 92 80 0e 	sts	0x0E80, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a592:	20 93 92 0e 	sts	0x0E92, r18
	shot->hit_count = damage;
    a596:	20 93 93 0e 	sts	0x0E93, r18
	shot->shot_speed = speed;
    a59a:	30 93 95 0e 	sts	0x0E95, r19
	shot->y_delta = y_delta;
    a59e:	80 93 96 0e 	sts	0x0E96, r24
	shot->anim.anim_count = 1;
    a5a2:	90 93 98 0e 	sts	0x0E98, r25
	shot->anim.frames_per_anim = 1;
    a5a6:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.anims = anim;
    a5aa:	85 e3       	ldi	r24, 0x35	; 53
    a5ac:	90 e1       	ldi	r25, 0x10	; 16
    a5ae:	90 93 9e 0e 	sts	0x0E9E, r25
    a5b2:	80 93 9d 0e 	sts	0x0E9D, r24
	shot->anim.anims[0] = (char*) map;
    a5b6:	50 93 36 10 	sts	0x1036, r21
    a5ba:	40 93 35 10 	sts	0x1035, r20
	shot->shared.vx = speed;
    a5be:	30 93 90 0e 	sts	0x0E90, r19
	shot->shared.vy = 0;
    a5c2:	10 92 8f 0e 	sts	0x0E8F, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a5c6:	10 92 94 0e 	sts	0x0E94, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a5ca:	83 e0       	ldi	r24, 0x03	; 3
    a5cc:	80 93 61 0e 	sts	0x0E61, r24
    a5d0:	08 95       	ret

0000a5d2 <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a5d2:	10 92 cc 0e 	sts	0x0ECC, r1
    a5d6:	10 92 cb 0e 	sts	0x0ECB, r1
	p->pressed = 0;
    a5da:	10 92 c8 0e 	sts	0x0EC8, r1
    a5de:	10 92 c7 0e 	sts	0x0EC7, r1
	p->released = 0;
    a5e2:	10 92 ca 0e 	sts	0x0ECA, r1
    a5e6:	10 92 c9 0e 	sts	0x0EC9, r1
	p->held_cycles = 0;
    a5ea:	10 92 cd 0e 	sts	0x0ECD, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	game.boss.width = 2;
    a5ee:	82 e0       	ldi	r24, 0x02	; 2
    a5f0:	80 93 5e 0e 	sts	0x0E5E, r24
	game.boss.height = 3;
    a5f4:	93 e0       	ldi	r25, 0x03	; 3
    a5f6:	90 93 5f 0e 	sts	0x0E5F, r25
	game.boss.run.anim_count = 4;
    a5fa:	84 e0       	ldi	r24, 0x04	; 4
    a5fc:	80 93 a8 0e 	sts	0x0EA8, r24
	game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a600:	8c e0       	ldi	r24, 0x0C	; 12
    a602:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.run.anims = boss_run_anim;
    a606:	ee e8       	ldi	r30, 0x8E	; 142
    a608:	fd e0       	ldi	r31, 0x0D	; 13
    a60a:	f0 93 ae 0e 	sts	0x0EAE, r31
    a60e:	e0 93 ad 0e 	sts	0x0EAD, r30
	game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a612:	21 e6       	ldi	r18, 0x61	; 97
    a614:	3f e2       	ldi	r19, 0x2F	; 47
    a616:	31 83       	std	Z+1, r19	; 0x01
    a618:	20 83       	st	Z, r18
	game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a61a:	29 e5       	ldi	r18, 0x59	; 89
    a61c:	3f e2       	ldi	r19, 0x2F	; 47
    a61e:	33 83       	std	Z+3, r19	; 0x03
    a620:	22 83       	std	Z+2, r18	; 0x02
	game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a622:	21 e5       	ldi	r18, 0x51	; 81
    a624:	3f e2       	ldi	r19, 0x2F	; 47
    a626:	35 83       	std	Z+5, r19	; 0x05
    a628:	24 83       	std	Z+4, r18	; 0x04
	game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a62a:	29 e4       	ldi	r18, 0x49	; 73
    a62c:	3f e2       	ldi	r19, 0x2F	; 47
    a62e:	37 83       	std	Z+7, r19	; 0x07
    a630:	26 83       	std	Z+6, r18	; 0x06
	game.boss.active_shots = 0;
    a632:	10 92 5a 0e 	sts	0x0E5A, r1
	game.boss.shared.vx = 0;
    a636:	10 92 58 0e 	sts	0x0E58, r1
	game.boss.shared.vy = 0;
    a63a:	10 92 57 0e 	sts	0x0E57, r1
	game.boss.shared.gravity = 0;
    a63e:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.active = 0;
    a642:	10 92 60 0e 	sts	0x0E60, r1
	game.boss.direction = D_LEFT;
    a646:	10 92 5d 0e 	sts	0x0E5D, r1
	game.boss.flags = IDLE;
    a64a:	88 e0       	ldi	r24, 0x08	; 8
    a64c:	80 93 5b 0e 	sts	0x0E5B, r24
	game.boss.ai_flags = AI_NOT_READY;
    a650:	10 92 5c 0e 	sts	0x0E5C, r1
	game.boss.shield = BOSS_SHIELD;
    a654:	8e e1       	ldi	r24, 0x1E	; 30
    a656:	80 93 62 0e 	sts	0x0E62, r24
	game.boss.idle.anim_count = 1;
    a65a:	81 e0       	ldi	r24, 0x01	; 1
    a65c:	80 93 a0 0e 	sts	0x0EA0, r24
	game.boss.idle.frames_per_anim = 1;
    a660:	80 93 a1 0e 	sts	0x0EA1, r24
	game.boss.idle.anims = boss_idle_anim;
    a664:	e1 e5       	ldi	r30, 0x51	; 81
    a666:	f0 e1       	ldi	r31, 0x10	; 16
    a668:	f0 93 a6 0e 	sts	0x0EA6, r31
    a66c:	e0 93 a5 0e 	sts	0x0EA5, r30
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a670:	29 e6       	ldi	r18, 0x69	; 105
    a672:	3f e2       	ldi	r19, 0x2F	; 47
    a674:	31 83       	std	Z+1, r19	; 0x01
    a676:	20 83       	st	Z, r18
	
	game.boss.jump.anim_count = 1;
    a678:	80 93 b0 0e 	sts	0x0EB0, r24
	game.boss.jump.frames_per_anim = 1;
    a67c:	80 93 b1 0e 	sts	0x0EB1, r24
	game.boss.jump.anims = boss_jump_anim;
    a680:	e1 e4       	ldi	r30, 0x41	; 65
    a682:	f0 e1       	ldi	r31, 0x10	; 16
    a684:	f0 93 b6 0e 	sts	0x0EB6, r31
    a688:	e0 93 b5 0e 	sts	0x0EB5, r30
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a68c:	21 e4       	ldi	r18, 0x41	; 65
    a68e:	3f e2       	ldi	r19, 0x2F	; 47
    a690:	31 83       	std	Z+1, r19	; 0x01
    a692:	20 83       	st	Z, r18
	
	game.boss.expl.anim_count = 3;
    a694:	90 93 c0 0e 	sts	0x0EC0, r25
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a698:	85 e0       	ldi	r24, 0x05	; 5
    a69a:	80 93 c1 0e 	sts	0x0EC1, r24
	game.boss.expl.anims = expl_anim;
    a69e:	e9 e4       	ldi	r30, 0x49	; 73
    a6a0:	f0 e1       	ldi	r31, 0x10	; 16
    a6a2:	f0 93 c6 0e 	sts	0x0EC6, r31
    a6a6:	e0 93 c5 0e 	sts	0x0EC5, r30
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a6aa:	8b ee       	ldi	r24, 0xEB	; 235
    a6ac:	9f e2       	ldi	r25, 0x2F	; 47
    a6ae:	91 83       	std	Z+1, r25	; 0x01
    a6b0:	80 83       	st	Z, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a6b2:	88 ee       	ldi	r24, 0xE8	; 232
    a6b4:	9f e2       	ldi	r25, 0x2F	; 47
    a6b6:	93 83       	std	Z+3, r25	; 0x03
    a6b8:	82 83       	std	Z+2, r24	; 0x02
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a6ba:	85 ee       	ldi	r24, 0xE5	; 229
    a6bc:	9f e2       	ldi	r25, 0x2F	; 47
    a6be:	95 83       	std	Z+5, r25	; 0x05
    a6c0:	84 83       	std	Z+4, r24	; 0x04
	
	init_boss_shot(game.current_level_index);
    a6c2:	80 91 cd 0d 	lds	r24, 0x0DCD
    a6c6:	0c 94 0e 51 	jmp	0xa21c	; 0xa21c <init_boss_shot>

0000a6ca <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    a6ca:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    a6ce:	88 23       	and	r24, r24
    a6d0:	f9 f0       	breq	.+62     	; 0xa710 <init_player_state+0x46>
	{
		game.player.width = 3;
    a6d2:	83 e0       	ldi	r24, 0x03	; 3
    a6d4:	80 93 e3 0d 	sts	0x0DE3, r24
		game.player.height = 1;
    a6d8:	81 e0       	ldi	r24, 0x01	; 1
    a6da:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.run.anim_count = 2;
    a6de:	82 e0       	ldi	r24, 0x02	; 2
    a6e0:	80 93 2d 0e 	sts	0x0E2D, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a6e4:	85 e0       	ldi	r24, 0x05	; 5
    a6e6:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.anims = run_anim;
    a6ea:	87 e3       	ldi	r24, 0x37	; 55
    a6ec:	90 e1       	ldi	r25, 0x10	; 16
    a6ee:	90 93 33 0e 	sts	0x0E33, r25
    a6f2:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    a6f6:	8c e9       	ldi	r24, 0x9C	; 156
    a6f8:	9f e2       	ldi	r25, 0x2F	; 47
    a6fa:	90 93 38 10 	sts	0x1038, r25
    a6fe:	80 93 37 10 	sts	0x1037, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    a702:	87 e9       	ldi	r24, 0x97	; 151
    a704:	9f e2       	ldi	r25, 0x2F	; 47
    a706:	90 93 3a 10 	sts	0x103A, r25
    a70a:	80 93 39 10 	sts	0x1039, r24
    a70e:	2a c0       	rjmp	.+84     	; 0xa764 <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    a710:	82 e0       	ldi	r24, 0x02	; 2
    a712:	80 93 e3 0d 	sts	0x0DE3, r24
		game.player.height = 3;
    a716:	83 e0       	ldi	r24, 0x03	; 3
    a718:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.run.anim_count = 4;
    a71c:	84 e0       	ldi	r24, 0x04	; 4
    a71e:	80 93 2d 0e 	sts	0x0E2D, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a722:	8c e0       	ldi	r24, 0x0C	; 12
    a724:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.anims = run_anim;
    a728:	87 e3       	ldi	r24, 0x37	; 55
    a72a:	90 e1       	ldi	r25, 0x10	; 16
    a72c:	90 93 33 0e 	sts	0x0E33, r25
    a730:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    a734:	86 ec       	ldi	r24, 0xC6	; 198
    a736:	9f e2       	ldi	r25, 0x2F	; 47
    a738:	90 93 38 10 	sts	0x1038, r25
    a73c:	80 93 37 10 	sts	0x1037, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    a740:	8e eb       	ldi	r24, 0xBE	; 190
    a742:	9f e2       	ldi	r25, 0x2F	; 47
    a744:	90 93 3a 10 	sts	0x103A, r25
    a748:	80 93 39 10 	sts	0x1039, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a74c:	86 eb       	ldi	r24, 0xB6	; 182
    a74e:	9f e2       	ldi	r25, 0x2F	; 47
    a750:	90 93 3c 10 	sts	0x103C, r25
    a754:	80 93 3b 10 	sts	0x103B, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a758:	8e ea       	ldi	r24, 0xAE	; 174
    a75a:	9f e2       	ldi	r25, 0x2F	; 47
    a75c:	90 93 3e 10 	sts	0x103E, r25
    a760:	80 93 3d 10 	sts	0x103D, r24
	}
	game.player.shared.vx = 0;
    a764:	10 92 dd 0d 	sts	0x0DDD, r1
	game.player.shared.vy = 0;
    a768:	10 92 dc 0d 	sts	0x0DDC, r1
	game.player.shared.gravity = 0;
    a76c:	10 92 de 0d 	sts	0x0DDE, r1
	game.player.active_shots = 0;
    a770:	10 92 df 0d 	sts	0x0DDF, r1
	game.player.active = 1;
    a774:	81 e0       	ldi	r24, 0x01	; 1
    a776:	80 93 e5 0d 	sts	0x0DE5, r24
	game.player.direction = D_RIGHT;
    a77a:	80 93 e2 0d 	sts	0x0DE2, r24
	game.player.flags = IDLE;
    a77e:	98 e0       	ldi	r25, 0x08	; 8
    a780:	90 93 e0 0d 	sts	0x0DE0, r25
	game.player.ai_flags = AI_NOT_READY;
    a784:	10 92 e1 0d 	sts	0x0DE1, r1
	game.player.shield = PLAYER_SHIELD;
    a788:	9f e0       	ldi	r25, 0x0F	; 15
    a78a:	90 93 e7 0d 	sts	0x0DE7, r25
	game.player.idle.anim_count = 1;
    a78e:	80 93 25 0e 	sts	0x0E25, r24
	game.player.idle.frames_per_anim = 1;
    a792:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.anims = idle_anim;
    a796:	29 e5       	ldi	r18, 0x59	; 89
    a798:	30 e1       	ldi	r19, 0x10	; 16
    a79a:	30 93 2b 0e 	sts	0x0E2B, r19
    a79e:	20 93 2a 0e 	sts	0x0E2A, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a7a2:	2e ec       	ldi	r18, 0xCE	; 206
    a7a4:	3f e2       	ldi	r19, 0x2F	; 47
    a7a6:	30 93 5a 10 	sts	0x105A, r19
    a7aa:	20 93 59 10 	sts	0x1059, r18
	
	game.player.jump.anim_count = 1;
    a7ae:	80 93 35 0e 	sts	0x0E35, r24
	game.player.jump.frames_per_anim = 1;
    a7b2:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.anims = jump_anim;
    a7b6:	26 e9       	ldi	r18, 0x96	; 150
    a7b8:	3d e0       	ldi	r19, 0x0D	; 13
    a7ba:	30 93 3b 0e 	sts	0x0E3B, r19
    a7be:	20 93 3a 0e 	sts	0x0E3A, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a7c2:	26 ea       	ldi	r18, 0xA6	; 166
    a7c4:	3f e2       	ldi	r19, 0x2F	; 47
    a7c6:	30 93 97 0d 	sts	0x0D97, r19
    a7ca:	20 93 96 0d 	sts	0x0D96, r18
	
	game.player.prone.anim_count = 1;
    a7ce:	80 93 3d 0e 	sts	0x0E3D, r24
	game.player.prone.frames_per_anim = 1;
    a7d2:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.anims = prone_anim;
    a7d6:	8b ed       	ldi	r24, 0xDB	; 219
    a7d8:	9f e0       	ldi	r25, 0x0F	; 15
    a7da:	90 93 43 0e 	sts	0x0E43, r25
    a7de:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a7e2:	81 ea       	ldi	r24, 0xA1	; 161
    a7e4:	9f e2       	ldi	r25, 0x2F	; 47
    a7e6:	90 93 dc 0f 	sts	0x0FDC, r25
    a7ea:	80 93 db 0f 	sts	0x0FDB, r24
	
	game.player.expl.anim_count = 3;
    a7ee:	83 e0       	ldi	r24, 0x03	; 3
    a7f0:	80 93 45 0e 	sts	0x0E45, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a7f4:	85 e0       	ldi	r24, 0x05	; 5
    a7f6:	80 93 46 0e 	sts	0x0E46, r24
	game.player.expl.anims = expl_anim;
    a7fa:	89 e4       	ldi	r24, 0x49	; 73
    a7fc:	90 e1       	ldi	r25, 0x10	; 16
    a7fe:	90 93 4b 0e 	sts	0x0E4B, r25
    a802:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a806:	8b ee       	ldi	r24, 0xEB	; 235
    a808:	9f e2       	ldi	r25, 0x2F	; 47
    a80a:	90 93 4a 10 	sts	0x104A, r25
    a80e:	80 93 49 10 	sts	0x1049, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a812:	88 ee       	ldi	r24, 0xE8	; 232
    a814:	9f e2       	ldi	r25, 0x2F	; 47
    a816:	90 93 4c 10 	sts	0x104C, r25
    a81a:	80 93 4b 10 	sts	0x104B, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a81e:	85 ee       	ldi	r24, 0xE5	; 229
    a820:	9f e2       	ldi	r25, 0x2F	; 47
    a822:	90 93 4e 10 	sts	0x104E, r25
    a826:	80 93 4d 10 	sts	0x104D, r24
	game.eye_clusters = 9;
    a82a:	89 e0       	ldi	r24, 0x09	; 9
    a82c:	80 93 d6 0d 	sts	0x0DD6, r24
	init_player_shot(game.current_level_index);
    a830:	80 91 cd 0d 	lds	r24, 0x0DCD
    a834:	0c 94 ef 4e 	jmp	0x9dde	; 0x9dde <init_player_shot>

0000a838 <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    a838:	0f 93       	push	r16
    a83a:	1f 93       	push	r17
    a83c:	cf 93       	push	r28
    a83e:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    a840:	a8 2f       	mov	r26, r24
    a842:	b0 e0       	ldi	r27, 0x00	; 0
    a844:	35 e3       	ldi	r19, 0x35	; 53
    a846:	83 9f       	mul	r24, r19
    a848:	c0 01       	movw	r24, r0
    a84a:	11 24       	eor	r1, r1
    a84c:	88 54       	subi	r24, 0x48	; 72
    a84e:	92 4f       	sbci	r25, 0xF2	; 242
    a850:	fc 01       	movw	r30, r24
    a852:	ec 5b       	subi	r30, 0xBC	; 188
    a854:	fe 4f       	sbci	r31, 0xFE	; 254
    a856:	33 e0       	ldi	r19, 0x03	; 3
    a858:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a85a:	31 96       	adiw	r30, 0x01	; 1
    a85c:	35 e0       	ldi	r19, 0x05	; 5
    a85e:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    a860:	34 96       	adiw	r30, 0x04	; 4
    a862:	c9 e4       	ldi	r28, 0x49	; 73
    a864:	d0 e1       	ldi	r29, 0x10	; 16
    a866:	d1 83       	std	Z+1, r29	; 0x01
    a868:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    a86a:	eb ee       	ldi	r30, 0xEB	; 235
    a86c:	ff e2       	ldi	r31, 0x2F	; 47
    a86e:	f0 93 4a 10 	sts	0x104A, r31
    a872:	e0 93 49 10 	sts	0x1049, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    a876:	e8 ee       	ldi	r30, 0xE8	; 232
    a878:	ff e2       	ldi	r31, 0x2F	; 47
    a87a:	f0 93 4c 10 	sts	0x104C, r31
    a87e:	e0 93 4b 10 	sts	0x104B, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    a882:	e5 ee       	ldi	r30, 0xE5	; 229
    a884:	ff e2       	ldi	r31, 0x2F	; 47
    a886:	f0 93 4e 10 	sts	0x104E, r31
    a88a:	e0 93 4d 10 	sts	0x104D, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    a88e:	ec 01       	movw	r28, r24
    a890:	c1 5d       	subi	r28, 0xD1	; 209
    a892:	de 4f       	sbci	r29, 0xFE	; 254
    a894:	31 e0       	ldi	r19, 0x01	; 1
    a896:	38 83       	st	Y, r19
		game.enemies[i].shot[j].active = 0;
    a898:	fc 01       	movw	r30, r24
    a89a:	e0 5d       	subi	r30, 0xD0	; 208
    a89c:	fe 4f       	sbci	r31, 0xFE	; 254
    a89e:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    a8a0:	32 97       	sbiw	r30, 0x02	; 2
    a8a2:	17 e0       	ldi	r17, 0x07	; 7
    a8a4:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    a8a6:	36 96       	adiw	r30, 0x06	; 6
    a8a8:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    a8aa:	31 96       	adiw	r30, 0x01	; 1
    a8ac:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    a8ae:	34 96       	adiw	r30, 0x04	; 4
    a8b0:	03 e4       	ldi	r16, 0x43	; 67
    a8b2:	10 e1       	ldi	r17, 0x10	; 16
    a8b4:	11 83       	std	Z+1, r17	; 0x01
    a8b6:	00 83       	st	Z, r16
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    a8b8:	ee e3       	ldi	r30, 0x3E	; 62
    a8ba:	ff e2       	ldi	r31, 0x2F	; 47
    a8bc:	f0 93 44 10 	sts	0x1044, r31
    a8c0:	e0 93 43 10 	sts	0x1043, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    a8c4:	fc 01       	movw	r30, r24
    a8c6:	ef 5c       	subi	r30, 0xCF	; 207
    a8c8:	fe 4f       	sbci	r31, 0xFE	; 254
    a8ca:	30 e5       	ldi	r19, 0x50	; 80
    a8cc:	30 83       	st	Z, r19
		if (is_boss)
    a8ce:	22 23       	and	r18, r18
    a8d0:	51 f0       	breq	.+20     	; 0xa8e6 <init_enemy_shot+0xae>
		{
			game.enemies[i].shot[j].hit_count = CRITICAL_SHOT_DAMAGE;
    a8d2:	8a e0       	ldi	r24, 0x0A	; 10
    a8d4:	88 83       	st	Y, r24
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    a8d6:	80 e2       	ldi	r24, 0x20	; 32
    a8d8:	9f e2       	ldi	r25, 0x2F	; 47
    a8da:	90 93 44 10 	sts	0x1044, r25
    a8de:	80 93 43 10 	sts	0x1043, r24
			game.enemies[i].shot[j].shot_speed = MEDIUM_SHOT_SPEED;
    a8e2:	84 e6       	ldi	r24, 0x64	; 100
    a8e4:	08 c0       	rjmp	.+16     	; 0xa8f6 <init_enemy_shot+0xbe>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    a8e6:	fc 01       	movw	r30, r24
    a8e8:	ee 5d       	subi	r30, 0xDE	; 222
    a8ea:	fe 4f       	sbci	r31, 0xFE	; 254
    a8ec:	20 81       	ld	r18, Z
    a8ee:	3a 96       	adiw	r30, 0x0a	; 10
    a8f0:	24 30       	cpi	r18, 0x04	; 4
    a8f2:	19 f4       	brne	.+6      	; 0xa8fa <init_enemy_shot+0xc2>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    a8f4:	82 ee       	ldi	r24, 0xE2	; 226
    a8f6:	80 83       	st	Z, r24
    a8f8:	05 c0       	rjmp	.+10     	; 0xa904 <init_enemy_shot+0xcc>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    a8fa:	25 30       	cpi	r18, 0x05	; 5
    a8fc:	11 f4       	brne	.+4      	; 0xa902 <init_enemy_shot+0xca>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    a8fe:	8a e0       	ldi	r24, 0x0A	; 10
    a900:	fa cf       	rjmp	.-12     	; 0xa8f6 <init_enemy_shot+0xbe>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    a902:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    a904:	25 e3       	ldi	r18, 0x35	; 53
    a906:	2a 9f       	mul	r18, r26
    a908:	c0 01       	movw	r24, r0
    a90a:	2b 9f       	mul	r18, r27
    a90c:	90 0d       	add	r25, r0
    a90e:	11 24       	eor	r1, r1
    a910:	88 54       	subi	r24, 0x48	; 72
    a912:	92 4f       	sbci	r25, 0xF2	; 242
    a914:	fc 01       	movw	r30, r24
    a916:	e5 5d       	subi	r30, 0xD5	; 213
    a918:	fe 4f       	sbci	r31, 0xFE	; 254
    a91a:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    a91c:	34 97       	sbiw	r30, 0x04	; 4
    a91e:	71 83       	std	Z+1, r23	; 0x01
    a920:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    a922:	32 96       	adiw	r30, 0x02	; 2
    a924:	51 83       	std	Z+1, r21	; 0x01
    a926:	40 83       	st	Z, r20
	}
}
    a928:	df 91       	pop	r29
    a92a:	cf 91       	pop	r28
    a92c:	1f 91       	pop	r17
    a92e:	0f 91       	pop	r16
    a930:	08 95       	ret

0000a932 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    a932:	95 e3       	ldi	r25, 0x35	; 53
    a934:	89 9f       	mul	r24, r25
    a936:	90 01       	movw	r18, r0
    a938:	11 24       	eor	r1, r1
    a93a:	28 54       	subi	r18, 0x48	; 72
    a93c:	32 4f       	sbci	r19, 0xF2	; 242
    a93e:	f9 01       	movw	r30, r18
    a940:	e3 5e       	subi	r30, 0xE3	; 227
    a942:	fe 4f       	sbci	r31, 0xFE	; 254
    a944:	91 e0       	ldi	r25, 0x01	; 1
    a946:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    a948:	32 96       	adiw	r30, 0x02	; 2
    a94a:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    a94c:	31 97       	sbiw	r30, 0x01	; 1
    a94e:	a8 e0       	ldi	r26, 0x08	; 8
    a950:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    a952:	32 96       	adiw	r30, 0x02	; 2
    a954:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a956:	31 96       	adiw	r30, 0x01	; 1
    a958:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    a95a:	31 96       	adiw	r30, 0x01	; 1
    a95c:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    a95e:	31 96       	adiw	r30, 0x01	; 1
    a960:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a962:	31 96       	adiw	r30, 0x01	; 1
    a964:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    a966:	32 96       	adiw	r30, 0x02	; 2
    a968:	92 e0       	ldi	r25, 0x02	; 2
    a96a:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    a96c:	76 96       	adiw	r30, 0x16	; 22
    a96e:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    a970:	31 96       	adiw	r30, 0x01	; 1
    a972:	9a e0       	ldi	r25, 0x0A	; 10
    a974:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    a976:	d9 01       	movw	r26, r18
    a978:	af 5b       	subi	r26, 0xBF	; 191
    a97a:	be 4f       	sbci	r27, 0xFE	; 254
    a97c:	ed ed       	ldi	r30, 0xDD	; 221
    a97e:	ff e0       	ldi	r31, 0x0F	; 15
    a980:	ed 93       	st	X+, r30
    a982:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    a984:	a5 e3       	ldi	r26, 0x35	; 53
    a986:	bf e2       	ldi	r27, 0x2F	; 47
    a988:	b1 83       	std	Z+1, r27	; 0x01
    a98a:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    a98c:	a2 e3       	ldi	r26, 0x32	; 50
    a98e:	bf e2       	ldi	r27, 0x2F	; 47
    a990:	b3 83       	std	Z+3, r27	; 0x03
    a992:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    a994:	f9 01       	movw	r30, r18
    a996:	e4 5e       	subi	r30, 0xE4	; 228
    a998:	fe 4f       	sbci	r31, 0xFE	; 254
    a99a:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    a99c:	31 97       	sbiw	r30, 0x01	; 1
    a99e:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    a9a0:	31 97       	sbiw	r30, 0x01	; 1
    a9a2:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    a9a4:	34 97       	sbiw	r30, 0x04	; 4
    a9a6:	71 83       	std	Z+1, r23	; 0x01
    a9a8:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    a9aa:	32 96       	adiw	r30, 0x02	; 2
    a9ac:	51 83       	std	Z+1, r21	; 0x01
    a9ae:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    a9b0:	20 e0       	ldi	r18, 0x00	; 0
    a9b2:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <init_enemy_shot>

0000a9b6 <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    a9b6:	95 e3       	ldi	r25, 0x35	; 53
    a9b8:	89 9f       	mul	r24, r25
    a9ba:	90 01       	movw	r18, r0
    a9bc:	11 24       	eor	r1, r1
    a9be:	28 54       	subi	r18, 0x48	; 72
    a9c0:	32 4f       	sbci	r19, 0xF2	; 242
    a9c2:	f9 01       	movw	r30, r18
    a9c4:	e2 5e       	subi	r30, 0xE2	; 226
    a9c6:	fe 4f       	sbci	r31, 0xFE	; 254
    a9c8:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    a9ca:	31 97       	sbiw	r30, 0x01	; 1
    a9cc:	91 e0       	ldi	r25, 0x01	; 1
    a9ce:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    a9d0:	32 96       	adiw	r30, 0x02	; 2
    a9d2:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    a9d4:	31 96       	adiw	r30, 0x01	; 1
    a9d6:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a9d8:	31 96       	adiw	r30, 0x01	; 1
    a9da:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    a9dc:	31 96       	adiw	r30, 0x01	; 1
    a9de:	a3 e0       	ldi	r26, 0x03	; 3
    a9e0:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    a9e2:	31 96       	adiw	r30, 0x01	; 1
    a9e4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a9e6:	31 96       	adiw	r30, 0x01	; 1
    a9e8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    a9ea:	32 96       	adiw	r30, 0x02	; 2
    a9ec:	a2 e0       	ldi	r26, 0x02	; 2
    a9ee:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    a9f0:	76 96       	adiw	r30, 0x16	; 22
    a9f2:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    a9f4:	31 96       	adiw	r30, 0x01	; 1
    a9f6:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    a9f8:	d9 01       	movw	r26, r18
    a9fa:	af 5b       	subi	r26, 0xBF	; 191
    a9fc:	be 4f       	sbci	r27, 0xFE	; 254
    a9fe:	e3 e3       	ldi	r30, 0x33	; 51
    aa00:	f0 e1       	ldi	r31, 0x10	; 16
    aa02:	ed 93       	st	X+, r30
    aa04:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    aa06:	ac e2       	ldi	r26, 0x2C	; 44
    aa08:	bf e2       	ldi	r27, 0x2F	; 47
    aa0a:	b1 83       	std	Z+1, r27	; 0x01
    aa0c:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aa0e:	f9 01       	movw	r30, r18
    aa10:	e4 5e       	subi	r30, 0xE4	; 228
    aa12:	fe 4f       	sbci	r31, 0xFE	; 254
    aa14:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    aa16:	31 97       	sbiw	r30, 0x01	; 1
    aa18:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    aa1a:	31 97       	sbiw	r30, 0x01	; 1
    aa1c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aa1e:	34 97       	sbiw	r30, 0x04	; 4
    aa20:	71 83       	std	Z+1, r23	; 0x01
    aa22:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aa24:	32 96       	adiw	r30, 0x02	; 2
    aa26:	51 83       	std	Z+1, r21	; 0x01
    aa28:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aa2a:	20 e0       	ldi	r18, 0x00	; 0
    aa2c:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <init_enemy_shot>

0000aa30 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aa30:	95 e3       	ldi	r25, 0x35	; 53
    aa32:	89 9f       	mul	r24, r25
    aa34:	90 01       	movw	r18, r0
    aa36:	11 24       	eor	r1, r1
    aa38:	28 54       	subi	r18, 0x48	; 72
    aa3a:	32 4f       	sbci	r19, 0xF2	; 242
    aa3c:	f9 01       	movw	r30, r18
    aa3e:	e2 5e       	subi	r30, 0xE2	; 226
    aa40:	fe 4f       	sbci	r31, 0xFE	; 254
    aa42:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aa44:	31 97       	sbiw	r30, 0x01	; 1
    aa46:	91 e0       	ldi	r25, 0x01	; 1
    aa48:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aa4a:	32 96       	adiw	r30, 0x02	; 2
    aa4c:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    aa4e:	31 96       	adiw	r30, 0x01	; 1
    aa50:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aa52:	31 96       	adiw	r30, 0x01	; 1
    aa54:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    aa56:	31 96       	adiw	r30, 0x01	; 1
    aa58:	a4 e0       	ldi	r26, 0x04	; 4
    aa5a:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    aa5c:	31 96       	adiw	r30, 0x01	; 1
    aa5e:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aa60:	31 96       	adiw	r30, 0x01	; 1
    aa62:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    aa64:	32 96       	adiw	r30, 0x02	; 2
    aa66:	a2 e0       	ldi	r26, 0x02	; 2
    aa68:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    aa6a:	76 96       	adiw	r30, 0x16	; 22
    aa6c:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    aa6e:	31 96       	adiw	r30, 0x01	; 1
    aa70:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    aa72:	d9 01       	movw	r26, r18
    aa74:	af 5b       	subi	r26, 0xBF	; 191
    aa76:	be 4f       	sbci	r27, 0xFE	; 254
    aa78:	e7 e4       	ldi	r30, 0x47	; 71
    aa7a:	f0 e1       	ldi	r31, 0x10	; 16
    aa7c:	ed 93       	st	X+, r30
    aa7e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    aa80:	a9 e2       	ldi	r26, 0x29	; 41
    aa82:	bf e2       	ldi	r27, 0x2F	; 47
    aa84:	b1 83       	std	Z+1, r27	; 0x01
    aa86:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aa88:	f9 01       	movw	r30, r18
    aa8a:	e4 5e       	subi	r30, 0xE4	; 228
    aa8c:	fe 4f       	sbci	r31, 0xFE	; 254
    aa8e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    aa90:	31 97       	sbiw	r30, 0x01	; 1
    aa92:	92 ee       	ldi	r25, 0xE2	; 226
    aa94:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    aa96:	31 97       	sbiw	r30, 0x01	; 1
    aa98:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aa9a:	34 97       	sbiw	r30, 0x04	; 4
    aa9c:	71 83       	std	Z+1, r23	; 0x01
    aa9e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aaa0:	32 96       	adiw	r30, 0x02	; 2
    aaa2:	51 83       	std	Z+1, r21	; 0x01
    aaa4:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aaa6:	20 e0       	ldi	r18, 0x00	; 0
    aaa8:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <init_enemy_shot>

0000aaac <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aaac:	95 e3       	ldi	r25, 0x35	; 53
    aaae:	89 9f       	mul	r24, r25
    aab0:	90 01       	movw	r18, r0
    aab2:	11 24       	eor	r1, r1
    aab4:	28 54       	subi	r18, 0x48	; 72
    aab6:	32 4f       	sbci	r19, 0xF2	; 242
    aab8:	f9 01       	movw	r30, r18
    aaba:	e2 5e       	subi	r30, 0xE2	; 226
    aabc:	fe 4f       	sbci	r31, 0xFE	; 254
    aabe:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aac0:	31 97       	sbiw	r30, 0x01	; 1
    aac2:	91 e0       	ldi	r25, 0x01	; 1
    aac4:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    aac6:	33 96       	adiw	r30, 0x03	; 3
    aac8:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aaca:	31 96       	adiw	r30, 0x01	; 1
    aacc:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    aace:	31 96       	adiw	r30, 0x01	; 1
    aad0:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    aad2:	31 96       	adiw	r30, 0x01	; 1
    aad4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aad6:	31 96       	adiw	r30, 0x01	; 1
    aad8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    aada:	32 96       	adiw	r30, 0x02	; 2
    aadc:	a4 e0       	ldi	r26, 0x04	; 4
    aade:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    aae0:	76 96       	adiw	r30, 0x16	; 22
    aae2:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    aae4:	31 96       	adiw	r30, 0x01	; 1
    aae6:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    aae8:	d9 01       	movw	r26, r18
    aaea:	af 5b       	subi	r26, 0xBF	; 191
    aaec:	be 4f       	sbci	r27, 0xFE	; 254
    aaee:	e1 ee       	ldi	r30, 0xE1	; 225
    aaf0:	ff e0       	ldi	r31, 0x0F	; 15
    aaf2:	ed 93       	st	X+, r30
    aaf4:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    aaf6:	ab e3       	ldi	r26, 0x3B	; 59
    aaf8:	bf e2       	ldi	r27, 0x2F	; 47
    aafa:	b1 83       	std	Z+1, r27	; 0x01
    aafc:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aafe:	f9 01       	movw	r30, r18
    ab00:	e4 5e       	subi	r30, 0xE4	; 228
    ab02:	fe 4f       	sbci	r31, 0xFE	; 254
    ab04:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    ab06:	31 97       	sbiw	r30, 0x01	; 1
    ab08:	9e e1       	ldi	r25, 0x1E	; 30
    ab0a:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ab0c:	31 97       	sbiw	r30, 0x01	; 1
    ab0e:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab10:	34 97       	sbiw	r30, 0x04	; 4
    ab12:	71 83       	std	Z+1, r23	; 0x01
    ab14:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab16:	32 96       	adiw	r30, 0x02	; 2
    ab18:	51 83       	std	Z+1, r21	; 0x01
    ab1a:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ab1c:	20 e0       	ldi	r18, 0x00	; 0
    ab1e:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <init_enemy_shot>

0000ab22 <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ab22:	95 e3       	ldi	r25, 0x35	; 53
    ab24:	89 9f       	mul	r24, r25
    ab26:	90 01       	movw	r18, r0
    ab28:	11 24       	eor	r1, r1
    ab2a:	28 54       	subi	r18, 0x48	; 72
    ab2c:	32 4f       	sbci	r19, 0xF2	; 242
    ab2e:	f9 01       	movw	r30, r18
    ab30:	e2 5e       	subi	r30, 0xE2	; 226
    ab32:	fe 4f       	sbci	r31, 0xFE	; 254
    ab34:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ab36:	31 97       	sbiw	r30, 0x01	; 1
    ab38:	91 e0       	ldi	r25, 0x01	; 1
    ab3a:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ab3c:	33 96       	adiw	r30, 0x03	; 3
    ab3e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ab40:	31 96       	adiw	r30, 0x01	; 1
    ab42:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    ab44:	31 96       	adiw	r30, 0x01	; 1
    ab46:	a5 e0       	ldi	r26, 0x05	; 5
    ab48:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ab4a:	31 96       	adiw	r30, 0x01	; 1
    ab4c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ab4e:	31 96       	adiw	r30, 0x01	; 1
    ab50:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    ab52:	32 96       	adiw	r30, 0x02	; 2
    ab54:	a4 e0       	ldi	r26, 0x04	; 4
    ab56:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ab58:	76 96       	adiw	r30, 0x16	; 22
    ab5a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ab5c:	31 96       	adiw	r30, 0x01	; 1
    ab5e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    ab60:	d9 01       	movw	r26, r18
    ab62:	af 5b       	subi	r26, 0xBF	; 191
    ab64:	be 4f       	sbci	r27, 0xFE	; 254
    ab66:	e5 e4       	ldi	r30, 0x45	; 69
    ab68:	f0 e1       	ldi	r31, 0x10	; 16
    ab6a:	ed 93       	st	X+, r30
    ab6c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    ab6e:	af e2       	ldi	r26, 0x2F	; 47
    ab70:	bf e2       	ldi	r27, 0x2F	; 47
    ab72:	b1 83       	std	Z+1, r27	; 0x01
    ab74:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ab76:	f9 01       	movw	r30, r18
    ab78:	e4 5e       	subi	r30, 0xE4	; 228
    ab7a:	fe 4f       	sbci	r31, 0xFE	; 254
    ab7c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    ab7e:	31 97       	sbiw	r30, 0x01	; 1
    ab80:	9a e0       	ldi	r25, 0x0A	; 10
    ab82:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ab84:	31 97       	sbiw	r30, 0x01	; 1
    ab86:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab88:	34 97       	sbiw	r30, 0x04	; 4
    ab8a:	71 83       	std	Z+1, r23	; 0x01
    ab8c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab8e:	32 96       	adiw	r30, 0x02	; 2
    ab90:	51 83       	std	Z+1, r21	; 0x01
    ab92:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ab94:	20 e0       	ldi	r18, 0x00	; 0
    ab96:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <init_enemy_shot>

0000ab9a <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ab9a:	95 e3       	ldi	r25, 0x35	; 53
    ab9c:	89 9f       	mul	r24, r25
    ab9e:	90 01       	movw	r18, r0
    aba0:	11 24       	eor	r1, r1
    aba2:	28 54       	subi	r18, 0x48	; 72
    aba4:	32 4f       	sbci	r19, 0xF2	; 242
    aba6:	f9 01       	movw	r30, r18
    aba8:	e2 5e       	subi	r30, 0xE2	; 226
    abaa:	fe 4f       	sbci	r31, 0xFE	; 254
    abac:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    abae:	31 97       	sbiw	r30, 0x01	; 1
    abb0:	91 e0       	ldi	r25, 0x01	; 1
    abb2:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    abb4:	33 96       	adiw	r30, 0x03	; 3
    abb6:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    abb8:	31 96       	adiw	r30, 0x01	; 1
    abba:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    abbc:	31 96       	adiw	r30, 0x01	; 1
    abbe:	a8 e0       	ldi	r26, 0x08	; 8
    abc0:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    abc2:	31 96       	adiw	r30, 0x01	; 1
    abc4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    abc6:	31 96       	adiw	r30, 0x01	; 1
    abc8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    abca:	32 96       	adiw	r30, 0x02	; 2
    abcc:	a4 e0       	ldi	r26, 0x04	; 4
    abce:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    abd0:	76 96       	adiw	r30, 0x16	; 22
    abd2:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    abd4:	31 96       	adiw	r30, 0x01	; 1
    abd6:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    abd8:	d9 01       	movw	r26, r18
    abda:	af 5b       	subi	r26, 0xBF	; 191
    abdc:	be 4f       	sbci	r27, 0xFE	; 254
    abde:	e5 e5       	ldi	r30, 0x55	; 85
    abe0:	f0 e1       	ldi	r31, 0x10	; 16
    abe2:	ed 93       	st	X+, r30
    abe4:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    abe6:	a8 e3       	ldi	r26, 0x38	; 56
    abe8:	bf e2       	ldi	r27, 0x2F	; 47
    abea:	b1 83       	std	Z+1, r27	; 0x01
    abec:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    abee:	f9 01       	movw	r30, r18
    abf0:	e4 5e       	subi	r30, 0xE4	; 228
    abf2:	fe 4f       	sbci	r31, 0xFE	; 254
    abf4:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    abf6:	31 97       	sbiw	r30, 0x01	; 1
    abf8:	94 e1       	ldi	r25, 0x14	; 20
    abfa:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    abfc:	31 97       	sbiw	r30, 0x01	; 1
    abfe:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    ac00:	34 97       	sbiw	r30, 0x04	; 4
    ac02:	71 83       	std	Z+1, r23	; 0x01
    ac04:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac06:	32 96       	adiw	r30, 0x02	; 2
    ac08:	51 83       	std	Z+1, r21	; 0x01
    ac0a:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ac0c:	20 e0       	ldi	r18, 0x00	; 0
    ac0e:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <init_enemy_shot>

0000ac12 <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ac12:	95 e3       	ldi	r25, 0x35	; 53
    ac14:	89 9f       	mul	r24, r25
    ac16:	90 01       	movw	r18, r0
    ac18:	11 24       	eor	r1, r1
    ac1a:	28 54       	subi	r18, 0x48	; 72
    ac1c:	32 4f       	sbci	r19, 0xF2	; 242
    ac1e:	f9 01       	movw	r30, r18
    ac20:	e2 5e       	subi	r30, 0xE2	; 226
    ac22:	fe 4f       	sbci	r31, 0xFE	; 254
    ac24:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ac26:	31 97       	sbiw	r30, 0x01	; 1
    ac28:	91 e0       	ldi	r25, 0x01	; 1
    ac2a:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ac2c:	32 96       	adiw	r30, 0x02	; 2
    ac2e:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ac30:	31 96       	adiw	r30, 0x01	; 1
    ac32:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ac34:	31 96       	adiw	r30, 0x01	; 1
    ac36:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    ac38:	31 96       	adiw	r30, 0x01	; 1
    ac3a:	a6 e0       	ldi	r26, 0x06	; 6
    ac3c:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ac3e:	31 96       	adiw	r30, 0x01	; 1
    ac40:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ac42:	31 96       	adiw	r30, 0x01	; 1
    ac44:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    ac46:	32 96       	adiw	r30, 0x02	; 2
    ac48:	a8 e0       	ldi	r26, 0x08	; 8
    ac4a:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ac4c:	76 96       	adiw	r30, 0x16	; 22
    ac4e:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ac50:	31 96       	adiw	r30, 0x01	; 1
    ac52:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ac54:	d9 01       	movw	r26, r18
    ac56:	af 5b       	subi	r26, 0xBF	; 191
    ac58:	be 4f       	sbci	r27, 0xFE	; 254
    ac5a:	e3 e3       	ldi	r30, 0x33	; 51
    ac5c:	f0 e1       	ldi	r31, 0x10	; 16
    ac5e:	ed 93       	st	X+, r30
    ac60:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    ac62:	a6 e2       	ldi	r26, 0x26	; 38
    ac64:	bf e2       	ldi	r27, 0x2F	; 47
    ac66:	b1 83       	std	Z+1, r27	; 0x01
    ac68:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ac6a:	f9 01       	movw	r30, r18
    ac6c:	e4 5e       	subi	r30, 0xE4	; 228
    ac6e:	fe 4f       	sbci	r31, 0xFE	; 254
    ac70:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ac72:	31 97       	sbiw	r30, 0x01	; 1
    ac74:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ac76:	31 97       	sbiw	r30, 0x01	; 1
    ac78:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ac7a:	34 97       	sbiw	r30, 0x04	; 4
    ac7c:	71 83       	std	Z+1, r23	; 0x01
    ac7e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac80:	32 96       	adiw	r30, 0x02	; 2
    ac82:	51 83       	std	Z+1, r21	; 0x01
    ac84:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    ac86:	21 e0       	ldi	r18, 0x01	; 1
    ac88:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <init_enemy_shot>

0000ac8c <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    ac8c:	cf 93       	push	r28
    ac8e:	df 93       	push	r29
    ac90:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    ac92:	95 e3       	ldi	r25, 0x35	; 53
    ac94:	89 9f       	mul	r24, r25
    ac96:	90 01       	movw	r18, r0
    ac98:	11 24       	eor	r1, r1
    ac9a:	28 54       	subi	r18, 0x48	; 72
    ac9c:	32 4f       	sbci	r19, 0xF2	; 242
    ac9e:	f9 01       	movw	r30, r18
    aca0:	e2 5e       	subi	r30, 0xE2	; 226
    aca2:	fe 4f       	sbci	r31, 0xFE	; 254
    aca4:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aca6:	31 97       	sbiw	r30, 0x01	; 1
    aca8:	91 e0       	ldi	r25, 0x01	; 1
    acaa:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    acac:	32 96       	adiw	r30, 0x02	; 2
    acae:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    acb0:	31 96       	adiw	r30, 0x01	; 1
    acb2:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    acb4:	31 96       	adiw	r30, 0x01	; 1
    acb6:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    acb8:	31 96       	adiw	r30, 0x01	; 1
    acba:	47 e0       	ldi	r20, 0x07	; 7
    acbc:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    acbe:	31 96       	adiw	r30, 0x01	; 1
    acc0:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    acc2:	31 96       	adiw	r30, 0x01	; 1
    acc4:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    acc6:	32 96       	adiw	r30, 0x02	; 2
    acc8:	48 e0       	ldi	r20, 0x08	; 8
    acca:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    accc:	76 96       	adiw	r30, 0x16	; 22
    acce:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    acd0:	31 96       	adiw	r30, 0x01	; 1
    acd2:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    acd4:	d9 01       	movw	r26, r18
    acd6:	af 5b       	subi	r26, 0xBF	; 191
    acd8:	be 4f       	sbci	r27, 0xFE	; 254
    acda:	e3 e3       	ldi	r30, 0x33	; 51
    acdc:	f0 e1       	ldi	r31, 0x10	; 16
    acde:	ed 93       	st	X+, r30
    ace0:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    ace2:	43 e2       	ldi	r20, 0x23	; 35
    ace4:	5f e2       	ldi	r21, 0x2F	; 47
    ace6:	51 83       	std	Z+1, r21	; 0x01
    ace8:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    acea:	f9 01       	movw	r30, r18
    acec:	e4 5e       	subi	r30, 0xE4	; 228
    acee:	fe 4f       	sbci	r31, 0xFE	; 254
    acf0:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    acf2:	31 97       	sbiw	r30, 0x01	; 1
    acf4:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    acf6:	31 97       	sbiw	r30, 0x01	; 1
    acf8:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    acfa:	34 97       	sbiw	r30, 0x04	; 4
    acfc:	71 83       	std	Z+1, r23	; 0x01
    acfe:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad00:	32 96       	adiw	r30, 0x02	; 2
    ad02:	d1 83       	std	Z+1, r29	; 0x01
    ad04:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    ad06:	21 e0       	ldi	r18, 0x01	; 1
    ad08:	ae 01       	movw	r20, r28
    ad0a:	0e 94 1c 54 	call	0xa838	; 0xa838 <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    ad0e:	be 01       	movw	r22, r28
    ad10:	83 e0       	ldi	r24, 0x03	; 3
    ad12:	76 95       	lsr	r23
    ad14:	67 95       	ror	r22
    ad16:	8a 95       	dec	r24
    ad18:	e1 f7       	brne	.-8      	; 0xad12 <init_enemy_boss_eye+0x86>
    ad1a:	90 91 d6 0d 	lds	r25, 0x0DD6
    ad1e:	40 e0       	ldi	r20, 0x00	; 0
    ad20:	50 e0       	ldi	r21, 0x00	; 0
    ad22:	80 e2       	ldi	r24, 0x20	; 32
    ad24:	89 1b       	sub	r24, r25
}
    ad26:	df 91       	pop	r29
    ad28:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    ad2a:	0c 94 ba 3d 	jmp	0x7b74	; 0x7b74 <SetTile>

0000ad2e <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    ad2e:	40 e2       	ldi	r20, 0x20	; 32
    ad30:	50 e0       	ldi	r21, 0x00	; 0
    ad32:	68 ec       	ldi	r22, 0xC8	; 200
    ad34:	77 e0       	ldi	r23, 0x07	; 7
    ad36:	80 e0       	ldi	r24, 0x00	; 0
    ad38:	0e 94 09 56 	call	0xac12	; 0xac12 <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    ad3c:	40 e3       	ldi	r20, 0x30	; 48
    ad3e:	50 e0       	ldi	r21, 0x00	; 0
    ad40:	68 ec       	ldi	r22, 0xC8	; 200
    ad42:	77 e0       	ldi	r23, 0x07	; 7
    ad44:	81 e0       	ldi	r24, 0x01	; 1
    ad46:	0e 94 09 56 	call	0xac12	; 0xac12 <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    ad4a:	40 e9       	ldi	r20, 0x90	; 144
    ad4c:	50 e0       	ldi	r21, 0x00	; 0
    ad4e:	68 ec       	ldi	r22, 0xC8	; 200
    ad50:	77 e0       	ldi	r23, 0x07	; 7
    ad52:	82 e0       	ldi	r24, 0x02	; 2
    ad54:	0e 94 09 56 	call	0xac12	; 0xac12 <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    ad58:	40 ea       	ldi	r20, 0xA0	; 160
    ad5a:	50 e0       	ldi	r21, 0x00	; 0
    ad5c:	68 ec       	ldi	r22, 0xC8	; 200
    ad5e:	77 e0       	ldi	r23, 0x07	; 7
    ad60:	83 e0       	ldi	r24, 0x03	; 3
    ad62:	0e 94 09 56 	call	0xac12	; 0xac12 <init_enemy_boss_turret>
	game.active_enemies = 4;
    ad66:	84 e0       	ldi	r24, 0x04	; 4
    ad68:	80 93 d3 0d 	sts	0x0DD3, r24
    ad6c:	08 95       	ret

0000ad6e <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    ad6e:	ef 92       	push	r14
    ad70:	ff 92       	push	r15
    ad72:	0f 93       	push	r16
    ad74:	1f 93       	push	r17
    ad76:	cf 93       	push	r28
    ad78:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    ad7a:	08 eb       	ldi	r16, 0xB8	; 184
    ad7c:	1d e0       	ldi	r17, 0x0D	; 13
    ad7e:	f8 01       	movw	r30, r16
    ad80:	86 8d       	ldd	r24, Z+30	; 0x1e
    ad82:	c0 e0       	ldi	r28, 0x00	; 0
    ad84:	d1 e0       	ldi	r29, 0x01	; 1
    ad86:	9e 01       	movw	r18, r28
    ad88:	28 1b       	sub	r18, r24
    ad8a:	31 09       	sbc	r19, r1
    ad8c:	83 e0       	ldi	r24, 0x03	; 3
    ad8e:	22 0f       	add	r18, r18
    ad90:	33 1f       	adc	r19, r19
    ad92:	8a 95       	dec	r24
    ad94:	e1 f7       	brne	.-8      	; 0xad8e <init_enemy_boss_eyes+0x20>
    ad96:	80 91 fc 0c 	lds	r24, 0x0CFC
    ad9a:	65 e0       	ldi	r22, 0x05	; 5
    ad9c:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    ada0:	89 2f       	mov	r24, r25
    ada2:	48 e5       	ldi	r20, 0x58	; 88
    ada4:	50 e0       	ldi	r21, 0x00	; 0
    ada6:	b9 01       	movw	r22, r18
    ada8:	0e 94 46 56 	call	0xac8c	; 0xac8c <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    adac:	f8 01       	movw	r30, r16
    adae:	86 8d       	ldd	r24, Z+30	; 0x1e
    adb0:	9e 01       	movw	r18, r28
    adb2:	28 1b       	sub	r18, r24
    adb4:	31 09       	sbc	r19, r1
    adb6:	93 e0       	ldi	r25, 0x03	; 3
    adb8:	22 0f       	add	r18, r18
    adba:	33 1f       	adc	r19, r19
    adbc:	9a 95       	dec	r25
    adbe:	e1 f7       	brne	.-8      	; 0xadb8 <init_enemy_boss_eyes+0x4a>
    adc0:	80 91 fc 0c 	lds	r24, 0x0CFC
    adc4:	90 e0       	ldi	r25, 0x00	; 0
    adc6:	01 96       	adiw	r24, 0x01	; 1
    adc8:	45 e0       	ldi	r20, 0x05	; 5
    adca:	e4 2e       	mov	r14, r20
    adcc:	f1 2c       	mov	r15, r1
    adce:	b7 01       	movw	r22, r14
    add0:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    add4:	40 e6       	ldi	r20, 0x60	; 96
    add6:	50 e0       	ldi	r21, 0x00	; 0
    add8:	b9 01       	movw	r22, r18
    adda:	0e 94 46 56 	call	0xac8c	; 0xac8c <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    adde:	f8 01       	movw	r30, r16
    ade0:	86 8d       	ldd	r24, Z+30	; 0x1e
    ade2:	c8 1b       	sub	r28, r24
    ade4:	d1 09       	sbc	r29, r1
    ade6:	53 e0       	ldi	r21, 0x03	; 3
    ade8:	cc 0f       	add	r28, r28
    adea:	dd 1f       	adc	r29, r29
    adec:	5a 95       	dec	r21
    adee:	e1 f7       	brne	.-8      	; 0xade8 <init_enemy_boss_eyes+0x7a>
    adf0:	80 91 fc 0c 	lds	r24, 0x0CFC
    adf4:	90 e0       	ldi	r25, 0x00	; 0
    adf6:	02 96       	adiw	r24, 0x02	; 2
    adf8:	b7 01       	movw	r22, r14
    adfa:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    adfe:	48 e6       	ldi	r20, 0x68	; 104
    ae00:	50 e0       	ldi	r21, 0x00	; 0
    ae02:	be 01       	movw	r22, r28
    ae04:	0e 94 46 56 	call	0xac8c	; 0xac8c <init_enemy_boss_eye>
	game.active_enemies = 3;
    ae08:	83 e0       	ldi	r24, 0x03	; 3
    ae0a:	f8 01       	movw	r30, r16
    ae0c:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    ae0e:	80 91 fc 0c 	lds	r24, 0x0CFC
    ae12:	8d 5f       	subi	r24, 0xFD	; 253
    ae14:	80 93 fc 0c 	sts	0x0CFC, r24
}
    ae18:	df 91       	pop	r29
    ae1a:	cf 91       	pop	r28
    ae1c:	1f 91       	pop	r17
    ae1e:	0f 91       	pop	r16
    ae20:	ff 90       	pop	r15
    ae22:	ef 90       	pop	r14
    ae24:	08 95       	ret

0000ae26 <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    ae26:	a8 2f       	mov	r26, r24
    ae28:	b0 e0       	ldi	r27, 0x00	; 0
    ae2a:	25 e3       	ldi	r18, 0x35	; 53
    ae2c:	82 9f       	mul	r24, r18
    ae2e:	c0 01       	movw	r24, r0
    ae30:	11 24       	eor	r1, r1
    ae32:	88 54       	subi	r24, 0x48	; 72
    ae34:	92 4f       	sbci	r25, 0xF2	; 242
    ae36:	fc 01       	movw	r30, r24
    ae38:	e3 5e       	subi	r30, 0xE3	; 227
    ae3a:	fe 4f       	sbci	r31, 0xFE	; 254
    ae3c:	21 e0       	ldi	r18, 0x01	; 1
    ae3e:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    ae40:	33 96       	adiw	r30, 0x03	; 3
    ae42:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    ae44:	31 96       	adiw	r30, 0x01	; 1
    ae46:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    ae48:	31 96       	adiw	r30, 0x01	; 1
    ae4a:	32 e0       	ldi	r19, 0x02	; 2
    ae4c:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    ae4e:	31 96       	adiw	r30, 0x01	; 1
    ae50:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ae52:	31 96       	adiw	r30, 0x01	; 1
    ae54:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    ae56:	78 96       	adiw	r30, 0x18	; 24
    ae58:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    ae5a:	31 96       	adiw	r30, 0x01	; 1
    ae5c:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    ae5e:	34 96       	adiw	r30, 0x04	; 4
    ae60:	87 e5       	ldi	r24, 0x57	; 87
    ae62:	90 e1       	ldi	r25, 0x10	; 16
    ae64:	91 83       	std	Z+1, r25	; 0x01
    ae66:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    ae68:	80 91 cd 0d 	lds	r24, 0x0DCD
    ae6c:	84 30       	cpi	r24, 0x04	; 4
    ae6e:	79 f0       	breq	.+30     	; 0xae8e <init_enemy_level_hazard+0x68>
    ae70:	38 f4       	brcc	.+14     	; 0xae80 <init_enemy_level_hazard+0x5a>
    ae72:	88 23       	and	r24, r24
    ae74:	91 f0       	breq	.+36     	; 0xae9a <init_enemy_level_hazard+0x74>
    ae76:	82 30       	cpi	r24, 0x02	; 2
    ae78:	81 f4       	brne	.+32     	; 0xae9a <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    ae7a:	8a e1       	ldi	r24, 0x1A	; 26
    ae7c:	9f e2       	ldi	r25, 0x2F	; 47
    ae7e:	0f c0       	rjmp	.+30     	; 0xae9e <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    ae80:	86 30       	cpi	r24, 0x06	; 6
    ae82:	41 f0       	breq	.+16     	; 0xae94 <init_enemy_level_hazard+0x6e>
    ae84:	88 30       	cpi	r24, 0x08	; 8
    ae86:	49 f4       	brne	.+18     	; 0xae9a <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    ae88:	81 e1       	ldi	r24, 0x11	; 17
    ae8a:	9f e2       	ldi	r25, 0x2F	; 47
    ae8c:	08 c0       	rjmp	.+16     	; 0xae9e <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    ae8e:	87 e1       	ldi	r24, 0x17	; 23
    ae90:	9f e2       	ldi	r25, 0x2F	; 47
    ae92:	05 c0       	rjmp	.+10     	; 0xae9e <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    ae94:	84 e1       	ldi	r24, 0x14	; 20
    ae96:	9f e2       	ldi	r25, 0x2F	; 47
    ae98:	02 c0       	rjmp	.+4      	; 0xae9e <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    ae9a:	8d e1       	ldi	r24, 0x1D	; 29
    ae9c:	9f e2       	ldi	r25, 0x2F	; 47
    ae9e:	90 93 58 10 	sts	0x1058, r25
    aea2:	80 93 57 10 	sts	0x1057, r24
	}
	game.enemies[i].shared.gravity = 0;
    aea6:	25 e3       	ldi	r18, 0x35	; 53
    aea8:	2a 9f       	mul	r18, r26
    aeaa:	c0 01       	movw	r24, r0
    aeac:	2b 9f       	mul	r18, r27
    aeae:	90 0d       	add	r25, r0
    aeb0:	11 24       	eor	r1, r1
    aeb2:	88 54       	subi	r24, 0x48	; 72
    aeb4:	92 4f       	sbci	r25, 0xF2	; 242
    aeb6:	fc 01       	movw	r30, r24
    aeb8:	e4 5e       	subi	r30, 0xE4	; 228
    aeba:	fe 4f       	sbci	r31, 0xFE	; 254
    aebc:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    aebe:	32 97       	sbiw	r30, 0x02	; 2
    aec0:	2e e1       	ldi	r18, 0x1E	; 30
    aec2:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    aec4:	31 96       	adiw	r30, 0x01	; 1
    aec6:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aec8:	35 97       	sbiw	r30, 0x05	; 5
    aeca:	71 83       	std	Z+1, r23	; 0x01
    aecc:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aece:	32 96       	adiw	r30, 0x02	; 2
    aed0:	51 83       	std	Z+1, r21	; 0x01
    aed2:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    aed4:	3d 96       	adiw	r30, 0x0d	; 13
    aed6:	83 e0       	ldi	r24, 0x03	; 3
    aed8:	56 95       	lsr	r21
    aeda:	47 95       	ror	r20
    aedc:	8a 95       	dec	r24
    aede:	e1 f7       	brne	.-8      	; 0xaed8 <init_enemy_level_hazard+0xb2>
    aee0:	40 83       	st	Z, r20
    aee2:	08 95       	ret

0000aee4 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    aee4:	cf 93       	push	r28
    aee6:	df 93       	push	r29
    aee8:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    aeea:	bc 01       	movw	r22, r24
    aeec:	88 81       	ld	r24, Y
    aeee:	99 81       	ldd	r25, Y+1	; 0x01
    aef0:	0e 94 75 3f 	call	0x7eea	; 0x7eea <EepromReadBlock>
	if (status == 0x03)
    aef4:	83 30       	cpi	r24, 0x03	; 3
    aef6:	29 f4       	brne	.+10     	; 0xaf02 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    aef8:	ce 01       	movw	r24, r28
	}
}
    aefa:	df 91       	pop	r29
    aefc:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    aefe:	0c 94 2b 3f 	jmp	0x7e56	; 0x7e56 <EepromWriteBlock>
	}
}
    af02:	df 91       	pop	r29
    af04:	cf 91       	pop	r28
    af06:	08 95       	ret

0000af08 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    af08:	1f 93       	push	r17
    af0a:	cf 93       	push	r28
    af0c:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    af0e:	d0 e0       	ldi	r29, 0x00	; 0
    af10:	10 e2       	ldi	r17, 0x20	; 32
    af12:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    af14:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    af16:	c1 17       	cp	r28, r17
    af18:	41 f0       	breq	.+16     	; 0xaf2a <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    af1a:	40 e0       	ldi	r20, 0x00	; 0
    af1c:	50 e0       	ldi	r21, 0x00	; 0
    af1e:	6c 2f       	mov	r22, r28
    af20:	8d 2f       	mov	r24, r29
    af22:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <SetTile>
    af26:	cf 5f       	subi	r28, 0xFF	; 255
    af28:	f6 cf       	rjmp	.-20     	; 0xaf16 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    af2a:	df 5f       	subi	r29, 0xFF	; 255
    af2c:	dc 31       	cpi	r29, 0x1C	; 28
    af2e:	91 f7       	brne	.-28     	; 0xaf14 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    af30:	df 91       	pop	r29
    af32:	cf 91       	pop	r28
    af34:	1f 91       	pop	r17
    af36:	08 95       	ret

0000af38 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    af38:	dc 01       	movw	r26, r24
    af3a:	e6 2f       	mov	r30, r22
    af3c:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    af3e:	25 e0       	ldi	r18, 0x05	; 5
    af40:	62 2f       	mov	r22, r18
    af42:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    af46:	58 2f       	mov	r21, r24
    af48:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    af4a:	40 91 ce 0d 	lds	r20, 0x0DCE
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    af4e:	8e 2f       	mov	r24, r30
    af50:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    af54:	e8 2f       	mov	r30, r24
    af56:	f0 e0       	ldi	r31, 0x00	; 0
    af58:	54 9f       	mul	r21, r20
    af5a:	e0 0d       	add	r30, r0
    af5c:	f1 1d       	adc	r31, r1
    af5e:	11 24       	eor	r1, r1
    af60:	32 96       	adiw	r30, 0x02	; 2
    af62:	ea 0f       	add	r30, r26
    af64:	fb 1f       	adc	r31, r27
    af66:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    af68:	e9 2f       	mov	r30, r25
    af6a:	f0 e0       	ldi	r31, 0x00	; 0
    af6c:	95 e0       	ldi	r25, 0x05	; 5
    af6e:	39 9f       	mul	r19, r25
    af70:	e0 0d       	add	r30, r0
    af72:	f1 1d       	adc	r31, r1
    af74:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    af76:	99 e1       	ldi	r25, 0x19	; 25
    af78:	89 9f       	mul	r24, r25
    af7a:	e0 0d       	add	r30, r0
    af7c:	f1 1d       	adc	r31, r1
    af7e:	11 24       	eor	r1, r1
    af80:	e7 5a       	subi	r30, 0xA7	; 167
    af82:	f6 4a       	sbci	r31, 0xA6	; 166
    af84:	84 91       	lpm	r24, Z
}
    af86:	08 95       	ret

0000af88 <render_camera_view>:

void render_camera_view()
{
    af88:	7f 92       	push	r7
    af8a:	8f 92       	push	r8
    af8c:	9f 92       	push	r9
    af8e:	af 92       	push	r10
    af90:	bf 92       	push	r11
    af92:	cf 92       	push	r12
    af94:	df 92       	push	r13
    af96:	ef 92       	push	r14
    af98:	ff 92       	push	r15
    af9a:	0f 93       	push	r16
    af9c:	1f 93       	push	r17
    af9e:	cf 93       	push	r28
    afa0:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    afa2:	c0 91 b8 0d 	lds	r28, 0x0DB8
    afa6:	d0 91 b9 0d 	lds	r29, 0x0DB9
    afaa:	83 e0       	ldi	r24, 0x03	; 3
    afac:	d6 95       	lsr	r29
    afae:	c7 95       	ror	r28
    afb0:	8a 95       	dec	r24
    afb2:	e1 f7       	brne	.-8      	; 0xafac <render_camera_view+0x24>
    afb4:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    afb6:	00 91 c0 0d 	lds	r16, 0x0DC0
    afba:	06 95       	lsr	r16
    afbc:	06 95       	lsr	r16
    afbe:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    afc0:	dd 27       	eor	r29, r29
    afc2:	7e 01       	movw	r14, r28
    afc4:	4c e1       	ldi	r20, 0x1C	; 28
    afc6:	e4 0e       	add	r14, r20
    afc8:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    afca:	10 e0       	ldi	r17, 0x00	; 0
    afcc:	68 01       	movw	r12, r16
    afce:	89 e1       	ldi	r24, 0x19	; 25
    afd0:	c8 0e       	add	r12, r24
    afd2:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    afd4:	9e e1       	ldi	r25, 0x1E	; 30
    afd6:	a9 2e       	mov	r10, r25
    afd8:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    afda:	ec 16       	cp	r14, r28
    afdc:	fd 06       	cpc	r15, r29
    afde:	70 f1       	brcs	.+92     	; 0xb03c <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    afe0:	48 01       	movw	r8, r16
    afe2:	c8 14       	cp	r12, r8
    afe4:	d9 04       	cpc	r13, r9
    afe6:	40 f1       	brcs	.+80     	; 0xb038 <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    afe8:	48 2d       	mov	r20, r8
    afea:	6c 2f       	mov	r22, r28
    afec:	80 91 d7 0f 	lds	r24, 0x0FD7
    aff0:	90 91 d8 0f 	lds	r25, 0x0FD8
    aff4:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    aff8:	28 2f       	mov	r18, r24
    affa:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    affc:	80 91 b6 0c 	lds	r24, 0x0CB6
    b000:	86 95       	lsr	r24
    b002:	86 95       	lsr	r24
    b004:	86 95       	lsr	r24
    b006:	90 e0       	ldi	r25, 0x00	; 0
    b008:	80 1b       	sub	r24, r16
    b00a:	91 0b       	sbc	r25, r17
    b00c:	88 0d       	add	r24, r8
    b00e:	99 1d       	adc	r25, r9
    b010:	b5 01       	movw	r22, r10
    b012:	0e 94 ed 70 	call	0xe1da	; 0xe1da <__udivmodhi4>
    b016:	90 91 b5 0c 	lds	r25, 0x0CB5
    b01a:	96 95       	lsr	r25
    b01c:	96 95       	lsr	r25
    b01e:	96 95       	lsr	r25
    b020:	97 19       	sub	r25, r7
    b022:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b024:	a9 01       	movw	r20, r18
    b026:	68 2f       	mov	r22, r24
    b028:	89 2f       	mov	r24, r25
    b02a:	8f 71       	andi	r24, 0x1F	; 31
    b02c:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b030:	8f ef       	ldi	r24, 0xFF	; 255
    b032:	88 1a       	sub	r8, r24
    b034:	98 0a       	sbc	r9, r24
    b036:	d5 cf       	rjmp	.-86     	; 0xafe2 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b038:	21 96       	adiw	r28, 0x01	; 1
    b03a:	cf cf       	rjmp	.-98     	; 0xafda <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b03c:	df 91       	pop	r29
    b03e:	cf 91       	pop	r28
    b040:	1f 91       	pop	r17
    b042:	0f 91       	pop	r16
    b044:	ff 90       	pop	r15
    b046:	ef 90       	pop	r14
    b048:	df 90       	pop	r13
    b04a:	cf 90       	pop	r12
    b04c:	bf 90       	pop	r11
    b04e:	af 90       	pop	r10
    b050:	9f 90       	pop	r9
    b052:	8f 90       	pop	r8
    b054:	7f 90       	pop	r7
    b056:	08 95       	ret

0000b058 <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b058:	28 2f       	mov	r18, r24
    b05a:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b05c:	80 91 cd 0d 	lds	r24, 0x0DCD
    b060:	81 11       	cpse	r24, r1
    b062:	04 c0       	rjmp	.+8      	; 0xb06c <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b064:	bf 01       	movw	r22, r30
    b066:	82 2f       	mov	r24, r18
    b068:	0c 94 db 54 	jmp	0xa9b6	; 0xa9b6 <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b06c:	82 30       	cpi	r24, 0x02	; 2
    b06e:	21 f4       	brne	.+8      	; 0xb078 <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b070:	bf 01       	movw	r22, r30
    b072:	82 2f       	mov	r24, r18
    b074:	0c 94 99 54 	jmp	0xa932	; 0xa932 <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b078:	84 30       	cpi	r24, 0x04	; 4
    b07a:	31 f4       	brne	.+12     	; 0xb088 <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b07c:	48 52       	subi	r20, 0x28	; 40
    b07e:	51 09       	sbc	r21, r1
    b080:	bf 01       	movw	r22, r30
    b082:	82 2f       	mov	r24, r18
    b084:	0c 94 18 55 	jmp	0xaa30	; 0xaa30 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b088:	80 91 d2 0d 	lds	r24, 0x0DD2
    b08c:	63 e0       	ldi	r22, 0x03	; 3
    b08e:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    b092:	99 23       	and	r25, r25
    b094:	39 f3       	breq	.-50     	; 0xb064 <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b096:	91 30       	cpi	r25, 0x01	; 1
    b098:	89 f7       	brne	.-30     	; 0xb07c <init_level_enemy+0x24>
    b09a:	ea cf       	rjmp	.-44     	; 0xb070 <init_level_enemy+0x18>

0000b09c <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b09c:	28 2f       	mov	r18, r24
    b09e:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b0a0:	80 91 cd 0d 	lds	r24, 0x0DCD
    b0a4:	81 30       	cpi	r24, 0x01	; 1
    b0a6:	21 f4       	brne	.+8      	; 0xb0b0 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b0a8:	bf 01       	movw	r22, r30
    b0aa:	82 2f       	mov	r24, r18
    b0ac:	0c 94 56 55 	jmp	0xaaac	; 0xaaac <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b0b0:	83 30       	cpi	r24, 0x03	; 3
    b0b2:	21 f4       	brne	.+8      	; 0xb0bc <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b0b4:	bf 01       	movw	r22, r30
    b0b6:	82 2f       	mov	r24, r18
    b0b8:	0c 94 91 55 	jmp	0xab22	; 0xab22 <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    b0bc:	85 30       	cpi	r24, 0x05	; 5
    b0be:	21 f4       	brne	.+8      	; 0xb0c8 <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    b0c0:	bf 01       	movw	r22, r30
    b0c2:	82 2f       	mov	r24, r18
    b0c4:	0c 94 cd 55 	jmp	0xab9a	; 0xab9a <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    b0c8:	80 91 d2 0d 	lds	r24, 0x0DD2
    b0cc:	63 e0       	ldi	r22, 0x03	; 3
    b0ce:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    b0d2:	99 23       	and	r25, r25
    b0d4:	49 f3       	breq	.-46     	; 0xb0a8 <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b0d6:	91 30       	cpi	r25, 0x01	; 1
    b0d8:	99 f7       	brne	.-26     	; 0xb0c0 <init_space_enemy+0x24>
    b0da:	ec cf       	rjmp	.-40     	; 0xb0b4 <init_space_enemy+0x18>

0000b0dc <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b0dc:	0f 93       	push	r16
    b0de:	1f 93       	push	r17
    b0e0:	cf 93       	push	r28
    b0e2:	df 93       	push	r29
    b0e4:	00 d0       	rcall	.+0      	; 0xb0e6 <spawn_enemy+0xa>
    b0e6:	00 d0       	rcall	.+0      	; 0xb0e8 <spawn_enemy+0xc>
    b0e8:	cd b7       	in	r28, 0x3d	; 61
    b0ea:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b0ec:	20 91 b8 0d 	lds	r18, 0x0DB8
    b0f0:	30 91 b9 0d 	lds	r19, 0x0DB9
    b0f4:	28 3c       	cpi	r18, 0xC8	; 200
    b0f6:	35 40       	sbci	r19, 0x05	; 5
    b0f8:	98 f5       	brcc	.+102    	; 0xb160 <spawn_enemy+0x84>
    b0fa:	28 eb       	ldi	r18, 0xB8	; 184
    b0fc:	3d e0       	ldi	r19, 0x0D	; 13
    b0fe:	10 e0       	ldi	r17, 0x00	; 0
    b100:	f9 01       	movw	r30, r18
    b102:	e3 5e       	subi	r30, 0xE3	; 227
    b104:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b106:	50 81       	ld	r21, Z
    b108:	51 11       	cpse	r21, r1
    b10a:	25 c0       	rjmp	.+74     	; 0xb156 <spawn_enemy+0x7a>
    b10c:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b10e:	50 81       	ld	r21, Z
    b110:	51 11       	cpse	r21, r1
    b112:	21 c0       	rjmp	.+66     	; 0xb156 <spawn_enemy+0x7a>
    b114:	04 2f       	mov	r16, r20
    b116:	ab 01       	movw	r20, r22
    b118:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b11a:	4b 83       	std	Y+3, r20	; 0x03
    b11c:	5c 83       	std	Y+4, r21	; 0x04
    b11e:	89 83       	std	Y+1, r24	; 0x01
    b120:	7a 83       	std	Y+2, r23	; 0x02
    b122:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    b126:	4b 81       	ldd	r20, Y+3	; 0x03
    b128:	5c 81       	ldd	r21, Y+4	; 0x04
    b12a:	69 81       	ldd	r22, Y+1	; 0x01
    b12c:	7a 81       	ldd	r23, Y+2	; 0x02
    b12e:	88 23       	and	r24, r24
    b130:	21 f0       	breq	.+8      	; 0xb13a <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b132:	81 2f       	mov	r24, r17
    b134:	0e 94 4e 58 	call	0xb09c	; 0xb09c <init_space_enemy>
    b138:	08 c0       	rjmp	.+16     	; 0xb14a <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b13a:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b13c:	01 11       	cpse	r16, r1
    b13e:	03 c0       	rjmp	.+6      	; 0xb146 <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b140:	0e 94 2c 58 	call	0xb058	; 0xb058 <init_level_enemy>
    b144:	02 c0       	rjmp	.+4      	; 0xb14a <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b146:	0e 94 13 57 	call	0xae26	; 0xae26 <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b14a:	80 91 d3 0d 	lds	r24, 0x0DD3
    b14e:	8f 5f       	subi	r24, 0xFF	; 255
    b150:	80 93 d3 0d 	sts	0x0DD3, r24
    b154:	05 c0       	rjmp	.+10     	; 0xb160 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b156:	1f 5f       	subi	r17, 0xFF	; 255
    b158:	2b 5c       	subi	r18, 0xCB	; 203
    b15a:	3f 4f       	sbci	r19, 0xFF	; 255
    b15c:	15 30       	cpi	r17, 0x05	; 5
    b15e:	81 f6       	brne	.-96     	; 0xb100 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b160:	0f 90       	pop	r0
    b162:	0f 90       	pop	r0
    b164:	0f 90       	pop	r0
    b166:	0f 90       	pop	r0
    b168:	df 91       	pop	r29
    b16a:	cf 91       	pop	r28
    b16c:	1f 91       	pop	r17
    b16e:	0f 91       	pop	r16
    b170:	08 95       	ret

0000b172 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b172:	9f ef       	ldi	r25, 0xFF	; 255
    b174:	98 0f       	add	r25, r24
    b176:	9e 30       	cpi	r25, 0x0E	; 14
    b178:	28 f0       	brcs	.+10     	; 0xb184 <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    b17a:	8f 50       	subi	r24, 0x0F	; 15
    b17c:	8c 30       	cpi	r24, 0x0C	; 12
    b17e:	20 f0       	brcs	.+8      	; 0xb188 <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b180:	80 e0       	ldi	r24, 0x00	; 0
    b182:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b184:	81 e0       	ldi	r24, 0x01	; 1
    b186:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    b188:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b18a:	08 95       	ret

0000b18c <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b18c:	af 92       	push	r10
    b18e:	bf 92       	push	r11
    b190:	cf 92       	push	r12
    b192:	df 92       	push	r13
    b194:	ef 92       	push	r14
    b196:	ff 92       	push	r15
    b198:	0f 93       	push	r16
    b19a:	1f 93       	push	r17
    b19c:	cf 93       	push	r28
    b19e:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b1a0:	66 e1       	ldi	r22, 0x16	; 22
    b1a2:	82 e0       	ldi	r24, 0x02	; 2
    b1a4:	0e 94 d9 4d 	call	0x9bb2	; 0x9bb2 <LBRandom>
    b1a8:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b1aa:	80 91 c9 0d 	lds	r24, 0x0DC9
    b1ae:	8f 5f       	subi	r24, 0xFF	; 255
    b1b0:	80 93 c9 0d 	sts	0x0DC9, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b1b4:	20 91 d4 0d 	lds	r18, 0x0DD4
    b1b8:	62 2f       	mov	r22, r18
    b1ba:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    b1be:	89 2f       	mov	r24, r25
    b1c0:	90 e0       	ldi	r25, 0x00	; 0
    b1c2:	30 e0       	ldi	r19, 0x00	; 0
    b1c4:	21 50       	subi	r18, 0x01	; 1
    b1c6:	31 09       	sbc	r19, r1
    b1c8:	82 17       	cp	r24, r18
    b1ca:	93 07       	cpc	r25, r19
    b1cc:	31 f4       	brne	.+12     	; 0xb1da <append_tile_column+0x4e>
    b1ce:	bb 24       	eor	r11, r11
    b1d0:	b3 94       	inc	r11
    b1d2:	80 91 d3 0d 	lds	r24, 0x0DD3
    b1d6:	85 30       	cpi	r24, 0x05	; 5
    b1d8:	08 f0       	brcs	.+2      	; 0xb1dc <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b1da:	b1 2c       	mov	r11, r1
    b1dc:	00 e0       	ldi	r16, 0x00	; 0
    b1de:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b1e0:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    b1e2:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b1e4:	2e e1       	ldi	r18, 0x1E	; 30
    b1e6:	c2 2e       	mov	r12, r18
    b1e8:	d1 2c       	mov	r13, r1
    b1ea:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b1ec:	40 91 c0 0d 	lds	r20, 0x0DC0
    b1f0:	46 95       	lsr	r20
    b1f2:	46 95       	lsr	r20
    b1f4:	46 95       	lsr	r20
    b1f6:	40 0f       	add	r20, r16
    b1f8:	60 91 c1 0d 	lds	r22, 0x0DC1
    b1fc:	80 91 d7 0f 	lds	r24, 0x0FD7
    b200:	90 91 d8 0f 	lds	r25, 0x0FD8
    b204:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    b208:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b20a:	28 2f       	mov	r18, r24
    b20c:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b20e:	80 91 b6 0c 	lds	r24, 0x0CB6
    b212:	86 95       	lsr	r24
    b214:	86 95       	lsr	r24
    b216:	86 95       	lsr	r24
    b218:	a8 01       	movw	r20, r16
    b21a:	48 0f       	add	r20, r24
    b21c:	51 1d       	adc	r21, r1
    b21e:	ca 01       	movw	r24, r20
    b220:	b6 01       	movw	r22, r12
    b222:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b226:	a9 01       	movw	r20, r18
    b228:	68 2f       	mov	r22, r24
    b22a:	80 91 c5 0d 	lds	r24, 0x0DC5
    b22e:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b232:	bb 20       	and	r11, r11
    b234:	81 f0       	breq	.+32     	; 0xb256 <append_tile_column+0xca>
    b236:	01 15       	cp	r16, r1
    b238:	11 05       	cpc	r17, r1
    b23a:	69 f0       	breq	.+26     	; 0xb256 <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b23c:	81 ef       	ldi	r24, 0xF1	; 241
    b23e:	8e 0d       	add	r24, r14
    b240:	85 30       	cpi	r24, 0x05	; 5
    b242:	30 f0       	brcs	.+12     	; 0xb250 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b244:	8f ef       	ldi	r24, 0xFF	; 255
    b246:	8e 0d       	add	r24, r14
    b248:	8e 30       	cpi	r24, 0x0E	; 14
    b24a:	08 f4       	brcc	.+2      	; 0xb24e <append_tile_column+0xc2>
    b24c:	60 c0       	rjmp	.+192    	; 0xb30e <append_tile_column+0x182>
    b24e:	03 c0       	rjmp	.+6      	; 0xb256 <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b250:	c1 11       	cpse	r28, r1
    b252:	f8 cf       	rjmp	.-16     	; 0xb244 <append_tile_column+0xb8>
    b254:	c0 2f       	mov	r28, r16
    b256:	0f 5f       	subi	r16, 0xFF	; 255
    b258:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b25a:	09 31       	cpi	r16, 0x19	; 25
    b25c:	11 05       	cpc	r17, r1
    b25e:	29 f6       	brne	.-118    	; 0xb1ea <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b260:	bb 20       	and	r11, r11
    b262:	51 f0       	breq	.+20     	; 0xb278 <append_tile_column+0xec>
    b264:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    b268:	88 23       	and	r24, r24
    b26a:	31 f0       	breq	.+12     	; 0xb278 <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b26c:	ff 0c       	add	r15, r15
    b26e:	ff 0c       	add	r15, r15
    b270:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b272:	6f 2d       	mov	r22, r15
    b274:	70 e0       	ldi	r23, 0x00	; 0
    b276:	32 c0       	rjmp	.+100    	; 0xb2dc <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b278:	cc 23       	and	r28, r28
    b27a:	f1 f0       	breq	.+60     	; 0xb2b8 <append_tile_column+0x12c>
    b27c:	80 91 cd 0d 	lds	r24, 0x0DCD
    b280:	90 91 c0 0d 	lds	r25, 0x0DC0
    b284:	20 91 b8 0d 	lds	r18, 0x0DB8
    b288:	30 91 b9 0d 	lds	r19, 0x0DB9
    b28c:	6c 2f       	mov	r22, r28
    b28e:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b290:	96 95       	lsr	r25
    b292:	96 95       	lsr	r25
    b294:	96 95       	lsr	r25
    b296:	69 0f       	add	r22, r25
    b298:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b29a:	82 30       	cpi	r24, 0x02	; 2
    b29c:	19 f4       	brne	.+6      	; 0xb2a4 <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b29e:	61 50       	subi	r22, 0x01	; 1
    b2a0:	71 09       	sbc	r23, r1
    b2a2:	02 c0       	rjmp	.+4      	; 0xb2a8 <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b2a4:	6f 5f       	subi	r22, 0xFF	; 255
    b2a6:	7f 4f       	sbci	r23, 0xFF	; 255
    b2a8:	93 e0       	ldi	r25, 0x03	; 3
    b2aa:	66 0f       	add	r22, r22
    b2ac:	77 1f       	adc	r23, r23
    b2ae:	9a 95       	dec	r25
    b2b0:	e1 f7       	brne	.-8      	; 0xb2aa <append_tile_column+0x11e>
    b2b2:	41 e0       	ldi	r20, 0x01	; 1
    b2b4:	c9 01       	movw	r24, r18
    b2b6:	17 c0       	rjmp	.+46     	; 0xb2e6 <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b2b8:	dd 23       	and	r29, r29
    b2ba:	c9 f0       	breq	.+50     	; 0xb2ee <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b2bc:	80 91 c0 0d 	lds	r24, 0x0DC0
    b2c0:	86 95       	lsr	r24
    b2c2:	86 95       	lsr	r24
    b2c4:	86 95       	lsr	r24
    b2c6:	6d 2f       	mov	r22, r29
    b2c8:	70 e0       	ldi	r23, 0x00	; 0
    b2ca:	68 0f       	add	r22, r24
    b2cc:	71 1d       	adc	r23, r1
    b2ce:	61 50       	subi	r22, 0x01	; 1
    b2d0:	71 09       	sbc	r23, r1
    b2d2:	83 e0       	ldi	r24, 0x03	; 3
    b2d4:	66 0f       	add	r22, r22
    b2d6:	77 1f       	adc	r23, r23
    b2d8:	8a 95       	dec	r24
    b2da:	e1 f7       	brne	.-8      	; 0xb2d4 <append_tile_column+0x148>
    b2dc:	80 91 b8 0d 	lds	r24, 0x0DB8
    b2e0:	90 91 b9 0d 	lds	r25, 0x0DB9
    b2e4:	40 e0       	ldi	r20, 0x00	; 0
    b2e6:	80 52       	subi	r24, 0x20	; 32
    b2e8:	9f 4f       	sbci	r25, 0xFF	; 255
    b2ea:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b2ee:	80 91 c1 0d 	lds	r24, 0x0DC1
    b2f2:	8f 5f       	subi	r24, 0xFF	; 255
    b2f4:	80 93 c1 0d 	sts	0x0DC1, r24
	game.scroll_dest_x++;
    b2f8:	80 91 c5 0d 	lds	r24, 0x0DC5
    b2fc:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b2fe:	80 32       	cpi	r24, 0x20	; 32
    b300:	18 f4       	brcc	.+6      	; 0xb308 <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b302:	80 93 c5 0d 	sts	0x0DC5, r24
    b306:	07 c0       	rjmp	.+14     	; 0xb316 <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b308:	10 92 c5 0d 	sts	0x0DC5, r1
    b30c:	04 c0       	rjmp	.+8      	; 0xb316 <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b30e:	d1 11       	cpse	r29, r1
    b310:	a2 cf       	rjmp	.-188    	; 0xb256 <append_tile_column+0xca>
    b312:	da 2d       	mov	r29, r10
    b314:	a0 cf       	rjmp	.-192    	; 0xb256 <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b316:	df 91       	pop	r29
    b318:	cf 91       	pop	r28
    b31a:	1f 91       	pop	r17
    b31c:	0f 91       	pop	r16
    b31e:	ff 90       	pop	r15
    b320:	ef 90       	pop	r14
    b322:	df 90       	pop	r13
    b324:	cf 90       	pop	r12
    b326:	bf 90       	pop	r11
    b328:	af 90       	pop	r10
    b32a:	08 95       	ret

0000b32c <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b32c:	80 91 b8 0d 	lds	r24, 0x0DB8
    b330:	90 91 b9 0d 	lds	r25, 0x0DB9
    b334:	01 96       	adiw	r24, 0x01	; 1
    b336:	90 93 b9 0d 	sts	0x0DB9, r25
    b33a:	80 93 b8 0d 	sts	0x0DB8, r24
	Scroll(1,0);
    b33e:	60 e0       	ldi	r22, 0x00	; 0
    b340:	81 e0       	ldi	r24, 0x01	; 1
    b342:	0e 94 81 4b 	call	0x9702	; 0x9702 <Scroll>
	if (++game.scroll_x == 8)
    b346:	80 91 c3 0d 	lds	r24, 0x0DC3
    b34a:	8f 5f       	subi	r24, 0xFF	; 255
    b34c:	88 30       	cpi	r24, 0x08	; 8
    b34e:	19 f0       	breq	.+6      	; 0xb356 <move_camera_x+0x2a>
    b350:	80 93 c3 0d 	sts	0x0DC3, r24
    b354:	08 95       	ret
	{
		game.scroll_x = 0;
    b356:	10 92 c3 0d 	sts	0x0DC3, r1
		append_tile_column();
    b35a:	0c 94 c6 58 	jmp	0xb18c	; 0xb18c <append_tile_column>

0000b35e <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b35e:	82 e0       	ldi	r24, 0x02	; 2
    b360:	80 93 2d 0e 	sts	0x0E2D, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b364:	85 e0       	ldi	r24, 0x05	; 5
    b366:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.anims = run_anim;
    b36a:	e7 e3       	ldi	r30, 0x37	; 55
    b36c:	f0 e1       	ldi	r31, 0x10	; 16
    b36e:	f0 93 33 0e 	sts	0x0E33, r31
    b372:	e0 93 32 0e 	sts	0x0E32, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b376:	8d e8       	ldi	r24, 0x8D	; 141
    b378:	9f e2       	ldi	r25, 0x2F	; 47
    b37a:	91 83       	std	Z+1, r25	; 0x01
    b37c:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b37e:	83 e8       	ldi	r24, 0x83	; 131
    b380:	9f e2       	ldi	r25, 0x2F	; 47
    b382:	93 83       	std	Z+3, r25	; 0x03
    b384:	82 83       	std	Z+2, r24	; 0x02
    b386:	08 95       	ret

0000b388 <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b388:	a8 eb       	ldi	r26, 0xB8	; 184
    b38a:	bd e0       	ldi	r27, 0x0D	; 13
    b38c:	90 93 d8 0f 	sts	0x0FD8, r25
    b390:	80 93 d7 0f 	sts	0x0FD7, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b394:	fc 01       	movw	r30, r24
    b396:	24 91       	lpm	r18, Z
    b398:	56 96       	adiw	r26, 0x16	; 22
    b39a:	2c 93       	st	X, r18
    b39c:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b39e:	9c 01       	movw	r18, r24
    b3a0:	2f 5f       	subi	r18, 0xFF	; 255
    b3a2:	3f 4f       	sbci	r19, 0xFF	; 255
    b3a4:	f9 01       	movw	r30, r18
    b3a6:	44 91       	lpm	r20, Z
    b3a8:	57 96       	adiw	r26, 0x17	; 23
    b3aa:	4c 93       	st	X, r20
    b3ac:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b3ae:	fc 01       	movw	r30, r24
    b3b0:	84 91       	lpm	r24, Z
    b3b2:	98 2f       	mov	r25, r24
    b3b4:	99 0f       	add	r25, r25
    b3b6:	99 0f       	add	r25, r25
    b3b8:	89 0f       	add	r24, r25
    b3ba:	1f 96       	adiw	r26, 0x0f	; 15
    b3bc:	8c 93       	st	X, r24
    b3be:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b3c0:	f9 01       	movw	r30, r18
    b3c2:	24 91       	lpm	r18, Z
    b3c4:	82 2f       	mov	r24, r18
    b3c6:	88 0f       	add	r24, r24
    b3c8:	88 0f       	add	r24, r24
    b3ca:	28 0f       	add	r18, r24
    b3cc:	50 96       	adiw	r26, 0x10	; 16
    b3ce:	2c 93       	st	X, r18
    b3d0:	08 95       	ret

0000b3d2 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b3d2:	cf 92       	push	r12
    b3d4:	df 92       	push	r13
    b3d6:	ef 92       	push	r14
    b3d8:	ff 92       	push	r15
    b3da:	0f 93       	push	r16
    b3dc:	1f 93       	push	r17
    b3de:	cf 93       	push	r28
    b3e0:	df 93       	push	r29
    b3e2:	7c 01       	movw	r14, r24
    b3e4:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b3e6:	88 e0       	ldi	r24, 0x08	; 8
    b3e8:	48 9f       	mul	r20, r24
    b3ea:	80 01       	movw	r16, r0
    b3ec:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b3ee:	c0 e0       	ldi	r28, 0x00	; 0
    b3f0:	cd 17       	cp	r28, r29
    b3f2:	09 f4       	brne	.+2      	; 0xb3f6 <on_solid_ground+0x24>
    b3f4:	41 c0       	rjmp	.+130    	; 0xb478 <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b3f6:	f7 01       	movw	r30, r14
    b3f8:	42 81       	ldd	r20, Z+2	; 0x02
    b3fa:	53 81       	ldd	r21, Z+3	; 0x03
    b3fc:	40 0f       	add	r20, r16
    b3fe:	51 1f       	adc	r21, r17
    b400:	83 e0       	ldi	r24, 0x03	; 3
    b402:	56 95       	lsr	r21
    b404:	47 95       	ror	r20
    b406:	8a 95       	dec	r24
    b408:	e1 f7       	brne	.-8      	; 0xb402 <on_solid_ground+0x30>
    b40a:	60 81       	ld	r22, Z
    b40c:	71 81       	ldd	r23, Z+1	; 0x01
    b40e:	93 e0       	ldi	r25, 0x03	; 3
    b410:	76 95       	lsr	r23
    b412:	67 95       	ror	r22
    b414:	9a 95       	dec	r25
    b416:	e1 f7       	brne	.-8      	; 0xb410 <on_solid_ground+0x3e>
    b418:	6c 0f       	add	r22, r28
    b41a:	80 91 d7 0f 	lds	r24, 0x0FD7
    b41e:	90 91 d8 0f 	lds	r25, 0x0FD8
    b422:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    b426:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b428:	f7 01       	movw	r30, r14
    b42a:	42 81       	ldd	r20, Z+2	; 0x02
    b42c:	53 81       	ldd	r21, Z+3	; 0x03
    b42e:	40 0f       	add	r20, r16
    b430:	51 1f       	adc	r21, r17
    b432:	23 e0       	ldi	r18, 0x03	; 3
    b434:	56 95       	lsr	r21
    b436:	47 95       	ror	r20
    b438:	2a 95       	dec	r18
    b43a:	e1 f7       	brne	.-8      	; 0xb434 <on_solid_ground+0x62>
    b43c:	20 81       	ld	r18, Z
    b43e:	31 81       	ldd	r19, Z+1	; 0x01
    b440:	29 5f       	subi	r18, 0xF9	; 249
    b442:	3f 4f       	sbci	r19, 0xFF	; 255
    b444:	53 e0       	ldi	r21, 0x03	; 3
    b446:	36 95       	lsr	r19
    b448:	27 95       	ror	r18
    b44a:	5a 95       	dec	r21
    b44c:	e1 f7       	brne	.-8      	; 0xb446 <on_solid_ground+0x74>
    b44e:	6c 2f       	mov	r22, r28
    b450:	62 0f       	add	r22, r18
    b452:	80 91 d7 0f 	lds	r24, 0x0FD7
    b456:	90 91 d8 0f 	lds	r25, 0x0FD8
    b45a:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    b45e:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b460:	8c 2d       	mov	r24, r12
    b462:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    b466:	81 11       	cpse	r24, r1
    b468:	09 c0       	rjmp	.+18     	; 0xb47c <on_solid_ground+0xaa>
    b46a:	8d 2d       	mov	r24, r13
    b46c:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    b470:	81 11       	cpse	r24, r1
    b472:	04 c0       	rjmp	.+8      	; 0xb47c <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b474:	cf 5f       	subi	r28, 0xFF	; 255
    b476:	bc cf       	rjmp	.-136    	; 0xb3f0 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b478:	80 e0       	ldi	r24, 0x00	; 0
    b47a:	01 c0       	rjmp	.+2      	; 0xb47e <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b47c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b47e:	df 91       	pop	r29
    b480:	cf 91       	pop	r28
    b482:	1f 91       	pop	r17
    b484:	0f 91       	pop	r16
    b486:	ff 90       	pop	r15
    b488:	ef 90       	pop	r14
    b48a:	df 90       	pop	r13
    b48c:	cf 90       	pop	r12
    b48e:	08 95       	ret

0000b490 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b490:	9c 01       	movw	r18, r24
    b492:	80 91 fb 0c 	lds	r24, 0x0CFB
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b496:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b498:	83 30       	cpi	r24, 0x03	; 3
    b49a:	08 f0       	brcs	.+2      	; 0xb49e <find_shot_slot+0xe>
    b49c:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b49e:	f9 01       	movw	r30, r18
    b4a0:	48 9f       	mul	r20, r24
    b4a2:	e0 0d       	add	r30, r0
    b4a4:	f1 1d       	adc	r31, r1
    b4a6:	11 24       	eor	r1, r1
    b4a8:	51 8d       	ldd	r21, Z+25	; 0x19
    b4aa:	91 e0       	ldi	r25, 0x01	; 1
    b4ac:	98 0f       	add	r25, r24
    b4ae:	51 11       	cpse	r21, r1
    b4b0:	03 c0       	rjmp	.+6      	; 0xb4b8 <find_shot_slot+0x28>
		{
			return i++;
    b4b2:	90 93 fb 0c 	sts	0x0CFB, r25
    b4b6:	08 95       	ret
		}
		i++;
    b4b8:	89 2f       	mov	r24, r25
	}
    b4ba:	ee cf       	rjmp	.-36     	; 0xb498 <find_shot_slot+0x8>

0000b4bc <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b4bc:	bf 92       	push	r11
    b4be:	cf 92       	push	r12
    b4c0:	df 92       	push	r13
    b4c2:	ef 92       	push	r14
    b4c4:	ff 92       	push	r15
    b4c6:	0f 93       	push	r16
    b4c8:	1f 93       	push	r17
    b4ca:	cf 93       	push	r28
    b4cc:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_B && player->active_shots < MAX_PLAYER_SHOTS)
    b4ce:	fc 01       	movw	r30, r24
    b4d0:	ec 58       	subi	r30, 0x8C	; 140
    b4d2:	ff 4f       	sbci	r31, 0xFF	; 255
    b4d4:	20 81       	ld	r18, Z
    b4d6:	20 ff       	sbrs	r18, 0
    b4d8:	a7 c0       	rjmp	.+334    	; 0xb628 <update_shot+0x16c>
    b4da:	fc 01       	movw	r30, r24
    b4dc:	27 81       	ldd	r18, Z+7	; 0x07
    b4de:	23 30       	cpi	r18, 0x03	; 3
    b4e0:	08 f0       	brcs	.+2      	; 0xb4e4 <update_shot+0x28>
    b4e2:	a2 c0       	rjmp	.+324    	; 0xb628 <update_shot+0x16c>
    b4e4:	16 2f       	mov	r17, r22
    b4e6:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    b4e8:	0e 94 48 5a 	call	0xb490	; 0xb490 <find_shot_slot>
    b4ec:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    b4ee:	e8 2e       	mov	r14, r24
    b4f0:	f1 2c       	mov	r15, r1
    b4f2:	fe 01       	movw	r30, r28
    b4f4:	24 e1       	ldi	r18, 0x14	; 20
    b4f6:	82 9f       	mul	r24, r18
    b4f8:	e0 0d       	add	r30, r0
    b4fa:	f1 1d       	adc	r31, r1
    b4fc:	11 24       	eor	r1, r1
    b4fe:	87 89       	ldd	r24, Z+23	; 0x17
    b500:	86 30       	cpi	r24, 0x06	; 6
    b502:	29 f4       	brne	.+10     	; 0xb50e <update_shot+0x52>
    b504:	8a 81       	ldd	r24, Y+2	; 0x02
    b506:	9b 81       	ldd	r25, Y+3	; 0x03
    b508:	04 97       	sbiw	r24, 0x04	; 4
    b50a:	08 f4       	brcc	.+2      	; 0xb50e <update_shot+0x52>
    b50c:	8d c0       	rjmp	.+282    	; 0xb628 <update_shot+0x16c>
		SFX_PLAYER_SHOOT;
    b50e:	2f ef       	ldi	r18, 0xFF	; 255
    b510:	43 e2       	ldi	r20, 0x23	; 35
    b512:	63 e0       	ldi	r22, 0x03	; 3
    b514:	82 e0       	ldi	r24, 0x02	; 2
    b516:	0e 94 db 41 	call	0x83b6	; 0x83b6 <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b51a:	84 e1       	ldi	r24, 0x14	; 20
    b51c:	8e 9d       	mul	r24, r14
    b51e:	60 01       	movw	r12, r0
    b520:	8f 9d       	mul	r24, r15
    b522:	d0 0c       	add	r13, r0
    b524:	11 24       	eor	r1, r1
    b526:	c6 01       	movw	r24, r12
    b528:	4c 96       	adiw	r24, 0x1c	; 28
    b52a:	8c 0f       	add	r24, r28
    b52c:	9d 1f       	adc	r25, r29
    b52e:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    b532:	40 e0       	ldi	r20, 0x00	; 0
    b534:	bc 01       	movw	r22, r24
    b536:	8b 2d       	mov	r24, r11
    b538:	81 0f       	add	r24, r17
    b53a:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
		player->shot[idx].active = 1;
    b53e:	8e 01       	movw	r16, r28
    b540:	0c 0d       	add	r16, r12
    b542:	1d 1d       	adc	r17, r13
    b544:	81 e0       	ldi	r24, 0x01	; 1
    b546:	f8 01       	movw	r30, r16
    b548:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    b54a:	ca 80       	ldd	r12, Y+2	; 0x02
    b54c:	db 80       	ldd	r13, Y+3	; 0x03
    b54e:	f8 ef       	ldi	r31, 0xF8	; 248
    b550:	cf 22       	and	r12, r31
    b552:	f8 01       	movw	r30, r16
    b554:	83 8d       	ldd	r24, Z+27	; 0x1b
    b556:	c8 0e       	add	r12, r24
    b558:	d1 1c       	adc	r13, r1
    b55a:	87 fd       	sbrc	r24, 7
    b55c:	da 94       	dec	r13
    b55e:	d3 8a       	std	Z+19, r13	; 0x13
    b560:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    b562:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    b566:	28 81       	ld	r18, Y
    b568:	39 81       	ldd	r19, Y+1	; 0x01
    b56a:	88 23       	and	r24, r24
    b56c:	e1 f0       	breq	.+56     	; 0xb5a6 <update_shot+0xea>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b56e:	8b 85       	ldd	r24, Y+11	; 0x0b
    b570:	f8 e0       	ldi	r31, 0x08	; 8
    b572:	8f 9f       	mul	r24, r31
    b574:	20 0d       	add	r18, r0
    b576:	31 1d       	adc	r19, r1
    b578:	11 24       	eor	r1, r1
    b57a:	f8 01       	movw	r30, r16
    b57c:	31 8b       	std	Z+17, r19	; 0x11
    b57e:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b580:	82 8d       	ldd	r24, Z+26	; 0x1a
    b582:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    b584:	87 89       	ldd	r24, Z+23	; 0x17
    b586:	86 30       	cpi	r24, 0x06	; 6
    b588:	09 f0       	breq	.+2      	; 0xb58c <update_shot+0xd0>
    b58a:	4b c0       	rjmp	.+150    	; 0xb622 <update_shot+0x166>
    b58c:	fe 01       	movw	r30, r28
    b58e:	24 e1       	ldi	r18, 0x14	; 20
    b590:	b2 9e       	mul	r11, r18
    b592:	e0 0d       	add	r30, r0
    b594:	f1 1d       	adc	r31, r1
    b596:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    b598:	84 89       	ldd	r24, Z+20	; 0x14
    b59a:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    b59c:	81 11       	cpse	r24, r1
    b59e:	01 c0       	rjmp	.+2      	; 0xb5a2 <update_shot+0xe6>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    b5a0:	8f e7       	ldi	r24, 0x7F	; 127
    b5a2:	84 8b       	std	Z+20, r24	; 0x14
    b5a4:	3e c0       	rjmp	.+124    	; 0xb622 <update_shot+0x166>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    b5a6:	88 85       	ldd	r24, Y+8	; 0x08
    b5a8:	82 fd       	sbrc	r24, 2
    b5aa:	06 c0       	rjmp	.+12     	; 0xb5b8 <update_shot+0xfc>
			{
				player->shot[idx].shared.y += 8;
    b5ac:	88 e0       	ldi	r24, 0x08	; 8
    b5ae:	c8 0e       	add	r12, r24
    b5b0:	d1 1c       	adc	r13, r1
    b5b2:	f8 01       	movw	r30, r16
    b5b4:	d3 8a       	std	Z+19, r13	; 0x13
    b5b6:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    b5b8:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b5ba:	94 e1       	ldi	r25, 0x14	; 20
    b5bc:	9e 9d       	mul	r25, r14
    b5be:	f0 01       	movw	r30, r0
    b5c0:	9f 9d       	mul	r25, r15
    b5c2:	f0 0d       	add	r31, r0
    b5c4:	11 24       	eor	r1, r1
    b5c6:	ec 0f       	add	r30, r28
    b5c8:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    b5ca:	81 30       	cpi	r24, 0x01	; 1
    b5cc:	a9 f4       	brne	.+42     	; 0xb5f8 <update_shot+0x13c>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b5ce:	20 5f       	subi	r18, 0xF0	; 240
    b5d0:	3f 4f       	sbci	r19, 0xFF	; 255
    b5d2:	31 8b       	std	Z+17, r19	; 0x11
    b5d4:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b5d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    b5d8:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b5da:	27 89       	ldd	r18, Z+23	; 0x17
    b5dc:	24 30       	cpi	r18, 0x04	; 4
    b5de:	09 f5       	brne	.+66     	; 0xb622 <update_shot+0x166>
    b5e0:	ff ef       	ldi	r31, 0xFF	; 255
    b5e2:	ef 1a       	sub	r14, r31
    b5e4:	ff 0a       	sbc	r15, r31
    b5e6:	9e 9d       	mul	r25, r14
    b5e8:	f0 01       	movw	r30, r0
    b5ea:	9f 9d       	mul	r25, r15
    b5ec:	f0 0d       	add	r31, r0
    b5ee:	11 24       	eor	r1, r1
    b5f0:	ec 0f       	add	r30, r28
    b5f2:	fd 1f       	adc	r31, r29
    b5f4:	81 95       	neg	r24
    b5f6:	14 c0       	rjmp	.+40     	; 0xb620 <update_shot+0x164>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    b5f8:	28 50       	subi	r18, 0x08	; 8
    b5fa:	31 09       	sbc	r19, r1
    b5fc:	31 8b       	std	Z+17, r19	; 0x11
    b5fe:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    b600:	82 8d       	ldd	r24, Z+26	; 0x1a
    b602:	81 95       	neg	r24
    b604:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b606:	27 89       	ldd	r18, Z+23	; 0x17
    b608:	24 30       	cpi	r18, 0x04	; 4
    b60a:	59 f4       	brne	.+22     	; 0xb622 <update_shot+0x166>
    b60c:	2f ef       	ldi	r18, 0xFF	; 255
    b60e:	e2 1a       	sub	r14, r18
    b610:	f2 0a       	sbc	r15, r18
    b612:	9e 9d       	mul	r25, r14
    b614:	f0 01       	movw	r30, r0
    b616:	9f 9d       	mul	r25, r15
    b618:	f0 0d       	add	r31, r0
    b61a:	11 24       	eor	r1, r1
    b61c:	ec 0f       	add	r30, r28
    b61e:	fd 1f       	adc	r31, r29
    b620:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    b622:	8f 81       	ldd	r24, Y+7	; 0x07
    b624:	8f 5f       	subi	r24, 0xFF	; 255
    b626:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    b628:	df 91       	pop	r29
    b62a:	cf 91       	pop	r28
    b62c:	1f 91       	pop	r17
    b62e:	0f 91       	pop	r16
    b630:	ff 90       	pop	r15
    b632:	ef 90       	pop	r14
    b634:	df 90       	pop	r13
    b636:	cf 90       	pop	r12
    b638:	bf 90       	pop	r11
    b63a:	08 95       	ret

0000b63c <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    b63c:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    b63e:	40 81       	ld	r20, Z
    b640:	51 81       	ldd	r21, Z+1	; 0x01
    b642:	20 91 b8 0d 	lds	r18, 0x0DB8
    b646:	30 91 b9 0d 	lds	r19, 0x0DB9
    b64a:	42 17       	cp	r20, r18
    b64c:	53 07       	cpc	r21, r19
    b64e:	08 f1       	brcs	.+66     	; 0xb692 <out_of_bounds+0x56>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    b650:	48 5f       	subi	r20, 0xF8	; 248
    b652:	5f 4f       	sbci	r21, 0xFF	; 255
    b654:	20 52       	subi	r18, 0x20	; 32
    b656:	3f 4f       	sbci	r19, 0xFF	; 255
    b658:	24 17       	cp	r18, r20
    b65a:	35 07       	cpc	r19, r21
    b65c:	d0 f0       	brcs	.+52     	; 0xb692 <out_of_bounds+0x56>
	if (s->y < game.camera_y) return 1;
    b65e:	42 81       	ldd	r20, Z+2	; 0x02
    b660:	53 81       	ldd	r21, Z+3	; 0x03
    b662:	20 91 c0 0d 	lds	r18, 0x0DC0
    b666:	30 e0       	ldi	r19, 0x00	; 0
    b668:	42 17       	cp	r20, r18
    b66a:	53 07       	cpc	r21, r19
    b66c:	90 f0       	brcs	.+36     	; 0xb692 <out_of_bounds+0x56>
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
    b66e:	c9 01       	movw	r24, r18
    b670:	01 96       	adiw	r24, 0x01	; 1
    b672:	48 17       	cp	r20, r24
    b674:	59 07       	cpc	r21, r25
    b676:	18 f4       	brcc	.+6      	; 0xb67e <out_of_bounds+0x42>
    b678:	84 81       	ldd	r24, Z+4	; 0x04
    b67a:	81 11       	cpse	r24, r1
    b67c:	0a c0       	rjmp	.+20     	; 0xb692 <out_of_bounds+0x56>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    b67e:	48 5f       	subi	r20, 0xF8	; 248
    b680:	5f 4f       	sbci	r21, 0xFF	; 255
    b682:	28 53       	subi	r18, 0x38	; 56
    b684:	3f 4f       	sbci	r19, 0xFF	; 255
    b686:	81 e0       	ldi	r24, 0x01	; 1
    b688:	24 17       	cp	r18, r20
    b68a:	35 07       	cpc	r19, r21
    b68c:	18 f0       	brcs	.+6      	; 0xb694 <out_of_bounds+0x58>
    b68e:	80 e0       	ldi	r24, 0x00	; 0
    b690:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    b692:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    b694:	08 95       	ret

0000b696 <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    b696:	40 91 d3 0d 	lds	r20, 0x0DD3
    b69a:	80 e0       	ldi	r24, 0x00	; 0
    b69c:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    b69e:	50 e1       	ldi	r21, 0x10	; 16
    b6a0:	9c 01       	movw	r18, r24
    b6a2:	28 54       	subi	r18, 0x48	; 72
    b6a4:	32 4f       	sbci	r19, 0xF2	; 242
    b6a6:	d9 01       	movw	r26, r18
    b6a8:	a3 5e       	subi	r26, 0xE3	; 227
    b6aa:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    b6ac:	6c 91       	ld	r22, X
    b6ae:	66 23       	and	r22, r22
    b6b0:	31 f0       	breq	.+12     	; 0xb6be <explode_all_enemies+0x28>
    b6b2:	f9 01       	movw	r30, r18
    b6b4:	e2 5e       	subi	r30, 0xE2	; 226
    b6b6:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    b6b8:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    b6ba:	1c 92       	st	X, r1
			game.active_enemies--;
    b6bc:	41 50       	subi	r20, 0x01	; 1
    b6be:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b6c0:	89 30       	cpi	r24, 0x09	; 9
    b6c2:	21 e0       	ldi	r18, 0x01	; 1
    b6c4:	92 07       	cpc	r25, r18
    b6c6:	61 f7       	brne	.-40     	; 0xb6a0 <explode_all_enemies+0xa>
    b6c8:	40 93 d3 0d 	sts	0x0DD3, r20
    b6cc:	08 95       	ret

0000b6ce <handle_music_toggle>:
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
}

char music_toggle_pressed(JoyPadState* p)
{
	return (p->pressed & BTN_SELECT);
    b6ce:	fc 01       	movw	r30, r24
    b6d0:	80 81       	ld	r24, Z
	}
}

void handle_music_toggle(JoyPadState* p)
{
	if (music_toggle_pressed(p))
    b6d2:	82 ff       	sbrs	r24, 2
    b6d4:	07 c0       	rjmp	.+14     	; 0xb6e4 <handle_music_toggle+0x16>
	{
		if (IsSongPlaying())
    b6d6:	0e 94 3d 44 	call	0x887a	; 0x887a <IsSongPlaying>
    b6da:	81 11       	cpse	r24, r1
		{
			StopSong();
    b6dc:	0c 94 cd 40 	jmp	0x819a	; 0x819a <StopSong>
		}
		else
		{
			ResumeSong();
    b6e0:	0c 94 db 40 	jmp	0x81b6	; 0x81b6 <ResumeSong>
    b6e4:	08 95       	ret

0000b6e6 <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    b6e6:	0f 93       	push	r16
    b6e8:	1f 93       	push	r17
    b6ea:	cf 93       	push	r28
    b6ec:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    b6ee:	20 91 d1 0d 	lds	r18, 0x0DD1
    b6f2:	22 30       	cpi	r18, 0x02	; 2
    b6f4:	b9 f5       	brne	.+110    	; 0xb764 <handle_demo_play+0x7e>
    b6f6:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    b6f8:	8c 01       	movw	r16, r24
    b6fa:	0c 58       	subi	r16, 0x8C	; 140
    b6fc:	1f 4f       	sbci	r17, 0xFF	; 255
    b6fe:	f8 01       	movw	r30, r16
    b700:	11 82       	std	Z+1, r1	; 0x01
    b702:	10 82       	st	Z, r1
		if (is_space())
    b704:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    b708:	88 23       	and	r24, r24
    b70a:	69 f0       	breq	.+26     	; 0xb726 <handle_demo_play+0x40>
		{
			if (game.time < 2)
    b70c:	80 91 be 0d 	lds	r24, 0x0DBE
    b710:	90 91 bf 0d 	lds	r25, 0x0DBF
    b714:	02 97       	sbiw	r24, 0x02	; 2
    b716:	d0 f4       	brcc	.+52     	; 0xb74c <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    b718:	c8 58       	subi	r28, 0x88	; 136
    b71a:	df 4f       	sbci	r29, 0xFF	; 255
    b71c:	80 e1       	ldi	r24, 0x10	; 16
    b71e:	90 e0       	ldi	r25, 0x00	; 0
    b720:	99 83       	std	Y+1, r25	; 0x01
    b722:	88 83       	st	Y, r24
    b724:	13 c0       	rjmp	.+38     	; 0xb74c <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    b726:	80 e8       	ldi	r24, 0x80	; 128
    b728:	90 e0       	ldi	r25, 0x00	; 0
    b72a:	fe 01       	movw	r30, r28
    b72c:	e8 58       	subi	r30, 0x88	; 136
    b72e:	ff 4f       	sbci	r31, 0xFF	; 255
    b730:	91 83       	std	Z+1, r25	; 0x01
    b732:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    b734:	8d 81       	ldd	r24, Y+5	; 0x05
    b736:	81 11       	cpse	r24, r1
    b738:	09 c0       	rjmp	.+18     	; 0xb74c <handle_demo_play+0x66>
    b73a:	88 81       	ld	r24, Y
    b73c:	99 81       	ldd	r25, Y+1	; 0x01
    b73e:	89 97       	sbiw	r24, 0x29	; 41
    b740:	28 f0       	brcs	.+10     	; 0xb74c <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_A;
    b742:	80 e0       	ldi	r24, 0x00	; 0
    b744:	91 e0       	ldi	r25, 0x01	; 1
    b746:	f8 01       	movw	r30, r16
    b748:	91 83       	std	Z+1, r25	; 0x01
    b74a:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    b74c:	80 91 d2 0d 	lds	r24, 0x0DD2
    b750:	6f e0       	ldi	r22, 0x0F	; 15
    b752:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    b756:	91 11       	cpse	r25, r1
    b758:	05 c0       	rjmp	.+10     	; 0xb764 <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_B;
    b75a:	81 e0       	ldi	r24, 0x01	; 1
    b75c:	90 e0       	ldi	r25, 0x00	; 0
    b75e:	f8 01       	movw	r30, r16
    b760:	91 83       	std	Z+1, r25	; 0x01
    b762:	80 83       	st	Z, r24
		}
	}
}
    b764:	df 91       	pop	r29
    b766:	cf 91       	pop	r28
    b768:	1f 91       	pop	r17
    b76a:	0f 91       	pop	r16
    b76c:	08 95       	ret

0000b76e <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    b76e:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    b770:	86 17       	cp	r24, r22
    b772:	10 f4       	brcc	.+4      	; 0xb778 <pixel_overlap+0xa>
    b774:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    b776:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    b778:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    b77a:	26 0f       	add	r18, r22
	if (s2 < s1)
    b77c:	28 17       	cp	r18, r24
    b77e:	10 f4       	brcc	.+4      	; 0xb784 <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    b780:	28 1b       	sub	r18, r24
    b782:	92 0f       	add	r25, r18
	}
	return result;
}
    b784:	89 2f       	mov	r24, r25
    b786:	08 95       	ret

0000b788 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b788:	2f 92       	push	r2
    b78a:	3f 92       	push	r3
    b78c:	4f 92       	push	r4
    b78e:	5f 92       	push	r5
    b790:	6f 92       	push	r6
    b792:	7f 92       	push	r7
    b794:	8f 92       	push	r8
    b796:	9f 92       	push	r9
    b798:	af 92       	push	r10
    b79a:	bf 92       	push	r11
    b79c:	cf 92       	push	r12
    b79e:	df 92       	push	r13
    b7a0:	ef 92       	push	r14
    b7a2:	ff 92       	push	r15
    b7a4:	0f 93       	push	r16
    b7a6:	1f 93       	push	r17
    b7a8:	cf 93       	push	r28
    b7aa:	df 93       	push	r29
    b7ac:	00 d0       	rcall	.+0      	; 0xb7ae <collision_detect_level+0x26>
    b7ae:	00 d0       	rcall	.+0      	; 0xb7b0 <collision_detect_level+0x28>
    b7b0:	00 d0       	rcall	.+0      	; 0xb7b2 <collision_detect_level+0x2a>
    b7b2:	cd b7       	in	r28, 0x3d	; 61
    b7b4:	de b7       	in	r29, 0x3e	; 62
    b7b6:	9e 83       	std	Y+6, r25	; 0x06
    b7b8:	8d 83       	std	Y+5, r24	; 0x05
    b7ba:	56 2e       	mov	r5, r22
    b7bc:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    b7be:	fc 01       	movw	r30, r24
    b7c0:	a0 80       	ld	r10, Z
    b7c2:	b1 80       	ldd	r11, Z+1	; 0x01
    b7c4:	75 01       	movw	r14, r10
    b7c6:	13 e0       	ldi	r17, 0x03	; 3
    b7c8:	f6 94       	lsr	r15
    b7ca:	e7 94       	ror	r14
    b7cc:	1a 95       	dec	r17
    b7ce:	e1 f7       	brne	.-8      	; 0xb7c8 <collision_detect_level+0x40>
    b7d0:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    b7d2:	c2 80       	ldd	r12, Z+2	; 0x02
    b7d4:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    b7d6:	84 81       	ldd	r24, Z+4	; 0x04
    b7d8:	88 23       	and	r24, r24
    b7da:	09 f4       	brne	.+2      	; 0xb7de <collision_detect_level+0x56>
    b7dc:	e1 c0       	rjmp	.+450    	; 0xb9a0 <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    b7de:	e3 e0       	ldi	r30, 0x03	; 3
    b7e0:	d6 94       	lsr	r13
    b7e2:	c7 94       	ror	r12
    b7e4:	ea 95       	dec	r30
    b7e6:	e1 f7       	brne	.-8      	; 0xb7e0 <collision_detect_level+0x58>
    b7e8:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    b7ea:	f7 e0       	ldi	r31, 0x07	; 7
    b7ec:	af 0e       	add	r10, r31
    b7ee:	b1 1c       	adc	r11, r1
    b7f0:	f3 e0       	ldi	r31, 0x03	; 3
    b7f2:	b6 94       	lsr	r11
    b7f4:	a7 94       	ror	r10
    b7f6:	fa 95       	dec	r31
    b7f8:	e1 f7       	brne	.-8      	; 0xb7f2 <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b7fa:	8e 2d       	mov	r24, r14
    b7fc:	88 0f       	add	r24, r24
    b7fe:	88 0f       	add	r24, r24
    b800:	88 0f       	add	r24, r24
    b802:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b804:	2a 2c       	mov	r2, r10
    b806:	22 0c       	add	r2, r2
    b808:	22 0c       	add	r2, r2
    b80a:	22 0c       	add	r2, r2
    b80c:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b80e:	46 01       	movw	r8, r12
    b810:	9f ef       	ldi	r25, 0xFF	; 255
    b812:	89 1a       	sub	r8, r25
    b814:	99 0a       	sbc	r9, r25
    b816:	a3 e0       	ldi	r26, 0x03	; 3
    b818:	88 0c       	add	r8, r8
    b81a:	99 1c       	adc	r9, r9
    b81c:	aa 95       	dec	r26
    b81e:	e1 f7       	brne	.-8      	; 0xb818 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b820:	e8 e0       	ldi	r30, 0x08	; 8
    b822:	4e 9f       	mul	r20, r30
    b824:	30 01       	movw	r6, r0
    b826:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b828:	b3 e0       	ldi	r27, 0x03	; 3
    b82a:	cc 0c       	add	r12, r12
    b82c:	dd 1c       	adc	r13, r13
    b82e:	ba 95       	dec	r27
    b830:	e1 f7       	brne	.-8      	; 0xb82a <collision_detect_level+0xa2>
    b832:	41 2c       	mov	r4, r1
    b834:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b836:	45 14       	cp	r4, r5
    b838:	09 f4       	brne	.+2      	; 0xb83c <collision_detect_level+0xb4>
    b83a:	b3 c0       	rjmp	.+358    	; 0xb9a2 <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    b83c:	ed 81       	ldd	r30, Y+5	; 0x05
    b83e:	fe 81       	ldd	r31, Y+6	; 0x06
    b840:	84 81       	ldd	r24, Z+4	; 0x04
    b842:	87 ff       	sbrs	r24, 7
    b844:	47 c0       	rjmp	.+142    	; 0xb8d4 <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    b846:	49 81       	ldd	r20, Y+1	; 0x01
    b848:	64 2d       	mov	r22, r4
    b84a:	6e 0d       	add	r22, r14
    b84c:	80 91 d7 0f 	lds	r24, 0x0FD7
    b850:	90 91 d8 0f 	lds	r25, 0x0FD8
    b854:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    b858:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    b85a:	49 81       	ldd	r20, Y+1	; 0x01
    b85c:	64 2d       	mov	r22, r4
    b85e:	6a 0d       	add	r22, r10
    b860:	80 91 d7 0f 	lds	r24, 0x0FD7
    b864:	90 91 d8 0f 	lds	r25, 0x0FD8
    b868:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    b86c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b86e:	83 2d       	mov	r24, r3
    b870:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    b874:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b876:	80 2f       	mov	r24, r16
    b878:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    b87c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b87e:	33 20       	and	r3, r3
    b880:	71 f0       	breq	.+28     	; 0xb89e <collision_detect_level+0x116>
    b882:	30 91 b8 0d 	lds	r19, 0x0DB8
    b886:	6b 81       	ldd	r22, Y+3	; 0x03
    b888:	63 1b       	sub	r22, r19
    b88a:	ed 81       	ldd	r30, Y+5	; 0x05
    b88c:	fe 81       	ldd	r31, Y+6	; 0x06
    b88e:	80 81       	ld	r24, Z
    b890:	28 e0       	ldi	r18, 0x08	; 8
    b892:	48 e0       	ldi	r20, 0x08	; 8
    b894:	83 1b       	sub	r24, r19
    b896:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    b89a:	84 30       	cpi	r24, 0x04	; 4
    b89c:	80 f4       	brcc	.+32     	; 0xb8be <collision_detect_level+0x136>
    b89e:	00 23       	and	r16, r16
    b8a0:	c9 f0       	breq	.+50     	; 0xb8d4 <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b8a2:	30 91 b8 0d 	lds	r19, 0x0DB8
    b8a6:	62 2d       	mov	r22, r2
    b8a8:	63 1b       	sub	r22, r19
    b8aa:	ed 81       	ldd	r30, Y+5	; 0x05
    b8ac:	fe 81       	ldd	r31, Y+6	; 0x06
    b8ae:	80 81       	ld	r24, Z
    b8b0:	28 e0       	ldi	r18, 0x08	; 8
    b8b2:	48 e0       	ldi	r20, 0x08	; 8
    b8b4:	83 1b       	sub	r24, r19
    b8b6:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    b8ba:	84 30       	cpi	r24, 0x04	; 4
    b8bc:	58 f0       	brcs	.+22     	; 0xb8d4 <collision_detect_level+0x14c>
				{
					s->vy =  0;
    b8be:	ed 81       	ldd	r30, Y+5	; 0x05
    b8c0:	fe 81       	ldd	r31, Y+6	; 0x06
    b8c2:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    b8c4:	93 82       	std	Z+3, r9	; 0x03
    b8c6:	82 82       	std	Z+2, r8	; 0x02
    b8c8:	30 16       	cp	r3, r16
    b8ca:	08 f4       	brcc	.+2      	; 0xb8ce <collision_detect_level+0x146>
    b8cc:	30 2e       	mov	r3, r16
    b8ce:	13 15       	cp	r17, r3
    b8d0:	08 f4       	brcc	.+2      	; 0xb8d4 <collision_detect_level+0x14c>
    b8d2:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    b8d4:	ed 81       	ldd	r30, Y+5	; 0x05
    b8d6:	fe 81       	ldd	r31, Y+6	; 0x06
    b8d8:	84 81       	ldd	r24, Z+4	; 0x04
    b8da:	18 16       	cp	r1, r24
    b8dc:	0c f0       	brlt	.+2      	; 0xb8e0 <collision_detect_level+0x158>
    b8de:	5e c0       	rjmp	.+188    	; 0xb99c <collision_detect_level+0x214>
    b8e0:	42 81       	ldd	r20, Z+2	; 0x02
    b8e2:	53 81       	ldd	r21, Z+3	; 0x03
    b8e4:	41 50       	subi	r20, 0x01	; 1
    b8e6:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b8e8:	46 0d       	add	r20, r6
    b8ea:	57 1d       	adc	r21, r7
    b8ec:	63 e0       	ldi	r22, 0x03	; 3
    b8ee:	56 95       	lsr	r21
    b8f0:	47 95       	ror	r20
    b8f2:	6a 95       	dec	r22
    b8f4:	e1 f7       	brne	.-8      	; 0xb8ee <collision_detect_level+0x166>
    b8f6:	64 2d       	mov	r22, r4
    b8f8:	6e 0d       	add	r22, r14
    b8fa:	80 91 d7 0f 	lds	r24, 0x0FD7
    b8fe:	90 91 d8 0f 	lds	r25, 0x0FD8
    b902:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    b906:	38 2e       	mov	r3, r24
    b908:	ed 81       	ldd	r30, Y+5	; 0x05
    b90a:	fe 81       	ldd	r31, Y+6	; 0x06
    b90c:	42 81       	ldd	r20, Z+2	; 0x02
    b90e:	53 81       	ldd	r21, Z+3	; 0x03
    b910:	41 50       	subi	r20, 0x01	; 1
    b912:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    b914:	46 0d       	add	r20, r6
    b916:	57 1d       	adc	r21, r7
    b918:	73 e0       	ldi	r23, 0x03	; 3
    b91a:	56 95       	lsr	r21
    b91c:	47 95       	ror	r20
    b91e:	7a 95       	dec	r23
    b920:	e1 f7       	brne	.-8      	; 0xb91a <collision_detect_level+0x192>
    b922:	64 2d       	mov	r22, r4
    b924:	6a 0d       	add	r22, r10
    b926:	80 91 d7 0f 	lds	r24, 0x0FD7
    b92a:	90 91 d8 0f 	lds	r25, 0x0FD8
    b92e:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    b932:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b934:	83 2d       	mov	r24, r3
    b936:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    b93a:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b93c:	80 2f       	mov	r24, r16
    b93e:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    b942:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    b944:	33 20       	and	r3, r3
    b946:	71 f0       	breq	.+28     	; 0xb964 <collision_detect_level+0x1dc>
    b948:	30 91 b8 0d 	lds	r19, 0x0DB8
    b94c:	6b 81       	ldd	r22, Y+3	; 0x03
    b94e:	63 1b       	sub	r22, r19
    b950:	ed 81       	ldd	r30, Y+5	; 0x05
    b952:	fe 81       	ldd	r31, Y+6	; 0x06
    b954:	80 81       	ld	r24, Z
    b956:	28 e0       	ldi	r18, 0x08	; 8
    b958:	48 e0       	ldi	r20, 0x08	; 8
    b95a:	83 1b       	sub	r24, r19
    b95c:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    b960:	84 30       	cpi	r24, 0x04	; 4
    b962:	80 f4       	brcc	.+32     	; 0xb984 <collision_detect_level+0x1fc>
    b964:	00 23       	and	r16, r16
    b966:	d1 f0       	breq	.+52     	; 0xb99c <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b968:	30 91 b8 0d 	lds	r19, 0x0DB8
    b96c:	62 2d       	mov	r22, r2
    b96e:	63 1b       	sub	r22, r19
    b970:	ed 81       	ldd	r30, Y+5	; 0x05
    b972:	fe 81       	ldd	r31, Y+6	; 0x06
    b974:	80 81       	ld	r24, Z
    b976:	28 e0       	ldi	r18, 0x08	; 8
    b978:	48 e0       	ldi	r20, 0x08	; 8
    b97a:	83 1b       	sub	r24, r19
    b97c:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    b980:	84 30       	cpi	r24, 0x04	; 4
    b982:	60 f0       	brcs	.+24     	; 0xb99c <collision_detect_level+0x214>
				{
					s->vy =  0;
    b984:	ed 81       	ldd	r30, Y+5	; 0x05
    b986:	fe 81       	ldd	r31, Y+6	; 0x06
    b988:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    b98a:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    b98c:	d3 82       	std	Z+3, r13	; 0x03
    b98e:	c2 82       	std	Z+2, r12	; 0x02
    b990:	30 16       	cp	r3, r16
    b992:	08 f4       	brcc	.+2      	; 0xb996 <collision_detect_level+0x20e>
    b994:	30 2e       	mov	r3, r16
    b996:	13 15       	cp	r17, r3
    b998:	08 f4       	brcc	.+2      	; 0xb99c <collision_detect_level+0x214>
    b99a:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b99c:	43 94       	inc	r4
    b99e:	4b cf       	rjmp	.-362    	; 0xb836 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    b9a0:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    b9a2:	ed 81       	ldd	r30, Y+5	; 0x05
    b9a4:	fe 81       	ldd	r31, Y+6	; 0x06
    b9a6:	85 81       	ldd	r24, Z+5	; 0x05
    b9a8:	88 23       	and	r24, r24
    b9aa:	09 f4       	brne	.+2      	; 0xb9ae <collision_detect_level+0x226>
    b9ac:	e1 c0       	rjmp	.+450    	; 0xbb70 <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    b9ae:	c2 80       	ldd	r12, Z+2	; 0x02
    b9b0:	d3 80       	ldd	r13, Z+3	; 0x03
    b9b2:	56 01       	movw	r10, r12
    b9b4:	23 e0       	ldi	r18, 0x03	; 3
    b9b6:	b6 94       	lsr	r11
    b9b8:	a7 94       	ror	r10
    b9ba:	2a 95       	dec	r18
    b9bc:	e1 f7       	brne	.-8      	; 0xb9b6 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    b9be:	f7 e0       	ldi	r31, 0x07	; 7
    b9c0:	cf 0e       	add	r12, r31
    b9c2:	d1 1c       	adc	r13, r1
    b9c4:	33 e0       	ldi	r19, 0x03	; 3
    b9c6:	d6 94       	lsr	r13
    b9c8:	c7 94       	ror	r12
    b9ca:	3a 95       	dec	r19
    b9cc:	e1 f7       	brne	.-8      	; 0xb9c6 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    b9ce:	3a 2c       	mov	r3, r10
    b9d0:	33 0c       	add	r3, r3
    b9d2:	33 0c       	add	r3, r3
    b9d4:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    b9d6:	4c 2c       	mov	r4, r12
    b9d8:	44 0c       	add	r4, r4
    b9da:	44 0c       	add	r4, r4
    b9dc:	44 0c       	add	r4, r4
    b9de:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    b9e0:	37 01       	movw	r6, r14
    b9e2:	8f ef       	ldi	r24, 0xFF	; 255
    b9e4:	68 1a       	sub	r6, r24
    b9e6:	78 0a       	sbc	r7, r24
    b9e8:	43 e0       	ldi	r20, 0x03	; 3
    b9ea:	66 0c       	add	r6, r6
    b9ec:	77 1c       	adc	r7, r7
    b9ee:	4a 95       	dec	r20
    b9f0:	e1 f7       	brne	.-8      	; 0xb9ea <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    b9f2:	98 e0       	ldi	r25, 0x08	; 8
    b9f4:	59 9e       	mul	r5, r25
    b9f6:	40 01       	movw	r8, r0
    b9f8:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    b9fa:	53 e0       	ldi	r21, 0x03	; 3
    b9fc:	ee 0c       	add	r14, r14
    b9fe:	ff 1c       	adc	r15, r15
    ba00:	5a 95       	dec	r21
    ba02:	e1 f7       	brne	.-8      	; 0xb9fc <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    ba04:	51 2c       	mov	r5, r1
    ba06:	fc 81       	ldd	r31, Y+4	; 0x04
    ba08:	5f 16       	cp	r5, r31
    ba0a:	09 f4       	brne	.+2      	; 0xba0e <collision_detect_level+0x286>
    ba0c:	b1 c0       	rjmp	.+354    	; 0xbb70 <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    ba0e:	ed 81       	ldd	r30, Y+5	; 0x05
    ba10:	fe 81       	ldd	r31, Y+6	; 0x06
    ba12:	85 81       	ldd	r24, Z+5	; 0x05
    ba14:	87 ff       	sbrs	r24, 7
    ba16:	47 c0       	rjmp	.+142    	; 0xbaa6 <collision_detect_level+0x31e>
    ba18:	45 2d       	mov	r20, r5
    ba1a:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    ba1c:	6a 81       	ldd	r22, Y+2	; 0x02
    ba1e:	80 91 d7 0f 	lds	r24, 0x0FD7
    ba22:	90 91 d8 0f 	lds	r25, 0x0FD8
    ba26:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    ba2a:	28 2e       	mov	r2, r24
    ba2c:	45 2d       	mov	r20, r5
    ba2e:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    ba30:	6a 81       	ldd	r22, Y+2	; 0x02
    ba32:	80 91 d7 0f 	lds	r24, 0x0FD7
    ba36:	90 91 d8 0f 	lds	r25, 0x0FD8
    ba3a:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    ba3e:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    ba40:	82 2d       	mov	r24, r2
    ba42:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    ba46:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    ba48:	80 2f       	mov	r24, r16
    ba4a:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    ba4e:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    ba50:	22 20       	and	r2, r2
    ba52:	71 f0       	breq	.+28     	; 0xba70 <collision_detect_level+0x2e8>
    ba54:	30 91 c0 0d 	lds	r19, 0x0DC0
    ba58:	63 2d       	mov	r22, r3
    ba5a:	63 1b       	sub	r22, r19
    ba5c:	ed 81       	ldd	r30, Y+5	; 0x05
    ba5e:	fe 81       	ldd	r31, Y+6	; 0x06
    ba60:	82 81       	ldd	r24, Z+2	; 0x02
    ba62:	28 e0       	ldi	r18, 0x08	; 8
    ba64:	48 e0       	ldi	r20, 0x08	; 8
    ba66:	83 1b       	sub	r24, r19
    ba68:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    ba6c:	84 30       	cpi	r24, 0x04	; 4
    ba6e:	80 f4       	brcc	.+32     	; 0xba90 <collision_detect_level+0x308>
    ba70:	00 23       	and	r16, r16
    ba72:	c9 f0       	breq	.+50     	; 0xbaa6 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    ba74:	30 91 c0 0d 	lds	r19, 0x0DC0
    ba78:	64 2d       	mov	r22, r4
    ba7a:	63 1b       	sub	r22, r19
    ba7c:	ed 81       	ldd	r30, Y+5	; 0x05
    ba7e:	fe 81       	ldd	r31, Y+6	; 0x06
    ba80:	82 81       	ldd	r24, Z+2	; 0x02
    ba82:	28 e0       	ldi	r18, 0x08	; 8
    ba84:	48 e0       	ldi	r20, 0x08	; 8
    ba86:	83 1b       	sub	r24, r19
    ba88:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    ba8c:	84 30       	cpi	r24, 0x04	; 4
    ba8e:	58 f0       	brcs	.+22     	; 0xbaa6 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    ba90:	ed 81       	ldd	r30, Y+5	; 0x05
    ba92:	fe 81       	ldd	r31, Y+6	; 0x06
    ba94:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    ba96:	71 82       	std	Z+1, r7	; 0x01
    ba98:	60 82       	st	Z, r6
    ba9a:	20 16       	cp	r2, r16
    ba9c:	08 f4       	brcc	.+2      	; 0xbaa0 <collision_detect_level+0x318>
    ba9e:	20 2e       	mov	r2, r16
    baa0:	12 15       	cp	r17, r2
    baa2:	08 f4       	brcc	.+2      	; 0xbaa6 <collision_detect_level+0x31e>
    baa4:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    baa6:	ed 81       	ldd	r30, Y+5	; 0x05
    baa8:	fe 81       	ldd	r31, Y+6	; 0x06
    baaa:	85 81       	ldd	r24, Z+5	; 0x05
    baac:	18 16       	cp	r1, r24
    baae:	0c f0       	brlt	.+2      	; 0xbab2 <collision_detect_level+0x32a>
    bab0:	5d c0       	rjmp	.+186    	; 0xbb6c <collision_detect_level+0x3e4>
    bab2:	60 81       	ld	r22, Z
    bab4:	71 81       	ldd	r23, Z+1	; 0x01
    bab6:	61 50       	subi	r22, 0x01	; 1
    bab8:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    baba:	68 0d       	add	r22, r8
    babc:	79 1d       	adc	r23, r9
    babe:	83 e0       	ldi	r24, 0x03	; 3
    bac0:	76 95       	lsr	r23
    bac2:	67 95       	ror	r22
    bac4:	8a 95       	dec	r24
    bac6:	e1 f7       	brne	.-8      	; 0xbac0 <collision_detect_level+0x338>
    bac8:	45 2d       	mov	r20, r5
    baca:	4a 0d       	add	r20, r10
    bacc:	80 91 d7 0f 	lds	r24, 0x0FD7
    bad0:	90 91 d8 0f 	lds	r25, 0x0FD8
    bad4:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    bad8:	28 2e       	mov	r2, r24
    bada:	ed 81       	ldd	r30, Y+5	; 0x05
    badc:	fe 81       	ldd	r31, Y+6	; 0x06
    bade:	60 81       	ld	r22, Z
    bae0:	71 81       	ldd	r23, Z+1	; 0x01
    bae2:	61 50       	subi	r22, 0x01	; 1
    bae4:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bae6:	68 0d       	add	r22, r8
    bae8:	79 1d       	adc	r23, r9
    baea:	93 e0       	ldi	r25, 0x03	; 3
    baec:	76 95       	lsr	r23
    baee:	67 95       	ror	r22
    baf0:	9a 95       	dec	r25
    baf2:	e1 f7       	brne	.-8      	; 0xbaec <collision_detect_level+0x364>
    baf4:	45 2d       	mov	r20, r5
    baf6:	4c 0d       	add	r20, r12
    baf8:	80 91 d7 0f 	lds	r24, 0x0FD7
    bafc:	90 91 d8 0f 	lds	r25, 0x0FD8
    bb00:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <get_level_tile>
    bb04:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bb06:	82 2d       	mov	r24, r2
    bb08:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    bb0c:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bb0e:	80 2f       	mov	r24, r16
    bb10:	0e 94 b9 58 	call	0xb172	; 0xb172 <solid_or_hazard_tile>
    bb14:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bb16:	22 20       	and	r2, r2
    bb18:	71 f0       	breq	.+28     	; 0xbb36 <collision_detect_level+0x3ae>
    bb1a:	30 91 c0 0d 	lds	r19, 0x0DC0
    bb1e:	63 2d       	mov	r22, r3
    bb20:	63 1b       	sub	r22, r19
    bb22:	ed 81       	ldd	r30, Y+5	; 0x05
    bb24:	fe 81       	ldd	r31, Y+6	; 0x06
    bb26:	82 81       	ldd	r24, Z+2	; 0x02
    bb28:	28 e0       	ldi	r18, 0x08	; 8
    bb2a:	48 e0       	ldi	r20, 0x08	; 8
    bb2c:	83 1b       	sub	r24, r19
    bb2e:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    bb32:	84 30       	cpi	r24, 0x04	; 4
    bb34:	80 f4       	brcc	.+32     	; 0xbb56 <collision_detect_level+0x3ce>
    bb36:	00 23       	and	r16, r16
    bb38:	c9 f0       	breq	.+50     	; 0xbb6c <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bb3a:	30 91 c0 0d 	lds	r19, 0x0DC0
    bb3e:	64 2d       	mov	r22, r4
    bb40:	63 1b       	sub	r22, r19
    bb42:	ed 81       	ldd	r30, Y+5	; 0x05
    bb44:	fe 81       	ldd	r31, Y+6	; 0x06
    bb46:	82 81       	ldd	r24, Z+2	; 0x02
    bb48:	28 e0       	ldi	r18, 0x08	; 8
    bb4a:	48 e0       	ldi	r20, 0x08	; 8
    bb4c:	83 1b       	sub	r24, r19
    bb4e:	0e 94 b7 5b 	call	0xb76e	; 0xb76e <pixel_overlap>
    bb52:	84 30       	cpi	r24, 0x04	; 4
    bb54:	58 f0       	brcs	.+22     	; 0xbb6c <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    bb56:	ed 81       	ldd	r30, Y+5	; 0x05
    bb58:	fe 81       	ldd	r31, Y+6	; 0x06
    bb5a:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    bb5c:	f1 82       	std	Z+1, r15	; 0x01
    bb5e:	e0 82       	st	Z, r14
    bb60:	20 16       	cp	r2, r16
    bb62:	08 f4       	brcc	.+2      	; 0xbb66 <collision_detect_level+0x3de>
    bb64:	20 2e       	mov	r2, r16
    bb66:	12 15       	cp	r17, r2
    bb68:	08 f4       	brcc	.+2      	; 0xbb6c <collision_detect_level+0x3e4>
    bb6a:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bb6c:	53 94       	inc	r5
    bb6e:	4b cf       	rjmp	.-362    	; 0xba06 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    bb70:	81 2f       	mov	r24, r17
    bb72:	26 96       	adiw	r28, 0x06	; 6
    bb74:	0f b6       	in	r0, 0x3f	; 63
    bb76:	f8 94       	cli
    bb78:	de bf       	out	0x3e, r29	; 62
    bb7a:	0f be       	out	0x3f, r0	; 63
    bb7c:	cd bf       	out	0x3d, r28	; 61
    bb7e:	df 91       	pop	r29
    bb80:	cf 91       	pop	r28
    bb82:	1f 91       	pop	r17
    bb84:	0f 91       	pop	r16
    bb86:	ff 90       	pop	r15
    bb88:	ef 90       	pop	r14
    bb8a:	df 90       	pop	r13
    bb8c:	cf 90       	pop	r12
    bb8e:	bf 90       	pop	r11
    bb90:	af 90       	pop	r10
    bb92:	9f 90       	pop	r9
    bb94:	8f 90       	pop	r8
    bb96:	7f 90       	pop	r7
    bb98:	6f 90       	pop	r6
    bb9a:	5f 90       	pop	r5
    bb9c:	4f 90       	pop	r4
    bb9e:	3f 90       	pop	r3
    bba0:	2f 90       	pop	r2
    bba2:	08 95       	ret

0000bba4 <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    bba4:	2f 92       	push	r2
    bba6:	3f 92       	push	r3
    bba8:	4f 92       	push	r4
    bbaa:	5f 92       	push	r5
    bbac:	6f 92       	push	r6
    bbae:	7f 92       	push	r7
    bbb0:	8f 92       	push	r8
    bbb2:	9f 92       	push	r9
    bbb4:	af 92       	push	r10
    bbb6:	bf 92       	push	r11
    bbb8:	cf 92       	push	r12
    bbba:	df 92       	push	r13
    bbbc:	ef 92       	push	r14
    bbbe:	ff 92       	push	r15
    bbc0:	0f 93       	push	r16
    bbc2:	1f 93       	push	r17
    bbc4:	cf 93       	push	r28
    bbc6:	df 93       	push	r29
    bbc8:	00 d0       	rcall	.+0      	; 0xbbca <animate_shot+0x26>
    bbca:	00 d0       	rcall	.+0      	; 0xbbcc <animate_shot+0x28>
    bbcc:	1f 92       	push	r1
    bbce:	cd b7       	in	r28, 0x3d	; 61
    bbd0:	de b7       	in	r29, 0x3e	; 62
    bbd2:	2c 01       	movw	r4, r24
    bbd4:	3b 01       	movw	r6, r22
    bbd6:	d4 2e       	mov	r13, r20
    bbd8:	4c 01       	movw	r8, r24
    bbda:	29 e1       	ldi	r18, 0x19	; 25
    bbdc:	82 0e       	add	r8, r18
    bbde:	91 1c       	adc	r9, r1
    bbe0:	40 96       	adiw	r24, 0x10	; 16
    bbe2:	9d 83       	std	Y+5, r25	; 0x05
    bbe4:	8c 83       	std	Y+4, r24	; 0x04
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bbe6:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    bbe8:	30 e1       	ldi	r19, 0x10	; 16
    bbea:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bbec:	f4 01       	movw	r30, r8
    bbee:	80 81       	ld	r24, Z
    bbf0:	88 23       	and	r24, r24
    bbf2:	09 f4       	brne	.+2      	; 0xbbf6 <animate_shot+0x52>
    bbf4:	12 c1       	rjmp	.+548    	; 0xbe1a <animate_shot+0x276>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bbf6:	60 91 d2 0d 	lds	r22, 0x0DD2
    bbfa:	34 97       	sbiw	r30, 0x04	; 4
    bbfc:	80 81       	ld	r24, Z
    bbfe:	0e 94 6d 4c 	call	0x98da	; 0x98da <LBMoveDelta>
    bc02:	88 0f       	add	r24, r24
    bc04:	99 1f       	adc	r25, r25
    bc06:	ec 81       	ldd	r30, Y+4	; 0x04
    bc08:	fd 81       	ldd	r31, Y+5	; 0x05
    bc0a:	20 81       	ld	r18, Z
    bc0c:	31 81       	ldd	r19, Z+1	; 0x01
    bc0e:	82 0f       	add	r24, r18
    bc10:	93 1f       	adc	r25, r19
    bc12:	91 83       	std	Z+1, r25	; 0x01
    bc14:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    bc16:	60 91 d2 0d 	lds	r22, 0x0DD2
    bc1a:	f4 01       	movw	r30, r8
    bc1c:	35 97       	sbiw	r30, 0x05	; 5
    bc1e:	80 81       	ld	r24, Z
    bc20:	0e 94 6d 4c 	call	0x98da	; 0x98da <LBMoveDelta>
    bc24:	ec 81       	ldd	r30, Y+4	; 0x04
    bc26:	fd 81       	ldd	r31, Y+5	; 0x05
    bc28:	42 81       	ldd	r20, Z+2	; 0x02
    bc2a:	53 81       	ldd	r21, Z+3	; 0x03
    bc2c:	84 0f       	add	r24, r20
    bc2e:	95 1f       	adc	r25, r21
    bc30:	93 83       	std	Z+3, r25	; 0x03
    bc32:	82 83       	std	Z+2, r24	; 0x02
    bc34:	f1 2e       	mov	r15, r17
    bc36:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    bc38:	90 91 c0 0d 	lds	r25, 0x0DC0
    bc3c:	48 2f       	mov	r20, r24
    bc3e:	49 1b       	sub	r20, r25
    bc40:	60 81       	ld	r22, Z
    bc42:	80 91 b8 0d 	lds	r24, 0x0DB8
    bc46:	68 1b       	sub	r22, r24
    bc48:	01 e0       	ldi	r16, 0x01	; 1
    bc4a:	21 e0       	ldi	r18, 0x01	; 1
    bc4c:	8f 2d       	mov	r24, r15
    bc4e:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    bc52:	8c 81       	ldd	r24, Y+4	; 0x04
    bc54:	9d 81       	ldd	r25, Y+5	; 0x05
    bc56:	0e 94 1e 5b 	call	0xb63c	; 0xb63c <out_of_bounds>
    bc5a:	81 11       	cpse	r24, r1
    bc5c:	d1 c0       	rjmp	.+418    	; 0xbe00 <animate_shot+0x25c>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    bc5e:	41 e0       	ldi	r20, 0x01	; 1
    bc60:	61 e0       	ldi	r22, 0x01	; 1
    bc62:	8c 81       	ldd	r24, Y+4	; 0x04
    bc64:	9d 81       	ldd	r25, Y+5	; 0x05
    bc66:	0e 94 c4 5b 	call	0xb788	; 0xb788 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    bc6a:	81 11       	cpse	r24, r1
    bc6c:	c9 c0       	rjmp	.+402    	; 0xbe00 <animate_shot+0x25c>
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bc6e:	90 91 b8 0d 	lds	r25, 0x0DB8
    bc72:	8a ed       	ldi	r24, 0xDA	; 218
    bc74:	28 2e       	mov	r2, r24
    bc76:	8e e0       	ldi	r24, 0x0E	; 14
    bc78:	38 2e       	mov	r3, r24
    bc7a:	1a 82       	std	Y+2, r1	; 0x02
    bc7c:	19 82       	std	Y+1, r1	; 0x01
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bc7e:	f1 01       	movw	r30, r2
    bc80:	80 81       	ld	r24, Z
    bc82:	82 30       	cpi	r24, 0x02	; 2
    bc84:	09 f4       	brne	.+2      	; 0xbc88 <animate_shot+0xe4>
    bc86:	68 c0       	rjmp	.+208    	; 0xbd58 <animate_shot+0x1b4>
    bc88:	35 97       	sbiw	r30, 0x05	; 5
    bc8a:	80 81       	ld	r24, Z
    bc8c:	88 23       	and	r24, r24
    bc8e:	09 f4       	brne	.+2      	; 0xbc92 <animate_shot+0xee>
    bc90:	63 c0       	rjmp	.+198    	; 0xbd58 <animate_shot+0x1b4>
    bc92:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bc94:	a0 80       	ld	r10, Z
    bc96:	aa 0c       	add	r10, r10
    bc98:	aa 0c       	add	r10, r10
    bc9a:	aa 0c       	add	r10, r10
    bc9c:	31 97       	sbiw	r30, 0x01	; 1
    bc9e:	c0 80       	ld	r12, Z
    bca0:	cc 0c       	add	r12, r12
    bca2:	cc 0c       	add	r12, r12
    bca4:	cc 0c       	add	r12, r12
    bca6:	3a 97       	sbiw	r30, 0x0a	; 10
    bca8:	00 81       	ld	r16, Z
    bcaa:	09 1b       	sub	r16, r25
    bcac:	ec 81       	ldd	r30, Y+4	; 0x04
    bcae:	fd 81       	ldd	r31, Y+5	; 0x05
    bcb0:	80 81       	ld	r24, Z
    bcb2:	f1 01       	movw	r30, r2
    bcb4:	3a 97       	sbiw	r30, 0x0a	; 10
    bcb6:	e0 80       	ld	r14, Z
    bcb8:	28 e0       	ldi	r18, 0x08	; 8
    bcba:	48 e0       	ldi	r20, 0x08	; 8
    bcbc:	ec 81       	ldd	r30, Y+4	; 0x04
    bcbe:	fd 81       	ldd	r31, Y+5	; 0x05
    bcc0:	62 81       	ldd	r22, Z+2	; 0x02
    bcc2:	89 1b       	sub	r24, r25
    bcc4:	9b 83       	std	Y+3, r25	; 0x03
    bcc6:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bcca:	9b 81       	ldd	r25, Y+3	; 0x03
    bccc:	88 23       	and	r24, r24
    bcce:	09 f4       	brne	.+2      	; 0xbcd2 <animate_shot+0x12e>
    bcd0:	43 c0       	rjmp	.+134    	; 0xbd58 <animate_shot+0x1b4>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    bcd2:	41 e0       	ldi	r20, 0x01	; 1
    bcd4:	6f ef       	ldi	r22, 0xFF	; 255
    bcd6:	84 e0       	ldi	r24, 0x04	; 4
    bcd8:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    bcdc:	45 e3       	ldi	r20, 0x35	; 53
    bcde:	29 81       	ldd	r18, Y+1	; 0x01
    bce0:	3a 81       	ldd	r19, Y+2	; 0x02
    bce2:	42 9f       	mul	r20, r18
    bce4:	c0 01       	movw	r24, r0
    bce6:	43 9f       	mul	r20, r19
    bce8:	90 0d       	add	r25, r0
    bcea:	11 24       	eor	r1, r1
    bcec:	fc 01       	movw	r30, r24
    bcee:	e8 54       	subi	r30, 0x48	; 72
    bcf0:	f2 4f       	sbci	r31, 0xF2	; 242
    bcf2:	1f 01       	movw	r2, r30
    bcf4:	df 01       	movw	r26, r30
    bcf6:	aa 5d       	subi	r26, 0xDA	; 218
    bcf8:	be 4f       	sbci	r27, 0xFE	; 254
    bcfa:	8c 91       	ld	r24, X
    bcfc:	f4 01       	movw	r30, r8
    bcfe:	31 97       	sbiw	r30, 0x01	; 1
    bd00:	90 81       	ld	r25, Z
    bd02:	89 1b       	sub	r24, r25
    bd04:	8c 93       	st	X, r24
						if (game.enemies[j].shield <= 0)
    bd06:	18 16       	cp	r1, r24
    bd08:	cc f0       	brlt	.+50     	; 0xbd3c <animate_shot+0x198>
						{
							SFX_ENEMY_EXPLODE;
    bd0a:	41 e0       	ldi	r20, 0x01	; 1
    bd0c:	6f ef       	ldi	r22, 0xFF	; 255
    bd0e:	86 e0       	ldi	r24, 0x06	; 6
    bd10:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    bd14:	f1 01       	movw	r30, r2
    bd16:	e2 5e       	subi	r30, 0xE2	; 226
    bd18:	fe 4f       	sbci	r31, 0xFE	; 254
    bd1a:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    bd1c:	31 97       	sbiw	r30, 0x01	; 1
    bd1e:	10 82       	st	Z, r1
							game.active_enemies--;
    bd20:	80 91 d3 0d 	lds	r24, 0x0DD3
    bd24:	81 50       	subi	r24, 0x01	; 1
    bd26:	80 93 d3 0d 	sts	0x0DD3, r24
							game.level_score += KILL_SCORE;
    bd2a:	80 91 bc 0d 	lds	r24, 0x0DBC
    bd2e:	90 91 bd 0d 	lds	r25, 0x0DBD
    bd32:	0a 96       	adiw	r24, 0x0a	; 10
    bd34:	90 93 bd 0d 	sts	0x0DBD, r25
    bd38:	80 93 bc 0d 	sts	0x0DBC, r24
						}
						player->shot[i].active = 0;
    bd3c:	f4 01       	movw	r30, r8
    bd3e:	10 82       	st	Z, r1
						player->active_shots--;
    bd40:	f2 01       	movw	r30, r4
    bd42:	87 81       	ldd	r24, Z+7	; 0x07
    bd44:	81 50       	subi	r24, 0x01	; 1
    bd46:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    bd48:	01 e0       	ldi	r16, 0x01	; 1
    bd4a:	21 e0       	ldi	r18, 0x01	; 1
    bd4c:	40 e0       	ldi	r20, 0x00	; 0
    bd4e:	60 ee       	ldi	r22, 0xE0	; 224
    bd50:	8f 2d       	mov	r24, r15
    bd52:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
						break;
    bd56:	0e c0       	rjmp	.+28     	; 0xbd74 <animate_shot+0x1d0>
    bd58:	29 81       	ldd	r18, Y+1	; 0x01
    bd5a:	3a 81       	ldd	r19, Y+2	; 0x02
    bd5c:	2f 5f       	subi	r18, 0xFF	; 255
    bd5e:	3f 4f       	sbci	r19, 0xFF	; 255
    bd60:	3a 83       	std	Y+2, r19	; 0x02
    bd62:	29 83       	std	Y+1, r18	; 0x01
    bd64:	35 e3       	ldi	r19, 0x35	; 53
    bd66:	23 0e       	add	r2, r19
    bd68:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    bd6a:	e9 81       	ldd	r30, Y+1	; 0x01
    bd6c:	fa 81       	ldd	r31, Y+2	; 0x02
    bd6e:	35 97       	sbiw	r30, 0x05	; 5
    bd70:	09 f0       	breq	.+2      	; 0xbd74 <animate_shot+0x1d0>
    bd72:	85 cf       	rjmp	.-246    	; 0xbc7e <animate_shot+0xda>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    bd74:	f3 01       	movw	r30, r6
    bd76:	85 85       	ldd	r24, Z+13	; 0x0d
    bd78:	88 23       	and	r24, r24
    bd7a:	09 f4       	brne	.+2      	; 0xbd7e <animate_shot+0x1da>
    bd7c:	4e c0       	rjmp	.+156    	; 0xbe1a <animate_shot+0x276>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bd7e:	90 91 b8 0d 	lds	r25, 0x0DB8
    bd82:	a4 84       	ldd	r10, Z+12	; 0x0c
    bd84:	aa 0c       	add	r10, r10
    bd86:	aa 0c       	add	r10, r10
    bd88:	aa 0c       	add	r10, r10
    bd8a:	c3 84       	ldd	r12, Z+11	; 0x0b
    bd8c:	cc 0c       	add	r12, r12
    bd8e:	cc 0c       	add	r12, r12
    bd90:	cc 0c       	add	r12, r12
    bd92:	00 81       	ld	r16, Z
    bd94:	09 1b       	sub	r16, r25
    bd96:	ec 81       	ldd	r30, Y+4	; 0x04
    bd98:	fd 81       	ldd	r31, Y+5	; 0x05
    bd9a:	80 81       	ld	r24, Z
    bd9c:	f3 01       	movw	r30, r6
    bd9e:	e2 80       	ldd	r14, Z+2	; 0x02
    bda0:	28 e0       	ldi	r18, 0x08	; 8
    bda2:	48 e0       	ldi	r20, 0x08	; 8
    bda4:	ec 81       	ldd	r30, Y+4	; 0x04
    bda6:	fd 81       	ldd	r31, Y+5	; 0x05
    bda8:	62 81       	ldd	r22, Z+2	; 0x02
    bdaa:	89 1b       	sub	r24, r25
    bdac:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBCollides>
    bdb0:	88 23       	and	r24, r24
    bdb2:	99 f1       	breq	.+102    	; 0xbe1a <animate_shot+0x276>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    bdb4:	41 e0       	ldi	r20, 0x01	; 1
    bdb6:	6f ef       	ldi	r22, 0xFF	; 255
    bdb8:	84 e0       	ldi	r24, 0x04	; 4
    bdba:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    bdbe:	f3 01       	movw	r30, r6
    bdc0:	87 85       	ldd	r24, Z+15	; 0x0f
    bdc2:	f4 01       	movw	r30, r8
    bdc4:	31 97       	sbiw	r30, 0x01	; 1
    bdc6:	90 81       	ld	r25, Z
    bdc8:	89 1b       	sub	r24, r25
    bdca:	f3 01       	movw	r30, r6
    bdcc:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    bdce:	18 16       	cp	r1, r24
    bdd0:	bc f0       	brlt	.+46     	; 0xbe00 <animate_shot+0x25c>
							{
								SFX_PLAYER_EXPLODE;
    bdd2:	41 e0       	ldi	r20, 0x01	; 1
    bdd4:	6f ef       	ldi	r22, 0xFF	; 255
    bdd6:	85 e0       	ldi	r24, 0x05	; 5
    bdd8:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
								other_player->shield = 0;
    bddc:	f3 01       	movw	r30, r6
    bdde:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    bde0:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    bde2:	f3 e5       	ldi	r31, 0x53	; 83
    bde4:	6f 16       	cp	r6, r31
    bde6:	fe e0       	ldi	r31, 0x0E	; 14
    bde8:	7f 06       	cpc	r7, r31
    bdea:	51 f4       	brne	.+20     	; 0xbe00 <animate_shot+0x25c>
    bdec:	80 91 bc 0d 	lds	r24, 0x0DBC
    bdf0:	90 91 bd 0d 	lds	r25, 0x0DBD
    bdf4:	8c 59       	subi	r24, 0x9C	; 156
    bdf6:	9f 4f       	sbci	r25, 0xFF	; 255
    bdf8:	90 93 bd 0d 	sts	0x0DBD, r25
    bdfc:	80 93 bc 0d 	sts	0x0DBC, r24
							}
							player->shot[i].active = 0;
    be00:	f4 01       	movw	r30, r8
    be02:	10 82       	st	Z, r1
							player->active_shots--;
    be04:	f2 01       	movw	r30, r4
    be06:	87 81       	ldd	r24, Z+7	; 0x07
    be08:	81 50       	subi	r24, 0x01	; 1
    be0a:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    be0c:	01 e0       	ldi	r16, 0x01	; 1
    be0e:	21 e0       	ldi	r18, 0x01	; 1
    be10:	40 e0       	ldi	r20, 0x00	; 0
    be12:	60 ee       	ldi	r22, 0xE0	; 224
    be14:	8f 2d       	mov	r24, r15
    be16:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    be1a:	1f 5f       	subi	r17, 0xFF	; 255
    be1c:	f4 e1       	ldi	r31, 0x14	; 20
    be1e:	8f 0e       	add	r8, r31
    be20:	91 1c       	adc	r9, r1
    be22:	2c 81       	ldd	r18, Y+4	; 0x04
    be24:	3d 81       	ldd	r19, Y+5	; 0x05
    be26:	2c 5e       	subi	r18, 0xEC	; 236
    be28:	3f 4f       	sbci	r19, 0xFF	; 255
    be2a:	3d 83       	std	Y+5, r19	; 0x05
    be2c:	2c 83       	std	Y+4, r18	; 0x04
    be2e:	13 30       	cpi	r17, 0x03	; 3
    be30:	09 f0       	breq	.+2      	; 0xbe34 <animate_shot+0x290>
    be32:	dc ce       	rjmp	.-584    	; 0xbbec <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    be34:	0f 90       	pop	r0
    be36:	0f 90       	pop	r0
    be38:	0f 90       	pop	r0
    be3a:	0f 90       	pop	r0
    be3c:	0f 90       	pop	r0
    be3e:	df 91       	pop	r29
    be40:	cf 91       	pop	r28
    be42:	1f 91       	pop	r17
    be44:	0f 91       	pop	r16
    be46:	ff 90       	pop	r15
    be48:	ef 90       	pop	r14
    be4a:	df 90       	pop	r13
    be4c:	cf 90       	pop	r12
    be4e:	bf 90       	pop	r11
    be50:	af 90       	pop	r10
    be52:	9f 90       	pop	r9
    be54:	8f 90       	pop	r8
    be56:	7f 90       	pop	r7
    be58:	6f 90       	pop	r6
    be5a:	5f 90       	pop	r5
    be5c:	4f 90       	pop	r4
    be5e:	3f 90       	pop	r3
    be60:	2f 90       	pop	r2
    be62:	08 95       	ret

0000be64 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    be64:	7f 92       	push	r7
    be66:	8f 92       	push	r8
    be68:	9f 92       	push	r9
    be6a:	af 92       	push	r10
    be6c:	bf 92       	push	r11
    be6e:	cf 92       	push	r12
    be70:	df 92       	push	r13
    be72:	ef 92       	push	r14
    be74:	ff 92       	push	r15
    be76:	0f 93       	push	r16
    be78:	1f 93       	push	r17
    be7a:	cf 93       	push	r28
    be7c:	df 93       	push	r29
    be7e:	1f 92       	push	r1
    be80:	cd b7       	in	r28, 0x3d	; 61
    be82:	de b7       	in	r29, 0x3e	; 62
    be84:	6c 01       	movw	r12, r24
    be86:	7b 01       	movw	r14, r22
    be88:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    be8a:	cb 01       	movw	r24, r22
    be8c:	29 83       	std	Y+1, r18	; 0x01
    be8e:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    be92:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    be94:	29 81       	ldd	r18, Y+1	; 0x01
    be96:	20 9f       	mul	r18, r16
    be98:	50 01       	movw	r10, r0
    be9a:	11 24       	eor	r1, r1
    be9c:	10 e0       	ldi	r17, 0x00	; 0
    be9e:	81 2f       	mov	r24, r17
    bea0:	90 e0       	ldi	r25, 0x00	; 0
    bea2:	8a 15       	cp	r24, r10
    bea4:	9b 05       	cpc	r25, r11
    bea6:	54 f4       	brge	.+20     	; 0xbebc <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    bea8:	40 e0       	ldi	r20, 0x00	; 0
    beaa:	b4 01       	movw	r22, r8
    beac:	81 2f       	mov	r24, r17
    beae:	87 0d       	add	r24, r7
    beb0:	29 83       	std	Y+1, r18	; 0x01
    beb2:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    beb6:	1f 5f       	subi	r17, 0xFF	; 255
    beb8:	29 81       	ldd	r18, Y+1	; 0x01
    beba:	f1 cf       	rjmp	.-30     	; 0xbe9e <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    bebc:	f7 01       	movw	r30, r14
    bebe:	84 81       	ldd	r24, Z+4	; 0x04
    bec0:	88 23       	and	r24, r24
    bec2:	51 f0       	breq	.+20     	; 0xbed8 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    bec4:	f6 01       	movw	r30, r12
    bec6:	80 81       	ld	r24, Z
    bec8:	90 e1       	ldi	r25, 0x10	; 16
    beca:	98 27       	eor	r25, r24
    becc:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    bece:	40 e0       	ldi	r20, 0x00	; 0
    bed0:	60 ee       	ldi	r22, 0xE0	; 224
    bed2:	87 2d       	mov	r24, r7
    bed4:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	}
	return anim->looped;
}
    bed8:	f7 01       	movw	r30, r14
    beda:	84 81       	ldd	r24, Z+4	; 0x04
    bedc:	0f 90       	pop	r0
    bede:	df 91       	pop	r29
    bee0:	cf 91       	pop	r28
    bee2:	1f 91       	pop	r17
    bee4:	0f 91       	pop	r16
    bee6:	ff 90       	pop	r15
    bee8:	ef 90       	pop	r14
    beea:	df 90       	pop	r13
    beec:	cf 90       	pop	r12
    beee:	bf 90       	pop	r11
    bef0:	af 90       	pop	r10
    bef2:	9f 90       	pop	r9
    bef4:	8f 90       	pop	r8
    bef6:	7f 90       	pop	r7
    bef8:	08 95       	ret

0000befa <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    befa:	8f 92       	push	r8
    befc:	9f 92       	push	r9
    befe:	af 92       	push	r10
    bf00:	bf 92       	push	r11
    bf02:	cf 92       	push	r12
    bf04:	df 92       	push	r13
    bf06:	ef 92       	push	r14
    bf08:	ff 92       	push	r15
    bf0a:	0f 93       	push	r16
    bf0c:	1f 93       	push	r17
    bf0e:	cf 93       	push	r28
    bf10:	df 93       	push	r29
    bf12:	ec 01       	movw	r28, r24
    bf14:	c6 2e       	mov	r12, r22
    bf16:	14 2f       	mov	r17, r20
    bf18:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    bf1a:	6c 81       	ldd	r22, Y+4	; 0x04
    bf1c:	77 27       	eor	r23, r23
    bf1e:	67 fd       	sbrc	r22, 7
    bf20:	70 95       	com	r23
    bf22:	87 2f       	mov	r24, r23
    bf24:	97 2f       	mov	r25, r23
    bf26:	0e 94 b3 71 	call	0xe366	; 0xe366 <__floatsisf>
    bf2a:	4b 01       	movw	r8, r22
    bf2c:	5c 01       	movw	r10, r24
    bf2e:	8e 81       	ldd	r24, Y+6	; 0x06
    bf30:	68 2f       	mov	r22, r24
    bf32:	70 e0       	ldi	r23, 0x00	; 0
    bf34:	80 e0       	ldi	r24, 0x00	; 0
    bf36:	90 e0       	ldi	r25, 0x00	; 0
    bf38:	0e 94 b3 71 	call	0xe366	; 0xe366 <__floatsisf>
    bf3c:	29 e8       	ldi	r18, 0x89	; 137
    bf3e:	38 e8       	ldi	r19, 0x88	; 136
    bf40:	48 e8       	ldi	r20, 0x88	; 136
    bf42:	5c e3       	ldi	r21, 0x3C	; 60
    bf44:	0e 94 3f 72 	call	0xe47e	; 0xe47e <__mulsf3>
    bf48:	9b 01       	movw	r18, r22
    bf4a:	ac 01       	movw	r20, r24
    bf4c:	c5 01       	movw	r24, r10
    bf4e:	b4 01       	movw	r22, r8
    bf50:	0e 94 1c 71 	call	0xe238	; 0xe238 <__addsf3>
    bf54:	0e 94 80 71 	call	0xe300	; 0xe300 <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    bf58:	69 37       	cpi	r22, 0x79	; 121
    bf5a:	14 f4       	brge	.+4      	; 0xbf60 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    bf5c:	6c 83       	std	Y+4, r22	; 0x04
    bf5e:	02 c0       	rjmp	.+4      	; 0xbf64 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    bf60:	88 e7       	ldi	r24, 0x78	; 120
    bf62:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    bf64:	60 91 d2 0d 	lds	r22, 0x0DD2
    bf68:	8d 81       	ldd	r24, Y+5	; 0x05
    bf6a:	0e 94 6d 4c 	call	0x98da	; 0x98da <LBMoveDelta>
    bf6e:	28 81       	ld	r18, Y
    bf70:	39 81       	ldd	r19, Y+1	; 0x01
    bf72:	82 0f       	add	r24, r18
    bf74:	93 1f       	adc	r25, r19
    bf76:	99 83       	std	Y+1, r25	; 0x01
    bf78:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    bf7a:	60 91 d2 0d 	lds	r22, 0x0DD2
    bf7e:	8c 81       	ldd	r24, Y+4	; 0x04
    bf80:	0e 94 6d 4c 	call	0x98da	; 0x98da <LBMoveDelta>
    bf84:	ea 81       	ldd	r30, Y+2	; 0x02
    bf86:	fb 81       	ldd	r31, Y+3	; 0x03
    bf88:	8e 0f       	add	r24, r30
    bf8a:	9f 1f       	adc	r25, r31
    bf8c:	9b 83       	std	Y+3, r25	; 0x03
    bf8e:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    bf90:	4d 2d       	mov	r20, r13
    bf92:	61 2f       	mov	r22, r17
    bf94:	ce 01       	movw	r24, r28
    bf96:	0e 94 c4 5b 	call	0xb788	; 0xb788 <collision_detect_level>
    bf9a:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    bf9c:	88 23       	and	r24, r24
    bf9e:	41 f0       	breq	.+16     	; 0xbfb0 <animate_sprite+0xb6>
    bfa0:	00 23       	and	r16, r16
    bfa2:	31 f0       	breq	.+12     	; 0xbfb0 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    bfa4:	88 e0       	ldi	r24, 0x08	; 8
    bfa6:	e8 9e       	mul	r14, r24
    bfa8:	70 01       	movw	r14, r0
    bfaa:	11 24       	eor	r1, r1
    bfac:	fb 82       	std	Y+3, r15	; 0x03
    bfae:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    bfb0:	3a 81       	ldd	r19, Y+2	; 0x02
    bfb2:	80 91 c0 0d 	lds	r24, 0x0DC0
    bfb6:	43 2f       	mov	r20, r19
    bfb8:	48 1b       	sub	r20, r24
    bfba:	98 81       	ld	r25, Y
    bfbc:	80 91 b8 0d 	lds	r24, 0x0DB8
    bfc0:	69 2f       	mov	r22, r25
    bfc2:	68 1b       	sub	r22, r24
    bfc4:	0d 2d       	mov	r16, r13
    bfc6:	21 2f       	mov	r18, r17
    bfc8:	8c 2d       	mov	r24, r12
    bfca:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	return result;
}
    bfce:	8b 2d       	mov	r24, r11
    bfd0:	df 91       	pop	r29
    bfd2:	cf 91       	pop	r28
    bfd4:	1f 91       	pop	r17
    bfd6:	0f 91       	pop	r16
    bfd8:	ff 90       	pop	r15
    bfda:	ef 90       	pop	r14
    bfdc:	df 90       	pop	r13
    bfde:	cf 90       	pop	r12
    bfe0:	bf 90       	pop	r11
    bfe2:	af 90       	pop	r10
    bfe4:	9f 90       	pop	r9
    bfe6:	8f 90       	pop	r8
    bfe8:	08 95       	ret

0000bfea <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    bfea:	ef 92       	push	r14
    bfec:	0f 93       	push	r16
    bfee:	fc 01       	movw	r30, r24
    bff0:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    bff2:	90 85       	ldd	r25, Z+8	; 0x08
    bff4:	94 ff       	sbrs	r25, 4
    bff6:	0f c0       	rjmp	.+30     	; 0xc016 <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    bff8:	92 81       	ldd	r25, Z+2	; 0x02
    bffa:	20 91 c0 0d 	lds	r18, 0x0DC0
    bffe:	49 2f       	mov	r20, r25
    c000:	42 1b       	sub	r20, r18
    c002:	90 81       	ld	r25, Z
    c004:	20 91 b8 0d 	lds	r18, 0x0DB8
    c008:	69 2f       	mov	r22, r25
    c00a:	62 1b       	sub	r22, r18
    c00c:	04 85       	ldd	r16, Z+12	; 0x0c
    c00e:	23 85       	ldd	r18, Z+11	; 0x0b
    c010:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
    c014:	14 c0       	rjmp	.+40     	; 0xc03e <animate_player+0x54>
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c016:	e1 2c       	mov	r14, r1
    c018:	00 e0       	ldi	r16, 0x00	; 0
    c01a:	24 85       	ldd	r18, Z+12	; 0x0c
    c01c:	43 85       	ldd	r20, Z+11	; 0x0b
    c01e:	68 2f       	mov	r22, r24
    c020:	cf 01       	movw	r24, r30
    c022:	0e 94 7d 5f 	call	0xbefa	; 0xbefa <animate_sprite>
    c026:	82 30       	cpi	r24, 0x02	; 2
    c028:	50 f0       	brcs	.+20     	; 0xc03e <animate_player+0x54>
	{
		SFX_PLAYER_EXPLODE;
    c02a:	41 e0       	ldi	r20, 0x01	; 1
    c02c:	6f ef       	ldi	r22, 0xFF	; 255
    c02e:	85 e0       	ldi	r24, 0x05	; 5
    c030:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
		game.player.shield = 0;
    c034:	10 92 e7 0d 	sts	0x0DE7, r1
		game.player.flags = EXPLODING;
    c038:	80 e1       	ldi	r24, 0x10	; 16
    c03a:	80 93 e0 0d 	sts	0x0DE0, r24
	}
}
    c03e:	0f 91       	pop	r16
    c040:	ef 90       	pop	r14
    c042:	08 95       	ret

0000c044 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c044:	1f 93       	push	r17
    c046:	cf 93       	push	r28
    c048:	df 93       	push	r29
    c04a:	ec 01       	movw	r28, r24
    c04c:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c04e:	98 85       	ldd	r25, Y+8	; 0x08
    c050:	89 2f       	mov	r24, r25
    c052:	88 70       	andi	r24, 0x08	; 8
    c054:	93 ff       	sbrs	r25, 3
    c056:	14 c0       	rjmp	.+40     	; 0xc080 <update_spider_enemy+0x3c>
    c058:	2d 85       	ldd	r18, Y+13	; 0x0d
    c05a:	20 38       	cpi	r18, 0x80	; 128
    c05c:	89 f4       	brne	.+34     	; 0xc080 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c05e:	81 e0       	ldi	r24, 0x01	; 1
    c060:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c062:	8c e9       	ldi	r24, 0x9C	; 156
    c064:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c066:	88 ec       	ldi	r24, 0xC8	; 200
    c068:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c06a:	8c e3       	ldi	r24, 0x3C	; 60
    c06c:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c06e:	89 85       	ldd	r24, Y+9	; 0x09
    c070:	81 11       	cpse	r24, r1
    c072:	02 c0       	rjmp	.+4      	; 0xc078 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c074:	84 ec       	ldi	r24, 0xC4	; 196
    c076:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c078:	40 e0       	ldi	r20, 0x00	; 0
    c07a:	62 e3       	ldi	r22, 0x32	; 50
    c07c:	7f e2       	ldi	r23, 0x2F	; 47
    c07e:	19 c0       	rjmp	.+50     	; 0xc0b2 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c080:	90 ff       	sbrs	r25, 0
    c082:	0f c0       	rjmp	.+30     	; 0xc0a2 <update_spider_enemy+0x5e>
    c084:	9e 81       	ldd	r25, Y+6	; 0x06
    c086:	91 11       	cpse	r25, r1
    c088:	0c c0       	rjmp	.+24     	; 0xc0a2 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c08a:	88 e0       	ldi	r24, 0x08	; 8
    c08c:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c08e:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c090:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c092:	89 85       	ldd	r24, Y+9	; 0x09
    c094:	81 11       	cpse	r24, r1
    c096:	03 c0       	rjmp	.+6      	; 0xc09e <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c098:	81 e0       	ldi	r24, 0x01	; 1
    c09a:	89 87       	std	Y+9, r24	; 0x09
    c09c:	0d c0       	rjmp	.+26     	; 0xc0b8 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c09e:	19 86       	std	Y+9, r1	; 0x09
    c0a0:	0b c0       	rjmp	.+22     	; 0xc0b8 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c0a2:	88 23       	and	r24, r24
    c0a4:	49 f0       	breq	.+18     	; 0xc0b8 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c0a6:	ce 01       	movw	r24, r28
    c0a8:	85 96       	adiw	r24, 0x25	; 37
    c0aa:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c0ae:	40 e0       	ldi	r20, 0x00	; 0
    c0b0:	bc 01       	movw	r22, r24
    c0b2:	81 2f       	mov	r24, r17
    c0b4:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	}
	e->frame_count++;
    c0b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    c0ba:	8f 5f       	subi	r24, 0xFF	; 255
    c0bc:	8d 87       	std	Y+13, r24	; 0x0d
}
    c0be:	df 91       	pop	r29
    c0c0:	cf 91       	pop	r28
    c0c2:	1f 91       	pop	r17
    c0c4:	08 95       	ret

0000c0c6 <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c0c6:	cf 93       	push	r28
    c0c8:	fc 01       	movw	r30, r24
    c0ca:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c0cc:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c0ce:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    c0d0:	40 91 d8 0d 	lds	r20, 0x0DD8
    c0d4:	50 91 d9 0d 	lds	r21, 0x0DD9
    c0d8:	20 81       	ld	r18, Z
    c0da:	31 81       	ldd	r19, Z+1	; 0x01
    c0dc:	85 96       	adiw	r24, 0x25	; 37
    c0de:	24 17       	cp	r18, r20
    c0e0:	35 07       	cpc	r19, r21
    c0e2:	38 f4       	brcc	.+14     	; 0xc0f2 <update_turret_enemy+0x2c>
    c0e4:	24 85       	ldd	r18, Z+12	; 0x0c
    c0e6:	26 30       	cpi	r18, 0x06	; 6
    c0e8:	21 f0       	breq	.+8      	; 0xc0f2 <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c0ea:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c0ee:	41 e0       	ldi	r20, 0x01	; 1
    c0f0:	03 c0       	rjmp	.+6      	; 0xc0f8 <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c0f2:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c0f6:	40 e0       	ldi	r20, 0x00	; 0
    c0f8:	bc 01       	movw	r22, r24
    c0fa:	8c 2f       	mov	r24, r28
	}
}
    c0fc:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c0fe:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000c102 <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c102:	cf 93       	push	r28
    c104:	fc 01       	movw	r30, r24
    c106:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c108:	82 ee       	ldi	r24, 0xE2	; 226
    c10a:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c10c:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c10e:	cf 01       	movw	r24, r30
    c110:	85 96       	adiw	r24, 0x25	; 37
    c112:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c116:	40 e0       	ldi	r20, 0x00	; 0
    c118:	bc 01       	movw	r22, r24
    c11a:	8c 2f       	mov	r24, r28
}
    c11c:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c11e:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000c122 <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c122:	cf 93       	push	r28
    c124:	fc 01       	movw	r30, r24
    c126:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c128:	8a e0       	ldi	r24, 0x0A	; 10
    c12a:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c12c:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c12e:	cf 01       	movw	r24, r30
    c130:	85 96       	adiw	r24, 0x25	; 37
    c132:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c136:	40 e0       	ldi	r20, 0x00	; 0
    c138:	bc 01       	movw	r22, r24
    c13a:	8c 2f       	mov	r24, r28
}
    c13c:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c13e:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000c142 <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    c142:	cf 93       	push	r28
    c144:	fc 01       	movw	r30, r24
    c146:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    c148:	84 e1       	ldi	r24, 0x14	; 20
    c14a:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    c14c:	80 91 d2 0d 	lds	r24, 0x0DD2
    c150:	6c e3       	ldi	r22, 0x3C	; 60
    c152:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    c156:	91 11       	cpse	r25, r1
    c158:	03 c0       	rjmp	.+6      	; 0xc160 <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    c15a:	94 81       	ldd	r25, Z+4	; 0x04
    c15c:	91 95       	neg	r25
    c15e:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c160:	cf 01       	movw	r24, r30
    c162:	85 96       	adiw	r24, 0x25	; 37
    c164:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c168:	40 e0       	ldi	r20, 0x00	; 0
    c16a:	bc 01       	movw	r22, r24
    c16c:	8c 2f       	mov	r24, r28
}
    c16e:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c170:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000c174 <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c174:	cf 93       	push	r28
    c176:	fc 01       	movw	r30, r24
    c178:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c17a:	8e e1       	ldi	r24, 0x1E	; 30
    c17c:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c17e:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c180:	cf 01       	movw	r24, r30
    c182:	85 96       	adiw	r24, 0x25	; 37
    c184:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c188:	40 e0       	ldi	r20, 0x00	; 0
    c18a:	bc 01       	movw	r22, r24
    c18c:	8c 2f       	mov	r24, r28
}
    c18e:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c190:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000c194 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c194:	cf 93       	push	r28
    c196:	fc 01       	movw	r30, r24
    c198:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c19a:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c19c:	8e e1       	ldi	r24, 0x1E	; 30
    c19e:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c1a0:	80 91 cd 0d 	lds	r24, 0x0DCD
    c1a4:	82 30       	cpi	r24, 0x02	; 2
    c1a6:	11 f4       	brne	.+4      	; 0xc1ac <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c1a8:	82 ee       	ldi	r24, 0xE2	; 226
    c1aa:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c1ac:	22 81       	ldd	r18, Z+2	; 0x02
    c1ae:	33 81       	ldd	r19, Z+3	; 0x03
    c1b0:	24 50       	subi	r18, 0x04	; 4
    c1b2:	31 09       	sbc	r19, r1
    c1b4:	2d 3b       	cpi	r18, 0xBD	; 189
    c1b6:	31 05       	cpc	r19, r1
    c1b8:	38 f0       	brcs	.+14     	; 0xc1c8 <update_level_hazard+0x34>
    c1ba:	27 85       	ldd	r18, Z+15	; 0x0f
    c1bc:	88 e0       	ldi	r24, 0x08	; 8
    c1be:	28 9f       	mul	r18, r24
    c1c0:	90 01       	movw	r18, r0
    c1c2:	11 24       	eor	r1, r1
    c1c4:	33 83       	std	Z+3, r19	; 0x03
    c1c6:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1c8:	cf 01       	movw	r24, r30
    c1ca:	85 96       	adiw	r24, 0x25	; 37
    c1cc:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c1d0:	40 e0       	ldi	r20, 0x00	; 0
    c1d2:	bc 01       	movw	r22, r24
    c1d4:	8c 2f       	mov	r24, r28
}
    c1d6:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1d8:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000c1dc <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c1dc:	cf 93       	push	r28
    c1de:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c1e0:	0c 96       	adiw	r24, 0x0c	; 12
    c1e2:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    c1e6:	40 e0       	ldi	r20, 0x00	; 0
    c1e8:	bc 01       	movw	r22, r24
    c1ea:	8c 2f       	mov	r24, r28
}
    c1ec:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c1ee:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000c1f2 <update_enemies>:
}

void update_enemies()
{
    c1f2:	cf 92       	push	r12
    c1f4:	df 92       	push	r13
    c1f6:	ef 92       	push	r14
    c1f8:	ff 92       	push	r15
    c1fa:	0f 93       	push	r16
    c1fc:	1f 93       	push	r17
    c1fe:	cf 93       	push	r28
    c200:	df 93       	push	r29
    c202:	89 ed       	ldi	r24, 0xD9	; 217
    c204:	e8 2e       	mov	r14, r24
    c206:	8e e0       	ldi	r24, 0x0E	; 14
    c208:	f8 2e       	mov	r15, r24
    c20a:	ce ec       	ldi	r28, 0xCE	; 206
    c20c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c20e:	19 e0       	ldi	r17, 0x09	; 9
    c210:	f7 01       	movw	r30, r14
    c212:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c214:	80 81       	ld	r24, Z
    c216:	97 01       	movw	r18, r14
    c218:	21 50       	subi	r18, 0x01	; 1
    c21a:	31 09       	sbc	r19, r1
    c21c:	69 01       	movw	r12, r18
    c21e:	84 ff       	sbrs	r24, 4
    c220:	0d c0       	rjmp	.+26     	; 0xc23c <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c222:	d7 01       	movw	r26, r14
    c224:	0c 91       	ld	r16, X
    c226:	f9 01       	movw	r30, r18
    c228:	20 81       	ld	r18, Z
    c22a:	41 2f       	mov	r20, r17
    c22c:	be 01       	movw	r22, r28
    c22e:	63 5d       	subi	r22, 0xD3	; 211
    c230:	7f 4f       	sbci	r23, 0xFF	; 255
    c232:	ce 01       	movw	r24, r28
    c234:	08 96       	adiw	r24, 0x08	; 8
    c236:	0e 94 32 5f 	call	0xbe64	; 0xbe64 <map_explosion>
    c23a:	2e c0       	rjmp	.+92     	; 0xc298 <update_enemies+0xa6>
    c23c:	f7 01       	movw	r30, r14
    c23e:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c240:	80 81       	ld	r24, Z
    c242:	88 23       	and	r24, r24
    c244:	49 f1       	breq	.+82     	; 0xc298 <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c246:	d7 01       	movw	r26, r14
    c248:	11 96       	adiw	r26, 0x01	; 1
    c24a:	ec 91       	ld	r30, X
    c24c:	8e 2f       	mov	r24, r30
    c24e:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c250:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c252:	89 30       	cpi	r24, 0x09	; 9
    c254:	91 05       	cpc	r25, r1
    c256:	e8 f4       	brcc	.+58     	; 0xc292 <update_enemies+0xa0>
    c258:	fc 01       	movw	r30, r24
    c25a:	e8 5c       	subi	r30, 0xC8	; 200
    c25c:	ff 4f       	sbci	r31, 0xFF	; 255
    c25e:	0c 94 15 71 	jmp	0xe22a	; 0xe22a <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c262:	ce 01       	movw	r24, r28
    c264:	0e 94 22 60 	call	0xc044	; 0xc044 <update_spider_enemy>
    c268:	17 c0       	rjmp	.+46     	; 0xc298 <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    c26a:	ce 01       	movw	r24, r28
    c26c:	0e 94 63 60 	call	0xc0c6	; 0xc0c6 <update_turret_enemy>
    c270:	13 c0       	rjmp	.+38     	; 0xc298 <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c272:	ce 01       	movw	r24, r28
    c274:	0e 94 81 60 	call	0xc102	; 0xc102 <update_drone_enemy>
    c278:	0f c0       	rjmp	.+30     	; 0xc298 <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c27a:	ce 01       	movw	r24, r28
    c27c:	0e 94 ba 60 	call	0xc174	; 0xc174 <update_shark_enemy>
    c280:	0b c0       	rjmp	.+22     	; 0xc298 <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c282:	ce 01       	movw	r24, r28
    c284:	0e 94 91 60 	call	0xc122	; 0xc122 <update_globe_enemy>
    c288:	07 c0       	rjmp	.+14     	; 0xc298 <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    c28a:	ce 01       	movw	r24, r28
    c28c:	0e 94 a1 60 	call	0xc142	; 0xc142 <update_xwing_enemy>
    c290:	03 c0       	rjmp	.+6      	; 0xc298 <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    c292:	ce 01       	movw	r24, r28
    c294:	0e 94 ca 60 	call	0xc194	; 0xc194 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c298:	f6 01       	movw	r30, r12
    c29a:	90 81       	ld	r25, Z
    c29c:	d7 01       	movw	r26, r14
    c29e:	8c 91       	ld	r24, X
    c2a0:	98 9f       	mul	r25, r24
    c2a2:	10 0d       	add	r17, r0
    c2a4:	11 24       	eor	r1, r1
    c2a6:	b5 e3       	ldi	r27, 0x35	; 53
    c2a8:	eb 0e       	add	r14, r27
    c2aa:	f1 1c       	adc	r15, r1
    c2ac:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c2ae:	e2 ee       	ldi	r30, 0xE2	; 226
    c2b0:	ee 16       	cp	r14, r30
    c2b2:	ef e0       	ldi	r30, 0x0F	; 15
    c2b4:	fe 06       	cpc	r15, r30
    c2b6:	09 f0       	breq	.+2      	; 0xc2ba <update_enemies+0xc8>
    c2b8:	ab cf       	rjmp	.-170    	; 0xc210 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c2ba:	df 91       	pop	r29
    c2bc:	cf 91       	pop	r28
    c2be:	1f 91       	pop	r17
    c2c0:	0f 91       	pop	r16
    c2c2:	ff 90       	pop	r15
    c2c4:	ef 90       	pop	r14
    c2c6:	df 90       	pop	r13
    c2c8:	cf 90       	pop	r12
    c2ca:	08 95       	ret

0000c2cc <update_enemy_shots>:

void update_enemy_shots()
{
    c2cc:	6f 92       	push	r6
    c2ce:	7f 92       	push	r7
    c2d0:	8f 92       	push	r8
    c2d2:	9f 92       	push	r9
    c2d4:	bf 92       	push	r11
    c2d6:	cf 92       	push	r12
    c2d8:	df 92       	push	r13
    c2da:	ef 92       	push	r14
    c2dc:	ff 92       	push	r15
    c2de:	0f 93       	push	r16
    c2e0:	1f 93       	push	r17
    c2e2:	cf 93       	push	r28
    c2e4:	df 93       	push	r29
    c2e6:	1f 92       	push	r1
    c2e8:	cd b7       	in	r28, 0x3d	; 61
    c2ea:	de b7       	in	r29, 0x3e	; 62
    c2ec:	8c ed       	ldi	r24, 0xDC	; 220
    c2ee:	68 2e       	mov	r6, r24
    c2f0:	8e e0       	ldi	r24, 0x0E	; 14
    c2f2:	78 2e       	mov	r7, r24
    c2f4:	99 ee       	ldi	r25, 0xE9	; 233
    c2f6:	e9 2e       	mov	r14, r25
    c2f8:	9e e0       	ldi	r25, 0x0E	; 14
    c2fa:	f9 2e       	mov	r15, r25
    c2fc:	23 ee       	ldi	r18, 0xE3	; 227
    c2fe:	c2 2e       	mov	r12, r18
    c300:	2e e0       	ldi	r18, 0x0E	; 14
    c302:	d2 2e       	mov	r13, r18
    c304:	00 e1       	ldi	r16, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c306:	bb 24       	eor	r11, r11
    c308:	b3 94       	inc	r11
    c30a:	6f ef       	ldi	r22, 0xFF	; 255
    c30c:	60 0f       	add	r22, r16
    c30e:	f3 01       	movw	r30, r6
    c310:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c312:	80 81       	ld	r24, Z
    c314:	35 97       	sbiw	r30, 0x05	; 5
    c316:	82 30       	cpi	r24, 0x02	; 2
    c318:	09 f4       	brne	.+2      	; 0xc31c <update_enemy_shots+0x50>
    c31a:	55 c0       	rjmp	.+170    	; 0xc3c6 <update_enemy_shots+0xfa>
    c31c:	90 81       	ld	r25, Z
    c31e:	99 23       	and	r25, r25
    c320:	09 f4       	brne	.+2      	; 0xc324 <update_enemy_shots+0x58>
    c322:	51 c0       	rjmp	.+162    	; 0xc3c6 <update_enemy_shots+0xfa>
    c324:	d3 01       	movw	r26, r6
    c326:	9c 91       	ld	r25, X
    c328:	9c 33       	cpi	r25, 0x3C	; 60
    c32a:	08 f4       	brcc	.+2      	; 0xc32e <update_enemy_shots+0x62>
    c32c:	4c c0       	rjmp	.+152    	; 0xc3c6 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    c32e:	1c 92       	st	X, r1
    c330:	f7 01       	movw	r30, r14
    c332:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c334:	90 81       	ld	r25, Z
    c336:	97 30       	cpi	r25, 0x07	; 7
    c338:	09 f0       	breq	.+2      	; 0xc33c <update_enemy_shots+0x70>
    c33a:	4c c0       	rjmp	.+152    	; 0xc3d4 <update_enemy_shots+0x108>
    c33c:	f7 01       	movw	r30, r14
				{
					if (!game.enemies[i].shot[j].active)
    c33e:	92 91       	ld	r25, -Z
    c340:	91 11       	cpse	r25, r1
    c342:	3c c0       	rjmp	.+120    	; 0xc3bc <update_enemy_shots+0xf0>
					{
						game.enemies[i].shot[j].active = 1;
    c344:	b0 82       	st	Z, r11
    c346:	f3 01       	movw	r30, r6
    c348:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c34a:	20 81       	ld	r18, Z
    c34c:	31 81       	ldd	r19, Z+1	; 0x01
    c34e:	f3 01       	movw	r30, r6
    c350:	34 83       	std	Z+4, r19	; 0x04
    c352:	23 83       	std	Z+3, r18	; 0x03
    c354:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c356:	40 81       	ld	r20, Z
    c358:	51 81       	ldd	r21, Z+1	; 0x01
    c35a:	fa 01       	movw	r30, r20
    c35c:	e8 7f       	andi	r30, 0xF8	; 248
    c35e:	16 96       	adiw	r26, 0x06	; 6
    c360:	fc 93       	st	X, r31
    c362:	ee 93       	st	-X, r30
    c364:	15 97       	sbiw	r26, 0x05	; 5
    c366:	f7 01       	movw	r30, r14
    c368:	10 81       	ld	r17, Z
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c36a:	84 30       	cpi	r24, 0x04	; 4
    c36c:	19 f4       	brne	.+6      	; 0xc374 <update_enemy_shots+0xa8>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c36e:	d6 01       	movw	r26, r12
    c370:	1c 93       	st	X, r17
    c372:	24 c0       	rjmp	.+72     	; 0xc3bc <update_enemy_shots+0xf0>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c374:	85 30       	cpi	r24, 0x05	; 5
    c376:	59 f4       	brne	.+22     	; 0xc38e <update_enemy_shots+0xc2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c378:	f6 01       	movw	r30, r12
    c37a:	10 83       	st	Z, r17
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c37c:	80 91 da 0d 	lds	r24, 0x0DDA
    c380:	90 91 db 0d 	lds	r25, 0x0DDB
    c384:	48 17       	cp	r20, r24
    c386:	59 07       	cpc	r21, r25
    c388:	c8 f0       	brcs	.+50     	; 0xc3bc <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c38a:	11 95       	neg	r17
    c38c:	16 c0       	rjmp	.+44     	; 0xc3ba <update_enemy_shots+0xee>
    c38e:	47 01       	movw	r8, r14
    c390:	f5 e0       	ldi	r31, 0x05	; 5
    c392:	8f 1a       	sub	r8, r31
    c394:	91 08       	sbc	r9, r1
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c396:	81 2f       	mov	r24, r17
    c398:	81 95       	neg	r24
    c39a:	d4 01       	movw	r26, r8
    c39c:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    c39e:	80 91 d8 0d 	lds	r24, 0x0DD8
    c3a2:	90 91 d9 0d 	lds	r25, 0x0DD9
    c3a6:	82 17       	cp	r24, r18
    c3a8:	93 07       	cpc	r25, r19
    c3aa:	40 f0       	brcs	.+16     	; 0xc3bc <update_enemy_shots+0xf0>
    c3ac:	69 83       	std	Y+1, r22	; 0x01
    c3ae:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    c3b2:	69 81       	ldd	r22, Y+1	; 0x01
    c3b4:	81 11       	cpse	r24, r1
    c3b6:	02 c0       	rjmp	.+4      	; 0xc3bc <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c3b8:	f4 01       	movw	r30, r8
    c3ba:	10 83       	st	Z, r17
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c3bc:	c3 01       	movw	r24, r6
    c3be:	03 96       	adiw	r24, 0x03	; 3
    c3c0:	0e 94 ee 60 	call	0xc1dc	; 0xc1dc <update_basic_shot>
    c3c4:	07 c0       	rjmp	.+14     	; 0xc3d4 <update_enemy_shots+0x108>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c3c6:	80 81       	ld	r24, Z
    c3c8:	88 23       	and	r24, r24
    c3ca:	21 f0       	breq	.+8      	; 0xc3d4 <update_enemy_shots+0x108>
		{
			game.enemies[i].shot_frame_count++;
    c3cc:	d3 01       	movw	r26, r6
    c3ce:	8c 91       	ld	r24, X
    c3d0:	8f 5f       	subi	r24, 0xFF	; 255
    c3d2:	8c 93       	st	X, r24
    c3d4:	0f 5f       	subi	r16, 0xFF	; 255
    c3d6:	b5 e3       	ldi	r27, 0x35	; 53
    c3d8:	6b 0e       	add	r6, r27
    c3da:	71 1c       	adc	r7, r1
    c3dc:	e5 e3       	ldi	r30, 0x35	; 53
    c3de:	ee 0e       	add	r14, r30
    c3e0:	f1 1c       	adc	r15, r1
    c3e2:	f5 e3       	ldi	r31, 0x35	; 53
    c3e4:	cf 0e       	add	r12, r31
    c3e6:	d1 1c       	adc	r13, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c3e8:	05 31       	cpi	r16, 0x15	; 21
    c3ea:	09 f0       	breq	.+2      	; 0xc3ee <update_enemy_shots+0x122>
    c3ec:	8e cf       	rjmp	.-228    	; 0xc30a <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c3ee:	0f 90       	pop	r0
    c3f0:	df 91       	pop	r29
    c3f2:	cf 91       	pop	r28
    c3f4:	1f 91       	pop	r17
    c3f6:	0f 91       	pop	r16
    c3f8:	ff 90       	pop	r15
    c3fa:	ef 90       	pop	r14
    c3fc:	df 90       	pop	r13
    c3fe:	cf 90       	pop	r12
    c400:	bf 90       	pop	r11
    c402:	9f 90       	pop	r9
    c404:	8f 90       	pop	r8
    c406:	7f 90       	pop	r7
    c408:	6f 90       	pop	r6
    c40a:	08 95       	ret

0000c40c <animate_enemies>:

void animate_enemies()
{
    c40c:	2f 92       	push	r2
    c40e:	3f 92       	push	r3
    c410:	4f 92       	push	r4
    c412:	5f 92       	push	r5
    c414:	6f 92       	push	r6
    c416:	7f 92       	push	r7
    c418:	8f 92       	push	r8
    c41a:	9f 92       	push	r9
    c41c:	af 92       	push	r10
    c41e:	cf 92       	push	r12
    c420:	df 92       	push	r13
    c422:	ef 92       	push	r14
    c424:	ff 92       	push	r15
    c426:	0f 93       	push	r16
    c428:	1f 93       	push	r17
    c42a:	cf 93       	push	r28
    c42c:	df 93       	push	r29
    c42e:	00 d0       	rcall	.+0      	; 0xc430 <animate_enemies+0x24>
    c430:	00 d0       	rcall	.+0      	; 0xc432 <animate_enemies+0x26>
    c432:	cd b7       	in	r28, 0x3d	; 61
    c434:	de b7       	in	r29, 0x3e	; 62
    c436:	45 ed       	ldi	r20, 0xD5	; 213
    c438:	24 2e       	mov	r2, r20
    c43a:	4e e0       	ldi	r20, 0x0E	; 14
    c43c:	34 2e       	mov	r3, r20
    c43e:	58 ed       	ldi	r21, 0xD8	; 216
    c440:	65 2e       	mov	r6, r21
    c442:	5e e0       	ldi	r21, 0x0E	; 14
    c444:	75 2e       	mov	r7, r21
    c446:	69 ed       	ldi	r22, 0xD9	; 217
    c448:	86 2e       	mov	r8, r22
    c44a:	6e e0       	ldi	r22, 0x0E	; 14
    c44c:	96 2e       	mov	r9, r22
    c44e:	8e ec       	ldi	r24, 0xCE	; 206
    c450:	9e e0       	ldi	r25, 0x0E	; 14
    c452:	9c 83       	std	Y+4, r25	; 0x04
    c454:	8b 83       	std	Y+3, r24	; 0x03
    c456:	a6 ed       	ldi	r26, 0xD6	; 214
    c458:	be e0       	ldi	r27, 0x0E	; 14
    c45a:	ba 83       	std	Y+2, r27	; 0x02
    c45c:	a9 83       	std	Y+1, r26	; 0x01
    c45e:	41 2c       	mov	r4, r1
    c460:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    c462:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c464:	70 e1       	ldi	r23, 0x10	; 16
    c466:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c468:	f1 01       	movw	r30, r2
    c46a:	80 81       	ld	r24, Z
    c46c:	88 23       	and	r24, r24
    c46e:	09 f4       	brne	.+2      	; 0xc472 <animate_enemies+0x66>
    c470:	9b c0       	rjmp	.+310    	; 0xc5a8 <animate_enemies+0x19c>
    c472:	a9 81       	ldd	r26, Y+1	; 0x01
    c474:	ba 81       	ldd	r27, Y+2	; 0x02
    c476:	8c 91       	ld	r24, X
    c478:	84 fd       	sbrc	r24, 4
    c47a:	96 c0       	rjmp	.+300    	; 0xc5a8 <animate_enemies+0x19c>
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c47c:	eb 81       	ldd	r30, Y+3	; 0x03
    c47e:	fc 81       	ldd	r31, Y+4	; 0x04
    c480:	20 81       	ld	r18, Z
    c482:	31 81       	ldd	r19, Z+1	; 0x01
    c484:	e0 91 b8 0d 	lds	r30, 0x0DB8
    c488:	f0 91 b9 0d 	lds	r31, 0x0DB9
    c48c:	2e 17       	cp	r18, r30
    c48e:	3f 07       	cpc	r19, r31
    c490:	10 f1       	brcs	.+68     	; 0xc4d6 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
    c492:	ab 81       	ldd	r26, Y+3	; 0x03
    c494:	bc 81       	ldd	r27, Y+4	; 0x04
    c496:	12 96       	adiw	r26, 0x02	; 2
    c498:	ed 90       	ld	r14, X+
    c49a:	fc 90       	ld	r15, X
    c49c:	13 97       	sbiw	r26, 0x03	; 3
    c49e:	80 91 c0 0d 	lds	r24, 0x0DC0
    c4a2:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c4a4:	e8 16       	cp	r14, r24
    c4a6:	f9 06       	cpc	r15, r25
    c4a8:	b0 f0       	brcs	.+44     	; 0xc4d6 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c4aa:	88 53       	subi	r24, 0x38	; 56
    c4ac:	9f 4f       	sbci	r25, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
    c4ae:	8e 15       	cp	r24, r14
    c4b0:	9f 05       	cpc	r25, r15
    c4b2:	88 f0       	brcs	.+34     	; 0xc4d6 <animate_enemies+0xca>
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c4b4:	cf 01       	movw	r24, r30
    c4b6:	80 52       	subi	r24, 0x20	; 32
    c4b8:	9f 4f       	sbci	r25, 0xFF	; 255
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c4ba:	82 17       	cp	r24, r18
    c4bc:	93 07       	cpc	r25, r19
    c4be:	c8 f4       	brcc	.+50     	; 0xc4f2 <animate_enemies+0xe6>
    c4c0:	d2 01       	movw	r26, r4
    c4c2:	a6 52       	subi	r26, 0x26	; 38
    c4c4:	b1 4f       	sbci	r27, 0xF1	; 241
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c4c6:	8c 91       	ld	r24, X
    c4c8:	81 11       	cpse	r24, r1
    c4ca:	13 c0       	rjmp	.+38     	; 0xc4f2 <animate_enemies+0xe6>
    c4cc:	d4 01       	movw	r26, r8
    c4ce:	12 97       	sbiw	r26, 0x02	; 2
				 game.enemies[i].enemy_type == ENEMY_SPIDER &&
    c4d0:	8c 91       	ld	r24, X
    c4d2:	81 30       	cpi	r24, 0x01	; 1
    c4d4:	71 f4       	brne	.+28     	; 0xc4f2 <animate_enemies+0xe6>
				 game.enemies[i].direction == D_RIGHT))
			{
				game.enemies[i].active = 0;
    c4d6:	f1 01       	movw	r30, r2
    c4d8:	10 82       	st	Z, r1
				game.active_enemies--;
    c4da:	80 91 d3 0d 	lds	r24, 0x0DD3
    c4de:	81 50       	subi	r24, 0x01	; 1
    c4e0:	80 93 d3 0d 	sts	0x0DD3, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c4e4:	d4 01       	movw	r26, r8
    c4e6:	0c 91       	ld	r16, X
    c4e8:	f3 01       	movw	r30, r6
    c4ea:	20 81       	ld	r18, Z
    c4ec:	40 e0       	ldi	r20, 0x00	; 0
    c4ee:	60 ee       	ldi	r22, 0xE0	; 224
    c4f0:	6e c0       	rjmp	.+220    	; 0xc5ce <animate_enemies+0x1c2>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c4f2:	02 2f       	mov	r16, r18
    c4f4:	0e 1b       	sub	r16, r30
    c4f6:	20 91 e4 0d 	lds	r18, 0x0DE4
    c4fa:	22 0f       	add	r18, r18
    c4fc:	22 0f       	add	r18, r18
    c4fe:	22 0f       	add	r18, r18
    c500:	40 91 e3 0d 	lds	r20, 0x0DE3
    c504:	44 0f       	add	r20, r20
    c506:	44 0f       	add	r20, r20
    c508:	44 0f       	add	r20, r20
    c50a:	80 91 d8 0d 	lds	r24, 0x0DD8
    c50e:	98 e0       	ldi	r25, 0x08	; 8
    c510:	a9 2e       	mov	r10, r25
    c512:	38 e0       	ldi	r19, 0x08	; 8
    c514:	c3 2e       	mov	r12, r19
    c516:	60 91 da 0d 	lds	r22, 0x0DDA
    c51a:	8e 1b       	sub	r24, r30
    c51c:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBCollides>
    c520:	88 23       	and	r24, r24
    c522:	79 f0       	breq	.+30     	; 0xc542 <animate_enemies+0x136>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c524:	80 91 e0 0d 	lds	r24, 0x0DE0
    c528:	84 fd       	sbrc	r24, 4
    c52a:	0b c0       	rjmp	.+22     	; 0xc542 <animate_enemies+0x136>
			)
			{
				SFX_PLAYER_EXPLODE;
    c52c:	41 e0       	ldi	r20, 0x01	; 1
    c52e:	6f ef       	ldi	r22, 0xFF	; 255
    c530:	85 e0       	ldi	r24, 0x05	; 5
    c532:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
				game.player.shield = 0;
    c536:	10 92 e7 0d 	sts	0x0DE7, r1
				game.player.flags = EXPLODING;
    c53a:	80 e1       	ldi	r24, 0x10	; 16
    c53c:	80 93 e0 0d 	sts	0x0DE0, r24
				return;
    c540:	6c c0       	rjmp	.+216    	; 0xc61a <animate_enemies+0x20e>
    c542:	c2 01       	movw	r24, r4
    c544:	88 54       	subi	r24, 0x48	; 72
    c546:	92 4f       	sbci	r25, 0xF2	; 242
    c548:	fc 01       	movw	r30, r24
    c54a:	ee 5d       	subi	r30, 0xDE	; 222
    c54c:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c54e:	20 81       	ld	r18, Z
    c550:	22 30       	cpi	r18, 0x02	; 2
    c552:	69 f4       	brne	.+26     	; 0xc56e <animate_enemies+0x162>
    c554:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c556:	e0 80       	ld	r14, Z
    c558:	01 e0       	ldi	r16, 0x01	; 1
    c55a:	d4 01       	movw	r26, r8
    c55c:	2c 91       	ld	r18, X
    c55e:	f3 01       	movw	r30, r6
    c560:	40 81       	ld	r20, Z
    c562:	61 2f       	mov	r22, r17
    c564:	8b 81       	ldd	r24, Y+3	; 0x03
    c566:	9c 81       	ldd	r25, Y+4	; 0x04
    c568:	0e 94 7d 5f 	call	0xbefa	; 0xbefa <animate_sprite>
    c56c:	33 c0       	rjmp	.+102    	; 0xc5d4 <animate_enemies+0x1c8>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c56e:	e1 2c       	mov	r14, r1
    c570:	00 e0       	ldi	r16, 0x00	; 0
    c572:	d4 01       	movw	r26, r8
    c574:	2c 91       	ld	r18, X
    c576:	f3 01       	movw	r30, r6
    c578:	40 81       	ld	r20, Z
    c57a:	61 2f       	mov	r22, r17
    c57c:	8b 81       	ldd	r24, Y+3	; 0x03
    c57e:	9c 81       	ldd	r25, Y+4	; 0x04
    c580:	0e 94 7d 5f 	call	0xbefa	; 0xbefa <animate_sprite>
    c584:	82 30       	cpi	r24, 0x02	; 2
    c586:	30 f1       	brcs	.+76     	; 0xc5d4 <animate_enemies+0x1c8>
			{
				SFX_ENEMY_EXPLODE;
    c588:	41 e0       	ldi	r20, 0x01	; 1
    c58a:	6f ef       	ldi	r22, 0xFF	; 255
    c58c:	86 e0       	ldi	r24, 0x06	; 6
    c58e:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c592:	a9 81       	ldd	r26, Y+1	; 0x01
    c594:	ba 81       	ldd	r27, Y+2	; 0x02
    c596:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    c598:	f1 01       	movw	r30, r2
    c59a:	10 82       	st	Z, r1
				game.active_enemies--;
    c59c:	80 91 d3 0d 	lds	r24, 0x0DD3
    c5a0:	81 50       	subi	r24, 0x01	; 1
    c5a2:	80 93 d3 0d 	sts	0x0DD3, r24
    c5a6:	16 c0       	rjmp	.+44     	; 0xc5d4 <animate_enemies+0x1c8>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c5a8:	a9 81       	ldd	r26, Y+1	; 0x01
    c5aa:	ba 81       	ldd	r27, Y+2	; 0x02
    c5ac:	8c 91       	ld	r24, X
    c5ae:	84 ff       	sbrs	r24, 4
    c5b0:	11 c0       	rjmp	.+34     	; 0xc5d4 <animate_enemies+0x1c8>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c5b2:	eb 81       	ldd	r30, Y+3	; 0x03
    c5b4:	fc 81       	ldd	r31, Y+4	; 0x04
    c5b6:	42 81       	ldd	r20, Z+2	; 0x02
    c5b8:	80 91 c0 0d 	lds	r24, 0x0DC0
    c5bc:	48 1b       	sub	r20, r24
    c5be:	60 81       	ld	r22, Z
    c5c0:	80 91 b8 0d 	lds	r24, 0x0DB8
    c5c4:	68 1b       	sub	r22, r24
    c5c6:	d4 01       	movw	r26, r8
    c5c8:	0c 91       	ld	r16, X
    c5ca:	f3 01       	movw	r30, r6
    c5cc:	20 81       	ld	r18, Z
    c5ce:	81 2f       	mov	r24, r17
    c5d0:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c5d4:	d4 01       	movw	r26, r8
    c5d6:	9c 91       	ld	r25, X
    c5d8:	f3 01       	movw	r30, r6
    c5da:	80 81       	ld	r24, Z
    c5dc:	98 9f       	mul	r25, r24
    c5de:	10 0d       	add	r17, r0
    c5e0:	11 24       	eor	r1, r1
    c5e2:	f5 e3       	ldi	r31, 0x35	; 53
    c5e4:	2f 0e       	add	r2, r31
    c5e6:	31 1c       	adc	r3, r1
    c5e8:	85 e3       	ldi	r24, 0x35	; 53
    c5ea:	48 0e       	add	r4, r24
    c5ec:	51 1c       	adc	r5, r1
    c5ee:	95 e3       	ldi	r25, 0x35	; 53
    c5f0:	69 0e       	add	r6, r25
    c5f2:	71 1c       	adc	r7, r1
    c5f4:	a5 e3       	ldi	r26, 0x35	; 53
    c5f6:	8a 0e       	add	r8, r26
    c5f8:	91 1c       	adc	r9, r1
    c5fa:	eb 81       	ldd	r30, Y+3	; 0x03
    c5fc:	fc 81       	ldd	r31, Y+4	; 0x04
    c5fe:	f5 96       	adiw	r30, 0x35	; 53
    c600:	fc 83       	std	Y+4, r31	; 0x04
    c602:	eb 83       	std	Y+3, r30	; 0x03
    c604:	89 81       	ldd	r24, Y+1	; 0x01
    c606:	9a 81       	ldd	r25, Y+2	; 0x02
    c608:	c5 96       	adiw	r24, 0x35	; 53
    c60a:	9a 83       	std	Y+2, r25	; 0x02
    c60c:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c60e:	99 e0       	ldi	r25, 0x09	; 9
    c610:	49 16       	cp	r4, r25
    c612:	91 e0       	ldi	r25, 0x01	; 1
    c614:	59 06       	cpc	r5, r25
    c616:	09 f0       	breq	.+2      	; 0xc61a <animate_enemies+0x20e>
    c618:	27 cf       	rjmp	.-434    	; 0xc468 <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c61a:	0f 90       	pop	r0
    c61c:	0f 90       	pop	r0
    c61e:	0f 90       	pop	r0
    c620:	0f 90       	pop	r0
    c622:	df 91       	pop	r29
    c624:	cf 91       	pop	r28
    c626:	1f 91       	pop	r17
    c628:	0f 91       	pop	r16
    c62a:	ff 90       	pop	r15
    c62c:	ef 90       	pop	r14
    c62e:	df 90       	pop	r13
    c630:	cf 90       	pop	r12
    c632:	af 90       	pop	r10
    c634:	9f 90       	pop	r9
    c636:	8f 90       	pop	r8
    c638:	7f 90       	pop	r7
    c63a:	6f 90       	pop	r6
    c63c:	5f 90       	pop	r5
    c63e:	4f 90       	pop	r4
    c640:	3f 90       	pop	r3
    c642:	2f 90       	pop	r2
    c644:	08 95       	ret

0000c646 <animate_enemy_shots>:

void animate_enemy_shots()
{
    c646:	4f 92       	push	r4
    c648:	5f 92       	push	r5
    c64a:	6f 92       	push	r6
    c64c:	7f 92       	push	r7
    c64e:	8f 92       	push	r8
    c650:	9f 92       	push	r9
    c652:	af 92       	push	r10
    c654:	cf 92       	push	r12
    c656:	df 92       	push	r13
    c658:	ef 92       	push	r14
    c65a:	ff 92       	push	r15
    c65c:	0f 93       	push	r16
    c65e:	1f 93       	push	r17
    c660:	cf 93       	push	r28
    c662:	df 93       	push	r29
    c664:	c8 ee       	ldi	r28, 0xE8	; 232
    c666:	de e0       	ldi	r29, 0x0E	; 14
    c668:	4f ed       	ldi	r20, 0xDF	; 223
    c66a:	84 2e       	mov	r8, r20
    c66c:	4e e0       	ldi	r20, 0x0E	; 14
    c66e:	94 2e       	mov	r9, r20
	u8 slot = ENEMY_SHOT_SLOT;
    c670:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    c672:	50 e1       	ldi	r21, 0x10	; 16
    c674:	f5 2e       	mov	r15, r21
    c676:	fe 01       	movw	r30, r28
    c678:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c67a:	80 81       	ld	r24, Z
    c67c:	87 30       	cpi	r24, 0x07	; 7
    c67e:	09 f0       	breq	.+2      	; 0xc682 <animate_enemy_shots+0x3c>
    c680:	73 c0       	rjmp	.+230    	; 0xc768 <animate_enemy_shots+0x122>
			{
				if (game.enemies[i].shot[j].active)
    c682:	88 81       	ld	r24, Y
    c684:	88 23       	and	r24, r24
    c686:	09 f4       	brne	.+2      	; 0xc68a <animate_enemy_shots+0x44>
    c688:	68 c0       	rjmp	.+208    	; 0xc75a <animate_enemy_shots+0x114>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c68a:	c4 01       	movw	r24, r8
    c68c:	0e 94 1e 5b 	call	0xb63c	; 0xb63c <out_of_bounds>
    c690:	81 11       	cpse	r24, r1
    c692:	40 c0       	rjmp	.+128    	; 0xc714 <animate_enemy_shots+0xce>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c694:	41 e0       	ldi	r20, 0x01	; 1
    c696:	61 e0       	ldi	r22, 0x01	; 1
    c698:	c4 01       	movw	r24, r8
    c69a:	0e 94 c4 5b 	call	0xb788	; 0xb788 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c69e:	81 11       	cpse	r24, r1
    c6a0:	39 c0       	rjmp	.+114    	; 0xc714 <animate_enemy_shots+0xce>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    c6a2:	f4 01       	movw	r30, r8
    c6a4:	42 80       	ldd	r4, Z+2	; 0x02
    c6a6:	53 80       	ldd	r5, Z+3	; 0x03
    c6a8:	60 80       	ld	r6, Z
    c6aa:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c6ac:	d0 90 b8 0d 	lds	r13, 0x0DB8
    c6b0:	06 2d       	mov	r16, r6
    c6b2:	0d 19       	sub	r16, r13
    c6b4:	20 91 e4 0d 	lds	r18, 0x0DE4
    c6b8:	22 0f       	add	r18, r18
    c6ba:	22 0f       	add	r18, r18
    c6bc:	22 0f       	add	r18, r18
    c6be:	40 91 e3 0d 	lds	r20, 0x0DE3
    c6c2:	44 0f       	add	r20, r20
    c6c4:	44 0f       	add	r20, r20
    c6c6:	44 0f       	add	r20, r20
    c6c8:	80 91 d8 0d 	lds	r24, 0x0DD8
    c6cc:	98 e0       	ldi	r25, 0x08	; 8
    c6ce:	a9 2e       	mov	r10, r25
    c6d0:	38 e0       	ldi	r19, 0x08	; 8
    c6d2:	c3 2e       	mov	r12, r19
    c6d4:	e4 2c       	mov	r14, r4
    c6d6:	60 91 da 0d 	lds	r22, 0x0DDA
    c6da:	8d 19       	sub	r24, r13
    c6dc:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBCollides>
    c6e0:	88 23       	and	r24, r24
    c6e2:	d1 f0       	breq	.+52     	; 0xc718 <animate_enemy_shots+0xd2>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    c6e4:	41 e0       	ldi	r20, 0x01	; 1
    c6e6:	6f ef       	ldi	r22, 0xFF	; 255
    c6e8:	84 e0       	ldi	r24, 0x04	; 4
    c6ea:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    c6ee:	80 91 e7 0d 	lds	r24, 0x0DE7
    c6f2:	fe 01       	movw	r30, r28
    c6f4:	31 97       	sbiw	r30, 0x01	; 1
    c6f6:	90 81       	ld	r25, Z
    c6f8:	89 1b       	sub	r24, r25
    c6fa:	80 93 e7 0d 	sts	0x0DE7, r24
#endif
						if (game.player.shield <= 0)
    c6fe:	18 16       	cp	r1, r24
    c700:	4c f0       	brlt	.+18     	; 0xc714 <animate_enemy_shots+0xce>
						{
							SFX_PLAYER_EXPLODE;
    c702:	41 e0       	ldi	r20, 0x01	; 1
    c704:	6f ef       	ldi	r22, 0xFF	; 255
    c706:	85 e0       	ldi	r24, 0x05	; 5
    c708:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
							game.player.shield = 0;
    c70c:	10 92 e7 0d 	sts	0x0DE7, r1
							game.player.flags = EXPLODING;
    c710:	f0 92 e0 0d 	sts	0x0DE0, r15
						}
						game.enemies[i].shot[j].active = 0;
    c714:	18 82       	st	Y, r1
    c716:	21 c0       	rjmp	.+66     	; 0xc75a <animate_enemy_shots+0x114>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    c718:	00 91 d2 0d 	lds	r16, 0x0DD2
    c71c:	60 2f       	mov	r22, r16
    c71e:	fe 01       	movw	r30, r28
    c720:	34 97       	sbiw	r30, 0x04	; 4
    c722:	80 81       	ld	r24, Z
    c724:	0e 94 6d 4c 	call	0x98da	; 0x98da <LBMoveDelta>
    c728:	68 0e       	add	r6, r24
    c72a:	79 1e       	adc	r7, r25
    c72c:	f4 01       	movw	r30, r8
    c72e:	71 82       	std	Z+1, r7	; 0x01
    c730:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    c732:	60 2f       	mov	r22, r16
    c734:	fe 01       	movw	r30, r28
    c736:	35 97       	sbiw	r30, 0x05	; 5
    c738:	80 81       	ld	r24, Z
    c73a:	0e 94 6d 4c 	call	0x98da	; 0x98da <LBMoveDelta>
    c73e:	48 0e       	add	r4, r24
    c740:	59 1e       	adc	r5, r25
    c742:	f4 01       	movw	r30, r8
    c744:	53 82       	std	Z+3, r5	; 0x03
    c746:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    c748:	80 91 c0 0d 	lds	r24, 0x0DC0
    c74c:	44 2d       	mov	r20, r4
    c74e:	48 1b       	sub	r20, r24
    c750:	66 2d       	mov	r22, r6
    c752:	6d 19       	sub	r22, r13
    c754:	01 e0       	ldi	r16, 0x01	; 1
    c756:	21 e0       	ldi	r18, 0x01	; 1
    c758:	04 c0       	rjmp	.+8      	; 0xc762 <animate_enemy_shots+0x11c>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    c75a:	01 e0       	ldi	r16, 0x01	; 1
    c75c:	21 e0       	ldi	r18, 0x01	; 1
    c75e:	40 e0       	ldi	r20, 0x00	; 0
    c760:	60 ee       	ldi	r22, 0xE0	; 224
    c762:	81 2f       	mov	r24, r17
    c764:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
				}
			}
			slot += 1;
    c768:	1f 5f       	subi	r17, 0xFF	; 255
    c76a:	e5 96       	adiw	r28, 0x35	; 53
    c76c:	f5 e3       	ldi	r31, 0x35	; 53
    c76e:	8f 0e       	add	r8, r31
    c770:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c772:	14 31       	cpi	r17, 0x14	; 20
    c774:	09 f0       	breq	.+2      	; 0xc778 <animate_enemy_shots+0x132>
    c776:	7f cf       	rjmp	.-258    	; 0xc676 <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    c778:	df 91       	pop	r29
    c77a:	cf 91       	pop	r28
    c77c:	1f 91       	pop	r17
    c77e:	0f 91       	pop	r16
    c780:	ff 90       	pop	r15
    c782:	ef 90       	pop	r14
    c784:	df 90       	pop	r13
    c786:	cf 90       	pop	r12
    c788:	af 90       	pop	r10
    c78a:	9f 90       	pop	r9
    c78c:	8f 90       	pop	r8
    c78e:	7f 90       	pop	r7
    c790:	6f 90       	pop	r6
    c792:	5f 90       	pop	r5
    c794:	4f 90       	pop	r4
    c796:	08 95       	ret

0000c798 <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y)
{
    c798:	ff 92       	push	r15
    c79a:	0f 93       	push	r16
    c79c:	1f 93       	push	r17
    c79e:	cf 93       	push	r28
    c7a0:	df 93       	push	r29
    c7a2:	ec 01       	movw	r28, r24
    c7a4:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    c7a6:	8e e0       	ldi	r24, 0x0E	; 14
    c7a8:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c7aa:	fe 01       	movw	r30, r28
    c7ac:	84 91       	lpm	r24, Z
    c7ae:	83 32       	cpi	r24, 0x23	; 35
    c7b0:	31 f1       	breq	.+76     	; 0xc7fe <stream_text_middle+0x66>
	{
		ln = strnlen_P(dialogue, 255);
    c7b2:	6f ef       	ldi	r22, 0xFF	; 255
    c7b4:	70 e0       	ldi	r23, 0x00	; 0
    c7b6:	ce 01       	movw	r24, r28
    c7b8:	0e 94 a2 72 	call	0xe544	; 0xe544 <strnlen_P>
		x = 14 - ln / 2;
    c7bc:	86 95       	lsr	r24
    c7be:	0f 2d       	mov	r16, r15
    c7c0:	08 1b       	sub	r16, r24
    c7c2:	0c 1b       	sub	r16, r28
    c7c4:	8c 2f       	mov	r24, r28
    c7c6:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c7c8:	21 96       	adiw	r28, 0x01	; 1
    c7ca:	fe 01       	movw	r30, r28
    c7cc:	31 97       	sbiw	r30, 0x01	; 1
    c7ce:	44 91       	lpm	r20, Z
    c7d0:	44 23       	and	r20, r20
    c7d2:	99 f0       	breq	.+38     	; 0xc7fa <stream_text_middle+0x62>
		{
			LBPrintChar(x++, y, c);
    c7d4:	61 2f       	mov	r22, r17
    c7d6:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    c7da:	60 e0       	ldi	r22, 0x00	; 0
    c7dc:	8c e4       	ldi	r24, 0x4C	; 76
    c7de:	9e e0       	ldi	r25, 0x0E	; 14
    c7e0:	0e 94 be 4c 	call	0x997c	; 0x997c <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_A)) WaitUs(CHARACTER_DELAY_US);
    c7e4:	80 91 50 0e 	lds	r24, 0x0E50
    c7e8:	90 91 51 0e 	lds	r25, 0x0E51
    c7ec:	90 fd       	sbrc	r25, 0
    c7ee:	ea cf       	rjmp	.-44     	; 0xc7c4 <stream_text_middle+0x2c>
    c7f0:	80 e7       	ldi	r24, 0x70	; 112
    c7f2:	97 e1       	ldi	r25, 0x17	; 23
    c7f4:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <WaitUs>
    c7f8:	e5 cf       	rjmp	.-54     	; 0xc7c4 <stream_text_middle+0x2c>
		}
		y++;
    c7fa:	1f 5f       	subi	r17, 0xFF	; 255
    c7fc:	d6 cf       	rjmp	.-84     	; 0xc7aa <stream_text_middle+0x12>
	}
}
    c7fe:	df 91       	pop	r29
    c800:	cf 91       	pop	r28
    c802:	1f 91       	pop	r17
    c804:	0f 91       	pop	r16
    c806:	ff 90       	pop	r15
    c808:	08 95       	ret

0000c80a <print_scroll>:

void print_scroll(const unsigned char text[])
{
    c80a:	0f 93       	push	r16
    c80c:	cf 93       	push	r28
    c80e:	df 93       	push	r29
    c810:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    c812:	40 e0       	ldi	r20, 0x00	; 0
    c814:	62 ee       	ldi	r22, 0xE2	; 226
    c816:	7f e2       	ldi	r23, 0x2F	; 47
    c818:	80 e0       	ldi	r24, 0x00	; 0
    c81a:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    c81e:	01 e0       	ldi	r16, 0x01	; 1
    c820:	21 e0       	ldi	r18, 0x01	; 1
    c822:	40 e3       	ldi	r20, 0x30	; 48
    c824:	60 e5       	ldi	r22, 0x50	; 80
    c826:	80 e0       	ldi	r24, 0x00	; 0
    c828:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c82c:	40 e0       	ldi	r20, 0x00	; 0
    c82e:	6f ed       	ldi	r22, 0xDF	; 223
    c830:	7f e2       	ldi	r23, 0x2F	; 47
    c832:	81 e0       	ldi	r24, 0x01	; 1
    c834:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    c838:	21 e0       	ldi	r18, 0x01	; 1
    c83a:	40 e3       	ldi	r20, 0x30	; 48
    c83c:	60 e6       	ldi	r22, 0x60	; 96
    c83e:	81 e0       	ldi	r24, 0x01	; 1
    c840:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    c844:	40 e0       	ldi	r20, 0x00	; 0
    c846:	6c ed       	ldi	r22, 0xDC	; 220
    c848:	7f e2       	ldi	r23, 0x2F	; 47
    c84a:	82 e0       	ldi	r24, 0x02	; 2
    c84c:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    c850:	21 e0       	ldi	r18, 0x01	; 1
    c852:	40 e3       	ldi	r20, 0x30	; 48
    c854:	60 e7       	ldi	r22, 0x70	; 112
    c856:	82 e0       	ldi	r24, 0x02	; 2
    c858:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    c85c:	40 e0       	ldi	r20, 0x00	; 0
    c85e:	69 ed       	ldi	r22, 0xD9	; 217
    c860:	7f e2       	ldi	r23, 0x2F	; 47
    c862:	83 e0       	ldi	r24, 0x03	; 3
    c864:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    c868:	21 e0       	ldi	r18, 0x01	; 1
    c86a:	40 e3       	ldi	r20, 0x30	; 48
    c86c:	60 e8       	ldi	r22, 0x80	; 128
    c86e:	83 e0       	ldi	r24, 0x03	; 3
    c870:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c874:	40 e0       	ldi	r20, 0x00	; 0
    c876:	66 ed       	ldi	r22, 0xD6	; 214
    c878:	7f e2       	ldi	r23, 0x2F	; 47
    c87a:	84 e0       	ldi	r24, 0x04	; 4
    c87c:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c880:	21 e0       	ldi	r18, 0x01	; 1
    c882:	40 e3       	ldi	r20, 0x30	; 48
    c884:	60 e9       	ldi	r22, 0x90	; 144
    c886:	84 e0       	ldi	r24, 0x04	; 4
    c888:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	LBRotateSprites();
    c88c:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	stream_text_middle((const char*) text, 12);
    c890:	6c e0       	ldi	r22, 0x0C	; 12
    c892:	ce 01       	movw	r24, r28
    c894:	0e 94 cc 63 	call	0xc798	; 0xc798 <stream_text_middle>
	LBWaitSeconds(2);
    c898:	82 e0       	ldi	r24, 0x02	; 2
}
    c89a:	df 91       	pop	r29
    c89c:	cf 91       	pop	r28
    c89e:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12);
	LBWaitSeconds(2);
    c8a0:	0c 94 ef 4d 	jmp	0x9bde	; 0x9bde <LBWaitSeconds>

0000c8a4 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    c8a4:	ef 92       	push	r14
    c8a6:	ff 92       	push	r15
    c8a8:	0f 93       	push	r16
    c8aa:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    c8ac:	c8 2f       	mov	r28, r24
    c8ae:	e6 2e       	mov	r14, r22
    c8b0:	f1 2c       	mov	r15, r1
    c8b2:	e8 0e       	add	r14, r24
    c8b4:	f1 1c       	adc	r15, r1
    c8b6:	8c 2f       	mov	r24, r28
    c8b8:	90 e0       	ldi	r25, 0x00	; 0
    c8ba:	8e 15       	cp	r24, r14
    c8bc:	9f 05       	cpc	r25, r15
    c8be:	7c f4       	brge	.+30     	; 0xc8de <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    c8c0:	40 e0       	ldi	r20, 0x00	; 0
    c8c2:	6a ef       	ldi	r22, 0xFA	; 250
    c8c4:	7f e2       	ldi	r23, 0x2F	; 47
    c8c6:	8c 2f       	mov	r24, r28
    c8c8:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    c8cc:	01 e0       	ldi	r16, 0x01	; 1
    c8ce:	21 e0       	ldi	r18, 0x01	; 1
    c8d0:	40 e0       	ldi	r20, 0x00	; 0
    c8d2:	60 ee       	ldi	r22, 0xE0	; 224
    c8d4:	8c 2f       	mov	r24, r28
    c8d6:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    c8da:	cf 5f       	subi	r28, 0xFF	; 255
    c8dc:	ec cf       	rjmp	.-40     	; 0xc8b6 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    c8de:	cf 91       	pop	r28
    c8e0:	0f 91       	pop	r16
    c8e2:	ff 90       	pop	r15
    c8e4:	ef 90       	pop	r14
    c8e6:	08 95       	ret

0000c8e8 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    c8e8:	61 e0       	ldi	r22, 0x01	; 1
    c8ea:	81 e0       	ldi	r24, 0x01	; 1
    c8ec:	0e 94 38 4c 	call	0x9870	; 0x9870 <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c8f0:	64 e1       	ldi	r22, 0x14	; 20
    c8f2:	80 e0       	ldi	r24, 0x00	; 0
    c8f4:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
	LBRotateSprites();
    c8f8:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	ClearVram();
    c8fc:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c900:	60 e0       	ldi	r22, 0x00	; 0
    c902:	81 e0       	ldi	r24, 0x01	; 1
    c904:	0c 94 2c 4c 	jmp	0x9858	; 0x9858 <FadeIn>

0000c908 <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    c908:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <fade_through>
	StartSong(spacesong);
    c90c:	80 ea       	ldi	r24, 0xA0	; 160
    c90e:	93 e0       	ldi	r25, 0x03	; 3
    c910:	0e 94 a4 40 	call	0x8148	; 0x8148 <StartSong>
	Screen.scrollX = 0;
    c914:	e2 eb       	ldi	r30, 0xB2	; 178
    c916:	fc e0       	ldi	r31, 0x0C	; 12
    c918:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    c91a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    c91c:	80 e2       	ldi	r24, 0x20	; 32
    c91e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    c920:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    c922:	8e eb       	ldi	r24, 0xBE	; 190
    c924:	91 e0       	ldi	r25, 0x01	; 1
    c926:	0e 94 05 64 	call	0xc80a	; 0xc80a <print_scroll>
	StopSong();
    c92a:	0c 94 cd 40 	jmp	0x819a	; 0x819a <StopSong>

0000c92e <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    c92e:	0f 93       	push	r16
    c930:	cf 93       	push	r28
    c932:	df 93       	push	r29
    c934:	c8 2f       	mov	r28, r24
    c936:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    c938:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    c93c:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 29;
    c940:	8d e1       	ldi	r24, 0x1D	; 29
    c942:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayTileTable = tiles_data;
    c946:	8d ef       	ldi	r24, 0xFD	; 253
    c948:	9f e2       	ldi	r25, 0x2F	; 47
    c94a:	90 93 b4 0c 	sts	0x0CB4, r25
    c94e:	80 93 b3 0c 	sts	0x0CB3, r24
	Screen.overlayHeight = 3;
    c952:	83 e0       	ldi	r24, 0x03	; 3
    c954:	80 93 b2 0c 	sts	0x0CB2, r24
	clear_overlay(2);
    c958:	82 e0       	ldi	r24, 0x02	; 2
    c95a:	0e 94 84 57 	call	0xaf08	; 0xaf08 <clear_overlay>
	game.current_level_index = index;
    c95e:	c0 93 cd 0d 	sts	0x0DCD, r28
	game.level_ended = 0;
    c962:	10 92 d5 0d 	sts	0x0DD5, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    c966:	10 92 51 0e 	sts	0x0E51, r1
    c96a:	10 92 50 0e 	sts	0x0E50, r1
	p->pressed = 0;
    c96e:	10 92 4d 0e 	sts	0x0E4D, r1
    c972:	10 92 4c 0e 	sts	0x0E4C, r1
	p->released = 0;
    c976:	10 92 4f 0e 	sts	0x0E4F, r1
    c97a:	10 92 4e 0e 	sts	0x0E4E, r1
	p->held_cycles = 0;
    c97e:	10 92 52 0e 	sts	0x0E52, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    c982:	10 92 cc 0e 	sts	0x0ECC, r1
    c986:	10 92 cb 0e 	sts	0x0ECB, r1
	p->pressed = 0;
    c98a:	10 92 c8 0e 	sts	0x0EC8, r1
    c98e:	10 92 c7 0e 	sts	0x0EC7, r1
	p->released = 0;
    c992:	10 92 ca 0e 	sts	0x0ECA, r1
    c996:	10 92 c9 0e 	sts	0x0EC9, r1
	p->held_cycles = 0;
    c99a:	10 92 cd 0e 	sts	0x0ECD, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    c99e:	8c 2f       	mov	r24, r28
    c9a0:	90 e0       	ldi	r25, 0x00	; 0
    c9a2:	8a 30       	cpi	r24, 0x0A	; 10
    c9a4:	91 05       	cpc	r25, r1
    c9a6:	d8 f4       	brcc	.+54     	; 0xc9de <load_level+0xb0>
    c9a8:	fc 01       	movw	r30, r24
    c9aa:	ef 5b       	subi	r30, 0xBF	; 191
    c9ac:	ff 4f       	sbci	r31, 0xFF	; 255
    c9ae:	0c 94 15 71 	jmp	0xe22a	; 0xe22a <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    c9b2:	8c e7       	ldi	r24, 0x7C	; 124
    c9b4:	9f e6       	ldi	r25, 0x6F	; 111
    c9b6:	11 c0       	rjmp	.+34     	; 0xc9da <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    c9b8:	8b e7       	ldi	r24, 0x7B	; 123
    c9ba:	9e e6       	ldi	r25, 0x6E	; 110
    c9bc:	0e c0       	rjmp	.+28     	; 0xc9da <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    c9be:	8a e7       	ldi	r24, 0x7A	; 122
    c9c0:	9d e6       	ldi	r25, 0x6D	; 109
    c9c2:	0b c0       	rjmp	.+22     	; 0xc9da <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    c9c4:	89 e7       	ldi	r24, 0x79	; 121
    c9c6:	9c e6       	ldi	r25, 0x6C	; 108
    c9c8:	08 c0       	rjmp	.+16     	; 0xc9da <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    c9ca:	87 e7       	ldi	r24, 0x77	; 119
    c9cc:	9a e6       	ldi	r25, 0x6A	; 106
    c9ce:	05 c0       	rjmp	.+10     	; 0xc9da <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    c9d0:	88 e7       	ldi	r24, 0x78	; 120
    c9d2:	9b e6       	ldi	r25, 0x6B	; 107
    c9d4:	02 c0       	rjmp	.+4      	; 0xc9da <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    c9d6:	86 e7       	ldi	r24, 0x76	; 118
    c9d8:	99 e6       	ldi	r25, 0x69	; 105
    c9da:	0e 94 c4 59 	call	0xb388	; 0xb388 <map_level_info>
	}
	game.column_count = 0;
    c9de:	10 92 c9 0d 	sts	0x0DC9, r1
	game.camera_x = get_camera_x(index);
    c9e2:	10 92 b9 0d 	sts	0x0DB9, r1
    c9e6:	10 92 b8 0d 	sts	0x0DB8, r1
	game.camera_y = get_camera_y(index);
    c9ea:	10 92 c0 0d 	sts	0x0DC0, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    c9ee:	88 e1       	ldi	r24, 0x18	; 24
    c9f0:	90 e0       	ldi	r25, 0x00	; 0
    c9f2:	90 93 d9 0d 	sts	0x0DD9, r25
    c9f6:	80 93 d8 0d 	sts	0x0DD8, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    c9fa:	88 ea       	ldi	r24, 0xA8	; 168
    c9fc:	90 e0       	ldi	r25, 0x00	; 0
    c9fe:	90 93 db 0d 	sts	0x0DDB, r25
    ca02:	80 93 da 0d 	sts	0x0DDA, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    ca06:	28 ed       	ldi	r18, 0xD8	; 216
    ca08:	37 e0       	ldi	r19, 0x07	; 7
    ca0a:	30 93 54 0e 	sts	0x0E54, r19
    ca0e:	20 93 53 0e 	sts	0x0E53, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    ca12:	90 93 56 0e 	sts	0x0E56, r25
    ca16:	80 93 55 0e 	sts	0x0E55, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    ca1a:	8d e1       	ldi	r24, 0x1D	; 29
    ca1c:	80 93 c1 0d 	sts	0x0DC1, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    ca20:	80 93 c5 0d 	sts	0x0DC5, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    ca24:	8a e1       	ldi	r24, 0x1A	; 26
    ca26:	80 93 c2 0d 	sts	0x0DC2, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    ca2a:	80 93 c6 0d 	sts	0x0DC6, r24
	game.scroll_x = 0;
    ca2e:	10 92 c3 0d 	sts	0x0DC3, r1
	game.scroll_y = 0;
    ca32:	10 92 c4 0d 	sts	0x0DC4, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    ca36:	8a e0       	ldi	r24, 0x0A	; 10
    ca38:	80 93 d4 0d 	sts	0x0DD4, r24
	game.flags = 0;
    ca3c:	10 92 d7 0d 	sts	0x0DD7, r1
	render_camera_view();
    ca40:	0e 94 c4 57 	call	0xaf88	; 0xaf88 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    ca44:	49 e6       	ldi	r20, 0x69	; 105
    ca46:	53 e0       	ldi	r21, 0x03	; 3
    ca48:	6d e1       	ldi	r22, 0x1D	; 29
    ca4a:	80 e0       	ldi	r24, 0x00	; 0
    ca4c:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    ca50:	4c e5       	ldi	r20, 0x5C	; 92
    ca52:	53 e0       	ldi	r21, 0x03	; 3
    ca54:	6d e1       	ldi	r22, 0x1D	; 29
    ca56:	82 e1       	ldi	r24, 0x12	; 18
    ca58:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    ca5c:	42 e6       	ldi	r20, 0x62	; 98
    ca5e:	53 e0       	ldi	r21, 0x03	; 3
    ca60:	6e e1       	ldi	r22, 0x1E	; 30
    ca62:	80 e0       	ldi	r24, 0x00	; 0
    ca64:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    ca68:	41 e7       	ldi	r20, 0x71	; 113
    ca6a:	53 e0       	ldi	r21, 0x03	; 3
    ca6c:	6e e1       	ldi	r22, 0x1E	; 30
    ca6e:	81 e1       	ldi	r24, 0x11	; 17
    ca70:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    ca74:	4b e1       	ldi	r20, 0x1B	; 27
    ca76:	53 e0       	ldi	r21, 0x03	; 3
    ca78:	6f e1       	ldi	r22, 0x1F	; 31
    ca7a:	81 e1       	ldi	r24, 0x11	; 17
    ca7c:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    ca80:	21 e0       	ldi	r18, 0x01	; 1
    ca82:	40 91 e7 0d 	lds	r20, 0x0DE7
    ca86:	6d e1       	ldi	r22, 0x1D	; 29
    ca88:	89 e0       	ldi	r24, 0x09	; 9
    ca8a:	0e 94 45 4d 	call	0x9a8a	; 0x9a8a <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    ca8e:	40 91 be 0d 	lds	r20, 0x0DBE
    ca92:	50 91 bf 0d 	lds	r21, 0x0DBF
    ca96:	21 e0       	ldi	r18, 0x01	; 1
    ca98:	6d e1       	ldi	r22, 0x1D	; 29
    ca9a:	8b e1       	ldi	r24, 0x1B	; 27
    ca9c:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    caa0:	21 e0       	ldi	r18, 0x01	; 1
    caa2:	40 91 cb 0d 	lds	r20, 0x0DCB
    caa6:	6e e1       	ldi	r22, 0x1E	; 30
    caa8:	89 e0       	ldi	r24, 0x09	; 9
    caaa:	0e 94 45 4d 	call	0x9a8a	; 0x9a8a <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    caae:	40 91 bc 0d 	lds	r20, 0x0DBC
    cab2:	50 91 bd 0d 	lds	r21, 0x0DBD
    cab6:	21 e0       	ldi	r18, 0x01	; 1
    cab8:	6e e1       	ldi	r22, 0x1E	; 30
    caba:	8b e1       	ldi	r24, 0x1B	; 27
    cabc:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cac0:	40 91 ba 0d 	lds	r20, 0x0DBA
    cac4:	50 91 bb 0d 	lds	r21, 0x0DBB
    cac8:	21 e0       	ldi	r18, 0x01	; 1
    caca:	6f e1       	ldi	r22, 0x1F	; 31
    cacc:	8b e1       	ldi	r24, 0x1B	; 27
    cace:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cad2:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    cad6:	81 11       	cpse	r24, r1
    cad8:	39 c0       	rjmp	.+114    	; 0xcb4c <load_level+0x21e>
    cada:	dd 23       	and	r29, r29
    cadc:	b9 f1       	breq	.+110    	; 0xcb4c <load_level+0x21e>
	{
		map_ship();
    cade:	0e 94 af 59 	call	0xb35e	; 0xb35e <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cae2:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cae4:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cae6:	81 e0       	ldi	r24, 0x01	; 1
    cae8:	90 e0       	ldi	r25, 0x00	; 0
    caea:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    caee:	8c 2f       	mov	r24, r28
    caf0:	90 e0       	ldi	r25, 0x00	; 0
    caf2:	88 3a       	cpi	r24, 0xA8	; 168
    caf4:	91 05       	cpc	r25, r1
    caf6:	74 f0       	brlt	.+28     	; 0xcb14 <load_level+0x1e6>
			{
				LBMapSprite(0, map_hero_idle, 0);
    caf8:	40 e0       	ldi	r20, 0x00	; 0
    cafa:	6e ec       	ldi	r22, 0xCE	; 206
    cafc:	7f e2       	ldi	r23, 0x2F	; 47
    cafe:	80 e0       	ldi	r24, 0x00	; 0
    cb00:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cb04:	03 e0       	ldi	r16, 0x03	; 3
    cb06:	22 e0       	ldi	r18, 0x02	; 2
    cb08:	48 ea       	ldi	r20, 0xA8	; 168
    cb0a:	68 e1       	ldi	r22, 0x18	; 24
    cb0c:	80 e0       	ldi	r24, 0x00	; 0
    cb0e:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
				ship_increment = -3;
    cb12:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cb14:	8c e2       	ldi	r24, 0x2C	; 44
    cb16:	9e e0       	ldi	r25, 0x0E	; 14
    cb18:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    cb1c:	40 e0       	ldi	r20, 0x00	; 0
    cb1e:	bc 01       	movw	r22, r24
    cb20:	86 e0       	ldi	r24, 0x06	; 6
    cb22:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cb26:	02 e0       	ldi	r16, 0x02	; 2
    cb28:	24 e0       	ldi	r18, 0x04	; 4
    cb2a:	4c 2f       	mov	r20, r28
    cb2c:	68 e0       	ldi	r22, 0x08	; 8
    cb2e:	86 e0       	ldi	r24, 0x06	; 6
    cb30:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
			ship_y += ship_increment;
    cb34:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cb36:	39 f4       	brne	.+14     	; 0xcb46 <load_level+0x218>
			{
				clear_sprites(6, 8);
    cb38:	68 e0       	ldi	r22, 0x08	; 8
    cb3a:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    cb3c:	df 91       	pop	r29
    cb3e:	cf 91       	pop	r28
    cb40:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    cb42:	0c 94 52 64 	jmp	0xc8a4	; 0xc8a4 <clear_sprites>
				break;
			}
			LBRotateSprites();
    cb46:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
		}
    cb4a:	cd cf       	rjmp	.-102    	; 0xcae6 <load_level+0x1b8>
	}
}
    cb4c:	df 91       	pop	r29
    cb4e:	cf 91       	pop	r28
    cb50:	0f 91       	pop	r16
    cb52:	08 95       	ret

0000cb54 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    cb54:	0f 93       	push	r16
    cb56:	1f 93       	push	r17
    cb58:	cf 93       	push	r28
    cb5a:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    cb5c:	18 2f       	mov	r17, r24
    cb5e:	c6 2f       	mov	r28, r22
    cb60:	d0 e0       	ldi	r29, 0x00	; 0
    cb62:	c8 0f       	add	r28, r24
    cb64:	d1 1d       	adc	r29, r1
    cb66:	81 2f       	mov	r24, r17
    cb68:	90 e0       	ldi	r25, 0x00	; 0
    cb6a:	8c 17       	cp	r24, r28
    cb6c:	9d 07       	cpc	r25, r29
    cb6e:	4c f4       	brge	.+18     	; 0xcb82 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cb70:	01 e0       	ldi	r16, 0x01	; 1
    cb72:	21 e0       	ldi	r18, 0x01	; 1
    cb74:	40 e0       	ldi	r20, 0x00	; 0
    cb76:	60 ee       	ldi	r22, 0xE0	; 224
    cb78:	81 2f       	mov	r24, r17
    cb7a:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cb7e:	1f 5f       	subi	r17, 0xFF	; 255
    cb80:	f2 cf       	rjmp	.-28     	; 0xcb66 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cb82:	df 91       	pop	r29
    cb84:	cf 91       	pop	r28
    cb86:	1f 91       	pop	r17
    cb88:	0f 91       	pop	r16
    cb8a:	08 95       	ret

0000cb8c <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    cb8c:	fc 01       	movw	r30, r24
    cb8e:	20 81       	ld	r18, Z
    cb90:	31 81       	ldd	r19, Z+1	; 0x01
    cb92:	29 70       	andi	r18, 0x09	; 9
    cb94:	33 27       	eor	r19, r19
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
    cb96:	81 e0       	ldi	r24, 0x01	; 1
    cb98:	23 2b       	or	r18, r19
    cb9a:	09 f4       	brne	.+2      	; 0xcb9e <select_pressed+0x12>
    cb9c:	80 e0       	ldi	r24, 0x00	; 0
}
    cb9e:	08 95       	ret

0000cba0 <stream_text_anywhere>:
{
	return (p->pressed & BTN_SELECT);
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    cba0:	ff 92       	push	r15
    cba2:	0f 93       	push	r16
    cba4:	1f 93       	push	r17
    cba6:	cf 93       	push	r28
    cba8:	df 93       	push	r29
    cbaa:	f6 2e       	mov	r15, r22
    cbac:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    cbae:	fc 01       	movw	r30, r24
    cbb0:	24 91       	lpm	r18, Z
    cbb2:	23 32       	cpi	r18, 0x23	; 35
    cbb4:	b1 f0       	breq	.+44     	; 0xcbe2 <stream_text_anywhere+0x42>
    cbb6:	ec 01       	movw	r28, r24
    cbb8:	0f 2d       	mov	r16, r15
    cbba:	08 1b       	sub	r16, r24
    cbbc:	8c 2f       	mov	r24, r28
    cbbe:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cbc0:	21 96       	adiw	r28, 0x01	; 1
    cbc2:	fe 01       	movw	r30, r28
    cbc4:	31 97       	sbiw	r30, 0x01	; 1
    cbc6:	44 91       	lpm	r20, Z
    cbc8:	44 23       	and	r20, r20
    cbca:	41 f0       	breq	.+16     	; 0xcbdc <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    cbcc:	61 2f       	mov	r22, r17
    cbce:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    cbd2:	80 e7       	ldi	r24, 0x70	; 112
    cbd4:	97 e1       	ldi	r25, 0x17	; 23
    cbd6:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <WaitUs>
    cbda:	f0 cf       	rjmp	.-32     	; 0xcbbc <stream_text_anywhere+0x1c>
		}
		y++;
    cbdc:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cbde:	ce 01       	movw	r24, r28
    cbe0:	e6 cf       	rjmp	.-52     	; 0xcbae <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cbe2:	df 91       	pop	r29
    cbe4:	cf 91       	pop	r28
    cbe6:	1f 91       	pop	r17
    cbe8:	0f 91       	pop	r16
    cbea:	ff 90       	pop	r15
    cbec:	08 95       	ret

0000cbee <map_particles>:

void map_particles()
{
    cbee:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    cbf0:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    cbf2:	40 e0       	ldi	r20, 0x00	; 0
    cbf4:	6e ee       	ldi	r22, 0xEE	; 238
    cbf6:	7f e2       	ldi	r23, 0x2F	; 47
    cbf8:	8c 2f       	mov	r24, r28
    cbfa:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    cbfe:	cf 5f       	subi	r28, 0xFF	; 255
    cc00:	c4 31       	cpi	r28, 0x14	; 20
    cc02:	b9 f7       	brne	.-18     	; 0xcbf2 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    cc04:	cf 91       	pop	r28
    cc06:	08 95       	ret

0000cc08 <place_particles>:

void place_particles()
{
    cc08:	0f 93       	push	r16
    cc0a:	1f 93       	push	r17
    cc0c:	cf 93       	push	r28
    cc0e:	df 93       	push	r29
    cc10:	1f 92       	push	r1
    cc12:	cd b7       	in	r28, 0x3d	; 61
    cc14:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    cc16:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    cc18:	68 ec       	ldi	r22, 0xC8	; 200
    cc1a:	80 e0       	ldi	r24, 0x00	; 0
    cc1c:	0e 94 d9 4d 	call	0x9bb2	; 0x9bb2 <LBRandom>
    cc20:	48 2f       	mov	r20, r24
    cc22:	60 ee       	ldi	r22, 0xE0	; 224
    cc24:	80 e0       	ldi	r24, 0x00	; 0
    cc26:	49 83       	std	Y+1, r20	; 0x01
    cc28:	0e 94 d9 4d 	call	0x9bb2	; 0x9bb2 <LBRandom>
    cc2c:	68 2f       	mov	r22, r24
    cc2e:	01 e0       	ldi	r16, 0x01	; 1
    cc30:	21 e0       	ldi	r18, 0x01	; 1
    cc32:	49 81       	ldd	r20, Y+1	; 0x01
    cc34:	81 2f       	mov	r24, r17
    cc36:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    cc3a:	1f 5f       	subi	r17, 0xFF	; 255
    cc3c:	14 31       	cpi	r17, 0x14	; 20
    cc3e:	61 f7       	brne	.-40     	; 0xcc18 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    cc40:	0f 90       	pop	r0
    cc42:	df 91       	pop	r29
    cc44:	cf 91       	pop	r28
    cc46:	1f 91       	pop	r17
    cc48:	0f 91       	pop	r16
    cc4a:	08 95       	ret

0000cc4c <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    cc4c:	ef 92       	push	r14
    cc4e:	ff 92       	push	r15
    cc50:	0f 93       	push	r16
    cc52:	1f 93       	push	r17
    cc54:	cf 93       	push	r28
    cc56:	df 93       	push	r29
    cc58:	d8 2f       	mov	r29, r24
    cc5a:	16 2f       	mov	r17, r22
    cc5c:	88 e0       	ldi	r24, 0x08	; 8
    cc5e:	e8 2e       	mov	r14, r24
    cc60:	80 e1       	ldi	r24, 0x10	; 16
    cc62:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    cc64:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    cc66:	f7 01       	movw	r30, r14
    cc68:	40 81       	ld	r20, Z
    cc6a:	4d 0f       	add	r20, r29
    cc6c:	01 e0       	ldi	r16, 0x01	; 1
    cc6e:	21 e0       	ldi	r18, 0x01	; 1
    cc70:	31 97       	sbiw	r30, 0x01	; 1
    cc72:	60 81       	ld	r22, Z
    cc74:	8c 2f       	mov	r24, r28
    cc76:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    cc7a:	f7 01       	movw	r30, r14
    cc7c:	80 81       	ld	r24, Z
    cc7e:	89 3c       	cpi	r24, 0xC9	; 201
    cc80:	50 f0       	brcs	.+20     	; 0xcc96 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    cc82:	60 ee       	ldi	r22, 0xE0	; 224
    cc84:	80 e0       	ldi	r24, 0x00	; 0
    cc86:	0e 94 d9 4d 	call	0x9bb2	; 0x9bb2 <LBRandom>
    cc8a:	21 e0       	ldi	r18, 0x01	; 1
    cc8c:	41 2f       	mov	r20, r17
    cc8e:	68 2f       	mov	r22, r24
    cc90:	8c 2f       	mov	r24, r28
    cc92:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    cc96:	cf 5f       	subi	r28, 0xFF	; 255
    cc98:	f4 e0       	ldi	r31, 0x04	; 4
    cc9a:	ef 0e       	add	r14, r31
    cc9c:	f1 1c       	adc	r15, r1
    cc9e:	c4 31       	cpi	r28, 0x14	; 20
    cca0:	11 f7       	brne	.-60     	; 0xcc66 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    cca2:	df 91       	pop	r29
    cca4:	cf 91       	pop	r28
    cca6:	1f 91       	pop	r17
    cca8:	0f 91       	pop	r16
    ccaa:	ff 90       	pop	r15
    ccac:	ef 90       	pop	r14
    ccae:	08 95       	ret

0000ccb0 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    ccb0:	82 50       	subi	r24, 0x02	; 2
    ccb2:	87 30       	cpi	r24, 0x07	; 7
    ccb4:	48 f4       	brcc	.+18     	; 0xccc8 <get_emarald_map+0x18>
    ccb6:	e8 2f       	mov	r30, r24
    ccb8:	f0 e0       	ldi	r31, 0x00	; 0
    ccba:	ee 0f       	add	r30, r30
    ccbc:	ff 1f       	adc	r31, r31
    ccbe:	ee 5f       	subi	r30, 0xFE	; 254
    ccc0:	fa 4f       	sbci	r31, 0xFA	; 250
    ccc2:	80 81       	ld	r24, Z
    ccc4:	91 81       	ldd	r25, Z+1	; 0x01
    ccc6:	08 95       	ret
    ccc8:	82 ee       	ldi	r24, 0xE2	; 226
    ccca:	9f e2       	ldi	r25, 0x2F	; 47
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    cccc:	08 95       	ret

0000ccce <music_transition>:

void music_transition()
{
	if (is_space())
    ccce:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    ccd2:	88 23       	and	r24, r24
    ccd4:	19 f0       	breq	.+6      	; 0xccdc <music_transition+0xe>
	{
		StartSong(spacesong);
    ccd6:	80 ea       	ldi	r24, 0xA0	; 160
    ccd8:	93 e0       	ldi	r25, 0x03	; 3
    ccda:	06 c0       	rjmp	.+12     	; 0xcce8 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    ccdc:	80 91 cd 0d 	lds	r24, 0x0DCD
    cce0:	88 23       	and	r24, r24
    cce2:	21 f0       	breq	.+8      	; 0xccec <music_transition+0x1e>
	{
		StartSong(planetsong);
    cce4:	80 e4       	ldi	r24, 0x40	; 64
    cce6:	9a e0       	ldi	r25, 0x0A	; 10
    cce8:	0c 94 a4 40 	jmp	0x8148	; 0x8148 <StartSong>
    ccec:	08 95       	ret

0000ccee <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    ccee:	cf 92       	push	r12
    ccf0:	df 92       	push	r13
    ccf2:	ef 92       	push	r14
    ccf4:	ff 92       	push	r15
    ccf6:	0f 93       	push	r16
    ccf8:	1f 93       	push	r17
    ccfa:	cf 93       	push	r28
    ccfc:	df 93       	push	r29
    ccfe:	1f 92       	push	r1
    cd00:	cd b7       	in	r28, 0x3d	; 61
    cd02:	de b7       	in	r29, 0x3e	; 62
    cd04:	c8 2e       	mov	r12, r24
    cd06:	e6 2e       	mov	r14, r22
    cd08:	12 2f       	mov	r17, r18
    cd0a:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    cd0c:	49 83       	std	Y+1, r20	; 0x01
    cd0e:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <fade_through>
	Screen.scrollX = 0;
    cd12:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    cd16:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    cd1a:	80 e2       	ldi	r24, 0x20	; 32
    cd1c:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    cd20:	10 92 b2 0c 	sts	0x0CB2, r1
	game.scroll_x = 0;
    cd24:	10 92 c3 0d 	sts	0x0DC3, r1
	game.scroll_y = 0;
    cd28:	10 92 c4 0d 	sts	0x0DC4, r1
	map_particles();
    cd2c:	0e 94 f7 65 	call	0xcbee	; 0xcbee <map_particles>
	map_ship();
    cd30:	0e 94 af 59 	call	0xb35e	; 0xb35e <map_ship>
	place_particles();
    cd34:	0e 94 04 66 	call	0xcc08	; 0xcc08 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    cd38:	44 ee       	ldi	r20, 0xE4	; 228
    cd3a:	57 e5       	ldi	r21, 0x57	; 87
    cd3c:	69 81       	ldd	r22, Y+1	; 0x01
    cd3e:	80 e0       	ldi	r24, 0x00	; 0
    cd40:	0e 94 ba 4b 	call	0x9774	; 0x9774 <DrawMap>
	game.current_level_index = index;
    cd44:	c0 92 cd 0d 	sts	0x0DCD, r12
	music_transition();
    cd48:	0e 94 67 66 	call	0xccce	; 0xccce <music_transition>
	if (!is_space())
    cd4c:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    cd50:	81 11       	cpse	r24, r1
    cd52:	0f c0       	rjmp	.+30     	; 0xcd72 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    cd54:	8c 2d       	mov	r24, r12
    cd56:	0e 94 58 66 	call	0xccb0	; 0xccb0 <get_emarald_map>
    cd5a:	40 e0       	ldi	r20, 0x00	; 0
    cd5c:	bc 01       	movw	r22, r24
    cd5e:	88 e0       	ldi	r24, 0x08	; 8
    cd60:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    cd64:	01 e0       	ldi	r16, 0x01	; 1
    cd66:	21 e0       	ldi	r18, 0x01	; 1
    cd68:	40 e3       	ldi	r20, 0x30	; 48
    cd6a:	60 e7       	ldi	r22, 0x70	; 112
    cd6c:	88 e0       	ldi	r24, 0x08	; 8
    cd6e:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cd72:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    cd74:	81 e0       	ldi	r24, 0x01	; 1
    cd76:	90 e0       	ldi	r25, 0x00	; 0
    cd78:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    cd7c:	8c e2       	ldi	r24, 0x2C	; 44
    cd7e:	9e e0       	ldi	r25, 0x0E	; 14
    cd80:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    cd84:	40 e0       	ldi	r20, 0x00	; 0
    cd86:	bc 01       	movw	r22, r24
    cd88:	80 e0       	ldi	r24, 0x00	; 0
    cd8a:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    cd8e:	02 e0       	ldi	r16, 0x02	; 2
    cd90:	24 e0       	ldi	r18, 0x04	; 4
    cd92:	48 e6       	ldi	r20, 0x68	; 104
    cd94:	68 e6       	ldi	r22, 0x68	; 104
    cd96:	80 e0       	ldi	r24, 0x00	; 0
    cd98:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
		frame_counter++;
    cd9c:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    cd9e:	8d 2d       	mov	r24, r13
    cda0:	8f 70       	andi	r24, 0x0F	; 15
    cda2:	29 f4       	brne	.+10     	; 0xcdae <planet_transition+0xc0>
    cda4:	90 91 b6 0c 	lds	r25, 0x0CB6
    cda8:	9e 0d       	add	r25, r14
    cdaa:	90 93 b6 0c 	sts	0x0CB6, r25
		animate_particles(dy, oy);
    cdae:	6f 2d       	mov	r22, r15
    cdb0:	81 2f       	mov	r24, r17
    cdb2:	0e 94 26 66 	call	0xcc4c	; 0xcc4c <animate_particles>
		LBRotateSprites();
    cdb6:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    cdba:	8f ef       	ldi	r24, 0xFF	; 255
    cdbc:	d8 12       	cpse	r13, r24
    cdbe:	da cf       	rjmp	.-76     	; 0xcd74 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    cdc0:	82 e0       	ldi	r24, 0x02	; 2
    cdc2:	80 93 cc 0d 	sts	0x0DCC, r24
	ClearVram();
    cdc6:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cdca:	64 e1       	ldi	r22, 0x14	; 20
    cdcc:	80 e0       	ldi	r24, 0x00	; 0
    cdce:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
	LBRotateSprites();
    cdd2:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	fade_through();
    cdd6:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <fade_through>
	game.level_score = 0;
    cdda:	10 92 bd 0d 	sts	0x0DBD, r1
    cdde:	10 92 bc 0d 	sts	0x0DBC, r1
	load_level(index, true);
    cde2:	61 e0       	ldi	r22, 0x01	; 1
    cde4:	8c 2d       	mov	r24, r12
    cde6:	0e 94 97 64 	call	0xc92e	; 0xc92e <load_level>
	init_player_state();
    cdea:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <init_player_state>
	init_boss_state();
    cdee:	0e 94 e9 52 	call	0xa5d2	; 0xa5d2 <init_boss_state>
	init_enemy_state();
}
    cdf2:	0f 90       	pop	r0
    cdf4:	df 91       	pop	r29
    cdf6:	cf 91       	pop	r28
    cdf8:	1f 91       	pop	r17
    cdfa:	0f 91       	pop	r16
    cdfc:	ff 90       	pop	r15
    cdfe:	ef 90       	pop	r14
    ce00:	df 90       	pop	r13
    ce02:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    ce04:	0c 94 dc 4e 	jmp	0x9db8	; 0x9db8 <init_enemy_state>

0000ce08 <intro>:
}


void intro()
{
    ce08:	0f 93       	push	r16
	fade_through();
    ce0a:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <fade_through>
	game.lives = LIVES;
    ce0e:	e8 eb       	ldi	r30, 0xB8	; 184
    ce10:	fd e0       	ldi	r31, 0x0D	; 13
    ce12:	8a e0       	ldi	r24, 0x0A	; 10
    ce14:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    ce16:	13 82       	std	Z+3, r1	; 0x03
    ce18:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    ce1a:	15 82       	std	Z+5, r1	; 0x05
    ce1c:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    ce1e:	17 82       	std	Z+7, r1	; 0x07
    ce20:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    ce22:	80 e4       	ldi	r24, 0x40	; 64
    ce24:	9a e0       	ldi	r25, 0x0A	; 10
    ce26:	0e 94 a4 40 	call	0x8148	; 0x8148 <StartSong>
	print_scroll(strIntro);
    ce2a:	84 e7       	ldi	r24, 0x74	; 116
    ce2c:	92 e0       	ldi	r25, 0x02	; 2
    ce2e:	0e 94 05 64 	call	0xc80a	; 0xc80a <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    ce32:	07 ec       	ldi	r16, 0xC7	; 199
    ce34:	2d ef       	ldi	r18, 0xFD	; 253
    ce36:	4c e1       	ldi	r20, 0x1C	; 28
    ce38:	61 e0       	ldi	r22, 0x01	; 1
    ce3a:	80 e0       	ldi	r24, 0x00	; 0
    ce3c:	0e 94 77 66 	call	0xccee	; 0xccee <planet_transition>
}
    ce40:	0f 91       	pop	r16
    ce42:	08 95       	ret

0000ce44 <demo_load>:

void demo_load(u8 idx)
{
    ce44:	cf 93       	push	r28
    ce46:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    ce48:	e8 eb       	ldi	r30, 0xB8	; 184
    ce4a:	fd e0       	ldi	r31, 0x0D	; 13
    ce4c:	8a e0       	ldi	r24, 0x0A	; 10
    ce4e:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    ce50:	13 82       	std	Z+3, r1	; 0x03
    ce52:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    ce54:	15 82       	std	Z+5, r1	; 0x05
    ce56:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    ce58:	17 82       	std	Z+7, r1	; 0x07
    ce5a:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    ce5c:	82 e0       	ldi	r24, 0x02	; 2
    ce5e:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    ce60:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    ce64:	64 e1       	ldi	r22, 0x14	; 20
    ce66:	80 e0       	ldi	r24, 0x00	; 0
    ce68:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
	LBRotateSprites();
    ce6c:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	fade_through();
    ce70:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <fade_through>
	load_level(idx, true);
    ce74:	61 e0       	ldi	r22, 0x01	; 1
    ce76:	8c 2f       	mov	r24, r28
    ce78:	0e 94 97 64 	call	0xc92e	; 0xc92e <load_level>
	init_player_state();
    ce7c:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <init_player_state>
	init_boss_state();
    ce80:	0e 94 e9 52 	call	0xa5d2	; 0xa5d2 <init_boss_state>
	init_enemy_state();
}
    ce84:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    ce86:	0c 94 dc 4e 	jmp	0x9db8	; 0x9db8 <init_enemy_state>

0000ce8a <load_splash>:
}

void load_splash()
{
	fade_through();
    ce8a:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <fade_through>
	Screen.scrollX = 0;
    ce8e:	e2 eb       	ldi	r30, 0xB2	; 178
    ce90:	fc e0       	ldi	r31, 0x0C	; 12
    ce92:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    ce94:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    ce96:	80 e2       	ldi	r24, 0x20	; 32
    ce98:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    ce9a:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    ce9c:	e8 eb       	ldi	r30, 0xB8	; 184
    ce9e:	fd e0       	ldi	r31, 0x0D	; 13
    cea0:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    cea2:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cea4:	64 e1       	ldi	r22, 0x14	; 20
    cea6:	80 e0       	ldi	r24, 0x00	; 0
    cea8:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
	LBRotateSprites();
    ceac:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    ceb0:	45 e8       	ldi	r20, 0x85	; 133
    ceb2:	53 e0       	ldi	r21, 0x03	; 3
    ceb4:	6f e0       	ldi	r22, 0x0F	; 15
    ceb6:	88 e0       	ldi	r24, 0x08	; 8
    ceb8:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    cebc:	49 e7       	ldi	r20, 0x79	; 121
    cebe:	53 e0       	ldi	r21, 0x03	; 3
    cec0:	60 e1       	ldi	r22, 0x10	; 16
    cec2:	88 e0       	ldi	r24, 0x08	; 8
    cec4:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    cec8:	4b e8       	ldi	r20, 0x8B	; 139
    ceca:	53 e0       	ldi	r21, 0x03	; 3
    cecc:	65 e1       	ldi	r22, 0x15	; 21
    cece:	84 e0       	ldi	r24, 0x04	; 4
    ced0:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	DrawMap2(6, 5, map_splash);
    ced4:	49 e0       	ldi	r20, 0x09	; 9
    ced6:	59 e5       	ldi	r21, 0x59	; 89
    ced8:	65 e0       	ldi	r22, 0x05	; 5
    ceda:	86 e0       	ldi	r24, 0x06	; 6
    cedc:	0e 94 ba 4b 	call	0x9774	; 0x9774 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    cee0:	40 e0       	ldi	r20, 0x00	; 0
    cee2:	67 ef       	ldi	r22, 0xF7	; 247
    cee4:	7f e2       	ldi	r23, 0x2F	; 47
    cee6:	80 e0       	ldi	r24, 0x00	; 0
    cee8:	0c 94 fe 4d 	jmp	0x9bfc	; 0x9bfc <LBMapSprite>

0000ceec <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    ceec:	2f 92       	push	r2
    ceee:	3f 92       	push	r3
    cef0:	5f 92       	push	r5
    cef2:	6f 92       	push	r6
    cef4:	7f 92       	push	r7
    cef6:	8f 92       	push	r8
    cef8:	9f 92       	push	r9
    cefa:	af 92       	push	r10
    cefc:	bf 92       	push	r11
    cefe:	cf 92       	push	r12
    cf00:	df 92       	push	r13
    cf02:	ef 92       	push	r14
    cf04:	ff 92       	push	r15
    cf06:	0f 93       	push	r16
    cf08:	1f 93       	push	r17
    cf0a:	cf 93       	push	r28
    cf0c:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    cf0e:	81 e0       	ldi	r24, 0x01	; 1
    cf10:	80 93 cc 0d 	sts	0x0DCC, r24
	game.high_score_index = -1;
    cf14:	8f ef       	ldi	r24, 0xFF	; 255
    cf16:	80 93 ca 0d 	sts	0x0DCA, r24
	fade_through();
    cf1a:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <fade_through>
	Screen.scrollX = 0;
    cf1e:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    cf22:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    cf26:	80 e2       	ldi	r24, 0x20	; 32
    cf28:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    cf2c:	10 92 b2 0c 	sts	0x0CB2, r1
	load_eeprom(&scores);
    cf30:	88 e9       	ldi	r24, 0x98	; 152
    cf32:	9d e0       	ldi	r25, 0x0D	; 13
    cf34:	0e 94 72 57 	call	0xaee4	; 0xaee4 <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    cf38:	49 e7       	ldi	r20, 0x79	; 121
    cf3a:	53 e0       	ldi	r21, 0x03	; 3
    cf3c:	63 e0       	ldi	r22, 0x03	; 3
    cf3e:	89 e0       	ldi	r24, 0x09	; 9
    cf40:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    cf44:	40 e0       	ldi	r20, 0x00	; 0
    cf46:	62 ee       	ldi	r22, 0xE2	; 226
    cf48:	7f e2       	ldi	r23, 0x2F	; 47
    cf4a:	80 e0       	ldi	r24, 0x00	; 0
    cf4c:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    cf50:	40 e0       	ldi	r20, 0x00	; 0
    cf52:	6f ed       	ldi	r22, 0xDF	; 223
    cf54:	7f e2       	ldi	r23, 0x2F	; 47
    cf56:	81 e0       	ldi	r24, 0x01	; 1
    cf58:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    cf5c:	01 e0       	ldi	r16, 0x01	; 1
    cf5e:	21 e0       	ldi	r18, 0x01	; 1
    cf60:	48 e1       	ldi	r20, 0x18	; 24
    cf62:	68 e3       	ldi	r22, 0x38	; 56
    cf64:	80 e0       	ldi	r24, 0x00	; 0
    cf66:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    cf6a:	21 e0       	ldi	r18, 0x01	; 1
    cf6c:	48 e1       	ldi	r20, 0x18	; 24
    cf6e:	68 ea       	ldi	r22, 0xA8	; 168
    cf70:	81 e0       	ldi	r24, 0x01	; 1
    cf72:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
    cf76:	8a e9       	ldi	r24, 0x9A	; 154
    cf78:	a8 2e       	mov	r10, r24
    cf7a:	8d e0       	ldi	r24, 0x0D	; 13
    cf7c:	b8 2e       	mov	r11, r24
    cf7e:	9b e9       	ldi	r25, 0x9B	; 155
    cf80:	c9 2e       	mov	r12, r25
    cf82:	9d e0       	ldi	r25, 0x0D	; 13
    cf84:	d9 2e       	mov	r13, r25
    cf86:	2c e9       	ldi	r18, 0x9C	; 156
    cf88:	82 2e       	mov	r8, r18
    cf8a:	2d e0       	ldi	r18, 0x0D	; 13
    cf8c:	92 2e       	mov	r9, r18
    cf8e:	74 01       	movw	r14, r8
    cf90:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    cf92:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    cf94:	35 e0       	ldi	r19, 0x05	; 5
    cf96:	53 2e       	mov	r5, r19
    cf98:	43 eb       	ldi	r20, 0xB3	; 179
    cf9a:	64 2e       	mov	r6, r20
    cf9c:	4d e0       	ldi	r20, 0x0D	; 13
    cf9e:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    cfa0:	11 e4       	ldi	r17, 0x41	; 65
    cfa2:	0e 2d       	mov	r16, r14
    cfa4:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    cfa6:	80 2f       	mov	r24, r16
    cfa8:	65 2d       	mov	r22, r5
    cfaa:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    cfae:	41 e0       	ldi	r20, 0x01	; 1
    cfb0:	48 0f       	add	r20, r24
    cfb2:	20 e0       	ldi	r18, 0x00	; 0
    cfb4:	6c 2f       	mov	r22, r28
    cfb6:	89 e0       	ldi	r24, 0x09	; 9
    cfb8:	0e 94 45 4d 	call	0x9a8a	; 0x9a8a <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    cfbc:	40 e2       	ldi	r20, 0x20	; 32
    cfbe:	6c 2f       	mov	r22, r28
    cfc0:	8a e0       	ldi	r24, 0x0A	; 10
    cfc2:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    cfc6:	f5 01       	movw	r30, r10
    cfc8:	40 81       	ld	r20, Z
    cfca:	6c 2f       	mov	r22, r28
    cfcc:	8b e0       	ldi	r24, 0x0B	; 11
    cfce:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    cfd2:	f6 01       	movw	r30, r12
    cfd4:	40 81       	ld	r20, Z
    cfd6:	6c 2f       	mov	r22, r28
    cfd8:	8c e0       	ldi	r24, 0x0C	; 12
    cfda:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    cfde:	f7 01       	movw	r30, r14
    cfe0:	40 81       	ld	r20, Z
    cfe2:	6c 2f       	mov	r22, r28
    cfe4:	8d e0       	ldi	r24, 0x0D	; 13
    cfe6:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    cfea:	40 e2       	ldi	r20, 0x20	; 32
    cfec:	6c 2f       	mov	r22, r28
    cfee:	8e e0       	ldi	r24, 0x0E	; 14
    cff0:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    cff4:	f7 01       	movw	r30, r14
    cff6:	21 80       	ldd	r2, Z+1	; 0x01
    cff8:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    cffa:	21 e0       	ldi	r18, 0x01	; 1
    cffc:	a1 01       	movw	r20, r2
    cffe:	6c 2f       	mov	r22, r28
    d000:	83 e1       	ldi	r24, 0x13	; 19
    d002:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d006:	20 91 ba 0d 	lds	r18, 0x0DBA
    d00a:	30 91 bb 0d 	lds	r19, 0x0DBB
    d00e:	22 16       	cp	r2, r18
    d010:	33 06       	cpc	r3, r19
    d012:	08 f0       	brcs	.+2      	; 0xd016 <load_high_scores+0x12a>
    d014:	5a c0       	rjmp	.+180    	; 0xd0ca <load_high_scores+0x1de>
    d016:	80 91 ca 0d 	lds	r24, 0x0DCA
    d01a:	8f 3f       	cpi	r24, 0xFF	; 255
    d01c:	09 f0       	breq	.+2      	; 0xd020 <load_high_scores+0x134>
    d01e:	55 c0       	rjmp	.+170    	; 0xd0ca <load_high_scores+0x1de>
    d020:	80 91 d1 0d 	lds	r24, 0x0DD1
    d024:	82 30       	cpi	r24, 0x02	; 2
    d026:	09 f4       	brne	.+2      	; 0xd02a <load_high_scores+0x13e>
    d028:	50 c0       	rjmp	.+160    	; 0xd0ca <load_high_scores+0x1de>
    d02a:	a3 eb       	ldi	r26, 0xB3	; 179
    d02c:	bd e0       	ldi	r27, 0x0D	; 13
    d02e:	cd 01       	movw	r24, r26
    d030:	05 97       	sbiw	r24, 0x05	; 5
    d032:	4e e1       	ldi	r20, 0x1E	; 30
    d034:	48 0f       	add	r20, r24
    d036:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d038:	04 17       	cp	r16, r20
    d03a:	40 f4       	brcc	.+16     	; 0xd04c <load_high_scores+0x160>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d03c:	fc 01       	movw	r30, r24
    d03e:	45 2d       	mov	r20, r5
    d040:	01 90       	ld	r0, Z+
    d042:	0d 92       	st	X+, r0
    d044:	4a 95       	dec	r20
    d046:	e1 f7       	brne	.-8      	; 0xd040 <load_high_scores+0x154>
    d048:	dc 01       	movw	r26, r24
    d04a:	f1 cf       	rjmp	.-30     	; 0xd02e <load_high_scores+0x142>
			}
			scores.data[i] = 'A';
    d04c:	f5 01       	movw	r30, r10
    d04e:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d050:	f6 01       	movw	r30, r12
    d052:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d054:	f7 01       	movw	r30, r14
    d056:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d058:	32 83       	std	Z+2, r19	; 0x02
    d05a:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d05c:	f5 01       	movw	r30, r10
    d05e:	40 81       	ld	r20, Z
    d060:	6c 2f       	mov	r22, r28
    d062:	8b e0       	ldi	r24, 0x0B	; 11
    d064:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d068:	f6 01       	movw	r30, r12
    d06a:	40 81       	ld	r20, Z
    d06c:	6c 2f       	mov	r22, r28
    d06e:	8c e0       	ldi	r24, 0x0C	; 12
    d070:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d074:	f7 01       	movw	r30, r14
    d076:	40 81       	ld	r20, Z
    d078:	6c 2f       	mov	r22, r28
    d07a:	8d e0       	ldi	r24, 0x0D	; 13
    d07c:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d080:	40 91 ba 0d 	lds	r20, 0x0DBA
    d084:	50 91 bb 0d 	lds	r21, 0x0DBB
    d088:	21 e0       	ldi	r18, 0x01	; 1
    d08a:	6c 2f       	mov	r22, r28
    d08c:	83 e1       	ldi	r24, 0x13	; 19
    d08e:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
			game.high_score_index = i;
    d092:	00 93 ca 0d 	sts	0x0DCA, r16
			LBMapSprite(2, map_down_arrow, 0);
    d096:	40 e0       	ldi	r20, 0x00	; 0
    d098:	64 ef       	ldi	r22, 0xF4	; 244
    d09a:	7f e2       	ldi	r23, 0x2F	; 47
    d09c:	82 e0       	ldi	r24, 0x02	; 2
    d09e:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d0a2:	40 e0       	ldi	r20, 0x00	; 0
    d0a4:	61 ef       	ldi	r22, 0xF1	; 241
    d0a6:	7f e2       	ldi	r23, 0x2F	; 47
    d0a8:	83 e0       	ldi	r24, 0x03	; 3
    d0aa:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d0ae:	01 e0       	ldi	r16, 0x01	; 1
    d0b0:	21 e0       	ldi	r18, 0x01	; 1
    d0b2:	4d 2f       	mov	r20, r29
    d0b4:	68 e5       	ldi	r22, 0x58	; 88
    d0b6:	82 e0       	ldi	r24, 0x02	; 2
    d0b8:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d0bc:	21 e0       	ldi	r18, 0x01	; 1
    d0be:	40 e1       	ldi	r20, 0x10	; 16
    d0c0:	4d 0f       	add	r20, r29
    d0c2:	68 e5       	ldi	r22, 0x58	; 88
    d0c4:	83 e0       	ldi	r24, 0x03	; 3
    d0c6:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
		}
		
		ypos += 2;
    d0ca:	ce 5f       	subi	r28, 0xFE	; 254
    d0cc:	f5 e0       	ldi	r31, 0x05	; 5
    d0ce:	af 0e       	add	r10, r31
    d0d0:	b1 1c       	adc	r11, r1
    d0d2:	85 e0       	ldi	r24, 0x05	; 5
    d0d4:	c8 0e       	add	r12, r24
    d0d6:	d1 1c       	adc	r13, r1
    d0d8:	e5 e0       	ldi	r30, 0x05	; 5
    d0da:	ee 0e       	add	r14, r30
    d0dc:	f1 1c       	adc	r15, r1
    d0de:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d0e0:	c3 31       	cpi	r28, 0x13	; 19
    d0e2:	09 f0       	breq	.+2      	; 0xd0e6 <load_high_scores+0x1fa>
    d0e4:	5e cf       	rjmp	.-324    	; 0xcfa2 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d0e6:	40 e5       	ldi	r20, 0x50	; 80
    d0e8:	53 e0       	ldi	r21, 0x03	; 3
    d0ea:	66 e1       	ldi	r22, 0x16	; 22
    d0ec:	89 e0       	ldi	r24, 0x09	; 9
}
    d0ee:	df 91       	pop	r29
    d0f0:	cf 91       	pop	r28
    d0f2:	1f 91       	pop	r17
    d0f4:	0f 91       	pop	r16
    d0f6:	ff 90       	pop	r15
    d0f8:	ef 90       	pop	r14
    d0fa:	df 90       	pop	r13
    d0fc:	cf 90       	pop	r12
    d0fe:	bf 90       	pop	r11
    d100:	af 90       	pop	r10
    d102:	9f 90       	pop	r9
    d104:	8f 90       	pop	r8
    d106:	7f 90       	pop	r7
    d108:	6f 90       	pop	r6
    d10a:	5f 90       	pop	r5
    d10c:	3f 90       	pop	r3
    d10e:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d110:	0c 94 29 4d 	jmp	0x9a52	; 0x9a52 <LBPrint>

0000d114 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d114:	64 e1       	ldi	r22, 0x14	; 20
    d116:	80 e0       	ldi	r24, 0x00	; 0
    d118:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
	LBRotateSprites();
    d11c:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	init_player_state();
    d120:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <init_player_state>
	init_boss_state();
    d124:	0e 94 e9 52 	call	0xa5d2	; 0xa5d2 <init_boss_state>
	init_enemy_state();
    d128:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <init_enemy_state>
	StopSong();
    d12c:	0e 94 cd 40 	call	0x819a	; 0x819a <StopSong>
	load_high_scores();
    d130:	0c 94 76 67 	jmp	0xceec	; 0xceec <load_high_scores>

0000d134 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d134:	0f 93       	push	r16
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	if (game.player.controls.pressed) demo_counter = 0;
    d136:	80 91 4c 0e 	lds	r24, 0x0E4C
    d13a:	90 91 4d 0e 	lds	r25, 0x0E4D
    d13e:	00 97       	sbiw	r24, 0x00	; 0
    d140:	21 f0       	breq	.+8      	; 0xd14a <update_splash+0x16>
    d142:	10 92 f8 0c 	sts	0x0CF8, r1
    d146:	10 92 f7 0c 	sts	0x0CF7, r1
	
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d14a:	85 ff       	sbrs	r24, 5
    d14c:	08 c0       	rjmp	.+16     	; 0xd15e <update_splash+0x2a>
    d14e:	20 91 d1 0d 	lds	r18, 0x0DD1
    d152:	21 11       	cpse	r18, r1
    d154:	04 c0       	rjmp	.+8      	; 0xd15e <update_splash+0x2a>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d156:	81 e0       	ldi	r24, 0x01	; 1
    d158:	80 93 d1 0d 	sts	0x0DD1, r24
    d15c:	08 c0       	rjmp	.+16     	; 0xd16e <update_splash+0x3a>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d15e:	84 ff       	sbrs	r24, 4
    d160:	0c c0       	rjmp	.+24     	; 0xd17a <update_splash+0x46>
    d162:	80 91 d1 0d 	lds	r24, 0x0DD1
    d166:	81 30       	cpi	r24, 0x01	; 1
    d168:	41 f4       	brne	.+16     	; 0xd17a <update_splash+0x46>
	{
		game.selection = START_SELECTED;
    d16a:	10 92 d1 0d 	sts	0x0DD1, r1
		SFX_NAVIGATE;
    d16e:	41 e0       	ldi	r20, 0x01	; 1
    d170:	6f ef       	ldi	r22, 0xFF	; 255
    d172:	82 e0       	ldi	r24, 0x02	; 2
    d174:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
    d178:	40 c0       	rjmp	.+128    	; 0xd1fa <update_splash+0xc6>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d17a:	8c e4       	ldi	r24, 0x4C	; 76
    d17c:	9e e0       	ldi	r25, 0x0E	; 14
    d17e:	0e 94 c6 65 	call	0xcb8c	; 0xcb8c <select_pressed>
    d182:	88 23       	and	r24, r24
    d184:	b1 f0       	breq	.+44     	; 0xd1b2 <update_splash+0x7e>
    d186:	80 91 d1 0d 	lds	r24, 0x0DD1
    d18a:	81 11       	cpse	r24, r1
    d18c:	08 c0       	rjmp	.+16     	; 0xd19e <update_splash+0x6a>
	{
		SFX_NAVIGATE;
    d18e:	41 e0       	ldi	r20, 0x01	; 1
    d190:	6f ef       	ldi	r22, 0xFF	; 255
    d192:	82 e0       	ldi	r24, 0x02	; 2
    d194:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d198:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d19a:	0c 94 04 67 	jmp	0xce08	; 0xce08 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d19e:	81 30       	cpi	r24, 0x01	; 1
    d1a0:	41 f4       	brne	.+16     	; 0xd1b2 <update_splash+0x7e>
	{
		SFX_NAVIGATE;
    d1a2:	41 e0       	ldi	r20, 0x01	; 1
    d1a4:	6f ef       	ldi	r22, 0xFF	; 255
    d1a6:	82 e0       	ldi	r24, 0x02	; 2
    d1a8:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d1ac:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d1ae:	0c 94 76 67 	jmp	0xceec	; 0xceec <load_high_scores>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    d1b2:	80 91 f7 0c 	lds	r24, 0x0CF7
    d1b6:	90 91 f8 0c 	lds	r25, 0x0CF8
    d1ba:	88 35       	cpi	r24, 0x58	; 88
    d1bc:	92 40       	sbci	r25, 0x02	; 2
    d1be:	e8 f0       	brcs	.+58     	; 0xd1fa <update_splash+0xc6>
	{
		demo_counter = 0;
    d1c0:	10 92 f8 0c 	sts	0x0CF8, r1
    d1c4:	10 92 f7 0c 	sts	0x0CF7, r1
		game.selection = DEMO_SELECTED;
    d1c8:	82 e0       	ldi	r24, 0x02	; 2
    d1ca:	80 93 d1 0d 	sts	0x0DD1, r24
		demo_load(demo_choice++);
    d1ce:	80 91 f6 0c 	lds	r24, 0x0CF6
    d1d2:	91 e0       	ldi	r25, 0x01	; 1
    d1d4:	98 0f       	add	r25, r24
    d1d6:	90 93 f6 0c 	sts	0x0CF6, r25
    d1da:	0e 94 22 67 	call	0xce44	; 0xce44 <demo_load>
		if (demo_choice == 2) demo_choice = 3;
    d1de:	80 91 f6 0c 	lds	r24, 0x0CF6
    d1e2:	82 30       	cpi	r24, 0x02	; 2
    d1e4:	19 f4       	brne	.+6      	; 0xd1ec <update_splash+0xb8>
    d1e6:	83 e0       	ldi	r24, 0x03	; 3
    d1e8:	80 93 f6 0c 	sts	0x0CF6, r24
		if (demo_choice == 5) demo_choice = 0;
    d1ec:	80 91 f6 0c 	lds	r24, 0x0CF6
    d1f0:	85 30       	cpi	r24, 0x05	; 5
    d1f2:	d1 f4       	brne	.+52     	; 0xd228 <update_splash+0xf4>
    d1f4:	10 92 f6 0c 	sts	0x0CF6, r1
    d1f8:	17 c0       	rjmp	.+46     	; 0xd228 <update_splash+0xf4>
		return;
		
	}
	demo_counter++;
    d1fa:	80 91 f7 0c 	lds	r24, 0x0CF7
    d1fe:	90 91 f8 0c 	lds	r25, 0x0CF8
    d202:	01 96       	adiw	r24, 0x01	; 1
    d204:	90 93 f8 0c 	sts	0x0CF8, r25
    d208:	80 93 f7 0c 	sts	0x0CF7, r24
	
	if (game.selection == START_SELECTED)
    d20c:	80 91 d1 0d 	lds	r24, 0x0DD1
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d210:	01 e0       	ldi	r16, 0x01	; 1
    d212:	21 e0       	ldi	r18, 0x01	; 1
		return;
		
	}
	demo_counter++;
	
	if (game.selection == START_SELECTED)
    d214:	81 11       	cpse	r24, r1
    d216:	03 c0       	rjmp	.+6      	; 0xd21e <update_splash+0xea>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d218:	48 e7       	ldi	r20, 0x78	; 120
    d21a:	68 e3       	ldi	r22, 0x38	; 56
    d21c:	03 c0       	rjmp	.+6      	; 0xd224 <update_splash+0xf0>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d21e:	40 e8       	ldi	r20, 0x80	; 128
    d220:	68 e3       	ldi	r22, 0x38	; 56
    d222:	80 e0       	ldi	r24, 0x00	; 0
    d224:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
	}
}
    d228:	0f 91       	pop	r16
    d22a:	08 95       	ret

0000d22c <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    d22c:	0f 93       	push	r16
	static u16 high_score_counter = 0;
	
	if (game.player.controls.pressed & BTN_X)
    d22e:	80 91 4c 0e 	lds	r24, 0x0E4C
    d232:	90 91 4d 0e 	lds	r25, 0x0E4D
    d236:	91 ff       	sbrs	r25, 1
    d238:	16 c0       	rjmp	.+44     	; 0xd266 <update_high_scores+0x3a>
	{
		high_score_counter = 0;
    d23a:	10 92 f5 0c 	sts	0x0CF5, r1
    d23e:	10 92 f4 0c 	sts	0x0CF4, r1
		SFX_NAVIGATE;
    d242:	41 e0       	ldi	r20, 0x01	; 1
    d244:	6f ef       	ldi	r22, 0xFF	; 255
    d246:	82 e0       	ldi	r24, 0x02	; 2
    d248:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
		game.high_score_index = -1;
    d24c:	8f ef       	ldi	r24, 0xFF	; 255
    d24e:	80 93 ca 0d 	sts	0x0DCA, r24
		game.score = 0;
    d252:	10 92 bb 0d 	sts	0x0DBB, r1
    d256:	10 92 ba 0d 	sts	0x0DBA, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d25a:	88 e9       	ldi	r24, 0x98	; 152
    d25c:	9d e0       	ldi	r25, 0x0D	; 13
    d25e:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <EepromWriteBlock>
		high_score_counter = 0;
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    d262:	0e 94 45 67 	call	0xce8a	; 0xce8a <load_splash>
	}
	if ((game.player.controls.held & BTN_SL) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    d266:	80 91 50 0e 	lds	r24, 0x0E50
    d26a:	90 91 51 0e 	lds	r25, 0x0E51
    d26e:	92 ff       	sbrs	r25, 2
    d270:	19 c0       	rjmp	.+50     	; 0xd2a4 <update_high_scores+0x78>
    d272:	80 91 52 0e 	lds	r24, 0x0E52
    d276:	8f 3f       	cpi	r24, 0xFF	; 255
    d278:	a9 f4       	brne	.+42     	; 0xd2a4 <update_high_scores+0x78>
    d27a:	80 91 ca 0d 	lds	r24, 0x0DCA
    d27e:	8f 3f       	cpi	r24, 0xFF	; 255
    d280:	89 f4       	brne	.+34     	; 0xd2a4 <update_high_scores+0x78>
	{
		high_score_counter = 0;
    d282:	10 92 f5 0c 	sts	0x0CF5, r1
    d286:	10 92 f4 0c 	sts	0x0CF4, r1
	    SFX_NAVIGATE;
    d28a:	41 e0       	ldi	r20, 0x01	; 1
    d28c:	6f ef       	ldi	r22, 0xFF	; 255
    d28e:	82 e0       	ldi	r24, 0x02	; 2
    d290:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
		init_default_high_scores();
    d294:	0e 94 c6 4e 	call	0x9d8c	; 0x9d8c <init_default_high_scores>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d298:	88 e9       	ldi	r24, 0x98	; 152
    d29a:	9d e0       	ldi	r25, 0x0D	; 13
    d29c:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <EepromWriteBlock>
	{
		high_score_counter = 0;
	    SFX_NAVIGATE;
		init_default_high_scores();
	    save_eeprom(&scores);
		load_high_scores();
    d2a0:	0e 94 76 67 	call	0xceec	; 0xceec <load_high_scores>
	}
	
	if (game.high_score_index != -1)
    d2a4:	30 91 ca 0d 	lds	r19, 0x0DCA
    d2a8:	3f 3f       	cpi	r19, 0xFF	; 255
    d2aa:	09 f4       	brne	.+2      	; 0xd2ae <update_high_scores+0x82>
    d2ac:	81 c0       	rjmp	.+258    	; 0xd3b0 <update_high_scores+0x184>
	{
		high_score_counter = 0;
    d2ae:	10 92 f5 0c 	sts	0x0CF5, r1
    d2b2:	10 92 f4 0c 	sts	0x0CF4, r1
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d2b6:	20 91 4c 0e 	lds	r18, 0x0E4C
    d2ba:	27 ff       	sbrs	r18, 7
    d2bc:	1e c0       	rjmp	.+60     	; 0xd2fa <update_high_scores+0xce>
    d2be:	83 2f       	mov	r24, r19
    d2c0:	65 e0       	ldi	r22, 0x05	; 5
    d2c2:	0e 94 df 70 	call	0xe1be	; 0xe1be <__divmodqi4>
    d2c6:	92 30       	cpi	r25, 0x02	; 2
    d2c8:	c1 f0       	breq	.+48     	; 0xd2fa <update_high_scores+0xce>
		{
			SFX_NAVIGATE;
    d2ca:	41 e0       	ldi	r20, 0x01	; 1
    d2cc:	6f ef       	ldi	r22, 0xFF	; 255
    d2ce:	82 e0       	ldi	r24, 0x02	; 2
    d2d0:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
			game.high_score_index++;
    d2d4:	80 91 ca 0d 	lds	r24, 0x0DCA
    d2d8:	8f 5f       	subi	r24, 0xFF	; 255
    d2da:	80 93 ca 0d 	sts	0x0DCA, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d2de:	60 91 eb 0f 	lds	r22, 0x0FEB
    d2e2:	68 5f       	subi	r22, 0xF8	; 248
    d2e4:	01 e0       	ldi	r16, 0x01	; 1
    d2e6:	21 e0       	ldi	r18, 0x01	; 1
    d2e8:	40 91 ec 0f 	lds	r20, 0x0FEC
    d2ec:	82 e0       	ldi	r24, 0x02	; 2
    d2ee:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d2f2:	60 91 ef 0f 	lds	r22, 0x0FEF
    d2f6:	68 5f       	subi	r22, 0xF8	; 248
    d2f8:	1f c0       	rjmp	.+62     	; 0xd338 <update_high_scores+0x10c>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d2fa:	26 ff       	sbrs	r18, 6
    d2fc:	24 c0       	rjmp	.+72     	; 0xd346 <update_high_scores+0x11a>
    d2fe:	83 2f       	mov	r24, r19
    d300:	65 e0       	ldi	r22, 0x05	; 5
    d302:	0e 94 df 70 	call	0xe1be	; 0xe1be <__divmodqi4>
    d306:	99 23       	and	r25, r25
    d308:	f1 f0       	breq	.+60     	; 0xd346 <update_high_scores+0x11a>
		{
			SFX_NAVIGATE;
    d30a:	41 e0       	ldi	r20, 0x01	; 1
    d30c:	6f ef       	ldi	r22, 0xFF	; 255
    d30e:	82 e0       	ldi	r24, 0x02	; 2
    d310:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
			game.high_score_index--;
    d314:	80 91 ca 0d 	lds	r24, 0x0DCA
    d318:	81 50       	subi	r24, 0x01	; 1
    d31a:	80 93 ca 0d 	sts	0x0DCA, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d31e:	60 91 eb 0f 	lds	r22, 0x0FEB
    d322:	68 50       	subi	r22, 0x08	; 8
    d324:	01 e0       	ldi	r16, 0x01	; 1
    d326:	21 e0       	ldi	r18, 0x01	; 1
    d328:	40 91 ec 0f 	lds	r20, 0x0FEC
    d32c:	82 e0       	ldi	r24, 0x02	; 2
    d32e:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d332:	60 91 ef 0f 	lds	r22, 0x0FEF
    d336:	68 50       	subi	r22, 0x08	; 8
    d338:	21 e0       	ldi	r18, 0x01	; 1
    d33a:	40 91 f0 0f 	lds	r20, 0x0FF0
    d33e:	83 e0       	ldi	r24, 0x03	; 3
    d340:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
    d344:	35 c0       	rjmp	.+106    	; 0xd3b0 <update_high_scores+0x184>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d346:	24 ff       	sbrs	r18, 4
    d348:	13 c0       	rjmp	.+38     	; 0xd370 <update_high_scores+0x144>
		{
			SFX_NAVIGATE;
    d34a:	41 e0       	ldi	r20, 0x01	; 1
    d34c:	6f ef       	ldi	r22, 0xFF	; 255
    d34e:	82 e0       	ldi	r24, 0x02	; 2
    d350:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d354:	80 91 ca 0d 	lds	r24, 0x0DCA
    d358:	e8 2f       	mov	r30, r24
    d35a:	ff 27       	eor	r31, r31
    d35c:	e7 fd       	sbrc	r30, 7
    d35e:	f0 95       	com	r31
    d360:	e8 56       	subi	r30, 0x68	; 104
    d362:	f2 4f       	sbci	r31, 0xF2	; 242
    d364:	92 81       	ldd	r25, Z+2	; 0x02
    d366:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d368:	91 34       	cpi	r25, 0x41	; 65
    d36a:	b0 f4       	brcc	.+44     	; 0xd398 <update_high_scores+0x16c>
    d36c:	91 e4       	ldi	r25, 0x41	; 65
    d36e:	14 c0       	rjmp	.+40     	; 0xd398 <update_high_scores+0x16c>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d370:	25 ff       	sbrs	r18, 5
    d372:	1e c0       	rjmp	.+60     	; 0xd3b0 <update_high_scores+0x184>
		{
			SFX_NAVIGATE;
    d374:	41 e0       	ldi	r20, 0x01	; 1
    d376:	6f ef       	ldi	r22, 0xFF	; 255
    d378:	82 e0       	ldi	r24, 0x02	; 2
    d37a:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d37e:	80 91 ca 0d 	lds	r24, 0x0DCA
    d382:	e8 2f       	mov	r30, r24
    d384:	ff 27       	eor	r31, r31
    d386:	e7 fd       	sbrc	r30, 7
    d388:	f0 95       	com	r31
    d38a:	e8 56       	subi	r30, 0x68	; 104
    d38c:	f2 4f       	sbci	r31, 0xF2	; 242
    d38e:	92 81       	ldd	r25, Z+2	; 0x02
    d390:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d392:	9b 35       	cpi	r25, 0x5B	; 91
    d394:	08 f0       	brcs	.+2      	; 0xd398 <update_high_scores+0x16c>
    d396:	9a e5       	ldi	r25, 0x5A	; 90
    d398:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d39a:	65 e0       	ldi	r22, 0x05	; 5
    d39c:	0e 94 df 70 	call	0xe1be	; 0xe1be <__divmodqi4>
    d3a0:	68 2f       	mov	r22, r24
    d3a2:	66 0f       	add	r22, r22
    d3a4:	69 5f       	subi	r22, 0xF9	; 249
    d3a6:	42 81       	ldd	r20, Z+2	; 0x02
    d3a8:	8b e0       	ldi	r24, 0x0B	; 11
    d3aa:	89 0f       	add	r24, r25
    d3ac:	0e 94 09 4d 	call	0x9a12	; 0x9a12 <LBPrintChar>
		}
	}
	if (high_score_counter > HIGH_SCORES_LENGTH)
    d3b0:	80 91 f4 0c 	lds	r24, 0x0CF4
    d3b4:	90 91 f5 0c 	lds	r25, 0x0CF5
    d3b8:	85 38       	cpi	r24, 0x85	; 133
    d3ba:	93 40       	sbci	r25, 0x03	; 3
    d3bc:	90 f0       	brcs	.+36     	; 0xd3e2 <update_high_scores+0x1b6>
	{
		high_score_counter = 0;
    d3be:	10 92 f5 0c 	sts	0x0CF5, r1
    d3c2:	10 92 f4 0c 	sts	0x0CF4, r1
		SFX_NAVIGATE;
    d3c6:	41 e0       	ldi	r20, 0x01	; 1
    d3c8:	6f ef       	ldi	r22, 0xFF	; 255
    d3ca:	82 e0       	ldi	r24, 0x02	; 2
    d3cc:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
		game.high_score_index = -1;
    d3d0:	8f ef       	ldi	r24, 0xFF	; 255
    d3d2:	80 93 ca 0d 	sts	0x0DCA, r24
		game.score = 0;
    d3d6:	10 92 bb 0d 	sts	0x0DBB, r1
    d3da:	10 92 ba 0d 	sts	0x0DBA, r1
		load_splash();
    d3de:	0e 94 45 67 	call	0xce8a	; 0xce8a <load_splash>
	}
	high_score_counter++;
    d3e2:	80 91 f4 0c 	lds	r24, 0x0CF4
    d3e6:	90 91 f5 0c 	lds	r25, 0x0CF5
    d3ea:	01 96       	adiw	r24, 0x01	; 1
    d3ec:	90 93 f5 0c 	sts	0x0CF5, r25
    d3f0:	80 93 f4 0c 	sts	0x0CF4, r24
}
    d3f4:	0f 91       	pop	r16
    d3f6:	08 95       	ret

0000d3f8 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d3f8:	2f 92       	push	r2
    d3fa:	3f 92       	push	r3
    d3fc:	4f 92       	push	r4
    d3fe:	5f 92       	push	r5
    d400:	6f 92       	push	r6
    d402:	7f 92       	push	r7
    d404:	8f 92       	push	r8
    d406:	9f 92       	push	r9
    d408:	af 92       	push	r10
    d40a:	bf 92       	push	r11
    d40c:	cf 92       	push	r12
    d40e:	df 92       	push	r13
    d410:	ef 92       	push	r14
    d412:	ff 92       	push	r15
    d414:	0f 93       	push	r16
    d416:	1f 93       	push	r17
    d418:	cf 93       	push	r28
    d41a:	df 93       	push	r29
    d41c:	7c 01       	movw	r14, r24
    d41e:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d420:	c0 91 b5 0c 	lds	r28, 0x0CB5
    d424:	c6 95       	lsr	r28
    d426:	c6 95       	lsr	r28
    d428:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d42a:	00 91 b6 0c 	lds	r16, 0x0CB6
    d42e:	06 95       	lsr	r16
    d430:	06 95       	lsr	r16
    d432:	06 95       	lsr	r16
	u16 tally = game.score;
    d434:	a0 90 ba 0d 	lds	r10, 0x0DBA
    d438:	b0 90 bb 0d 	lds	r11, 0x0DBB
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d43c:	64 e1       	ldi	r22, 0x14	; 20
    d43e:	80 e0       	ldi	r24, 0x00	; 0
    d440:	0e 94 aa 65 	call	0xcb54	; 0xcb54 <hide_sprites>
	LBRotateSprites();
    d444:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	
	StopSong();
    d448:	0e 94 cd 40 	call	0x819a	; 0x819a <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d44c:	10 e0       	ldi	r17, 0x00	; 0
    d44e:	d0 e0       	ldi	r29, 0x00	; 0
    d450:	c8 01       	movw	r24, r16
    d452:	06 96       	adiw	r24, 0x06	; 6
    d454:	2e e1       	ldi	r18, 0x1E	; 30
    d456:	82 2e       	mov	r8, r18
    d458:	91 2c       	mov	r9, r1
    d45a:	b4 01       	movw	r22, r8
    d45c:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    d460:	9e 01       	movw	r18, r28
    d462:	28 5f       	subi	r18, 0xF8	; 248
    d464:	3f 4f       	sbci	r19, 0xFF	; 255
    d466:	40 e8       	ldi	r20, 0x80	; 128
    d468:	58 e5       	ldi	r21, 0x58	; 88
    d46a:	68 2f       	mov	r22, r24
    d46c:	82 2f       	mov	r24, r18
    d46e:	8f 71       	andi	r24, 0x1F	; 31
    d470:	0e 94 ba 4b 	call	0x9774	; 0x9774 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d474:	c8 01       	movw	r24, r16
    d476:	07 96       	adiw	r24, 0x07	; 7
    d478:	b4 01       	movw	r22, r8
    d47a:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    d47e:	9e 01       	movw	r18, r28
    d480:	26 5f       	subi	r18, 0xF6	; 246
    d482:	3f 4f       	sbci	r19, 0xFF	; 255
    d484:	a7 01       	movw	r20, r14
    d486:	68 2f       	mov	r22, r24
    d488:	82 2f       	mov	r24, r18
    d48a:	8f 71       	andi	r24, 0x1F	; 31
    d48c:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d490:	c8 01       	movw	r24, r16
    d492:	09 96       	adiw	r24, 0x09	; 9
    d494:	b4 01       	movw	r22, r8
    d496:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    d49a:	48 2e       	mov	r4, r24
    d49c:	78 2e       	mov	r7, r24
    d49e:	7e 01       	movw	r14, r28
    d4a0:	29 e0       	ldi	r18, 0x09	; 9
    d4a2:	e2 0e       	add	r14, r18
    d4a4:	f1 1c       	adc	r15, r1
    d4a6:	8f e1       	ldi	r24, 0x1F	; 31
    d4a8:	e8 22       	and	r14, r24
    d4aa:	ff 24       	eor	r15, r15
    d4ac:	4b e1       	ldi	r20, 0x1B	; 27
    d4ae:	53 e0       	ldi	r21, 0x03	; 3
    d4b0:	64 2d       	mov	r22, r4
    d4b2:	8e 2d       	mov	r24, r14
    d4b4:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d4b8:	c8 01       	movw	r24, r16
    d4ba:	0b 96       	adiw	r24, 0x0b	; 11
    d4bc:	b4 01       	movw	r22, r8
    d4be:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    d4c2:	38 2e       	mov	r3, r24
    d4c4:	68 2e       	mov	r6, r24
    d4c6:	41 e7       	ldi	r20, 0x71	; 113
    d4c8:	53 e0       	ldi	r21, 0x03	; 3
    d4ca:	68 2f       	mov	r22, r24
    d4cc:	8e 2d       	mov	r24, r14
    d4ce:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d4d2:	c8 01       	movw	r24, r16
    d4d4:	0c 96       	adiw	r24, 0x0c	; 12
    d4d6:	b4 01       	movw	r22, r8
    d4d8:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    d4dc:	58 2e       	mov	r5, r24
    d4de:	f8 2e       	mov	r15, r24
    d4e0:	4c e5       	ldi	r20, 0x5C	; 92
    d4e2:	53 e0       	ldi	r21, 0x03	; 3
    d4e4:	68 2f       	mov	r22, r24
    d4e6:	8e 2d       	mov	r24, r14
    d4e8:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d4ec:	c8 01       	movw	r24, r16
    d4ee:	0d 96       	adiw	r24, 0x0d	; 13
    d4f0:	b4 01       	movw	r22, r8
    d4f2:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    d4f6:	18 2f       	mov	r17, r24
    d4f8:	28 2e       	mov	r2, r24
    d4fa:	4c e2       	ldi	r20, 0x2C	; 44
    d4fc:	53 e0       	ldi	r21, 0x03	; 3
    d4fe:	68 2f       	mov	r22, r24
    d500:	8e 2d       	mov	r24, r14
    d502:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d506:	64 96       	adiw	r28, 0x14	; 20
    d508:	cf 71       	andi	r28, 0x1F	; 31
    d50a:	dd 27       	eor	r29, r29
    d50c:	ec 2e       	mov	r14, r28
    d50e:	21 e0       	ldi	r18, 0x01	; 1
    d510:	a5 01       	movw	r20, r10
    d512:	64 2d       	mov	r22, r4
    d514:	8c 2f       	mov	r24, r28
    d516:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d51a:	40 91 bc 0d 	lds	r20, 0x0DBC
    d51e:	50 91 bd 0d 	lds	r21, 0x0DBD
    d522:	21 e0       	ldi	r18, 0x01	; 1
    d524:	63 2d       	mov	r22, r3
    d526:	8c 2f       	mov	r24, r28
    d528:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d52c:	40 91 be 0d 	lds	r20, 0x0DBE
    d530:	50 91 bf 0d 	lds	r21, 0x0DBF
    d534:	21 e0       	ldi	r18, 0x01	; 1
    d536:	65 2d       	mov	r22, r5
    d538:	8c 2f       	mov	r24, r28
    d53a:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d53e:	21 e0       	ldi	r18, 0x01	; 1
    d540:	a6 01       	movw	r20, r12
    d542:	61 2f       	mov	r22, r17
    d544:	8c 2f       	mov	r24, r28
    d546:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	
	LBWaitSeconds(2);
    d54a:	82 e0       	ldi	r24, 0x02	; 2
    d54c:	0e 94 ef 4d 	call	0x9bde	; 0x9bde <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d550:	80 90 bc 0d 	lds	r8, 0x0DBC
    d554:	90 90 bd 0d 	lds	r9, 0x0DBD
    d558:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d55a:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d55c:	20 97       	sbiw	r28, 0x00	; 0
    d55e:	e9 f0       	breq	.+58     	; 0xd59a <tally_score+0x1a2>
	{
		WaitVsync(1);
    d560:	81 e0       	ldi	r24, 0x01	; 1
    d562:	90 e0       	ldi	r25, 0x00	; 0
    d564:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
		SFX_HIT;
    d568:	41 e0       	ldi	r20, 0x01	; 1
    d56a:	6f ef       	ldi	r22, 0xFF	; 255
    d56c:	84 e0       	ldi	r24, 0x04	; 4
    d56e:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
		tally += 1;
    d572:	0f 5f       	subi	r16, 0xFF	; 255
    d574:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d576:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d578:	21 e0       	ldi	r18, 0x01	; 1
    d57a:	a8 01       	movw	r20, r16
    d57c:	67 2d       	mov	r22, r7
    d57e:	8e 2d       	mov	r24, r14
    d580:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d584:	21 e0       	ldi	r18, 0x01	; 1
    d586:	ae 01       	movw	r20, r28
    d588:	66 2d       	mov	r22, r6
    d58a:	8e 2d       	mov	r24, r14
    d58c:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d590:	8c ed       	ldi	r24, 0xDC	; 220
    d592:	95 e0       	ldi	r25, 0x05	; 5
    d594:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <WaitUs>
    d598:	e1 cf       	rjmp	.-62     	; 0xd55c <tally_score+0x164>
    d59a:	a8 0c       	add	r10, r8
    d59c:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d59e:	c0 91 be 0d 	lds	r28, 0x0DBE
    d5a2:	d0 91 bf 0d 	lds	r29, 0x0DBF
	while (counter > 0)
    d5a6:	20 97       	sbiw	r28, 0x00	; 0
    d5a8:	31 f1       	breq	.+76     	; 0xd5f6 <tally_score+0x1fe>
	{
		WaitVsync(1);
    d5aa:	81 e0       	ldi	r24, 0x01	; 1
    d5ac:	90 e0       	ldi	r25, 0x00	; 0
    d5ae:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
		SFX_HIT;
    d5b2:	41 e0       	ldi	r20, 0x01	; 1
    d5b4:	6f ef       	ldi	r22, 0xFF	; 255
    d5b6:	84 e0       	ldi	r24, 0x04	; 4
    d5b8:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d5bc:	c5 01       	movw	r24, r10
    d5be:	02 97       	sbiw	r24, 0x02	; 2
    d5c0:	8e 3f       	cpi	r24, 0xFE	; 254
    d5c2:	9f 4f       	sbci	r25, 0xFF	; 255
    d5c4:	20 f4       	brcc	.+8      	; 0xd5ce <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d5c6:	81 e0       	ldi	r24, 0x01	; 1
    d5c8:	a8 1a       	sub	r10, r24
    d5ca:	b1 08       	sbc	r11, r1
    d5cc:	02 c0       	rjmp	.+4      	; 0xd5d2 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d5ce:	a1 2c       	mov	r10, r1
    d5d0:	b1 2c       	mov	r11, r1
		counter -= 1;
    d5d2:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d5d4:	21 e0       	ldi	r18, 0x01	; 1
    d5d6:	a5 01       	movw	r20, r10
    d5d8:	67 2d       	mov	r22, r7
    d5da:	8e 2d       	mov	r24, r14
    d5dc:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d5e0:	21 e0       	ldi	r18, 0x01	; 1
    d5e2:	ae 01       	movw	r20, r28
    d5e4:	6f 2d       	mov	r22, r15
    d5e6:	8e 2d       	mov	r24, r14
    d5e8:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d5ec:	8c ed       	ldi	r24, 0xDC	; 220
    d5ee:	95 e0       	ldi	r25, 0x05	; 5
    d5f0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <WaitUs>
    d5f4:	d8 cf       	rjmp	.-80     	; 0xd5a6 <tally_score+0x1ae>
    d5f6:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d5f8:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d5fa:	20 97       	sbiw	r28, 0x00	; 0
    d5fc:	e9 f0       	breq	.+58     	; 0xd638 <tally_score+0x240>
	{
		WaitVsync(1);
    d5fe:	81 e0       	ldi	r24, 0x01	; 1
    d600:	90 e0       	ldi	r25, 0x00	; 0
    d602:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
		SFX_HIT;
    d606:	41 e0       	ldi	r20, 0x01	; 1
    d608:	6f ef       	ldi	r22, 0xFF	; 255
    d60a:	84 e0       	ldi	r24, 0x04	; 4
    d60c:	0e 94 93 41 	call	0x8326	; 0x8326 <TriggerFx>
		tally += 1;
    d610:	0f 5f       	subi	r16, 0xFF	; 255
    d612:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d614:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d616:	21 e0       	ldi	r18, 0x01	; 1
    d618:	a8 01       	movw	r20, r16
    d61a:	67 2d       	mov	r22, r7
    d61c:	8e 2d       	mov	r24, r14
    d61e:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d622:	21 e0       	ldi	r18, 0x01	; 1
    d624:	ae 01       	movw	r20, r28
    d626:	62 2d       	mov	r22, r2
    d628:	8e 2d       	mov	r24, r14
    d62a:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d62e:	8c ed       	ldi	r24, 0xDC	; 220
    d630:	95 e0       	ldi	r25, 0x05	; 5
    d632:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <WaitUs>
    d636:	e1 cf       	rjmp	.-62     	; 0xd5fa <tally_score+0x202>
    d638:	ac 0c       	add	r10, r12
    d63a:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d63c:	b0 92 bb 0d 	sts	0x0DBB, r11
    d640:	a0 92 ba 0d 	sts	0x0DBA, r10
	game.time = 0;
    d644:	10 92 bf 0d 	sts	0x0DBF, r1
    d648:	10 92 be 0d 	sts	0x0DBE, r1
	LBWaitSeconds(2);
    d64c:	82 e0       	ldi	r24, 0x02	; 2
}
    d64e:	df 91       	pop	r29
    d650:	cf 91       	pop	r28
    d652:	1f 91       	pop	r17
    d654:	0f 91       	pop	r16
    d656:	ff 90       	pop	r15
    d658:	ef 90       	pop	r14
    d65a:	df 90       	pop	r13
    d65c:	cf 90       	pop	r12
    d65e:	bf 90       	pop	r11
    d660:	af 90       	pop	r10
    d662:	9f 90       	pop	r9
    d664:	8f 90       	pop	r8
    d666:	7f 90       	pop	r7
    d668:	6f 90       	pop	r6
    d66a:	5f 90       	pop	r5
    d66c:	4f 90       	pop	r4
    d66e:	3f 90       	pop	r3
    d670:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    d672:	0c 94 ef 4d 	jmp	0x9bde	; 0x9bde <LBWaitSeconds>

0000d676 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    d676:	cf 93       	push	r28
	if (player == &game.boss) {
    d678:	83 55       	subi	r24, 0x53	; 83
    d67a:	9e 40       	sbci	r25, 0x0E	; 14
    d67c:	29 f4       	brne	.+10     	; 0xd688 <handle_player_death+0x12>
		game.level_ended = 1;
    d67e:	81 e0       	ldi	r24, 0x01	; 1
    d680:	80 93 d5 0d 	sts	0x0DD5, r24
		return 1;
    d684:	c1 e0       	ldi	r28, 0x01	; 1
    d686:	34 c0       	rjmp	.+104    	; 0xd6f0 <handle_player_death+0x7a>
	}
	game.lives--;
    d688:	80 91 cb 0d 	lds	r24, 0x0DCB
    d68c:	81 50       	subi	r24, 0x01	; 1
    d68e:	80 93 cb 0d 	sts	0x0DCB, r24
	clear_sprites(0, 6);
    d692:	66 e0       	ldi	r22, 0x06	; 6
    d694:	80 e0       	ldi	r24, 0x00	; 0
    d696:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
	LBRotateSprites();
    d69a:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	if (game.lives == 0)
    d69e:	c0 91 cb 0d 	lds	r28, 0x0DCB
    d6a2:	c1 11       	cpse	r28, r1
    d6a4:	09 c0       	rjmp	.+18     	; 0xd6b8 <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    d6a6:	60 e0       	ldi	r22, 0x00	; 0
    d6a8:	70 e0       	ldi	r23, 0x00	; 0
    d6aa:	82 e2       	ldi	r24, 0x22	; 34
    d6ac:	93 e0       	ldi	r25, 0x03	; 3
    d6ae:	0e 94 fc 69 	call	0xd3f8	; 0xd3f8 <tally_score>
		exit_game();
    d6b2:	0e 94 8a 68 	call	0xd114	; 0xd114 <exit_game>
    d6b6:	1c c0       	rjmp	.+56     	; 0xd6f0 <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d6b8:	61 e0       	ldi	r22, 0x01	; 1
    d6ba:	81 e0       	ldi	r24, 0x01	; 1
    d6bc:	0e 94 38 4c 	call	0x9870	; 0x9870 <FadeOut>
	ClearVram();
    d6c0:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d6c4:	64 e1       	ldi	r22, 0x14	; 20
    d6c6:	80 e0       	ldi	r24, 0x00	; 0
    d6c8:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
	LBRotateSprites();
    d6cc:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d6d0:	60 e0       	ldi	r22, 0x00	; 0
    d6d2:	81 e0       	ldi	r24, 0x01	; 1
    d6d4:	0e 94 2c 4c 	call	0x9858	; 0x9858 <FadeIn>
	init_player_state();
    d6d8:	0e 94 65 53 	call	0xa6ca	; 0xa6ca <init_player_state>
	init_boss_state();
    d6dc:	0e 94 e9 52 	call	0xa5d2	; 0xa5d2 <init_boss_state>
	init_enemy_state();
    d6e0:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <init_enemy_state>
	load_level(game.current_level_index, false);
    d6e4:	60 e0       	ldi	r22, 0x00	; 0
    d6e6:	80 91 cd 0d 	lds	r24, 0x0DCD
    d6ea:	0e 94 97 64 	call	0xc92e	; 0xc92e <load_level>
	return 0;
    d6ee:	c0 e0       	ldi	r28, 0x00	; 0
}
    d6f0:	8c 2f       	mov	r24, r28
    d6f2:	cf 91       	pop	r28
    d6f4:	08 95       	ret

0000d6f6 <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    d6f6:	cf 92       	push	r12
    d6f8:	df 92       	push	r13
    d6fa:	ef 92       	push	r14
    d6fc:	ff 92       	push	r15
    d6fe:	0f 93       	push	r16
    d700:	1f 93       	push	r17
    d702:	cf 93       	push	r28
    d704:	df 93       	push	r29
    d706:	1f 92       	push	r1
    d708:	cd b7       	in	r28, 0x3d	; 61
    d70a:	de b7       	in	r29, 0x3e	; 62
    d70c:	6c 01       	movw	r12, r24
    d70e:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	handle_music_toggle(&player->controls);
    d710:	7c 01       	movw	r14, r24
    d712:	24 e7       	ldi	r18, 0x74	; 116
    d714:	e2 0e       	add	r14, r18
    d716:	f1 1c       	adc	r15, r1
    d718:	c7 01       	movw	r24, r14
    d71a:	0e 94 67 5b 	call	0xb6ce	; 0xb6ce <handle_music_toggle>
	handle_demo_play(player);
    d71e:	c6 01       	movw	r24, r12
    d720:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <handle_demo_play>
	
	if (player->flags & EXPLODING)
    d724:	f6 01       	movw	r30, r12
    d726:	00 85       	ldd	r16, Z+8	; 0x08
    d728:	04 ff       	sbrs	r16, 4
    d72a:	19 c0       	rjmp	.+50     	; 0xd75e <update_player+0x68>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    d72c:	04 85       	ldd	r16, Z+12	; 0x0c
    d72e:	23 85       	ldd	r18, Z+11	; 0x0b
    d730:	41 2f       	mov	r20, r17
    d732:	b6 01       	movw	r22, r12
    d734:	64 59       	subi	r22, 0x94	; 148
    d736:	7f 4f       	sbci	r23, 0xFF	; 255
    d738:	c6 01       	movw	r24, r12
    d73a:	08 96       	adiw	r24, 0x08	; 8
    d73c:	0e 94 32 5f 	call	0xbe64	; 0xbe64 <map_explosion>
    d740:	88 23       	and	r24, r24
    d742:	09 f4       	brne	.+2      	; 0xd746 <update_player+0x50>
    d744:	00 c2       	rjmp	.+1024   	; 0xdb46 <update_player+0x450>
		{
			return handle_player_death(player);
    d746:	c6 01       	movw	r24, r12
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    d748:	0f 90       	pop	r0
    d74a:	df 91       	pop	r29
    d74c:	cf 91       	pop	r28
    d74e:	1f 91       	pop	r17
    d750:	0f 91       	pop	r16
    d752:	ff 90       	pop	r15
    d754:	ef 90       	pop	r14
    d756:	df 90       	pop	r13
    d758:	cf 90       	pop	r12
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    d75a:	0c 94 3b 6b 	jmp	0xd676	; 0xd676 <handle_player_death>
		}
	}
	else if (is_space())
    d75e:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    d762:	88 23       	and	r24, r24
    d764:	09 f4       	brne	.+2      	; 0xd768 <update_player+0x72>
    d766:	a6 c0       	rjmp	.+332    	; 0xd8b4 <update_player+0x1be>
	{
		if (game.current_level_index == 9)
    d768:	80 91 cd 0d 	lds	r24, 0x0DCD
    d76c:	89 30       	cpi	r24, 0x09	; 9
    d76e:	09 f0       	breq	.+2      	; 0xd772 <update_player+0x7c>
    d770:	4d c0       	rjmp	.+154    	; 0xd80c <update_player+0x116>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    d772:	80 91 b8 0d 	lds	r24, 0x0DB8
    d776:	90 91 b9 0d 	lds	r25, 0x0DB9
    d77a:	e3 e0       	ldi	r30, 0x03	; 3
    d77c:	96 95       	lsr	r25
    d77e:	87 95       	ror	r24
    d780:	ea 95       	dec	r30
    d782:	e1 f7       	brne	.-8      	; 0xd77c <update_player+0x86>
    d784:	4c 96       	adiw	r24, 0x1c	; 28
    d786:	82 3d       	cpi	r24, 0xD2	; 210
    d788:	91 05       	cpc	r25, r1
    d78a:	08 f4       	brcc	.+2      	; 0xd78e <update_player+0x98>
    d78c:	3f c0       	rjmp	.+126    	; 0xd80c <update_player+0x116>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    d78e:	05 ff       	sbrs	r16, 5
    d790:	02 c0       	rjmp	.+4      	; 0xd796 <update_player+0xa0>
				{
					space_ship_speed = 0;
    d792:	00 e0       	ldi	r16, 0x00	; 0
    d794:	01 c0       	rjmp	.+2      	; 0xd798 <update_player+0xa2>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    d796:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(game.flags & BOSS_APROACHING))
    d798:	80 91 d7 0d 	lds	r24, 0x0DD7
    d79c:	86 fd       	sbrc	r24, 6
    d79e:	07 c0       	rjmp	.+14     	; 0xd7ae <update_player+0xb8>
				{
					game.flags |= BOSS_APROACHING;
    d7a0:	80 64       	ori	r24, 0x40	; 64
    d7a2:	80 93 d7 0d 	sts	0x0DD7, r24
					explode_all_enemies();
    d7a6:	0e 94 4b 5b 	call	0xb696	; 0xb696 <explode_all_enemies>
					StopSong();
    d7aa:	0e 94 cd 40 	call	0x819a	; 0x819a <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(game.flags & BOSS_REACHED))
    d7ae:	80 91 b8 0d 	lds	r24, 0x0DB8
    d7b2:	90 91 b9 0d 	lds	r25, 0x0DB9
    d7b6:	73 e0       	ldi	r23, 0x03	; 3
    d7b8:	96 95       	lsr	r25
    d7ba:	87 95       	ror	r24
    d7bc:	7a 95       	dec	r23
    d7be:	e1 f7       	brne	.-8      	; 0xd7b8 <update_player+0xc2>
    d7c0:	4c 96       	adiw	r24, 0x1c	; 28
    d7c2:	8a 3f       	cpi	r24, 0xFA	; 250
    d7c4:	91 05       	cpc	r25, r1
    d7c6:	68 f0       	brcs	.+26     	; 0xd7e2 <update_player+0xec>
    d7c8:	80 91 d7 0d 	lds	r24, 0x0DD7
    d7cc:	87 fd       	sbrc	r24, 7
    d7ce:	09 c0       	rjmp	.+18     	; 0xd7e2 <update_player+0xec>
				{
					game.flags |= BOSS_REACHED;
    d7d0:	80 68       	ori	r24, 0x80	; 128
    d7d2:	80 93 d7 0d 	sts	0x0DD7, r24
					init_enemy_boss_turrets();
    d7d6:	0e 94 97 56 	call	0xad2e	; 0xad2e <init_enemy_boss_turrets>
					StartSong(planetsong);
    d7da:	80 e4       	ldi	r24, 0x40	; 64
    d7dc:	9a e0       	ldi	r25, 0x0A	; 10
    d7de:	0e 94 a4 40 	call	0x8148	; 0x8148 <StartSong>
				}
				if ((game.flags & BOSS_REACHED) && (game.active_enemies == 0))
    d7e2:	80 91 d7 0d 	lds	r24, 0x0DD7
    d7e6:	87 ff       	sbrs	r24, 7
    d7e8:	12 c0       	rjmp	.+36     	; 0xd80e <update_player+0x118>
    d7ea:	80 91 d3 0d 	lds	r24, 0x0DD3
    d7ee:	81 11       	cpse	r24, r1
    d7f0:	0e c0       	rjmp	.+28     	; 0xd80e <update_player+0x118>
				{
					init_enemy_boss_eyes();
    d7f2:	0e 94 b7 56 	call	0xad6e	; 0xad6e <init_enemy_boss_eyes>
					game.eye_clusters--;
    d7f6:	80 91 d6 0d 	lds	r24, 0x0DD6
    d7fa:	81 50       	subi	r24, 0x01	; 1
    d7fc:	80 93 d6 0d 	sts	0x0DD6, r24
					if (game.eye_clusters == 0)
    d800:	81 11       	cpse	r24, r1
    d802:	05 c0       	rjmp	.+10     	; 0xd80e <update_player+0x118>
					{
						game.level_ended = 1;
    d804:	81 e0       	ldi	r24, 0x01	; 1
    d806:	80 93 d5 0d 	sts	0x0DD5, r24
    d80a:	01 c0       	rjmp	.+2      	; 0xd80e <update_player+0x118>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    d80c:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    d80e:	f6 01       	movw	r30, r12
    d810:	80 85       	ldd	r24, Z+8	; 0x08
    d812:	85 ff       	sbrs	r24, 5
    d814:	08 c0       	rjmp	.+16     	; 0xd826 <update_player+0x130>
    d816:	80 91 cd 0d 	lds	r24, 0x0DCD
    d81a:	89 30       	cpi	r24, 0x09	; 9
    d81c:	21 f0       	breq	.+8      	; 0xd826 <update_player+0x130>
			player->shared.vx = space_ship_speed*2;
    d81e:	00 0f       	add	r16, r16
    d820:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    d822:	14 82       	std	Z+4, r1	; 0x04
    d824:	43 c0       	rjmp	.+134    	; 0xd8ac <update_player+0x1b6>
		} else {
			player->shared.vy = 0;
    d826:	f6 01       	movw	r30, r12
    d828:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    d82a:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    d82c:	e8 58       	subi	r30, 0x88	; 136
    d82e:	ff 4f       	sbci	r31, 0xFF	; 255
    d830:	20 81       	ld	r18, Z
    d832:	25 ff       	sbrs	r18, 5
    d834:	11 c0       	rjmp	.+34     	; 0xd858 <update_player+0x162>
    d836:	f6 01       	movw	r30, r12
    d838:	82 81       	ldd	r24, Z+2	; 0x02
    d83a:	93 81       	ldd	r25, Z+3	; 0x03
    d83c:	63 e0       	ldi	r22, 0x03	; 3
    d83e:	96 95       	lsr	r25
    d840:	87 95       	ror	r24
    d842:	6a 95       	dec	r22
    d844:	e1 f7       	brne	.-8      	; 0xd83e <update_player+0x148>
    d846:	01 96       	adiw	r24, 0x01	; 1
    d848:	40 91 c8 0d 	lds	r20, 0x0DC8
    d84c:	50 e0       	ldi	r21, 0x00	; 0
    d84e:	84 17       	cp	r24, r20
    d850:	95 07       	cpc	r25, r21
    d852:	10 f4       	brcc	.+4      	; 0xd858 <update_player+0x162>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    d854:	8c e3       	ldi	r24, 0x3C	; 60
    d856:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    d858:	27 ff       	sbrs	r18, 7
    d85a:	11 c0       	rjmp	.+34     	; 0xd87e <update_player+0x188>
    d85c:	f6 01       	movw	r30, r12
    d85e:	40 81       	ld	r20, Z
    d860:	51 81       	ldd	r21, Z+1	; 0x01
    d862:	48 5e       	subi	r20, 0xE8	; 232
    d864:	5f 4f       	sbci	r21, 0xFF	; 255
    d866:	80 91 b8 0d 	lds	r24, 0x0DB8
    d86a:	90 91 b9 0d 	lds	r25, 0x0DB9
    d86e:	80 52       	subi	r24, 0x20	; 32
    d870:	9f 4f       	sbci	r25, 0xFF	; 255
    d872:	48 17       	cp	r20, r24
    d874:	59 07       	cpc	r21, r25
    d876:	18 f4       	brcc	.+6      	; 0xd87e <update_player+0x188>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    d878:	8c e3       	ldi	r24, 0x3C	; 60
    d87a:	80 0f       	add	r24, r16
    d87c:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d87e:	26 ff       	sbrs	r18, 6
    d880:	0c c0       	rjmp	.+24     	; 0xd89a <update_player+0x1a4>
    d882:	f6 01       	movw	r30, r12
    d884:	40 81       	ld	r20, Z
    d886:	51 81       	ldd	r21, Z+1	; 0x01
    d888:	80 91 b8 0d 	lds	r24, 0x0DB8
    d88c:	90 91 b9 0d 	lds	r25, 0x0DB9
    d890:	84 17       	cp	r24, r20
    d892:	95 07       	cpc	r25, r21
    d894:	10 f4       	brcc	.+4      	; 0xd89a <update_player+0x1a4>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    d896:	0c 53       	subi	r16, 0x3C	; 60
    d898:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    d89a:	24 ff       	sbrs	r18, 4
    d89c:	07 c0       	rjmp	.+14     	; 0xd8ac <update_player+0x1b6>
    d89e:	f6 01       	movw	r30, r12
    d8a0:	82 81       	ldd	r24, Z+2	; 0x02
    d8a2:	93 81       	ldd	r25, Z+3	; 0x03
    d8a4:	89 2b       	or	r24, r25
    d8a6:	11 f0       	breq	.+4      	; 0xd8ac <update_player+0x1b6>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    d8a8:	84 ec       	ldi	r24, 0xC4	; 196
    d8aa:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d8ac:	c6 01       	movw	r24, r12
    d8ae:	8c 5a       	subi	r24, 0xAC	; 172
    d8b0:	9f 4f       	sbci	r25, 0xFF	; 255
    d8b2:	42 c1       	rjmp	.+644    	; 0xdb38 <update_player+0x442>
	}
	else if (player->flags & (IDLE|RUNNING))
    d8b4:	80 2f       	mov	r24, r16
    d8b6:	8a 70       	andi	r24, 0x0A	; 10
    d8b8:	09 f4       	brne	.+2      	; 0xd8bc <update_player+0x1c6>
    d8ba:	96 c0       	rjmp	.+300    	; 0xd9e8 <update_player+0x2f2>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    d8bc:	f6 01       	movw	r30, r12
    d8be:	44 85       	ldd	r20, Z+12	; 0x0c
    d8c0:	63 85       	ldd	r22, Z+11	; 0x0b
    d8c2:	c6 01       	movw	r24, r12
    d8c4:	0e 94 e9 59 	call	0xb3d2	; 0xb3d2 <on_solid_ground>
    d8c8:	81 11       	cpse	r24, r1
    d8ca:	06 c0       	rjmp	.+12     	; 0xd8d8 <update_player+0x1e2>
		{
			player->shared.gravity = GRAVITY;
    d8cc:	88 ec       	ldi	r24, 0xC8	; 200
    d8ce:	f6 01       	movw	r30, r12
    d8d0:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    d8d2:	81 e0       	ldi	r24, 0x01	; 1
    d8d4:	80 87       	std	Z+8, r24	; 0x08
    d8d6:	0e c1       	rjmp	.+540    	; 0xdaf4 <update_player+0x3fe>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    d8d8:	f6 01       	movw	r30, r12
    d8da:	e8 58       	subi	r30, 0x88	; 136
    d8dc:	ff 4f       	sbci	r31, 0xFF	; 255
    d8de:	80 81       	ld	r24, Z
    d8e0:	85 ff       	sbrs	r24, 5
    d8e2:	25 c0       	rjmp	.+74     	; 0xd92e <update_player+0x238>
			{
				player->shared.y += 16;
    d8e4:	f6 01       	movw	r30, r12
    d8e6:	82 81       	ldd	r24, Z+2	; 0x02
    d8e8:	93 81       	ldd	r25, Z+3	; 0x03
    d8ea:	40 96       	adiw	r24, 0x10	; 16
    d8ec:	93 83       	std	Z+3, r25	; 0x03
    d8ee:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    d8f0:	82 85       	ldd	r24, Z+10	; 0x0a
    d8f2:	81 30       	cpi	r24, 0x01	; 1
    d8f4:	29 f4       	brne	.+10     	; 0xd900 <update_player+0x20a>
				{
					player->shared.x -= 8;
    d8f6:	80 81       	ld	r24, Z
    d8f8:	91 81       	ldd	r25, Z+1	; 0x01
    d8fa:	08 97       	sbiw	r24, 0x08	; 8
    d8fc:	91 83       	std	Z+1, r25	; 0x01
    d8fe:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    d900:	f6 01       	movw	r30, r12
    d902:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    d904:	84 e0       	ldi	r24, 0x04	; 4
    d906:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    d908:	83 e0       	ldi	r24, 0x03	; 3
    d90a:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    d90c:	81 e0       	ldi	r24, 0x01	; 1
    d90e:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    d910:	63 e0       	ldi	r22, 0x03	; 3
    d912:	83 e0       	ldi	r24, 0x03	; 3
    d914:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    d918:	24 e0       	ldi	r18, 0x04	; 4
    d91a:	12 9f       	mul	r17, r18
    d91c:	f0 01       	movw	r30, r0
    d91e:	11 24       	eor	r1, r1
    d920:	ed 51       	subi	r30, 0x1D	; 29
    d922:	f0 4f       	sbci	r31, 0xF0	; 240
    d924:	43 81       	ldd	r20, Z+3	; 0x03
    d926:	c6 01       	movw	r24, r12
    d928:	8c 59       	subi	r24, 0x9C	; 156
    d92a:	9f 4f       	sbci	r25, 0xFF	; 255
    d92c:	45 c0       	rjmp	.+138    	; 0xd9b8 <update_player+0x2c2>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    d92e:	87 ff       	sbrs	r24, 7
    d930:	1d c0       	rjmp	.+58     	; 0xd96c <update_player+0x276>
    d932:	f6 01       	movw	r30, r12
    d934:	20 81       	ld	r18, Z
    d936:	31 81       	ldd	r19, Z+1	; 0x01
    d938:	53 e0       	ldi	r21, 0x03	; 3
    d93a:	36 95       	lsr	r19
    d93c:	27 95       	ror	r18
    d93e:	5a 95       	dec	r21
    d940:	e1 f7       	brne	.-8      	; 0xd93a <update_player+0x244>
    d942:	2e 5f       	subi	r18, 0xFE	; 254
    d944:	3f 4f       	sbci	r19, 0xFF	; 255
    d946:	40 91 c7 0d 	lds	r20, 0x0DC7
    d94a:	50 e0       	ldi	r21, 0x00	; 0
    d94c:	24 17       	cp	r18, r20
    d94e:	35 07       	cpc	r19, r21
    d950:	68 f4       	brcc	.+26     	; 0xd96c <update_player+0x276>
			{
				player->shared.vx = RUN_SPEED;
    d952:	8c e3       	ldi	r24, 0x3C	; 60
    d954:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    d956:	82 e0       	ldi	r24, 0x02	; 2
    d958:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    d95a:	81 e0       	ldi	r24, 0x01	; 1
    d95c:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d95e:	c6 01       	movw	r24, r12
    d960:	8c 5a       	subi	r24, 0xAC	; 172
    d962:	9f 4f       	sbci	r25, 0xFF	; 255
    d964:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    d968:	40 e0       	ldi	r20, 0x00	; 0
    d96a:	2a c0       	rjmp	.+84     	; 0xd9c0 <update_player+0x2ca>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d96c:	86 ff       	sbrs	r24, 6
    d96e:	16 c0       	rjmp	.+44     	; 0xd99c <update_player+0x2a6>
    d970:	f6 01       	movw	r30, r12
    d972:	20 81       	ld	r18, Z
    d974:	31 81       	ldd	r19, Z+1	; 0x01
    d976:	80 91 b8 0d 	lds	r24, 0x0DB8
    d97a:	90 91 b9 0d 	lds	r25, 0x0DB9
    d97e:	82 17       	cp	r24, r18
    d980:	93 07       	cpc	r25, r19
    d982:	60 f4       	brcc	.+24     	; 0xd99c <update_player+0x2a6>
			{
				player->shared.vx = -RUN_SPEED;
    d984:	84 ec       	ldi	r24, 0xC4	; 196
    d986:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    d988:	82 e0       	ldi	r24, 0x02	; 2
    d98a:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    d98c:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    d98e:	c6 01       	movw	r24, r12
    d990:	8c 5a       	subi	r24, 0xAC	; 172
    d992:	9f 4f       	sbci	r25, 0xFF	; 255
    d994:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    d998:	41 e0       	ldi	r20, 0x01	; 1
    d99a:	12 c0       	rjmp	.+36     	; 0xd9c0 <update_player+0x2ca>
			}
			else
			{
				player->flags = IDLE;
    d99c:	88 e0       	ldi	r24, 0x08	; 8
    d99e:	f6 01       	movw	r30, r12
    d9a0:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    d9a2:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    d9a4:	24 e0       	ldi	r18, 0x04	; 4
    d9a6:	12 9f       	mul	r17, r18
    d9a8:	f0 01       	movw	r30, r0
    d9aa:	11 24       	eor	r1, r1
    d9ac:	ed 51       	subi	r30, 0x1D	; 29
    d9ae:	f0 4f       	sbci	r31, 0xF0	; 240
    d9b0:	43 81       	ldd	r20, Z+3	; 0x03
    d9b2:	c6 01       	movw	r24, r12
    d9b4:	84 5b       	subi	r24, 0xB4	; 180
    d9b6:	9f 4f       	sbci	r25, 0xFF	; 255
    d9b8:	49 83       	std	Y+1, r20	; 0x01
    d9ba:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    d9be:	49 81       	ldd	r20, Y+1	; 0x01
    d9c0:	bc 01       	movw	r22, r24
    d9c2:	81 2f       	mov	r24, r17
    d9c4:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
			}
			if (player->controls.pressed & BTN_A && !(player->flags & PRONE))
    d9c8:	f7 01       	movw	r30, r14
    d9ca:	80 81       	ld	r24, Z
    d9cc:	91 81       	ldd	r25, Z+1	; 0x01
    d9ce:	90 ff       	sbrs	r25, 0
    d9d0:	ba c0       	rjmp	.+372    	; 0xdb46 <update_player+0x450>
    d9d2:	f6 01       	movw	r30, r12
    d9d4:	80 85       	ldd	r24, Z+8	; 0x08
    d9d6:	82 fd       	sbrc	r24, 2
    d9d8:	b6 c0       	rjmp	.+364    	; 0xdb46 <update_player+0x450>
			{
				player->shared.vy = -JUMP_SPEED;
    d9da:	81 e8       	ldi	r24, 0x81	; 129
    d9dc:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    d9de:	88 ec       	ldi	r24, 0xC8	; 200
    d9e0:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    d9e2:	81 e0       	ldi	r24, 0x01	; 1
    d9e4:	80 87       	std	Z+8, r24	; 0x08
    d9e6:	82 c0       	rjmp	.+260    	; 0xdaec <update_player+0x3f6>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    d9e8:	00 ff       	sbrs	r16, 0
    d9ea:	4c c0       	rjmp	.+152    	; 0xda84 <update_player+0x38e>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    d9ec:	f6 01       	movw	r30, r12
    d9ee:	e8 58       	subi	r30, 0x88	; 136
    d9f0:	ff 4f       	sbci	r31, 0xFF	; 255
    d9f2:	60 81       	ld	r22, Z
    d9f4:	c6 01       	movw	r24, r12
    d9f6:	84 5a       	subi	r24, 0xA4	; 164
    d9f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d9fa:	67 ff       	sbrs	r22, 7
    d9fc:	18 c0       	rjmp	.+48     	; 0xda2e <update_player+0x338>
    d9fe:	f6 01       	movw	r30, r12
    da00:	20 81       	ld	r18, Z
    da02:	31 81       	ldd	r19, Z+1	; 0x01
    da04:	43 e0       	ldi	r20, 0x03	; 3
    da06:	36 95       	lsr	r19
    da08:	27 95       	ror	r18
    da0a:	4a 95       	dec	r20
    da0c:	e1 f7       	brne	.-8      	; 0xda06 <update_player+0x310>
    da0e:	2e 5f       	subi	r18, 0xFE	; 254
    da10:	3f 4f       	sbci	r19, 0xFF	; 255
    da12:	40 91 c7 0d 	lds	r20, 0x0DC7
    da16:	50 e0       	ldi	r21, 0x00	; 0
    da18:	24 17       	cp	r18, r20
    da1a:	35 07       	cpc	r19, r21
    da1c:	40 f4       	brcc	.+16     	; 0xda2e <update_player+0x338>
		{
			player->shared.vx = RUN_SPEED;
    da1e:	2c e3       	ldi	r18, 0x3C	; 60
    da20:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    da22:	21 e0       	ldi	r18, 0x01	; 1
    da24:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    da26:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    da2a:	40 e0       	ldi	r20, 0x00	; 0
    da2c:	20 c0       	rjmp	.+64     	; 0xda6e <update_player+0x378>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    da2e:	66 ff       	sbrs	r22, 6
    da30:	11 c0       	rjmp	.+34     	; 0xda54 <update_player+0x35e>
    da32:	f6 01       	movw	r30, r12
    da34:	40 81       	ld	r20, Z
    da36:	51 81       	ldd	r21, Z+1	; 0x01
    da38:	20 91 b8 0d 	lds	r18, 0x0DB8
    da3c:	30 91 b9 0d 	lds	r19, 0x0DB9
    da40:	24 17       	cp	r18, r20
    da42:	35 07       	cpc	r19, r21
    da44:	38 f4       	brcc	.+14     	; 0xda54 <update_player+0x35e>
		{
			player->shared.vx = -RUN_SPEED;
    da46:	24 ec       	ldi	r18, 0xC4	; 196
    da48:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    da4a:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    da4c:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    da50:	41 e0       	ldi	r20, 0x01	; 1
    da52:	0d c0       	rjmp	.+26     	; 0xda6e <update_player+0x378>
		}
		else
		{
			player->shared.vx = 0;
    da54:	f6 01       	movw	r30, r12
    da56:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    da58:	24 e0       	ldi	r18, 0x04	; 4
    da5a:	12 9f       	mul	r17, r18
    da5c:	f0 01       	movw	r30, r0
    da5e:	11 24       	eor	r1, r1
    da60:	ed 51       	subi	r30, 0x1D	; 29
    da62:	f0 4f       	sbci	r31, 0xF0	; 240
    da64:	43 81       	ldd	r20, Z+3	; 0x03
    da66:	49 83       	std	Y+1, r20	; 0x01
    da68:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    da6c:	49 81       	ldd	r20, Y+1	; 0x01
    da6e:	bc 01       	movw	r22, r24
    da70:	81 2f       	mov	r24, r17
    da72:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    da76:	f6 01       	movw	r30, r12
    da78:	86 81       	ldd	r24, Z+6	; 0x06
    da7a:	81 11       	cpse	r24, r1
    da7c:	64 c0       	rjmp	.+200    	; 0xdb46 <update_player+0x450>
		{
			player->flags = IDLE;
    da7e:	88 e0       	ldi	r24, 0x08	; 8
    da80:	80 87       	std	Z+8, r24	; 0x08
    da82:	61 c0       	rjmp	.+194    	; 0xdb46 <update_player+0x450>
		}
	}
	else if (player->flags & PRONE)
    da84:	02 ff       	sbrs	r16, 2
    da86:	5f c0       	rjmp	.+190    	; 0xdb46 <update_player+0x450>
	{
		if (player->controls.pressed & BTN_UP)
    da88:	f7 01       	movw	r30, r14
    da8a:	80 81       	ld	r24, Z
    da8c:	91 81       	ldd	r25, Z+1	; 0x01
    da8e:	84 ff       	sbrs	r24, 4
    da90:	16 c0       	rjmp	.+44     	; 0xdabe <update_player+0x3c8>
		{
			player->flags = IDLE;	
    da92:	88 e0       	ldi	r24, 0x08	; 8
    da94:	f6 01       	movw	r30, r12
    da96:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    da98:	82 81       	ldd	r24, Z+2	; 0x02
    da9a:	93 81       	ldd	r25, Z+3	; 0x03
    da9c:	40 97       	sbiw	r24, 0x10	; 16
    da9e:	93 83       	std	Z+3, r25	; 0x03
    daa0:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    daa2:	82 85       	ldd	r24, Z+10	; 0x0a
    daa4:	81 30       	cpi	r24, 0x01	; 1
    daa6:	29 f4       	brne	.+10     	; 0xdab2 <update_player+0x3bc>
			{
				player->shared.x += 8;
    daa8:	80 81       	ld	r24, Z
    daaa:	91 81       	ldd	r25, Z+1	; 0x01
    daac:	08 96       	adiw	r24, 0x08	; 8
    daae:	91 83       	std	Z+1, r25	; 0x01
    dab0:	80 83       	st	Z, r24
			}
			player->width = 2;
    dab2:	82 e0       	ldi	r24, 0x02	; 2
    dab4:	f6 01       	movw	r30, r12
    dab6:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    dab8:	83 e0       	ldi	r24, 0x03	; 3
    daba:	84 87       	std	Z+12, r24	; 0x0c
    dabc:	44 c0       	rjmp	.+136    	; 0xdb46 <update_player+0x450>
		}
		else if (player->controls.pressed & BTN_A)
    dabe:	90 ff       	sbrs	r25, 0
    dac0:	28 c0       	rjmp	.+80     	; 0xdb12 <update_player+0x41c>
		{
			player->flags = JUMPING;
    dac2:	81 e0       	ldi	r24, 0x01	; 1
    dac4:	f6 01       	movw	r30, r12
    dac6:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dac8:	82 81       	ldd	r24, Z+2	; 0x02
    daca:	93 81       	ldd	r25, Z+3	; 0x03
    dacc:	40 97       	sbiw	r24, 0x10	; 16
    dace:	93 83       	std	Z+3, r25	; 0x03
    dad0:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    dad2:	82 85       	ldd	r24, Z+10	; 0x0a
    dad4:	81 30       	cpi	r24, 0x01	; 1
    dad6:	29 f4       	brne	.+10     	; 0xdae2 <update_player+0x3ec>
			{
				player->shared.x += 8;
    dad8:	80 81       	ld	r24, Z
    dada:	91 81       	ldd	r25, Z+1	; 0x01
    dadc:	08 96       	adiw	r24, 0x08	; 8
    dade:	91 83       	std	Z+1, r25	; 0x01
    dae0:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    dae2:	81 e8       	ldi	r24, 0x81	; 129
    dae4:	f6 01       	movw	r30, r12
    dae6:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    dae8:	88 ec       	ldi	r24, 0xC8	; 200
    daea:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    daec:	82 e0       	ldi	r24, 0x02	; 2
    daee:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    daf0:	83 e0       	ldi	r24, 0x03	; 3
    daf2:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    daf4:	24 e0       	ldi	r18, 0x04	; 4
    daf6:	12 9f       	mul	r17, r18
    daf8:	f0 01       	movw	r30, r0
    dafa:	11 24       	eor	r1, r1
    dafc:	ed 51       	subi	r30, 0x1D	; 29
    dafe:	f0 4f       	sbci	r31, 0xF0	; 240
    db00:	43 81       	ldd	r20, Z+3	; 0x03
    db02:	c6 01       	movw	r24, r12
    db04:	84 5a       	subi	r24, 0xA4	; 164
    db06:	9f 4f       	sbci	r25, 0xFF	; 255
    db08:	49 83       	std	Y+1, r20	; 0x01
    db0a:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    db0e:	49 81       	ldd	r20, Y+1	; 0x01
    db10:	16 c0       	rjmp	.+44     	; 0xdb3e <update_player+0x448>
		}
		else if (player->controls.pressed & BTN_LEFT)
    db12:	86 ff       	sbrs	r24, 6
    db14:	09 c0       	rjmp	.+18     	; 0xdb28 <update_player+0x432>
		{
			player->direction = D_LEFT;
    db16:	f6 01       	movw	r30, r12
    db18:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    db1a:	c6 01       	movw	r24, r12
    db1c:	8c 59       	subi	r24, 0x9C	; 156
    db1e:	9f 4f       	sbci	r25, 0xFF	; 255
    db20:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    db24:	41 e0       	ldi	r20, 0x01	; 1
    db26:	0b c0       	rjmp	.+22     	; 0xdb3e <update_player+0x448>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    db28:	87 ff       	sbrs	r24, 7
    db2a:	0d c0       	rjmp	.+26     	; 0xdb46 <update_player+0x450>
		{
			player->direction = D_RIGHT;
    db2c:	81 e0       	ldi	r24, 0x01	; 1
    db2e:	f6 01       	movw	r30, r12
    db30:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    db32:	c6 01       	movw	r24, r12
    db34:	8c 59       	subi	r24, 0x9C	; 156
    db36:	9f 4f       	sbci	r25, 0xFF	; 255
    db38:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    db3c:	40 e0       	ldi	r20, 0x00	; 0
    db3e:	bc 01       	movw	r22, r24
    db40:	81 2f       	mov	r24, r17
    db42:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
		}
	}
	return 1;
}
    db46:	81 e0       	ldi	r24, 0x01	; 1
    db48:	0f 90       	pop	r0
    db4a:	df 91       	pop	r29
    db4c:	cf 91       	pop	r28
    db4e:	1f 91       	pop	r17
    db50:	0f 91       	pop	r16
    db52:	ff 90       	pop	r15
    db54:	ef 90       	pop	r14
    db56:	df 90       	pop	r13
    db58:	cf 90       	pop	r12
    db5a:	08 95       	ret

0000db5c <update_level>:
	print_scroll(strCongrats);
	StopSong();
}

u8 update_level()
{
    db5c:	cf 92       	push	r12
    db5e:	df 92       	push	r13
    db60:	ef 92       	push	r14
    db62:	ff 92       	push	r15
    db64:	0f 93       	push	r16
    db66:	cf 93       	push	r28
    db68:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    db6a:	e0 90 d8 0d 	lds	r14, 0x0DD8
    db6e:	f0 90 d9 0d 	lds	r15, 0x0DD9
    db72:	c0 90 b8 0d 	lds	r12, 0x0DB8
    db76:	d0 90 b9 0d 	lds	r13, 0x0DB9
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    db7a:	80 91 d2 0d 	lds	r24, 0x0DD2
    db7e:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    db80:	8c 33       	cpi	r24, 0x3C	; 60
    db82:	19 f0       	breq	.+6      	; 0xdb8a <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    db84:	80 93 d2 0d 	sts	0x0DD2, r24
    db88:	0f c0       	rjmp	.+30     	; 0xdba8 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    db8a:	10 92 d2 0d 	sts	0x0DD2, r1
		if (game.time != 65535) game.time++;
    db8e:	80 91 be 0d 	lds	r24, 0x0DBE
    db92:	90 91 bf 0d 	lds	r25, 0x0DBF
    db96:	8f 3f       	cpi	r24, 0xFF	; 255
    db98:	2f ef       	ldi	r18, 0xFF	; 255
    db9a:	92 07       	cpc	r25, r18
    db9c:	29 f0       	breq	.+10     	; 0xdba8 <update_level+0x4c>
    db9e:	01 96       	adiw	r24, 0x01	; 1
    dba0:	90 93 bf 0d 	sts	0x0DBF, r25
    dba4:	80 93 be 0d 	sts	0x0DBE, r24
	}
	
	if (is_space())
    dba8:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    dbac:	88 23       	and	r24, r24
    dbae:	a1 f1       	breq	.+104    	; 0xdc18 <update_level+0xbc>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    dbb0:	c6 01       	movw	r24, r12
    dbb2:	23 e0       	ldi	r18, 0x03	; 3
    dbb4:	96 95       	lsr	r25
    dbb6:	87 95       	ror	r24
    dbb8:	2a 95       	dec	r18
    dbba:	e1 f7       	brne	.-8      	; 0xdbb4 <update_level+0x58>
    dbbc:	4c 96       	adiw	r24, 0x1c	; 28
    dbbe:	20 91 c7 0d 	lds	r18, 0x0DC7
    dbc2:	30 e0       	ldi	r19, 0x00	; 0
    dbc4:	82 17       	cp	r24, r18
    dbc6:	93 07       	cpc	r25, r19
    dbc8:	70 f4       	brcc	.+28     	; 0xdbe6 <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    dbca:	20 91 cd 0d 	lds	r18, 0x0DCD
    dbce:	29 30       	cpi	r18, 0x09	; 9
    dbd0:	39 f4       	brne	.+14     	; 0xdbe0 <update_level+0x84>
    dbd2:	82 3d       	cpi	r24, 0xD2	; 210
    dbd4:	91 05       	cpc	r25, r1
    dbd6:	20 f0       	brcs	.+8      	; 0xdbe0 <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    dbd8:	80 91 d2 0d 	lds	r24, 0x0DD2
    dbdc:	80 fd       	sbrc	r24, 0
    dbde:	34 c0       	rjmp	.+104    	; 0xdc48 <update_level+0xec>
    dbe0:	0e 94 96 59 	call	0xb32c	; 0xb32c <move_camera_x>
    dbe4:	31 c0       	rjmp	.+98     	; 0xdc48 <update_level+0xec>
    dbe6:	80 91 e0 0d 	lds	r24, 0x0DE0
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x+24 >= game.camera_x+CAMERA_WIDTH*8 && game.current_level_index != 9)
    dbea:	a7 01       	movw	r20, r14
    dbec:	48 5e       	subi	r20, 0xE8	; 232
    dbee:	5f 4f       	sbci	r21, 0xFF	; 255
    dbf0:	96 01       	movw	r18, r12
    dbf2:	20 52       	subi	r18, 0x20	; 32
    dbf4:	3f 4f       	sbci	r19, 0xFF	; 255
    dbf6:	42 17       	cp	r20, r18
    dbf8:	53 07       	cpc	r21, r19
    dbfa:	50 f0       	brcs	.+20     	; 0xdc10 <update_level+0xb4>
    dbfc:	90 91 cd 0d 	lds	r25, 0x0DCD
    dc00:	99 30       	cpi	r25, 0x09	; 9
    dc02:	31 f0       	breq	.+12     	; 0xdc10 <update_level+0xb4>
		{
			game.level_ended = 1;
    dc04:	91 e0       	ldi	r25, 0x01	; 1
    dc06:	90 93 d5 0d 	sts	0x0DD5, r25
			game.player.flags ^= END_OF_SPACE;
    dc0a:	90 e2       	ldi	r25, 0x20	; 32
    dc0c:	89 27       	eor	r24, r25
    dc0e:	01 c0       	rjmp	.+2      	; 0xdc12 <update_level+0xb6>
		} else {
			game.player.flags |= END_OF_SPACE;
    dc10:	80 62       	ori	r24, 0x20	; 32
    dc12:	80 93 e0 0d 	sts	0x0DE0, r24
    dc16:	18 c0       	rjmp	.+48     	; 0xdc48 <update_level+0xec>
		}
	}
	else if (game.player.shared.vx > 0 &&
    dc18:	80 91 dd 0d 	lds	r24, 0x0DDD
    dc1c:	18 16       	cp	r1, r24
    dc1e:	a4 f4       	brge	.+40     	; 0xdc48 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dc20:	c7 01       	movw	r24, r14
    dc22:	8c 19       	sub	r24, r12
    dc24:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    dc26:	80 37       	cpi	r24, 0x70	; 112
    dc28:	91 05       	cpc	r25, r1
    dc2a:	70 f0       	brcs	.+28     	; 0xdc48 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    dc2c:	96 01       	movw	r18, r12
    dc2e:	83 e0       	ldi	r24, 0x03	; 3
    dc30:	36 95       	lsr	r19
    dc32:	27 95       	ror	r18
    dc34:	8a 95       	dec	r24
    dc36:	e1 f7       	brne	.-8      	; 0xdc30 <update_level+0xd4>
    dc38:	24 5e       	subi	r18, 0xE4	; 228
    dc3a:	3f 4f       	sbci	r19, 0xFF	; 255
    dc3c:	80 91 c7 0d 	lds	r24, 0x0DC7
    dc40:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dc42:	28 17       	cp	r18, r24
    dc44:	39 07       	cpc	r19, r25
    dc46:	60 f2       	brcs	.-104    	; 0xdbe0 <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    dc48:	21 e0       	ldi	r18, 0x01	; 1
    dc4a:	40 91 e7 0d 	lds	r20, 0x0DE7
    dc4e:	6d e1       	ldi	r22, 0x1D	; 29
    dc50:	89 e0       	ldi	r24, 0x09	; 9
    dc52:	0e 94 45 4d 	call	0x9a8a	; 0x9a8a <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    dc56:	40 91 be 0d 	lds	r20, 0x0DBE
    dc5a:	50 91 bf 0d 	lds	r21, 0x0DBF
    dc5e:	21 e0       	ldi	r18, 0x01	; 1
    dc60:	6d e1       	ldi	r22, 0x1D	; 29
    dc62:	8b e1       	ldi	r24, 0x1B	; 27
    dc64:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    dc68:	21 e0       	ldi	r18, 0x01	; 1
    dc6a:	40 91 cb 0d 	lds	r20, 0x0DCB
    dc6e:	6e e1       	ldi	r22, 0x1E	; 30
    dc70:	89 e0       	ldi	r24, 0x09	; 9
    dc72:	0e 94 45 4d 	call	0x9a8a	; 0x9a8a <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    dc76:	40 91 bc 0d 	lds	r20, 0x0DBC
    dc7a:	50 91 bd 0d 	lds	r21, 0x0DBD
    dc7e:	21 e0       	ldi	r18, 0x01	; 1
    dc80:	6e e1       	ldi	r22, 0x1E	; 30
    dc82:	8b e1       	ldi	r24, 0x1B	; 27
    dc84:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    dc88:	40 91 ba 0d 	lds	r20, 0x0DBA
    dc8c:	50 91 bb 0d 	lds	r21, 0x0DBB
    dc90:	21 e0       	ldi	r18, 0x01	; 1
    dc92:	6f e1       	ldi	r22, 0x1F	; 31
    dc94:	8b e1       	ldi	r24, 0x1B	; 27
    dc96:	0e 94 76 4d 	call	0x9aec	; 0x9aec <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    dc9a:	80 91 d5 0d 	lds	r24, 0x0DD5
    dc9e:	88 23       	and	r24, r24
    dca0:	09 f4       	brne	.+2      	; 0xdca4 <update_level+0x148>
    dca2:	8c c0       	rjmp	.+280    	; 0xddbc <update_level+0x260>
    dca4:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    dca8:	81 11       	cpse	r24, r1
    dcaa:	6c c0       	rjmp	.+216    	; 0xdd84 <update_level+0x228>
    dcac:	80 91 e0 0d 	lds	r24, 0x0DE0
    dcb0:	8e 70       	andi	r24, 0x0E	; 14
    dcb2:	09 f4       	brne	.+2      	; 0xdcb6 <update_level+0x15a>
    dcb4:	83 c0       	rjmp	.+262    	; 0xddbc <update_level+0x260>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    dcb6:	40 e0       	ldi	r20, 0x00	; 0
    dcb8:	6e ec       	ldi	r22, 0xCE	; 206
    dcba:	7f e2       	ldi	r23, 0x2F	; 47
    dcbc:	80 e0       	ldi	r24, 0x00	; 0
    dcbe:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
		if (game.player.flags & PRONE) {
    dcc2:	80 91 e0 0d 	lds	r24, 0x0DE0
    dcc6:	82 ff       	sbrs	r24, 2
    dcc8:	1a c0       	rjmp	.+52     	; 0xdcfe <update_level+0x1a2>
			game.player.shared.y -= 16;
    dcca:	40 91 da 0d 	lds	r20, 0x0DDA
    dcce:	50 91 db 0d 	lds	r21, 0x0DDB
    dcd2:	40 51       	subi	r20, 0x10	; 16
    dcd4:	51 09       	sbc	r21, r1
    dcd6:	50 93 db 0d 	sts	0x0DDB, r21
    dcda:	40 93 da 0d 	sts	0x0DDA, r20
			game.player.width = 2;
    dcde:	82 e0       	ldi	r24, 0x02	; 2
    dce0:	80 93 e3 0d 	sts	0x0DE3, r24
			game.player.height = 3;
    dce4:	83 e0       	ldi	r24, 0x03	; 3
    dce6:	80 93 e4 0d 	sts	0x0DE4, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    dcea:	60 91 d8 0d 	lds	r22, 0x0DD8
    dcee:	80 91 b8 0d 	lds	r24, 0x0DB8
    dcf2:	68 1b       	sub	r22, r24
    dcf4:	03 e0       	ldi	r16, 0x03	; 3
    dcf6:	22 e0       	ldi	r18, 0x02	; 2
    dcf8:	80 e0       	ldi	r24, 0x00	; 0
    dcfa:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    dcfe:	6b e0       	ldi	r22, 0x0B	; 11
    dd00:	89 e0       	ldi	r24, 0x09	; 9
    dd02:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
		LBRotateSprites();
    dd06:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
		map_ship();
    dd0a:	0e 94 af 59 	call	0xb35e	; 0xb35e <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    dd0e:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    dd10:	c0 e0       	ldi	r28, 0x00	; 0
	StopSong();
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    dd12:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    dd14:	81 e0       	ldi	r24, 0x01	; 1
    dd16:	90 e0       	ldi	r25, 0x00	; 0
    dd18:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    dd1c:	8c 2f       	mov	r24, r28
    dd1e:	90 e0       	ldi	r25, 0x00	; 0
    dd20:	88 3a       	cpi	r24, 0xA8	; 168
    dd22:	91 05       	cpc	r25, r1
    dd24:	3c f0       	brlt	.+14     	; 0xdd34 <update_level+0x1d8>
			{
				clear_sprites(0, 6);
    dd26:	66 e0       	ldi	r22, 0x06	; 6
    dd28:	80 e0       	ldi	r24, 0x00	; 0
    dd2a:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
				LBRotateSprites();
    dd2e:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
				ship_increment = -3;
    dd32:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    dd34:	8c e2       	ldi	r24, 0x2C	; 44
    dd36:	9e e0       	ldi	r25, 0x0E	; 14
    dd38:	0e 94 98 4c 	call	0x9930	; 0x9930 <LBGetNextFrame>
    dd3c:	40 e0       	ldi	r20, 0x00	; 0
    dd3e:	bc 01       	movw	r22, r24
    dd40:	86 e0       	ldi	r24, 0x06	; 6
    dd42:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    dd46:	02 e0       	ldi	r16, 0x02	; 2
    dd48:	24 e0       	ldi	r18, 0x04	; 4
    dd4a:	4c 2f       	mov	r20, r28
    dd4c:	6e 2d       	mov	r22, r14
    dd4e:	86 e0       	ldi	r24, 0x06	; 6
    dd50:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <LBMoveSprite>
			ship_y += ship_increment;
    dd54:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    dd56:	99 f4       	brne	.+38     	; 0xdd7e <update_level+0x222>
			{
				clear_sprites(6, 8);
    dd58:	68 e0       	ldi	r22, 0x08	; 8
    dd5a:	86 e0       	ldi	r24, 0x06	; 6
    dd5c:	0e 94 52 64 	call	0xc8a4	; 0xc8a4 <clear_sprites>
				LBRotateSprites();
    dd60:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    dd64:	64 e6       	ldi	r22, 0x64	; 100
    dd66:	70 e0       	ldi	r23, 0x00	; 0
    dd68:	82 e3       	ldi	r24, 0x32	; 50
    dd6a:	93 e0       	ldi	r25, 0x03	; 3
    dd6c:	0e 94 fc 69 	call	0xd3f8	; 0xd3f8 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    dd70:	80 91 cd 0d 	lds	r24, 0x0DCD
    dd74:	00 e0       	ldi	r16, 0x00	; 0
    dd76:	23 e0       	ldi	r18, 0x03	; 3
    dd78:	4a e1       	ldi	r20, 0x1A	; 26
    dd7a:	6f ef       	ldi	r22, 0xFF	; 255
    dd7c:	1c c0       	rjmp	.+56     	; 0xddb6 <update_level+0x25a>
				break;
			}
			LBRotateSprites();
    dd7e:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
		}
    dd82:	c8 cf       	rjmp	.-112    	; 0xdd14 <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    dd84:	80 91 cd 0d 	lds	r24, 0x0DCD
    dd88:	89 30       	cpi	r24, 0x09	; 9
    dd8a:	49 f4       	brne	.+18     	; 0xdd9e <update_level+0x242>
			tally_score((char*) strLevelClear, 500);
    dd8c:	64 ef       	ldi	r22, 0xF4	; 244
    dd8e:	71 e0       	ldi	r23, 0x01	; 1
    dd90:	82 e3       	ldi	r24, 0x32	; 50
    dd92:	93 e0       	ldi	r25, 0x03	; 3
    dd94:	0e 94 fc 69 	call	0xd3f8	; 0xd3f8 <tally_score>
			congratulations();
    dd98:	0e 94 84 64 	call	0xc908	; 0xc908 <congratulations>
    dd9c:	2e c0       	rjmp	.+92     	; 0xddfa <update_level+0x29e>
			exit_game();
			return 1;
		} else {
			tally_score((char*) strLevelClear, 100);
    dd9e:	64 e6       	ldi	r22, 0x64	; 100
    dda0:	70 e0       	ldi	r23, 0x00	; 0
    dda2:	82 e3       	ldi	r24, 0x32	; 50
    dda4:	93 e0       	ldi	r25, 0x03	; 3
    dda6:	0e 94 fc 69 	call	0xd3f8	; 0xd3f8 <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    ddaa:	80 91 cd 0d 	lds	r24, 0x0DCD
    ddae:	07 ec       	ldi	r16, 0xC7	; 199
    ddb0:	2d ef       	ldi	r18, 0xFD	; 253
    ddb2:	4c e1       	ldi	r20, 0x1C	; 28
    ddb4:	61 e0       	ldi	r22, 0x01	; 1
    ddb6:	8f 5f       	subi	r24, 0xFF	; 255
    ddb8:	0e 94 77 66 	call	0xccee	; 0xccee <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    ddbc:	80 91 d1 0d 	lds	r24, 0x0DD1
    ddc0:	82 30       	cpi	r24, 0x02	; 2
    ddc2:	11 f0       	breq	.+4      	; 0xddc8 <update_level+0x26c>
			demo_counter = 0;
			exit_game();
			return 1;
		}
	}
	return 0;
    ddc4:	80 e0       	ldi	r24, 0x00	; 0
    ddc6:	1c c0       	rjmp	.+56     	; 0xde00 <update_level+0x2a4>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    ddc8:	80 91 f9 0c 	lds	r24, 0x0CF9
    ddcc:	90 91 fa 0c 	lds	r25, 0x0CFA
    ddd0:	01 96       	adiw	r24, 0x01	; 1
    ddd2:	90 93 fa 0c 	sts	0x0CFA, r25
    ddd6:	80 93 f9 0c 	sts	0x0CF9, r24
		if (ReadJoypad(0) || (demo_counter >= DEMO_LENGTH))
    ddda:	80 e0       	ldi	r24, 0x00	; 0
    dddc:	0e 94 da 3d 	call	0x7bb4	; 0x7bb4 <ReadJoypad>
    dde0:	89 2b       	or	r24, r25
    dde2:	39 f4       	brne	.+14     	; 0xddf2 <update_level+0x296>
    dde4:	80 91 f9 0c 	lds	r24, 0x0CF9
    dde8:	90 91 fa 0c 	lds	r25, 0x0CFA
    ddec:	84 38       	cpi	r24, 0x84	; 132
    ddee:	93 40       	sbci	r25, 0x03	; 3
    ddf0:	48 f3       	brcs	.-46     	; 0xddc4 <update_level+0x268>
		{
			demo_counter = 0;
    ddf2:	10 92 fa 0c 	sts	0x0CFA, r1
    ddf6:	10 92 f9 0c 	sts	0x0CF9, r1
			exit_game();
    ddfa:	0e 94 8a 68 	call	0xd114	; 0xd114 <exit_game>
			return 1;
    ddfe:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
	
}
    de00:	df 91       	pop	r29
    de02:	cf 91       	pop	r28
    de04:	0f 91       	pop	r16
    de06:	ff 90       	pop	r15
    de08:	ef 90       	pop	r14
    de0a:	df 90       	pop	r13
    de0c:	cf 90       	pop	r12
    de0e:	08 95       	ret

0000de10 <update_pause>:
	}
	high_score_counter++;
}

void update_pause()
{
    de10:	ef 92       	push	r14
    de12:	ff 92       	push	r15
    de14:	0f 93       	push	r16
    de16:	1f 93       	push	r17
    de18:	cf 93       	push	r28
    de1a:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    de1c:	c0 91 b5 0c 	lds	r28, 0x0CB5
	u8 y = Screen.scrollY / 8;
    de20:	00 91 b6 0c 	lds	r16, 0x0CB6
	
	if (game.player.controls.pressed & BTN_START)
    de24:	80 91 4c 0e 	lds	r24, 0x0E4C
    de28:	83 ff       	sbrs	r24, 3
    de2a:	63 c0       	rjmp	.+198    	; 0xdef2 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    de2c:	06 95       	lsr	r16
    de2e:	06 95       	lsr	r16
    de30:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    de32:	10 e0       	ldi	r17, 0x00	; 0
	high_score_counter++;
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    de34:	c6 95       	lsr	r28
    de36:	c6 95       	lsr	r28
    de38:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    de3a:	d0 e0       	ldi	r29, 0x00	; 0
    de3c:	c8 01       	movw	r24, r16
    de3e:	06 96       	adiw	r24, 0x06	; 6
    de40:	2e e1       	ldi	r18, 0x1E	; 30
    de42:	e2 2e       	mov	r14, r18
    de44:	f1 2c       	mov	r15, r1
    de46:	b7 01       	movw	r22, r14
    de48:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    de4c:	9e 01       	movw	r18, r28
    de4e:	28 5f       	subi	r18, 0xF8	; 248
    de50:	3f 4f       	sbci	r19, 0xFF	; 255
    de52:	40 e8       	ldi	r20, 0x80	; 128
    de54:	58 e5       	ldi	r21, 0x58	; 88
    de56:	68 2f       	mov	r22, r24
    de58:	82 2f       	mov	r24, r18
    de5a:	8f 71       	andi	r24, 0x1F	; 31
    de5c:	0e 94 ba 4b 	call	0x9774	; 0x9774 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    de60:	c8 01       	movw	r24, r16
    de62:	09 96       	adiw	r24, 0x09	; 9
    de64:	b7 01       	movw	r22, r14
    de66:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    de6a:	9e 01       	movw	r18, r28
    de6c:	23 5f       	subi	r18, 0xF3	; 243
    de6e:	3f 4f       	sbci	r19, 0xFF	; 255
    de70:	4e e3       	ldi	r20, 0x3E	; 62
    de72:	53 e0       	ldi	r21, 0x03	; 3
    de74:	68 2f       	mov	r22, r24
    de76:	82 2f       	mov	r24, r18
    de78:	8f 71       	andi	r24, 0x1F	; 31
    de7a:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    de7e:	c8 01       	movw	r24, r16
    de80:	0c 96       	adiw	r24, 0x0c	; 12
    de82:	b7 01       	movw	r22, r14
    de84:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    de88:	2a 96       	adiw	r28, 0x0a	; 10
    de8a:	44 e4       	ldi	r20, 0x44	; 68
    de8c:	53 e0       	ldi	r21, 0x03	; 3
    de8e:	68 2f       	mov	r22, r24
    de90:	8c 2f       	mov	r24, r28
    de92:	8f 71       	andi	r24, 0x1F	; 31
    de94:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    de98:	64 e1       	ldi	r22, 0x14	; 20
    de9a:	80 e0       	ldi	r24, 0x00	; 0
    de9c:	0e 94 aa 65 	call	0xcb54	; 0xcb54 <hide_sprites>
		LBRotateSprites();
    dea0:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    dea4:	81 e0       	ldi	r24, 0x01	; 1
    dea6:	90 e0       	ldi	r25, 0x00	; 0
    dea8:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    deac:	60 e0       	ldi	r22, 0x00	; 0
    deae:	8c e4       	ldi	r24, 0x4C	; 76
    deb0:	9e e0       	ldi	r25, 0x0E	; 14
    deb2:	0e 94 be 4c 	call	0x997c	; 0x997c <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    deb6:	80 91 4c 0e 	lds	r24, 0x0E4C
    deba:	90 91 4d 0e 	lds	r25, 0x0E4D
    debe:	83 ff       	sbrs	r24, 3
    dec0:	08 c0       	rjmp	.+16     	; 0xded2 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    dec2:	df 91       	pop	r29
    dec4:	cf 91       	pop	r28
    dec6:	1f 91       	pop	r17
    dec8:	0f 91       	pop	r16
    deca:	ff 90       	pop	r15
    decc:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    dece:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    ded2:	91 ff       	sbrs	r25, 1
    ded4:	e7 cf       	rjmp	.-50     	; 0xdea4 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    ded6:	60 e0       	ldi	r22, 0x00	; 0
    ded8:	70 e0       	ldi	r23, 0x00	; 0
    deda:	82 e2       	ldi	r24, 0x22	; 34
    dedc:	93 e0       	ldi	r25, 0x03	; 3
    dede:	0e 94 fc 69 	call	0xd3f8	; 0xd3f8 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    dee2:	df 91       	pop	r29
    dee4:	cf 91       	pop	r28
    dee6:	1f 91       	pop	r17
    dee8:	0f 91       	pop	r16
    deea:	ff 90       	pop	r15
    deec:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    deee:	0c 94 8a 68 	jmp	0xd114	; 0xd114 <exit_game>
				break;
			}
		}
	}
}
    def2:	df 91       	pop	r29
    def4:	cf 91       	pop	r28
    def6:	1f 91       	pop	r17
    def8:	0f 91       	pop	r16
    defa:	ff 90       	pop	r15
    defc:	ef 90       	pop	r14
    defe:	08 95       	ret

0000df00 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    df00:	cf 92       	push	r12
    df02:	df 92       	push	r13
    df04:	ff 92       	push	r15
    df06:	0f 93       	push	r16
    df08:	1f 93       	push	r17
    df0a:	cf 93       	push	r28
    df0c:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    df0e:	20 91 cd 0d 	lds	r18, 0x0DCD
    df12:	f2 2e       	mov	r15, r18
    df14:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    df16:	e2 eb       	ldi	r30, 0xB2	; 178
    df18:	fc e0       	ldi	r31, 0x0C	; 12
    df1a:	84 81       	ldd	r24, Z+4	; 0x04
    df1c:	86 95       	lsr	r24
    df1e:	86 95       	lsr	r24
    df20:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    df22:	08 2f       	mov	r16, r24
    df24:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    df26:	c3 81       	ldd	r28, Z+3	; 0x03
    df28:	c6 95       	lsr	r28
    df2a:	c6 95       	lsr	r28
    df2c:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    df2e:	d0 e0       	ldi	r29, 0x00	; 0
    df30:	c8 01       	movw	r24, r16
    df32:	06 96       	adiw	r24, 0x06	; 6
    df34:	2e e1       	ldi	r18, 0x1E	; 30
    df36:	c2 2e       	mov	r12, r18
    df38:	d1 2c       	mov	r13, r1
    df3a:	b6 01       	movw	r22, r12
    df3c:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    df40:	9e 01       	movw	r18, r28
    df42:	29 5f       	subi	r18, 0xF9	; 249
    df44:	3f 4f       	sbci	r19, 0xFF	; 255
    df46:	4e e1       	ldi	r20, 0x1E	; 30
    df48:	58 e5       	ldi	r21, 0x58	; 88
    df4a:	68 2f       	mov	r22, r24
    df4c:	82 2f       	mov	r24, r18
    df4e:	8f 71       	andi	r24, 0x1F	; 31
    df50:	0e 94 ba 4b 	call	0x9774	; 0x9774 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    df54:	c8 01       	movw	r24, r16
    df56:	09 96       	adiw	r24, 0x09	; 9
    df58:	b6 01       	movw	r22, r12
    df5a:	0e 94 01 71 	call	0xe202	; 0xe202 <__divmodhi4>
    df5e:	be 01       	movw	r22, r28
    df60:	68 5f       	subi	r22, 0xF8	; 248
    df62:	7f 4f       	sbci	r23, 0xFF	; 255
    df64:	6f 71       	andi	r22, 0x1F	; 31
    df66:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    df68:	93 e2       	ldi	r25, 0x23	; 35
    df6a:	f9 9e       	mul	r15, r25
    df6c:	90 01       	movw	r18, r0
    df6e:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    df70:	48 2f       	mov	r20, r24
    df72:	c9 01       	movw	r24, r18
    df74:	82 5f       	subi	r24, 0xF2	; 242
    df76:	9e 4f       	sbci	r25, 0xFE	; 254
    df78:	0e 94 d0 65 	call	0xcba0	; 0xcba0 <stream_text_anywhere>
	LBWaitSeconds(3);
    df7c:	83 e0       	ldi	r24, 0x03	; 3
    df7e:	0e 94 ef 4d 	call	0x9bde	; 0x9bde <LBWaitSeconds>
	game.boss.active = 1;
    df82:	81 e0       	ldi	r24, 0x01	; 1
    df84:	80 93 60 0e 	sts	0x0E60, r24
	render_camera_view();
}
    df88:	df 91       	pop	r29
    df8a:	cf 91       	pop	r28
    df8c:	1f 91       	pop	r17
    df8e:	0f 91       	pop	r16
    df90:	ff 90       	pop	r15
    df92:	df 90       	pop	r13
    df94:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    df96:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <render_camera_view>

0000df9a <update_player_ai>:
}

void update_player_ai(Player* player) 
{	 
    df9a:	cf 93       	push	r28
    df9c:	df 93       	push	r29
    df9e:	fc 01       	movw	r30, r24
	 if (player->ai_flags == AI_NOT_READY)
    dfa0:	81 85       	ldd	r24, Z+9	; 0x09
    dfa2:	81 11       	cpse	r24, r1
    dfa4:	0a c0       	rjmp	.+20     	; 0xdfba <update_player_ai+0x20>
	 {
		 player->controls.held = BTN_LEFT;
    dfa6:	df 01       	movw	r26, r30
    dfa8:	a8 58       	subi	r26, 0x88	; 136
    dfaa:	bf 4f       	sbci	r27, 0xFF	; 255
    dfac:	80 e4       	ldi	r24, 0x40	; 64
    dfae:	90 e0       	ldi	r25, 0x00	; 0
    dfb0:	8d 93       	st	X+, r24
    dfb2:	9c 93       	st	X, r25
		 player->ai_flags = AI_READY;
    dfb4:	81 e0       	ldi	r24, 0x01	; 1
    dfb6:	81 87       	std	Z+9, r24	; 0x09
    dfb8:	68 c0       	rjmp	.+208    	; 0xe08a <update_player_ai+0xf0>
	 }
	 else if (player->ai_flags & AI_READY)
    dfba:	80 ff       	sbrs	r24, 0
    dfbc:	28 c0       	rjmp	.+80     	; 0xe00e <update_player_ai+0x74>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    dfbe:	df 01       	movw	r26, r30
    dfc0:	ac 58       	subi	r26, 0x8C	; 140
    dfc2:	bf 4f       	sbci	r27, 0xFF	; 255
    dfc4:	15 96       	adiw	r26, 0x05	; 5
    dfc6:	1c 92       	st	X, r1
    dfc8:	1e 92       	st	-X, r1
    dfca:	14 97       	sbiw	r26, 0x04	; 4
	p->pressed = 0;
    dfcc:	11 96       	adiw	r26, 0x01	; 1
    dfce:	1c 92       	st	X, r1
    dfd0:	1e 92       	st	-X, r1
	p->released = 0;
    dfd2:	13 96       	adiw	r26, 0x03	; 3
    dfd4:	1c 92       	st	X, r1
    dfd6:	1e 92       	st	-X, r1
    dfd8:	12 97       	sbiw	r26, 0x02	; 2
	p->held_cycles = 0;
    dfda:	16 96       	adiw	r26, 0x06	; 6
    dfdc:	1c 92       	st	X, r1
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    dfde:	80 91 b8 0d 	lds	r24, 0x0DB8
    dfe2:	90 91 b9 0d 	lds	r25, 0x0DB9
    dfe6:	23 e0       	ldi	r18, 0x03	; 3
    dfe8:	96 95       	lsr	r25
    dfea:	87 95       	ror	r24
    dfec:	2a 95       	dec	r18
    dfee:	e1 f7       	brne	.-8      	; 0xdfe8 <update_player_ai+0x4e>
    dff0:	4c 96       	adiw	r24, 0x1c	; 28
    dff2:	20 91 c7 0d 	lds	r18, 0x0DC7
    dff6:	30 e0       	ldi	r19, 0x00	; 0
    dff8:	82 17       	cp	r24, r18
    dffa:	93 07       	cpc	r25, r19
    dffc:	08 f4       	brcc	.+2      	; 0xe000 <update_player_ai+0x66>
    dffe:	45 c0       	rjmp	.+138    	; 0xe08a <update_player_ai+0xf0>
    e000:	ef 01       	movw	r28, r30
		 {
			 challenge();
    e002:	0e 94 80 6f 	call	0xdf00	; 0xdf00 <challenge>
			 player->ai_flags = AI_WALKING;
    e006:	82 e0       	ldi	r24, 0x02	; 2
    e008:	89 87       	std	Y+9, r24	; 0x09
			 player->controls.held = BTN_LEFT;
    e00a:	fe 01       	movw	r30, r28
    e00c:	38 c0       	rjmp	.+112    	; 0xe07e <update_player_ai+0xe4>
		 }
	 }
	 else if (player->ai_flags & AI_WALKING) 
    e00e:	81 ff       	sbrs	r24, 1
    e010:	3c c0       	rjmp	.+120    	; 0xe08a <update_player_ai+0xf0>
	 {
		 player->controls.pressed = 0;
    e012:	df 01       	movw	r26, r30
    e014:	ac 58       	subi	r26, 0x8C	; 140
    e016:	bf 4f       	sbci	r27, 0xFF	; 255
    e018:	11 96       	adiw	r26, 0x01	; 1
    e01a:	1c 92       	st	X, r1
    e01c:	1e 92       	st	-X, r1
		 if (game.frame_counter % 15 == 0)
    e01e:	80 91 d2 0d 	lds	r24, 0x0DD2
    e022:	6f e0       	ldi	r22, 0x0F	; 15
    e024:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    e028:	91 11       	cpse	r25, r1
    e02a:	05 c0       	rjmp	.+10     	; 0xe036 <update_player_ai+0x9c>
		 {
			 player->controls.pressed = BTN_B;
    e02c:	81 e0       	ldi	r24, 0x01	; 1
    e02e:	90 e0       	ldi	r25, 0x00	; 0
    e030:	11 96       	adiw	r26, 0x01	; 1
    e032:	9c 93       	st	X, r25
    e034:	8e 93       	st	-X, r24
		 }
		 if (player->shared.x >= game.camera_x+(CAMERA_WIDTH*8/2-40) && player->shared.x <= game.camera_x+(CAMERA_WIDTH*8/2+40))
    e036:	20 81       	ld	r18, Z
    e038:	31 81       	ldd	r19, Z+1	; 0x01
    e03a:	80 91 b8 0d 	lds	r24, 0x0DB8
    e03e:	90 91 b9 0d 	lds	r25, 0x0DB9
    e042:	ac 01       	movw	r20, r24
    e044:	48 5b       	subi	r20, 0xB8	; 184
    e046:	5f 4f       	sbci	r21, 0xFF	; 255
    e048:	24 17       	cp	r18, r20
    e04a:	35 07       	cpc	r19, r21
    e04c:	58 f0       	brcs	.+22     	; 0xe064 <update_player_ai+0xca>
    e04e:	40 5b       	subi	r20, 0xB0	; 176
    e050:	5f 4f       	sbci	r21, 0xFF	; 255
    e052:	42 17       	cp	r20, r18
    e054:	53 07       	cpc	r21, r19
    e056:	30 f0       	brcs	.+12     	; 0xe064 <update_player_ai+0xca>
		 {
			 player->controls.pressed |= BTN_A;
    e058:	4d 91       	ld	r20, X+
    e05a:	5c 91       	ld	r21, X
    e05c:	11 97       	sbiw	r26, 0x01	; 1
    e05e:	51 60       	ori	r21, 0x01	; 1
    e060:	4d 93       	st	X+, r20
    e062:	5c 93       	st	X, r21
		 }
		 if (player->shared.x <= game.camera_x)
    e064:	82 17       	cp	r24, r18
    e066:	93 07       	cpc	r25, r19
    e068:	28 f0       	brcs	.+10     	; 0xe074 <update_player_ai+0xda>
		 {
			 player->controls.held = BTN_RIGHT;
    e06a:	e8 58       	subi	r30, 0x88	; 136
    e06c:	ff 4f       	sbci	r31, 0xFF	; 255
    e06e:	80 e8       	ldi	r24, 0x80	; 128
    e070:	90 e0       	ldi	r25, 0x00	; 0
    e072:	09 c0       	rjmp	.+18     	; 0xe086 <update_player_ai+0xec>
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    e074:	80 53       	subi	r24, 0x30	; 48
    e076:	9f 4f       	sbci	r25, 0xFF	; 255
    e078:	28 17       	cp	r18, r24
    e07a:	39 07       	cpc	r19, r25
    e07c:	30 f0       	brcs	.+12     	; 0xe08a <update_player_ai+0xf0>
		 {
			 player->controls.held = BTN_LEFT;
    e07e:	e8 58       	subi	r30, 0x88	; 136
    e080:	ff 4f       	sbci	r31, 0xFF	; 255
    e082:	80 e4       	ldi	r24, 0x40	; 64
    e084:	90 e0       	ldi	r25, 0x00	; 0
    e086:	91 83       	std	Z+1, r25	; 0x01
    e088:	80 83       	st	Z, r24
		 }
	 }
}
    e08a:	df 91       	pop	r29
    e08c:	cf 91       	pop	r28
    e08e:	08 95       	ret

0000e090 <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e090:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <GetTrueRandomSeed>
    e094:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e098:	82 e1       	ldi	r24, 0x12	; 18
    e09a:	95 e1       	ldi	r25, 0x15	; 21
    e09c:	0e 94 82 40 	call	0x8104	; 0x8104 <InitMusicPlayer>
	ClearVram();
    e0a0:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <ClearVram>
	SetMasterVolume(0x05);
    e0a4:	85 e0       	ldi	r24, 0x05	; 5
    e0a6:	0e 94 3a 44 	call	0x8874	; 0x8874 <SetMasterVolume>
	SetTileTable(tiles_data);
    e0aa:	8d ef       	ldi	r24, 0xFD	; 253
    e0ac:	9f e2       	ldi	r25, 0x2F	; 47
    e0ae:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e0b2:	81 e9       	ldi	r24, 0x91	; 145
    e0b4:	96 e1       	ldi	r25, 0x16	; 22
    e0b6:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e0ba:	8d eb       	ldi	r24, 0xBD	; 189
    e0bc:	97 e5       	ldi	r25, 0x57	; 87
    e0be:	90 93 8b 0d 	sts	0x0D8B, r25
    e0c2:	80 93 8a 0d 	sts	0x0D8A, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e0c6:	0e 94 c6 4e 	call	0x9d8c	; 0x9d8c <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_splash();
    e0ca:	0e 94 45 67 	call	0xce8a	; 0xce8a <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    e0ce:	81 e0       	ldi	r24, 0x01	; 1
    e0d0:	90 e0       	ldi	r25, 0x00	; 0
    e0d2:	0e 94 07 4c 	call	0x980e	; 0x980e <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e0d6:	60 e0       	ldi	r22, 0x00	; 0
    e0d8:	8c e4       	ldi	r24, 0x4C	; 76
    e0da:	9e e0       	ldi	r25, 0x0E	; 14
    e0dc:	0e 94 be 4c 	call	0x997c	; 0x997c <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e0e0:	80 91 cc 0d 	lds	r24, 0x0DCC
    e0e4:	82 30       	cpi	r24, 0x02	; 2
    e0e6:	09 f0       	breq	.+2      	; 0xe0ea <main+0x5a>
    e0e8:	52 c0       	rjmp	.+164    	; 0xe18e <main+0xfe>
		{
			if (update_level()) continue;
    e0ea:	0e 94 ae 6d 	call	0xdb5c	; 0xdb5c <update_level>
    e0ee:	81 11       	cpse	r24, r1
    e0f0:	ee cf       	rjmp	.-36     	; 0xe0ce <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    e0f2:	60 e0       	ldi	r22, 0x00	; 0
    e0f4:	88 ed       	ldi	r24, 0xD8	; 216
    e0f6:	9d e0       	ldi	r25, 0x0D	; 13
    e0f8:	0e 94 7b 6b 	call	0xd6f6	; 0xd6f6 <update_player>
    e0fc:	88 23       	and	r24, r24
    e0fe:	e9 f0       	breq	.+58     	; 0xe13a <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e100:	66 e0       	ldi	r22, 0x06	; 6
    e102:	88 ed       	ldi	r24, 0xD8	; 216
    e104:	9d e0       	ldi	r25, 0x0D	; 13
    e106:	0e 94 5e 5a 	call	0xb4bc	; 0xb4bc <update_shot>
				update_enemies();
    e10a:	0e 94 f9 60 	call	0xc1f2	; 0xc1f2 <update_enemies>
				update_enemy_shots();
    e10e:	0e 94 66 61 	call	0xc2cc	; 0xc2cc <update_enemy_shots>
				animate_enemies();
    e112:	0e 94 06 62 	call	0xc40c	; 0xc40c <animate_enemies>
				animate_enemy_shots();
    e116:	0e 94 23 63 	call	0xc646	; 0xc646 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e11a:	40 e0       	ldi	r20, 0x00	; 0
    e11c:	63 e5       	ldi	r22, 0x53	; 83
    e11e:	7e e0       	ldi	r23, 0x0E	; 14
    e120:	88 ed       	ldi	r24, 0xD8	; 216
    e122:	9d e0       	ldi	r25, 0x0D	; 13
    e124:	0e 94 f5 5f 	call	0xbfea	; 0xbfea <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e128:	46 e0       	ldi	r20, 0x06	; 6
    e12a:	63 e5       	ldi	r22, 0x53	; 83
    e12c:	7e e0       	ldi	r23, 0x0E	; 14
    e12e:	88 ed       	ldi	r24, 0xD8	; 216
    e130:	9d e0       	ldi	r25, 0x0D	; 13
    e132:	0e 94 d2 5d 	call	0xbba4	; 0xbba4 <animate_shot>
				update_pause();
    e136:	0e 94 08 6f 	call	0xde10	; 0xde10 <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e13a:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <is_space>
    e13e:	81 11       	cpse	r24, r1
    e140:	2f c0       	rjmp	.+94     	; 0xe1a0 <main+0x110>
    e142:	80 91 b8 0d 	lds	r24, 0x0DB8
    e146:	90 91 b9 0d 	lds	r25, 0x0DB9
    e14a:	88 3f       	cpi	r24, 0xF8	; 248
    e14c:	96 40       	sbci	r25, 0x06	; 6
    e14e:	40 f1       	brcs	.+80     	; 0xe1a0 <main+0x110>
    e150:	69 e0       	ldi	r22, 0x09	; 9
    e152:	83 e5       	ldi	r24, 0x53	; 83
    e154:	9e e0       	ldi	r25, 0x0E	; 14
    e156:	0e 94 7b 6b 	call	0xd6f6	; 0xd6f6 <update_player>
    e15a:	88 23       	and	r24, r24
    e15c:	09 f1       	breq	.+66     	; 0xe1a0 <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e15e:	6f e0       	ldi	r22, 0x0F	; 15
    e160:	83 e5       	ldi	r24, 0x53	; 83
    e162:	9e e0       	ldi	r25, 0x0E	; 14
    e164:	0e 94 5e 5a 	call	0xb4bc	; 0xb4bc <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e168:	49 e0       	ldi	r20, 0x09	; 9
    e16a:	68 ed       	ldi	r22, 0xD8	; 216
    e16c:	7d e0       	ldi	r23, 0x0D	; 13
    e16e:	83 e5       	ldi	r24, 0x53	; 83
    e170:	9e e0       	ldi	r25, 0x0E	; 14
    e172:	0e 94 f5 5f 	call	0xbfea	; 0xbfea <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e176:	4f e0       	ldi	r20, 0x0F	; 15
    e178:	68 ed       	ldi	r22, 0xD8	; 216
    e17a:	7d e0       	ldi	r23, 0x0D	; 13
    e17c:	83 e5       	ldi	r24, 0x53	; 83
    e17e:	9e e0       	ldi	r25, 0x0E	; 14
    e180:	0e 94 d2 5d 	call	0xbba4	; 0xbba4 <animate_shot>
				update_player_ai(&game.boss);
    e184:	83 e5       	ldi	r24, 0x53	; 83
    e186:	9e e0       	ldi	r25, 0x0E	; 14
    e188:	0e 94 cd 6f 	call	0xdf9a	; 0xdf9a <update_player_ai>
    e18c:	09 c0       	rjmp	.+18     	; 0xe1a0 <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    e18e:	81 11       	cpse	r24, r1
    e190:	03 c0       	rjmp	.+6      	; 0xe198 <main+0x108>
		{
			update_splash();
    e192:	0e 94 9a 68 	call	0xd134	; 0xd134 <update_splash>
    e196:	04 c0       	rjmp	.+8      	; 0xe1a0 <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e198:	81 30       	cpi	r24, 0x01	; 1
    e19a:	11 f4       	brne	.+4      	; 0xe1a0 <main+0x110>
		{
			update_high_scores();
    e19c:	0e 94 16 69 	call	0xd22c	; 0xd22c <update_high_scores>
			
		}
		LBRotateSprites();
    e1a0:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <LBRotateSprites>
    e1a4:	94 cf       	rjmp	.-216    	; 0xe0ce <main+0x3e>

0000e1a6 <__udivmodqi4>:
    e1a6:	99 1b       	sub	r25, r25
    e1a8:	79 e0       	ldi	r23, 0x09	; 9
    e1aa:	04 c0       	rjmp	.+8      	; 0xe1b4 <__udivmodqi4_ep>

0000e1ac <__udivmodqi4_loop>:
    e1ac:	99 1f       	adc	r25, r25
    e1ae:	96 17       	cp	r25, r22
    e1b0:	08 f0       	brcs	.+2      	; 0xe1b4 <__udivmodqi4_ep>
    e1b2:	96 1b       	sub	r25, r22

0000e1b4 <__udivmodqi4_ep>:
    e1b4:	88 1f       	adc	r24, r24
    e1b6:	7a 95       	dec	r23
    e1b8:	c9 f7       	brne	.-14     	; 0xe1ac <__udivmodqi4_loop>
    e1ba:	80 95       	com	r24
    e1bc:	08 95       	ret

0000e1be <__divmodqi4>:
    e1be:	87 fb       	bst	r24, 7
    e1c0:	08 2e       	mov	r0, r24
    e1c2:	06 26       	eor	r0, r22
    e1c4:	87 fd       	sbrc	r24, 7
    e1c6:	81 95       	neg	r24
    e1c8:	67 fd       	sbrc	r22, 7
    e1ca:	61 95       	neg	r22
    e1cc:	0e 94 d3 70 	call	0xe1a6	; 0xe1a6 <__udivmodqi4>
    e1d0:	0e f4       	brtc	.+2      	; 0xe1d4 <__divmodqi4_1>
    e1d2:	91 95       	neg	r25

0000e1d4 <__divmodqi4_1>:
    e1d4:	07 fc       	sbrc	r0, 7
    e1d6:	81 95       	neg	r24

0000e1d8 <__divmodqi4_exit>:
    e1d8:	08 95       	ret

0000e1da <__udivmodhi4>:
    e1da:	aa 1b       	sub	r26, r26
    e1dc:	bb 1b       	sub	r27, r27
    e1de:	51 e1       	ldi	r21, 0x11	; 17
    e1e0:	07 c0       	rjmp	.+14     	; 0xe1f0 <__udivmodhi4_ep>

0000e1e2 <__udivmodhi4_loop>:
    e1e2:	aa 1f       	adc	r26, r26
    e1e4:	bb 1f       	adc	r27, r27
    e1e6:	a6 17       	cp	r26, r22
    e1e8:	b7 07       	cpc	r27, r23
    e1ea:	10 f0       	brcs	.+4      	; 0xe1f0 <__udivmodhi4_ep>
    e1ec:	a6 1b       	sub	r26, r22
    e1ee:	b7 0b       	sbc	r27, r23

0000e1f0 <__udivmodhi4_ep>:
    e1f0:	88 1f       	adc	r24, r24
    e1f2:	99 1f       	adc	r25, r25
    e1f4:	5a 95       	dec	r21
    e1f6:	a9 f7       	brne	.-22     	; 0xe1e2 <__udivmodhi4_loop>
    e1f8:	80 95       	com	r24
    e1fa:	90 95       	com	r25
    e1fc:	bc 01       	movw	r22, r24
    e1fe:	cd 01       	movw	r24, r26
    e200:	08 95       	ret

0000e202 <__divmodhi4>:
    e202:	97 fb       	bst	r25, 7
    e204:	07 2e       	mov	r0, r23
    e206:	16 f4       	brtc	.+4      	; 0xe20c <__divmodhi4+0xa>
    e208:	00 94       	com	r0
    e20a:	07 d0       	rcall	.+14     	; 0xe21a <__divmodhi4_neg1>
    e20c:	77 fd       	sbrc	r23, 7
    e20e:	09 d0       	rcall	.+18     	; 0xe222 <__divmodhi4_neg2>
    e210:	0e 94 ed 70 	call	0xe1da	; 0xe1da <__udivmodhi4>
    e214:	07 fc       	sbrc	r0, 7
    e216:	05 d0       	rcall	.+10     	; 0xe222 <__divmodhi4_neg2>
    e218:	3e f4       	brtc	.+14     	; 0xe228 <__divmodhi4_exit>

0000e21a <__divmodhi4_neg1>:
    e21a:	90 95       	com	r25
    e21c:	81 95       	neg	r24
    e21e:	9f 4f       	sbci	r25, 0xFF	; 255
    e220:	08 95       	ret

0000e222 <__divmodhi4_neg2>:
    e222:	70 95       	com	r23
    e224:	61 95       	neg	r22
    e226:	7f 4f       	sbci	r23, 0xFF	; 255

0000e228 <__divmodhi4_exit>:
    e228:	08 95       	ret

0000e22a <__tablejump2__>:
    e22a:	ee 0f       	add	r30, r30
    e22c:	ff 1f       	adc	r31, r31
    e22e:	05 90       	lpm	r0, Z+
    e230:	f4 91       	lpm	r31, Z
    e232:	e0 2d       	mov	r30, r0
    e234:	09 94       	ijmp

0000e236 <__subsf3>:
    e236:	50 58       	subi	r21, 0x80	; 128

0000e238 <__addsf3>:
    e238:	bb 27       	eor	r27, r27
    e23a:	aa 27       	eor	r26, r26
    e23c:	0e d0       	rcall	.+28     	; 0xe25a <__addsf3x>
    e23e:	e5 c0       	rjmp	.+458    	; 0xe40a <__fp_round>
    e240:	d6 d0       	rcall	.+428    	; 0xe3ee <__fp_pscA>
    e242:	30 f0       	brcs	.+12     	; 0xe250 <__addsf3+0x18>
    e244:	db d0       	rcall	.+438    	; 0xe3fc <__fp_pscB>
    e246:	20 f0       	brcs	.+8      	; 0xe250 <__addsf3+0x18>
    e248:	31 f4       	brne	.+12     	; 0xe256 <__addsf3+0x1e>
    e24a:	9f 3f       	cpi	r25, 0xFF	; 255
    e24c:	11 f4       	brne	.+4      	; 0xe252 <__addsf3+0x1a>
    e24e:	1e f4       	brtc	.+6      	; 0xe256 <__addsf3+0x1e>
    e250:	cb c0       	rjmp	.+406    	; 0xe3e8 <__fp_nan>
    e252:	0e f4       	brtc	.+2      	; 0xe256 <__addsf3+0x1e>
    e254:	e0 95       	com	r30
    e256:	e7 fb       	bst	r30, 7
    e258:	c1 c0       	rjmp	.+386    	; 0xe3dc <__fp_inf>

0000e25a <__addsf3x>:
    e25a:	e9 2f       	mov	r30, r25
    e25c:	e7 d0       	rcall	.+462    	; 0xe42c <__fp_split3>
    e25e:	80 f3       	brcs	.-32     	; 0xe240 <__addsf3+0x8>
    e260:	ba 17       	cp	r27, r26
    e262:	62 07       	cpc	r22, r18
    e264:	73 07       	cpc	r23, r19
    e266:	84 07       	cpc	r24, r20
    e268:	95 07       	cpc	r25, r21
    e26a:	18 f0       	brcs	.+6      	; 0xe272 <__addsf3x+0x18>
    e26c:	71 f4       	brne	.+28     	; 0xe28a <__addsf3x+0x30>
    e26e:	9e f5       	brtc	.+102    	; 0xe2d6 <__addsf3x+0x7c>
    e270:	ff c0       	rjmp	.+510    	; 0xe470 <__fp_zero>
    e272:	0e f4       	brtc	.+2      	; 0xe276 <__addsf3x+0x1c>
    e274:	e0 95       	com	r30
    e276:	0b 2e       	mov	r0, r27
    e278:	ba 2f       	mov	r27, r26
    e27a:	a0 2d       	mov	r26, r0
    e27c:	0b 01       	movw	r0, r22
    e27e:	b9 01       	movw	r22, r18
    e280:	90 01       	movw	r18, r0
    e282:	0c 01       	movw	r0, r24
    e284:	ca 01       	movw	r24, r20
    e286:	a0 01       	movw	r20, r0
    e288:	11 24       	eor	r1, r1
    e28a:	ff 27       	eor	r31, r31
    e28c:	59 1b       	sub	r21, r25
    e28e:	99 f0       	breq	.+38     	; 0xe2b6 <__addsf3x+0x5c>
    e290:	59 3f       	cpi	r21, 0xF9	; 249
    e292:	50 f4       	brcc	.+20     	; 0xe2a8 <__addsf3x+0x4e>
    e294:	50 3e       	cpi	r21, 0xE0	; 224
    e296:	68 f1       	brcs	.+90     	; 0xe2f2 <__addsf3x+0x98>
    e298:	1a 16       	cp	r1, r26
    e29a:	f0 40       	sbci	r31, 0x00	; 0
    e29c:	a2 2f       	mov	r26, r18
    e29e:	23 2f       	mov	r18, r19
    e2a0:	34 2f       	mov	r19, r20
    e2a2:	44 27       	eor	r20, r20
    e2a4:	58 5f       	subi	r21, 0xF8	; 248
    e2a6:	f3 cf       	rjmp	.-26     	; 0xe28e <__addsf3x+0x34>
    e2a8:	46 95       	lsr	r20
    e2aa:	37 95       	ror	r19
    e2ac:	27 95       	ror	r18
    e2ae:	a7 95       	ror	r26
    e2b0:	f0 40       	sbci	r31, 0x00	; 0
    e2b2:	53 95       	inc	r21
    e2b4:	c9 f7       	brne	.-14     	; 0xe2a8 <__addsf3x+0x4e>
    e2b6:	7e f4       	brtc	.+30     	; 0xe2d6 <__addsf3x+0x7c>
    e2b8:	1f 16       	cp	r1, r31
    e2ba:	ba 0b       	sbc	r27, r26
    e2bc:	62 0b       	sbc	r22, r18
    e2be:	73 0b       	sbc	r23, r19
    e2c0:	84 0b       	sbc	r24, r20
    e2c2:	ba f0       	brmi	.+46     	; 0xe2f2 <__addsf3x+0x98>
    e2c4:	91 50       	subi	r25, 0x01	; 1
    e2c6:	a1 f0       	breq	.+40     	; 0xe2f0 <__addsf3x+0x96>
    e2c8:	ff 0f       	add	r31, r31
    e2ca:	bb 1f       	adc	r27, r27
    e2cc:	66 1f       	adc	r22, r22
    e2ce:	77 1f       	adc	r23, r23
    e2d0:	88 1f       	adc	r24, r24
    e2d2:	c2 f7       	brpl	.-16     	; 0xe2c4 <__addsf3x+0x6a>
    e2d4:	0e c0       	rjmp	.+28     	; 0xe2f2 <__addsf3x+0x98>
    e2d6:	ba 0f       	add	r27, r26
    e2d8:	62 1f       	adc	r22, r18
    e2da:	73 1f       	adc	r23, r19
    e2dc:	84 1f       	adc	r24, r20
    e2de:	48 f4       	brcc	.+18     	; 0xe2f2 <__addsf3x+0x98>
    e2e0:	87 95       	ror	r24
    e2e2:	77 95       	ror	r23
    e2e4:	67 95       	ror	r22
    e2e6:	b7 95       	ror	r27
    e2e8:	f7 95       	ror	r31
    e2ea:	9e 3f       	cpi	r25, 0xFE	; 254
    e2ec:	08 f0       	brcs	.+2      	; 0xe2f0 <__addsf3x+0x96>
    e2ee:	b3 cf       	rjmp	.-154    	; 0xe256 <__addsf3+0x1e>
    e2f0:	93 95       	inc	r25
    e2f2:	88 0f       	add	r24, r24
    e2f4:	08 f0       	brcs	.+2      	; 0xe2f8 <__addsf3x+0x9e>
    e2f6:	99 27       	eor	r25, r25
    e2f8:	ee 0f       	add	r30, r30
    e2fa:	97 95       	ror	r25
    e2fc:	87 95       	ror	r24
    e2fe:	08 95       	ret

0000e300 <__fixsfsi>:
    e300:	04 d0       	rcall	.+8      	; 0xe30a <__fixunssfsi>
    e302:	68 94       	set
    e304:	b1 11       	cpse	r27, r1
    e306:	b5 c0       	rjmp	.+362    	; 0xe472 <__fp_szero>
    e308:	08 95       	ret

0000e30a <__fixunssfsi>:
    e30a:	98 d0       	rcall	.+304    	; 0xe43c <__fp_splitA>
    e30c:	88 f0       	brcs	.+34     	; 0xe330 <__fixunssfsi+0x26>
    e30e:	9f 57       	subi	r25, 0x7F	; 127
    e310:	90 f0       	brcs	.+36     	; 0xe336 <__fixunssfsi+0x2c>
    e312:	b9 2f       	mov	r27, r25
    e314:	99 27       	eor	r25, r25
    e316:	b7 51       	subi	r27, 0x17	; 23
    e318:	a0 f0       	brcs	.+40     	; 0xe342 <__fixunssfsi+0x38>
    e31a:	d1 f0       	breq	.+52     	; 0xe350 <__fixunssfsi+0x46>
    e31c:	66 0f       	add	r22, r22
    e31e:	77 1f       	adc	r23, r23
    e320:	88 1f       	adc	r24, r24
    e322:	99 1f       	adc	r25, r25
    e324:	1a f0       	brmi	.+6      	; 0xe32c <__fixunssfsi+0x22>
    e326:	ba 95       	dec	r27
    e328:	c9 f7       	brne	.-14     	; 0xe31c <__fixunssfsi+0x12>
    e32a:	12 c0       	rjmp	.+36     	; 0xe350 <__fixunssfsi+0x46>
    e32c:	b1 30       	cpi	r27, 0x01	; 1
    e32e:	81 f0       	breq	.+32     	; 0xe350 <__fixunssfsi+0x46>
    e330:	9f d0       	rcall	.+318    	; 0xe470 <__fp_zero>
    e332:	b1 e0       	ldi	r27, 0x01	; 1
    e334:	08 95       	ret
    e336:	9c c0       	rjmp	.+312    	; 0xe470 <__fp_zero>
    e338:	67 2f       	mov	r22, r23
    e33a:	78 2f       	mov	r23, r24
    e33c:	88 27       	eor	r24, r24
    e33e:	b8 5f       	subi	r27, 0xF8	; 248
    e340:	39 f0       	breq	.+14     	; 0xe350 <__fixunssfsi+0x46>
    e342:	b9 3f       	cpi	r27, 0xF9	; 249
    e344:	cc f3       	brlt	.-14     	; 0xe338 <__fixunssfsi+0x2e>
    e346:	86 95       	lsr	r24
    e348:	77 95       	ror	r23
    e34a:	67 95       	ror	r22
    e34c:	b3 95       	inc	r27
    e34e:	d9 f7       	brne	.-10     	; 0xe346 <__fixunssfsi+0x3c>
    e350:	3e f4       	brtc	.+14     	; 0xe360 <__fixunssfsi+0x56>
    e352:	90 95       	com	r25
    e354:	80 95       	com	r24
    e356:	70 95       	com	r23
    e358:	61 95       	neg	r22
    e35a:	7f 4f       	sbci	r23, 0xFF	; 255
    e35c:	8f 4f       	sbci	r24, 0xFF	; 255
    e35e:	9f 4f       	sbci	r25, 0xFF	; 255
    e360:	08 95       	ret

0000e362 <__floatunsisf>:
    e362:	e8 94       	clt
    e364:	09 c0       	rjmp	.+18     	; 0xe378 <__floatsisf+0x12>

0000e366 <__floatsisf>:
    e366:	97 fb       	bst	r25, 7
    e368:	3e f4       	brtc	.+14     	; 0xe378 <__floatsisf+0x12>
    e36a:	90 95       	com	r25
    e36c:	80 95       	com	r24
    e36e:	70 95       	com	r23
    e370:	61 95       	neg	r22
    e372:	7f 4f       	sbci	r23, 0xFF	; 255
    e374:	8f 4f       	sbci	r24, 0xFF	; 255
    e376:	9f 4f       	sbci	r25, 0xFF	; 255
    e378:	99 23       	and	r25, r25
    e37a:	a9 f0       	breq	.+42     	; 0xe3a6 <__floatsisf+0x40>
    e37c:	f9 2f       	mov	r31, r25
    e37e:	96 e9       	ldi	r25, 0x96	; 150
    e380:	bb 27       	eor	r27, r27
    e382:	93 95       	inc	r25
    e384:	f6 95       	lsr	r31
    e386:	87 95       	ror	r24
    e388:	77 95       	ror	r23
    e38a:	67 95       	ror	r22
    e38c:	b7 95       	ror	r27
    e38e:	f1 11       	cpse	r31, r1
    e390:	f8 cf       	rjmp	.-16     	; 0xe382 <__floatsisf+0x1c>
    e392:	fa f4       	brpl	.+62     	; 0xe3d2 <__floatsisf+0x6c>
    e394:	bb 0f       	add	r27, r27
    e396:	11 f4       	brne	.+4      	; 0xe39c <__floatsisf+0x36>
    e398:	60 ff       	sbrs	r22, 0
    e39a:	1b c0       	rjmp	.+54     	; 0xe3d2 <__floatsisf+0x6c>
    e39c:	6f 5f       	subi	r22, 0xFF	; 255
    e39e:	7f 4f       	sbci	r23, 0xFF	; 255
    e3a0:	8f 4f       	sbci	r24, 0xFF	; 255
    e3a2:	9f 4f       	sbci	r25, 0xFF	; 255
    e3a4:	16 c0       	rjmp	.+44     	; 0xe3d2 <__floatsisf+0x6c>
    e3a6:	88 23       	and	r24, r24
    e3a8:	11 f0       	breq	.+4      	; 0xe3ae <__floatsisf+0x48>
    e3aa:	96 e9       	ldi	r25, 0x96	; 150
    e3ac:	11 c0       	rjmp	.+34     	; 0xe3d0 <__floatsisf+0x6a>
    e3ae:	77 23       	and	r23, r23
    e3b0:	21 f0       	breq	.+8      	; 0xe3ba <__floatsisf+0x54>
    e3b2:	9e e8       	ldi	r25, 0x8E	; 142
    e3b4:	87 2f       	mov	r24, r23
    e3b6:	76 2f       	mov	r23, r22
    e3b8:	05 c0       	rjmp	.+10     	; 0xe3c4 <__floatsisf+0x5e>
    e3ba:	66 23       	and	r22, r22
    e3bc:	71 f0       	breq	.+28     	; 0xe3da <__floatsisf+0x74>
    e3be:	96 e8       	ldi	r25, 0x86	; 134
    e3c0:	86 2f       	mov	r24, r22
    e3c2:	70 e0       	ldi	r23, 0x00	; 0
    e3c4:	60 e0       	ldi	r22, 0x00	; 0
    e3c6:	2a f0       	brmi	.+10     	; 0xe3d2 <__floatsisf+0x6c>
    e3c8:	9a 95       	dec	r25
    e3ca:	66 0f       	add	r22, r22
    e3cc:	77 1f       	adc	r23, r23
    e3ce:	88 1f       	adc	r24, r24
    e3d0:	da f7       	brpl	.-10     	; 0xe3c8 <__floatsisf+0x62>
    e3d2:	88 0f       	add	r24, r24
    e3d4:	96 95       	lsr	r25
    e3d6:	87 95       	ror	r24
    e3d8:	97 f9       	bld	r25, 7
    e3da:	08 95       	ret

0000e3dc <__fp_inf>:
    e3dc:	97 f9       	bld	r25, 7
    e3de:	9f 67       	ori	r25, 0x7F	; 127
    e3e0:	80 e8       	ldi	r24, 0x80	; 128
    e3e2:	70 e0       	ldi	r23, 0x00	; 0
    e3e4:	60 e0       	ldi	r22, 0x00	; 0
    e3e6:	08 95       	ret

0000e3e8 <__fp_nan>:
    e3e8:	9f ef       	ldi	r25, 0xFF	; 255
    e3ea:	80 ec       	ldi	r24, 0xC0	; 192
    e3ec:	08 95       	ret

0000e3ee <__fp_pscA>:
    e3ee:	00 24       	eor	r0, r0
    e3f0:	0a 94       	dec	r0
    e3f2:	16 16       	cp	r1, r22
    e3f4:	17 06       	cpc	r1, r23
    e3f6:	18 06       	cpc	r1, r24
    e3f8:	09 06       	cpc	r0, r25
    e3fa:	08 95       	ret

0000e3fc <__fp_pscB>:
    e3fc:	00 24       	eor	r0, r0
    e3fe:	0a 94       	dec	r0
    e400:	12 16       	cp	r1, r18
    e402:	13 06       	cpc	r1, r19
    e404:	14 06       	cpc	r1, r20
    e406:	05 06       	cpc	r0, r21
    e408:	08 95       	ret

0000e40a <__fp_round>:
    e40a:	09 2e       	mov	r0, r25
    e40c:	03 94       	inc	r0
    e40e:	00 0c       	add	r0, r0
    e410:	11 f4       	brne	.+4      	; 0xe416 <__fp_round+0xc>
    e412:	88 23       	and	r24, r24
    e414:	52 f0       	brmi	.+20     	; 0xe42a <__fp_round+0x20>
    e416:	bb 0f       	add	r27, r27
    e418:	40 f4       	brcc	.+16     	; 0xe42a <__fp_round+0x20>
    e41a:	bf 2b       	or	r27, r31
    e41c:	11 f4       	brne	.+4      	; 0xe422 <__fp_round+0x18>
    e41e:	60 ff       	sbrs	r22, 0
    e420:	04 c0       	rjmp	.+8      	; 0xe42a <__fp_round+0x20>
    e422:	6f 5f       	subi	r22, 0xFF	; 255
    e424:	7f 4f       	sbci	r23, 0xFF	; 255
    e426:	8f 4f       	sbci	r24, 0xFF	; 255
    e428:	9f 4f       	sbci	r25, 0xFF	; 255
    e42a:	08 95       	ret

0000e42c <__fp_split3>:
    e42c:	57 fd       	sbrc	r21, 7
    e42e:	90 58       	subi	r25, 0x80	; 128
    e430:	44 0f       	add	r20, r20
    e432:	55 1f       	adc	r21, r21
    e434:	59 f0       	breq	.+22     	; 0xe44c <__fp_splitA+0x10>
    e436:	5f 3f       	cpi	r21, 0xFF	; 255
    e438:	71 f0       	breq	.+28     	; 0xe456 <__fp_splitA+0x1a>
    e43a:	47 95       	ror	r20

0000e43c <__fp_splitA>:
    e43c:	88 0f       	add	r24, r24
    e43e:	97 fb       	bst	r25, 7
    e440:	99 1f       	adc	r25, r25
    e442:	61 f0       	breq	.+24     	; 0xe45c <__fp_splitA+0x20>
    e444:	9f 3f       	cpi	r25, 0xFF	; 255
    e446:	79 f0       	breq	.+30     	; 0xe466 <__fp_splitA+0x2a>
    e448:	87 95       	ror	r24
    e44a:	08 95       	ret
    e44c:	12 16       	cp	r1, r18
    e44e:	13 06       	cpc	r1, r19
    e450:	14 06       	cpc	r1, r20
    e452:	55 1f       	adc	r21, r21
    e454:	f2 cf       	rjmp	.-28     	; 0xe43a <__fp_split3+0xe>
    e456:	46 95       	lsr	r20
    e458:	f1 df       	rcall	.-30     	; 0xe43c <__fp_splitA>
    e45a:	08 c0       	rjmp	.+16     	; 0xe46c <__fp_splitA+0x30>
    e45c:	16 16       	cp	r1, r22
    e45e:	17 06       	cpc	r1, r23
    e460:	18 06       	cpc	r1, r24
    e462:	99 1f       	adc	r25, r25
    e464:	f1 cf       	rjmp	.-30     	; 0xe448 <__fp_splitA+0xc>
    e466:	86 95       	lsr	r24
    e468:	71 05       	cpc	r23, r1
    e46a:	61 05       	cpc	r22, r1
    e46c:	08 94       	sec
    e46e:	08 95       	ret

0000e470 <__fp_zero>:
    e470:	e8 94       	clt

0000e472 <__fp_szero>:
    e472:	bb 27       	eor	r27, r27
    e474:	66 27       	eor	r22, r22
    e476:	77 27       	eor	r23, r23
    e478:	cb 01       	movw	r24, r22
    e47a:	97 f9       	bld	r25, 7
    e47c:	08 95       	ret

0000e47e <__mulsf3>:
    e47e:	0b d0       	rcall	.+22     	; 0xe496 <__mulsf3x>
    e480:	c4 cf       	rjmp	.-120    	; 0xe40a <__fp_round>
    e482:	b5 df       	rcall	.-150    	; 0xe3ee <__fp_pscA>
    e484:	28 f0       	brcs	.+10     	; 0xe490 <__mulsf3+0x12>
    e486:	ba df       	rcall	.-140    	; 0xe3fc <__fp_pscB>
    e488:	18 f0       	brcs	.+6      	; 0xe490 <__mulsf3+0x12>
    e48a:	95 23       	and	r25, r21
    e48c:	09 f0       	breq	.+2      	; 0xe490 <__mulsf3+0x12>
    e48e:	a6 cf       	rjmp	.-180    	; 0xe3dc <__fp_inf>
    e490:	ab cf       	rjmp	.-170    	; 0xe3e8 <__fp_nan>
    e492:	11 24       	eor	r1, r1
    e494:	ee cf       	rjmp	.-36     	; 0xe472 <__fp_szero>

0000e496 <__mulsf3x>:
    e496:	ca df       	rcall	.-108    	; 0xe42c <__fp_split3>
    e498:	a0 f3       	brcs	.-24     	; 0xe482 <__mulsf3+0x4>

0000e49a <__mulsf3_pse>:
    e49a:	95 9f       	mul	r25, r21
    e49c:	d1 f3       	breq	.-12     	; 0xe492 <__mulsf3+0x14>
    e49e:	95 0f       	add	r25, r21
    e4a0:	50 e0       	ldi	r21, 0x00	; 0
    e4a2:	55 1f       	adc	r21, r21
    e4a4:	62 9f       	mul	r22, r18
    e4a6:	f0 01       	movw	r30, r0
    e4a8:	72 9f       	mul	r23, r18
    e4aa:	bb 27       	eor	r27, r27
    e4ac:	f0 0d       	add	r31, r0
    e4ae:	b1 1d       	adc	r27, r1
    e4b0:	63 9f       	mul	r22, r19
    e4b2:	aa 27       	eor	r26, r26
    e4b4:	f0 0d       	add	r31, r0
    e4b6:	b1 1d       	adc	r27, r1
    e4b8:	aa 1f       	adc	r26, r26
    e4ba:	64 9f       	mul	r22, r20
    e4bc:	66 27       	eor	r22, r22
    e4be:	b0 0d       	add	r27, r0
    e4c0:	a1 1d       	adc	r26, r1
    e4c2:	66 1f       	adc	r22, r22
    e4c4:	82 9f       	mul	r24, r18
    e4c6:	22 27       	eor	r18, r18
    e4c8:	b0 0d       	add	r27, r0
    e4ca:	a1 1d       	adc	r26, r1
    e4cc:	62 1f       	adc	r22, r18
    e4ce:	73 9f       	mul	r23, r19
    e4d0:	b0 0d       	add	r27, r0
    e4d2:	a1 1d       	adc	r26, r1
    e4d4:	62 1f       	adc	r22, r18
    e4d6:	83 9f       	mul	r24, r19
    e4d8:	a0 0d       	add	r26, r0
    e4da:	61 1d       	adc	r22, r1
    e4dc:	22 1f       	adc	r18, r18
    e4de:	74 9f       	mul	r23, r20
    e4e0:	33 27       	eor	r19, r19
    e4e2:	a0 0d       	add	r26, r0
    e4e4:	61 1d       	adc	r22, r1
    e4e6:	23 1f       	adc	r18, r19
    e4e8:	84 9f       	mul	r24, r20
    e4ea:	60 0d       	add	r22, r0
    e4ec:	21 1d       	adc	r18, r1
    e4ee:	82 2f       	mov	r24, r18
    e4f0:	76 2f       	mov	r23, r22
    e4f2:	6a 2f       	mov	r22, r26
    e4f4:	11 24       	eor	r1, r1
    e4f6:	9f 57       	subi	r25, 0x7F	; 127
    e4f8:	50 40       	sbci	r21, 0x00	; 0
    e4fa:	8a f0       	brmi	.+34     	; 0xe51e <__mulsf3_pse+0x84>
    e4fc:	e1 f0       	breq	.+56     	; 0xe536 <__mulsf3_pse+0x9c>
    e4fe:	88 23       	and	r24, r24
    e500:	4a f0       	brmi	.+18     	; 0xe514 <__mulsf3_pse+0x7a>
    e502:	ee 0f       	add	r30, r30
    e504:	ff 1f       	adc	r31, r31
    e506:	bb 1f       	adc	r27, r27
    e508:	66 1f       	adc	r22, r22
    e50a:	77 1f       	adc	r23, r23
    e50c:	88 1f       	adc	r24, r24
    e50e:	91 50       	subi	r25, 0x01	; 1
    e510:	50 40       	sbci	r21, 0x00	; 0
    e512:	a9 f7       	brne	.-22     	; 0xe4fe <__mulsf3_pse+0x64>
    e514:	9e 3f       	cpi	r25, 0xFE	; 254
    e516:	51 05       	cpc	r21, r1
    e518:	70 f0       	brcs	.+28     	; 0xe536 <__mulsf3_pse+0x9c>
    e51a:	60 cf       	rjmp	.-320    	; 0xe3dc <__fp_inf>
    e51c:	aa cf       	rjmp	.-172    	; 0xe472 <__fp_szero>
    e51e:	5f 3f       	cpi	r21, 0xFF	; 255
    e520:	ec f3       	brlt	.-6      	; 0xe51c <__mulsf3_pse+0x82>
    e522:	98 3e       	cpi	r25, 0xE8	; 232
    e524:	dc f3       	brlt	.-10     	; 0xe51c <__mulsf3_pse+0x82>
    e526:	86 95       	lsr	r24
    e528:	77 95       	ror	r23
    e52a:	67 95       	ror	r22
    e52c:	b7 95       	ror	r27
    e52e:	f7 95       	ror	r31
    e530:	e7 95       	ror	r30
    e532:	9f 5f       	subi	r25, 0xFF	; 255
    e534:	c1 f7       	brne	.-16     	; 0xe526 <__mulsf3_pse+0x8c>
    e536:	fe 2b       	or	r31, r30
    e538:	88 0f       	add	r24, r24
    e53a:	91 1d       	adc	r25, r1
    e53c:	96 95       	lsr	r25
    e53e:	87 95       	ror	r24
    e540:	97 f9       	bld	r25, 7
    e542:	08 95       	ret

0000e544 <strnlen_P>:
    e544:	fc 01       	movw	r30, r24
    e546:	05 90       	lpm	r0, Z+
    e548:	61 50       	subi	r22, 0x01	; 1
    e54a:	70 40       	sbci	r23, 0x00	; 0
    e54c:	01 10       	cpse	r0, r1
    e54e:	d8 f7       	brcc	.-10     	; 0xe546 <strnlen_P+0x2>
    e550:	80 95       	com	r24
    e552:	90 95       	com	r25
    e554:	8e 0f       	add	r24, r30
    e556:	9f 1f       	adc	r25, r31
    e558:	08 95       	ret

0000e55a <_exit>:
    e55a:	f8 94       	cli

0000e55c <__stop_program>:
    e55c:	ff cf       	rjmp	.-2      	; 0xe55c <__stop_program>
