
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e9da  0000eada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000eb00  2**5
                  CONTENTS, READONLY
  2 .text         0000e9da  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b42  00800510  00800510  0000eaea  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000ef00  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000f608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000f8f9  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000758  00000000  00000000  0000f910  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ab5d  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001673  00000000  00000000  0001abc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000027e6  00000000  00000000  0001c238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001744  00000000  00000000  0001ea20  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001feb  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000905e  00000000  00000000  0002214f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008f0  00000000  00000000  0002b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 3b 	jmp	0x7708	; 0x7708 <__ctors_end>
       4:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
       8:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
       c:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      10:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      14:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      18:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      1c:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      20:	0c 94 65 41 	jmp	0x82ca	; 0x82ca <__vector_8>
      24:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      28:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      2c:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      30:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      34:	0c 94 31 3f 	jmp	0x7e62	; 0x7e62 <__vector_13>
      38:	0c 94 71 3f 	jmp	0x7ee2	; 0x7ee2 <__vector_14>
      3c:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      40:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      44:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      48:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      4c:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      50:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      54:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      58:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      5c:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      60:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      64:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      68:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      6c:	0c 94 ed 3b 	jmp	0x77da	; 0x77da <__bad_interrupt>
      70:	3a 64       	ori	r19, 0x4A	; 74
      72:	46 64       	ori	r20, 0x46	; 70
      74:	4e 64       	ori	r20, 0x4E	; 78
      76:	3e 64       	ori	r19, 0x4E	; 78
      78:	42 64       	ori	r20, 0x42	; 66
      7a:	4a 64       	ori	r20, 0x4A	; 74
      7c:	3e 64       	ori	r19, 0x4E	; 78
      7e:	3e 64       	ori	r19, 0x4E	; 78
      80:	d8 66       	ori	r29, 0x68	; 104
      82:	e4 66       	ori	r30, 0x64	; 100
      84:	db 66       	ori	r29, 0x6B	; 107
      86:	e4 66       	ori	r30, 0x64	; 100
      88:	de 66       	ori	r29, 0x6E	; 110
      8a:	e4 66       	ori	r30, 0x64	; 100
      8c:	e1 66       	ori	r30, 0x61	; 97
      8e:	e4 66       	ori	r30, 0x64	; 100
      90:	e7 66       	ori	r30, 0x67	; 103
      92:	ea 66       	ori	r30, 0x6A	; 106

00000094 <__trampolines_end>:
      94:	81 00       	.word	0x0081	; ????
      96:	45 00       	.word	0x0045	; ????
      98:	27 ff       	sbrs	r18, 7
      9a:	24 ff       	sbrs	r18, 4
      9c:	2a 90       	ld	r2, -Y
      9e:	2b 1c       	adc	r2, r11
      a0:	21 0c       	add	r2, r1
      a2:	22 fb       	bst	r18, 2
      a4:	85 00       	.word	0x0085	; ????
      a6:	84 00       	.word	0x0084	; ????
      a8:	89 03       	fmulsu	r16, r17
      aa:	88 8d       	ldd	r24, Y+24	; 0x18
      ac:	81 09       	sbc	r24, r1
      ae:	6f 02       	muls	r22, r31
      b0:	44 42       	sbci	r20, 0x24	; 36
      b2:	47 00       	.word	0x0047	; ????
      b4:	45 01       	movw	r8, r10
      b6:	b0 83       	st	Z, r27
      b8:	b3 00       	.word	0x00b3	; ????
      ba:	b1 01       	movw	r22, r2
      bc:	25 11       	cpse	r18, r5
      be:	8a 4f       	sbci	r24, 0xFA	; 250
      c0:	8b 03       	fmulsu	r16, r19

000000c2 <eeprom_format_table>:
      c2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e2 <patchCommands>:
      e2:	0e 43 11 43 6d 43 71 43 78 43 19 43 1e 43 23 43     .C.CmCqCxC.C.C#C
      f2:	80 43 26 43 29 43 2c 43 67 43 6a 43 90 43           .C&C)C,CgCjC.C

00000100 <fader>:
     100:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000010c <map_uzeboxlogo2>:
     10c:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000011d <map_uzeboxlogo>:
     11d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     12d:	00 0e 0f 10 11 12                                   ......

00000133 <logo_tileset>:
	...
     18f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     19f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     1af:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1bf:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1cf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1df:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1ef:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ff:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     20f:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     21f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     22f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     23f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     24f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     25f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     277:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     287:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     297:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     2a7:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2b7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2c7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2d7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2e7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2f7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     307:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     317:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     327:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     337:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     347:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     357:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     367:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     377:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     387:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3b3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3c3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3d3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3e3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3f3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     403:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     413:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     423:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     433:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     443:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     453:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     463:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     473:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     483:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4bb:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4cb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4db:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4eb:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4fb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     50b:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     51b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     52b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     53b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     54b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     55b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     56b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     57b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     58b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     59b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     5ab:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5bb:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5cb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5db:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5eb:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     60f:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     61f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     62f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     63f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     64f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     65f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     66f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     67f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     68f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     69f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     6af:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6bf:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6cf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6df:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6f7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     707:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     717:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     727:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     737:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     747:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     757:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     767:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     777:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     787:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     797:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     7a7:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7b7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7c7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7d7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7e7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7f7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     807:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     833:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     843:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     853:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     863:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     873:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     883:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     893:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     8a3:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8b3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8c3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8d3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8e3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8f3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     903:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000933 <logoInitPatches>:
     933:	00 00 00 3c 09 00 00 00 00                          ...<.....

0000093c <initPatch>:
     93c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     94c:	0a 1e 32 05 00 00 ff                                ..2....

00000953 <strChallenge>:
     953:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     963:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     973:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     983:	4b 20 49 53 20 53 4f 20 59 4f 55 00 23 20 20 20     K IS SO YOU.#   
     993:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     9a3:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     9b3:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     9c3:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     9d3:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     9e3:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     9f3:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

00000a03 <strIntro>:
     a03:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     a13:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     a23:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     a33:	00 41 4e 44 20 46 4c 45 57 20 54 4f 20 54 48 45     .AND FLEW TO THE
     a43:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 00     IR HOMEWORLDS...
     a53:	00 4a 45 52 4b 53 00 00 00 00 44 45 53 54 52 4f     .JERKS....DESTRO
     a63:	59 20 54 48 45 4d 20 41 4e 44 00 54 41 4b 45 20     Y THEM AND.TAKE 
     a73:	42 41 43 4b 20 59 4f 55 52 20 53 57 41 47 00 23     BACK YOUR SWAG.#
	...

00000a84 <default_scores>:
     a84:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     a94:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000aa2 <strTally>:
     aa2:	54 41 4c 4c 59 20 00                                TALLY .

00000aa9 <strGameOver>:
     aa9:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000ab3 <strLevelBonus>:
     ab3:	42 4f 4e 55 53 00                                   BONUS.

00000ab9 <strLevelClear>:
     ab9:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000ac5 <strPaused>:
     ac5:	50 41 55 53 45 00                                   PAUSE.

00000acb <strExitGame>:
     acb:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000ad7 <strMainMenu>:
     ad7:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000ae3 <strTime>:
     ae3:	54 49 4d 45 20 00                                   TIME .

00000ae9 <strLives>:
     ae9:	4c 49 56 45 53 20 00                                LIVES .

00000af0 <strShield>:
     af0:	53 48 49 45 4c 44 20 00                             SHIELD .

00000af8 <strScore>:
     af8:	53 43 4f 52 45 20 00                                SCORE .

00000aff <strSelectHandle>:
	...

00000b00 <strHighScores>:
     b00:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b0c <str1Player>:
     b0c:	53 54 41 52 54 00                                   START.

00000b12 <strCopyright>:
     b12:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     b22:	4f 4f 4b 53 00                                      OOKS.

00000b27 <spacesong>:
     b27:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b37:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     b47:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     b57:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     b67:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     b77:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     b87:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     b97:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     ba7:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     bb7:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     bc7:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     bd7:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     be7:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     bf7:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c07:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c17:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c27:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c37:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     c47:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     c57:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     c67:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     c77:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     c87:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     c97:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     ca7:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     cb7:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     cc7:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     cd7:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     ce7:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     cf7:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d07:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d17:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d27:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d37:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     d47:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     d57:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     d67:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     d77:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     d87:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     d97:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     da7:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     db7:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     dc7:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     dd7:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     de7:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     df7:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e07:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e17:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e27:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e37:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     e47:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     e57:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     e67:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     e77:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     e87:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     e97:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     ea7:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     eb7:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     ec7:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     ed7:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     ee7:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     ef7:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f07:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f17:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f27:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f37:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     f47:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     f57:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     f67:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     f77:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     f87:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     f97:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     fa7:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     fb7:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     fc7:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     fd7:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     fe7:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     ff7:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    1007:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    1017:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    1027:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    1037:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    1047:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    1057:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    1067:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    1077:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    1087:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    1097:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    10a7:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    10b7:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    10c7:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    10d7:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    10e7:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    10f7:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    1107:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    1117:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    1127:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    1137:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    1147:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1157:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1167:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1177:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1187:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1197:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    11a7:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    11b7:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

000011c7 <planetsong>:
    11c7:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    11d7:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    11e7:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    11f7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1207:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    1217:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    1227:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1237:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    1247:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1257:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1267:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1277:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1287:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1297:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    12a7:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    12b7:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    12c7:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    12d7:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    12e7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    12f7:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1307:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1317:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1327:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1337:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1347:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1357:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1367:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1377:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1387:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1397:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    13a7:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    13b7:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    13c7:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    13d7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    13e7:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    13f7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1407:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1417:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1427:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1437:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1447:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1457:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1467:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1477:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1487:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1497:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    14a7:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    14b7:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    14c7:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    14d7:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    14e7:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    14f7:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1507:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1517:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1527:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1537:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1547:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1557:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1567:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1577:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1587:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1597:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    15a7:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    15b7:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    15c7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    15d7:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    15e7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    15f7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1607:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    1617:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    1627:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    1637:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1647:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1657:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1667:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1677:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1687:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1697:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    16a7:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    16b7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    16c7:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    16d7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    16e7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    16f7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1707:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1717:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1727:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1737:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1747:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1757:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1767:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1777:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1787:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1797:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    17a7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    17b7:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    17c7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    17d7:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    17e7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    17f7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1807:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1817:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1827:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1837:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1847:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1857:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1867:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1877:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1887:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1897:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    18a7:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    18b7:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    18c7:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    18d7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    18e7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    18f7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1907:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1917:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1927:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1937:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1947:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1957:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1967:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1977:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1987:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1997:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19a7:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    19b7:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    19c7:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    19d7:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    19e7:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    19f7:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a07:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a17:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a27:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a37:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1a47:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1a57:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1a67:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1a77:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1a87:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1a97:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1aa7:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1ab7:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1ac7:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1ad7:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1ae7:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1af7:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b07:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b17:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b27:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b37:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b47:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1b57:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1b67:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1b77:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1b87:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1b97:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1ba7:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1bb7:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1bc7:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1bd7:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1be7:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1bf7:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c07:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c17:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c27:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c37:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1c47:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1c57:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1c67:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1c77:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1c87:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1c97:	2f 00                                               /.

00001c99 <my_patches>:
    1c99:	00 00 00 10 1e 00 00 00 00 00 00 00 10 1e 00 00     ................
    1ca9:	00 00 00 00 00 ff 1d 00 00 00 00 00 00 00 a9 1d     ................
    1cb9:	00 00 00 00 00 00 00 ff 1d 00 00 00 00 00 00 00     ................
    1cc9:	d8 1c 00 00 00 00 00 00 00 d8 1c 00 00 00 00        ...............

00001cd8 <explode>:
    1cd8:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1ce8:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1cf8:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d08:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d18:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d28:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d38:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1d48:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d58:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1d68:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d78:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1d88:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1d98:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1da8:	ff                                                  .

00001da9 <pshoot>:
    1da9:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1db9:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1dc9:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1dd9:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1de9:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1df9:	00 01 05 00 00 ff                                   ......

00001dff <navigate>:
    1dff:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e0f:	ff                                                  .

00001e10 <instrument>:
    1e10:	00 02 04 00 00 dd 00 ff                             ........

00001e18 <sprites_data>:
    1e18:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e28:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e38:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1e48:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1e58:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1e68:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1e78:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1e88:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1e98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1ea8:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1eb8:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1ec8:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1ed8:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1ee8:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1ef8:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f08:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f18:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f28:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f38:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1f48:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f58:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1f68:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1f78:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1f88:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1f98:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    1fa8:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    1fb8:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    1fc8:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fd8:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    1fe8:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    1ff8:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2008:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2018:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    2028:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    2038:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2048:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2058:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2068:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    2078:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    2088:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2098:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    20a8:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    20b8:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    20c8:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    20d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2108:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2118:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    2128:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2138:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2148:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2158:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2168:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2178:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2188:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2198:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21a8:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21b8:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21c8:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    21d8:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    21e8:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    21f8:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2208:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    2218:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2228:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2238:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2248:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2258:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2268:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2278:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    2288:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2298:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22a8:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22b8:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22c8:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    22d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22e8:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    22f8:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    2308:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2318:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    2328:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    2338:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    2348:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    2358:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2368:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    2378:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    2388:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2398:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23a8:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    23b8:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    23c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23e8:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    23f8:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    2408:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2418:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2428:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    2438:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    2448:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2458:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2468:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2478:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2488:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2498:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    24a8:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24b8:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24c8:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    24d8:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    24e8:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    24f8:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    2508:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2518:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    2528:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2538:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2548:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2558:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2568:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2578:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2588:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2598:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    25a8:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    25b8:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    25c8:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    25d8:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25e8:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    25f8:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2608:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2618:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2628:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2638:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2648:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2658:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2668:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2678:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2688:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2698:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    26a8:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    26b8:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    26c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26d8:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    26e8:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    26f8:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2708:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2718:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    2728:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    2738:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2748:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2758:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2768:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2778:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2788:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2798:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    27a8:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    27b8:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    27c8:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    27d8:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    27e8:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    27f8:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2808:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2818:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2828:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2838:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2848:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2858:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2868:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2878:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2888:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2898:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    28a8:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    28b8:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    28c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28d8:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    28e8:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    28f8:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2908:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2918:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2928:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2938:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2948:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2958:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2968:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2978:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2988:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2998:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29a8:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    29b8:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    29c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29d8:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    29e8:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    29f8:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2a08:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2a18:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a28:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2a38:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a48:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a58:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2a68:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2a78:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2a88:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2a98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aa8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ab8:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2ac8:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2ad8:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2ae8:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2af8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b18:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2b28:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2b38:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2b48:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2b58:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2b68:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2b78:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2b88:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2b98:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2ba8:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    2bb8:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    2bc8:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2bd8:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2be8:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2bf8:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2c08:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2c18:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c28:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2c38:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2c48:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c58:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2c68:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2c78:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2c88:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2ca8:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2cb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cd8:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2ce8:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2cf8:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2d08:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2d18:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d28:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2d38:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2d48:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2d58:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d68:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2d78:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2d88:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2d98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2da8:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2db8:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2dc8:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2dd8:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2de8:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2df8:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2e08:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2e18:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2e28:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2e38:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2e48:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2e58:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2e68:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2e78:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2e88:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2e98:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2ea8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2eb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ec8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ed8:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2ee8:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2ef8:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2f08:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2f18:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2f28:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2f38:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2f48:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f58:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2f68:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2f78:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2f88:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2f98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fa8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2fc8:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2fd8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2fe8:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2ff8:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    3008:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    3018:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    3028:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    3038:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    3048:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    3058:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    3068:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    3078:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    3088:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    3098:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    30a8:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    30b8:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    30c8:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    30d8:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    30e8:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    30f8:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    3108:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    3118:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    3128:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    3138:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    3148:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    3158:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    3168:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    3178:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    3188:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    3198:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    31a8:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    31b8:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    31c8:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    31d8:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    31e8:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    31f8:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    3208:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    3218:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3228:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3238:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3248:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    3258:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3268:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3278:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3288:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    3298:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    32a8:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    32b8:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    32c8:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    32d8:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    32e8:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    32f8:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    3308:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3318:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3328:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3338:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    3348:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3358:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    3368:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    3378:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    3388:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    3398:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    33a8:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    33b8:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    33c8:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    33d8:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    33e8:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    33f8:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    3408:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    3418:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3428:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    3438:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    3448:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3458:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3468:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3478:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    3488:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3498:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    34a8:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    34b8:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    34c8:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34d8:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    34e8:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    34f8:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    3508:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    3518:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3528:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    3538:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    3548:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3558:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    3568:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3578:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3588:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3598:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    35a8:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    35b8:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    35c8:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    35d8:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    35e8:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    35f8:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    3608:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3618:	00 00 00 fe fe fe fe fe fe 00 00 00 fe fe fe fe     ................
    3628:	fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe fe     ................
    3638:	fe fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe     ................
    3648:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00003658 <map_hazard_desert>:
    3658:	01 01 28                                            ..(

0000365b <map_hazard_city>:
    365b:	01 01 29                                            ..)

0000365e <map_hazard_jungle>:
    365e:	01 01 27                                            ..'

00003661 <map_hazard_fire>:
    3661:	01 01 26                                            ..&

00003664 <map_hazard_ice>:
    3664:	01 01 25                                            ..%

00003667 <map_enemy_boss_shot>:
    3667:	01 01 39                                            ..9

0000366a <map_enemy_boss_eye>:
    366a:	01 01 37                                            ..7

0000366d <map_enemy_boss_turret>:
    366d:	01 01 36                                            ..6

00003670 <map_enemy_drone>:
    3670:	01 01 35                                            ..5

00003673 <map_enemy_tank>:
    3673:	01 01 24                                            ..$

00003676 <map_enemy_ball>:
    3676:	01 01 14                                            ...

00003679 <map_enemy_spider_1>:
    3679:	01 01 34                                            ..4

0000367c <map_enemy_spider_0>:
    367c:	01 01 23                                            ..#

0000367f <map_enemy_shark>:
    367f:	01 01 05                                            ...

00003682 <map_enemy_shot>:
    3682:	01 01 13                                            ...

00003685 <map_ahero_jump>:
    3685:	02 03 4d 4e 52 55 5e 5f                             ..MNRU^_

0000368d <map_ahero_step_3>:
    368d:	02 03 4d 4e 52 53 5a 60                             ..MNRSZ`

00003695 <map_ahero_step_2>:
    3695:	02 03 4b 4c 4f 54 5c 5d                             ..KLOT\]

0000369d <map_ahero_step_1>:
    369d:	02 03 4d 4e 52 53 5a 5b                             ..MNRSZ[

000036a5 <map_ahero_step_0>:
    36a5:	02 03 4b 4c 4f 51 58 59                             ..KLOQXY

000036ad <map_ahero_idle>:
    36ad:	02 03 4b 4c 4f 50 56 57                             ..KLOPVW

000036b5 <map_hero_rplasma_shot>:
    36b5:	01 01 38                                            ..8

000036b8 <map_hero_space_bomb>:
    36b8:	01 01 18                                            ...

000036bb <map_hero_space_shot>:
    36bb:	01 01 17                                            ...

000036be <map_hero_ice_shot>:
    36be:	01 01 16                                            ...

000036c1 <map_hero_ball_shot>:
    36c1:	01 01 15                                            ...

000036c4 <map_hero_gplasma_shot>:
    36c4:	01 01 04                                            ...

000036c7 <map_hero_ship_large_1>:
    36c7:	04 02 3b 3c 3d 3e 49 40 4a 42                       ..;<=>I@JB

000036d1 <map_hero_ship_large_0>:
    36d1:	04 02 3b 3c 3d 3e 3f 40 41 42                       ..;<=>?@AB

000036db <map_hero_ship_1>:
    36db:	03 01 3a 2b 2c                                      ..:+,

000036e0 <map_hero_ship_0>:
    36e0:	03 01 2a 2b 2c                                      ..*+,

000036e5 <map_hero_prone>:
    36e5:	03 01 46 47 48                                      ..FGH

000036ea <map_hero_jump>:
    36ea:	02 03 02 03 0f 12 21 22                             ......!"

000036f2 <map_hero_step_3>:
    36f2:	02 03 02 03 0f 43 44 45                             .....CDE

000036fa <map_hero_step_2>:
    36fa:	02 03 00 01 0c 11 1f 20                             ....... 

00003702 <map_hero_step_1>:
    3702:	02 03 02 03 0f 10 1d 1e                             ........

0000370a <map_hero_step_0>:
    370a:	02 03 00 01 0c 0e 1b 1c                             ........

00003712 <map_hero_idle>:
    3712:	02 03 00 01 0c 0d 19 1a                             ........

0000371a <map_emerald_4>:
    371a:	01 01 0a                                            ...

0000371d <map_emerald_3>:
    371d:	01 01 09                                            ...

00003720 <map_emerald_2>:
    3720:	01 01 08                                            ...

00003723 <map_emerald_1>:
    3723:	01 01 07                                            ...

00003726 <map_emerald_0>:
    3726:	01 01 06                                            ...

00003729 <map_explosion_2>:
    3729:	01 01 2f                                            ../

0000372c <map_explosion_1>:
    372c:	01 01 2e                                            ...

0000372f <map_explosion_0>:
    372f:	01 01 2d                                            ..-

00003732 <map_particle>:
    3732:	01 01 30                                            ..0

00003735 <map_up_arrow>:
    3735:	01 01 33                                            ..3

00003738 <map_down_arrow>:
    3738:	01 01 32                                            ..2

0000373b <map_right_arrow>:
    373b:	01 01 31                                            ..1

0000373e <map_none>:
    373e:	01 01 14                                            ...

00003741 <tiles_data>:
	...
    3781:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3791:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37a1:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    37b1:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    37c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    37d1:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37e1:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    37f1:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3801:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3811:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3821:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3831:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3841:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3851:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3861:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3871:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3881:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3891:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    38a1:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    38b1:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    38c1:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    38d1:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    38e1:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    38f1:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3901:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    3911:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3921:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3931:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3941:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3951:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3961:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3971:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3981:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3991:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    39a1:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    39b1:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    39c1:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    39d1:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    39e1:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    39f1:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    3a01:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3a11:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3a21:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3a31:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3a41:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3a51:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3a61:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3a71:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3a81:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3a91:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3aa1:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3ab1:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3ac1:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3ad1:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3ae1:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3af1:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3b01:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3b11:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3b21:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3b31:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3b41:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3b51:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3b61:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3b71:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3b81:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3b91:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3ba1:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3bb1:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3bc1:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3bd1:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3be1:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3bf1:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3c01:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3c11:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3c21:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3c31:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3c41:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3c51:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3c61:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3c71:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3c81:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3c91:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3ca1:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3cb1:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3cc1:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3cd1:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3ce1:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3cf1:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3d01:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3d11:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3d21:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3d31:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3d41:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3d51:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3d61:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3d71:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3d81:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3d91:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3da1:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3db1:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3dc1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3dd1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    3de1:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    3df1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3e01:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    3e11:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    3e21:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3e31:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3e41:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e51:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3e61:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e71:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e81:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e91:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3ec1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ed1:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ee1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ef1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3f01:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f11:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    3f21:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    3f31:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3f41:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f51:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3f61:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3f71:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3f99:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3fa9:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fd9:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3fe9:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4001:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4011:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4021:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4031:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4041:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4051:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4061:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4071:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4081:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    4091:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    40a1:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    40b1:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    40c1:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    40d1:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    40e1:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    40f1:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    4101:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    4111:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    4121:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    4131:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    4141:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    4151:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    4161:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    4171:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    4181:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4191:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    41a1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    41b1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    41cd:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    41dd:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    41ed:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    41fd:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    420d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    421d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    422d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    423d:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    424d:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    425d:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    426d:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    427d:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    428d:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    429d:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    42ad:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    42bd:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42cd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42dd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42ed:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42fd:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    430d:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    431d:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    432d:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    433d:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    434d:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    435d:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    436d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    437d:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43a9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43b9:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    43c9:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    43d9:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    43e9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43f9:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    4409:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    4419:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    4429:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    4439:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    4449:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    4459:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    4469:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    4479:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    4489:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    4499:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    44a9:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    44b9:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    44c9:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    44d9:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    44e9:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    44f9:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    4509:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    4519:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    4529:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    4539:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    4549:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    4559:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4569:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4579:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    4589:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    4599:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    45a9:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    45c1:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    45d1:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    45e1:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    45f1:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    4601:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4611:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4621:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    4649:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4659:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    4669:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4689:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    4699:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    46a9:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    46c9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    46d9:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    46e9:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    4709:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    4719:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    4729:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    474d:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    475d:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    476d:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4789:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4799:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    47a9:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    47c9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    47d9:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    47e9:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4809:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    4819:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    4829:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4849:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4859:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4869:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4889:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4899:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    48a9:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    48c9:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    48d9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48e9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4909:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4919:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4929:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4949:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4959:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4969:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4989:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4999:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    49a9:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    49c9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    49d9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    49e9:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4a09:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4a19:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4a29:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4a49:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4a59:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4a69:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4a89:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a99:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4aa9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4ac9:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4ad9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4ae9:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4b0d:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b1d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4b2d:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4b49:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4b59:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4b69:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4b89:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b99:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4ba9:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4bc9:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4bd9:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4be9:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4c09:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4c19:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4c29:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4c49:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c59:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c69:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4c89:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c99:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4ca9:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4cc9:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4cd9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4ce9:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4d09:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4d19:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4d29:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4d49:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4d59:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4d69:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4d89:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4d99:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4da9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4dc9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4dd9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4de9:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4e09:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4e19:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4e29:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4e49:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4e59:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4e69:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4e89:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4e99:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4ea9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4ec9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4ed9:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4ee9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4f09:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    4f19:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    4f29:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4f41:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f51:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f61:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f71:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f81:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f91:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4fa1:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4fb1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4fc1:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    4fd1:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4fe1:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4ff1:	af af af af af af af af af af af af af af af af     ................
    5001:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5011:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5021:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5031:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5041:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    5051:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    5061:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    5071:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    5081:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    5091:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50a1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50b1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50c1:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    50d1:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50e1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50f1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5101:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    5111:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    5121:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5131:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5141:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5151:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5161:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5171:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5181:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5191:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51a1:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    51b1:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    51c1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51d1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51e1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51f1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5201:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5211:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5221:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5231:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5241:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5251:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5261:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5271:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5281:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    5291:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    52a1:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    52b1:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    52c1:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    52d1:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    52e1:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    52f1:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    5301:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    5311:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    5321:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5331:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    5341:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    5351:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    5361:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    5371:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5381:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    5391:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    53a1:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    53b1:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    53c1:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    53d1:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    53e1:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    53f1:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5401:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    5411:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    5421:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5431:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5441:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    5451:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5461:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5471:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5481:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    5491:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    54a1:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    54b1:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    54c1:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    54d1:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    54e1:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    54f1:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    5501:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    5511:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    5521:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    5531:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5541:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5551:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5561:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5571:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5581:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    5591:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    55a1:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    55b1:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    55c1:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    55d1:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    55e1:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    55f1:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5601:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5611:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5621:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5631:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5641:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5651:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5661:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5671:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5681:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5691:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56a1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56b1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56c1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56d1:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    56e1:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    56f1:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5701:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5711:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5721:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5731:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5741:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5751:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5761:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5771:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5781:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5791:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    57a1:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    57b1:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    57c1:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    57d1:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    57e1:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    57f1:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5801:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5811:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5821:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5831:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5841:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5851:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5861:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5871:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5881:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5891:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58a1:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58b1:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58c1:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    58d1:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    58e1:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    58f1:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5901:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5911:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5921:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5931:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5941:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5951:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5961:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5971:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5981:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5991:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    59a1:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    59b1:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    59c1:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    59d1:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    59e1:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    59f1:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5a01:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5a11:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5a21:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5a31:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a41:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a51:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a61:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a71:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a81:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5a91:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5aa1:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5ab1:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ac1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ad1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ae1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5af1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b01:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5b19:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5b29:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5b39:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b49:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b59:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5b69:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b79:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5b89:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b99:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5ba9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5bb9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5bc9:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5bd9:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5be9:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5bf9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c09:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c19:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c29:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c39:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c49:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c59:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5c69:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5c79:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5c89:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5c99:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5ca9:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5cb9:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5cc9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5cd9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5ce9:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5cf9:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5d09:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5d19:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5d29:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5d39:	3f 3f 3f 3f 3f 2f 2f 2f 77 77 77 77 77 77 77 2f     ?????///wwwwwww/
    5d49:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5d59:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5d69:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5d79:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d89:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d99:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5da9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5db9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5dc9:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5dd9:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5de9:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5df9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ///////////?????
    5e09:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5e19:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e29:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e39:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5e49:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5e59:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e69:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e79:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5e89:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5e99:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5ea9:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5eb9:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    5ec9:	13 13 13 14 13 65 5d 65 5c 65 13 14 65 65 1c 65     .....e]e\e..ee.e
    5ed9:	13 13 5c 13 13 65 13 65 14 14 5c 13 5d 5c 13 13     ..\..e.e..\.]\..
    5ee9:	1c 13 13 5c 5c 5c 5c 5c 1c 14 5c 13 13 13 13 13     ...\\\\\..\.....
    5ef9:	13 5c 65 5c 13 13 5c 13 00 00 00 00 00 00 00 00     .\e\..\.........
    5f09:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5f19:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5f29:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5f39:	00 00 00 00 00 00 00 a4                             ........

00005f41 <map_font>:
    5f41:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    5f51:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    5f61:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

00005f68 <map_atmosphere>:
    5f68:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5f78:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5f88:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5f98:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005fa2 <map_dialog>:
    5fa2:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5fb2:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5fc2:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5fd2:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5fe2:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5ff2:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    6002:	31 32                                               12

00006004 <map_canvas>:
    6004:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    6014:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    6024:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    6040:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    6050:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    6060:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    607c:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    608c:	32                                                  2

0000608d <map_splash>:
    608d:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    609d:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    60ad:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    60bd:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    60cd:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

000060da <map_tile_none>:
    60da:	01 01 00                                            ...

000060dd <map_level_mega_tiles>:
    60dd:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    60ed:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    60fd:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    610d:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    611d:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    612d:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    613d:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    614d:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    615d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    616d:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    617d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    618d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    619d:	63 63 63 02 02 02 02 02 63 63 63 63 63 02 02 02     ccc.....ccccc...
    61ad:	02 02 11 11 11 11 11 63 63 63 63 63 63 63 63 63     .......ccccccccc
    61bd:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    61cd:	63 63 64 63 63 63 63 65 66 67 63 63 63 63 63 63     ccdccccefgcccccc
    61dd:	63 02 02 02 63 02 04 04 04 63 04 04 04 04 02 04     c...c....c......
    61ed:	04 04 04 63 63 63 63 63 02 02 02 63 63 04 04 04     ...ccccc...cc...
    61fd:	02 63 04 04 04 04 02 04 04 04 04 04 67 66 68 63     .c..........gfhc
    620d:	63 63 63 68 67 66 66 67 68 63 63 63 63 69 63 63     ccchgffghccccicc
    621d:	02 02 02 02 02 63 63 63 63 63 63 63 02 02 02 63     .....ccccccc...c
    622d:	02 04 04 04 02 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    623d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    624d:	63 63 18 18 18 18 18 63 63 63 63 02 63 63 63 02     cc.....cccc.ccc.
    625d:	04 63 63 02 04 04 63 02 04 04 04 02 04 04 04 04     .cc...c.........
    626d:	02 02 02 02 02 04 04 04 04 04 04 04 04 04 04 04     ................
    627d:	04 04 04 04 04 04 04 04 04 18 18 18 18 18 04 04     ................
    628d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    629d:	04 04 02 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    62ad:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    62bd:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    62cd:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    62dd:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    62ed:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    62fd:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    630d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    631d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    632d:	6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c     lll.....llllllll
    633d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c     llllllllllll.lll
    634d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    635d:	6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 6c 05 6c     llllllll.lllll.l
    636d:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    637d:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    638d:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    639d:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63ad:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    63bd:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    63cd:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c     lllllllllllll..l
    63dd:	6c 6c 05 05 13 13 13 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    63ed:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 13 13 13 13 13     lllllllllll.....
    63fd:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06     lllllllllllllll.
    640d:	06 6c 6c 6c 05 05 06 06 06 6c 6c 6c 6c 06 6c 6c     .lll.....llll.ll
    641d:	6c 06 05 6c 6c 06 05 05 6c 06 05 05 05 06 05 05     l..ll...l.......
    642d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    643d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 06     ................
    644d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    645d:	05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c 05 06     ....lllll.llll..
    646d:	6c 6c 6c 05 05 06 6c 6c 05 05 05 13 13 6c 6c 6c     lll...ll.....lll
    647d:	6c 6c 06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c     ll.llll..lll...l
    648d:	6c 05 05 05 05 05 6c 6c 6c 6c 06 6c 6c 6c 06 05     l.....llll.lll..
    649d:	6c 6c 06 05 05 6c 06 05 05 05 05 05 05 05 05 72     ll...l.........r
    64ad:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 74 73     sttststtststtsts
    64bd:	74 74 73 74 73 74 74 73 74 73 74 74 73 74 73 74     ttststtststtstst
    64cd:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    64dd:	73 74 73 74 74 75 74 73 74 74 73 74 73 74 74 73     ststtutsttststts
    64ed:	74 73 74 74 73 74 73 74 74 73 76 73 74 74 73 78     tsttststtsvsttsx
    64fd:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    650d:	78 78 78 74 73 74 74 73 79 7a 79 79 7a 7b 7c 7b     xxxtsttsyzyyz{|{
    651d:	7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 74 73 74 74     {|yzyyz{|{{|tstt
    652d:	77 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     wxxxxxxxxxxxxxxx
    653d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    654d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 79 7a     xxxxxxxxxxxxxxyz
    655d:	79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b     yyz{|{{|yzyyz{|{
    656d:	7b 7c 79 7a 79 79 7a 78 78 78 78 78 78 78 78 78     {|yzyyzxxxxxxxxx
    657d:	78 78 78 78 78 78 78 78 78 78 78 0d 0e 0e 0d 0e     xxxxxxxxxxx.....
    658d:	7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 79     {|{{|yzyyz{|{{|y
    659d:	7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78 78 78 78 78     zyyz{|{{|xxxxxxx
    65ad:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 07     xxxxxxxxxxxxxxx.
    65bd:	07 07 78 78 78 78 78 78 78 78 78 78 78 78 78 78     ..xxxxxxxxxxxxxx
    65cd:	78 78 78 78 78 78 07 07 07 78 78 78 78 78 78 78     xxxxxx...xxxxxxx
    65dd:	78 78 78 78 78 78 78 78 78 78 78 78 07 07 07 78     xxxxxxxxxxxx...x
    65ed:	78 05 05 05 78 78 78 78 78 78 78 78 78 78 78 78     x...xxxxxxxxxxxx
    65fd:	78 78 78 07 07 07 78 78 05 05 05 78 78 78 78 12     xxx...xx...xxxx.
    660d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    661d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    662d:	78 78 78 78 78 78 78 78 78 78 07 07 07 07 07 79     xxxxxxxxxx.....y
    663d:	7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     zyyz{|{{|yzyyz{|
    664d:	7b 7b 7c 07 07 07 07 07 78 78 05 05 05 78 07 05     {{|.....xx...x..
    665d:	05 05 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    666d:	05 05 05 05 78 78 05 05 05 07 78 05 05 05 05 78     ....xx....x....x
    667d:	05 05 05 05 07 05 05 05 05 05 78 07 05 05 05 78     ..........x....x
    668d:	05 05 05 05 07 05 05 05 05 05 05 05 05 05 05 05     ................
    669d:	05 05 05 05 05 05 07 78 05 05 05 05 78 05 05 05     .......x....x...
    66ad:	05 07 05 05 05 05 05 05 05 05 05 05 78 78 78 78     ............xxxx
    66bd:	78 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     xxxxxxxxxxx.xxxx
    66cd:	05 14 14 14 14 78 78 78 78 78 78 78 78 78 78 78     .....xxxxxxxxxxx
    66dd:	78 78 78 78 78 78 78 78 07 14 14 14 14 05 7d 7d     xxxxxxxx......}}
    66ed:	7d 7d 7d 7d 7d 7d 7d 7d 7d 0f 81 7d 0f 85 85 85     }}}}}}}}}..}....
    66fd:	85 85 85 85 85 85 85 7d 7d 7d 7d 7d 7d 7d 7d 7e     .......}}}}}}}}~
    670d:	7f 81 7d 0f 82 83 85 85 85 86 87 85 85 85 89 8a     ..}.............
    671d:	7d 7d 7d 7d 7d 80 7d 7d 7d 7d 84 81 7d 0f 81 88     }}}}}.}}}}..}...
    672d:	85 85 85 85 84 85 85 85 85 7d 7d 7d 7d 7d 7d 7d     .........}}}}}}}
    673d:	7d 7d 7d 81 7d 0f 81 7d 85 85 85 85 85 85 85 85     }}}.}..}........
    674d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    675d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 86 87     ................
    676d:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 85     ................
    677d:	85 85 86 87 88 85 85 85 85 84 85 85 85 85 88 85     ................
    678d:	85 85 85 84 85 85 85 85 88 85 85 85 85 85 85 85     ................
    679d:	85 85 85 85 85 85 85 85 85 85 85 8b 85 85 85 8b     ................
    67ad:	60 85 85 8b 60 60 85 85 85 89 8a 85 85 85 86 87     `...``..........
    67bd:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 84     ................
    67cd:	85 85 85 85 88 85 85 85 85 84 85 85 85 85 88 85     ................
    67dd:	85 85 85 84 85 85 85 85 85 85 85 89 8a 85 85 85     ................
    67ed:	86 87 85 85 85 89 8a 85 85 85 86 87 85 09 09 09     ................
    67fd:	09 84 85 85 85 85 88 85 85 85 85 84 85 85 85 85     ................
    680d:	88 85 85 85 85 09 85 85 85 85 85 85 8c 8c 8c 85     ................
    681d:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    682d:	8c 8c 8c 85 85 85 86 87 85 8d 85 89 8a 8d 8e 85     ................
    683d:	85 8f 90 90 90 90 90 90 90 90 90 90 88 85 85 85     ................
    684d:	85 84 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    685d:	85 85 85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85     ................
    686d:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 85     ................
    687d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 90     ................
    688d:	90 90 85 85 90 90 90 85 85 8c 8c 8c 85 85 8c 8c     ................
    689d:	8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 09 09 09 09     ................
    68ad:	85 85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 90     ................
    68bd:	90 90 90 90 09 90 90 90 90 88 85 85 85 85 84 85     ................
    68cd:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 09 09     ................
    68dd:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    68ed:	8c 85 8c 8c 8c 8c 09 8c 8c 8c 8c 88 85 85 85 09     ................
    68fd:	84 85 85 09 08 85 85 09 08 08 85 09 08 08 08 09     ................
    690d:	08 08 08 08 85 85 85 85 85 15 15 15 15 15 08 08     ................
    691d:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 09 85     ................
    692d:	85 85 08 08 15 15 15 08 08 08 08 08 08 08 08 08     ................
    693d:	08 08 08 08 08 08 85 85 09 8c 8c 15 15 08 09 8c     ................
    694d:	08 08 08 08 09 08 08 08 08 08 08 08 08 08 08 85     ................
    695d:	85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 09 90     ................
    696d:	90 90 90 08 09 90 90 90 85 85 8c 8c 8c 85 85 8c     ................
    697d:	8c 8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09     .........```....
    698d:	09 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    699d:	90 90 90 90 90 09 09 09 09 09 85 85 85 85 85 85     ................
    69ad:	8c 8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09     ..........``....
    69bd:	09 09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    69cd:	8c 8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90     ...````.........
    69dd:	90 85 85 90 90 90 85 85 90 90 90 85 85 90 90 90     ................
    69ed:	09 09 09 09 09 85 85 90 90 90 85 85 90 90 90 85     ................
    69fd:	85 90 90 90 85 09 90 90 90 09 08 15 15 15 85 85     ................
    6a0d:	8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 09     ................
    6a1d:	60 60 15 15 08 09 09 90 90 90 90 90 90 90 90 90     ``..............
    6a2d:	90 90 90 90 90 90 90 90 90 09 90 09 09 09 08 15     ................
    6a3d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6a4d:	85 85 85 09 15 15 15 15 08 90 90 90 90 09 90 90     ................
    6a5d:	90 09 08 90 90 09 08 08 90 09 08 08 08 09 08 08     ................
    6a6d:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    6a7d:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 90 90     ................
    6a8d:	08 08 08 09 90 08 08 08 08 09 08 08 08 08 08 08     ................
    6a9d:	08 08 08 08 85 85 85 85 85 85 8c 8c 85 85 85 8c     ................
    6aad:	8c 90 85 09 60 60 90 85 08 09 09 09 09 85 85 85     ....``..........
    6abd:	85 85 85 85 85 85 09 85 85 85 09 08 85 85 09 08     ................
    6acd:	08 09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c     ................
    6add:	15 15 15 15 15 08 08 08 08 08 08 08 08 08 08 85     ................
    6aed:	85 90 90 90 09 09 90 90 90 08 08 15 15 15 08 08     ................
    6afd:	08 08 08 08 08 08 08 08 85 85 8c 8c 8c 85 85 09     ................
    6b0d:	8c 8c 15 15 08 09 8c 08 08 08 08 09 08 08 08 08     ................
    6b1d:	08 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6b2d:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6b3d:	91 91 91 91 91 91 91 91 91 92 92 92 92 92 93 93     ................
    6b4d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b5d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b6d:	93 93 93 94 93 93 93 95 96 97 93 98 9b 10 9c 9a     ................
    6b7d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b8d:	93 93 93 93 93 93 93 93 93 93 93 94 93 93 93 93     ................
    6b9d:	93 93 93 93 93 94 93 93 93 98 99 9a 93 98 99 99     ................
    6bad:	99 9a 93 93 93 93 93 93 98 99 9a 93 98 99 99 99     ................
    6bbd:	9a 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bcd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bdd:	93 93 93 93 0a 0a 0a 0a 0a 93 95 96 97 93 98 9b     ................
    6bed:	10 9c 9a 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bfd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6c0d:	93 93 93 93 93 93 93 93 93 93 0a 93 98 99 9a 93     ................
    6c1d:	98 99 99 99 9a 93 93 93 93 93 93 93 93 93 93 9d     ................
    6c2d:	0a 93 93 93 93 95 96 97 93 98 9b 10 9c 9a 93 93     ................
    6c3d:	93 93 93 0a 0a 0a 9d 0a 16 16 16 16 16 93 93 93     ................
    6c4d:	93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93 93     ................
    6c5d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6c6d:	93 93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93     ................
    6c7d:	93 93 0a 0b 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a 0b     ................
    6c8d:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c9d:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6cad:	0b 0b 0b 0b 0b 9e 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6cbd:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 93 93 0b     ................
    6ccd:	0b 0b 0a 93 0b 0b 0b 0b 0a 0b 0b 0b 0b 0b 0b 0b     ................
    6cdd:	0b 0b 0b 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6ced:	93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 93 93 93 93     ................
    6cfd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6d0d:	0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93 93     ................
    6d1d:	93 93 93 93 93 93 93 93 93 17 17 17 17 17 93 93     ................
    6d2d:	93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a 93     ................
    6d3d:	93 93 0b 0b 17 17 17 93 93 93 93 93 93 93 93 93     ................
    6d4d:	93 93 93 93 93 93 93 93 0a 0a 93 17 17 0b 0b 17     ................
    6d5d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d6d:	93 93 93 0a 17 17 17 17 0b 93 93 93 93 93 93 93     ................
    6d7d:	93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 17 17     ................
    6d8d:	17 17 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d9d:	93 93 0a 93 93 93 17 0b 0a 0a 0a 16 16 16 16 16     ................
    6dad:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6dbd:	0a 0a 0a 0a 00 21 00 00 00 00 00 00 00 00 00 00     .....!..........
    6dcd:	00 00 00 00 21 00 00 00 00 00 00 00 00 00 00 00     ....!...........
    6ddd:	00 00 00 00 00 00 22 00 21 00 00 00 00 00 00 00     ......".!.......
    6ded:	00 00 00 00 00 21 00 00 00 00 00 00 00 22 00 00     .....!......."..
    6dfd:	00 21 00 00 00 00 00 00 00 00 00 00 00 22 00 22     .!..........."."
	...
    6e15:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6e25:	00 21 19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00     .!..............
    6e35:	21 00 00 00 00 00 00 00 00 19 19 19 19 19 19 19     !...............
    6e45:	19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00     ................
    6e55:	00 21 19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a     .!..............
    6e65:	1a 00 21 00 00 00 00 00 00 00 00 19 19 9f 9f 9f     ..!.............
    6e75:	19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00     ................
    6e85:	00 00 00 21 9f 9f 9f 9f 9f 19 19 19 19 19 1a 1a     ...!............
    6e95:	1a 1a 1a 00 21 00 00 00 00 00 00 00 00 9f 9f 19     ....!...........
    6ea5:	19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00     ................
    6eb5:	00 00 00 00 00 21 19 19 19 19 19 19 19 19 19 19     .....!..........
    6ec5:	1a 1a 1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00     ................
    6ed5:	00 00 00 00 00 00 22 00 00 00 21 00 00 00 00 00     ......"...!.....
    6ee5:	00 1a 1a 00 00 00 22 00 22 00 00 00 00 00 00 00     ......".".......
    6ef5:	00 00 00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00     ...!............
    6f05:	1b 19 19 00 00 00 19 19 22 00 00 19 19 00 00 00     ........".......
    6f15:	1a 1a 1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00     ........".......
    6f25:	00 1b 1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00     .....!..........
    6f35:	00 1b 1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b     ................
    6f45:	1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00     ................
    6f55:	00 00 00 22 1a 1a 00 21 00 00 00 00 00 00 00 00     ..."...!........
    6f65:	00 00 00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00     ..."."..........
    6f75:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 1b 1b     !...............
    6f85:	1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00 19 19 00     ................
    6f95:	00 00 19 19 00 22 00 00 21 00 00 00 00 00 00 00     ....."..!.......
    6fa5:	00 00 00 1a 1a 1a 00 21 19 19 19 00 00 19 19 19     .......!........
	...
    6fbd:	00 22 1a 1a 1a 1a 1a 19 19 19 19 19 19 19 19 19     ."..............
    6fcd:	19 00 21 00 00 00 00 00 00 00 00 1a 1a 1a 1a 1a     ..!.............
    6fdd:	19 19 19 19 19 19 19 19 19 19 19 19 00 00 00 19     ................
    6fed:	19 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19 19 19     ................
    6ffd:	19 19 19                                            ...

00007000 <map_level_space_final>:
    7000:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    7010:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7020:	84 85 84 85 84 85 84 85 84 85 84 85 88 89 8a 89     ................
    7030:	8a 8b 8c 8d 8e 86 87 86 87 86 87 86 87 86 87 86     ................
    7040:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7050:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7060:	87 86 87 86 87 8f 90 91 84 85 84 85 84 85 84 85     ................
    7070:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7080:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7090:	84 85 84 85 84 85 84 85 84 92 93 86 87 86 87 86     ................
    70a0:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    70b0:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    70c0:	87 86 87 86 87 86 87 86 87 86 87 94 95 96 84 85     ................
    70d0:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    70e0:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    70f0:	84 85 84 85 84 85 84 85 97 98 99 98 99 98 99 98     ................
    7100:	9a                                                  .

00007101 <map_level_space>:
    7101:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    7111:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7121:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7131:	84 85 84 85 84 86 87 86 87 86 87 86 87 86 87 86     ................
    7141:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7151:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7161:	87 86 87 86 87 86 87 86 84 85 84 85 84 85 84 85     ................
    7171:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7181:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7191:	84 85 84 85 84 85 84 85 84 85 84 86 87 86 87 86     ................
    71a1:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    71b1:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    71c1:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 84 85     ................
    71d1:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    71e1:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    71f1:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7201:	84                                                  .

00007202 <map_level_desert>:
    7202:	33 05 69 69 69 69 69 69 69 69 69 69 69 69 69 69     3.iiiiiiiiiiiiii
    7212:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7222:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7232:	69 69 69 69 69 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     iiiiijjjjjjjjjjj
    7242:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    7252:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    7262:	6a 6a 6a 6a 6a 6a 6a 6a 6b 6c 6b 6d 6b 6d 6b 6e     jjjjjjjjklkmkmkn
    7272:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    7282:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    7292:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6e 6b 6b 6b 6b 6f 70     klkmkmknknkkkkop
    72a2:	71 70 6b 72 70 70 73 6b 74 6b 6b 6b 6b 6b 6f 6b     qpkrppsktkkkkkok
    72b2:	71 6b 6b 70 6b 75 6f 76 71 6b 6b 72 70 70 73 6b     qkkpkuovqkkrppsk
    72c2:	71 6b 6b 6b 6b 6b 6f 6b 6f 6b 6b 6b 6b 6b 70 70     qkkkkkokokkkkkpp
    72d2:	70 70 70 70 70 70 77 78 79 7a 7b 70 70 70 7c 7d     ppppppwxyz{ppp|}
    72e2:	7e 7f 80 81 82 70 70 70 70 70 83 70 70 70 77 78     ~....ppppp.pppwx
    72f2:	79 7a 7b 70 70 70 70 81 82 70 70 70 70 70 70 70     yz{pppp..ppppppp
    7302:	70                                                  p

00007303 <map_level_city>:
    7303:	33 05 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e     3.>?@>A>?@>A>?@>
    7313:	41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41     A>?@>A>?@>A>?@>A
    7323:	3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e     >?@>A>?@>A>?@>A>
    7333:	3f 40 3e 41 3e 42 43 44 42 42 42 43 44 42 42 42     ?@>A>BCDBBBCDBBB
    7343:	43 44 42 42 42 43 44 42 42 42 43 44 42 42 42 43     CDBBBCDBBBCDBBBC
    7353:	44 42 42 42 43 44 42 42 42 43 44 42 42 42 43 44     DBBBCDBBBCDBBBCD
    7363:	42 42 42 43 44 42 42 42 45 46 47 42 42 45 48 49     BBBCDBBBEFGBBEHI
    7373:	42 42 45 46 47 42 42 45 48 49 42 42 45 46 47 42     BBEFGBBEHIBBEFGB
    7383:	42 45 46 47 42 42 45 46 47 42 42 45 46 47 42 42     BEFGBBEFGBBEFGBB
    7393:	45 48 49 42 42 45 46 47 42 42 45 4a 4b 4c 4d 4e     EHIBBEFGBBEJKLMN
    73a3:	4f 50 51 52 4e 4a 4b 4c 4d 4e 4f 50 51 52 4e 4a     OPQRNJKLMNOPQRNJ
    73b3:	4b 53 54 55 56 57 4c 4d 4e 4a 4b 4c 4d 4e 4a 4b     KSTUVWLMNJKLMNJK
    73c3:	4c 4d 4e 4f 50 4c 4d 4e 4a 4b 4c 4d 4e 4a 58 59     LMNOPLMNJKLMNJXY
    73d3:	5a 5b 5c 58 59 5a 5b 5d 5e 5f 60 5b 5c 58 59 5a     Z[\XYZ[]^_`[\XYZ
    73e3:	5b 5c 58 61 62 62 62 62 63 64 5b 5c 58 59 65 66     [\Xabbbbcd[\XYef
    73f3:	67 68 59 5a 5b 5c 58 59 5a 5b 5c 58 59 5a 5b 5c     ghYZ[\XYZ[\XYZ[\
    7403:	58                                                  X

00007404 <map_level_forest>:
    7404:	33 05 27 28 29 27 28 29 27 28 29 27 28 29 27 28     3.'()'()'()'()'(
    7414:	29 27 28 29 27 28 29 27 28 29 27 28 29 27 28 29     )'()'()'()'()'()
    7424:	27 28 29 27 28 29 27 28 29 27 28 29 27 28 29 27     '()'()'()'()'()'
    7434:	28 29 27 28 29 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b     ()'()*+,*+,*+,*+
    7444:	2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c     ,*+,*+,*+,*+,*+,
    7454:	2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a     *+,*+,*+,*+,*+,*
    7464:	2b 2c 2a 2b 2c 2a 2b 2c 2d 2e 2d 2d 2e 2d 2d 2e     +,*+,*+,-.--.--.
    7474:	2f 2d 2e 2d 2f 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2d     /-.-/.--.--.--.-
    7484:	2d 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2f 2d 2e 2f 2d     -.--.--.--./-./-
    7494:	2e 2d 2d 2e 2f 2d 2e 2d 2d 2e 2d 2d 30 2d 2d 30     .--./-.--.--0--0
    74a4:	2d 2f 30 2d 2f 30 2f 2d 30 2d 2d 30 31 32 30 31     -/0-/0/-0--01201
    74b4:	32 30 33 34 30 2d 2d 30 2d 2d 30 2f 2d 30 35 2d     20340--0--0/-05-
    74c4:	30 35 2d 30 2d 2d 30 35 2d 30 2d 2d 30 2d 36 37     05-0--05-0--0-67
    74d4:	36 36 37 36 36 37 36 36 37 36 36 37 36 36 37 38     6676676676676678
    74e4:	39 37 38 39 37 3a 3b 37 3c 3d 37 3c 3d 37 36 36     97897:;7<=7<=766
    74f4:	37 36 36 37 36 36 37 3c 3d 37 36 36 37 36 36 37     7667667<=7667667
    7504:	36                                                  6

00007505 <map_level_fire>:
    7505:	33 05 13 13 13 13 13 13 13 13 13 13 13 13 13 13     3...............
    7515:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    7525:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    7535:	13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14     ................
    7545:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    7555:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    7565:	14 14 14 14 14 14 14 14 15 16 15 15 15 15 16 15     ................
    7575:	15 15 15 16 15 15 15 15 15 17 15 16 15 15 15 15     ................
    7585:	15 15 15 15 18 19 16 15 15 15 15 16 15 15 15 15     ................
    7595:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    75a5:	15 15 15 15 15 15 15 17 15 15 17 15 15 15 17 15     ................
    75b5:	15 15 15 15 15 15 1a 1b 1c 1d 15 15 15 15 15 15     ................
    75c5:	15 18 19 15 15 18 19 15 15 15 15 15 15 15 17 17     ................
    75d5:	17 1e 1f 1e 1f 1e 1f 1e 1f 20 17 17 17 17 17 17     ......... ......
    75e5:	17 17 17 17 1e 1f 1e 1f 21 22 22 22 23 24 1f 1e     ........!"""#$..
    75f5:	1f 20 17 21 1b 1c 25 26 1b 1c 25 17 17 17 17 17     . .!..%&..%.....
    7605:	17                                                  .

00007606 <map_level_ice>:
    7606:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    7616:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    7626:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    7636:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    7646:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    7656:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    7666:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    7676:	06 07 07 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    7686:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    7696:	06 06 06 06 06 06 06 06 06 06 06 06 06 09 06 06     ................
    76a6:	06 06 06 0a 02 02 0b 06 06 06 06 09 06 06 06 06     ................
    76b6:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    76c6:	06 06 08 06 09 06 06 06 06 06 06 06 06 06 07 07     ................
    76d6:	0c 07 07 07 07 0d 02 02 02 02 0b 07 07 07 0c 0e     ................
    76e6:	07 0e 07 0e 07 0f 10 10 10 11 10 11 10 11 12 07     ................
    76f6:	07 07 07 07 07 07 07 0c 07 07 07 07 07 07 07 07     ................
    7706:	07 00                                               ..

00007708 <__ctors_end>:
    7708:	11 24       	eor	r1, r1
    770a:	1f be       	out	0x3f, r1	; 63
    770c:	cf ef       	ldi	r28, 0xFF	; 255
    770e:	d0 e1       	ldi	r29, 0x10	; 16
    7710:	de bf       	out	0x3e, r29	; 62
    7712:	cd bf       	out	0x3d, r28	; 61

00007714 <__do_copy_data>:
    7714:	15 e0       	ldi	r17, 0x05	; 5
    7716:	a0 e0       	ldi	r26, 0x00	; 0
    7718:	b5 e0       	ldi	r27, 0x05	; 5
    771a:	ea ed       	ldi	r30, 0xDA	; 218
    771c:	f9 ee       	ldi	r31, 0xE9	; 233
    771e:	02 c0       	rjmp	.+4      	; 0x7724 <__do_copy_data+0x10>
    7720:	05 90       	lpm	r0, Z+
    7722:	0d 92       	st	X+, r0
    7724:	a0 31       	cpi	r26, 0x10	; 16
    7726:	b1 07       	cpc	r27, r17
    7728:	d9 f7       	brne	.-10     	; 0x7720 <__do_copy_data+0xc>

0000772a <__do_clear_bss>:
    772a:	10 e1       	ldi	r17, 0x10	; 16
    772c:	a0 e1       	ldi	r26, 0x10	; 16
    772e:	b5 e0       	ldi	r27, 0x05	; 5
    7730:	01 c0       	rjmp	.+2      	; 0x7734 <.do_clear_bss_start>

00007732 <.do_clear_bss_loop>:
    7732:	1d 92       	st	X+, r1

00007734 <.do_clear_bss_start>:
    7734:	a2 35       	cpi	r26, 0x52	; 82
    7736:	b1 07       	cpc	r27, r17
    7738:	e1 f7       	brne	.-8      	; 0x7732 <.do_clear_bss_loop>

0000773a <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    773a:	0e 94 38 41 	call	0x8270	; 0x8270 <wdt_randomize>
#endif

    MCUSR = 0;
    773e:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7740:	88 e1       	ldi	r24, 0x18	; 24
    7742:	0f b6       	in	r0, 0x3f	; 63
    7744:	f8 94       	cli
    7746:	80 93 60 00 	sts	0x0060, r24
    774a:	10 92 60 00 	sts	0x0060, r1
    774e:	0f be       	out	0x3f, r0	; 63

00007750 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    7750:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <isEepromFormatted>
    7754:	81 11       	cpse	r24, r1
    7756:	02 c0       	rjmp	.+4      	; 0x775c <Initialize+0xc>
    7758:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <FormatEeprom>

	cli();
    775c:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    775e:	81 e0       	ldi	r24, 0x01	; 1
    7760:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    7764:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7768:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    776c:	10 92 d0 0c 	sts	0x0CD0, r1
    7770:	10 92 d6 0c 	sts	0x0CD6, r1
    7774:	10 92 dc 0c 	sts	0x0CDC, r1
    7778:	10 92 e2 0c 	sts	0x0CE2, r1
    777c:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7780:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    7784:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7788:	92 e1       	ldi	r25, 0x12	; 18
    778a:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    778e:	90 ee       	ldi	r25, 0xE0	; 224
    7790:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    7794:	94 e1       	ldi	r25, 0x14	; 20
    7796:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    779a:	10 92 c2 0c 	sts	0x0CC2, r1
    779e:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    77a2:	10 92 c6 0c 	sts	0x0CC6, r1
    77a6:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    77aa:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    77ae:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <InitializeVideoMode>
    77b2:	84 e9       	ldi	r24, 0x94	; 148
    77b4:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    77b6:	fc 01       	movw	r30, r24
    77b8:	25 91       	lpm	r18, Z+
    77ba:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    77bc:	f9 01       	movw	r30, r18
    77be:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    77c0:	30 83       	st	Z, r19
    77c2:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    77c4:	20 e0       	ldi	r18, 0x00	; 0
    77c6:	82 3c       	cpi	r24, 0xC2	; 194
    77c8:	92 07       	cpc	r25, r18
    77ca:	a9 f7       	brne	.-22     	; 0x77b6 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    77cc:	78 94       	sei
	
	DisplayLogo();
    77ce:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DisplayLogo>
    77d2:	0e 94 86 72 	call	0xe50c	; 0xe50c <main>
    77d6:	0c 94 eb 74 	jmp	0xe9d6	; 0xe9d6 <_exit>

000077da <__bad_interrupt>:
    77da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000077de <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    77de:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    77e0:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    77e4:	ad e8       	ldi	r26, 0x8D	; 141
    77e6:	aa 95       	dec	r26
    77e8:	f1 f7       	brne	.-4      	; 0x77e6 <sub_video_mode3+0x8>
    77ea:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    77ec:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    77f0:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    77f2:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    77f4:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    77f6:	02 9f       	mul	r16, r18
		add ZL,r0
    77f8:	e0 0d       	add	r30, r0
		adc ZH,r1
    77fa:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    77fc:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    77fe:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7800:	20 91 80 0d 	lds	r18, 0x0D80
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    7804:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    7806:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    7808:	30 0f       	add	r19, r16

		cp r18,r16
    780a:	20 17       	cp	r18, r16
		breq no_ramtiles
    780c:	51 f0       	breq	.+20     	; 0x7822 <no_ramtiles>
		nop
    780e:	00 00       	nop
	...

00007812 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7812:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7814:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7816:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    7818:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    781a:	0c 93       	st	X, r16

		inc r16
    781c:	03 95       	inc	r16
		cp r16,r18
    781e:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7820:	c0 f3       	brcs	.-16     	; 0x7812 <upd_loop>

00007822 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7822:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7824:	1a 95       	dec	r17
		brne .-4
    7826:	f1 f7       	brne	.-4      	; 0x7824 <no_ramtiles+0x2>
		rjmp .
    7828:	00 c0       	rjmp	.+0      	; 0x782a <no_ramtiles+0x8>
		dec r19
    782a:	3a 95       	dec	r19
		brne 1b
    782c:	d1 f7       	brne	.-12     	; 0x7822 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    782e:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7830:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    7832:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    7836:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    7838:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    783a:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    783c:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    783e:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    7842:	60 2f       	mov	r22, r16
		lsr r16
    7844:	06 95       	lsr	r16
		lsr r16
    7846:	06 95       	lsr	r16
		lsr r16 ;/8
    7848:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    784a:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    784e:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    7850:	f1 2e       	mov	r15, r17

        mov r17,r16
    7852:	10 2f       	mov	r17, r16
        lsr r16
    7854:	06 95       	lsr	r16
        lsr r16
    7856:	06 95       	lsr	r16
        lsr r16 ;/8
    7858:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    785a:	d0 0f       	add	r29, r16
		andi r17,0x7
    785c:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    785e:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    7860:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    7862:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    7866:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    786a:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    786e:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    7872:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    7874:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    7876:	5e 01       	movw	r10, r28
		mov r23,r22
    7878:	76 2f       	mov	r23, r22
		mov r24,r15
    787a:	8f 2d       	mov	r24, r15
		mov r9,r25
    787c:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    787e:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    7882:	20 2f       	mov	r18, r16
		lsr r16
    7884:	06 95       	lsr	r16
		lsr r16
    7886:	06 95       	lsr	r16
		lsr r16			;hi8
    7888:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    788a:	03 95       	inc	r16
		andi r18,7		;lo8
    788c:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    788e:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    7892:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    7894:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    7896:	01 fe       	sbrs	r0, 1
		clr r22
    7898:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    789a:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    789c:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    789e:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    78a0:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    78a2:	01 fe       	sbrs	r0, 1
		ser r24
    78a4:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    78a6:	01 fe       	sbrs	r0, 1
		clr r9
    78a8:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    78aa:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    78ac:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    78ae:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    78b0:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    78b2:	80 90 be 0c 	lds	r8, 0x0CBE

000078b6 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    78b6:	bc d3       	rcall	.+1912   	; 0x8030 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    78b8:	24 e0       	ldi	r18, 0x04	; 4
    78ba:	2a 95       	dec	r18
    78bc:	f1 f7       	brne	.-4      	; 0x78ba <next_tile_line+0x4>
    78be:	00 00       	nop
				
		call render_tile_line
    78c0:	0e 94 a1 3c 	call	0x7942	; 0x7942 <render_tile_line>

		WAIT r18,58
    78c4:	23 e1       	ldi	r18, 0x13	; 19
    78c6:	2a 95       	dec	r18
    78c8:	f1 f7       	brne	.-4      	; 0x78c6 <next_tile_line+0x10>
    78ca:	00 00       	nop

		inc r22
    78cc:	63 95       	inc	r22
		dec r8
    78ce:	8a 94       	dec	r8
		breq text_frame_end
    78d0:	09 f1       	breq	.+66     	; 0x7914 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    78d2:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    78d4:	29 f0       	breq	.+10     	; 0x78e0 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    78d6:	08 e0       	ldi	r16, 0x08	; 8
    78d8:	0a 95       	dec	r16
    78da:	f1 f7       	brne	.-4      	; 0x78d8 <next_tile_line+0x22>
    78dc:	00 00       	nop
		rjmp next_tile_line
    78de:	eb cf       	rjmp	.-42     	; 0x78b6 <next_tile_line>

000078e0 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    78e0:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    78e2:	0c 2f       	mov	r16, r28
		andi r16,0x7
    78e4:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    78e6:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    78e8:	11 f0       	breq	.+4      	; 0x78ee <next_tile_row+0xe>
		inc YL
    78ea:	c3 95       	inc	r28
		rjmp 2f
    78ec:	02 c0       	rjmp	.+4      	; 0x78f2 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    78ee:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    78f0:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    78f2:	8a 95       	dec	r24
		brne .+2
    78f4:	09 f4       	brne	.+2      	; 0x78f8 <next_tile_row+0x18>
		movw YL,r12
    78f6:	e6 01       	movw	r28, r12

		dec r19
    78f8:	3a 95       	dec	r19
		brne .+2
    78fa:	09 f4       	brne	.+2      	; 0x78fe <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    78fc:	67 2f       	mov	r22, r23
		brne .+2
    78fe:	09 f4       	brne	.+2      	; 0x7902 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    7900:	e5 01       	movw	r28, r10
		brne .+2
    7902:	09 f4       	brne	.+2      	; 0x7906 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    7904:	8f 2d       	mov	r24, r15
		brne .+2
    7906:	09 f4       	brne	.+2      	; 0x790a <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    7908:	99 2e       	mov	r9, r25

		brne .+2
    790a:	09 f4       	brne	.+2      	; 0x790e <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    790c:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    790e:	09 f4       	brne	.+2      	; 0x7912 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7910:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    7912:	d1 cf       	rjmp	.-94     	; 0x78b6 <next_tile_line>

00007914 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    7914:	29 e0       	ldi	r18, 0x09	; 9
    7916:	2a 95       	dec	r18
    7918:	f1 f7       	brne	.-4      	; 0x7916 <text_frame_end+0x2>
    791a:	00 00       	nop

		rcall hsync_pulse ;145
    791c:	89 d3       	rcall	.+1810   	; 0x8030 <hsync_pulse>
	
		clr r1
    791e:	11 24       	eor	r1, r1
		call RestoreBackground
    7920:	0e 94 00 4e 	call	0x9c00	; 0x9c00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7924:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    7928:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    792a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    792c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    792e:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    7932:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    7934:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7936:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    793a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    793c:	e0 93 36 00 	sts	0x0036, r30

		ret
    7940:	08 95       	ret

00007942 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    7942:	cf 93       	push	r28
		push YH
    7944:	df 93       	push	r29
		push r23
    7946:	7f 93       	push	r23
		push r22
    7948:	6f 93       	push	r22
		push r19
    794a:	3f 93       	push	r19
		push r13
    794c:	df 92       	push	r13
		push r12
    794e:	cf 92       	push	r12
		push r9
    7950:	9f 92       	push	r9
		push r7
    7952:	7f 92       	push	r7
		push r6
    7954:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    7956:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    7958:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    795a:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    795c:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    795e:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7960:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    7962:	00 0d       	add	r16, r0
		adc r17,r1
    7964:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    7966:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7968:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    796a:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    796c:	00 0d       	add	r16, r0
		adc r17,r1
    796e:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    7970:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7972:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    7974:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    7976:	69 2d       	mov	r22, r9
		andi r22,0x7		
    7978:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    797a:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    797c:	f8 94       	cli
		breq .+2
    797e:	09 f0       	breq	.+2      	; 0x7982 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    7980:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    7982:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    7984:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    7986:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    7988:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    798a:	02 0c       	add	r0, r2
	    adc r1,r3
    798c:	13 1c       	adc	r1, r3
		movw ZL,r0
    798e:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    7990:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    7992:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7994:	28 81       	ld	r18, Y
		subi YL,-8
    7996:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7998:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    799a:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    799c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    799e:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    79a0:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    79a2:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    79a4:	04 0e       	add	r0, r20
	    adc r1,r21
    79a6:	15 1e       	adc	r1, r21
		movw XL,r0
    79a8:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    79aa:	28 81       	ld	r18, Y
		subi YL,-8
    79ac:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    79ae:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    79b0:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    79b2:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    79b4:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    79b6:	a1 01       	movw	r20, r2
		brtc .+2
    79b8:	0e f4       	brtc	.+2      	; 0x79bc <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    79ba:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    79bc:	04 0e       	add	r0, r20
	    adc r1,r21
    79be:	15 1e       	adc	r1, r21
		movw ZL,r0
    79c0:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    79c2:	3f 01       	movw	r6, r30

000079c4 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    79c4:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    79c6:	a6 0f       	add	r26, r22
		adc XH,r0
    79c8:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    79ca:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    79cc:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    79ce:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    79d0:	22 c0       	rjmp	.+68     	; 0x7a16 <rom_fine_scroll>

000079d2 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    79d2:	00 c0       	rjmp	.+0      	; 0x79d4 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    79d4:	61 ef       	ldi	r22, 0xF1	; 241
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    79d6:	7c e3       	ldi	r23, 0x3C	; 60
		add r22,r0
    79d8:	60 0d       	add	r22, r0
		adc r23,r1
    79da:	71 1d       	adc	r23, r1
		push r22
    79dc:	6f 93       	push	r22
		push r23	
    79de:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    79e0:	08 95       	ret

000079e2 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    79e2:	0d 91       	ld	r16, X+
    79e4:	c8 95       	lpm
    79e6:	08 b9       	out	0x08, r16	; 8
    79e8:	0d 91       	ld	r16, X+
    79ea:	c8 95       	lpm
    79ec:	08 b9       	out	0x08, r16	; 8
    79ee:	0d 91       	ld	r16, X+
    79f0:	c8 95       	lpm
    79f2:	08 b9       	out	0x08, r16	; 8
    79f4:	0d 91       	ld	r16, X+
    79f6:	c8 95       	lpm
    79f8:	08 b9       	out	0x08, r16	; 8
    79fa:	0d 91       	ld	r16, X+
    79fc:	c8 95       	lpm
    79fe:	08 b9       	out	0x08, r16	; 8
    7a00:	0d 91       	ld	r16, X+
    7a02:	c8 95       	lpm
    7a04:	08 b9       	out	0x08, r16	; 8
    7a06:	0d 91       	ld	r16, X+
    7a08:	c8 95       	lpm
    7a0a:	08 b9       	out	0x08, r16	; 8
    7a0c:	0d 91       	ld	r16, X+
    7a0e:	c8 95       	lpm
    7a10:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    7a12:	1e f5       	brtc	.+70     	; 0x7a5a <romloop>
		rjmp ramloop
    7a14:	40 c0       	rjmp	.+128    	; 0x7a96 <ramloop>

00007a16 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    7a16:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    7a18:	63 e1       	ldi	r22, 0x13	; 19
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    7a1a:	7d e3       	ldi	r23, 0x3D	; 61
		add r22,r0
    7a1c:	60 0d       	add	r22, r0
		adc r23,r1
    7a1e:	71 1d       	adc	r23, r1
		push r22
    7a20:	6f 93       	push	r22
		push r23	
    7a22:	7f 93       	push	r23
		ret
    7a24:	08 95       	ret

00007a26 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    7a26:	05 91       	lpm	r16, Z+
    7a28:	00 c0       	rjmp	.+0      	; 0x7a2a <rom_fine_scroll_loop+0x4>
    7a2a:	08 b9       	out	0x08, r16	; 8
    7a2c:	05 91       	lpm	r16, Z+
    7a2e:	00 c0       	rjmp	.+0      	; 0x7a30 <rom_fine_scroll_loop+0xa>
    7a30:	08 b9       	out	0x08, r16	; 8
    7a32:	05 91       	lpm	r16, Z+
    7a34:	00 c0       	rjmp	.+0      	; 0x7a36 <rom_fine_scroll_loop+0x10>
    7a36:	08 b9       	out	0x08, r16	; 8
    7a38:	05 91       	lpm	r16, Z+
    7a3a:	00 c0       	rjmp	.+0      	; 0x7a3c <rom_fine_scroll_loop+0x16>
    7a3c:	08 b9       	out	0x08, r16	; 8
    7a3e:	05 91       	lpm	r16, Z+
    7a40:	00 c0       	rjmp	.+0      	; 0x7a42 <rom_fine_scroll_loop+0x1c>
    7a42:	08 b9       	out	0x08, r16	; 8
    7a44:	05 91       	lpm	r16, Z+
    7a46:	00 c0       	rjmp	.+0      	; 0x7a48 <rom_fine_scroll_loop+0x22>
    7a48:	08 b9       	out	0x08, r16	; 8
    7a4a:	05 91       	lpm	r16, Z+
    7a4c:	00 c0       	rjmp	.+0      	; 0x7a4e <rom_fine_scroll_loop+0x28>
    7a4e:	08 b9       	out	0x08, r16	; 8
    7a50:	05 91       	lpm	r16, Z+
    7a52:	00 c0       	rjmp	.+0      	; 0x7a54 <rom_fine_scroll_loop+0x2e>
    7a54:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    7a56:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    7a58:	f6 f0       	brts	.+60     	; 0x7a96 <ramloop>

00007a5a <romloop>:

	
	romloop:
	    lpm r16,Z+
    7a5a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7a5c:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7a5e:	28 81       	ld	r18, Y

	    lpm r16,Z+
    7a60:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7a62:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7a64:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    7a66:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7a68:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    7a6a:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7a6c:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    7a6e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7a70:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    7a72:	08 f4       	brcc	.+2      	; 0x7a76 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    7a74:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    7a76:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7a78:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    7a7a:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7a7c:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7a7e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7a80:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    7a82:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    7a84:	1a 95       	dec	r17
   
	    lpm r16,Z+
    7a86:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7a88:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7a8a:	05 91       	lpm	r16, Z+

		breq end	
    7a8c:	39 f1       	breq	.+78     	; 0x7adc <end>
	    movw ZL,r0   	;copy next tile adress
    7a8e:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7a90:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7a92:	18 f7       	brcc	.-58     	; 0x7a5a <romloop>
	
		rjmp .
    7a94:	00 c0       	rjmp	.+0      	; 0x7a96 <ramloop>

00007a96 <ramloop>:

	ramloop:

	    ld r16,Z+
    7a96:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7a98:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7a9a:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    7a9c:	01 91       	ld	r16, Z+
		subi YL,-8   		
    7a9e:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7aa0:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7aa2:	23 9f       	mul	r18, r19

	    ld r16,Z+
    7aa4:	01 91       	ld	r16, Z+
		nop
    7aa6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7aa8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7aaa:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    7aac:	00 c0       	rjmp	.+0      	; 0x7aae <ramloop+0x18>
   
	    ld r16,Z+
    7aae:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7ab0:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7ab2:	08 f0       	brcs	.+2      	; 0x7ab6 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7ab4:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7ab6:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7ab8:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7aba:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7abc:	15 1e       	adc	r1, r21
		rjmp .
    7abe:	00 c0       	rjmp	.+0      	; 0x7ac0 <ramloop+0x2a>
    
		ld r16,Z+		
    7ac0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7ac2:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    7ac4:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    7ac6:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    7ac8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7aca:	78 b8       	out	0x08, r7	; 8
		nop
    7acc:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7ace:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7ad0:	1a 95       	dec	r17
	    breq end
    7ad2:	21 f0       	breq	.+8      	; 0x7adc <end>
	
		nop
    7ad4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7ad6:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7ad8:	00 f6       	brcc	.-128    	; 0x7a5a <romloop>
		rjmp ramloop
    7ada:	dd cf       	rjmp	.-70     	; 0x7a96 <ramloop>

00007adc <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7adc:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    7ade:	27 f5       	brid	.+72     	; 0x7b28 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    7ae0:	30 f4       	brcc	.+12     	; 0x7aee <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    7ae2:	f0 01       	movw	r30, r0

00007ae4 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    7ae4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7ae6:	08 b9       	out	0x08, r16	; 8
		dec r14
    7ae8:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    7aea:	e1 f7       	brne	.-8      	; 0x7ae4 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    7aec:	1f c0       	rjmp	.+62     	; 0x7b2c <end_fine_scroll_ram>

00007aee <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    7aee:	f6 01       	movw	r30, r12
		nop
    7af0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7af2:	98 b8       	out	0x08, r9	; 8
		dec r14
    7af4:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    7af6:	c9 f0       	breq	.+50     	; 0x7b2a <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    7af8:	05 91       	lpm	r16, Z+
    7afa:	08 b9       	out	0x08, r16	; 8
    7afc:	ea 94       	dec	r14
    7afe:	a9 f0       	breq	.+42     	; 0x7b2a <end_fine_scroll_rom>
    7b00:	05 91       	lpm	r16, Z+
    7b02:	08 b9       	out	0x08, r16	; 8
    7b04:	ea 94       	dec	r14
    7b06:	89 f0       	breq	.+34     	; 0x7b2a <end_fine_scroll_rom>
    7b08:	05 91       	lpm	r16, Z+
    7b0a:	08 b9       	out	0x08, r16	; 8
    7b0c:	ea 94       	dec	r14
    7b0e:	69 f0       	breq	.+26     	; 0x7b2a <end_fine_scroll_rom>
    7b10:	05 91       	lpm	r16, Z+
    7b12:	08 b9       	out	0x08, r16	; 8
    7b14:	ea 94       	dec	r14
    7b16:	49 f0       	breq	.+18     	; 0x7b2a <end_fine_scroll_rom>
    7b18:	05 91       	lpm	r16, Z+
    7b1a:	08 b9       	out	0x08, r16	; 8
    7b1c:	ea 94       	dec	r14
    7b1e:	29 f0       	breq	.+10     	; 0x7b2a <end_fine_scroll_rom>
    7b20:	05 91       	lpm	r16, Z+
    7b22:	08 b9       	out	0x08, r16	; 8
    7b24:	ea 94       	dec	r14
    7b26:	09 f0       	breq	.+2      	; 0x7b2a <end_fine_scroll_rom>

00007b28 <end_fine_scroll>:
	...

00007b2a <end_fine_scroll_rom>:
	...

00007b2c <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    7b2c:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    7b2e:	08 b9       	out	0x08, r16	; 8

		pop r6
    7b30:	6f 90       	pop	r6
		pop r7
    7b32:	7f 90       	pop	r7
		pop r9
    7b34:	9f 90       	pop	r9
		pop r12
    7b36:	cf 90       	pop	r12
		pop r13
    7b38:	df 90       	pop	r13
		pop r19
    7b3a:	3f 91       	pop	r19
		pop r22
    7b3c:	6f 91       	pop	r22
		pop r23
    7b3e:	7f 91       	pop	r23
		pop YH
    7b40:	df 91       	pop	r29
		pop YL
    7b42:	cf 91       	pop	r28

		ret
    7b44:	08 95       	ret

00007b46 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7b46:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7b48:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    7b4c:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    7b50:	82 9f       	mul	r24, r18
	add ZL,r0
    7b52:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b54:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7b56:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7b58:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7b5a:	62 9f       	mul	r22, r18
	add XL,r0
    7b5c:	a0 0d       	add	r26, r0
	adc XH,r1
    7b5e:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    7b60:	15 90       	lpm	r1, Z+
    7b62:	1d 92       	st	X+, r1
    7b64:	15 90       	lpm	r1, Z+
    7b66:	1d 92       	st	X+, r1
    7b68:	15 90       	lpm	r1, Z+
    7b6a:	1d 92       	st	X+, r1
    7b6c:	15 90       	lpm	r1, Z+
    7b6e:	1d 92       	st	X+, r1
    7b70:	15 90       	lpm	r1, Z+
    7b72:	1d 92       	st	X+, r1
    7b74:	15 90       	lpm	r1, Z+
    7b76:	1d 92       	st	X+, r1
    7b78:	15 90       	lpm	r1, Z+
    7b7a:	1d 92       	st	X+, r1
    7b7c:	15 90       	lpm	r1, Z+
    7b7e:	1d 92       	st	X+, r1
    7b80:	15 90       	lpm	r1, Z+
    7b82:	1d 92       	st	X+, r1
    7b84:	15 90       	lpm	r1, Z+
    7b86:	1d 92       	st	X+, r1
    7b88:	15 90       	lpm	r1, Z+
    7b8a:	1d 92       	st	X+, r1
    7b8c:	15 90       	lpm	r1, Z+
    7b8e:	1d 92       	st	X+, r1
    7b90:	15 90       	lpm	r1, Z+
    7b92:	1d 92       	st	X+, r1
    7b94:	15 90       	lpm	r1, Z+
    7b96:	1d 92       	st	X+, r1
    7b98:	15 90       	lpm	r1, Z+
    7b9a:	1d 92       	st	X+, r1
    7b9c:	15 90       	lpm	r1, Z+
    7b9e:	1d 92       	st	X+, r1
    7ba0:	15 90       	lpm	r1, Z+
    7ba2:	1d 92       	st	X+, r1
    7ba4:	15 90       	lpm	r1, Z+
    7ba6:	1d 92       	st	X+, r1
    7ba8:	15 90       	lpm	r1, Z+
    7baa:	1d 92       	st	X+, r1
    7bac:	15 90       	lpm	r1, Z+
    7bae:	1d 92       	st	X+, r1
    7bb0:	15 90       	lpm	r1, Z+
    7bb2:	1d 92       	st	X+, r1
    7bb4:	15 90       	lpm	r1, Z+
    7bb6:	1d 92       	st	X+, r1
    7bb8:	15 90       	lpm	r1, Z+
    7bba:	1d 92       	st	X+, r1
    7bbc:	15 90       	lpm	r1, Z+
    7bbe:	1d 92       	st	X+, r1
    7bc0:	15 90       	lpm	r1, Z+
    7bc2:	1d 92       	st	X+, r1
    7bc4:	15 90       	lpm	r1, Z+
    7bc6:	1d 92       	st	X+, r1
    7bc8:	15 90       	lpm	r1, Z+
    7bca:	1d 92       	st	X+, r1
    7bcc:	15 90       	lpm	r1, Z+
    7bce:	1d 92       	st	X+, r1
    7bd0:	15 90       	lpm	r1, Z+
    7bd2:	1d 92       	st	X+, r1
    7bd4:	15 90       	lpm	r1, Z+
    7bd6:	1d 92       	st	X+, r1
    7bd8:	15 90       	lpm	r1, Z+
    7bda:	1d 92       	st	X+, r1
    7bdc:	15 90       	lpm	r1, Z+
    7bde:	1d 92       	st	X+, r1
    7be0:	15 90       	lpm	r1, Z+
    7be2:	1d 92       	st	X+, r1
    7be4:	15 90       	lpm	r1, Z+
    7be6:	1d 92       	st	X+, r1
    7be8:	15 90       	lpm	r1, Z+
    7bea:	1d 92       	st	X+, r1
    7bec:	15 90       	lpm	r1, Z+
    7bee:	1d 92       	st	X+, r1
    7bf0:	15 90       	lpm	r1, Z+
    7bf2:	1d 92       	st	X+, r1
    7bf4:	15 90       	lpm	r1, Z+
    7bf6:	1d 92       	st	X+, r1
    7bf8:	15 90       	lpm	r1, Z+
    7bfa:	1d 92       	st	X+, r1
    7bfc:	15 90       	lpm	r1, Z+
    7bfe:	1d 92       	st	X+, r1
    7c00:	15 90       	lpm	r1, Z+
    7c02:	1d 92       	st	X+, r1
    7c04:	15 90       	lpm	r1, Z+
    7c06:	1d 92       	st	X+, r1
    7c08:	15 90       	lpm	r1, Z+
    7c0a:	1d 92       	st	X+, r1
    7c0c:	15 90       	lpm	r1, Z+
    7c0e:	1d 92       	st	X+, r1
    7c10:	15 90       	lpm	r1, Z+
    7c12:	1d 92       	st	X+, r1
    7c14:	15 90       	lpm	r1, Z+
    7c16:	1d 92       	st	X+, r1
    7c18:	15 90       	lpm	r1, Z+
    7c1a:	1d 92       	st	X+, r1
    7c1c:	15 90       	lpm	r1, Z+
    7c1e:	1d 92       	st	X+, r1
    7c20:	15 90       	lpm	r1, Z+
    7c22:	1d 92       	st	X+, r1
    7c24:	15 90       	lpm	r1, Z+
    7c26:	1d 92       	st	X+, r1
    7c28:	15 90       	lpm	r1, Z+
    7c2a:	1d 92       	st	X+, r1
    7c2c:	15 90       	lpm	r1, Z+
    7c2e:	1d 92       	st	X+, r1
    7c30:	15 90       	lpm	r1, Z+
    7c32:	1d 92       	st	X+, r1
    7c34:	15 90       	lpm	r1, Z+
    7c36:	1d 92       	st	X+, r1
    7c38:	15 90       	lpm	r1, Z+
    7c3a:	1d 92       	st	X+, r1
    7c3c:	15 90       	lpm	r1, Z+
    7c3e:	1d 92       	st	X+, r1
    7c40:	15 90       	lpm	r1, Z+
    7c42:	1d 92       	st	X+, r1
    7c44:	15 90       	lpm	r1, Z+
    7c46:	1d 92       	st	X+, r1
    7c48:	15 90       	lpm	r1, Z+
    7c4a:	1d 92       	st	X+, r1
    7c4c:	15 90       	lpm	r1, Z+
    7c4e:	1d 92       	st	X+, r1
    7c50:	15 90       	lpm	r1, Z+
    7c52:	1d 92       	st	X+, r1
    7c54:	15 90       	lpm	r1, Z+
    7c56:	1d 92       	st	X+, r1
    7c58:	15 90       	lpm	r1, Z+
    7c5a:	1d 92       	st	X+, r1
    7c5c:	15 90       	lpm	r1, Z+
    7c5e:	1d 92       	st	X+, r1
	clr r1
    7c60:	11 24       	eor	r1, r1
	ret
    7c62:	08 95       	ret

00007c64 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7c64:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7c66:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    7c68:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    7c6a:	82 9f       	mul	r24, r18
	add ZL,r0
    7c6c:	e0 0d       	add	r30, r0
	adc ZH,r1
    7c6e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7c70:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7c72:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7c74:	62 9f       	mul	r22, r18
	add XL,r0
    7c76:	a0 0d       	add	r26, r0
	adc XH,r1
    7c78:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7c7a:	11 90       	ld	r1, Z+
    7c7c:	1d 92       	st	X+, r1
    7c7e:	11 90       	ld	r1, Z+
    7c80:	1d 92       	st	X+, r1
    7c82:	11 90       	ld	r1, Z+
    7c84:	1d 92       	st	X+, r1
    7c86:	11 90       	ld	r1, Z+
    7c88:	1d 92       	st	X+, r1
    7c8a:	11 90       	ld	r1, Z+
    7c8c:	1d 92       	st	X+, r1
    7c8e:	11 90       	ld	r1, Z+
    7c90:	1d 92       	st	X+, r1
    7c92:	11 90       	ld	r1, Z+
    7c94:	1d 92       	st	X+, r1
    7c96:	11 90       	ld	r1, Z+
    7c98:	1d 92       	st	X+, r1
    7c9a:	11 90       	ld	r1, Z+
    7c9c:	1d 92       	st	X+, r1
    7c9e:	11 90       	ld	r1, Z+
    7ca0:	1d 92       	st	X+, r1
    7ca2:	11 90       	ld	r1, Z+
    7ca4:	1d 92       	st	X+, r1
    7ca6:	11 90       	ld	r1, Z+
    7ca8:	1d 92       	st	X+, r1
    7caa:	11 90       	ld	r1, Z+
    7cac:	1d 92       	st	X+, r1
    7cae:	11 90       	ld	r1, Z+
    7cb0:	1d 92       	st	X+, r1
    7cb2:	11 90       	ld	r1, Z+
    7cb4:	1d 92       	st	X+, r1
    7cb6:	11 90       	ld	r1, Z+
    7cb8:	1d 92       	st	X+, r1
    7cba:	11 90       	ld	r1, Z+
    7cbc:	1d 92       	st	X+, r1
    7cbe:	11 90       	ld	r1, Z+
    7cc0:	1d 92       	st	X+, r1
    7cc2:	11 90       	ld	r1, Z+
    7cc4:	1d 92       	st	X+, r1
    7cc6:	11 90       	ld	r1, Z+
    7cc8:	1d 92       	st	X+, r1
    7cca:	11 90       	ld	r1, Z+
    7ccc:	1d 92       	st	X+, r1
    7cce:	11 90       	ld	r1, Z+
    7cd0:	1d 92       	st	X+, r1
    7cd2:	11 90       	ld	r1, Z+
    7cd4:	1d 92       	st	X+, r1
    7cd6:	11 90       	ld	r1, Z+
    7cd8:	1d 92       	st	X+, r1
    7cda:	11 90       	ld	r1, Z+
    7cdc:	1d 92       	st	X+, r1
    7cde:	11 90       	ld	r1, Z+
    7ce0:	1d 92       	st	X+, r1
    7ce2:	11 90       	ld	r1, Z+
    7ce4:	1d 92       	st	X+, r1
    7ce6:	11 90       	ld	r1, Z+
    7ce8:	1d 92       	st	X+, r1
    7cea:	11 90       	ld	r1, Z+
    7cec:	1d 92       	st	X+, r1
    7cee:	11 90       	ld	r1, Z+
    7cf0:	1d 92       	st	X+, r1
    7cf2:	11 90       	ld	r1, Z+
    7cf4:	1d 92       	st	X+, r1
    7cf6:	11 90       	ld	r1, Z+
    7cf8:	1d 92       	st	X+, r1
    7cfa:	11 90       	ld	r1, Z+
    7cfc:	1d 92       	st	X+, r1
    7cfe:	11 90       	ld	r1, Z+
    7d00:	1d 92       	st	X+, r1
    7d02:	11 90       	ld	r1, Z+
    7d04:	1d 92       	st	X+, r1
    7d06:	11 90       	ld	r1, Z+
    7d08:	1d 92       	st	X+, r1
    7d0a:	11 90       	ld	r1, Z+
    7d0c:	1d 92       	st	X+, r1
    7d0e:	11 90       	ld	r1, Z+
    7d10:	1d 92       	st	X+, r1
    7d12:	11 90       	ld	r1, Z+
    7d14:	1d 92       	st	X+, r1
    7d16:	11 90       	ld	r1, Z+
    7d18:	1d 92       	st	X+, r1
    7d1a:	11 90       	ld	r1, Z+
    7d1c:	1d 92       	st	X+, r1
    7d1e:	11 90       	ld	r1, Z+
    7d20:	1d 92       	st	X+, r1
    7d22:	11 90       	ld	r1, Z+
    7d24:	1d 92       	st	X+, r1
    7d26:	11 90       	ld	r1, Z+
    7d28:	1d 92       	st	X+, r1
    7d2a:	11 90       	ld	r1, Z+
    7d2c:	1d 92       	st	X+, r1
    7d2e:	11 90       	ld	r1, Z+
    7d30:	1d 92       	st	X+, r1
    7d32:	11 90       	ld	r1, Z+
    7d34:	1d 92       	st	X+, r1
    7d36:	11 90       	ld	r1, Z+
    7d38:	1d 92       	st	X+, r1
    7d3a:	11 90       	ld	r1, Z+
    7d3c:	1d 92       	st	X+, r1
    7d3e:	11 90       	ld	r1, Z+
    7d40:	1d 92       	st	X+, r1
    7d42:	11 90       	ld	r1, Z+
    7d44:	1d 92       	st	X+, r1
    7d46:	11 90       	ld	r1, Z+
    7d48:	1d 92       	st	X+, r1
    7d4a:	11 90       	ld	r1, Z+
    7d4c:	1d 92       	st	X+, r1
    7d4e:	11 90       	ld	r1, Z+
    7d50:	1d 92       	st	X+, r1
    7d52:	11 90       	ld	r1, Z+
    7d54:	1d 92       	st	X+, r1
    7d56:	11 90       	ld	r1, Z+
    7d58:	1d 92       	st	X+, r1
    7d5a:	11 90       	ld	r1, Z+
    7d5c:	1d 92       	st	X+, r1
    7d5e:	11 90       	ld	r1, Z+
    7d60:	1d 92       	st	X+, r1
    7d62:	11 90       	ld	r1, Z+
    7d64:	1d 92       	st	X+, r1
    7d66:	11 90       	ld	r1, Z+
    7d68:	1d 92       	st	X+, r1
    7d6a:	11 90       	ld	r1, Z+
    7d6c:	1d 92       	st	X+, r1
    7d6e:	11 90       	ld	r1, Z+
    7d70:	1d 92       	st	X+, r1
    7d72:	11 90       	ld	r1, Z+
    7d74:	1d 92       	st	X+, r1
    7d76:	11 90       	ld	r1, Z+
    7d78:	1d 92       	st	X+, r1
	clr r1
    7d7a:	11 24       	eor	r1, r1
	ret
    7d7c:	08 95       	ret

00007d7e <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7d7e:	0f 93       	push	r16
	push r17
    7d80:	1f 93       	push	r17
	push YL
    7d82:	cf 93       	push	r28
	push YH
    7d84:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7d86:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7d88:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7d8a:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    7d8c:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    7d8e:	e0 0d       	add	r30, r0
	adc ZH,r1
    7d90:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7d92:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7d94:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7d96:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7d98:	8e 9f       	mul	r24, r30
	movw r26,r0
    7d9a:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7d9c:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7d9e:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    7da0:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    7da2:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    7da4:	00 24       	eor	r0, r0
	add YL,r1
    7da6:	c1 0d       	add	r28, r1
	adc YH,r0		
    7da8:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7daa:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7dac:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7dae:	ea 0f       	add	r30, r26
	adc ZH,r27
    7db0:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7db2:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7db4:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7db6:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7db8:	69 9f       	mul	r22, r25
	add XL,r0
    7dba:	a0 0d       	add	r26, r0
	adc XH,r1
    7dbc:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7dbe:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7dc0:	dd 27       	eor	r29, r29

	cpi r20,0	
    7dc2:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7dc4:	51 f4       	brne	.+20     	; 0x7dda <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7dc6:	a2 0f       	add	r26, r18
	adc XH,r1
    7dc8:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7dca:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7dcc:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7dce:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7dd0:	11 c0       	rjmp	.+34     	; 0x7df4 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7dd2:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7dd4:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7dd6:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7dd8:	0d c0       	rjmp	.+26     	; 0x7df4 <x_check_end>

00007dda <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7dda:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7ddc:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7dde:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7de0:	04 c0       	rjmp	.+8      	; 0x7dea <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7de2:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7de4:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7de6:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7de8:	05 c0       	rjmp	.+10     	; 0x7df4 <x_check_end>

00007dea <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7dea:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7dec:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7dee:	e2 0f       	add	r30, r18
	adc ZH,r1
    7df0:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7df2:	31 97       	sbiw	r30, 0x01	; 1

00007df4 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7df4:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7df6:	51 f4       	brne	.+20     	; 0x7e0c <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    7df8:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7dfa:	93 9f       	mul	r25, r19
	add XL,r0
    7dfc:	a0 0d       	add	r26, r0
	adc XH,r1
    7dfe:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7e00:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    7e02:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    7e04:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    7e06:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    7e08:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    7e0a:	0a c0       	rjmp	.+20     	; 0x7e20 <y_check_end>

00007e0c <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7e0c:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7e0e:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7e10:	63 2f       	mov	r22, r19
	dec r22
    7e12:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7e14:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7e16:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    7e18:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7e1a:	56 9f       	mul	r21, r22
	add ZL,r0
    7e1c:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7e1e:	f1 1d       	adc	r31, r1

00007e20 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7e20:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7e22:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7e24:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7e26:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    7e28:	00 ff       	sbrs	r16, 0
	clr r23
    7e2a:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7e2c:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7e2e:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7e30:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7e32:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7e34:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7e36:	59 1b       	sub	r21, r25

00007e38 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    7e38:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7e3a:	48 1b       	sub	r20, r24

00007e3c <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7e3c:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7e3e:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7e40:	2c 93       	st	X, r18
	adiw XL,1
    7e42:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7e44:	e6 0f       	add	r30, r22
	adc ZH,r23
    7e46:	f7 1f       	adc	r31, r23
	dec r20
    7e48:	4a 95       	dec	r20
	brne x_loop
    7e4a:	c1 f7       	brne	.-16     	; 0x7e3c <x_loop>

	add ZL,YL		;src+=srcXdiff
    7e4c:	ec 0f       	add	r30, r28
	adc ZH,YH
    7e4e:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7e50:	a8 0f       	add	r26, r24
	adc XH,r1
    7e52:	b1 1d       	adc	r27, r1
	dec r21
    7e54:	5a 95       	dec	r21
	brne y_loop
    7e56:	81 f7       	brne	.-32     	; 0x7e38 <y_loop>


	pop YH
    7e58:	df 91       	pop	r29
	pop YL
    7e5a:	cf 91       	pop	r28
	pop r17
    7e5c:	1f 91       	pop	r17
	pop r16
    7e5e:	0f 91       	pop	r16
	ret
    7e60:	08 95       	ret

00007e62 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7e62:	0f 92       	push	r0
	push r1
    7e64:	1f 92       	push	r1
	push ZL;2
    7e66:	ef 93       	push	r30
	push ZH;2
    7e68:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7e6a:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7e6c:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7e6e:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7e72:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    7e74:	f1 e0       	ldi	r31, 0x01	; 1

00007e76 <latency_loop>:
latency_loop:
	cp ZL,ZH
    7e76:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7e78:	00 f0       	brcs	.+0      	; 0x7e7a <latency_loop+0x4>
	inc ZH
    7e7a:	f3 95       	inc	r31
	cpi ZH,10
    7e7c:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7e7e:	d8 f3       	brcs	.-10     	; 0x7e76 <latency_loop>
	jmp .
    7e80:	0c 94 42 3f 	jmp	0x7e84	; 0x7e84 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7e84:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7e88:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7e8a:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7e8e:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    7e92:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7e94:	57 c0       	rjmp	.+174    	; 0x7f44 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7e96:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7e98:	98 f0       	brcs	.+38     	; 0x7ec0 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7e9a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7e9c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7ea0:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7ea2:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7ea6:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7ea8:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7eaa:	26 f4       	brtc	.+8      	; 0x7eb4 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7eac:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7eae:	0e 94 29 40 	call	0x8052	; 0x8052 <update_sound>
	rjmp sync_end
    7eb2:	b7 c0       	rjmp	.+366    	; 0x8022 <sync_end>

00007eb4 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7eb4:	e5 e1       	ldi	r30, 0x15	; 21
    7eb6:	ea 95       	dec	r30
    7eb8:	f1 f7       	brne	.-4      	; 0x7eb6 <sync_pre_eq_no_sound_update+0x2>
    7eba:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7ebc:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7ebe:	b1 c0       	rjmp	.+354    	; 0x8022 <sync_end>

00007ec0 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7ec0:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7ec2:	38 f1       	brcs	.+78     	; 0x7f12 <sync_post_eq>

	rjmp .
    7ec4:	00 c0       	rjmp	.+0      	; 0x7ec6 <sync_eq+0x6>
	rjmp .
    7ec6:	00 c0       	rjmp	.+0      	; 0x7ec8 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7ec8:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7eca:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7ecc:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7ece:	16 f4       	brtc	.+4      	; 0x7ed4 <sync_eq_skip>
	
	call update_sound
    7ed0:	0e 94 29 40 	call	0x8052	; 0x8052 <update_sound>

00007ed4 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7ed4:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7ed6:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7eda:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7edc:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7ee0:	a0 c0       	rjmp	.+320    	; 0x8022 <sync_end>

00007ee2 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7ee2:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7ee4:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7ee6:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7ee8:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7eec:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7eee:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7ef0:	00 f0       	brcs	.+0      	; 0x7ef2 <__vector_14+0x10>

	cpi ZL,2
    7ef2:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7ef4:	00 f0       	brcs	.+0      	; 0x7ef6 <__vector_14+0x14>

	cpi ZL,3
    7ef6:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    7ef8:	00 f0       	brcs	.+0      	; 0x7efa <__vector_14+0x18>

	cpi ZL,4
    7efa:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    7efc:	00 f0       	brcs	.+0      	; 0x7efe <__vector_14+0x1c>

	cpi ZL,5
    7efe:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7f00:	00 f0       	brcs	.+0      	; 0x7f02 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7f02:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7f04:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7f06:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7f0a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7f0c:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7f0e:	ef 91       	pop	r30
	reti
    7f10:	18 95       	reti

00007f12 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7f12:	00 c0       	rjmp	.+0      	; 0x7f14 <sync_post_eq+0x2>

	bst ZL,0
    7f14:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f16:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7f18:	26 f4       	brtc	.+8      	; 0x7f22 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7f1a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7f1c:	0e 94 29 40 	call	0x8052	; 0x8052 <update_sound>
	rjmp sync_pre_eq_cont
    7f20:	05 c0       	rjmp	.+10     	; 0x7f2c <sync_pre_eq_cont>

00007f22 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7f22:	e5 e1       	ldi	r30, 0x15	; 21
    7f24:	ea 95       	dec	r30
    7f26:	f1 f7       	brne	.-4      	; 0x7f24 <sync_post_eq_no_sound_update+0x2>
    7f28:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7f2a:	28 9a       	sbi	0x05, 0	; 5

00007f2c <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7f2c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7f30:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7f32:	09 f0       	breq	.+2      	; 0x7f36 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7f34:	76 c0       	rjmp	.+236    	; 0x8022 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7f36:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7f38:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7f3c:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7f3e:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7f42:	6f c0       	rjmp	.+222    	; 0x8022 <sync_end>

00007f44 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7f44:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7f46:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7f4a:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7f4c:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7f50:	00 c0       	rjmp	.+0      	; 0x7f52 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f52:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7f54:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7f56:	00 c0       	rjmp	.+0      	; 0x7f58 <sync_hsync+0x14>
	call update_sound
    7f58:	0e 94 29 40 	call	0x8052	; 0x8052 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7f5c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7f5e:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7f62:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7f64:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7f68:	ef 17       	cp	r30, r31
	brsh no_render
    7f6a:	d0 f4       	brcc	.+52     	; 0x7fa0 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7f6c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7f6e:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7f72:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7f74:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7f78:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7f7a:	ef 17       	cp	r30, r31
	brlo no_render
    7f7c:	88 f0       	brcs	.+34     	; 0x7fa0 <no_render>

	;push r1-r29
	ldi ZL,29
    7f7e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7f80:	ff 27       	eor	r31, r31

00007f82 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7f82:	00 80       	ld	r0, Z
	push r0
    7f84:	0f 92       	push	r0
	dec ZL
    7f86:	ea 95       	dec	r30
	brne push_loop	
    7f88:	e1 f7       	brne	.-8      	; 0x7f82 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7f8a:	06 e0       	ldi	r16, 0x06	; 6
    7f8c:	0a 95       	dec	r16
    7f8e:	f1 f7       	brne	.-4      	; 0x7f8c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7f90:	0e 94 ef 3b 	call	0x77de	; 0x77de <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7f94:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7f96:	ff 27       	eor	r31, r31

00007f98 <pop_loop>:
pop_loop:
	pop r0
    7f98:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7f9a:	01 92       	st	Z+, r0
	cpi ZL,30
    7f9c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7f9e:	e0 f3       	brcs	.-8      	; 0x7f98 <pop_loop>

00007fa0 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7fa0:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7fa4:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7fa6:	09 f0       	breq	.+2      	; 0x7faa <no_render+0xa>
	rjmp sync_end
    7fa8:	3c c0       	rjmp	.+120    	; 0x8022 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7faa:	2f 93       	push	r18
	push r19
    7fac:	3f 93       	push	r19
	push r20
    7fae:	4f 93       	push	r20
	push r21
    7fb0:	5f 93       	push	r21
	push r22
    7fb2:	6f 93       	push	r22
	push r23
    7fb4:	7f 93       	push	r23
	push r24
    7fb6:	8f 93       	push	r24
	push r25
    7fb8:	9f 93       	push	r25
	push r26
    7fba:	af 93       	push	r26
	push r27
    7fbc:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7fbe:	78 94       	sei
	clr r1
    7fc0:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7fc2:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7fc4:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7fc8:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7fca:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7fce:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7fd2:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7fd6:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7fd8:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7fdc:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7fe0:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7fe4:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7fe8:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7fea:	f1 05       	cpc	r31, r1
	breq .+2 
    7fec:	09 f0       	breq	.+2      	; 0x7ff0 <no_render+0x50>
	icall
    7fee:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7ff0:	0e 94 c8 41 	call	0x8390	; 0x8390 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7ff4:	0e 94 5e 50 	call	0xa0bc	; 0xa0bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7ff8:	0e 94 23 40 	call	0x8046	; 0x8046 <process_music>
	clr r1
    7ffc:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7ffe:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    8002:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    8006:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8008:	f1 05       	cpc	r31, r1
	breq .+2 
    800a:	09 f0       	breq	.+2      	; 0x800e <no_render+0x6e>
	icall
    800c:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    800e:	bf 91       	pop	r27
	pop r26
    8010:	af 91       	pop	r26
	pop r25
    8012:	9f 91       	pop	r25
	pop r24
    8014:	8f 91       	pop	r24
	pop r23
    8016:	7f 91       	pop	r23
	pop r22
    8018:	6f 91       	pop	r22
	pop r21
    801a:	5f 91       	pop	r21
	pop r20
    801c:	4f 91       	pop	r20
	pop r19
    801e:	3f 91       	pop	r19
	pop r18
    8020:	2f 91       	pop	r18

00008022 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8022:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8024:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8026:	ff 91       	pop	r31
	pop ZL
    8028:	ef 91       	pop	r30
	pop r1
    802a:	1f 90       	pop	r1
	pop r0
    802c:	0f 90       	pop	r0
	reti
    802e:	18 95       	reti

00008030 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8030:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8032:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8034:	00 c0       	rjmp	.+0      	; 0x8036 <hsync_pulse+0x6>
	call update_sound
    8036:	0e 94 29 40 	call	0x8052	; 0x8052 <update_sound>

	lds ZL,sync_pulse
    803a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    803e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8040:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    8044:	08 95       	ret

00008046 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8046:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    804a:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    804c:	0e 94 4f 45 	call	0x8a9e	; 0x8a9e <ProcessMusic>
#endif

	ret
    8050:	08 95       	ret

00008052 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    8052:	0f 93       	push	r16
	push r17
    8054:	1f 93       	push	r17
	push r18
    8056:	2f 93       	push	r18
	push r28
    8058:	cf 93       	push	r28
	push r29
    805a:	df 93       	push	r29

	mov r18,ZL
    805c:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    805e:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    8062:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    8066:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8068:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    806c:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    8070:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    8074:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8076:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8078:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    807c:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    8080:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    8084:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8086:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8088:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    808a:	d0 2d       	mov	r29, r0
	nop
    808c:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    808e:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    8092:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    8096:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8098:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    809c:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    80a0:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    80a4:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    80a6:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    80a8:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    80ac:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    80b0:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    80b4:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    80b6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    80b8:	20 ff       	sbrs	r18, 0
	rjmp .
    80ba:	00 c0       	rjmp	.+0      	; 0x80bc <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    80bc:	01 03       	mulsu	r16, r17
	clr r0
    80be:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    80c0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    80c2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    80c4:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    80c6:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    80ca:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    80ce:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    80d0:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    80d4:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    80d8:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    80dc:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    80de:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    80e0:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    80e4:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    80e8:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    80ec:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    80ee:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    80f0:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    80f2:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    80f4:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    80f8:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    80fc:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    8100:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8102:	92 f4       	brpl	.+36     	; 0x8128 <ch4_no_shift>

	lds ZH,tr4_params
    8104:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    8108:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    810a:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    810c:	00 2e       	mov	r0, r16
	lsr r0
    810e:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8110:	00 26       	eor	r0, r16
	bst r0,0
    8112:	00 fa       	bst	r0, 0
	lsr r17
    8114:	16 95       	lsr	r17
	ror r16
    8116:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    8118:	16 f9       	bld	r17, 6
	sbrs ZH,0
    811a:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    811c:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    811e:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    8122:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    8126:	03 c0       	rjmp	.+6      	; 0x812e <ch4_end>

00008128 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8128:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    812a:	1a 95       	dec	r17
	brne .-4
    812c:	f1 f7       	brne	.-4      	; 0x812a <ch4_no_shift+0x2>

0000812e <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    812e:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    8132:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8134:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8136:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8138:	21 ff       	sbrs	r18, 1
	rjmp .
    813a:	00 c0       	rjmp	.+0      	; 0x813c <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    813c:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    813e:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8140:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    8144:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8146:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8148:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    814a:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    814c:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    8150:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    8154:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8156:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    815a:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    815e:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    8162:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8164:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    8168:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    816a:	f0 1f       	adc	r31, r16

	movw r16,ZL
    816c:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    816e:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    8172:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    8176:	00 19       	sub	r16, r0
	sbc r17,r1
    8178:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    817a:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    817e:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    8182:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8184:	f1 05       	cpc	r31, r1
	brlo .+2
    8186:	08 f0       	brcs	.+2      	; 0x818a <ch4_end+0x5c>
	movw ZL,r16
    8188:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    818a:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    818e:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    8192:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8194:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    8198:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    819a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    819c:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    819e:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    81a0:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    81a2:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    81a4:	d0 05       	cpc	r29, r0
	brlt .+2
    81a6:	0c f0       	brlt	.+2      	; 0x81aa <ch4_end+0x7c>
	ldi r28,127
    81a8:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    81aa:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    81ac:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    81ae:	d0 05       	cpc	r29, r0
	brge .+2
    81b0:	0c f4       	brge	.+2      	; 0x81b4 <ch4_end+0x86>
	ldi r28,-128
    81b2:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    81b4:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    81b6:	c0 93 b3 00 	sts	0x00B3, r28

000081ba <update_sound_end>:
#endif


update_sound_end:

	pop r29
    81ba:	df 91       	pop	r29
	pop r28
    81bc:	cf 91       	pop	r28
	pop r18
    81be:	2f 91       	pop	r18
	pop r17
    81c0:	1f 91       	pop	r17
	pop r16
    81c2:	0f 91       	pop	r16
	
	ret
    81c4:	08 95       	ret

000081c6 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    81c6:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    81ca:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    81ce:	08 95       	ret

000081d0 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    81d0:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    81d2:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    81d4:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    81d6:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    81d8:	6c e1       	ldi	r22, 0x1C	; 28

000081da <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    81da:	6d 93       	st	X+, r22
	sbiw r30,1
    81dc:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    81de:	e9 f7       	brne	.-6      	; 0x81da <fill_vram_loop>

	clr r1
    81e0:	11 24       	eor	r1, r1

	ret
    81e2:	08 95       	ret

000081e4 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    81e4:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    81e6:	76 2f       	mov	r23, r22
	lsr r22
    81e8:	66 95       	lsr	r22
	lsr r22
    81ea:	66 95       	lsr	r22
	lsr r22			;y>>3
    81ec:	66 95       	lsr	r22
	ldi r18,8		
    81ee:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    81f0:	82 9f       	mul	r24, r18
	movw XL,r0
    81f2:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    81f4:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    81f6:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    81f8:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    81fa:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    81fc:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    81fe:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    8200:	4c 93       	st	X, r20

	clr r1
    8202:	11 24       	eor	r1, r1

	ret
    8204:	08 95       	ret

00008206 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8206:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    820a:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    820e:	08 95       	ret

00008210 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8210:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    8214:	81 70       	andi	r24, 0x01	; 1
	ret
    8216:	08 95       	ret

00008218 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8218:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    821c:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    821e:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    8222:	08 95       	ret

00008224 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8224:	88 23       	and	r24, r24
	brne rj_p2
    8226:	29 f4       	brne	.+10     	; 0x8232 <rj_p2>
		
	lds r24,joypad1_status_lo
    8228:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    822c:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    8230:	08 95       	ret

00008232 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8232:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    8236:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    823a:	08 95       	ret

0000823c <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    823c:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    823e:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8240:	f1 f7       	brne	.-4      	; 0x823e <WaitUs+0x2>
	nop
    8242:	00 00       	nop
	sbiw r24,1
    8244:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8246:	d1 f7       	brne	.-12     	; 0x823c <WaitUs>

	ret
    8248:	08 95       	ret

0000824a <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    824a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    824c:	fe cf       	rjmp	.-4      	; 0x824a <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    824e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8250:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8252:	60 bd       	out	0x20, r22	; 32
   cli
    8254:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8256:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8258:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    825a:	78 94       	sei
   ret
    825c:	08 95       	ret

0000825e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    825e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8260:	fe cf       	rjmp	.-4      	; 0x825e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8262:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8264:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8266:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8268:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    826a:	80 b5       	in	r24, 0x20	; 32
   sei
    826c:	78 94       	sei
   ret
    826e:	08 95       	ret

00008270 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8270:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8272:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8276:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    827a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    827e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    8282:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8286:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    828a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    828e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8292:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8296:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8298:	80 93 81 00 	sts	0x0081, r24

		cli
    829c:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    829e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    82a0:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    82a4:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    82a6:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    82aa:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    82ac:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    82b0:	90 93 60 00 	sts	0x0060, r25
	
		sei
    82b4:	78 94       	sei

000082b6 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    82b6:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    82ba:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    82bc:	e0 f3       	brcs	.-8      	; 0x82b6 <wait>

		ret
    82be:	08 95       	ret

000082c0 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    82c0:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    82c4:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    82c8:	08 95       	ret

000082ca <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    82ca:	0f 93       	push	r16
		push r17
    82cc:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    82ce:	0f b7       	in	r16, 0x3f	; 63
		push r16
    82d0:	0f 93       	push	r16

		lds r16,sync_pulse
    82d2:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    82d6:	03 95       	inc	r16
		sts sync_pulse,r16
    82d8:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    82dc:	00 fd       	sbrc	r16, 0
		rjmp 1f
    82de:	08 c0       	rjmp	.+16     	; 0x82f0 <__vector_8+0x26>
		lds r17,random_value
    82e0:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    82e4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    82e8:	10 27       	eor	r17, r16
		sts random_value,r17
    82ea:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    82ee:	07 c0       	rjmp	.+14     	; 0x82fe <__vector_8+0x34>
	1:
		lds r17,random_value+1
    82f0:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    82f4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    82f8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    82fa:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    82fe:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8300:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8304:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8306:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8308:	1f 91       	pop	r17
		pop r16
    830a:	0f 91       	pop	r16
		reti
    830c:	18 95       	reti

0000830e <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    830e:	98 e0       	ldi	r25, 0x08	; 8
    8310:	88 e1       	ldi	r24, 0x18	; 24
    8312:	0f b6       	in	r0, 0x3f	; 63
    8314:	f8 94       	cli
    8316:	a8 95       	wdr
    8318:	80 93 60 00 	sts	0x0060, r24
    831c:	0f be       	out	0x3f, r0	; 63
    831e:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8322:	ff cf       	rjmp	.-2      	; 0x8322 <SoftReset+0x14>

00008324 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8324:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8326:	c8 95       	lpm
    8328:	c8 95       	lpm
		Wait200ns();
    832a:	c8 95       	lpm
    832c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    832e:	12 98       	cbi	0x02, 2	; 2
    8330:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8332:	80 e0       	ldi	r24, 0x00	; 0
    8334:	90 e0       	ldi	r25, 0x00	; 0
    8336:	20 e0       	ldi	r18, 0x00	; 0
    8338:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    833a:	36 95       	lsr	r19
    833c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    833e:	96 95       	lsr	r25
    8340:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8342:	c8 95       	lpm
    8344:	c8 95       	lpm
			Wait200ns();
    8346:	c8 95       	lpm
    8348:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    834a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    834c:	00 9b       	sbis	0x00, 0	; 0
    834e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8350:	01 9b       	sbis	0x00, 1	; 0
    8352:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8354:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8356:	c8 95       	lpm
    8358:	c8 95       	lpm
			Wait200ns();
    835a:	c8 95       	lpm
    835c:	c8 95       	lpm
    835e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8360:	61 f7       	brne	.-40     	; 0x833a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8362:	30 93 c0 0c 	sts	0x0CC0, r19
    8366:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    836a:	90 93 c4 0c 	sts	0x0CC4, r25
    836e:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8372:	80 91 bf 0c 	lds	r24, 0x0CBF
    8376:	90 91 c0 0c 	lds	r25, 0x0CC0
    837a:	0f 97       	sbiw	r24, 0x0f	; 15
    837c:	31 f0       	breq	.+12     	; 0x838a <ReadButtons+0x66>
    837e:	80 91 c3 0c 	lds	r24, 0x0CC3
    8382:	90 91 c4 0c 	lds	r25, 0x0CC4
    8386:	0f 97       	sbiw	r24, 0x0f	; 15
    8388:	11 f4       	brne	.+4      	; 0x838e <ReadButtons+0x6a>
		SoftReset();
    838a:	0e 94 87 41 	call	0x830e	; 0x830e <SoftReset>
    838e:	08 95       	ret

00008390 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8390:	10 92 fa 0c 	sts	0x0CFA, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8394:	00 99       	sbic	0x00, 0	; 0
    8396:	03 c0       	rjmp	.+6      	; 0x839e <ReadControllers+0xe>
    8398:	81 e0       	ldi	r24, 0x01	; 1
    839a:	80 93 fa 0c 	sts	0x0CFA, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    839e:	01 99       	sbic	0x00, 1	; 0
    83a0:	05 c0       	rjmp	.+10     	; 0x83ac <ReadControllers+0x1c>
    83a2:	80 91 fa 0c 	lds	r24, 0x0CFA
    83a6:	82 60       	ori	r24, 0x02	; 2
    83a8:	80 93 fa 0c 	sts	0x0CFA, r24
			
	//read the standard buttons
	ReadButtons();
    83ac:	0c 94 92 41 	jmp	0x8324	; 0x8324 <ReadButtons>

000083b0 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    83b0:	cf 93       	push	r28
    83b2:	df 93       	push	r29
    83b4:	c0 e0       	ldi	r28, 0x00	; 0
    83b6:	d0 e0       	ldi	r29, 0x00	; 0
    83b8:	fe 01       	movw	r30, r28
    83ba:	ee 53       	subi	r30, 0x3E	; 62
    83bc:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    83be:	64 91       	lpm	r22, Z
    83c0:	ce 01       	movw	r24, r28
    83c2:	0e 94 25 41 	call	0x824a	; 0x824a <WriteEeprom>
    83c6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    83c8:	c0 32       	cpi	r28, 0x20	; 32
    83ca:	d1 05       	cpc	r29, r1
    83cc:	a9 f7       	brne	.-22     	; 0x83b8 <FormatEeprom+0x8>
    83ce:	c0 e2       	ldi	r28, 0x20	; 32
    83d0:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    83d2:	6f ef       	ldi	r22, 0xFF	; 255
    83d4:	ce 01       	movw	r24, r28
    83d6:	0e 94 25 41 	call	0x824a	; 0x824a <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    83da:	6f ef       	ldi	r22, 0xFF	; 255
    83dc:	ce 01       	movw	r24, r28
    83de:	01 96       	adiw	r24, 0x01	; 1
    83e0:	0e 94 25 41 	call	0x824a	; 0x824a <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    83e4:	a0 96       	adiw	r28, 0x20	; 32
    83e6:	c1 15       	cp	r28, r1
    83e8:	88 e0       	ldi	r24, 0x08	; 8
    83ea:	d8 07       	cpc	r29, r24
    83ec:	91 f7       	brne	.-28     	; 0x83d2 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    83ee:	df 91       	pop	r29
    83f0:	cf 91       	pop	r28
    83f2:	08 95       	ret

000083f4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    83f4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    83f6:	80 e0       	ldi	r24, 0x00	; 0
    83f8:	90 e0       	ldi	r25, 0x00	; 0
    83fa:	0e 94 2f 41 	call	0x825e	; 0x825e <ReadEeprom>
    83fe:	c8 2f       	mov	r28, r24
    8400:	81 e0       	ldi	r24, 0x01	; 1
    8402:	90 e0       	ldi	r25, 0x00	; 0
    8404:	0e 94 2f 41 	call	0x825e	; 0x825e <ReadEeprom>
    8408:	28 2f       	mov	r18, r24
    840a:	30 e0       	ldi	r19, 0x00	; 0
    840c:	32 2f       	mov	r19, r18
    840e:	22 27       	eor	r18, r18
    8410:	2c 0f       	add	r18, r28
    8412:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8414:	81 e0       	ldi	r24, 0x01	; 1
    8416:	2a 35       	cpi	r18, 0x5A	; 90
    8418:	35 45       	sbci	r19, 0x55	; 85
    841a:	09 f0       	breq	.+2      	; 0x841e <isEepromFormatted+0x2a>
    841c:	80 e0       	ldi	r24, 0x00	; 0
}
    841e:	cf 91       	pop	r28
    8420:	08 95       	ret

00008422 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8422:	8f 92       	push	r8
    8424:	9f 92       	push	r9
    8426:	af 92       	push	r10
    8428:	bf 92       	push	r11
    842a:	cf 92       	push	r12
    842c:	df 92       	push	r13
    842e:	ef 92       	push	r14
    8430:	ff 92       	push	r15
    8432:	0f 93       	push	r16
    8434:	1f 93       	push	r17
    8436:	cf 93       	push	r28
    8438:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    843a:	fb 01       	movw	r30, r22
    843c:	11 82       	std	Z+1, r1	; 0x01
    843e:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8440:	8f 3f       	cpi	r24, 0xFF	; 255
    8442:	ff ef       	ldi	r31, 0xFF	; 255
    8444:	9f 07       	cpc	r25, r31
    8446:	89 f1       	breq	.+98     	; 0x84aa <EepromBlockExists+0x88>
    8448:	6a 01       	movw	r12, r20
    844a:	8b 01       	movw	r16, r22
    844c:	7c 01       	movw	r14, r24
    844e:	a1 2c       	mov	r10, r1
    8450:	b1 2c       	mov	r11, r1
    8452:	c0 e0       	ldi	r28, 0x00	; 0
    8454:	d3 e0       	ldi	r29, 0x03	; 3
    8456:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8458:	c5 01       	movw	r24, r10
    845a:	0e 94 2f 41 	call	0x825e	; 0x825e <ReadEeprom>
    845e:	88 2e       	mov	r8, r24
    8460:	c5 01       	movw	r24, r10
    8462:	01 96       	adiw	r24, 0x01	; 1
    8464:	0e 94 2f 41 	call	0x825e	; 0x825e <ReadEeprom>
    8468:	28 2f       	mov	r18, r24
    846a:	30 e0       	ldi	r19, 0x00	; 0
    846c:	32 2f       	mov	r19, r18
    846e:	22 27       	eor	r18, r18
    8470:	28 0d       	add	r18, r8
    8472:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8474:	2e 15       	cp	r18, r14
    8476:	3f 05       	cpc	r19, r15
    8478:	29 f4       	brne	.+10     	; 0x8484 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    847a:	f8 01       	movw	r30, r16
    847c:	b1 82       	std	Z+1, r11	; 0x01
    847e:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8480:	d0 e0       	ldi	r29, 0x00	; 0
    8482:	0b c0       	rjmp	.+22     	; 0x849a <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8484:	2f 3f       	cpi	r18, 0xFF	; 255
    8486:	3f 4f       	sbci	r19, 0xFF	; 255
    8488:	41 f4       	brne	.+16     	; 0x849a <EepromBlockExists+0x78>
    848a:	91 10       	cpse	r9, r1
    848c:	06 c0       	rjmp	.+12     	; 0x849a <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    848e:	c1 14       	cp	r12, r1
    8490:	d1 04       	cpc	r13, r1
    8492:	11 f0       	breq	.+4      	; 0x8498 <EepromBlockExists+0x76>
    8494:	f6 01       	movw	r30, r12
    8496:	c0 83       	st	Z, r28
    8498:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    849a:	cf 5f       	subi	r28, 0xFF	; 255
    849c:	f0 e2       	ldi	r31, 0x20	; 32
    849e:	af 0e       	add	r10, r31
    84a0:	b1 1c       	adc	r11, r1
    84a2:	c0 34       	cpi	r28, 0x40	; 64
    84a4:	c9 f6       	brne	.-78     	; 0x8458 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    84a6:	8d 2f       	mov	r24, r29
    84a8:	01 c0       	rjmp	.+2      	; 0x84ac <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    84aa:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    84ac:	df 91       	pop	r29
    84ae:	cf 91       	pop	r28
    84b0:	1f 91       	pop	r17
    84b2:	0f 91       	pop	r16
    84b4:	ff 90       	pop	r15
    84b6:	ef 90       	pop	r14
    84b8:	df 90       	pop	r13
    84ba:	cf 90       	pop	r12
    84bc:	bf 90       	pop	r11
    84be:	af 90       	pop	r10
    84c0:	9f 90       	pop	r9
    84c2:	8f 90       	pop	r8
    84c4:	08 95       	ret

000084c6 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    84c6:	ef 92       	push	r14
    84c8:	ff 92       	push	r15
    84ca:	0f 93       	push	r16
    84cc:	1f 93       	push	r17
    84ce:	cf 93       	push	r28
    84d0:	df 93       	push	r29
    84d2:	00 d0       	rcall	.+0      	; 0x84d4 <EepromWriteBlock+0xe>
    84d4:	1f 92       	push	r1
    84d6:	cd b7       	in	r28, 0x3d	; 61
    84d8:	de b7       	in	r29, 0x3e	; 62
    84da:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    84dc:	1a 82       	std	Y+2, r1	; 0x02
    84de:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    84e0:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    84e2:	ae 01       	movw	r20, r28
    84e4:	4d 5f       	subi	r20, 0xFD	; 253
    84e6:	5f 4f       	sbci	r21, 0xFF	; 255
    84e8:	be 01       	movw	r22, r28
    84ea:	6f 5f       	subi	r22, 0xFF	; 255
    84ec:	7f 4f       	sbci	r23, 0xFF	; 255
    84ee:	fc 01       	movw	r30, r24
    84f0:	80 81       	ld	r24, Z
    84f2:	91 81       	ldd	r25, Z+1	; 0x01
    84f4:	0e 94 11 42 	call	0x8422	; 0x8422 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    84f8:	88 23       	and	r24, r24
    84fa:	11 f0       	breq	.+4      	; 0x8500 <EepromWriteBlock+0x3a>
    84fc:	83 30       	cpi	r24, 0x03	; 3
    84fe:	19 f5       	brne	.+70     	; 0x8546 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8500:	89 81       	ldd	r24, Y+1	; 0x01
    8502:	9a 81       	ldd	r25, Y+2	; 0x02
    8504:	89 2b       	or	r24, r25
    8506:	49 f4       	brne	.+18     	; 0x851a <EepromWriteBlock+0x54>
    8508:	8b 81       	ldd	r24, Y+3	; 0x03
    850a:	88 23       	and	r24, r24
    850c:	d9 f0       	breq	.+54     	; 0x8544 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    850e:	f0 e2       	ldi	r31, 0x20	; 32
    8510:	8f 9f       	mul	r24, r31
    8512:	c0 01       	movw	r24, r0
    8514:	11 24       	eor	r1, r1
    8516:	9a 83       	std	Y+2, r25	; 0x02
    8518:	89 83       	std	Y+1, r24	; 0x01
    851a:	78 01       	movw	r14, r16
    851c:	20 e2       	ldi	r18, 0x20	; 32
    851e:	e2 0e       	add	r14, r18
    8520:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8522:	f8 01       	movw	r30, r16
    8524:	61 91       	ld	r22, Z+
    8526:	8f 01       	movw	r16, r30
    8528:	89 81       	ldd	r24, Y+1	; 0x01
    852a:	9a 81       	ldd	r25, Y+2	; 0x02
    852c:	9c 01       	movw	r18, r24
    852e:	2f 5f       	subi	r18, 0xFF	; 255
    8530:	3f 4f       	sbci	r19, 0xFF	; 255
    8532:	3a 83       	std	Y+2, r19	; 0x02
    8534:	29 83       	std	Y+1, r18	; 0x01
    8536:	0e 94 25 41 	call	0x824a	; 0x824a <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    853a:	0e 15       	cp	r16, r14
    853c:	1f 05       	cpc	r17, r15
    853e:	89 f7       	brne	.-30     	; 0x8522 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8540:	80 e0       	ldi	r24, 0x00	; 0
    8542:	01 c0       	rjmp	.+2      	; 0x8546 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8544:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8546:	0f 90       	pop	r0
    8548:	0f 90       	pop	r0
    854a:	0f 90       	pop	r0
    854c:	df 91       	pop	r29
    854e:	cf 91       	pop	r28
    8550:	1f 91       	pop	r17
    8552:	0f 91       	pop	r16
    8554:	ff 90       	pop	r15
    8556:	ef 90       	pop	r14
    8558:	08 95       	ret

0000855a <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    855a:	cf 92       	push	r12
    855c:	df 92       	push	r13
    855e:	ff 92       	push	r15
    8560:	0f 93       	push	r16
    8562:	1f 93       	push	r17
    8564:	cf 93       	push	r28
    8566:	df 93       	push	r29
    8568:	00 d0       	rcall	.+0      	; 0x856a <EepromReadBlock+0x10>
    856a:	cd b7       	in	r28, 0x3d	; 61
    856c:	de b7       	in	r29, 0x3e	; 62
    856e:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8570:	40 e0       	ldi	r20, 0x00	; 0
    8572:	50 e0       	ldi	r21, 0x00	; 0
    8574:	be 01       	movw	r22, r28
    8576:	6f 5f       	subi	r22, 0xFF	; 255
    8578:	7f 4f       	sbci	r23, 0xFF	; 255
    857a:	0e 94 11 42 	call	0x8422	; 0x8422 <EepromBlockExists>
    857e:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8580:	81 11       	cpse	r24, r1
    8582:	13 c0       	rjmp	.+38     	; 0x85aa <EepromReadBlock+0x50>
    8584:	68 01       	movw	r12, r16
    8586:	80 e2       	ldi	r24, 0x20	; 32
    8588:	c8 0e       	add	r12, r24
    858a:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    858c:	89 81       	ldd	r24, Y+1	; 0x01
    858e:	9a 81       	ldd	r25, Y+2	; 0x02
    8590:	9c 01       	movw	r18, r24
    8592:	2f 5f       	subi	r18, 0xFF	; 255
    8594:	3f 4f       	sbci	r19, 0xFF	; 255
    8596:	3a 83       	std	Y+2, r19	; 0x02
    8598:	29 83       	std	Y+1, r18	; 0x01
    859a:	0e 94 2f 41 	call	0x825e	; 0x825e <ReadEeprom>
    859e:	f8 01       	movw	r30, r16
    85a0:	81 93       	st	Z+, r24
    85a2:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    85a4:	ec 15       	cp	r30, r12
    85a6:	fd 05       	cpc	r31, r13
    85a8:	89 f7       	brne	.-30     	; 0x858c <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    85aa:	8f 2d       	mov	r24, r15
    85ac:	0f 90       	pop	r0
    85ae:	0f 90       	pop	r0
    85b0:	df 91       	pop	r29
    85b2:	cf 91       	pop	r28
    85b4:	1f 91       	pop	r17
    85b6:	0f 91       	pop	r16
    85b8:	ff 90       	pop	r15
    85ba:	df 90       	pop	r13
    85bc:	cf 90       	pop	r12
    85be:	08 95       	ret

000085c0 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    85c0:	00 97       	sbiw	r24, 0x00	; 0
    85c2:	21 f0       	breq	.+8      	; 0x85cc <GetPrngNumber+0xc>
    85c4:	90 93 cd 0c 	sts	0x0CCD, r25
    85c8:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    85cc:	20 91 cc 0c 	lds	r18, 0x0CCC
    85d0:	30 91 cd 0c 	lds	r19, 0x0CCD
    85d4:	a9 01       	movw	r20, r18
    85d6:	56 95       	lsr	r21
    85d8:	47 95       	ror	r20
    85da:	56 95       	lsr	r21
    85dc:	47 95       	ror	r20
    85de:	c9 01       	movw	r24, r18
    85e0:	63 e0       	ldi	r22, 0x03	; 3
    85e2:	96 95       	lsr	r25
    85e4:	87 95       	ror	r24
    85e6:	6a 95       	dec	r22
    85e8:	e1 f7       	brne	.-8      	; 0x85e2 <GetPrngNumber+0x22>
    85ea:	84 27       	eor	r24, r20
    85ec:	95 27       	eor	r25, r21
    85ee:	82 27       	eor	r24, r18
    85f0:	93 27       	eor	r25, r19
    85f2:	a9 01       	movw	r20, r18
    85f4:	75 e0       	ldi	r23, 0x05	; 5
    85f6:	56 95       	lsr	r21
    85f8:	47 95       	ror	r20
    85fa:	7a 95       	dec	r23
    85fc:	e1 f7       	brne	.-8      	; 0x85f6 <GetPrngNumber+0x36>
    85fe:	84 27       	eor	r24, r20
    8600:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8602:	99 27       	eor	r25, r25
    8604:	86 95       	lsr	r24
    8606:	97 95       	ror	r25
    8608:	88 27       	eor	r24, r24
    860a:	36 95       	lsr	r19
    860c:	27 95       	ror	r18
    860e:	82 2b       	or	r24, r18
    8610:	93 2b       	or	r25, r19
    8612:	90 93 cd 0c 	sts	0x0CCD, r25
    8616:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    861a:	08 95       	ret

0000861c <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    861c:	fc 01       	movw	r30, r24
    861e:	67 87       	std	Z+15, r22	; 0x0f
    8620:	08 95       	ret

00008622 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8622:	e0 ed       	ldi	r30, 0xD0	; 208
    8624:	fc e0       	ldi	r31, 0x0C	; 12
    8626:	81 e0       	ldi	r24, 0x01	; 1
    8628:	91 e0       	ldi	r25, 0x01	; 1
    862a:	95 8b       	std	Z+21, r25	; 0x15
    862c:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    862e:	63 8b       	std	Z+19, r22	; 0x13
    8630:	08 95       	ret

00008632 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8632:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8634:	90 81       	ld	r25, Z
    8636:	9f 75       	andi	r25, 0x5F	; 95
    8638:	90 83       	st	Z, r25
    863a:	08 95       	ret

0000863c <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    863c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    863e:	90 81       	ld	r25, Z
    8640:	90 64       	ori	r25, 0x40	; 64
    8642:	90 83       	st	Z, r25
    8644:	08 95       	ret

00008646 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8646:	fc 01       	movw	r30, r24
    8648:	66 87       	std	Z+14, r22	; 0x0e
    864a:	08 95       	ret

0000864c <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    864c:	fc 01       	movw	r30, r24
    864e:	62 87       	std	Z+10, r22	; 0x0a
    8650:	08 95       	ret

00008652 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8652:	fc 01       	movw	r30, r24
    8654:	63 87       	std	Z+11, r22	; 0x0b
    8656:	08 95       	ret

00008658 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8658:	cf 93       	push	r28
    865a:	df 93       	push	r29
    865c:	ec 01       	movw	r28, r24
    865e:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8660:	29 81       	ldd	r18, Y+1	; 0x01
    8662:	30 e0       	ldi	r19, 0x00	; 0
    8664:	f9 01       	movw	r30, r18
    8666:	ee 0f       	add	r30, r30
    8668:	ff 1f       	adc	r31, r31
    866a:	e8 5f       	subi	r30, 0xF8	; 248
    866c:	ff 46       	sbci	r31, 0x6F	; 111
    866e:	65 91       	lpm	r22, Z+
    8670:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8672:	f9 01       	movw	r30, r18
    8674:	e4 0f       	add	r30, r20
    8676:	f1 1d       	adc	r31, r1
    8678:	47 fd       	sbrc	r20, 7
    867a:	fa 95       	dec	r31
    867c:	ee 0f       	add	r30, r30
    867e:	ff 1f       	adc	r31, r31
    8680:	e8 5f       	subi	r30, 0xF8	; 248
    8682:	ff 46       	sbci	r31, 0x6F	; 111
    8684:	85 91       	lpm	r24, Z+
    8686:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8688:	86 1b       	sub	r24, r22
    868a:	97 0b       	sbc	r25, r23
    868c:	68 85       	ldd	r22, Y+8	; 0x08
    868e:	70 e0       	ldi	r23, 0x00	; 0
    8690:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
	if(delta==0)delta++;
    8694:	61 15       	cp	r22, r1
    8696:	71 05       	cpc	r23, r1
    8698:	11 f4       	brne	.+4      	; 0x869e <PatchCommand11+0x46>
    869a:	61 e0       	ldi	r22, 0x01	; 1
    869c:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    869e:	ea 81       	ldd	r30, Y+2	; 0x02
    86a0:	86 e0       	ldi	r24, 0x06	; 6
    86a2:	e8 9f       	mul	r30, r24
    86a4:	f0 01       	movw	r30, r0
    86a6:	11 24       	eor	r1, r1
    86a8:	e0 53       	subi	r30, 0x30	; 48
    86aa:	f3 4f       	sbci	r31, 0xF3	; 243
    86ac:	81 81       	ldd	r24, Z+1	; 0x01
    86ae:	92 81       	ldd	r25, Z+2	; 0x02
    86b0:	86 0f       	add	r24, r22
    86b2:	97 1f       	adc	r25, r23
    86b4:	92 83       	std	Z+2, r25	; 0x02
    86b6:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    86b8:	7e 83       	std	Y+6, r23	; 0x06
    86ba:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    86bc:	88 81       	ld	r24, Y
    86be:	88 60       	ori	r24, 0x08	; 8
    86c0:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    86c2:	89 81       	ldd	r24, Y+1	; 0x01
    86c4:	48 0f       	add	r20, r24
    86c6:	4f 83       	std	Y+7, r20	; 0x07
}
    86c8:	df 91       	pop	r29
    86ca:	cf 91       	pop	r28
    86cc:	08 95       	ret

000086ce <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    86ce:	fc 01       	movw	r30, r24
    86d0:	60 87       	std	Z+8, r22	; 0x08
    86d2:	08 95       	ret

000086d4 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    86d4:	fc 01       	movw	r30, r24
    86d6:	64 83       	std	Z+4, r22	; 0x04
    86d8:	08 95       	ret

000086da <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    86da:	fc 01       	movw	r30, r24
    86dc:	82 81       	ldd	r24, Z+2	; 0x02
    86de:	0c 94 88 47 	jmp	0x8f10	; 0x8f10 <SetMixerWave>

000086e2 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    86e2:	fc 01       	movw	r30, r24
	track->note+=param;
    86e4:	91 81       	ldd	r25, Z+1	; 0x01
    86e6:	69 0f       	add	r22, r25
    86e8:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    86ea:	82 81       	ldd	r24, Z+2	; 0x02
    86ec:	0c 94 71 47 	jmp	0x8ee2	; 0x8ee2 <SetMixerNote>

000086f0 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    86f0:	fc 01       	movw	r30, r24
	track->note-=param;
    86f2:	91 81       	ldd	r25, Z+1	; 0x01
    86f4:	96 1b       	sub	r25, r22
    86f6:	69 2f       	mov	r22, r25
    86f8:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    86fa:	82 81       	ldd	r24, Z+2	; 0x02
    86fc:	0c 94 71 47 	jmp	0x8ee2	; 0x8ee2 <SetMixerNote>

00008700 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8700:	1f 93       	push	r17
    8702:	cf 93       	push	r28
    8704:	df 93       	push	r29
    8706:	ec 01       	movw	r28, r24
    8708:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    870a:	8a 81       	ldd	r24, Y+2	; 0x02
    870c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <SetMixerNote>
	track->note=param;
    8710:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8712:	88 81       	ld	r24, Y
    8714:	87 7f       	andi	r24, 0xF7	; 247
    8716:	88 83       	st	Y, r24
}
    8718:	df 91       	pop	r29
    871a:	cf 91       	pop	r28
    871c:	1f 91       	pop	r17
    871e:	08 95       	ret

00008720 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8720:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8722:	14 96       	adiw	r26, 0x04	; 4
    8724:	8c 91       	ld	r24, X
    8726:	14 97       	sbiw	r26, 0x04	; 4
    8728:	88 23       	and	r24, r24
    872a:	19 f1       	breq	.+70     	; 0x8772 <PatchCommand14+0x52>
    872c:	55 96       	adiw	r26, 0x15	; 21
    872e:	2d 91       	ld	r18, X+
    8730:	3c 91       	ld	r19, X
    8732:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8734:	66 23       	and	r22, r22
    8736:	79 f0       	breq	.+30     	; 0x8756 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8738:	77 27       	eor	r23, r23
    873a:	67 fd       	sbrc	r22, 7
    873c:	70 95       	com	r23
    873e:	6f 5f       	subi	r22, 0xFF	; 255
    8740:	7f 4f       	sbci	r23, 0xFF	; 255
    8742:	ab 01       	movw	r20, r22
    8744:	44 0f       	add	r20, r20
    8746:	55 1f       	adc	r21, r21
    8748:	64 0f       	add	r22, r20
    874a:	75 1f       	adc	r23, r21
    874c:	26 1b       	sub	r18, r22
    874e:	37 0b       	sbc	r19, r23
    8750:	09 c0       	rjmp	.+18     	; 0x8764 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8752:	ef 3f       	cpi	r30, 0xFF	; 255
    8754:	39 f0       	breq	.+14     	; 0x8764 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8756:	23 50       	subi	r18, 0x03	; 3
    8758:	31 09       	sbc	r19, r1
    875a:	f9 01       	movw	r30, r18
    875c:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    875e:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8760:	ed 30       	cpi	r30, 0x0D	; 13
    8762:	b9 f7       	brne	.-18     	; 0x8752 <PatchCommand14+0x32>
    8764:	56 96       	adiw	r26, 0x16	; 22
    8766:	3c 93       	st	X, r19
    8768:	2e 93       	st	-X, r18
    876a:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    876c:	81 50       	subi	r24, 0x01	; 1
    876e:	14 96       	adiw	r26, 0x04	; 4
    8770:	8c 93       	st	X, r24
    8772:	08 95       	ret

00008774 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8774:	90 93 73 0d 	sts	0x0D73, r25
    8778:	80 93 72 0d 	sts	0x0D72, r24

	masterVolume=DEFAULT_MASTER_VOL;
    877c:	8f e6       	ldi	r24, 0x6F	; 111
    877e:	80 93 75 0d 	sts	0x0D75, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8782:	10 92 ce 0c 	sts	0x0CCE, r1
    8786:	ed e0       	ldi	r30, 0x0D	; 13
    8788:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    878a:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    878c:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    878e:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8790:	28 e1       	ldi	r18, 0x18	; 24
    8792:	df 01       	movw	r26, r30
    8794:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8796:	8c 93       	st	X, r24
    8798:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    879a:	9c 93       	st	X, r25
    879c:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    879e:	1c 92       	st	X, r1
    87a0:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    87a2:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    87a4:	10 82       	st	Z, r1
    87a6:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    87a8:	2c 93       	st	X, r18
    87aa:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    87ac:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    87ae:	8f 5f       	subi	r24, 0xFF	; 255
    87b0:	77 96       	adiw	r30, 0x17	; 23
    87b2:	85 30       	cpi	r24, 0x05	; 5
    87b4:	71 f7       	brne	.-36     	; 0x8792 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    87b6:	08 95       	ret

000087b8 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    87b8:	ed ef       	ldi	r30, 0xFD	; 253
    87ba:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    87bc:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87be:	20 81       	ld	r18, Z
    87c0:	2f 77       	andi	r18, 0x7F	; 127
    87c2:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    87c4:	33 83       	std	Z+3, r19	; 0x03
    87c6:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    87c8:	2d e0       	ldi	r18, 0x0D	; 13
    87ca:	e0 37       	cpi	r30, 0x70	; 112
    87cc:	f2 07       	cpc	r31, r18
    87ce:	b9 f7       	brne	.-18     	; 0x87be <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    87d0:	01 96       	adiw	r24, 0x01	; 1
    87d2:	90 93 7a 0d 	sts	0x0D7A, r25
    87d6:	80 93 79 0d 	sts	0x0D79, r24
		songStart=song+1;//skip first delta-time
    87da:	90 93 fc 0c 	sts	0x0CFC, r25
    87de:	80 93 fb 0c 	sts	0x0CFB, r24
		loopStart=song+1;
    87e2:	90 93 7c 0d 	sts	0x0D7C, r25
    87e6:	80 93 7b 0d 	sts	0x0D7B, r24
		nextDeltaTime=0;
    87ea:	10 92 77 0d 	sts	0x0D77, r1
    87ee:	10 92 76 0d 	sts	0x0D76, r1
		currDeltaTime=0;
    87f2:	10 92 71 0d 	sts	0x0D71, r1
    87f6:	10 92 70 0d 	sts	0x0D70, r1
		songSpeed=0;
    87fa:	10 92 78 0d 	sts	0x0D78, r1

		lastStatus=0;
    87fe:	10 92 74 0d 	sts	0x0D74, r1
		playSong=true;
    8802:	81 e0       	ldi	r24, 0x01	; 1
    8804:	80 93 ce 0c 	sts	0x0CCE, r24
    8808:	08 95       	ret

0000880a <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    880a:	ed ef       	ldi	r30, 0xFD	; 253
    880c:	fc e0       	ldi	r31, 0x0C	; 12
    880e:	8a ef       	ldi	r24, 0xFA	; 250
    8810:	87 87       	std	Z+15, r24	; 0x0f
    8812:	86 a3       	std	Z+38, r24	; 0x26
    8814:	80 93 3a 0d 	sts	0x0D3A, r24
    8818:	80 93 51 0d 	sts	0x0D51, r24
    881c:	80 93 68 0d 	sts	0x0D68, r24
	}

	playSong=false;
    8820:	10 92 ce 0c 	sts	0x0CCE, r1
    8824:	08 95       	ret

00008826 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8826:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8828:	ed 91       	ld	r30, X+
    882a:	fc 91       	ld	r31, X
    882c:	11 97       	sbiw	r26, 0x01	; 1
    882e:	9f 01       	movw	r18, r30
    8830:	2f 5f       	subi	r18, 0xFF	; 255
    8832:	3f 4f       	sbci	r19, 0xFF	; 255
    8834:	11 96       	adiw	r26, 0x01	; 1
    8836:	3c 93       	st	X, r19
    8838:	2e 93       	st	-X, r18
    883a:	e4 91       	lpm	r30, Z
    883c:	e7 fd       	sbrc	r30, 7
    883e:	03 c0       	rjmp	.+6      	; 0x8846 <ReadVarLen+0x20>
    8840:	8e 2f       	mov	r24, r30
    8842:	90 e0       	ldi	r25, 0x00	; 0
    8844:	08 95       	ret
    {
       value &= 0x7F;
    8846:	ef 77       	andi	r30, 0x7F	; 127
    8848:	8e 2f       	mov	r24, r30
    884a:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    884c:	96 95       	lsr	r25
    884e:	98 2f       	mov	r25, r24
    8850:	88 27       	eor	r24, r24
    8852:	97 95       	ror	r25
    8854:	87 95       	ror	r24
    8856:	2f 5f       	subi	r18, 0xFF	; 255
    8858:	3f 4f       	sbci	r19, 0xFF	; 255
    885a:	f9 01       	movw	r30, r18
    885c:	31 97       	sbiw	r30, 0x01	; 1
    885e:	e4 91       	lpm	r30, Z
    8860:	4e 2f       	mov	r20, r30
    8862:	4f 77       	andi	r20, 0x7F	; 127
    8864:	84 0f       	add	r24, r20
    8866:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8868:	e7 fd       	sbrc	r30, 7
    886a:	f0 cf       	rjmp	.-32     	; 0x884c <ReadVarLen+0x26>
    886c:	2d 93       	st	X+, r18
    886e:	3c 93       	st	X, r19
    }


    return value;
}
    8870:	08 95       	ret

00008872 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8872:	ef 92       	push	r14
    8874:	ff 92       	push	r15
    8876:	0f 93       	push	r16
    8878:	1f 93       	push	r17
    887a:	cf 93       	push	r28
    887c:	df 93       	push	r29
    887e:	1f 92       	push	r1
    8880:	cd b7       	in	r28, 0x3d	; 61
    8882:	de b7       	in	r29, 0x3e	; 62
    8884:	7c 01       	movw	r14, r24
    8886:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8888:	fc 01       	movw	r30, r24
    888a:	80 81       	ld	r24, Z
    888c:	08 2f       	mov	r16, r24
    888e:	00 1f       	adc	r16, r16
    8890:	00 27       	eor	r16, r16
    8892:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8894:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8896:	9f ef       	ldi	r25, 0xFF	; 255
    8898:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    889a:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    889c:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    889e:	87 7b       	andi	r24, 0xB7	; 183
    88a0:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    88a2:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    88a4:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    88a6:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    88a8:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    88aa:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    88ac:	82 81       	ldd	r24, Z+2	; 0x02
    88ae:	83 30       	cpi	r24, 0x03	; 3
    88b0:	69 f4       	brne	.+26     	; 0x88cc <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    88b2:	01 11       	cpse	r16, r1
    88b4:	01 c0       	rjmp	.+2      	; 0x88b8 <TriggerCommon+0x46>
    88b6:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    88b8:	81 e0       	ldi	r24, 0x01	; 1
    88ba:	91 e0       	ldi	r25, 0x01	; 1
    88bc:	90 93 e5 0c 	sts	0x0CE5, r25
    88c0:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    88c4:	81 e0       	ldi	r24, 0x01	; 1
    88c6:	80 93 e3 0c 	sts	0x0CE3, r24
    88ca:	39 c0       	rjmp	.+114    	; 0x893e <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    88cc:	84 30       	cpi	r24, 0x04	; 4
    88ce:	69 f5       	brne	.+90     	; 0x892a <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    88d0:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    88d4:	80 91 72 0d 	lds	r24, 0x0D72
    88d8:	90 91 73 0d 	lds	r25, 0x0D73
    88dc:	f9 e0       	ldi	r31, 0x09	; 9
    88de:	6f 9f       	mul	r22, r31
    88e0:	80 0d       	add	r24, r0
    88e2:	91 1d       	adc	r25, r1
    88e4:	11 24       	eor	r1, r1
    88e6:	fc 01       	movw	r30, r24
    88e8:	31 96       	adiw	r30, 0x01	; 1
    88ea:	a5 91       	lpm	r26, Z+
    88ec:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    88ee:	b0 93 ed 0c 	sts	0x0CED, r27
    88f2:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    88f6:	ac 01       	movw	r20, r24
    88f8:	49 5f       	subi	r20, 0xF9	; 249
    88fa:	5f 4f       	sbci	r21, 0xFF	; 255
    88fc:	fa 01       	movw	r30, r20
    88fe:	65 91       	lpm	r22, Z+
    8900:	74 91       	lpm	r23, Z
    8902:	05 96       	adiw	r24, 0x05	; 5
    8904:	fc 01       	movw	r30, r24
    8906:	85 91       	lpm	r24, Z+
    8908:	94 91       	lpm	r25, Z
    890a:	68 1b       	sub	r22, r24
    890c:	79 0b       	sbc	r23, r25
    890e:	70 93 ef 0c 	sts	0x0CEF, r23
    8912:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8916:	fa 01       	movw	r30, r20
    8918:	85 91       	lpm	r24, Z+
    891a:	94 91       	lpm	r25, Z
    891c:	a8 0f       	add	r26, r24
    891e:	b9 1f       	adc	r27, r25
    8920:	b0 93 f1 0c 	sts	0x0CF1, r27
    8924:	a0 93 f0 0c 	sts	0x0CF0, r26
    8928:	05 c0       	rjmp	.+10     	; 0x8934 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    892a:	60 e0       	ldi	r22, 0x00	; 0
    892c:	29 83       	std	Y+1, r18	; 0x01
    892e:	0e 94 88 47 	call	0x8f10	; 0x8f10 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8932:	29 81       	ldd	r18, Y+1	; 0x01
    8934:	62 2f       	mov	r22, r18
    8936:	f7 01       	movw	r30, r14
    8938:	82 81       	ldd	r24, Z+2	; 0x02
    893a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    893e:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8940:	00 23       	and	r16, r16
    8942:	11 f0       	breq	.+4      	; 0x8948 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8944:	11 8b       	std	Z+17, r17	; 0x11
    8946:	01 c0       	rjmp	.+2      	; 0x894a <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8948:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    894a:	e0 91 72 0d 	lds	r30, 0x0D72
    894e:	f0 91 73 0d 	lds	r31, 0x0D73
    8952:	39 e0       	ldi	r19, 0x09	; 9
    8954:	13 9f       	mul	r17, r19
    8956:	e0 0d       	add	r30, r0
    8958:	f1 1d       	adc	r31, r1
    895a:	11 24       	eor	r1, r1
    895c:	33 96       	adiw	r30, 0x03	; 3
    895e:	85 91       	lpm	r24, Z+
    8960:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8962:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8964:	00 97       	sbiw	r24, 0x00	; 0
    8966:	19 f4       	brne	.+6      	; 0x896e <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8968:	16 8a       	std	Z+22, r1	; 0x16
    896a:	15 8a       	std	Z+21, r1	; 0x15
    896c:	08 c0       	rjmp	.+16     	; 0x897e <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    896e:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8970:	fc 01       	movw	r30, r24
    8972:	24 91       	lpm	r18, Z
    8974:	f7 01       	movw	r30, r14
    8976:	22 8b       	std	Z+18, r18	; 0x12
    8978:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    897a:	96 8b       	std	Z+22, r25	; 0x16
    897c:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    897e:	0f 90       	pop	r0
    8980:	df 91       	pop	r29
    8982:	cf 91       	pop	r28
    8984:	1f 91       	pop	r17
    8986:	0f 91       	pop	r16
    8988:	ff 90       	pop	r15
    898a:	ef 90       	pop	r14
    898c:	08 95       	ret

0000898e <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    898e:	cf 93       	push	r28
    8990:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8992:	e0 91 72 0d 	lds	r30, 0x0D72
    8996:	f0 91 73 0d 	lds	r31, 0x0D73
    899a:	99 e0       	ldi	r25, 0x09	; 9
    899c:	89 9f       	mul	r24, r25
    899e:	e0 0d       	add	r30, r0
    89a0:	f1 1d       	adc	r31, r1
    89a2:	11 24       	eor	r1, r1
    89a4:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    89a6:	e1 30       	cpi	r30, 0x01	; 1
    89a8:	e9 f0       	breq	.+58     	; 0x89e4 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    89aa:	e2 30       	cpi	r30, 0x02	; 2
    89ac:	e9 f0       	breq	.+58     	; 0x89e8 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    89ae:	20 91 14 0d 	lds	r18, 0x0D14
    89b2:	27 ff       	sbrs	r18, 7
    89b4:	1d c0       	rjmp	.+58     	; 0x89f0 <TriggerFx+0x62>
    89b6:	20 91 25 0d 	lds	r18, 0x0D25
    89ba:	28 13       	cpse	r18, r24
    89bc:	02 c0       	rjmp	.+4      	; 0x89c2 <TriggerFx+0x34>
    89be:	41 11       	cpse	r20, r1
    89c0:	17 c0       	rjmp	.+46     	; 0x89f0 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    89c2:	20 91 2b 0d 	lds	r18, 0x0D2B
    89c6:	27 ff       	sbrs	r18, 7
    89c8:	11 c0       	rjmp	.+34     	; 0x89ec <TriggerFx+0x5e>
    89ca:	20 91 3c 0d 	lds	r18, 0x0D3C
    89ce:	28 13       	cpse	r18, r24
    89d0:	02 c0       	rjmp	.+4      	; 0x89d6 <TriggerFx+0x48>
    89d2:	41 11       	cpse	r20, r1
    89d4:	0b c0       	rjmp	.+22     	; 0x89ec <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    89d6:	20 91 28 0d 	lds	r18, 0x0D28
    89da:	90 91 3f 0d 	lds	r25, 0x0D3F
    89de:	92 17       	cp	r25, r18
    89e0:	28 f4       	brcc	.+10     	; 0x89ec <TriggerFx+0x5e>
    89e2:	06 c0       	rjmp	.+12     	; 0x89f0 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    89e4:	c3 e0       	ldi	r28, 0x03	; 3
    89e6:	05 c0       	rjmp	.+10     	; 0x89f2 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    89e8:	c4 e0       	ldi	r28, 0x04	; 4
    89ea:	03 c0       	rjmp	.+6      	; 0x89f2 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    89ec:	c2 e0       	ldi	r28, 0x02	; 2
    89ee:	01 c0       	rjmp	.+2      	; 0x89f2 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    89f0:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    89f2:	97 e1       	ldi	r25, 0x17	; 23
    89f4:	c9 9f       	mul	r28, r25
    89f6:	e0 01       	movw	r28, r0
    89f8:	11 24       	eor	r1, r1
    89fa:	c3 50       	subi	r28, 0x03	; 3
    89fc:	d3 4f       	sbci	r29, 0xF3	; 243
    89fe:	90 e8       	ldi	r25, 0x80	; 128
    8a00:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8a02:	1e 8a       	std	Y+22, r1	; 0x16
    8a04:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8a06:	20 e5       	ldi	r18, 0x50	; 80
    8a08:	46 2f       	mov	r20, r22
    8a0a:	68 2f       	mov	r22, r24
    8a0c:	ce 01       	movw	r24, r28
    8a0e:	0e 94 39 44 	call	0x8872	; 0x8872 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8a12:	88 81       	ld	r24, Y
    8a14:	80 62       	ori	r24, 0x20	; 32
    8a16:	88 83       	st	Y, r24
}
    8a18:	df 91       	pop	r29
    8a1a:	cf 91       	pop	r28
    8a1c:	08 95       	ret

00008a1e <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8a1e:	cf 93       	push	r28
    8a20:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8a22:	a8 2f       	mov	r26, r24
    8a24:	b0 e0       	ldi	r27, 0x00	; 0
    8a26:	97 e1       	ldi	r25, 0x17	; 23
    8a28:	89 9f       	mul	r24, r25
    8a2a:	f0 01       	movw	r30, r0
    8a2c:	11 24       	eor	r1, r1
    8a2e:	e3 50       	subi	r30, 0x03	; 3
    8a30:	f3 4f       	sbci	r31, 0xF3	; 243
    8a32:	80 81       	ld	r24, Z
    8a34:	85 ff       	sbrs	r24, 5
    8a36:	02 c0       	rjmp	.+4      	; 0x8a3c <TriggerNote+0x1e>
    8a38:	87 fd       	sbrc	r24, 7
    8a3a:	2e c0       	rjmp	.+92     	; 0x8a98 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8a3c:	21 11       	cpse	r18, r1
    8a3e:	18 c0       	rjmp	.+48     	; 0x8a70 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8a40:	97 e1       	ldi	r25, 0x17	; 23
    8a42:	9a 9f       	mul	r25, r26
    8a44:	f0 01       	movw	r30, r0
    8a46:	9b 9f       	mul	r25, r27
    8a48:	f0 0d       	add	r31, r0
    8a4a:	11 24       	eor	r1, r1
    8a4c:	e3 50       	subi	r30, 0x03	; 3
    8a4e:	f3 4f       	sbci	r31, 0xF3	; 243
    8a50:	97 85       	ldd	r25, Z+15	; 0x0f
    8a52:	91 11       	cpse	r25, r1
    8a54:	02 c0       	rjmp	.+4      	; 0x8a5a <TriggerNote+0x3c>
    8a56:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8a58:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8a5a:	97 e1       	ldi	r25, 0x17	; 23
    8a5c:	9a 9f       	mul	r25, r26
    8a5e:	f0 01       	movw	r30, r0
    8a60:	9b 9f       	mul	r25, r27
    8a62:	f0 0d       	add	r31, r0
    8a64:	11 24       	eor	r1, r1
    8a66:	e3 50       	subi	r30, 0x03	; 3
    8a68:	f3 4f       	sbci	r31, 0xF3	; 243
    8a6a:	8f 7b       	andi	r24, 0xBF	; 191
    8a6c:	80 83       	st	Z, r24
    8a6e:	14 c0       	rjmp	.+40     	; 0x8a98 <TriggerNote+0x7a>
    8a70:	82 2f       	mov	r24, r18
    8a72:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8a74:	97 e1       	ldi	r25, 0x17	; 23
    8a76:	9a 9f       	mul	r25, r26
    8a78:	e0 01       	movw	r28, r0
    8a7a:	9b 9f       	mul	r25, r27
    8a7c:	d0 0d       	add	r29, r0
    8a7e:	11 24       	eor	r1, r1
    8a80:	c3 50       	subi	r28, 0x03	; 3
    8a82:	d3 4f       	sbci	r29, 0xF3	; 243
    8a84:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8a86:	1e 8a       	std	Y+22, r1	; 0x16
    8a88:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8a8a:	48 2f       	mov	r20, r24
    8a8c:	ce 01       	movw	r24, r28
    8a8e:	0e 94 39 44 	call	0x8872	; 0x8872 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8a92:	88 81       	ld	r24, Y
    8a94:	80 62       	ori	r24, 0x20	; 32
    8a96:	88 83       	st	Y, r24
		}

	}
}
    8a98:	df 91       	pop	r29
    8a9a:	cf 91       	pop	r28
    8a9c:	08 95       	ret

00008a9e <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8a9e:	6f 92       	push	r6
    8aa0:	7f 92       	push	r7
    8aa2:	8f 92       	push	r8
    8aa4:	9f 92       	push	r9
    8aa6:	af 92       	push	r10
    8aa8:	bf 92       	push	r11
    8aaa:	cf 92       	push	r12
    8aac:	df 92       	push	r13
    8aae:	ef 92       	push	r14
    8ab0:	ff 92       	push	r15
    8ab2:	0f 93       	push	r16
    8ab4:	1f 93       	push	r17
    8ab6:	cf 93       	push	r28
    8ab8:	df 93       	push	r29
    8aba:	cd ef       	ldi	r28, 0xFD	; 253
    8abc:	dc e0       	ldi	r29, 0x0C	; 12
    8abe:	00 ed       	ldi	r16, 0xD0	; 208
    8ac0:	1c e0       	ldi	r17, 0x0C	; 12
    8ac2:	d8 01       	movw	r26, r16
    8ac4:	9e 01       	movw	r18, r28
    8ac6:	40 e0       	ldi	r20, 0x00	; 0
    8ac8:	50 e0       	ldi	r21, 0x00	; 0
    8aca:	ca 01       	movw	r24, r20
    8acc:	83 50       	subi	r24, 0x03	; 3
    8ace:	93 4f       	sbci	r25, 0xF3	; 243
    8ad0:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8ad2:	fc 01       	movw	r30, r24
    8ad4:	87 85       	ldd	r24, Z+15	; 0x0f
    8ad6:	88 23       	and	r24, r24
    8ad8:	91 f0       	breq	.+36     	; 0x8afe <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8ada:	66 85       	ldd	r22, Z+14	; 0x0e
    8adc:	99 27       	eor	r25, r25
    8ade:	87 fd       	sbrc	r24, 7
    8ae0:	90 95       	com	r25
    8ae2:	86 0f       	add	r24, r22
    8ae4:	91 1d       	adc	r25, r1
    8ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    8ae8:	91 05       	cpc	r25, r1
    8aea:	19 f0       	breq	.+6      	; 0x8af2 <ProcessMusic+0x54>
    8aec:	14 f0       	brlt	.+4      	; 0x8af2 <ProcessMusic+0x54>
    8aee:	8f ef       	ldi	r24, 0xFF	; 255
    8af0:	90 e0       	ldi	r25, 0x00	; 0
    8af2:	97 ff       	sbrs	r25, 7
    8af4:	02 c0       	rjmp	.+4      	; 0x8afa <ProcessMusic+0x5c>
    8af6:	80 e0       	ldi	r24, 0x00	; 0
    8af8:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8afa:	f6 01       	movw	r30, r12
    8afc:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8afe:	f9 01       	movw	r30, r18
    8b00:	f0 80       	ld	r15, Z
    8b02:	f3 fe       	sbrs	r15, 3
    8b04:	2a c0       	rjmp	.+84     	; 0x8b5a <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8b06:	65 81       	ldd	r22, Z+5	; 0x05
    8b08:	76 81       	ldd	r23, Z+6	; 0x06
    8b0a:	11 96       	adiw	r26, 0x01	; 1
    8b0c:	8d 91       	ld	r24, X+
    8b0e:	9c 91       	ld	r25, X
    8b10:	12 97       	sbiw	r26, 0x02	; 2
    8b12:	86 0f       	add	r24, r22
    8b14:	97 1f       	adc	r25, r23
    8b16:	12 96       	adiw	r26, 0x02	; 2
    8b18:	9c 93       	st	X, r25
    8b1a:	8e 93       	st	-X, r24
    8b1c:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8b1e:	f6 01       	movw	r30, r12
    8b20:	e7 80       	ldd	r14, Z+7	; 0x07
    8b22:	ee 2d       	mov	r30, r14
    8b24:	f0 e0       	ldi	r31, 0x00	; 0
    8b26:	ee 0f       	add	r30, r30
    8b28:	ff 1f       	adc	r31, r31
    8b2a:	e8 5f       	subi	r30, 0xF8	; 248
    8b2c:	ff 46       	sbci	r31, 0x6F	; 111
    8b2e:	c5 90       	lpm	r12, Z+
    8b30:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8b32:	16 16       	cp	r1, r22
    8b34:	17 06       	cpc	r1, r23
    8b36:	24 f4       	brge	.+8      	; 0x8b40 <ProcessMusic+0xa2>
    8b38:	8c 15       	cp	r24, r12
    8b3a:	9d 05       	cpc	r25, r13
    8b3c:	30 f4       	brcc	.+12     	; 0x8b4a <ProcessMusic+0xac>
    8b3e:	0d c0       	rjmp	.+26     	; 0x8b5a <ProcessMusic+0xbc>
    8b40:	67 2b       	or	r22, r23
    8b42:	59 f0       	breq	.+22     	; 0x8b5a <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8b44:	c8 16       	cp	r12, r24
    8b46:	d9 06       	cpc	r13, r25
    8b48:	40 f0       	brcs	.+16     	; 0x8b5a <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8b4a:	12 96       	adiw	r26, 0x02	; 2
    8b4c:	dc 92       	st	X, r13
    8b4e:	ce 92       	st	-X, r12
    8b50:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8b52:	8f 2d       	mov	r24, r15
    8b54:	87 7f       	andi	r24, 0xF7	; 247
    8b56:	f9 01       	movw	r30, r18
    8b58:	80 83       	st	Z, r24
    8b5a:	49 5e       	subi	r20, 0xE9	; 233
    8b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b5e:	29 5e       	subi	r18, 0xE9	; 233
    8b60:	3f 4f       	sbci	r19, 0xFF	; 255
    8b62:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8b64:	43 37       	cpi	r20, 0x73	; 115
    8b66:	51 05       	cpc	r21, r1
    8b68:	09 f0       	breq	.+2      	; 0x8b6c <ProcessMusic+0xce>
    8b6a:	af cf       	rjmp	.-162    	; 0x8aca <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8b6c:	80 91 ce 0c 	lds	r24, 0x0CCE
    8b70:	88 23       	and	r24, r24
    8b72:	09 f4       	brne	.+2      	; 0x8b76 <ProcessMusic+0xd8>
    8b74:	cc c0       	rjmp	.+408    	; 0x8d0e <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8b76:	57 e1       	ldi	r21, 0x17	; 23
    8b78:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8b7a:	80 91 70 0d 	lds	r24, 0x0D70
    8b7e:	90 91 71 0d 	lds	r25, 0x0D71
    8b82:	20 91 76 0d 	lds	r18, 0x0D76
    8b86:	30 91 77 0d 	lds	r19, 0x0D77
    8b8a:	82 17       	cp	r24, r18
    8b8c:	93 07       	cpc	r25, r19
    8b8e:	09 f0       	breq	.+2      	; 0x8b92 <ProcessMusic+0xf4>
    8b90:	b9 c0       	rjmp	.+370    	; 0x8d04 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8b92:	20 91 79 0d 	lds	r18, 0x0D79
    8b96:	30 91 7a 0d 	lds	r19, 0x0D7A
    8b9a:	b9 01       	movw	r22, r18
    8b9c:	6f 5f       	subi	r22, 0xFF	; 255
    8b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    8ba0:	70 93 7a 0d 	sts	0x0D7A, r23
    8ba4:	60 93 79 0d 	sts	0x0D79, r22
    8ba8:	f9 01       	movw	r30, r18
    8baa:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8bac:	4f 3f       	cpi	r20, 0xFF	; 255
    8bae:	79 f5       	brne	.+94     	; 0x8c0e <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8bb0:	a9 01       	movw	r20, r18
    8bb2:	4e 5f       	subi	r20, 0xFE	; 254
    8bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    8bb6:	50 93 7a 0d 	sts	0x0D7A, r21
    8bba:	40 93 79 0d 	sts	0x0D79, r20
    8bbe:	fb 01       	movw	r30, r22
    8bc0:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8bc2:	6f 32       	cpi	r22, 0x2F	; 47
    8bc4:	19 f4       	brne	.+6      	; 0x8bcc <ProcessMusic+0x12e>
						playSong=false;
    8bc6:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    8bca:	9c c0       	rjmp	.+312    	; 0x8d04 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8bcc:	66 30       	cpi	r22, 0x06	; 6
    8bce:	09 f0       	breq	.+2      	; 0x8bd2 <ProcessMusic+0x134>
    8bd0:	8c c0       	rjmp	.+280    	; 0x8cea <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8bd2:	fa 01       	movw	r30, r20
    8bd4:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8bd6:	c9 01       	movw	r24, r18
    8bd8:	04 96       	adiw	r24, 0x04	; 4
    8bda:	90 93 7a 0d 	sts	0x0D7A, r25
    8bde:	80 93 79 0d 	sts	0x0D79, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8be2:	f9 01       	movw	r30, r18
    8be4:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8be6:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8be8:	e3 35       	cpi	r30, 0x53	; 83
    8bea:	29 f4       	brne	.+10     	; 0x8bf6 <ProcessMusic+0x158>
							loopStart=songPos;
    8bec:	90 93 7c 0d 	sts	0x0D7C, r25
    8bf0:	80 93 7b 0d 	sts	0x0D7B, r24
    8bf4:	7a c0       	rjmp	.+244    	; 0x8cea <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8bf6:	e5 34       	cpi	r30, 0x45	; 69
    8bf8:	09 f0       	breq	.+2      	; 0x8bfc <ProcessMusic+0x15e>
    8bfa:	77 c0       	rjmp	.+238    	; 0x8cea <ProcessMusic+0x24c>
							songPos=loopStart;
    8bfc:	80 91 7b 0d 	lds	r24, 0x0D7B
    8c00:	90 91 7c 0d 	lds	r25, 0x0D7C
    8c04:	90 93 7a 0d 	sts	0x0D7A, r25
    8c08:	80 93 79 0d 	sts	0x0D79, r24
    8c0c:	6e c0       	rjmp	.+220    	; 0x8cea <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8c0e:	47 fd       	sbrc	r20, 7
    8c10:	40 93 74 0d 	sts	0x0D74, r20
					channel=lastStatus&0x0f;
    8c14:	90 91 74 0d 	lds	r25, 0x0D74
    8c18:	89 2f       	mov	r24, r25
    8c1a:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8c1c:	47 ff       	sbrs	r20, 7
    8c1e:	08 c0       	rjmp	.+16     	; 0x8c30 <ProcessMusic+0x192>
    8c20:	2e 5f       	subi	r18, 0xFE	; 254
    8c22:	3f 4f       	sbci	r19, 0xFF	; 255
    8c24:	30 93 7a 0d 	sts	0x0D7A, r19
    8c28:	20 93 79 0d 	sts	0x0D79, r18
    8c2c:	fb 01       	movw	r30, r22
    8c2e:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8c30:	90 7f       	andi	r25, 0xF0	; 240
    8c32:	90 3b       	cpi	r25, 0xB0	; 176
    8c34:	e1 f0       	breq	.+56     	; 0x8c6e <ProcessMusic+0x1d0>
    8c36:	90 3c       	cpi	r25, 0xC0	; 192
    8c38:	09 f4       	brne	.+2      	; 0x8c3c <ProcessMusic+0x19e>
    8c3a:	51 c0       	rjmp	.+162    	; 0x8cde <ProcessMusic+0x240>
    8c3c:	90 39       	cpi	r25, 0x90	; 144
    8c3e:	09 f0       	breq	.+2      	; 0x8c42 <ProcessMusic+0x1a4>
    8c40:	54 c0       	rjmp	.+168    	; 0x8cea <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8c42:	e0 91 79 0d 	lds	r30, 0x0D79
    8c46:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8c4a:	9f 01       	movw	r18, r30
    8c4c:	2f 5f       	subi	r18, 0xFF	; 255
    8c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    8c50:	30 93 7a 0d 	sts	0x0D7A, r19
    8c54:	20 93 79 0d 	sts	0x0D79, r18
    8c58:	24 91       	lpm	r18, Z
    8c5a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8c5c:	f8 9e       	mul	r15, r24
    8c5e:	f0 01       	movw	r30, r0
    8c60:	11 24       	eor	r1, r1
    8c62:	e3 50       	subi	r30, 0x03	; 3
    8c64:	f3 4f       	sbci	r31, 0xF3	; 243
    8c66:	60 89       	ldd	r22, Z+16	; 0x10
    8c68:	0e 94 0f 45 	call	0x8a1e	; 0x8a1e <TriggerNote>
    8c6c:	3e c0       	rjmp	.+124    	; 0x8cea <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8c6e:	e0 91 79 0d 	lds	r30, 0x0D79
    8c72:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8c76:	9f 01       	movw	r18, r30
    8c78:	2f 5f       	subi	r18, 0xFF	; 255
    8c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c7c:	30 93 7a 0d 	sts	0x0D7A, r19
    8c80:	20 93 79 0d 	sts	0x0D79, r18
    8c84:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8c86:	47 30       	cpi	r20, 0x07	; 7
    8c88:	49 f4       	brne	.+18     	; 0x8c9c <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8c8a:	f8 9e       	mul	r15, r24
    8c8c:	d0 01       	movw	r26, r0
    8c8e:	11 24       	eor	r1, r1
    8c90:	a3 50       	subi	r26, 0x03	; 3
    8c92:	b3 4f       	sbci	r27, 0xF3	; 243
    8c94:	ee 0f       	add	r30, r30
    8c96:	1c 96       	adiw	r26, 0x0c	; 12
    8c98:	ec 93       	st	X, r30
    8c9a:	27 c0       	rjmp	.+78     	; 0x8cea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8c9c:	4b 30       	cpi	r20, 0x0B	; 11
    8c9e:	49 f4       	brne	.+18     	; 0x8cb2 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8ca0:	f8 9e       	mul	r15, r24
    8ca2:	d0 01       	movw	r26, r0
    8ca4:	11 24       	eor	r1, r1
    8ca6:	a3 50       	subi	r26, 0x03	; 3
    8ca8:	b3 4f       	sbci	r27, 0xF3	; 243
    8caa:	ee 0f       	add	r30, r30
    8cac:	13 96       	adiw	r26, 0x03	; 3
    8cae:	ec 93       	st	X, r30
    8cb0:	1c c0       	rjmp	.+56     	; 0x8cea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8cb2:	4c 35       	cpi	r20, 0x5C	; 92
    8cb4:	49 f4       	brne	.+18     	; 0x8cc8 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8cb6:	f8 9e       	mul	r15, r24
    8cb8:	d0 01       	movw	r26, r0
    8cba:	11 24       	eor	r1, r1
    8cbc:	a3 50       	subi	r26, 0x03	; 3
    8cbe:	b3 4f       	sbci	r27, 0xF3	; 243
    8cc0:	ee 0f       	add	r30, r30
    8cc2:	1a 96       	adiw	r26, 0x0a	; 10
    8cc4:	ec 93       	st	X, r30
    8cc6:	11 c0       	rjmp	.+34     	; 0x8cea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8cc8:	44 36       	cpi	r20, 0x64	; 100
    8cca:	79 f4       	brne	.+30     	; 0x8cea <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8ccc:	f8 9e       	mul	r15, r24
    8cce:	d0 01       	movw	r26, r0
    8cd0:	11 24       	eor	r1, r1
    8cd2:	a3 50       	subi	r26, 0x03	; 3
    8cd4:	b3 4f       	sbci	r27, 0xF3	; 243
    8cd6:	ee 0f       	add	r30, r30
    8cd8:	1b 96       	adiw	r26, 0x0b	; 11
    8cda:	ec 93       	st	X, r30
    8cdc:	06 c0       	rjmp	.+12     	; 0x8cea <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8cde:	f8 9e       	mul	r15, r24
    8ce0:	f0 01       	movw	r30, r0
    8ce2:	11 24       	eor	r1, r1
    8ce4:	e3 50       	subi	r30, 0x03	; 3
    8ce6:	f3 4f       	sbci	r31, 0xF3	; 243
    8ce8:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8cea:	89 e7       	ldi	r24, 0x79	; 121
    8cec:	9d e0       	ldi	r25, 0x0D	; 13
    8cee:	0e 94 13 44 	call	0x8826	; 0x8826 <ReadVarLen>
    8cf2:	90 93 77 0d 	sts	0x0D77, r25
    8cf6:	80 93 76 0d 	sts	0x0D76, r24
				currDeltaTime=0;
    8cfa:	10 92 71 0d 	sts	0x0D71, r1
    8cfe:	10 92 70 0d 	sts	0x0D70, r1
    8d02:	3b cf       	rjmp	.-394    	; 0x8b7a <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8d04:	01 96       	adiw	r24, 0x01	; 1
    8d06:	90 93 71 0d 	sts	0x0D71, r25
    8d0a:	80 93 70 0d 	sts	0x0D70, r24
    8d0e:	96 e0       	ldi	r25, 0x06	; 6
    8d10:	a9 2e       	mov	r10, r25
    8d12:	9d e0       	ldi	r25, 0x0D	; 13
    8d14:	b9 2e       	mov	r11, r25
    8d16:	20 e1       	ldi	r18, 0x10	; 16
    8d18:	c2 2e       	mov	r12, r18
    8d1a:	2d e0       	ldi	r18, 0x0D	; 13
    8d1c:	d2 2e       	mov	r13, r18
    8d1e:	31 e1       	ldi	r19, 0x11	; 17
    8d20:	e3 2e       	mov	r14, r19
    8d22:	3d e0       	ldi	r19, 0x0D	; 13
    8d24:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8d26:	66 24       	eor	r6, r6
    8d28:	6a 94       	dec	r6
    8d2a:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8d2c:	88 81       	ld	r24, Y
    8d2e:	85 ff       	sbrs	r24, 5
    8d30:	42 c0       	rjmp	.+132    	; 0x8db6 <ProcessMusic+0x318>
    8d32:	2d 89       	ldd	r18, Y+21	; 0x15
    8d34:	3e 89       	ldd	r19, Y+22	; 0x16
    8d36:	23 2b       	or	r18, r19
    8d38:	09 f4       	brne	.+2      	; 0x8d3c <ProcessMusic+0x29e>
    8d3a:	3d c0       	rjmp	.+122    	; 0x8db6 <ProcessMusic+0x318>
    8d3c:	86 fd       	sbrc	r24, 6
    8d3e:	3b c0       	rjmp	.+118    	; 0x8db6 <ProcessMusic+0x318>
    8d40:	47 01       	movw	r8, r14
    8d42:	f2 e0       	ldi	r31, 0x02	; 2
    8d44:	8f 1a       	sub	r8, r31
    8d46:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8d48:	d6 01       	movw	r26, r12
    8d4a:	9c 91       	ld	r25, X
    8d4c:	f4 01       	movw	r30, r8
    8d4e:	80 81       	ld	r24, Z
    8d50:	98 13       	cpse	r25, r24
    8d52:	2e c0       	rjmp	.+92     	; 0x8db0 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8d54:	ed 89       	ldd	r30, Y+21	; 0x15
    8d56:	fe 89       	ldd	r31, Y+22	; 0x16
    8d58:	bf 01       	movw	r22, r30
    8d5a:	6f 5f       	subi	r22, 0xFF	; 255
    8d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d5e:	7e 8b       	std	Y+22, r23	; 0x16
    8d60:	6d 8b       	std	Y+21, r22	; 0x15
    8d62:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8d64:	8f 3f       	cpi	r24, 0xFF	; 255
    8d66:	31 f4       	brne	.+12     	; 0x8d74 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8d68:	88 81       	ld	r24, Y
    8d6a:	8f 77       	andi	r24, 0x7F	; 127
    8d6c:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8d6e:	1e 8a       	std	Y+22, r1	; 0x16
    8d70:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8d72:	1e c0       	rjmp	.+60     	; 0x8db0 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8d74:	9f 01       	movw	r18, r30
    8d76:	2e 5f       	subi	r18, 0xFE	; 254
    8d78:	3f 4f       	sbci	r19, 0xFF	; 255
    8d7a:	3e 8b       	std	Y+22, r19	; 0x16
    8d7c:	2d 8b       	std	Y+21, r18	; 0x15
    8d7e:	fb 01       	movw	r30, r22
    8d80:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8d82:	e8 2f       	mov	r30, r24
    8d84:	f0 e0       	ldi	r31, 0x00	; 0
    8d86:	ee 0f       	add	r30, r30
    8d88:	ff 1f       	adc	r31, r31
    8d8a:	ee 51       	subi	r30, 0x1E	; 30
    8d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    8d8e:	25 91       	lpm	r18, Z+
    8d90:	34 91       	lpm	r19, Z
    8d92:	ce 01       	movw	r24, r28
    8d94:	f9 01       	movw	r30, r18
    8d96:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8d98:	ed 89       	ldd	r30, Y+21	; 0x15
    8d9a:	fe 89       	ldd	r31, Y+22	; 0x16
    8d9c:	cf 01       	movw	r24, r30
    8d9e:	01 96       	adiw	r24, 0x01	; 1
    8da0:	9e 8b       	std	Y+22, r25	; 0x16
    8da2:	8d 8b       	std	Y+21, r24	; 0x15
    8da4:	e4 91       	lpm	r30, Z
    8da6:	d4 01       	movw	r26, r8
    8da8:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8daa:	f6 01       	movw	r30, r12
    8dac:	10 82       	st	Z, r1
    8dae:	cc cf       	rjmp	.-104    	; 0x8d48 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8db0:	9f 5f       	subi	r25, 0xFF	; 255
    8db2:	d6 01       	movw	r26, r12
    8db4:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8db6:	98 81       	ld	r25, Y
    8db8:	95 ff       	sbrs	r25, 5
    8dba:	6c c0       	rjmp	.+216    	; 0x8e94 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8dbc:	f7 01       	movw	r30, r14
    8dbe:	80 81       	ld	r24, Z
    8dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    8dc2:	11 f0       	breq	.+4      	; 0x8dc8 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8dc4:	8f 5f       	subi	r24, 0xFF	; 255
    8dc6:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8dc8:	97 fd       	sbrc	r25, 7
    8dca:	04 c0       	rjmp	.+8      	; 0x8dd4 <ProcessMusic+0x336>
    8dcc:	f7 01       	movw	r30, r14
    8dce:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8dd0:	90 81       	ld	r25, Z
    8dd2:	01 c0       	rjmp	.+2      	; 0x8dd6 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8dd4:	9f ef       	ldi	r25, 0xFF	; 255
    8dd6:	f7 01       	movw	r30, r14
    8dd8:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8dda:	80 81       	ld	r24, Z
    8ddc:	88 23       	and	r24, r24
    8dde:	09 f4       	brne	.+2      	; 0x8de2 <ProcessMusic+0x344>
    8de0:	4e c0       	rjmp	.+156    	; 0x8e7e <ProcessMusic+0x3e0>
    8de2:	31 96       	adiw	r30, 0x01	; 1
    8de4:	50 81       	ld	r21, Z
    8de6:	55 23       	and	r21, r21
    8de8:	09 f4       	brne	.+2      	; 0x8dec <ProcessMusic+0x34e>
    8dea:	49 c0       	rjmp	.+146    	; 0x8e7e <ProcessMusic+0x3e0>
    8dec:	99 23       	and	r25, r25
    8dee:	09 f4       	brne	.+2      	; 0x8df2 <ProcessMusic+0x354>
    8df0:	46 c0       	rjmp	.+140    	; 0x8e7e <ProcessMusic+0x3e0>
    8df2:	40 91 75 0d 	lds	r20, 0x0D75
    8df6:	44 23       	and	r20, r20
    8df8:	09 f4       	brne	.+2      	; 0x8dfc <ProcessMusic+0x35e>
    8dfa:	41 c0       	rjmp	.+130    	; 0x8e7e <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8dfc:	89 9f       	mul	r24, r25
    8dfe:	c0 01       	movw	r24, r0
    8e00:	11 24       	eor	r1, r1
    8e02:	93 95       	inc	r25
				uVol>>=8;
    8e04:	89 2f       	mov	r24, r25
    8e06:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8e08:	58 9f       	mul	r21, r24
    8e0a:	90 01       	movw	r18, r0
    8e0c:	59 9f       	mul	r21, r25
    8e0e:	30 0d       	add	r19, r0
    8e10:	11 24       	eor	r1, r1
    8e12:	c9 01       	movw	r24, r18
    8e14:	93 95       	inc	r25
				uVol>>=8;
    8e16:	89 2f       	mov	r24, r25
    8e18:	99 27       	eor	r25, r25
    8e1a:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8e1c:	50 81       	ld	r21, Z
    8e1e:	58 9f       	mul	r21, r24
    8e20:	90 01       	movw	r18, r0
    8e22:	59 9f       	mul	r21, r25
    8e24:	30 0d       	add	r19, r0
    8e26:	11 24       	eor	r1, r1
    8e28:	33 95       	inc	r19
					uVol>>=8;
    8e2a:	23 2f       	mov	r18, r19
    8e2c:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8e2e:	42 9f       	mul	r20, r18
    8e30:	c0 01       	movw	r24, r0
    8e32:	43 9f       	mul	r20, r19
    8e34:	90 0d       	add	r25, r0
    8e36:	11 24       	eor	r1, r1
    8e38:	93 95       	inc	r25
				uVol>>=8;
    8e3a:	89 2f       	mov	r24, r25
    8e3c:	99 27       	eor	r25, r25
    8e3e:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8e40:	20 81       	ld	r18, Z
    8e42:	22 23       	and	r18, r18
    8e44:	f1 f0       	breq	.+60     	; 0x8e82 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8e46:	d5 01       	movw	r26, r10
    8e48:	ec 91       	ld	r30, X
    8e4a:	f0 e0       	ldi	r31, 0x00	; 0
    8e4c:	e0 50       	subi	r30, 0x00	; 0
    8e4e:	fe 46       	sbci	r31, 0x6E	; 110
    8e50:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8e52:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8e54:	2e 9f       	mul	r18, r30
    8e56:	f0 01       	movw	r30, r0
    8e58:	11 24       	eor	r1, r1
    8e5a:	f3 95       	inc	r31
					tVol>>=8;
    8e5c:	ef 2f       	mov	r30, r31
    8e5e:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8e60:	a3 01       	movw	r20, r6
    8e62:	4e 1b       	sub	r20, r30
    8e64:	5f 0b       	sbc	r21, r31
    8e66:	48 9f       	mul	r20, r24
    8e68:	90 01       	movw	r18, r0
    8e6a:	49 9f       	mul	r20, r25
    8e6c:	30 0d       	add	r19, r0
    8e6e:	58 9f       	mul	r21, r24
    8e70:	30 0d       	add	r19, r0
    8e72:	11 24       	eor	r1, r1
    8e74:	c9 01       	movw	r24, r18
    8e76:	93 95       	inc	r25
					uVol>>=8;
    8e78:	89 2f       	mov	r24, r25
    8e7a:	99 27       	eor	r25, r25
    8e7c:	02 c0       	rjmp	.+4      	; 0x8e82 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8e7e:	80 e0       	ldi	r24, 0x00	; 0
    8e80:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8e82:	f5 01       	movw	r30, r10
    8e84:	30 81       	ld	r19, Z
    8e86:	f7 01       	movw	r30, r14
    8e88:	39 97       	sbiw	r30, 0x09	; 9
    8e8a:	20 81       	ld	r18, Z
    8e8c:	23 0f       	add	r18, r19
    8e8e:	d5 01       	movw	r26, r10
    8e90:	2c 93       	st	X, r18
    8e92:	02 c0       	rjmp	.+4      	; 0x8e98 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8e94:	80 e0       	ldi	r24, 0x00	; 0
    8e96:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8e98:	f8 01       	movw	r30, r16
    8e9a:	80 83       	st	Z, r24
    8e9c:	67 96       	adiw	r28, 0x17	; 23
    8e9e:	0a 5f       	subi	r16, 0xFA	; 250
    8ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    8ea2:	f7 e1       	ldi	r31, 0x17	; 23
    8ea4:	af 0e       	add	r10, r31
    8ea6:	b1 1c       	adc	r11, r1
    8ea8:	87 e1       	ldi	r24, 0x17	; 23
    8eaa:	c8 0e       	add	r12, r24
    8eac:	d1 1c       	adc	r13, r1
    8eae:	97 e1       	ldi	r25, 0x17	; 23
    8eb0:	e9 0e       	add	r14, r25
    8eb2:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8eb4:	ad e0       	ldi	r26, 0x0D	; 13
    8eb6:	c0 37       	cpi	r28, 0x70	; 112
    8eb8:	da 07       	cpc	r29, r26
    8eba:	09 f0       	breq	.+2      	; 0x8ebe <ProcessMusic+0x420>
    8ebc:	37 cf       	rjmp	.-402    	; 0x8d2c <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8ebe:	df 91       	pop	r29
    8ec0:	cf 91       	pop	r28
    8ec2:	1f 91       	pop	r17
    8ec4:	0f 91       	pop	r16
    8ec6:	ff 90       	pop	r15
    8ec8:	ef 90       	pop	r14
    8eca:	df 90       	pop	r13
    8ecc:	cf 90       	pop	r12
    8ece:	bf 90       	pop	r11
    8ed0:	af 90       	pop	r10
    8ed2:	9f 90       	pop	r9
    8ed4:	8f 90       	pop	r8
    8ed6:	7f 90       	pop	r7
    8ed8:	6f 90       	pop	r6
    8eda:	08 95       	ret

00008edc <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8edc:	80 93 75 0d 	sts	0x0D75, r24
    8ee0:	08 95       	ret

00008ee2 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8ee2:	99 27       	eor	r25, r25
	clr r23
    8ee4:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8ee6:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8ee8:	09 f4       	brne	.+2      	; 0x8eec <set_note_waves>
		ret
    8eea:	08 95       	ret

00008eec <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8eec:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8eee:	f0 e9       	ldi	r31, 0x90	; 144
	lsl r22
    8ef0:	66 0f       	add	r22, r22
	rol r23
    8ef2:	77 1f       	adc	r23, r23
	add ZL,r22
    8ef4:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8ef6:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8ef8:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8efa:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8efc:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8efe:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8f00:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8f02:	28 9f       	mul	r18, r24
	add ZL,r0
    8f04:	e0 0d       	add	r30, r0
	adc ZH,r1
    8f06:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8f08:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8f0a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8f0c:	11 24       	eor	r1, r1
	

	ret
    8f0e:	08 95       	ret

00008f10 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8f10:	99 27       	eor	r25, r25
	clr r23
    8f12:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8f14:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8f16:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8f18:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8f1a:	28 9f       	mul	r18, r24
	add ZL,r0
    8f1c:	e0 0d       	add	r30, r0
	adc ZH,r1
    8f1e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8f20:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8f22:	31 f4       	brne	.+12     	; 0x8f30 <smw1>
	lds r22,tr4_params
    8f24:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8f28:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8f2a:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8f2e:	0b c0       	rjmp	.+22     	; 0x8f46 <esmw>

00008f30 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8f30:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8f32:	31 f4       	brne	.+12     	; 0x8f40 <smw2>
	lds r22,tr4_params
    8f34:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8f38:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8f3a:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8f3e:	03 c0       	rjmp	.+6      	; 0x8f46 <esmw>

00008f40 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8f40:	72 e9       	ldi	r23, 0x92	; 146
	add r23,r22
    8f42:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8f44:	75 83       	std	Z+5, r23	; 0x05

00008f46 <esmw>:

esmw:
	clr r1	
    8f46:	11 24       	eor	r1, r1
	ret
    8f48:	08 95       	ret
	...

00009000 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9000:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9002:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    9006:	08 95       	ret

00009008 <steptable>:
    9008:	22 00       	.word	0x0022	; ????
    900a:	24 00       	.word	0x0024	; ????
    900c:	26 00       	.word	0x0026	; ????
    900e:	28 00       	.word	0x0028	; ????
    9010:	2b 00       	.word	0x002b	; ????
    9012:	2d 00       	.word	0x002d	; ????
    9014:	30 00       	.word	0x0030	; ????
    9016:	33 00       	.word	0x0033	; ????
    9018:	36 00       	.word	0x0036	; ????
    901a:	39 00       	.word	0x0039	; ????
    901c:	3d 00       	.word	0x003d	; ????
    901e:	40 00       	.word	0x0040	; ????
    9020:	44 00       	.word	0x0044	; ????
    9022:	48 00       	.word	0x0048	; ????
    9024:	4c 00       	.word	0x004c	; ????
    9026:	51 00       	.word	0x0051	; ????
    9028:	56 00       	.word	0x0056	; ????
    902a:	5b 00       	.word	0x005b	; ????
    902c:	60 00       	.word	0x0060	; ????
    902e:	66 00       	.word	0x0066	; ????
    9030:	6c 00       	.word	0x006c	; ????
    9032:	73 00       	.word	0x0073	; ????
    9034:	79 00       	.word	0x0079	; ????
    9036:	81 00       	.word	0x0081	; ????
    9038:	88 00       	.word	0x0088	; ????
    903a:	90 00       	.word	0x0090	; ????
    903c:	99 00       	.word	0x0099	; ????
    903e:	a2 00       	.word	0x00a2	; ????
    9040:	ac 00       	.word	0x00ac	; ????
    9042:	b6 00       	.word	0x00b6	; ????
    9044:	c1 00       	.word	0x00c1	; ????
    9046:	cc 00       	.word	0x00cc	; ????
    9048:	d8 00       	.word	0x00d8	; ????
    904a:	e5 00       	.word	0x00e5	; ????
    904c:	f3 00       	.word	0x00f3	; ????
    904e:	01 01       	movw	r0, r2
    9050:	10 01       	movw	r2, r0
    9052:	21 01       	movw	r4, r2
    9054:	32 01       	movw	r6, r4
    9056:	44 01       	movw	r8, r8
    9058:	57 01       	movw	r10, r14
    905a:	6c 01       	movw	r12, r24
    905c:	81 01       	movw	r16, r2
    905e:	98 01       	movw	r18, r16
    9060:	b0 01       	movw	r22, r0
    9062:	ca 01       	movw	r24, r20
    9064:	e5 01       	movw	r28, r10
    9066:	02 02       	muls	r16, r18
    9068:	21 02       	muls	r18, r17
    906a:	41 02       	muls	r20, r17
    906c:	64 02       	muls	r22, r20
    906e:	88 02       	muls	r24, r24
    9070:	ae 02       	muls	r26, r30
    9072:	d7 02       	muls	r29, r23
    9074:	03 03       	mulsu	r16, r19
    9076:	30 03       	mulsu	r19, r16
    9078:	61 03       	mulsu	r22, r17
    907a:	94 03       	fmuls	r17, r20
    907c:	cb 03       	fmulsu	r20, r19
    907e:	05 04       	cpc	r0, r5
    9080:	42 04       	cpc	r4, r2
    9082:	83 04       	cpc	r8, r3
    9084:	c7 04       	cpc	r12, r7
    9086:	10 05       	cpc	r17, r0
    9088:	5d 05       	cpc	r21, r13
    908a:	af 05       	cpc	r26, r15
    908c:	05 06       	cpc	r0, r21
    908e:	61 06       	cpc	r6, r17
    9090:	c2 06       	cpc	r12, r18
    9092:	29 07       	cpc	r18, r25
    9094:	96 07       	cpc	r25, r22
    9096:	09 08       	sbc	r0, r9
    9098:	83 08       	sbc	r8, r3
    909a:	05 09       	sbc	r16, r5
    909c:	8e 09       	sbc	r24, r14
    909e:	20 0a       	sbc	r2, r16
    90a0:	ba 0a       	sbc	r11, r26
    90a2:	5d 0b       	sbc	r21, r29
    90a4:	0a 0c       	add	r0, r10
    90a6:	c1 0c       	add	r12, r1
    90a8:	84 0d       	add	r24, r4
    90aa:	51 0e       	add	r5, r17
    90ac:	2b 0f       	add	r18, r27
    90ae:	12 10       	cpse	r1, r2
    90b0:	07 11       	cpse	r16, r7
    90b2:	0a 12       	cpse	r0, r26
    90b4:	1d 13       	cpse	r17, r29
    90b6:	40 14       	cp	r4, r0
    90b8:	74 15       	cp	r23, r4
    90ba:	ba 16       	cp	r11, r26
    90bc:	14 18       	sub	r1, r4
    90be:	83 19       	sub	r24, r3
    90c0:	07 1b       	sub	r16, r23
    90c2:	a3 1c       	adc	r10, r3
    90c4:	57 1e       	adc	r5, r23
    90c6:	24 20       	and	r2, r4
    90c8:	0e 22       	and	r0, r30
    90ca:	14 24       	eor	r1, r4
    90cc:	39 26       	eor	r3, r25
    90ce:	7f 28       	or	r7, r15
    90d0:	e8 2a       	or	r14, r24
    90d2:	75 2d       	mov	r23, r5
    90d4:	29 30       	cpi	r18, 0x09	; 9
    90d6:	06 33       	cpi	r16, 0x36	; 54
    90d8:	0f 36       	cpi	r16, 0x6F	; 111
    90da:	45 39       	cpi	r20, 0x95	; 149
    90dc:	ad 3c       	cpi	r26, 0xCD	; 205
    90de:	49 40       	sbci	r20, 0x09	; 9
    90e0:	1b 44       	sbci	r17, 0x4B	; 75
    90e2:	28 48       	sbci	r18, 0x88	; 136
    90e4:	73 4c       	sbci	r23, 0xC3	; 195
    90e6:	fe 50       	subi	r31, 0x0E	; 14
    90e8:	cf 55       	subi	r28, 0x5F	; 95
    90ea:	ea 5a       	subi	r30, 0xAA	; 170
    90ec:	51 60       	ori	r21, 0x01	; 1
    90ee:	0c 66       	ori	r16, 0x6C	; 108
    90f0:	1d 6c       	ori	r17, 0xCD	; 205
    90f2:	8b 72       	andi	r24, 0x2B	; 43
    90f4:	5a 79       	andi	r21, 0x9A	; 154
    90f6:	92 80       	ldd	r9, Z+2	; 0x02
    90f8:	37 88       	ldd	r3, Z+23	; 0x17
    90fa:	50 90 e5 98 	lds	r5, 0x98E5
    90fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9100:	9f ab       	std	Y+55, r25	; 0x37
    9102:	d3 b5       	in	r29, 0x23	; 35
    9104:	a3 c0       	rjmp	.+326    	; 0x924c <waves+0x4c>
	...

00009200 <waves>:
    9200:	00 03       	mulsu	r16, r16
    9202:	06 09       	sbc	r16, r6
    9204:	0c 10       	cpse	r0, r12
    9206:	13 16       	cp	r1, r19
    9208:	19 1c       	adc	r1, r9
    920a:	1f 22       	and	r1, r31
    920c:	25 28       	or	r2, r5
    920e:	2b 2e       	mov	r2, r27
    9210:	31 33       	cpi	r19, 0x31	; 49
    9212:	36 39       	cpi	r19, 0x96	; 150
    9214:	3c 3f       	cpi	r19, 0xFC	; 252
    9216:	41 44       	sbci	r20, 0x41	; 65
    9218:	47 49       	sbci	r20, 0x97	; 151
    921a:	4c 4e       	sbci	r20, 0xEC	; 236
    921c:	51 53       	subi	r21, 0x31	; 49
    921e:	55 58       	subi	r21, 0x85	; 133
    9220:	5a 5c       	subi	r21, 0xCA	; 202
    9222:	5e 60       	ori	r21, 0x0E	; 14
    9224:	62 64       	ori	r22, 0x42	; 66
    9226:	66 68       	ori	r22, 0x86	; 134
    9228:	6a 6b       	ori	r22, 0xBA	; 186
    922a:	6d 6f       	ori	r22, 0xFD	; 253
    922c:	70 71       	andi	r23, 0x10	; 16
    922e:	73 74       	andi	r23, 0x43	; 67
    9230:	75 76       	andi	r23, 0x65	; 101
    9232:	78 79       	andi	r23, 0x98	; 152
    9234:	7a 7a       	andi	r23, 0xAA	; 170
    9236:	7b 7c       	andi	r23, 0xCB	; 203
    9238:	7d 7d       	andi	r23, 0xDD	; 221
    923a:	7e 7e       	andi	r23, 0xEE	; 238
    923c:	7e 7f       	andi	r23, 0xFE	; 254
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7e 7e       	andi	r23, 0xEE	; 238
    9246:	7e 7d       	andi	r23, 0xDE	; 222
    9248:	7d 7c       	andi	r23, 0xCD	; 205
    924a:	7b 7a       	andi	r23, 0xAB	; 171
    924c:	7a 79       	andi	r23, 0x9A	; 154
    924e:	78 76       	andi	r23, 0x68	; 104
    9250:	75 74       	andi	r23, 0x45	; 69
    9252:	73 71       	andi	r23, 0x13	; 19
    9254:	70 6f       	ori	r23, 0xF0	; 240
    9256:	6d 6b       	ori	r22, 0xBD	; 189
    9258:	6a 68       	ori	r22, 0x8A	; 138
    925a:	66 64       	ori	r22, 0x46	; 70
    925c:	62 60       	ori	r22, 0x02	; 2
    925e:	5e 5c       	subi	r21, 0xCE	; 206
    9260:	5a 58       	subi	r21, 0x8A	; 138
    9262:	55 53       	subi	r21, 0x35	; 53
    9264:	51 4e       	sbci	r21, 0xE1	; 225
    9266:	4c 49       	sbci	r20, 0x9C	; 156
    9268:	47 44       	sbci	r20, 0x47	; 71
    926a:	41 3f       	cpi	r20, 0xF1	; 241
    926c:	3c 39       	cpi	r19, 0x9C	; 156
    926e:	36 33       	cpi	r19, 0x36	; 54
    9270:	31 2e       	mov	r3, r17
    9272:	2b 28       	or	r2, r11
    9274:	25 22       	and	r2, r21
    9276:	1f 1c       	adc	r1, r15
    9278:	19 16       	cp	r1, r25
    927a:	13 10       	cpse	r1, r3
    927c:	0c 09       	sbc	r16, r12
    927e:	06 03       	mulsu	r16, r22
    9280:	00 fd       	sbrc	r16, 0
    9282:	fa f7       	brpl	.-2      	; 0x9282 <waves+0x82>
    9284:	f4 f0       	brlt	.+60     	; 0x92c2 <waves+0xc2>
    9286:	ed ea       	ldi	r30, 0xAD	; 173
    9288:	e7 e4       	ldi	r30, 0x47	; 71
    928a:	e1 de       	rcall	.-574    	; 0x904e <steptable+0x46>
    928c:	db d8       	rcall	.-3658   	; 0x8444 <EepromBlockExists+0x22>
    928e:	d5 d2       	rcall	.+1450   	; 0x983a <waves+0x63a>
    9290:	cf cd       	rjmp	.-1122   	; 0x8e30 <ProcessMusic+0x392>
    9292:	ca c7       	rjmp	.+3988   	; 0xa228 <LBPrintChar+0x2c>
    9294:	c4 c1       	rjmp	.+904    	; 0x961e <waves+0x41e>
    9296:	bf bc       	out	0x2f, r11	; 47
    9298:	b9 b7       	in	r27, 0x39	; 57
    929a:	b4 b2       	in	r11, 0x14	; 20
    929c:	af ad       	ldd	r26, Y+63	; 0x3f
    929e:	ab a8       	ldd	r10, Y+51	; 0x33
    92a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    92a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    92a4:	9e 9c       	mul	r9, r14
    92a6:	9a 98       	cbi	0x13, 2	; 19
    92a8:	96 95       	lsr	r25
    92aa:	93 91       	.word	0x9193	; ????
    92ac:	90 8f       	std	Z+24, r25	; 0x18
    92ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    92b0:	8b 8a       	std	Y+19, r8	; 0x13
    92b2:	88 87       	std	Y+8, r24	; 0x08
    92b4:	86 86       	std	Z+14, r8	; 0x0e
    92b6:	85 84       	ldd	r8, Z+13	; 0x0d
    92b8:	83 83       	std	Z+3, r24	; 0x03
    92ba:	82 82       	std	Z+2, r8	; 0x02
    92bc:	82 81       	ldd	r24, Z+2	; 0x02
    92be:	81 81       	ldd	r24, Z+1	; 0x01
    92c0:	81 81       	ldd	r24, Z+1	; 0x01
    92c2:	81 81       	ldd	r24, Z+1	; 0x01
    92c4:	82 82       	std	Z+2, r8	; 0x02
    92c6:	82 83       	std	Z+2, r24	; 0x02
    92c8:	83 84       	ldd	r8, Z+11	; 0x0b
    92ca:	85 86       	std	Z+13, r8	; 0x0d
    92cc:	86 87       	std	Z+14, r24	; 0x0e
    92ce:	88 8a       	std	Y+16, r8	; 0x10
    92d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    92d2:	8d 8f       	std	Y+29, r24	; 0x1d
    92d4:	90 91 93 95 	lds	r25, 0x9593
    92d8:	96 98       	cbi	0x12, 6	; 18
    92da:	9a 9c       	mul	r9, r10
    92dc:	9e a0       	ldd	r9, Y+38	; 0x26
    92de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    92e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    92e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    92e4:	af b2       	in	r10, 0x1f	; 31
    92e6:	b4 b7       	in	r27, 0x34	; 52
    92e8:	b9 bc       	out	0x29, r11	; 41
    92ea:	bf c1       	rjmp	.+894    	; 0x966a <waves+0x46a>
    92ec:	c4 c7       	rjmp	.+3976   	; 0xa276 <LBPrintByte+0x2>
    92ee:	ca cd       	rjmp	.-1132   	; 0x8e84 <ProcessMusic+0x3e6>
    92f0:	cf d2       	rcall	.+1438   	; 0x9890 <waves+0x690>
    92f2:	d5 d8       	rcall	.-3670   	; 0x849e <EepromBlockExists+0x7c>
    92f4:	db de       	rcall	.-586    	; 0x90ac <steptable+0xa4>
    92f6:	e1 e4       	ldi	r30, 0x41	; 65
    92f8:	e7 ea       	ldi	r30, 0xA7	; 167
    92fa:	ed f0       	brhs	.+58     	; 0x9336 <waves+0x136>
    92fc:	f4 f7       	brge	.-4      	; 0x92fa <waves+0xfa>
    92fe:	fa fd       	.word	0xfdfa	; ????
    9300:	80 81       	ld	r24, Z
    9302:	82 83       	std	Z+2, r24	; 0x02
    9304:	84 85       	ldd	r24, Z+12	; 0x0c
    9306:	86 87       	std	Z+14, r24	; 0x0e
    9308:	88 89       	ldd	r24, Y+16	; 0x10
    930a:	8a 8b       	std	Y+18, r24	; 0x12
    930c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    930e:	8e 8f       	std	Y+30, r24	; 0x1e
    9310:	90 91 92 93 	lds	r25, 0x9392
    9314:	94 95       	.word	0x9594	; ????
    9316:	96 97       	sbiw	r26, 0x26	; 38
    9318:	98 99       	sbic	0x13, 0	; 19
    931a:	9a 9b       	sbis	0x13, 2	; 19
    931c:	9c 9d       	mul	r25, r12
    931e:	9e 9f       	mul	r25, r30
    9320:	a0 a1       	ldd	r26, Z+32	; 0x20
    9322:	a2 a3       	std	Z+34, r26	; 0x22
    9324:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9326:	a6 a7       	std	Z+46, r26	; 0x2e
    9328:	a8 a9       	ldd	r26, Y+48	; 0x30
    932a:	aa ab       	std	Y+50, r26	; 0x32
    932c:	ac ad       	ldd	r26, Y+60	; 0x3c
    932e:	ae af       	std	Y+62, r26	; 0x3e
    9330:	b0 b1       	in	r27, 0x00	; 0
    9332:	b2 b3       	in	r27, 0x12	; 18
    9334:	b4 b5       	in	r27, 0x24	; 36
    9336:	b6 b7       	in	r27, 0x36	; 54
    9338:	b8 b9       	out	0x08, r27	; 8
    933a:	ba bb       	out	0x1a, r27	; 26
    933c:	bc bd       	out	0x2c, r27	; 44
    933e:	be bf       	out	0x3e, r27	; 62
    9340:	c0 c1       	rjmp	.+896    	; 0x96c2 <waves+0x4c2>
    9342:	c2 c3       	rjmp	.+1924   	; 0x9ac8 <waves+0x8c8>
    9344:	c4 c5       	rjmp	.+2952   	; 0x9ece <DrawMap+0x16>
    9346:	c6 c7       	rjmp	.+3980   	; 0xa2d4 <LBPrintByte+0x60>
    9348:	c8 c9       	rjmp	.-3184   	; 0x86da <PatchCommand02>
    934a:	ca cb       	rjmp	.-2156   	; 0x8ae0 <ProcessMusic+0x42>
    934c:	cc cd       	rjmp	.-1128   	; 0x8ee6 <SetMixerNote+0x4>
    934e:	ce cf       	rjmp	.-100    	; 0x92ec <waves+0xec>
    9350:	d0 d1       	rcall	.+928    	; 0x96f2 <waves+0x4f2>
    9352:	d2 d3       	rcall	.+1956   	; 0x9af8 <waves+0x8f8>
    9354:	d4 d5       	rcall	.+2984   	; 0x9efe <DrawMap+0x46>
    9356:	d6 d7       	rcall	.+4012   	; 0xa304 <LBPrintInt+0x2e>
    9358:	d8 d9       	rcall	.-3152   	; 0x870a <PatchCommand08+0xa>
    935a:	da db       	rcall	.-2124   	; 0x8b10 <ProcessMusic+0x72>
    935c:	dc dd       	rcall	.-1096   	; 0x8f16 <SetMixerWave+0x6>
    935e:	de df       	rcall	.-68     	; 0x931c <waves+0x11c>
    9360:	e0 e1       	ldi	r30, 0x10	; 16
    9362:	e2 e3       	ldi	r30, 0x32	; 50
    9364:	e4 e5       	ldi	r30, 0x54	; 84
    9366:	e6 e7       	ldi	r30, 0x76	; 118
    9368:	e8 e9       	ldi	r30, 0x98	; 152
    936a:	ea eb       	ldi	r30, 0xBA	; 186
    936c:	ec ed       	ldi	r30, 0xDC	; 220
    936e:	ee ef       	ldi	r30, 0xFE	; 254
    9370:	f0 f1       	brcs	.+124    	; 0x93ee <waves+0x1ee>
    9372:	f2 f3       	brmi	.-4      	; 0x9370 <waves+0x170>
    9374:	f4 f5       	brge	.+124    	; 0x93f2 <waves+0x1f2>
    9376:	f6 f7       	brtc	.-4      	; 0x9374 <waves+0x174>
    9378:	f8 f9       	.word	0xf9f8	; ????
    937a:	fa fb       	.word	0xfbfa	; ????
    937c:	fc fd       	.word	0xfdfc	; ????
    937e:	fe ff       	.word	0xfffe	; ????
    9380:	00 01       	movw	r0, r0
    9382:	02 03       	mulsu	r16, r18
    9384:	04 05       	cpc	r16, r4
    9386:	06 07       	cpc	r16, r22
    9388:	08 09       	sbc	r16, r8
    938a:	0a 0b       	sbc	r16, r26
    938c:	0c 0d       	add	r16, r12
    938e:	0e 0f       	add	r16, r30
    9390:	10 11       	cpse	r17, r0
    9392:	12 13       	cpse	r17, r18
    9394:	14 15       	cp	r17, r4
    9396:	16 17       	cp	r17, r22
    9398:	18 19       	sub	r17, r8
    939a:	1a 1b       	sub	r17, r26
    939c:	1c 1d       	adc	r17, r12
    939e:	1e 1f       	adc	r17, r30
    93a0:	20 21       	and	r18, r0
    93a2:	22 23       	and	r18, r18
    93a4:	24 25       	eor	r18, r4
    93a6:	26 27       	eor	r18, r22
    93a8:	28 29       	or	r18, r8
    93aa:	2a 2b       	or	r18, r26
    93ac:	2c 2d       	mov	r18, r12
    93ae:	2e 2f       	mov	r18, r30
    93b0:	30 31       	cpi	r19, 0x10	; 16
    93b2:	32 33       	cpi	r19, 0x32	; 50
    93b4:	34 35       	cpi	r19, 0x54	; 84
    93b6:	36 37       	cpi	r19, 0x76	; 118
    93b8:	38 39       	cpi	r19, 0x98	; 152
    93ba:	3a 3b       	cpi	r19, 0xBA	; 186
    93bc:	3c 3d       	cpi	r19, 0xDC	; 220
    93be:	3e 3f       	cpi	r19, 0xFE	; 254
    93c0:	40 41       	sbci	r20, 0x10	; 16
    93c2:	42 43       	sbci	r20, 0x32	; 50
    93c4:	44 45       	sbci	r20, 0x54	; 84
    93c6:	46 47       	sbci	r20, 0x76	; 118
    93c8:	48 49       	sbci	r20, 0x98	; 152
    93ca:	4a 4b       	sbci	r20, 0xBA	; 186
    93cc:	4c 4d       	sbci	r20, 0xDC	; 220
    93ce:	4e 4f       	sbci	r20, 0xFE	; 254
    93d0:	50 51       	subi	r21, 0x10	; 16
    93d2:	52 53       	subi	r21, 0x32	; 50
    93d4:	54 55       	subi	r21, 0x54	; 84
    93d6:	56 57       	subi	r21, 0x76	; 118
    93d8:	58 59       	subi	r21, 0x98	; 152
    93da:	5a 5b       	subi	r21, 0xBA	; 186
    93dc:	5c 5d       	subi	r21, 0xDC	; 220
    93de:	5e 5f       	subi	r21, 0xFE	; 254
    93e0:	60 61       	ori	r22, 0x10	; 16
    93e2:	62 63       	ori	r22, 0x32	; 50
    93e4:	64 65       	ori	r22, 0x54	; 84
    93e6:	66 67       	ori	r22, 0x76	; 118
    93e8:	68 69       	ori	r22, 0x98	; 152
    93ea:	6a 6b       	ori	r22, 0xBA	; 186
    93ec:	6c 6d       	ori	r22, 0xDC	; 220
    93ee:	6e 6f       	ori	r22, 0xFE	; 254
    93f0:	70 71       	andi	r23, 0x10	; 16
    93f2:	72 73       	andi	r23, 0x32	; 50
    93f4:	74 75       	andi	r23, 0x54	; 84
    93f6:	76 77       	andi	r23, 0x76	; 118
    93f8:	78 79       	andi	r23, 0x98	; 152
    93fa:	7a 7b       	andi	r23, 0xBA	; 186
    93fc:	7c 7d       	andi	r23, 0xDC	; 220
    93fe:	7e 7f       	andi	r23, 0xFE	; 254
    9400:	00 02       	muls	r16, r16
    9402:	04 06       	cpc	r0, r20
    9404:	08 0a       	sbc	r0, r24
    9406:	0c 0e       	add	r0, r28
    9408:	10 12       	cpse	r1, r16
    940a:	14 16       	cp	r1, r20
    940c:	18 1a       	sub	r1, r24
    940e:	1c 1e       	adc	r1, r28
    9410:	20 22       	and	r2, r16
    9412:	24 26       	eor	r2, r20
    9414:	28 2a       	or	r2, r24
    9416:	2c 2e       	mov	r2, r28
    9418:	30 32       	cpi	r19, 0x20	; 32
    941a:	34 36       	cpi	r19, 0x64	; 100
    941c:	38 3a       	cpi	r19, 0xA8	; 168
    941e:	3c 3e       	cpi	r19, 0xEC	; 236
    9420:	40 42       	sbci	r20, 0x20	; 32
    9422:	44 46       	sbci	r20, 0x64	; 100
    9424:	48 4a       	sbci	r20, 0xA8	; 168
    9426:	4c 4e       	sbci	r20, 0xEC	; 236
    9428:	50 52       	subi	r21, 0x20	; 32
    942a:	54 56       	subi	r21, 0x64	; 100
    942c:	58 5a       	subi	r21, 0xA8	; 168
    942e:	5c 5e       	subi	r21, 0xEC	; 236
    9430:	60 62       	ori	r22, 0x20	; 32
    9432:	64 66       	ori	r22, 0x64	; 100
    9434:	68 6a       	ori	r22, 0xA8	; 168
    9436:	6c 6e       	ori	r22, 0xEC	; 236
    9438:	70 72       	andi	r23, 0x20	; 32
    943a:	74 76       	andi	r23, 0x64	; 100
    943c:	78 7a       	andi	r23, 0xA8	; 168
    943e:	7c 7e       	andi	r23, 0xEC	; 236
    9440:	7f 7d       	andi	r23, 0xDF	; 223
    9442:	7b 79       	andi	r23, 0x9B	; 155
    9444:	77 75       	andi	r23, 0x57	; 87
    9446:	73 71       	andi	r23, 0x13	; 19
    9448:	6f 6d       	ori	r22, 0xDF	; 223
    944a:	6b 69       	ori	r22, 0x9B	; 155
    944c:	67 65       	ori	r22, 0x57	; 87
    944e:	63 61       	ori	r22, 0x13	; 19
    9450:	5f 5d       	subi	r21, 0xDF	; 223
    9452:	5b 59       	subi	r21, 0x9B	; 155
    9454:	57 55       	subi	r21, 0x57	; 87
    9456:	53 51       	subi	r21, 0x13	; 19
    9458:	4f 4d       	sbci	r20, 0xDF	; 223
    945a:	4b 49       	sbci	r20, 0x9B	; 155
    945c:	47 45       	sbci	r20, 0x57	; 87
    945e:	43 41       	sbci	r20, 0x13	; 19
    9460:	3f 3d       	cpi	r19, 0xDF	; 223
    9462:	3b 39       	cpi	r19, 0x9B	; 155
    9464:	37 35       	cpi	r19, 0x57	; 87
    9466:	33 31       	cpi	r19, 0x13	; 19
    9468:	2f 2d       	mov	r18, r15
    946a:	2b 29       	or	r18, r11
    946c:	27 25       	eor	r18, r7
    946e:	23 21       	and	r18, r3
    9470:	1f 1d       	adc	r17, r15
    9472:	1b 19       	sub	r17, r11
    9474:	17 15       	cp	r17, r7
    9476:	13 11       	cpse	r17, r3
    9478:	0f 0d       	add	r16, r15
    947a:	0b 09       	sbc	r16, r11
    947c:	07 05       	cpc	r16, r7
    947e:	03 01       	movw	r0, r6
    9480:	ff fd       	.word	0xfdff	; ????
    9482:	fb f9       	.word	0xf9fb	; ????
    9484:	f7 f5       	brid	.+124    	; 0x9502 <waves+0x302>
    9486:	f3 f1       	brvs	.+124    	; 0x9504 <waves+0x304>
    9488:	ef ed       	ldi	r30, 0xDF	; 223
    948a:	eb e9       	ldi	r30, 0x9B	; 155
    948c:	e7 e5       	ldi	r30, 0x57	; 87
    948e:	e3 e1       	ldi	r30, 0x13	; 19
    9490:	df dd       	rcall	.-1090   	; 0x9050 <steptable+0x48>
    9492:	db d9       	rcall	.-3146   	; 0x884a <ReadVarLen+0x24>
    9494:	d7 d5       	rcall	.+2990   	; 0xa044 <FadeIn+0x2>
    9496:	d3 d1       	rcall	.+934    	; 0x983e <waves+0x63e>
    9498:	cf cd       	rjmp	.-1122   	; 0x9038 <steptable+0x30>
    949a:	cb c9       	rjmp	.-3178   	; 0x8832 <ReadVarLen+0xc>
    949c:	c7 c5       	rjmp	.+2958   	; 0xa02c <doFade+0x6>
    949e:	c3 c1       	rjmp	.+902    	; 0x9826 <waves+0x626>
    94a0:	bf bd       	out	0x2f, r27	; 47
    94a2:	bb b9       	out	0x0b, r27	; 11
    94a4:	b7 b5       	in	r27, 0x27	; 39
    94a6:	b3 b1       	in	r27, 0x03	; 3
    94a8:	af ad       	ldd	r26, Y+63	; 0x3f
    94aa:	ab a9       	ldd	r26, Y+51	; 0x33
    94ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    94ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    94b0:	9f 9d       	mul	r25, r15
    94b2:	9b 99       	sbic	0x13, 3	; 19
    94b4:	97 95       	ror	r25
    94b6:	93 91       	.word	0x9193	; ????
    94b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    94ba:	8b 89       	ldd	r24, Y+19	; 0x13
    94bc:	87 85       	ldd	r24, Z+15	; 0x0f
    94be:	83 81       	ldd	r24, Z+3	; 0x03
    94c0:	80 82       	st	Z, r8
    94c2:	84 86       	std	Z+12, r8	; 0x0c
    94c4:	88 8a       	std	Y+16, r8	; 0x10
    94c6:	8c 8e       	std	Y+28, r8	; 0x1c
    94c8:	90 92 94 96 	sts	0x9694, r9
    94cc:	98 9a       	sbi	0x13, 0	; 19
    94ce:	9c 9e       	mul	r9, r28
    94d0:	a0 a2       	std	Z+32, r10	; 0x20
    94d2:	a4 a6       	std	Z+44, r10	; 0x2c
    94d4:	a8 aa       	std	Y+48, r10	; 0x30
    94d6:	ac ae       	std	Y+60, r10	; 0x3c
    94d8:	b0 b2       	in	r11, 0x10	; 16
    94da:	b4 b6       	in	r11, 0x34	; 52
    94dc:	b8 ba       	out	0x18, r11	; 24
    94de:	bc be       	out	0x3c, r11	; 60
    94e0:	c0 c2       	rjmp	.+1408   	; 0x9a62 <waves+0x862>
    94e2:	c4 c6       	rjmp	.+3464   	; 0xa26c <LBPrint+0x30>
    94e4:	c8 ca       	rjmp	.-2672   	; 0x8a76 <TriggerNote+0x58>
    94e6:	cc ce       	rjmp	.-616    	; 0x9280 <waves+0x80>
    94e8:	d0 d2       	rcall	.+1440   	; 0x9a8a <waves+0x88a>
    94ea:	d4 d6       	rcall	.+3496   	; 0xa294 <LBPrintByte+0x20>
    94ec:	d8 da       	rcall	.-2640   	; 0x8a9e <ProcessMusic>
    94ee:	dc de       	rcall	.-584    	; 0x92a8 <waves+0xa8>
    94f0:	e0 e2       	ldi	r30, 0x20	; 32
    94f2:	e4 e6       	ldi	r30, 0x64	; 100
    94f4:	e8 ea       	ldi	r30, 0xA8	; 168
    94f6:	ec ee       	ldi	r30, 0xEC	; 236
    94f8:	f0 f2       	brcs	.-68     	; 0x94b6 <waves+0x2b6>
    94fa:	f4 f6       	brge	.-68     	; 0x94b8 <waves+0x2b8>
    94fc:	f8 fa       	.word	0xfaf8	; ????
    94fe:	fc fe       	.word	0xfefc	; ????
    9500:	7f 7f       	andi	r23, 0xFF	; 255
    9502:	7f 7f       	andi	r23, 0xFF	; 255
    9504:	7f 7f       	andi	r23, 0xFF	; 255
    9506:	7f 7f       	andi	r23, 0xFF	; 255
    9508:	7f 7f       	andi	r23, 0xFF	; 255
    950a:	7f 7f       	andi	r23, 0xFF	; 255
    950c:	7f 7f       	andi	r23, 0xFF	; 255
    950e:	7f 7f       	andi	r23, 0xFF	; 255
    9510:	7f 7f       	andi	r23, 0xFF	; 255
    9512:	7f 7f       	andi	r23, 0xFF	; 255
    9514:	7f 7f       	andi	r23, 0xFF	; 255
    9516:	7f 7f       	andi	r23, 0xFF	; 255
    9518:	7f 7f       	andi	r23, 0xFF	; 255
    951a:	7f 7f       	andi	r23, 0xFF	; 255
    951c:	7f 7f       	andi	r23, 0xFF	; 255
    951e:	7f 7f       	andi	r23, 0xFF	; 255
    9520:	7f 7f       	andi	r23, 0xFF	; 255
    9522:	7f 7f       	andi	r23, 0xFF	; 255
    9524:	7f 7f       	andi	r23, 0xFF	; 255
    9526:	7f 7f       	andi	r23, 0xFF	; 255
    9528:	7f 7f       	andi	r23, 0xFF	; 255
    952a:	7f 7f       	andi	r23, 0xFF	; 255
    952c:	7f 7f       	andi	r23, 0xFF	; 255
    952e:	7f 7f       	andi	r23, 0xFF	; 255
    9530:	7f 7f       	andi	r23, 0xFF	; 255
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	80 80       	ld	r8, Z
    9542:	80 80       	ld	r8, Z
    9544:	80 80       	ld	r8, Z
    9546:	80 80       	ld	r8, Z
    9548:	80 80       	ld	r8, Z
    954a:	80 80       	ld	r8, Z
    954c:	80 80       	ld	r8, Z
    954e:	80 80       	ld	r8, Z
    9550:	80 80       	ld	r8, Z
    9552:	80 80       	ld	r8, Z
    9554:	80 80       	ld	r8, Z
    9556:	80 80       	ld	r8, Z
    9558:	80 80       	ld	r8, Z
    955a:	80 80       	ld	r8, Z
    955c:	80 80       	ld	r8, Z
    955e:	80 80       	ld	r8, Z
    9560:	80 80       	ld	r8, Z
    9562:	80 80       	ld	r8, Z
    9564:	80 80       	ld	r8, Z
    9566:	80 80       	ld	r8, Z
    9568:	80 80       	ld	r8, Z
    956a:	80 80       	ld	r8, Z
    956c:	80 80       	ld	r8, Z
    956e:	80 80       	ld	r8, Z
    9570:	80 80       	ld	r8, Z
    9572:	80 80       	ld	r8, Z
    9574:	80 80       	ld	r8, Z
    9576:	80 80       	ld	r8, Z
    9578:	80 80       	ld	r8, Z
    957a:	80 80       	ld	r8, Z
    957c:	80 80       	ld	r8, Z
    957e:	80 80       	ld	r8, Z
    9580:	80 80       	ld	r8, Z
    9582:	80 80       	ld	r8, Z
    9584:	80 80       	ld	r8, Z
    9586:	80 80       	ld	r8, Z
    9588:	80 80       	ld	r8, Z
    958a:	80 80       	ld	r8, Z
    958c:	80 80       	ld	r8, Z
    958e:	80 80       	ld	r8, Z
    9590:	80 80       	ld	r8, Z
    9592:	80 80       	ld	r8, Z
    9594:	80 80       	ld	r8, Z
    9596:	80 80       	ld	r8, Z
    9598:	80 80       	ld	r8, Z
    959a:	80 80       	ld	r8, Z
    959c:	80 80       	ld	r8, Z
    959e:	80 80       	ld	r8, Z
    95a0:	80 80       	ld	r8, Z
    95a2:	80 80       	ld	r8, Z
    95a4:	80 80       	ld	r8, Z
    95a6:	80 80       	ld	r8, Z
    95a8:	80 80       	ld	r8, Z
    95aa:	80 80       	ld	r8, Z
    95ac:	80 80       	ld	r8, Z
    95ae:	80 80       	ld	r8, Z
    95b0:	80 80       	ld	r8, Z
    95b2:	80 80       	ld	r8, Z
    95b4:	80 80       	ld	r8, Z
    95b6:	80 80       	ld	r8, Z
    95b8:	80 80       	ld	r8, Z
    95ba:	80 80       	ld	r8, Z
    95bc:	80 80       	ld	r8, Z
    95be:	80 80       	ld	r8, Z
    95c0:	80 80       	ld	r8, Z
    95c2:	80 80       	ld	r8, Z
    95c4:	80 80       	ld	r8, Z
    95c6:	80 80       	ld	r8, Z
    95c8:	80 80       	ld	r8, Z
    95ca:	80 80       	ld	r8, Z
    95cc:	80 80       	ld	r8, Z
    95ce:	80 80       	ld	r8, Z
    95d0:	80 80       	ld	r8, Z
    95d2:	80 80       	ld	r8, Z
    95d4:	80 80       	ld	r8, Z
    95d6:	80 80       	ld	r8, Z
    95d8:	80 80       	ld	r8, Z
    95da:	80 80       	ld	r8, Z
    95dc:	80 80       	ld	r8, Z
    95de:	80 80       	ld	r8, Z
    95e0:	80 80       	ld	r8, Z
    95e2:	80 80       	ld	r8, Z
    95e4:	80 80       	ld	r8, Z
    95e6:	80 80       	ld	r8, Z
    95e8:	80 80       	ld	r8, Z
    95ea:	80 80       	ld	r8, Z
    95ec:	80 80       	ld	r8, Z
    95ee:	80 80       	ld	r8, Z
    95f0:	80 80       	ld	r8, Z
    95f2:	80 80       	ld	r8, Z
    95f4:	80 80       	ld	r8, Z
    95f6:	80 80       	ld	r8, Z
    95f8:	80 80       	ld	r8, Z
    95fa:	80 80       	ld	r8, Z
    95fc:	80 80       	ld	r8, Z
    95fe:	80 80       	ld	r8, Z
    9600:	7f 7f       	andi	r23, 0xFF	; 255
    9602:	7f 7f       	andi	r23, 0xFF	; 255
    9604:	7f 7f       	andi	r23, 0xFF	; 255
    9606:	7f 7f       	andi	r23, 0xFF	; 255
    9608:	7f 7f       	andi	r23, 0xFF	; 255
    960a:	7f 7f       	andi	r23, 0xFF	; 255
    960c:	7f 7f       	andi	r23, 0xFF	; 255
    960e:	7f 7f       	andi	r23, 0xFF	; 255
    9610:	7f 7f       	andi	r23, 0xFF	; 255
    9612:	7f 7f       	andi	r23, 0xFF	; 255
    9614:	7f 7f       	andi	r23, 0xFF	; 255
    9616:	7f 7f       	andi	r23, 0xFF	; 255
    9618:	7f 7f       	andi	r23, 0xFF	; 255
    961a:	7f 7f       	andi	r23, 0xFF	; 255
    961c:	7f 7f       	andi	r23, 0xFF	; 255
    961e:	7f 7f       	andi	r23, 0xFF	; 255
    9620:	7f 7f       	andi	r23, 0xFF	; 255
    9622:	7f 7f       	andi	r23, 0xFF	; 255
    9624:	7f 7f       	andi	r23, 0xFF	; 255
    9626:	7f 7f       	andi	r23, 0xFF	; 255
    9628:	7f 7f       	andi	r23, 0xFF	; 255
    962a:	7f 7f       	andi	r23, 0xFF	; 255
    962c:	7f 7f       	andi	r23, 0xFF	; 255
    962e:	7f 7f       	andi	r23, 0xFF	; 255
    9630:	7f 7f       	andi	r23, 0xFF	; 255
    9632:	7f 7f       	andi	r23, 0xFF	; 255
    9634:	7f 7f       	andi	r23, 0xFF	; 255
    9636:	7f 7f       	andi	r23, 0xFF	; 255
    9638:	7f 7f       	andi	r23, 0xFF	; 255
    963a:	7f 7f       	andi	r23, 0xFF	; 255
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7f 7f       	andi	r23, 0xFF	; 255
    9648:	7f 7f       	andi	r23, 0xFF	; 255
    964a:	7f 7f       	andi	r23, 0xFF	; 255
    964c:	7f 7f       	andi	r23, 0xFF	; 255
    964e:	7f 7f       	andi	r23, 0xFF	; 255
    9650:	7f 7f       	andi	r23, 0xFF	; 255
    9652:	7f 7f       	andi	r23, 0xFF	; 255
    9654:	7f 7f       	andi	r23, 0xFF	; 255
    9656:	7f 7f       	andi	r23, 0xFF	; 255
    9658:	7f 7f       	andi	r23, 0xFF	; 255
    965a:	7f 7f       	andi	r23, 0xFF	; 255
    965c:	7f 7f       	andi	r23, 0xFF	; 255
    965e:	7f 7f       	andi	r23, 0xFF	; 255
    9660:	7f 7f       	andi	r23, 0xFF	; 255
    9662:	7f 7f       	andi	r23, 0xFF	; 255
    9664:	7f 7f       	andi	r23, 0xFF	; 255
    9666:	7f 7f       	andi	r23, 0xFF	; 255
    9668:	7f 7f       	andi	r23, 0xFF	; 255
    966a:	7f 7f       	andi	r23, 0xFF	; 255
    966c:	7f 7f       	andi	r23, 0xFF	; 255
    966e:	7f 7f       	andi	r23, 0xFF	; 255
    9670:	7f 7f       	andi	r23, 0xFF	; 255
    9672:	7f 7f       	andi	r23, 0xFF	; 255
    9674:	7f 7f       	andi	r23, 0xFF	; 255
    9676:	7f 7f       	andi	r23, 0xFF	; 255
    9678:	7f 7f       	andi	r23, 0xFF	; 255
    967a:	7f 7f       	andi	r23, 0xFF	; 255
    967c:	7f 7f       	andi	r23, 0xFF	; 255
    967e:	7f 7f       	andi	r23, 0xFF	; 255
    9680:	80 80       	ld	r8, Z
    9682:	80 80       	ld	r8, Z
    9684:	80 80       	ld	r8, Z
    9686:	80 80       	ld	r8, Z
    9688:	80 80       	ld	r8, Z
    968a:	80 80       	ld	r8, Z
    968c:	80 80       	ld	r8, Z
    968e:	80 80       	ld	r8, Z
    9690:	80 80       	ld	r8, Z
    9692:	80 80       	ld	r8, Z
    9694:	80 80       	ld	r8, Z
    9696:	80 80       	ld	r8, Z
    9698:	80 80       	ld	r8, Z
    969a:	80 80       	ld	r8, Z
    969c:	80 80       	ld	r8, Z
    969e:	80 80       	ld	r8, Z
    96a0:	80 80       	ld	r8, Z
    96a2:	80 80       	ld	r8, Z
    96a4:	80 80       	ld	r8, Z
    96a6:	80 80       	ld	r8, Z
    96a8:	80 80       	ld	r8, Z
    96aa:	80 80       	ld	r8, Z
    96ac:	80 80       	ld	r8, Z
    96ae:	80 80       	ld	r8, Z
    96b0:	80 80       	ld	r8, Z
    96b2:	80 80       	ld	r8, Z
    96b4:	80 80       	ld	r8, Z
    96b6:	80 80       	ld	r8, Z
    96b8:	80 80       	ld	r8, Z
    96ba:	80 80       	ld	r8, Z
    96bc:	80 80       	ld	r8, Z
    96be:	80 80       	ld	r8, Z
    96c0:	80 80       	ld	r8, Z
    96c2:	80 80       	ld	r8, Z
    96c4:	80 80       	ld	r8, Z
    96c6:	80 80       	ld	r8, Z
    96c8:	80 80       	ld	r8, Z
    96ca:	80 80       	ld	r8, Z
    96cc:	80 80       	ld	r8, Z
    96ce:	80 80       	ld	r8, Z
    96d0:	80 80       	ld	r8, Z
    96d2:	80 80       	ld	r8, Z
    96d4:	80 80       	ld	r8, Z
    96d6:	80 80       	ld	r8, Z
    96d8:	80 80       	ld	r8, Z
    96da:	80 80       	ld	r8, Z
    96dc:	80 80       	ld	r8, Z
    96de:	80 80       	ld	r8, Z
    96e0:	80 80       	ld	r8, Z
    96e2:	80 80       	ld	r8, Z
    96e4:	80 80       	ld	r8, Z
    96e6:	80 80       	ld	r8, Z
    96e8:	80 80       	ld	r8, Z
    96ea:	80 80       	ld	r8, Z
    96ec:	80 80       	ld	r8, Z
    96ee:	80 80       	ld	r8, Z
    96f0:	80 80       	ld	r8, Z
    96f2:	80 80       	ld	r8, Z
    96f4:	80 80       	ld	r8, Z
    96f6:	80 80       	ld	r8, Z
    96f8:	80 80       	ld	r8, Z
    96fa:	80 80       	ld	r8, Z
    96fc:	80 80       	ld	r8, Z
    96fe:	80 80       	ld	r8, Z
    9700:	7f 7f       	andi	r23, 0xFF	; 255
    9702:	7f 7f       	andi	r23, 0xFF	; 255
    9704:	7f 7f       	andi	r23, 0xFF	; 255
    9706:	7f 7f       	andi	r23, 0xFF	; 255
    9708:	7f 7f       	andi	r23, 0xFF	; 255
    970a:	7f 7f       	andi	r23, 0xFF	; 255
    970c:	7f 7f       	andi	r23, 0xFF	; 255
    970e:	7f 7f       	andi	r23, 0xFF	; 255
    9710:	7f 7f       	andi	r23, 0xFF	; 255
    9712:	7f 7f       	andi	r23, 0xFF	; 255
    9714:	7f 7f       	andi	r23, 0xFF	; 255
    9716:	7f 7f       	andi	r23, 0xFF	; 255
    9718:	7f 7f       	andi	r23, 0xFF	; 255
    971a:	7f 7f       	andi	r23, 0xFF	; 255
    971c:	7f 7f       	andi	r23, 0xFF	; 255
    971e:	7f 7f       	andi	r23, 0xFF	; 255
    9720:	7f 7f       	andi	r23, 0xFF	; 255
    9722:	7f 7f       	andi	r23, 0xFF	; 255
    9724:	7f 7f       	andi	r23, 0xFF	; 255
    9726:	7f 7f       	andi	r23, 0xFF	; 255
    9728:	7f 7f       	andi	r23, 0xFF	; 255
    972a:	7f 7f       	andi	r23, 0xFF	; 255
    972c:	7f 7f       	andi	r23, 0xFF	; 255
    972e:	7f 7f       	andi	r23, 0xFF	; 255
    9730:	7f 7f       	andi	r23, 0xFF	; 255
    9732:	7f 7f       	andi	r23, 0xFF	; 255
    9734:	7f 7f       	andi	r23, 0xFF	; 255
    9736:	7f 7f       	andi	r23, 0xFF	; 255
    9738:	7f 7f       	andi	r23, 0xFF	; 255
    973a:	7f 7f       	andi	r23, 0xFF	; 255
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7f 7f       	andi	r23, 0xFF	; 255
    9746:	7f 7f       	andi	r23, 0xFF	; 255
    9748:	7f 7f       	andi	r23, 0xFF	; 255
    974a:	7f 7f       	andi	r23, 0xFF	; 255
    974c:	7f 7f       	andi	r23, 0xFF	; 255
    974e:	7f 7f       	andi	r23, 0xFF	; 255
    9750:	7f 7f       	andi	r23, 0xFF	; 255
    9752:	7f 7f       	andi	r23, 0xFF	; 255
    9754:	7f 7f       	andi	r23, 0xFF	; 255
    9756:	7f 7f       	andi	r23, 0xFF	; 255
    9758:	7f 7f       	andi	r23, 0xFF	; 255
    975a:	7f 7f       	andi	r23, 0xFF	; 255
    975c:	7f 7f       	andi	r23, 0xFF	; 255
    975e:	7f 7f       	andi	r23, 0xFF	; 255
    9760:	7f 7f       	andi	r23, 0xFF	; 255
    9762:	7f 7f       	andi	r23, 0xFF	; 255
    9764:	7f 7f       	andi	r23, 0xFF	; 255
    9766:	7f 7f       	andi	r23, 0xFF	; 255
    9768:	7f 7f       	andi	r23, 0xFF	; 255
    976a:	7f 7f       	andi	r23, 0xFF	; 255
    976c:	7f 7f       	andi	r23, 0xFF	; 255
    976e:	7f 7f       	andi	r23, 0xFF	; 255
    9770:	7f 7f       	andi	r23, 0xFF	; 255
    9772:	7f 7f       	andi	r23, 0xFF	; 255
    9774:	7f 7f       	andi	r23, 0xFF	; 255
    9776:	7f 7f       	andi	r23, 0xFF	; 255
    9778:	7f 7f       	andi	r23, 0xFF	; 255
    977a:	7f 7f       	andi	r23, 0xFF	; 255
    977c:	7f 7f       	andi	r23, 0xFF	; 255
    977e:	7f 7f       	andi	r23, 0xFF	; 255
    9780:	7f 7f       	andi	r23, 0xFF	; 255
    9782:	7f 7f       	andi	r23, 0xFF	; 255
    9784:	7f 7f       	andi	r23, 0xFF	; 255
    9786:	7f 7f       	andi	r23, 0xFF	; 255
    9788:	7f 7f       	andi	r23, 0xFF	; 255
    978a:	7f 7f       	andi	r23, 0xFF	; 255
    978c:	7f 7f       	andi	r23, 0xFF	; 255
    978e:	7f 7f       	andi	r23, 0xFF	; 255
    9790:	7f 7f       	andi	r23, 0xFF	; 255
    9792:	7f 7f       	andi	r23, 0xFF	; 255
    9794:	7f 7f       	andi	r23, 0xFF	; 255
    9796:	7f 7f       	andi	r23, 0xFF	; 255
    9798:	7f 7f       	andi	r23, 0xFF	; 255
    979a:	7f 7f       	andi	r23, 0xFF	; 255
    979c:	7f 7f       	andi	r23, 0xFF	; 255
    979e:	7f 7f       	andi	r23, 0xFF	; 255
    97a0:	7f 7f       	andi	r23, 0xFF	; 255
    97a2:	7f 7f       	andi	r23, 0xFF	; 255
    97a4:	7f 7f       	andi	r23, 0xFF	; 255
    97a6:	7f 7f       	andi	r23, 0xFF	; 255
    97a8:	7f 7f       	andi	r23, 0xFF	; 255
    97aa:	7f 7f       	andi	r23, 0xFF	; 255
    97ac:	7f 7f       	andi	r23, 0xFF	; 255
    97ae:	7f 7f       	andi	r23, 0xFF	; 255
    97b0:	7f 7f       	andi	r23, 0xFF	; 255
    97b2:	7f 7f       	andi	r23, 0xFF	; 255
    97b4:	7f 7f       	andi	r23, 0xFF	; 255
    97b6:	7f 7f       	andi	r23, 0xFF	; 255
    97b8:	7f 7f       	andi	r23, 0xFF	; 255
    97ba:	7f 7f       	andi	r23, 0xFF	; 255
    97bc:	7f 7f       	andi	r23, 0xFF	; 255
    97be:	7f 7f       	andi	r23, 0xFF	; 255
    97c0:	80 80       	ld	r8, Z
    97c2:	80 80       	ld	r8, Z
    97c4:	80 80       	ld	r8, Z
    97c6:	80 80       	ld	r8, Z
    97c8:	80 80       	ld	r8, Z
    97ca:	80 80       	ld	r8, Z
    97cc:	80 80       	ld	r8, Z
    97ce:	80 80       	ld	r8, Z
    97d0:	80 80       	ld	r8, Z
    97d2:	80 80       	ld	r8, Z
    97d4:	80 80       	ld	r8, Z
    97d6:	80 80       	ld	r8, Z
    97d8:	80 80       	ld	r8, Z
    97da:	80 80       	ld	r8, Z
    97dc:	80 80       	ld	r8, Z
    97de:	80 80       	ld	r8, Z
    97e0:	80 80       	ld	r8, Z
    97e2:	80 80       	ld	r8, Z
    97e4:	80 80       	ld	r8, Z
    97e6:	80 80       	ld	r8, Z
    97e8:	80 80       	ld	r8, Z
    97ea:	80 80       	ld	r8, Z
    97ec:	80 80       	ld	r8, Z
    97ee:	80 80       	ld	r8, Z
    97f0:	80 80       	ld	r8, Z
    97f2:	80 80       	ld	r8, Z
    97f4:	80 80       	ld	r8, Z
    97f6:	80 80       	ld	r8, Z
    97f8:	80 80       	ld	r8, Z
    97fa:	80 80       	ld	r8, Z
    97fc:	80 80       	ld	r8, Z
    97fe:	80 80       	ld	r8, Z
    9800:	03 09       	sbc	r16, r3
    9802:	13 1e       	adc	r1, r19
    9804:	28 31       	cpi	r18, 0x18	; 24
    9806:	3a 40       	sbci	r19, 0x0A	; 10
    9808:	46 4c       	sbci	r20, 0xC6	; 198
    980a:	50 54       	subi	r21, 0x40	; 64
    980c:	58 5b       	subi	r21, 0xB8	; 184
    980e:	5e 61       	ori	r21, 0x1E	; 30
    9810:	63 65       	ori	r22, 0x53	; 83
    9812:	67 69       	ori	r22, 0x97	; 151
    9814:	6b 6c       	ori	r22, 0xCB	; 203
    9816:	6e 6f       	ori	r22, 0xFE	; 254
    9818:	70 71       	andi	r23, 0x10	; 16
    981a:	72 73       	andi	r23, 0x32	; 50
    981c:	74 75       	andi	r23, 0x54	; 84
    981e:	76 77       	andi	r23, 0x76	; 118
    9820:	77 78       	andi	r23, 0x87	; 135
    9822:	79 79       	andi	r23, 0x99	; 153
    9824:	7a 7a       	andi	r23, 0xAA	; 170
    9826:	7b 7b       	andi	r23, 0xBB	; 187
    9828:	7c 7c       	andi	r23, 0xCC	; 204
    982a:	7c 7d       	andi	r23, 0xDC	; 220
    982c:	7d 7d       	andi	r23, 0xDD	; 221
    982e:	7e 7e       	andi	r23, 0xEE	; 238
    9830:	7e 7e       	andi	r23, 0xEE	; 238
    9832:	7f 7f       	andi	r23, 0xFF	; 255
    9834:	7f 7f       	andi	r23, 0xFF	; 255
    9836:	7f 7f       	andi	r23, 0xFF	; 255
    9838:	7f 7f       	andi	r23, 0xFF	; 255
    983a:	7f 7f       	andi	r23, 0xFF	; 255
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7f 7f       	andi	r23, 0xFF	; 255
    9848:	7f 7f       	andi	r23, 0xFF	; 255
    984a:	7f 7f       	andi	r23, 0xFF	; 255
    984c:	7f 7e       	andi	r23, 0xEF	; 239
    984e:	7e 7e       	andi	r23, 0xEE	; 238
    9850:	7e 7d       	andi	r23, 0xDE	; 222
    9852:	7d 7d       	andi	r23, 0xDD	; 221
    9854:	7c 7c       	andi	r23, 0xCC	; 204
    9856:	7c 7b       	andi	r23, 0xBC	; 188
    9858:	7b 7a       	andi	r23, 0xAB	; 171
    985a:	7a 79       	andi	r23, 0x9A	; 154
    985c:	79 78       	andi	r23, 0x89	; 137
    985e:	77 77       	andi	r23, 0x77	; 119
    9860:	76 75       	andi	r23, 0x56	; 86
    9862:	74 73       	andi	r23, 0x34	; 52
    9864:	72 71       	andi	r23, 0x12	; 18
    9866:	70 6f       	ori	r23, 0xF0	; 240
    9868:	6e 6c       	ori	r22, 0xCE	; 206
    986a:	6b 69       	ori	r22, 0x9B	; 155
    986c:	67 65       	ori	r22, 0x57	; 87
    986e:	63 61       	ori	r22, 0x13	; 19
    9870:	5e 5b       	subi	r21, 0xBE	; 190
    9872:	58 54       	subi	r21, 0x48	; 72
    9874:	50 4c       	sbci	r21, 0xC0	; 192
    9876:	46 40       	sbci	r20, 0x06	; 6
    9878:	3a 31       	cpi	r19, 0x1A	; 26
    987a:	28 1e       	adc	r2, r24
    987c:	13 09       	sbc	r17, r3
    987e:	03 00       	.word	0x0003	; ????
    9880:	c6 cc       	rjmp	.-1652   	; 0x920e <waves+0xe>
    9882:	d5 db       	rcall	.-2134   	; 0x902e <steptable+0x26>
    9884:	df e3       	ldi	r29, 0x3F	; 63
    9886:	e5 e7       	ldi	r30, 0x75	; 117
    9888:	e9 ea       	ldi	r30, 0xA9	; 169
    988a:	eb ec       	ldi	r30, 0xCB	; 203
    988c:	ed ee       	ldi	r30, 0xED	; 237
    988e:	ef ef       	ldi	r30, 0xFF	; 255
    9890:	f0 f0       	brcs	.+60     	; 0x98ce <waves+0x6ce>
    9892:	f0 f1       	brcs	.+124    	; 0x9910 <waves+0x710>
    9894:	f1 f1       	breq	.+124    	; 0x9912 <waves+0x712>
    9896:	f1 f2       	breq	.-68     	; 0x9854 <waves+0x654>
    9898:	f2 f2       	brmi	.-68     	; 0x9856 <waves+0x656>
    989a:	f2 f2       	brmi	.-68     	; 0x9858 <waves+0x658>
    989c:	f2 f2       	brmi	.-68     	; 0x985a <waves+0x65a>
    989e:	f2 f3       	brmi	.-4      	; 0x989c <waves+0x69c>
    98a0:	f3 f3       	brvs	.-4      	; 0x989e <waves+0x69e>
    98a2:	f3 f3       	brvs	.-4      	; 0x98a0 <waves+0x6a0>
    98a4:	f3 f3       	brvs	.-4      	; 0x98a2 <waves+0x6a2>
    98a6:	f3 f3       	brvs	.-4      	; 0x98a4 <waves+0x6a4>
    98a8:	f3 f3       	brvs	.-4      	; 0x98a6 <waves+0x6a6>
    98aa:	f3 f3       	brvs	.-4      	; 0x98a8 <waves+0x6a8>
    98ac:	f3 f3       	brvs	.-4      	; 0x98aa <waves+0x6aa>
    98ae:	f3 f3       	brvs	.-4      	; 0x98ac <waves+0x6ac>
    98b0:	f3 f3       	brvs	.-4      	; 0x98ae <waves+0x6ae>
    98b2:	f3 f3       	brvs	.-4      	; 0x98b0 <waves+0x6b0>
    98b4:	f3 f3       	brvs	.-4      	; 0x98b2 <waves+0x6b2>
    98b6:	f3 f3       	brvs	.-4      	; 0x98b4 <waves+0x6b4>
    98b8:	f3 f3       	brvs	.-4      	; 0x98b6 <waves+0x6b6>
    98ba:	f3 f3       	brvs	.-4      	; 0x98b8 <waves+0x6b8>
    98bc:	f3 f3       	brvs	.-4      	; 0x98ba <waves+0x6ba>
    98be:	f3 f3       	brvs	.-4      	; 0x98bc <waves+0x6bc>
    98c0:	f3 f3       	brvs	.-4      	; 0x98be <waves+0x6be>
    98c2:	f3 f3       	brvs	.-4      	; 0x98c0 <waves+0x6c0>
    98c4:	f3 f3       	brvs	.-4      	; 0x98c2 <waves+0x6c2>
    98c6:	f3 f3       	brvs	.-4      	; 0x98c4 <waves+0x6c4>
    98c8:	f3 f3       	brvs	.-4      	; 0x98c6 <waves+0x6c6>
    98ca:	f3 f3       	brvs	.-4      	; 0x98c8 <waves+0x6c8>
    98cc:	f3 f3       	brvs	.-4      	; 0x98ca <waves+0x6ca>
    98ce:	f3 f3       	brvs	.-4      	; 0x98cc <waves+0x6cc>
    98d0:	f3 f3       	brvs	.-4      	; 0x98ce <waves+0x6ce>
    98d2:	f3 f3       	brvs	.-4      	; 0x98d0 <waves+0x6d0>
    98d4:	f3 f3       	brvs	.-4      	; 0x98d2 <waves+0x6d2>
    98d6:	f3 f3       	brvs	.-4      	; 0x98d4 <waves+0x6d4>
    98d8:	f3 f3       	brvs	.-4      	; 0x98d6 <waves+0x6d6>
    98da:	f3 f3       	brvs	.-4      	; 0x98d8 <waves+0x6d8>
    98dc:	f3 f3       	brvs	.-4      	; 0x98da <waves+0x6da>
    98de:	f3 f3       	brvs	.-4      	; 0x98dc <waves+0x6dc>
    98e0:	f2 f2       	brmi	.-68     	; 0x989e <waves+0x69e>
    98e2:	f2 f2       	brmi	.-68     	; 0x98a0 <waves+0x6a0>
    98e4:	f2 f2       	brmi	.-68     	; 0x98a2 <waves+0x6a2>
    98e6:	f2 f2       	brmi	.-68     	; 0x98a4 <waves+0x6a4>
    98e8:	f1 f1       	breq	.+124    	; 0x9966 <waves+0x766>
    98ea:	f1 f1       	breq	.+124    	; 0x9968 <waves+0x768>
    98ec:	f0 f0       	brcs	.+60     	; 0x992a <waves+0x72a>
    98ee:	f0 ef       	ldi	r31, 0xF0	; 240
    98f0:	ef ee       	ldi	r30, 0xEF	; 239
    98f2:	ed ec       	ldi	r30, 0xCD	; 205
    98f4:	eb ea       	ldi	r30, 0xAB	; 171
    98f6:	e9 e7       	ldi	r30, 0x79	; 121
    98f8:	e5 e3       	ldi	r30, 0x35	; 53
    98fa:	df db       	rcall	.-2114   	; 0x90ba <steptable+0xb2>
    98fc:	d5 cc       	rjmp	.-1622   	; 0x92a8 <waves+0xa8>
    98fe:	c6 00       	.word	0x00c6	; ????
    9900:	00 28       	or	r0, r0
    9902:	3d 42       	sbci	r19, 0x2D	; 45
    9904:	30 2d       	mov	r19, r0
    9906:	2c 2b       	or	r18, r28
    9908:	2c 2d       	mov	r18, r12
    990a:	2e 2f       	mov	r18, r30
    990c:	30 32       	cpi	r19, 0x20	; 32
    990e:	33 35       	cpi	r19, 0x53	; 83
    9910:	37 39       	cpi	r19, 0x97	; 151
    9912:	3b 3d       	cpi	r19, 0xDB	; 219
    9914:	3f 41       	sbci	r19, 0x1F	; 31
    9916:	43 45       	sbci	r20, 0x53	; 83
    9918:	48 4a       	sbci	r20, 0xA8	; 168
    991a:	4c 4e       	sbci	r20, 0xEC	; 236
    991c:	50 53       	subi	r21, 0x30	; 48
    991e:	55 57       	subi	r21, 0x75	; 117
    9920:	59 5b       	subi	r21, 0xB9	; 185
    9922:	5d 5f       	subi	r21, 0xFD	; 253
    9924:	61 63       	ori	r22, 0x31	; 49
    9926:	65 67       	ori	r22, 0x75	; 117
    9928:	69 6b       	ori	r22, 0xB9	; 185
    992a:	6c 6e       	ori	r22, 0xEC	; 236
    992c:	70 71       	andi	r23, 0x10	; 16
    992e:	73 74       	andi	r23, 0x43	; 67
    9930:	75 77       	andi	r23, 0x75	; 117
    9932:	78 79       	andi	r23, 0x98	; 152
    9934:	7a 7b       	andi	r23, 0xBA	; 186
    9936:	7c 7d       	andi	r23, 0xDC	; 220
    9938:	7d 7e       	andi	r23, 0xED	; 237
    993a:	7e 7f       	andi	r23, 0xFE	; 254
    993c:	7f 7f       	andi	r23, 0xFF	; 255
    993e:	7f 7f       	andi	r23, 0xFF	; 255
    9940:	7f 7f       	andi	r23, 0xFF	; 255
    9942:	7f 7f       	andi	r23, 0xFF	; 255
    9944:	7f 7f       	andi	r23, 0xFF	; 255
    9946:	7e 7e       	andi	r23, 0xEE	; 238
    9948:	7d 7d       	andi	r23, 0xDD	; 221
    994a:	7c 7b       	andi	r23, 0xBC	; 188
    994c:	7a 79       	andi	r23, 0x9A	; 154
    994e:	78 77       	andi	r23, 0x78	; 120
    9950:	75 74       	andi	r23, 0x45	; 69
    9952:	73 71       	andi	r23, 0x13	; 19
    9954:	70 6e       	ori	r23, 0xE0	; 224
    9956:	6c 6b       	ori	r22, 0xBC	; 188
    9958:	69 67       	ori	r22, 0x79	; 121
    995a:	65 63       	ori	r22, 0x35	; 53
    995c:	61 5f       	subi	r22, 0xF1	; 241
    995e:	5d 5b       	subi	r21, 0xBD	; 189
    9960:	59 57       	subi	r21, 0x79	; 121
    9962:	55 53       	subi	r21, 0x35	; 53
    9964:	50 4e       	sbci	r21, 0xE0	; 224
    9966:	4c 4a       	sbci	r20, 0xAC	; 172
    9968:	48 45       	sbci	r20, 0x58	; 88
    996a:	43 41       	sbci	r20, 0x13	; 19
    996c:	3f 3d       	cpi	r19, 0xDF	; 223
    996e:	3b 39       	cpi	r19, 0x9B	; 155
    9970:	37 35       	cpi	r19, 0x57	; 87
    9972:	33 32       	cpi	r19, 0x23	; 35
    9974:	30 2f       	mov	r19, r16
    9976:	2e 2d       	mov	r18, r14
    9978:	2c 2b       	or	r18, r28
    997a:	2c 2d       	mov	r18, r12
    997c:	30 42       	sbci	r19, 0x20	; 32
    997e:	3d 28       	or	r3, r13
    9980:	00 e9       	ldi	r16, 0x90	; 144
    9982:	e5 fe       	sbrs	r14, 5
    9984:	d4 d7       	rcall	.+4008   	; 0xa92e <init_player_shot+0x366>
    9986:	d7 d7       	rcall	.+4014   	; 0xa936 <init_player_shot+0x36e>
    9988:	d6 d4       	rcall	.+2476   	; 0xa336 <LBPrintInt+0x60>
    998a:	d2 d0       	rcall	.+420    	; 0x9b30 <waves+0x930>
    998c:	ce cc       	rjmp	.-1636   	; 0x932a <waves+0x12a>
    998e:	ca c8       	rjmp	.-3692   	; 0x8b24 <ProcessMusic+0x86>
    9990:	c6 c3       	rjmp	.+1932   	; 0xa11e <LBGetNextFrame+0x4>
    9992:	c1 bf       	out	0x31, r28	; 49
    9994:	bd ba       	out	0x1d, r11	; 29
    9996:	b8 b6       	in	r11, 0x38	; 56
    9998:	b4 b1       	in	r27, 0x04	; 4
    999a:	af ad       	ldd	r26, Y+63	; 0x3f
    999c:	ab a9       	ldd	r26, Y+51	; 0x33
    999e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    99a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    99a2:	9f 9e       	mul	r9, r31
    99a4:	9c 9a       	sbi	0x13, 4	; 19
    99a6:	99 97       	sbiw	r26, 0x29	; 41
    99a8:	95 94       	asr	r9
    99aa:	93 91       	.word	0x9193	; ????
    99ac:	90 8f       	std	Z+24, r25	; 0x18
    99ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    99b0:	8b 8a       	std	Y+19, r8	; 0x13
    99b2:	89 88       	ldd	r8, Y+17	; 0x11
    99b4:	88 87       	std	Y+8, r24	; 0x08
    99b6:	86 85       	ldd	r24, Z+14	; 0x0e
    99b8:	85 84       	ldd	r8, Z+13	; 0x0d
    99ba:	84 84       	ldd	r8, Z+12	; 0x0c
    99bc:	83 83       	std	Z+3, r24	; 0x03
    99be:	83 83       	std	Z+3, r24	; 0x03
    99c0:	83 83       	std	Z+3, r24	; 0x03
    99c2:	83 83       	std	Z+3, r24	; 0x03
    99c4:	83 84       	ldd	r8, Z+11	; 0x0b
    99c6:	84 84       	ldd	r8, Z+12	; 0x0c
    99c8:	85 85       	ldd	r24, Z+13	; 0x0d
    99ca:	86 87       	std	Z+14, r24	; 0x0e
    99cc:	88 88       	ldd	r8, Y+16	; 0x10
    99ce:	89 8a       	std	Y+17, r8	; 0x11
    99d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    99d2:	8d 8f       	std	Y+29, r24	; 0x1d
    99d4:	90 91 93 94 	lds	r25, 0x9493
    99d8:	95 97       	sbiw	r26, 0x25	; 37
    99da:	99 9a       	sbi	0x13, 1	; 19
    99dc:	9c 9e       	mul	r9, r28
    99de:	9f a1       	ldd	r25, Y+39	; 0x27
    99e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    99e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    99e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    99e6:	af b1       	in	r26, 0x0f	; 15
    99e8:	b4 b6       	in	r11, 0x34	; 52
    99ea:	b8 ba       	out	0x18, r11	; 24
    99ec:	bd bf       	out	0x3d, r27	; 61
    99ee:	c1 c3       	rjmp	.+1922   	; 0xa172 <LBGetJoyPadState+0xc>
    99f0:	c6 c8       	rjmp	.-3700   	; 0x8b7e <ProcessMusic+0xe0>
    99f2:	ca cc       	rjmp	.-1644   	; 0x9388 <waves+0x188>
    99f4:	ce d0       	rcall	.+412    	; 0x9b92 <waves+0x992>
    99f6:	d2 d4       	rcall	.+2468   	; 0xa39c <LBRandom>
    99f8:	d6 d7       	rcall	.+4012   	; 0xa9a6 <init_player_shot+0x3de>
    99fa:	d7 d7       	rcall	.+4014   	; 0xa9aa <init_player_shot+0x3e2>
    99fc:	d4 fe       	sbrs	r13, 4
    99fe:	e5 e9       	ldi	r30, 0x95	; 149
    9a00:	f9 f8       	.word	0xf8f9	; ????
    9a02:	f9 f5       	brne	.+126    	; 0x9a82 <waves+0x882>
    9a04:	eb e1       	ldi	r30, 0x1B	; 27
    9a06:	dd de       	rcall	.-582    	; 0x97c2 <waves+0x5c2>
    9a08:	e0 e2       	ldi	r30, 0x20	; 32
    9a0a:	e4 e5       	ldi	r30, 0x54	; 84
    9a0c:	e6 e5       	ldi	r30, 0x56	; 86
    9a0e:	e4 e2       	ldi	r30, 0x24	; 36
    9a10:	de d9       	rcall	.-3140   	; 0x8dce <ProcessMusic+0x330>
    9a12:	d2 ca       	rjmp	.-2652   	; 0x8fb8 <esmw+0x72>
    9a14:	c1 b7       	in	r28, 0x31	; 49
    9a16:	ac a2       	std	Y+36, r10	; 0x24
    9a18:	99 91       	ld	r25, Y+
    9a1a:	8a 86       	std	Y+10, r8	; 0x0a
    9a1c:	83 81       	ldd	r24, Z+3	; 0x03
    9a1e:	80 80       	ld	r8, Z
    9a20:	81 82       	std	Z+1, r8	; 0x01
    9a22:	83 85       	ldd	r24, Z+11	; 0x0b
    9a24:	86 88       	ldd	r8, Z+22	; 0x16
    9a26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9a28:	8d 8f       	std	Y+29, r24	; 0x1d
    9a2a:	90 92 93 95 	sts	0x9593, r9
    9a2e:	96 97       	sbiw	r26, 0x26	; 38
    9a30:	98 99       	sbic	0x13, 0	; 19
    9a32:	9a 9b       	sbis	0x13, 2	; 19
    9a34:	9b 9c       	mul	r9, r11
    9a36:	9d 9d       	mul	r25, r13
    9a38:	9d 9e       	mul	r9, r29
    9a3a:	9e 9e       	mul	r9, r30
    9a3c:	9f 9f       	mul	r25, r31
    9a3e:	9f 9f       	mul	r25, r31
    9a40:	9f 9f       	mul	r25, r31
    9a42:	9f 9e       	mul	r9, r31
    9a44:	9e 9e       	mul	r9, r30
    9a46:	9d 9d       	mul	r25, r13
    9a48:	9d 9c       	mul	r9, r13
    9a4a:	9b 9b       	sbis	0x13, 3	; 19
    9a4c:	9a 99       	sbic	0x13, 2	; 19
    9a4e:	98 97       	sbiw	r26, 0x28	; 40
    9a50:	96 95       	lsr	r25
    9a52:	93 92       	.word	0x9293	; ????
    9a54:	90 8f       	std	Z+24, r25	; 0x18
    9a56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9a58:	8a 88       	ldd	r8, Y+18	; 0x12
    9a5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9a5c:	83 82       	std	Z+3, r8	; 0x03
    9a5e:	81 80       	ldd	r8, Z+1	; 0x01
    9a60:	80 81       	ld	r24, Z
    9a62:	83 86       	std	Z+11, r8	; 0x0b
    9a64:	8a 91       	ld	r24, -Y
    9a66:	99 a2       	std	Y+33, r9	; 0x21
    9a68:	ac b7       	in	r26, 0x3c	; 60
    9a6a:	c1 ca       	rjmp	.-2686   	; 0x8fee <esmw+0xa8>
    9a6c:	d2 d9       	rcall	.-3164   	; 0x8e12 <ProcessMusic+0x374>
    9a6e:	de e2       	ldi	r29, 0x2E	; 46
    9a70:	e4 e5       	ldi	r30, 0x54	; 84
    9a72:	e6 e5       	ldi	r30, 0x56	; 86
    9a74:	e4 e2       	ldi	r30, 0x24	; 36
    9a76:	e0 de       	rcall	.-576    	; 0x9838 <waves+0x638>
    9a78:	dd e1       	ldi	r29, 0x1D	; 29
    9a7a:	eb f5       	brvc	.+122    	; 0x9af6 <waves+0x8f6>
    9a7c:	f9 f8       	.word	0xf8f9	; ????
    9a7e:	f9 00       	.word	0x00f9	; ????
    9a80:	07 08       	sbc	r0, r7
    9a82:	07 0b       	sbc	r16, r23
    9a84:	15 1f       	adc	r17, r21
    9a86:	23 22       	and	r2, r19
    9a88:	20 1e       	adc	r2, r16
    9a8a:	1c 1b       	sub	r17, r28
    9a8c:	1a 1b       	sub	r17, r26
    9a8e:	1c 1e       	adc	r1, r28
    9a90:	22 27       	eor	r18, r18
    9a92:	2e 36       	cpi	r18, 0x6E	; 110
    9a94:	3f 49       	sbci	r19, 0x9F	; 159
    9a96:	54 5e       	subi	r21, 0xE4	; 228
    9a98:	67 6f       	ori	r22, 0xF7	; 247
    9a9a:	76 7a       	andi	r23, 0xA6	; 166
    9a9c:	7e 7f       	andi	r23, 0xFE	; 254
    9a9e:	7f 7f       	andi	r23, 0xFF	; 255
    9aa0:	7f 7e       	andi	r23, 0xEF	; 239
    9aa2:	7d 7b       	andi	r23, 0xBD	; 189
    9aa4:	7a 78       	andi	r23, 0x8A	; 138
    9aa6:	76 74       	andi	r23, 0x46	; 70
    9aa8:	73 71       	andi	r23, 0x13	; 19
    9aaa:	70 6e       	ori	r23, 0xE0	; 224
    9aac:	6d 6b       	ori	r22, 0xBD	; 189
    9aae:	6a 69       	ori	r22, 0x9A	; 154
    9ab0:	68 67       	ori	r22, 0x78	; 120
    9ab2:	66 65       	ori	r22, 0x56	; 86
    9ab4:	65 64       	ori	r22, 0x45	; 69
    9ab6:	64 63       	ori	r22, 0x34	; 52
    9ab8:	63 62       	ori	r22, 0x23	; 35
    9aba:	62 62       	ori	r22, 0x22	; 34
    9abc:	61 61       	ori	r22, 0x11	; 17
    9abe:	61 61       	ori	r22, 0x11	; 17
    9ac0:	61 61       	ori	r22, 0x11	; 17
    9ac2:	61 62       	ori	r22, 0x21	; 33
    9ac4:	62 62       	ori	r22, 0x22	; 34
    9ac6:	63 63       	ori	r22, 0x33	; 51
    9ac8:	63 64       	ori	r22, 0x43	; 67
    9aca:	65 65       	ori	r22, 0x55	; 85
    9acc:	66 67       	ori	r22, 0x76	; 118
    9ace:	68 69       	ori	r22, 0x98	; 152
    9ad0:	6a 6b       	ori	r22, 0xBA	; 186
    9ad2:	6d 6e       	ori	r22, 0xED	; 237
    9ad4:	70 71       	andi	r23, 0x10	; 16
    9ad6:	73 74       	andi	r23, 0x43	; 67
    9ad8:	76 78       	andi	r23, 0x86	; 134
    9ada:	7a 7b       	andi	r23, 0xBA	; 186
    9adc:	7d 7e       	andi	r23, 0xED	; 237
    9ade:	7f 7f       	andi	r23, 0xFF	; 255
    9ae0:	7f 7f       	andi	r23, 0xFF	; 255
    9ae2:	7e 7a       	andi	r23, 0xAE	; 174
    9ae4:	76 6f       	ori	r23, 0xF6	; 246
    9ae6:	67 5e       	subi	r22, 0xE7	; 231
    9ae8:	54 49       	sbci	r21, 0x94	; 148
    9aea:	3f 36       	cpi	r19, 0x6F	; 111
    9aec:	2e 27       	eor	r18, r30
    9aee:	22 1e       	adc	r2, r18
    9af0:	1c 1b       	sub	r17, r28
    9af2:	1a 1b       	sub	r17, r26
    9af4:	1c 1e       	adc	r1, r28
    9af6:	20 22       	and	r2, r16
    9af8:	23 1f       	adc	r18, r19
    9afa:	15 0b       	sbc	r17, r21
    9afc:	07 08       	sbc	r0, r7
    9afe:	07 00       	.word	0x0007	; ????
    9b00:	1f 31       	cpi	r17, 0x1F	; 31
    9b02:	3d 44       	sbci	r19, 0x4D	; 77
    9b04:	4e 53       	subi	r20, 0x3E	; 62
    9b06:	54 56       	subi	r21, 0x64	; 100
    9b08:	5a 5f       	subi	r21, 0xFA	; 250
    9b0a:	64 69       	ori	r22, 0x94	; 148
    9b0c:	6e 74       	andi	r22, 0x4E	; 78
    9b0e:	76 79       	andi	r23, 0x96	; 150
    9b10:	7c 7f       	andi	r23, 0xFC	; 252
    9b12:	7f 7f       	andi	r23, 0xFF	; 255
    9b14:	7f 7f       	andi	r23, 0xFF	; 255
    9b16:	7f 7f       	andi	r23, 0xFF	; 255
    9b18:	7f 7f       	andi	r23, 0xFF	; 255
    9b1a:	7f 7f       	andi	r23, 0xFF	; 255
    9b1c:	7f 7f       	andi	r23, 0xFF	; 255
    9b1e:	7f 7f       	andi	r23, 0xFF	; 255
    9b20:	7f 7f       	andi	r23, 0xFF	; 255
    9b22:	7f 7f       	andi	r23, 0xFF	; 255
    9b24:	7f 7f       	andi	r23, 0xFF	; 255
    9b26:	7f 7f       	andi	r23, 0xFF	; 255
    9b28:	7f 7f       	andi	r23, 0xFF	; 255
    9b2a:	7f 7f       	andi	r23, 0xFF	; 255
    9b2c:	7f 7f       	andi	r23, 0xFF	; 255
    9b2e:	7f 7f       	andi	r23, 0xFF	; 255
    9b30:	7f 7f       	andi	r23, 0xFF	; 255
    9b32:	7f 7f       	andi	r23, 0xFF	; 255
    9b34:	7f 7f       	andi	r23, 0xFF	; 255
    9b36:	7f 7f       	andi	r23, 0xFF	; 255
    9b38:	7f 7f       	andi	r23, 0xFF	; 255
    9b3a:	7f 7f       	andi	r23, 0xFF	; 255
    9b3c:	7f 7f       	andi	r23, 0xFF	; 255
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7f 7f       	andi	r23, 0xFF	; 255
    9b46:	7f 7f       	andi	r23, 0xFF	; 255
    9b48:	7f 7f       	andi	r23, 0xFF	; 255
    9b4a:	7f 7f       	andi	r23, 0xFF	; 255
    9b4c:	7f 7f       	andi	r23, 0xFF	; 255
    9b4e:	7f 7f       	andi	r23, 0xFF	; 255
    9b50:	7f 7f       	andi	r23, 0xFF	; 255
    9b52:	7f 7f       	andi	r23, 0xFF	; 255
    9b54:	7f 7f       	andi	r23, 0xFF	; 255
    9b56:	7f 7f       	andi	r23, 0xFF	; 255
    9b58:	7f 7f       	andi	r23, 0xFF	; 255
    9b5a:	7f 7f       	andi	r23, 0xFF	; 255
    9b5c:	7f 7f       	andi	r23, 0xFF	; 255
    9b5e:	7f 7f       	andi	r23, 0xFF	; 255
    9b60:	7f 7f       	andi	r23, 0xFF	; 255
    9b62:	7f 7f       	andi	r23, 0xFF	; 255
    9b64:	7f 7f       	andi	r23, 0xFF	; 255
    9b66:	7f 7f       	andi	r23, 0xFF	; 255
    9b68:	7f 7f       	andi	r23, 0xFF	; 255
    9b6a:	7f 7f       	andi	r23, 0xFF	; 255
    9b6c:	7f 7f       	andi	r23, 0xFF	; 255
    9b6e:	7f 7f       	andi	r23, 0xFF	; 255
    9b70:	7f 7f       	andi	r23, 0xFF	; 255
    9b72:	7f 7f       	andi	r23, 0xFF	; 255
    9b74:	7f 7f       	andi	r23, 0xFF	; 255
    9b76:	7f 7f       	andi	r23, 0xFF	; 255
    9b78:	7f 7f       	andi	r23, 0xFF	; 255
    9b7a:	7f 7c       	andi	r23, 0xCF	; 207
    9b7c:	78 71       	andi	r23, 0x18	; 24
    9b7e:	68 4c       	sbci	r22, 0xC8	; 200
    9b80:	2c 1c       	adc	r2, r12
    9b82:	12 0c       	add	r1, r2
    9b84:	0a 0b       	sbc	r16, r26
    9b86:	0a 05       	cpc	r16, r10
    9b88:	fd f3       	brhs	.-2      	; 0x9b88 <waves+0x988>
    9b8a:	e9 df       	rcall	.-46     	; 0x9b5e <waves+0x95e>
    9b8c:	d4 ca       	rjmp	.-2648   	; 0x9136 <steptable+0x12e>
    9b8e:	c0 b7       	in	r28, 0x30	; 48
    9b90:	ae a6       	std	Y+46, r10	; 0x2e
    9b92:	9e 97       	sbiw	r26, 0x2e	; 46
    9b94:	91 8b       	std	Z+17, r25	; 0x11
    9b96:	86 85       	ldd	r24, Z+14	; 0x0e
    9b98:	82 80       	ldd	r8, Z+2	; 0x02
    9b9a:	80 80       	ld	r8, Z
    9b9c:	80 80       	ld	r8, Z
    9b9e:	80 80       	ld	r8, Z
    9ba0:	80 80       	ld	r8, Z
    9ba2:	80 80       	ld	r8, Z
    9ba4:	80 80       	ld	r8, Z
    9ba6:	80 80       	ld	r8, Z
    9ba8:	80 80       	ld	r8, Z
    9baa:	80 80       	ld	r8, Z
    9bac:	80 80       	ld	r8, Z
    9bae:	80 80       	ld	r8, Z
    9bb0:	80 80       	ld	r8, Z
    9bb2:	80 80       	ld	r8, Z
    9bb4:	80 80       	ld	r8, Z
    9bb6:	80 80       	ld	r8, Z
    9bb8:	80 80       	ld	r8, Z
    9bba:	80 80       	ld	r8, Z
    9bbc:	80 80       	ld	r8, Z
    9bbe:	80 80       	ld	r8, Z
    9bc0:	80 80       	ld	r8, Z
    9bc2:	80 80       	ld	r8, Z
    9bc4:	80 80       	ld	r8, Z
    9bc6:	80 80       	ld	r8, Z
    9bc8:	80 80       	ld	r8, Z
    9bca:	80 80       	ld	r8, Z
    9bcc:	80 80       	ld	r8, Z
    9bce:	80 80       	ld	r8, Z
    9bd0:	80 80       	ld	r8, Z
    9bd2:	80 80       	ld	r8, Z
    9bd4:	80 80       	ld	r8, Z
    9bd6:	80 80       	ld	r8, Z
    9bd8:	80 80       	ld	r8, Z
    9bda:	80 80       	ld	r8, Z
    9bdc:	80 80       	ld	r8, Z
    9bde:	80 80       	ld	r8, Z
    9be0:	80 80       	ld	r8, Z
    9be2:	80 80       	ld	r8, Z
    9be4:	80 80       	ld	r8, Z
    9be6:	80 80       	ld	r8, Z
    9be8:	80 80       	ld	r8, Z
    9bea:	80 80       	ld	r8, Z
    9bec:	80 80       	ld	r8, Z
    9bee:	80 80       	ld	r8, Z
    9bf0:	80 80       	ld	r8, Z
    9bf2:	80 80       	ld	r8, Z
    9bf4:	80 87       	std	Z+8, r24	; 0x08
    9bf6:	91 9d       	mul	r25, r1
    9bf8:	ac c4       	rjmp	.+2392   	; 0xa552 <LBRotateSprites+0x4c>
    9bfa:	cb d4       	rcall	.+2454   	; 0xa592 <init_default_high_scores+0x1c>
    9bfc:	dd f2       	brhs	.-74     	; 0x9bb4 <waves+0x9b4>
    9bfe:	fa fa       	.word	0xfafa	; ????

00009c00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9c00:	80 91 f3 0c 	lds	r24, 0x0CF3
    9c04:	90 91 80 0d 	lds	r25, 0x0D80
    9c08:	89 17       	cp	r24, r25
    9c0a:	78 f4       	brcc	.+30     	; 0x9c2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    9c0c:	e8 2f       	mov	r30, r24
    9c0e:	f0 e0       	ldi	r31, 0x00	; 0
    9c10:	9f 01       	movw	r18, r30
    9c12:	22 0f       	add	r18, r18
    9c14:	33 1f       	adc	r19, r19
    9c16:	e2 0f       	add	r30, r18
    9c18:	f3 1f       	adc	r31, r19
    9c1a:	e0 5b       	subi	r30, 0xB0	; 176
    9c1c:	f3 4f       	sbci	r31, 0xF3	; 243
    9c1e:	a0 81       	ld	r26, Z
    9c20:	b1 81       	ldd	r27, Z+1	; 0x01
    9c22:	92 81       	ldd	r25, Z+2	; 0x02
    9c24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9c26:	8f 5f       	subi	r24, 0xFF	; 255
    9c28:	ed cf       	rjmp	.-38     	; 0x9c04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    9c2a:	08 95       	ret

00009c2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    9c2c:	2f 92       	push	r2
    9c2e:	3f 92       	push	r3
    9c30:	4f 92       	push	r4
    9c32:	5f 92       	push	r5
    9c34:	6f 92       	push	r6
    9c36:	7f 92       	push	r7
    9c38:	8f 92       	push	r8
    9c3a:	9f 92       	push	r9
    9c3c:	af 92       	push	r10
    9c3e:	bf 92       	push	r11
    9c40:	cf 92       	push	r12
    9c42:	df 92       	push	r13
    9c44:	ef 92       	push	r14
    9c46:	ff 92       	push	r15
    9c48:	0f 93       	push	r16
    9c4a:	1f 93       	push	r17
    9c4c:	cf 93       	push	r28
    9c4e:	df 93       	push	r29
    9c50:	00 d0       	rcall	.+0      	; 0x9c52 <ProcessSprites+0x26>
    9c52:	00 d0       	rcall	.+0      	; 0x9c54 <ProcessSprites+0x28>
    9c54:	cd b7       	in	r28, 0x3d	; 61
    9c56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9c58:	80 91 00 05 	lds	r24, 0x0500
    9c5c:	88 23       	and	r24, r24
    9c5e:	09 f4       	brne	.+2      	; 0x9c62 <ProcessSprites+0x36>
    9c60:	e0 c0       	rjmp	.+448    	; 0x9e22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9c62:	80 91 f2 0c 	lds	r24, 0x0CF2
    9c66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    9c6a:	80 93 80 0d 	sts	0x0D80, r24
    9c6e:	e0 e1       	ldi	r30, 0x10	; 16
    9c70:	ce 2e       	mov	r12, r30
    9c72:	e5 e0       	ldi	r30, 0x05	; 5
    9c74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9c76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9c78:	f6 01       	movw	r30, r12
    9c7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    9c7c:	20 3e       	cpi	r18, 0xE0	; 224
    9c7e:	09 f4       	brne	.+2      	; 0x9c82 <ProcessSprites+0x56>
    9c80:	b1 c0       	rjmp	.+354    	; 0x9de4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9c82:	80 91 b2 0c 	lds	r24, 0x0CB2
    9c86:	90 e0       	ldi	r25, 0x00	; 0
    9c88:	82 0f       	add	r24, r18
    9c8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    9c8c:	41 81       	ldd	r20, Z+1	; 0x01
    9c8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9c92:	30 e0       	ldi	r19, 0x00	; 0
    9c94:	24 0f       	add	r18, r20
    9c96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9c98:	ac 01       	movw	r20, r24
    9c9a:	73 e0       	ldi	r23, 0x03	; 3
    9c9c:	56 95       	lsr	r21
    9c9e:	47 95       	ror	r20
    9ca0:	7a 95       	dec	r23
    9ca2:	e1 f7       	brne	.-8      	; 0x9c9c <ProcessSprites+0x70>
    9ca4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    9ca6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    9ca8:	11 f0       	breq	.+4      	; 0x9cae <ProcessSprites+0x82>
    9caa:	92 e0       	ldi	r25, 0x02	; 2
    9cac:	01 c0       	rjmp	.+2      	; 0x9cb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    9cae:	91 e0       	ldi	r25, 0x01	; 1
    9cb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    9cb2:	a9 01       	movw	r20, r18
    9cb4:	63 e0       	ldi	r22, 0x03	; 3
    9cb6:	56 95       	lsr	r21
    9cb8:	47 95       	ror	r20
    9cba:	6a 95       	dec	r22
    9cbc:	e1 f7       	brne	.-8      	; 0x9cb6 <ProcessSprites+0x8a>
    9cbe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    9cc0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    9cc2:	19 f0       	breq	.+6      	; 0x9cca <ProcessSprites+0x9e>
    9cc4:	52 e0       	ldi	r21, 0x02	; 2
    9cc6:	35 2e       	mov	r3, r21
    9cc8:	02 c0       	rjmp	.+4      	; 0x9cce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    9cca:	33 24       	eor	r3, r3
    9ccc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9cce:	30 e0       	ldi	r19, 0x00	; 0
    9cd0:	32 2f       	mov	r19, r18
    9cd2:	22 27       	eor	r18, r18
    9cd4:	f9 01       	movw	r30, r18
    9cd6:	e8 0f       	add	r30, r24
    9cd8:	f1 1d       	adc	r31, r1
    9cda:	fc 83       	std	Y+4, r31	; 0x04
    9cdc:	eb 83       	std	Y+3, r30	; 0x03
    9cde:	e1 2c       	mov	r14, r1
    9ce0:	f1 2c       	mov	r15, r1
    9ce2:	be 2c       	mov	r11, r14
    9ce4:	aa 24       	eor	r10, r10
    9ce6:	26 2c       	mov	r2, r6
    9ce8:	45 2c       	mov	r4, r5
    9cea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    9cec:	84 2c       	mov	r8, r4
    9cee:	91 2c       	mov	r9, r1
    9cf0:	84 2d       	mov	r24, r4
    9cf2:	20 91 b4 0c 	lds	r18, 0x0CB4
    9cf6:	42 2f       	mov	r20, r18
    9cf8:	50 e0       	ldi	r21, 0x00	; 0
    9cfa:	44 0f       	add	r20, r20
    9cfc:	55 1f       	adc	r21, r21
    9cfe:	84 16       	cp	r8, r20
    9d00:	95 06       	cpc	r9, r21
    9d02:	14 f0       	brlt	.+4      	; 0x9d08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9d04:	22 0f       	add	r18, r18
    9d06:	03 c0       	rjmp	.+6      	; 0x9d0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9d08:	42 16       	cp	r4, r18
    9d0a:	10 f0       	brcs	.+4      	; 0x9d10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    9d0c:	84 2d       	mov	r24, r4
    9d0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9d10:	ff e1       	ldi	r31, 0x1F	; 31
    9d12:	f2 15       	cp	r31, r2
    9d14:	18 f4       	brcc	.+6      	; 0x9d1c <ProcessSprites+0xf0>
    9d16:	00 ee       	ldi	r16, 0xE0	; 224
    9d18:	02 0d       	add	r16, r2
    9d1a:	01 c0       	rjmp	.+2      	; 0x9d1e <ProcessSprites+0xf2>
    9d1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    9d1e:	28 2f       	mov	r18, r24
    9d20:	26 95       	lsr	r18
    9d22:	26 95       	lsr	r18
    9d24:	26 95       	lsr	r18
    9d26:	10 e0       	ldi	r17, 0x00	; 0
    9d28:	40 e2       	ldi	r20, 0x20	; 32
    9d2a:	24 9f       	mul	r18, r20
    9d2c:	00 0d       	add	r16, r0
    9d2e:	11 1d       	adc	r17, r1
    9d30:	11 24       	eor	r1, r1
    9d32:	23 e0       	ldi	r18, 0x03	; 3
    9d34:	00 0f       	add	r16, r16
    9d36:	11 1f       	adc	r17, r17
    9d38:	2a 95       	dec	r18
    9d3a:	e1 f7       	brne	.-8      	; 0x9d34 <ProcessSprites+0x108>
    9d3c:	87 70       	andi	r24, 0x07	; 7
    9d3e:	08 0f       	add	r16, r24
    9d40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9d42:	00 50       	subi	r16, 0x00	; 0
    9d44:	1f 4f       	sbci	r17, 0xFF	; 255
    9d46:	f8 01       	movw	r30, r16
    9d48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    9d4a:	81 e0       	ldi	r24, 0x01	; 1
    9d4c:	7c 31       	cpi	r23, 0x1C	; 28
    9d4e:	08 f4       	brcc	.+2      	; 0x9d52 <ProcessSprites+0x126>
    9d50:	80 e0       	ldi	r24, 0x00	; 0
    9d52:	21 e0       	ldi	r18, 0x01	; 1
    9d54:	30 91 f3 0c 	lds	r19, 0x0CF3
    9d58:	73 17       	cp	r23, r19
    9d5a:	18 f0       	brcs	.+6      	; 0x9d62 <ProcessSprites+0x136>
    9d5c:	20 e0       	ldi	r18, 0x00	; 0
    9d5e:	88 23       	and	r24, r24
    9d60:	51 f1       	breq	.+84     	; 0x9db6 <ProcessSprites+0x18a>
    9d62:	60 91 80 0d 	lds	r22, 0x0D80
    9d66:	6c 31       	cpi	r22, 0x1C	; 28
    9d68:	20 f5       	brcc	.+72     	; 0x9db2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    9d6a:	88 23       	and	r24, r24
    9d6c:	31 f0       	breq	.+12     	; 0x9d7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    9d6e:	84 ee       	ldi	r24, 0xE4	; 228
    9d70:	87 0f       	add	r24, r23
    9d72:	7a 83       	std	Y+2, r23	; 0x02
    9d74:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <CopyFlashTile>
    9d78:	06 c0       	rjmp	.+12     	; 0x9d86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    9d7a:	22 23       	and	r18, r18
    9d7c:	29 f0       	breq	.+10     	; 0x9d88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    9d7e:	87 2f       	mov	r24, r23
    9d80:	7a 83       	std	Y+2, r23	; 0x02
    9d82:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <CopyRamTile>
    9d86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9d88:	80 91 80 0d 	lds	r24, 0x0D80
    9d8c:	e8 2f       	mov	r30, r24
    9d8e:	f0 e0       	ldi	r31, 0x00	; 0
    9d90:	9f 01       	movw	r18, r30
    9d92:	22 0f       	add	r18, r18
    9d94:	33 1f       	adc	r19, r19
    9d96:	e2 0f       	add	r30, r18
    9d98:	f3 1f       	adc	r31, r19
    9d9a:	e0 5b       	subi	r30, 0xB0	; 176
    9d9c:	f3 4f       	sbci	r31, 0xF3	; 243
    9d9e:	11 83       	std	Z+1, r17	; 0x01
    9da0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9da2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    9da4:	f8 01       	movw	r30, r16
    9da6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    9da8:	21 e0       	ldi	r18, 0x01	; 1
    9daa:	28 0f       	add	r18, r24
    9dac:	20 93 80 0d 	sts	0x0D80, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    9db0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    9db2:	7c 31       	cpi	r23, 0x1C	; 28
    9db4:	38 f4       	brcc	.+14     	; 0x9dc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9db6:	2b 81       	ldd	r18, Y+3	; 0x03
    9db8:	3c 81       	ldd	r19, Y+4	; 0x04
    9dba:	a5 01       	movw	r20, r10
    9dbc:	67 2f       	mov	r22, r23
    9dbe:	87 2d       	mov	r24, r7
    9dc0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <BlitSprite>
    9dc4:	ff ef       	ldi	r31, 0xFF	; 255
    9dc6:	af 1a       	sub	r10, r31
    9dc8:	bf 0a       	sbc	r11, r31
    9dca:	23 94       	inc	r2
    9dcc:	82 2d       	mov	r24, r2
    9dce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9dd0:	99 81       	ldd	r25, Y+1	; 0x01
    9dd2:	89 17       	cp	r24, r25
    9dd4:	08 f4       	brcc	.+2      	; 0x9dd8 <ProcessSprites+0x1ac>
    9dd6:	8c cf       	rjmp	.-232    	; 0x9cf0 <ProcessSprites+0xc4>
    9dd8:	ef ef       	ldi	r30, 0xFF	; 255
    9dda:	ee 1a       	sub	r14, r30
    9ddc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9dde:	e3 14       	cp	r14, r3
    9de0:	08 f4       	brcc	.+2      	; 0x9de4 <ProcessSprites+0x1b8>
    9de2:	7f cf       	rjmp	.-258    	; 0x9ce2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    9de4:	73 94       	inc	r7
    9de6:	f4 e0       	ldi	r31, 0x04	; 4
    9de8:	cf 0e       	add	r12, r31
    9dea:	d1 1c       	adc	r13, r1
    9dec:	40 e1       	ldi	r20, 0x10	; 16
    9dee:	74 12       	cpse	r7, r20
    9df0:	43 cf       	rjmp	.-378    	; 0x9c78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    9df2:	0f 90       	pop	r0
    9df4:	0f 90       	pop	r0
    9df6:	0f 90       	pop	r0
    9df8:	0f 90       	pop	r0
    9dfa:	df 91       	pop	r29
    9dfc:	cf 91       	pop	r28
    9dfe:	1f 91       	pop	r17
    9e00:	0f 91       	pop	r16
    9e02:	ff 90       	pop	r15
    9e04:	ef 90       	pop	r14
    9e06:	df 90       	pop	r13
    9e08:	cf 90       	pop	r12
    9e0a:	bf 90       	pop	r11
    9e0c:	af 90       	pop	r10
    9e0e:	9f 90       	pop	r9
    9e10:	8f 90       	pop	r8
    9e12:	7f 90       	pop	r7
    9e14:	6f 90       	pop	r6
    9e16:	5f 90       	pop	r5
    9e18:	4f 90       	pop	r4
    9e1a:	3f 90       	pop	r3
    9e1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    9e1e:	0c 94 00 4e 	jmp	0x9c00	; 0x9c00 <RestoreBackground>

	}
    9e22:	0f 90       	pop	r0
    9e24:	0f 90       	pop	r0
    9e26:	0f 90       	pop	r0
    9e28:	0f 90       	pop	r0
    9e2a:	df 91       	pop	r29
    9e2c:	cf 91       	pop	r28
    9e2e:	1f 91       	pop	r17
    9e30:	0f 91       	pop	r16
    9e32:	ff 90       	pop	r15
    9e34:	ef 90       	pop	r14
    9e36:	df 90       	pop	r13
    9e38:	cf 90       	pop	r12
    9e3a:	bf 90       	pop	r11
    9e3c:	af 90       	pop	r10
    9e3e:	9f 90       	pop	r9
    9e40:	8f 90       	pop	r8
    9e42:	7f 90       	pop	r7
    9e44:	6f 90       	pop	r6
    9e46:	5f 90       	pop	r5
    9e48:	4f 90       	pop	r4
    9e4a:	3f 90       	pop	r3
    9e4c:	2f 90       	pop	r2
    9e4e:	08 95       	ret

00009e50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9e50:	90 91 b3 0c 	lds	r25, 0x0CB3
    9e54:	96 0f       	add	r25, r22
    9e56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    9e5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    9e5e:	82 0f       	add	r24, r18
    9e60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9e64:	80 91 b4 0c 	lds	r24, 0x0CB4
    9e68:	80 32       	cpi	r24, 0x20	; 32
    9e6a:	b0 f4       	brcc	.+44     	; 0x9e98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    9e6c:	29 2f       	mov	r18, r25
    9e6e:	30 e0       	ldi	r19, 0x00	; 0
    9e70:	78 e0       	ldi	r23, 0x08	; 8
    9e72:	87 9f       	mul	r24, r23
    9e74:	a0 01       	movw	r20, r0
    9e76:	11 24       	eor	r1, r1
    9e78:	24 17       	cp	r18, r20
    9e7a:	35 07       	cpc	r19, r21
    9e7c:	6c f0       	brlt	.+26     	; 0x9e98 <Scroll+0x48>
				if(dy>=0){	
    9e7e:	67 fd       	sbrc	r22, 7
    9e80:	05 c0       	rjmp	.+10     	; 0x9e8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9e82:	28 ef       	ldi	r18, 0xF8	; 248
    9e84:	82 9f       	mul	r24, r18
    9e86:	90 0d       	add	r25, r0
    9e88:	11 24       	eor	r1, r1
    9e8a:	04 c0       	rjmp	.+8      	; 0x9e94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    9e8c:	78 e0       	ldi	r23, 0x08	; 8
    9e8e:	87 9f       	mul	r24, r23
    9e90:	90 0d       	add	r25, r0
    9e92:	11 24       	eor	r1, r1
    9e94:	90 93 b3 0c 	sts	0x0CB3, r25
    9e98:	08 95       	ret

00009e9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9e9a:	e0 e1       	ldi	r30, 0x10	; 16
    9e9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9e9e:	80 ee       	ldi	r24, 0xE0	; 224
    9ea0:	80 83       	st	Z, r24
    9ea2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9ea4:	95 e0       	ldi	r25, 0x05	; 5
    9ea6:	e0 35       	cpi	r30, 0x50	; 80
    9ea8:	f9 07       	cpc	r31, r25
    9eaa:	d1 f7       	brne	.-12     	; 0x9ea0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    9eac:	80 e2       	ldi	r24, 0x20	; 32
    9eae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    9eb2:	10 92 af 0c 	sts	0x0CAF, r1
    9eb6:	08 95       	ret

00009eb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9eb8:	2f 92       	push	r2
    9eba:	3f 92       	push	r3
    9ebc:	4f 92       	push	r4
    9ebe:	5f 92       	push	r5
    9ec0:	6f 92       	push	r6
    9ec2:	7f 92       	push	r7
    9ec4:	8f 92       	push	r8
    9ec6:	9f 92       	push	r9
    9ec8:	af 92       	push	r10
    9eca:	bf 92       	push	r11
    9ecc:	cf 92       	push	r12
    9ece:	df 92       	push	r13
    9ed0:	ef 92       	push	r14
    9ed2:	ff 92       	push	r15
    9ed4:	0f 93       	push	r16
    9ed6:	1f 93       	push	r17
    9ed8:	cf 93       	push	r28
    9eda:	df 93       	push	r29
    9edc:	00 d0       	rcall	.+0      	; 0x9ede <DrawMap+0x26>
    9ede:	1f 92       	push	r1
    9ee0:	cd b7       	in	r28, 0x3d	; 61
    9ee2:	de b7       	in	r29, 0x3e	; 62
    9ee4:	28 2f       	mov	r18, r24
    9ee6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9ee8:	fa 01       	movw	r30, r20
    9eea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9eec:	31 96       	adiw	r30, 0x01	; 1
    9eee:	34 90       	lpm	r3, Z
    9ef0:	42 2c       	mov	r4, r2
    9ef2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9ef4:	e1 2c       	mov	r14, r1
    9ef6:	f1 2c       	mov	r15, r1
    9ef8:	00 e0       	ldi	r16, 0x00	; 0
    9efa:	10 e0       	ldi	r17, 0x00	; 0
    9efc:	c6 2e       	mov	r12, r22
    9efe:	d1 2c       	mov	r13, r1
    9f00:	03 15       	cp	r16, r3
    9f02:	68 f5       	brcc	.+90     	; 0x9f5e <DrawMap+0xa6>
    9f04:	1b 82       	std	Y+3, r1	; 0x03
    9f06:	1a 82       	std	Y+2, r1	; 0x02
    9f08:	57 01       	movw	r10, r14
    9f0a:	92 e0       	ldi	r25, 0x02	; 2
    9f0c:	a9 0e       	add	r10, r25
    9f0e:	b1 1c       	adc	r11, r1
    9f10:	48 01       	movw	r8, r16
    9f12:	8c 0c       	add	r8, r12
    9f14:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9f16:	ea 81       	ldd	r30, Y+2	; 0x02
    9f18:	e2 15       	cp	r30, r2
    9f1a:	e0 f4       	brcc	.+56     	; 0x9f54 <DrawMap+0x9c>
    9f1c:	ea 81       	ldd	r30, Y+2	; 0x02
    9f1e:	fb 81       	ldd	r31, Y+3	; 0x03
    9f20:	ea 0d       	add	r30, r10
    9f22:	fb 1d       	adc	r31, r11
    9f24:	e6 0d       	add	r30, r6
    9f26:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9f28:	e4 91       	lpm	r30, Z
    9f2a:	f0 e0       	ldi	r31, 0x00	; 0
    9f2c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9f30:	70 e0       	ldi	r23, 0x00	; 0
    9f32:	c4 01       	movw	r24, r8
    9f34:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    9f38:	af 01       	movw	r20, r30
    9f3a:	68 2f       	mov	r22, r24
    9f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9f3e:	82 0f       	add	r24, r18
    9f40:	29 83       	std	Y+1, r18	; 0x01
    9f42:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <SetTile>
    9f46:	8a 81       	ldd	r24, Y+2	; 0x02
    9f48:	9b 81       	ldd	r25, Y+3	; 0x03
    9f4a:	01 96       	adiw	r24, 0x01	; 1
    9f4c:	9b 83       	std	Y+3, r25	; 0x03
    9f4e:	8a 83       	std	Y+2, r24	; 0x02
    9f50:	29 81       	ldd	r18, Y+1	; 0x01
    9f52:	e1 cf       	rjmp	.-62     	; 0x9f16 <DrawMap+0x5e>
    9f54:	0f 5f       	subi	r16, 0xFF	; 255
    9f56:	1f 4f       	sbci	r17, 0xFF	; 255
    9f58:	e4 0c       	add	r14, r4
    9f5a:	f5 1c       	adc	r15, r5
    9f5c:	d1 cf       	rjmp	.-94     	; 0x9f00 <DrawMap+0x48>
			}
		}

	}
    9f5e:	0f 90       	pop	r0
    9f60:	0f 90       	pop	r0
    9f62:	0f 90       	pop	r0
    9f64:	df 91       	pop	r29
    9f66:	cf 91       	pop	r28
    9f68:	1f 91       	pop	r17
    9f6a:	0f 91       	pop	r16
    9f6c:	ff 90       	pop	r15
    9f6e:	ef 90       	pop	r14
    9f70:	df 90       	pop	r13
    9f72:	cf 90       	pop	r12
    9f74:	bf 90       	pop	r11
    9f76:	af 90       	pop	r10
    9f78:	9f 90       	pop	r9
    9f7a:	8f 90       	pop	r8
    9f7c:	7f 90       	pop	r7
    9f7e:	6f 90       	pop	r6
    9f80:	5f 90       	pop	r5
    9f82:	4f 90       	pop	r4
    9f84:	3f 90       	pop	r3
    9f86:	2f 90       	pop	r2
    9f88:	08 95       	ret

00009f8a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9f8a:	0f 93       	push	r16
    9f8c:	1f 93       	push	r17
    9f8e:	cf 93       	push	r28
    9f90:	df 93       	push	r29
    9f92:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9f94:	c0 e0       	ldi	r28, 0x00	; 0
    9f96:	d0 e0       	ldi	r29, 0x00	; 0
    9f98:	c0 17       	cp	r28, r16
    9f9a:	d1 07       	cpc	r29, r17
    9f9c:	44 f4       	brge	.+16     	; 0x9fae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9f9e:	0e 94 08 41 	call	0x8210	; 0x8210 <GetVsyncFlag>
    9fa2:	88 23       	and	r24, r24
    9fa4:	e1 f3       	breq	.-8      	; 0x9f9e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9fa6:	0e 94 0c 41 	call	0x8218	; 0x8218 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9faa:	21 96       	adiw	r28, 0x01	; 1
    9fac:	f5 cf       	rjmp	.-22     	; 0x9f98 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9fae:	df 91       	pop	r29
    9fb0:	cf 91       	pop	r28
    9fb2:	1f 91       	pop	r17
    9fb4:	0f 91       	pop	r16
    9fb6:	08 95       	ret

00009fb8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    9fb8:	83 e3       	ldi	r24, 0x33	; 51
    9fba:	99 e0       	ldi	r25, 0x09	; 9
    9fbc:	0e 94 ba 43 	call	0x8774	; 0x8774 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    9fc0:	83 e3       	ldi	r24, 0x33	; 51
    9fc2:	91 e0       	ldi	r25, 0x01	; 1
    9fc4:	0e 94 03 41 	call	0x8206	; 0x8206 <SetTileTable>
			
			//draw logo
			ClearVram();
    9fc8:	0e 94 e8 40 	call	0x81d0	; 0x81d0 <ClearVram>
			WaitVsync(15);		
    9fcc:	8f e0       	ldi	r24, 0x0F	; 15
    9fce:	90 e0       	ldi	r25, 0x00	; 0
    9fd0:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    9fd4:	41 e0       	ldi	r20, 0x01	; 1
    9fd6:	6f ef       	ldi	r22, 0xFF	; 255
    9fd8:	80 e0       	ldi	r24, 0x00	; 0
    9fda:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9fde:	4d e1       	ldi	r20, 0x1D	; 29
    9fe0:	51 e0       	ldi	r21, 0x01	; 1
    9fe2:	6c e0       	ldi	r22, 0x0C	; 12
    9fe4:	8c e0       	ldi	r24, 0x0C	; 12
    9fe6:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
			WaitVsync(3);
    9fea:	83 e0       	ldi	r24, 0x03	; 3
    9fec:	90 e0       	ldi	r25, 0x00	; 0
    9fee:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    9ff2:	4c e0       	ldi	r20, 0x0C	; 12
    9ff4:	51 e0       	ldi	r21, 0x01	; 1
    9ff6:	6c e0       	ldi	r22, 0x0C	; 12
    9ff8:	8c e0       	ldi	r24, 0x0C	; 12
    9ffa:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
			WaitVsync(2);
    9ffe:	82 e0       	ldi	r24, 0x02	; 2
    a000:	90 e0       	ldi	r25, 0x00	; 0
    a002:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a006:	4d e1       	ldi	r20, 0x1D	; 29
    a008:	51 e0       	ldi	r21, 0x01	; 1
    a00a:	6c e0       	ldi	r22, 0x0C	; 12
    a00c:	8c e0       	ldi	r24, 0x0C	; 12
    a00e:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    a012:	81 e4       	ldi	r24, 0x41	; 65
    a014:	90 e0       	ldi	r25, 0x00	; 0
    a016:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			ClearVram();
    a01a:	0e 94 e8 40 	call	0x81d0	; 0x81d0 <ClearVram>
			WaitVsync(20);
    a01e:	84 e1       	ldi	r24, 0x14	; 20
    a020:	90 e0       	ldi	r25, 0x00	; 0
    a022:	0c 94 c5 4f 	jmp	0x9f8a	; 0x9f8a <WaitVsync>

0000a026 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a026:	80 93 7e 0d 	sts	0x0D7E, r24
	currFadeFrame=0;
    a02a:	10 92 82 0d 	sts	0x0D82, r1
	fadeActive=true;
    a02e:	81 e0       	ldi	r24, 0x01	; 1
    a030:	80 93 81 0d 	sts	0x0D81, r24
		
	if(blocking){
    a034:	66 23       	and	r22, r22
    a036:	21 f0       	breq	.+8      	; 0xa040 <doFade+0x1a>
		while(fadeActive==true);
    a038:	80 91 81 0d 	lds	r24, 0x0D81
    a03c:	81 11       	cpse	r24, r1
    a03e:	fc cf       	rjmp	.-8      	; 0xa038 <doFade+0x12>
    a040:	08 95       	ret

0000a042 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a042:	81 11       	cpse	r24, r1
    a044:	03 c0       	rjmp	.+6      	; 0xa04c <FadeIn+0xa>
		DDRC=0xff;
    a046:	8f ef       	ldi	r24, 0xFF	; 255
    a048:	87 b9       	out	0x07, r24	; 7
		return;
    a04a:	08 95       	ret
	}
	fadeStep=1;
    a04c:	91 e0       	ldi	r25, 0x01	; 1
    a04e:	90 93 83 0d 	sts	0x0D83, r25
	fadeDir=1;
    a052:	90 93 7f 0d 	sts	0x0D7F, r25
	doFade(speed,blocking);
    a056:	0c 94 13 50 	jmp	0xa026	; 0xa026 <doFade>

0000a05a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a05a:	81 11       	cpse	r24, r1
    a05c:	02 c0       	rjmp	.+4      	; 0xa062 <FadeOut+0x8>
		DDRC=0;
    a05e:	17 b8       	out	0x07, r1	; 7
		return;
    a060:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a062:	9c e0       	ldi	r25, 0x0C	; 12
    a064:	90 93 83 0d 	sts	0x0D83, r25
	fadeDir=-1;
    a068:	9f ef       	ldi	r25, 0xFF	; 255
    a06a:	90 93 7f 0d 	sts	0x0D7F, r25
	doFade(speed,blocking);
    a06e:	0c 94 13 50 	jmp	0xa026	; 0xa026 <doFade>

0000a072 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a072:	80 91 81 0d 	lds	r24, 0x0D81
    a076:	88 23       	and	r24, r24
    a078:	01 f1       	breq	.+64     	; 0xa0ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    a07a:	80 91 82 0d 	lds	r24, 0x0D82
    a07e:	81 11       	cpse	r24, r1
    a080:	19 c0       	rjmp	.+50     	; 0xa0b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a082:	80 91 7e 0d 	lds	r24, 0x0D7E
    a086:	80 93 82 0d 	sts	0x0D82, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a08a:	e0 91 83 0d 	lds	r30, 0x0D83
    a08e:	f0 e0       	ldi	r31, 0x00	; 0
    a090:	e1 50       	subi	r30, 0x01	; 1
    a092:	ff 4f       	sbci	r31, 0xFF	; 255
    a094:	e4 91       	lpm	r30, Z
    a096:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a098:	90 91 7f 0d 	lds	r25, 0x0D7F
    a09c:	80 91 83 0d 	lds	r24, 0x0D83
    a0a0:	89 0f       	add	r24, r25
    a0a2:	80 93 83 0d 	sts	0x0D83, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a0a6:	88 23       	and	r24, r24
    a0a8:	11 f0       	breq	.+4      	; 0xa0ae <ProcessFading+0x3c>
    a0aa:	8d 30       	cpi	r24, 0x0D	; 13
    a0ac:	31 f4       	brne	.+12     	; 0xa0ba <ProcessFading+0x48>
				fadeActive=false;
    a0ae:	10 92 81 0d 	sts	0x0D81, r1
    a0b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a0b4:	81 50       	subi	r24, 0x01	; 1
    a0b6:	80 93 82 0d 	sts	0x0D82, r24
    a0ba:	08 95       	ret

0000a0bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a0bc:	0e 94 39 50 	call	0xa072	; 0xa072 <ProcessFading>
		ProcessSprites();
    a0c0:	0c 94 16 4e 	jmp	0x9c2c	; 0x9c2c <ProcessSprites>

0000a0c4 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    a0c4:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a0c6:	88 23       	and	r24, r24
    a0c8:	29 f1       	breq	.+74     	; 0xa114 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    a0ca:	87 ff       	sbrs	r24, 7
    a0cc:	03 c0       	rjmp	.+6      	; 0xa0d4 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    a0ce:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    a0d0:	3f ef       	ldi	r19, 0xFF	; 255
    a0d2:	01 c0       	rjmp	.+2      	; 0xa0d6 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    a0d4:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    a0d6:	6c e3       	ldi	r22, 0x3C	; 60
    a0d8:	0e 94 1d 73 	call	0xe63a	; 0xe63a <__divmodqi4>
    a0dc:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    a0de:	99 23       	and	r25, r25
    a0e0:	a9 f0       	breq	.+42     	; 0xa10c <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    a0e2:	69 2f       	mov	r22, r25
    a0e4:	70 e0       	ldi	r23, 0x00	; 0
    a0e6:	8c e3       	ldi	r24, 0x3C	; 60
    a0e8:	90 e0       	ldi	r25, 0x00	; 0
    a0ea:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    a0ee:	8e 2f       	mov	r24, r30
    a0f0:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    a0f4:	91 11       	cpse	r25, r1
    a0f6:	0a c0       	rjmp	.+20     	; 0xa10c <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    a0f8:	42 2f       	mov	r20, r18
    a0fa:	50 e0       	ldi	r21, 0x00	; 0
    a0fc:	4f 5f       	subi	r20, 0xFF	; 255
    a0fe:	5f 4f       	sbci	r21, 0xFF	; 255
    a100:	34 03       	mulsu	r19, r20
    a102:	c0 01       	movw	r24, r0
    a104:	35 9f       	mul	r19, r21
    a106:	90 0d       	add	r25, r0
    a108:	11 24       	eor	r1, r1
    a10a:	08 95       	ret
	}
	return direction*base_delta;
    a10c:	32 03       	mulsu	r19, r18
    a10e:	c0 01       	movw	r24, r0
    a110:	11 24       	eor	r1, r1
    a112:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a114:	80 e0       	ldi	r24, 0x00	; 0
    a116:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    a118:	08 95       	ret

0000a11a <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    a11a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a11c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a11e:	93 81       	ldd	r25, Z+3	; 0x03
    a120:	9f 5f       	subi	r25, 0xFF	; 255
    a122:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a124:	42 81       	ldd	r20, Z+2	; 0x02
    a126:	80 81       	ld	r24, Z
    a128:	26 81       	ldd	r18, Z+6	; 0x06
    a12a:	37 81       	ldd	r19, Z+7	; 0x07
    a12c:	94 17       	cp	r25, r20
    a12e:	30 f4       	brcc	.+12     	; 0xa13c <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    a130:	f9 01       	movw	r30, r18
    a132:	e8 0f       	add	r30, r24
    a134:	f1 1d       	adc	r31, r1
    a136:	e8 0f       	add	r30, r24
    a138:	f1 1d       	adc	r31, r1
    a13a:	12 c0       	rjmp	.+36     	; 0xa160 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    a13c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a13e:	90 e0       	ldi	r25, 0x00	; 0
    a140:	01 96       	adiw	r24, 0x01	; 1
    a142:	61 81       	ldd	r22, Z+1	; 0x01
    a144:	70 e0       	ldi	r23, 0x00	; 0
    a146:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    a14a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a14c:	81 11       	cpse	r24, r1
    a14e:	02 c0       	rjmp	.+4      	; 0xa154 <LBGetNextFrame+0x3a>
    a150:	41 e0       	ldi	r20, 0x01	; 1
    a152:	44 83       	std	Z+4, r20	; 0x04
    a154:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    a156:	88 0f       	add	r24, r24
    a158:	99 1f       	adc	r25, r25
    a15a:	f9 01       	movw	r30, r18
    a15c:	e8 0f       	add	r30, r24
    a15e:	f9 1f       	adc	r31, r25
    a160:	80 81       	ld	r24, Z
    a162:	91 81       	ldd	r25, Z+1	; 0x01
}
    a164:	08 95       	ret

0000a166 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a166:	0f 93       	push	r16
    a168:	1f 93       	push	r17
    a16a:	cf 93       	push	r28
    a16c:	df 93       	push	r29
    a16e:	1f 92       	push	r1
    a170:	cd b7       	in	r28, 0x3d	; 61
    a172:	de b7       	in	r29, 0x3e	; 62
    a174:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    a176:	86 2f       	mov	r24, r22
    a178:	69 83       	std	Y+1, r22	; 0x01
    a17a:	0e 94 12 41 	call	0x8224	; 0x8224 <ReadJoypad>
    a17e:	d8 01       	movw	r26, r16
    a180:	15 96       	adiw	r26, 0x05	; 5
    a182:	9c 93       	st	X, r25
    a184:	8e 93       	st	-X, r24
    a186:	14 97       	sbiw	r26, 0x04	; 4
    a188:	69 81       	ldd	r22, Y+1	; 0x01
    a18a:	e6 2f       	mov	r30, r22
    a18c:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a18e:	00 97       	sbiw	r24, 0x00	; 0
    a190:	51 f0       	breq	.+20     	; 0xa1a6 <LBGetJoyPadState+0x40>
    a192:	df 01       	movw	r26, r30
    a194:	aa 0f       	add	r26, r26
    a196:	bb 1f       	adc	r27, r27
    a198:	aa 50       	subi	r26, 0x0A	; 10
    a19a:	b3 4f       	sbci	r27, 0xF3	; 243
    a19c:	2d 91       	ld	r18, X+
    a19e:	3c 91       	ld	r19, X
    a1a0:	82 17       	cp	r24, r18
    a1a2:	93 07       	cpc	r25, r19
    a1a4:	21 f0       	breq	.+8      	; 0xa1ae <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a1a6:	d8 01       	movw	r26, r16
    a1a8:	16 96       	adiw	r26, 0x06	; 6
    a1aa:	1c 92       	st	X, r1
    a1ac:	07 c0       	rjmp	.+14     	; 0xa1bc <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a1ae:	d8 01       	movw	r26, r16
    a1b0:	16 96       	adiw	r26, 0x06	; 6
    a1b2:	2c 91       	ld	r18, X
    a1b4:	16 97       	sbiw	r26, 0x06	; 6
    a1b6:	2f 5f       	subi	r18, 0xFF	; 255
    a1b8:	16 96       	adiw	r26, 0x06	; 6
    a1ba:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a1bc:	ee 0f       	add	r30, r30
    a1be:	ff 1f       	adc	r31, r31
    a1c0:	ea 50       	subi	r30, 0x0A	; 10
    a1c2:	f3 4f       	sbci	r31, 0xF3	; 243
    a1c4:	20 81       	ld	r18, Z
    a1c6:	31 81       	ldd	r19, Z+1	; 0x01
    a1c8:	a9 01       	movw	r20, r18
    a1ca:	40 95       	com	r20
    a1cc:	50 95       	com	r21
    a1ce:	48 23       	and	r20, r24
    a1d0:	59 23       	and	r21, r25
    a1d2:	d8 01       	movw	r26, r16
    a1d4:	11 96       	adiw	r26, 0x01	; 1
    a1d6:	5c 93       	st	X, r21
    a1d8:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a1da:	ac 01       	movw	r20, r24
    a1dc:	40 95       	com	r20
    a1de:	50 95       	com	r21
    a1e0:	24 23       	and	r18, r20
    a1e2:	35 23       	and	r19, r21
    a1e4:	13 96       	adiw	r26, 0x03	; 3
    a1e6:	3c 93       	st	X, r19
    a1e8:	2e 93       	st	-X, r18
    a1ea:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a1ec:	91 83       	std	Z+1, r25	; 0x01
    a1ee:	80 83       	st	Z, r24
}
    a1f0:	0f 90       	pop	r0
    a1f2:	df 91       	pop	r29
    a1f4:	cf 91       	pop	r28
    a1f6:	1f 91       	pop	r17
    a1f8:	0f 91       	pop	r16
    a1fa:	08 95       	ret

0000a1fc <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    a1fc:	90 ed       	ldi	r25, 0xD0	; 208
    a1fe:	94 0f       	add	r25, r20
    a200:	e0 91 84 0d 	lds	r30, 0x0D84
    a204:	f0 91 85 0d 	lds	r31, 0x0D85
    a208:	9a 30       	cpi	r25, 0x0A	; 10
    a20a:	38 f4       	brcc	.+14     	; 0xa21a <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    a20c:	24 2f       	mov	r18, r20
    a20e:	30 e0       	ldi	r19, 0x00	; 0
    a210:	2d 52       	subi	r18, 0x2D	; 45
    a212:	31 09       	sbc	r19, r1
    a214:	e2 0f       	add	r30, r18
    a216:	f3 1f       	adc	r31, r19
    a218:	0c c0       	rjmp	.+24     	; 0xa232 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    a21a:	9f eb       	ldi	r25, 0xBF	; 191
    a21c:	94 0f       	add	r25, r20
    a21e:	9a 31       	cpi	r25, 0x1A	; 26
    a220:	38 f4       	brcc	.+14     	; 0xa230 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    a222:	50 e0       	ldi	r21, 0x00	; 0
    a224:	44 53       	subi	r20, 0x34	; 52
    a226:	51 09       	sbc	r21, r1
    a228:	e4 0f       	add	r30, r20
    a22a:	f5 1f       	adc	r31, r21
    a22c:	44 91       	lpm	r20, Z
    a22e:	03 c0       	rjmp	.+6      	; 0xa236 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    a230:	32 96       	adiw	r30, 0x02	; 2
    a232:	e4 91       	lpm	r30, Z
    a234:	4e 2f       	mov	r20, r30
    a236:	50 e0       	ldi	r21, 0x00	; 0
    a238:	0c 94 f2 40 	jmp	0x81e4	; 0x81e4 <SetTile>

0000a23c <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    a23c:	ff 92       	push	r15
    a23e:	0f 93       	push	r16
    a240:	1f 93       	push	r17
    a242:	cf 93       	push	r28
    a244:	df 93       	push	r29
    a246:	d8 2f       	mov	r29, r24
    a248:	f6 2e       	mov	r15, r22
    a24a:	8a 01       	movw	r16, r20
	u8 i = 0;
    a24c:	c0 e0       	ldi	r28, 0x00	; 0
    a24e:	8c 2f       	mov	r24, r28
    a250:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    a252:	f8 01       	movw	r30, r16
    a254:	ec 0f       	add	r30, r28
    a256:	f1 1d       	adc	r31, r1
    a258:	44 91       	lpm	r20, Z
    a25a:	44 23       	and	r20, r20
    a25c:	29 f0       	breq	.+10     	; 0xa268 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    a25e:	6f 2d       	mov	r22, r15
    a260:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		i++;
    a264:	cf 5f       	subi	r28, 0xFF	; 255
    a266:	f3 cf       	rjmp	.-26     	; 0xa24e <LBPrint+0x12>
	}
}
    a268:	df 91       	pop	r29
    a26a:	cf 91       	pop	r28
    a26c:	1f 91       	pop	r17
    a26e:	0f 91       	pop	r16
    a270:	ff 90       	pop	r15
    a272:	08 95       	ret

0000a274 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    a274:	df 92       	push	r13
    a276:	ef 92       	push	r14
    a278:	ff 92       	push	r15
    a27a:	0f 93       	push	r16
    a27c:	1f 93       	push	r17
    a27e:	cf 93       	push	r28
    a280:	df 93       	push	r29
    a282:	1f 92       	push	r1
    a284:	cd b7       	in	r28, 0x3d	; 61
    a286:	de b7       	in	r29, 0x3e	; 62
    a288:	38 2f       	mov	r19, r24
    a28a:	06 2f       	mov	r16, r22
    a28c:	84 2f       	mov	r24, r20
    a28e:	9d ef       	ldi	r25, 0xFD	; 253
    a290:	e9 2e       	mov	r14, r25
    a292:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a294:	4a e0       	ldi	r20, 0x0A	; 10
    a296:	f4 2e       	mov	r15, r20
    a298:	1f ef       	ldi	r17, 0xFF	; 255
    a29a:	13 0f       	add	r17, r19
    a29c:	6f 2d       	mov	r22, r15
    a29e:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    a2a2:	d8 2e       	mov	r13, r24
    a2a4:	40 e3       	ldi	r20, 0x30	; 48
    a2a6:	49 0f       	add	r20, r25
    a2a8:	60 2f       	mov	r22, r16
    a2aa:	83 2f       	mov	r24, r19
    a2ac:	29 83       	std	Y+1, r18	; 0x01
    a2ae:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		value /= 10;
    a2b2:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    a2b4:	29 81       	ldd	r18, Y+1	; 0x01
    a2b6:	21 11       	cpse	r18, r1
    a2b8:	02 c0       	rjmp	.+4      	; 0xa2be <LBPrintByte+0x4a>
    a2ba:	dd 20       	and	r13, r13
    a2bc:	19 f0       	breq	.+6      	; 0xa2c4 <LBPrintByte+0x50>
    a2be:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    a2c0:	1e 11       	cpse	r17, r14
    a2c2:	ea cf       	rjmp	.-44     	; 0xa298 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a2c4:	0f 90       	pop	r0
    a2c6:	df 91       	pop	r29
    a2c8:	cf 91       	pop	r28
    a2ca:	1f 91       	pop	r17
    a2cc:	0f 91       	pop	r16
    a2ce:	ff 90       	pop	r15
    a2d0:	ef 90       	pop	r14
    a2d2:	df 90       	pop	r13
    a2d4:	08 95       	ret

0000a2d6 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    a2d6:	cf 92       	push	r12
    a2d8:	df 92       	push	r13
    a2da:	ef 92       	push	r14
    a2dc:	ff 92       	push	r15
    a2de:	0f 93       	push	r16
    a2e0:	1f 93       	push	r17
    a2e2:	cf 93       	push	r28
    a2e4:	df 93       	push	r29
    a2e6:	00 d0       	rcall	.+0      	; 0xa2e8 <LBPrintInt+0x12>
    a2e8:	cd b7       	in	r28, 0x3d	; 61
    a2ea:	de b7       	in	r29, 0x3e	; 62
    a2ec:	38 2f       	mov	r19, r24
    a2ee:	16 2f       	mov	r17, r22
    a2f0:	ca 01       	movw	r24, r20
    a2f2:	4b ef       	ldi	r20, 0xFB	; 251
    a2f4:	d4 2e       	mov	r13, r20
    a2f6:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a2f8:	5a e0       	ldi	r21, 0x0A	; 10
    a2fa:	e5 2e       	mov	r14, r21
    a2fc:	f1 2c       	mov	r15, r1
    a2fe:	cc 24       	eor	r12, r12
    a300:	ca 94       	dec	r12
    a302:	c3 0e       	add	r12, r19
    a304:	b7 01       	movw	r22, r14
    a306:	0e 94 2b 73 	call	0xe656	; 0xe656 <__udivmodhi4>
    a30a:	06 2f       	mov	r16, r22
    a30c:	40 e3       	ldi	r20, 0x30	; 48
    a30e:	48 0f       	add	r20, r24
    a310:	61 2f       	mov	r22, r17
    a312:	83 2f       	mov	r24, r19
    a314:	29 83       	std	Y+1, r18	; 0x01
    a316:	7a 83       	std	Y+2, r23	; 0x02
    a318:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		value /= 10;
    a31c:	80 2f       	mov	r24, r16
    a31e:	7a 81       	ldd	r23, Y+2	; 0x02
    a320:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a322:	29 81       	ldd	r18, Y+1	; 0x01
    a324:	21 11       	cpse	r18, r1
    a326:	02 c0       	rjmp	.+4      	; 0xa32c <LBPrintInt+0x56>
    a328:	00 97       	sbiw	r24, 0x00	; 0
    a32a:	19 f0       	breq	.+6      	; 0xa332 <LBPrintInt+0x5c>
    a32c:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a32e:	cd 10       	cpse	r12, r13
    a330:	e6 cf       	rjmp	.-52     	; 0xa2fe <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a332:	0f 90       	pop	r0
    a334:	0f 90       	pop	r0
    a336:	df 91       	pop	r29
    a338:	cf 91       	pop	r28
    a33a:	1f 91       	pop	r17
    a33c:	0f 91       	pop	r16
    a33e:	ff 90       	pop	r15
    a340:	ef 90       	pop	r14
    a342:	df 90       	pop	r13
    a344:	cf 90       	pop	r12
    a346:	08 95       	ret

0000a348 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a348:	af 92       	push	r10
    a34a:	cf 92       	push	r12
    a34c:	ef 92       	push	r14
    a34e:	ff 92       	push	r15
    a350:	0f 93       	push	r16
    a352:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a354:	70 e0       	ldi	r23, 0x00	; 0
    a356:	f1 2c       	mov	r15, r1
    a358:	fb 01       	movw	r30, r22
    a35a:	e2 0f       	add	r30, r18
    a35c:	f1 1d       	adc	r31, r1
    a35e:	ee 16       	cp	r14, r30
    a360:	ff 06       	cpc	r15, r31
    a362:	a4 f4       	brge	.+40     	; 0xa38c <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a364:	ea 0c       	add	r14, r10
    a366:	f1 1c       	adc	r15, r1
    a368:	6e 15       	cp	r22, r14
    a36a:	7f 05       	cpc	r23, r15
    a36c:	7c f4       	brge	.+30     	; 0xa38c <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a36e:	28 2f       	mov	r18, r24
    a370:	30 e0       	ldi	r19, 0x00	; 0
    a372:	10 e0       	ldi	r17, 0x00	; 0
    a374:	c9 01       	movw	r24, r18
    a376:	84 0f       	add	r24, r20
    a378:	91 1d       	adc	r25, r1
    a37a:	08 17       	cp	r16, r24
    a37c:	19 07       	cpc	r17, r25
    a37e:	34 f4       	brge	.+12     	; 0xa38c <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a380:	0c 0d       	add	r16, r12
    a382:	11 1d       	adc	r17, r1
    a384:	81 e0       	ldi	r24, 0x01	; 1
    a386:	20 17       	cp	r18, r16
    a388:	31 07       	cpc	r19, r17
    a38a:	0c f0       	brlt	.+2      	; 0xa38e <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a38c:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a38e:	1f 91       	pop	r17
    a390:	0f 91       	pop	r16
    a392:	ff 90       	pop	r15
    a394:	ef 90       	pop	r14
    a396:	cf 90       	pop	r12
    a398:	af 90       	pop	r10
    a39a:	08 95       	ret

0000a39c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a39c:	cf 93       	push	r28
    a39e:	df 93       	push	r29
    a3a0:	d8 2f       	mov	r29, r24
    a3a2:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a3a4:	80 e0       	ldi	r24, 0x00	; 0
    a3a6:	90 e0       	ldi	r25, 0x00	; 0
    a3a8:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <GetPrngNumber>
    a3ac:	6f ef       	ldi	r22, 0xFF	; 255
    a3ae:	70 e0       	ldi	r23, 0x00	; 0
    a3b0:	0e 94 2b 73 	call	0xe656	; 0xe656 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a3b4:	6c 2f       	mov	r22, r28
    a3b6:	70 e0       	ldi	r23, 0x00	; 0
    a3b8:	6d 1b       	sub	r22, r29
    a3ba:	71 09       	sbc	r23, r1
    a3bc:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
}
    a3c0:	8d 0f       	add	r24, r29
    a3c2:	df 91       	pop	r29
    a3c4:	cf 91       	pop	r28
    a3c6:	08 95       	ret

0000a3c8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a3c8:	cf 93       	push	r28
    a3ca:	df 93       	push	r29
    a3cc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a3ce:	c0 e0       	ldi	r28, 0x00	; 0
    a3d0:	cd 17       	cp	r28, r29
    a3d2:	31 f0       	breq	.+12     	; 0xa3e0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a3d4:	8f ef       	ldi	r24, 0xFF	; 255
    a3d6:	9f ef       	ldi	r25, 0xFF	; 255
    a3d8:	0e 94 1e 41 	call	0x823c	; 0x823c <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a3dc:	cf 5f       	subi	r28, 0xFF	; 255
    a3de:	f8 cf       	rjmp	.-16     	; 0xa3d0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a3e0:	df 91       	pop	r29
    a3e2:	cf 91       	pop	r28
    a3e4:	08 95       	ret

0000a3e6 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a3e6:	df 92       	push	r13
    a3e8:	ef 92       	push	r14
    a3ea:	ff 92       	push	r15
    a3ec:	0f 93       	push	r16
    a3ee:	1f 93       	push	r17
    a3f0:	cf 93       	push	r28
    a3f2:	df 93       	push	r29
    a3f4:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a3f6:	fb 01       	movw	r30, r22
    a3f8:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a3fa:	31 96       	adiw	r30, 0x01	; 1
    a3fc:	64 91       	lpm	r22, Z
    a3fe:	5f ef       	ldi	r21, 0xFF	; 255
    a400:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a402:	24 2f       	mov	r18, r20
    a404:	21 70       	andi	r18, 0x01	; 1
    a406:	40 ff       	sbrs	r20, 0
    a408:	04 c0       	rjmp	.+8      	; 0xa412 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a40a:	95 2f       	mov	r25, r21
		dx=-1;
    a40c:	ff 24       	eor	r15, r15
    a40e:	fa 94       	dec	r15
    a410:	03 c0       	rjmp	.+6      	; 0xa418 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a412:	ff 24       	eor	r15, r15
    a414:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a416:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a418:	41 ff       	sbrs	r20, 1
    a41a:	05 c0       	rjmp	.+10     	; 0xa426 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a41c:	7f ef       	ldi	r23, 0xFF	; 255
    a41e:	76 0f       	add	r23, r22
		dy=-1;
    a420:	ee 24       	eor	r14, r14
    a422:	ea 94       	dec	r14
    a424:	03 c0       	rjmp	.+6      	; 0xa42c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a426:	ee 24       	eor	r14, r14
    a428:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a42a:	70 e0       	ldi	r23, 0x00	; 0
    a42c:	21 11       	cpse	r18, r1
    a42e:	01 c0       	rjmp	.+2      	; 0xa432 <LBMapSprite+0x4c>
    a430:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a432:	00 e0       	ldi	r16, 0x00	; 0
    a434:	06 17       	cp	r16, r22
    a436:	09 f1       	breq	.+66     	; 0xa47a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a438:	71 03       	mulsu	r23, r17
    a43a:	e0 01       	movw	r28, r0
    a43c:	11 24       	eor	r1, r1
    a43e:	d8 2e       	mov	r13, r24
    a440:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a442:	8d 15       	cp	r24, r13
    a444:	b1 f0       	breq	.+44     	; 0xa472 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a446:	9e 01       	movw	r18, r28
    a448:	29 0f       	add	r18, r25
    a44a:	31 1d       	adc	r19, r1
    a44c:	97 fd       	sbrc	r25, 7
    a44e:	3a 95       	dec	r19
    a450:	2e 5f       	subi	r18, 0xFE	; 254
    a452:	3f 4f       	sbci	r19, 0xFF	; 255
    a454:	fd 01       	movw	r30, r26
    a456:	e2 0f       	add	r30, r18
    a458:	f3 1f       	adc	r31, r19
    a45a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a45c:	34 e0       	ldi	r19, 0x04	; 4
    a45e:	83 9f       	mul	r24, r19
    a460:	f0 01       	movw	r30, r0
    a462:	11 24       	eor	r1, r1
    a464:	e4 52       	subi	r30, 0x24	; 36
    a466:	f0 4f       	sbci	r31, 0xF0	; 240
    a468:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a46a:	8f 5f       	subi	r24, 0xFF	; 255
    a46c:	43 83       	std	Z+3, r20	; 0x03
    a46e:	9f 0d       	add	r25, r15
    a470:	e8 cf       	rjmp	.-48     	; 0xa442 <LBMapSprite+0x5c>
    a472:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a474:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a476:	95 2f       	mov	r25, r21
    a478:	dd cf       	rjmp	.-70     	; 0xa434 <LBMapSprite+0x4e>
	}
}
    a47a:	df 91       	pop	r29
    a47c:	cf 91       	pop	r28
    a47e:	1f 91       	pop	r17
    a480:	0f 91       	pop	r16
    a482:	ff 90       	pop	r15
    a484:	ef 90       	pop	r14
    a486:	df 90       	pop	r13
    a488:	08 95       	ret

0000a48a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a48a:	df 92       	push	r13
    a48c:	ef 92       	push	r14
    a48e:	ff 92       	push	r15
    a490:	0f 93       	push	r16
    a492:	1f 93       	push	r17
    a494:	cf 93       	push	r28
    a496:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a498:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a49c:	98 e0       	ldi	r25, 0x08	; 8
    a49e:	a9 9f       	mul	r26, r25
    a4a0:	70 01       	movw	r14, r0
    a4a2:	11 24       	eor	r1, r1
    a4a4:	50 e0       	ldi	r21, 0x00	; 0
    a4a6:	38 ef       	ldi	r19, 0xF8	; 248
    a4a8:	a3 9f       	mul	r26, r19
    a4aa:	30 2d       	mov	r19, r0
    a4ac:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a4ae:	70 e0       	ldi	r23, 0x00	; 0
    a4b0:	70 17       	cp	r23, r16
    a4b2:	09 f1       	breq	.+66     	; 0xa4f6 <LBMoveSprite+0x6c>
    a4b4:	d4 2e       	mov	r13, r20
    a4b6:	13 2f       	mov	r17, r19
    a4b8:	14 0f       	add	r17, r20
    a4ba:	b8 2f       	mov	r27, r24
    a4bc:	b2 0f       	add	r27, r18
    a4be:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a4c0:	8b 17       	cp	r24, r27
    a4c2:	a9 f0       	breq	.+42     	; 0xa4ee <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a4c4:	c4 e0       	ldi	r28, 0x04	; 4
    a4c6:	8c 9f       	mul	r24, r28
    a4c8:	f0 01       	movw	r30, r0
    a4ca:	11 24       	eor	r1, r1
    a4cc:	ef 01       	movw	r28, r30
    a4ce:	c4 52       	subi	r28, 0x24	; 36
    a4d0:	d0 4f       	sbci	r29, 0xF0	; 240
    a4d2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a4d4:	a0 32       	cpi	r26, 0x20	; 32
    a4d6:	28 f4       	brcc	.+10     	; 0xa4e2 <LBMoveSprite+0x58>
    a4d8:	e4 16       	cp	r14, r20
    a4da:	f5 06       	cpc	r15, r21
    a4dc:	14 f4       	brge	.+4      	; 0xa4e2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a4de:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a4e0:	03 c0       	rjmp	.+6      	; 0xa4e8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a4e2:	e4 52       	subi	r30, 0x24	; 36
    a4e4:	f0 4f       	sbci	r31, 0xF0	; 240
    a4e6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a4e8:	8f 5f       	subi	r24, 0xFF	; 255
    a4ea:	98 5f       	subi	r25, 0xF8	; 248
    a4ec:	e9 cf       	rjmp	.-46     	; 0xa4c0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a4ee:	7f 5f       	subi	r23, 0xFF	; 255
    a4f0:	48 5f       	subi	r20, 0xF8	; 248
    a4f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a4f4:	dd cf       	rjmp	.-70     	; 0xa4b0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a4f6:	df 91       	pop	r29
    a4f8:	cf 91       	pop	r28
    a4fa:	1f 91       	pop	r17
    a4fc:	0f 91       	pop	r16
    a4fe:	ff 90       	pop	r15
    a500:	ef 90       	pop	r14
    a502:	df 90       	pop	r13
    a504:	08 95       	ret

0000a506 <LBRotateSprites>:

void LBRotateSprites()
{
    a506:	80 e0       	ldi	r24, 0x00	; 0
    a508:	90 e0       	ldi	r25, 0x00	; 0
    a50a:	dc 01       	movw	r26, r24
    a50c:	a4 52       	subi	r26, 0x24	; 36
    a50e:	b0 4f       	sbci	r27, 0xF0	; 240
    a510:	fc 01       	movw	r30, r24
    a512:	e0 5f       	subi	r30, 0xF0	; 240
    a514:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a516:	13 96       	adiw	r26, 0x03	; 3
    a518:	2c 91       	ld	r18, X
    a51a:	13 97       	sbiw	r26, 0x03	; 3
    a51c:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a51e:	12 96       	adiw	r26, 0x02	; 2
    a520:	2c 91       	ld	r18, X
    a522:	12 97       	sbiw	r26, 0x02	; 2
    a524:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a526:	2c 91       	ld	r18, X
    a528:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a52a:	11 96       	adiw	r26, 0x01	; 1
    a52c:	2c 91       	ld	r18, X
    a52e:	21 83       	std	Z+1, r18	; 0x01
    a530:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a532:	8c 33       	cpi	r24, 0x3C	; 60
    a534:	91 05       	cpc	r25, r1
    a536:	49 f7       	brne	.-46     	; 0xa50a <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a538:	80 91 01 05 	lds	r24, 0x0501
    a53c:	94 e0       	ldi	r25, 0x04	; 4
    a53e:	89 9f       	mul	r24, r25
    a540:	f0 01       	movw	r30, r0
    a542:	11 24       	eor	r1, r1
    a544:	e4 52       	subi	r30, 0x24	; 36
    a546:	f0 4f       	sbci	r31, 0xF0	; 240
    a548:	93 81       	ldd	r25, Z+3	; 0x03
    a54a:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a54e:	92 81       	ldd	r25, Z+2	; 0x02
    a550:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a554:	90 81       	ld	r25, Z
    a556:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a55a:	91 81       	ldd	r25, Z+1	; 0x01
    a55c:	90 93 4d 05 	sts	0x054D, r25
		rotate_index += 1;
    a560:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a562:	84 31       	cpi	r24, 0x14	; 20
    a564:	08 f0       	brcs	.+2      	; 0xa568 <LBRotateSprites+0x62>
    a566:	8f e0       	ldi	r24, 0x0F	; 15
    a568:	80 93 01 05 	sts	0x0501, r24
    a56c:	08 95       	ret

0000a56e <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a56e:	80 91 c7 0d 	lds	r24, 0x0DC7
}
    a572:	81 70       	andi	r24, 0x01	; 1
    a574:	08 95       	ret

0000a576 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a576:	8c e8       	ldi	r24, 0x8C	; 140
    a578:	90 e0       	ldi	r25, 0x00	; 0
    a57a:	90 93 93 0d 	sts	0x0D93, r25
    a57e:	80 93 92 0d 	sts	0x0D92, r24
    a582:	80 e0       	ldi	r24, 0x00	; 0
    a584:	90 e0       	ldi	r25, 0x00	; 0
    a586:	fc 01       	movw	r30, r24
    a588:	ec 57       	subi	r30, 0x7C	; 124
    a58a:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a58c:	e4 91       	lpm	r30, Z
    a58e:	dc 01       	movw	r26, r24
    a590:	ae 56       	subi	r26, 0x6E	; 110
    a592:	b2 4f       	sbci	r27, 0xF2	; 242
    a594:	12 96       	adiw	r26, 0x02	; 2
    a596:	ec 93       	st	X, r30
    a598:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a59a:	8e 31       	cpi	r24, 0x1E	; 30
    a59c:	91 05       	cpc	r25, r1
    a59e:	99 f7       	brne	.-26     	; 0xa586 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a5a0:	08 95       	ret

0000a5a2 <init_enemy_state>:

void init_enemy_state()
{
    a5a2:	80 e0       	ldi	r24, 0x00	; 0
    a5a4:	90 e0       	ldi	r25, 0x00	; 0
    a5a6:	9c 01       	movw	r18, r24
    a5a8:	2e 54       	subi	r18, 0x4E	; 78
    a5aa:	32 4f       	sbci	r19, 0xF2	; 242
    a5ac:	f9 01       	movw	r30, r18
    a5ae:	e4 5e       	subi	r30, 0xE4	; 228
    a5b0:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a5b2:	10 82       	st	Z, r1
    a5b4:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a5b6:	10 82       	st	Z, r1
    a5b8:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a5ba:	89 30       	cpi	r24, 0x09	; 9
    a5bc:	21 e0       	ldi	r18, 0x01	; 1
    a5be:	92 07       	cpc	r25, r18
    a5c0:	91 f7       	brne	.-28     	; 0xa5a6 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a5c2:	10 92 cd 0d 	sts	0x0DCD, r1
    a5c6:	08 95       	ret

0000a5c8 <init_player_shot>:
	}
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    a5c8:	81 11       	cpse	r24, r1
    a5ca:	53 c0       	rjmp	.+166    	; 0xa672 <init_player_shot+0xaa>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5cc:	10 92 e8 0d 	sts	0x0DE8, r1
	shot->hit_count = damage;
    a5d0:	81 e0       	ldi	r24, 0x01	; 1
    a5d2:	80 93 e9 0d 	sts	0x0DE9, r24
	shot->shot_speed = speed;
    a5d6:	90 e5       	ldi	r25, 0x50	; 80
    a5d8:	90 93 eb 0d 	sts	0x0DEB, r25
	shot->y_delta = y_delta;
    a5dc:	10 92 ec 0d 	sts	0x0DEC, r1
	shot->anim.anim_count = 1;
    a5e0:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.frames_per_anim = 1;
    a5e4:	80 93 ef 0d 	sts	0x0DEF, r24
	shot->anim.anims = anim;
    a5e8:	26 e8       	ldi	r18, 0x86	; 134
    a5ea:	3d e0       	ldi	r19, 0x0D	; 13
    a5ec:	30 93 f4 0d 	sts	0x0DF4, r19
    a5f0:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->anim.anims[0] = (char*) map;
    a5f4:	21 ec       	ldi	r18, 0xC1	; 193
    a5f6:	36 e3       	ldi	r19, 0x36	; 54
    a5f8:	30 93 87 0d 	sts	0x0D87, r19
    a5fc:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a600:	90 93 e6 0d 	sts	0x0DE6, r25
	shot->shared.vy = 0;
    a604:	10 92 e5 0d 	sts	0x0DE5, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a608:	10 92 fc 0d 	sts	0x0DFC, r1
	shot->hit_count = damage;
    a60c:	80 93 fd 0d 	sts	0x0DFD, r24
	shot->shot_speed = speed;
    a610:	90 93 ff 0d 	sts	0x0DFF, r25
	shot->y_delta = y_delta;
    a614:	10 92 00 0e 	sts	0x0E00, r1
	shot->anim.anim_count = 1;
    a618:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.frames_per_anim = 1;
    a61c:	80 93 03 0e 	sts	0x0E03, r24
	shot->anim.anims = anim;
    a620:	48 e3       	ldi	r20, 0x38	; 56
    a622:	50 e1       	ldi	r21, 0x10	; 16
    a624:	50 93 08 0e 	sts	0x0E08, r21
    a628:	40 93 07 0e 	sts	0x0E07, r20
	shot->anim.anims[0] = (char*) map;
    a62c:	30 93 39 10 	sts	0x1039, r19
    a630:	20 93 38 10 	sts	0x1038, r18
	shot->shared.vx = speed;
    a634:	90 93 fa 0d 	sts	0x0DFA, r25
	shot->shared.vy = 0;
    a638:	10 92 f9 0d 	sts	0x0DF9, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a63c:	10 92 10 0e 	sts	0x0E10, r1
	shot->hit_count = damage;
    a640:	80 93 11 0e 	sts	0x0E11, r24
	shot->shot_speed = speed;
    a644:	90 93 13 0e 	sts	0x0E13, r25
	shot->y_delta = y_delta;
    a648:	10 92 14 0e 	sts	0x0E14, r1
	shot->anim.anim_count = 1;
    a64c:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.frames_per_anim = 1;
    a650:	80 93 17 0e 	sts	0x0E17, r24
	shot->anim.anims = anim;
    a654:	48 e4       	ldi	r20, 0x48	; 72
    a656:	50 e1       	ldi	r21, 0x10	; 16
    a658:	50 93 1c 0e 	sts	0x0E1C, r21
    a65c:	40 93 1b 0e 	sts	0x0E1B, r20
	shot->anim.anims[0] = (char*) map;
    a660:	30 93 49 10 	sts	0x1049, r19
    a664:	20 93 48 10 	sts	0x1048, r18
	shot->shared.vx = speed;
    a668:	90 93 0e 0e 	sts	0x0E0E, r25
	shot->shared.vy = 0;
    a66c:	10 92 0d 0e 	sts	0x0E0D, r1
    a670:	c2 c1       	rjmp	.+900    	; 0xa9f6 <init_player_shot+0x42e>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a672:	82 30       	cpi	r24, 0x02	; 2
    a674:	09 f0       	breq	.+2      	; 0xa678 <init_player_shot+0xb0>
    a676:	55 c0       	rjmp	.+170    	; 0xa722 <init_player_shot+0x15a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a678:	91 e0       	ldi	r25, 0x01	; 1
    a67a:	90 93 e8 0d 	sts	0x0DE8, r25
	shot->hit_count = damage;
    a67e:	80 93 e9 0d 	sts	0x0DE9, r24
	shot->shot_speed = speed;
    a682:	24 e6       	ldi	r18, 0x64	; 100
    a684:	20 93 eb 0d 	sts	0x0DEB, r18
	shot->y_delta = y_delta;
    a688:	10 92 ec 0d 	sts	0x0DEC, r1
	shot->anim.anim_count = 1;
    a68c:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.frames_per_anim = 1;
    a690:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->anim.anims = anim;
    a694:	46 e8       	ldi	r20, 0x86	; 134
    a696:	5d e0       	ldi	r21, 0x0D	; 13
    a698:	50 93 f4 0d 	sts	0x0DF4, r21
    a69c:	40 93 f3 0d 	sts	0x0DF3, r20
	shot->anim.anims[0] = (char*) map;
    a6a0:	4e eb       	ldi	r20, 0xBE	; 190
    a6a2:	56 e3       	ldi	r21, 0x36	; 54
    a6a4:	50 93 87 0d 	sts	0x0D87, r21
    a6a8:	40 93 86 0d 	sts	0x0D86, r20
	shot->shared.vx = speed;
    a6ac:	20 93 e6 0d 	sts	0x0DE6, r18
	shot->shared.vy = 0;
    a6b0:	10 92 e5 0d 	sts	0x0DE5, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6b4:	90 93 fc 0d 	sts	0x0DFC, r25
	shot->hit_count = damage;
    a6b8:	80 93 fd 0d 	sts	0x0DFD, r24
	shot->shot_speed = speed;
    a6bc:	20 93 ff 0d 	sts	0x0DFF, r18
	shot->y_delta = y_delta;
    a6c0:	10 92 00 0e 	sts	0x0E00, r1
	shot->anim.anim_count = 1;
    a6c4:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.frames_per_anim = 1;
    a6c8:	90 93 03 0e 	sts	0x0E03, r25
	shot->anim.anims = anim;
    a6cc:	68 e3       	ldi	r22, 0x38	; 56
    a6ce:	70 e1       	ldi	r23, 0x10	; 16
    a6d0:	70 93 08 0e 	sts	0x0E08, r23
    a6d4:	60 93 07 0e 	sts	0x0E07, r22
	shot->anim.anims[0] = (char*) map;
    a6d8:	50 93 39 10 	sts	0x1039, r21
    a6dc:	40 93 38 10 	sts	0x1038, r20
	shot->shared.vx = speed;
    a6e0:	20 93 fa 0d 	sts	0x0DFA, r18
	shot->shared.vy = 0;
    a6e4:	10 92 f9 0d 	sts	0x0DF9, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6e8:	90 93 10 0e 	sts	0x0E10, r25
	shot->hit_count = damage;
    a6ec:	80 93 11 0e 	sts	0x0E11, r24
	shot->shot_speed = speed;
    a6f0:	20 93 13 0e 	sts	0x0E13, r18
	shot->y_delta = y_delta;
    a6f4:	10 92 14 0e 	sts	0x0E14, r1
	shot->anim.anim_count = 1;
    a6f8:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.frames_per_anim = 1;
    a6fc:	90 93 17 0e 	sts	0x0E17, r25
	shot->anim.anims = anim;
    a700:	68 e4       	ldi	r22, 0x48	; 72
    a702:	70 e1       	ldi	r23, 0x10	; 16
    a704:	70 93 1c 0e 	sts	0x0E1C, r23
    a708:	60 93 1b 0e 	sts	0x0E1B, r22
	shot->anim.anims[0] = (char*) map;
    a70c:	50 93 49 10 	sts	0x1049, r21
    a710:	40 93 48 10 	sts	0x1048, r20
	shot->shared.vx = speed;
    a714:	20 93 0e 0e 	sts	0x0E0E, r18
	shot->shared.vy = 0;
    a718:	10 92 0d 0e 	sts	0x0E0D, r1
	else if (level == 2) // Fire
	{
		init_shot(&game.player.shot[0], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a71c:	90 93 df 0d 	sts	0x0DDF, r25
    a720:	08 95       	ret
		
	}
	else if (level == 4) // Jungle
    a722:	84 30       	cpi	r24, 0x04	; 4
    a724:	09 f0       	breq	.+2      	; 0xa728 <init_player_shot+0x160>
    a726:	56 c0       	rjmp	.+172    	; 0xa7d4 <init_player_shot+0x20c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a728:	80 93 e8 0d 	sts	0x0DE8, r24
	shot->hit_count = damage;
    a72c:	81 e0       	ldi	r24, 0x01	; 1
    a72e:	80 93 e9 0d 	sts	0x0DE9, r24
	shot->shot_speed = speed;
    a732:	9f e7       	ldi	r25, 0x7F	; 127
    a734:	90 93 eb 0d 	sts	0x0DEB, r25
	shot->y_delta = y_delta;
    a738:	28 ef       	ldi	r18, 0xF8	; 248
    a73a:	20 93 ec 0d 	sts	0x0DEC, r18
	shot->anim.anim_count = 1;
    a73e:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.frames_per_anim = 1;
    a742:	80 93 ef 0d 	sts	0x0DEF, r24
	shot->anim.anims = anim;
    a746:	26 e8       	ldi	r18, 0x86	; 134
    a748:	3d e0       	ldi	r19, 0x0D	; 13
    a74a:	30 93 f4 0d 	sts	0x0DF4, r19
    a74e:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->anim.anims[0] = (char*) map;
    a752:	21 ec       	ldi	r18, 0xC1	; 193
    a754:	36 e3       	ldi	r19, 0x36	; 54
    a756:	30 93 87 0d 	sts	0x0D87, r19
    a75a:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a75e:	90 93 e6 0d 	sts	0x0DE6, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a762:	21 e8       	ldi	r18, 0x81	; 129
    a764:	20 93 e5 0d 	sts	0x0DE5, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a768:	22 e0       	ldi	r18, 0x02	; 2
    a76a:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->hit_count = damage;
    a76e:	20 93 fd 0d 	sts	0x0DFD, r18
	shot->shot_speed = speed;
    a772:	90 93 ff 0d 	sts	0x0DFF, r25
	shot->y_delta = y_delta;
    a776:	10 92 00 0e 	sts	0x0E00, r1
	shot->anim.anim_count = 1;
    a77a:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.frames_per_anim = 1;
    a77e:	80 93 03 0e 	sts	0x0E03, r24
	shot->anim.anims = anim;
    a782:	48 e3       	ldi	r20, 0x38	; 56
    a784:	50 e1       	ldi	r21, 0x10	; 16
    a786:	50 93 08 0e 	sts	0x0E08, r21
    a78a:	40 93 07 0e 	sts	0x0E07, r20
	shot->anim.anims[0] = (char*) map;
    a78e:	45 eb       	ldi	r20, 0xB5	; 181
    a790:	56 e3       	ldi	r21, 0x36	; 54
    a792:	50 93 39 10 	sts	0x1039, r21
    a796:	40 93 38 10 	sts	0x1038, r20
	shot->shared.vx = speed;
    a79a:	90 93 fa 0d 	sts	0x0DFA, r25
	shot->shared.vy = 0;
    a79e:	10 92 f9 0d 	sts	0x0DF9, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7a2:	20 93 10 0e 	sts	0x0E10, r18
	shot->hit_count = damage;
    a7a6:	20 93 11 0e 	sts	0x0E11, r18
	shot->shot_speed = speed;
    a7aa:	90 93 13 0e 	sts	0x0E13, r25
	shot->y_delta = y_delta;
    a7ae:	10 92 14 0e 	sts	0x0E14, r1
	shot->anim.anim_count = 1;
    a7b2:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.frames_per_anim = 1;
    a7b6:	80 93 17 0e 	sts	0x0E17, r24
	shot->anim.anims = anim;
    a7ba:	68 e4       	ldi	r22, 0x48	; 72
    a7bc:	70 e1       	ldi	r23, 0x10	; 16
    a7be:	70 93 1c 0e 	sts	0x0E1C, r23
    a7c2:	60 93 1b 0e 	sts	0x0E1B, r22
	shot->anim.anims[0] = (char*) map;
    a7c6:	50 93 49 10 	sts	0x1049, r21
    a7ca:	40 93 48 10 	sts	0x1048, r20
	shot->shared.vx = speed;
    a7ce:	90 93 0e 0e 	sts	0x0E0E, r25
    a7d2:	56 c0       	rjmp	.+172    	; 0xa880 <init_player_shot+0x2b8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a7d4:	86 30       	cpi	r24, 0x06	; 6
    a7d6:	09 f0       	breq	.+2      	; 0xa7da <init_player_shot+0x212>
    a7d8:	58 c0       	rjmp	.+176    	; 0xa88a <init_player_shot+0x2c2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7da:	33 e0       	ldi	r19, 0x03	; 3
    a7dc:	30 93 e8 0d 	sts	0x0DE8, r19
	shot->hit_count = damage;
    a7e0:	22 e0       	ldi	r18, 0x02	; 2
    a7e2:	20 93 e9 0d 	sts	0x0DE9, r18
	shot->shot_speed = speed;
    a7e6:	8f e7       	ldi	r24, 0x7F	; 127
    a7e8:	80 93 eb 0d 	sts	0x0DEB, r24
	shot->y_delta = y_delta;
    a7ec:	98 ef       	ldi	r25, 0xF8	; 248
    a7ee:	90 93 ec 0d 	sts	0x0DEC, r25
	shot->anim.anim_count = 1;
    a7f2:	91 e0       	ldi	r25, 0x01	; 1
    a7f4:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.frames_per_anim = 1;
    a7f8:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->anim.anims = anim;
    a7fc:	46 e8       	ldi	r20, 0x86	; 134
    a7fe:	5d e0       	ldi	r21, 0x0D	; 13
    a800:	50 93 f4 0d 	sts	0x0DF4, r21
    a804:	40 93 f3 0d 	sts	0x0DF3, r20
	shot->anim.anims[0] = (char*) map;
    a808:	44 ec       	ldi	r20, 0xC4	; 196
    a80a:	56 e3       	ldi	r21, 0x36	; 54
    a80c:	50 93 87 0d 	sts	0x0D87, r21
    a810:	40 93 86 0d 	sts	0x0D86, r20
	shot->shared.vx = speed;
    a814:	80 93 e6 0d 	sts	0x0DE6, r24
	shot->shared.vy = 0;
    a818:	10 92 e5 0d 	sts	0x0DE5, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a81c:	30 93 fc 0d 	sts	0x0DFC, r19
	shot->hit_count = damage;
    a820:	20 93 fd 0d 	sts	0x0DFD, r18
	shot->shot_speed = speed;
    a824:	80 93 ff 0d 	sts	0x0DFF, r24
	shot->y_delta = y_delta;
    a828:	10 92 00 0e 	sts	0x0E00, r1
	shot->anim.anim_count = 1;
    a82c:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.frames_per_anim = 1;
    a830:	90 93 03 0e 	sts	0x0E03, r25
	shot->anim.anims = anim;
    a834:	68 e3       	ldi	r22, 0x38	; 56
    a836:	70 e1       	ldi	r23, 0x10	; 16
    a838:	70 93 08 0e 	sts	0x0E08, r23
    a83c:	60 93 07 0e 	sts	0x0E07, r22
	shot->anim.anims[0] = (char*) map;
    a840:	50 93 39 10 	sts	0x1039, r21
    a844:	40 93 38 10 	sts	0x1038, r20
	shot->shared.vx = speed;
    a848:	80 93 fa 0d 	sts	0x0DFA, r24
	shot->shared.vy = 0;
    a84c:	10 92 f9 0d 	sts	0x0DF9, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a850:	30 93 10 0e 	sts	0x0E10, r19
	shot->hit_count = damage;
    a854:	20 93 11 0e 	sts	0x0E11, r18
	shot->shot_speed = speed;
    a858:	80 93 13 0e 	sts	0x0E13, r24
	shot->y_delta = y_delta;
    a85c:	10 92 14 0e 	sts	0x0E14, r1
	shot->anim.anim_count = 1;
    a860:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.frames_per_anim = 1;
    a864:	90 93 17 0e 	sts	0x0E17, r25
	shot->anim.anims = anim;
    a868:	68 e4       	ldi	r22, 0x48	; 72
    a86a:	70 e1       	ldi	r23, 0x10	; 16
    a86c:	70 93 1c 0e 	sts	0x0E1C, r23
    a870:	60 93 1b 0e 	sts	0x0E1B, r22
	shot->anim.anims[0] = (char*) map;
    a874:	50 93 49 10 	sts	0x1049, r21
    a878:	40 93 48 10 	sts	0x1048, r20
	shot->shared.vx = speed;
    a87c:	80 93 0e 0e 	sts	0x0E0E, r24
	shot->shared.vy = 0;
    a880:	10 92 0d 0e 	sts	0x0E0D, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a884:	20 93 df 0d 	sts	0x0DDF, r18
    a888:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a88a:	88 30       	cpi	r24, 0x08	; 8
    a88c:	09 f0       	breq	.+2      	; 0xa890 <init_player_shot+0x2c8>
    a88e:	5b c0       	rjmp	.+182    	; 0xa946 <init_player_shot+0x37e>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a890:	33 e0       	ldi	r19, 0x03	; 3
    a892:	30 93 e8 0d 	sts	0x0DE8, r19
	shot->hit_count = damage;
    a896:	42 e0       	ldi	r20, 0x02	; 2
    a898:	40 93 e9 0d 	sts	0x0DE9, r20
	shot->shot_speed = speed;
    a89c:	2f e7       	ldi	r18, 0x7F	; 127
    a89e:	20 93 eb 0d 	sts	0x0DEB, r18
	shot->y_delta = y_delta;
    a8a2:	98 ef       	ldi	r25, 0xF8	; 248
    a8a4:	90 93 ec 0d 	sts	0x0DEC, r25
	shot->anim.anim_count = 1;
    a8a8:	91 e0       	ldi	r25, 0x01	; 1
    a8aa:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.frames_per_anim = 1;
    a8ae:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->anim.anims = anim;
    a8b2:	66 e8       	ldi	r22, 0x86	; 134
    a8b4:	7d e0       	ldi	r23, 0x0D	; 13
    a8b6:	70 93 f4 0d 	sts	0x0DF4, r23
    a8ba:	60 93 f3 0d 	sts	0x0DF3, r22
	shot->anim.anims[0] = (char*) map;
    a8be:	64 ec       	ldi	r22, 0xC4	; 196
    a8c0:	76 e3       	ldi	r23, 0x36	; 54
    a8c2:	70 93 87 0d 	sts	0x0D87, r23
    a8c6:	60 93 86 0d 	sts	0x0D86, r22
	shot->shared.vx = speed;
    a8ca:	20 93 e6 0d 	sts	0x0DE6, r18
	shot->shared.vy = 0;
    a8ce:	10 92 e5 0d 	sts	0x0DE5, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a8d2:	90 93 fc 0d 	sts	0x0DFC, r25
	shot->hit_count = damage;
    a8d6:	40 93 fd 0d 	sts	0x0DFD, r20
	shot->shot_speed = speed;
    a8da:	54 e6       	ldi	r21, 0x64	; 100
    a8dc:	50 93 ff 0d 	sts	0x0DFF, r21
	shot->y_delta = y_delta;
    a8e0:	10 92 00 0e 	sts	0x0E00, r1
	shot->anim.anim_count = 1;
    a8e4:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.frames_per_anim = 1;
    a8e8:	90 93 03 0e 	sts	0x0E03, r25
	shot->anim.anims = anim;
    a8ec:	e8 e3       	ldi	r30, 0x38	; 56
    a8ee:	f0 e1       	ldi	r31, 0x10	; 16
    a8f0:	f0 93 08 0e 	sts	0x0E08, r31
    a8f4:	e0 93 07 0e 	sts	0x0E07, r30
	shot->anim.anims[0] = (char*) map;
    a8f8:	ee eb       	ldi	r30, 0xBE	; 190
    a8fa:	f6 e3       	ldi	r31, 0x36	; 54
    a8fc:	f0 93 39 10 	sts	0x1039, r31
    a900:	e0 93 38 10 	sts	0x1038, r30
	shot->shared.vx = speed;
    a904:	50 93 fa 0d 	sts	0x0DFA, r21
	shot->shared.vy = 0;
    a908:	10 92 f9 0d 	sts	0x0DF9, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a90c:	30 93 10 0e 	sts	0x0E10, r19
	shot->hit_count = damage;
    a910:	40 93 11 0e 	sts	0x0E11, r20
	shot->shot_speed = speed;
    a914:	20 93 13 0e 	sts	0x0E13, r18
	shot->y_delta = y_delta;
    a918:	80 93 14 0e 	sts	0x0E14, r24
	shot->anim.anim_count = 1;
    a91c:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.frames_per_anim = 1;
    a920:	90 93 17 0e 	sts	0x0E17, r25
	shot->anim.anims = anim;
    a924:	88 e4       	ldi	r24, 0x48	; 72
    a926:	90 e1       	ldi	r25, 0x10	; 16
    a928:	90 93 1c 0e 	sts	0x0E1C, r25
    a92c:	80 93 1b 0e 	sts	0x0E1B, r24
	shot->anim.anims[0] = (char*) map;
    a930:	70 93 49 10 	sts	0x1049, r23
    a934:	60 93 48 10 	sts	0x1048, r22
	shot->shared.vx = speed;
    a938:	20 93 0e 0e 	sts	0x0E0E, r18
	shot->shared.vy = 0;
    a93c:	10 92 0d 0e 	sts	0x0E0D, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a940:	30 93 df 0d 	sts	0x0DDF, r19
    a944:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a946:	55 e0       	ldi	r21, 0x05	; 5
    a948:	50 93 e8 0d 	sts	0x0DE8, r21
	shot->hit_count = damage;
    a94c:	42 e0       	ldi	r20, 0x02	; 2
    a94e:	40 93 e9 0d 	sts	0x0DE9, r20
	shot->shot_speed = speed;
    a952:	9f e7       	ldi	r25, 0x7F	; 127
    a954:	90 93 eb 0d 	sts	0x0DEB, r25
	shot->y_delta = y_delta;
    a958:	10 92 ec 0d 	sts	0x0DEC, r1
	shot->anim.anim_count = 1;
    a95c:	81 e0       	ldi	r24, 0x01	; 1
    a95e:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.frames_per_anim = 1;
    a962:	80 93 ef 0d 	sts	0x0DEF, r24
	shot->anim.anims = anim;
    a966:	26 e8       	ldi	r18, 0x86	; 134
    a968:	3d e0       	ldi	r19, 0x0D	; 13
    a96a:	30 93 f4 0d 	sts	0x0DF4, r19
    a96e:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->anim.anims[0] = (char*) map;
    a972:	2b eb       	ldi	r18, 0xBB	; 187
    a974:	36 e3       	ldi	r19, 0x36	; 54
    a976:	30 93 87 0d 	sts	0x0D87, r19
    a97a:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a97e:	90 93 e6 0d 	sts	0x0DE6, r25
	shot->shared.vy = 0;
    a982:	10 92 e5 0d 	sts	0x0DE5, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a986:	50 93 fc 0d 	sts	0x0DFC, r21
	shot->hit_count = damage;
    a98a:	40 93 fd 0d 	sts	0x0DFD, r20
	shot->shot_speed = speed;
    a98e:	90 93 ff 0d 	sts	0x0DFF, r25
	shot->y_delta = y_delta;
    a992:	10 92 00 0e 	sts	0x0E00, r1
	shot->anim.anim_count = 1;
    a996:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.frames_per_anim = 1;
    a99a:	80 93 03 0e 	sts	0x0E03, r24
	shot->anim.anims = anim;
    a99e:	48 e3       	ldi	r20, 0x38	; 56
    a9a0:	50 e1       	ldi	r21, 0x10	; 16
    a9a2:	50 93 08 0e 	sts	0x0E08, r21
    a9a6:	40 93 07 0e 	sts	0x0E07, r20
	shot->anim.anims[0] = (char*) map;
    a9aa:	30 93 39 10 	sts	0x1039, r19
    a9ae:	20 93 38 10 	sts	0x1038, r18
	shot->shared.vx = speed;
    a9b2:	90 93 fa 0d 	sts	0x0DFA, r25
	shot->shared.vy = 0;
    a9b6:	10 92 f9 0d 	sts	0x0DF9, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a9ba:	26 e0       	ldi	r18, 0x06	; 6
    a9bc:	20 93 10 0e 	sts	0x0E10, r18
	shot->hit_count = damage;
    a9c0:	24 e0       	ldi	r18, 0x04	; 4
    a9c2:	20 93 11 0e 	sts	0x0E11, r18
	shot->shot_speed = speed;
    a9c6:	90 93 13 0e 	sts	0x0E13, r25
	shot->y_delta = y_delta;
    a9ca:	10 92 14 0e 	sts	0x0E14, r1
	shot->anim.anim_count = 1;
    a9ce:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.frames_per_anim = 1;
    a9d2:	80 93 17 0e 	sts	0x0E17, r24
	shot->anim.anims = anim;
    a9d6:	28 e4       	ldi	r18, 0x48	; 72
    a9d8:	30 e1       	ldi	r19, 0x10	; 16
    a9da:	30 93 1c 0e 	sts	0x0E1C, r19
    a9de:	20 93 1b 0e 	sts	0x0E1B, r18
	shot->anim.anims[0] = (char*) map;
    a9e2:	28 eb       	ldi	r18, 0xB8	; 184
    a9e4:	36 e3       	ldi	r19, 0x36	; 54
    a9e6:	30 93 49 10 	sts	0x1049, r19
    a9ea:	20 93 48 10 	sts	0x1048, r18
	shot->shared.vx = speed;
    a9ee:	90 93 0e 0e 	sts	0x0E0E, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a9f2:	90 93 0d 0e 	sts	0x0E0D, r25
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a9f6:	80 93 df 0d 	sts	0x0DDF, r24
    a9fa:	08 95       	ret

0000a9fc <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a9fc:	81 11       	cpse	r24, r1
    a9fe:	52 c0       	rjmp	.+164    	; 0xaaa4 <init_boss_shot+0xa8>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa00:	81 e0       	ldi	r24, 0x01	; 1
    aa02:	80 93 63 0e 	sts	0x0E63, r24
	shot->hit_count = damage;
    aa06:	42 e0       	ldi	r20, 0x02	; 2
    aa08:	40 93 64 0e 	sts	0x0E64, r20
	shot->shot_speed = speed;
    aa0c:	94 e6       	ldi	r25, 0x64	; 100
    aa0e:	90 93 66 0e 	sts	0x0E66, r25
	shot->y_delta = y_delta;
    aa12:	10 92 67 0e 	sts	0x0E67, r1
	shot->anim.anim_count = 1;
    aa16:	80 93 69 0e 	sts	0x0E69, r24
	shot->anim.frames_per_anim = 1;
    aa1a:	80 93 6a 0e 	sts	0x0E6A, r24
	shot->anim.anims = anim;
    aa1e:	22 ed       	ldi	r18, 0xD2	; 210
    aa20:	3f e0       	ldi	r19, 0x0F	; 15
    aa22:	30 93 6f 0e 	sts	0x0E6F, r19
    aa26:	20 93 6e 0e 	sts	0x0E6E, r18
	shot->anim.anims[0] = (char*) map;
    aa2a:	2e eb       	ldi	r18, 0xBE	; 190
    aa2c:	36 e3       	ldi	r19, 0x36	; 54
    aa2e:	30 93 d3 0f 	sts	0x0FD3, r19
    aa32:	20 93 d2 0f 	sts	0x0FD2, r18
	shot->shared.vx = speed;
    aa36:	90 93 61 0e 	sts	0x0E61, r25
	shot->shared.vy = 0;
    aa3a:	10 92 60 0e 	sts	0x0E60, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa3e:	80 93 77 0e 	sts	0x0E77, r24
	shot->hit_count = damage;
    aa42:	40 93 78 0e 	sts	0x0E78, r20
	shot->shot_speed = speed;
    aa46:	90 93 7a 0e 	sts	0x0E7A, r25
	shot->y_delta = y_delta;
    aa4a:	10 92 7b 0e 	sts	0x0E7B, r1
	shot->anim.anim_count = 1;
    aa4e:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->anim.frames_per_anim = 1;
    aa52:	80 93 7e 0e 	sts	0x0E7E, r24
	shot->anim.anims = anim;
    aa56:	6c e4       	ldi	r22, 0x4C	; 76
    aa58:	70 e1       	ldi	r23, 0x10	; 16
    aa5a:	70 93 83 0e 	sts	0x0E83, r23
    aa5e:	60 93 82 0e 	sts	0x0E82, r22
	shot->anim.anims[0] = (char*) map;
    aa62:	30 93 4d 10 	sts	0x104D, r19
    aa66:	20 93 4c 10 	sts	0x104C, r18
	shot->shared.vx = speed;
    aa6a:	90 93 75 0e 	sts	0x0E75, r25
	shot->shared.vy = 0;
    aa6e:	10 92 74 0e 	sts	0x0E74, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa72:	80 93 8b 0e 	sts	0x0E8B, r24
	shot->hit_count = damage;
    aa76:	40 93 8c 0e 	sts	0x0E8C, r20
	shot->shot_speed = speed;
    aa7a:	90 93 8e 0e 	sts	0x0E8E, r25
	shot->y_delta = y_delta;
    aa7e:	10 92 8f 0e 	sts	0x0E8F, r1
	shot->anim.anim_count = 1;
    aa82:	80 93 91 0e 	sts	0x0E91, r24
	shot->anim.frames_per_anim = 1;
    aa86:	80 93 92 0e 	sts	0x0E92, r24
	shot->anim.anims = anim;
    aa8a:	4e e2       	ldi	r20, 0x2E	; 46
    aa8c:	50 e1       	ldi	r21, 0x10	; 16
    aa8e:	50 93 97 0e 	sts	0x0E97, r21
    aa92:	40 93 96 0e 	sts	0x0E96, r20
	shot->anim.anims[0] = (char*) map;
    aa96:	30 93 2f 10 	sts	0x102F, r19
    aa9a:	20 93 2e 10 	sts	0x102E, r18
	shot->shared.vx = speed;
    aa9e:	90 93 89 0e 	sts	0x0E89, r25
    aaa2:	58 c0       	rjmp	.+176    	; 0xab54 <init_boss_shot+0x158>
		init_shot(&game.boss.shot[0], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    aaa4:	82 30       	cpi	r24, 0x02	; 2
    aaa6:	09 f0       	breq	.+2      	; 0xaaaa <init_boss_shot+0xae>
    aaa8:	58 c0       	rjmp	.+176    	; 0xab5a <init_boss_shot+0x15e>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aaaa:	94 e0       	ldi	r25, 0x04	; 4
    aaac:	90 93 63 0e 	sts	0x0E63, r25
	shot->hit_count = damage;
    aab0:	91 e0       	ldi	r25, 0x01	; 1
    aab2:	90 93 64 0e 	sts	0x0E64, r25
	shot->shot_speed = speed;
    aab6:	2f e7       	ldi	r18, 0x7F	; 127
    aab8:	20 93 66 0e 	sts	0x0E66, r18
	shot->y_delta = y_delta;
    aabc:	38 ef       	ldi	r19, 0xF8	; 248
    aabe:	30 93 67 0e 	sts	0x0E67, r19
	shot->anim.anim_count = 1;
    aac2:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.frames_per_anim = 1;
    aac6:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->anim.anims = anim;
    aaca:	42 ed       	ldi	r20, 0xD2	; 210
    aacc:	5f e0       	ldi	r21, 0x0F	; 15
    aace:	50 93 6f 0e 	sts	0x0E6F, r21
    aad2:	40 93 6e 0e 	sts	0x0E6E, r20
	shot->anim.anims[0] = (char*) map;
    aad6:	41 ec       	ldi	r20, 0xC1	; 193
    aad8:	56 e3       	ldi	r21, 0x36	; 54
    aada:	50 93 d3 0f 	sts	0x0FD3, r21
    aade:	40 93 d2 0f 	sts	0x0FD2, r20
	shot->shared.vx = speed;
    aae2:	20 93 61 0e 	sts	0x0E61, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    aae6:	31 e8       	ldi	r19, 0x81	; 129
    aae8:	30 93 60 0e 	sts	0x0E60, r19
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aaec:	80 93 77 0e 	sts	0x0E77, r24
	shot->hit_count = damage;
    aaf0:	80 93 78 0e 	sts	0x0E78, r24
	shot->shot_speed = speed;
    aaf4:	20 93 7a 0e 	sts	0x0E7A, r18
	shot->y_delta = y_delta;
    aaf8:	10 92 7b 0e 	sts	0x0E7B, r1
	shot->anim.anim_count = 1;
    aafc:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.frames_per_anim = 1;
    ab00:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->anim.anims = anim;
    ab04:	4c e4       	ldi	r20, 0x4C	; 76
    ab06:	50 e1       	ldi	r21, 0x10	; 16
    ab08:	50 93 83 0e 	sts	0x0E83, r21
    ab0c:	40 93 82 0e 	sts	0x0E82, r20
	shot->anim.anims[0] = (char*) map;
    ab10:	45 eb       	ldi	r20, 0xB5	; 181
    ab12:	56 e3       	ldi	r21, 0x36	; 54
    ab14:	50 93 4d 10 	sts	0x104D, r21
    ab18:	40 93 4c 10 	sts	0x104C, r20
	shot->shared.vx = speed;
    ab1c:	20 93 75 0e 	sts	0x0E75, r18
	shot->shared.vy = 0;
    ab20:	10 92 74 0e 	sts	0x0E74, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab24:	80 93 8b 0e 	sts	0x0E8B, r24
	shot->hit_count = damage;
    ab28:	80 93 8c 0e 	sts	0x0E8C, r24
	shot->shot_speed = speed;
    ab2c:	20 93 8e 0e 	sts	0x0E8E, r18
	shot->y_delta = y_delta;
    ab30:	10 92 8f 0e 	sts	0x0E8F, r1
	shot->anim.anim_count = 1;
    ab34:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.frames_per_anim = 1;
    ab38:	90 93 92 0e 	sts	0x0E92, r25
	shot->anim.anims = anim;
    ab3c:	6e e2       	ldi	r22, 0x2E	; 46
    ab3e:	70 e1       	ldi	r23, 0x10	; 16
    ab40:	70 93 97 0e 	sts	0x0E97, r23
    ab44:	60 93 96 0e 	sts	0x0E96, r22
	shot->anim.anims[0] = (char*) map;
    ab48:	50 93 2f 10 	sts	0x102F, r21
    ab4c:	40 93 2e 10 	sts	0x102E, r20
	shot->shared.vx = speed;
    ab50:	20 93 89 0e 	sts	0x0E89, r18
	shot->shared.vy = 0;
    ab54:	10 92 88 0e 	sts	0x0E88, r1
    ab58:	0f c1       	rjmp	.+542    	; 0xad78 <init_boss_shot+0x37c>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    ab5a:	84 30       	cpi	r24, 0x04	; 4
    ab5c:	09 f0       	breq	.+2      	; 0xab60 <init_boss_shot+0x164>
    ab5e:	54 c0       	rjmp	.+168    	; 0xac08 <init_boss_shot+0x20c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab60:	33 e0       	ldi	r19, 0x03	; 3
    ab62:	30 93 63 0e 	sts	0x0E63, r19
	shot->hit_count = damage;
    ab66:	22 e0       	ldi	r18, 0x02	; 2
    ab68:	20 93 64 0e 	sts	0x0E64, r18
	shot->shot_speed = speed;
    ab6c:	8f e7       	ldi	r24, 0x7F	; 127
    ab6e:	80 93 66 0e 	sts	0x0E66, r24
	shot->y_delta = y_delta;
    ab72:	98 ef       	ldi	r25, 0xF8	; 248
    ab74:	90 93 67 0e 	sts	0x0E67, r25
	shot->anim.anim_count = 1;
    ab78:	91 e0       	ldi	r25, 0x01	; 1
    ab7a:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.frames_per_anim = 1;
    ab7e:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->anim.anims = anim;
    ab82:	42 ed       	ldi	r20, 0xD2	; 210
    ab84:	5f e0       	ldi	r21, 0x0F	; 15
    ab86:	50 93 6f 0e 	sts	0x0E6F, r21
    ab8a:	40 93 6e 0e 	sts	0x0E6E, r20
	shot->anim.anims[0] = (char*) map;
    ab8e:	44 ec       	ldi	r20, 0xC4	; 196
    ab90:	56 e3       	ldi	r21, 0x36	; 54
    ab92:	50 93 d3 0f 	sts	0x0FD3, r21
    ab96:	40 93 d2 0f 	sts	0x0FD2, r20
	shot->shared.vx = speed;
    ab9a:	80 93 61 0e 	sts	0x0E61, r24
	shot->shared.vy = 0;
    ab9e:	10 92 60 0e 	sts	0x0E60, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aba2:	30 93 77 0e 	sts	0x0E77, r19
	shot->hit_count = damage;
    aba6:	20 93 78 0e 	sts	0x0E78, r18
	shot->shot_speed = speed;
    abaa:	80 93 7a 0e 	sts	0x0E7A, r24
	shot->y_delta = y_delta;
    abae:	10 92 7b 0e 	sts	0x0E7B, r1
	shot->anim.anim_count = 1;
    abb2:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.frames_per_anim = 1;
    abb6:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->anim.anims = anim;
    abba:	6c e4       	ldi	r22, 0x4C	; 76
    abbc:	70 e1       	ldi	r23, 0x10	; 16
    abbe:	70 93 83 0e 	sts	0x0E83, r23
    abc2:	60 93 82 0e 	sts	0x0E82, r22
	shot->anim.anims[0] = (char*) map;
    abc6:	50 93 4d 10 	sts	0x104D, r21
    abca:	40 93 4c 10 	sts	0x104C, r20
	shot->shared.vx = speed;
    abce:	80 93 75 0e 	sts	0x0E75, r24
	shot->shared.vy = 0;
    abd2:	10 92 74 0e 	sts	0x0E74, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    abd6:	30 93 8b 0e 	sts	0x0E8B, r19
	shot->hit_count = damage;
    abda:	20 93 8c 0e 	sts	0x0E8C, r18
	shot->shot_speed = speed;
    abde:	80 93 8e 0e 	sts	0x0E8E, r24
	shot->y_delta = y_delta;
    abe2:	10 92 8f 0e 	sts	0x0E8F, r1
	shot->anim.anim_count = 1;
    abe6:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.frames_per_anim = 1;
    abea:	90 93 92 0e 	sts	0x0E92, r25
	shot->anim.anims = anim;
    abee:	6e e2       	ldi	r22, 0x2E	; 46
    abf0:	70 e1       	ldi	r23, 0x10	; 16
    abf2:	70 93 97 0e 	sts	0x0E97, r23
    abf6:	60 93 96 0e 	sts	0x0E96, r22
	shot->anim.anims[0] = (char*) map;
    abfa:	50 93 2f 10 	sts	0x102F, r21
    abfe:	40 93 2e 10 	sts	0x102E, r20
	shot->shared.vx = speed;
    ac02:	80 93 89 0e 	sts	0x0E89, r24
    ac06:	5a c0       	rjmp	.+180    	; 0xacbc <init_boss_shot+0x2c0>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    ac08:	86 30       	cpi	r24, 0x06	; 6
    ac0a:	09 f0       	breq	.+2      	; 0xac0e <init_boss_shot+0x212>
    ac0c:	5c c0       	rjmp	.+184    	; 0xacc6 <init_boss_shot+0x2ca>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac0e:	23 e0       	ldi	r18, 0x03	; 3
    ac10:	20 93 63 0e 	sts	0x0E63, r18
	shot->hit_count = damage;
    ac14:	32 e0       	ldi	r19, 0x02	; 2
    ac16:	30 93 64 0e 	sts	0x0E64, r19
	shot->shot_speed = speed;
    ac1a:	9f e7       	ldi	r25, 0x7F	; 127
    ac1c:	90 93 66 0e 	sts	0x0E66, r25
	shot->y_delta = y_delta;
    ac20:	88 ef       	ldi	r24, 0xF8	; 248
    ac22:	80 93 67 0e 	sts	0x0E67, r24
	shot->anim.anim_count = 1;
    ac26:	81 e0       	ldi	r24, 0x01	; 1
    ac28:	80 93 69 0e 	sts	0x0E69, r24
	shot->anim.frames_per_anim = 1;
    ac2c:	80 93 6a 0e 	sts	0x0E6A, r24
	shot->anim.anims = anim;
    ac30:	42 ed       	ldi	r20, 0xD2	; 210
    ac32:	5f e0       	ldi	r21, 0x0F	; 15
    ac34:	50 93 6f 0e 	sts	0x0E6F, r21
    ac38:	40 93 6e 0e 	sts	0x0E6E, r20
	shot->anim.anims[0] = (char*) map;
    ac3c:	44 ec       	ldi	r20, 0xC4	; 196
    ac3e:	56 e3       	ldi	r21, 0x36	; 54
    ac40:	50 93 d3 0f 	sts	0x0FD3, r21
    ac44:	40 93 d2 0f 	sts	0x0FD2, r20
	shot->shared.vx = speed;
    ac48:	90 93 61 0e 	sts	0x0E61, r25
	shot->shared.vy = 0;
    ac4c:	10 92 60 0e 	sts	0x0E60, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac50:	80 93 77 0e 	sts	0x0E77, r24
	shot->hit_count = damage;
    ac54:	30 93 78 0e 	sts	0x0E78, r19
	shot->shot_speed = speed;
    ac58:	64 e6       	ldi	r22, 0x64	; 100
    ac5a:	60 93 7a 0e 	sts	0x0E7A, r22
	shot->y_delta = y_delta;
    ac5e:	10 92 7b 0e 	sts	0x0E7B, r1
	shot->anim.anim_count = 1;
    ac62:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->anim.frames_per_anim = 1;
    ac66:	80 93 7e 0e 	sts	0x0E7E, r24
	shot->anim.anims = anim;
    ac6a:	ec e4       	ldi	r30, 0x4C	; 76
    ac6c:	f0 e1       	ldi	r31, 0x10	; 16
    ac6e:	f0 93 83 0e 	sts	0x0E83, r31
    ac72:	e0 93 82 0e 	sts	0x0E82, r30
	shot->anim.anims[0] = (char*) map;
    ac76:	ee eb       	ldi	r30, 0xBE	; 190
    ac78:	f6 e3       	ldi	r31, 0x36	; 54
    ac7a:	f0 93 4d 10 	sts	0x104D, r31
    ac7e:	e0 93 4c 10 	sts	0x104C, r30
	shot->shared.vx = speed;
    ac82:	60 93 75 0e 	sts	0x0E75, r22
	shot->shared.vy = 0;
    ac86:	10 92 74 0e 	sts	0x0E74, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac8a:	20 93 8b 0e 	sts	0x0E8B, r18
	shot->hit_count = damage;
    ac8e:	30 93 8c 0e 	sts	0x0E8C, r19
	shot->shot_speed = speed;
    ac92:	90 93 8e 0e 	sts	0x0E8E, r25
	shot->y_delta = y_delta;
    ac96:	38 e0       	ldi	r19, 0x08	; 8
    ac98:	30 93 8f 0e 	sts	0x0E8F, r19
	shot->anim.anim_count = 1;
    ac9c:	80 93 91 0e 	sts	0x0E91, r24
	shot->anim.frames_per_anim = 1;
    aca0:	80 93 92 0e 	sts	0x0E92, r24
	shot->anim.anims = anim;
    aca4:	6e e2       	ldi	r22, 0x2E	; 46
    aca6:	70 e1       	ldi	r23, 0x10	; 16
    aca8:	70 93 97 0e 	sts	0x0E97, r23
    acac:	60 93 96 0e 	sts	0x0E96, r22
	shot->anim.anims[0] = (char*) map;
    acb0:	50 93 2f 10 	sts	0x102F, r21
    acb4:	40 93 2e 10 	sts	0x102E, r20
	shot->shared.vx = speed;
    acb8:	90 93 89 0e 	sts	0x0E89, r25
	shot->shared.vy = 0;
    acbc:	10 92 88 0e 	sts	0x0E88, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    acc0:	20 93 5a 0e 	sts	0x0E5A, r18
    acc4:	08 95       	ret
	}
	else if (level == 8) // Dessert
    acc6:	88 30       	cpi	r24, 0x08	; 8
    acc8:	09 f0       	breq	.+2      	; 0xaccc <init_boss_shot+0x2d0>
    acca:	58 c0       	rjmp	.+176    	; 0xad7c <init_boss_shot+0x380>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    accc:	22 e0       	ldi	r18, 0x02	; 2
    acce:	20 93 63 0e 	sts	0x0E63, r18
	shot->hit_count = damage;
    acd2:	20 93 64 0e 	sts	0x0E64, r18
	shot->shot_speed = speed;
    acd6:	3f e7       	ldi	r19, 0x7F	; 127
    acd8:	30 93 66 0e 	sts	0x0E66, r19
	shot->y_delta = y_delta;
    acdc:	98 ef       	ldi	r25, 0xF8	; 248
    acde:	90 93 67 0e 	sts	0x0E67, r25
	shot->anim.anim_count = 1;
    ace2:	91 e0       	ldi	r25, 0x01	; 1
    ace4:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.frames_per_anim = 1;
    ace8:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->anim.anims = anim;
    acec:	42 ed       	ldi	r20, 0xD2	; 210
    acee:	5f e0       	ldi	r21, 0x0F	; 15
    acf0:	50 93 6f 0e 	sts	0x0E6F, r21
    acf4:	40 93 6e 0e 	sts	0x0E6E, r20
	shot->anim.anims[0] = (char*) map;
    acf8:	45 eb       	ldi	r20, 0xB5	; 181
    acfa:	56 e3       	ldi	r21, 0x36	; 54
    acfc:	50 93 d3 0f 	sts	0x0FD3, r21
    ad00:	40 93 d2 0f 	sts	0x0FD2, r20
	shot->shared.vx = speed;
    ad04:	30 93 61 0e 	sts	0x0E61, r19
	shot->shared.vy = 0;
    ad08:	10 92 60 0e 	sts	0x0E60, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad0c:	20 93 77 0e 	sts	0x0E77, r18
	shot->hit_count = damage;
    ad10:	20 93 78 0e 	sts	0x0E78, r18
	shot->shot_speed = speed;
    ad14:	64 e6       	ldi	r22, 0x64	; 100
    ad16:	60 93 7a 0e 	sts	0x0E7A, r22
	shot->y_delta = y_delta;
    ad1a:	10 92 7b 0e 	sts	0x0E7B, r1
	shot->anim.anim_count = 1;
    ad1e:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.frames_per_anim = 1;
    ad22:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->anim.anims = anim;
    ad26:	ec e4       	ldi	r30, 0x4C	; 76
    ad28:	f0 e1       	ldi	r31, 0x10	; 16
    ad2a:	f0 93 83 0e 	sts	0x0E83, r31
    ad2e:	e0 93 82 0e 	sts	0x0E82, r30
	shot->anim.anims[0] = (char*) map;
    ad32:	50 93 4d 10 	sts	0x104D, r21
    ad36:	40 93 4c 10 	sts	0x104C, r20
	shot->shared.vx = speed;
    ad3a:	60 93 75 0e 	sts	0x0E75, r22
	shot->shared.vy = 0;
    ad3e:	10 92 74 0e 	sts	0x0E74, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad42:	20 93 8b 0e 	sts	0x0E8B, r18
	shot->hit_count = damage;
    ad46:	20 93 8c 0e 	sts	0x0E8C, r18
	shot->shot_speed = speed;
    ad4a:	30 93 8e 0e 	sts	0x0E8E, r19
	shot->y_delta = y_delta;
    ad4e:	80 93 8f 0e 	sts	0x0E8F, r24
	shot->anim.anim_count = 1;
    ad52:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.frames_per_anim = 1;
    ad56:	90 93 92 0e 	sts	0x0E92, r25
	shot->anim.anims = anim;
    ad5a:	8e e2       	ldi	r24, 0x2E	; 46
    ad5c:	90 e1       	ldi	r25, 0x10	; 16
    ad5e:	90 93 97 0e 	sts	0x0E97, r25
    ad62:	80 93 96 0e 	sts	0x0E96, r24
	shot->anim.anims[0] = (char*) map;
    ad66:	50 93 2f 10 	sts	0x102F, r21
    ad6a:	40 93 2e 10 	sts	0x102E, r20
	shot->shared.vx = speed;
    ad6e:	30 93 89 0e 	sts	0x0E89, r19
	shot->shared.vy = 0;
    ad72:	10 92 88 0e 	sts	0x0E88, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    ad76:	83 e0       	ldi	r24, 0x03	; 3
    ad78:	80 93 5a 0e 	sts	0x0E5A, r24
    ad7c:	08 95       	ret

0000ad7e <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    ad7e:	10 92 c5 0e 	sts	0x0EC5, r1
    ad82:	10 92 c4 0e 	sts	0x0EC4, r1
	p->pressed = 0;
    ad86:	10 92 c1 0e 	sts	0x0EC1, r1
    ad8a:	10 92 c0 0e 	sts	0x0EC0, r1
	p->released = 0;
    ad8e:	10 92 c3 0e 	sts	0x0EC3, r1
    ad92:	10 92 c2 0e 	sts	0x0EC2, r1
	p->held_cycles = 0;
    ad96:	10 92 c6 0e 	sts	0x0EC6, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	if (is_space())
    ad9a:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    ad9e:	88 23       	and	r24, r24
    ada0:	f9 f0       	breq	.+62     	; 0xade0 <init_boss_state+0x62>
	{
		game.boss.width = 3;
    ada2:	83 e0       	ldi	r24, 0x03	; 3
    ada4:	80 93 57 0e 	sts	0x0E57, r24
		game.boss.height = 1;
    ada8:	81 e0       	ldi	r24, 0x01	; 1
    adaa:	80 93 58 0e 	sts	0x0E58, r24
		game.boss.run.anim_count = 2;
    adae:	82 e0       	ldi	r24, 0x02	; 2
    adb0:	80 93 a1 0e 	sts	0x0EA1, r24
		game.boss.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    adb4:	85 e0       	ldi	r24, 0x05	; 5
    adb6:	80 93 a2 0e 	sts	0x0EA2, r24
		game.boss.run.anims = boss_run_anim;
    adba:	88 e8       	ldi	r24, 0x88	; 136
    adbc:	9d e0       	ldi	r25, 0x0D	; 13
    adbe:	90 93 a7 0e 	sts	0x0EA7, r25
    adc2:	80 93 a6 0e 	sts	0x0EA6, r24
		game.boss.run.anims[0] = (char*) map_hero_ship_0;
    adc6:	80 ee       	ldi	r24, 0xE0	; 224
    adc8:	96 e3       	ldi	r25, 0x36	; 54
    adca:	90 93 89 0d 	sts	0x0D89, r25
    adce:	80 93 88 0d 	sts	0x0D88, r24
		game.boss.run.anims[1] = (char*) map_hero_ship_1;
    add2:	8b ed       	ldi	r24, 0xDB	; 219
    add4:	96 e3       	ldi	r25, 0x36	; 54
    add6:	90 93 8b 0d 	sts	0x0D8B, r25
    adda:	80 93 8a 0d 	sts	0x0D8A, r24
    adde:	2a c0       	rjmp	.+84     	; 0xae34 <init_boss_state+0xb6>
	}
	else
	{
		game.boss.width = 2;
    ade0:	82 e0       	ldi	r24, 0x02	; 2
    ade2:	80 93 57 0e 	sts	0x0E57, r24
		game.boss.height = 3;
    ade6:	83 e0       	ldi	r24, 0x03	; 3
    ade8:	80 93 58 0e 	sts	0x0E58, r24
		game.boss.run.anim_count = 4;
    adec:	84 e0       	ldi	r24, 0x04	; 4
    adee:	80 93 a1 0e 	sts	0x0EA1, r24
		game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    adf2:	8c e0       	ldi	r24, 0x0C	; 12
    adf4:	80 93 a2 0e 	sts	0x0EA2, r24
		game.boss.run.anims = boss_run_anim;
    adf8:	88 e8       	ldi	r24, 0x88	; 136
    adfa:	9d e0       	ldi	r25, 0x0D	; 13
    adfc:	90 93 a7 0e 	sts	0x0EA7, r25
    ae00:	80 93 a6 0e 	sts	0x0EA6, r24
		game.boss.run.anims[0] = (char*) map_ahero_step_0;
    ae04:	85 ea       	ldi	r24, 0xA5	; 165
    ae06:	96 e3       	ldi	r25, 0x36	; 54
    ae08:	90 93 89 0d 	sts	0x0D89, r25
    ae0c:	80 93 88 0d 	sts	0x0D88, r24
		game.boss.run.anims[1] = (char*) map_ahero_step_1;
    ae10:	8d e9       	ldi	r24, 0x9D	; 157
    ae12:	96 e3       	ldi	r25, 0x36	; 54
    ae14:	90 93 8b 0d 	sts	0x0D8B, r25
    ae18:	80 93 8a 0d 	sts	0x0D8A, r24
		game.boss.run.anims[2] = (char*) map_ahero_step_2;
    ae1c:	85 e9       	ldi	r24, 0x95	; 149
    ae1e:	96 e3       	ldi	r25, 0x36	; 54
    ae20:	90 93 8d 0d 	sts	0x0D8D, r25
    ae24:	80 93 8c 0d 	sts	0x0D8C, r24
		game.boss.run.anims[3] = (char*) map_ahero_step_3;
    ae28:	8d e8       	ldi	r24, 0x8D	; 141
    ae2a:	96 e3       	ldi	r25, 0x36	; 54
    ae2c:	90 93 8f 0d 	sts	0x0D8F, r25
    ae30:	80 93 8e 0d 	sts	0x0D8E, r24
	}
	game.boss.active = 0;
    ae34:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.direction = D_RIGHT;
    ae38:	81 e0       	ldi	r24, 0x01	; 1
    ae3a:	80 93 56 0e 	sts	0x0E56, r24
	game.boss.flags = IDLE;
    ae3e:	98 e0       	ldi	r25, 0x08	; 8
    ae40:	90 93 54 0e 	sts	0x0E54, r25
	game.boss.ai_flags = AI_NOT_READY;
    ae44:	10 92 55 0e 	sts	0x0E55, r1
	game.boss.shield = BOSS_SHIELD;
    ae48:	9a e0       	ldi	r25, 0x0A	; 10
    ae4a:	90 93 5b 0e 	sts	0x0E5B, r25
	game.boss.idle.anim_count = 1;
    ae4e:	80 93 99 0e 	sts	0x0E99, r24
	game.boss.idle.frames_per_anim = 1;
    ae52:	80 93 9a 0e 	sts	0x0E9A, r24
	game.boss.idle.anims = boss_idle_anim;
    ae56:	2a e4       	ldi	r18, 0x4A	; 74
    ae58:	30 e1       	ldi	r19, 0x10	; 16
    ae5a:	30 93 9f 0e 	sts	0x0E9F, r19
    ae5e:	20 93 9e 0e 	sts	0x0E9E, r18
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    ae62:	2d ea       	ldi	r18, 0xAD	; 173
    ae64:	36 e3       	ldi	r19, 0x36	; 54
    ae66:	30 93 4b 10 	sts	0x104B, r19
    ae6a:	20 93 4a 10 	sts	0x104A, r18
	
	game.boss.jump.anim_count = 1;
    ae6e:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.jump.frames_per_anim = 1;
    ae72:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.jump.anims = boss_jump_anim;
    ae76:	8a e3       	ldi	r24, 0x3A	; 58
    ae78:	90 e1       	ldi	r25, 0x10	; 16
    ae7a:	90 93 af 0e 	sts	0x0EAF, r25
    ae7e:	80 93 ae 0e 	sts	0x0EAE, r24
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    ae82:	85 e8       	ldi	r24, 0x85	; 133
    ae84:	96 e3       	ldi	r25, 0x36	; 54
    ae86:	90 93 3b 10 	sts	0x103B, r25
    ae8a:	80 93 3a 10 	sts	0x103A, r24
	
	game.boss.expl.anim_count = 3;
    ae8e:	83 e0       	ldi	r24, 0x03	; 3
    ae90:	80 93 b9 0e 	sts	0x0EB9, r24
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ae94:	85 e0       	ldi	r24, 0x05	; 5
    ae96:	80 93 ba 0e 	sts	0x0EBA, r24
	game.boss.expl.anims = expl_anim;
    ae9a:	82 e4       	ldi	r24, 0x42	; 66
    ae9c:	90 e1       	ldi	r25, 0x10	; 16
    ae9e:	90 93 bf 0e 	sts	0x0EBF, r25
    aea2:	80 93 be 0e 	sts	0x0EBE, r24
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    aea6:	8f e2       	ldi	r24, 0x2F	; 47
    aea8:	97 e3       	ldi	r25, 0x37	; 55
    aeaa:	90 93 43 10 	sts	0x1043, r25
    aeae:	80 93 42 10 	sts	0x1042, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    aeb2:	8c e2       	ldi	r24, 0x2C	; 44
    aeb4:	97 e3       	ldi	r25, 0x37	; 55
    aeb6:	90 93 45 10 	sts	0x1045, r25
    aeba:	80 93 44 10 	sts	0x1044, r24
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    aebe:	89 e2       	ldi	r24, 0x29	; 41
    aec0:	97 e3       	ldi	r25, 0x37	; 55
    aec2:	90 93 47 10 	sts	0x1047, r25
    aec6:	80 93 46 10 	sts	0x1046, r24
	
	init_boss_shot(game.current_level_index);
    aeca:	80 91 c7 0d 	lds	r24, 0x0DC7
    aece:	0c 94 fe 54 	jmp	0xa9fc	; 0xa9fc <init_boss_shot>

0000aed2 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    aed2:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    aed6:	88 23       	and	r24, r24
    aed8:	f9 f0       	breq	.+62     	; 0xaf18 <init_player_state+0x46>
	{
		game.player.width = 3;
    aeda:	83 e0       	ldi	r24, 0x03	; 3
    aedc:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.height = 1;
    aee0:	81 e0       	ldi	r24, 0x01	; 1
    aee2:	80 93 dd 0d 	sts	0x0DDD, r24
		game.player.run.anim_count = 2;
    aee6:	82 e0       	ldi	r24, 0x02	; 2
    aee8:	80 93 26 0e 	sts	0x0E26, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    aeec:	85 e0       	ldi	r24, 0x05	; 5
    aeee:	80 93 27 0e 	sts	0x0E27, r24
		game.player.run.anims = run_anim;
    aef2:	80 e3       	ldi	r24, 0x30	; 48
    aef4:	90 e1       	ldi	r25, 0x10	; 16
    aef6:	90 93 2c 0e 	sts	0x0E2C, r25
    aefa:	80 93 2b 0e 	sts	0x0E2B, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    aefe:	80 ee       	ldi	r24, 0xE0	; 224
    af00:	96 e3       	ldi	r25, 0x36	; 54
    af02:	90 93 31 10 	sts	0x1031, r25
    af06:	80 93 30 10 	sts	0x1030, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    af0a:	8b ed       	ldi	r24, 0xDB	; 219
    af0c:	96 e3       	ldi	r25, 0x36	; 54
    af0e:	90 93 33 10 	sts	0x1033, r25
    af12:	80 93 32 10 	sts	0x1032, r24
    af16:	2a c0       	rjmp	.+84     	; 0xaf6c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    af18:	82 e0       	ldi	r24, 0x02	; 2
    af1a:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.height = 3;
    af1e:	83 e0       	ldi	r24, 0x03	; 3
    af20:	80 93 dd 0d 	sts	0x0DDD, r24
		game.player.run.anim_count = 4;
    af24:	84 e0       	ldi	r24, 0x04	; 4
    af26:	80 93 26 0e 	sts	0x0E26, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    af2a:	8c e0       	ldi	r24, 0x0C	; 12
    af2c:	80 93 27 0e 	sts	0x0E27, r24
		game.player.run.anims = run_anim;
    af30:	80 e3       	ldi	r24, 0x30	; 48
    af32:	90 e1       	ldi	r25, 0x10	; 16
    af34:	90 93 2c 0e 	sts	0x0E2C, r25
    af38:	80 93 2b 0e 	sts	0x0E2B, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    af3c:	8a e0       	ldi	r24, 0x0A	; 10
    af3e:	97 e3       	ldi	r25, 0x37	; 55
    af40:	90 93 31 10 	sts	0x1031, r25
    af44:	80 93 30 10 	sts	0x1030, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    af48:	82 e0       	ldi	r24, 0x02	; 2
    af4a:	97 e3       	ldi	r25, 0x37	; 55
    af4c:	90 93 33 10 	sts	0x1033, r25
    af50:	80 93 32 10 	sts	0x1032, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    af54:	8a ef       	ldi	r24, 0xFA	; 250
    af56:	96 e3       	ldi	r25, 0x36	; 54
    af58:	90 93 35 10 	sts	0x1035, r25
    af5c:	80 93 34 10 	sts	0x1034, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    af60:	82 ef       	ldi	r24, 0xF2	; 242
    af62:	96 e3       	ldi	r25, 0x36	; 54
    af64:	90 93 37 10 	sts	0x1037, r25
    af68:	80 93 36 10 	sts	0x1036, r24
	}
	game.player.active = 1;
    af6c:	81 e0       	ldi	r24, 0x01	; 1
    af6e:	80 93 de 0d 	sts	0x0DDE, r24
	game.player.direction = D_RIGHT;
    af72:	80 93 db 0d 	sts	0x0DDB, r24
	game.player.flags = IDLE;
    af76:	98 e0       	ldi	r25, 0x08	; 8
    af78:	90 93 d9 0d 	sts	0x0DD9, r25
	game.player.ai_flags = AI_NOT_READY;
    af7c:	10 92 da 0d 	sts	0x0DDA, r1
	game.player.shield = PLAYER_SHIELD;
    af80:	2a e0       	ldi	r18, 0x0A	; 10
    af82:	20 93 e0 0d 	sts	0x0DE0, r18
	game.player.idle.anim_count = 1;
    af86:	80 93 1e 0e 	sts	0x0E1E, r24
	game.player.idle.frames_per_anim = 1;
    af8a:	80 93 1f 0e 	sts	0x0E1F, r24
	game.player.idle.anims = idle_anim;
    af8e:	20 e5       	ldi	r18, 0x50	; 80
    af90:	30 e1       	ldi	r19, 0x10	; 16
    af92:	30 93 24 0e 	sts	0x0E24, r19
    af96:	20 93 23 0e 	sts	0x0E23, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    af9a:	22 e1       	ldi	r18, 0x12	; 18
    af9c:	37 e3       	ldi	r19, 0x37	; 55
    af9e:	30 93 51 10 	sts	0x1051, r19
    afa2:	20 93 50 10 	sts	0x1050, r18
	
	game.player.jump.anim_count = 1;
    afa6:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.jump.frames_per_anim = 1;
    afaa:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.jump.anims = jump_anim;
    afae:	20 e9       	ldi	r18, 0x90	; 144
    afb0:	3d e0       	ldi	r19, 0x0D	; 13
    afb2:	30 93 34 0e 	sts	0x0E34, r19
    afb6:	20 93 33 0e 	sts	0x0E33, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    afba:	2a ee       	ldi	r18, 0xEA	; 234
    afbc:	36 e3       	ldi	r19, 0x36	; 54
    afbe:	30 93 91 0d 	sts	0x0D91, r19
    afc2:	20 93 90 0d 	sts	0x0D90, r18
	
	game.player.prone.anim_count = 1;
    afc6:	80 93 36 0e 	sts	0x0E36, r24
	game.player.prone.frames_per_anim = 1;
    afca:	80 93 37 0e 	sts	0x0E37, r24
	game.player.prone.anims = prone_anim;
    afce:	24 ed       	ldi	r18, 0xD4	; 212
    afd0:	3f e0       	ldi	r19, 0x0F	; 15
    afd2:	30 93 3c 0e 	sts	0x0E3C, r19
    afd6:	20 93 3b 0e 	sts	0x0E3B, r18
	game.player.prone.anims[0] = (char*) map_hero_prone;
    afda:	25 ee       	ldi	r18, 0xE5	; 229
    afdc:	36 e3       	ldi	r19, 0x36	; 54
    afde:	30 93 d5 0f 	sts	0x0FD5, r19
    afe2:	20 93 d4 0f 	sts	0x0FD4, r18
	
	game.player.expl.anim_count = 3;
    afe6:	83 e0       	ldi	r24, 0x03	; 3
    afe8:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    afec:	85 e0       	ldi	r24, 0x05	; 5
    afee:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.expl.anims = expl_anim;
    aff2:	22 e4       	ldi	r18, 0x42	; 66
    aff4:	30 e1       	ldi	r19, 0x10	; 16
    aff6:	30 93 44 0e 	sts	0x0E44, r19
    affa:	20 93 43 0e 	sts	0x0E43, r18
	game.player.expl.anims[0] = (char*) map_explosion_0;
    affe:	2f e2       	ldi	r18, 0x2F	; 47
    b000:	37 e3       	ldi	r19, 0x37	; 55
    b002:	30 93 43 10 	sts	0x1043, r19
    b006:	20 93 42 10 	sts	0x1042, r18
	game.player.expl.anims[1] = (char*) map_explosion_1;
    b00a:	2c e2       	ldi	r18, 0x2C	; 44
    b00c:	37 e3       	ldi	r19, 0x37	; 55
    b00e:	30 93 45 10 	sts	0x1045, r19
    b012:	20 93 44 10 	sts	0x1044, r18
	game.player.expl.anims[2] = (char*) map_explosion_2;
    b016:	29 e2       	ldi	r18, 0x29	; 41
    b018:	37 e3       	ldi	r19, 0x37	; 55
    b01a:	30 93 47 10 	sts	0x1047, r19
    b01e:	20 93 46 10 	sts	0x1046, r18
	game.eye_clusters = 8;
    b022:	90 93 d0 0d 	sts	0x0DD0, r25
	init_player_shot(game.current_level_index);
    b026:	80 91 c7 0d 	lds	r24, 0x0DC7
    b02a:	0c 94 e4 52 	jmp	0xa5c8	; 0xa5c8 <init_player_shot>

0000b02e <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    b02e:	cf 93       	push	r28
    b030:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    b032:	a8 2f       	mov	r26, r24
    b034:	b0 e0       	ldi	r27, 0x00	; 0
    b036:	35 e3       	ldi	r19, 0x35	; 53
    b038:	83 9f       	mul	r24, r19
    b03a:	c0 01       	movw	r24, r0
    b03c:	11 24       	eor	r1, r1
    b03e:	8e 54       	subi	r24, 0x4E	; 78
    b040:	92 4f       	sbci	r25, 0xF2	; 242
    b042:	fc 01       	movw	r30, r24
    b044:	ed 5b       	subi	r30, 0xBD	; 189
    b046:	fe 4f       	sbci	r31, 0xFE	; 254
    b048:	33 e0       	ldi	r19, 0x03	; 3
    b04a:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b04c:	31 96       	adiw	r30, 0x01	; 1
    b04e:	35 e0       	ldi	r19, 0x05	; 5
    b050:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    b052:	34 96       	adiw	r30, 0x04	; 4
    b054:	c2 e4       	ldi	r28, 0x42	; 66
    b056:	d0 e1       	ldi	r29, 0x10	; 16
    b058:	d1 83       	std	Z+1, r29	; 0x01
    b05a:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    b05c:	ef e2       	ldi	r30, 0x2F	; 47
    b05e:	f7 e3       	ldi	r31, 0x37	; 55
    b060:	f0 93 43 10 	sts	0x1043, r31
    b064:	e0 93 42 10 	sts	0x1042, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    b068:	ec e2       	ldi	r30, 0x2C	; 44
    b06a:	f7 e3       	ldi	r31, 0x37	; 55
    b06c:	f0 93 45 10 	sts	0x1045, r31
    b070:	e0 93 44 10 	sts	0x1044, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    b074:	e9 e2       	ldi	r30, 0x29	; 41
    b076:	f7 e3       	ldi	r31, 0x37	; 55
    b078:	f0 93 47 10 	sts	0x1047, r31
    b07c:	e0 93 46 10 	sts	0x1046, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    b080:	fc 01       	movw	r30, r24
    b082:	e2 5d       	subi	r30, 0xD2	; 210
    b084:	fe 4f       	sbci	r31, 0xFE	; 254
    b086:	31 e0       	ldi	r19, 0x01	; 1
    b088:	30 83       	st	Z, r19
		game.enemies[i].shot[j].active = 0;
    b08a:	31 96       	adiw	r30, 0x01	; 1
    b08c:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    b08e:	32 97       	sbiw	r30, 0x02	; 2
    b090:	c7 e0       	ldi	r28, 0x07	; 7
    b092:	c0 83       	st	Z, r28
		game.enemies[i].shot[j].anim.anim_count = 1;
    b094:	36 96       	adiw	r30, 0x06	; 6
    b096:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    b098:	31 96       	adiw	r30, 0x01	; 1
    b09a:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    b09c:	34 96       	adiw	r30, 0x04	; 4
    b09e:	cc e3       	ldi	r28, 0x3C	; 60
    b0a0:	d0 e1       	ldi	r29, 0x10	; 16
    b0a2:	d1 83       	std	Z+1, r29	; 0x01
    b0a4:	c0 83       	st	Z, r28
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    b0a6:	e2 e8       	ldi	r30, 0x82	; 130
    b0a8:	f6 e3       	ldi	r31, 0x36	; 54
    b0aa:	f0 93 3d 10 	sts	0x103D, r31
    b0ae:	e0 93 3c 10 	sts	0x103C, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    b0b2:	fc 01       	movw	r30, r24
    b0b4:	e0 5d       	subi	r30, 0xD0	; 208
    b0b6:	fe 4f       	sbci	r31, 0xFE	; 254
    b0b8:	30 e5       	ldi	r19, 0x50	; 80
    b0ba:	30 83       	st	Z, r19
		if (is_boss)
    b0bc:	22 23       	and	r18, r18
    b0be:	41 f0       	breq	.+16     	; 0xb0d0 <init_enemy_shot+0xa2>
		{
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    b0c0:	87 e6       	ldi	r24, 0x67	; 103
    b0c2:	96 e3       	ldi	r25, 0x36	; 54
    b0c4:	90 93 3d 10 	sts	0x103D, r25
    b0c8:	80 93 3c 10 	sts	0x103C, r24
			game.enemies[i].shot[j].shot_speed = MEDIUM_SHOT_SPEED;
    b0cc:	84 e6       	ldi	r24, 0x64	; 100
    b0ce:	08 c0       	rjmp	.+16     	; 0xb0e0 <init_enemy_shot+0xb2>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    b0d0:	fc 01       	movw	r30, r24
    b0d2:	ef 5d       	subi	r30, 0xDF	; 223
    b0d4:	fe 4f       	sbci	r31, 0xFE	; 254
    b0d6:	20 81       	ld	r18, Z
    b0d8:	3a 96       	adiw	r30, 0x0a	; 10
    b0da:	24 30       	cpi	r18, 0x04	; 4
    b0dc:	19 f4       	brne	.+6      	; 0xb0e4 <init_enemy_shot+0xb6>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    b0de:	82 ee       	ldi	r24, 0xE2	; 226
    b0e0:	80 83       	st	Z, r24
    b0e2:	05 c0       	rjmp	.+10     	; 0xb0ee <init_enemy_shot+0xc0>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    b0e4:	25 30       	cpi	r18, 0x05	; 5
    b0e6:	11 f4       	brne	.+4      	; 0xb0ec <init_enemy_shot+0xbe>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    b0e8:	8a e0       	ldi	r24, 0x0A	; 10
    b0ea:	fa cf       	rjmp	.-12     	; 0xb0e0 <init_enemy_shot+0xb2>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    b0ec:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    b0ee:	25 e3       	ldi	r18, 0x35	; 53
    b0f0:	2a 9f       	mul	r18, r26
    b0f2:	c0 01       	movw	r24, r0
    b0f4:	2b 9f       	mul	r18, r27
    b0f6:	90 0d       	add	r25, r0
    b0f8:	11 24       	eor	r1, r1
    b0fa:	8e 54       	subi	r24, 0x4E	; 78
    b0fc:	92 4f       	sbci	r25, 0xF2	; 242
    b0fe:	fc 01       	movw	r30, r24
    b100:	e6 5d       	subi	r30, 0xD6	; 214
    b102:	fe 4f       	sbci	r31, 0xFE	; 254
    b104:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    b106:	34 97       	sbiw	r30, 0x04	; 4
    b108:	71 83       	std	Z+1, r23	; 0x01
    b10a:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    b10c:	32 96       	adiw	r30, 0x02	; 2
    b10e:	51 83       	std	Z+1, r21	; 0x01
    b110:	40 83       	st	Z, r20
	}
}
    b112:	df 91       	pop	r29
    b114:	cf 91       	pop	r28
    b116:	08 95       	ret

0000b118 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b118:	95 e3       	ldi	r25, 0x35	; 53
    b11a:	89 9f       	mul	r24, r25
    b11c:	90 01       	movw	r18, r0
    b11e:	11 24       	eor	r1, r1
    b120:	2e 54       	subi	r18, 0x4E	; 78
    b122:	32 4f       	sbci	r19, 0xF2	; 242
    b124:	f9 01       	movw	r30, r18
    b126:	e4 5e       	subi	r30, 0xE4	; 228
    b128:	fe 4f       	sbci	r31, 0xFE	; 254
    b12a:	91 e0       	ldi	r25, 0x01	; 1
    b12c:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b12e:	32 96       	adiw	r30, 0x02	; 2
    b130:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    b132:	31 97       	sbiw	r30, 0x01	; 1
    b134:	a8 e0       	ldi	r26, 0x08	; 8
    b136:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    b138:	32 96       	adiw	r30, 0x02	; 2
    b13a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b13c:	31 96       	adiw	r30, 0x01	; 1
    b13e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    b140:	31 96       	adiw	r30, 0x01	; 1
    b142:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    b144:	31 96       	adiw	r30, 0x01	; 1
    b146:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b148:	31 96       	adiw	r30, 0x01	; 1
    b14a:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    b14c:	32 96       	adiw	r30, 0x02	; 2
    b14e:	92 e0       	ldi	r25, 0x02	; 2
    b150:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    b152:	76 96       	adiw	r30, 0x16	; 22
    b154:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    b156:	31 96       	adiw	r30, 0x01	; 1
    b158:	9a e0       	ldi	r25, 0x0A	; 10
    b15a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    b15c:	d9 01       	movw	r26, r18
    b15e:	a0 5c       	subi	r26, 0xC0	; 192
    b160:	be 4f       	sbci	r27, 0xFE	; 254
    b162:	e6 ed       	ldi	r30, 0xD6	; 214
    b164:	ff e0       	ldi	r31, 0x0F	; 15
    b166:	ed 93       	st	X+, r30
    b168:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    b16a:	ac e7       	ldi	r26, 0x7C	; 124
    b16c:	b6 e3       	ldi	r27, 0x36	; 54
    b16e:	b1 83       	std	Z+1, r27	; 0x01
    b170:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    b172:	a9 e7       	ldi	r26, 0x79	; 121
    b174:	b6 e3       	ldi	r27, 0x36	; 54
    b176:	b3 83       	std	Z+3, r27	; 0x03
    b178:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    b17a:	f9 01       	movw	r30, r18
    b17c:	e5 5e       	subi	r30, 0xE5	; 229
    b17e:	fe 4f       	sbci	r31, 0xFE	; 254
    b180:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b182:	31 97       	sbiw	r30, 0x01	; 1
    b184:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b186:	31 97       	sbiw	r30, 0x01	; 1
    b188:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b18a:	34 97       	sbiw	r30, 0x04	; 4
    b18c:	71 83       	std	Z+1, r23	; 0x01
    b18e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b190:	32 96       	adiw	r30, 0x02	; 2
    b192:	51 83       	std	Z+1, r21	; 0x01
    b194:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b196:	20 e0       	ldi	r18, 0x00	; 0
    b198:	0c 94 17 58 	jmp	0xb02e	; 0xb02e <init_enemy_shot>

0000b19c <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b19c:	95 e3       	ldi	r25, 0x35	; 53
    b19e:	89 9f       	mul	r24, r25
    b1a0:	90 01       	movw	r18, r0
    b1a2:	11 24       	eor	r1, r1
    b1a4:	2e 54       	subi	r18, 0x4E	; 78
    b1a6:	32 4f       	sbci	r19, 0xF2	; 242
    b1a8:	f9 01       	movw	r30, r18
    b1aa:	e3 5e       	subi	r30, 0xE3	; 227
    b1ac:	fe 4f       	sbci	r31, 0xFE	; 254
    b1ae:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b1b0:	31 97       	sbiw	r30, 0x01	; 1
    b1b2:	91 e0       	ldi	r25, 0x01	; 1
    b1b4:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b1b6:	32 96       	adiw	r30, 0x02	; 2
    b1b8:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b1ba:	31 96       	adiw	r30, 0x01	; 1
    b1bc:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b1be:	31 96       	adiw	r30, 0x01	; 1
    b1c0:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    b1c2:	31 96       	adiw	r30, 0x01	; 1
    b1c4:	a3 e0       	ldi	r26, 0x03	; 3
    b1c6:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b1c8:	31 96       	adiw	r30, 0x01	; 1
    b1ca:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b1cc:	31 96       	adiw	r30, 0x01	; 1
    b1ce:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    b1d0:	32 96       	adiw	r30, 0x02	; 2
    b1d2:	a2 e0       	ldi	r26, 0x02	; 2
    b1d4:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b1d6:	76 96       	adiw	r30, 0x16	; 22
    b1d8:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b1da:	31 96       	adiw	r30, 0x01	; 1
    b1dc:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b1de:	d9 01       	movw	r26, r18
    b1e0:	a0 5c       	subi	r26, 0xC0	; 192
    b1e2:	be 4f       	sbci	r27, 0xFE	; 254
    b1e4:	ec e2       	ldi	r30, 0x2C	; 44
    b1e6:	f0 e1       	ldi	r31, 0x10	; 16
    b1e8:	ed 93       	st	X+, r30
    b1ea:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    b1ec:	a3 e7       	ldi	r26, 0x73	; 115
    b1ee:	b6 e3       	ldi	r27, 0x36	; 54
    b1f0:	b1 83       	std	Z+1, r27	; 0x01
    b1f2:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b1f4:	f9 01       	movw	r30, r18
    b1f6:	e5 5e       	subi	r30, 0xE5	; 229
    b1f8:	fe 4f       	sbci	r31, 0xFE	; 254
    b1fa:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b1fc:	31 97       	sbiw	r30, 0x01	; 1
    b1fe:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b200:	31 97       	sbiw	r30, 0x01	; 1
    b202:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b204:	34 97       	sbiw	r30, 0x04	; 4
    b206:	71 83       	std	Z+1, r23	; 0x01
    b208:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b20a:	32 96       	adiw	r30, 0x02	; 2
    b20c:	51 83       	std	Z+1, r21	; 0x01
    b20e:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b210:	20 e0       	ldi	r18, 0x00	; 0
    b212:	0c 94 17 58 	jmp	0xb02e	; 0xb02e <init_enemy_shot>

0000b216 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b216:	95 e3       	ldi	r25, 0x35	; 53
    b218:	89 9f       	mul	r24, r25
    b21a:	90 01       	movw	r18, r0
    b21c:	11 24       	eor	r1, r1
    b21e:	2e 54       	subi	r18, 0x4E	; 78
    b220:	32 4f       	sbci	r19, 0xF2	; 242
    b222:	f9 01       	movw	r30, r18
    b224:	e3 5e       	subi	r30, 0xE3	; 227
    b226:	fe 4f       	sbci	r31, 0xFE	; 254
    b228:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b22a:	31 97       	sbiw	r30, 0x01	; 1
    b22c:	91 e0       	ldi	r25, 0x01	; 1
    b22e:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b230:	32 96       	adiw	r30, 0x02	; 2
    b232:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b234:	31 96       	adiw	r30, 0x01	; 1
    b236:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b238:	31 96       	adiw	r30, 0x01	; 1
    b23a:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    b23c:	31 96       	adiw	r30, 0x01	; 1
    b23e:	a4 e0       	ldi	r26, 0x04	; 4
    b240:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b242:	31 96       	adiw	r30, 0x01	; 1
    b244:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b246:	31 96       	adiw	r30, 0x01	; 1
    b248:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    b24a:	32 96       	adiw	r30, 0x02	; 2
    b24c:	a2 e0       	ldi	r26, 0x02	; 2
    b24e:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b250:	76 96       	adiw	r30, 0x16	; 22
    b252:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b254:	31 96       	adiw	r30, 0x01	; 1
    b256:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    b258:	d9 01       	movw	r26, r18
    b25a:	a0 5c       	subi	r26, 0xC0	; 192
    b25c:	be 4f       	sbci	r27, 0xFE	; 254
    b25e:	e0 e4       	ldi	r30, 0x40	; 64
    b260:	f0 e1       	ldi	r31, 0x10	; 16
    b262:	ed 93       	st	X+, r30
    b264:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    b266:	a0 e7       	ldi	r26, 0x70	; 112
    b268:	b6 e3       	ldi	r27, 0x36	; 54
    b26a:	b1 83       	std	Z+1, r27	; 0x01
    b26c:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b26e:	f9 01       	movw	r30, r18
    b270:	e5 5e       	subi	r30, 0xE5	; 229
    b272:	fe 4f       	sbci	r31, 0xFE	; 254
    b274:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    b276:	31 97       	sbiw	r30, 0x01	; 1
    b278:	92 ee       	ldi	r25, 0xE2	; 226
    b27a:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b27c:	31 97       	sbiw	r30, 0x01	; 1
    b27e:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b280:	34 97       	sbiw	r30, 0x04	; 4
    b282:	71 83       	std	Z+1, r23	; 0x01
    b284:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b286:	32 96       	adiw	r30, 0x02	; 2
    b288:	51 83       	std	Z+1, r21	; 0x01
    b28a:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b28c:	20 e0       	ldi	r18, 0x00	; 0
    b28e:	0c 94 17 58 	jmp	0xb02e	; 0xb02e <init_enemy_shot>

0000b292 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b292:	95 e3       	ldi	r25, 0x35	; 53
    b294:	89 9f       	mul	r24, r25
    b296:	90 01       	movw	r18, r0
    b298:	11 24       	eor	r1, r1
    b29a:	2e 54       	subi	r18, 0x4E	; 78
    b29c:	32 4f       	sbci	r19, 0xF2	; 242
    b29e:	f9 01       	movw	r30, r18
    b2a0:	e3 5e       	subi	r30, 0xE3	; 227
    b2a2:	fe 4f       	sbci	r31, 0xFE	; 254
    b2a4:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b2a6:	31 97       	sbiw	r30, 0x01	; 1
    b2a8:	91 e0       	ldi	r25, 0x01	; 1
    b2aa:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b2ac:	33 96       	adiw	r30, 0x03	; 3
    b2ae:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b2b0:	31 96       	adiw	r30, 0x01	; 1
    b2b2:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    b2b4:	31 96       	adiw	r30, 0x01	; 1
    b2b6:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    b2b8:	31 96       	adiw	r30, 0x01	; 1
    b2ba:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b2bc:	31 96       	adiw	r30, 0x01	; 1
    b2be:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    b2c0:	32 96       	adiw	r30, 0x02	; 2
    b2c2:	a4 e0       	ldi	r26, 0x04	; 4
    b2c4:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b2c6:	76 96       	adiw	r30, 0x16	; 22
    b2c8:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b2ca:	31 96       	adiw	r30, 0x01	; 1
    b2cc:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    b2ce:	d9 01       	movw	r26, r18
    b2d0:	a0 5c       	subi	r26, 0xC0	; 192
    b2d2:	be 4f       	sbci	r27, 0xFE	; 254
    b2d4:	ea ed       	ldi	r30, 0xDA	; 218
    b2d6:	ff e0       	ldi	r31, 0x0F	; 15
    b2d8:	ed 93       	st	X+, r30
    b2da:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    b2dc:	af e7       	ldi	r26, 0x7F	; 127
    b2de:	b6 e3       	ldi	r27, 0x36	; 54
    b2e0:	b1 83       	std	Z+1, r27	; 0x01
    b2e2:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b2e4:	f9 01       	movw	r30, r18
    b2e6:	e5 5e       	subi	r30, 0xE5	; 229
    b2e8:	fe 4f       	sbci	r31, 0xFE	; 254
    b2ea:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    b2ec:	31 97       	sbiw	r30, 0x01	; 1
    b2ee:	9e e1       	ldi	r25, 0x1E	; 30
    b2f0:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b2f2:	31 97       	sbiw	r30, 0x01	; 1
    b2f4:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b2f6:	34 97       	sbiw	r30, 0x04	; 4
    b2f8:	71 83       	std	Z+1, r23	; 0x01
    b2fa:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b2fc:	32 96       	adiw	r30, 0x02	; 2
    b2fe:	51 83       	std	Z+1, r21	; 0x01
    b300:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b302:	20 e0       	ldi	r18, 0x00	; 0
    b304:	0c 94 17 58 	jmp	0xb02e	; 0xb02e <init_enemy_shot>

0000b308 <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b308:	95 e3       	ldi	r25, 0x35	; 53
    b30a:	89 9f       	mul	r24, r25
    b30c:	90 01       	movw	r18, r0
    b30e:	11 24       	eor	r1, r1
    b310:	2e 54       	subi	r18, 0x4E	; 78
    b312:	32 4f       	sbci	r19, 0xF2	; 242
    b314:	f9 01       	movw	r30, r18
    b316:	e3 5e       	subi	r30, 0xE3	; 227
    b318:	fe 4f       	sbci	r31, 0xFE	; 254
    b31a:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b31c:	31 97       	sbiw	r30, 0x01	; 1
    b31e:	91 e0       	ldi	r25, 0x01	; 1
    b320:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b322:	33 96       	adiw	r30, 0x03	; 3
    b324:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b326:	31 96       	adiw	r30, 0x01	; 1
    b328:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    b32a:	31 96       	adiw	r30, 0x01	; 1
    b32c:	a5 e0       	ldi	r26, 0x05	; 5
    b32e:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b330:	31 96       	adiw	r30, 0x01	; 1
    b332:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b334:	31 96       	adiw	r30, 0x01	; 1
    b336:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    b338:	32 96       	adiw	r30, 0x02	; 2
    b33a:	a4 e0       	ldi	r26, 0x04	; 4
    b33c:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b33e:	76 96       	adiw	r30, 0x16	; 22
    b340:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b342:	31 96       	adiw	r30, 0x01	; 1
    b344:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    b346:	d9 01       	movw	r26, r18
    b348:	a0 5c       	subi	r26, 0xC0	; 192
    b34a:	be 4f       	sbci	r27, 0xFE	; 254
    b34c:	ee e3       	ldi	r30, 0x3E	; 62
    b34e:	f0 e1       	ldi	r31, 0x10	; 16
    b350:	ed 93       	st	X+, r30
    b352:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    b354:	a6 e7       	ldi	r26, 0x76	; 118
    b356:	b6 e3       	ldi	r27, 0x36	; 54
    b358:	b1 83       	std	Z+1, r27	; 0x01
    b35a:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b35c:	f9 01       	movw	r30, r18
    b35e:	e5 5e       	subi	r30, 0xE5	; 229
    b360:	fe 4f       	sbci	r31, 0xFE	; 254
    b362:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    b364:	31 97       	sbiw	r30, 0x01	; 1
    b366:	9a e0       	ldi	r25, 0x0A	; 10
    b368:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b36a:	31 97       	sbiw	r30, 0x01	; 1
    b36c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b36e:	34 97       	sbiw	r30, 0x04	; 4
    b370:	71 83       	std	Z+1, r23	; 0x01
    b372:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b374:	32 96       	adiw	r30, 0x02	; 2
    b376:	51 83       	std	Z+1, r21	; 0x01
    b378:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b37a:	20 e0       	ldi	r18, 0x00	; 0
    b37c:	0c 94 17 58 	jmp	0xb02e	; 0xb02e <init_enemy_shot>

0000b380 <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b380:	95 e3       	ldi	r25, 0x35	; 53
    b382:	89 9f       	mul	r24, r25
    b384:	90 01       	movw	r18, r0
    b386:	11 24       	eor	r1, r1
    b388:	2e 54       	subi	r18, 0x4E	; 78
    b38a:	32 4f       	sbci	r19, 0xF2	; 242
    b38c:	f9 01       	movw	r30, r18
    b38e:	e3 5e       	subi	r30, 0xE3	; 227
    b390:	fe 4f       	sbci	r31, 0xFE	; 254
    b392:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b394:	31 97       	sbiw	r30, 0x01	; 1
    b396:	91 e0       	ldi	r25, 0x01	; 1
    b398:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b39a:	32 96       	adiw	r30, 0x02	; 2
    b39c:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b39e:	31 96       	adiw	r30, 0x01	; 1
    b3a0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b3a2:	31 96       	adiw	r30, 0x01	; 1
    b3a4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    b3a6:	31 96       	adiw	r30, 0x01	; 1
    b3a8:	a6 e0       	ldi	r26, 0x06	; 6
    b3aa:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b3ac:	31 96       	adiw	r30, 0x01	; 1
    b3ae:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b3b0:	31 96       	adiw	r30, 0x01	; 1
    b3b2:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    b3b4:	32 96       	adiw	r30, 0x02	; 2
    b3b6:	a8 e0       	ldi	r26, 0x08	; 8
    b3b8:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b3ba:	76 96       	adiw	r30, 0x16	; 22
    b3bc:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b3be:	31 96       	adiw	r30, 0x01	; 1
    b3c0:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b3c2:	d9 01       	movw	r26, r18
    b3c4:	a0 5c       	subi	r26, 0xC0	; 192
    b3c6:	be 4f       	sbci	r27, 0xFE	; 254
    b3c8:	ec e2       	ldi	r30, 0x2C	; 44
    b3ca:	f0 e1       	ldi	r31, 0x10	; 16
    b3cc:	ed 93       	st	X+, r30
    b3ce:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    b3d0:	ad e6       	ldi	r26, 0x6D	; 109
    b3d2:	b6 e3       	ldi	r27, 0x36	; 54
    b3d4:	b1 83       	std	Z+1, r27	; 0x01
    b3d6:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b3d8:	f9 01       	movw	r30, r18
    b3da:	e5 5e       	subi	r30, 0xE5	; 229
    b3dc:	fe 4f       	sbci	r31, 0xFE	; 254
    b3de:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b3e0:	31 97       	sbiw	r30, 0x01	; 1
    b3e2:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b3e4:	31 97       	sbiw	r30, 0x01	; 1
    b3e6:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b3e8:	34 97       	sbiw	r30, 0x04	; 4
    b3ea:	71 83       	std	Z+1, r23	; 0x01
    b3ec:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b3ee:	32 96       	adiw	r30, 0x02	; 2
    b3f0:	51 83       	std	Z+1, r21	; 0x01
    b3f2:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    b3f4:	21 e0       	ldi	r18, 0x01	; 1
    b3f6:	0c 94 17 58 	jmp	0xb02e	; 0xb02e <init_enemy_shot>

0000b3fa <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    b3fa:	cf 93       	push	r28
    b3fc:	df 93       	push	r29
    b3fe:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    b400:	95 e3       	ldi	r25, 0x35	; 53
    b402:	89 9f       	mul	r24, r25
    b404:	90 01       	movw	r18, r0
    b406:	11 24       	eor	r1, r1
    b408:	2e 54       	subi	r18, 0x4E	; 78
    b40a:	32 4f       	sbci	r19, 0xF2	; 242
    b40c:	f9 01       	movw	r30, r18
    b40e:	e3 5e       	subi	r30, 0xE3	; 227
    b410:	fe 4f       	sbci	r31, 0xFE	; 254
    b412:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b414:	31 97       	sbiw	r30, 0x01	; 1
    b416:	91 e0       	ldi	r25, 0x01	; 1
    b418:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b41a:	32 96       	adiw	r30, 0x02	; 2
    b41c:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b41e:	31 96       	adiw	r30, 0x01	; 1
    b420:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b422:	31 96       	adiw	r30, 0x01	; 1
    b424:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    b426:	31 96       	adiw	r30, 0x01	; 1
    b428:	47 e0       	ldi	r20, 0x07	; 7
    b42a:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    b42c:	31 96       	adiw	r30, 0x01	; 1
    b42e:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b430:	31 96       	adiw	r30, 0x01	; 1
    b432:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    b434:	32 96       	adiw	r30, 0x02	; 2
    b436:	48 e0       	ldi	r20, 0x08	; 8
    b438:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    b43a:	76 96       	adiw	r30, 0x16	; 22
    b43c:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b43e:	31 96       	adiw	r30, 0x01	; 1
    b440:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b442:	d9 01       	movw	r26, r18
    b444:	a0 5c       	subi	r26, 0xC0	; 192
    b446:	be 4f       	sbci	r27, 0xFE	; 254
    b448:	ec e2       	ldi	r30, 0x2C	; 44
    b44a:	f0 e1       	ldi	r31, 0x10	; 16
    b44c:	ed 93       	st	X+, r30
    b44e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    b450:	4a e6       	ldi	r20, 0x6A	; 106
    b452:	56 e3       	ldi	r21, 0x36	; 54
    b454:	51 83       	std	Z+1, r21	; 0x01
    b456:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    b458:	f9 01       	movw	r30, r18
    b45a:	e5 5e       	subi	r30, 0xE5	; 229
    b45c:	fe 4f       	sbci	r31, 0xFE	; 254
    b45e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b460:	31 97       	sbiw	r30, 0x01	; 1
    b462:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b464:	31 97       	sbiw	r30, 0x01	; 1
    b466:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b468:	34 97       	sbiw	r30, 0x04	; 4
    b46a:	71 83       	std	Z+1, r23	; 0x01
    b46c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b46e:	32 96       	adiw	r30, 0x02	; 2
    b470:	d1 83       	std	Z+1, r29	; 0x01
    b472:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    b474:	21 e0       	ldi	r18, 0x01	; 1
    b476:	ae 01       	movw	r20, r28
    b478:	0e 94 17 58 	call	0xb02e	; 0xb02e <init_enemy_shot>
	SetTile(24-game.eye_clusters,y/8, 0);
    b47c:	be 01       	movw	r22, r28
    b47e:	83 e0       	ldi	r24, 0x03	; 3
    b480:	76 95       	lsr	r23
    b482:	67 95       	ror	r22
    b484:	8a 95       	dec	r24
    b486:	e1 f7       	brne	.-8      	; 0xb480 <init_enemy_boss_eye+0x86>
    b488:	90 91 d0 0d 	lds	r25, 0x0DD0
    b48c:	40 e0       	ldi	r20, 0x00	; 0
    b48e:	50 e0       	ldi	r21, 0x00	; 0
    b490:	88 e1       	ldi	r24, 0x18	; 24
    b492:	89 1b       	sub	r24, r25
}
    b494:	df 91       	pop	r29
    b496:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(24-game.eye_clusters,y/8, 0);
    b498:	0c 94 f2 40 	jmp	0x81e4	; 0x81e4 <SetTile>

0000b49c <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    b49c:	40 e2       	ldi	r20, 0x20	; 32
    b49e:	50 e0       	ldi	r21, 0x00	; 0
    b4a0:	68 ec       	ldi	r22, 0xC8	; 200
    b4a2:	77 e0       	ldi	r23, 0x07	; 7
    b4a4:	80 e0       	ldi	r24, 0x00	; 0
    b4a6:	0e 94 c0 59 	call	0xb380	; 0xb380 <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    b4aa:	40 e3       	ldi	r20, 0x30	; 48
    b4ac:	50 e0       	ldi	r21, 0x00	; 0
    b4ae:	68 ec       	ldi	r22, 0xC8	; 200
    b4b0:	77 e0       	ldi	r23, 0x07	; 7
    b4b2:	81 e0       	ldi	r24, 0x01	; 1
    b4b4:	0e 94 c0 59 	call	0xb380	; 0xb380 <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    b4b8:	40 e9       	ldi	r20, 0x90	; 144
    b4ba:	50 e0       	ldi	r21, 0x00	; 0
    b4bc:	68 ec       	ldi	r22, 0xC8	; 200
    b4be:	77 e0       	ldi	r23, 0x07	; 7
    b4c0:	82 e0       	ldi	r24, 0x02	; 2
    b4c2:	0e 94 c0 59 	call	0xb380	; 0xb380 <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    b4c6:	40 ea       	ldi	r20, 0xA0	; 160
    b4c8:	50 e0       	ldi	r21, 0x00	; 0
    b4ca:	68 ec       	ldi	r22, 0xC8	; 200
    b4cc:	77 e0       	ldi	r23, 0x07	; 7
    b4ce:	83 e0       	ldi	r24, 0x03	; 3
    b4d0:	0e 94 c0 59 	call	0xb380	; 0xb380 <init_enemy_boss_turret>
	game.active_enemies = 4;
    b4d4:	84 e0       	ldi	r24, 0x04	; 4
    b4d6:	80 93 cd 0d 	sts	0x0DCD, r24
    b4da:	08 95       	ret

0000b4dc <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    b4dc:	0f 93       	push	r16
    b4de:	1f 93       	push	r17
    b4e0:	cf 93       	push	r28
    b4e2:	df 93       	push	r29
	init_enemy_boss_eye(0, (255-game.eye_clusters)*8, 11*8);
    b4e4:	02 eb       	ldi	r16, 0xB2	; 178
    b4e6:	1d e0       	ldi	r17, 0x0D	; 13
    b4e8:	f8 01       	movw	r30, r16
    b4ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    b4ec:	cf ef       	ldi	r28, 0xFF	; 255
    b4ee:	d0 e0       	ldi	r29, 0x00	; 0
    b4f0:	be 01       	movw	r22, r28
    b4f2:	68 1b       	sub	r22, r24
    b4f4:	71 09       	sbc	r23, r1
    b4f6:	83 e0       	ldi	r24, 0x03	; 3
    b4f8:	66 0f       	add	r22, r22
    b4fa:	77 1f       	adc	r23, r23
    b4fc:	8a 95       	dec	r24
    b4fe:	e1 f7       	brne	.-8      	; 0xb4f8 <init_enemy_boss_eyes+0x1c>
    b500:	48 e5       	ldi	r20, 0x58	; 88
    b502:	50 e0       	ldi	r21, 0x00	; 0
    b504:	80 e0       	ldi	r24, 0x00	; 0
    b506:	0e 94 fd 59 	call	0xb3fa	; 0xb3fa <init_enemy_boss_eye>
	init_enemy_boss_eye(1, (255-game.eye_clusters)*8, 12*8);
    b50a:	f8 01       	movw	r30, r16
    b50c:	86 8d       	ldd	r24, Z+30	; 0x1e
    b50e:	be 01       	movw	r22, r28
    b510:	68 1b       	sub	r22, r24
    b512:	71 09       	sbc	r23, r1
    b514:	93 e0       	ldi	r25, 0x03	; 3
    b516:	66 0f       	add	r22, r22
    b518:	77 1f       	adc	r23, r23
    b51a:	9a 95       	dec	r25
    b51c:	e1 f7       	brne	.-8      	; 0xb516 <init_enemy_boss_eyes+0x3a>
    b51e:	40 e6       	ldi	r20, 0x60	; 96
    b520:	50 e0       	ldi	r21, 0x00	; 0
    b522:	81 e0       	ldi	r24, 0x01	; 1
    b524:	0e 94 fd 59 	call	0xb3fa	; 0xb3fa <init_enemy_boss_eye>
	init_enemy_boss_eye(2, (255-game.eye_clusters)*8, 13*8);
    b528:	f8 01       	movw	r30, r16
    b52a:	86 8d       	ldd	r24, Z+30	; 0x1e
    b52c:	be 01       	movw	r22, r28
    b52e:	68 1b       	sub	r22, r24
    b530:	71 09       	sbc	r23, r1
    b532:	23 e0       	ldi	r18, 0x03	; 3
    b534:	66 0f       	add	r22, r22
    b536:	77 1f       	adc	r23, r23
    b538:	2a 95       	dec	r18
    b53a:	e1 f7       	brne	.-8      	; 0xb534 <init_enemy_boss_eyes+0x58>
    b53c:	48 e6       	ldi	r20, 0x68	; 104
    b53e:	50 e0       	ldi	r21, 0x00	; 0
    b540:	82 e0       	ldi	r24, 0x02	; 2
    b542:	0e 94 fd 59 	call	0xb3fa	; 0xb3fa <init_enemy_boss_eye>
	game.active_enemies = 3;
    b546:	83 e0       	ldi	r24, 0x03	; 3
    b548:	f8 01       	movw	r30, r16
    b54a:	83 8f       	std	Z+27, r24	; 0x1b
}
    b54c:	df 91       	pop	r29
    b54e:	cf 91       	pop	r28
    b550:	1f 91       	pop	r17
    b552:	0f 91       	pop	r16
    b554:	08 95       	ret

0000b556 <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b556:	a8 2f       	mov	r26, r24
    b558:	b0 e0       	ldi	r27, 0x00	; 0
    b55a:	25 e3       	ldi	r18, 0x35	; 53
    b55c:	82 9f       	mul	r24, r18
    b55e:	c0 01       	movw	r24, r0
    b560:	11 24       	eor	r1, r1
    b562:	8e 54       	subi	r24, 0x4E	; 78
    b564:	92 4f       	sbci	r25, 0xF2	; 242
    b566:	fc 01       	movw	r30, r24
    b568:	e4 5e       	subi	r30, 0xE4	; 228
    b56a:	fe 4f       	sbci	r31, 0xFE	; 254
    b56c:	21 e0       	ldi	r18, 0x01	; 1
    b56e:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    b570:	33 96       	adiw	r30, 0x03	; 3
    b572:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    b574:	31 96       	adiw	r30, 0x01	; 1
    b576:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    b578:	31 96       	adiw	r30, 0x01	; 1
    b57a:	32 e0       	ldi	r19, 0x02	; 2
    b57c:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    b57e:	31 96       	adiw	r30, 0x01	; 1
    b580:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b582:	31 96       	adiw	r30, 0x01	; 1
    b584:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    b586:	78 96       	adiw	r30, 0x18	; 24
    b588:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    b58a:	31 96       	adiw	r30, 0x01	; 1
    b58c:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    b58e:	34 96       	adiw	r30, 0x04	; 4
    b590:	8e e4       	ldi	r24, 0x4E	; 78
    b592:	90 e1       	ldi	r25, 0x10	; 16
    b594:	91 83       	std	Z+1, r25	; 0x01
    b596:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b598:	80 91 c7 0d 	lds	r24, 0x0DC7
    b59c:	84 30       	cpi	r24, 0x04	; 4
    b59e:	79 f0       	breq	.+30     	; 0xb5be <init_enemy_level_hazard+0x68>
    b5a0:	38 f4       	brcc	.+14     	; 0xb5b0 <init_enemy_level_hazard+0x5a>
    b5a2:	88 23       	and	r24, r24
    b5a4:	91 f0       	breq	.+36     	; 0xb5ca <init_enemy_level_hazard+0x74>
    b5a6:	82 30       	cpi	r24, 0x02	; 2
    b5a8:	81 f4       	brne	.+32     	; 0xb5ca <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b5aa:	81 e6       	ldi	r24, 0x61	; 97
    b5ac:	96 e3       	ldi	r25, 0x36	; 54
    b5ae:	0f c0       	rjmp	.+30     	; 0xb5ce <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b5b0:	86 30       	cpi	r24, 0x06	; 6
    b5b2:	41 f0       	breq	.+16     	; 0xb5c4 <init_enemy_level_hazard+0x6e>
    b5b4:	88 30       	cpi	r24, 0x08	; 8
    b5b6:	49 f4       	brne	.+18     	; 0xb5ca <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b5b8:	88 e5       	ldi	r24, 0x58	; 88
    b5ba:	96 e3       	ldi	r25, 0x36	; 54
    b5bc:	08 c0       	rjmp	.+16     	; 0xb5ce <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b5be:	8e e5       	ldi	r24, 0x5E	; 94
    b5c0:	96 e3       	ldi	r25, 0x36	; 54
    b5c2:	05 c0       	rjmp	.+10     	; 0xb5ce <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b5c4:	8b e5       	ldi	r24, 0x5B	; 91
    b5c6:	96 e3       	ldi	r25, 0x36	; 54
    b5c8:	02 c0       	rjmp	.+4      	; 0xb5ce <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b5ca:	84 e6       	ldi	r24, 0x64	; 100
    b5cc:	96 e3       	ldi	r25, 0x36	; 54
    b5ce:	90 93 4f 10 	sts	0x104F, r25
    b5d2:	80 93 4e 10 	sts	0x104E, r24
	}
	game.enemies[i].shared.gravity = 0;
    b5d6:	25 e3       	ldi	r18, 0x35	; 53
    b5d8:	2a 9f       	mul	r18, r26
    b5da:	c0 01       	movw	r24, r0
    b5dc:	2b 9f       	mul	r18, r27
    b5de:	90 0d       	add	r25, r0
    b5e0:	11 24       	eor	r1, r1
    b5e2:	8e 54       	subi	r24, 0x4E	; 78
    b5e4:	92 4f       	sbci	r25, 0xF2	; 242
    b5e6:	fc 01       	movw	r30, r24
    b5e8:	e5 5e       	subi	r30, 0xE5	; 229
    b5ea:	fe 4f       	sbci	r31, 0xFE	; 254
    b5ec:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b5ee:	32 97       	sbiw	r30, 0x02	; 2
    b5f0:	28 e2       	ldi	r18, 0x28	; 40
    b5f2:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b5f4:	31 96       	adiw	r30, 0x01	; 1
    b5f6:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b5f8:	35 97       	sbiw	r30, 0x05	; 5
    b5fa:	71 83       	std	Z+1, r23	; 0x01
    b5fc:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b5fe:	32 96       	adiw	r30, 0x02	; 2
    b600:	51 83       	std	Z+1, r21	; 0x01
    b602:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b604:	3d 96       	adiw	r30, 0x0d	; 13
    b606:	83 e0       	ldi	r24, 0x03	; 3
    b608:	56 95       	lsr	r21
    b60a:	47 95       	ror	r20
    b60c:	8a 95       	dec	r24
    b60e:	e1 f7       	brne	.-8      	; 0xb608 <init_enemy_level_hazard+0xb2>
    b610:	40 83       	st	Z, r20
    b612:	08 95       	ret

0000b614 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b614:	cf 93       	push	r28
    b616:	df 93       	push	r29
    b618:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b61a:	bc 01       	movw	r22, r24
    b61c:	88 81       	ld	r24, Y
    b61e:	99 81       	ldd	r25, Y+1	; 0x01
    b620:	0e 94 ad 42 	call	0x855a	; 0x855a <EepromReadBlock>
	if (status == 0x03)
    b624:	83 30       	cpi	r24, 0x03	; 3
    b626:	29 f4       	brne	.+10     	; 0xb632 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b628:	ce 01       	movw	r24, r28
	}
}
    b62a:	df 91       	pop	r29
    b62c:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b62e:	0c 94 63 42 	jmp	0x84c6	; 0x84c6 <EepromWriteBlock>
	}
}
    b632:	df 91       	pop	r29
    b634:	cf 91       	pop	r28
    b636:	08 95       	ret

0000b638 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b638:	1f 93       	push	r17
    b63a:	cf 93       	push	r28
    b63c:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b63e:	d0 e0       	ldi	r29, 0x00	; 0
    b640:	10 e2       	ldi	r17, 0x20	; 32
    b642:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b644:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b646:	c1 17       	cp	r28, r17
    b648:	41 f0       	breq	.+16     	; 0xb65a <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b64a:	40 e0       	ldi	r20, 0x00	; 0
    b64c:	50 e0       	ldi	r21, 0x00	; 0
    b64e:	6c 2f       	mov	r22, r28
    b650:	8d 2f       	mov	r24, r29
    b652:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <SetTile>
    b656:	cf 5f       	subi	r28, 0xFF	; 255
    b658:	f6 cf       	rjmp	.-20     	; 0xb646 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b65a:	df 5f       	subi	r29, 0xFF	; 255
    b65c:	dc 31       	cpi	r29, 0x1C	; 28
    b65e:	91 f7       	brne	.-28     	; 0xb644 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b660:	df 91       	pop	r29
    b662:	cf 91       	pop	r28
    b664:	1f 91       	pop	r17
    b666:	08 95       	ret

0000b668 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b668:	dc 01       	movw	r26, r24
    b66a:	e6 2f       	mov	r30, r22
    b66c:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b66e:	25 e0       	ldi	r18, 0x05	; 5
    b670:	62 2f       	mov	r22, r18
    b672:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    b676:	58 2f       	mov	r21, r24
    b678:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b67a:	40 91 c8 0d 	lds	r20, 0x0DC8
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b67e:	8e 2f       	mov	r24, r30
    b680:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b684:	e8 2f       	mov	r30, r24
    b686:	f0 e0       	ldi	r31, 0x00	; 0
    b688:	54 9f       	mul	r21, r20
    b68a:	e0 0d       	add	r30, r0
    b68c:	f1 1d       	adc	r31, r1
    b68e:	11 24       	eor	r1, r1
    b690:	32 96       	adiw	r30, 0x02	; 2
    b692:	ea 0f       	add	r30, r26
    b694:	fb 1f       	adc	r31, r27
    b696:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b698:	e9 2f       	mov	r30, r25
    b69a:	f0 e0       	ldi	r31, 0x00	; 0
    b69c:	95 e0       	ldi	r25, 0x05	; 5
    b69e:	39 9f       	mul	r19, r25
    b6a0:	e0 0d       	add	r30, r0
    b6a2:	f1 1d       	adc	r31, r1
    b6a4:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b6a6:	99 e1       	ldi	r25, 0x19	; 25
    b6a8:	89 9f       	mul	r24, r25
    b6aa:	e0 0d       	add	r30, r0
    b6ac:	f1 1d       	adc	r31, r1
    b6ae:	11 24       	eor	r1, r1
    b6b0:	e3 52       	subi	r30, 0x23	; 35
    b6b2:	ff 49       	sbci	r31, 0x9F	; 159
    b6b4:	84 91       	lpm	r24, Z
}
    b6b6:	08 95       	ret

0000b6b8 <render_camera_view>:

void render_camera_view()
{
    b6b8:	7f 92       	push	r7
    b6ba:	8f 92       	push	r8
    b6bc:	9f 92       	push	r9
    b6be:	af 92       	push	r10
    b6c0:	bf 92       	push	r11
    b6c2:	cf 92       	push	r12
    b6c4:	df 92       	push	r13
    b6c6:	ef 92       	push	r14
    b6c8:	ff 92       	push	r15
    b6ca:	0f 93       	push	r16
    b6cc:	1f 93       	push	r17
    b6ce:	cf 93       	push	r28
    b6d0:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b6d2:	c0 91 b2 0d 	lds	r28, 0x0DB2
    b6d6:	d0 91 b3 0d 	lds	r29, 0x0DB3
    b6da:	83 e0       	ldi	r24, 0x03	; 3
    b6dc:	d6 95       	lsr	r29
    b6de:	c7 95       	ror	r28
    b6e0:	8a 95       	dec	r24
    b6e2:	e1 f7       	brne	.-8      	; 0xb6dc <render_camera_view+0x24>
    b6e4:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b6e6:	00 91 ba 0d 	lds	r16, 0x0DBA
    b6ea:	06 95       	lsr	r16
    b6ec:	06 95       	lsr	r16
    b6ee:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b6f0:	dd 27       	eor	r29, r29
    b6f2:	7e 01       	movw	r14, r28
    b6f4:	4c e1       	ldi	r20, 0x1C	; 28
    b6f6:	e4 0e       	add	r14, r20
    b6f8:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b6fa:	10 e0       	ldi	r17, 0x00	; 0
    b6fc:	68 01       	movw	r12, r16
    b6fe:	89 e1       	ldi	r24, 0x19	; 25
    b700:	c8 0e       	add	r12, r24
    b702:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b704:	9e e1       	ldi	r25, 0x1E	; 30
    b706:	a9 2e       	mov	r10, r25
    b708:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b70a:	ec 16       	cp	r14, r28
    b70c:	fd 06       	cpc	r15, r29
    b70e:	70 f1       	brcs	.+92     	; 0xb76c <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b710:	48 01       	movw	r8, r16
    b712:	c8 14       	cp	r12, r8
    b714:	d9 04       	cpc	r13, r9
    b716:	40 f1       	brcs	.+80     	; 0xb768 <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b718:	48 2d       	mov	r20, r8
    b71a:	6c 2f       	mov	r22, r28
    b71c:	80 91 d0 0f 	lds	r24, 0x0FD0
    b720:	90 91 d1 0f 	lds	r25, 0x0FD1
    b724:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b728:	28 2f       	mov	r18, r24
    b72a:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b72c:	80 91 b3 0c 	lds	r24, 0x0CB3
    b730:	86 95       	lsr	r24
    b732:	86 95       	lsr	r24
    b734:	86 95       	lsr	r24
    b736:	90 e0       	ldi	r25, 0x00	; 0
    b738:	80 1b       	sub	r24, r16
    b73a:	91 0b       	sbc	r25, r17
    b73c:	88 0d       	add	r24, r8
    b73e:	99 1d       	adc	r25, r9
    b740:	b5 01       	movw	r22, r10
    b742:	0e 94 2b 73 	call	0xe656	; 0xe656 <__udivmodhi4>
    b746:	90 91 b2 0c 	lds	r25, 0x0CB2
    b74a:	96 95       	lsr	r25
    b74c:	96 95       	lsr	r25
    b74e:	96 95       	lsr	r25
    b750:	97 19       	sub	r25, r7
    b752:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b754:	a9 01       	movw	r20, r18
    b756:	68 2f       	mov	r22, r24
    b758:	89 2f       	mov	r24, r25
    b75a:	8f 71       	andi	r24, 0x1F	; 31
    b75c:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b760:	8f ef       	ldi	r24, 0xFF	; 255
    b762:	88 1a       	sub	r8, r24
    b764:	98 0a       	sbc	r9, r24
    b766:	d5 cf       	rjmp	.-86     	; 0xb712 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b768:	21 96       	adiw	r28, 0x01	; 1
    b76a:	cf cf       	rjmp	.-98     	; 0xb70a <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b76c:	df 91       	pop	r29
    b76e:	cf 91       	pop	r28
    b770:	1f 91       	pop	r17
    b772:	0f 91       	pop	r16
    b774:	ff 90       	pop	r15
    b776:	ef 90       	pop	r14
    b778:	df 90       	pop	r13
    b77a:	cf 90       	pop	r12
    b77c:	bf 90       	pop	r11
    b77e:	af 90       	pop	r10
    b780:	9f 90       	pop	r9
    b782:	8f 90       	pop	r8
    b784:	7f 90       	pop	r7
    b786:	08 95       	ret

0000b788 <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b788:	28 2f       	mov	r18, r24
    b78a:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b78c:	80 91 c7 0d 	lds	r24, 0x0DC7
    b790:	81 11       	cpse	r24, r1
    b792:	04 c0       	rjmp	.+8      	; 0xb79c <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b794:	bf 01       	movw	r22, r30
    b796:	82 2f       	mov	r24, r18
    b798:	0c 94 ce 58 	jmp	0xb19c	; 0xb19c <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b79c:	82 30       	cpi	r24, 0x02	; 2
    b79e:	21 f4       	brne	.+8      	; 0xb7a8 <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b7a0:	bf 01       	movw	r22, r30
    b7a2:	82 2f       	mov	r24, r18
    b7a4:	0c 94 8c 58 	jmp	0xb118	; 0xb118 <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b7a8:	84 30       	cpi	r24, 0x04	; 4
    b7aa:	31 f4       	brne	.+12     	; 0xb7b8 <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b7ac:	48 52       	subi	r20, 0x28	; 40
    b7ae:	51 09       	sbc	r21, r1
    b7b0:	bf 01       	movw	r22, r30
    b7b2:	82 2f       	mov	r24, r18
    b7b4:	0c 94 0b 59 	jmp	0xb216	; 0xb216 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b7b8:	80 91 cc 0d 	lds	r24, 0x0DCC
    b7bc:	63 e0       	ldi	r22, 0x03	; 3
    b7be:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    b7c2:	99 23       	and	r25, r25
    b7c4:	39 f3       	breq	.-50     	; 0xb794 <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b7c6:	91 30       	cpi	r25, 0x01	; 1
    b7c8:	89 f7       	brne	.-30     	; 0xb7ac <init_level_enemy+0x24>
    b7ca:	ea cf       	rjmp	.-44     	; 0xb7a0 <init_level_enemy+0x18>

0000b7cc <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b7cc:	28 2f       	mov	r18, r24
    b7ce:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b7d0:	80 91 c7 0d 	lds	r24, 0x0DC7
    b7d4:	81 30       	cpi	r24, 0x01	; 1
    b7d6:	21 f4       	brne	.+8      	; 0xb7e0 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b7d8:	bf 01       	movw	r22, r30
    b7da:	82 2f       	mov	r24, r18
    b7dc:	0c 94 49 59 	jmp	0xb292	; 0xb292 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b7e0:	83 30       	cpi	r24, 0x03	; 3
    b7e2:	21 f4       	brne	.+8      	; 0xb7ec <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b7e4:	bf 01       	movw	r22, r30
    b7e6:	82 2f       	mov	r24, r18
    b7e8:	0c 94 84 59 	jmp	0xb308	; 0xb308 <init_enemy_globe>
	}
	else if (game.frame_counter % 3 == 0)
    b7ec:	80 91 cc 0d 	lds	r24, 0x0DCC
    b7f0:	63 e0       	ldi	r22, 0x03	; 3
    b7f2:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    b7f6:	91 11       	cpse	r25, r1
    b7f8:	f5 cf       	rjmp	.-22     	; 0xb7e4 <init_space_enemy+0x18>
    b7fa:	ee cf       	rjmp	.-36     	; 0xb7d8 <init_space_enemy+0xc>

0000b7fc <spawn_enemy>:
		init_enemy_globe(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b7fc:	0f 93       	push	r16
    b7fe:	1f 93       	push	r17
    b800:	cf 93       	push	r28
    b802:	df 93       	push	r29
    b804:	00 d0       	rcall	.+0      	; 0xb806 <spawn_enemy+0xa>
    b806:	00 d0       	rcall	.+0      	; 0xb808 <spawn_enemy+0xc>
    b808:	cd b7       	in	r28, 0x3d	; 61
    b80a:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b80c:	20 91 b2 0d 	lds	r18, 0x0DB2
    b810:	30 91 b3 0d 	lds	r19, 0x0DB3
    b814:	28 3c       	cpi	r18, 0xC8	; 200
    b816:	35 40       	sbci	r19, 0x05	; 5
    b818:	98 f5       	brcc	.+102    	; 0xb880 <spawn_enemy+0x84>
    b81a:	22 eb       	ldi	r18, 0xB2	; 178
    b81c:	3d e0       	ldi	r19, 0x0D	; 13
    b81e:	10 e0       	ldi	r17, 0x00	; 0
    b820:	f9 01       	movw	r30, r18
    b822:	e4 5e       	subi	r30, 0xE4	; 228
    b824:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b826:	50 81       	ld	r21, Z
    b828:	51 11       	cpse	r21, r1
    b82a:	25 c0       	rjmp	.+74     	; 0xb876 <spawn_enemy+0x7a>
    b82c:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b82e:	50 81       	ld	r21, Z
    b830:	51 11       	cpse	r21, r1
    b832:	21 c0       	rjmp	.+66     	; 0xb876 <spawn_enemy+0x7a>
    b834:	04 2f       	mov	r16, r20
    b836:	ab 01       	movw	r20, r22
    b838:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b83a:	4b 83       	std	Y+3, r20	; 0x03
    b83c:	5c 83       	std	Y+4, r21	; 0x04
    b83e:	89 83       	std	Y+1, r24	; 0x01
    b840:	7a 83       	std	Y+2, r23	; 0x02
    b842:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    b846:	4b 81       	ldd	r20, Y+3	; 0x03
    b848:	5c 81       	ldd	r21, Y+4	; 0x04
    b84a:	69 81       	ldd	r22, Y+1	; 0x01
    b84c:	7a 81       	ldd	r23, Y+2	; 0x02
    b84e:	88 23       	and	r24, r24
    b850:	21 f0       	breq	.+8      	; 0xb85a <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b852:	81 2f       	mov	r24, r17
    b854:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <init_space_enemy>
    b858:	08 c0       	rjmp	.+16     	; 0xb86a <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b85a:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b85c:	01 11       	cpse	r16, r1
    b85e:	03 c0       	rjmp	.+6      	; 0xb866 <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b860:	0e 94 c4 5b 	call	0xb788	; 0xb788 <init_level_enemy>
    b864:	02 c0       	rjmp	.+4      	; 0xb86a <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b866:	0e 94 ab 5a 	call	0xb556	; 0xb556 <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b86a:	80 91 cd 0d 	lds	r24, 0x0DCD
    b86e:	8f 5f       	subi	r24, 0xFF	; 255
    b870:	80 93 cd 0d 	sts	0x0DCD, r24
    b874:	05 c0       	rjmp	.+10     	; 0xb880 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b876:	1f 5f       	subi	r17, 0xFF	; 255
    b878:	2b 5c       	subi	r18, 0xCB	; 203
    b87a:	3f 4f       	sbci	r19, 0xFF	; 255
    b87c:	15 30       	cpi	r17, 0x05	; 5
    b87e:	81 f6       	brne	.-96     	; 0xb820 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b880:	0f 90       	pop	r0
    b882:	0f 90       	pop	r0
    b884:	0f 90       	pop	r0
    b886:	0f 90       	pop	r0
    b888:	df 91       	pop	r29
    b88a:	cf 91       	pop	r28
    b88c:	1f 91       	pop	r17
    b88e:	0f 91       	pop	r16
    b890:	08 95       	ret

0000b892 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b892:	9f ef       	ldi	r25, 0xFF	; 255
    b894:	98 0f       	add	r25, r24
    b896:	9e 30       	cpi	r25, 0x0E	; 14
    b898:	28 f0       	brcs	.+10     	; 0xb8a4 <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    b89a:	8f 50       	subi	r24, 0x0F	; 15
    b89c:	8c 30       	cpi	r24, 0x0C	; 12
    b89e:	20 f0       	brcs	.+8      	; 0xb8a8 <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b8a0:	80 e0       	ldi	r24, 0x00	; 0
    b8a2:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b8a4:	81 e0       	ldi	r24, 0x01	; 1
    b8a6:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    b8a8:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b8aa:	08 95       	ret

0000b8ac <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b8ac:	af 92       	push	r10
    b8ae:	bf 92       	push	r11
    b8b0:	cf 92       	push	r12
    b8b2:	df 92       	push	r13
    b8b4:	ef 92       	push	r14
    b8b6:	ff 92       	push	r15
    b8b8:	0f 93       	push	r16
    b8ba:	1f 93       	push	r17
    b8bc:	cf 93       	push	r28
    b8be:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    b8c0:	68 e1       	ldi	r22, 0x18	; 24
    b8c2:	81 e0       	ldi	r24, 0x01	; 1
    b8c4:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    b8c8:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b8ca:	80 91 c3 0d 	lds	r24, 0x0DC3
    b8ce:	8f 5f       	subi	r24, 0xFF	; 255
    b8d0:	80 93 c3 0d 	sts	0x0DC3, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b8d4:	20 91 ce 0d 	lds	r18, 0x0DCE
    b8d8:	62 2f       	mov	r22, r18
    b8da:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    b8de:	89 2f       	mov	r24, r25
    b8e0:	90 e0       	ldi	r25, 0x00	; 0
    b8e2:	30 e0       	ldi	r19, 0x00	; 0
    b8e4:	21 50       	subi	r18, 0x01	; 1
    b8e6:	31 09       	sbc	r19, r1
    b8e8:	82 17       	cp	r24, r18
    b8ea:	93 07       	cpc	r25, r19
    b8ec:	31 f4       	brne	.+12     	; 0xb8fa <append_tile_column+0x4e>
    b8ee:	bb 24       	eor	r11, r11
    b8f0:	b3 94       	inc	r11
    b8f2:	80 91 cd 0d 	lds	r24, 0x0DCD
    b8f6:	85 30       	cpi	r24, 0x05	; 5
    b8f8:	08 f0       	brcs	.+2      	; 0xb8fc <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b8fa:	b1 2c       	mov	r11, r1
    b8fc:	00 e0       	ldi	r16, 0x00	; 0
    b8fe:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b900:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
    b902:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b904:	2e e1       	ldi	r18, 0x1E	; 30
    b906:	c2 2e       	mov	r12, r18
    b908:	d1 2c       	mov	r13, r1
    b90a:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b90c:	40 91 ba 0d 	lds	r20, 0x0DBA
    b910:	46 95       	lsr	r20
    b912:	46 95       	lsr	r20
    b914:	46 95       	lsr	r20
    b916:	40 0f       	add	r20, r16
    b918:	60 91 bb 0d 	lds	r22, 0x0DBB
    b91c:	80 91 d0 0f 	lds	r24, 0x0FD0
    b920:	90 91 d1 0f 	lds	r25, 0x0FD1
    b924:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    b928:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b92a:	28 2f       	mov	r18, r24
    b92c:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b92e:	80 91 b3 0c 	lds	r24, 0x0CB3
    b932:	86 95       	lsr	r24
    b934:	86 95       	lsr	r24
    b936:	86 95       	lsr	r24
    b938:	a8 01       	movw	r20, r16
    b93a:	48 0f       	add	r20, r24
    b93c:	51 1d       	adc	r21, r1
    b93e:	ca 01       	movw	r24, r20
    b940:	b6 01       	movw	r22, r12
    b942:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b946:	a9 01       	movw	r20, r18
    b948:	68 2f       	mov	r22, r24
    b94a:	80 91 bf 0d 	lds	r24, 0x0DBF
    b94e:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b952:	bb 20       	and	r11, r11
    b954:	81 f0       	breq	.+32     	; 0xb976 <append_tile_column+0xca>
    b956:	01 15       	cp	r16, r1
    b958:	11 05       	cpc	r17, r1
    b95a:	69 f0       	breq	.+26     	; 0xb976 <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b95c:	81 ef       	ldi	r24, 0xF1	; 241
    b95e:	8e 0d       	add	r24, r14
    b960:	85 30       	cpi	r24, 0x05	; 5
    b962:	30 f0       	brcs	.+12     	; 0xb970 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b964:	8f ef       	ldi	r24, 0xFF	; 255
    b966:	8e 0d       	add	r24, r14
    b968:	8e 30       	cpi	r24, 0x0E	; 14
    b96a:	08 f4       	brcc	.+2      	; 0xb96e <append_tile_column+0xc2>
    b96c:	60 c0       	rjmp	.+192    	; 0xba2e <append_tile_column+0x182>
    b96e:	03 c0       	rjmp	.+6      	; 0xb976 <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b970:	c1 11       	cpse	r28, r1
    b972:	f8 cf       	rjmp	.-16     	; 0xb964 <append_tile_column+0xb8>
    b974:	c0 2f       	mov	r28, r16
    b976:	0f 5f       	subi	r16, 0xFF	; 255
    b978:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b97a:	09 31       	cpi	r16, 0x19	; 25
    b97c:	11 05       	cpc	r17, r1
    b97e:	29 f6       	brne	.-118    	; 0xb90a <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b980:	bb 20       	and	r11, r11
    b982:	51 f0       	breq	.+20     	; 0xb998 <append_tile_column+0xec>
    b984:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    b988:	88 23       	and	r24, r24
    b98a:	31 f0       	breq	.+12     	; 0xb998 <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    b98c:	ff 0c       	add	r15, r15
    b98e:	ff 0c       	add	r15, r15
    b990:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b992:	6f 2d       	mov	r22, r15
    b994:	70 e0       	ldi	r23, 0x00	; 0
    b996:	32 c0       	rjmp	.+100    	; 0xb9fc <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b998:	cc 23       	and	r28, r28
    b99a:	f1 f0       	breq	.+60     	; 0xb9d8 <append_tile_column+0x12c>
    b99c:	80 91 c7 0d 	lds	r24, 0x0DC7
    b9a0:	90 91 ba 0d 	lds	r25, 0x0DBA
    b9a4:	20 91 b2 0d 	lds	r18, 0x0DB2
    b9a8:	30 91 b3 0d 	lds	r19, 0x0DB3
    b9ac:	6c 2f       	mov	r22, r28
    b9ae:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b9b0:	96 95       	lsr	r25
    b9b2:	96 95       	lsr	r25
    b9b4:	96 95       	lsr	r25
    b9b6:	69 0f       	add	r22, r25
    b9b8:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b9ba:	82 30       	cpi	r24, 0x02	; 2
    b9bc:	19 f4       	brne	.+6      	; 0xb9c4 <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b9be:	61 50       	subi	r22, 0x01	; 1
    b9c0:	71 09       	sbc	r23, r1
    b9c2:	02 c0       	rjmp	.+4      	; 0xb9c8 <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b9c4:	6f 5f       	subi	r22, 0xFF	; 255
    b9c6:	7f 4f       	sbci	r23, 0xFF	; 255
    b9c8:	93 e0       	ldi	r25, 0x03	; 3
    b9ca:	66 0f       	add	r22, r22
    b9cc:	77 1f       	adc	r23, r23
    b9ce:	9a 95       	dec	r25
    b9d0:	e1 f7       	brne	.-8      	; 0xb9ca <append_tile_column+0x11e>
    b9d2:	41 e0       	ldi	r20, 0x01	; 1
    b9d4:	c9 01       	movw	r24, r18
    b9d6:	17 c0       	rjmp	.+46     	; 0xba06 <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b9d8:	dd 23       	and	r29, r29
    b9da:	c9 f0       	breq	.+50     	; 0xba0e <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b9dc:	80 91 ba 0d 	lds	r24, 0x0DBA
    b9e0:	86 95       	lsr	r24
    b9e2:	86 95       	lsr	r24
    b9e4:	86 95       	lsr	r24
    b9e6:	6d 2f       	mov	r22, r29
    b9e8:	70 e0       	ldi	r23, 0x00	; 0
    b9ea:	68 0f       	add	r22, r24
    b9ec:	71 1d       	adc	r23, r1
    b9ee:	61 50       	subi	r22, 0x01	; 1
    b9f0:	71 09       	sbc	r23, r1
    b9f2:	83 e0       	ldi	r24, 0x03	; 3
    b9f4:	66 0f       	add	r22, r22
    b9f6:	77 1f       	adc	r23, r23
    b9f8:	8a 95       	dec	r24
    b9fa:	e1 f7       	brne	.-8      	; 0xb9f4 <append_tile_column+0x148>
    b9fc:	80 91 b2 0d 	lds	r24, 0x0DB2
    ba00:	90 91 b3 0d 	lds	r25, 0x0DB3
    ba04:	40 e0       	ldi	r20, 0x00	; 0
    ba06:	80 52       	subi	r24, 0x20	; 32
    ba08:	9f 4f       	sbci	r25, 0xFF	; 255
    ba0a:	0e 94 fe 5b 	call	0xb7fc	; 0xb7fc <spawn_enemy>
	}
	
    game.scroll_src_x++;
    ba0e:	80 91 bb 0d 	lds	r24, 0x0DBB
    ba12:	8f 5f       	subi	r24, 0xFF	; 255
    ba14:	80 93 bb 0d 	sts	0x0DBB, r24
	game.scroll_dest_x++;
    ba18:	80 91 bf 0d 	lds	r24, 0x0DBF
    ba1c:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    ba1e:	80 32       	cpi	r24, 0x20	; 32
    ba20:	18 f4       	brcc	.+6      	; 0xba28 <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    ba22:	80 93 bf 0d 	sts	0x0DBF, r24
    ba26:	07 c0       	rjmp	.+14     	; 0xba36 <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    ba28:	10 92 bf 0d 	sts	0x0DBF, r1
    ba2c:	04 c0       	rjmp	.+8      	; 0xba36 <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    ba2e:	d1 11       	cpse	r29, r1
    ba30:	a2 cf       	rjmp	.-188    	; 0xb976 <append_tile_column+0xca>
    ba32:	da 2d       	mov	r29, r10
    ba34:	a0 cf       	rjmp	.-192    	; 0xb976 <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    ba36:	df 91       	pop	r29
    ba38:	cf 91       	pop	r28
    ba3a:	1f 91       	pop	r17
    ba3c:	0f 91       	pop	r16
    ba3e:	ff 90       	pop	r15
    ba40:	ef 90       	pop	r14
    ba42:	df 90       	pop	r13
    ba44:	cf 90       	pop	r12
    ba46:	bf 90       	pop	r11
    ba48:	af 90       	pop	r10
    ba4a:	08 95       	ret

0000ba4c <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    ba4c:	80 91 b2 0d 	lds	r24, 0x0DB2
    ba50:	90 91 b3 0d 	lds	r25, 0x0DB3
    ba54:	01 96       	adiw	r24, 0x01	; 1
    ba56:	90 93 b3 0d 	sts	0x0DB3, r25
    ba5a:	80 93 b2 0d 	sts	0x0DB2, r24
	Scroll(1,0);
    ba5e:	60 e0       	ldi	r22, 0x00	; 0
    ba60:	81 e0       	ldi	r24, 0x01	; 1
    ba62:	0e 94 28 4f 	call	0x9e50	; 0x9e50 <Scroll>
	if (++game.scroll_x == 8)
    ba66:	80 91 bd 0d 	lds	r24, 0x0DBD
    ba6a:	8f 5f       	subi	r24, 0xFF	; 255
    ba6c:	88 30       	cpi	r24, 0x08	; 8
    ba6e:	19 f0       	breq	.+6      	; 0xba76 <move_camera_x+0x2a>
    ba70:	80 93 bd 0d 	sts	0x0DBD, r24
    ba74:	08 95       	ret
	{
		game.scroll_x = 0;
    ba76:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    ba7a:	0c 94 56 5c 	jmp	0xb8ac	; 0xb8ac <append_tile_column>

0000ba7e <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    ba7e:	82 e0       	ldi	r24, 0x02	; 2
    ba80:	80 93 26 0e 	sts	0x0E26, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ba84:	85 e0       	ldi	r24, 0x05	; 5
    ba86:	80 93 27 0e 	sts	0x0E27, r24
	game.player.run.anims = run_anim;
    ba8a:	e0 e3       	ldi	r30, 0x30	; 48
    ba8c:	f0 e1       	ldi	r31, 0x10	; 16
    ba8e:	f0 93 2c 0e 	sts	0x0E2C, r31
    ba92:	e0 93 2b 0e 	sts	0x0E2B, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    ba96:	81 ed       	ldi	r24, 0xD1	; 209
    ba98:	96 e3       	ldi	r25, 0x36	; 54
    ba9a:	91 83       	std	Z+1, r25	; 0x01
    ba9c:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    ba9e:	87 ec       	ldi	r24, 0xC7	; 199
    baa0:	96 e3       	ldi	r25, 0x36	; 54
    baa2:	93 83       	std	Z+3, r25	; 0x03
    baa4:	82 83       	std	Z+2, r24	; 0x02
    baa6:	08 95       	ret

0000baa8 <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    baa8:	a2 eb       	ldi	r26, 0xB2	; 178
    baaa:	bd e0       	ldi	r27, 0x0D	; 13
    baac:	90 93 d1 0f 	sts	0x0FD1, r25
    bab0:	80 93 d0 0f 	sts	0x0FD0, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    bab4:	fc 01       	movw	r30, r24
    bab6:	24 91       	lpm	r18, Z
    bab8:	56 96       	adiw	r26, 0x16	; 22
    baba:	2c 93       	st	X, r18
    babc:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    babe:	9c 01       	movw	r18, r24
    bac0:	2f 5f       	subi	r18, 0xFF	; 255
    bac2:	3f 4f       	sbci	r19, 0xFF	; 255
    bac4:	f9 01       	movw	r30, r18
    bac6:	44 91       	lpm	r20, Z
    bac8:	57 96       	adiw	r26, 0x17	; 23
    baca:	4c 93       	st	X, r20
    bacc:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    bace:	fc 01       	movw	r30, r24
    bad0:	84 91       	lpm	r24, Z
    bad2:	98 2f       	mov	r25, r24
    bad4:	99 0f       	add	r25, r25
    bad6:	99 0f       	add	r25, r25
    bad8:	89 0f       	add	r24, r25
    bada:	1f 96       	adiw	r26, 0x0f	; 15
    badc:	8c 93       	st	X, r24
    bade:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    bae0:	f9 01       	movw	r30, r18
    bae2:	24 91       	lpm	r18, Z
    bae4:	82 2f       	mov	r24, r18
    bae6:	88 0f       	add	r24, r24
    bae8:	88 0f       	add	r24, r24
    baea:	28 0f       	add	r18, r24
    baec:	50 96       	adiw	r26, 0x10	; 16
    baee:	2c 93       	st	X, r18
    baf0:	08 95       	ret

0000baf2 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    baf2:	cf 92       	push	r12
    baf4:	df 92       	push	r13
    baf6:	ef 92       	push	r14
    baf8:	ff 92       	push	r15
    bafa:	0f 93       	push	r16
    bafc:	1f 93       	push	r17
    bafe:	cf 93       	push	r28
    bb00:	df 93       	push	r29
    bb02:	7c 01       	movw	r14, r24
    bb04:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bb06:	88 e0       	ldi	r24, 0x08	; 8
    bb08:	48 9f       	mul	r20, r24
    bb0a:	80 01       	movw	r16, r0
    bb0c:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    bb0e:	c0 e0       	ldi	r28, 0x00	; 0
    bb10:	cd 17       	cp	r28, r29
    bb12:	09 f4       	brne	.+2      	; 0xbb16 <on_solid_ground+0x24>
    bb14:	41 c0       	rjmp	.+130    	; 0xbb98 <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bb16:	f7 01       	movw	r30, r14
    bb18:	42 81       	ldd	r20, Z+2	; 0x02
    bb1a:	53 81       	ldd	r21, Z+3	; 0x03
    bb1c:	40 0f       	add	r20, r16
    bb1e:	51 1f       	adc	r21, r17
    bb20:	83 e0       	ldi	r24, 0x03	; 3
    bb22:	56 95       	lsr	r21
    bb24:	47 95       	ror	r20
    bb26:	8a 95       	dec	r24
    bb28:	e1 f7       	brne	.-8      	; 0xbb22 <on_solid_ground+0x30>
    bb2a:	60 81       	ld	r22, Z
    bb2c:	71 81       	ldd	r23, Z+1	; 0x01
    bb2e:	93 e0       	ldi	r25, 0x03	; 3
    bb30:	76 95       	lsr	r23
    bb32:	67 95       	ror	r22
    bb34:	9a 95       	dec	r25
    bb36:	e1 f7       	brne	.-8      	; 0xbb30 <on_solid_ground+0x3e>
    bb38:	6c 0f       	add	r22, r28
    bb3a:	80 91 d0 0f 	lds	r24, 0x0FD0
    bb3e:	90 91 d1 0f 	lds	r25, 0x0FD1
    bb42:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    bb46:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    bb48:	f7 01       	movw	r30, r14
    bb4a:	42 81       	ldd	r20, Z+2	; 0x02
    bb4c:	53 81       	ldd	r21, Z+3	; 0x03
    bb4e:	40 0f       	add	r20, r16
    bb50:	51 1f       	adc	r21, r17
    bb52:	23 e0       	ldi	r18, 0x03	; 3
    bb54:	56 95       	lsr	r21
    bb56:	47 95       	ror	r20
    bb58:	2a 95       	dec	r18
    bb5a:	e1 f7       	brne	.-8      	; 0xbb54 <on_solid_ground+0x62>
    bb5c:	20 81       	ld	r18, Z
    bb5e:	31 81       	ldd	r19, Z+1	; 0x01
    bb60:	29 5f       	subi	r18, 0xF9	; 249
    bb62:	3f 4f       	sbci	r19, 0xFF	; 255
    bb64:	53 e0       	ldi	r21, 0x03	; 3
    bb66:	36 95       	lsr	r19
    bb68:	27 95       	ror	r18
    bb6a:	5a 95       	dec	r21
    bb6c:	e1 f7       	brne	.-8      	; 0xbb66 <on_solid_ground+0x74>
    bb6e:	6c 2f       	mov	r22, r28
    bb70:	62 0f       	add	r22, r18
    bb72:	80 91 d0 0f 	lds	r24, 0x0FD0
    bb76:	90 91 d1 0f 	lds	r25, 0x0FD1
    bb7a:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    bb7e:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    bb80:	8c 2d       	mov	r24, r12
    bb82:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    bb86:	81 11       	cpse	r24, r1
    bb88:	09 c0       	rjmp	.+18     	; 0xbb9c <on_solid_ground+0xaa>
    bb8a:	8d 2d       	mov	r24, r13
    bb8c:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    bb90:	81 11       	cpse	r24, r1
    bb92:	04 c0       	rjmp	.+8      	; 0xbb9c <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    bb94:	cf 5f       	subi	r28, 0xFF	; 255
    bb96:	bc cf       	rjmp	.-136    	; 0xbb10 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    bb98:	80 e0       	ldi	r24, 0x00	; 0
    bb9a:	01 c0       	rjmp	.+2      	; 0xbb9e <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    bb9c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    bb9e:	df 91       	pop	r29
    bba0:	cf 91       	pop	r28
    bba2:	1f 91       	pop	r17
    bba4:	0f 91       	pop	r16
    bba6:	ff 90       	pop	r15
    bba8:	ef 90       	pop	r14
    bbaa:	df 90       	pop	r13
    bbac:	cf 90       	pop	r12
    bbae:	08 95       	ret

0000bbb0 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    bbb0:	9c 01       	movw	r18, r24
    bbb2:	80 91 f5 0c 	lds	r24, 0x0CF5
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    bbb6:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    bbb8:	83 30       	cpi	r24, 0x03	; 3
    bbba:	08 f0       	brcs	.+2      	; 0xbbbe <find_shot_slot+0xe>
    bbbc:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    bbbe:	f9 01       	movw	r30, r18
    bbc0:	48 9f       	mul	r20, r24
    bbc2:	e0 0d       	add	r30, r0
    bbc4:	f1 1d       	adc	r31, r1
    bbc6:	11 24       	eor	r1, r1
    bbc8:	51 8d       	ldd	r21, Z+25	; 0x19
    bbca:	91 e0       	ldi	r25, 0x01	; 1
    bbcc:	98 0f       	add	r25, r24
    bbce:	51 11       	cpse	r21, r1
    bbd0:	03 c0       	rjmp	.+6      	; 0xbbd8 <find_shot_slot+0x28>
		{
			return i++;
    bbd2:	90 93 f5 0c 	sts	0x0CF5, r25
    bbd6:	08 95       	ret
		}
		i++;
    bbd8:	89 2f       	mov	r24, r25
	}
    bbda:	ee cf       	rjmp	.-36     	; 0xbbb8 <find_shot_slot+0x8>

0000bbdc <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    bbdc:	bf 92       	push	r11
    bbde:	cf 92       	push	r12
    bbe0:	df 92       	push	r13
    bbe2:	ef 92       	push	r14
    bbe4:	ff 92       	push	r15
    bbe6:	0f 93       	push	r16
    bbe8:	1f 93       	push	r17
    bbea:	cf 93       	push	r28
    bbec:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_A && player->active_shots < MAX_PLAYER_SHOTS)
    bbee:	fc 01       	movw	r30, r24
    bbf0:	ec 58       	subi	r30, 0x8C	; 140
    bbf2:	ff 4f       	sbci	r31, 0xFF	; 255
    bbf4:	20 81       	ld	r18, Z
    bbf6:	31 81       	ldd	r19, Z+1	; 0x01
    bbf8:	30 ff       	sbrs	r19, 0
    bbfa:	90 c0       	rjmp	.+288    	; 0xbd1c <update_shot+0x140>
    bbfc:	fc 01       	movw	r30, r24
    bbfe:	27 81       	ldd	r18, Z+7	; 0x07
    bc00:	23 30       	cpi	r18, 0x03	; 3
    bc02:	08 f0       	brcs	.+2      	; 0xbc06 <update_shot+0x2a>
    bc04:	8b c0       	rjmp	.+278    	; 0xbd1c <update_shot+0x140>
    bc06:	16 2f       	mov	r17, r22
    bc08:	ec 01       	movw	r28, r24
	{
		SFX_PLAYER_SHOOT;
    bc0a:	2f ef       	ldi	r18, 0xFF	; 255
    bc0c:	43 e2       	ldi	r20, 0x23	; 35
    bc0e:	63 e0       	ldi	r22, 0x03	; 3
    bc10:	82 e0       	ldi	r24, 0x02	; 2
    bc12:	0e 94 0f 45 	call	0x8a1e	; 0x8a1e <TriggerNote>
		idx = find_shot_slot(player);
    bc16:	ce 01       	movw	r24, r28
    bc18:	0e 94 d8 5d 	call	0xbbb0	; 0xbbb0 <find_shot_slot>
    bc1c:	b8 2e       	mov	r11, r24
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    bc1e:	e8 2e       	mov	r14, r24
    bc20:	f1 2c       	mov	r15, r1
    bc22:	f4 e1       	ldi	r31, 0x14	; 20
    bc24:	8f 9f       	mul	r24, r31
    bc26:	60 01       	movw	r12, r0
    bc28:	11 24       	eor	r1, r1
    bc2a:	c6 01       	movw	r24, r12
    bc2c:	4c 96       	adiw	r24, 0x1c	; 28
    bc2e:	8c 0f       	add	r24, r28
    bc30:	9d 1f       	adc	r25, r29
    bc32:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    bc36:	40 e0       	ldi	r20, 0x00	; 0
    bc38:	bc 01       	movw	r22, r24
    bc3a:	8b 2d       	mov	r24, r11
    bc3c:	81 0f       	add	r24, r17
    bc3e:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		player->shot[idx].active = 1;
    bc42:	8e 01       	movw	r16, r28
    bc44:	0c 0d       	add	r16, r12
    bc46:	1d 1d       	adc	r17, r13
    bc48:	81 e0       	ldi	r24, 0x01	; 1
    bc4a:	f8 01       	movw	r30, r16
    bc4c:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    bc4e:	ca 80       	ldd	r12, Y+2	; 0x02
    bc50:	db 80       	ldd	r13, Y+3	; 0x03
    bc52:	f8 ef       	ldi	r31, 0xF8	; 248
    bc54:	cf 22       	and	r12, r31
    bc56:	f8 01       	movw	r30, r16
    bc58:	83 8d       	ldd	r24, Z+27	; 0x1b
    bc5a:	c8 0e       	add	r12, r24
    bc5c:	d1 1c       	adc	r13, r1
    bc5e:	87 fd       	sbrc	r24, 7
    bc60:	da 94       	dec	r13
    bc62:	d3 8a       	std	Z+19, r13	; 0x13
    bc64:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    bc66:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    bc6a:	28 81       	ld	r18, Y
    bc6c:	39 81       	ldd	r19, Y+1	; 0x01
    bc6e:	88 23       	and	r24, r24
    bc70:	a1 f0       	breq	.+40     	; 0xbc9a <update_shot+0xbe>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    bc72:	8b 85       	ldd	r24, Y+11	; 0x0b
    bc74:	f8 e0       	ldi	r31, 0x08	; 8
    bc76:	8f 9f       	mul	r24, r31
    bc78:	20 0d       	add	r18, r0
    bc7a:	31 1d       	adc	r19, r1
    bc7c:	11 24       	eor	r1, r1
    bc7e:	f8 01       	movw	r30, r16
    bc80:	31 8b       	std	Z+17, r19	; 0x11
    bc82:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    bc84:	82 8d       	ldd	r24, Z+26	; 0x1a
    bc86:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    bc88:	87 89       	ldd	r24, Z+23	; 0x17
    bc8a:	86 30       	cpi	r24, 0x06	; 6
    bc8c:	09 f0       	breq	.+2      	; 0xbc90 <update_shot+0xb4>
    bc8e:	43 c0       	rjmp	.+134    	; 0xbd16 <update_shot+0x13a>
    bc90:	f8 01       	movw	r30, r16
			{
				player->shot[idx].shared.vy *= -1;
    bc92:	84 89       	ldd	r24, Z+20	; 0x14
    bc94:	81 95       	neg	r24
    bc96:	84 8b       	std	Z+20, r24	; 0x14
    bc98:	3e c0       	rjmp	.+124    	; 0xbd16 <update_shot+0x13a>
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    bc9a:	88 85       	ldd	r24, Y+8	; 0x08
    bc9c:	82 fd       	sbrc	r24, 2
    bc9e:	06 c0       	rjmp	.+12     	; 0xbcac <update_shot+0xd0>
			{
				player->shot[idx].shared.y += 8;
    bca0:	88 e0       	ldi	r24, 0x08	; 8
    bca2:	c8 0e       	add	r12, r24
    bca4:	d1 1c       	adc	r13, r1
    bca6:	f8 01       	movw	r30, r16
    bca8:	d3 8a       	std	Z+19, r13	; 0x13
    bcaa:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    bcac:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    bcae:	94 e1       	ldi	r25, 0x14	; 20
    bcb0:	9e 9d       	mul	r25, r14
    bcb2:	f0 01       	movw	r30, r0
    bcb4:	9f 9d       	mul	r25, r15
    bcb6:	f0 0d       	add	r31, r0
    bcb8:	11 24       	eor	r1, r1
    bcba:	ec 0f       	add	r30, r28
    bcbc:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    bcbe:	81 30       	cpi	r24, 0x01	; 1
    bcc0:	a9 f4       	brne	.+42     	; 0xbcec <update_shot+0x110>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    bcc2:	20 5f       	subi	r18, 0xF0	; 240
    bcc4:	3f 4f       	sbci	r19, 0xFF	; 255
    bcc6:	31 8b       	std	Z+17, r19	; 0x11
    bcc8:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    bcca:	82 8d       	ldd	r24, Z+26	; 0x1a
    bccc:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    bcce:	27 89       	ldd	r18, Z+23	; 0x17
    bcd0:	24 30       	cpi	r18, 0x04	; 4
    bcd2:	09 f5       	brne	.+66     	; 0xbd16 <update_shot+0x13a>
    bcd4:	ff ef       	ldi	r31, 0xFF	; 255
    bcd6:	ef 1a       	sub	r14, r31
    bcd8:	ff 0a       	sbc	r15, r31
    bcda:	9e 9d       	mul	r25, r14
    bcdc:	f0 01       	movw	r30, r0
    bcde:	9f 9d       	mul	r25, r15
    bce0:	f0 0d       	add	r31, r0
    bce2:	11 24       	eor	r1, r1
    bce4:	ec 0f       	add	r30, r28
    bce6:	fd 1f       	adc	r31, r29
    bce8:	81 95       	neg	r24
    bcea:	14 c0       	rjmp	.+40     	; 0xbd14 <update_shot+0x138>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    bcec:	28 50       	subi	r18, 0x08	; 8
    bcee:	31 09       	sbc	r19, r1
    bcf0:	31 8b       	std	Z+17, r19	; 0x11
    bcf2:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    bcf4:	82 8d       	ldd	r24, Z+26	; 0x1a
    bcf6:	81 95       	neg	r24
    bcf8:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    bcfa:	27 89       	ldd	r18, Z+23	; 0x17
    bcfc:	24 30       	cpi	r18, 0x04	; 4
    bcfe:	59 f4       	brne	.+22     	; 0xbd16 <update_shot+0x13a>
    bd00:	2f ef       	ldi	r18, 0xFF	; 255
    bd02:	e2 1a       	sub	r14, r18
    bd04:	f2 0a       	sbc	r15, r18
    bd06:	9e 9d       	mul	r25, r14
    bd08:	f0 01       	movw	r30, r0
    bd0a:	9f 9d       	mul	r25, r15
    bd0c:	f0 0d       	add	r31, r0
    bd0e:	11 24       	eor	r1, r1
    bd10:	ec 0f       	add	r30, r28
    bd12:	fd 1f       	adc	r31, r29
    bd14:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    bd16:	8f 81       	ldd	r24, Y+7	; 0x07
    bd18:	8f 5f       	subi	r24, 0xFF	; 255
    bd1a:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    bd1c:	df 91       	pop	r29
    bd1e:	cf 91       	pop	r28
    bd20:	1f 91       	pop	r17
    bd22:	0f 91       	pop	r16
    bd24:	ff 90       	pop	r15
    bd26:	ef 90       	pop	r14
    bd28:	df 90       	pop	r13
    bd2a:	cf 90       	pop	r12
    bd2c:	bf 90       	pop	r11
    bd2e:	08 95       	ret

0000bd30 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    bd30:	fc 01       	movw	r30, r24
    bd32:	40 81       	ld	r20, Z
    bd34:	51 81       	ldd	r21, Z+1	; 0x01
    bd36:	20 91 b2 0d 	lds	r18, 0x0DB2
    bd3a:	30 91 b3 0d 	lds	r19, 0x0DB3
    bd3e:	42 17       	cp	r20, r18
    bd40:	53 07       	cpc	r21, r19
    bd42:	f0 f0       	brcs	.+60     	; 0xbd80 <out_of_bounds+0x50>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    bd44:	48 5f       	subi	r20, 0xF8	; 248
    bd46:	5f 4f       	sbci	r21, 0xFF	; 255
    bd48:	20 52       	subi	r18, 0x20	; 32
    bd4a:	3f 4f       	sbci	r19, 0xFF	; 255
    bd4c:	24 17       	cp	r18, r20
    bd4e:	35 07       	cpc	r19, r21
    bd50:	b8 f0       	brcs	.+46     	; 0xbd80 <out_of_bounds+0x50>
	if (s->y < game.camera_y) return 1;
    bd52:	22 81       	ldd	r18, Z+2	; 0x02
    bd54:	33 81       	ldd	r19, Z+3	; 0x03
    bd56:	80 91 ba 0d 	lds	r24, 0x0DBA
    bd5a:	90 e0       	ldi	r25, 0x00	; 0
    bd5c:	28 17       	cp	r18, r24
    bd5e:	39 07       	cpc	r19, r25
    bd60:	78 f0       	brcs	.+30     	; 0xbd80 <out_of_bounds+0x50>
	if (s->y < 4) return 1;
    bd62:	24 30       	cpi	r18, 0x04	; 4
    bd64:	31 05       	cpc	r19, r1
    bd66:	60 f0       	brcs	.+24     	; 0xbd80 <out_of_bounds+0x50>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    bd68:	a9 01       	movw	r20, r18
    bd6a:	48 5f       	subi	r20, 0xF8	; 248
    bd6c:	5f 4f       	sbci	r21, 0xFF	; 255
    bd6e:	9c 01       	movw	r18, r24
    bd70:	28 53       	subi	r18, 0x38	; 56
    bd72:	3f 4f       	sbci	r19, 0xFF	; 255
    bd74:	81 e0       	ldi	r24, 0x01	; 1
    bd76:	24 17       	cp	r18, r20
    bd78:	35 07       	cpc	r19, r21
    bd7a:	18 f0       	brcs	.+6      	; 0xbd82 <out_of_bounds+0x52>
    bd7c:	80 e0       	ldi	r24, 0x00	; 0
    bd7e:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    bd80:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < 4) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    bd82:	08 95       	ret

0000bd84 <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    bd84:	40 91 cd 0d 	lds	r20, 0x0DCD
    bd88:	80 e0       	ldi	r24, 0x00	; 0
    bd8a:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    bd8c:	50 e1       	ldi	r21, 0x10	; 16
    bd8e:	9c 01       	movw	r18, r24
    bd90:	2e 54       	subi	r18, 0x4E	; 78
    bd92:	32 4f       	sbci	r19, 0xF2	; 242
    bd94:	d9 01       	movw	r26, r18
    bd96:	a4 5e       	subi	r26, 0xE4	; 228
    bd98:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    bd9a:	6c 91       	ld	r22, X
    bd9c:	66 23       	and	r22, r22
    bd9e:	31 f0       	breq	.+12     	; 0xbdac <explode_all_enemies+0x28>
    bda0:	f9 01       	movw	r30, r18
    bda2:	e3 5e       	subi	r30, 0xE3	; 227
    bda4:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    bda6:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    bda8:	1c 92       	st	X, r1
			game.active_enemies--;
    bdaa:	41 50       	subi	r20, 0x01	; 1
    bdac:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    bdae:	89 30       	cpi	r24, 0x09	; 9
    bdb0:	21 e0       	ldi	r18, 0x01	; 1
    bdb2:	92 07       	cpc	r25, r18
    bdb4:	61 f7       	brne	.-40     	; 0xbd8e <explode_all_enemies+0xa>
    bdb6:	40 93 cd 0d 	sts	0x0DCD, r20
    bdba:	08 95       	ret

0000bdbc <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    bdbc:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    bdbe:	86 17       	cp	r24, r22
    bdc0:	10 f4       	brcc	.+4      	; 0xbdc6 <pixel_overlap+0xa>
    bdc2:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    bdc4:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    bdc6:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    bdc8:	26 0f       	add	r18, r22
	if (s2 < s1)
    bdca:	28 17       	cp	r18, r24
    bdcc:	10 f4       	brcc	.+4      	; 0xbdd2 <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    bdce:	28 1b       	sub	r18, r24
    bdd0:	92 0f       	add	r25, r18
	}
	return result;
}
    bdd2:	89 2f       	mov	r24, r25
    bdd4:	08 95       	ret

0000bdd6 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    bdd6:	2f 92       	push	r2
    bdd8:	3f 92       	push	r3
    bdda:	4f 92       	push	r4
    bddc:	5f 92       	push	r5
    bdde:	6f 92       	push	r6
    bde0:	7f 92       	push	r7
    bde2:	8f 92       	push	r8
    bde4:	9f 92       	push	r9
    bde6:	af 92       	push	r10
    bde8:	bf 92       	push	r11
    bdea:	cf 92       	push	r12
    bdec:	df 92       	push	r13
    bdee:	ef 92       	push	r14
    bdf0:	ff 92       	push	r15
    bdf2:	0f 93       	push	r16
    bdf4:	1f 93       	push	r17
    bdf6:	cf 93       	push	r28
    bdf8:	df 93       	push	r29
    bdfa:	00 d0       	rcall	.+0      	; 0xbdfc <collision_detect_level+0x26>
    bdfc:	00 d0       	rcall	.+0      	; 0xbdfe <collision_detect_level+0x28>
    bdfe:	00 d0       	rcall	.+0      	; 0xbe00 <collision_detect_level+0x2a>
    be00:	cd b7       	in	r28, 0x3d	; 61
    be02:	de b7       	in	r29, 0x3e	; 62
    be04:	9e 83       	std	Y+6, r25	; 0x06
    be06:	8d 83       	std	Y+5, r24	; 0x05
    be08:	56 2e       	mov	r5, r22
    be0a:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    be0c:	fc 01       	movw	r30, r24
    be0e:	a0 80       	ld	r10, Z
    be10:	b1 80       	ldd	r11, Z+1	; 0x01
    be12:	75 01       	movw	r14, r10
    be14:	13 e0       	ldi	r17, 0x03	; 3
    be16:	f6 94       	lsr	r15
    be18:	e7 94       	ror	r14
    be1a:	1a 95       	dec	r17
    be1c:	e1 f7       	brne	.-8      	; 0xbe16 <collision_detect_level+0x40>
    be1e:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    be20:	c2 80       	ldd	r12, Z+2	; 0x02
    be22:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    be24:	84 81       	ldd	r24, Z+4	; 0x04
    be26:	88 23       	and	r24, r24
    be28:	09 f4       	brne	.+2      	; 0xbe2c <collision_detect_level+0x56>
    be2a:	e1 c0       	rjmp	.+450    	; 0xbfee <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    be2c:	e3 e0       	ldi	r30, 0x03	; 3
    be2e:	d6 94       	lsr	r13
    be30:	c7 94       	ror	r12
    be32:	ea 95       	dec	r30
    be34:	e1 f7       	brne	.-8      	; 0xbe2e <collision_detect_level+0x58>
    be36:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    be38:	f7 e0       	ldi	r31, 0x07	; 7
    be3a:	af 0e       	add	r10, r31
    be3c:	b1 1c       	adc	r11, r1
    be3e:	f3 e0       	ldi	r31, 0x03	; 3
    be40:	b6 94       	lsr	r11
    be42:	a7 94       	ror	r10
    be44:	fa 95       	dec	r31
    be46:	e1 f7       	brne	.-8      	; 0xbe40 <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    be48:	8e 2d       	mov	r24, r14
    be4a:	88 0f       	add	r24, r24
    be4c:	88 0f       	add	r24, r24
    be4e:	88 0f       	add	r24, r24
    be50:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    be52:	2a 2c       	mov	r2, r10
    be54:	22 0c       	add	r2, r2
    be56:	22 0c       	add	r2, r2
    be58:	22 0c       	add	r2, r2
    be5a:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    be5c:	46 01       	movw	r8, r12
    be5e:	9f ef       	ldi	r25, 0xFF	; 255
    be60:	89 1a       	sub	r8, r25
    be62:	99 0a       	sbc	r9, r25
    be64:	a3 e0       	ldi	r26, 0x03	; 3
    be66:	88 0c       	add	r8, r8
    be68:	99 1c       	adc	r9, r9
    be6a:	aa 95       	dec	r26
    be6c:	e1 f7       	brne	.-8      	; 0xbe66 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    be6e:	e8 e0       	ldi	r30, 0x08	; 8
    be70:	4e 9f       	mul	r20, r30
    be72:	30 01       	movw	r6, r0
    be74:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    be76:	b3 e0       	ldi	r27, 0x03	; 3
    be78:	cc 0c       	add	r12, r12
    be7a:	dd 1c       	adc	r13, r13
    be7c:	ba 95       	dec	r27
    be7e:	e1 f7       	brne	.-8      	; 0xbe78 <collision_detect_level+0xa2>
    be80:	41 2c       	mov	r4, r1
    be82:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    be84:	45 14       	cp	r4, r5
    be86:	09 f4       	brne	.+2      	; 0xbe8a <collision_detect_level+0xb4>
    be88:	b3 c0       	rjmp	.+358    	; 0xbff0 <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    be8a:	ed 81       	ldd	r30, Y+5	; 0x05
    be8c:	fe 81       	ldd	r31, Y+6	; 0x06
    be8e:	84 81       	ldd	r24, Z+4	; 0x04
    be90:	87 ff       	sbrs	r24, 7
    be92:	47 c0       	rjmp	.+142    	; 0xbf22 <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    be94:	49 81       	ldd	r20, Y+1	; 0x01
    be96:	64 2d       	mov	r22, r4
    be98:	6e 0d       	add	r22, r14
    be9a:	80 91 d0 0f 	lds	r24, 0x0FD0
    be9e:	90 91 d1 0f 	lds	r25, 0x0FD1
    bea2:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    bea6:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    bea8:	49 81       	ldd	r20, Y+1	; 0x01
    beaa:	64 2d       	mov	r22, r4
    beac:	6a 0d       	add	r22, r10
    beae:	80 91 d0 0f 	lds	r24, 0x0FD0
    beb2:	90 91 d1 0f 	lds	r25, 0x0FD1
    beb6:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    beba:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bebc:	83 2d       	mov	r24, r3
    bebe:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    bec2:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bec4:	80 2f       	mov	r24, r16
    bec6:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    beca:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    becc:	33 20       	and	r3, r3
    bece:	71 f0       	breq	.+28     	; 0xbeec <collision_detect_level+0x116>
    bed0:	30 91 b2 0d 	lds	r19, 0x0DB2
    bed4:	6b 81       	ldd	r22, Y+3	; 0x03
    bed6:	63 1b       	sub	r22, r19
    bed8:	ed 81       	ldd	r30, Y+5	; 0x05
    beda:	fe 81       	ldd	r31, Y+6	; 0x06
    bedc:	80 81       	ld	r24, Z
    bede:	28 e0       	ldi	r18, 0x08	; 8
    bee0:	48 e0       	ldi	r20, 0x08	; 8
    bee2:	83 1b       	sub	r24, r19
    bee4:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    bee8:	84 30       	cpi	r24, 0x04	; 4
    beea:	80 f4       	brcc	.+32     	; 0xbf0c <collision_detect_level+0x136>
    beec:	00 23       	and	r16, r16
    beee:	c9 f0       	breq	.+50     	; 0xbf22 <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bef0:	30 91 b2 0d 	lds	r19, 0x0DB2
    bef4:	62 2d       	mov	r22, r2
    bef6:	63 1b       	sub	r22, r19
    bef8:	ed 81       	ldd	r30, Y+5	; 0x05
    befa:	fe 81       	ldd	r31, Y+6	; 0x06
    befc:	80 81       	ld	r24, Z
    befe:	28 e0       	ldi	r18, 0x08	; 8
    bf00:	48 e0       	ldi	r20, 0x08	; 8
    bf02:	83 1b       	sub	r24, r19
    bf04:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    bf08:	84 30       	cpi	r24, 0x04	; 4
    bf0a:	58 f0       	brcs	.+22     	; 0xbf22 <collision_detect_level+0x14c>
				{
					s->vy =  0;
    bf0c:	ed 81       	ldd	r30, Y+5	; 0x05
    bf0e:	fe 81       	ldd	r31, Y+6	; 0x06
    bf10:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    bf12:	93 82       	std	Z+3, r9	; 0x03
    bf14:	82 82       	std	Z+2, r8	; 0x02
    bf16:	30 16       	cp	r3, r16
    bf18:	08 f4       	brcc	.+2      	; 0xbf1c <collision_detect_level+0x146>
    bf1a:	30 2e       	mov	r3, r16
    bf1c:	13 15       	cp	r17, r3
    bf1e:	08 f4       	brcc	.+2      	; 0xbf22 <collision_detect_level+0x14c>
    bf20:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    bf22:	ed 81       	ldd	r30, Y+5	; 0x05
    bf24:	fe 81       	ldd	r31, Y+6	; 0x06
    bf26:	84 81       	ldd	r24, Z+4	; 0x04
    bf28:	18 16       	cp	r1, r24
    bf2a:	0c f0       	brlt	.+2      	; 0xbf2e <collision_detect_level+0x158>
    bf2c:	5e c0       	rjmp	.+188    	; 0xbfea <collision_detect_level+0x214>
    bf2e:	42 81       	ldd	r20, Z+2	; 0x02
    bf30:	53 81       	ldd	r21, Z+3	; 0x03
    bf32:	41 50       	subi	r20, 0x01	; 1
    bf34:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    bf36:	46 0d       	add	r20, r6
    bf38:	57 1d       	adc	r21, r7
    bf3a:	63 e0       	ldi	r22, 0x03	; 3
    bf3c:	56 95       	lsr	r21
    bf3e:	47 95       	ror	r20
    bf40:	6a 95       	dec	r22
    bf42:	e1 f7       	brne	.-8      	; 0xbf3c <collision_detect_level+0x166>
    bf44:	64 2d       	mov	r22, r4
    bf46:	6e 0d       	add	r22, r14
    bf48:	80 91 d0 0f 	lds	r24, 0x0FD0
    bf4c:	90 91 d1 0f 	lds	r25, 0x0FD1
    bf50:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    bf54:	38 2e       	mov	r3, r24
    bf56:	ed 81       	ldd	r30, Y+5	; 0x05
    bf58:	fe 81       	ldd	r31, Y+6	; 0x06
    bf5a:	42 81       	ldd	r20, Z+2	; 0x02
    bf5c:	53 81       	ldd	r21, Z+3	; 0x03
    bf5e:	41 50       	subi	r20, 0x01	; 1
    bf60:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    bf62:	46 0d       	add	r20, r6
    bf64:	57 1d       	adc	r21, r7
    bf66:	73 e0       	ldi	r23, 0x03	; 3
    bf68:	56 95       	lsr	r21
    bf6a:	47 95       	ror	r20
    bf6c:	7a 95       	dec	r23
    bf6e:	e1 f7       	brne	.-8      	; 0xbf68 <collision_detect_level+0x192>
    bf70:	64 2d       	mov	r22, r4
    bf72:	6a 0d       	add	r22, r10
    bf74:	80 91 d0 0f 	lds	r24, 0x0FD0
    bf78:	90 91 d1 0f 	lds	r25, 0x0FD1
    bf7c:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    bf80:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bf82:	83 2d       	mov	r24, r3
    bf84:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    bf88:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bf8a:	80 2f       	mov	r24, r16
    bf8c:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    bf90:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    bf92:	33 20       	and	r3, r3
    bf94:	71 f0       	breq	.+28     	; 0xbfb2 <collision_detect_level+0x1dc>
    bf96:	30 91 b2 0d 	lds	r19, 0x0DB2
    bf9a:	6b 81       	ldd	r22, Y+3	; 0x03
    bf9c:	63 1b       	sub	r22, r19
    bf9e:	ed 81       	ldd	r30, Y+5	; 0x05
    bfa0:	fe 81       	ldd	r31, Y+6	; 0x06
    bfa2:	80 81       	ld	r24, Z
    bfa4:	28 e0       	ldi	r18, 0x08	; 8
    bfa6:	48 e0       	ldi	r20, 0x08	; 8
    bfa8:	83 1b       	sub	r24, r19
    bfaa:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    bfae:	84 30       	cpi	r24, 0x04	; 4
    bfb0:	80 f4       	brcc	.+32     	; 0xbfd2 <collision_detect_level+0x1fc>
    bfb2:	00 23       	and	r16, r16
    bfb4:	d1 f0       	breq	.+52     	; 0xbfea <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bfb6:	30 91 b2 0d 	lds	r19, 0x0DB2
    bfba:	62 2d       	mov	r22, r2
    bfbc:	63 1b       	sub	r22, r19
    bfbe:	ed 81       	ldd	r30, Y+5	; 0x05
    bfc0:	fe 81       	ldd	r31, Y+6	; 0x06
    bfc2:	80 81       	ld	r24, Z
    bfc4:	28 e0       	ldi	r18, 0x08	; 8
    bfc6:	48 e0       	ldi	r20, 0x08	; 8
    bfc8:	83 1b       	sub	r24, r19
    bfca:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    bfce:	84 30       	cpi	r24, 0x04	; 4
    bfd0:	60 f0       	brcs	.+24     	; 0xbfea <collision_detect_level+0x214>
				{
					s->vy =  0;
    bfd2:	ed 81       	ldd	r30, Y+5	; 0x05
    bfd4:	fe 81       	ldd	r31, Y+6	; 0x06
    bfd6:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    bfd8:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    bfda:	d3 82       	std	Z+3, r13	; 0x03
    bfdc:	c2 82       	std	Z+2, r12	; 0x02
    bfde:	30 16       	cp	r3, r16
    bfe0:	08 f4       	brcc	.+2      	; 0xbfe4 <collision_detect_level+0x20e>
    bfe2:	30 2e       	mov	r3, r16
    bfe4:	13 15       	cp	r17, r3
    bfe6:	08 f4       	brcc	.+2      	; 0xbfea <collision_detect_level+0x214>
    bfe8:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bfea:	43 94       	inc	r4
    bfec:	4b cf       	rjmp	.-362    	; 0xbe84 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    bfee:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    bff0:	ed 81       	ldd	r30, Y+5	; 0x05
    bff2:	fe 81       	ldd	r31, Y+6	; 0x06
    bff4:	85 81       	ldd	r24, Z+5	; 0x05
    bff6:	88 23       	and	r24, r24
    bff8:	09 f4       	brne	.+2      	; 0xbffc <collision_detect_level+0x226>
    bffa:	e1 c0       	rjmp	.+450    	; 0xc1be <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    bffc:	c2 80       	ldd	r12, Z+2	; 0x02
    bffe:	d3 80       	ldd	r13, Z+3	; 0x03
    c000:	56 01       	movw	r10, r12
    c002:	23 e0       	ldi	r18, 0x03	; 3
    c004:	b6 94       	lsr	r11
    c006:	a7 94       	ror	r10
    c008:	2a 95       	dec	r18
    c00a:	e1 f7       	brne	.-8      	; 0xc004 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    c00c:	f7 e0       	ldi	r31, 0x07	; 7
    c00e:	cf 0e       	add	r12, r31
    c010:	d1 1c       	adc	r13, r1
    c012:	33 e0       	ldi	r19, 0x03	; 3
    c014:	d6 94       	lsr	r13
    c016:	c7 94       	ror	r12
    c018:	3a 95       	dec	r19
    c01a:	e1 f7       	brne	.-8      	; 0xc014 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c01c:	3a 2c       	mov	r3, r10
    c01e:	33 0c       	add	r3, r3
    c020:	33 0c       	add	r3, r3
    c022:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c024:	4c 2c       	mov	r4, r12
    c026:	44 0c       	add	r4, r4
    c028:	44 0c       	add	r4, r4
    c02a:	44 0c       	add	r4, r4
    c02c:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    c02e:	37 01       	movw	r6, r14
    c030:	8f ef       	ldi	r24, 0xFF	; 255
    c032:	68 1a       	sub	r6, r24
    c034:	78 0a       	sbc	r7, r24
    c036:	43 e0       	ldi	r20, 0x03	; 3
    c038:	66 0c       	add	r6, r6
    c03a:	77 1c       	adc	r7, r7
    c03c:	4a 95       	dec	r20
    c03e:	e1 f7       	brne	.-8      	; 0xc038 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    c040:	98 e0       	ldi	r25, 0x08	; 8
    c042:	59 9e       	mul	r5, r25
    c044:	40 01       	movw	r8, r0
    c046:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    c048:	53 e0       	ldi	r21, 0x03	; 3
    c04a:	ee 0c       	add	r14, r14
    c04c:	ff 1c       	adc	r15, r15
    c04e:	5a 95       	dec	r21
    c050:	e1 f7       	brne	.-8      	; 0xc04a <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    c052:	51 2c       	mov	r5, r1
    c054:	fc 81       	ldd	r31, Y+4	; 0x04
    c056:	5f 16       	cp	r5, r31
    c058:	09 f4       	brne	.+2      	; 0xc05c <collision_detect_level+0x286>
    c05a:	b1 c0       	rjmp	.+354    	; 0xc1be <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    c05c:	ed 81       	ldd	r30, Y+5	; 0x05
    c05e:	fe 81       	ldd	r31, Y+6	; 0x06
    c060:	85 81       	ldd	r24, Z+5	; 0x05
    c062:	87 ff       	sbrs	r24, 7
    c064:	47 c0       	rjmp	.+142    	; 0xc0f4 <collision_detect_level+0x31e>
    c066:	45 2d       	mov	r20, r5
    c068:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    c06a:	6a 81       	ldd	r22, Y+2	; 0x02
    c06c:	80 91 d0 0f 	lds	r24, 0x0FD0
    c070:	90 91 d1 0f 	lds	r25, 0x0FD1
    c074:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    c078:	28 2e       	mov	r2, r24
    c07a:	45 2d       	mov	r20, r5
    c07c:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    c07e:	6a 81       	ldd	r22, Y+2	; 0x02
    c080:	80 91 d0 0f 	lds	r24, 0x0FD0
    c084:	90 91 d1 0f 	lds	r25, 0x0FD1
    c088:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    c08c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c08e:	82 2d       	mov	r24, r2
    c090:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    c094:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c096:	80 2f       	mov	r24, r16
    c098:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    c09c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c09e:	22 20       	and	r2, r2
    c0a0:	71 f0       	breq	.+28     	; 0xc0be <collision_detect_level+0x2e8>
    c0a2:	30 91 ba 0d 	lds	r19, 0x0DBA
    c0a6:	63 2d       	mov	r22, r3
    c0a8:	63 1b       	sub	r22, r19
    c0aa:	ed 81       	ldd	r30, Y+5	; 0x05
    c0ac:	fe 81       	ldd	r31, Y+6	; 0x06
    c0ae:	82 81       	ldd	r24, Z+2	; 0x02
    c0b0:	28 e0       	ldi	r18, 0x08	; 8
    c0b2:	48 e0       	ldi	r20, 0x08	; 8
    c0b4:	83 1b       	sub	r24, r19
    c0b6:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    c0ba:	84 30       	cpi	r24, 0x04	; 4
    c0bc:	80 f4       	brcc	.+32     	; 0xc0de <collision_detect_level+0x308>
    c0be:	00 23       	and	r16, r16
    c0c0:	c9 f0       	breq	.+50     	; 0xc0f4 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c0c2:	30 91 ba 0d 	lds	r19, 0x0DBA
    c0c6:	64 2d       	mov	r22, r4
    c0c8:	63 1b       	sub	r22, r19
    c0ca:	ed 81       	ldd	r30, Y+5	; 0x05
    c0cc:	fe 81       	ldd	r31, Y+6	; 0x06
    c0ce:	82 81       	ldd	r24, Z+2	; 0x02
    c0d0:	28 e0       	ldi	r18, 0x08	; 8
    c0d2:	48 e0       	ldi	r20, 0x08	; 8
    c0d4:	83 1b       	sub	r24, r19
    c0d6:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    c0da:	84 30       	cpi	r24, 0x04	; 4
    c0dc:	58 f0       	brcs	.+22     	; 0xc0f4 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    c0de:	ed 81       	ldd	r30, Y+5	; 0x05
    c0e0:	fe 81       	ldd	r31, Y+6	; 0x06
    c0e2:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    c0e4:	71 82       	std	Z+1, r7	; 0x01
    c0e6:	60 82       	st	Z, r6
    c0e8:	20 16       	cp	r2, r16
    c0ea:	08 f4       	brcc	.+2      	; 0xc0ee <collision_detect_level+0x318>
    c0ec:	20 2e       	mov	r2, r16
    c0ee:	12 15       	cp	r17, r2
    c0f0:	08 f4       	brcc	.+2      	; 0xc0f4 <collision_detect_level+0x31e>
    c0f2:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    c0f4:	ed 81       	ldd	r30, Y+5	; 0x05
    c0f6:	fe 81       	ldd	r31, Y+6	; 0x06
    c0f8:	85 81       	ldd	r24, Z+5	; 0x05
    c0fa:	18 16       	cp	r1, r24
    c0fc:	0c f0       	brlt	.+2      	; 0xc100 <collision_detect_level+0x32a>
    c0fe:	5d c0       	rjmp	.+186    	; 0xc1ba <collision_detect_level+0x3e4>
    c100:	60 81       	ld	r22, Z
    c102:	71 81       	ldd	r23, Z+1	; 0x01
    c104:	61 50       	subi	r22, 0x01	; 1
    c106:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    c108:	68 0d       	add	r22, r8
    c10a:	79 1d       	adc	r23, r9
    c10c:	83 e0       	ldi	r24, 0x03	; 3
    c10e:	76 95       	lsr	r23
    c110:	67 95       	ror	r22
    c112:	8a 95       	dec	r24
    c114:	e1 f7       	brne	.-8      	; 0xc10e <collision_detect_level+0x338>
    c116:	45 2d       	mov	r20, r5
    c118:	4a 0d       	add	r20, r10
    c11a:	80 91 d0 0f 	lds	r24, 0x0FD0
    c11e:	90 91 d1 0f 	lds	r25, 0x0FD1
    c122:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    c126:	28 2e       	mov	r2, r24
    c128:	ed 81       	ldd	r30, Y+5	; 0x05
    c12a:	fe 81       	ldd	r31, Y+6	; 0x06
    c12c:	60 81       	ld	r22, Z
    c12e:	71 81       	ldd	r23, Z+1	; 0x01
    c130:	61 50       	subi	r22, 0x01	; 1
    c132:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    c134:	68 0d       	add	r22, r8
    c136:	79 1d       	adc	r23, r9
    c138:	93 e0       	ldi	r25, 0x03	; 3
    c13a:	76 95       	lsr	r23
    c13c:	67 95       	ror	r22
    c13e:	9a 95       	dec	r25
    c140:	e1 f7       	brne	.-8      	; 0xc13a <collision_detect_level+0x364>
    c142:	45 2d       	mov	r20, r5
    c144:	4c 0d       	add	r20, r12
    c146:	80 91 d0 0f 	lds	r24, 0x0FD0
    c14a:	90 91 d1 0f 	lds	r25, 0x0FD1
    c14e:	0e 94 34 5b 	call	0xb668	; 0xb668 <get_level_tile>
    c152:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c154:	82 2d       	mov	r24, r2
    c156:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    c15a:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c15c:	80 2f       	mov	r24, r16
    c15e:	0e 94 49 5c 	call	0xb892	; 0xb892 <solid_or_hazard_tile>
    c162:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c164:	22 20       	and	r2, r2
    c166:	71 f0       	breq	.+28     	; 0xc184 <collision_detect_level+0x3ae>
    c168:	30 91 ba 0d 	lds	r19, 0x0DBA
    c16c:	63 2d       	mov	r22, r3
    c16e:	63 1b       	sub	r22, r19
    c170:	ed 81       	ldd	r30, Y+5	; 0x05
    c172:	fe 81       	ldd	r31, Y+6	; 0x06
    c174:	82 81       	ldd	r24, Z+2	; 0x02
    c176:	28 e0       	ldi	r18, 0x08	; 8
    c178:	48 e0       	ldi	r20, 0x08	; 8
    c17a:	83 1b       	sub	r24, r19
    c17c:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    c180:	84 30       	cpi	r24, 0x04	; 4
    c182:	80 f4       	brcc	.+32     	; 0xc1a4 <collision_detect_level+0x3ce>
    c184:	00 23       	and	r16, r16
    c186:	c9 f0       	breq	.+50     	; 0xc1ba <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c188:	30 91 ba 0d 	lds	r19, 0x0DBA
    c18c:	64 2d       	mov	r22, r4
    c18e:	63 1b       	sub	r22, r19
    c190:	ed 81       	ldd	r30, Y+5	; 0x05
    c192:	fe 81       	ldd	r31, Y+6	; 0x06
    c194:	82 81       	ldd	r24, Z+2	; 0x02
    c196:	28 e0       	ldi	r18, 0x08	; 8
    c198:	48 e0       	ldi	r20, 0x08	; 8
    c19a:	83 1b       	sub	r24, r19
    c19c:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <pixel_overlap>
    c1a0:	84 30       	cpi	r24, 0x04	; 4
    c1a2:	58 f0       	brcs	.+22     	; 0xc1ba <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    c1a4:	ed 81       	ldd	r30, Y+5	; 0x05
    c1a6:	fe 81       	ldd	r31, Y+6	; 0x06
    c1a8:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    c1aa:	f1 82       	std	Z+1, r15	; 0x01
    c1ac:	e0 82       	st	Z, r14
    c1ae:	20 16       	cp	r2, r16
    c1b0:	08 f4       	brcc	.+2      	; 0xc1b4 <collision_detect_level+0x3de>
    c1b2:	20 2e       	mov	r2, r16
    c1b4:	12 15       	cp	r17, r2
    c1b6:	08 f4       	brcc	.+2      	; 0xc1ba <collision_detect_level+0x3e4>
    c1b8:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    c1ba:	53 94       	inc	r5
    c1bc:	4b cf       	rjmp	.-362    	; 0xc054 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    c1be:	81 2f       	mov	r24, r17
    c1c0:	26 96       	adiw	r28, 0x06	; 6
    c1c2:	0f b6       	in	r0, 0x3f	; 63
    c1c4:	f8 94       	cli
    c1c6:	de bf       	out	0x3e, r29	; 62
    c1c8:	0f be       	out	0x3f, r0	; 63
    c1ca:	cd bf       	out	0x3d, r28	; 61
    c1cc:	df 91       	pop	r29
    c1ce:	cf 91       	pop	r28
    c1d0:	1f 91       	pop	r17
    c1d2:	0f 91       	pop	r16
    c1d4:	ff 90       	pop	r15
    c1d6:	ef 90       	pop	r14
    c1d8:	df 90       	pop	r13
    c1da:	cf 90       	pop	r12
    c1dc:	bf 90       	pop	r11
    c1de:	af 90       	pop	r10
    c1e0:	9f 90       	pop	r9
    c1e2:	8f 90       	pop	r8
    c1e4:	7f 90       	pop	r7
    c1e6:	6f 90       	pop	r6
    c1e8:	5f 90       	pop	r5
    c1ea:	4f 90       	pop	r4
    c1ec:	3f 90       	pop	r3
    c1ee:	2f 90       	pop	r2
    c1f0:	08 95       	ret

0000c1f2 <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    c1f2:	2f 92       	push	r2
    c1f4:	3f 92       	push	r3
    c1f6:	4f 92       	push	r4
    c1f8:	5f 92       	push	r5
    c1fa:	6f 92       	push	r6
    c1fc:	7f 92       	push	r7
    c1fe:	8f 92       	push	r8
    c200:	9f 92       	push	r9
    c202:	af 92       	push	r10
    c204:	bf 92       	push	r11
    c206:	cf 92       	push	r12
    c208:	df 92       	push	r13
    c20a:	ef 92       	push	r14
    c20c:	ff 92       	push	r15
    c20e:	0f 93       	push	r16
    c210:	1f 93       	push	r17
    c212:	cf 93       	push	r28
    c214:	df 93       	push	r29
    c216:	00 d0       	rcall	.+0      	; 0xc218 <animate_shot+0x26>
    c218:	00 d0       	rcall	.+0      	; 0xc21a <animate_shot+0x28>
    c21a:	00 d0       	rcall	.+0      	; 0xc21c <animate_shot+0x2a>
    c21c:	cd b7       	in	r28, 0x3d	; 61
    c21e:	de b7       	in	r29, 0x3e	; 62
    c220:	2c 01       	movw	r4, r24
    c222:	4b 01       	movw	r8, r22
    c224:	d4 2e       	mov	r13, r20
    c226:	3c 01       	movw	r6, r24
    c228:	29 e1       	ldi	r18, 0x19	; 25
    c22a:	62 0e       	add	r6, r18
    c22c:	71 1c       	adc	r7, r1
    c22e:	40 96       	adiw	r24, 0x10	; 16
    c230:	9e 83       	std	Y+6, r25	; 0x06
    c232:	8d 83       	std	Y+5, r24	; 0x05
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c234:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    c236:	30 e1       	ldi	r19, 0x10	; 16
    c238:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    c23a:	f3 01       	movw	r30, r6
    c23c:	80 81       	ld	r24, Z
    c23e:	88 23       	and	r24, r24
    c240:	09 f4       	brne	.+2      	; 0xc244 <animate_shot+0x52>
    c242:	19 c1       	rjmp	.+562    	; 0xc476 <animate_shot+0x284>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    c244:	60 91 cc 0d 	lds	r22, 0x0DCC
    c248:	34 97       	sbiw	r30, 0x04	; 4
    c24a:	80 81       	ld	r24, Z
    c24c:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    c250:	88 0f       	add	r24, r24
    c252:	99 1f       	adc	r25, r25
    c254:	ed 81       	ldd	r30, Y+5	; 0x05
    c256:	fe 81       	ldd	r31, Y+6	; 0x06
    c258:	20 81       	ld	r18, Z
    c25a:	31 81       	ldd	r19, Z+1	; 0x01
    c25c:	82 0f       	add	r24, r18
    c25e:	93 1f       	adc	r25, r19
    c260:	91 83       	std	Z+1, r25	; 0x01
    c262:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    c264:	60 91 cc 0d 	lds	r22, 0x0DCC
    c268:	f3 01       	movw	r30, r6
    c26a:	35 97       	sbiw	r30, 0x05	; 5
    c26c:	80 81       	ld	r24, Z
    c26e:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    c272:	ed 81       	ldd	r30, Y+5	; 0x05
    c274:	fe 81       	ldd	r31, Y+6	; 0x06
    c276:	42 81       	ldd	r20, Z+2	; 0x02
    c278:	53 81       	ldd	r21, Z+3	; 0x03
    c27a:	84 0f       	add	r24, r20
    c27c:	95 1f       	adc	r25, r21
    c27e:	93 83       	std	Z+3, r25	; 0x03
    c280:	82 83       	std	Z+2, r24	; 0x02
    c282:	f1 2e       	mov	r15, r17
    c284:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    c286:	90 91 ba 0d 	lds	r25, 0x0DBA
    c28a:	48 2f       	mov	r20, r24
    c28c:	49 1b       	sub	r20, r25
    c28e:	60 81       	ld	r22, Z
    c290:	80 91 b2 0d 	lds	r24, 0x0DB2
    c294:	68 1b       	sub	r22, r24
    c296:	01 e0       	ldi	r16, 0x01	; 1
    c298:	21 e0       	ldi	r18, 0x01	; 1
    c29a:	8f 2d       	mov	r24, r15
    c29c:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    c2a0:	8d 81       	ldd	r24, Y+5	; 0x05
    c2a2:	9e 81       	ldd	r25, Y+6	; 0x06
    c2a4:	0e 94 98 5e 	call	0xbd30	; 0xbd30 <out_of_bounds>
    c2a8:	81 11       	cpse	r24, r1
    c2aa:	d8 c0       	rjmp	.+432    	; 0xc45c <animate_shot+0x26a>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    c2ac:	41 e0       	ldi	r20, 0x01	; 1
    c2ae:	61 e0       	ldi	r22, 0x01	; 1
    c2b0:	8d 81       	ldd	r24, Y+5	; 0x05
    c2b2:	9e 81       	ldd	r25, Y+6	; 0x06
    c2b4:	0e 94 eb 5e 	call	0xbdd6	; 0xbdd6 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    c2b8:	81 11       	cpse	r24, r1
    c2ba:	d0 c0       	rjmp	.+416    	; 0xc45c <animate_shot+0x26a>
    c2bc:	87 ed       	ldi	r24, 0xD7	; 215
    c2be:	28 2e       	mov	r2, r24
    c2c0:	8e e0       	ldi	r24, 0x0E	; 14
    c2c2:	38 2e       	mov	r3, r24
    c2c4:	1a 82       	std	Y+2, r1	; 0x02
    c2c6:	19 82       	std	Y+1, r1	; 0x01
    c2c8:	93 01       	movw	r18, r6
    c2ca:	21 50       	subi	r18, 0x01	; 1
    c2cc:	31 09       	sbc	r19, r1
    c2ce:	3c 83       	std	Y+4, r19	; 0x04
    c2d0:	2b 83       	std	Y+3, r18	; 0x03
    c2d2:	f1 01       	movw	r30, r2
    c2d4:	34 97       	sbiw	r30, 0x04	; 4
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c2d6:	80 81       	ld	r24, Z
    c2d8:	82 30       	cpi	r24, 0x02	; 2
    c2da:	09 f4       	brne	.+2      	; 0xc2de <animate_shot+0xec>
    c2dc:	65 c0       	rjmp	.+202    	; 0xc3a8 <animate_shot+0x1b6>
    c2de:	35 97       	sbiw	r30, 0x05	; 5
    c2e0:	80 81       	ld	r24, Z
    c2e2:	88 23       	and	r24, r24
    c2e4:	09 f4       	brne	.+2      	; 0xc2e8 <animate_shot+0xf6>
    c2e6:	60 c0       	rjmp	.+192    	; 0xc3a8 <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c2e8:	90 91 b2 0d 	lds	r25, 0x0DB2
    c2ec:	34 96       	adiw	r30, 0x04	; 4
    c2ee:	a0 80       	ld	r10, Z
    c2f0:	aa 0c       	add	r10, r10
    c2f2:	aa 0c       	add	r10, r10
    c2f4:	aa 0c       	add	r10, r10
    c2f6:	31 97       	sbiw	r30, 0x01	; 1
    c2f8:	c0 80       	ld	r12, Z
    c2fa:	cc 0c       	add	r12, r12
    c2fc:	cc 0c       	add	r12, r12
    c2fe:	cc 0c       	add	r12, r12
    c300:	3a 97       	sbiw	r30, 0x0a	; 10
    c302:	00 81       	ld	r16, Z
    c304:	09 1b       	sub	r16, r25
    c306:	ed 81       	ldd	r30, Y+5	; 0x05
    c308:	fe 81       	ldd	r31, Y+6	; 0x06
    c30a:	80 81       	ld	r24, Z
    c30c:	f1 01       	movw	r30, r2
    c30e:	3e 97       	sbiw	r30, 0x0e	; 14
    c310:	e0 80       	ld	r14, Z
    c312:	28 e0       	ldi	r18, 0x08	; 8
    c314:	48 e0       	ldi	r20, 0x08	; 8
    c316:	ed 81       	ldd	r30, Y+5	; 0x05
    c318:	fe 81       	ldd	r31, Y+6	; 0x06
    c31a:	62 81       	ldd	r22, Z+2	; 0x02
    c31c:	89 1b       	sub	r24, r25
    c31e:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c322:	88 23       	and	r24, r24
    c324:	09 f4       	brne	.+2      	; 0xc328 <animate_shot+0x136>
    c326:	40 c0       	rjmp	.+128    	; 0xc3a8 <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    c328:	41 e0       	ldi	r20, 0x01	; 1
    c32a:	6f ef       	ldi	r22, 0xFF	; 255
    c32c:	84 e0       	ldi	r24, 0x04	; 4
    c32e:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    c332:	f1 01       	movw	r30, r2
    c334:	80 81       	ld	r24, Z
    c336:	eb 81       	ldd	r30, Y+3	; 0x03
    c338:	fc 81       	ldd	r31, Y+4	; 0x04
    c33a:	90 81       	ld	r25, Z
    c33c:	89 1b       	sub	r24, r25
    c33e:	f1 01       	movw	r30, r2
    c340:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    c342:	18 16       	cp	r1, r24
    c344:	24 f1       	brlt	.+72     	; 0xc38e <animate_shot+0x19c>
						{
							SFX_ENEMY_EXPLODE;
    c346:	41 e0       	ldi	r20, 0x01	; 1
    c348:	6f ef       	ldi	r22, 0xFF	; 255
    c34a:	86 e0       	ldi	r24, 0x06	; 6
    c34c:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    c350:	45 e3       	ldi	r20, 0x35	; 53
    c352:	29 81       	ldd	r18, Y+1	; 0x01
    c354:	3a 81       	ldd	r19, Y+2	; 0x02
    c356:	42 9f       	mul	r20, r18
    c358:	c0 01       	movw	r24, r0
    c35a:	43 9f       	mul	r20, r19
    c35c:	90 0d       	add	r25, r0
    c35e:	11 24       	eor	r1, r1
    c360:	8e 54       	subi	r24, 0x4E	; 78
    c362:	92 4f       	sbci	r25, 0xF2	; 242
    c364:	fc 01       	movw	r30, r24
    c366:	e3 5e       	subi	r30, 0xE3	; 227
    c368:	fe 4f       	sbci	r31, 0xFE	; 254
    c36a:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    c36c:	31 97       	sbiw	r30, 0x01	; 1
    c36e:	10 82       	st	Z, r1
							game.active_enemies--;
    c370:	80 91 cd 0d 	lds	r24, 0x0DCD
    c374:	81 50       	subi	r24, 0x01	; 1
    c376:	80 93 cd 0d 	sts	0x0DCD, r24
							game.level_score += KILL_SCORE;
    c37a:	80 91 b6 0d 	lds	r24, 0x0DB6
    c37e:	90 91 b7 0d 	lds	r25, 0x0DB7
    c382:	0a 96       	adiw	r24, 0x0a	; 10
    c384:	90 93 b7 0d 	sts	0x0DB7, r25
    c388:	80 93 b6 0d 	sts	0x0DB6, r24
							break;
    c38c:	1b c0       	rjmp	.+54     	; 0xc3c4 <animate_shot+0x1d2>
						}
						player->shot[i].active = 0;
    c38e:	f3 01       	movw	r30, r6
    c390:	10 82       	st	Z, r1
						player->active_shots--;
    c392:	f2 01       	movw	r30, r4
    c394:	87 81       	ldd	r24, Z+7	; 0x07
    c396:	81 50       	subi	r24, 0x01	; 1
    c398:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c39a:	01 e0       	ldi	r16, 0x01	; 1
    c39c:	21 e0       	ldi	r18, 0x01	; 1
    c39e:	40 e0       	ldi	r20, 0x00	; 0
    c3a0:	60 ee       	ldi	r22, 0xE0	; 224
    c3a2:	8f 2d       	mov	r24, r15
    c3a4:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    c3a8:	29 81       	ldd	r18, Y+1	; 0x01
    c3aa:	3a 81       	ldd	r19, Y+2	; 0x02
    c3ac:	2f 5f       	subi	r18, 0xFF	; 255
    c3ae:	3f 4f       	sbci	r19, 0xFF	; 255
    c3b0:	3a 83       	std	Y+2, r19	; 0x02
    c3b2:	29 83       	std	Y+1, r18	; 0x01
    c3b4:	35 e3       	ldi	r19, 0x35	; 53
    c3b6:	23 0e       	add	r2, r19
    c3b8:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    c3ba:	89 81       	ldd	r24, Y+1	; 0x01
    c3bc:	9a 81       	ldd	r25, Y+2	; 0x02
    c3be:	05 97       	sbiw	r24, 0x05	; 5
    c3c0:	09 f0       	breq	.+2      	; 0xc3c4 <animate_shot+0x1d2>
    c3c2:	87 cf       	rjmp	.-242    	; 0xc2d2 <animate_shot+0xe0>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    c3c4:	91 ed       	ldi	r25, 0xD1	; 209
    c3c6:	89 16       	cp	r8, r25
    c3c8:	9d e0       	ldi	r25, 0x0D	; 13
    c3ca:	99 06       	cpc	r9, r25
    c3cc:	09 f4       	brne	.+2      	; 0xc3d0 <animate_shot+0x1de>
    c3ce:	53 c0       	rjmp	.+166    	; 0xc476 <animate_shot+0x284>
    c3d0:	f4 01       	movw	r30, r8
    c3d2:	85 85       	ldd	r24, Z+13	; 0x0d
    c3d4:	88 23       	and	r24, r24
    c3d6:	09 f4       	brne	.+2      	; 0xc3da <animate_shot+0x1e8>
    c3d8:	4e c0       	rjmp	.+156    	; 0xc476 <animate_shot+0x284>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c3da:	90 91 b2 0d 	lds	r25, 0x0DB2
    c3de:	a4 84       	ldd	r10, Z+12	; 0x0c
    c3e0:	aa 0c       	add	r10, r10
    c3e2:	aa 0c       	add	r10, r10
    c3e4:	aa 0c       	add	r10, r10
    c3e6:	c3 84       	ldd	r12, Z+11	; 0x0b
    c3e8:	cc 0c       	add	r12, r12
    c3ea:	cc 0c       	add	r12, r12
    c3ec:	cc 0c       	add	r12, r12
    c3ee:	00 81       	ld	r16, Z
    c3f0:	09 1b       	sub	r16, r25
    c3f2:	ed 81       	ldd	r30, Y+5	; 0x05
    c3f4:	fe 81       	ldd	r31, Y+6	; 0x06
    c3f6:	80 81       	ld	r24, Z
    c3f8:	f4 01       	movw	r30, r8
    c3fa:	e2 80       	ldd	r14, Z+2	; 0x02
    c3fc:	28 e0       	ldi	r18, 0x08	; 8
    c3fe:	48 e0       	ldi	r20, 0x08	; 8
    c400:	ed 81       	ldd	r30, Y+5	; 0x05
    c402:	fe 81       	ldd	r31, Y+6	; 0x06
    c404:	62 81       	ldd	r22, Z+2	; 0x02
    c406:	89 1b       	sub	r24, r25
    c408:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
    c40c:	88 23       	and	r24, r24
    c40e:	99 f1       	breq	.+102    	; 0xc476 <animate_shot+0x284>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    c410:	41 e0       	ldi	r20, 0x01	; 1
    c412:	6f ef       	ldi	r22, 0xFF	; 255
    c414:	84 e0       	ldi	r24, 0x04	; 4
    c416:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    c41a:	f4 01       	movw	r30, r8
    c41c:	87 85       	ldd	r24, Z+15	; 0x0f
    c41e:	f3 01       	movw	r30, r6
    c420:	31 97       	sbiw	r30, 0x01	; 1
    c422:	90 81       	ld	r25, Z
    c424:	89 1b       	sub	r24, r25
    c426:	f4 01       	movw	r30, r8
    c428:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    c42a:	18 16       	cp	r1, r24
    c42c:	bc f0       	brlt	.+46     	; 0xc45c <animate_shot+0x26a>
							{
								SFX_PLAYER_EXPLODE;
    c42e:	41 e0       	ldi	r20, 0x01	; 1
    c430:	6f ef       	ldi	r22, 0xFF	; 255
    c432:	85 e0       	ldi	r24, 0x05	; 5
    c434:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
								other_player->shield = 0;
    c438:	f4 01       	movw	r30, r8
    c43a:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    c43c:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    c43e:	fc e4       	ldi	r31, 0x4C	; 76
    c440:	8f 16       	cp	r8, r31
    c442:	fe e0       	ldi	r31, 0x0E	; 14
    c444:	9f 06       	cpc	r9, r31
    c446:	51 f4       	brne	.+20     	; 0xc45c <animate_shot+0x26a>
    c448:	80 91 b6 0d 	lds	r24, 0x0DB6
    c44c:	90 91 b7 0d 	lds	r25, 0x0DB7
    c450:	8c 59       	subi	r24, 0x9C	; 156
    c452:	9f 4f       	sbci	r25, 0xFF	; 255
    c454:	90 93 b7 0d 	sts	0x0DB7, r25
    c458:	80 93 b6 0d 	sts	0x0DB6, r24
							}
							player->shot[i].active = 0;
    c45c:	f3 01       	movw	r30, r6
    c45e:	10 82       	st	Z, r1
							player->active_shots--;
    c460:	f2 01       	movw	r30, r4
    c462:	87 81       	ldd	r24, Z+7	; 0x07
    c464:	81 50       	subi	r24, 0x01	; 1
    c466:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c468:	01 e0       	ldi	r16, 0x01	; 1
    c46a:	21 e0       	ldi	r18, 0x01	; 1
    c46c:	40 e0       	ldi	r20, 0x00	; 0
    c46e:	60 ee       	ldi	r22, 0xE0	; 224
    c470:	8f 2d       	mov	r24, r15
    c472:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c476:	1f 5f       	subi	r17, 0xFF	; 255
    c478:	f4 e1       	ldi	r31, 0x14	; 20
    c47a:	6f 0e       	add	r6, r31
    c47c:	71 1c       	adc	r7, r1
    c47e:	2d 81       	ldd	r18, Y+5	; 0x05
    c480:	3e 81       	ldd	r19, Y+6	; 0x06
    c482:	2c 5e       	subi	r18, 0xEC	; 236
    c484:	3f 4f       	sbci	r19, 0xFF	; 255
    c486:	3e 83       	std	Y+6, r19	; 0x06
    c488:	2d 83       	std	Y+5, r18	; 0x05
    c48a:	13 30       	cpi	r17, 0x03	; 3
    c48c:	09 f0       	breq	.+2      	; 0xc490 <animate_shot+0x29e>
    c48e:	d5 ce       	rjmp	.-598    	; 0xc23a <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    c490:	26 96       	adiw	r28, 0x06	; 6
    c492:	0f b6       	in	r0, 0x3f	; 63
    c494:	f8 94       	cli
    c496:	de bf       	out	0x3e, r29	; 62
    c498:	0f be       	out	0x3f, r0	; 63
    c49a:	cd bf       	out	0x3d, r28	; 61
    c49c:	df 91       	pop	r29
    c49e:	cf 91       	pop	r28
    c4a0:	1f 91       	pop	r17
    c4a2:	0f 91       	pop	r16
    c4a4:	ff 90       	pop	r15
    c4a6:	ef 90       	pop	r14
    c4a8:	df 90       	pop	r13
    c4aa:	cf 90       	pop	r12
    c4ac:	bf 90       	pop	r11
    c4ae:	af 90       	pop	r10
    c4b0:	9f 90       	pop	r9
    c4b2:	8f 90       	pop	r8
    c4b4:	7f 90       	pop	r7
    c4b6:	6f 90       	pop	r6
    c4b8:	5f 90       	pop	r5
    c4ba:	4f 90       	pop	r4
    c4bc:	3f 90       	pop	r3
    c4be:	2f 90       	pop	r2
    c4c0:	08 95       	ret

0000c4c2 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c4c2:	7f 92       	push	r7
    c4c4:	8f 92       	push	r8
    c4c6:	9f 92       	push	r9
    c4c8:	af 92       	push	r10
    c4ca:	bf 92       	push	r11
    c4cc:	cf 92       	push	r12
    c4ce:	df 92       	push	r13
    c4d0:	ef 92       	push	r14
    c4d2:	ff 92       	push	r15
    c4d4:	0f 93       	push	r16
    c4d6:	1f 93       	push	r17
    c4d8:	cf 93       	push	r28
    c4da:	df 93       	push	r29
    c4dc:	1f 92       	push	r1
    c4de:	cd b7       	in	r28, 0x3d	; 61
    c4e0:	de b7       	in	r29, 0x3e	; 62
    c4e2:	6c 01       	movw	r12, r24
    c4e4:	7b 01       	movw	r14, r22
    c4e6:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c4e8:	cb 01       	movw	r24, r22
    c4ea:	29 83       	std	Y+1, r18	; 0x01
    c4ec:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c4f0:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c4f2:	29 81       	ldd	r18, Y+1	; 0x01
    c4f4:	20 9f       	mul	r18, r16
    c4f6:	50 01       	movw	r10, r0
    c4f8:	11 24       	eor	r1, r1
    c4fa:	10 e0       	ldi	r17, 0x00	; 0
    c4fc:	81 2f       	mov	r24, r17
    c4fe:	90 e0       	ldi	r25, 0x00	; 0
    c500:	8a 15       	cp	r24, r10
    c502:	9b 05       	cpc	r25, r11
    c504:	54 f4       	brge	.+20     	; 0xc51a <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c506:	40 e0       	ldi	r20, 0x00	; 0
    c508:	b4 01       	movw	r22, r8
    c50a:	81 2f       	mov	r24, r17
    c50c:	87 0d       	add	r24, r7
    c50e:	29 83       	std	Y+1, r18	; 0x01
    c510:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c514:	1f 5f       	subi	r17, 0xFF	; 255
    c516:	29 81       	ldd	r18, Y+1	; 0x01
    c518:	f1 cf       	rjmp	.-30     	; 0xc4fc <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c51a:	f7 01       	movw	r30, r14
    c51c:	84 81       	ldd	r24, Z+4	; 0x04
    c51e:	88 23       	and	r24, r24
    c520:	51 f0       	breq	.+20     	; 0xc536 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c522:	f6 01       	movw	r30, r12
    c524:	80 81       	ld	r24, Z
    c526:	90 e1       	ldi	r25, 0x10	; 16
    c528:	98 27       	eor	r25, r24
    c52a:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c52c:	40 e0       	ldi	r20, 0x00	; 0
    c52e:	60 ee       	ldi	r22, 0xE0	; 224
    c530:	87 2d       	mov	r24, r7
    c532:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
	return anim->looped;
}
    c536:	f7 01       	movw	r30, r14
    c538:	84 81       	ldd	r24, Z+4	; 0x04
    c53a:	0f 90       	pop	r0
    c53c:	df 91       	pop	r29
    c53e:	cf 91       	pop	r28
    c540:	1f 91       	pop	r17
    c542:	0f 91       	pop	r16
    c544:	ff 90       	pop	r15
    c546:	ef 90       	pop	r14
    c548:	df 90       	pop	r13
    c54a:	cf 90       	pop	r12
    c54c:	bf 90       	pop	r11
    c54e:	af 90       	pop	r10
    c550:	9f 90       	pop	r9
    c552:	8f 90       	pop	r8
    c554:	7f 90       	pop	r7
    c556:	08 95       	ret

0000c558 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c558:	8f 92       	push	r8
    c55a:	9f 92       	push	r9
    c55c:	af 92       	push	r10
    c55e:	bf 92       	push	r11
    c560:	cf 92       	push	r12
    c562:	df 92       	push	r13
    c564:	ef 92       	push	r14
    c566:	ff 92       	push	r15
    c568:	0f 93       	push	r16
    c56a:	1f 93       	push	r17
    c56c:	cf 93       	push	r28
    c56e:	df 93       	push	r29
    c570:	ec 01       	movw	r28, r24
    c572:	c6 2e       	mov	r12, r22
    c574:	14 2f       	mov	r17, r20
    c576:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c578:	6c 81       	ldd	r22, Y+4	; 0x04
    c57a:	77 27       	eor	r23, r23
    c57c:	67 fd       	sbrc	r22, 7
    c57e:	70 95       	com	r23
    c580:	87 2f       	mov	r24, r23
    c582:	97 2f       	mov	r25, r23
    c584:	0e 94 f1 73 	call	0xe7e2	; 0xe7e2 <__floatsisf>
    c588:	4b 01       	movw	r8, r22
    c58a:	5c 01       	movw	r10, r24
    c58c:	8e 81       	ldd	r24, Y+6	; 0x06
    c58e:	68 2f       	mov	r22, r24
    c590:	70 e0       	ldi	r23, 0x00	; 0
    c592:	80 e0       	ldi	r24, 0x00	; 0
    c594:	90 e0       	ldi	r25, 0x00	; 0
    c596:	0e 94 f1 73 	call	0xe7e2	; 0xe7e2 <__floatsisf>
    c59a:	29 e8       	ldi	r18, 0x89	; 137
    c59c:	38 e8       	ldi	r19, 0x88	; 136
    c59e:	48 e8       	ldi	r20, 0x88	; 136
    c5a0:	5c e3       	ldi	r21, 0x3C	; 60
    c5a2:	0e 94 7d 74 	call	0xe8fa	; 0xe8fa <__mulsf3>
    c5a6:	9b 01       	movw	r18, r22
    c5a8:	ac 01       	movw	r20, r24
    c5aa:	c5 01       	movw	r24, r10
    c5ac:	b4 01       	movw	r22, r8
    c5ae:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <__addsf3>
    c5b2:	0e 94 be 73 	call	0xe77c	; 0xe77c <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c5b6:	69 37       	cpi	r22, 0x79	; 121
    c5b8:	14 f4       	brge	.+4      	; 0xc5be <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c5ba:	6c 83       	std	Y+4, r22	; 0x04
    c5bc:	02 c0       	rjmp	.+4      	; 0xc5c2 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c5be:	88 e7       	ldi	r24, 0x78	; 120
    c5c0:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c5c2:	60 91 cc 0d 	lds	r22, 0x0DCC
    c5c6:	8d 81       	ldd	r24, Y+5	; 0x05
    c5c8:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    c5cc:	28 81       	ld	r18, Y
    c5ce:	39 81       	ldd	r19, Y+1	; 0x01
    c5d0:	82 0f       	add	r24, r18
    c5d2:	93 1f       	adc	r25, r19
    c5d4:	99 83       	std	Y+1, r25	; 0x01
    c5d6:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c5d8:	60 91 cc 0d 	lds	r22, 0x0DCC
    c5dc:	8c 81       	ldd	r24, Y+4	; 0x04
    c5de:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    c5e2:	ea 81       	ldd	r30, Y+2	; 0x02
    c5e4:	fb 81       	ldd	r31, Y+3	; 0x03
    c5e6:	8e 0f       	add	r24, r30
    c5e8:	9f 1f       	adc	r25, r31
    c5ea:	9b 83       	std	Y+3, r25	; 0x03
    c5ec:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c5ee:	4d 2d       	mov	r20, r13
    c5f0:	61 2f       	mov	r22, r17
    c5f2:	ce 01       	movw	r24, r28
    c5f4:	0e 94 eb 5e 	call	0xbdd6	; 0xbdd6 <collision_detect_level>
    c5f8:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c5fa:	88 23       	and	r24, r24
    c5fc:	41 f0       	breq	.+16     	; 0xc60e <animate_sprite+0xb6>
    c5fe:	00 23       	and	r16, r16
    c600:	31 f0       	breq	.+12     	; 0xc60e <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c602:	88 e0       	ldi	r24, 0x08	; 8
    c604:	e8 9e       	mul	r14, r24
    c606:	70 01       	movw	r14, r0
    c608:	11 24       	eor	r1, r1
    c60a:	fb 82       	std	Y+3, r15	; 0x03
    c60c:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c60e:	3a 81       	ldd	r19, Y+2	; 0x02
    c610:	80 91 ba 0d 	lds	r24, 0x0DBA
    c614:	43 2f       	mov	r20, r19
    c616:	48 1b       	sub	r20, r24
    c618:	98 81       	ld	r25, Y
    c61a:	80 91 b2 0d 	lds	r24, 0x0DB2
    c61e:	69 2f       	mov	r22, r25
    c620:	68 1b       	sub	r22, r24
    c622:	0d 2d       	mov	r16, r13
    c624:	21 2f       	mov	r18, r17
    c626:	8c 2d       	mov	r24, r12
    c628:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	return result;
}
    c62c:	8b 2d       	mov	r24, r11
    c62e:	df 91       	pop	r29
    c630:	cf 91       	pop	r28
    c632:	1f 91       	pop	r17
    c634:	0f 91       	pop	r16
    c636:	ff 90       	pop	r15
    c638:	ef 90       	pop	r14
    c63a:	df 90       	pop	r13
    c63c:	cf 90       	pop	r12
    c63e:	bf 90       	pop	r11
    c640:	af 90       	pop	r10
    c642:	9f 90       	pop	r9
    c644:	8f 90       	pop	r8
    c646:	08 95       	ret

0000c648 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c648:	ef 92       	push	r14
    c64a:	0f 93       	push	r16
    c64c:	fc 01       	movw	r30, r24
    c64e:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    c650:	90 85       	ldd	r25, Z+8	; 0x08
    c652:	94 ff       	sbrs	r25, 4
    c654:	0f c0       	rjmp	.+30     	; 0xc674 <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c656:	92 81       	ldd	r25, Z+2	; 0x02
    c658:	20 91 ba 0d 	lds	r18, 0x0DBA
    c65c:	49 2f       	mov	r20, r25
    c65e:	42 1b       	sub	r20, r18
    c660:	90 81       	ld	r25, Z
    c662:	20 91 b2 0d 	lds	r18, 0x0DB2
    c666:	69 2f       	mov	r22, r25
    c668:	62 1b       	sub	r22, r18
    c66a:	04 85       	ldd	r16, Z+12	; 0x0c
    c66c:	23 85       	ldd	r18, Z+11	; 0x0b
    c66e:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    c672:	08 c0       	rjmp	.+16     	; 0xc684 <animate_player+0x3c>
	{
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
	}
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c674:	e1 2c       	mov	r14, r1
    c676:	00 e0       	ldi	r16, 0x00	; 0
    c678:	24 85       	ldd	r18, Z+12	; 0x0c
    c67a:	43 85       	ldd	r20, Z+11	; 0x0b
    c67c:	68 2f       	mov	r22, r24
    c67e:	cf 01       	movw	r24, r30
    c680:	0e 94 ac 62 	call	0xc558	; 0xc558 <animate_sprite>
	{
		SFX_PLAYER_EXPLODE;
		game.player.shield = 0;
		game.player.flags = EXPLODING;
	}
}
    c684:	0f 91       	pop	r16
    c686:	ef 90       	pop	r14
    c688:	08 95       	ret

0000c68a <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c68a:	1f 93       	push	r17
    c68c:	cf 93       	push	r28
    c68e:	df 93       	push	r29
    c690:	ec 01       	movw	r28, r24
    c692:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c694:	98 85       	ldd	r25, Y+8	; 0x08
    c696:	89 2f       	mov	r24, r25
    c698:	88 70       	andi	r24, 0x08	; 8
    c69a:	93 ff       	sbrs	r25, 3
    c69c:	14 c0       	rjmp	.+40     	; 0xc6c6 <update_spider_enemy+0x3c>
    c69e:	2d 85       	ldd	r18, Y+13	; 0x0d
    c6a0:	20 38       	cpi	r18, 0x80	; 128
    c6a2:	89 f4       	brne	.+34     	; 0xc6c6 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c6a4:	81 e0       	ldi	r24, 0x01	; 1
    c6a6:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c6a8:	8c e9       	ldi	r24, 0x9C	; 156
    c6aa:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c6ac:	88 ec       	ldi	r24, 0xC8	; 200
    c6ae:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c6b0:	8c e3       	ldi	r24, 0x3C	; 60
    c6b2:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c6b4:	89 85       	ldd	r24, Y+9	; 0x09
    c6b6:	81 11       	cpse	r24, r1
    c6b8:	02 c0       	rjmp	.+4      	; 0xc6be <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c6ba:	84 ec       	ldi	r24, 0xC4	; 196
    c6bc:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c6be:	40 e0       	ldi	r20, 0x00	; 0
    c6c0:	69 e7       	ldi	r22, 0x79	; 121
    c6c2:	76 e3       	ldi	r23, 0x36	; 54
    c6c4:	19 c0       	rjmp	.+50     	; 0xc6f8 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c6c6:	90 ff       	sbrs	r25, 0
    c6c8:	0f c0       	rjmp	.+30     	; 0xc6e8 <update_spider_enemy+0x5e>
    c6ca:	9e 81       	ldd	r25, Y+6	; 0x06
    c6cc:	91 11       	cpse	r25, r1
    c6ce:	0c c0       	rjmp	.+24     	; 0xc6e8 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c6d0:	88 e0       	ldi	r24, 0x08	; 8
    c6d2:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c6d4:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c6d6:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c6d8:	89 85       	ldd	r24, Y+9	; 0x09
    c6da:	81 11       	cpse	r24, r1
    c6dc:	03 c0       	rjmp	.+6      	; 0xc6e4 <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c6de:	81 e0       	ldi	r24, 0x01	; 1
    c6e0:	89 87       	std	Y+9, r24	; 0x09
    c6e2:	0d c0       	rjmp	.+26     	; 0xc6fe <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c6e4:	19 86       	std	Y+9, r1	; 0x09
    c6e6:	0b c0       	rjmp	.+22     	; 0xc6fe <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c6e8:	88 23       	and	r24, r24
    c6ea:	49 f0       	breq	.+18     	; 0xc6fe <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c6ec:	ce 01       	movw	r24, r28
    c6ee:	85 96       	adiw	r24, 0x25	; 37
    c6f0:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c6f4:	40 e0       	ldi	r20, 0x00	; 0
    c6f6:	bc 01       	movw	r22, r24
    c6f8:	81 2f       	mov	r24, r17
    c6fa:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	}
	e->frame_count++;
    c6fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    c700:	8f 5f       	subi	r24, 0xFF	; 255
    c702:	8d 87       	std	Y+13, r24	; 0x0d
}
    c704:	df 91       	pop	r29
    c706:	cf 91       	pop	r28
    c708:	1f 91       	pop	r17
    c70a:	08 95       	ret

0000c70c <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c70c:	cf 93       	push	r28
    c70e:	fc 01       	movw	r30, r24
    c710:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c712:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c714:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x)
    c716:	20 91 d1 0d 	lds	r18, 0x0DD1
    c71a:	30 91 d2 0d 	lds	r19, 0x0DD2
    c71e:	80 81       	ld	r24, Z
    c720:	91 81       	ldd	r25, Z+1	; 0x01
    c722:	b5 96       	adiw	r30, 0x25	; 37
    c724:	82 17       	cp	r24, r18
    c726:	93 07       	cpc	r25, r19
    c728:	28 f4       	brcc	.+10     	; 0xc734 <update_turret_enemy+0x28>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c72a:	cf 01       	movw	r24, r30
    c72c:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c730:	41 e0       	ldi	r20, 0x01	; 1
    c732:	04 c0       	rjmp	.+8      	; 0xc73c <update_turret_enemy+0x30>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c734:	cf 01       	movw	r24, r30
    c736:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c73a:	40 e0       	ldi	r20, 0x00	; 0
    c73c:	bc 01       	movw	r22, r24
    c73e:	8c 2f       	mov	r24, r28
	}
}
    c740:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c742:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c746 <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c746:	cf 93       	push	r28
    c748:	fc 01       	movw	r30, r24
    c74a:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c74c:	82 ee       	ldi	r24, 0xE2	; 226
    c74e:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c750:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c752:	cf 01       	movw	r24, r30
    c754:	85 96       	adiw	r24, 0x25	; 37
    c756:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c75a:	40 e0       	ldi	r20, 0x00	; 0
    c75c:	bc 01       	movw	r22, r24
    c75e:	8c 2f       	mov	r24, r28
}
    c760:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c762:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c766 <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c766:	cf 93       	push	r28
    c768:	fc 01       	movw	r30, r24
    c76a:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c76c:	8a e0       	ldi	r24, 0x0A	; 10
    c76e:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c770:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c772:	cf 01       	movw	r24, r30
    c774:	85 96       	adiw	r24, 0x25	; 37
    c776:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c77a:	40 e0       	ldi	r20, 0x00	; 0
    c77c:	bc 01       	movw	r22, r24
    c77e:	8c 2f       	mov	r24, r28
}
    c780:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c782:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c786 <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c786:	cf 93       	push	r28
    c788:	fc 01       	movw	r30, r24
    c78a:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c78c:	8e e1       	ldi	r24, 0x1E	; 30
    c78e:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c790:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c792:	cf 01       	movw	r24, r30
    c794:	85 96       	adiw	r24, 0x25	; 37
    c796:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c79a:	40 e0       	ldi	r20, 0x00	; 0
    c79c:	bc 01       	movw	r22, r24
    c79e:	8c 2f       	mov	r24, r28
}
    c7a0:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c7a2:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c7a6 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c7a6:	cf 93       	push	r28
    c7a8:	fc 01       	movw	r30, r24
    c7aa:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c7ac:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c7ae:	88 e2       	ldi	r24, 0x28	; 40
    c7b0:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c7b2:	80 91 c7 0d 	lds	r24, 0x0DC7
    c7b6:	82 30       	cpi	r24, 0x02	; 2
    c7b8:	11 f4       	brne	.+4      	; 0xc7be <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c7ba:	88 ed       	ldi	r24, 0xD8	; 216
    c7bc:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c7be:	22 81       	ldd	r18, Z+2	; 0x02
    c7c0:	33 81       	ldd	r19, Z+3	; 0x03
    c7c2:	24 50       	subi	r18, 0x04	; 4
    c7c4:	31 09       	sbc	r19, r1
    c7c6:	2d 3b       	cpi	r18, 0xBD	; 189
    c7c8:	31 05       	cpc	r19, r1
    c7ca:	38 f0       	brcs	.+14     	; 0xc7da <update_level_hazard+0x34>
    c7cc:	27 85       	ldd	r18, Z+15	; 0x0f
    c7ce:	88 e0       	ldi	r24, 0x08	; 8
    c7d0:	28 9f       	mul	r18, r24
    c7d2:	90 01       	movw	r18, r0
    c7d4:	11 24       	eor	r1, r1
    c7d6:	33 83       	std	Z+3, r19	; 0x03
    c7d8:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c7da:	cf 01       	movw	r24, r30
    c7dc:	85 96       	adiw	r24, 0x25	; 37
    c7de:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c7e2:	40 e0       	ldi	r20, 0x00	; 0
    c7e4:	bc 01       	movw	r22, r24
    c7e6:	8c 2f       	mov	r24, r28
}
    c7e8:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c7ea:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c7ee <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c7ee:	cf 93       	push	r28
    c7f0:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c7f2:	0c 96       	adiw	r24, 0x0c	; 12
    c7f4:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c7f8:	40 e0       	ldi	r20, 0x00	; 0
    c7fa:	bc 01       	movw	r22, r24
    c7fc:	8c 2f       	mov	r24, r28
}
    c7fe:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c800:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c804 <update_enemies>:
}

void update_enemies()
{
    c804:	cf 92       	push	r12
    c806:	df 92       	push	r13
    c808:	ef 92       	push	r14
    c80a:	ff 92       	push	r15
    c80c:	0f 93       	push	r16
    c80e:	1f 93       	push	r17
    c810:	cf 93       	push	r28
    c812:	df 93       	push	r29
    c814:	82 ed       	ldi	r24, 0xD2	; 210
    c816:	e8 2e       	mov	r14, r24
    c818:	8e e0       	ldi	r24, 0x0E	; 14
    c81a:	f8 2e       	mov	r15, r24
    c81c:	c7 ec       	ldi	r28, 0xC7	; 199
    c81e:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c820:	19 e0       	ldi	r17, 0x09	; 9
    c822:	f7 01       	movw	r30, r14
    c824:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c826:	80 81       	ld	r24, Z
    c828:	97 01       	movw	r18, r14
    c82a:	21 50       	subi	r18, 0x01	; 1
    c82c:	31 09       	sbc	r19, r1
    c82e:	69 01       	movw	r12, r18
    c830:	84 ff       	sbrs	r24, 4
    c832:	0d c0       	rjmp	.+26     	; 0xc84e <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c834:	d7 01       	movw	r26, r14
    c836:	0c 91       	ld	r16, X
    c838:	f9 01       	movw	r30, r18
    c83a:	20 81       	ld	r18, Z
    c83c:	41 2f       	mov	r20, r17
    c83e:	be 01       	movw	r22, r28
    c840:	63 5d       	subi	r22, 0xD3	; 211
    c842:	7f 4f       	sbci	r23, 0xFF	; 255
    c844:	ce 01       	movw	r24, r28
    c846:	08 96       	adiw	r24, 0x08	; 8
    c848:	0e 94 61 62 	call	0xc4c2	; 0xc4c2 <map_explosion>
    c84c:	2a c0       	rjmp	.+84     	; 0xc8a2 <update_enemies+0x9e>
    c84e:	f7 01       	movw	r30, r14
    c850:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c852:	80 81       	ld	r24, Z
    c854:	88 23       	and	r24, r24
    c856:	29 f1       	breq	.+74     	; 0xc8a2 <update_enemies+0x9e>
		{
			switch (game.enemies[i].enemy_type)
    c858:	d7 01       	movw	r26, r14
    c85a:	11 96       	adiw	r26, 0x01	; 1
    c85c:	ec 91       	ld	r30, X
    c85e:	8e 2f       	mov	r24, r30
    c860:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c862:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c864:	88 30       	cpi	r24, 0x08	; 8
    c866:	91 05       	cpc	r25, r1
    c868:	c8 f4       	brcc	.+50     	; 0xc89c <update_enemies+0x98>
    c86a:	fc 01       	movw	r30, r24
    c86c:	e8 5c       	subi	r30, 0xC8	; 200
    c86e:	ff 4f       	sbci	r31, 0xFF	; 255
    c870:	0c 94 53 73 	jmp	0xe6a6	; 0xe6a6 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c874:	ce 01       	movw	r24, r28
    c876:	0e 94 45 63 	call	0xc68a	; 0xc68a <update_spider_enemy>
    c87a:	13 c0       	rjmp	.+38     	; 0xc8a2 <update_enemies+0x9e>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    c87c:	ce 01       	movw	r24, r28
    c87e:	0e 94 86 63 	call	0xc70c	; 0xc70c <update_turret_enemy>
    c882:	0f c0       	rjmp	.+30     	; 0xc8a2 <update_enemies+0x9e>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c884:	ce 01       	movw	r24, r28
    c886:	0e 94 a3 63 	call	0xc746	; 0xc746 <update_drone_enemy>
    c88a:	0b c0       	rjmp	.+22     	; 0xc8a2 <update_enemies+0x9e>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c88c:	ce 01       	movw	r24, r28
    c88e:	0e 94 c3 63 	call	0xc786	; 0xc786 <update_shark_enemy>
    c892:	07 c0       	rjmp	.+14     	; 0xc8a2 <update_enemies+0x9e>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c894:	ce 01       	movw	r24, r28
    c896:	0e 94 b3 63 	call	0xc766	; 0xc766 <update_globe_enemy>
    c89a:	03 c0       	rjmp	.+6      	; 0xc8a2 <update_enemies+0x9e>
				default: update_level_hazard(&game.enemies[i], slot); break;
    c89c:	ce 01       	movw	r24, r28
    c89e:	0e 94 d3 63 	call	0xc7a6	; 0xc7a6 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c8a2:	f6 01       	movw	r30, r12
    c8a4:	90 81       	ld	r25, Z
    c8a6:	d7 01       	movw	r26, r14
    c8a8:	8c 91       	ld	r24, X
    c8aa:	98 9f       	mul	r25, r24
    c8ac:	10 0d       	add	r17, r0
    c8ae:	11 24       	eor	r1, r1
    c8b0:	b5 e3       	ldi	r27, 0x35	; 53
    c8b2:	eb 0e       	add	r14, r27
    c8b4:	f1 1c       	adc	r15, r1
    c8b6:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c8b8:	eb ed       	ldi	r30, 0xDB	; 219
    c8ba:	ee 16       	cp	r14, r30
    c8bc:	ef e0       	ldi	r30, 0x0F	; 15
    c8be:	fe 06       	cpc	r15, r30
    c8c0:	09 f0       	breq	.+2      	; 0xc8c4 <update_enemies+0xc0>
    c8c2:	af cf       	rjmp	.-162    	; 0xc822 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c8c4:	df 91       	pop	r29
    c8c6:	cf 91       	pop	r28
    c8c8:	1f 91       	pop	r17
    c8ca:	0f 91       	pop	r16
    c8cc:	ff 90       	pop	r15
    c8ce:	ef 90       	pop	r14
    c8d0:	df 90       	pop	r13
    c8d2:	cf 90       	pop	r12
    c8d4:	08 95       	ret

0000c8d6 <update_enemy_shots>:

void update_enemy_shots()
{
    c8d6:	8f 92       	push	r8
    c8d8:	9f 92       	push	r9
    c8da:	af 92       	push	r10
    c8dc:	bf 92       	push	r11
    c8de:	df 92       	push	r13
    c8e0:	ef 92       	push	r14
    c8e2:	ff 92       	push	r15
    c8e4:	0f 93       	push	r16
    c8e6:	1f 93       	push	r17
    c8e8:	cf 93       	push	r28
    c8ea:	df 93       	push	r29
    c8ec:	1f 92       	push	r1
    c8ee:	cd b7       	in	r28, 0x3d	; 61
    c8f0:	de b7       	in	r29, 0x3e	; 62
    c8f2:	85 ed       	ldi	r24, 0xD5	; 213
    c8f4:	a8 2e       	mov	r10, r24
    c8f6:	8e e0       	ldi	r24, 0x0E	; 14
    c8f8:	b8 2e       	mov	r11, r24
    c8fa:	02 ee       	ldi	r16, 0xE2	; 226
    c8fc:	1e e0       	ldi	r17, 0x0E	; 14
    c8fe:	9c ed       	ldi	r25, 0xDC	; 220
    c900:	e9 2e       	mov	r14, r25
    c902:	9e e0       	ldi	r25, 0x0E	; 14
    c904:	f9 2e       	mov	r15, r25
    c906:	20 e1       	ldi	r18, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c908:	dd 24       	eor	r13, r13
    c90a:	d3 94       	inc	r13
    c90c:	6f ef       	ldi	r22, 0xFF	; 255
    c90e:	62 0f       	add	r22, r18
    c910:	f5 01       	movw	r30, r10
    c912:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c914:	90 81       	ld	r25, Z
    c916:	35 97       	sbiw	r30, 0x05	; 5
    c918:	92 30       	cpi	r25, 0x02	; 2
    c91a:	09 f4       	brne	.+2      	; 0xc91e <update_enemy_shots+0x48>
    c91c:	4e c0       	rjmp	.+156    	; 0xc9ba <update_enemy_shots+0xe4>
    c91e:	80 81       	ld	r24, Z
    c920:	88 23       	and	r24, r24
    c922:	09 f4       	brne	.+2      	; 0xc926 <update_enemy_shots+0x50>
    c924:	4a c0       	rjmp	.+148    	; 0xc9ba <update_enemy_shots+0xe4>
    c926:	d5 01       	movw	r26, r10
    c928:	8c 91       	ld	r24, X
    c92a:	8c 33       	cpi	r24, 0x3C	; 60
    c92c:	08 f4       	brcc	.+2      	; 0xc930 <update_enemy_shots+0x5a>
    c92e:	45 c0       	rjmp	.+138    	; 0xc9ba <update_enemy_shots+0xe4>
		{
			game.enemies[i].shot_frame_count = 0;	
    c930:	1c 92       	st	X, r1
    c932:	f8 01       	movw	r30, r16
    c934:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c936:	80 81       	ld	r24, Z
    c938:	87 30       	cpi	r24, 0x07	; 7
    c93a:	09 f0       	breq	.+2      	; 0xc93e <update_enemy_shots+0x68>
    c93c:	45 c0       	rjmp	.+138    	; 0xc9c8 <update_enemy_shots+0xf2>
    c93e:	f8 01       	movw	r30, r16
				{
					if (!game.enemies[i].shot[j].active)
    c940:	82 91       	ld	r24, -Z
    c942:	81 11       	cpse	r24, r1
    c944:	33 c0       	rjmp	.+102    	; 0xc9ac <update_enemy_shots+0xd6>
					{
						game.enemies[i].shot[j].active = 1;
    c946:	d0 82       	st	Z, r13
    c948:	f5 01       	movw	r30, r10
    c94a:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c94c:	40 81       	ld	r20, Z
    c94e:	51 81       	ldd	r21, Z+1	; 0x01
    c950:	f5 01       	movw	r30, r10
    c952:	54 83       	std	Z+4, r21	; 0x04
    c954:	43 83       	std	Z+3, r20	; 0x03
    c956:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c958:	01 90       	ld	r0, Z+
    c95a:	f0 81       	ld	r31, Z
    c95c:	e0 2d       	mov	r30, r0
    c95e:	4f 01       	movw	r8, r30
    c960:	88 ef       	ldi	r24, 0xF8	; 248
    c962:	88 22       	and	r8, r24
    c964:	16 96       	adiw	r26, 0x06	; 6
    c966:	9c 92       	st	X, r9
    c968:	8e 92       	st	-X, r8
    c96a:	15 97       	sbiw	r26, 0x05	; 5
    c96c:	d8 01       	movw	r26, r16
    c96e:	8c 91       	ld	r24, X
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c970:	94 30       	cpi	r25, 0x04	; 4
    c972:	11 f4       	brne	.+4      	; 0xc978 <update_enemy_shots+0xa2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c974:	f7 01       	movw	r30, r14
    c976:	19 c0       	rjmp	.+50     	; 0xc9aa <update_enemy_shots+0xd4>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c978:	95 30       	cpi	r25, 0x05	; 5
    c97a:	61 f4       	brne	.+24     	; 0xc994 <update_enemy_shots+0xbe>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c97c:	d7 01       	movw	r26, r14
    c97e:	8c 93       	st	X, r24
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c980:	40 91 d3 0d 	lds	r20, 0x0DD3
    c984:	50 91 d4 0d 	lds	r21, 0x0DD4
    c988:	e4 17       	cp	r30, r20
    c98a:	f5 07       	cpc	r31, r21
    c98c:	78 f0       	brcs	.+30     	; 0xc9ac <update_enemy_shots+0xd6>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c98e:	81 95       	neg	r24
    c990:	8c 93       	st	X, r24
    c992:	0c c0       	rjmp	.+24     	; 0xc9ac <update_enemy_shots+0xd6>
    c994:	f8 01       	movw	r30, r16
    c996:	35 97       	sbiw	r30, 0x05	; 5
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c998:	80 83       	st	Z, r24
							if (game.player.shared.x <= game.enemies[i].shared.x)
    c99a:	a0 91 d1 0d 	lds	r26, 0x0DD1
    c99e:	b0 91 d2 0d 	lds	r27, 0x0DD2
    c9a2:	4a 17       	cp	r20, r26
    c9a4:	5b 07       	cpc	r21, r27
    c9a6:	10 f0       	brcs	.+4      	; 0xc9ac <update_enemy_shots+0xd6>
							{
								game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c9a8:	81 95       	neg	r24
    c9aa:	80 83       	st	Z, r24
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c9ac:	c5 01       	movw	r24, r10
    c9ae:	03 96       	adiw	r24, 0x03	; 3
    c9b0:	29 83       	std	Y+1, r18	; 0x01
    c9b2:	0e 94 f7 63 	call	0xc7ee	; 0xc7ee <update_basic_shot>
    c9b6:	29 81       	ldd	r18, Y+1	; 0x01
    c9b8:	07 c0       	rjmp	.+14     	; 0xc9c8 <update_enemy_shots+0xf2>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c9ba:	80 81       	ld	r24, Z
    c9bc:	88 23       	and	r24, r24
    c9be:	21 f0       	breq	.+8      	; 0xc9c8 <update_enemy_shots+0xf2>
		{
			game.enemies[i].shot_frame_count++;
    c9c0:	f5 01       	movw	r30, r10
    c9c2:	80 81       	ld	r24, Z
    c9c4:	8f 5f       	subi	r24, 0xFF	; 255
    c9c6:	80 83       	st	Z, r24
    c9c8:	2f 5f       	subi	r18, 0xFF	; 255
    c9ca:	f5 e3       	ldi	r31, 0x35	; 53
    c9cc:	af 0e       	add	r10, r31
    c9ce:	b1 1c       	adc	r11, r1
    c9d0:	0b 5c       	subi	r16, 0xCB	; 203
    c9d2:	1f 4f       	sbci	r17, 0xFF	; 255
    c9d4:	85 e3       	ldi	r24, 0x35	; 53
    c9d6:	e8 0e       	add	r14, r24
    c9d8:	f1 1c       	adc	r15, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c9da:	25 31       	cpi	r18, 0x15	; 21
    c9dc:	09 f0       	breq	.+2      	; 0xc9e0 <update_enemy_shots+0x10a>
    c9de:	96 cf       	rjmp	.-212    	; 0xc90c <update_enemy_shots+0x36>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c9e0:	0f 90       	pop	r0
    c9e2:	df 91       	pop	r29
    c9e4:	cf 91       	pop	r28
    c9e6:	1f 91       	pop	r17
    c9e8:	0f 91       	pop	r16
    c9ea:	ff 90       	pop	r15
    c9ec:	ef 90       	pop	r14
    c9ee:	df 90       	pop	r13
    c9f0:	bf 90       	pop	r11
    c9f2:	af 90       	pop	r10
    c9f4:	9f 90       	pop	r9
    c9f6:	8f 90       	pop	r8
    c9f8:	08 95       	ret

0000c9fa <animate_enemies>:

void animate_enemies()
{
    c9fa:	4f 92       	push	r4
    c9fc:	5f 92       	push	r5
    c9fe:	6f 92       	push	r6
    ca00:	7f 92       	push	r7
    ca02:	8f 92       	push	r8
    ca04:	9f 92       	push	r9
    ca06:	af 92       	push	r10
    ca08:	bf 92       	push	r11
    ca0a:	cf 92       	push	r12
    ca0c:	df 92       	push	r13
    ca0e:	ef 92       	push	r14
    ca10:	ff 92       	push	r15
    ca12:	0f 93       	push	r16
    ca14:	1f 93       	push	r17
    ca16:	cf 93       	push	r28
    ca18:	df 93       	push	r29
    ca1a:	8e ec       	ldi	r24, 0xCE	; 206
    ca1c:	68 2e       	mov	r6, r24
    ca1e:	8e e0       	ldi	r24, 0x0E	; 14
    ca20:	78 2e       	mov	r7, r24
    ca22:	91 ed       	ldi	r25, 0xD1	; 209
    ca24:	a9 2e       	mov	r10, r25
    ca26:	9e e0       	ldi	r25, 0x0E	; 14
    ca28:	b9 2e       	mov	r11, r25
    ca2a:	22 ed       	ldi	r18, 0xD2	; 210
    ca2c:	c2 2e       	mov	r12, r18
    ca2e:	2e e0       	ldi	r18, 0x0E	; 14
    ca30:	d2 2e       	mov	r13, r18
    ca32:	c7 ec       	ldi	r28, 0xC7	; 199
    ca34:	de e0       	ldi	r29, 0x0E	; 14
    ca36:	3f ec       	ldi	r19, 0xCF	; 207
    ca38:	83 2e       	mov	r8, r19
    ca3a:	3e e0       	ldi	r19, 0x0E	; 14
    ca3c:	93 2e       	mov	r9, r19
    ca3e:	41 2c       	mov	r4, r1
    ca40:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    ca42:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    ca44:	40 e1       	ldi	r20, 0x10	; 16
    ca46:	f4 2e       	mov	r15, r20
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    ca48:	f3 01       	movw	r30, r6
    ca4a:	80 81       	ld	r24, Z
    ca4c:	88 23       	and	r24, r24
    ca4e:	09 f4       	brne	.+2      	; 0xca52 <animate_enemies+0x58>
    ca50:	58 c0       	rjmp	.+176    	; 0xcb02 <animate_enemies+0x108>
    ca52:	f4 01       	movw	r30, r8
    ca54:	80 81       	ld	r24, Z
    ca56:	84 fd       	sbrc	r24, 4
    ca58:	54 c0       	rjmp	.+168    	; 0xcb02 <animate_enemies+0x108>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    ca5a:	28 81       	ld	r18, Y
    ca5c:	39 81       	ldd	r19, Y+1	; 0x01
    ca5e:	80 91 b2 0d 	lds	r24, 0x0DB2
    ca62:	90 91 b3 0d 	lds	r25, 0x0DB3
    ca66:	28 17       	cp	r18, r24
    ca68:	39 07       	cpc	r19, r25
    ca6a:	68 f0       	brcs	.+26     	; 0xca86 <animate_enemies+0x8c>
    ca6c:	2a 81       	ldd	r18, Y+2	; 0x02
    ca6e:	3b 81       	ldd	r19, Y+3	; 0x03
    ca70:	80 91 ba 0d 	lds	r24, 0x0DBA
    ca74:	90 e0       	ldi	r25, 0x00	; 0
    ca76:	28 17       	cp	r18, r24
    ca78:	39 07       	cpc	r19, r25
    ca7a:	28 f0       	brcs	.+10     	; 0xca86 <animate_enemies+0x8c>
    ca7c:	88 53       	subi	r24, 0x38	; 56
    ca7e:	9f 4f       	sbci	r25, 0xFF	; 255
    ca80:	82 17       	cp	r24, r18
    ca82:	93 07       	cpc	r25, r19
    ca84:	70 f4       	brcc	.+28     	; 0xcaa2 <animate_enemies+0xa8>
			{
				game.enemies[i].active = 0;
    ca86:	f3 01       	movw	r30, r6
    ca88:	10 82       	st	Z, r1
				game.active_enemies--;
    ca8a:	80 91 cd 0d 	lds	r24, 0x0DCD
    ca8e:	81 50       	subi	r24, 0x01	; 1
    ca90:	80 93 cd 0d 	sts	0x0DCD, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    ca94:	f6 01       	movw	r30, r12
    ca96:	00 81       	ld	r16, Z
    ca98:	f5 01       	movw	r30, r10
    ca9a:	20 81       	ld	r18, Z
    ca9c:	40 e0       	ldi	r20, 0x00	; 0
    ca9e:	60 ee       	ldi	r22, 0xE0	; 224
    caa0:	40 c0       	rjmp	.+128    	; 0xcb22 <animate_enemies+0x128>
    caa2:	c2 01       	movw	r24, r4
    caa4:	8e 54       	subi	r24, 0x4E	; 78
    caa6:	92 4f       	sbci	r25, 0xF2	; 242
    caa8:	fc 01       	movw	r30, r24
    caaa:	ef 5d       	subi	r30, 0xDF	; 223
    caac:	fe 4f       	sbci	r31, 0xFE	; 254
				game.player.shield = 0;
				game.player.flags = EXPLODING;
				return;
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    caae:	20 81       	ld	r18, Z
    cab0:	22 30       	cpi	r18, 0x02	; 2
    cab2:	61 f4       	brne	.+24     	; 0xcacc <animate_enemies+0xd2>
    cab4:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    cab6:	e0 80       	ld	r14, Z
    cab8:	01 e0       	ldi	r16, 0x01	; 1
    caba:	f6 01       	movw	r30, r12
    cabc:	20 81       	ld	r18, Z
    cabe:	f5 01       	movw	r30, r10
    cac0:	40 81       	ld	r20, Z
    cac2:	61 2f       	mov	r22, r17
    cac4:	ce 01       	movw	r24, r28
    cac6:	0e 94 ac 62 	call	0xc558	; 0xc558 <animate_sprite>
    caca:	2e c0       	rjmp	.+92     	; 0xcb28 <animate_enemies+0x12e>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    cacc:	e1 2c       	mov	r14, r1
    cace:	00 e0       	ldi	r16, 0x00	; 0
    cad0:	f6 01       	movw	r30, r12
    cad2:	20 81       	ld	r18, Z
    cad4:	f5 01       	movw	r30, r10
    cad6:	40 81       	ld	r20, Z
    cad8:	61 2f       	mov	r22, r17
    cada:	ce 01       	movw	r24, r28
    cadc:	0e 94 ac 62 	call	0xc558	; 0xc558 <animate_sprite>
    cae0:	82 30       	cpi	r24, 0x02	; 2
    cae2:	10 f1       	brcs	.+68     	; 0xcb28 <animate_enemies+0x12e>
			{
				SFX_ENEMY_EXPLODE;
    cae4:	41 e0       	ldi	r20, 0x01	; 1
    cae6:	6f ef       	ldi	r22, 0xFF	; 255
    cae8:	86 e0       	ldi	r24, 0x06	; 6
    caea:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    caee:	f4 01       	movw	r30, r8
    caf0:	f0 82       	st	Z, r15
				game.enemies[i].active = 0;
    caf2:	f3 01       	movw	r30, r6
    caf4:	10 82       	st	Z, r1
				game.active_enemies--;
    caf6:	80 91 cd 0d 	lds	r24, 0x0DCD
    cafa:	81 50       	subi	r24, 0x01	; 1
    cafc:	80 93 cd 0d 	sts	0x0DCD, r24
    cb00:	13 c0       	rjmp	.+38     	; 0xcb28 <animate_enemies+0x12e>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    cb02:	f4 01       	movw	r30, r8
    cb04:	80 81       	ld	r24, Z
    cb06:	84 ff       	sbrs	r24, 4
    cb08:	0f c0       	rjmp	.+30     	; 0xcb28 <animate_enemies+0x12e>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    cb0a:	4a 81       	ldd	r20, Y+2	; 0x02
    cb0c:	80 91 ba 0d 	lds	r24, 0x0DBA
    cb10:	48 1b       	sub	r20, r24
    cb12:	68 81       	ld	r22, Y
    cb14:	80 91 b2 0d 	lds	r24, 0x0DB2
    cb18:	68 1b       	sub	r22, r24
    cb1a:	f6 01       	movw	r30, r12
    cb1c:	00 81       	ld	r16, Z
    cb1e:	f5 01       	movw	r30, r10
    cb20:	20 81       	ld	r18, Z
    cb22:	81 2f       	mov	r24, r17
    cb24:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    cb28:	f6 01       	movw	r30, r12
    cb2a:	90 81       	ld	r25, Z
    cb2c:	f5 01       	movw	r30, r10
    cb2e:	80 81       	ld	r24, Z
    cb30:	98 9f       	mul	r25, r24
    cb32:	10 0d       	add	r17, r0
    cb34:	11 24       	eor	r1, r1
    cb36:	f5 e3       	ldi	r31, 0x35	; 53
    cb38:	6f 0e       	add	r6, r31
    cb3a:	71 1c       	adc	r7, r1
    cb3c:	85 e3       	ldi	r24, 0x35	; 53
    cb3e:	48 0e       	add	r4, r24
    cb40:	51 1c       	adc	r5, r1
    cb42:	e5 e3       	ldi	r30, 0x35	; 53
    cb44:	ae 0e       	add	r10, r30
    cb46:	b1 1c       	adc	r11, r1
    cb48:	f5 e3       	ldi	r31, 0x35	; 53
    cb4a:	cf 0e       	add	r12, r31
    cb4c:	d1 1c       	adc	r13, r1
    cb4e:	e5 96       	adiw	r28, 0x35	; 53
    cb50:	85 e3       	ldi	r24, 0x35	; 53
    cb52:	88 0e       	add	r8, r24
    cb54:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cb56:	e9 e0       	ldi	r30, 0x09	; 9
    cb58:	4e 16       	cp	r4, r30
    cb5a:	e1 e0       	ldi	r30, 0x01	; 1
    cb5c:	5e 06       	cpc	r5, r30
    cb5e:	09 f0       	breq	.+2      	; 0xcb62 <animate_enemies+0x168>
    cb60:	73 cf       	rjmp	.-282    	; 0xca48 <animate_enemies+0x4e>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    cb62:	df 91       	pop	r29
    cb64:	cf 91       	pop	r28
    cb66:	1f 91       	pop	r17
    cb68:	0f 91       	pop	r16
    cb6a:	ff 90       	pop	r15
    cb6c:	ef 90       	pop	r14
    cb6e:	df 90       	pop	r13
    cb70:	cf 90       	pop	r12
    cb72:	bf 90       	pop	r11
    cb74:	af 90       	pop	r10
    cb76:	9f 90       	pop	r9
    cb78:	8f 90       	pop	r8
    cb7a:	7f 90       	pop	r7
    cb7c:	6f 90       	pop	r6
    cb7e:	5f 90       	pop	r5
    cb80:	4f 90       	pop	r4
    cb82:	08 95       	ret

0000cb84 <animate_enemy_shots>:

void animate_enemy_shots()
{
    cb84:	4f 92       	push	r4
    cb86:	5f 92       	push	r5
    cb88:	6f 92       	push	r6
    cb8a:	7f 92       	push	r7
    cb8c:	8f 92       	push	r8
    cb8e:	9f 92       	push	r9
    cb90:	af 92       	push	r10
    cb92:	cf 92       	push	r12
    cb94:	df 92       	push	r13
    cb96:	ef 92       	push	r14
    cb98:	ff 92       	push	r15
    cb9a:	0f 93       	push	r16
    cb9c:	1f 93       	push	r17
    cb9e:	cf 93       	push	r28
    cba0:	df 93       	push	r29
    cba2:	48 ed       	ldi	r20, 0xD8	; 216
    cba4:	84 2e       	mov	r8, r20
    cba6:	4e e0       	ldi	r20, 0x0E	; 14
    cba8:	94 2e       	mov	r9, r20
    cbaa:	c1 ee       	ldi	r28, 0xE1	; 225
    cbac:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
    cbae:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    cbb0:	50 e1       	ldi	r21, 0x10	; 16
    cbb2:	f5 2e       	mov	r15, r21
    cbb4:	fe 01       	movw	r30, r28
    cbb6:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    cbb8:	80 81       	ld	r24, Z
    cbba:	87 30       	cpi	r24, 0x07	; 7
    cbbc:	09 f0       	breq	.+2      	; 0xcbc0 <animate_enemy_shots+0x3c>
    cbbe:	6c c0       	rjmp	.+216    	; 0xcc98 <animate_enemy_shots+0x114>
			{
				if (game.enemies[i].shot[j].active)
    cbc0:	88 81       	ld	r24, Y
    cbc2:	88 23       	and	r24, r24
    cbc4:	09 f4       	brne	.+2      	; 0xcbc8 <animate_enemy_shots+0x44>
    cbc6:	68 c0       	rjmp	.+208    	; 0xcc98 <animate_enemy_shots+0x114>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    cbc8:	c4 01       	movw	r24, r8
    cbca:	0e 94 98 5e 	call	0xbd30	; 0xbd30 <out_of_bounds>
    cbce:	81 11       	cpse	r24, r1
    cbd0:	3a c0       	rjmp	.+116    	; 0xcc46 <animate_enemy_shots+0xc2>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    cbd2:	41 e0       	ldi	r20, 0x01	; 1
    cbd4:	61 e0       	ldi	r22, 0x01	; 1
    cbd6:	c4 01       	movw	r24, r8
    cbd8:	0e 94 eb 5e 	call	0xbdd6	; 0xbdd6 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    cbdc:	81 11       	cpse	r24, r1
    cbde:	33 c0       	rjmp	.+102    	; 0xcc46 <animate_enemy_shots+0xc2>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    cbe0:	f4 01       	movw	r30, r8
    cbe2:	42 80       	ldd	r4, Z+2	; 0x02
    cbe4:	53 80       	ldd	r5, Z+3	; 0x03
    cbe6:	60 80       	ld	r6, Z
    cbe8:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    cbea:	d0 90 b2 0d 	lds	r13, 0x0DB2
    cbee:	06 2d       	mov	r16, r6
    cbf0:	0d 19       	sub	r16, r13
    cbf2:	20 91 dd 0d 	lds	r18, 0x0DDD
    cbf6:	22 0f       	add	r18, r18
    cbf8:	22 0f       	add	r18, r18
    cbfa:	22 0f       	add	r18, r18
    cbfc:	40 91 dc 0d 	lds	r20, 0x0DDC
    cc00:	44 0f       	add	r20, r20
    cc02:	44 0f       	add	r20, r20
    cc04:	44 0f       	add	r20, r20
    cc06:	80 91 d1 0d 	lds	r24, 0x0DD1
    cc0a:	98 e0       	ldi	r25, 0x08	; 8
    cc0c:	a9 2e       	mov	r10, r25
    cc0e:	38 e0       	ldi	r19, 0x08	; 8
    cc10:	c3 2e       	mov	r12, r19
    cc12:	e4 2c       	mov	r14, r4
    cc14:	60 91 d3 0d 	lds	r22, 0x0DD3
    cc18:	8d 19       	sub	r24, r13
    cc1a:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
    cc1e:	88 23       	and	r24, r24
    cc20:	c1 f0       	breq	.+48     	; 0xcc52 <animate_enemy_shots+0xce>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    cc22:	41 e0       	ldi	r20, 0x01	; 1
    cc24:	6f ef       	ldi	r22, 0xFF	; 255
    cc26:	84 e0       	ldi	r24, 0x04	; 4
    cc28:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
#endif
						if (game.player.shield <= 0)
    cc2c:	80 91 e0 0d 	lds	r24, 0x0DE0
    cc30:	18 16       	cp	r1, r24
    cc32:	4c f0       	brlt	.+18     	; 0xcc46 <animate_enemy_shots+0xc2>
						{
							SFX_PLAYER_EXPLODE;
    cc34:	41 e0       	ldi	r20, 0x01	; 1
    cc36:	6f ef       	ldi	r22, 0xFF	; 255
    cc38:	85 e0       	ldi	r24, 0x05	; 5
    cc3a:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
							game.player.shield = 0;
    cc3e:	10 92 e0 0d 	sts	0x0DE0, r1
							game.player.flags = EXPLODING;
    cc42:	f0 92 d9 0d 	sts	0x0DD9, r15
						}
						game.enemies[i].shot[j].active = 0;
    cc46:	18 82       	st	Y, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    cc48:	01 e0       	ldi	r16, 0x01	; 1
    cc4a:	21 e0       	ldi	r18, 0x01	; 1
    cc4c:	40 e0       	ldi	r20, 0x00	; 0
    cc4e:	60 ee       	ldi	r22, 0xE0	; 224
    cc50:	20 c0       	rjmp	.+64     	; 0xcc92 <animate_enemy_shots+0x10e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    cc52:	00 91 cc 0d 	lds	r16, 0x0DCC
    cc56:	60 2f       	mov	r22, r16
    cc58:	fe 01       	movw	r30, r28
    cc5a:	34 97       	sbiw	r30, 0x04	; 4
    cc5c:	80 81       	ld	r24, Z
    cc5e:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    cc62:	68 0e       	add	r6, r24
    cc64:	79 1e       	adc	r7, r25
    cc66:	f4 01       	movw	r30, r8
    cc68:	71 82       	std	Z+1, r7	; 0x01
    cc6a:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    cc6c:	60 2f       	mov	r22, r16
    cc6e:	fe 01       	movw	r30, r28
    cc70:	35 97       	sbiw	r30, 0x05	; 5
    cc72:	80 81       	ld	r24, Z
    cc74:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    cc78:	48 0e       	add	r4, r24
    cc7a:	59 1e       	adc	r5, r25
    cc7c:	f4 01       	movw	r30, r8
    cc7e:	53 82       	std	Z+3, r5	; 0x03
    cc80:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    cc82:	80 91 ba 0d 	lds	r24, 0x0DBA
    cc86:	44 2d       	mov	r20, r4
    cc88:	48 1b       	sub	r20, r24
    cc8a:	66 2d       	mov	r22, r6
    cc8c:	6d 19       	sub	r22, r13
    cc8e:	01 e0       	ldi	r16, 0x01	; 1
    cc90:	21 e0       	ldi	r18, 0x01	; 1
    cc92:	81 2f       	mov	r24, r17
    cc94:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
					}
				}
			}
			slot += 1;
    cc98:	1f 5f       	subi	r17, 0xFF	; 255
    cc9a:	f5 e3       	ldi	r31, 0x35	; 53
    cc9c:	8f 0e       	add	r8, r31
    cc9e:	91 1c       	adc	r9, r1
    cca0:	e5 96       	adiw	r28, 0x35	; 53

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cca2:	14 31       	cpi	r17, 0x14	; 20
    cca4:	09 f0       	breq	.+2      	; 0xcca8 <animate_enemy_shots+0x124>
    cca6:	86 cf       	rjmp	.-244    	; 0xcbb4 <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    cca8:	df 91       	pop	r29
    ccaa:	cf 91       	pop	r28
    ccac:	1f 91       	pop	r17
    ccae:	0f 91       	pop	r16
    ccb0:	ff 90       	pop	r15
    ccb2:	ef 90       	pop	r14
    ccb4:	df 90       	pop	r13
    ccb6:	cf 90       	pop	r12
    ccb8:	af 90       	pop	r10
    ccba:	9f 90       	pop	r9
    ccbc:	8f 90       	pop	r8
    ccbe:	7f 90       	pop	r7
    ccc0:	6f 90       	pop	r6
    ccc2:	5f 90       	pop	r5
    ccc4:	4f 90       	pop	r4
    ccc6:	08 95       	ret

0000ccc8 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    ccc8:	ef 92       	push	r14
    ccca:	ff 92       	push	r15
    cccc:	0f 93       	push	r16
    ccce:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    ccd0:	c8 2f       	mov	r28, r24
    ccd2:	e6 2e       	mov	r14, r22
    ccd4:	f1 2c       	mov	r15, r1
    ccd6:	e8 0e       	add	r14, r24
    ccd8:	f1 1c       	adc	r15, r1
    ccda:	8c 2f       	mov	r24, r28
    ccdc:	90 e0       	ldi	r25, 0x00	; 0
    ccde:	8e 15       	cp	r24, r14
    cce0:	9f 05       	cpc	r25, r15
    cce2:	7c f4       	brge	.+30     	; 0xcd02 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    cce4:	40 e0       	ldi	r20, 0x00	; 0
    cce6:	6e e3       	ldi	r22, 0x3E	; 62
    cce8:	77 e3       	ldi	r23, 0x37	; 55
    ccea:	8c 2f       	mov	r24, r28
    ccec:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    ccf0:	01 e0       	ldi	r16, 0x01	; 1
    ccf2:	21 e0       	ldi	r18, 0x01	; 1
    ccf4:	40 e0       	ldi	r20, 0x00	; 0
    ccf6:	60 ee       	ldi	r22, 0xE0	; 224
    ccf8:	8c 2f       	mov	r24, r28
    ccfa:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    ccfe:	cf 5f       	subi	r28, 0xFF	; 255
    cd00:	ec cf       	rjmp	.-40     	; 0xccda <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cd02:	cf 91       	pop	r28
    cd04:	0f 91       	pop	r16
    cd06:	ff 90       	pop	r15
    cd08:	ef 90       	pop	r14
    cd0a:	08 95       	ret

0000cd0c <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    cd0c:	61 e0       	ldi	r22, 0x01	; 1
    cd0e:	81 e0       	ldi	r24, 0x01	; 1
    cd10:	0e 94 2d 50 	call	0xa05a	; 0xa05a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cd14:	64 e1       	ldi	r22, 0x14	; 20
    cd16:	80 e0       	ldi	r24, 0x00	; 0
    cd18:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
	LBRotateSprites();
    cd1c:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	ClearVram();
    cd20:	0e 94 e8 40 	call	0x81d0	; 0x81d0 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cd24:	60 e0       	ldi	r22, 0x00	; 0
    cd26:	81 e0       	ldi	r24, 0x01	; 1
    cd28:	0c 94 21 50 	jmp	0xa042	; 0xa042 <FadeIn>

0000cd2c <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    cd2c:	0f 93       	push	r16
    cd2e:	cf 93       	push	r28
    cd30:	df 93       	push	r29
    cd32:	c8 2f       	mov	r28, r24
    cd34:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    cd36:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    cd3a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    cd3e:	8d e1       	ldi	r24, 0x1D	; 29
    cd40:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    cd44:	81 e4       	ldi	r24, 0x41	; 65
    cd46:	97 e3       	ldi	r25, 0x37	; 55
    cd48:	90 93 b1 0c 	sts	0x0CB1, r25
    cd4c:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    cd50:	83 e0       	ldi	r24, 0x03	; 3
    cd52:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    cd56:	82 e0       	ldi	r24, 0x02	; 2
    cd58:	0e 94 1c 5b 	call	0xb638	; 0xb638 <clear_overlay>
	game.current_level_index = index;
    cd5c:	c0 93 c7 0d 	sts	0x0DC7, r28
	game.level_ended = 0;
    cd60:	10 92 cf 0d 	sts	0x0DCF, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cd64:	10 92 4a 0e 	sts	0x0E4A, r1
    cd68:	10 92 49 0e 	sts	0x0E49, r1
	p->pressed = 0;
    cd6c:	10 92 46 0e 	sts	0x0E46, r1
    cd70:	10 92 45 0e 	sts	0x0E45, r1
	p->released = 0;
    cd74:	10 92 48 0e 	sts	0x0E48, r1
    cd78:	10 92 47 0e 	sts	0x0E47, r1
	p->held_cycles = 0;
    cd7c:	10 92 4b 0e 	sts	0x0E4B, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cd80:	10 92 c5 0e 	sts	0x0EC5, r1
    cd84:	10 92 c4 0e 	sts	0x0EC4, r1
	p->pressed = 0;
    cd88:	10 92 c1 0e 	sts	0x0EC1, r1
    cd8c:	10 92 c0 0e 	sts	0x0EC0, r1
	p->released = 0;
    cd90:	10 92 c3 0e 	sts	0x0EC3, r1
    cd94:	10 92 c2 0e 	sts	0x0EC2, r1
	p->held_cycles = 0;
    cd98:	10 92 c6 0e 	sts	0x0EC6, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    cd9c:	8c 2f       	mov	r24, r28
    cd9e:	90 e0       	ldi	r25, 0x00	; 0
    cda0:	8a 30       	cpi	r24, 0x0A	; 10
    cda2:	91 05       	cpc	r25, r1
    cda4:	d8 f4       	brcc	.+54     	; 0xcddc <load_level+0xb0>
    cda6:	fc 01       	movw	r30, r24
    cda8:	e0 5c       	subi	r30, 0xC0	; 192
    cdaa:	ff 4f       	sbci	r31, 0xFF	; 255
    cdac:	0c 94 53 73 	jmp	0xe6a6	; 0xe6a6 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    cdb0:	86 e0       	ldi	r24, 0x06	; 6
    cdb2:	96 e7       	ldi	r25, 0x76	; 118
    cdb4:	11 c0       	rjmp	.+34     	; 0xcdd8 <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    cdb6:	85 e0       	ldi	r24, 0x05	; 5
    cdb8:	95 e7       	ldi	r25, 0x75	; 117
    cdba:	0e c0       	rjmp	.+28     	; 0xcdd8 <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    cdbc:	84 e0       	ldi	r24, 0x04	; 4
    cdbe:	94 e7       	ldi	r25, 0x74	; 116
    cdc0:	0b c0       	rjmp	.+22     	; 0xcdd8 <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    cdc2:	83 e0       	ldi	r24, 0x03	; 3
    cdc4:	93 e7       	ldi	r25, 0x73	; 115
    cdc6:	08 c0       	rjmp	.+16     	; 0xcdd8 <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    cdc8:	81 e0       	ldi	r24, 0x01	; 1
    cdca:	91 e7       	ldi	r25, 0x71	; 113
    cdcc:	05 c0       	rjmp	.+10     	; 0xcdd8 <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    cdce:	82 e0       	ldi	r24, 0x02	; 2
    cdd0:	92 e7       	ldi	r25, 0x72	; 114
    cdd2:	02 c0       	rjmp	.+4      	; 0xcdd8 <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    cdd4:	80 e0       	ldi	r24, 0x00	; 0
    cdd6:	90 e7       	ldi	r25, 0x70	; 112
    cdd8:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <map_level_info>
	}
	game.column_count = 0;
    cddc:	10 92 c3 0d 	sts	0x0DC3, r1
	game.camera_x = get_camera_x(index);
    cde0:	10 92 b3 0d 	sts	0x0DB3, r1
    cde4:	10 92 b2 0d 	sts	0x0DB2, r1
	game.camera_y = get_camera_y(index);
    cde8:	10 92 ba 0d 	sts	0x0DBA, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    cdec:	88 e1       	ldi	r24, 0x18	; 24
    cdee:	90 e0       	ldi	r25, 0x00	; 0
    cdf0:	90 93 d2 0d 	sts	0x0DD2, r25
    cdf4:	80 93 d1 0d 	sts	0x0DD1, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    cdf8:	88 ea       	ldi	r24, 0xA8	; 168
    cdfa:	90 e0       	ldi	r25, 0x00	; 0
    cdfc:	90 93 d4 0d 	sts	0x0DD4, r25
    ce00:	80 93 d3 0d 	sts	0x0DD3, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    ce04:	28 ed       	ldi	r18, 0xD8	; 216
    ce06:	37 e0       	ldi	r19, 0x07	; 7
    ce08:	30 93 4d 0e 	sts	0x0E4D, r19
    ce0c:	20 93 4c 0e 	sts	0x0E4C, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    ce10:	90 93 4f 0e 	sts	0x0E4F, r25
    ce14:	80 93 4e 0e 	sts	0x0E4E, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    ce18:	8d e1       	ldi	r24, 0x1D	; 29
    ce1a:	80 93 bb 0d 	sts	0x0DBB, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    ce1e:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    ce22:	8a e1       	ldi	r24, 0x1A	; 26
    ce24:	80 93 bc 0d 	sts	0x0DBC, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    ce28:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    ce2c:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    ce30:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    ce34:	8a e0       	ldi	r24, 0x0A	; 10
    ce36:	80 93 ce 0d 	sts	0x0DCE, r24
	render_camera_view();
    ce3a:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    ce3e:	40 ef       	ldi	r20, 0xF0	; 240
    ce40:	5a e0       	ldi	r21, 0x0A	; 10
    ce42:	6d e1       	ldi	r22, 0x1D	; 29
    ce44:	80 e0       	ldi	r24, 0x00	; 0
    ce46:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    ce4a:	43 ee       	ldi	r20, 0xE3	; 227
    ce4c:	5a e0       	ldi	r21, 0x0A	; 10
    ce4e:	6d e1       	ldi	r22, 0x1D	; 29
    ce50:	82 e1       	ldi	r24, 0x12	; 18
    ce52:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    ce56:	49 ee       	ldi	r20, 0xE9	; 233
    ce58:	5a e0       	ldi	r21, 0x0A	; 10
    ce5a:	6e e1       	ldi	r22, 0x1E	; 30
    ce5c:	80 e0       	ldi	r24, 0x00	; 0
    ce5e:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    ce62:	48 ef       	ldi	r20, 0xF8	; 248
    ce64:	5a e0       	ldi	r21, 0x0A	; 10
    ce66:	6e e1       	ldi	r22, 0x1E	; 30
    ce68:	81 e1       	ldi	r24, 0x11	; 17
    ce6a:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    ce6e:	42 ea       	ldi	r20, 0xA2	; 162
    ce70:	5a e0       	ldi	r21, 0x0A	; 10
    ce72:	6f e1       	ldi	r22, 0x1F	; 31
    ce74:	81 e1       	ldi	r24, 0x11	; 17
    ce76:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    ce7a:	21 e0       	ldi	r18, 0x01	; 1
    ce7c:	40 91 e0 0d 	lds	r20, 0x0DE0
    ce80:	6d e1       	ldi	r22, 0x1D	; 29
    ce82:	89 e0       	ldi	r24, 0x09	; 9
    ce84:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    ce88:	40 91 b8 0d 	lds	r20, 0x0DB8
    ce8c:	50 91 b9 0d 	lds	r21, 0x0DB9
    ce90:	21 e0       	ldi	r18, 0x01	; 1
    ce92:	6d e1       	ldi	r22, 0x1D	; 29
    ce94:	8b e1       	ldi	r24, 0x1B	; 27
    ce96:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    ce9a:	21 e0       	ldi	r18, 0x01	; 1
    ce9c:	40 91 c5 0d 	lds	r20, 0x0DC5
    cea0:	6e e1       	ldi	r22, 0x1E	; 30
    cea2:	89 e0       	ldi	r24, 0x09	; 9
    cea4:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cea8:	40 91 b6 0d 	lds	r20, 0x0DB6
    ceac:	50 91 b7 0d 	lds	r21, 0x0DB7
    ceb0:	21 e0       	ldi	r18, 0x01	; 1
    ceb2:	6e e1       	ldi	r22, 0x1E	; 30
    ceb4:	8b e1       	ldi	r24, 0x1B	; 27
    ceb6:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    ceba:	40 91 b4 0d 	lds	r20, 0x0DB4
    cebe:	50 91 b5 0d 	lds	r21, 0x0DB5
    cec2:	21 e0       	ldi	r18, 0x01	; 1
    cec4:	6f e1       	ldi	r22, 0x1F	; 31
    cec6:	8b e1       	ldi	r24, 0x1B	; 27
    cec8:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cecc:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    ced0:	81 11       	cpse	r24, r1
    ced2:	39 c0       	rjmp	.+114    	; 0xcf46 <load_level+0x21a>
    ced4:	dd 23       	and	r29, r29
    ced6:	b9 f1       	breq	.+110    	; 0xcf46 <load_level+0x21a>
	{
		map_ship();
    ced8:	0e 94 3f 5d 	call	0xba7e	; 0xba7e <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cedc:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cede:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cee0:	81 e0       	ldi	r24, 0x01	; 1
    cee2:	90 e0       	ldi	r25, 0x00	; 0
    cee4:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cee8:	8c 2f       	mov	r24, r28
    ceea:	90 e0       	ldi	r25, 0x00	; 0
    ceec:	88 3a       	cpi	r24, 0xA8	; 168
    ceee:	91 05       	cpc	r25, r1
    cef0:	74 f0       	brlt	.+28     	; 0xcf0e <load_level+0x1e2>
			{
				LBMapSprite(0, map_hero_idle, 0);
    cef2:	40 e0       	ldi	r20, 0x00	; 0
    cef4:	62 e1       	ldi	r22, 0x12	; 18
    cef6:	77 e3       	ldi	r23, 0x37	; 55
    cef8:	80 e0       	ldi	r24, 0x00	; 0
    cefa:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cefe:	03 e0       	ldi	r16, 0x03	; 3
    cf00:	22 e0       	ldi	r18, 0x02	; 2
    cf02:	48 ea       	ldi	r20, 0xA8	; 168
    cf04:	68 e1       	ldi	r22, 0x18	; 24
    cf06:	80 e0       	ldi	r24, 0x00	; 0
    cf08:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
				ship_increment = -3;
    cf0c:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cf0e:	85 e2       	ldi	r24, 0x25	; 37
    cf10:	9e e0       	ldi	r25, 0x0E	; 14
    cf12:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    cf16:	40 e0       	ldi	r20, 0x00	; 0
    cf18:	bc 01       	movw	r22, r24
    cf1a:	86 e0       	ldi	r24, 0x06	; 6
    cf1c:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cf20:	02 e0       	ldi	r16, 0x02	; 2
    cf22:	24 e0       	ldi	r18, 0x04	; 4
    cf24:	4c 2f       	mov	r20, r28
    cf26:	68 e0       	ldi	r22, 0x08	; 8
    cf28:	86 e0       	ldi	r24, 0x06	; 6
    cf2a:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			ship_y += ship_increment;
    cf2e:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cf30:	39 f4       	brne	.+14     	; 0xcf40 <load_level+0x214>
			{
				clear_sprites(6, 8);
    cf32:	68 e0       	ldi	r22, 0x08	; 8
    cf34:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    cf36:	df 91       	pop	r29
    cf38:	cf 91       	pop	r28
    cf3a:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    cf3c:	0c 94 64 66 	jmp	0xccc8	; 0xccc8 <clear_sprites>
				break;
			}
			LBRotateSprites();
    cf40:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		}
    cf44:	cd cf       	rjmp	.-102    	; 0xcee0 <load_level+0x1b4>
	}
}
    cf46:	df 91       	pop	r29
    cf48:	cf 91       	pop	r28
    cf4a:	0f 91       	pop	r16
    cf4c:	08 95       	ret

0000cf4e <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    cf4e:	0f 93       	push	r16
    cf50:	1f 93       	push	r17
    cf52:	cf 93       	push	r28
    cf54:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    cf56:	18 2f       	mov	r17, r24
    cf58:	c6 2f       	mov	r28, r22
    cf5a:	d0 e0       	ldi	r29, 0x00	; 0
    cf5c:	c8 0f       	add	r28, r24
    cf5e:	d1 1d       	adc	r29, r1
    cf60:	81 2f       	mov	r24, r17
    cf62:	90 e0       	ldi	r25, 0x00	; 0
    cf64:	8c 17       	cp	r24, r28
    cf66:	9d 07       	cpc	r25, r29
    cf68:	4c f4       	brge	.+18     	; 0xcf7c <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cf6a:	01 e0       	ldi	r16, 0x01	; 1
    cf6c:	21 e0       	ldi	r18, 0x01	; 1
    cf6e:	40 e0       	ldi	r20, 0x00	; 0
    cf70:	60 ee       	ldi	r22, 0xE0	; 224
    cf72:	81 2f       	mov	r24, r17
    cf74:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cf78:	1f 5f       	subi	r17, 0xFF	; 255
    cf7a:	f2 cf       	rjmp	.-28     	; 0xcf60 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cf7c:	df 91       	pop	r29
    cf7e:	cf 91       	pop	r28
    cf80:	1f 91       	pop	r17
    cf82:	0f 91       	pop	r16
    cf84:	08 95       	ret

0000cf86 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    cf86:	fc 01       	movw	r30, r24
    cf88:	20 81       	ld	r18, Z
    cf8a:	31 81       	ldd	r19, Z+1	; 0x01
    cf8c:	28 70       	andi	r18, 0x08	; 8
    cf8e:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    cf90:	81 e0       	ldi	r24, 0x01	; 1
    cf92:	23 2b       	or	r18, r19
    cf94:	09 f4       	brne	.+2      	; 0xcf98 <select_pressed+0x12>
    cf96:	80 e0       	ldi	r24, 0x00	; 0
}
    cf98:	08 95       	ret

0000cf9a <stream_text_middle>:


void stream_text_middle(const char* dialogue, u8 y)
{
    cf9a:	ff 92       	push	r15
    cf9c:	0f 93       	push	r16
    cf9e:	1f 93       	push	r17
    cfa0:	cf 93       	push	r28
    cfa2:	df 93       	push	r29
    cfa4:	ec 01       	movw	r28, r24
    cfa6:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    cfa8:	8e e0       	ldi	r24, 0x0E	; 14
    cfaa:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    cfac:	fe 01       	movw	r30, r28
    cfae:	84 91       	lpm	r24, Z
    cfb0:	83 32       	cpi	r24, 0x23	; 35
    cfb2:	21 f1       	breq	.+72     	; 0xcffc <stream_text_middle+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    cfb4:	6f ef       	ldi	r22, 0xFF	; 255
    cfb6:	70 e0       	ldi	r23, 0x00	; 0
    cfb8:	ce 01       	movw	r24, r28
    cfba:	0e 94 e0 74 	call	0xe9c0	; 0xe9c0 <strnlen_P>
		x = 14 - ln / 2;
    cfbe:	86 95       	lsr	r24
    cfc0:	0f 2d       	mov	r16, r15
    cfc2:	08 1b       	sub	r16, r24
    cfc4:	0c 1b       	sub	r16, r28
    cfc6:	8c 2f       	mov	r24, r28
    cfc8:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    cfca:	21 96       	adiw	r28, 0x01	; 1
    cfcc:	fe 01       	movw	r30, r28
    cfce:	31 97       	sbiw	r30, 0x01	; 1
    cfd0:	44 91       	lpm	r20, Z
    cfd2:	44 23       	and	r20, r20
    cfd4:	89 f0       	breq	.+34     	; 0xcff8 <stream_text_middle+0x5e>
		{
			LBPrintChar(x++, y, c);
    cfd6:	61 2f       	mov	r22, r17
    cfd8:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    cfdc:	60 e0       	ldi	r22, 0x00	; 0
    cfde:	85 e4       	ldi	r24, 0x45	; 69
    cfe0:	9e e0       	ldi	r25, 0x0E	; 14
    cfe2:	0e 94 b3 50 	call	0xa166	; 0xa166 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    cfe6:	80 91 49 0e 	lds	r24, 0x0E49
    cfea:	80 fd       	sbrc	r24, 0
    cfec:	ec cf       	rjmp	.-40     	; 0xcfc6 <stream_text_middle+0x2c>
    cfee:	80 e7       	ldi	r24, 0x70	; 112
    cff0:	97 e1       	ldi	r25, 0x17	; 23
    cff2:	0e 94 1e 41 	call	0x823c	; 0x823c <WaitUs>
    cff6:	e7 cf       	rjmp	.-50     	; 0xcfc6 <stream_text_middle+0x2c>
		}
		y++;
    cff8:	1f 5f       	subi	r17, 0xFF	; 255
    cffa:	d8 cf       	rjmp	.-80     	; 0xcfac <stream_text_middle+0x12>
	}
}
    cffc:	df 91       	pop	r29
    cffe:	cf 91       	pop	r28
    d000:	1f 91       	pop	r17
    d002:	0f 91       	pop	r16
    d004:	ff 90       	pop	r15
    d006:	08 95       	ret

0000d008 <stream_text_anywhere>:

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    d008:	ff 92       	push	r15
    d00a:	0f 93       	push	r16
    d00c:	1f 93       	push	r17
    d00e:	cf 93       	push	r28
    d010:	df 93       	push	r29
    d012:	f6 2e       	mov	r15, r22
    d014:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    d016:	fc 01       	movw	r30, r24
    d018:	24 91       	lpm	r18, Z
    d01a:	23 32       	cpi	r18, 0x23	; 35
    d01c:	b1 f0       	breq	.+44     	; 0xd04a <stream_text_anywhere+0x42>
    d01e:	ec 01       	movw	r28, r24
    d020:	0f 2d       	mov	r16, r15
    d022:	08 1b       	sub	r16, r24
    d024:	8c 2f       	mov	r24, r28
    d026:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    d028:	21 96       	adiw	r28, 0x01	; 1
    d02a:	fe 01       	movw	r30, r28
    d02c:	31 97       	sbiw	r30, 0x01	; 1
    d02e:	44 91       	lpm	r20, Z
    d030:	44 23       	and	r20, r20
    d032:	41 f0       	breq	.+16     	; 0xd044 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    d034:	61 2f       	mov	r22, r17
    d036:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    d03a:	80 e7       	ldi	r24, 0x70	; 112
    d03c:	97 e1       	ldi	r25, 0x17	; 23
    d03e:	0e 94 1e 41 	call	0x823c	; 0x823c <WaitUs>
    d042:	f0 cf       	rjmp	.-32     	; 0xd024 <stream_text_anywhere+0x1c>
		}
		y++;
    d044:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    d046:	ce 01       	movw	r24, r28
    d048:	e6 cf       	rjmp	.-52     	; 0xd016 <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    d04a:	df 91       	pop	r29
    d04c:	cf 91       	pop	r28
    d04e:	1f 91       	pop	r17
    d050:	0f 91       	pop	r16
    d052:	ff 90       	pop	r15
    d054:	08 95       	ret

0000d056 <map_particles>:

void map_particles()
{
    d056:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    d058:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    d05a:	40 e0       	ldi	r20, 0x00	; 0
    d05c:	62 e3       	ldi	r22, 0x32	; 50
    d05e:	77 e3       	ldi	r23, 0x37	; 55
    d060:	8c 2f       	mov	r24, r28
    d062:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    d066:	cf 5f       	subi	r28, 0xFF	; 255
    d068:	c4 31       	cpi	r28, 0x14	; 20
    d06a:	b9 f7       	brne	.-18     	; 0xd05a <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    d06c:	cf 91       	pop	r28
    d06e:	08 95       	ret

0000d070 <place_particles>:

void place_particles()
{
    d070:	0f 93       	push	r16
    d072:	1f 93       	push	r17
    d074:	cf 93       	push	r28
    d076:	df 93       	push	r29
    d078:	1f 92       	push	r1
    d07a:	cd b7       	in	r28, 0x3d	; 61
    d07c:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    d07e:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    d080:	68 ec       	ldi	r22, 0xC8	; 200
    d082:	80 e0       	ldi	r24, 0x00	; 0
    d084:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    d088:	48 2f       	mov	r20, r24
    d08a:	60 ee       	ldi	r22, 0xE0	; 224
    d08c:	80 e0       	ldi	r24, 0x00	; 0
    d08e:	49 83       	std	Y+1, r20	; 0x01
    d090:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    d094:	68 2f       	mov	r22, r24
    d096:	01 e0       	ldi	r16, 0x01	; 1
    d098:	21 e0       	ldi	r18, 0x01	; 1
    d09a:	49 81       	ldd	r20, Y+1	; 0x01
    d09c:	81 2f       	mov	r24, r17
    d09e:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    d0a2:	1f 5f       	subi	r17, 0xFF	; 255
    d0a4:	14 31       	cpi	r17, 0x14	; 20
    d0a6:	61 f7       	brne	.-40     	; 0xd080 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    d0a8:	0f 90       	pop	r0
    d0aa:	df 91       	pop	r29
    d0ac:	cf 91       	pop	r28
    d0ae:	1f 91       	pop	r17
    d0b0:	0f 91       	pop	r16
    d0b2:	08 95       	ret

0000d0b4 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    d0b4:	ef 92       	push	r14
    d0b6:	ff 92       	push	r15
    d0b8:	0f 93       	push	r16
    d0ba:	1f 93       	push	r17
    d0bc:	cf 93       	push	r28
    d0be:	df 93       	push	r29
    d0c0:	d8 2f       	mov	r29, r24
    d0c2:	16 2f       	mov	r17, r22
    d0c4:	81 e0       	ldi	r24, 0x01	; 1
    d0c6:	e8 2e       	mov	r14, r24
    d0c8:	80 e1       	ldi	r24, 0x10	; 16
    d0ca:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    d0cc:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    d0ce:	f7 01       	movw	r30, r14
    d0d0:	40 81       	ld	r20, Z
    d0d2:	4d 0f       	add	r20, r29
    d0d4:	01 e0       	ldi	r16, 0x01	; 1
    d0d6:	21 e0       	ldi	r18, 0x01	; 1
    d0d8:	31 97       	sbiw	r30, 0x01	; 1
    d0da:	60 81       	ld	r22, Z
    d0dc:	8c 2f       	mov	r24, r28
    d0de:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    d0e2:	f7 01       	movw	r30, r14
    d0e4:	80 81       	ld	r24, Z
    d0e6:	89 3c       	cpi	r24, 0xC9	; 201
    d0e8:	50 f0       	brcs	.+20     	; 0xd0fe <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    d0ea:	60 ee       	ldi	r22, 0xE0	; 224
    d0ec:	80 e0       	ldi	r24, 0x00	; 0
    d0ee:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    d0f2:	21 e0       	ldi	r18, 0x01	; 1
    d0f4:	41 2f       	mov	r20, r17
    d0f6:	68 2f       	mov	r22, r24
    d0f8:	8c 2f       	mov	r24, r28
    d0fa:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    d0fe:	cf 5f       	subi	r28, 0xFF	; 255
    d100:	f4 e0       	ldi	r31, 0x04	; 4
    d102:	ef 0e       	add	r14, r31
    d104:	f1 1c       	adc	r15, r1
    d106:	c4 31       	cpi	r28, 0x14	; 20
    d108:	11 f7       	brne	.-60     	; 0xd0ce <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    d10a:	df 91       	pop	r29
    d10c:	cf 91       	pop	r28
    d10e:	1f 91       	pop	r17
    d110:	0f 91       	pop	r16
    d112:	ff 90       	pop	r15
    d114:	ef 90       	pop	r14
    d116:	08 95       	ret

0000d118 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    d118:	82 50       	subi	r24, 0x02	; 2
    d11a:	87 30       	cpi	r24, 0x07	; 7
    d11c:	48 f4       	brcc	.+18     	; 0xd130 <get_emarald_map+0x18>
    d11e:	e8 2f       	mov	r30, r24
    d120:	f0 e0       	ldi	r31, 0x00	; 0
    d122:	ee 0f       	add	r30, r30
    d124:	ff 1f       	adc	r31, r31
    d126:	ee 5f       	subi	r30, 0xFE	; 254
    d128:	fa 4f       	sbci	r31, 0xFA	; 250
    d12a:	80 81       	ld	r24, Z
    d12c:	91 81       	ldd	r25, Z+1	; 0x01
    d12e:	08 95       	ret
    d130:	86 e2       	ldi	r24, 0x26	; 38
    d132:	97 e3       	ldi	r25, 0x37	; 55
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    d134:	08 95       	ret

0000d136 <music_transition>:

void music_transition()
{
	if (is_space())
    d136:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    d13a:	88 23       	and	r24, r24
    d13c:	19 f0       	breq	.+6      	; 0xd144 <music_transition+0xe>
	{
		StartSong(spacesong);
    d13e:	87 e2       	ldi	r24, 0x27	; 39
    d140:	9b e0       	ldi	r25, 0x0B	; 11
    d142:	06 c0       	rjmp	.+12     	; 0xd150 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    d144:	80 91 c7 0d 	lds	r24, 0x0DC7
    d148:	88 23       	and	r24, r24
    d14a:	21 f0       	breq	.+8      	; 0xd154 <music_transition+0x1e>
	{
		StartSong(planetsong);
    d14c:	87 ec       	ldi	r24, 0xC7	; 199
    d14e:	91 e1       	ldi	r25, 0x11	; 17
    d150:	0c 94 dc 43 	jmp	0x87b8	; 0x87b8 <StartSong>
    d154:	08 95       	ret

0000d156 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d156:	cf 92       	push	r12
    d158:	df 92       	push	r13
    d15a:	ef 92       	push	r14
    d15c:	ff 92       	push	r15
    d15e:	0f 93       	push	r16
    d160:	1f 93       	push	r17
    d162:	cf 93       	push	r28
    d164:	df 93       	push	r29
    d166:	1f 92       	push	r1
    d168:	cd b7       	in	r28, 0x3d	; 61
    d16a:	de b7       	in	r29, 0x3e	; 62
    d16c:	c8 2e       	mov	r12, r24
    d16e:	e6 2e       	mov	r14, r22
    d170:	12 2f       	mov	r17, r18
    d172:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    d174:	49 83       	std	Y+1, r20	; 0x01
    d176:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <fade_through>
	Screen.scrollX = 0;
    d17a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d17e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d182:	80 e2       	ldi	r24, 0x20	; 32
    d184:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d188:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    d18c:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    d190:	10 92 be 0d 	sts	0x0DBE, r1
	map_particles();
    d194:	0e 94 2b 68 	call	0xd056	; 0xd056 <map_particles>
	map_ship();
    d198:	0e 94 3f 5d 	call	0xba7e	; 0xba7e <map_ship>
	place_particles();
    d19c:	0e 94 38 68 	call	0xd070	; 0xd070 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    d1a0:	48 e6       	ldi	r20, 0x68	; 104
    d1a2:	5f e5       	ldi	r21, 0x5F	; 95
    d1a4:	69 81       	ldd	r22, Y+1	; 0x01
    d1a6:	80 e0       	ldi	r24, 0x00	; 0
    d1a8:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	game.current_level_index = index;
    d1ac:	c0 92 c7 0d 	sts	0x0DC7, r12
	music_transition();
    d1b0:	0e 94 9b 68 	call	0xd136	; 0xd136 <music_transition>
	if (!is_space())
    d1b4:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    d1b8:	81 11       	cpse	r24, r1
    d1ba:	0f c0       	rjmp	.+30     	; 0xd1da <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    d1bc:	8c 2d       	mov	r24, r12
    d1be:	0e 94 8c 68 	call	0xd118	; 0xd118 <get_emarald_map>
    d1c2:	40 e0       	ldi	r20, 0x00	; 0
    d1c4:	bc 01       	movw	r22, r24
    d1c6:	88 e0       	ldi	r24, 0x08	; 8
    d1c8:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    d1cc:	01 e0       	ldi	r16, 0x01	; 1
    d1ce:	21 e0       	ldi	r18, 0x01	; 1
    d1d0:	40 e3       	ldi	r20, 0x30	; 48
    d1d2:	60 e7       	ldi	r22, 0x70	; 112
    d1d4:	88 e0       	ldi	r24, 0x08	; 8
    d1d6:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d1da:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    d1dc:	81 e0       	ldi	r24, 0x01	; 1
    d1de:	90 e0       	ldi	r25, 0x00	; 0
    d1e0:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    d1e4:	85 e2       	ldi	r24, 0x25	; 37
    d1e6:	9e e0       	ldi	r25, 0x0E	; 14
    d1e8:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    d1ec:	40 e0       	ldi	r20, 0x00	; 0
    d1ee:	bc 01       	movw	r22, r24
    d1f0:	80 e0       	ldi	r24, 0x00	; 0
    d1f2:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    d1f6:	02 e0       	ldi	r16, 0x02	; 2
    d1f8:	24 e0       	ldi	r18, 0x04	; 4
    d1fa:	48 e6       	ldi	r20, 0x68	; 104
    d1fc:	68 e6       	ldi	r22, 0x68	; 104
    d1fe:	80 e0       	ldi	r24, 0x00	; 0
    d200:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		frame_counter++;
    d204:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    d206:	8d 2d       	mov	r24, r13
    d208:	8f 70       	andi	r24, 0x0F	; 15
    d20a:	29 f4       	brne	.+10     	; 0xd216 <planet_transition+0xc0>
    d20c:	90 91 b3 0c 	lds	r25, 0x0CB3
    d210:	9e 0d       	add	r25, r14
    d212:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    d216:	6f 2d       	mov	r22, r15
    d218:	81 2f       	mov	r24, r17
    d21a:	0e 94 5a 68 	call	0xd0b4	; 0xd0b4 <animate_particles>
		LBRotateSprites();
    d21e:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    d222:	8f ef       	ldi	r24, 0xFF	; 255
    d224:	d8 12       	cpse	r13, r24
    d226:	da cf       	rjmp	.-76     	; 0xd1dc <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    d228:	82 e0       	ldi	r24, 0x02	; 2
    d22a:	80 93 c6 0d 	sts	0x0DC6, r24
	ClearVram();
    d22e:	0e 94 e8 40 	call	0x81d0	; 0x81d0 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d232:	64 e1       	ldi	r22, 0x14	; 20
    d234:	80 e0       	ldi	r24, 0x00	; 0
    d236:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
	LBRotateSprites();
    d23a:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	fade_through();
    d23e:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <fade_through>
	game.level_score = 0;
    d242:	10 92 b7 0d 	sts	0x0DB7, r1
    d246:	10 92 b6 0d 	sts	0x0DB6, r1
	load_level(index, true);
    d24a:	61 e0       	ldi	r22, 0x01	; 1
    d24c:	8c 2d       	mov	r24, r12
    d24e:	0e 94 96 66 	call	0xcd2c	; 0xcd2c <load_level>
	init_player_state();
    d252:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    d256:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
}
    d25a:	0f 90       	pop	r0
    d25c:	df 91       	pop	r29
    d25e:	cf 91       	pop	r28
    d260:	1f 91       	pop	r17
    d262:	0f 91       	pop	r16
    d264:	ff 90       	pop	r15
    d266:	ef 90       	pop	r14
    d268:	df 90       	pop	r13
    d26a:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d26c:	0c 94 d1 52 	jmp	0xa5a2	; 0xa5a2 <init_enemy_state>

0000d270 <intro>:
}


void intro()
{
    d270:	0f 93       	push	r16
	fade_through();
    d272:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <fade_through>
	game.lives = LIVES;
    d276:	e2 eb       	ldi	r30, 0xB2	; 178
    d278:	fd e0       	ldi	r31, 0x0D	; 13
    d27a:	85 e0       	ldi	r24, 0x05	; 5
    d27c:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d27e:	13 82       	std	Z+3, r1	; 0x03
    d280:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d282:	15 82       	std	Z+5, r1	; 0x05
    d284:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d286:	17 82       	std	Z+7, r1	; 0x07
    d288:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    d28a:	87 ec       	ldi	r24, 0xC7	; 199
    d28c:	91 e1       	ldi	r25, 0x11	; 17
    d28e:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    d292:	40 e0       	ldi	r20, 0x00	; 0
    d294:	66 e2       	ldi	r22, 0x26	; 38
    d296:	77 e3       	ldi	r23, 0x37	; 55
    d298:	80 e0       	ldi	r24, 0x00	; 0
    d29a:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    d29e:	01 e0       	ldi	r16, 0x01	; 1
    d2a0:	21 e0       	ldi	r18, 0x01	; 1
    d2a2:	40 e3       	ldi	r20, 0x30	; 48
    d2a4:	60 e5       	ldi	r22, 0x50	; 80
    d2a6:	80 e0       	ldi	r24, 0x00	; 0
    d2a8:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d2ac:	40 e0       	ldi	r20, 0x00	; 0
    d2ae:	63 e2       	ldi	r22, 0x23	; 35
    d2b0:	77 e3       	ldi	r23, 0x37	; 55
    d2b2:	81 e0       	ldi	r24, 0x01	; 1
    d2b4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    d2b8:	21 e0       	ldi	r18, 0x01	; 1
    d2ba:	40 e3       	ldi	r20, 0x30	; 48
    d2bc:	60 e6       	ldi	r22, 0x60	; 96
    d2be:	81 e0       	ldi	r24, 0x01	; 1
    d2c0:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    d2c4:	40 e0       	ldi	r20, 0x00	; 0
    d2c6:	60 e2       	ldi	r22, 0x20	; 32
    d2c8:	77 e3       	ldi	r23, 0x37	; 55
    d2ca:	82 e0       	ldi	r24, 0x02	; 2
    d2cc:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    d2d0:	21 e0       	ldi	r18, 0x01	; 1
    d2d2:	40 e3       	ldi	r20, 0x30	; 48
    d2d4:	60 e7       	ldi	r22, 0x70	; 112
    d2d6:	82 e0       	ldi	r24, 0x02	; 2
    d2d8:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    d2dc:	40 e0       	ldi	r20, 0x00	; 0
    d2de:	6d e1       	ldi	r22, 0x1D	; 29
    d2e0:	77 e3       	ldi	r23, 0x37	; 55
    d2e2:	83 e0       	ldi	r24, 0x03	; 3
    d2e4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    d2e8:	21 e0       	ldi	r18, 0x01	; 1
    d2ea:	40 e3       	ldi	r20, 0x30	; 48
    d2ec:	60 e8       	ldi	r22, 0x80	; 128
    d2ee:	83 e0       	ldi	r24, 0x03	; 3
    d2f0:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    d2f4:	40 e0       	ldi	r20, 0x00	; 0
    d2f6:	6a e1       	ldi	r22, 0x1A	; 26
    d2f8:	77 e3       	ldi	r23, 0x37	; 55
    d2fa:	84 e0       	ldi	r24, 0x04	; 4
    d2fc:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    d300:	21 e0       	ldi	r18, 0x01	; 1
    d302:	40 e3       	ldi	r20, 0x30	; 48
    d304:	60 e9       	ldi	r22, 0x90	; 144
    d306:	84 e0       	ldi	r24, 0x04	; 4
    d308:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBRotateSprites();
    d30c:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	stream_text_middle((const char*) strIntro, 12);
    d310:	6c e0       	ldi	r22, 0x0C	; 12
    d312:	83 e0       	ldi	r24, 0x03	; 3
    d314:	9a e0       	ldi	r25, 0x0A	; 10
    d316:	0e 94 cd 67 	call	0xcf9a	; 0xcf9a <stream_text_middle>
	LBWaitSeconds(1);
    d31a:	81 e0       	ldi	r24, 0x01	; 1
    d31c:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    d320:	07 ec       	ldi	r16, 0xC7	; 199
    d322:	2d ef       	ldi	r18, 0xFD	; 253
    d324:	4c e1       	ldi	r20, 0x1C	; 28
    d326:	61 e0       	ldi	r22, 0x01	; 1
    d328:	80 e0       	ldi	r24, 0x00	; 0
    d32a:	0e 94 ab 68 	call	0xd156	; 0xd156 <planet_transition>
}
    d32e:	0f 91       	pop	r16
    d330:	08 95       	ret

0000d332 <load_splash>:

void load_splash()
{
	fade_through();
    d332:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <fade_through>
	Screen.scrollX = 0;
    d336:	ef ea       	ldi	r30, 0xAF	; 175
    d338:	fc e0       	ldi	r31, 0x0C	; 12
    d33a:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d33c:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d33e:	80 e2       	ldi	r24, 0x20	; 32
    d340:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d342:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d344:	e2 eb       	ldi	r30, 0xB2	; 178
    d346:	fd e0       	ldi	r31, 0x0D	; 13
    d348:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    d34a:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d34c:	64 e1       	ldi	r22, 0x14	; 20
    d34e:	80 e0       	ldi	r24, 0x00	; 0
    d350:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
	LBRotateSprites();
    d354:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d358:	4c e0       	ldi	r20, 0x0C	; 12
    d35a:	5b e0       	ldi	r21, 0x0B	; 11
    d35c:	6f e0       	ldi	r22, 0x0F	; 15
    d35e:	88 e0       	ldi	r24, 0x08	; 8
    d360:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d364:	40 e0       	ldi	r20, 0x00	; 0
    d366:	5b e0       	ldi	r21, 0x0B	; 11
    d368:	60 e1       	ldi	r22, 0x10	; 16
    d36a:	88 e0       	ldi	r24, 0x08	; 8
    d36c:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d370:	42 e1       	ldi	r20, 0x12	; 18
    d372:	5b e0       	ldi	r21, 0x0B	; 11
    d374:	65 e1       	ldi	r22, 0x15	; 21
    d376:	84 e0       	ldi	r24, 0x04	; 4
    d378:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	DrawMap2(6, 5, map_splash);
    d37c:	4d e8       	ldi	r20, 0x8D	; 141
    d37e:	50 e6       	ldi	r21, 0x60	; 96
    d380:	65 e0       	ldi	r22, 0x05	; 5
    d382:	86 e0       	ldi	r24, 0x06	; 6
    d384:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d388:	40 e0       	ldi	r20, 0x00	; 0
    d38a:	6b e3       	ldi	r22, 0x3B	; 59
    d38c:	77 e3       	ldi	r23, 0x37	; 55
    d38e:	80 e0       	ldi	r24, 0x00	; 0
    d390:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000d394 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d394:	2f 92       	push	r2
    d396:	3f 92       	push	r3
    d398:	5f 92       	push	r5
    d39a:	6f 92       	push	r6
    d39c:	7f 92       	push	r7
    d39e:	8f 92       	push	r8
    d3a0:	9f 92       	push	r9
    d3a2:	af 92       	push	r10
    d3a4:	bf 92       	push	r11
    d3a6:	cf 92       	push	r12
    d3a8:	df 92       	push	r13
    d3aa:	ef 92       	push	r14
    d3ac:	ff 92       	push	r15
    d3ae:	0f 93       	push	r16
    d3b0:	1f 93       	push	r17
    d3b2:	cf 93       	push	r28
    d3b4:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d3b6:	81 e0       	ldi	r24, 0x01	; 1
    d3b8:	80 93 c6 0d 	sts	0x0DC6, r24
	game.high_score_index = -1;
    d3bc:	8f ef       	ldi	r24, 0xFF	; 255
    d3be:	80 93 c4 0d 	sts	0x0DC4, r24
	fade_through();
    d3c2:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <fade_through>
	Screen.scrollX = 0;
    d3c6:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d3ca:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d3ce:	80 e2       	ldi	r24, 0x20	; 32
    d3d0:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d3d4:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    d3d8:	82 e9       	ldi	r24, 0x92	; 146
    d3da:	9d e0       	ldi	r25, 0x0D	; 13
    d3dc:	0e 94 0a 5b 	call	0xb614	; 0xb614 <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d3e0:	40 e0       	ldi	r20, 0x00	; 0
    d3e2:	5b e0       	ldi	r21, 0x0B	; 11
    d3e4:	63 e0       	ldi	r22, 0x03	; 3
    d3e6:	89 e0       	ldi	r24, 0x09	; 9
    d3e8:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d3ec:	40 e0       	ldi	r20, 0x00	; 0
    d3ee:	66 e2       	ldi	r22, 0x26	; 38
    d3f0:	77 e3       	ldi	r23, 0x37	; 55
    d3f2:	80 e0       	ldi	r24, 0x00	; 0
    d3f4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d3f8:	40 e0       	ldi	r20, 0x00	; 0
    d3fa:	63 e2       	ldi	r22, 0x23	; 35
    d3fc:	77 e3       	ldi	r23, 0x37	; 55
    d3fe:	81 e0       	ldi	r24, 0x01	; 1
    d400:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d404:	01 e0       	ldi	r16, 0x01	; 1
    d406:	21 e0       	ldi	r18, 0x01	; 1
    d408:	48 e1       	ldi	r20, 0x18	; 24
    d40a:	68 e3       	ldi	r22, 0x38	; 56
    d40c:	80 e0       	ldi	r24, 0x00	; 0
    d40e:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d412:	21 e0       	ldi	r18, 0x01	; 1
    d414:	48 e1       	ldi	r20, 0x18	; 24
    d416:	68 ea       	ldi	r22, 0xA8	; 168
    d418:	81 e0       	ldi	r24, 0x01	; 1
    d41a:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    d41e:	84 e9       	ldi	r24, 0x94	; 148
    d420:	a8 2e       	mov	r10, r24
    d422:	8d e0       	ldi	r24, 0x0D	; 13
    d424:	b8 2e       	mov	r11, r24
    d426:	95 e9       	ldi	r25, 0x95	; 149
    d428:	c9 2e       	mov	r12, r25
    d42a:	9d e0       	ldi	r25, 0x0D	; 13
    d42c:	d9 2e       	mov	r13, r25
    d42e:	26 e9       	ldi	r18, 0x96	; 150
    d430:	82 2e       	mov	r8, r18
    d432:	2d e0       	ldi	r18, 0x0D	; 13
    d434:	92 2e       	mov	r9, r18
    d436:	74 01       	movw	r14, r8
    d438:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d43a:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d43c:	35 e0       	ldi	r19, 0x05	; 5
    d43e:	53 2e       	mov	r5, r19
    d440:	4d ea       	ldi	r20, 0xAD	; 173
    d442:	64 2e       	mov	r6, r20
    d444:	4d e0       	ldi	r20, 0x0D	; 13
    d446:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d448:	11 e4       	ldi	r17, 0x41	; 65
    d44a:	0e 2d       	mov	r16, r14
    d44c:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d44e:	80 2f       	mov	r24, r16
    d450:	65 2d       	mov	r22, r5
    d452:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    d456:	41 e0       	ldi	r20, 0x01	; 1
    d458:	48 0f       	add	r20, r24
    d45a:	20 e0       	ldi	r18, 0x00	; 0
    d45c:	6c 2f       	mov	r22, r28
    d45e:	89 e0       	ldi	r24, 0x09	; 9
    d460:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d464:	40 e2       	ldi	r20, 0x20	; 32
    d466:	6c 2f       	mov	r22, r28
    d468:	8a e0       	ldi	r24, 0x0A	; 10
    d46a:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d46e:	f5 01       	movw	r30, r10
    d470:	40 81       	ld	r20, Z
    d472:	6c 2f       	mov	r22, r28
    d474:	8b e0       	ldi	r24, 0x0B	; 11
    d476:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d47a:	f6 01       	movw	r30, r12
    d47c:	40 81       	ld	r20, Z
    d47e:	6c 2f       	mov	r22, r28
    d480:	8c e0       	ldi	r24, 0x0C	; 12
    d482:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d486:	f7 01       	movw	r30, r14
    d488:	40 81       	ld	r20, Z
    d48a:	6c 2f       	mov	r22, r28
    d48c:	8d e0       	ldi	r24, 0x0D	; 13
    d48e:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d492:	40 e2       	ldi	r20, 0x20	; 32
    d494:	6c 2f       	mov	r22, r28
    d496:	8e e0       	ldi	r24, 0x0E	; 14
    d498:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d49c:	f7 01       	movw	r30, r14
    d49e:	21 80       	ldd	r2, Z+1	; 0x01
    d4a0:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d4a2:	21 e0       	ldi	r18, 0x01	; 1
    d4a4:	a1 01       	movw	r20, r2
    d4a6:	6c 2f       	mov	r22, r28
    d4a8:	83 e1       	ldi	r24, 0x13	; 19
    d4aa:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    d4ae:	20 91 b4 0d 	lds	r18, 0x0DB4
    d4b2:	30 91 b5 0d 	lds	r19, 0x0DB5
    d4b6:	22 16       	cp	r2, r18
    d4b8:	33 06       	cpc	r3, r19
    d4ba:	08 f0       	brcs	.+2      	; 0xd4be <load_high_scores+0x12a>
    d4bc:	55 c0       	rjmp	.+170    	; 0xd568 <load_high_scores+0x1d4>
    d4be:	80 91 c4 0d 	lds	r24, 0x0DC4
    d4c2:	8f 3f       	cpi	r24, 0xFF	; 255
    d4c4:	09 f0       	breq	.+2      	; 0xd4c8 <load_high_scores+0x134>
    d4c6:	50 c0       	rjmp	.+160    	; 0xd568 <load_high_scores+0x1d4>
    d4c8:	ad ea       	ldi	r26, 0xAD	; 173
    d4ca:	bd e0       	ldi	r27, 0x0D	; 13
    d4cc:	cd 01       	movw	r24, r26
    d4ce:	05 97       	sbiw	r24, 0x05	; 5
    d4d0:	4e e1       	ldi	r20, 0x1E	; 30
    d4d2:	48 0f       	add	r20, r24
    d4d4:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d4d6:	04 17       	cp	r16, r20
    d4d8:	40 f4       	brcc	.+16     	; 0xd4ea <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d4da:	fc 01       	movw	r30, r24
    d4dc:	45 2d       	mov	r20, r5
    d4de:	01 90       	ld	r0, Z+
    d4e0:	0d 92       	st	X+, r0
    d4e2:	4a 95       	dec	r20
    d4e4:	e1 f7       	brne	.-8      	; 0xd4de <load_high_scores+0x14a>
    d4e6:	dc 01       	movw	r26, r24
    d4e8:	f1 cf       	rjmp	.-30     	; 0xd4cc <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    d4ea:	f5 01       	movw	r30, r10
    d4ec:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d4ee:	f6 01       	movw	r30, r12
    d4f0:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d4f2:	f7 01       	movw	r30, r14
    d4f4:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d4f6:	32 83       	std	Z+2, r19	; 0x02
    d4f8:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d4fa:	f5 01       	movw	r30, r10
    d4fc:	40 81       	ld	r20, Z
    d4fe:	6c 2f       	mov	r22, r28
    d500:	8b e0       	ldi	r24, 0x0B	; 11
    d502:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d506:	f6 01       	movw	r30, r12
    d508:	40 81       	ld	r20, Z
    d50a:	6c 2f       	mov	r22, r28
    d50c:	8c e0       	ldi	r24, 0x0C	; 12
    d50e:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d512:	f7 01       	movw	r30, r14
    d514:	40 81       	ld	r20, Z
    d516:	6c 2f       	mov	r22, r28
    d518:	8d e0       	ldi	r24, 0x0D	; 13
    d51a:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d51e:	40 91 b4 0d 	lds	r20, 0x0DB4
    d522:	50 91 b5 0d 	lds	r21, 0x0DB5
    d526:	21 e0       	ldi	r18, 0x01	; 1
    d528:	6c 2f       	mov	r22, r28
    d52a:	83 e1       	ldi	r24, 0x13	; 19
    d52c:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
			game.high_score_index = i;
    d530:	00 93 c4 0d 	sts	0x0DC4, r16
			LBMapSprite(2, map_down_arrow, 0);
    d534:	40 e0       	ldi	r20, 0x00	; 0
    d536:	68 e3       	ldi	r22, 0x38	; 56
    d538:	77 e3       	ldi	r23, 0x37	; 55
    d53a:	82 e0       	ldi	r24, 0x02	; 2
    d53c:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d540:	40 e0       	ldi	r20, 0x00	; 0
    d542:	65 e3       	ldi	r22, 0x35	; 53
    d544:	77 e3       	ldi	r23, 0x37	; 55
    d546:	83 e0       	ldi	r24, 0x03	; 3
    d548:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d54c:	01 e0       	ldi	r16, 0x01	; 1
    d54e:	21 e0       	ldi	r18, 0x01	; 1
    d550:	4d 2f       	mov	r20, r29
    d552:	68 e5       	ldi	r22, 0x58	; 88
    d554:	82 e0       	ldi	r24, 0x02	; 2
    d556:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d55a:	21 e0       	ldi	r18, 0x01	; 1
    d55c:	40 e1       	ldi	r20, 0x10	; 16
    d55e:	4d 0f       	add	r20, r29
    d560:	68 e5       	ldi	r22, 0x58	; 88
    d562:	83 e0       	ldi	r24, 0x03	; 3
    d564:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		}
		
		ypos += 2;
    d568:	ce 5f       	subi	r28, 0xFE	; 254
    d56a:	f5 e0       	ldi	r31, 0x05	; 5
    d56c:	af 0e       	add	r10, r31
    d56e:	b1 1c       	adc	r11, r1
    d570:	85 e0       	ldi	r24, 0x05	; 5
    d572:	c8 0e       	add	r12, r24
    d574:	d1 1c       	adc	r13, r1
    d576:	e5 e0       	ldi	r30, 0x05	; 5
    d578:	ee 0e       	add	r14, r30
    d57a:	f1 1c       	adc	r15, r1
    d57c:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d57e:	c3 31       	cpi	r28, 0x13	; 19
    d580:	09 f0       	breq	.+2      	; 0xd584 <load_high_scores+0x1f0>
    d582:	63 cf       	rjmp	.-314    	; 0xd44a <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d584:	47 ed       	ldi	r20, 0xD7	; 215
    d586:	5a e0       	ldi	r21, 0x0A	; 10
    d588:	66 e1       	ldi	r22, 0x16	; 22
    d58a:	89 e0       	ldi	r24, 0x09	; 9
}
    d58c:	df 91       	pop	r29
    d58e:	cf 91       	pop	r28
    d590:	1f 91       	pop	r17
    d592:	0f 91       	pop	r16
    d594:	ff 90       	pop	r15
    d596:	ef 90       	pop	r14
    d598:	df 90       	pop	r13
    d59a:	cf 90       	pop	r12
    d59c:	bf 90       	pop	r11
    d59e:	af 90       	pop	r10
    d5a0:	9f 90       	pop	r9
    d5a2:	8f 90       	pop	r8
    d5a4:	7f 90       	pop	r7
    d5a6:	6f 90       	pop	r6
    d5a8:	5f 90       	pop	r5
    d5aa:	3f 90       	pop	r3
    d5ac:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d5ae:	0c 94 1e 51 	jmp	0xa23c	; 0xa23c <LBPrint>

0000d5b2 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d5b2:	64 e1       	ldi	r22, 0x14	; 20
    d5b4:	80 e0       	ldi	r24, 0x00	; 0
    d5b6:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
	LBRotateSprites();
    d5ba:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	init_player_state();
    d5be:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    d5c2:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
    d5c6:	0e 94 d1 52 	call	0xa5a2	; 0xa5a2 <init_enemy_state>
	StopSong();
    d5ca:	0e 94 05 44 	call	0x880a	; 0x880a <StopSong>
	load_high_scores();
    d5ce:	0c 94 ca 69 	jmp	0xd394	; 0xd394 <load_high_scores>

0000d5d2 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d5d2:	0f 93       	push	r16
    d5d4:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d5d6:	80 91 45 0e 	lds	r24, 0x0E45
    d5da:	c0 91 cb 0d 	lds	r28, 0x0DCB
    d5de:	85 ff       	sbrs	r24, 5
    d5e0:	06 c0       	rjmp	.+12     	; 0xd5ee <update_splash+0x1c>
    d5e2:	c1 11       	cpse	r28, r1
    d5e4:	04 c0       	rjmp	.+8      	; 0xd5ee <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d5e6:	81 e0       	ldi	r24, 0x01	; 1
    d5e8:	80 93 cb 0d 	sts	0x0DCB, r24
    d5ec:	06 c0       	rjmp	.+12     	; 0xd5fa <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d5ee:	84 ff       	sbrs	r24, 4
    d5f0:	0a c0       	rjmp	.+20     	; 0xd606 <update_splash+0x34>
    d5f2:	c1 30       	cpi	r28, 0x01	; 1
    d5f4:	41 f4       	brne	.+16     	; 0xd606 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    d5f6:	10 92 cb 0d 	sts	0x0DCB, r1
		SFX_NAVIGATE;
    d5fa:	41 e0       	ldi	r20, 0x01	; 1
    d5fc:	6f ef       	ldi	r22, 0xFF	; 255
    d5fe:	82 e0       	ldi	r24, 0x02	; 2
    d600:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
    d604:	1c c0       	rjmp	.+56     	; 0xd63e <update_splash+0x6c>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d606:	85 e4       	ldi	r24, 0x45	; 69
    d608:	9e e0       	ldi	r25, 0x0E	; 14
    d60a:	0e 94 c3 67 	call	0xcf86	; 0xcf86 <select_pressed>
    d60e:	88 23       	and	r24, r24
    d610:	b1 f0       	breq	.+44     	; 0xd63e <update_splash+0x6c>
    d612:	c1 11       	cpse	r28, r1
    d614:	09 c0       	rjmp	.+18     	; 0xd628 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    d616:	41 e0       	ldi	r20, 0x01	; 1
    d618:	6f ef       	ldi	r22, 0xFF	; 255
    d61a:	82 e0       	ldi	r24, 0x02	; 2
    d61c:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d620:	cf 91       	pop	r28
    d622:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d624:	0c 94 38 69 	jmp	0xd270	; 0xd270 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d628:	c1 30       	cpi	r28, 0x01	; 1
    d62a:	49 f4       	brne	.+18     	; 0xd63e <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    d62c:	41 e0       	ldi	r20, 0x01	; 1
    d62e:	6f ef       	ldi	r22, 0xFF	; 255
    d630:	82 e0       	ldi	r24, 0x02	; 2
    d632:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d636:	cf 91       	pop	r28
    d638:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d63a:	0c 94 ca 69 	jmp	0xd394	; 0xd394 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    d63e:	80 91 cb 0d 	lds	r24, 0x0DCB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d642:	01 e0       	ldi	r16, 0x01	; 1
    d644:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    d646:	81 11       	cpse	r24, r1
    d648:	03 c0       	rjmp	.+6      	; 0xd650 <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d64a:	48 e7       	ldi	r20, 0x78	; 120
    d64c:	68 e3       	ldi	r22, 0x38	; 56
    d64e:	03 c0       	rjmp	.+6      	; 0xd656 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d650:	40 e8       	ldi	r20, 0x80	; 128
    d652:	68 e3       	ldi	r22, 0x38	; 56
    d654:	80 e0       	ldi	r24, 0x00	; 0
    d656:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}
    d65a:	cf 91       	pop	r28
    d65c:	0f 91       	pop	r16
    d65e:	08 95       	ret

0000d660 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    d660:	0f 93       	push	r16
	if (game.player.controls.pressed & BTN_X)
    d662:	80 91 45 0e 	lds	r24, 0x0E45
    d666:	90 91 46 0e 	lds	r25, 0x0E46
    d66a:	91 ff       	sbrs	r25, 1
    d66c:	12 c0       	rjmp	.+36     	; 0xd692 <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    d66e:	41 e0       	ldi	r20, 0x01	; 1
    d670:	6f ef       	ldi	r22, 0xFF	; 255
    d672:	82 e0       	ldi	r24, 0x02	; 2
    d674:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
		game.high_score_index = -1;
    d678:	8f ef       	ldi	r24, 0xFF	; 255
    d67a:	80 93 c4 0d 	sts	0x0DC4, r24
		game.score = 0;
    d67e:	10 92 b5 0d 	sts	0x0DB5, r1
    d682:	10 92 b4 0d 	sts	0x0DB4, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d686:	82 e9       	ldi	r24, 0x92	; 146
    d688:	9d e0       	ldi	r25, 0x0D	; 13
    d68a:	0e 94 63 42 	call	0x84c6	; 0x84c6 <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    d68e:	0e 94 99 69 	call	0xd332	; 0xd332 <load_splash>
	}
	
	if (game.high_score_index != -1)
    d692:	30 91 c4 0d 	lds	r19, 0x0DC4
    d696:	3f 3f       	cpi	r19, 0xFF	; 255
    d698:	09 f4       	brne	.+2      	; 0xd69c <update_high_scores+0x3c>
    d69a:	7e c0       	rjmp	.+252    	; 0xd798 <update_high_scores+0x138>
	{
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d69c:	20 91 45 0e 	lds	r18, 0x0E45
    d6a0:	27 ff       	sbrs	r18, 7
    d6a2:	1e c0       	rjmp	.+60     	; 0xd6e0 <update_high_scores+0x80>
    d6a4:	83 2f       	mov	r24, r19
    d6a6:	65 e0       	ldi	r22, 0x05	; 5
    d6a8:	0e 94 1d 73 	call	0xe63a	; 0xe63a <__divmodqi4>
    d6ac:	92 30       	cpi	r25, 0x02	; 2
    d6ae:	c1 f0       	breq	.+48     	; 0xd6e0 <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    d6b0:	41 e0       	ldi	r20, 0x01	; 1
    d6b2:	6f ef       	ldi	r22, 0xFF	; 255
    d6b4:	82 e0       	ldi	r24, 0x02	; 2
    d6b6:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
			game.high_score_index++;
    d6ba:	80 91 c4 0d 	lds	r24, 0x0DC4
    d6be:	8f 5f       	subi	r24, 0xFF	; 255
    d6c0:	80 93 c4 0d 	sts	0x0DC4, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d6c4:	60 91 e4 0f 	lds	r22, 0x0FE4
    d6c8:	68 5f       	subi	r22, 0xF8	; 248
    d6ca:	01 e0       	ldi	r16, 0x01	; 1
    d6cc:	21 e0       	ldi	r18, 0x01	; 1
    d6ce:	40 91 e5 0f 	lds	r20, 0x0FE5
    d6d2:	82 e0       	ldi	r24, 0x02	; 2
    d6d4:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d6d8:	60 91 e8 0f 	lds	r22, 0x0FE8
    d6dc:	68 5f       	subi	r22, 0xF8	; 248
    d6de:	1f c0       	rjmp	.+62     	; 0xd71e <update_high_scores+0xbe>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d6e0:	26 ff       	sbrs	r18, 6
    d6e2:	24 c0       	rjmp	.+72     	; 0xd72c <update_high_scores+0xcc>
    d6e4:	83 2f       	mov	r24, r19
    d6e6:	65 e0       	ldi	r22, 0x05	; 5
    d6e8:	0e 94 1d 73 	call	0xe63a	; 0xe63a <__divmodqi4>
    d6ec:	99 23       	and	r25, r25
    d6ee:	f1 f0       	breq	.+60     	; 0xd72c <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    d6f0:	41 e0       	ldi	r20, 0x01	; 1
    d6f2:	6f ef       	ldi	r22, 0xFF	; 255
    d6f4:	82 e0       	ldi	r24, 0x02	; 2
    d6f6:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
			game.high_score_index--;
    d6fa:	80 91 c4 0d 	lds	r24, 0x0DC4
    d6fe:	81 50       	subi	r24, 0x01	; 1
    d700:	80 93 c4 0d 	sts	0x0DC4, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d704:	60 91 e4 0f 	lds	r22, 0x0FE4
    d708:	68 50       	subi	r22, 0x08	; 8
    d70a:	01 e0       	ldi	r16, 0x01	; 1
    d70c:	21 e0       	ldi	r18, 0x01	; 1
    d70e:	40 91 e5 0f 	lds	r20, 0x0FE5
    d712:	82 e0       	ldi	r24, 0x02	; 2
    d714:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d718:	60 91 e8 0f 	lds	r22, 0x0FE8
    d71c:	68 50       	subi	r22, 0x08	; 8
    d71e:	21 e0       	ldi	r18, 0x01	; 1
    d720:	40 91 e9 0f 	lds	r20, 0x0FE9
    d724:	83 e0       	ldi	r24, 0x03	; 3
    d726:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    d72a:	36 c0       	rjmp	.+108    	; 0xd798 <update_high_scores+0x138>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d72c:	24 ff       	sbrs	r18, 4
    d72e:	13 c0       	rjmp	.+38     	; 0xd756 <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    d730:	41 e0       	ldi	r20, 0x01	; 1
    d732:	6f ef       	ldi	r22, 0xFF	; 255
    d734:	82 e0       	ldi	r24, 0x02	; 2
    d736:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d73a:	80 91 c4 0d 	lds	r24, 0x0DC4
    d73e:	e8 2f       	mov	r30, r24
    d740:	ff 27       	eor	r31, r31
    d742:	e7 fd       	sbrc	r30, 7
    d744:	f0 95       	com	r31
    d746:	ee 56       	subi	r30, 0x6E	; 110
    d748:	f2 4f       	sbci	r31, 0xF2	; 242
    d74a:	92 81       	ldd	r25, Z+2	; 0x02
    d74c:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d74e:	91 34       	cpi	r25, 0x41	; 65
    d750:	b0 f4       	brcc	.+44     	; 0xd77e <update_high_scores+0x11e>
    d752:	91 e4       	ldi	r25, 0x41	; 65
    d754:	14 c0       	rjmp	.+40     	; 0xd77e <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d756:	25 ff       	sbrs	r18, 5
    d758:	1f c0       	rjmp	.+62     	; 0xd798 <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    d75a:	41 e0       	ldi	r20, 0x01	; 1
    d75c:	6f ef       	ldi	r22, 0xFF	; 255
    d75e:	82 e0       	ldi	r24, 0x02	; 2
    d760:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d764:	80 91 c4 0d 	lds	r24, 0x0DC4
    d768:	e8 2f       	mov	r30, r24
    d76a:	ff 27       	eor	r31, r31
    d76c:	e7 fd       	sbrc	r30, 7
    d76e:	f0 95       	com	r31
    d770:	ee 56       	subi	r30, 0x6E	; 110
    d772:	f2 4f       	sbci	r31, 0xF2	; 242
    d774:	92 81       	ldd	r25, Z+2	; 0x02
    d776:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d778:	9b 35       	cpi	r25, 0x5B	; 91
    d77a:	08 f0       	brcs	.+2      	; 0xd77e <update_high_scores+0x11e>
    d77c:	9a e5       	ldi	r25, 0x5A	; 90
    d77e:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d780:	65 e0       	ldi	r22, 0x05	; 5
    d782:	0e 94 1d 73 	call	0xe63a	; 0xe63a <__divmodqi4>
    d786:	68 2f       	mov	r22, r24
    d788:	66 0f       	add	r22, r22
    d78a:	69 5f       	subi	r22, 0xF9	; 249
    d78c:	42 81       	ldd	r20, Z+2	; 0x02
    d78e:	8b e0       	ldi	r24, 0x0B	; 11
    d790:	89 0f       	add	r24, r25
		}
	}
}
    d792:	0f 91       	pop	r16
		else if (game.player.controls.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d794:	0c 94 fe 50 	jmp	0xa1fc	; 0xa1fc <LBPrintChar>
		}
	}
}
    d798:	0f 91       	pop	r16
    d79a:	08 95       	ret

0000d79c <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d79c:	2f 92       	push	r2
    d79e:	3f 92       	push	r3
    d7a0:	4f 92       	push	r4
    d7a2:	5f 92       	push	r5
    d7a4:	6f 92       	push	r6
    d7a6:	7f 92       	push	r7
    d7a8:	8f 92       	push	r8
    d7aa:	9f 92       	push	r9
    d7ac:	af 92       	push	r10
    d7ae:	bf 92       	push	r11
    d7b0:	cf 92       	push	r12
    d7b2:	df 92       	push	r13
    d7b4:	ef 92       	push	r14
    d7b6:	ff 92       	push	r15
    d7b8:	0f 93       	push	r16
    d7ba:	1f 93       	push	r17
    d7bc:	cf 93       	push	r28
    d7be:	df 93       	push	r29
    d7c0:	7c 01       	movw	r14, r24
    d7c2:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d7c4:	c0 91 b2 0c 	lds	r28, 0x0CB2
    d7c8:	c6 95       	lsr	r28
    d7ca:	c6 95       	lsr	r28
    d7cc:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d7ce:	00 91 b3 0c 	lds	r16, 0x0CB3
    d7d2:	06 95       	lsr	r16
    d7d4:	06 95       	lsr	r16
    d7d6:	06 95       	lsr	r16
	u16 tally = game.score;
    d7d8:	a0 90 b4 0d 	lds	r10, 0x0DB4
    d7dc:	b0 90 b5 0d 	lds	r11, 0x0DB5
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d7e0:	64 e1       	ldi	r22, 0x14	; 20
    d7e2:	80 e0       	ldi	r24, 0x00	; 0
    d7e4:	0e 94 a7 67 	call	0xcf4e	; 0xcf4e <hide_sprites>
	LBRotateSprites();
    d7e8:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	
	StopSong();
    d7ec:	0e 94 05 44 	call	0x880a	; 0x880a <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d7f0:	10 e0       	ldi	r17, 0x00	; 0
    d7f2:	d0 e0       	ldi	r29, 0x00	; 0
    d7f4:	c8 01       	movw	r24, r16
    d7f6:	06 96       	adiw	r24, 0x06	; 6
    d7f8:	2e e1       	ldi	r18, 0x1E	; 30
    d7fa:	82 2e       	mov	r8, r18
    d7fc:	91 2c       	mov	r9, r1
    d7fe:	b4 01       	movw	r22, r8
    d800:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    d804:	9e 01       	movw	r18, r28
    d806:	28 5f       	subi	r18, 0xF8	; 248
    d808:	3f 4f       	sbci	r19, 0xFF	; 255
    d80a:	44 e0       	ldi	r20, 0x04	; 4
    d80c:	50 e6       	ldi	r21, 0x60	; 96
    d80e:	68 2f       	mov	r22, r24
    d810:	82 2f       	mov	r24, r18
    d812:	8f 71       	andi	r24, 0x1F	; 31
    d814:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d818:	c8 01       	movw	r24, r16
    d81a:	07 96       	adiw	r24, 0x07	; 7
    d81c:	b4 01       	movw	r22, r8
    d81e:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    d822:	9e 01       	movw	r18, r28
    d824:	26 5f       	subi	r18, 0xF6	; 246
    d826:	3f 4f       	sbci	r19, 0xFF	; 255
    d828:	a7 01       	movw	r20, r14
    d82a:	68 2f       	mov	r22, r24
    d82c:	82 2f       	mov	r24, r18
    d82e:	8f 71       	andi	r24, 0x1F	; 31
    d830:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d834:	c8 01       	movw	r24, r16
    d836:	09 96       	adiw	r24, 0x09	; 9
    d838:	b4 01       	movw	r22, r8
    d83a:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    d83e:	48 2e       	mov	r4, r24
    d840:	78 2e       	mov	r7, r24
    d842:	7e 01       	movw	r14, r28
    d844:	29 e0       	ldi	r18, 0x09	; 9
    d846:	e2 0e       	add	r14, r18
    d848:	f1 1c       	adc	r15, r1
    d84a:	8f e1       	ldi	r24, 0x1F	; 31
    d84c:	e8 22       	and	r14, r24
    d84e:	ff 24       	eor	r15, r15
    d850:	42 ea       	ldi	r20, 0xA2	; 162
    d852:	5a e0       	ldi	r21, 0x0A	; 10
    d854:	64 2d       	mov	r22, r4
    d856:	8e 2d       	mov	r24, r14
    d858:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d85c:	c8 01       	movw	r24, r16
    d85e:	0b 96       	adiw	r24, 0x0b	; 11
    d860:	b4 01       	movw	r22, r8
    d862:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    d866:	38 2e       	mov	r3, r24
    d868:	68 2e       	mov	r6, r24
    d86a:	48 ef       	ldi	r20, 0xF8	; 248
    d86c:	5a e0       	ldi	r21, 0x0A	; 10
    d86e:	68 2f       	mov	r22, r24
    d870:	8e 2d       	mov	r24, r14
    d872:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d876:	c8 01       	movw	r24, r16
    d878:	0c 96       	adiw	r24, 0x0c	; 12
    d87a:	b4 01       	movw	r22, r8
    d87c:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    d880:	58 2e       	mov	r5, r24
    d882:	f8 2e       	mov	r15, r24
    d884:	43 ee       	ldi	r20, 0xE3	; 227
    d886:	5a e0       	ldi	r21, 0x0A	; 10
    d888:	68 2f       	mov	r22, r24
    d88a:	8e 2d       	mov	r24, r14
    d88c:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d890:	c8 01       	movw	r24, r16
    d892:	0d 96       	adiw	r24, 0x0d	; 13
    d894:	b4 01       	movw	r22, r8
    d896:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    d89a:	18 2f       	mov	r17, r24
    d89c:	28 2e       	mov	r2, r24
    d89e:	43 eb       	ldi	r20, 0xB3	; 179
    d8a0:	5a e0       	ldi	r21, 0x0A	; 10
    d8a2:	68 2f       	mov	r22, r24
    d8a4:	8e 2d       	mov	r24, r14
    d8a6:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d8aa:	64 96       	adiw	r28, 0x14	; 20
    d8ac:	cf 71       	andi	r28, 0x1F	; 31
    d8ae:	dd 27       	eor	r29, r29
    d8b0:	ec 2e       	mov	r14, r28
    d8b2:	21 e0       	ldi	r18, 0x01	; 1
    d8b4:	a5 01       	movw	r20, r10
    d8b6:	64 2d       	mov	r22, r4
    d8b8:	8c 2f       	mov	r24, r28
    d8ba:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d8be:	40 91 b6 0d 	lds	r20, 0x0DB6
    d8c2:	50 91 b7 0d 	lds	r21, 0x0DB7
    d8c6:	21 e0       	ldi	r18, 0x01	; 1
    d8c8:	63 2d       	mov	r22, r3
    d8ca:	8c 2f       	mov	r24, r28
    d8cc:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d8d0:	40 91 b8 0d 	lds	r20, 0x0DB8
    d8d4:	50 91 b9 0d 	lds	r21, 0x0DB9
    d8d8:	21 e0       	ldi	r18, 0x01	; 1
    d8da:	65 2d       	mov	r22, r5
    d8dc:	8c 2f       	mov	r24, r28
    d8de:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d8e2:	21 e0       	ldi	r18, 0x01	; 1
    d8e4:	a6 01       	movw	r20, r12
    d8e6:	61 2f       	mov	r22, r17
    d8e8:	8c 2f       	mov	r24, r28
    d8ea:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	LBWaitSeconds(2);
    d8ee:	82 e0       	ldi	r24, 0x02	; 2
    d8f0:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d8f4:	80 90 b6 0d 	lds	r8, 0x0DB6
    d8f8:	90 90 b7 0d 	lds	r9, 0x0DB7
    d8fc:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d8fe:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d900:	20 97       	sbiw	r28, 0x00	; 0
    d902:	e9 f0       	breq	.+58     	; 0xd93e <tally_score+0x1a2>
	{
		WaitVsync(1);
    d904:	81 e0       	ldi	r24, 0x01	; 1
    d906:	90 e0       	ldi	r25, 0x00	; 0
    d908:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		SFX_HIT;
    d90c:	41 e0       	ldi	r20, 0x01	; 1
    d90e:	6f ef       	ldi	r22, 0xFF	; 255
    d910:	84 e0       	ldi	r24, 0x04	; 4
    d912:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
		tally += 1;
    d916:	0f 5f       	subi	r16, 0xFF	; 255
    d918:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d91a:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d91c:	21 e0       	ldi	r18, 0x01	; 1
    d91e:	a8 01       	movw	r20, r16
    d920:	67 2d       	mov	r22, r7
    d922:	8e 2d       	mov	r24, r14
    d924:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d928:	21 e0       	ldi	r18, 0x01	; 1
    d92a:	ae 01       	movw	r20, r28
    d92c:	66 2d       	mov	r22, r6
    d92e:	8e 2d       	mov	r24, r14
    d930:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d934:	8c ed       	ldi	r24, 0xDC	; 220
    d936:	95 e0       	ldi	r25, 0x05	; 5
    d938:	0e 94 1e 41 	call	0x823c	; 0x823c <WaitUs>
    d93c:	e1 cf       	rjmp	.-62     	; 0xd900 <tally_score+0x164>
    d93e:	a8 0c       	add	r10, r8
    d940:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d942:	c0 91 b8 0d 	lds	r28, 0x0DB8
    d946:	d0 91 b9 0d 	lds	r29, 0x0DB9
	while (counter > 0)
    d94a:	20 97       	sbiw	r28, 0x00	; 0
    d94c:	31 f1       	breq	.+76     	; 0xd99a <tally_score+0x1fe>
	{
		WaitVsync(1);
    d94e:	81 e0       	ldi	r24, 0x01	; 1
    d950:	90 e0       	ldi	r25, 0x00	; 0
    d952:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		SFX_HIT;
    d956:	41 e0       	ldi	r20, 0x01	; 1
    d958:	6f ef       	ldi	r22, 0xFF	; 255
    d95a:	84 e0       	ldi	r24, 0x04	; 4
    d95c:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d960:	c5 01       	movw	r24, r10
    d962:	02 97       	sbiw	r24, 0x02	; 2
    d964:	8e 3f       	cpi	r24, 0xFE	; 254
    d966:	9f 4f       	sbci	r25, 0xFF	; 255
    d968:	20 f4       	brcc	.+8      	; 0xd972 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d96a:	81 e0       	ldi	r24, 0x01	; 1
    d96c:	a8 1a       	sub	r10, r24
    d96e:	b1 08       	sbc	r11, r1
    d970:	02 c0       	rjmp	.+4      	; 0xd976 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d972:	a1 2c       	mov	r10, r1
    d974:	b1 2c       	mov	r11, r1
		counter -= 1;
    d976:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d978:	21 e0       	ldi	r18, 0x01	; 1
    d97a:	a5 01       	movw	r20, r10
    d97c:	67 2d       	mov	r22, r7
    d97e:	8e 2d       	mov	r24, r14
    d980:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d984:	21 e0       	ldi	r18, 0x01	; 1
    d986:	ae 01       	movw	r20, r28
    d988:	6f 2d       	mov	r22, r15
    d98a:	8e 2d       	mov	r24, r14
    d98c:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d990:	8c ed       	ldi	r24, 0xDC	; 220
    d992:	95 e0       	ldi	r25, 0x05	; 5
    d994:	0e 94 1e 41 	call	0x823c	; 0x823c <WaitUs>
    d998:	d8 cf       	rjmp	.-80     	; 0xd94a <tally_score+0x1ae>
    d99a:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d99c:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d99e:	20 97       	sbiw	r28, 0x00	; 0
    d9a0:	e9 f0       	breq	.+58     	; 0xd9dc <tally_score+0x240>
	{
		WaitVsync(1);
    d9a2:	81 e0       	ldi	r24, 0x01	; 1
    d9a4:	90 e0       	ldi	r25, 0x00	; 0
    d9a6:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		SFX_HIT;
    d9aa:	41 e0       	ldi	r20, 0x01	; 1
    d9ac:	6f ef       	ldi	r22, 0xFF	; 255
    d9ae:	84 e0       	ldi	r24, 0x04	; 4
    d9b0:	0e 94 c7 44 	call	0x898e	; 0x898e <TriggerFx>
		tally += 1;
    d9b4:	0f 5f       	subi	r16, 0xFF	; 255
    d9b6:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d9b8:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d9ba:	21 e0       	ldi	r18, 0x01	; 1
    d9bc:	a8 01       	movw	r20, r16
    d9be:	67 2d       	mov	r22, r7
    d9c0:	8e 2d       	mov	r24, r14
    d9c2:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d9c6:	21 e0       	ldi	r18, 0x01	; 1
    d9c8:	ae 01       	movw	r20, r28
    d9ca:	62 2d       	mov	r22, r2
    d9cc:	8e 2d       	mov	r24, r14
    d9ce:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d9d2:	8c ed       	ldi	r24, 0xDC	; 220
    d9d4:	95 e0       	ldi	r25, 0x05	; 5
    d9d6:	0e 94 1e 41 	call	0x823c	; 0x823c <WaitUs>
    d9da:	e1 cf       	rjmp	.-62     	; 0xd99e <tally_score+0x202>
    d9dc:	ac 0c       	add	r10, r12
    d9de:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d9e0:	b0 92 b5 0d 	sts	0x0DB5, r11
    d9e4:	a0 92 b4 0d 	sts	0x0DB4, r10
	game.time = 0;
    d9e8:	10 92 b9 0d 	sts	0x0DB9, r1
    d9ec:	10 92 b8 0d 	sts	0x0DB8, r1
	LBWaitSeconds(2);
    d9f0:	82 e0       	ldi	r24, 0x02	; 2
}
    d9f2:	df 91       	pop	r29
    d9f4:	cf 91       	pop	r28
    d9f6:	1f 91       	pop	r17
    d9f8:	0f 91       	pop	r16
    d9fa:	ff 90       	pop	r15
    d9fc:	ef 90       	pop	r14
    d9fe:	df 90       	pop	r13
    da00:	cf 90       	pop	r12
    da02:	bf 90       	pop	r11
    da04:	af 90       	pop	r10
    da06:	9f 90       	pop	r9
    da08:	8f 90       	pop	r8
    da0a:	7f 90       	pop	r7
    da0c:	6f 90       	pop	r6
    da0e:	5f 90       	pop	r5
    da10:	4f 90       	pop	r4
    da12:	3f 90       	pop	r3
    da14:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    da16:	0c 94 e4 51 	jmp	0xa3c8	; 0xa3c8 <LBWaitSeconds>

0000da1a <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    da1a:	cf 93       	push	r28
	if (player == &game.boss) {
    da1c:	8c 54       	subi	r24, 0x4C	; 76
    da1e:	9e 40       	sbci	r25, 0x0E	; 14
    da20:	29 f4       	brne	.+10     	; 0xda2c <handle_player_death+0x12>
		game.level_ended = 1;
    da22:	81 e0       	ldi	r24, 0x01	; 1
    da24:	80 93 cf 0d 	sts	0x0DCF, r24
		return 1;
    da28:	c1 e0       	ldi	r28, 0x01	; 1
    da2a:	34 c0       	rjmp	.+104    	; 0xda94 <handle_player_death+0x7a>
	}
	game.lives--;
    da2c:	80 91 c5 0d 	lds	r24, 0x0DC5
    da30:	81 50       	subi	r24, 0x01	; 1
    da32:	80 93 c5 0d 	sts	0x0DC5, r24
	clear_sprites(0, 6);
    da36:	66 e0       	ldi	r22, 0x06	; 6
    da38:	80 e0       	ldi	r24, 0x00	; 0
    da3a:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
	LBRotateSprites();
    da3e:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	if (game.lives == 0)
    da42:	c0 91 c5 0d 	lds	r28, 0x0DC5
    da46:	c1 11       	cpse	r28, r1
    da48:	09 c0       	rjmp	.+18     	; 0xda5c <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    da4a:	60 e0       	ldi	r22, 0x00	; 0
    da4c:	70 e0       	ldi	r23, 0x00	; 0
    da4e:	89 ea       	ldi	r24, 0xA9	; 169
    da50:	9a e0       	ldi	r25, 0x0A	; 10
    da52:	0e 94 ce 6b 	call	0xd79c	; 0xd79c <tally_score>
		exit_game();
    da56:	0e 94 d9 6a 	call	0xd5b2	; 0xd5b2 <exit_game>
    da5a:	1c c0       	rjmp	.+56     	; 0xda94 <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    da5c:	61 e0       	ldi	r22, 0x01	; 1
    da5e:	81 e0       	ldi	r24, 0x01	; 1
    da60:	0e 94 2d 50 	call	0xa05a	; 0xa05a <FadeOut>
	ClearVram();
    da64:	0e 94 e8 40 	call	0x81d0	; 0x81d0 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    da68:	64 e1       	ldi	r22, 0x14	; 20
    da6a:	80 e0       	ldi	r24, 0x00	; 0
    da6c:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
	LBRotateSprites();
    da70:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    da74:	60 e0       	ldi	r22, 0x00	; 0
    da76:	81 e0       	ldi	r24, 0x01	; 1
    da78:	0e 94 21 50 	call	0xa042	; 0xa042 <FadeIn>
	init_player_state();
    da7c:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    da80:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
    da84:	0e 94 d1 52 	call	0xa5a2	; 0xa5a2 <init_enemy_state>
	load_level(game.current_level_index, false);
    da88:	60 e0       	ldi	r22, 0x00	; 0
    da8a:	80 91 c7 0d 	lds	r24, 0x0DC7
    da8e:	0e 94 96 66 	call	0xcd2c	; 0xcd2c <load_level>
	return 0;
    da92:	c0 e0       	ldi	r28, 0x00	; 0
}
    da94:	8c 2f       	mov	r24, r28
    da96:	cf 91       	pop	r28
    da98:	08 95       	ret

0000da9a <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    da9a:	ef 92       	push	r14
    da9c:	ff 92       	push	r15
    da9e:	0f 93       	push	r16
    daa0:	1f 93       	push	r17
    daa2:	cf 93       	push	r28
    daa4:	df 93       	push	r29
    daa6:	1f 92       	push	r1
    daa8:	cd b7       	in	r28, 0x3d	; 61
    daaa:	de b7       	in	r29, 0x3e	; 62
    daac:	7c 01       	movw	r14, r24
    daae:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	if (player->flags & EXPLODING)
    dab0:	fc 01       	movw	r30, r24
    dab2:	00 85       	ldd	r16, Z+8	; 0x08
    dab4:	04 ff       	sbrs	r16, 4
    dab6:	16 c0       	rjmp	.+44     	; 0xdae4 <update_player+0x4a>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    dab8:	04 85       	ldd	r16, Z+12	; 0x0c
    daba:	23 85       	ldd	r18, Z+11	; 0x0b
    dabc:	46 2f       	mov	r20, r22
    dabe:	bc 01       	movw	r22, r24
    dac0:	64 59       	subi	r22, 0x94	; 148
    dac2:	7f 4f       	sbci	r23, 0xFF	; 255
    dac4:	08 96       	adiw	r24, 0x08	; 8
    dac6:	0e 94 61 62 	call	0xc4c2	; 0xc4c2 <map_explosion>
    daca:	88 23       	and	r24, r24
    dacc:	09 f4       	brne	.+2      	; 0xdad0 <update_player+0x36>
    dace:	04 c2       	rjmp	.+1032   	; 0xded8 <update_player+0x43e>
		{
			return handle_player_death(player);
    dad0:	c7 01       	movw	r24, r14
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    dad2:	0f 90       	pop	r0
    dad4:	df 91       	pop	r29
    dad6:	cf 91       	pop	r28
    dad8:	1f 91       	pop	r17
    dada:	0f 91       	pop	r16
    dadc:	ff 90       	pop	r15
    dade:	ef 90       	pop	r14
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    dae0:	0c 94 0d 6d 	jmp	0xda1a	; 0xda1a <handle_player_death>
		}
	}
	else if (is_space())
    dae4:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    dae8:	88 23       	and	r24, r24
    daea:	09 f4       	brne	.+2      	; 0xdaee <update_player+0x54>
    daec:	ab c0       	rjmp	.+342    	; 0xdc44 <update_player+0x1aa>
	{
		if (game.current_level_index == 9)
    daee:	80 91 c7 0d 	lds	r24, 0x0DC7
    daf2:	89 30       	cpi	r24, 0x09	; 9
    daf4:	09 f0       	breq	.+2      	; 0xdaf8 <update_player+0x5e>
    daf6:	52 c0       	rjmp	.+164    	; 0xdb9c <update_player+0x102>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    daf8:	80 91 b2 0d 	lds	r24, 0x0DB2
    dafc:	90 91 b3 0d 	lds	r25, 0x0DB3
    db00:	e3 e0       	ldi	r30, 0x03	; 3
    db02:	96 95       	lsr	r25
    db04:	87 95       	ror	r24
    db06:	ea 95       	dec	r30
    db08:	e1 f7       	brne	.-8      	; 0xdb02 <update_player+0x68>
    db0a:	4c 96       	adiw	r24, 0x1c	; 28
    db0c:	82 3d       	cpi	r24, 0xD2	; 210
    db0e:	91 05       	cpc	r25, r1
    db10:	08 f4       	brcc	.+2      	; 0xdb14 <update_player+0x7a>
    db12:	44 c0       	rjmp	.+136    	; 0xdb9c <update_player+0x102>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    db14:	05 ff       	sbrs	r16, 5
    db16:	02 c0       	rjmp	.+4      	; 0xdb1c <update_player+0x82>
				{
					space_ship_speed = 0;
    db18:	00 e0       	ldi	r16, 0x00	; 0
    db1a:	01 c0       	rjmp	.+2      	; 0xdb1e <update_player+0x84>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    db1c:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				LBPrintByte(17, VRAM_TILES_V-3, game.active_enemies ,true);
    db1e:	21 e0       	ldi	r18, 0x01	; 1
    db20:	40 91 cd 0d 	lds	r20, 0x0DCD
    db24:	6d e1       	ldi	r22, 0x1D	; 29
    db26:	81 e1       	ldi	r24, 0x11	; 17
    db28:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
				if (!(player->flags & BOSS_APROACHING))
    db2c:	f7 01       	movw	r30, r14
    db2e:	80 85       	ldd	r24, Z+8	; 0x08
    db30:	86 fd       	sbrc	r24, 6
    db32:	06 c0       	rjmp	.+12     	; 0xdb40 <update_player+0xa6>
				{
					player->flags |= BOSS_APROACHING;
    db34:	80 64       	ori	r24, 0x40	; 64
    db36:	80 87       	std	Z+8, r24	; 0x08
					explode_all_enemies();
    db38:	0e 94 c2 5e 	call	0xbd84	; 0xbd84 <explode_all_enemies>
					StopSong();
    db3c:	0e 94 05 44 	call	0x880a	; 0x880a <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(player->flags & BOSS_REACHED))
    db40:	80 91 b2 0d 	lds	r24, 0x0DB2
    db44:	90 91 b3 0d 	lds	r25, 0x0DB3
    db48:	73 e0       	ldi	r23, 0x03	; 3
    db4a:	96 95       	lsr	r25
    db4c:	87 95       	ror	r24
    db4e:	7a 95       	dec	r23
    db50:	e1 f7       	brne	.-8      	; 0xdb4a <update_player+0xb0>
    db52:	4c 96       	adiw	r24, 0x1c	; 28
    db54:	8a 3f       	cpi	r24, 0xFA	; 250
    db56:	91 05       	cpc	r25, r1
    db58:	60 f0       	brcs	.+24     	; 0xdb72 <update_player+0xd8>
    db5a:	f7 01       	movw	r30, r14
    db5c:	80 85       	ldd	r24, Z+8	; 0x08
    db5e:	87 fd       	sbrc	r24, 7
    db60:	08 c0       	rjmp	.+16     	; 0xdb72 <update_player+0xd8>
				{
					player->flags |= BOSS_REACHED;
    db62:	80 68       	ori	r24, 0x80	; 128
    db64:	80 87       	std	Z+8, r24	; 0x08
					init_enemy_boss_turrets();
    db66:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <init_enemy_boss_turrets>
					StartSong(planetsong);
    db6a:	87 ec       	ldi	r24, 0xC7	; 199
    db6c:	91 e1       	ldi	r25, 0x11	; 17
    db6e:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <StartSong>
				}
				if ((player->flags & BOSS_REACHED) && (game.active_enemies == 0))
    db72:	f7 01       	movw	r30, r14
    db74:	80 85       	ldd	r24, Z+8	; 0x08
    db76:	87 ff       	sbrs	r24, 7
    db78:	12 c0       	rjmp	.+36     	; 0xdb9e <update_player+0x104>
    db7a:	80 91 cd 0d 	lds	r24, 0x0DCD
    db7e:	81 11       	cpse	r24, r1
    db80:	0e c0       	rjmp	.+28     	; 0xdb9e <update_player+0x104>
				{
					init_enemy_boss_eyes();
    db82:	0e 94 6e 5a 	call	0xb4dc	; 0xb4dc <init_enemy_boss_eyes>
					game.eye_clusters--;
    db86:	80 91 d0 0d 	lds	r24, 0x0DD0
    db8a:	81 50       	subi	r24, 0x01	; 1
    db8c:	80 93 d0 0d 	sts	0x0DD0, r24
					if (game.eye_clusters == 0)
    db90:	81 11       	cpse	r24, r1
    db92:	05 c0       	rjmp	.+10     	; 0xdb9e <update_player+0x104>
					{
						game.level_ended = 1;
    db94:	81 e0       	ldi	r24, 0x01	; 1
    db96:	80 93 cf 0d 	sts	0x0DCF, r24
    db9a:	01 c0       	rjmp	.+2      	; 0xdb9e <update_player+0x104>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    db9c:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    db9e:	f7 01       	movw	r30, r14
    dba0:	80 85       	ldd	r24, Z+8	; 0x08
    dba2:	85 ff       	sbrs	r24, 5
    dba4:	08 c0       	rjmp	.+16     	; 0xdbb6 <update_player+0x11c>
    dba6:	80 91 c7 0d 	lds	r24, 0x0DC7
    dbaa:	89 30       	cpi	r24, 0x09	; 9
    dbac:	21 f0       	breq	.+8      	; 0xdbb6 <update_player+0x11c>
			player->shared.vx = space_ship_speed*2;
    dbae:	00 0f       	add	r16, r16
    dbb0:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    dbb2:	14 82       	std	Z+4, r1	; 0x04
    dbb4:	43 c0       	rjmp	.+134    	; 0xdc3c <update_player+0x1a2>
		} else {
			player->shared.vy = 0;
    dbb6:	f7 01       	movw	r30, r14
    dbb8:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    dbba:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    dbbc:	e8 58       	subi	r30, 0x88	; 136
    dbbe:	ff 4f       	sbci	r31, 0xFF	; 255
    dbc0:	20 81       	ld	r18, Z
    dbc2:	25 ff       	sbrs	r18, 5
    dbc4:	11 c0       	rjmp	.+34     	; 0xdbe8 <update_player+0x14e>
    dbc6:	f7 01       	movw	r30, r14
    dbc8:	82 81       	ldd	r24, Z+2	; 0x02
    dbca:	93 81       	ldd	r25, Z+3	; 0x03
    dbcc:	63 e0       	ldi	r22, 0x03	; 3
    dbce:	96 95       	lsr	r25
    dbd0:	87 95       	ror	r24
    dbd2:	6a 95       	dec	r22
    dbd4:	e1 f7       	brne	.-8      	; 0xdbce <update_player+0x134>
    dbd6:	01 96       	adiw	r24, 0x01	; 1
    dbd8:	40 91 c2 0d 	lds	r20, 0x0DC2
    dbdc:	50 e0       	ldi	r21, 0x00	; 0
    dbde:	84 17       	cp	r24, r20
    dbe0:	95 07       	cpc	r25, r21
    dbe2:	10 f4       	brcc	.+4      	; 0xdbe8 <update_player+0x14e>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    dbe4:	8c e3       	ldi	r24, 0x3C	; 60
    dbe6:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    dbe8:	27 ff       	sbrs	r18, 7
    dbea:	11 c0       	rjmp	.+34     	; 0xdc0e <update_player+0x174>
    dbec:	f7 01       	movw	r30, r14
    dbee:	40 81       	ld	r20, Z
    dbf0:	51 81       	ldd	r21, Z+1	; 0x01
    dbf2:	48 5e       	subi	r20, 0xE8	; 232
    dbf4:	5f 4f       	sbci	r21, 0xFF	; 255
    dbf6:	80 91 b2 0d 	lds	r24, 0x0DB2
    dbfa:	90 91 b3 0d 	lds	r25, 0x0DB3
    dbfe:	80 52       	subi	r24, 0x20	; 32
    dc00:	9f 4f       	sbci	r25, 0xFF	; 255
    dc02:	48 17       	cp	r20, r24
    dc04:	59 07       	cpc	r21, r25
    dc06:	18 f4       	brcc	.+6      	; 0xdc0e <update_player+0x174>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    dc08:	8c e3       	ldi	r24, 0x3C	; 60
    dc0a:	80 0f       	add	r24, r16
    dc0c:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dc0e:	26 ff       	sbrs	r18, 6
    dc10:	0c c0       	rjmp	.+24     	; 0xdc2a <update_player+0x190>
    dc12:	f7 01       	movw	r30, r14
    dc14:	40 81       	ld	r20, Z
    dc16:	51 81       	ldd	r21, Z+1	; 0x01
    dc18:	80 91 b2 0d 	lds	r24, 0x0DB2
    dc1c:	90 91 b3 0d 	lds	r25, 0x0DB3
    dc20:	84 17       	cp	r24, r20
    dc22:	95 07       	cpc	r25, r21
    dc24:	10 f4       	brcc	.+4      	; 0xdc2a <update_player+0x190>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    dc26:	0c 53       	subi	r16, 0x3C	; 60
    dc28:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    dc2a:	24 ff       	sbrs	r18, 4
    dc2c:	07 c0       	rjmp	.+14     	; 0xdc3c <update_player+0x1a2>
    dc2e:	f7 01       	movw	r30, r14
    dc30:	82 81       	ldd	r24, Z+2	; 0x02
    dc32:	93 81       	ldd	r25, Z+3	; 0x03
    dc34:	89 2b       	or	r24, r25
    dc36:	11 f0       	breq	.+4      	; 0xdc3c <update_player+0x1a2>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    dc38:	84 ec       	ldi	r24, 0xC4	; 196
    dc3a:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    dc3c:	c7 01       	movw	r24, r14
    dc3e:	8c 5a       	subi	r24, 0xAC	; 172
    dc40:	9f 4f       	sbci	r25, 0xFF	; 255
    dc42:	43 c1       	rjmp	.+646    	; 0xdeca <update_player+0x430>
	}
	else if (player->flags & (IDLE|RUNNING))
    dc44:	80 2f       	mov	r24, r16
    dc46:	8a 70       	andi	r24, 0x0A	; 10
    dc48:	09 f4       	brne	.+2      	; 0xdc4c <update_player+0x1b2>
    dc4a:	96 c0       	rjmp	.+300    	; 0xdd78 <update_player+0x2de>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    dc4c:	f7 01       	movw	r30, r14
    dc4e:	44 85       	ldd	r20, Z+12	; 0x0c
    dc50:	63 85       	ldd	r22, Z+11	; 0x0b
    dc52:	c7 01       	movw	r24, r14
    dc54:	0e 94 79 5d 	call	0xbaf2	; 0xbaf2 <on_solid_ground>
    dc58:	81 11       	cpse	r24, r1
    dc5a:	06 c0       	rjmp	.+12     	; 0xdc68 <update_player+0x1ce>
		{
			player->shared.gravity = GRAVITY;
    dc5c:	88 ec       	ldi	r24, 0xC8	; 200
    dc5e:	f7 01       	movw	r30, r14
    dc60:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    dc62:	81 e0       	ldi	r24, 0x01	; 1
    dc64:	80 87       	std	Z+8, r24	; 0x08
    dc66:	0f c1       	rjmp	.+542    	; 0xde86 <update_player+0x3ec>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    dc68:	f7 01       	movw	r30, r14
    dc6a:	e8 58       	subi	r30, 0x88	; 136
    dc6c:	ff 4f       	sbci	r31, 0xFF	; 255
    dc6e:	20 81       	ld	r18, Z
    dc70:	25 ff       	sbrs	r18, 5
    dc72:	25 c0       	rjmp	.+74     	; 0xdcbe <update_player+0x224>
			{
				player->shared.y += 16;
    dc74:	f7 01       	movw	r30, r14
    dc76:	82 81       	ldd	r24, Z+2	; 0x02
    dc78:	93 81       	ldd	r25, Z+3	; 0x03
    dc7a:	40 96       	adiw	r24, 0x10	; 16
    dc7c:	93 83       	std	Z+3, r25	; 0x03
    dc7e:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    dc80:	82 85       	ldd	r24, Z+10	; 0x0a
    dc82:	81 30       	cpi	r24, 0x01	; 1
    dc84:	29 f4       	brne	.+10     	; 0xdc90 <update_player+0x1f6>
				{
					player->shared.x -= 8;
    dc86:	80 81       	ld	r24, Z
    dc88:	91 81       	ldd	r25, Z+1	; 0x01
    dc8a:	08 97       	sbiw	r24, 0x08	; 8
    dc8c:	91 83       	std	Z+1, r25	; 0x01
    dc8e:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    dc90:	f7 01       	movw	r30, r14
    dc92:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    dc94:	84 e0       	ldi	r24, 0x04	; 4
    dc96:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    dc98:	83 e0       	ldi	r24, 0x03	; 3
    dc9a:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    dc9c:	81 e0       	ldi	r24, 0x01	; 1
    dc9e:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    dca0:	63 e0       	ldi	r22, 0x03	; 3
    dca2:	83 e0       	ldi	r24, 0x03	; 3
    dca4:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    dca8:	24 e0       	ldi	r18, 0x04	; 4
    dcaa:	12 9f       	mul	r17, r18
    dcac:	f0 01       	movw	r30, r0
    dcae:	11 24       	eor	r1, r1
    dcb0:	e4 52       	subi	r30, 0x24	; 36
    dcb2:	f0 4f       	sbci	r31, 0xF0	; 240
    dcb4:	43 81       	ldd	r20, Z+3	; 0x03
    dcb6:	c7 01       	movw	r24, r14
    dcb8:	8c 59       	subi	r24, 0x9C	; 156
    dcba:	9f 4f       	sbci	r25, 0xFF	; 255
    dcbc:	44 c0       	rjmp	.+136    	; 0xdd46 <update_player+0x2ac>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    dcbe:	27 ff       	sbrs	r18, 7
    dcc0:	1c c0       	rjmp	.+56     	; 0xdcfa <update_player+0x260>
    dcc2:	f7 01       	movw	r30, r14
    dcc4:	80 81       	ld	r24, Z
    dcc6:	91 81       	ldd	r25, Z+1	; 0x01
    dcc8:	53 e0       	ldi	r21, 0x03	; 3
    dcca:	96 95       	lsr	r25
    dccc:	87 95       	ror	r24
    dcce:	5a 95       	dec	r21
    dcd0:	e1 f7       	brne	.-8      	; 0xdcca <update_player+0x230>
    dcd2:	02 96       	adiw	r24, 0x02	; 2
    dcd4:	40 91 c1 0d 	lds	r20, 0x0DC1
    dcd8:	50 e0       	ldi	r21, 0x00	; 0
    dcda:	84 17       	cp	r24, r20
    dcdc:	95 07       	cpc	r25, r21
    dcde:	68 f4       	brcc	.+26     	; 0xdcfa <update_player+0x260>
			{
				player->shared.vx = RUN_SPEED;
    dce0:	8c e3       	ldi	r24, 0x3C	; 60
    dce2:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    dce4:	82 e0       	ldi	r24, 0x02	; 2
    dce6:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    dce8:	81 e0       	ldi	r24, 0x01	; 1
    dcea:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    dcec:	c7 01       	movw	r24, r14
    dcee:	8c 5a       	subi	r24, 0xAC	; 172
    dcf0:	9f 4f       	sbci	r25, 0xFF	; 255
    dcf2:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dcf6:	40 e0       	ldi	r20, 0x00	; 0
    dcf8:	2a c0       	rjmp	.+84     	; 0xdd4e <update_player+0x2b4>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dcfa:	26 ff       	sbrs	r18, 6
    dcfc:	16 c0       	rjmp	.+44     	; 0xdd2a <update_player+0x290>
    dcfe:	f7 01       	movw	r30, r14
    dd00:	20 81       	ld	r18, Z
    dd02:	31 81       	ldd	r19, Z+1	; 0x01
    dd04:	80 91 b2 0d 	lds	r24, 0x0DB2
    dd08:	90 91 b3 0d 	lds	r25, 0x0DB3
    dd0c:	82 17       	cp	r24, r18
    dd0e:	93 07       	cpc	r25, r19
    dd10:	60 f4       	brcc	.+24     	; 0xdd2a <update_player+0x290>
			{
				player->shared.vx = -RUN_SPEED;
    dd12:	84 ec       	ldi	r24, 0xC4	; 196
    dd14:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    dd16:	82 e0       	ldi	r24, 0x02	; 2
    dd18:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    dd1a:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    dd1c:	c7 01       	movw	r24, r14
    dd1e:	8c 5a       	subi	r24, 0xAC	; 172
    dd20:	9f 4f       	sbci	r25, 0xFF	; 255
    dd22:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dd26:	41 e0       	ldi	r20, 0x01	; 1
    dd28:	12 c0       	rjmp	.+36     	; 0xdd4e <update_player+0x2b4>
			}
			else
			{
				player->flags = IDLE;
    dd2a:	88 e0       	ldi	r24, 0x08	; 8
    dd2c:	f7 01       	movw	r30, r14
    dd2e:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    dd30:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    dd32:	24 e0       	ldi	r18, 0x04	; 4
    dd34:	12 9f       	mul	r17, r18
    dd36:	f0 01       	movw	r30, r0
    dd38:	11 24       	eor	r1, r1
    dd3a:	e4 52       	subi	r30, 0x24	; 36
    dd3c:	f0 4f       	sbci	r31, 0xF0	; 240
    dd3e:	43 81       	ldd	r20, Z+3	; 0x03
    dd40:	c7 01       	movw	r24, r14
    dd42:	84 5b       	subi	r24, 0xB4	; 180
    dd44:	9f 4f       	sbci	r25, 0xFF	; 255
    dd46:	49 83       	std	Y+1, r20	; 0x01
    dd48:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dd4c:	49 81       	ldd	r20, Y+1	; 0x01
    dd4e:	bc 01       	movw	r22, r24
    dd50:	81 2f       	mov	r24, r17
    dd52:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_B && !(player->flags & PRONE))
    dd56:	f7 01       	movw	r30, r14
    dd58:	ec 58       	subi	r30, 0x8C	; 140
    dd5a:	ff 4f       	sbci	r31, 0xFF	; 255
    dd5c:	80 81       	ld	r24, Z
    dd5e:	80 ff       	sbrs	r24, 0
    dd60:	bb c0       	rjmp	.+374    	; 0xded8 <update_player+0x43e>
    dd62:	f7 01       	movw	r30, r14
    dd64:	80 85       	ldd	r24, Z+8	; 0x08
    dd66:	82 fd       	sbrc	r24, 2
    dd68:	b7 c0       	rjmp	.+366    	; 0xded8 <update_player+0x43e>
			{
				player->shared.vy = -JUMP_SPEED;
    dd6a:	81 e8       	ldi	r24, 0x81	; 129
    dd6c:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    dd6e:	88 ec       	ldi	r24, 0xC8	; 200
    dd70:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    dd72:	81 e0       	ldi	r24, 0x01	; 1
    dd74:	80 87       	std	Z+8, r24	; 0x08
    dd76:	83 c0       	rjmp	.+262    	; 0xde7e <update_player+0x3e4>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    dd78:	00 ff       	sbrs	r16, 0
    dd7a:	4c c0       	rjmp	.+152    	; 0xde14 <update_player+0x37a>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    dd7c:	f7 01       	movw	r30, r14
    dd7e:	e8 58       	subi	r30, 0x88	; 136
    dd80:	ff 4f       	sbci	r31, 0xFF	; 255
    dd82:	60 81       	ld	r22, Z
    dd84:	c7 01       	movw	r24, r14
    dd86:	84 5a       	subi	r24, 0xA4	; 164
    dd88:	9f 4f       	sbci	r25, 0xFF	; 255
    dd8a:	67 ff       	sbrs	r22, 7
    dd8c:	18 c0       	rjmp	.+48     	; 0xddbe <update_player+0x324>
    dd8e:	f7 01       	movw	r30, r14
    dd90:	20 81       	ld	r18, Z
    dd92:	31 81       	ldd	r19, Z+1	; 0x01
    dd94:	43 e0       	ldi	r20, 0x03	; 3
    dd96:	36 95       	lsr	r19
    dd98:	27 95       	ror	r18
    dd9a:	4a 95       	dec	r20
    dd9c:	e1 f7       	brne	.-8      	; 0xdd96 <update_player+0x2fc>
    dd9e:	2e 5f       	subi	r18, 0xFE	; 254
    dda0:	3f 4f       	sbci	r19, 0xFF	; 255
    dda2:	40 91 c1 0d 	lds	r20, 0x0DC1
    dda6:	50 e0       	ldi	r21, 0x00	; 0
    dda8:	24 17       	cp	r18, r20
    ddaa:	35 07       	cpc	r19, r21
    ddac:	40 f4       	brcc	.+16     	; 0xddbe <update_player+0x324>
		{
			player->shared.vx = RUN_SPEED;
    ddae:	2c e3       	ldi	r18, 0x3C	; 60
    ddb0:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    ddb2:	21 e0       	ldi	r18, 0x01	; 1
    ddb4:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    ddb6:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    ddba:	40 e0       	ldi	r20, 0x00	; 0
    ddbc:	20 c0       	rjmp	.+64     	; 0xddfe <update_player+0x364>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    ddbe:	66 ff       	sbrs	r22, 6
    ddc0:	11 c0       	rjmp	.+34     	; 0xdde4 <update_player+0x34a>
    ddc2:	f7 01       	movw	r30, r14
    ddc4:	40 81       	ld	r20, Z
    ddc6:	51 81       	ldd	r21, Z+1	; 0x01
    ddc8:	20 91 b2 0d 	lds	r18, 0x0DB2
    ddcc:	30 91 b3 0d 	lds	r19, 0x0DB3
    ddd0:	24 17       	cp	r18, r20
    ddd2:	35 07       	cpc	r19, r21
    ddd4:	38 f4       	brcc	.+14     	; 0xdde4 <update_player+0x34a>
		{
			player->shared.vx = -RUN_SPEED;
    ddd6:	24 ec       	ldi	r18, 0xC4	; 196
    ddd8:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    ddda:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    dddc:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dde0:	41 e0       	ldi	r20, 0x01	; 1
    dde2:	0d c0       	rjmp	.+26     	; 0xddfe <update_player+0x364>
		}
		else
		{
			player->shared.vx = 0;
    dde4:	f7 01       	movw	r30, r14
    dde6:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dde8:	24 e0       	ldi	r18, 0x04	; 4
    ddea:	12 9f       	mul	r17, r18
    ddec:	f0 01       	movw	r30, r0
    ddee:	11 24       	eor	r1, r1
    ddf0:	e4 52       	subi	r30, 0x24	; 36
    ddf2:	f0 4f       	sbci	r31, 0xF0	; 240
    ddf4:	43 81       	ldd	r20, Z+3	; 0x03
    ddf6:	49 83       	std	Y+1, r20	; 0x01
    ddf8:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    ddfc:	49 81       	ldd	r20, Y+1	; 0x01
    ddfe:	bc 01       	movw	r22, r24
    de00:	81 2f       	mov	r24, r17
    de02:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    de06:	f7 01       	movw	r30, r14
    de08:	86 81       	ldd	r24, Z+6	; 0x06
    de0a:	81 11       	cpse	r24, r1
    de0c:	65 c0       	rjmp	.+202    	; 0xded8 <update_player+0x43e>
		{
			player->flags = IDLE;
    de0e:	88 e0       	ldi	r24, 0x08	; 8
    de10:	80 87       	std	Z+8, r24	; 0x08
    de12:	62 c0       	rjmp	.+196    	; 0xded8 <update_player+0x43e>
		}
	}
	else if (player->flags & PRONE)
    de14:	02 ff       	sbrs	r16, 2
    de16:	60 c0       	rjmp	.+192    	; 0xded8 <update_player+0x43e>
	{
		if (player->controls.pressed & BTN_UP)
    de18:	f7 01       	movw	r30, r14
    de1a:	ec 58       	subi	r30, 0x8C	; 140
    de1c:	ff 4f       	sbci	r31, 0xFF	; 255
    de1e:	80 81       	ld	r24, Z
    de20:	84 ff       	sbrs	r24, 4
    de22:	16 c0       	rjmp	.+44     	; 0xde50 <update_player+0x3b6>
		{
			player->flags = IDLE;	
    de24:	88 e0       	ldi	r24, 0x08	; 8
    de26:	f7 01       	movw	r30, r14
    de28:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    de2a:	82 81       	ldd	r24, Z+2	; 0x02
    de2c:	93 81       	ldd	r25, Z+3	; 0x03
    de2e:	40 97       	sbiw	r24, 0x10	; 16
    de30:	93 83       	std	Z+3, r25	; 0x03
    de32:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    de34:	82 85       	ldd	r24, Z+10	; 0x0a
    de36:	81 30       	cpi	r24, 0x01	; 1
    de38:	29 f4       	brne	.+10     	; 0xde44 <update_player+0x3aa>
			{
				player->shared.x += 8;
    de3a:	80 81       	ld	r24, Z
    de3c:	91 81       	ldd	r25, Z+1	; 0x01
    de3e:	08 96       	adiw	r24, 0x08	; 8
    de40:	91 83       	std	Z+1, r25	; 0x01
    de42:	80 83       	st	Z, r24
			}
			player->width = 2;
    de44:	82 e0       	ldi	r24, 0x02	; 2
    de46:	f7 01       	movw	r30, r14
    de48:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    de4a:	83 e0       	ldi	r24, 0x03	; 3
    de4c:	84 87       	std	Z+12, r24	; 0x0c
    de4e:	44 c0       	rjmp	.+136    	; 0xded8 <update_player+0x43e>
		}
		else if (player->controls.pressed & BTN_B)
    de50:	80 ff       	sbrs	r24, 0
    de52:	28 c0       	rjmp	.+80     	; 0xdea4 <update_player+0x40a>
		{
			player->flags = JUMPING;
    de54:	81 e0       	ldi	r24, 0x01	; 1
    de56:	f7 01       	movw	r30, r14
    de58:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    de5a:	82 81       	ldd	r24, Z+2	; 0x02
    de5c:	93 81       	ldd	r25, Z+3	; 0x03
    de5e:	40 97       	sbiw	r24, 0x10	; 16
    de60:	93 83       	std	Z+3, r25	; 0x03
    de62:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    de64:	82 85       	ldd	r24, Z+10	; 0x0a
    de66:	81 30       	cpi	r24, 0x01	; 1
    de68:	29 f4       	brne	.+10     	; 0xde74 <update_player+0x3da>
			{
				player->shared.x += 8;
    de6a:	80 81       	ld	r24, Z
    de6c:	91 81       	ldd	r25, Z+1	; 0x01
    de6e:	08 96       	adiw	r24, 0x08	; 8
    de70:	91 83       	std	Z+1, r25	; 0x01
    de72:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    de74:	81 e8       	ldi	r24, 0x81	; 129
    de76:	f7 01       	movw	r30, r14
    de78:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    de7a:	88 ec       	ldi	r24, 0xC8	; 200
    de7c:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    de7e:	82 e0       	ldi	r24, 0x02	; 2
    de80:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    de82:	83 e0       	ldi	r24, 0x03	; 3
    de84:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    de86:	24 e0       	ldi	r18, 0x04	; 4
    de88:	12 9f       	mul	r17, r18
    de8a:	f0 01       	movw	r30, r0
    de8c:	11 24       	eor	r1, r1
    de8e:	e4 52       	subi	r30, 0x24	; 36
    de90:	f0 4f       	sbci	r31, 0xF0	; 240
    de92:	43 81       	ldd	r20, Z+3	; 0x03
    de94:	c7 01       	movw	r24, r14
    de96:	84 5a       	subi	r24, 0xA4	; 164
    de98:	9f 4f       	sbci	r25, 0xFF	; 255
    de9a:	49 83       	std	Y+1, r20	; 0x01
    de9c:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dea0:	49 81       	ldd	r20, Y+1	; 0x01
    dea2:	16 c0       	rjmp	.+44     	; 0xded0 <update_player+0x436>
		}
		else if (player->controls.pressed & BTN_LEFT)
    dea4:	86 ff       	sbrs	r24, 6
    dea6:	09 c0       	rjmp	.+18     	; 0xdeba <update_player+0x420>
		{
			player->direction = D_LEFT;
    dea8:	f7 01       	movw	r30, r14
    deaa:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    deac:	c7 01       	movw	r24, r14
    deae:	8c 59       	subi	r24, 0x9C	; 156
    deb0:	9f 4f       	sbci	r25, 0xFF	; 255
    deb2:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    deb6:	41 e0       	ldi	r20, 0x01	; 1
    deb8:	0b c0       	rjmp	.+22     	; 0xded0 <update_player+0x436>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    deba:	87 ff       	sbrs	r24, 7
    debc:	0d c0       	rjmp	.+26     	; 0xded8 <update_player+0x43e>
		{
			player->direction = D_RIGHT;
    debe:	81 e0       	ldi	r24, 0x01	; 1
    dec0:	f7 01       	movw	r30, r14
    dec2:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    dec4:	c7 01       	movw	r24, r14
    dec6:	8c 59       	subi	r24, 0x9C	; 156
    dec8:	9f 4f       	sbci	r25, 0xFF	; 255
    deca:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dece:	40 e0       	ldi	r20, 0x00	; 0
    ded0:	bc 01       	movw	r22, r24
    ded2:	81 2f       	mov	r24, r17
    ded4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		}
	}
	return 1;
}
    ded8:	81 e0       	ldi	r24, 0x01	; 1
    deda:	0f 90       	pop	r0
    dedc:	df 91       	pop	r29
    dede:	cf 91       	pop	r28
    dee0:	1f 91       	pop	r17
    dee2:	0f 91       	pop	r16
    dee4:	ff 90       	pop	r15
    dee6:	ef 90       	pop	r14
    dee8:	08 95       	ret

0000deea <update_level>:
{
	
}

u8 update_level()
{
    deea:	cf 92       	push	r12
    deec:	df 92       	push	r13
    deee:	ef 92       	push	r14
    def0:	ff 92       	push	r15
    def2:	0f 93       	push	r16
    def4:	cf 93       	push	r28
    def6:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    def8:	e0 90 d1 0d 	lds	r14, 0x0DD1
    defc:	f0 90 d2 0d 	lds	r15, 0x0DD2
    df00:	c0 90 b2 0d 	lds	r12, 0x0DB2
    df04:	d0 90 b3 0d 	lds	r13, 0x0DB3
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    df08:	80 91 cc 0d 	lds	r24, 0x0DCC
    df0c:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    df0e:	8c 33       	cpi	r24, 0x3C	; 60
    df10:	19 f0       	breq	.+6      	; 0xdf18 <update_level+0x2e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    df12:	80 93 cc 0d 	sts	0x0DCC, r24
    df16:	0f c0       	rjmp	.+30     	; 0xdf36 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    df18:	10 92 cc 0d 	sts	0x0DCC, r1
		if (game.time != 65535) game.time++;
    df1c:	80 91 b8 0d 	lds	r24, 0x0DB8
    df20:	90 91 b9 0d 	lds	r25, 0x0DB9
    df24:	8f 3f       	cpi	r24, 0xFF	; 255
    df26:	2f ef       	ldi	r18, 0xFF	; 255
    df28:	92 07       	cpc	r25, r18
    df2a:	29 f0       	breq	.+10     	; 0xdf36 <update_level+0x4c>
    df2c:	01 96       	adiw	r24, 0x01	; 1
    df2e:	90 93 b9 0d 	sts	0x0DB9, r25
    df32:	80 93 b8 0d 	sts	0x0DB8, r24
	}
	
	if (is_space())
    df36:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    df3a:	88 23       	and	r24, r24
    df3c:	69 f1       	breq	.+90     	; 0xdf98 <update_level+0xae>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    df3e:	c6 01       	movw	r24, r12
    df40:	23 e0       	ldi	r18, 0x03	; 3
    df42:	96 95       	lsr	r25
    df44:	87 95       	ror	r24
    df46:	2a 95       	dec	r18
    df48:	e1 f7       	brne	.-8      	; 0xdf42 <update_level+0x58>
    df4a:	4c 96       	adiw	r24, 0x1c	; 28
    df4c:	20 91 c1 0d 	lds	r18, 0x0DC1
    df50:	30 e0       	ldi	r19, 0x00	; 0
    df52:	82 17       	cp	r24, r18
    df54:	93 07       	cpc	r25, r19
    df56:	70 f4       	brcc	.+28     	; 0xdf74 <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    df58:	20 91 c7 0d 	lds	r18, 0x0DC7
    df5c:	29 30       	cpi	r18, 0x09	; 9
    df5e:	39 f4       	brne	.+14     	; 0xdf6e <update_level+0x84>
    df60:	82 3d       	cpi	r24, 0xD2	; 210
    df62:	91 05       	cpc	r25, r1
    df64:	20 f0       	brcs	.+8      	; 0xdf6e <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    df66:	80 91 cc 0d 	lds	r24, 0x0DCC
    df6a:	80 fd       	sbrc	r24, 0
    df6c:	2d c0       	rjmp	.+90     	; 0xdfc8 <update_level+0xde>
    df6e:	0e 94 26 5d 	call	0xba4c	; 0xba4c <move_camera_x>
    df72:	2a c0       	rjmp	.+84     	; 0xdfc8 <update_level+0xde>
    df74:	80 91 d9 0d 	lds	r24, 0x0DD9
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x >= game.camera_x+CAMERA_WIDTH*8)
    df78:	96 01       	movw	r18, r12
    df7a:	20 52       	subi	r18, 0x20	; 32
    df7c:	3f 4f       	sbci	r19, 0xFF	; 255
    df7e:	e2 16       	cp	r14, r18
    df80:	f3 06       	cpc	r15, r19
    df82:	30 f0       	brcs	.+12     	; 0xdf90 <update_level+0xa6>
		{
			game.level_ended = 1;
    df84:	91 e0       	ldi	r25, 0x01	; 1
    df86:	90 93 cf 0d 	sts	0x0DCF, r25
			game.player.flags ^= END_OF_SPACE;
    df8a:	90 e2       	ldi	r25, 0x20	; 32
    df8c:	89 27       	eor	r24, r25
    df8e:	01 c0       	rjmp	.+2      	; 0xdf92 <update_level+0xa8>
		} else {
			game.player.flags |= END_OF_SPACE;
    df90:	80 62       	ori	r24, 0x20	; 32
    df92:	80 93 d9 0d 	sts	0x0DD9, r24
    df96:	18 c0       	rjmp	.+48     	; 0xdfc8 <update_level+0xde>
		}
	}
	else if (game.player.shared.vx > 0 &&
    df98:	80 91 d6 0d 	lds	r24, 0x0DD6
    df9c:	18 16       	cp	r1, r24
    df9e:	a4 f4       	brge	.+40     	; 0xdfc8 <update_level+0xde>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dfa0:	c7 01       	movw	r24, r14
    dfa2:	8c 19       	sub	r24, r12
    dfa4:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    dfa6:	80 37       	cpi	r24, 0x70	; 112
    dfa8:	91 05       	cpc	r25, r1
    dfaa:	70 f0       	brcs	.+28     	; 0xdfc8 <update_level+0xde>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    dfac:	96 01       	movw	r18, r12
    dfae:	83 e0       	ldi	r24, 0x03	; 3
    dfb0:	36 95       	lsr	r19
    dfb2:	27 95       	ror	r18
    dfb4:	8a 95       	dec	r24
    dfb6:	e1 f7       	brne	.-8      	; 0xdfb0 <update_level+0xc6>
    dfb8:	24 5e       	subi	r18, 0xE4	; 228
    dfba:	3f 4f       	sbci	r19, 0xFF	; 255
    dfbc:	80 91 c1 0d 	lds	r24, 0x0DC1
    dfc0:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dfc2:	28 17       	cp	r18, r24
    dfc4:	39 07       	cpc	r19, r25
    dfc6:	98 f2       	brcs	.-90     	; 0xdf6e <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    dfc8:	21 e0       	ldi	r18, 0x01	; 1
    dfca:	40 91 e0 0d 	lds	r20, 0x0DE0
    dfce:	6d e1       	ldi	r22, 0x1D	; 29
    dfd0:	89 e0       	ldi	r24, 0x09	; 9
    dfd2:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    dfd6:	40 91 b8 0d 	lds	r20, 0x0DB8
    dfda:	50 91 b9 0d 	lds	r21, 0x0DB9
    dfde:	21 e0       	ldi	r18, 0x01	; 1
    dfe0:	6d e1       	ldi	r22, 0x1D	; 29
    dfe2:	8b e1       	ldi	r24, 0x1B	; 27
    dfe4:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    dfe8:	21 e0       	ldi	r18, 0x01	; 1
    dfea:	40 91 c5 0d 	lds	r20, 0x0DC5
    dfee:	6e e1       	ldi	r22, 0x1E	; 30
    dff0:	89 e0       	ldi	r24, 0x09	; 9
    dff2:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    dff6:	40 91 b6 0d 	lds	r20, 0x0DB6
    dffa:	50 91 b7 0d 	lds	r21, 0x0DB7
    dffe:	21 e0       	ldi	r18, 0x01	; 1
    e000:	6e e1       	ldi	r22, 0x1E	; 30
    e002:	8b e1       	ldi	r24, 0x1B	; 27
    e004:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    e008:	40 91 b4 0d 	lds	r20, 0x0DB4
    e00c:	50 91 b5 0d 	lds	r21, 0x0DB5
    e010:	21 e0       	ldi	r18, 0x01	; 1
    e012:	6f e1       	ldi	r22, 0x1F	; 31
    e014:	8b e1       	ldi	r24, 0x1B	; 27
    e016:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    e01a:	80 91 cf 0d 	lds	r24, 0x0DCF
    e01e:	88 23       	and	r24, r24
    e020:	09 f4       	brne	.+2      	; 0xe024 <update_level+0x13a>
    e022:	86 c0       	rjmp	.+268    	; 0xe130 <update_level+0x246>
    e024:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    e028:	81 11       	cpse	r24, r1
    e02a:	6c c0       	rjmp	.+216    	; 0xe104 <update_level+0x21a>
    e02c:	80 91 d9 0d 	lds	r24, 0x0DD9
    e030:	8e 70       	andi	r24, 0x0E	; 14
    e032:	09 f4       	brne	.+2      	; 0xe036 <update_level+0x14c>
    e034:	7d c0       	rjmp	.+250    	; 0xe130 <update_level+0x246>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    e036:	40 e0       	ldi	r20, 0x00	; 0
    e038:	62 e1       	ldi	r22, 0x12	; 18
    e03a:	77 e3       	ldi	r23, 0x37	; 55
    e03c:	80 e0       	ldi	r24, 0x00	; 0
    e03e:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		if (game.player.flags & PRONE) {
    e042:	80 91 d9 0d 	lds	r24, 0x0DD9
    e046:	82 ff       	sbrs	r24, 2
    e048:	1a c0       	rjmp	.+52     	; 0xe07e <update_level+0x194>
			game.player.shared.y -= 16;
    e04a:	40 91 d3 0d 	lds	r20, 0x0DD3
    e04e:	50 91 d4 0d 	lds	r21, 0x0DD4
    e052:	40 51       	subi	r20, 0x10	; 16
    e054:	51 09       	sbc	r21, r1
    e056:	50 93 d4 0d 	sts	0x0DD4, r21
    e05a:	40 93 d3 0d 	sts	0x0DD3, r20
			game.player.width = 2;
    e05e:	82 e0       	ldi	r24, 0x02	; 2
    e060:	80 93 dc 0d 	sts	0x0DDC, r24
			game.player.height = 3;
    e064:	83 e0       	ldi	r24, 0x03	; 3
    e066:	80 93 dd 0d 	sts	0x0DDD, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    e06a:	60 91 d1 0d 	lds	r22, 0x0DD1
    e06e:	80 91 b2 0d 	lds	r24, 0x0DB2
    e072:	68 1b       	sub	r22, r24
    e074:	03 e0       	ldi	r16, 0x03	; 3
    e076:	22 e0       	ldi	r18, 0x02	; 2
    e078:	80 e0       	ldi	r24, 0x00	; 0
    e07a:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    e07e:	6b e0       	ldi	r22, 0x0B	; 11
    e080:	89 e0       	ldi	r24, 0x09	; 9
    e082:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
		LBRotateSprites();
    e086:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		map_ship();
    e08a:	0e 94 3f 5d 	call	0xba7e	; 0xba7e <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    e08e:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    e090:	c0 e0       	ldi	r28, 0x00	; 0
	
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    e092:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    e094:	81 e0       	ldi	r24, 0x01	; 1
    e096:	90 e0       	ldi	r25, 0x00	; 0
    e098:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    e09c:	8c 2f       	mov	r24, r28
    e09e:	90 e0       	ldi	r25, 0x00	; 0
    e0a0:	88 3a       	cpi	r24, 0xA8	; 168
    e0a2:	91 05       	cpc	r25, r1
    e0a4:	3c f0       	brlt	.+14     	; 0xe0b4 <update_level+0x1ca>
			{
				clear_sprites(0, 6);
    e0a6:	66 e0       	ldi	r22, 0x06	; 6
    e0a8:	80 e0       	ldi	r24, 0x00	; 0
    e0aa:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
				LBRotateSprites();
    e0ae:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
				ship_increment = -3;
    e0b2:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    e0b4:	85 e2       	ldi	r24, 0x25	; 37
    e0b6:	9e e0       	ldi	r25, 0x0E	; 14
    e0b8:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    e0bc:	40 e0       	ldi	r20, 0x00	; 0
    e0be:	bc 01       	movw	r22, r24
    e0c0:	86 e0       	ldi	r24, 0x06	; 6
    e0c2:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    e0c6:	02 e0       	ldi	r16, 0x02	; 2
    e0c8:	24 e0       	ldi	r18, 0x04	; 4
    e0ca:	4c 2f       	mov	r20, r28
    e0cc:	6e 2d       	mov	r22, r14
    e0ce:	86 e0       	ldi	r24, 0x06	; 6
    e0d0:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			ship_y += ship_increment;
    e0d4:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    e0d6:	99 f4       	brne	.+38     	; 0xe0fe <update_level+0x214>
			{
				clear_sprites(6, 8);
    e0d8:	68 e0       	ldi	r22, 0x08	; 8
    e0da:	86 e0       	ldi	r24, 0x06	; 6
    e0dc:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
				LBRotateSprites();
    e0e0:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    e0e4:	64 e6       	ldi	r22, 0x64	; 100
    e0e6:	70 e0       	ldi	r23, 0x00	; 0
    e0e8:	89 eb       	ldi	r24, 0xB9	; 185
    e0ea:	9a e0       	ldi	r25, 0x0A	; 10
    e0ec:	0e 94 ce 6b 	call	0xd79c	; 0xd79c <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    e0f0:	80 91 c7 0d 	lds	r24, 0x0DC7
    e0f4:	00 e0       	ldi	r16, 0x00	; 0
    e0f6:	23 e0       	ldi	r18, 0x03	; 3
    e0f8:	4a e1       	ldi	r20, 0x1A	; 26
    e0fa:	6f ef       	ldi	r22, 0xFF	; 255
    e0fc:	15 c0       	rjmp	.+42     	; 0xe128 <update_level+0x23e>
				break;
			}
			LBRotateSprites();
    e0fe:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		}
    e102:	c8 cf       	rjmp	.-112    	; 0xe094 <update_level+0x1aa>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    e104:	64 e6       	ldi	r22, 0x64	; 100
    e106:	70 e0       	ldi	r23, 0x00	; 0
    e108:	89 eb       	ldi	r24, 0xB9	; 185
    e10a:	9a e0       	ldi	r25, 0x0A	; 10
    e10c:	0e 94 ce 6b 	call	0xd79c	; 0xd79c <tally_score>
		if (game.current_level_index == 9) {
    e110:	80 91 c7 0d 	lds	r24, 0x0DC7
    e114:	89 30       	cpi	r24, 0x09	; 9
    e116:	21 f4       	brne	.+8      	; 0xe120 <update_level+0x236>
			congratulation();
			exit_game();
    e118:	0e 94 d9 6a 	call	0xd5b2	; 0xd5b2 <exit_game>
			return 1;
    e11c:	81 e0       	ldi	r24, 0x01	; 1
    e11e:	08 c0       	rjmp	.+16     	; 0xe130 <update_level+0x246>
		} else {
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    e120:	07 ec       	ldi	r16, 0xC7	; 199
    e122:	2d ef       	ldi	r18, 0xFD	; 253
    e124:	4c e1       	ldi	r20, 0x1C	; 28
    e126:	61 e0       	ldi	r22, 0x01	; 1
    e128:	8f 5f       	subi	r24, 0xFF	; 255
    e12a:	0e 94 ab 68 	call	0xd156	; 0xd156 <planet_transition>
		}
	}
	return 0;
    e12e:	80 e0       	ldi	r24, 0x00	; 0
	
}
    e130:	df 91       	pop	r29
    e132:	cf 91       	pop	r28
    e134:	0f 91       	pop	r16
    e136:	ff 90       	pop	r15
    e138:	ef 90       	pop	r14
    e13a:	df 90       	pop	r13
    e13c:	cf 90       	pop	r12
    e13e:	08 95       	ret

0000e140 <update_pause>:
		}
	}
}

void update_pause()
{
    e140:	ef 92       	push	r14
    e142:	ff 92       	push	r15
    e144:	0f 93       	push	r16
    e146:	1f 93       	push	r17
    e148:	cf 93       	push	r28
    e14a:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    e14c:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    e150:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    e154:	80 91 45 0e 	lds	r24, 0x0E45
    e158:	83 ff       	sbrs	r24, 3
    e15a:	63 c0       	rjmp	.+198    	; 0xe222 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e15c:	06 95       	lsr	r16
    e15e:	06 95       	lsr	r16
    e160:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e162:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    e164:	c6 95       	lsr	r28
    e166:	c6 95       	lsr	r28
    e168:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e16a:	d0 e0       	ldi	r29, 0x00	; 0
    e16c:	c8 01       	movw	r24, r16
    e16e:	06 96       	adiw	r24, 0x06	; 6
    e170:	2e e1       	ldi	r18, 0x1E	; 30
    e172:	e2 2e       	mov	r14, r18
    e174:	f1 2c       	mov	r15, r1
    e176:	b7 01       	movw	r22, r14
    e178:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    e17c:	9e 01       	movw	r18, r28
    e17e:	28 5f       	subi	r18, 0xF8	; 248
    e180:	3f 4f       	sbci	r19, 0xFF	; 255
    e182:	44 e0       	ldi	r20, 0x04	; 4
    e184:	50 e6       	ldi	r21, 0x60	; 96
    e186:	68 2f       	mov	r22, r24
    e188:	82 2f       	mov	r24, r18
    e18a:	8f 71       	andi	r24, 0x1F	; 31
    e18c:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    e190:	c8 01       	movw	r24, r16
    e192:	09 96       	adiw	r24, 0x09	; 9
    e194:	b7 01       	movw	r22, r14
    e196:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    e19a:	9e 01       	movw	r18, r28
    e19c:	23 5f       	subi	r18, 0xF3	; 243
    e19e:	3f 4f       	sbci	r19, 0xFF	; 255
    e1a0:	45 ec       	ldi	r20, 0xC5	; 197
    e1a2:	5a e0       	ldi	r21, 0x0A	; 10
    e1a4:	68 2f       	mov	r22, r24
    e1a6:	82 2f       	mov	r24, r18
    e1a8:	8f 71       	andi	r24, 0x1F	; 31
    e1aa:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    e1ae:	c8 01       	movw	r24, r16
    e1b0:	0c 96       	adiw	r24, 0x0c	; 12
    e1b2:	b7 01       	movw	r22, r14
    e1b4:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    e1b8:	2a 96       	adiw	r28, 0x0a	; 10
    e1ba:	4b ec       	ldi	r20, 0xCB	; 203
    e1bc:	5a e0       	ldi	r21, 0x0A	; 10
    e1be:	68 2f       	mov	r22, r24
    e1c0:	8c 2f       	mov	r24, r28
    e1c2:	8f 71       	andi	r24, 0x1F	; 31
    e1c4:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    e1c8:	64 e1       	ldi	r22, 0x14	; 20
    e1ca:	80 e0       	ldi	r24, 0x00	; 0
    e1cc:	0e 94 a7 67 	call	0xcf4e	; 0xcf4e <hide_sprites>
		LBRotateSprites();
    e1d0:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    e1d4:	81 e0       	ldi	r24, 0x01	; 1
    e1d6:	90 e0       	ldi	r25, 0x00	; 0
    e1d8:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    e1dc:	60 e0       	ldi	r22, 0x00	; 0
    e1de:	85 e4       	ldi	r24, 0x45	; 69
    e1e0:	9e e0       	ldi	r25, 0x0E	; 14
    e1e2:	0e 94 b3 50 	call	0xa166	; 0xa166 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    e1e6:	80 91 45 0e 	lds	r24, 0x0E45
    e1ea:	90 91 46 0e 	lds	r25, 0x0E46
    e1ee:	83 ff       	sbrs	r24, 3
    e1f0:	08 c0       	rjmp	.+16     	; 0xe202 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    e1f2:	df 91       	pop	r29
    e1f4:	cf 91       	pop	r28
    e1f6:	1f 91       	pop	r17
    e1f8:	0f 91       	pop	r16
    e1fa:	ff 90       	pop	r15
    e1fc:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    e1fe:	0c 94 5c 5b 	jmp	0xb6b8	; 0xb6b8 <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    e202:	91 ff       	sbrs	r25, 1
    e204:	e7 cf       	rjmp	.-50     	; 0xe1d4 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    e206:	60 e0       	ldi	r22, 0x00	; 0
    e208:	70 e0       	ldi	r23, 0x00	; 0
    e20a:	89 ea       	ldi	r24, 0xA9	; 169
    e20c:	9a e0       	ldi	r25, 0x0A	; 10
    e20e:	0e 94 ce 6b 	call	0xd79c	; 0xd79c <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    e212:	df 91       	pop	r29
    e214:	cf 91       	pop	r28
    e216:	1f 91       	pop	r17
    e218:	0f 91       	pop	r16
    e21a:	ff 90       	pop	r15
    e21c:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    e21e:	0c 94 d9 6a 	jmp	0xd5b2	; 0xd5b2 <exit_game>
				break;
			}
		}
	}
}
    e222:	df 91       	pop	r29
    e224:	cf 91       	pop	r28
    e226:	1f 91       	pop	r17
    e228:	0f 91       	pop	r16
    e22a:	ff 90       	pop	r15
    e22c:	ef 90       	pop	r14
    e22e:	08 95       	ret

0000e230 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    e230:	cf 92       	push	r12
    e232:	df 92       	push	r13
    e234:	ff 92       	push	r15
    e236:	0f 93       	push	r16
    e238:	1f 93       	push	r17
    e23a:	cf 93       	push	r28
    e23c:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e23e:	20 91 c7 0d 	lds	r18, 0x0DC7
    e242:	f2 2e       	mov	r15, r18
    e244:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e246:	ef ea       	ldi	r30, 0xAF	; 175
    e248:	fc e0       	ldi	r31, 0x0C	; 12
    e24a:	84 81       	ldd	r24, Z+4	; 0x04
    e24c:	86 95       	lsr	r24
    e24e:	86 95       	lsr	r24
    e250:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e252:	08 2f       	mov	r16, r24
    e254:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e256:	c3 81       	ldd	r28, Z+3	; 0x03
    e258:	c6 95       	lsr	r28
    e25a:	c6 95       	lsr	r28
    e25c:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e25e:	d0 e0       	ldi	r29, 0x00	; 0
    e260:	c8 01       	movw	r24, r16
    e262:	06 96       	adiw	r24, 0x06	; 6
    e264:	2e e1       	ldi	r18, 0x1E	; 30
    e266:	c2 2e       	mov	r12, r18
    e268:	d1 2c       	mov	r13, r1
    e26a:	b6 01       	movw	r22, r12
    e26c:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    e270:	9e 01       	movw	r18, r28
    e272:	29 5f       	subi	r18, 0xF9	; 249
    e274:	3f 4f       	sbci	r19, 0xFF	; 255
    e276:	42 ea       	ldi	r20, 0xA2	; 162
    e278:	5f e5       	ldi	r21, 0x5F	; 95
    e27a:	68 2f       	mov	r22, r24
    e27c:	82 2f       	mov	r24, r18
    e27e:	8f 71       	andi	r24, 0x1F	; 31
    e280:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e284:	c8 01       	movw	r24, r16
    e286:	09 96       	adiw	r24, 0x09	; 9
    e288:	b6 01       	movw	r22, r12
    e28a:	0e 94 3f 73 	call	0xe67e	; 0xe67e <__divmodhi4>
    e28e:	be 01       	movw	r22, r28
    e290:	68 5f       	subi	r22, 0xF8	; 248
    e292:	7f 4f       	sbci	r23, 0xFF	; 255
    e294:	6f 71       	andi	r22, 0x1F	; 31
    e296:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e298:	93 e2       	ldi	r25, 0x23	; 35
    e29a:	f9 9e       	mul	r15, r25
    e29c:	90 01       	movw	r18, r0
    e29e:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e2a0:	48 2f       	mov	r20, r24
    e2a2:	c9 01       	movw	r24, r18
    e2a4:	8d 5a       	subi	r24, 0xAD	; 173
    e2a6:	96 4f       	sbci	r25, 0xF6	; 246
    e2a8:	0e 94 04 68 	call	0xd008	; 0xd008 <stream_text_anywhere>
	LBWaitSeconds(3);
    e2ac:	83 e0       	ldi	r24, 0x03	; 3
    e2ae:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <LBWaitSeconds>
	game.boss.active = 1;
    e2b2:	81 e0       	ldi	r24, 0x01	; 1
    e2b4:	80 93 59 0e 	sts	0x0E59, r24
	render_camera_view();
}
    e2b8:	df 91       	pop	r29
    e2ba:	cf 91       	pop	r28
    e2bc:	1f 91       	pop	r17
    e2be:	0f 91       	pop	r16
    e2c0:	ff 90       	pop	r15
    e2c2:	df 90       	pop	r13
    e2c4:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e2c6:	0c 94 5c 5b 	jmp	0xb6b8	; 0xb6b8 <render_camera_view>

0000e2ca <update_player_ai>:
}

void update_player_ai(Player* player) 
{
    e2ca:	cf 93       	push	r28
    e2cc:	df 93       	push	r29
    e2ce:	ec 01       	movw	r28, r24
	 static s8 last_shield_value;
	 
	 if (player->ai_flags == AI_NOT_READY) {
    e2d0:	89 85       	ldd	r24, Y+9	; 0x09
    e2d2:	81 11       	cpse	r24, r1
    e2d4:	0a c0       	rjmp	.+20     	; 0xe2ea <update_player_ai+0x20>
		 player->controls.held = BTN_LEFT;
    e2d6:	80 e4       	ldi	r24, 0x40	; 64
    e2d8:	90 e0       	ldi	r25, 0x00	; 0
    e2da:	fe 01       	movw	r30, r28
    e2dc:	e8 58       	subi	r30, 0x88	; 136
    e2de:	ff 4f       	sbci	r31, 0xFF	; 255
    e2e0:	91 83       	std	Z+1, r25	; 0x01
    e2e2:	80 83       	st	Z, r24
		 player->ai_flags = AI_READY;
    e2e4:	81 e0       	ldi	r24, 0x01	; 1
    e2e6:	89 87       	std	Y+9, r24	; 0x09
    e2e8:	55 c0       	rjmp	.+170    	; 0xe394 <update_player_ai+0xca>
	 }
	 else if (player->ai_flags & AI_READY) {
    e2ea:	80 ff       	sbrs	r24, 0
    e2ec:	1f c0       	rjmp	.+62     	; 0xe32c <update_player_ai+0x62>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e2ee:	fe 01       	movw	r30, r28
    e2f0:	ec 58       	subi	r30, 0x8C	; 140
    e2f2:	ff 4f       	sbci	r31, 0xFF	; 255
    e2f4:	15 82       	std	Z+5, r1	; 0x05
    e2f6:	14 82       	std	Z+4, r1	; 0x04
	p->pressed = 0;
    e2f8:	11 82       	std	Z+1, r1	; 0x01
    e2fa:	10 82       	st	Z, r1
	p->released = 0;
    e2fc:	13 82       	std	Z+3, r1	; 0x03
    e2fe:	12 82       	std	Z+2, r1	; 0x02
	p->held_cycles = 0;
    e300:	16 82       	std	Z+6, r1	; 0x06
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width) {
    e302:	80 91 b2 0d 	lds	r24, 0x0DB2
    e306:	90 91 b3 0d 	lds	r25, 0x0DB3
    e30a:	23 e0       	ldi	r18, 0x03	; 3
    e30c:	96 95       	lsr	r25
    e30e:	87 95       	ror	r24
    e310:	2a 95       	dec	r18
    e312:	e1 f7       	brne	.-8      	; 0xe30c <update_player_ai+0x42>
    e314:	4c 96       	adiw	r24, 0x1c	; 28
    e316:	20 91 c1 0d 	lds	r18, 0x0DC1
    e31a:	30 e0       	ldi	r19, 0x00	; 0
    e31c:	82 17       	cp	r24, r18
    e31e:	93 07       	cpc	r25, r19
    e320:	c8 f1       	brcs	.+114    	; 0xe394 <update_player_ai+0xca>
			 challenge();
    e322:	0e 94 18 71 	call	0xe230	; 0xe230 <challenge>
			 player->ai_flags = AI_WALKING;
    e326:	82 e0       	ldi	r24, 0x02	; 2
    e328:	89 87       	std	Y+9, r24	; 0x09
    e32a:	2d c0       	rjmp	.+90     	; 0xe386 <update_player_ai+0xbc>
			 player->controls.held = BTN_LEFT;
		 }
	 } else if (player->ai_flags & AI_WALKING) {
    e32c:	81 ff       	sbrs	r24, 1
    e32e:	32 c0       	rjmp	.+100    	; 0xe394 <update_player_ai+0xca>
		 player->controls.pressed = 0;
    e330:	fe 01       	movw	r30, r28
    e332:	ec 58       	subi	r30, 0x8C	; 140
    e334:	ff 4f       	sbci	r31, 0xFF	; 255
    e336:	11 82       	std	Z+1, r1	; 0x01
    e338:	10 82       	st	Z, r1
		 if (game.frame_counter % 15 == 0) {
    e33a:	80 91 cc 0d 	lds	r24, 0x0DCC
    e33e:	6f e0       	ldi	r22, 0x0F	; 15
    e340:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    e344:	91 11       	cpse	r25, r1
    e346:	04 c0       	rjmp	.+8      	; 0xe350 <update_player_ai+0x86>
			 player->controls.pressed = BTN_A;
    e348:	80 e0       	ldi	r24, 0x00	; 0
    e34a:	91 e0       	ldi	r25, 0x01	; 1
    e34c:	91 83       	std	Z+1, r25	; 0x01
    e34e:	80 83       	st	Z, r24
		 }
		 if (last_shield_value > player->shield) {
    e350:	90 91 f4 0c 	lds	r25, 0x0CF4
    e354:	8f 85       	ldd	r24, Y+15	; 0x0f
    e356:	89 17       	cp	r24, r25
    e358:	2c f4       	brge	.+10     	; 0xe364 <update_player_ai+0x9a>
			 player->controls.pressed |= BTN_B;
    e35a:	80 81       	ld	r24, Z
    e35c:	91 81       	ldd	r25, Z+1	; 0x01
    e35e:	81 60       	ori	r24, 0x01	; 1
    e360:	91 83       	std	Z+1, r25	; 0x01
    e362:	80 83       	st	Z, r24
		 }
		 if (player->shared.x <= game.camera_x) {
    e364:	28 81       	ld	r18, Y
    e366:	39 81       	ldd	r19, Y+1	; 0x01
    e368:	80 91 b2 0d 	lds	r24, 0x0DB2
    e36c:	90 91 b3 0d 	lds	r25, 0x0DB3
    e370:	82 17       	cp	r24, r18
    e372:	93 07       	cpc	r25, r19
    e374:	18 f0       	brcs	.+6      	; 0xe37c <update_player_ai+0xb2>
			 player->controls.held = BTN_RIGHT;
    e376:	80 e8       	ldi	r24, 0x80	; 128
    e378:	90 e0       	ldi	r25, 0x00	; 0
    e37a:	07 c0       	rjmp	.+14     	; 0xe38a <update_player_ai+0xc0>
		 } else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8) {
    e37c:	80 53       	subi	r24, 0x30	; 48
    e37e:	9f 4f       	sbci	r25, 0xFF	; 255
    e380:	28 17       	cp	r18, r24
    e382:	39 07       	cpc	r19, r25
    e384:	38 f0       	brcs	.+14     	; 0xe394 <update_player_ai+0xca>
			 player->controls.held = BTN_LEFT;
    e386:	80 e4       	ldi	r24, 0x40	; 64
    e388:	90 e0       	ldi	r25, 0x00	; 0
    e38a:	fe 01       	movw	r30, r28
    e38c:	e8 58       	subi	r30, 0x88	; 136
    e38e:	ff 4f       	sbci	r31, 0xFF	; 255
    e390:	91 83       	std	Z+1, r25	; 0x01
    e392:	80 83       	st	Z, r24
		 }
	 }
	 last_shield_value = player->shield;
    e394:	8f 85       	ldd	r24, Y+15	; 0x0f
    e396:	80 93 f4 0c 	sts	0x0CF4, r24
}
    e39a:	df 91       	pop	r29
    e39c:	cf 91       	pop	r28
    e39e:	08 95       	ret

0000e3a0 <prepare_debugging>:

#if DEBUG_MODE
void prepare_debugging() {
    e3a0:	1f 93       	push	r17
    e3a2:	cf 93       	push	r28
    e3a4:	df 93       	push	r29
	fade_through();
    e3a6:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <fade_through>
	Screen.scrollX = 0;
    e3aa:	ef ea       	ldi	r30, 0xAF	; 175
    e3ac:	fc e0       	ldi	r31, 0x0C	; 12
    e3ae:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    e3b0:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 29;
    e3b2:	1d e1       	ldi	r17, 0x1D	; 29
    e3b4:	15 83       	std	Z+5, r17	; 0x05
	Screen.overlayHeight = 3;
    e3b6:	83 e0       	ldi	r24, 0x03	; 3
    e3b8:	80 83       	st	Z, r24
	Screen.overlayTileTable = tiles_data;
    e3ba:	81 e4       	ldi	r24, 0x41	; 65
    e3bc:	97 e3       	ldi	r25, 0x37	; 55
    e3be:	92 83       	std	Z+2, r25	; 0x02
    e3c0:	81 83       	std	Z+1, r24	; 0x01
	clear_overlay(2);
    e3c2:	82 e0       	ldi	r24, 0x02	; 2
    e3c4:	0e 94 1c 5b 	call	0xb638	; 0xb638 <clear_overlay>
	game.current_screen = LEVEL;
    e3c8:	c2 eb       	ldi	r28, 0xB2	; 178
    e3ca:	dd e0       	ldi	r29, 0x0D	; 13
    e3cc:	82 e0       	ldi	r24, 0x02	; 2
    e3ce:	8c 8b       	std	Y+20, r24	; 0x14
	game.selection = START_SELECTED;
    e3d0:	19 8e       	std	Y+25, r1	; 0x19
	game.lives = LIVES;
    e3d2:	85 e0       	ldi	r24, 0x05	; 5
    e3d4:	8b 8b       	std	Y+19, r24	; 0x13
	game.score = 0;
    e3d6:	1b 82       	std	Y+3, r1	; 0x03
    e3d8:	1a 82       	std	Y+2, r1	; 0x02
	game.level_score = 0;
    e3da:	1d 82       	std	Y+5, r1	; 0x05
    e3dc:	1c 82       	std	Y+4, r1	; 0x04
	game.time = 0;
    e3de:	1f 82       	std	Y+7, r1	; 0x07
    e3e0:	1e 82       	std	Y+6, r1	; 0x06
	game.current_level_index = DEBUG_LEVEL;
    e3e2:	89 e0       	ldi	r24, 0x09	; 9
    e3e4:	8d 8b       	std	Y+21, r24	; 0x15
	game.level_ended = 0;
    e3e6:	1d 8e       	std	Y+29, r1	; 0x1d
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    e3e8:	64 e1       	ldi	r22, 0x14	; 20
    e3ea:	80 e0       	ldi	r24, 0x00	; 0
    e3ec:	0e 94 64 66 	call	0xccc8	; 0xccc8 <clear_sprites>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e3f0:	10 92 4a 0e 	sts	0x0E4A, r1
    e3f4:	10 92 49 0e 	sts	0x0E49, r1
	p->pressed = 0;
    e3f8:	10 92 46 0e 	sts	0x0E46, r1
    e3fc:	10 92 45 0e 	sts	0x0E45, r1
	p->released = 0;
    e400:	10 92 48 0e 	sts	0x0E48, r1
    e404:	10 92 47 0e 	sts	0x0E47, r1
	p->held_cycles = 0;
    e408:	10 92 4b 0e 	sts	0x0E4B, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e40c:	10 92 c5 0e 	sts	0x0EC5, r1
    e410:	10 92 c4 0e 	sts	0x0EC4, r1
	p->pressed = 0;
    e414:	10 92 c1 0e 	sts	0x0EC1, r1
    e418:	10 92 c0 0e 	sts	0x0EC0, r1
	p->released = 0;
    e41c:	10 92 c3 0e 	sts	0x0EC3, r1
    e420:	10 92 c2 0e 	sts	0x0EC2, r1
	p->held_cycles = 0;
    e424:	10 92 c6 0e 	sts	0x0EC6, r1
		case 4: map_level_info((char*) map_level_forest); break;
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
		case 9: map_level_info((char*) map_level_space_final); break;
    e428:	80 e0       	ldi	r24, 0x00	; 0
    e42a:	90 e7       	ldi	r25, 0x70	; 112
    e42c:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <map_level_info>
	}
	game.column_count = 0;
    e430:	19 8a       	std	Y+17, r1	; 0x11
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
#else
	game.camera_x = 199*8;
    e432:	88 e3       	ldi	r24, 0x38	; 56
    e434:	96 e0       	ldi	r25, 0x06	; 6
    e436:	99 83       	std	Y+1, r25	; 0x01
    e438:	88 83       	st	Y, r24
	game.camera_y = 0*8;
    e43a:	18 86       	std	Y+8, r1	; 0x08
	game.player.shared.x = 202*8;
    e43c:	80 e5       	ldi	r24, 0x50	; 80
    e43e:	96 e0       	ldi	r25, 0x06	; 6
    e440:	98 a3       	std	Y+32, r25	; 0x20
    e442:	8f 8f       	std	Y+31, r24	; 0x1f
	game.player.shared.y = 21*8;
    e444:	88 ea       	ldi	r24, 0xA8	; 168
    e446:	90 e0       	ldi	r25, 0x00	; 0
    e448:	9a a3       	std	Y+34, r25	; 0x22
    e44a:	89 a3       	std	Y+33, r24	; 0x21
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    e44c:	24 ee       	ldi	r18, 0xE4	; 228
    e44e:	29 87       	std	Y+9, r18	; 0x09
    game.scroll_dest_x = 29;
    e450:	1d 87       	std	Y+13, r17	; 0x0d
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    e452:	2a e1       	ldi	r18, 0x1A	; 26
    e454:	2a 87       	std	Y+10, r18	; 0x0a
    game.scroll_dest_y =  26;
    e456:	2e 87       	std	Y+14, r18	; 0x0e
#endif
	game.boss.shared.x = get_boss_spawn_x(DEBUG_LEVEL)*8;
    e458:	28 ed       	ldi	r18, 0xD8	; 216
    e45a:	37 e0       	ldi	r19, 0x07	; 7
    e45c:	30 93 4d 0e 	sts	0x0E4D, r19
    e460:	20 93 4c 0e 	sts	0x0E4C, r18
	game.boss.shared.y = get_boss_spawn_y(DEBUG_LEVEL)*8;
    e464:	90 93 4f 0e 	sts	0x0E4F, r25
    e468:	80 93 4e 0e 	sts	0x0E4E, r24
	game.scroll_x = 0;
    e46c:	1b 86       	std	Y+11, r1	; 0x0b
	game.scroll_y = 0;
    e46e:	1c 86       	std	Y+12, r1	; 0x0c
	game.spawn_rate = BASE_SPAWN_RATE;
    e470:	8a e0       	ldi	r24, 0x0A	; 10
    e472:	8c 8f       	std	Y+28, r24	; 0x1c
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    e474:	40 ef       	ldi	r20, 0xF0	; 240
    e476:	5a e0       	ldi	r21, 0x0A	; 10
    e478:	6d e1       	ldi	r22, 0x1D	; 29
    e47a:	80 e0       	ldi	r24, 0x00	; 0
    e47c:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    e480:	43 ee       	ldi	r20, 0xE3	; 227
    e482:	5a e0       	ldi	r21, 0x0A	; 10
    e484:	6d e1       	ldi	r22, 0x1D	; 29
    e486:	82 e1       	ldi	r24, 0x12	; 18
    e488:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    e48c:	49 ee       	ldi	r20, 0xE9	; 233
    e48e:	5a e0       	ldi	r21, 0x0A	; 10
    e490:	6e e1       	ldi	r22, 0x1E	; 30
    e492:	80 e0       	ldi	r24, 0x00	; 0
    e494:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    e498:	48 ef       	ldi	r20, 0xF8	; 248
    e49a:	5a e0       	ldi	r21, 0x0A	; 10
    e49c:	6e e1       	ldi	r22, 0x1E	; 30
    e49e:	81 e1       	ldi	r24, 0x11	; 17
    e4a0:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    e4a4:	42 ea       	ldi	r20, 0xA2	; 162
    e4a6:	5a e0       	ldi	r21, 0x0A	; 10
    e4a8:	6f e1       	ldi	r22, 0x1F	; 31
    e4aa:	81 e1       	ldi	r24, 0x11	; 17
    e4ac:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    e4b0:	21 e0       	ldi	r18, 0x01	; 1
    e4b2:	4e a5       	ldd	r20, Y+46	; 0x2e
    e4b4:	6d e1       	ldi	r22, 0x1D	; 29
    e4b6:	89 e0       	ldi	r24, 0x09	; 9
    e4b8:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    e4bc:	4e 81       	ldd	r20, Y+6	; 0x06
    e4be:	5f 81       	ldd	r21, Y+7	; 0x07
    e4c0:	21 e0       	ldi	r18, 0x01	; 1
    e4c2:	6d e1       	ldi	r22, 0x1D	; 29
    e4c4:	8b e1       	ldi	r24, 0x1B	; 27
    e4c6:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    e4ca:	21 e0       	ldi	r18, 0x01	; 1
    e4cc:	4b 89       	ldd	r20, Y+19	; 0x13
    e4ce:	6e e1       	ldi	r22, 0x1E	; 30
    e4d0:	89 e0       	ldi	r24, 0x09	; 9
    e4d2:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    e4d6:	4c 81       	ldd	r20, Y+4	; 0x04
    e4d8:	5d 81       	ldd	r21, Y+5	; 0x05
    e4da:	21 e0       	ldi	r18, 0x01	; 1
    e4dc:	6e e1       	ldi	r22, 0x1E	; 30
    e4de:	8b e1       	ldi	r24, 0x1B	; 27
    e4e0:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    e4e4:	4a 81       	ldd	r20, Y+2	; 0x02
    e4e6:	5b 81       	ldd	r21, Y+3	; 0x03
    e4e8:	21 e0       	ldi	r18, 0x01	; 1
    e4ea:	6f e1       	ldi	r22, 0x1F	; 31
    e4ec:	8b e1       	ldi	r24, 0x1B	; 27
    e4ee:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	init_player_state();
    e4f2:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    e4f6:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
    e4fa:	0e 94 d1 52 	call	0xa5a2	; 0xa5a2 <init_enemy_state>
	render_camera_view();
    e4fe:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <render_camera_view>
	music_transition();
}
    e502:	df 91       	pop	r29
    e504:	cf 91       	pop	r28
    e506:	1f 91       	pop	r17
	
	init_player_state();
	init_boss_state();
	init_enemy_state();
	render_camera_view();
	music_transition();
    e508:	0c 94 9b 68 	jmp	0xd136	; 0xd136 <music_transition>

0000e50c <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e50c:	0e 94 60 41 	call	0x82c0	; 0x82c0 <GetTrueRandomSeed>
    e510:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e514:	89 e9       	ldi	r24, 0x99	; 153
    e516:	9c e1       	ldi	r25, 0x1C	; 28
    e518:	0e 94 ba 43 	call	0x8774	; 0x8774 <InitMusicPlayer>
	ClearVram();
    e51c:	0e 94 e8 40 	call	0x81d0	; 0x81d0 <ClearVram>
	SetMasterVolume(0x05);
    e520:	85 e0       	ldi	r24, 0x05	; 5
    e522:	0e 94 6e 47 	call	0x8edc	; 0x8edc <SetMasterVolume>
	SetTileTable(tiles_data);
    e526:	81 e4       	ldi	r24, 0x41	; 65
    e528:	97 e3       	ldi	r25, 0x37	; 55
    e52a:	0e 94 03 41 	call	0x8206	; 0x8206 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e52e:	88 e1       	ldi	r24, 0x18	; 24
    e530:	9e e1       	ldi	r25, 0x1E	; 30
    e532:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e536:	81 e4       	ldi	r24, 0x41	; 65
    e538:	9f e5       	ldi	r25, 0x5F	; 95
    e53a:	90 93 85 0d 	sts	0x0D85, r25
    e53e:	80 93 84 0d 	sts	0x0D84, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e542:	0e 94 bb 52 	call	0xa576	; 0xa576 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
    e546:	0e 94 d0 71 	call	0xe3a0	; 0xe3a0 <prepare_debugging>
#else
	load_splash();
#endif
	while (1)
	{
		WaitVsync(1);
    e54a:	81 e0       	ldi	r24, 0x01	; 1
    e54c:	90 e0       	ldi	r25, 0x00	; 0
    e54e:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e552:	60 e0       	ldi	r22, 0x00	; 0
    e554:	85 e4       	ldi	r24, 0x45	; 69
    e556:	9e e0       	ldi	r25, 0x0E	; 14
    e558:	0e 94 b3 50 	call	0xa166	; 0xa166 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e55c:	80 91 c6 0d 	lds	r24, 0x0DC6
    e560:	82 30       	cpi	r24, 0x02	; 2
    e562:	09 f0       	breq	.+2      	; 0xe566 <main+0x5a>
    e564:	52 c0       	rjmp	.+164    	; 0xe60a <main+0xfe>
		{
			if (update_level()) continue;
    e566:	0e 94 75 6f 	call	0xdeea	; 0xdeea <update_level>
    e56a:	81 11       	cpse	r24, r1
    e56c:	ee cf       	rjmp	.-36     	; 0xe54a <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    e56e:	60 e0       	ldi	r22, 0x00	; 0
    e570:	81 ed       	ldi	r24, 0xD1	; 209
    e572:	9d e0       	ldi	r25, 0x0D	; 13
    e574:	0e 94 4d 6d 	call	0xda9a	; 0xda9a <update_player>
    e578:	88 23       	and	r24, r24
    e57a:	e9 f0       	breq	.+58     	; 0xe5b6 <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e57c:	66 e0       	ldi	r22, 0x06	; 6
    e57e:	81 ed       	ldi	r24, 0xD1	; 209
    e580:	9d e0       	ldi	r25, 0x0D	; 13
    e582:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <update_shot>
				update_enemies();
    e586:	0e 94 02 64 	call	0xc804	; 0xc804 <update_enemies>
				update_enemy_shots();
    e58a:	0e 94 6b 64 	call	0xc8d6	; 0xc8d6 <update_enemy_shots>
				animate_enemies();
    e58e:	0e 94 fd 64 	call	0xc9fa	; 0xc9fa <animate_enemies>
				animate_enemy_shots();
    e592:	0e 94 c2 65 	call	0xcb84	; 0xcb84 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e596:	40 e0       	ldi	r20, 0x00	; 0
    e598:	6c e4       	ldi	r22, 0x4C	; 76
    e59a:	7e e0       	ldi	r23, 0x0E	; 14
    e59c:	81 ed       	ldi	r24, 0xD1	; 209
    e59e:	9d e0       	ldi	r25, 0x0D	; 13
    e5a0:	0e 94 24 63 	call	0xc648	; 0xc648 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e5a4:	46 e0       	ldi	r20, 0x06	; 6
    e5a6:	6c e4       	ldi	r22, 0x4C	; 76
    e5a8:	7e e0       	ldi	r23, 0x0E	; 14
    e5aa:	81 ed       	ldi	r24, 0xD1	; 209
    e5ac:	9d e0       	ldi	r25, 0x0D	; 13
    e5ae:	0e 94 f9 60 	call	0xc1f2	; 0xc1f2 <animate_shot>
				update_pause();
    e5b2:	0e 94 a0 70 	call	0xe140	; 0xe140 <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e5b6:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    e5ba:	81 11       	cpse	r24, r1
    e5bc:	2f c0       	rjmp	.+94     	; 0xe61c <main+0x110>
    e5be:	80 91 b2 0d 	lds	r24, 0x0DB2
    e5c2:	90 91 b3 0d 	lds	r25, 0x0DB3
    e5c6:	88 3f       	cpi	r24, 0xF8	; 248
    e5c8:	96 40       	sbci	r25, 0x06	; 6
    e5ca:	40 f1       	brcs	.+80     	; 0xe61c <main+0x110>
    e5cc:	69 e0       	ldi	r22, 0x09	; 9
    e5ce:	8c e4       	ldi	r24, 0x4C	; 76
    e5d0:	9e e0       	ldi	r25, 0x0E	; 14
    e5d2:	0e 94 4d 6d 	call	0xda9a	; 0xda9a <update_player>
    e5d6:	88 23       	and	r24, r24
    e5d8:	09 f1       	breq	.+66     	; 0xe61c <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e5da:	6f e0       	ldi	r22, 0x0F	; 15
    e5dc:	8c e4       	ldi	r24, 0x4C	; 76
    e5de:	9e e0       	ldi	r25, 0x0E	; 14
    e5e0:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e5e4:	49 e0       	ldi	r20, 0x09	; 9
    e5e6:	61 ed       	ldi	r22, 0xD1	; 209
    e5e8:	7d e0       	ldi	r23, 0x0D	; 13
    e5ea:	8c e4       	ldi	r24, 0x4C	; 76
    e5ec:	9e e0       	ldi	r25, 0x0E	; 14
    e5ee:	0e 94 24 63 	call	0xc648	; 0xc648 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e5f2:	4f e0       	ldi	r20, 0x0F	; 15
    e5f4:	61 ed       	ldi	r22, 0xD1	; 209
    e5f6:	7d e0       	ldi	r23, 0x0D	; 13
    e5f8:	8c e4       	ldi	r24, 0x4C	; 76
    e5fa:	9e e0       	ldi	r25, 0x0E	; 14
    e5fc:	0e 94 f9 60 	call	0xc1f2	; 0xc1f2 <animate_shot>
				update_player_ai(&game.boss);
    e600:	8c e4       	ldi	r24, 0x4C	; 76
    e602:	9e e0       	ldi	r25, 0x0E	; 14
    e604:	0e 94 65 71 	call	0xe2ca	; 0xe2ca <update_player_ai>
    e608:	09 c0       	rjmp	.+18     	; 0xe61c <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    e60a:	81 11       	cpse	r24, r1
    e60c:	03 c0       	rjmp	.+6      	; 0xe614 <main+0x108>
		{
			update_splash();
    e60e:	0e 94 e9 6a 	call	0xd5d2	; 0xd5d2 <update_splash>
    e612:	04 c0       	rjmp	.+8      	; 0xe61c <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e614:	81 30       	cpi	r24, 0x01	; 1
    e616:	11 f4       	brne	.+4      	; 0xe61c <main+0x110>
		{
			update_high_scores();
    e618:	0e 94 30 6b 	call	0xd660	; 0xd660 <update_high_scores>
			
		}
		LBRotateSprites();
    e61c:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
    e620:	94 cf       	rjmp	.-216    	; 0xe54a <main+0x3e>

0000e622 <__udivmodqi4>:
    e622:	99 1b       	sub	r25, r25
    e624:	79 e0       	ldi	r23, 0x09	; 9
    e626:	04 c0       	rjmp	.+8      	; 0xe630 <__udivmodqi4_ep>

0000e628 <__udivmodqi4_loop>:
    e628:	99 1f       	adc	r25, r25
    e62a:	96 17       	cp	r25, r22
    e62c:	08 f0       	brcs	.+2      	; 0xe630 <__udivmodqi4_ep>
    e62e:	96 1b       	sub	r25, r22

0000e630 <__udivmodqi4_ep>:
    e630:	88 1f       	adc	r24, r24
    e632:	7a 95       	dec	r23
    e634:	c9 f7       	brne	.-14     	; 0xe628 <__udivmodqi4_loop>
    e636:	80 95       	com	r24
    e638:	08 95       	ret

0000e63a <__divmodqi4>:
    e63a:	87 fb       	bst	r24, 7
    e63c:	08 2e       	mov	r0, r24
    e63e:	06 26       	eor	r0, r22
    e640:	87 fd       	sbrc	r24, 7
    e642:	81 95       	neg	r24
    e644:	67 fd       	sbrc	r22, 7
    e646:	61 95       	neg	r22
    e648:	0e 94 11 73 	call	0xe622	; 0xe622 <__udivmodqi4>
    e64c:	0e f4       	brtc	.+2      	; 0xe650 <__divmodqi4_1>
    e64e:	91 95       	neg	r25

0000e650 <__divmodqi4_1>:
    e650:	07 fc       	sbrc	r0, 7
    e652:	81 95       	neg	r24

0000e654 <__divmodqi4_exit>:
    e654:	08 95       	ret

0000e656 <__udivmodhi4>:
    e656:	aa 1b       	sub	r26, r26
    e658:	bb 1b       	sub	r27, r27
    e65a:	51 e1       	ldi	r21, 0x11	; 17
    e65c:	07 c0       	rjmp	.+14     	; 0xe66c <__udivmodhi4_ep>

0000e65e <__udivmodhi4_loop>:
    e65e:	aa 1f       	adc	r26, r26
    e660:	bb 1f       	adc	r27, r27
    e662:	a6 17       	cp	r26, r22
    e664:	b7 07       	cpc	r27, r23
    e666:	10 f0       	brcs	.+4      	; 0xe66c <__udivmodhi4_ep>
    e668:	a6 1b       	sub	r26, r22
    e66a:	b7 0b       	sbc	r27, r23

0000e66c <__udivmodhi4_ep>:
    e66c:	88 1f       	adc	r24, r24
    e66e:	99 1f       	adc	r25, r25
    e670:	5a 95       	dec	r21
    e672:	a9 f7       	brne	.-22     	; 0xe65e <__udivmodhi4_loop>
    e674:	80 95       	com	r24
    e676:	90 95       	com	r25
    e678:	bc 01       	movw	r22, r24
    e67a:	cd 01       	movw	r24, r26
    e67c:	08 95       	ret

0000e67e <__divmodhi4>:
    e67e:	97 fb       	bst	r25, 7
    e680:	07 2e       	mov	r0, r23
    e682:	16 f4       	brtc	.+4      	; 0xe688 <__divmodhi4+0xa>
    e684:	00 94       	com	r0
    e686:	07 d0       	rcall	.+14     	; 0xe696 <__divmodhi4_neg1>
    e688:	77 fd       	sbrc	r23, 7
    e68a:	09 d0       	rcall	.+18     	; 0xe69e <__divmodhi4_neg2>
    e68c:	0e 94 2b 73 	call	0xe656	; 0xe656 <__udivmodhi4>
    e690:	07 fc       	sbrc	r0, 7
    e692:	05 d0       	rcall	.+10     	; 0xe69e <__divmodhi4_neg2>
    e694:	3e f4       	brtc	.+14     	; 0xe6a4 <__divmodhi4_exit>

0000e696 <__divmodhi4_neg1>:
    e696:	90 95       	com	r25
    e698:	81 95       	neg	r24
    e69a:	9f 4f       	sbci	r25, 0xFF	; 255
    e69c:	08 95       	ret

0000e69e <__divmodhi4_neg2>:
    e69e:	70 95       	com	r23
    e6a0:	61 95       	neg	r22
    e6a2:	7f 4f       	sbci	r23, 0xFF	; 255

0000e6a4 <__divmodhi4_exit>:
    e6a4:	08 95       	ret

0000e6a6 <__tablejump2__>:
    e6a6:	ee 0f       	add	r30, r30
    e6a8:	ff 1f       	adc	r31, r31
    e6aa:	05 90       	lpm	r0, Z+
    e6ac:	f4 91       	lpm	r31, Z
    e6ae:	e0 2d       	mov	r30, r0
    e6b0:	09 94       	ijmp

0000e6b2 <__subsf3>:
    e6b2:	50 58       	subi	r21, 0x80	; 128

0000e6b4 <__addsf3>:
    e6b4:	bb 27       	eor	r27, r27
    e6b6:	aa 27       	eor	r26, r26
    e6b8:	0e d0       	rcall	.+28     	; 0xe6d6 <__addsf3x>
    e6ba:	e5 c0       	rjmp	.+458    	; 0xe886 <__fp_round>
    e6bc:	d6 d0       	rcall	.+428    	; 0xe86a <__fp_pscA>
    e6be:	30 f0       	brcs	.+12     	; 0xe6cc <__addsf3+0x18>
    e6c0:	db d0       	rcall	.+438    	; 0xe878 <__fp_pscB>
    e6c2:	20 f0       	brcs	.+8      	; 0xe6cc <__addsf3+0x18>
    e6c4:	31 f4       	brne	.+12     	; 0xe6d2 <__addsf3+0x1e>
    e6c6:	9f 3f       	cpi	r25, 0xFF	; 255
    e6c8:	11 f4       	brne	.+4      	; 0xe6ce <__addsf3+0x1a>
    e6ca:	1e f4       	brtc	.+6      	; 0xe6d2 <__addsf3+0x1e>
    e6cc:	cb c0       	rjmp	.+406    	; 0xe864 <__fp_nan>
    e6ce:	0e f4       	brtc	.+2      	; 0xe6d2 <__addsf3+0x1e>
    e6d0:	e0 95       	com	r30
    e6d2:	e7 fb       	bst	r30, 7
    e6d4:	c1 c0       	rjmp	.+386    	; 0xe858 <__fp_inf>

0000e6d6 <__addsf3x>:
    e6d6:	e9 2f       	mov	r30, r25
    e6d8:	e7 d0       	rcall	.+462    	; 0xe8a8 <__fp_split3>
    e6da:	80 f3       	brcs	.-32     	; 0xe6bc <__addsf3+0x8>
    e6dc:	ba 17       	cp	r27, r26
    e6de:	62 07       	cpc	r22, r18
    e6e0:	73 07       	cpc	r23, r19
    e6e2:	84 07       	cpc	r24, r20
    e6e4:	95 07       	cpc	r25, r21
    e6e6:	18 f0       	brcs	.+6      	; 0xe6ee <__addsf3x+0x18>
    e6e8:	71 f4       	brne	.+28     	; 0xe706 <__addsf3x+0x30>
    e6ea:	9e f5       	brtc	.+102    	; 0xe752 <__addsf3x+0x7c>
    e6ec:	ff c0       	rjmp	.+510    	; 0xe8ec <__fp_zero>
    e6ee:	0e f4       	brtc	.+2      	; 0xe6f2 <__addsf3x+0x1c>
    e6f0:	e0 95       	com	r30
    e6f2:	0b 2e       	mov	r0, r27
    e6f4:	ba 2f       	mov	r27, r26
    e6f6:	a0 2d       	mov	r26, r0
    e6f8:	0b 01       	movw	r0, r22
    e6fa:	b9 01       	movw	r22, r18
    e6fc:	90 01       	movw	r18, r0
    e6fe:	0c 01       	movw	r0, r24
    e700:	ca 01       	movw	r24, r20
    e702:	a0 01       	movw	r20, r0
    e704:	11 24       	eor	r1, r1
    e706:	ff 27       	eor	r31, r31
    e708:	59 1b       	sub	r21, r25
    e70a:	99 f0       	breq	.+38     	; 0xe732 <__addsf3x+0x5c>
    e70c:	59 3f       	cpi	r21, 0xF9	; 249
    e70e:	50 f4       	brcc	.+20     	; 0xe724 <__addsf3x+0x4e>
    e710:	50 3e       	cpi	r21, 0xE0	; 224
    e712:	68 f1       	brcs	.+90     	; 0xe76e <__addsf3x+0x98>
    e714:	1a 16       	cp	r1, r26
    e716:	f0 40       	sbci	r31, 0x00	; 0
    e718:	a2 2f       	mov	r26, r18
    e71a:	23 2f       	mov	r18, r19
    e71c:	34 2f       	mov	r19, r20
    e71e:	44 27       	eor	r20, r20
    e720:	58 5f       	subi	r21, 0xF8	; 248
    e722:	f3 cf       	rjmp	.-26     	; 0xe70a <__addsf3x+0x34>
    e724:	46 95       	lsr	r20
    e726:	37 95       	ror	r19
    e728:	27 95       	ror	r18
    e72a:	a7 95       	ror	r26
    e72c:	f0 40       	sbci	r31, 0x00	; 0
    e72e:	53 95       	inc	r21
    e730:	c9 f7       	brne	.-14     	; 0xe724 <__addsf3x+0x4e>
    e732:	7e f4       	brtc	.+30     	; 0xe752 <__addsf3x+0x7c>
    e734:	1f 16       	cp	r1, r31
    e736:	ba 0b       	sbc	r27, r26
    e738:	62 0b       	sbc	r22, r18
    e73a:	73 0b       	sbc	r23, r19
    e73c:	84 0b       	sbc	r24, r20
    e73e:	ba f0       	brmi	.+46     	; 0xe76e <__addsf3x+0x98>
    e740:	91 50       	subi	r25, 0x01	; 1
    e742:	a1 f0       	breq	.+40     	; 0xe76c <__addsf3x+0x96>
    e744:	ff 0f       	add	r31, r31
    e746:	bb 1f       	adc	r27, r27
    e748:	66 1f       	adc	r22, r22
    e74a:	77 1f       	adc	r23, r23
    e74c:	88 1f       	adc	r24, r24
    e74e:	c2 f7       	brpl	.-16     	; 0xe740 <__addsf3x+0x6a>
    e750:	0e c0       	rjmp	.+28     	; 0xe76e <__addsf3x+0x98>
    e752:	ba 0f       	add	r27, r26
    e754:	62 1f       	adc	r22, r18
    e756:	73 1f       	adc	r23, r19
    e758:	84 1f       	adc	r24, r20
    e75a:	48 f4       	brcc	.+18     	; 0xe76e <__addsf3x+0x98>
    e75c:	87 95       	ror	r24
    e75e:	77 95       	ror	r23
    e760:	67 95       	ror	r22
    e762:	b7 95       	ror	r27
    e764:	f7 95       	ror	r31
    e766:	9e 3f       	cpi	r25, 0xFE	; 254
    e768:	08 f0       	brcs	.+2      	; 0xe76c <__addsf3x+0x96>
    e76a:	b3 cf       	rjmp	.-154    	; 0xe6d2 <__addsf3+0x1e>
    e76c:	93 95       	inc	r25
    e76e:	88 0f       	add	r24, r24
    e770:	08 f0       	brcs	.+2      	; 0xe774 <__addsf3x+0x9e>
    e772:	99 27       	eor	r25, r25
    e774:	ee 0f       	add	r30, r30
    e776:	97 95       	ror	r25
    e778:	87 95       	ror	r24
    e77a:	08 95       	ret

0000e77c <__fixsfsi>:
    e77c:	04 d0       	rcall	.+8      	; 0xe786 <__fixunssfsi>
    e77e:	68 94       	set
    e780:	b1 11       	cpse	r27, r1
    e782:	b5 c0       	rjmp	.+362    	; 0xe8ee <__fp_szero>
    e784:	08 95       	ret

0000e786 <__fixunssfsi>:
    e786:	98 d0       	rcall	.+304    	; 0xe8b8 <__fp_splitA>
    e788:	88 f0       	brcs	.+34     	; 0xe7ac <__fixunssfsi+0x26>
    e78a:	9f 57       	subi	r25, 0x7F	; 127
    e78c:	90 f0       	brcs	.+36     	; 0xe7b2 <__fixunssfsi+0x2c>
    e78e:	b9 2f       	mov	r27, r25
    e790:	99 27       	eor	r25, r25
    e792:	b7 51       	subi	r27, 0x17	; 23
    e794:	a0 f0       	brcs	.+40     	; 0xe7be <__fixunssfsi+0x38>
    e796:	d1 f0       	breq	.+52     	; 0xe7cc <__fixunssfsi+0x46>
    e798:	66 0f       	add	r22, r22
    e79a:	77 1f       	adc	r23, r23
    e79c:	88 1f       	adc	r24, r24
    e79e:	99 1f       	adc	r25, r25
    e7a0:	1a f0       	brmi	.+6      	; 0xe7a8 <__fixunssfsi+0x22>
    e7a2:	ba 95       	dec	r27
    e7a4:	c9 f7       	brne	.-14     	; 0xe798 <__fixunssfsi+0x12>
    e7a6:	12 c0       	rjmp	.+36     	; 0xe7cc <__fixunssfsi+0x46>
    e7a8:	b1 30       	cpi	r27, 0x01	; 1
    e7aa:	81 f0       	breq	.+32     	; 0xe7cc <__fixunssfsi+0x46>
    e7ac:	9f d0       	rcall	.+318    	; 0xe8ec <__fp_zero>
    e7ae:	b1 e0       	ldi	r27, 0x01	; 1
    e7b0:	08 95       	ret
    e7b2:	9c c0       	rjmp	.+312    	; 0xe8ec <__fp_zero>
    e7b4:	67 2f       	mov	r22, r23
    e7b6:	78 2f       	mov	r23, r24
    e7b8:	88 27       	eor	r24, r24
    e7ba:	b8 5f       	subi	r27, 0xF8	; 248
    e7bc:	39 f0       	breq	.+14     	; 0xe7cc <__fixunssfsi+0x46>
    e7be:	b9 3f       	cpi	r27, 0xF9	; 249
    e7c0:	cc f3       	brlt	.-14     	; 0xe7b4 <__fixunssfsi+0x2e>
    e7c2:	86 95       	lsr	r24
    e7c4:	77 95       	ror	r23
    e7c6:	67 95       	ror	r22
    e7c8:	b3 95       	inc	r27
    e7ca:	d9 f7       	brne	.-10     	; 0xe7c2 <__fixunssfsi+0x3c>
    e7cc:	3e f4       	brtc	.+14     	; 0xe7dc <__fixunssfsi+0x56>
    e7ce:	90 95       	com	r25
    e7d0:	80 95       	com	r24
    e7d2:	70 95       	com	r23
    e7d4:	61 95       	neg	r22
    e7d6:	7f 4f       	sbci	r23, 0xFF	; 255
    e7d8:	8f 4f       	sbci	r24, 0xFF	; 255
    e7da:	9f 4f       	sbci	r25, 0xFF	; 255
    e7dc:	08 95       	ret

0000e7de <__floatunsisf>:
    e7de:	e8 94       	clt
    e7e0:	09 c0       	rjmp	.+18     	; 0xe7f4 <__floatsisf+0x12>

0000e7e2 <__floatsisf>:
    e7e2:	97 fb       	bst	r25, 7
    e7e4:	3e f4       	brtc	.+14     	; 0xe7f4 <__floatsisf+0x12>
    e7e6:	90 95       	com	r25
    e7e8:	80 95       	com	r24
    e7ea:	70 95       	com	r23
    e7ec:	61 95       	neg	r22
    e7ee:	7f 4f       	sbci	r23, 0xFF	; 255
    e7f0:	8f 4f       	sbci	r24, 0xFF	; 255
    e7f2:	9f 4f       	sbci	r25, 0xFF	; 255
    e7f4:	99 23       	and	r25, r25
    e7f6:	a9 f0       	breq	.+42     	; 0xe822 <__floatsisf+0x40>
    e7f8:	f9 2f       	mov	r31, r25
    e7fa:	96 e9       	ldi	r25, 0x96	; 150
    e7fc:	bb 27       	eor	r27, r27
    e7fe:	93 95       	inc	r25
    e800:	f6 95       	lsr	r31
    e802:	87 95       	ror	r24
    e804:	77 95       	ror	r23
    e806:	67 95       	ror	r22
    e808:	b7 95       	ror	r27
    e80a:	f1 11       	cpse	r31, r1
    e80c:	f8 cf       	rjmp	.-16     	; 0xe7fe <__floatsisf+0x1c>
    e80e:	fa f4       	brpl	.+62     	; 0xe84e <__floatsisf+0x6c>
    e810:	bb 0f       	add	r27, r27
    e812:	11 f4       	brne	.+4      	; 0xe818 <__floatsisf+0x36>
    e814:	60 ff       	sbrs	r22, 0
    e816:	1b c0       	rjmp	.+54     	; 0xe84e <__floatsisf+0x6c>
    e818:	6f 5f       	subi	r22, 0xFF	; 255
    e81a:	7f 4f       	sbci	r23, 0xFF	; 255
    e81c:	8f 4f       	sbci	r24, 0xFF	; 255
    e81e:	9f 4f       	sbci	r25, 0xFF	; 255
    e820:	16 c0       	rjmp	.+44     	; 0xe84e <__floatsisf+0x6c>
    e822:	88 23       	and	r24, r24
    e824:	11 f0       	breq	.+4      	; 0xe82a <__floatsisf+0x48>
    e826:	96 e9       	ldi	r25, 0x96	; 150
    e828:	11 c0       	rjmp	.+34     	; 0xe84c <__floatsisf+0x6a>
    e82a:	77 23       	and	r23, r23
    e82c:	21 f0       	breq	.+8      	; 0xe836 <__floatsisf+0x54>
    e82e:	9e e8       	ldi	r25, 0x8E	; 142
    e830:	87 2f       	mov	r24, r23
    e832:	76 2f       	mov	r23, r22
    e834:	05 c0       	rjmp	.+10     	; 0xe840 <__floatsisf+0x5e>
    e836:	66 23       	and	r22, r22
    e838:	71 f0       	breq	.+28     	; 0xe856 <__floatsisf+0x74>
    e83a:	96 e8       	ldi	r25, 0x86	; 134
    e83c:	86 2f       	mov	r24, r22
    e83e:	70 e0       	ldi	r23, 0x00	; 0
    e840:	60 e0       	ldi	r22, 0x00	; 0
    e842:	2a f0       	brmi	.+10     	; 0xe84e <__floatsisf+0x6c>
    e844:	9a 95       	dec	r25
    e846:	66 0f       	add	r22, r22
    e848:	77 1f       	adc	r23, r23
    e84a:	88 1f       	adc	r24, r24
    e84c:	da f7       	brpl	.-10     	; 0xe844 <__floatsisf+0x62>
    e84e:	88 0f       	add	r24, r24
    e850:	96 95       	lsr	r25
    e852:	87 95       	ror	r24
    e854:	97 f9       	bld	r25, 7
    e856:	08 95       	ret

0000e858 <__fp_inf>:
    e858:	97 f9       	bld	r25, 7
    e85a:	9f 67       	ori	r25, 0x7F	; 127
    e85c:	80 e8       	ldi	r24, 0x80	; 128
    e85e:	70 e0       	ldi	r23, 0x00	; 0
    e860:	60 e0       	ldi	r22, 0x00	; 0
    e862:	08 95       	ret

0000e864 <__fp_nan>:
    e864:	9f ef       	ldi	r25, 0xFF	; 255
    e866:	80 ec       	ldi	r24, 0xC0	; 192
    e868:	08 95       	ret

0000e86a <__fp_pscA>:
    e86a:	00 24       	eor	r0, r0
    e86c:	0a 94       	dec	r0
    e86e:	16 16       	cp	r1, r22
    e870:	17 06       	cpc	r1, r23
    e872:	18 06       	cpc	r1, r24
    e874:	09 06       	cpc	r0, r25
    e876:	08 95       	ret

0000e878 <__fp_pscB>:
    e878:	00 24       	eor	r0, r0
    e87a:	0a 94       	dec	r0
    e87c:	12 16       	cp	r1, r18
    e87e:	13 06       	cpc	r1, r19
    e880:	14 06       	cpc	r1, r20
    e882:	05 06       	cpc	r0, r21
    e884:	08 95       	ret

0000e886 <__fp_round>:
    e886:	09 2e       	mov	r0, r25
    e888:	03 94       	inc	r0
    e88a:	00 0c       	add	r0, r0
    e88c:	11 f4       	brne	.+4      	; 0xe892 <__fp_round+0xc>
    e88e:	88 23       	and	r24, r24
    e890:	52 f0       	brmi	.+20     	; 0xe8a6 <__fp_round+0x20>
    e892:	bb 0f       	add	r27, r27
    e894:	40 f4       	brcc	.+16     	; 0xe8a6 <__fp_round+0x20>
    e896:	bf 2b       	or	r27, r31
    e898:	11 f4       	brne	.+4      	; 0xe89e <__fp_round+0x18>
    e89a:	60 ff       	sbrs	r22, 0
    e89c:	04 c0       	rjmp	.+8      	; 0xe8a6 <__fp_round+0x20>
    e89e:	6f 5f       	subi	r22, 0xFF	; 255
    e8a0:	7f 4f       	sbci	r23, 0xFF	; 255
    e8a2:	8f 4f       	sbci	r24, 0xFF	; 255
    e8a4:	9f 4f       	sbci	r25, 0xFF	; 255
    e8a6:	08 95       	ret

0000e8a8 <__fp_split3>:
    e8a8:	57 fd       	sbrc	r21, 7
    e8aa:	90 58       	subi	r25, 0x80	; 128
    e8ac:	44 0f       	add	r20, r20
    e8ae:	55 1f       	adc	r21, r21
    e8b0:	59 f0       	breq	.+22     	; 0xe8c8 <__fp_splitA+0x10>
    e8b2:	5f 3f       	cpi	r21, 0xFF	; 255
    e8b4:	71 f0       	breq	.+28     	; 0xe8d2 <__fp_splitA+0x1a>
    e8b6:	47 95       	ror	r20

0000e8b8 <__fp_splitA>:
    e8b8:	88 0f       	add	r24, r24
    e8ba:	97 fb       	bst	r25, 7
    e8bc:	99 1f       	adc	r25, r25
    e8be:	61 f0       	breq	.+24     	; 0xe8d8 <__fp_splitA+0x20>
    e8c0:	9f 3f       	cpi	r25, 0xFF	; 255
    e8c2:	79 f0       	breq	.+30     	; 0xe8e2 <__fp_splitA+0x2a>
    e8c4:	87 95       	ror	r24
    e8c6:	08 95       	ret
    e8c8:	12 16       	cp	r1, r18
    e8ca:	13 06       	cpc	r1, r19
    e8cc:	14 06       	cpc	r1, r20
    e8ce:	55 1f       	adc	r21, r21
    e8d0:	f2 cf       	rjmp	.-28     	; 0xe8b6 <__fp_split3+0xe>
    e8d2:	46 95       	lsr	r20
    e8d4:	f1 df       	rcall	.-30     	; 0xe8b8 <__fp_splitA>
    e8d6:	08 c0       	rjmp	.+16     	; 0xe8e8 <__fp_splitA+0x30>
    e8d8:	16 16       	cp	r1, r22
    e8da:	17 06       	cpc	r1, r23
    e8dc:	18 06       	cpc	r1, r24
    e8de:	99 1f       	adc	r25, r25
    e8e0:	f1 cf       	rjmp	.-30     	; 0xe8c4 <__fp_splitA+0xc>
    e8e2:	86 95       	lsr	r24
    e8e4:	71 05       	cpc	r23, r1
    e8e6:	61 05       	cpc	r22, r1
    e8e8:	08 94       	sec
    e8ea:	08 95       	ret

0000e8ec <__fp_zero>:
    e8ec:	e8 94       	clt

0000e8ee <__fp_szero>:
    e8ee:	bb 27       	eor	r27, r27
    e8f0:	66 27       	eor	r22, r22
    e8f2:	77 27       	eor	r23, r23
    e8f4:	cb 01       	movw	r24, r22
    e8f6:	97 f9       	bld	r25, 7
    e8f8:	08 95       	ret

0000e8fa <__mulsf3>:
    e8fa:	0b d0       	rcall	.+22     	; 0xe912 <__mulsf3x>
    e8fc:	c4 cf       	rjmp	.-120    	; 0xe886 <__fp_round>
    e8fe:	b5 df       	rcall	.-150    	; 0xe86a <__fp_pscA>
    e900:	28 f0       	brcs	.+10     	; 0xe90c <__mulsf3+0x12>
    e902:	ba df       	rcall	.-140    	; 0xe878 <__fp_pscB>
    e904:	18 f0       	brcs	.+6      	; 0xe90c <__mulsf3+0x12>
    e906:	95 23       	and	r25, r21
    e908:	09 f0       	breq	.+2      	; 0xe90c <__mulsf3+0x12>
    e90a:	a6 cf       	rjmp	.-180    	; 0xe858 <__fp_inf>
    e90c:	ab cf       	rjmp	.-170    	; 0xe864 <__fp_nan>
    e90e:	11 24       	eor	r1, r1
    e910:	ee cf       	rjmp	.-36     	; 0xe8ee <__fp_szero>

0000e912 <__mulsf3x>:
    e912:	ca df       	rcall	.-108    	; 0xe8a8 <__fp_split3>
    e914:	a0 f3       	brcs	.-24     	; 0xe8fe <__mulsf3+0x4>

0000e916 <__mulsf3_pse>:
    e916:	95 9f       	mul	r25, r21
    e918:	d1 f3       	breq	.-12     	; 0xe90e <__mulsf3+0x14>
    e91a:	95 0f       	add	r25, r21
    e91c:	50 e0       	ldi	r21, 0x00	; 0
    e91e:	55 1f       	adc	r21, r21
    e920:	62 9f       	mul	r22, r18
    e922:	f0 01       	movw	r30, r0
    e924:	72 9f       	mul	r23, r18
    e926:	bb 27       	eor	r27, r27
    e928:	f0 0d       	add	r31, r0
    e92a:	b1 1d       	adc	r27, r1
    e92c:	63 9f       	mul	r22, r19
    e92e:	aa 27       	eor	r26, r26
    e930:	f0 0d       	add	r31, r0
    e932:	b1 1d       	adc	r27, r1
    e934:	aa 1f       	adc	r26, r26
    e936:	64 9f       	mul	r22, r20
    e938:	66 27       	eor	r22, r22
    e93a:	b0 0d       	add	r27, r0
    e93c:	a1 1d       	adc	r26, r1
    e93e:	66 1f       	adc	r22, r22
    e940:	82 9f       	mul	r24, r18
    e942:	22 27       	eor	r18, r18
    e944:	b0 0d       	add	r27, r0
    e946:	a1 1d       	adc	r26, r1
    e948:	62 1f       	adc	r22, r18
    e94a:	73 9f       	mul	r23, r19
    e94c:	b0 0d       	add	r27, r0
    e94e:	a1 1d       	adc	r26, r1
    e950:	62 1f       	adc	r22, r18
    e952:	83 9f       	mul	r24, r19
    e954:	a0 0d       	add	r26, r0
    e956:	61 1d       	adc	r22, r1
    e958:	22 1f       	adc	r18, r18
    e95a:	74 9f       	mul	r23, r20
    e95c:	33 27       	eor	r19, r19
    e95e:	a0 0d       	add	r26, r0
    e960:	61 1d       	adc	r22, r1
    e962:	23 1f       	adc	r18, r19
    e964:	84 9f       	mul	r24, r20
    e966:	60 0d       	add	r22, r0
    e968:	21 1d       	adc	r18, r1
    e96a:	82 2f       	mov	r24, r18
    e96c:	76 2f       	mov	r23, r22
    e96e:	6a 2f       	mov	r22, r26
    e970:	11 24       	eor	r1, r1
    e972:	9f 57       	subi	r25, 0x7F	; 127
    e974:	50 40       	sbci	r21, 0x00	; 0
    e976:	8a f0       	brmi	.+34     	; 0xe99a <__mulsf3_pse+0x84>
    e978:	e1 f0       	breq	.+56     	; 0xe9b2 <__mulsf3_pse+0x9c>
    e97a:	88 23       	and	r24, r24
    e97c:	4a f0       	brmi	.+18     	; 0xe990 <__mulsf3_pse+0x7a>
    e97e:	ee 0f       	add	r30, r30
    e980:	ff 1f       	adc	r31, r31
    e982:	bb 1f       	adc	r27, r27
    e984:	66 1f       	adc	r22, r22
    e986:	77 1f       	adc	r23, r23
    e988:	88 1f       	adc	r24, r24
    e98a:	91 50       	subi	r25, 0x01	; 1
    e98c:	50 40       	sbci	r21, 0x00	; 0
    e98e:	a9 f7       	brne	.-22     	; 0xe97a <__mulsf3_pse+0x64>
    e990:	9e 3f       	cpi	r25, 0xFE	; 254
    e992:	51 05       	cpc	r21, r1
    e994:	70 f0       	brcs	.+28     	; 0xe9b2 <__mulsf3_pse+0x9c>
    e996:	60 cf       	rjmp	.-320    	; 0xe858 <__fp_inf>
    e998:	aa cf       	rjmp	.-172    	; 0xe8ee <__fp_szero>
    e99a:	5f 3f       	cpi	r21, 0xFF	; 255
    e99c:	ec f3       	brlt	.-6      	; 0xe998 <__mulsf3_pse+0x82>
    e99e:	98 3e       	cpi	r25, 0xE8	; 232
    e9a0:	dc f3       	brlt	.-10     	; 0xe998 <__mulsf3_pse+0x82>
    e9a2:	86 95       	lsr	r24
    e9a4:	77 95       	ror	r23
    e9a6:	67 95       	ror	r22
    e9a8:	b7 95       	ror	r27
    e9aa:	f7 95       	ror	r31
    e9ac:	e7 95       	ror	r30
    e9ae:	9f 5f       	subi	r25, 0xFF	; 255
    e9b0:	c1 f7       	brne	.-16     	; 0xe9a2 <__mulsf3_pse+0x8c>
    e9b2:	fe 2b       	or	r31, r30
    e9b4:	88 0f       	add	r24, r24
    e9b6:	91 1d       	adc	r25, r1
    e9b8:	96 95       	lsr	r25
    e9ba:	87 95       	ror	r24
    e9bc:	97 f9       	bld	r25, 7
    e9be:	08 95       	ret

0000e9c0 <strnlen_P>:
    e9c0:	fc 01       	movw	r30, r24
    e9c2:	05 90       	lpm	r0, Z+
    e9c4:	61 50       	subi	r22, 0x01	; 1
    e9c6:	70 40       	sbci	r23, 0x00	; 0
    e9c8:	01 10       	cpse	r0, r1
    e9ca:	d8 f7       	brcc	.-10     	; 0xe9c2 <strnlen_P+0x2>
    e9cc:	80 95       	com	r24
    e9ce:	90 95       	com	r25
    e9d0:	8e 0f       	add	r24, r30
    e9d2:	9f 1f       	adc	r25, r31
    e9d4:	08 95       	ret

0000e9d6 <_exit>:
    e9d6:	f8 94       	cli

0000e9d8 <__stop_program>:
    e9d8:	ff cf       	rjmp	.-2      	; 0xe9d8 <__stop_program>
