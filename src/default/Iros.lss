
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e69c  0000e79c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000e800  2**8
                  CONTENTS, READONLY
  2 .text         0000e69c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b4e  00800510  00800510  0000e7ac  2**1
                  ALLOC
  4 .comment      00000011  00000000  00000000  0000ec00  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  0000ec18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b197  00000000  00000000  0000f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ed  00000000  00000000  0001a63f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c4b  00000000  00000000  0001bd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017d8  00000000  00000000  0001e978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020d9  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000949c  00000000  00000000  00022229  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000928  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 38 	jmp	0x7192	; 0x7192 <__ctors_end>
       4:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
       8:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
       c:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      10:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      14:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      18:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      1c:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      20:	0c 94 ab 3e 	jmp	0x7d56	; 0x7d56 <__vector_8>
      24:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      28:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      2c:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      30:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      34:	0c 94 7d 3c 	jmp	0x78fa	; 0x78fa <__vector_13>
      38:	0c 94 bc 3c 	jmp	0x7978	; 0x7978 <__vector_14>
      3c:	0c 94 e8 39 	jmp	0x73d0	; 0x73d0 <__vector_15>
      40:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      44:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      48:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      4c:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      50:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      54:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      58:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      5c:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      60:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      64:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      68:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      6c:	0c 94 32 39 	jmp	0x7264	; 0x7264 <__bad_interrupt>
      70:	6d 61       	ori	r22, 0x1D	; 29
      72:	79 61       	ori	r23, 0x19	; 25
      74:	85 61       	ori	r24, 0x15	; 21
      76:	71 61       	ori	r23, 0x11	; 17
      78:	75 61       	ori	r23, 0x15	; 21
      7a:	7d 61       	ori	r23, 0x1D	; 29
      7c:	71 61       	ori	r23, 0x11	; 17
      7e:	71 61       	ori	r23, 0x11	; 17
      80:	81 61       	ori	r24, 0x11	; 17
      82:	1b 65       	ori	r17, 0x5B	; 91
      84:	27 65       	ori	r18, 0x57	; 87
      86:	1e 65       	ori	r17, 0x5E	; 94
      88:	27 65       	ori	r18, 0x57	; 87
      8a:	21 65       	ori	r18, 0x51	; 81
      8c:	27 65       	ori	r18, 0x57	; 87
      8e:	24 65       	ori	r18, 0x54	; 84
      90:	27 65       	ori	r18, 0x57	; 87
      92:	2a 65       	ori	r18, 0x5A	; 90
      94:	2d 65       	ori	r18, 0x5D	; 93

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	5d ff       	.word	0xff5d	; ????
      9c:	5e 10       	cpse	r5, r14
      9e:	27 ff       	sbrs	r18, 7
      a0:	2a d2       	rcall	.+1108   	; 0x4f6 <spacesong+0xc7>
      a2:	2b 7d       	andi	r18, 0xDB	; 219
      a4:	21 0c       	add	r2, r1
      a6:	22 fb       	bst	r18, 2
      a8:	85 00       	.word	0x0085	; ????
      aa:	84 00       	.word	0x0084	; ????
      ac:	89 03       	fmulsu	r16, r17
      ae:	88 8d       	ldd	r24, Y+24	; 0x18
      b0:	81 09       	sbc	r24, r1
      b2:	6f 02       	muls	r22, r31
      b4:	44 42       	sbci	r20, 0x24	; 36
      b6:	47 00       	.word	0x0047	; ????
      b8:	45 01       	movw	r8, r10
      ba:	b0 83       	st	Z, r27
      bc:	b3 00       	.word	0x00b3	; ????
      be:	b1 01       	movw	r22, r2
      c0:	24 b9       	out	0x04, r18	; 4
      c2:	25 57       	subi	r18, 0x75	; 117
      c4:	8a 1d       	adc	r24, r10
      c6:	8b 03       	fmulsu	r16, r19

000000c8 <eeprom_format_table>:
      c8:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e8 <patchCommands>:
      e8:	49 40 4c 40 a8 40 ac 40 b3 40 54 40 59 40 5e 40     I@L@.@.@.@T@Y@^@
      f8:	bb 40 61 40 64 40 67 40 a2 40 a5 40 cb 40           .@a@d@g@.@.@.@

00000106 <fader>:
     106:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

00000112 <strChallenge>:
     112:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     122:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     132:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     142:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     152:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     162:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     172:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     182:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     192:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     1a2:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     1b2:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

000001c2 <strCongrats>:
     1c2:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     1d2:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     1e2:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     1f2:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     202:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     212:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     222:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     232:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     242:	49 4e 45 52 53 00 00 50 41 54 20 59 4f 55 52 53     INERS..PAT YOURS
     252:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     262:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     272:	4f 4e 45 00 23 00                                   ONE.#.

00000278 <strIntro>:
     278:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     288:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     298:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     2a8:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     2b8:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     2c8:	45 43 41 55 53 45 20 54 48 45 59 20 53 55 43 4b     ECAUSE THEY SUCK
     2d8:	00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20 41     ..DESTROY THEM A
     2e8:	4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f 55     ND.TAKE BACK YOU
     2f8:	52 20 53 57 41 47 00 23 00                          R SWAG.#.

00000301 <default_scores>:
     301:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     311:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000031f <strCredits>:
     31f:	49 52 4f 53 20 56 32 20 46 4f 52 20 55 5a 45 42     IROS V2 FOR UZEB
     32f:	4f 58 00 00 00 50 52 4f 47 52 41 4d 4d 49 4e 47     OX...PROGRAMMING
     33f:	20 41 4e 44 20 44 45 53 49 47 4e 00 00 4c 41 57      AND DESIGN..LAW
     34f:	52 45 4e 43 45 20 42 52 4f 4f 4b 53 00 00 00 4d     RENCE BROOKS...M
     35f:	55 53 49 43 20 44 45 52 49 56 45 44 20 46 52 4f     USIC DERIVED FRO
     36f:	4d 00 00 43 59 41 52 4f 4e 53 20 47 41 54 45 20     M..CYARONS GATE 
     37f:	42 59 00 00 54 41 4e 4e 45 52 20 48 45 4c 4c 41     BY..TANNER HELLA
     38f:	4e 44 00 00 4c 49 43 45 4e 43 45 44 20 55 4e 44     ND..LICENCED UND
     39f:	45 52 20 43 43 20 56 33 00 23 00                    ER CC V3.#.

000003aa <strTally>:
     3aa:	54 41 4c 4c 59 20 00                                TALLY .

000003b1 <strGameOver>:
     3b1:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000003bb <strLevelBonus>:
     3bb:	42 4f 4e 55 53 00                                   BONUS.

000003c1 <strLevelClear>:
     3c1:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

000003cd <strPaused>:
     3cd:	50 41 55 53 45 00                                   PAUSE.

000003d3 <strExitGame>:
     3d3:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

000003df <strMainMenu>:
     3df:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

000003eb <strTime>:
     3eb:	54 49 4d 45 20 00                                   TIME .

000003f1 <strLives>:
     3f1:	4c 49 56 45 53 20 00                                LIVES .

000003f8 <strShield>:
     3f8:	53 48 49 45 4c 44 20 00                             SHIELD .

00000400 <strScore>:
     400:	53 43 4f 52 45 20 00                                SCORE .

00000407 <strSelectHandle>:
	...

00000408 <strHighScores>:
     408:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000414 <str1Player>:
     414:	53 54 41 52 54 00                                   START.

0000041a <strCopyright>:
     41a:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     42a:	4f 4f 4b 53 00                                      OOKS.

0000042f <spacesong>:
     42f:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     43f:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     44f:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     45f:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     46f:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     47f:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     48f:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     49f:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     4af:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     4bf:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     4cf:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     4df:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     4ef:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     4ff:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     50f:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     51f:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     52f:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     53f:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     54f:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     55f:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     56f:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     57f:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     58f:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     59f:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     5af:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     5bf:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     5cf:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     5df:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     5ef:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     5ff:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     60f:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     61f:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     62f:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     63f:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     64f:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     65f:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     66f:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     67f:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     68f:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     69f:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     6af:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     6bf:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     6cf:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     6df:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     6ef:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     6ff:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     70f:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     71f:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     72f:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     73f:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     74f:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     75f:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     76f:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     77f:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     78f:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     79f:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     7af:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     7bf:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     7cf:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     7df:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     7ef:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     7ff:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     80f:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     81f:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     82f:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     83f:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     84f:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     85f:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     86f:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     87f:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     88f:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     89f:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     8af:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     8bf:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     8cf:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     8df:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     8ef:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     8ff:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     90f:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     91f:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     92f:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     93f:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     94f:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     95f:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     96f:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     97f:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     98f:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     99f:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     9af:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     9bf:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     9cf:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     9df:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     9ef:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     9ff:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     a0f:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     a1f:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     a2f:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     a3f:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     a4f:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     a5f:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
     a6f:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
     a7f:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
     a8f:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
     a9f:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
     aaf:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
     abf:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00000acf <planetsong>:
     acf:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
     adf:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
     aef:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
     aff:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     b0f:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
     b1f:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
     b2f:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     b3f:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
     b4f:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
     b5f:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
     b6f:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
     b7f:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     b8f:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
     b9f:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
     baf:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
     bbf:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
     bcf:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
     bdf:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     bef:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     bff:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     c0f:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     c1f:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     c2f:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
     c3f:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
     c4f:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
     c5f:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
     c6f:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
     c7f:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
     c8f:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
     c9f:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
     caf:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
     cbf:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
     ccf:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
     cdf:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     cef:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
     cff:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
     d0f:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     d1f:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
     d2f:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
     d3f:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
     d4f:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
     d5f:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
     d6f:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
     d7f:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
     d8f:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
     d9f:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
     daf:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
     dbf:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
     dcf:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
     ddf:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
     def:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
     dff:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
     e0f:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
     e1f:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
     e2f:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
     e3f:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
     e4f:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
     e5f:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
     e6f:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
     e7f:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
     e8f:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
     e9f:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
     eaf:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
     ebf:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
     ecf:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     edf:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
     eef:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
     eff:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     f0f:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
     f1f:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
     f2f:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
     f3f:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
     f4f:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     f5f:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
     f6f:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
     f7f:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
     f8f:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
     f9f:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
     faf:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     fbf:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     fcf:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     fdf:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     fef:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     fff:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    100f:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    101f:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    102f:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    103f:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    104f:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    105f:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    106f:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    107f:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    108f:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    109f:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    10af:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    10bf:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    10cf:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    10df:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    10ef:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    10ff:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    110f:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    111f:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    112f:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    113f:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    114f:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    115f:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    116f:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    117f:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    118f:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    119f:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    11af:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    11bf:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    11cf:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    11df:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    11ef:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    11ff:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    120f:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    121f:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    122f:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    123f:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    124f:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    125f:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    126f:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    127f:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    128f:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    129f:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    12af:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    12bf:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    12cf:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    12df:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    12ef:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    12ff:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    130f:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    131f:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    132f:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    133f:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    134f:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    135f:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    136f:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    137f:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    138f:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    139f:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    13af:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    13bf:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    13cf:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    13df:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    13ef:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    13ff:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    140f:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    141f:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    142f:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    143f:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    144f:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    145f:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    146f:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    147f:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    148f:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    149f:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    14af:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    14bf:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    14cf:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    14df:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    14ef:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    14ff:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    150f:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    151f:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    152f:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    153f:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    154f:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    155f:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    156f:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    157f:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    158f:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    159f:	2f 00                                               /.

000015a1 <my_patches>:
    15a1:	00 00 00 18 17 00 00 00 00 00 00 00 18 17 00 00     ................
    15b1:	00 00 00 00 00 07 17 00 00 00 00 00 00 00 b1 16     ................
    15c1:	00 00 00 00 00 00 00 07 17 00 00 00 00 00 00 00     ................
    15d1:	e0 15 00 00 00 00 00 00 00 e0 15 00 00 00 00        ...............

000015e0 <explode>:
    15e0:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    15f0:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1600:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1610:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1620:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1630:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1640:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1650:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1660:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1670:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1680:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1690:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    16a0:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    16b0:	ff                                                  .

000016b1 <pshoot>:
    16b1:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    16c1:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    16d1:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    16e1:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    16f1:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1701:	00 01 05 00 00 ff                                   ......

00001707 <navigate>:
    1707:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1717:	ff                                                  .

00001718 <instrument>:
    1718:	00 02 04 00 00 dd 00 ff                             ........

00001720 <sprites_data>:
    1720:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1730:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1740:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1750:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1760:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1770:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1780:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1790:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    17a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    17b0:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    17c0:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    17d0:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    17e0:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    17f0:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1800:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1810:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1820:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1830:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1840:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1850:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1860:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1870:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1880:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1890:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    18a0:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    18b0:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    18c0:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    18d0:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18e0:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    18f0:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    1900:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    1910:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1920:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    1930:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    1940:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    1950:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    1960:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    1970:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    1980:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    1990:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19a0:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    19b0:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    19c0:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    19d0:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    19e0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19f0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a20:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    1a30:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1a40:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    1a50:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1a60:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1a70:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1a80:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1a90:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1aa0:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1ab0:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1ac0:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1ad0:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    1ae0:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1af0:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1b00:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1b10:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    1b20:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1b30:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1b40:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1b50:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1b60:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1b70:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1b80:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    1b90:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1ba0:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1bb0:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1bc0:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1bd0:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    1be0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1bf0:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    1c00:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    1c10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c20:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    1c30:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    1c40:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    1c50:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    1c60:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c70:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    1c80:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    1c90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ca0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cb0:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    1cc0:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    1cd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ce0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cf0:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    1d00:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    1d10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d20:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d30:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    1d40:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    1d50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d60:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    1d70:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    1d80:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    1d90:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    1da0:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    1db0:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1dc0:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1dd0:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    1de0:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1df0:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    1e00:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    1e10:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1e20:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    1e30:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1e40:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    1e50:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1e60:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1e70:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    1e80:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    1e90:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ea0:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    1eb0:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    1ec0:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    1ed0:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1ee0:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1ef0:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    1f00:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    1f10:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1f20:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    1f30:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1f40:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1f50:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1f60:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1f70:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    1f80:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    1f90:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    1fa0:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    1fb0:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    1fc0:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    1fd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fe0:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    1ff0:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    2000:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2010:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2020:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    2030:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    2040:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2050:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2060:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2070:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2080:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2090:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    20a0:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    20b0:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    20c0:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    20d0:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    20e0:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    20f0:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    2100:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2110:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2120:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2130:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2140:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2150:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2160:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2170:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2180:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2190:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    21a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    21b0:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    21c0:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    21d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21e0:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    21f0:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2200:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2210:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2220:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2230:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2240:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2250:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2260:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2270:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2280:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2290:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    22a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22b0:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    22c0:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    22d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22e0:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    22f0:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2300:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2310:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2320:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2330:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2340:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2350:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2360:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2370:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2380:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2390:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    23a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23c0:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    23d0:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    23e0:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    23f0:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2400:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2410:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2420:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2430:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2440:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2450:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2460:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2470:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2480:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2490:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    24a0:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    24b0:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    24c0:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    24d0:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    24e0:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    24f0:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2500:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2510:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2520:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2530:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2540:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2550:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2560:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2570:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2580:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2590:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25a0:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    25b0:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    25c0:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    25d0:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    25e0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    25f0:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2600:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2610:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2620:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2630:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2640:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2650:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2660:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2670:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2680:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2690:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    26a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26b0:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    26c0:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    26d0:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    26e0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26f0:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2700:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2710:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2720:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2730:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2740:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2750:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2760:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2770:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2780:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2790:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    27a0:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    27b0:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    27c0:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    27d0:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    27e0:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    27f0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2800:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2810:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2820:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2830:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2840:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2850:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2860:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2870:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2880:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2890:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28a0:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    28b0:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    28c0:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    28d0:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    28e0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28f0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2900:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2910:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2920:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2930:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2940:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2950:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2960:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2970:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2980:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2990:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    29a0:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    29b0:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    29c0:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    29d0:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    29e0:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    29f0:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2a00:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2a10:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2a20:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    2a30:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    2a40:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    2a50:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    2a60:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    2a70:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    2a80:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    2a90:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    2aa0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2ab0:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    2ac0:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2ad0:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    2ae0:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2af0:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    2b00:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    2b10:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    2b20:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    2b30:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2b40:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    2b50:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    2b60:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2b70:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2b80:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2b90:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    2ba0:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2bb0:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2bc0:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2bd0:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    2be0:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    2bf0:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    2c00:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2c10:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    2c20:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2c30:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2c40:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2c50:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2c60:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2c70:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2c80:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    2c90:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2ca0:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2cb0:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2cc0:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2cd0:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    2ce0:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    2cf0:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    2d00:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    2d10:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    2d20:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    2d30:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2d40:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2d50:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2d60:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2d70:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    2d80:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    2d90:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2da0:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2db0:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2dc0:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    2dd0:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2de0:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2df0:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    2e00:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    2e10:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e20:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    2e30:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    2e40:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    2e50:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    2e60:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2e70:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    2e80:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    2e90:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2ea0:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    2eb0:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2ec0:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2ed0:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2ee0:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2ef0:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    2f00:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    2f10:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    2f20:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    2f30:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    2f40:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    2f50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f60:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f70:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f80:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    2f90:	fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fa0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2fb0:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2fc0:	fe fe 02 02 00 00 00 00 02 02 02 02 02 00 00 05     ................
    2fd0:	00 00 00 00 05 02 00 00 00 00 00 00 05 05 00 00     ................
    2fe0:	00 00 00 00 fe fe fe fe 00 07 07 27 07 fe fe fe     ...........'....
    2ff0:	00 00 07 77 27 fe fe fe 00 00 00 27 07 fe fe fe     ...w'......'....
    3000:	02 02 00 00 07 fe fe fe 05 05 05 05 05 00 02 fe     ................
    3010:	05 05 05 05 05 05 00 05 00 05 05 05 05 00 00 00     ................

00003020 <map_hazard_desert>:
    3020:	01 01 28                                            ..(

00003023 <map_hazard_city>:
    3023:	01 01 29                                            ..)

00003026 <map_hazard_jungle>:
    3026:	01 01 27                                            ..'

00003029 <map_hazard_fire>:
    3029:	01 01 26                                            ..&

0000302c <map_hazard_ice>:
    302c:	01 01 25                                            ..%

0000302f <map_enemy_boss_shot>:
    302f:	01 01 39                                            ..9

00003032 <map_enemy_boss_eye>:
    3032:	01 01 37                                            ..7

00003035 <map_enemy_boss_turret>:
    3035:	01 01 36                                            ..6

00003038 <map_enemy_drone>:
    3038:	01 01 35                                            ..5

0000303b <map_enemy_tank>:
    303b:	01 01 24                                            ..$

0000303e <map_enemy_ball>:
    303e:	01 01 14                                            ...

00003041 <map_enemy_spider_1>:
    3041:	01 01 34                                            ..4

00003044 <map_enemy_spider_0>:
    3044:	01 01 23                                            ..#

00003047 <map_enemy_xwing>:
    3047:	01 01 3a                                            ..:

0000304a <map_enemy_shark>:
    304a:	01 01 05                                            ...

0000304d <map_enemy_shot>:
    304d:	01 01 13                                            ...

00003050 <map_ahero_jump>:
    3050:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

00003058 <map_ahero_prone>:
    3058:	03 01 61 62 63                                      ..abc

0000305d <map_ahero_step_3>:
    305d:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

00003065 <map_ahero_step_2>:
    3065:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

0000306d <map_ahero_step_1>:
    306d:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

00003075 <map_ahero_step_0>:
    3075:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

0000307d <map_ahero_idle>:
    307d:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

00003085 <map_hero_rplasma_shot>:
    3085:	01 01 38                                            ..8

00003088 <map_hero_space_bomb>:
    3088:	01 01 18                                            ...

0000308b <map_hero_space_shot>:
    308b:	01 01 17                                            ...

0000308e <map_hero_ice_shot>:
    308e:	01 01 16                                            ...

00003091 <map_hero_ball_shot>:
    3091:	01 01 15                                            ...

00003094 <map_hero_gplasma_shot>:
    3094:	01 01 04                                            ...

00003097 <map_hero_ship_large_1>:
    3097:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

000030a1 <map_hero_ship_large_0>:
    30a1:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

000030ab <map_hero_ship_1>:
    30ab:	03 01 3b 2b 2c                                      ..;+,

000030b0 <map_hero_ship_0>:
    30b0:	03 01 2a 2b 2c                                      ..*+,

000030b5 <map_hero_prone>:
    30b5:	03 01 47 48 49                                      ..GHI

000030ba <map_hero_jump>:
    30ba:	02 03 02 03 0f 12 21 22                             ......!"

000030c2 <map_hero_step_3>:
    30c2:	02 03 02 03 0f 44 45 46                             .....DEF

000030ca <map_hero_step_2>:
    30ca:	02 03 00 01 0c 11 1f 20                             ....... 

000030d2 <map_hero_step_1>:
    30d2:	02 03 02 03 0f 10 1d 1e                             ........

000030da <map_hero_step_0>:
    30da:	02 03 00 01 0c 0e 1b 1c                             ........

000030e2 <map_hero_idle>:
    30e2:	02 03 00 01 0c 0d 19 1a                             ........

000030ea <map_emerald_4>:
    30ea:	01 01 0a                                            ...

000030ed <map_emerald_3>:
    30ed:	01 01 09                                            ...

000030f0 <map_emerald_2>:
    30f0:	01 01 08                                            ...

000030f3 <map_emerald_1>:
    30f3:	01 01 07                                            ...

000030f6 <map_emerald_0>:
    30f6:	01 01 06                                            ...

000030f9 <map_explosion_2>:
    30f9:	01 01 2f                                            ../

000030fc <map_explosion_1>:
    30fc:	01 01 2e                                            ...

000030ff <map_explosion_0>:
    30ff:	01 01 2d                                            ..-

00003102 <map_particle>:
    3102:	01 01 30                                            ..0

00003105 <map_up_arrow>:
    3105:	01 01 33                                            ..3

00003108 <map_down_arrow>:
    3108:	01 01 32                                            ..2

0000310b <map_right_arrow>:
    310b:	01 01 31                                            ..1

0000310e <map_none>:
    310e:	01 01 14                                            ...

00003111 <tiles_data>:
	...
    3151:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3161:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3171:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3181:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3191:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31a1:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    31b1:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    31c1:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    31d1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31e1:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    31f1:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3201:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3211:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3221:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3231:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3241:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3251:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3261:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3271:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3281:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3291:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    32a1:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    32b1:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    32c1:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    32d1:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    32e1:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    32f1:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3301:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3311:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3321:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3331:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3341:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3351:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3361:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3371:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3381:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3391:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    33a1:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    33b1:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    33c1:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    33d1:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    33e1:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    33f1:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3401:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3411:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3421:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3431:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3441:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3451:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3461:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3471:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3481:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3491:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    34a1:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    34b1:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    34c1:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    34d1:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    34e1:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    34f1:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3501:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3511:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3521:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3531:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3541:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3551:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3561:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3571:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3581:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3591:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    35a1:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    35b1:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    35c1:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    35d1:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    35e1:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    35f1:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3601:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3611:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3621:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3631:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3641:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3651:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3661:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3671:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3681:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3691:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    36a1:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    36b1:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    36c1:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    36d1:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    36e1:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    36f1:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3701:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3711:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3721:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3731:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3741:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3751:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3761:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3771:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3781:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3791:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    37a1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    37b1:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    37c1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    37d1:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    37e1:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    37f1:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3801:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3811:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3821:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3831:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3841:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3851:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3861:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3891:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38a1:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    38b1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    38c1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    38d1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38e1:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    38f1:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    3901:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3911:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3921:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3931:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3941:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3969:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3979:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39a9:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    39b9:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39d1:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    39e1:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    39f1:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3a01:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3a11:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a21:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a31:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a41:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a51:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3a61:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    3a71:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    3a81:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    3a91:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    3aa1:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    3ab1:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    3ac1:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    3ad1:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    3ae1:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    3af1:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    3b01:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    3b11:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    3b21:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    3b31:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    3b41:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    3b51:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b61:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b71:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b81:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3b9d:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3bad:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3bbd:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3bcd:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3bdd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3bed:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3bfd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c0d:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3c1d:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3c2d:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3c3d:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3c4d:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3c5d:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3c6d:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3c7d:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3c8d:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c9d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cad:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cbd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ccd:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3cdd:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3ced:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3cfd:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    3d0d:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3d1d:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3d2d:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    3d3d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d4d:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d79:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d89:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3d99:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3da9:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3db9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3dc9:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    3dd9:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    3de9:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    3df9:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    3e09:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    3e19:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3e29:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    3e39:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3e49:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    3e59:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    3e69:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    3e79:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    3e89:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    3e99:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    3ea9:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    3eb9:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    3ec9:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    3ed9:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3ee9:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3ef9:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3f09:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    3f19:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    3f29:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f39:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f49:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    3f59:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    3f69:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3f79:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f91:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3fa1:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    3fb1:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    3fc1:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    3fd1:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3fe1:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3ff1:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    4019:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4029:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    4039:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4059:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    4069:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    4079:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    4099:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    40a9:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    40b9:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    40d9:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    40e9:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    40f9:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    411d:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    412d:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    413d:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4159:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4169:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4179:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4199:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    41a9:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    41b9:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    41d9:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    41e9:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    41f9:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4219:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4229:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4239:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4259:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4269:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4279:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    4299:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    42a9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    42b9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    42d9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    42e9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    42f9:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4319:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4329:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4339:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4359:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4369:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4379:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4399:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    43a9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    43b9:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    43d9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    43e9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    43f9:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4419:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4429:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4439:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4459:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4469:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4479:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4499:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    44a9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    44b9:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    44dd:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    44ed:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    44fd:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4519:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4529:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4539:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4559:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4569:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4579:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4599:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    45a9:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    45b9:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    45d9:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    45e9:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    45f9:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4619:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4629:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4639:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4659:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4669:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4679:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4699:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    46a9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    46b9:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    46d9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    46e9:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    46f9:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4719:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4729:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4739:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4759:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4769:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4779:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4799:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47a9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47b9:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    47d9:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    47e9:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    47f9:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4819:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4829:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4839:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4859:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4869:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4879:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4899:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48a9:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    48b9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    48d9:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    48e9:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    48f9:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4911:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4921:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4931:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4941:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4951:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4961:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4971:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4981:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4991:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    49a1:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    49b1:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    49c1:	af af af af af af af af af af af af af af af af     ................
    49d1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    49e1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    49f1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a01:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a11:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4a21:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4a31:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4a41:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4a51:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4a61:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a71:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a81:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a91:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4aa1:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4ab1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4ac1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4ad1:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    4ae1:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    4af1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b01:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b11:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b21:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b31:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b41:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b51:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b61:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b71:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4b81:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4b91:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4ba1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4bb1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4bc1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4bd1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4be1:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    4bf1:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c01:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4c11:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c21:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c31:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c41:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c51:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    4c61:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4c71:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4c81:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c91:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4ca1:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4cb1:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4cc1:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4cd1:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4ce1:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4cf1:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4d01:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    4d11:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    4d21:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    4d31:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    4d41:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4d51:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    4d61:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4d71:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4d81:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4d91:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    4da1:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4db1:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4dc1:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4dd1:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    4de1:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    4df1:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4e01:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4e11:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    4e21:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4e31:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4e41:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4e51:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    4e61:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    4e71:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4e81:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4e91:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    4ea1:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    4eb1:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    4ec1:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    4ed1:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    4ee1:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    4ef1:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    4f01:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f11:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f21:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f31:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f41:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f51:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    4f61:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    4f71:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    4f81:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    4f91:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    4fa1:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    4fb1:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    4fc1:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    4fd1:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    4fe1:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    4ff1:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5001:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5011:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5021:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5031:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5041:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5051:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5061:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5071:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5081:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5091:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50a1:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    50b1:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    50c1:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    50d1:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    50e1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    50f1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5101:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5111:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5121:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5131:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5141:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5151:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5161:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    5171:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    5181:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    5191:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    51a1:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    51b1:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    51c1:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    51d1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    51e1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    51f1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5201:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5211:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5221:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5231:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5241:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5251:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5261:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5271:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5281:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5291:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    52a1:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    52b1:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    52c1:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    52d1:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    52e1:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    52f1:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5301:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5311:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5321:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5331:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5341:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5351:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5361:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    5371:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    5381:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5391:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    53a1:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    53b1:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    53c1:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    53d1:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    53e1:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    53f1:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5401:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5411:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5421:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5431:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5441:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5451:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5461:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5471:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5481:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5491:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54a1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54b1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54c1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54d1:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    54e9:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    54f9:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5509:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5519:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5529:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5539:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5549:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5559:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5569:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5579:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5589:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5599:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    55a9:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    55b9:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    55c9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    55d9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    55e9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    55f9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5609:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5619:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5629:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5639:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5649:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5659:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5669:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5679:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5689:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5699:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56a9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56b9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56c9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    56d9:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    56e9:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    56f9:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5709:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5719:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5729:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5739:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5749:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5759:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5769:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5779:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5789:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5799:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    57a9:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    57b9:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    57c9:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    57d9:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    57e9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    57f9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5809:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5819:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5829:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5839:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5849:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5859:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5869:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5879:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5889:	5c 5c 5c 5c 5c 5c 5c 5c 00 00 00 00 00 00 00 00     \\\\\\\\........
    5899:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    58a9:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    58b9:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    58c9:	00 00 00 00 00 00 00 a4                             ........

000058d1 <map_font>:
    58d1:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    58e1:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    58f1:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

000058f8 <map_atmosphere>:
    58f8:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5908:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5918:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5928:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005932 <map_dialog>:
    5932:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5942:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5952:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5962:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5972:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5982:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5992:	31 32                                               12

00005994 <map_canvas>:
    5994:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    59a4:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    59b4:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    59d0:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    59e0:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    59f0:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5a0c:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5a1c:	32                                                  2

00005a1d <map_splash>:
    5a1d:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    5a2d:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    5a3d:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    5a4d:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    5a5d:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

00005a6a <map_tile_none>:
    5a6a:	01 01 00                                            ...

00005a6d <map_level_mega_tiles>:
    5a6d:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5a7d:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    5a8d:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5a9d:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    5aad:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    5abd:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    5acd:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    5add:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    5aed:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5afd:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    5b0d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5b1d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5b2d:	02 02 02 63 63 04 11 11 63 63 63 63 63 63 63 63     ...cc...cccccccc
    5b3d:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5b4d:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5b5d:	02 02 63 63 63 11 04 63 63 63 63 63 63 63 63 63     ..ccc..ccccccccc
    5b6d:	63 63 63 63 63 63 63 63 63 63 63 64 63 63 63 63     cccccccccccdcccc
    5b7d:	65 66 67 63 63 63 63 63 63 63 63 63 63 63 02 02     efgccccccccccc..
    5b8d:	02 02 63 04 04 04 04 02 04 04 04 04 63 63 63 63     ..c.........cccc
    5b9d:	63 63 63 02 63 63 02 02 04 02 02 04 04 04 04 04     ccc.cc..........
    5bad:	04 04 04 04 04 63 63 63 63 63 63 63 63 63 63 02     .....cccccccccc.
    5bbd:	02 02 02 02 04 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    5bcd:	63 63 63 63 63 02 63 63 02 02 04 02 63 04 04 04     ccccc.cc....c...
    5bdd:	04 02 04 04 04 04 04 63 63 63 63 63 63 63 63 63     .......ccccccccc
    5bed:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 02     ccccccccccccccc.
    5bfd:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5c0d:	63 63 63 63 02 63 63 63 02 63 63 63 63 63 63 63     cccc.ccc.ccccccc
    5c1d:	63 63 02 63 63 63 63 04 63 63 63 63 63 02 63 63     cc.cccc.ccccc.cc
    5c2d:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5c3d:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5c4d:	02 02 02 02 63 11 11 11 04 63 63 63 63 63 63 63     ....c....ccccccc
    5c5d:	63 63 63 63 63 63 63 63 63 02 02 02 02 02 04 11     ccccccccc.......
    5c6d:	11 11 04 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5c7d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5c8d:	63 02 02 02 02 02 67 66 68 63 63 63 63 68 67 66     c.....gfhcccchgf
    5c9d:	66 67 68 63 63 63 63 69 63 63 02 02 02 02 02 63     fghccccicc.....c
    5cad:	63 63 63 63 63 63 63 02 02 63 63 63 04 04 02 02     ccccccc..ccc....
    5cbd:	02 04 04 04 04 04 04 04 63 63 63 63 63 02 02 02     ........ccccc...
    5ccd:	63 63 04 04 04 02 63 04 04 04 04 02 04 04 04 04     cc....c.........
    5cdd:	04 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5ced:	63 63 63 63 02 02 02 02 02 04 63 63 63 63 63 63     cccc......cccccc
    5cfd:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 18 18     cccccccccccccc..
    5d0d:	18 18 18 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5d1d:	63 63 02 63 63 63 02 04 02 02 02 04 63 63 63 63     cc.ccc......cccc
    5d2d:	63 63 63 63 63 63 63 63 63 63 63 02 63 63 63 63     ccccccccccc.cccc
    5d3d:	04 02 02 02 02 63 63 63 63 02 63 63 63 02 04 63     .....cccc.ccc..c
    5d4d:	63 02 04 04 63 02 04 04 04 02 04 04 04 04 02 02     c...c...........
    5d5d:	02 02 02 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5d6d:	04 04 04 04 04 04 04 02 02 02 02 04 04 04 04 04     ................
    5d7d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5d8d:	18 18 18 18 18 04 04 04 04 04 04 04 04 04 04 04     ................
    5d9d:	04 04 04 04 04 04 04 04 04 04 02 02 02 04 04 04     ................
    5dad:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5dbd:	04 04 04 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    5dcd:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    5ddd:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    5ded:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    5dfd:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    5e0d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5e1d:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    5e2d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5e3d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5e4d:	6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lll.llllllllllll
    5e5d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05     lllllllllllllll.
    5e6d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5e7d:	06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c     .....lllllllll.l
    5e8d:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    5e9d:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    5ead:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    5ebd:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5ecd:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    5edd:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    5eed:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5efd:	6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    5f0d:	6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 13 13 13     llllll..lll.....
    5f1d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5f2d:	6c 6c 6c 6c 13 13 13 13 13 6c 6c 6c 6c 6c 6c 6c     llll.....lllllll
    5f3d:	6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 06     llllllll..lll...
    5f4d:	06 06 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     .......lllllllll
    5f5d:	6c 6c 6c 6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 06     llllll.....llll.
    5f6d:	6c 6c 6c 06 05 6c 6c 06 05 05 06 06 05 05 05 05     lll..ll.........
    5f7d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f8d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f9d:	05 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fad:	05 05 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c     ......lllll.llll
    5fbd:	05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 13 13 6c     ..lll...ll.....l
    5fcd:	6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 6c 06     lll.lll..ll...l.
    5fdd:	05 05 05 06 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c     ........lllll.ll
    5fed:	6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 05     ll..lll...ll....
    5ffd:	05 6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05     .llll.lll..ll...
    600d:	6c 06 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c 06     l.........lllll.
    601d:	6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05     llll..lll...ll..
    602d:	05 06 06 72 73 74 74 73 74 73 74 74 73 74 73 74     ...rsttststtstst
    603d:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    604d:	73 74 73 74 74 73 74 73 74 74 73 74 73 74 74 73     ststtststtststts
    605d:	74 73 74 74 73 74 73 74 74 75 74 73 74 74 73 74     tsttststtutsttst
    606d:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 76 73     sttststtststtsvs
    607d:	74 74 73 78 78 78 78 78 78 78 78 78 78 78 78 78     ttsxxxxxxxxxxxxx
    608d:	78 78 78 78 78 78 78 74 73 74 74 73 79 7a 79 79     xxxxxxxtsttsyzyy
    609d:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c     z{|{{|yzyyz{|{{|
    60ad:	74 73 74 74 77 78 78 78 78 78 78 78 78 78 78 78     tsttwxxxxxxxxxxx
    60bd:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    60cd:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    60dd:	78 78 79 7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79     xxyzyyz{|{{|yzyy
    60ed:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 0d 0e 0e 0d 0e     z{|{{|yzyyz.....
    60fd:	78 78 12 78 78 78 78 78 78 78 78 78 78 78 78 78     xx.xxxxxxxxxxxxx
    610d:	78 78 78 78 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     xxxx{|{{|yzyyz{|
    611d:	7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78     {{|yzyyz{|{{|xxx
    612d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    613d:	78 07 07 07 07 07 79 7a 79 79 7a 7b 7c 7b 7b 7c     x.....yzyyz{|{{|
    614d:	79 7a 79 79 7a 7b 7c 7b 7b 7c 07 07 07 07 07 0d     yzyyz{|{{|......
    615d:	0e 0e 0d 0e 78 78 78 78 78 78 78 78 78 78 78 78     ....xxxxxxxxxxxx
    616d:	78 78 78 07 07 07 07 07 78 78 78 78 78 78 07 07     xxx.....xxxxxx..
    617d:	07 07 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    618d:	05 78 78 78 78 78 07 07 07 07 78 05 05 05 05 78     .xxxxx....x....x
    619d:	05 05 05 05 07 05 05 05 05 05 78 78 78 78 78 78     ..........xxxxxx
    61ad:	78 78 78 78 78 78 78 78 78 07 78 78 78 78 05 14     xxxxxxxxx.xxxx..
    61bd:	14 14 14 78 78 78 78 78 78 78 78 78 78 78 78 78     ...xxxxxxxxxxxxx
    61cd:	78 78 78 78 78 78 07 14 14 14 14 05 0d 0e 0e 0d     xxxxxx..........
    61dd:	0e 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     .xxxxxxxxxx.xxxx
    61ed:	05 14 14 14 14 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d     .....}}}}}}}}}}}
    61fd:	0f 81 7d 0f 85 85 85 85 85 85 85 85 85 85 7d 7d     ..}...........}}
    620d:	7d 7d 7d 7d 7d 7d 7e 7f 81 7d 0f 82 83 85 85 85     }}}}}}~..}......
    621d:	86 87 85 85 85 89 8a 7d 7d 7d 7d 7d 80 7d 7d 7d     .......}}}}}.}}}
    622d:	7d 84 81 7d 0f 81 88 85 85 85 85 84 85 85 85 85     }..}............
    623d:	7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 81 7d 0f 81 7d 85     }}}}}}}}}}.}..}.
    624d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    625d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    626d:	85 85 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    627d:	87 85 85 85 89 8a 85 85 85 86 87 88 85 85 85 85     ................
    628d:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 88     ................
    629d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    62ad:	85 85 8b 85 85 85 8b 60 85 85 8b 60 60 85 85 85     .......`...``...
    62bd:	89 8a 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    62cd:	87 85 85 85 89 8a 84 85 85 85 85 88 85 85 85 85     ................
    62dd:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 85     ................
    62ed:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    62fd:	8c 8c 8c 85 85 8c 8c 8c 85 85 85 86 87 85 8d 85     ................
    630d:	89 8a 8d 8e 85 85 8f 90 90 90 90 90 90 90 90 90     ................
    631d:	90 88 85 85 85 85 84 85 85 85 85 85 85 85 85 85     ................
    632d:	85 85 85 85 85 85 85 85 85 85 85 8c 8c 8c 8c 85     ................
    633d:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c     ................
    634d:	8c 8c 8c 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    635d:	85 85 85 85 90 90 90 85 85 90 90 90 85 09 09 09     ................
    636d:	09 85 8d 85 89 8a 8d 8e 85 85 8f 90 90 90 90 90     ................
    637d:	90 90 90 90 90 09 85 85 85 85 84 85 85 85 85 85     ................
    638d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    639d:	85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    63ad:	8c 8c 85 8c 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c     ................
    63bd:	8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09 09     ........```.....
    63cd:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    63dd:	90 90 90 90 09 09 09 09 09 85 85 85 85 85 85 8c     ................
    63ed:	8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09 09     .........``.....
    63fd:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    640d:	8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90 90     ..````..........
    641d:	85 85 90 90 90 85 85 90 90 90 85 85 90 90 90 09     ................
    642d:	09 09 09 09 85 09 09 09 09 85 85 8c 8c 8c 85 85     ................
    643d:	8c 8c 8c 85 85 60 60 60 09 09 09 09 09 09 90 90     .....```........
    644d:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    645d:	90 09 09 09 09 09 85 09 09 09 09 85 8c 8c 85 85     ................
    646d:	85 8c 8c 90 85 85 60 60 90 85 09 09 09 09 09 09     ......``........
    647d:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 60     ...............`
    648d:	60 60 60 09 09 09 09 09 85 85 90 90 90 85 85 90     ```.............
    649d:	90 90 85 85 90 90 90 85 09 90 90 90 09 08 15 15     ................
    64ad:	15 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c     ................
    64bd:	85 85 09 60 60 15 15 08 09 09 90 90 90 90 90 90     ...``...........
    64cd:	90 90 90 90 90 90 90 90 90 90 90 90 09 90 09 09     ................
    64dd:	09 08 15 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    64ed:	85 85 85 85 85 85 09 15 15 15 15 08 90 90 90 90     ................
    64fd:	90 90 90 90 90 09 90 90 90 09 08 90 90 09 08 08     ................
    650d:	09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c 15     ................
    651d:	15 15 15 15 08 08 08 08 08 08 08 08 08 08 85 8c     ................
    652d:	8c 8c 8c 85 09 09 8c 8c 15 08 08 15 15 08 08 08     ................
    653d:	08 08 08 08 08 08 08 85 85 90 90 90 85 85 09 09     ................
    654d:	90 15 15 08 08 15 08 08 08 08 08 08 08 08 08 08     ................
    655d:	85 85 8c 8c 8c 85 85 09 09 09 15 15 08 08 08 08     ................
    656d:	08 08 08 08 08 08 08 08 08 90 90 90 90 90 90 90     ................
    657d:	90 90 90 09 90 90 90 90 08 09 90 90 90 08 08 09     ................
    658d:	09 09 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    659d:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    65ad:	91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 93     ................
    65bd:	93 93 93 93 91 91 91 91 91 91 91 91 91 91 91 91     ................
    65cd:	91 91 91 92 92 92 92 92 93 93 94 93 93 93 93 93     ................
    65dd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    65ed:	93 93 93 93 93 93 93 95 96 97 93 95 96 96 96 97     ................
    65fd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    660d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    661d:	93 93 93 93 93 94 93 93 93 93 93 93 93 93 93 94     ................
    662d:	93 93 93 95 96 97 93 95 96 96 96 97 93 93 93 93     ................
    663d:	93 93 98 99 9a 93 95 9b 10 9c 97 93 93 93 93 93     ................
    664d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    665d:	93 94 93 93 93 98 99 9a 93 95 9b 10 9c 97 93 93     ................
    666d:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    667d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    668d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    669d:	93 93 93 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    66ad:	93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93 93     ................
    66bd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    66cd:	93 93 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 93 93 93 93     ................
    66dd:	93 93 93 93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a     ................
    66ed:	93 93 93 0a 0a 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a     ................
    66fd:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a 0a 0a 0a 0b 0b     ................
    670d:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    671d:	0b 0b 9d 0a 0a 93 93 0b 0b 0b 0a 93 0b 0b 0b 0b     ................
    672d:	0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 93 93 93 0a 16     ................
    673d:	93 93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b     ................
    674d:	0a 0a 0a 0a 16 16 16 16 0a 93 93 93 93 93 93 93     ................
    675d:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    676d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    677d:	0a 0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93     ................
    678d:	93 93 93 93 93 93 93 93 93 93 17 17 17 17 17 93     ................
    679d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    67ad:	93 93 93 0b 0b 17 17 17 93 93 93 93 93 93 93 93     ................
    67bd:	93 93 93 93 93 93 93 93 93 0a 0a 93 17 17 0b 0b     ................
    67cd:	17 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    67dd:	93 93 93 93 0a 17 17 17 17 0b 93 93 93 93 93 93     ................
    67ed:	93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 17     ................
    67fd:	17 17 17 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    680d:	93 93 93 0a 93 93 93 17 0b 0a 0a 0a 0a 0a 0a 9d     ................
    681d:	0a 0a 16 16 16 0a 93 93 93 93 93 93 93 93 93 93     ................
    682d:	0a 0a 0a 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    683d:	93 93 93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 00 21     ...............!
	...
    6859:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6869:	00 00 00 00 22 00 21 00 00 00 00 00 00 00 00 00     ....".!.........
    6879:	00 00 00 21 00 00 00 00 00 00 00 22 00 00 00 21     ...!......."...!
	...
    6891:	00 00 00 22 00 22 00 00 00 00 00 00 00 00 00 00     ..."."..........
    68a1:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 21     !..............!
    68b1:	19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21 00     ..............!.
    68c1:	00 00 00 00 00 00 00 19 19 19 19 19 19 19 19 19     ................
    68d1:	19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00 00 21     ...............!
    68e1:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
    68f1:	21 00 00 00 00 00 00 00 00 19 19 9e 9e 9e 19 19     !...............
    6901:	19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00     ................
    6911:	00 21 9e 9e 9e 9e 9e 19 19 19 19 19 1a 1a 1a 1a     .!..............
    6921:	1a 00 21 00 00 00 00 00 00 00 00 9e 9e 19 19 19     ..!.............
    6931:	19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00     ................
    6941:	00 00 00 21 19 19 19 19 19 19 19 19 19 19 1a 1a     ...!............
    6951:	1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00 00 00     ................
    6961:	00 00 00 00 22 00 00 00 21 00 00 00 00 00 00 1a     ...."...!.......
    6971:	1a 00 00 00 22 00 22 00 00 00 00 00 00 00 00 00     ....".".........
    6981:	00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00 1b 19     .!..............
    6991:	19 00 00 00 19 19 22 00 00 19 19 00 00 00 1a 1a     ......".........
    69a1:	1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00 00 1b     ......".........
    69b1:	1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00 00 1b     ...!............
    69c1:	1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    69d1:	1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00 00 00     ................
    69e1:	00 22 1a 1a 00 21 00 00 00 00 00 00 00 00 00 00     ."...!..........
    69f1:	00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00 21 00     ."."..........!.
	...
    6a0d:	1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00 19     ................
    6a1d:	19 00 00 00 19 19 00 22 00 00 21 00 00 00 00 00     ......."..!.....
    6a2d:	00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00 19     .........!......
    6a3d:	19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a 1a     ..........."....
    6a4d:	1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00 00     ............!...
    6a5d:	00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19 19     ................
    6a6d:	19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a 1a     ................
    6a7d:	1a 1a 1a 19 19 19 19 19 19 19 19 19 19              .............

00006a8a <map_level_space_final>:
    6a8a:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6a9a:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6aaa:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 92 93 94 93     ................
    6aba:	94 95 96 97 98 90 91 90 91 90 91 90 91 90 91 90     ................
    6aca:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ada:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6aea:	91 90 91 90 91 99 9a 9b 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6afa:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b0a:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b1a:	8e 8f 8e 8f 8e 8f 8e 8f 8e 9c 9d 90 91 90 91 90     ................
    6b2a:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b3a:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b4a:	91 90 91 90 91 90 91 90 91 90 91 9e 9f a0 8e 8f     ................
    6b5a:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b6a:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b7a:	8e 8f 8e 8f 8e 8f 8e 8f a1 a2 a3 a2 a3 a2 a3 a2     ................
    6b8a:	a4                                                  .

00006b8b <map_level_space>:
    6b8b:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6b9b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bab:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bbb:	8e 8f 8e 8f 8e 90 91 90 91 90 91 90 91 90 91 90     ................
    6bcb:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6bdb:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6beb:	91 90 91 90 91 90 91 90 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bfb:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c0b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c1b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 90 91 90 91 90     ................
    6c2b:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6c3b:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6c4b:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 8e 8f     ................
    6c5b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c6b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c7b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c8b:	8e                                                  .

00006c8c <map_level_desert>:
    6c8c:	33 05 72 72 72 72 72 72 72 72 72 72 72 72 72 72     3.rrrrrrrrrrrrrr
    6c9c:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6cac:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6cbc:	72 72 72 72 72 73 74 73 73 73 74 73 73 73 74 73     rrrrrstssstsssts
    6ccc:	73 73 74 73 73 73 73 73 73 73 74 73 73 73 74 73     sstssssssstsssts
    6cdc:	73 73 74 73 73 73 74 73 73 73 73 73 73 73 73 73     sstssstsssssssss
    6cec:	73 73 73 73 73 73 73 73 75 76 75 77 75 76 75 78     ssssssssuvuwuvux
    6cfc:	75 79 75 77 75 79 75 78 75 7a 75 77 75 79 75 78     uyuwuyuxuzuwuyux
    6d0c:	75 79 75 77 75 79 75 78 75 79 75 77 75 77 75 78     uyuwuyuxuyuwuwux
    6d1c:	75 7a 75 77 75 77 75 78 75 78 75 75 75 75 76 75     uzuwuwuxuxuuuuvu
    6d2c:	7b 75 75 75 75 75 76 7c 7d 75 75 75 75 75 76 75     {uuuuuv|}uuuuuvu
    6d3c:	75 75 75 75 75 75 76 75 75 75 75 75 75 75 76 75     uuuuuuvuuuuuuuvu
    6d4c:	79 75 75 75 75 75 76 75 76 75 75 75 75 75 7e 7e     yuuuuuvuvuuuuu~~
    6d5c:	7e 7e 7f 7e 7f 7e 80 81 81 82 83 84 7e 7e 85 86     ~~.~.~......~~..
    6d6c:	87 88 89 8a 8b 7e 7f 7e 7f 7e 8c 7e 7e 7e 80 81     .....~.~.~.~~~..
    6d7c:	81 82 8d 7e 7e 7e 7e 8a 8b 7e 7e 7e 7e 7e 7e 7e     ...~~~~..~~~~~~~
    6d8c:	7e                                                  ~

00006d8d <map_level_city>:
    6d8d:	33 05 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d     3.MNOMPMNOMPMNOM
    6d9d:	50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50     PMNOMPMNOMPMNOMP
    6dad:	4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d     MNOMPMNOMPMNOMPM
    6dbd:	4e 4f 4d 50 4d 51 52 53 51 51 51 52 53 51 51 51     NOMPMQRSQQQRSQQQ
    6dcd:	52 53 51 51 51 52 53 51 51 51 52 53 51 51 51 52     RSQQQRSQQQRSQQQR
    6ddd:	53 51 51 51 52 53 51 51 51 52 53 51 51 51 52 53     SQQQRSQQQRSQQQRS
    6ded:	51 51 51 52 53 51 51 51 54 55 56 51 51 54 55 56     QQQRSQQQTUVQQTUV
    6dfd:	51 51 54 55 56 51 51 54 55 56 51 51 54 55 56 51     QQTUVQQTUVQQTUVQ
    6e0d:	51 54 55 56 51 51 54 55 56 51 51 54 55 56 51 51     QTUVQQTUVQQTUVQQ
    6e1d:	54 55 56 51 51 54 55 56 51 51 54 57 58 59 5a 5b     TUVQQTUVQQTWXYZ[
    6e2d:	57 5c 5d 5a 5b 57 58 59 5a 5b 57 5c 5d 5a 5b 57     W\]Z[WXYZ[W\]Z[W
    6e3d:	58 59 5e 5b 57 58 59 5a 5b 57 58 59 5a 5b 57 58     XY^[WXYZ[WXYZ[WX
    6e4d:	59 5a 5b 57 5c 5d 5a 5b 57 58 59 5a 5b 57 5f 60     YZ[W\]Z[WXYZ[W_`
    6e5d:	61 62 63 64 65 66 67 68 69 6a 6b 62 63 64 65 66     abcdefghijkbcdef
    6e6d:	67 63 5f 6c 6d 6e 6f 70 71 61 62 63 5f 6c 6d 6e     gc_lmnopqabc_lmn
    6e7d:	6f 70 71 61 62 63 64 65 66 67 63 5f 60 61 62 63     opqabcdefgc_`abc
    6e8d:	5f                                                  _

00006e8e <map_level_forest>:
    6e8e:	33 05 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     3.;<=;<=;<=;<=;<
    6e9e:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    6eae:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    6ebe:	3c 3d 3b 3c 3d 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f     <=;<=>?@>?@>?@>?
    6ece:	40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40     @>?@>?@>?@>?@>?@
    6ede:	3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e     >?@>?@>?@>?@>?@>
    6eee:	3f 40 3e 3f 40 3e 3f 40 41 42 41 41 42 41 41 42     ?@>?@>?@ABAABAAB
    6efe:	41 41 42 41 41 42 41 41 42 43 41 42 41 41 42 41     AABAABAABCABAABA
    6f0e:	41 42 41 41 42 41 41 42 41 41 42 43 41 42 43 41     ABAABAABAABCABCA
    6f1e:	42 41 41 42 41 41 42 41 41 42 41 41 44 41 41 44     BAABAABAABAADAAD
    6f2e:	41 41 44 43 41 44 43 41 44 41 43 44 41 41 44 41     AADCADCADACDAADA
    6f3e:	41 44 41 41 44 41 41 44 41 41 44 41 41 44 41 41     ADAADAADAADAADAA
    6f4e:	44 41 41 44 41 41 44 43 41 44 41 41 44 41 45 46     DAADAADCADAADAEF
    6f5e:	45 45 46 45 47 46 45 47 46 45 47 46 45 45 46 48     EEFEGFEGFEGFEEFH
    6f6e:	49 46 48 49 46 48 49 46 4a 4b 46 4c 4b 46 47 45     IFHIFHIFJKFLKFGE
    6f7e:	46 4a 4b 46 4a 4b 46 4a 4b 46 45 45 46 45 45 46     FJKFJKFJKFEEFEEF
    6f8e:	45                                                  E

00006f8f <map_level_fire>:
    6f8f:	33 05 23 23 23 23 23 23 23 23 23 23 23 23 23 23     3.##############
    6f9f:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6faf:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6fbf:	23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24     #####$$$$$$$$$$$
    6fcf:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6fdf:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6fef:	24 24 24 24 24 24 24 24 25 26 25 25 25 25 26 25     $$$$$$$$%&%%%%&%
    6fff:	25 25 25 26 25 25 25 25 25 25 25 26 25 25 25 25     %%%&%%%%%%%&%%%%
    700f:	25 25 25 25 25 27 28 26 25 25 25 25 26 25 25 25     %%%%%'(&%%%%&%%%
    701f:	25 25 25 25 25 25 25 26 25 25 25 25 25 25 25 25     %%%%%%%&%%%%%%%%
    702f:	25 25 25 25 25 25 25 25 25 25 25 25 29 25 25 25     %%%%%%%%%%%%)%%%
    703f:	25 25 25 25 25 25 25 2a 2b 2c 2d 25 25 25 25 25     %%%%%%%*+,-%%%%%
    704f:	25 27 28 25 25 27 28 25 25 25 25 25 25 25 2e 2e     %'(%%'(%%%%%%%..
    705f:	2f 30 2f 30 2f 30 2f 30 31 2e 32 2e 2e 32 2e 2e     /0/0/0/01.2..2..
    706f:	2e 32 2e 2e 2e 2f 30 2f 30 33 34 34 34 35 36 30     .2.../0/03444560
    707f:	2f 30 31 37 2b 2c 38 39 2b 2c 3a 2e 2e 2e 2e 2e     /017+,89+,:.....
    708f:	2e                                                  .

00007090 <map_level_ice>:
    7090:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    70a0:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    70b0:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    70c0:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    70d0:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    70e0:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    70f0:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    7100:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    7110:	06 06 06 06 06 06 06 06 06 06 06 07 08 09 06 06     ................
    7120:	06 06 06 06 06 06 06 06 06 06 06 06 06 0a 06 06     ................
    7130:	06 06 06 0b 0c 0d 0e 06 06 06 0a 06 06 06 06 06     ................
    7140:	06 06 06 06 06 0f 06 10 06 10 06 11 12 13 06 06     ................
    7150:	06 14 06 06 0a 06 06 06 06 06 06 06 06 06 15 15     ................
    7160:	16 15 15 15 15 17 02 02 02 02 18 15 15 16 19 1a     ................
    7170:	1b 1a 1b 1a 1c 1d 1e 1e 1f 20 21 20 21 20 22 15     ......... ! ! ".
    7180:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    7190:	15 00                                               ..

00007192 <__ctors_end>:
    7192:	11 24       	eor	r1, r1
    7194:	1f be       	out	0x3f, r1	; 63
    7196:	cf ef       	ldi	r28, 0xFF	; 255
    7198:	d0 e1       	ldi	r29, 0x10	; 16
    719a:	de bf       	out	0x3e, r29	; 62
    719c:	cd bf       	out	0x3d, r28	; 61

0000719e <__do_copy_data>:
    719e:	15 e0       	ldi	r17, 0x05	; 5
    71a0:	a0 e0       	ldi	r26, 0x00	; 0
    71a2:	b5 e0       	ldi	r27, 0x05	; 5
    71a4:	ec e9       	ldi	r30, 0x9C	; 156
    71a6:	f6 ee       	ldi	r31, 0xE6	; 230
    71a8:	02 c0       	rjmp	.+4      	; 0x71ae <__do_copy_data+0x10>
    71aa:	05 90       	lpm	r0, Z+
    71ac:	0d 92       	st	X+, r0
    71ae:	a0 31       	cpi	r26, 0x10	; 16
    71b0:	b1 07       	cpc	r27, r17
    71b2:	d9 f7       	brne	.-10     	; 0x71aa <__do_copy_data+0xc>

000071b4 <__do_clear_bss>:
    71b4:	10 e1       	ldi	r17, 0x10	; 16
    71b6:	a0 e1       	ldi	r26, 0x10	; 16
    71b8:	b5 e0       	ldi	r27, 0x05	; 5
    71ba:	01 c0       	rjmp	.+2      	; 0x71be <.do_clear_bss_start>

000071bc <.do_clear_bss_loop>:
    71bc:	1d 92       	st	X+, r1

000071be <.do_clear_bss_start>:
    71be:	ae 35       	cpi	r26, 0x5E	; 94
    71c0:	b1 07       	cpc	r27, r17
    71c2:	e1 f7       	brne	.-8      	; 0x71bc <.do_clear_bss_loop>

000071c4 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    71c4:	0e 94 7e 3e 	call	0x7cfc	; 0x7cfc <wdt_randomize>
#endif

    MCUSR = 0;
    71c8:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    71ca:	88 e1       	ldi	r24, 0x18	; 24
    71cc:	0f b6       	in	r0, 0x3f	; 63
    71ce:	f8 94       	cli
    71d0:	80 93 60 00 	sts	0x0060, r24
    71d4:	10 92 60 00 	sts	0x0060, r1
    71d8:	0f be       	out	0x3f, r0	; 63

000071da <Initialize>:


void Initialize(void){
	int i;

	cli();
    71da:	f8 94       	cli
    71dc:	86 e9       	ldi	r24, 0x96	; 150
    71de:	90 e0       	ldi	r25, 0x00	; 0

	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    71e0:	fc 01       	movw	r30, r24
    71e2:	25 91       	lpm	r18, Z+
    71e4:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    71e6:	f9 01       	movw	r30, r18
    71e8:	ff 27       	eor	r31, r31
		*ptr=val>>8;
    71ea:	30 83       	st	Z, r19
    71ec:	02 96       	adiw	r24, 0x02	; 2
	cli();

	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    71ee:	20 e0       	ldi	r18, 0x00	; 0
    71f0:	88 3c       	cpi	r24, 0xC8	; 200
    71f2:	92 07       	cpc	r25, r18
    71f4:	a9 f7       	brne	.-22     	; 0x71e0 <Initialize+0x6>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;
	}

	if(!isEepromFormatted()) FormatEeprom();
    71f6:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <isEepromFormatted>
    71fa:	81 11       	cpse	r24, r1
    71fc:	02 c0       	rjmp	.+4      	; 0x7202 <Initialize+0x28>
    71fe:	0e 94 13 3f 	call	0x7e26	; 0x7e26 <FormatEeprom>
		mix_bank=0;
	#endif

	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7202:	81 e0       	ldi	r24, 0x01	; 1
    7204:	80 93 e6 0c 	sts	0x0CE6, r24
		tr4_barrel_hi=1;		
    7208:	80 93 e7 0c 	sts	0x0CE7, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    720c:	80 93 e5 0c 	sts	0x0CE5, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7210:	10 92 d2 0c 	sts	0x0CD2, r1
    7214:	10 92 d8 0c 	sts	0x0CD8, r1
    7218:	10 92 de 0c 	sts	0x0CDE, r1
    721c:	10 92 e4 0c 	sts	0x0CE4, r1
    7220:	10 92 ea 0c 	sts	0x0CEA, r1
	}

	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7224:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_flags=0;
    7228:	10 92 ba 0c 	sts	0x0CBA, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    722c:	92 e1       	ldi	r25, 0x12	; 18
    722e:	90 93 b9 0c 	sts	0x0CB9, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7232:	90 ee       	ldi	r25, 0xE0	; 224
    7234:	90 93 c0 0c 	sts	0x0CC0, r25
	first_render_line=FIRST_RENDER_LINE;
    7238:	94 e1       	ldi	r25, 0x14	; 20
    723a:	90 93 bf 0c 	sts	0x0CBF, r25

	joypad1_status_hi=0;
    723e:	10 92 c4 0c 	sts	0x0CC4, r1
    7242:	10 92 c3 0c 	sts	0x0CC3, r1
	joypad2_status_hi=0;
    7246:	10 92 c8 0c 	sts	0x0CC8, r1
    724a:	10 92 c7 0c 	sts	0x0CC7, r1
	sound_enabled=1;
    724e:	80 93 d1 0c 	sts	0x0CD1, r24

	InitializeVideoMode();
    7252:	0e 94 d2 4b 	call	0x97a4	; 0x97a4 <InitializeVideoMode>

	sei();
    7256:	78 94       	sei

	DisplayLogo();
    7258:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <DisplayLogo>
    725c:	0e 94 e5 70 	call	0xe1ca	; 0xe1ca <main>
    7260:	0c 94 4c 73 	jmp	0xe698	; 0xe698 <_exit>

00007264 <__bad_interrupt>:
    7264:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007268 <sub_video_mode3>:

sub_video_mode3:

	; Wait cycles to align with next hsync

	WAIT  r16,     395
    7268:	03 e8       	ldi	r16, 0x83	; 131
    726a:	0a 95       	dec	r16
    726c:	f1 f7       	brne	.-4      	; 0x726a <sub_video_mode3+0x2>
    726e:	00 c0       	rjmp	.+0      	; 0x7270 <sub_video_mode3+0x8>

	; Refresh ramtiles indexes in VRAM. This has to be done because the
	; main program may have altered the VRAM after vsync and the rendering
	; interrupt.

	lds   r16,     user_ram_tiles_c
    7270:	00 91 a5 0c 	lds	r16, 0x0CA5

	ldi   ZL,      lo8(ram_tiles_restore)
    7274:	e0 e5       	ldi	r30, 0x50	; 80
	ldi   ZH,      hi8(ram_tiles_restore)
    7276:	fc e0       	ldi	r31, 0x0C	; 12
	ldi   r18,     3
    7278:	23 e0       	ldi	r18, 0x03	; 3
	mul   r16,     r18
    727a:	02 9f       	mul	r16, r18
	add   ZL,      r0
    727c:	e0 0d       	add	r30, r0
	adc   ZH,      r1      ; Skip user RAM tiles
    727e:	f1 1d       	adc	r31, r1

	lds   r18,     free_tile_index
    7280:	20 91 a4 0c 	lds	r18, 0x0CA4
	ldi   r19,     MAX_RAMTILES ; Maximum possible ramtiles
    7284:	3c e3       	ldi	r19, 0x3C	; 60
	sub   r19,     r18     ; Subtract free tiles
    7286:	32 1b       	sub	r19, r18
	add   r19,     r16     ; Add user tiles
    7288:	30 0f       	add	r19, r16

	cp    r18,     r16
    728a:	20 17       	cp	r18, r16
	breq  no_ramtiles
    728c:	51 f0       	breq	.+20     	; 0x72a2 <no_ramtiles>
	nop
    728e:	00 00       	nop
	...

00007292 <upd_loop>:
	nop
upd_loop:
	ld    XL,      Z+      ; Load vram offset of ramtile
    7292:	a1 91       	ld	r26, Z+
	ld    XH,      Z+
    7294:	b1 91       	ld	r27, Z+

	ld    r17,     X       ; Get latest VRAM tile that may have been modified my
    7296:	1c 91       	ld	r17, X
	st    Z+,      r17     ; The main program and store it in the restore buffer
    7298:	11 93       	st	Z+, r17
	st    X,       r16     ; Write the ramtile index back to vram
    729a:	0c 93       	st	X, r16

	inc   r16
    729c:	03 95       	inc	r16
	cp    r16,     r18
    729e:	02 17       	cp	r16, r18
	brlo  upd_loop         ; Loop is 14 cycles
    72a0:	c0 f3       	brcs	.-16     	; 0x7292 <upd_loop>

000072a2 <no_ramtiles>:

no_ramtiles:
	; Wait for remaining maximum possible ramtiles
1:
	ldi   r17,     3
    72a2:	13 e0       	ldi	r17, 0x03	; 3
	dec   r17
    72a4:	1a 95       	dec	r17
	brne  .-4
    72a6:	f1 f7       	brne	.-4      	; 0x72a4 <no_ramtiles+0x2>
	rjmp  .
    72a8:	00 c0       	rjmp	.+0      	; 0x72aa <no_ramtiles+0x8>
	dec   r19
    72aa:	3a 95       	dec	r19
	brne  1b
    72ac:	d1 f7       	brne	.-12     	; 0x72a2 <no_ramtiles>
	WAIT  r17,     18 + (MAX_RAMTILES * 14) - 2

#endif


	ldi   YL,      lo8(vram)
    72ae:	c0 e0       	ldi	r28, 0x00	; 0
	ldi   YH,      hi8(vram)
    72b0:	d1 e0       	ldi	r29, 0x01	; 1

	; Prepare scrolling related elements

	; Add X scroll (coarse)

	lds   r18,     screen_scrollX ; ScreenScrollX
    72b2:	20 91 b5 0c 	lds	r18, 0x0CB5
	mov   r25,     r18
    72b6:	92 2f       	mov	r25, r18
	andi  r18,     0xf8    ; (x>>3) * 8 interleave
    72b8:	28 7f       	andi	r18, 0xF8	; 248
	add   YL,      r18
    72ba:	c2 0f       	add	r28, r18

	; Save Y wrap adress

	movw  r12,     YL
    72bc:	6e 01       	movw	r12, r28

	; Add Y scroll (coarse)

	lds   r16,     screen_scrollY ; ScreenScrollY
    72be:	00 91 b6 0c 	lds	r16, 0x0CB6
	mov   r22,     r16
    72c2:	60 2f       	mov	r22, r16
	lsr   r16
    72c4:	06 95       	lsr	r16
	lsr   r16
    72c6:	06 95       	lsr	r16
	lsr   r16              ; Divide by 8
    72c8:	06 95       	lsr	r16

	lds   r17,     screen_scrollHeight
    72ca:	10 91 b7 0c 	lds	r17, 0x0CB7
	sub   r17,     r16
    72ce:	10 1b       	sub	r17, r16
	mov   r15,     r17     ; Y tiles to draw before wrapping
    72d0:	f1 2e       	mov	r15, r17

	mov   r17,     r16
    72d2:	10 2f       	mov	r17, r16
	lsr   r16
    72d4:	06 95       	lsr	r16
	lsr   r16
    72d6:	06 95       	lsr	r16
	lsr   r16              ; Divide by 8
    72d8:	06 95       	lsr	r16
	add   YH,      r16     ; (bits 6-7 for 256 byte VRAM bank select)
    72da:	d0 0f       	add	r29, r16
	andi  r17,     0x7
    72dc:	17 70       	andi	r17, 0x07	; 7
	add   YL,      r17     ; Interleave (bits 3-5)
    72de:	c1 0f       	add	r28, r17
	andi  r22,     0x7     ; Fine Y scrolling (bits 0-2)
    72e0:	67 70       	andi	r22, 0x07	; 7
#endif


	; Prepare overlay

	lds   r20,     overlay_tile_table
    72e2:	40 91 b3 0c 	lds	r20, 0x0CB3
	lds   r21,     overlay_tile_table + 1
    72e6:	50 91 b4 0c 	lds	r21, 0x0CB4
	lds   r6,      tile_table_lo
    72ea:	60 90 af 0c 	lds	r6, 0x0CAF
	lds   r7,      tile_table_hi
    72ee:	70 90 b0 0c 	lds	r7, 0x0CB0
	movw  XL,      r6      ; Store for later
    72f2:	d3 01       	movw	r26, r6

	; Save main section values

	movw  r10,     YL      ; Main section VRAM begin
    72f4:	5e 01       	movw	r10, r28
	mov   r23,     r22     ; Main section line counter within tile row (fine Y scroll)
    72f6:	76 2f       	mov	r23, r22
#if (SCROLLING != 0)
	mov   r24,     r15     ; Y tiles to draw before wrapping
    72f8:	8f 2d       	mov	r24, r15
	mov   r9,      r25     ; Main section X scroll
    72fa:	99 2e       	mov	r9, r25

#if (SCROLLING != 0)

	; Compute beginning of overlay in vram

	lds   r16,     screen_scrollHeight
    72fc:	00 91 b7 0c 	lds	r16, 0x0CB7
	mov   r18,     r16
    7300:	20 2f       	mov	r18, r16
	lsr   r16
    7302:	06 95       	lsr	r16
	lsr   r16
    7304:	06 95       	lsr	r16
	lsr   r16              ; Hi8
    7306:	06 95       	lsr	r16
	inc   r16              ; Add 0x100 ram offset
    7308:	03 95       	inc	r16
	andi  r18,     7       ; Lo8
    730a:	27 70       	andi	r18, 0x07	; 7

	lds   r19,     overlay_height
    730c:	30 91 b2 0c 	lds	r19, 0x0CB2
	cpi   r19,     0
    7310:	30 30       	cpi	r19, 0x00	; 0
	in    r0,      _SFR_IO_ADDR(SREG)
    7312:	0f b6       	in	r0, 0x3f	; 63

	sbrs  r0,      SREG_Z
    7314:	01 fe       	sbrs	r0, 1
	clr   r22              ; Overlay: No Y fine scroll
    7316:	66 27       	eor	r22, r22
	sbrs  r0,      SREG_Z
    7318:	01 fe       	sbrs	r0, 1
	mov   YL,      r18     ; lo8(overlay_vram)
    731a:	c2 2f       	mov	r28, r18
	sbrs  r0,      SREG_Z
    731c:	01 fe       	sbrs	r0, 1
	mov   YH,      r16     ; hi8(overlay_vram)
    731e:	d0 2f       	mov	r29, r16
	sbrs  r0,      SREG_Z
    7320:	01 fe       	sbrs	r0, 1
	ldi   r24,     0xFF    ; Overlay doesn't wrap (max out wrap counter)
    7322:	8f ef       	ldi	r24, 0xFF	; 255
	sbrs  r0,      SREG_Z
    7324:	01 fe       	sbrs	r0, 1
	clr   r9               ; Overlay has no X scroll
    7326:	99 24       	eor	r9, r9
	sbrs  r0,      SREG_Z
    7328:	01 fe       	sbrs	r0, 1
	movw  XL,      r20     ; Overlay tile table
    732a:	da 01       	movw	r26, r20
#endif


	; Total scanlines to draw

	lds   r8,      render_lines_count
    732c:	80 90 c0 0c 	lds	r8, 0x0CC0

	; Prepare Timer1 to use it for terminating scanlines

	ldi   r16,     (1 << OCF1B) + (1 << OCF1A) + (1 << TOV1)
    7330:	07 e0       	ldi	r16, 0x07	; 7
	sts   _SFR_MEM_ADDR(TIFR1), r16  ; Clear any pending timer int
    7332:	00 93 36 00 	sts	0x0036, r16

	ldi   r16,     (0 << WGM12) + (1 << CS10)
    7336:	01 e0       	ldi	r16, 0x01	; 1
	sts   _SFR_MEM_ADDR(TCCR1B), r16 ; Switch to timer1 normal mode (mode 0)
    7338:	00 93 81 00 	sts	0x0081, r16

	ldi   r16,     (1 << TOIE1)
    733c:	01 e0       	ldi	r16, 0x01	; 1
	sts   _SFR_MEM_ADDR(TIMSK1), r16 ; Enable Overflow interrupt
    733e:	00 93 6f 00 	sts	0x006F, r16

00007342 <next_tile_line>:

next_tile_line:

	; Get tile row offset

	ldi   r16,     TILE_WIDTH ; Tile width in pixels
    7342:	08 e0       	ldi	r16, 0x08	; 8
	mul   r22,     r16     ; r1:r0: Row offset within tile
    7344:	60 9f       	mul	r22, r16

	; Compute base adresses for ROM and RAM tiles

	movw  r16,     XL      ; Tile table
    7346:	8d 01       	movw	r16, r26
	subi  r16,     lo8(RAM_TILES_COUNT * TILE_HEIGHT * TILE_WIDTH)
    7348:	00 50       	subi	r16, 0x00	; 0
	sbci  r17,     hi8(RAM_TILES_COUNT * TILE_HEIGHT * TILE_WIDTH)
    734a:	17 40       	sbci	r17, 0x07	; 7
	add   r16,     r0
    734c:	00 0d       	add	r16, r0
	adc   r17,     r1
    734e:	11 1d       	adc	r17, r1
	movw  r2,      r16     ; r3:r2: ROM tiles row adress
    7350:	18 01       	movw	r2, r16

	ldi   r16,     lo8(ram_tiles)
    7352:	00 e5       	ldi	r16, 0x50	; 80
	ldi   r17,     hi8(ram_tiles)
    7354:	15 e0       	ldi	r17, 0x05	; 5
	add   r16,     r0
    7356:	00 0d       	add	r16, r0
	adc   r17,     r1
    7358:	11 1d       	adc	r17, r1
	movw  r4,      r16     ; r5:r4: RAM tiles row adress
    735a:	28 01       	movw	r4, r16

	ldi   r16,     TILE_HEIGHT * TILE_WIDTH
    735c:	00 e4       	ldi	r16, 0x40	; 64
	mov   r14,     r16     ; 14 cycles
    735e:	e0 2e       	mov	r14, r16

	; Prepare Timer1 OVF interrupt location

#if (RESOLUTION_EXT == 0)
	ldi   r16,     lo8(0xFFFF - (48 * SCREEN_TILES_H) - 44)
    7360:	03 e9       	ldi	r16, 0x93	; 147
	ldi   r17,     hi8(0xFFFF - (48 * SCREEN_TILES_H) - 44)
    7362:	1a ef       	ldi	r17, 0xFA	; 250
	ldi   r17,     hi8(0xFFFF - (44 * SCREEN_TILES_H) - 44)
#endif

	; Save current VRAM location (left column)

	push  YL
    7364:	cf 93       	push	r28
	push  YH
    7366:	df 93       	push	r29

	; Fetch first two tiles to prepare for scrolling output

#if (SCROLLING != 0)
	ld    r21,     Y       ; Tile 0 ID from VRAM
    7368:	58 81       	ld	r21, Y
	subi  YL,      0xF8
    736a:	c8 5f       	subi	r28, 0xF8	; 248
	ld    r20,     Y       ; Tile 1 ID from VRAM
    736c:	48 81       	ld	r20, Y
	subi  YL,      0xF8    ; 6 cycles
    736e:	c8 5f       	subi	r28, 0xF8	; 248
	rjmp  .
#endif

	; Enter next scanline including left alignment waits

	rcall hsync_pulse
    7370:	a5 d3       	rcall	.+1866   	; 0x7abc <hsync_pulse>

	WAIT  r18,     HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    7372:	2c e0       	ldi	r18, 0x0C	; 12
    7374:	2a 95       	dec	r18
    7376:	f1 f7       	brne	.-4      	; 0x7374 <next_tile_line+0x32>

#if (RESOLUTION_EXT == 0)
	WAIT  r18,     0  + ((30 - SCREEN_TILES_H) * 24)
    7378:	20 e1       	ldi	r18, 0x10	; 16
    737a:	2a 95       	dec	r18
    737c:	f1 f7       	brne	.-4      	; 0x737a <next_tile_line+0x38>
	WAIT  r18,     16 + ((32 - SCREEN_TILES_H) * 22)
#endif

	; Set up Timer 1

	sts   _SFR_MEM_ADDR(TCNT1H), r17
    737e:	10 93 85 00 	sts	0x0085, r17
	sts   _SFR_MEM_ADDR(TCNT1L), r16
    7382:	00 93 84 00 	sts	0x0084, r16
	sei                    ; 7 cycles
    7386:	78 94       	sei

#if (SCROLLING != 0)

	; Prepare first two tile addresses

	clr   r16
    7388:	00 27       	eor	r16, r16

	mul   r21,     r14     ; r1:r0: Tile address
    738a:	5e 9d       	mul	r21, r14
	cpi   r21,     RAM_TILES_COUNT
    738c:	5c 31       	cpi	r21, 0x1C	; 28
	movw  ZL,      r2      ; ROM tile address
    738e:	f1 01       	movw	r30, r2
	brcc  .+2
    7390:	08 f4       	brcc	.+2      	; 0x7394 <next_tile_line+0x52>
	movw  ZL,      r4      ; RAM tile address
    7392:	f2 01       	movw	r30, r4
	rol   r16              ; r16.0: Tile0 RAM if set
    7394:	00 1f       	adc	r16, r16
	add   ZL,      r0
    7396:	e0 0d       	add	r30, r0
	adc   ZH,      r1      ; ZH:ZL: Tile 0 address to start with
    7398:	f1 1d       	adc	r31, r1

	mov   r18,     r9
    739a:	29 2d       	mov	r18, r9
	andi  r18,     0x07    ; Low 7 bits: 0-7 px visible of last tile
    739c:	27 70       	andi	r18, 0x07	; 7
	clr   r1
    739e:	11 24       	eor	r1, r1
	add   ZL,      r18
    73a0:	e2 0f       	add	r30, r18
	adc   ZH,      r1      ; ZH:ZL: Skipped non-visible left pixels
    73a2:	f1 1d       	adc	r31, r1

	mul   r20,     r14     ; r1:r0: Tile address
    73a4:	4e 9d       	mul	r20, r14
	cpi   r20,     RAM_TILES_COUNT
    73a6:	4c 31       	cpi	r20, 0x1C	; 28
	movw  r20,     r2      ; ROM tile address
    73a8:	a1 01       	movw	r20, r2
	brcc  .+2
    73aa:	08 f4       	brcc	.+2      	; 0x73ae <next_tile_line+0x6c>
	movw  r20,     r4      ; RAM tile address
    73ac:	a2 01       	movw	r20, r4
	rol   r16              ; r16.0: Tile1 RAM if set; r16.1: Tile0 RAM if set
    73ae:	00 1f       	adc	r16, r16
	add   r20,     r0      ; r21:r20: Tile 1 address to start with
    73b0:	40 0d       	add	r20, r0
	adc   r21,     r1      ; 24 cycles
    73b2:	51 1d       	adc	r21, r1

	; Select entry point

	ldi   r17,     26
    73b4:	1a e1       	ldi	r17, 0x1A	; 26
	mul   r16,     r17     ; Select entry block
    73b6:	01 9f       	mul	r16, r17
	mov   r16,     r0
    73b8:	00 2d       	mov	r16, r0
	ldi   r17,     3
    73ba:	13 e0       	ldi	r17, 0x03	; 3
	mul   r18,     r17     ; Select entry point within block
    73bc:	21 9f       	mul	r18, r17
	clr   r17
    73be:	11 27       	eor	r17, r17
	subi  r16,     lo8(-(pm(romrom_e)))
    73c0:	0f 5c       	subi	r16, 0xCF	; 207
	sbci  r17,     hi8(-(pm(romrom_e)))
    73c2:	15 4c       	sbci	r17, 0xC5	; 197
	add   r0,      r16
    73c4:	00 0e       	add	r0, r16
	adc   r1,      r17     ; 12 cycles
    73c6:	11 1e       	adc	r1, r17

	; Enter scanline loop

	clr   r17              ; End of scanline zero pixel
    73c8:	11 27       	eor	r17, r17
	push  r0
    73ca:	0f 92       	push	r0
	push  r1
    73cc:	1f 92       	push	r1
	ret                    ; 9 cycles (+2 relative to non-scrolling)
    73ce:	08 95       	ret

000073d0 <__vector_15>:

	; End of scanline using Timer1 overflow

TIMER1_OVF_vect:

	out   PIXOUT,  r17     ; Zero pixel terminating the line
    73d0:	18 b9       	out	0x08, r17	; 8

	pop   r0               ; pop & discard OVF interrupt return address
    73d2:	0f 90       	pop	r0
	pop   r0               ; pop & discard OVF interrupt return address
    73d4:	0f 90       	pop	r0

	; Restore VRAM address (left column)

	pop   YH
    73d6:	df 91       	pop	r29
	pop   YL
    73d8:	cf 91       	pop	r28

	; Right alignment wait

#if (RESOLUTION_EXT == 0)
	WAIT  r16,     11 + ((30 - SCREEN_TILES_H) * 24)
    73da:	03 e1       	ldi	r16, 0x13	; 19
    73dc:	0a 95       	dec	r16
    73de:	f1 f7       	brne	.-4      	; 0x73dc <__vector_15+0xc>
    73e0:	00 c0       	rjmp	.+0      	; 0x73e2 <__vector_15+0x12>
	WAIT  r16,     27 + ((32 - SCREEN_TILES_H) * 22)
#endif

	; Next line & row logic

	inc   r22              ; Line counter within tile row
    73e2:	63 95       	inc	r22
	dec   r8               ; Total remaining scanlines counter
    73e4:	8a 94       	dec	r8
	breq  text_frame_end
    73e6:	f9 f0       	breq	.+62     	; 0x7426 <text_frame_end>

	cpi   r22,     TILE_HEIGHT ; At last char line?
    73e8:	68 30       	cpi	r22, 0x08	; 8
	breq  next_tile_row
    73ea:	29 f0       	breq	.+10     	; 0x73f6 <next_tile_row>

	; Wait to align with next_tile_row instructions (+1 cycle for the breq)

	WAIT  r16,     23
    73ec:	07 e0       	ldi	r16, 0x07	; 7
    73ee:	0a 95       	dec	r16
    73f0:	f1 f7       	brne	.-4      	; 0x73ee <__vector_15+0x1e>
    73f2:	00 c0       	rjmp	.+0      	; 0x73f4 <__vector_15+0x24>
	rjmp  next_tile_line
    73f4:	a6 cf       	rjmp	.-180    	; 0x7342 <next_tile_line>

000073f6 <next_tile_row>:

next_tile_row:

	clr   r22              ; Clear line counter for next tile row
    73f6:	66 27       	eor	r22, r22

	; Increment VRAM pointer for next row

#if (SCROLLING != 0)

	mov   r16,     YL
    73f8:	0c 2f       	mov	r16, r28
	andi  r16,     0x7
    73fa:	07 70       	andi	r16, 0x07	; 7
	cpi   r16,     0x7
    73fc:	07 30       	cpi	r16, 0x07	; 7
	breq  .+4
    73fe:	11 f0       	breq	.+4      	; 0x7404 <next_tile_row+0xe>
	inc   YL               ; Within a 8 tile tall block
    7400:	c3 95       	inc	r28
	rjmp  .+4
    7402:	02 c0       	rjmp	.+4      	; 0x7408 <next_tile_row+0x12>
	andi  YL,      0xF8    ; Crossing a 8 tile tall block boundary
    7404:	c8 7f       	andi	r28, 0xF8	; 248
	inc   YH
    7406:	d3 95       	inc	r29

	dec   r24              ; Tile rows until wraparound
    7408:	8a 95       	dec	r24
	brne  .+2
    740a:	09 f4       	brne	.+2      	; 0x740e <next_tile_row+0x18>
	movw  YL,      r12     ; Load wrap to address
    740c:	e6 01       	movw	r28, r12

#endif

	; Check end of overlay section

	dec   r19              ; At end, load main section params
    740e:	3a 95       	dec	r19
	brne  .+2
    7410:	09 f4       	brne	.+2      	; 0x7414 <next_tile_row+0x1e>
	mov   r22,     r23     ; Main section begin line counter
    7412:	67 2f       	mov	r22, r23
	brne  .+2
    7414:	09 f4       	brne	.+2      	; 0x7418 <next_tile_row+0x22>
	movw  YL,      r10     ; Main section begin VRAM adress
    7416:	e5 01       	movw	r28, r10
#if (SCROLLING != 0)
	brne  .+2
    7418:	09 f4       	brne	.+2      	; 0x741c <next_tile_row+0x26>
	mov   r24,     r15     ; Main section remaining tile rows before Y wrapping
    741a:	8f 2d       	mov	r24, r15
	brne  .+2
    741c:	09 f4       	brne	.+2      	; 0x7420 <next_tile_row+0x2a>
	mov   r9,      r25     ; Main section scrollX
    741e:	99 2e       	mov	r9, r25
#else
	rjmp  .
	rjmp  .
#endif
	brne  .+2
    7420:	09 f4       	brne	.+2      	; 0x7424 <next_tile_row+0x2e>
	movw  XL,      r6      ; Main section ROM tileset
    7422:	d3 01       	movw	r26, r6

	rjmp next_tile_line
    7424:	8e cf       	rjmp	.-228    	; 0x7342 <next_tile_line>

00007426 <text_frame_end>:

text_frame_end:

	WAIT  r18,     48
    7426:	20 e1       	ldi	r18, 0x10	; 16
    7428:	2a 95       	dec	r18
    742a:	f1 f7       	brne	.-4      	; 0x7428 <text_frame_end+0x2>

	; Restore Timer1 to the value it should normally have at this point

	ldi   r16,     hi8(101 - TIMER1_DISPLACE)
    742c:	00 e0       	ldi	r16, 0x00	; 0
	sts   _SFR_MEM_ADDR(TCNT1H), r16
    742e:	00 93 85 00 	sts	0x0085, r16
	ldi   r16,     lo8(101 - TIMER1_DISPLACE)
    7432:	0c e2       	ldi	r16, 0x2C	; 44
	sts   _SFR_MEM_ADDR(TCNT1L), r16
    7434:	00 93 84 00 	sts	0x0084, r16

	rcall hsync_pulse      ; 145
    7438:	41 d3       	rcall	.+1666   	; 0x7abc <hsync_pulse>

#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
	clr   r1
    743a:	11 24       	eor	r1, r1
	call  RestoreBackground
    743c:	0e 94 03 3c 	call	0x7806	; 0x7806 <RestoreBackground>
#endif

	; Set VSync flag & flip field

	lds   ZL,      sync_flags
    7440:	e0 91 ba 0c 	lds	r30, 0x0CBA
	ldi   r20,     SYNC_FLAG_FIELD
    7444:	42 e0       	ldi	r20, 0x02	; 2
	ori   ZL,      SYNC_FLAG_VSYNC
    7446:	e1 60       	ori	r30, 0x01	; 1
	eor   ZL,      r20
    7448:	e4 27       	eor	r30, r20
	sts   sync_flags, ZL
    744a:	e0 93 ba 0c 	sts	0x0CBA, r30

	; Restore Timer 1's operation mode

	ldi   r16,     (1 << OCF1B) + (1 << OCF1A) + (1 << TOV1)
    744e:	07 e0       	ldi	r16, 0x07	; 7
	sts   _SFR_MEM_ADDR(TIFR1), r16  ; Clear any pending timer int
    7450:	00 93 36 00 	sts	0x0036, r16

	ldi   r16,     (1 << WGM12) + (1 << CS10)
    7454:	09 e0       	ldi	r16, 0x09	; 9
	sts   _SFR_MEM_ADDR(TCCR1B), r16 ; Switch back to timer1 CTC mode (mode 4)
    7456:	00 93 81 00 	sts	0x0081, r16

	ldi   r16,     (1 << OCIE1A)
    745a:	02 e0       	ldi	r16, 0x02	; 2
	sts   _SFR_MEM_ADDR(TIMSK1), r16 ; Restore ints on compare match
    745c:	00 93 6f 00 	sts	0x006F, r16

	ret
    7460:	08 95       	ret

00007462 <romrom_e>:
	; Left side entry blocks for 1-8 pixels. Each pixel is 3 words, and a
	; complete block is 26 words (8 * 3 + 2 words). Entry is performed by
	; a ret (pushing the appropriate entry address on stack).

romrom_e:
	rjmp  .
    7462:	00 c0       	rjmp	.+0      	; 0x7464 <romrom_e+0x2>
	lpm   r16,     Z+
    7464:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7466:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7468:	00 c0       	rjmp	.+0      	; 0x746a <romrom_e+0x8>
#else
	nop
#endif
	lpm   r16,     Z+
    746a:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    746c:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    746e:	00 c0       	rjmp	.+0      	; 0x7470 <romrom_e+0xe>
	lpm   r16,     Z+
    7470:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    7472:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7474:	00 c0       	rjmp	.+0      	; 0x7476 <romrom_e+0x14>
#else
	nop
#endif
	lpm   r16,     Z+
    7476:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7478:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    747a:	00 c0       	rjmp	.+0      	; 0x747c <romrom_e+0x1a>
	lpm   r16,     Z+
    747c:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    747e:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7480:	00 c0       	rjmp	.+0      	; 0x7482 <romrom_e+0x20>
#else
	nop
#endif
	lpm   r16,     Z+
    7482:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7484:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7486:	00 c0       	rjmp	.+0      	; 0x7488 <romrom_e+0x26>
	lpm   r16,     Z+
    7488:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    748a:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	nop
    748c:	00 00       	nop
#endif
	lpm   r16,     Z+
    748e:	05 91       	lpm	r16, Z+
	movw  ZL,      r20
    7490:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    7492:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    7494:	56 c0       	rjmp	.+172    	; 0x7542 <romloop_px0>

00007496 <romram_e>:
#if (RESOLUTION_EXT != 0)
	nop
#endif

romram_e:
	rjmp  .
    7496:	00 c0       	rjmp	.+0      	; 0x7498 <romram_e+0x2>
	lpm   r16,     Z+
    7498:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    749a:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    749c:	00 c0       	rjmp	.+0      	; 0x749e <romram_e+0x8>
#else
	nop
#endif
	lpm   r16,     Z+
    749e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    74a0:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    74a2:	00 c0       	rjmp	.+0      	; 0x74a4 <romram_e+0xe>
	lpm   r16,     Z+
    74a4:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    74a6:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    74a8:	00 c0       	rjmp	.+0      	; 0x74aa <romram_e+0x14>
#else
	nop
#endif
	lpm   r16,     Z+
    74aa:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    74ac:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    74ae:	00 c0       	rjmp	.+0      	; 0x74b0 <romram_e+0x1a>
	lpm   r16,     Z+
    74b0:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    74b2:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    74b4:	00 c0       	rjmp	.+0      	; 0x74b6 <romram_e+0x20>
#else
	nop
#endif
	lpm   r16,     Z+
    74b6:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    74b8:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    74ba:	00 c0       	rjmp	.+0      	; 0x74bc <romram_e+0x26>
	lpm   r16,     Z+
    74bc:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    74be:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	nop
    74c0:	00 00       	nop
#endif
	lpm   r16,     Z+
    74c2:	05 91       	lpm	r16, Z+
	movw  ZL,      r20
    74c4:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    74c6:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    74c8:	59 c0       	rjmp	.+178    	; 0x757c <ramloop_px0>

000074ca <ramrom_e>:
#if (RESOLUTION_EXT != 0)
	nop
#endif

ramrom_e:
	lpm   r16,     Z       ; Dummy load (nop)
    74ca:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74cc:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    74ce:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74d0:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74d2:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    74d4:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74d6:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74d8:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    74da:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74dc:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74de:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    74e0:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74e2:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74e4:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    74e6:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74e8:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74ea:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    74ec:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74ee:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74f0:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    74f2:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    74f4:	00 c0       	rjmp	.+0      	; 0x74f6 <ramrom_e+0x2c>
#else
	nop
#endif
	ld    r16,     Z+
    74f6:	01 91       	ld	r16, Z+
	movw  ZL,      r20
    74f8:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    74fa:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    74fc:	22 c0       	rjmp	.+68     	; 0x7542 <romloop_px0>

000074fe <ramram_e>:

ramram_e:
	lpm   r16,     Z       ; Dummy load (nop)
    74fe:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    7500:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7502:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    7504:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    7506:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7508:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    750a:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    750c:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    750e:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    7510:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    7512:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7514:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    7516:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    7518:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    751a:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    751c:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    751e:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7520:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    7522:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    7524:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7526:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7528:	00 c0       	rjmp	.+0      	; 0x752a <ramram_e+0x2c>
#else
	nop
#endif
	ld    r16,     Z+
    752a:	01 91       	ld	r16, Z+
	movw  ZL,      r20
    752c:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    752e:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    7530:	25 c0       	rjmp	.+74     	; 0x757c <ramloop_px0>

00007532 <romloop>:
	; interval will be turned into 7 for termination (3 cycles IT latency
	; and 3 cycles JMP in the generated interrupt entry table before the
	; zero pixel output).

romloop:
	lpm   r16,     Z+
    7532:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7534:	08 b9       	out	0x08, r16	; 8
	add   r0,      r2      ; Add tile table address + row offset lsb
    7536:	02 0c       	add	r0, r2
#if (RESOLUTION_EXT == 0)
	nop
    7538:	00 00       	nop
#endif

	lpm   r16,     Z+
    753a:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    753c:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r3      ; Add tile table address + row offset msb
    753e:	13 1c       	adc	r1, r3
	movw  ZL,      r0      ; Next tile (ROM)
    7540:	f0 01       	movw	r30, r0

00007542 <romloop_px0>:

romloop_px0:
	lpm   r16,     Z+
    7542:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7544:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7546:	00 c0       	rjmp	.+0      	; 0x7548 <romloop_px0+0x6>
#else
	nop
#endif

	lpm   r16,     Z+
    7548:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    754a:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	ld    r20,     Y+      ; Load next tile ID from VRAM
#else
	ld    r20,     Y       ; Load next tile ID from VRAM
    754c:	48 81       	ld	r20, Y
#endif

	lpm   r16,     Z+
    754e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    7550:	08 b9       	out	0x08, r16	; 8
	rjmp  .
#else
	nop
#endif
#else
	subi  YL,      0xF8    ; Add 8 to VRAM address low
    7552:	c8 5f       	subi	r28, 0xF8	; 248
#if (RESOLUTION_EXT == 0)
	nop
    7554:	00 00       	nop
#endif
#endif

	lpm   r16,     Z+
    7556:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7558:	08 b9       	out	0x08, r16	; 8
	mul   r20,     r14     ; r14 = Width * Height
    755a:	4e 9d       	mul	r20, r14

	lpm   r16,     Z+
    755c:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    755e:	08 b9       	out	0x08, r16	; 8
	cpi   r20,     RAM_TILES_COUNT ; Is tile in RAM or ROM? (RAM tiles have indexes < RAM_TILES_COUNT)
    7560:	4c 31       	cpi	r20, 0x1C	; 28
#if (RESOLUTION_EXT == 0)
	nop
    7562:	00 00       	nop
#endif

	lpm   r16,     Z+
    7564:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7566:	08 b9       	out	0x08, r16	; 8
	brcc  romloop          ; ROM tiles: stay in ROM loop
    7568:	20 f7       	brcc	.-56     	; 0x7532 <romloop>
	nop
    756a:	00 00       	nop

	lpm   r16,     Z+
    756c:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    756e:	08 b9       	out	0x08, r16	; 8
	add   r0,      r4      ; Add tile table address + row offset lsb
    7570:	04 0c       	add	r0, r4
#if (RESOLUTION_EXT == 0)
	nop
    7572:	00 00       	nop
#endif

	lpm   r16,     Z+
    7574:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7576:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r5      ; Add tile table address + row offset msb
    7578:	15 1c       	adc	r1, r5
	movw  ZL,      r0      ; Next tile (RAM)
    757a:	f0 01       	movw	r30, r0

0000757c <ramloop_px0>:

ramloop_px0:
	nop
    757c:	00 00       	nop

	ld    r16,     Z+
    757e:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7580:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	ld    r20,     Y+      ; Load next tile ID from VRAM
#else
	ld    r20,     Y       ; Load next tile ID from VRAM
    7582:	48 81       	ld	r20, Y
#endif
#if (RESOLUTION_EXT == 0)
	nop
    7584:	00 00       	nop
#endif

	ld    r16,     Z+
    7586:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7588:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	nop
#else
	subi  YL,      0xF8    ; Add 8 to VRAM address low
    758a:	c8 5f       	subi	r28, 0xF8	; 248
#endif
	mul   r20,     r14     ; r14 = Width * Height
    758c:	4e 9d       	mul	r20, r14

	ld    r16,     Z+
    758e:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    7590:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    7592:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif

	ld    r16,     Z+
    7594:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7596:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    7598:	04 91       	lpm	r16, Z

	ld    r16,     Z+
    759a:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    759c:	08 b9       	out	0x08, r16	; 8
	cpi   r20,     RAM_TILES_COUNT ; Is tile in RAM or ROM? (RAM tiles have indexes < RAM_TILES_COUNT)
    759e:	4c 31       	cpi	r20, 0x1C	; 28
#if (RESOLUTION_EXT == 0)
	rjmp  .
    75a0:	00 c0       	rjmp	.+0      	; 0x75a2 <ramloop_px0+0x26>
#else
	nop
#endif

	ld    r16,     Z+
    75a2:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    75a4:	08 b9       	out	0x08, r16	; 8
	brcc  ramloop_tr       ; ROM tiles: transfer to ROM loop
    75a6:	50 f4       	brcc	.+20     	; 0x75bc <ramloop_tr>
	nop
    75a8:	00 00       	nop
	add   r0,      r4      ; Add tile table address + row offset lsb
    75aa:	04 0c       	add	r0, r4

	ld    r16,     Z+
    75ac:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    75ae:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r5      ; Add tile table address + row offset msb
    75b0:	15 1c       	adc	r1, r5
#if (RESOLUTION_EXT == 0)
	nop
    75b2:	00 00       	nop
#endif

	ld    r16,     Z+
    75b4:	01 91       	ld	r16, Z+
	movw  ZL,      r0      ; Next tile (RAM)
    75b6:	f0 01       	movw	r30, r0
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    75b8:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    75ba:	e0 cf       	rjmp	.-64     	; 0x757c <ramloop_px0>

000075bc <ramloop_tr>:

ramloop_tr:
	add   r0,      r2      ; Add tile table address + row offset lsb
    75bc:	02 0c       	add	r0, r2

	ld    r16,     Z+
    75be:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    75c0:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r3      ; Add tile table address + row offset msb
    75c2:	13 1c       	adc	r1, r3
#if (RESOLUTION_EXT == 0)
	nop
    75c4:	00 00       	nop
#endif

	ld    r16,     Z+
    75c6:	01 91       	ld	r16, Z+
	movw  ZL,      r0      ; Next tile (ROM)
    75c8:	f0 01       	movw	r30, r0
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    75ca:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    75cc:	ba cf       	rjmp	.-140    	; 0x7542 <romloop_px0>

000075ce <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    75ce:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    75d0:	e0 91 af 0c 	lds	r30, 0x0CAF
	lds ZH,tile_table_hi
    75d4:	f0 91 b0 0c 	lds	r31, 0x0CB0
	mul r24,r18
    75d8:	82 9f       	mul	r24, r18
	add ZL,r0
    75da:	e0 0d       	add	r30, r0
	adc ZH,r1
    75dc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    75de:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    75e0:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    75e2:	62 9f       	mul	r22, r18
	add XL,r0
    75e4:	a0 0d       	add	r26, r0
	adc XH,r1
    75e6:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    75e8:	15 90       	lpm	r1, Z+
    75ea:	1d 92       	st	X+, r1
    75ec:	15 90       	lpm	r1, Z+
    75ee:	1d 92       	st	X+, r1
    75f0:	15 90       	lpm	r1, Z+
    75f2:	1d 92       	st	X+, r1
    75f4:	15 90       	lpm	r1, Z+
    75f6:	1d 92       	st	X+, r1
    75f8:	15 90       	lpm	r1, Z+
    75fa:	1d 92       	st	X+, r1
    75fc:	15 90       	lpm	r1, Z+
    75fe:	1d 92       	st	X+, r1
    7600:	15 90       	lpm	r1, Z+
    7602:	1d 92       	st	X+, r1
    7604:	15 90       	lpm	r1, Z+
    7606:	1d 92       	st	X+, r1
    7608:	15 90       	lpm	r1, Z+
    760a:	1d 92       	st	X+, r1
    760c:	15 90       	lpm	r1, Z+
    760e:	1d 92       	st	X+, r1
    7610:	15 90       	lpm	r1, Z+
    7612:	1d 92       	st	X+, r1
    7614:	15 90       	lpm	r1, Z+
    7616:	1d 92       	st	X+, r1
    7618:	15 90       	lpm	r1, Z+
    761a:	1d 92       	st	X+, r1
    761c:	15 90       	lpm	r1, Z+
    761e:	1d 92       	st	X+, r1
    7620:	15 90       	lpm	r1, Z+
    7622:	1d 92       	st	X+, r1
    7624:	15 90       	lpm	r1, Z+
    7626:	1d 92       	st	X+, r1
    7628:	15 90       	lpm	r1, Z+
    762a:	1d 92       	st	X+, r1
    762c:	15 90       	lpm	r1, Z+
    762e:	1d 92       	st	X+, r1
    7630:	15 90       	lpm	r1, Z+
    7632:	1d 92       	st	X+, r1
    7634:	15 90       	lpm	r1, Z+
    7636:	1d 92       	st	X+, r1
    7638:	15 90       	lpm	r1, Z+
    763a:	1d 92       	st	X+, r1
    763c:	15 90       	lpm	r1, Z+
    763e:	1d 92       	st	X+, r1
    7640:	15 90       	lpm	r1, Z+
    7642:	1d 92       	st	X+, r1
    7644:	15 90       	lpm	r1, Z+
    7646:	1d 92       	st	X+, r1
    7648:	15 90       	lpm	r1, Z+
    764a:	1d 92       	st	X+, r1
    764c:	15 90       	lpm	r1, Z+
    764e:	1d 92       	st	X+, r1
    7650:	15 90       	lpm	r1, Z+
    7652:	1d 92       	st	X+, r1
    7654:	15 90       	lpm	r1, Z+
    7656:	1d 92       	st	X+, r1
    7658:	15 90       	lpm	r1, Z+
    765a:	1d 92       	st	X+, r1
    765c:	15 90       	lpm	r1, Z+
    765e:	1d 92       	st	X+, r1
    7660:	15 90       	lpm	r1, Z+
    7662:	1d 92       	st	X+, r1
    7664:	15 90       	lpm	r1, Z+
    7666:	1d 92       	st	X+, r1
    7668:	15 90       	lpm	r1, Z+
    766a:	1d 92       	st	X+, r1
    766c:	15 90       	lpm	r1, Z+
    766e:	1d 92       	st	X+, r1
    7670:	15 90       	lpm	r1, Z+
    7672:	1d 92       	st	X+, r1
    7674:	15 90       	lpm	r1, Z+
    7676:	1d 92       	st	X+, r1
    7678:	15 90       	lpm	r1, Z+
    767a:	1d 92       	st	X+, r1
    767c:	15 90       	lpm	r1, Z+
    767e:	1d 92       	st	X+, r1
    7680:	15 90       	lpm	r1, Z+
    7682:	1d 92       	st	X+, r1
    7684:	15 90       	lpm	r1, Z+
    7686:	1d 92       	st	X+, r1
    7688:	15 90       	lpm	r1, Z+
    768a:	1d 92       	st	X+, r1
    768c:	15 90       	lpm	r1, Z+
    768e:	1d 92       	st	X+, r1
    7690:	15 90       	lpm	r1, Z+
    7692:	1d 92       	st	X+, r1
    7694:	15 90       	lpm	r1, Z+
    7696:	1d 92       	st	X+, r1
    7698:	15 90       	lpm	r1, Z+
    769a:	1d 92       	st	X+, r1
    769c:	15 90       	lpm	r1, Z+
    769e:	1d 92       	st	X+, r1
    76a0:	15 90       	lpm	r1, Z+
    76a2:	1d 92       	st	X+, r1
    76a4:	15 90       	lpm	r1, Z+
    76a6:	1d 92       	st	X+, r1
    76a8:	15 90       	lpm	r1, Z+
    76aa:	1d 92       	st	X+, r1
    76ac:	15 90       	lpm	r1, Z+
    76ae:	1d 92       	st	X+, r1
    76b0:	15 90       	lpm	r1, Z+
    76b2:	1d 92       	st	X+, r1
    76b4:	15 90       	lpm	r1, Z+
    76b6:	1d 92       	st	X+, r1
    76b8:	15 90       	lpm	r1, Z+
    76ba:	1d 92       	st	X+, r1
    76bc:	15 90       	lpm	r1, Z+
    76be:	1d 92       	st	X+, r1
    76c0:	15 90       	lpm	r1, Z+
    76c2:	1d 92       	st	X+, r1
    76c4:	15 90       	lpm	r1, Z+
    76c6:	1d 92       	st	X+, r1
    76c8:	15 90       	lpm	r1, Z+
    76ca:	1d 92       	st	X+, r1
    76cc:	15 90       	lpm	r1, Z+
    76ce:	1d 92       	st	X+, r1
    76d0:	15 90       	lpm	r1, Z+
    76d2:	1d 92       	st	X+, r1
    76d4:	15 90       	lpm	r1, Z+
    76d6:	1d 92       	st	X+, r1
    76d8:	15 90       	lpm	r1, Z+
    76da:	1d 92       	st	X+, r1
    76dc:	15 90       	lpm	r1, Z+
    76de:	1d 92       	st	X+, r1
    76e0:	15 90       	lpm	r1, Z+
    76e2:	1d 92       	st	X+, r1
    76e4:	15 90       	lpm	r1, Z+
    76e6:	1d 92       	st	X+, r1
	clr r1
    76e8:	11 24       	eor	r1, r1
	ret
    76ea:	08 95       	ret

000076ec <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    76ec:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    76ee:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    76f0:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    76f2:	82 9f       	mul	r24, r18
	add ZL,r0
    76f4:	e0 0d       	add	r30, r0
	adc ZH,r1
    76f6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    76f8:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    76fa:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    76fc:	62 9f       	mul	r22, r18
	add XL,r0
    76fe:	a0 0d       	add	r26, r0
	adc XH,r1
    7700:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7702:	11 90       	ld	r1, Z+
    7704:	1d 92       	st	X+, r1
    7706:	11 90       	ld	r1, Z+
    7708:	1d 92       	st	X+, r1
    770a:	11 90       	ld	r1, Z+
    770c:	1d 92       	st	X+, r1
    770e:	11 90       	ld	r1, Z+
    7710:	1d 92       	st	X+, r1
    7712:	11 90       	ld	r1, Z+
    7714:	1d 92       	st	X+, r1
    7716:	11 90       	ld	r1, Z+
    7718:	1d 92       	st	X+, r1
    771a:	11 90       	ld	r1, Z+
    771c:	1d 92       	st	X+, r1
    771e:	11 90       	ld	r1, Z+
    7720:	1d 92       	st	X+, r1
    7722:	11 90       	ld	r1, Z+
    7724:	1d 92       	st	X+, r1
    7726:	11 90       	ld	r1, Z+
    7728:	1d 92       	st	X+, r1
    772a:	11 90       	ld	r1, Z+
    772c:	1d 92       	st	X+, r1
    772e:	11 90       	ld	r1, Z+
    7730:	1d 92       	st	X+, r1
    7732:	11 90       	ld	r1, Z+
    7734:	1d 92       	st	X+, r1
    7736:	11 90       	ld	r1, Z+
    7738:	1d 92       	st	X+, r1
    773a:	11 90       	ld	r1, Z+
    773c:	1d 92       	st	X+, r1
    773e:	11 90       	ld	r1, Z+
    7740:	1d 92       	st	X+, r1
    7742:	11 90       	ld	r1, Z+
    7744:	1d 92       	st	X+, r1
    7746:	11 90       	ld	r1, Z+
    7748:	1d 92       	st	X+, r1
    774a:	11 90       	ld	r1, Z+
    774c:	1d 92       	st	X+, r1
    774e:	11 90       	ld	r1, Z+
    7750:	1d 92       	st	X+, r1
    7752:	11 90       	ld	r1, Z+
    7754:	1d 92       	st	X+, r1
    7756:	11 90       	ld	r1, Z+
    7758:	1d 92       	st	X+, r1
    775a:	11 90       	ld	r1, Z+
    775c:	1d 92       	st	X+, r1
    775e:	11 90       	ld	r1, Z+
    7760:	1d 92       	st	X+, r1
    7762:	11 90       	ld	r1, Z+
    7764:	1d 92       	st	X+, r1
    7766:	11 90       	ld	r1, Z+
    7768:	1d 92       	st	X+, r1
    776a:	11 90       	ld	r1, Z+
    776c:	1d 92       	st	X+, r1
    776e:	11 90       	ld	r1, Z+
    7770:	1d 92       	st	X+, r1
    7772:	11 90       	ld	r1, Z+
    7774:	1d 92       	st	X+, r1
    7776:	11 90       	ld	r1, Z+
    7778:	1d 92       	st	X+, r1
    777a:	11 90       	ld	r1, Z+
    777c:	1d 92       	st	X+, r1
    777e:	11 90       	ld	r1, Z+
    7780:	1d 92       	st	X+, r1
    7782:	11 90       	ld	r1, Z+
    7784:	1d 92       	st	X+, r1
    7786:	11 90       	ld	r1, Z+
    7788:	1d 92       	st	X+, r1
    778a:	11 90       	ld	r1, Z+
    778c:	1d 92       	st	X+, r1
    778e:	11 90       	ld	r1, Z+
    7790:	1d 92       	st	X+, r1
    7792:	11 90       	ld	r1, Z+
    7794:	1d 92       	st	X+, r1
    7796:	11 90       	ld	r1, Z+
    7798:	1d 92       	st	X+, r1
    779a:	11 90       	ld	r1, Z+
    779c:	1d 92       	st	X+, r1
    779e:	11 90       	ld	r1, Z+
    77a0:	1d 92       	st	X+, r1
    77a2:	11 90       	ld	r1, Z+
    77a4:	1d 92       	st	X+, r1
    77a6:	11 90       	ld	r1, Z+
    77a8:	1d 92       	st	X+, r1
    77aa:	11 90       	ld	r1, Z+
    77ac:	1d 92       	st	X+, r1
    77ae:	11 90       	ld	r1, Z+
    77b0:	1d 92       	st	X+, r1
    77b2:	11 90       	ld	r1, Z+
    77b4:	1d 92       	st	X+, r1
    77b6:	11 90       	ld	r1, Z+
    77b8:	1d 92       	st	X+, r1
    77ba:	11 90       	ld	r1, Z+
    77bc:	1d 92       	st	X+, r1
    77be:	11 90       	ld	r1, Z+
    77c0:	1d 92       	st	X+, r1
    77c2:	11 90       	ld	r1, Z+
    77c4:	1d 92       	st	X+, r1
    77c6:	11 90       	ld	r1, Z+
    77c8:	1d 92       	st	X+, r1
    77ca:	11 90       	ld	r1, Z+
    77cc:	1d 92       	st	X+, r1
    77ce:	11 90       	ld	r1, Z+
    77d0:	1d 92       	st	X+, r1
    77d2:	11 90       	ld	r1, Z+
    77d4:	1d 92       	st	X+, r1
    77d6:	11 90       	ld	r1, Z+
    77d8:	1d 92       	st	X+, r1
    77da:	11 90       	ld	r1, Z+
    77dc:	1d 92       	st	X+, r1
    77de:	11 90       	ld	r1, Z+
    77e0:	1d 92       	st	X+, r1
    77e2:	11 90       	ld	r1, Z+
    77e4:	1d 92       	st	X+, r1
    77e6:	11 90       	ld	r1, Z+
    77e8:	1d 92       	st	X+, r1
    77ea:	11 90       	ld	r1, Z+
    77ec:	1d 92       	st	X+, r1
    77ee:	11 90       	ld	r1, Z+
    77f0:	1d 92       	st	X+, r1
    77f2:	11 90       	ld	r1, Z+
    77f4:	1d 92       	st	X+, r1
    77f6:	11 90       	ld	r1, Z+
    77f8:	1d 92       	st	X+, r1
    77fa:	11 90       	ld	r1, Z+
    77fc:	1d 92       	st	X+, r1
    77fe:	11 90       	ld	r1, Z+
    7800:	1d 92       	st	X+, r1
	clr r1
    7802:	11 24       	eor	r1, r1
	ret
    7804:	08 95       	ret

00007806 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    7806:	e0 91 a5 0c 	lds	r30, 0x0CA5
	mov   r24,     ZL
    780a:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    780c:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    780e:	e8 0f       	add	r30, r24
	clr   ZH
    7810:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7812:	e0 5b       	subi	r30, 0xB0	; 176
	sbci  ZH,      hi8(-(ram_tiles_restore))
    7814:	f3 4f       	sbci	r31, 0xF3	; 243

	lds   r0,      free_tile_index
    7816:	00 90 a4 0c 	lds	r0, 0x0CA4
	sub   r24,     r0
    781a:	80 19       	sub	r24, r0
	brcc  rbg_exit
    781c:	30 f4       	brcc	.+12     	; 0x782a <rbg_exit>

0000781e <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    781e:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    7820:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    7822:	01 90       	ld	r0, Z+
	st    X,       r0
    7824:	0c 92       	st	X, r0
	inc   r24
    7826:	83 95       	inc	r24
	brne  rbg_loop
    7828:	d1 f7       	brne	.-12     	; 0x781e <rbg_loop>

0000782a <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    782a:	08 95       	ret

0000782c <BlitSpritePart>:

bsp_srom:

	clt
#endif
	ldi   r25,     4 * 2
    782c:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    782e:	79 9f       	mul	r23, r25
	mov   XL,      r1
    7830:	a1 2d       	mov	r26, r1
	clr   XH
    7832:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7834:	a9 55       	subi	r26, 0x59	; 89
	sbci  XH,      hi8(-(sprites_tile_banks))
    7836:	b3 4f       	sbci	r27, 0xF3	; 243
	ld    ZL,      X+
    7838:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    783a:	fd 91       	ld	r31, X+

0000783c <bsp_send>:

bsp_send:

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    783c:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    783e:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    7840:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7842:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    7844:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7846:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7848:	a0 5b       	subi	r26, 0xB0	; 176
	sbci  XH,      hi8(-(ram_tiles))
    784a:	ba 4f       	sbci	r27, 0xFA	; 250
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    784c:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    784e:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    7850:	09 c0       	rjmp	.+18     	; 0x7864 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    7852:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7854:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7856:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7858:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    785a:	0a c0       	rjmp	.+20     	; 0x7870 <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    785c:	17 96       	adiw	r26, 0x07	; 7

0000785e <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    785e:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    7860:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    7862:	08 c0       	rjmp	.+16     	; 0x7874 <x_check_end>

00007864 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7864:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7866:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7868:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    786a:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    786c:	f8 cf       	rjmp	.-16     	; 0x785e <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    786e:	11 97       	sbiw	r26, 0x01	; 1

00007870 <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    7870:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    7872:	b9 1f       	adc	r27, r25

00007874 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7874:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7876:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7878:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    787a:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    787c:	09 c0       	rjmp	.+18     	; 0x7890 <y_2nd_tile>

	mul   r22,     r19
    787e:	63 9f       	mul	r22, r19
	add   XL,      r0
    7880:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    7882:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7884:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7886:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7888:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    788a:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    788c:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    788e:	08 c0       	rjmp	.+16     	; 0x78a0 <y_check_end>

00007890 <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    7890:	13 2e       	mov	r1, r19
	dec   r1
    7892:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    7894:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7896:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7898:	61 9d       	mul	r22, r1
	add   ZL,      r0
    789a:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    789c:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    789e:	13 2e       	mov	r1, r19

000078a0 <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    78a0:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    78a2:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    78a4:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    78a6:	05 c0       	rjmp	.+10     	; 0x78b2 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    78a8:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    78aa:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    78ac:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    78ae:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    78b0:	04 c0       	rjmp	.+8      	; 0x78ba <x_diff_end>

000078b2 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    78b2:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    78b4:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    78b6:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    78b8:	6f ef       	ldi	r22, 0xFF	; 255

000078ba <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    78ba:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    78bc:	04 2e       	mov	r0, r20
	lsr   r20
    78be:	46 95       	lsr	r20
#if (SPRITE_RAM_ENABLE != 0)
	brts  bsp_ramloop      ; T flag set: RAM loop, clear: ROM loop
#endif
	brcc  x_loop1          ; ROM sprite loop entry
    78c0:	30 f4       	brcc	.+12     	; 0x78ce <x_loop1>
	breq  x_loopx
    78c2:	61 f0       	breq	.+24     	; 0x78dc <x_loopx>

000078c4 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    78c4:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    78c6:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    78c8:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    78ca:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    78cc:	b7 1f       	adc	r27, r23

000078ce <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    78ce:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    78d0:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    78d2:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    78d4:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    78d6:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    78d8:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    78da:	a1 f7       	brne	.-24     	; 0x78c4 <x_loop0>

000078dc <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    78dc:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    78de:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    78e0:	2c 93       	st	X, r18

	dec   r1
    78e2:	1a 94       	dec	r1
	breq  loop_e
    78e4:	49 f0       	breq	.+18     	; 0x78f8 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    78e6:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    78e8:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    78ea:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    78ec:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    78ee:	40 2d       	mov	r20, r0
	lsr   r20
    78f0:	46 95       	lsr	r20
	brcc  x_loop1
    78f2:	68 f7       	brcc	.-38     	; 0x78ce <x_loop1>
	brne  x_loop0
    78f4:	39 f7       	brne	.-50     	; 0x78c4 <x_loop0>
	rjmp  x_loopx
    78f6:	f2 cf       	rjmp	.-28     	; 0x78dc <x_loopx>

000078f8 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    78f8:	08 95       	ret

000078fa <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    78fa:	0f 92       	push	r0
	push  r1
    78fc:	1f 92       	push	r1
	push  ZL
    78fe:	ef 93       	push	r30
	push  ZH
    7900:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7902:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    7904:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    7908:	ff 93       	push	r31

	sbrc  ZL,      2
    790a:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    790c:	04 c0       	rjmp	.+8      	; 0x7916 <__vector_13+0x1c>
	sbrc  ZL,      1
    790e:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    7910:	02 c0       	rjmp	.+4      	; 0x7916 <__vector_13+0x1c>
	nop
    7912:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    7914:	00 c0       	rjmp	.+0      	; 0x7916 <__vector_13+0x1c>
	sbrs  ZL,      0
    7916:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7918:	00 c0       	rjmp	.+0      	; 0x791a <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    791a:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    791e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7920:	e0 93 b9 0c 	sts	0x0CB9, r30

	;process sync phases
	lds ZH,sync_phase
    7924:	f0 91 b8 0c 	lds	r31, 0x0CB8
	sbrc ZH,0
    7928:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    792a:	51 c0       	rjmp	.+162    	; 0x79ce <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    792c:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    792e:	98 f0       	brcs	.+38     	; 0x7956 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7930:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7932:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7936:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7938:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    793c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    793e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7940:	26 f4       	brtc	.+8      	; 0x794a <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7942:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7944:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <update_sound>
	rjmp sync_end
    7948:	b2 c0       	rjmp	.+356    	; 0x7aae <sync_end>

0000794a <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    794a:	e5 e1       	ldi	r30, 0x15	; 21
    794c:	ea 95       	dec	r30
    794e:	f1 f7       	brne	.-4      	; 0x794c <sync_pre_eq_no_sound_update+0x2>
    7950:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7952:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7954:	ac c0       	rjmp	.+344    	; 0x7aae <sync_end>

00007956 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7956:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7958:	08 f1       	brcs	.+66     	; 0x799c <sync_post_eq>

	rjmp .
    795a:	00 c0       	rjmp	.+0      	; 0x795c <sync_eq+0x6>
	rjmp .
    795c:	00 c0       	rjmp	.+0      	; 0x795e <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    795e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7960:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7962:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7964:	16 f4       	brtc	.+4      	; 0x796a <sync_eq_skip>
	
	call update_sound
    7966:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <update_sound>

0000796a <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    796a:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    796c:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7970:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7972:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7976:	9b c0       	rjmp	.+310    	; 0x7aae <sync_end>

00007978 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7978:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    797a:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    797e:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    7980:	04 c0       	rjmp	.+8      	; 0x798a <__vector_14+0x12>
	sbrc  ZL,      1
    7982:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    7984:	02 c0       	rjmp	.+4      	; 0x798a <__vector_14+0x12>
	nop
    7986:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7988:	00 c0       	rjmp	.+0      	; 0x798a <__vector_14+0x12>
	sbrs  ZL,      0
    798a:	e0 ff       	sbrs	r30, 0
	rjmp  .
    798c:	00 c0       	rjmp	.+0      	; 0x798e <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    798e:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    7990:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    7992:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    7994:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    7998:	ef 91       	pop	r30
	reti
    799a:	18 95       	reti

0000799c <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    799c:	00 c0       	rjmp	.+0      	; 0x799e <sync_post_eq+0x2>

	bst ZL,0
    799e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    79a0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    79a2:	26 f4       	brtc	.+8      	; 0x79ac <sync_post_eq_no_sound_update>
	ldi ZL,1	
    79a4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    79a6:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <update_sound>
	rjmp sync_pre_eq_cont
    79aa:	05 c0       	rjmp	.+10     	; 0x79b6 <sync_pre_eq_cont>

000079ac <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    79ac:	e5 e1       	ldi	r30, 0x15	; 21
    79ae:	ea 95       	dec	r30
    79b0:	f1 f7       	brne	.-4      	; 0x79ae <sync_post_eq_no_sound_update+0x2>
    79b2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    79b4:	28 9a       	sbi	0x05, 0	; 5

000079b6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    79b6:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    79ba:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    79bc:	09 f0       	breq	.+2      	; 0x79c0 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    79be:	77 c0       	rjmp	.+238    	; 0x7aae <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    79c0:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    79c2:	e0 93 b9 0c 	sts	0x0CB9, r30
	ldi ZL,1
    79c6:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    79c8:	e0 93 b8 0c 	sts	0x0CB8, r30
	
	rjmp sync_end
    79cc:	70 c0       	rjmp	.+224    	; 0x7aae <sync_end>

000079ce <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    79ce:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    79d0:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    79d4:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    79d6:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    79da:	00 c0       	rjmp	.+0      	; 0x79dc <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    79dc:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    79de:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    79e0:	00 c0       	rjmp	.+0      	; 0x79e2 <sync_hsync+0x14>
	call update_sound
    79e2:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    79e6:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79e8:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    79ec:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    79ee:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cp ZL,ZH
    79f2:	ef 17       	cp	r30, r31
	brsh no_render
    79f4:	d8 f4       	brcc	.+54     	; 0x7a2c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    79f6:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79f8:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    79fc:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    79fe:	00 90 c0 0c 	lds	r0, 0x0CC0
	sub ZH,r0			
    7a02:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7a04:	ef 17       	cp	r30, r31
	brlo no_render
    7a06:	90 f0       	brcs	.+36     	; 0x7a2c <no_render>

	;push r1-r29
	ldi ZL,29
    7a08:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7a0a:	ff 27       	eor	r31, r31

00007a0c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7a0c:	00 80       	ld	r0, Z
	push r0
    7a0e:	0f 92       	push	r0
	dec ZL
    7a10:	ea 95       	dec	r30
	brne push_loop	
    7a12:	e1 f7       	brne	.-8      	; 0x7a0c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7a14:	0d e0       	ldi	r16, 0x0D	; 13
    7a16:	0a 95       	dec	r16
    7a18:	f1 f7       	brne	.-4      	; 0x7a16 <push_loop+0xa>
    7a1a:	00 c0       	rjmp	.+0      	; 0x7a1c <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    7a1c:	0e 94 34 39 	call	0x7268	; 0x7268 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7a20:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7a22:	ff 27       	eor	r31, r31

00007a24 <pop_loop>:
pop_loop:
	pop r0
    7a24:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7a26:	01 92       	st	Z+, r0
	cpi ZL,30
    7a28:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7a2a:	e0 f3       	brcs	.-8      	; 0x7a24 <pop_loop>

00007a2c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7a2c:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    7a30:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7a32:	09 f0       	breq	.+2      	; 0x7a36 <no_render+0xa>
	rjmp sync_end
    7a34:	3c c0       	rjmp	.+120    	; 0x7aae <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7a36:	2f 93       	push	r18
	push r19
    7a38:	3f 93       	push	r19
	push r20
    7a3a:	4f 93       	push	r20
	push r21
    7a3c:	5f 93       	push	r21
	push r22
    7a3e:	6f 93       	push	r22
	push r23
    7a40:	7f 93       	push	r23
	push r24
    7a42:	8f 93       	push	r24
	push r25
    7a44:	9f 93       	push	r25
	push r26
    7a46:	af 93       	push	r26
	push r27
    7a48:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7a4a:	78 94       	sei
	clr r1
    7a4c:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7a4e:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7a50:	e0 93 b8 0c 	sts	0x0CB8, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7a54:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7a56:	e0 93 b9 0c 	sts	0x0CB9, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7a5a:	80 91 c9 0c 	lds	r24, 0x0CC9
	lds r25,vsync_counter+1
    7a5e:	90 91 ca 0c 	lds	r25, 0x0CCA
	adiw r24,1
    7a62:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7a64:	80 93 c9 0c 	sts	0x0CC9, r24
	sts vsync_counter+1,r25
    7a68:	90 93 ca 0c 	sts	0x0CCA, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7a6c:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,pre_vsync_user_callback+1
    7a70:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7a74:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a76:	f1 05       	cpc	r31, r1
	breq .+2 
    7a78:	09 f0       	breq	.+2      	; 0x7a7c <no_render+0x50>
	icall
    7a7a:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7a7c:	0e 94 03 3f 	call	0x7e06	; 0x7e06 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7a80:	0e 94 97 4c 	call	0x992e	; 0x992e <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7a84:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <process_music>
	clr r1
    7a88:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7a8a:	e0 91 bd 0c 	lds	r30, 0x0CBD
	lds ZH,post_vsync_user_callback+1
    7a8e:	f0 91 be 0c 	lds	r31, 0x0CBE
	cp  ZL,r1
    7a92:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a94:	f1 05       	cpc	r31, r1
	breq .+2 
    7a96:	09 f0       	breq	.+2      	; 0x7a9a <no_render+0x6e>
	icall
    7a98:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7a9a:	bf 91       	pop	r27
	pop r26
    7a9c:	af 91       	pop	r26
	pop r25
    7a9e:	9f 91       	pop	r25
	pop r24
    7aa0:	8f 91       	pop	r24
	pop r23
    7aa2:	7f 91       	pop	r23
	pop r22
    7aa4:	6f 91       	pop	r22
	pop r21
    7aa6:	5f 91       	pop	r21
	pop r20
    7aa8:	4f 91       	pop	r20
	pop r19
    7aaa:	3f 91       	pop	r19
	pop r18
    7aac:	2f 91       	pop	r18

00007aae <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7aae:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7ab0:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7ab2:	ff 91       	pop	r31
	pop ZL
    7ab4:	ef 91       	pop	r30
	pop r1
    7ab6:	1f 90       	pop	r1
	pop r0
    7ab8:	0f 90       	pop	r0
	reti
    7aba:	18 95       	reti

00007abc <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7abc:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7abe:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7ac0:	00 c0       	rjmp	.+0      	; 0x7ac2 <hsync_pulse+0x6>
	call update_sound
    7ac2:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <update_sound>

	lds ZL,sync_pulse
    7ac6:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    7aca:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7acc:	e0 93 b9 0c 	sts	0x0CB9, r30

	ret
    7ad0:	08 95       	ret

00007ad2 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:

#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7ad2:	e0 91 d1 0c 	lds	r30, 0x0CD1
	sbrc ZL,0
    7ad6:	e0 fd       	sbrc	r30, 0
	call ProcessMusic
    7ad8:	0e 94 8e 42 	call	0x851c	; 0x851c <ProcessMusic>
#endif

	ret
    7adc:	08 95       	ret

00007ade <update_sound>:
; Destroys: Z, r0, r1
;****************************

update_sound:

	push  r18
    7ade:	2f 93       	push	r18
	push  r17
    7ae0:	1f 93       	push	r17
	push  r16
    7ae2:	0f 93       	push	r16

	mov   r18,     ZL
    7ae4:	2e 2f       	mov	r18, r30

	; Mix result is collected in r0:r1 (r0 is the high byte!)

	; Channel 1 (27 cy - 3 for initializing mix. buffer)

	lds   r17,     tr1_pos_frac
    7ae6:	10 91 d5 0c 	lds	r17, 0x0CD5
	lds   ZL,      tr1_pos_lo
    7aea:	e0 91 d6 0c 	lds	r30, 0x0CD6
	lds   ZH,      tr1_pos_hi
    7aee:	f0 91 d7 0c 	lds	r31, 0x0CD7
	lds   r16,     tr1_step_lo
    7af2:	00 91 d3 0c 	lds	r16, 0x0CD3
	add   r17,     r16     ; Add step to fractional part of sample pos
    7af6:	10 0f       	add	r17, r16
	lds   r16,     tr1_step_hi
    7af8:	00 91 d4 0c 	lds	r16, 0x0CD4
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7afc:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7afe:	04 91       	lpm	r16, Z
	sts   tr1_pos_lo, ZL
    7b00:	e0 93 d6 0c 	sts	0x0CD6, r30
	sts   tr1_pos_frac, r17
    7b04:	10 93 d5 0c 	sts	0x0CD5, r17
	lds   r17,     tr1_vol
    7b08:	10 91 d2 0c 	lds	r17, 0x0CD2
	mulsu r16,     r17     ; (sample * mixing_vol)
    7b0c:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7b0e:	00 08       	sbc	r0, r0

	; Channel 2 (27 cy + 2/3 sync generator + 2 preload)

	lds   r17,     tr2_pos_frac
    7b10:	10 91 db 0c 	lds	r17, 0x0CDB
	lds   ZL,      tr2_pos_lo
    7b14:	e0 91 dc 0c 	lds	r30, 0x0CDC
	lds   ZH,      tr2_pos_hi
    7b18:	f0 91 dd 0c 	lds	r31, 0x0CDD
	lds   r16,     tr2_step_lo
    7b1c:	00 91 d9 0c 	lds	r16, 0x0CD9
	add   r17,     r16     ; Add step to fractional part of sample pos
    7b20:	10 0f       	add	r17, r16
	lds   r16,     tr2_step_hi
    7b22:	00 91 da 0c 	lds	r16, 0x0CDA
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7b26:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7b28:	04 91       	lpm	r16, Z
	sts   tr2_pos_lo, ZL
    7b2a:	e0 93 dc 0c 	sts	0x0CDC, r30
	sts   tr2_pos_frac, r17
    7b2e:	10 93 db 0c 	sts	0x0CDB, r17
	movw  ZL,      r0
    7b32:	f0 01       	movw	r30, r0
	lds   r17,     tr2_vol
    7b34:	10 91 d8 0c 	lds	r17, 0x0CD8
	mulsu r16,     r17     ; (sample * mixing_vol)
    7b38:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7b3a:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7b3c:	1f 0e       	add	r1, r31
	lds   r17,     tr3_pos_frac
    7b3e:	10 91 e1 0c 	lds	r17, 0x0CE1
	;--- Video sync update ( 68 cy LOW pulse) ---
	sbrc  r18,     0
    7b42:	20 fd       	sbrc	r18, 0
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN
    7b44:	28 9a       	sbi	0x05, 0	; 5
	;--------------------------------------------
	adc   r0,      ZL      ; Ajust mix buffer msb
    7b46:	0e 1e       	adc	r0, r30

	; Channel 3 (27 cy - 2 preload)

	lds   ZL,      tr3_pos_lo
    7b48:	e0 91 e2 0c 	lds	r30, 0x0CE2
	lds   ZH,      tr3_pos_hi
    7b4c:	f0 91 e3 0c 	lds	r31, 0x0CE3
	lds   r16,     tr3_step_lo
    7b50:	00 91 df 0c 	lds	r16, 0x0CDF
	add   r17,     r16     ; Add step to fractional part of sample pos
    7b54:	10 0f       	add	r17, r16
	lds   r16,     tr3_step_hi
    7b56:	00 91 e0 0c 	lds	r16, 0x0CE0
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7b5a:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7b5c:	04 91       	lpm	r16, Z
	sts   tr3_pos_lo, ZL
    7b5e:	e0 93 e2 0c 	sts	0x0CE2, r30
	sts   tr3_pos_frac, r17
    7b62:	10 93 e1 0c 	sts	0x0CE1, r17
	movw  ZL,      r0
    7b66:	f0 01       	movw	r30, r0
	lds   r17,     tr3_vol
    7b68:	10 91 de 0c 	lds	r17, 0x0CDE
	mulsu r16,     r17     ; (sample * mixing_vol)
    7b6c:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7b6e:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7b70:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Ajust mix buffer msb
    7b72:	0e 1e       	adc	r0, r30

	; Channel 4 - 7/15 bit LFSR (34 cy)

	lds   r16,     tr4_barrel_lo ; Get the LFSR (16 bits barrel shifter)
    7b74:	00 91 e6 0c 	lds	r16, 0x0CE6
	lds   r17,     tr4_barrel_hi
    7b78:	10 91 e7 0c 	lds	r17, 0x0CE7

	lds   ZH,      tr4_vol ; get the Volume
    7b7c:	f0 91 e4 0c 	lds	r31, 0x0CE4
	lsr   ZH               ; Divide it by 2 to get sample for '1'.
    7b80:	f6 95       	lsr	r31
	clc
    7b82:	88 94       	clc
	sbrc  r16,     0       ; If the LSB of the LFSR is zero
    7b84:	00 fd       	sbrc	r16, 0
	neg   ZH               ; then produce sample (negative) for '0' (C set unless zero)
    7b86:	f1 95       	neg	r31
	sbc   ZL,      ZL      ; Sign extend
    7b88:	ee 0b       	sbc	r30, r30
	add   r1,      ZH      ; Add sample to mix buffer lsb
    7b8a:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Adjust mix buffer msb
    7b8c:	0e 1e       	adc	r0, r30

	lds   ZL,      tr4_divider ; load the divider
    7b8e:	e0 91 e8 0c 	lds	r30, 0x0CE8
	subi  ZL,      2       ; Decrement bits 1..7 leaving bit 0 untouched by subtracting 2
    7b92:	e2 50       	subi	r30, 0x02	; 2
	brcs  ch4_shift        ; if not enough ticks have elapsed then don't shift the LFSR
    7b94:	20 f0       	brcs	.+8      	; 0x7b9e <ch4_shift>
	lpm   ZL,      Z
    7b96:	e4 91       	lpm	r30, Z
	lpm   ZL,      Z
    7b98:	e4 91       	lpm	r30, Z
	lpm   ZL,      Z
    7b9a:	e4 91       	lpm	r30, Z
	rjmp  ch4_end
    7b9c:	0a c0       	rjmp	.+20     	; 0x7bb2 <ch4_end>

00007b9e <ch4_shift>:

ch4_shift:
	mov   ZL,      r16     ; Perform the actual LFSR shifting by copying low byte of LFSR to a temp for XOR opperation
    7b9e:	e0 2f       	mov	r30, r16
	lsr   r17              ; shift the 16 bits of the barrel shifter
    7ba0:	16 95       	lsr	r17
	ror   r16              ; leaving the old bit 0 into Carry (Same bit used to decide +ve or -ve "sample" above)
    7ba2:	07 95       	ror	r16
	eor   ZL,      r16     ; perform the XOR of bit 0 and bit 1
    7ba4:	e0 27       	eor	r30, r16
	bst   ZL,      0       ; Save that XOR'd bit to T
    7ba6:	e0 fb       	bst	r30, 0
	bld   r17,     6       ; Write T to the 15th bit of the LFSR (regardless of mode as 7 bit will overwrite it)
    7ba8:	16 f9       	bld	r17, 6
	lds   ZL,      tr4_params ; Reload the divider / Parameters which consists of 7 bits of divider + 1 bit of mode
    7baa:	e0 91 e5 0c 	lds	r30, 0x0CE5
	sbrs  ZL,      0       ; If the 7/14 mode bit indicates 7 bit mode then
    7bae:	e0 ff       	sbrs	r30, 0
	bld   r16,     6       ; Store T to the 7th bit of the LFSR
    7bb0:	06 f9       	bld	r16, 6

00007bb2 <ch4_end>:

ch4_end:
	sts   tr4_barrel_lo, r16 ; save the LFSR
    7bb2:	00 93 e6 0c 	sts	0x0CE6, r16
	sts   tr4_barrel_hi, r17
    7bb6:	10 93 e7 0c 	sts	0x0CE7, r17
	sts   tr4_divider, ZL  ; Save the divider (plus 7/15 mode bit in LSB)
    7bba:	e0 93 e8 0c 	sts	0x0CE8, r30

#if (SOUND_CHANNEL_5_ENABLE != 0)

	; Channel 5 - PCM (45 cy + 2/3 sync generator)

	ldi   r17,     0
    7bbe:	10 e0       	ldi	r17, 0x00	; 0
	lds   ZL,      tr5_pos_frac
    7bc0:	e0 91 ed 0c 	lds	r30, 0x0CED
	lds   ZH,      tr5_step_lo
    7bc4:	f0 91 eb 0c 	lds	r31, 0x0CEB
	;--- Video sync update (136 cy LOW pulse) ---
	sbrc  r18,     1
    7bc8:	21 fd       	sbrc	r18, 1
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN
    7bca:	28 9a       	sbi	0x05, 0	; 5
	;--------------------------------------------
	add   ZL,      ZH      ; Add fractional part
    7bcc:	ef 0f       	add	r30, r31
	sts   tr5_pos_frac, ZL
    7bce:	e0 93 ed 0c 	sts	0x0CED, r30

	lds   ZL,      tr5_pos_lo
    7bd2:	e0 91 ee 0c 	lds	r30, 0x0CEE
	lds   ZH,      tr5_pos_hi
    7bd6:	f0 91 ef 0c 	lds	r31, 0x0CEF
	lds   r16,     tr5_step_hi
    7bda:	00 91 ec 0c 	lds	r16, 0x0CEC
	adc   ZL,      r16     ; Add low part
    7bde:	e0 1f       	adc	r30, r16
	adc   ZH,      r17     ; Add high part
    7be0:	f1 1f       	adc	r31, r17

	lds   r16,     tr5_loop_end_lo
    7be2:	00 91 f2 0c 	lds	r16, 0x0CF2
	lds   r17,     tr5_loop_end_hi
    7be6:	10 91 f3 0c 	lds	r17, 0x0CF3
	cp    ZL,      r16
    7bea:	e0 17       	cp	r30, r16
	cpc   ZH,      r17
    7bec:	f1 07       	cpc	r31, r17
	brcc  ch5_reset        ; Gone past end of sample
    7bee:	18 f4       	brcc	.+6      	; 0x7bf6 <ch5_reset>
	lpm   ZL,      Z
    7bf0:	e4 91       	lpm	r30, Z
	rjmp  .
    7bf2:	00 c0       	rjmp	.+0      	; 0x7bf4 <ch4_end+0x42>
	rjmp  ch5_nores
    7bf4:	06 c0       	rjmp	.+12     	; 0x7c02 <ch5_nores>

00007bf6 <ch5_reset>:

ch5_reset:
	lds   r16,     tr5_loop_len_lo
    7bf6:	00 91 f0 0c 	lds	r16, 0x0CF0
	lds   r17,     tr5_loop_len_hi
    7bfa:	10 91 f1 0c 	lds	r17, 0x0CF1
	sub   ZL,      r16
    7bfe:	e0 1b       	sub	r30, r16
	sbc   ZH,      r17     ; Reset to beginning
    7c00:	f1 0b       	sbc	r31, r17

00007c02 <ch5_nores>:

ch5_nores:
	sts   tr5_pos_lo, ZL
    7c02:	e0 93 ee 0c 	sts	0x0CEE, r30
	sts   tr5_pos_hi, ZH
    7c06:	f0 93 ef 0c 	sts	0x0CEF, r31

	lpm   r16,     Z       ; Load sample
    7c0a:	04 91       	lpm	r16, Z
	movw  ZL,      r0
    7c0c:	f0 01       	movw	r30, r0
	lds   r17,     tr5_vol
    7c0e:	10 91 ea 0c 	lds	r17, 0x0CEA
	mulsu r16,     r17     ; (sample * mixing_vol)
    7c12:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7c14:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7c16:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Ajust mix buffer msb
    7c18:	0e 1e       	adc	r0, r30

#endif

	; Restore no longer used registers (5 cy + 2/3 sync generator)

	movw  ZL,      r0      ; Move mix buffer for Final processing
    7c1a:	f0 01       	movw	r30, r0
	pop   r16
    7c1c:	0f 91       	pop	r16
	pop   r17
    7c1e:	1f 91       	pop	r17
	;--------------------------------------------
#endif

	; Final processing (9 cy)

	subi  ZH,      0x80
    7c20:	f0 58       	subi	r31, 0x80	; 128
	sbci  ZL,      0xFF    ; Converts to unsigned
    7c22:	ef 4f       	sbci	r30, 0xFF	; 255
	brpl  .+6
    7c24:	1a f4       	brpl	.+6      	; 0x7c2c <ch5_nores+0x2a>
	ldi   ZH,      0x00    ; Saturate from bottom to 0x00
    7c26:	f0 e0       	ldi	r31, 0x00	; 0
	nop
    7c28:	00 00       	nop
	rjmp  .+6
    7c2a:	03 c0       	rjmp	.+6      	; 0x7c32 <ch5_nores+0x30>
	cpi   ZL,      0x00
    7c2c:	e0 30       	cpi	r30, 0x00	; 0
	breq  .+2
    7c2e:	09 f0       	breq	.+2      	; 0x7c32 <ch5_nores+0x30>
	ldi   ZH,      0xFF    ; Saturate from top to 0xFF
    7c30:	ff ef       	ldi	r31, 0xFF	; 255
	sts   _SFR_MEM_ADDR(OCR2A), ZH ; Output sound byte
    7c32:	f0 93 b3 00 	sts	0x00B3, r31

uart_tx_end:

#endif

	pop   r18
    7c36:	2f 91       	pop	r18

	ret
    7c38:	08 95       	ret

00007c3a <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7c3a:	80 93 a7 0c 	sts	0x0CA7, r24
	sts sprites_tile_banks+1,r25
    7c3e:	90 93 a8 0c 	sts	0x0CA8, r25
	ret
    7c42:	08 95       	ret

00007c44 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7c44:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7c46:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7c48:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7c4a:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7c4c:	6c e1       	ldi	r22, 0x1C	; 28

00007c4e <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7c4e:	6d 93       	st	X+, r22
	sbiw r30,1
    7c50:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7c52:	e9 f7       	brne	.-6      	; 0x7c4e <fill_vram_loop>

	clr r1
    7c54:	11 24       	eor	r1, r1

	ret
    7c56:	08 95       	ret

00007c58 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7c58:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7c5a:	76 2f       	mov	r23, r22
	lsr r22
    7c5c:	66 95       	lsr	r22
	lsr r22
    7c5e:	66 95       	lsr	r22
	lsr r22			;y>>3
    7c60:	66 95       	lsr	r22
	ldi r18,8		
    7c62:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    7c64:	82 9f       	mul	r24, r18
	movw XL,r0
    7c66:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7c68:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7c6a:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7c6c:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7c6e:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7c70:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7c72:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    7c74:	4c 93       	st	X, r20

	clr r1
    7c76:	11 24       	eor	r1, r1

	ret
    7c78:	08 95       	ret

00007c7a <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7c7a:	80 93 af 0c 	sts	0x0CAF, r24
	sts tile_table_hi,r25	
    7c7e:	90 93 b0 0c 	sts	0x0CB0, r25
	ret
    7c82:	08 95       	ret

00007c84 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7c84:	80 91 ba 0c 	lds	r24, 0x0CBA
	andi r24,SYNC_FLAG_VSYNC
    7c88:	81 70       	andi	r24, 0x01	; 1
	ret
    7c8a:	08 95       	ret

00007c8c <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7c8c:	20 91 ba 0c 	lds	r18, 0x0CBA
	andi r18,~SYNC_FLAG_VSYNC
    7c90:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7c92:	20 93 ba 0c 	sts	0x0CBA, r18
	ret
    7c96:	08 95       	ret

00007c98 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7c98:	88 23       	and	r24, r24
	brne rj_p2
    7c9a:	29 f4       	brne	.+10     	; 0x7ca6 <rj_p2>
		
	lds r24,joypad1_status_lo
    7c9c:	80 91 c1 0c 	lds	r24, 0x0CC1
	lds r25,joypad1_status_lo+1
    7ca0:	90 91 c2 0c 	lds	r25, 0x0CC2
	ret
    7ca4:	08 95       	ret

00007ca6 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7ca6:	80 91 c5 0c 	lds	r24, 0x0CC5
	lds r25,joypad2_status_lo+1	
    7caa:	90 91 c6 0c 	lds	r25, 0x0CC6

	ret
    7cae:	08 95       	ret

00007cb0 <SoftReset>:
	; This may happen if the soft reset is called from interrupt, which
	; happens if CONTROLLERS_VSYNC_READ is set nonzero.
	; Note that no "wdr" is used, it is unnecessary. If the watchdog
	; resets right when it was enabled, that's all right.
	
	ldi  ZL,       lo8(_SFR_MEM_ADDR(WDTCSR))
    7cb0:	e0 e6       	ldi	r30, 0x60	; 96
	ldi  ZH,       hi8(_SFR_MEM_ADDR(WDTCSR))
    7cb2:	f0 e0       	ldi	r31, 0x00	; 0
	ld   r24,      Z
    7cb4:	80 81       	ld	r24, Z
	sbrc r24,      WDE     ; Watchdog already enabled?
    7cb6:	83 fd       	sbrc	r24, 3
	ret                    ; If so, return doing nothing (let it time out)
    7cb8:	08 95       	ret
	ldi  r24,      (1 << WDCE) | (1 << WDE)
    7cba:	88 e1       	ldi	r24, 0x18	; 24
	ldi  r25,      (1 << WDE) ; Enable Watchdog, 16ms timeout
    7cbc:	98 e0       	ldi	r25, 0x08	; 8
	cli
    7cbe:	f8 94       	cli
	st   Z,        r24
    7cc0:	80 83       	st	Z, r24
	st   Z,        r25
    7cc2:	90 83       	st	Z, r25
	sei
    7cc4:	78 94       	sei
	rjmp .-2               ; Halt user program
    7cc6:	ff cf       	rjmp	.-2      	; 0x7cc6 <SoftReset+0x16>

00007cc8 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7cc8:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7cca:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7ccc:	f1 f7       	brne	.-4      	; 0x7cca <WaitUs+0x2>
	nop
    7cce:	00 00       	nop
	sbiw r24,1
    7cd0:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7cd2:	d1 f7       	brne	.-12     	; 0x7cc8 <WaitUs>

	ret
    7cd4:	08 95       	ret

00007cd6 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7cd6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7cd8:	fe cf       	rjmp	.-4      	; 0x7cd6 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7cda:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7cdc:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7cde:	60 bd       	out	0x20, r22	; 32
   cli
    7ce0:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7ce2:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7ce4:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7ce6:	78 94       	sei
   ret
    7ce8:	08 95       	ret

00007cea <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7cea:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7cec:	fe cf       	rjmp	.-4      	; 0x7cea <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7cee:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7cf0:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7cf2:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7cf4:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7cf6:	80 b5       	in	r24, 0x20	; 32
   sei
    7cf8:	78 94       	sei
   ret
    7cfa:	08 95       	ret

00007cfc <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7cfc:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7cfe:	80 93 b9 0c 	sts	0x0CB9, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7d02:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7d06:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7d0a:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7d0e:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7d12:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7d16:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7d1a:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7d1e:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7d22:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7d24:	80 93 81 00 	sts	0x0081, r24

		cli
    7d28:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7d2a:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7d2c:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7d30:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7d32:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7d36:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7d38:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7d3c:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7d40:	78 94       	sei

00007d42 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7d42:	80 91 b9 0c 	lds	r24, 0x0CB9
		cpi r24,8
    7d46:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7d48:	e0 f3       	brcs	.-8      	; 0x7d42 <wait>

		ret
    7d4a:	08 95       	ret

00007d4c <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7d4c:	80 91 cb 0c 	lds	r24, 0x0CCB
		lds r25,random_value+1
    7d50:	90 91 cc 0c 	lds	r25, 0x0CCC
		ret
    7d54:	08 95       	ret

00007d56 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7d56:	0f 93       	push	r16
		push r17
    7d58:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7d5a:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7d5c:	0f 93       	push	r16

		lds r16,sync_pulse
    7d5e:	00 91 b9 0c 	lds	r16, 0x0CB9
		inc r16
    7d62:	03 95       	inc	r16
		sts sync_pulse,r16
    7d64:	00 93 b9 0c 	sts	0x0CB9, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7d68:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7d6a:	08 c0       	rjmp	.+16     	; 0x7d7c <__vector_8+0x26>
		lds r17,random_value
    7d6c:	10 91 cb 0c 	lds	r17, 0x0CCB
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d70:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d74:	10 27       	eor	r17, r16
		sts random_value,r17
    7d76:	10 93 cb 0c 	sts	0x0CCB, r17
		rjmp 2f
    7d7a:	07 c0       	rjmp	.+14     	; 0x7d8a <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7d7c:	10 91 cc 0c 	lds	r17, 0x0CCC
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d80:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d84:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7d86:	10 93 cc 0c 	sts	0x0CCC, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7d8a:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7d8c:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7d90:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7d92:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7d94:	1f 91       	pop	r17
		pop r16
    7d96:	0f 91       	pop	r16
		reti
    7d98:	18 95       	reti

00007d9a <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7d9a:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7d9c:	c8 95       	lpm
    7d9e:	c8 95       	lpm
		Wait200ns();
    7da0:	c8 95       	lpm
    7da2:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7da4:	12 98       	cbi	0x02, 2	; 2
    7da6:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();

}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7da8:	80 e0       	ldi	r24, 0x00	; 0
    7daa:	90 e0       	ldi	r25, 0x00	; 0
    7dac:	20 e0       	ldi	r18, 0x00	; 0
    7dae:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7db0:	36 95       	lsr	r19
    7db2:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7db4:	96 95       	lsr	r25
    7db6:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7db8:	c8 95       	lpm
    7dba:	c8 95       	lpm
			Wait200ns();
    7dbc:	c8 95       	lpm
    7dbe:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7dc0:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7dc2:	00 9b       	sbis	0x00, 0	; 0
    7dc4:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7dc6:	01 9b       	sbis	0x00, 1	; 0
    7dc8:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7dca:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7dcc:	c8 95       	lpm
    7dce:	c8 95       	lpm
			Wait200ns();
    7dd0:	c8 95       	lpm
    7dd2:	c8 95       	lpm
    7dd4:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7dd6:	61 f7       	brne	.-40     	; 0x7db0 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7dd8:	30 93 c2 0c 	sts	0x0CC2, r19
    7ddc:	20 93 c1 0c 	sts	0x0CC1, r18
		joypad2_status_lo=p2ButtonsLo;
    7de0:	90 93 c6 0c 	sts	0x0CC6, r25
    7de4:	80 93 c5 0c 	sts	0x0CC5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7de8:	80 91 c1 0c 	lds	r24, 0x0CC1
    7dec:	90 91 c2 0c 	lds	r25, 0x0CC2
    7df0:	0f 97       	sbiw	r24, 0x0f	; 15
    7df2:	31 f0       	breq	.+12     	; 0x7e00 <ReadButtons+0x66>
    7df4:	80 91 c5 0c 	lds	r24, 0x0CC5
    7df8:	90 91 c6 0c 	lds	r25, 0x0CC6
    7dfc:	0f 97       	sbiw	r24, 0x0f	; 15
    7dfe:	11 f4       	brne	.+4      	; 0x7e04 <ReadButtons+0x6a>
		SoftReset();
    7e00:	0c 94 58 3e 	jmp	0x7cb0	; 0x7cb0 <SoftReset>
    7e04:	08 95       	ret

00007e06 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7e06:	10 92 ff 0c 	sts	0x0CFF, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7e0a:	00 99       	sbic	0x00, 0	; 0
    7e0c:	03 c0       	rjmp	.+6      	; 0x7e14 <ReadControllers+0xe>
    7e0e:	81 e0       	ldi	r24, 0x01	; 1
    7e10:	80 93 ff 0c 	sts	0x0CFF, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7e14:	01 99       	sbic	0x00, 1	; 0
    7e16:	05 c0       	rjmp	.+10     	; 0x7e22 <ReadControllers+0x1c>
    7e18:	80 91 ff 0c 	lds	r24, 0x0CFF
    7e1c:	82 60       	ori	r24, 0x02	; 2
    7e1e:	80 93 ff 0c 	sts	0x0CFF, r24
			
	//read the standard buttons
	ReadButtons();
    7e22:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <ReadButtons>

00007e26 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7e26:	cf 93       	push	r28
    7e28:	df 93       	push	r29
    7e2a:	c0 e0       	ldi	r28, 0x00	; 0
    7e2c:	d0 e0       	ldi	r29, 0x00	; 0
    7e2e:	fe 01       	movw	r30, r28
    7e30:	e8 53       	subi	r30, 0x38	; 56
    7e32:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7e34:	64 91       	lpm	r22, Z
    7e36:	ce 01       	movw	r24, r28
    7e38:	0e 94 6b 3e 	call	0x7cd6	; 0x7cd6 <WriteEeprom>
    7e3c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7e3e:	c0 32       	cpi	r28, 0x20	; 32
    7e40:	d1 05       	cpc	r29, r1
    7e42:	a9 f7       	brne	.-22     	; 0x7e2e <FormatEeprom+0x8>
    7e44:	c0 e2       	ldi	r28, 0x20	; 32
    7e46:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7e48:	6f ef       	ldi	r22, 0xFF	; 255
    7e4a:	ce 01       	movw	r24, r28
    7e4c:	0e 94 6b 3e 	call	0x7cd6	; 0x7cd6 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7e50:	6f ef       	ldi	r22, 0xFF	; 255
    7e52:	ce 01       	movw	r24, r28
    7e54:	01 96       	adiw	r24, 0x01	; 1
    7e56:	0e 94 6b 3e 	call	0x7cd6	; 0x7cd6 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7e5a:	a0 96       	adiw	r28, 0x20	; 32
    7e5c:	c1 15       	cp	r28, r1
    7e5e:	88 e0       	ldi	r24, 0x08	; 8
    7e60:	d8 07       	cpc	r29, r24
    7e62:	91 f7       	brne	.-28     	; 0x7e48 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7e64:	df 91       	pop	r29
    7e66:	cf 91       	pop	r28
    7e68:	08 95       	ret

00007e6a <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7e6a:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7e6c:	80 e0       	ldi	r24, 0x00	; 0
    7e6e:	90 e0       	ldi	r25, 0x00	; 0
    7e70:	0e 94 75 3e 	call	0x7cea	; 0x7cea <ReadEeprom>
    7e74:	c8 2f       	mov	r28, r24
    7e76:	81 e0       	ldi	r24, 0x01	; 1
    7e78:	90 e0       	ldi	r25, 0x00	; 0
    7e7a:	0e 94 75 3e 	call	0x7cea	; 0x7cea <ReadEeprom>
    7e7e:	28 2f       	mov	r18, r24
    7e80:	30 e0       	ldi	r19, 0x00	; 0
    7e82:	32 2f       	mov	r19, r18
    7e84:	22 27       	eor	r18, r18
    7e86:	2c 0f       	add	r18, r28
    7e88:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7e8a:	81 e0       	ldi	r24, 0x01	; 1
    7e8c:	2a 35       	cpi	r18, 0x5A	; 90
    7e8e:	35 45       	sbci	r19, 0x55	; 85
    7e90:	09 f0       	breq	.+2      	; 0x7e94 <isEepromFormatted+0x2a>
    7e92:	80 e0       	ldi	r24, 0x00	; 0
}
    7e94:	cf 91       	pop	r28
    7e96:	08 95       	ret

00007e98 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7e98:	8f 92       	push	r8
    7e9a:	9f 92       	push	r9
    7e9c:	af 92       	push	r10
    7e9e:	bf 92       	push	r11
    7ea0:	cf 92       	push	r12
    7ea2:	df 92       	push	r13
    7ea4:	ef 92       	push	r14
    7ea6:	ff 92       	push	r15
    7ea8:	0f 93       	push	r16
    7eaa:	1f 93       	push	r17
    7eac:	cf 93       	push	r28
    7eae:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7eb0:	fb 01       	movw	r30, r22
    7eb2:	11 82       	std	Z+1, r1	; 0x01
    7eb4:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7eb6:	8f 3f       	cpi	r24, 0xFF	; 255
    7eb8:	ff ef       	ldi	r31, 0xFF	; 255
    7eba:	9f 07       	cpc	r25, r31
    7ebc:	89 f1       	breq	.+98     	; 0x7f20 <EepromBlockExists+0x88>
    7ebe:	6a 01       	movw	r12, r20
    7ec0:	8b 01       	movw	r16, r22
    7ec2:	7c 01       	movw	r14, r24
    7ec4:	a1 2c       	mov	r10, r1
    7ec6:	b1 2c       	mov	r11, r1
    7ec8:	c0 e0       	ldi	r28, 0x00	; 0
    7eca:	d3 e0       	ldi	r29, 0x03	; 3
    7ecc:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7ece:	c5 01       	movw	r24, r10
    7ed0:	0e 94 75 3e 	call	0x7cea	; 0x7cea <ReadEeprom>
    7ed4:	88 2e       	mov	r8, r24
    7ed6:	c5 01       	movw	r24, r10
    7ed8:	01 96       	adiw	r24, 0x01	; 1
    7eda:	0e 94 75 3e 	call	0x7cea	; 0x7cea <ReadEeprom>
    7ede:	28 2f       	mov	r18, r24
    7ee0:	30 e0       	ldi	r19, 0x00	; 0
    7ee2:	32 2f       	mov	r19, r18
    7ee4:	22 27       	eor	r18, r18
    7ee6:	28 0d       	add	r18, r8
    7ee8:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7eea:	2e 15       	cp	r18, r14
    7eec:	3f 05       	cpc	r19, r15
    7eee:	29 f4       	brne	.+10     	; 0x7efa <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7ef0:	f8 01       	movw	r30, r16
    7ef2:	b1 82       	std	Z+1, r11	; 0x01
    7ef4:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7ef6:	d0 e0       	ldi	r29, 0x00	; 0
    7ef8:	0b c0       	rjmp	.+22     	; 0x7f10 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7efa:	2f 3f       	cpi	r18, 0xFF	; 255
    7efc:	3f 4f       	sbci	r19, 0xFF	; 255
    7efe:	41 f4       	brne	.+16     	; 0x7f10 <EepromBlockExists+0x78>
    7f00:	91 10       	cpse	r9, r1
    7f02:	06 c0       	rjmp	.+12     	; 0x7f10 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7f04:	c1 14       	cp	r12, r1
    7f06:	d1 04       	cpc	r13, r1
    7f08:	11 f0       	breq	.+4      	; 0x7f0e <EepromBlockExists+0x76>
    7f0a:	f6 01       	movw	r30, r12
    7f0c:	c0 83       	st	Z, r28
    7f0e:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7f10:	cf 5f       	subi	r28, 0xFF	; 255
    7f12:	f0 e2       	ldi	r31, 0x20	; 32
    7f14:	af 0e       	add	r10, r31
    7f16:	b1 1c       	adc	r11, r1
    7f18:	c0 34       	cpi	r28, 0x40	; 64
    7f1a:	c9 f6       	brne	.-78     	; 0x7ece <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7f1c:	8d 2f       	mov	r24, r29
    7f1e:	01 c0       	rjmp	.+2      	; 0x7f22 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7f20:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7f22:	df 91       	pop	r29
    7f24:	cf 91       	pop	r28
    7f26:	1f 91       	pop	r17
    7f28:	0f 91       	pop	r16
    7f2a:	ff 90       	pop	r15
    7f2c:	ef 90       	pop	r14
    7f2e:	df 90       	pop	r13
    7f30:	cf 90       	pop	r12
    7f32:	bf 90       	pop	r11
    7f34:	af 90       	pop	r10
    7f36:	9f 90       	pop	r9
    7f38:	8f 90       	pop	r8
    7f3a:	08 95       	ret

00007f3c <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7f3c:	ef 92       	push	r14
    7f3e:	ff 92       	push	r15
    7f40:	0f 93       	push	r16
    7f42:	1f 93       	push	r17
    7f44:	cf 93       	push	r28
    7f46:	df 93       	push	r29
    7f48:	00 d0       	rcall	.+0      	; 0x7f4a <EepromWriteBlock+0xe>
    7f4a:	1f 92       	push	r1
    7f4c:	cd b7       	in	r28, 0x3d	; 61
    7f4e:	de b7       	in	r29, 0x3e	; 62
    7f50:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7f52:	1a 82       	std	Y+2, r1	; 0x02
    7f54:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    7f56:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    7f58:	ae 01       	movw	r20, r28
    7f5a:	4d 5f       	subi	r20, 0xFD	; 253
    7f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    7f5e:	be 01       	movw	r22, r28
    7f60:	6f 5f       	subi	r22, 0xFF	; 255
    7f62:	7f 4f       	sbci	r23, 0xFF	; 255
    7f64:	fc 01       	movw	r30, r24
    7f66:	80 81       	ld	r24, Z
    7f68:	91 81       	ldd	r25, Z+1	; 0x01
    7f6a:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7f6e:	88 23       	and	r24, r24
    7f70:	11 f0       	breq	.+4      	; 0x7f76 <EepromWriteBlock+0x3a>
    7f72:	83 30       	cpi	r24, 0x03	; 3
    7f74:	19 f5       	brne	.+70     	; 0x7fbc <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f76:	89 81       	ldd	r24, Y+1	; 0x01
    7f78:	9a 81       	ldd	r25, Y+2	; 0x02
    7f7a:	89 2b       	or	r24, r25
    7f7c:	49 f4       	brne	.+18     	; 0x7f90 <EepromWriteBlock+0x54>
    7f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    7f80:	88 23       	and	r24, r24
    7f82:	d9 f0       	breq	.+54     	; 0x7fba <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7f84:	f0 e2       	ldi	r31, 0x20	; 32
    7f86:	8f 9f       	mul	r24, r31
    7f88:	c0 01       	movw	r24, r0
    7f8a:	11 24       	eor	r1, r1
    7f8c:	9a 83       	std	Y+2, r25	; 0x02
    7f8e:	89 83       	std	Y+1, r24	; 0x01
    7f90:	78 01       	movw	r14, r16
    7f92:	20 e2       	ldi	r18, 0x20	; 32
    7f94:	e2 0e       	add	r14, r18
    7f96:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7f98:	f8 01       	movw	r30, r16
    7f9a:	61 91       	ld	r22, Z+
    7f9c:	8f 01       	movw	r16, r30
    7f9e:	89 81       	ldd	r24, Y+1	; 0x01
    7fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    7fa2:	9c 01       	movw	r18, r24
    7fa4:	2f 5f       	subi	r18, 0xFF	; 255
    7fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    7fa8:	3a 83       	std	Y+2, r19	; 0x02
    7faa:	29 83       	std	Y+1, r18	; 0x01
    7fac:	0e 94 6b 3e 	call	0x7cd6	; 0x7cd6 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7fb0:	0e 15       	cp	r16, r14
    7fb2:	1f 05       	cpc	r17, r15
    7fb4:	89 f7       	brne	.-30     	; 0x7f98 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7fb6:	80 e0       	ldi	r24, 0x00	; 0
    7fb8:	01 c0       	rjmp	.+2      	; 0x7fbc <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7fba:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7fbc:	0f 90       	pop	r0
    7fbe:	0f 90       	pop	r0
    7fc0:	0f 90       	pop	r0
    7fc2:	df 91       	pop	r29
    7fc4:	cf 91       	pop	r28
    7fc6:	1f 91       	pop	r17
    7fc8:	0f 91       	pop	r16
    7fca:	ff 90       	pop	r15
    7fcc:	ef 90       	pop	r14
    7fce:	08 95       	ret

00007fd0 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7fd0:	cf 92       	push	r12
    7fd2:	df 92       	push	r13
    7fd4:	ff 92       	push	r15
    7fd6:	0f 93       	push	r16
    7fd8:	1f 93       	push	r17
    7fda:	cf 93       	push	r28
    7fdc:	df 93       	push	r29
    7fde:	00 d0       	rcall	.+0      	; 0x7fe0 <EepromReadBlock+0x10>
    7fe0:	cd b7       	in	r28, 0x3d	; 61
    7fe2:	de b7       	in	r29, 0x3e	; 62
    7fe4:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7fe6:	40 e0       	ldi	r20, 0x00	; 0
    7fe8:	50 e0       	ldi	r21, 0x00	; 0
    7fea:	be 01       	movw	r22, r28
    7fec:	6f 5f       	subi	r22, 0xFF	; 255
    7fee:	7f 4f       	sbci	r23, 0xFF	; 255
    7ff0:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <EepromBlockExists>
    7ff4:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7ff6:	81 11       	cpse	r24, r1
    7ff8:	13 c0       	rjmp	.+38     	; 0x8020 <EepromReadBlock+0x50>
    7ffa:	68 01       	movw	r12, r16
    7ffc:	80 e2       	ldi	r24, 0x20	; 32
    7ffe:	c8 0e       	add	r12, r24
    8000:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    8002:	89 81       	ldd	r24, Y+1	; 0x01
    8004:	9a 81       	ldd	r25, Y+2	; 0x02
    8006:	9c 01       	movw	r18, r24
    8008:	2f 5f       	subi	r18, 0xFF	; 255
    800a:	3f 4f       	sbci	r19, 0xFF	; 255
    800c:	3a 83       	std	Y+2, r19	; 0x02
    800e:	29 83       	std	Y+1, r18	; 0x01
    8010:	0e 94 75 3e 	call	0x7cea	; 0x7cea <ReadEeprom>
    8014:	f8 01       	movw	r30, r16
    8016:	81 93       	st	Z+, r24
    8018:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    801a:	ec 15       	cp	r30, r12
    801c:	fd 05       	cpc	r31, r13
    801e:	89 f7       	brne	.-30     	; 0x8002 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    8020:	8f 2d       	mov	r24, r15
    8022:	0f 90       	pop	r0
    8024:	0f 90       	pop	r0
    8026:	df 91       	pop	r29
    8028:	cf 91       	pop	r28
    802a:	1f 91       	pop	r17
    802c:	0f 91       	pop	r16
    802e:	ff 90       	pop	r15
    8030:	df 90       	pop	r13
    8032:	cf 90       	pop	r12
    8034:	08 95       	ret

00008036 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8036:	00 97       	sbiw	r24, 0x00	; 0
    8038:	21 f0       	breq	.+8      	; 0x8042 <GetPrngNumber+0xc>
    803a:	90 93 cf 0c 	sts	0x0CCF, r25
    803e:	80 93 ce 0c 	sts	0x0CCE, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8042:	20 91 ce 0c 	lds	r18, 0x0CCE
    8046:	30 91 cf 0c 	lds	r19, 0x0CCF
    804a:	a9 01       	movw	r20, r18
    804c:	56 95       	lsr	r21
    804e:	47 95       	ror	r20
    8050:	56 95       	lsr	r21
    8052:	47 95       	ror	r20
    8054:	c9 01       	movw	r24, r18
    8056:	63 e0       	ldi	r22, 0x03	; 3
    8058:	96 95       	lsr	r25
    805a:	87 95       	ror	r24
    805c:	6a 95       	dec	r22
    805e:	e1 f7       	brne	.-8      	; 0x8058 <GetPrngNumber+0x22>
    8060:	84 27       	eor	r24, r20
    8062:	95 27       	eor	r25, r21
    8064:	82 27       	eor	r24, r18
    8066:	93 27       	eor	r25, r19
    8068:	a9 01       	movw	r20, r18
    806a:	75 e0       	ldi	r23, 0x05	; 5
    806c:	56 95       	lsr	r21
    806e:	47 95       	ror	r20
    8070:	7a 95       	dec	r23
    8072:	e1 f7       	brne	.-8      	; 0x806c <GetPrngNumber+0x36>
    8074:	84 27       	eor	r24, r20
    8076:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8078:	99 27       	eor	r25, r25
    807a:	86 95       	lsr	r24
    807c:	97 95       	ror	r25
    807e:	88 27       	eor	r24, r24
    8080:	36 95       	lsr	r19
    8082:	27 95       	ror	r18
    8084:	82 2b       	or	r24, r18
    8086:	93 2b       	or	r25, r19
    8088:	90 93 cf 0c 	sts	0x0CCF, r25
    808c:	80 93 ce 0c 	sts	0x0CCE, r24
	return prng_state;   
}
    8090:	08 95       	ret

00008092 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8092:	fc 01       	movw	r30, r24
    8094:	67 87       	std	Z+15, r22	; 0x0f
    8096:	08 95       	ret

00008098 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8098:	e2 ed       	ldi	r30, 0xD2	; 210
    809a:	fc e0       	ldi	r31, 0x0C	; 12
    809c:	81 e0       	ldi	r24, 0x01	; 1
    809e:	91 e0       	ldi	r25, 0x01	; 1
    80a0:	95 8b       	std	Z+21, r25	; 0x15
    80a2:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    80a4:	63 8b       	std	Z+19, r22	; 0x13
    80a6:	08 95       	ret

000080a8 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    80a8:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    80aa:	90 81       	ld	r25, Z
    80ac:	9f 75       	andi	r25, 0x5F	; 95
    80ae:	90 83       	st	Z, r25
    80b0:	08 95       	ret

000080b2 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    80b2:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    80b4:	90 81       	ld	r25, Z
    80b6:	90 64       	ori	r25, 0x40	; 64
    80b8:	90 83       	st	Z, r25
    80ba:	08 95       	ret

000080bc <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    80bc:	fc 01       	movw	r30, r24
    80be:	66 87       	std	Z+14, r22	; 0x0e
    80c0:	08 95       	ret

000080c2 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    80c2:	fc 01       	movw	r30, r24
    80c4:	62 87       	std	Z+10, r22	; 0x0a
    80c6:	08 95       	ret

000080c8 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    80c8:	fc 01       	movw	r30, r24
    80ca:	63 87       	std	Z+11, r22	; 0x0b
    80cc:	08 95       	ret

000080ce <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    80ce:	cf 93       	push	r28
    80d0:	df 93       	push	r29
    80d2:	ec 01       	movw	r28, r24
    80d4:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    80d6:	29 81       	ldd	r18, Y+1	; 0x01
    80d8:	30 e0       	ldi	r19, 0x00	; 0
    80da:	f9 01       	movw	r30, r18
    80dc:	ee 0f       	add	r30, r30
    80de:	ff 1f       	adc	r31, r31
    80e0:	e2 53       	subi	r30, 0x32	; 50
    80e2:	f6 47       	sbci	r31, 0x76	; 118
    80e4:	65 91       	lpm	r22, Z+
    80e6:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    80e8:	f9 01       	movw	r30, r18
    80ea:	e4 0f       	add	r30, r20
    80ec:	f1 1d       	adc	r31, r1
    80ee:	47 fd       	sbrc	r20, 7
    80f0:	fa 95       	dec	r31
    80f2:	ee 0f       	add	r30, r30
    80f4:	ff 1f       	adc	r31, r31
    80f6:	e2 53       	subi	r30, 0x32	; 50
    80f8:	f6 47       	sbci	r31, 0x76	; 118
    80fa:	85 91       	lpm	r24, Z+
    80fc:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    80fe:	86 1b       	sub	r24, r22
    8100:	97 0b       	sbc	r25, r23
    8102:	68 85       	ldd	r22, Y+8	; 0x08
    8104:	70 e0       	ldi	r23, 0x00	; 0
    8106:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
	if(delta==0)delta++;
    810a:	61 15       	cp	r22, r1
    810c:	71 05       	cpc	r23, r1
    810e:	11 f4       	brne	.+4      	; 0x8114 <PatchCommand11+0x46>
    8110:	61 e0       	ldi	r22, 0x01	; 1
    8112:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8114:	ea 81       	ldd	r30, Y+2	; 0x02
    8116:	86 e0       	ldi	r24, 0x06	; 6
    8118:	e8 9f       	mul	r30, r24
    811a:	f0 01       	movw	r30, r0
    811c:	11 24       	eor	r1, r1
    811e:	ee 52       	subi	r30, 0x2E	; 46
    8120:	f3 4f       	sbci	r31, 0xF3	; 243
    8122:	81 81       	ldd	r24, Z+1	; 0x01
    8124:	92 81       	ldd	r25, Z+2	; 0x02
    8126:	86 0f       	add	r24, r22
    8128:	97 1f       	adc	r25, r23
    812a:	92 83       	std	Z+2, r25	; 0x02
    812c:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    812e:	7e 83       	std	Y+6, r23	; 0x06
    8130:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8132:	88 81       	ld	r24, Y
    8134:	88 60       	ori	r24, 0x08	; 8
    8136:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8138:	89 81       	ldd	r24, Y+1	; 0x01
    813a:	48 0f       	add	r20, r24
    813c:	4f 83       	std	Y+7, r20	; 0x07
}
    813e:	df 91       	pop	r29
    8140:	cf 91       	pop	r28
    8142:	08 95       	ret

00008144 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8144:	fc 01       	movw	r30, r24
    8146:	60 87       	std	Z+8, r22	; 0x08
    8148:	08 95       	ret

0000814a <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    814a:	fc 01       	movw	r30, r24
    814c:	64 83       	std	Z+4, r22	; 0x04
    814e:	08 95       	ret

00008150 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8150:	fc 01       	movw	r30, r24
    8152:	82 81       	ldd	r24, Z+2	; 0x02
    8154:	0c 94 ca 44 	jmp	0x8994	; 0x8994 <SetMixerWave>

00008158 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8158:	fc 01       	movw	r30, r24
	track->note+=param;
    815a:	91 81       	ldd	r25, Z+1	; 0x01
    815c:	69 0f       	add	r22, r25
    815e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8160:	82 81       	ldd	r24, Z+2	; 0x02
    8162:	0c 94 b3 44 	jmp	0x8966	; 0x8966 <SetMixerNote>

00008166 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8166:	fc 01       	movw	r30, r24
	track->note-=param;
    8168:	91 81       	ldd	r25, Z+1	; 0x01
    816a:	96 1b       	sub	r25, r22
    816c:	69 2f       	mov	r22, r25
    816e:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8170:	82 81       	ldd	r24, Z+2	; 0x02
    8172:	0c 94 b3 44 	jmp	0x8966	; 0x8966 <SetMixerNote>

00008176 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8176:	1f 93       	push	r17
    8178:	cf 93       	push	r28
    817a:	df 93       	push	r29
    817c:	ec 01       	movw	r28, r24
    817e:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8180:	8a 81       	ldd	r24, Y+2	; 0x02
    8182:	0e 94 b3 44 	call	0x8966	; 0x8966 <SetMixerNote>
	track->note=param;
    8186:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8188:	88 81       	ld	r24, Y
    818a:	87 7f       	andi	r24, 0xF7	; 247
    818c:	88 83       	st	Y, r24
}
    818e:	df 91       	pop	r29
    8190:	cf 91       	pop	r28
    8192:	1f 91       	pop	r17
    8194:	08 95       	ret

00008196 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8196:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8198:	14 96       	adiw	r26, 0x04	; 4
    819a:	8c 91       	ld	r24, X
    819c:	14 97       	sbiw	r26, 0x04	; 4
    819e:	88 23       	and	r24, r24
    81a0:	19 f1       	breq	.+70     	; 0x81e8 <PatchCommand14+0x52>
    81a2:	55 96       	adiw	r26, 0x15	; 21
    81a4:	2d 91       	ld	r18, X+
    81a6:	3c 91       	ld	r19, X
    81a8:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    81aa:	66 23       	and	r22, r22
    81ac:	79 f0       	breq	.+30     	; 0x81cc <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    81ae:	77 27       	eor	r23, r23
    81b0:	67 fd       	sbrc	r22, 7
    81b2:	70 95       	com	r23
    81b4:	6f 5f       	subi	r22, 0xFF	; 255
    81b6:	7f 4f       	sbci	r23, 0xFF	; 255
    81b8:	ab 01       	movw	r20, r22
    81ba:	44 0f       	add	r20, r20
    81bc:	55 1f       	adc	r21, r21
    81be:	64 0f       	add	r22, r20
    81c0:	75 1f       	adc	r23, r21
    81c2:	26 1b       	sub	r18, r22
    81c4:	37 0b       	sbc	r19, r23
    81c6:	09 c0       	rjmp	.+18     	; 0x81da <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    81c8:	ef 3f       	cpi	r30, 0xFF	; 255
    81ca:	39 f0       	breq	.+14     	; 0x81da <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    81cc:	23 50       	subi	r18, 0x03	; 3
    81ce:	31 09       	sbc	r19, r1
    81d0:	f9 01       	movw	r30, r18
    81d2:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    81d4:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    81d6:	ed 30       	cpi	r30, 0x0D	; 13
    81d8:	b9 f7       	brne	.-18     	; 0x81c8 <PatchCommand14+0x32>
    81da:	56 96       	adiw	r26, 0x16	; 22
    81dc:	3c 93       	st	X, r19
    81de:	2e 93       	st	-X, r18
    81e0:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    81e2:	81 50       	subi	r24, 0x01	; 1
    81e4:	14 96       	adiw	r26, 0x04	; 4
    81e6:	8c 93       	st	X, r24
    81e8:	08 95       	ret

000081ea <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    81ea:	90 93 78 0d 	sts	0x0D78, r25
    81ee:	80 93 77 0d 	sts	0x0D77, r24

	masterVolume=DEFAULT_MASTER_VOL;
    81f2:	8f e6       	ldi	r24, 0x6F	; 111
    81f4:	80 93 7a 0d 	sts	0x0D7A, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    81f8:	10 92 d0 0c 	sts	0x0CD0, r1
    81fc:	e2 e1       	ldi	r30, 0x12	; 18
    81fe:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8200:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8202:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8204:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8206:	28 e1       	ldi	r18, 0x18	; 24
    8208:	df 01       	movw	r26, r30
    820a:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    820c:	8c 93       	st	X, r24
    820e:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8210:	9c 93       	st	X, r25
    8212:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8214:	1c 92       	st	X, r1
    8216:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8218:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    821a:	10 82       	st	Z, r1
    821c:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    821e:	2c 93       	st	X, r18
    8220:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8222:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8224:	8f 5f       	subi	r24, 0xFF	; 255
    8226:	77 96       	adiw	r30, 0x17	; 23
    8228:	85 30       	cpi	r24, 0x05	; 5
    822a:	71 f7       	brne	.-36     	; 0x8208 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    822c:	08 95       	ret

0000822e <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    822e:	e2 e0       	ldi	r30, 0x02	; 2
    8230:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8232:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8234:	20 81       	ld	r18, Z
    8236:	2f 77       	andi	r18, 0x7F	; 127
    8238:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    823a:	33 83       	std	Z+3, r19	; 0x03
    823c:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    823e:	2d e0       	ldi	r18, 0x0D	; 13
    8240:	e5 37       	cpi	r30, 0x75	; 117
    8242:	f2 07       	cpc	r31, r18
    8244:	b9 f7       	brne	.-18     	; 0x8234 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8246:	01 96       	adiw	r24, 0x01	; 1
    8248:	90 93 7f 0d 	sts	0x0D7F, r25
    824c:	80 93 7e 0d 	sts	0x0D7E, r24
		songStart=song+1;//skip first delta-time
    8250:	90 93 01 0d 	sts	0x0D01, r25
    8254:	80 93 00 0d 	sts	0x0D00, r24
		loopStart=song+1;
    8258:	90 93 81 0d 	sts	0x0D81, r25
    825c:	80 93 80 0d 	sts	0x0D80, r24
		nextDeltaTime=0;
    8260:	10 92 7c 0d 	sts	0x0D7C, r1
    8264:	10 92 7b 0d 	sts	0x0D7B, r1
		currDeltaTime=0;
    8268:	10 92 76 0d 	sts	0x0D76, r1
    826c:	10 92 75 0d 	sts	0x0D75, r1
		songSpeed=0;
    8270:	10 92 7d 0d 	sts	0x0D7D, r1

		lastStatus=0;
    8274:	10 92 79 0d 	sts	0x0D79, r1
		playSong=true;
    8278:	81 e0       	ldi	r24, 0x01	; 1
    827a:	80 93 d0 0c 	sts	0x0CD0, r24
    827e:	08 95       	ret

00008280 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    8280:	e2 e0       	ldi	r30, 0x02	; 2
    8282:	fd e0       	ldi	r31, 0x0D	; 13
    8284:	8a ef       	ldi	r24, 0xFA	; 250
    8286:	87 87       	std	Z+15, r24	; 0x0f
    8288:	86 a3       	std	Z+38, r24	; 0x26
    828a:	80 93 3f 0d 	sts	0x0D3F, r24
    828e:	80 93 56 0d 	sts	0x0D56, r24
    8292:	80 93 6d 0d 	sts	0x0D6D, r24
	}

	playSong=false;
    8296:	10 92 d0 0c 	sts	0x0CD0, r1
    829a:	08 95       	ret

0000829c <ResumeSong>:
}


void ResumeSong(){
	playSong=true;
    829c:	81 e0       	ldi	r24, 0x01	; 1
    829e:	80 93 d0 0c 	sts	0x0CD0, r24
    82a2:	08 95       	ret

000082a4 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    82a4:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    82a6:	ed 91       	ld	r30, X+
    82a8:	fc 91       	ld	r31, X
    82aa:	11 97       	sbiw	r26, 0x01	; 1
    82ac:	9f 01       	movw	r18, r30
    82ae:	2f 5f       	subi	r18, 0xFF	; 255
    82b0:	3f 4f       	sbci	r19, 0xFF	; 255
    82b2:	11 96       	adiw	r26, 0x01	; 1
    82b4:	3c 93       	st	X, r19
    82b6:	2e 93       	st	-X, r18
    82b8:	e4 91       	lpm	r30, Z
    82ba:	e7 fd       	sbrc	r30, 7
    82bc:	03 c0       	rjmp	.+6      	; 0x82c4 <ReadVarLen+0x20>
    82be:	8e 2f       	mov	r24, r30
    82c0:	90 e0       	ldi	r25, 0x00	; 0
    82c2:	08 95       	ret
    {
       value &= 0x7F;
    82c4:	ef 77       	andi	r30, 0x7F	; 127
    82c6:	8e 2f       	mov	r24, r30
    82c8:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    82ca:	96 95       	lsr	r25
    82cc:	98 2f       	mov	r25, r24
    82ce:	88 27       	eor	r24, r24
    82d0:	97 95       	ror	r25
    82d2:	87 95       	ror	r24
    82d4:	2f 5f       	subi	r18, 0xFF	; 255
    82d6:	3f 4f       	sbci	r19, 0xFF	; 255
    82d8:	f9 01       	movw	r30, r18
    82da:	31 97       	sbiw	r30, 0x01	; 1
    82dc:	e4 91       	lpm	r30, Z
    82de:	4e 2f       	mov	r20, r30
    82e0:	4f 77       	andi	r20, 0x7F	; 127
    82e2:	84 0f       	add	r24, r20
    82e4:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    82e6:	e7 fd       	sbrc	r30, 7
    82e8:	f0 cf       	rjmp	.-32     	; 0x82ca <ReadVarLen+0x26>
    82ea:	2d 93       	st	X+, r18
    82ec:	3c 93       	st	X, r19
    }


    return value;
}
    82ee:	08 95       	ret

000082f0 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    82f0:	ef 92       	push	r14
    82f2:	ff 92       	push	r15
    82f4:	0f 93       	push	r16
    82f6:	1f 93       	push	r17
    82f8:	cf 93       	push	r28
    82fa:	df 93       	push	r29
    82fc:	1f 92       	push	r1
    82fe:	cd b7       	in	r28, 0x3d	; 61
    8300:	de b7       	in	r29, 0x3e	; 62
    8302:	7c 01       	movw	r14, r24
    8304:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8306:	fc 01       	movw	r30, r24
    8308:	80 81       	ld	r24, Z
    830a:	08 2f       	mov	r16, r24
    830c:	00 1f       	adc	r16, r16
    830e:	00 27       	eor	r16, r16
    8310:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8312:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8314:	9f ef       	ldi	r25, 0xFF	; 255
    8316:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8318:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    831a:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    831c:	87 7b       	andi	r24, 0xB7	; 183
    831e:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8320:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8322:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8324:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8326:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8328:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    832a:	82 81       	ldd	r24, Z+2	; 0x02
    832c:	83 30       	cpi	r24, 0x03	; 3
    832e:	69 f4       	brne	.+26     	; 0x834a <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8330:	01 11       	cpse	r16, r1
    8332:	01 c0       	rjmp	.+2      	; 0x8336 <TriggerCommon+0x46>
    8334:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8336:	81 e0       	ldi	r24, 0x01	; 1
    8338:	91 e0       	ldi	r25, 0x01	; 1
    833a:	90 93 e7 0c 	sts	0x0CE7, r25
    833e:	80 93 e6 0c 	sts	0x0CE6, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8342:	81 e0       	ldi	r24, 0x01	; 1
    8344:	80 93 e5 0c 	sts	0x0CE5, r24
    8348:	39 c0       	rjmp	.+114    	; 0x83bc <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    834a:	84 30       	cpi	r24, 0x04	; 4
    834c:	69 f5       	brne	.+90     	; 0x83a8 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    834e:	10 92 ed 0c 	sts	0x0CED, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8352:	80 91 77 0d 	lds	r24, 0x0D77
    8356:	90 91 78 0d 	lds	r25, 0x0D78
    835a:	f9 e0       	ldi	r31, 0x09	; 9
    835c:	6f 9f       	mul	r22, r31
    835e:	80 0d       	add	r24, r0
    8360:	91 1d       	adc	r25, r1
    8362:	11 24       	eor	r1, r1
    8364:	fc 01       	movw	r30, r24
    8366:	31 96       	adiw	r30, 0x01	; 1
    8368:	a5 91       	lpm	r26, Z+
    836a:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    836c:	b0 93 ef 0c 	sts	0x0CEF, r27
    8370:	a0 93 ee 0c 	sts	0x0CEE, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8374:	ac 01       	movw	r20, r24
    8376:	49 5f       	subi	r20, 0xF9	; 249
    8378:	5f 4f       	sbci	r21, 0xFF	; 255
    837a:	fa 01       	movw	r30, r20
    837c:	65 91       	lpm	r22, Z+
    837e:	74 91       	lpm	r23, Z
    8380:	05 96       	adiw	r24, 0x05	; 5
    8382:	fc 01       	movw	r30, r24
    8384:	85 91       	lpm	r24, Z+
    8386:	94 91       	lpm	r25, Z
    8388:	68 1b       	sub	r22, r24
    838a:	79 0b       	sbc	r23, r25
    838c:	70 93 f1 0c 	sts	0x0CF1, r23
    8390:	60 93 f0 0c 	sts	0x0CF0, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8394:	fa 01       	movw	r30, r20
    8396:	85 91       	lpm	r24, Z+
    8398:	94 91       	lpm	r25, Z
    839a:	a8 0f       	add	r26, r24
    839c:	b9 1f       	adc	r27, r25
    839e:	b0 93 f3 0c 	sts	0x0CF3, r27
    83a2:	a0 93 f2 0c 	sts	0x0CF2, r26
    83a6:	05 c0       	rjmp	.+10     	; 0x83b2 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    83a8:	60 e0       	ldi	r22, 0x00	; 0
    83aa:	29 83       	std	Y+1, r18	; 0x01
    83ac:	0e 94 ca 44 	call	0x8994	; 0x8994 <SetMixerWave>
			SetMixerNote(track->channel,note);
    83b0:	29 81       	ldd	r18, Y+1	; 0x01
    83b2:	62 2f       	mov	r22, r18
    83b4:	f7 01       	movw	r30, r14
    83b6:	82 81       	ldd	r24, Z+2	; 0x02
    83b8:	0e 94 b3 44 	call	0x8966	; 0x8966 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    83bc:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    83be:	00 23       	and	r16, r16
    83c0:	11 f0       	breq	.+4      	; 0x83c6 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    83c2:	11 8b       	std	Z+17, r17	; 0x11
    83c4:	01 c0       	rjmp	.+2      	; 0x83c8 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    83c6:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    83c8:	e0 91 77 0d 	lds	r30, 0x0D77
    83cc:	f0 91 78 0d 	lds	r31, 0x0D78
    83d0:	39 e0       	ldi	r19, 0x09	; 9
    83d2:	13 9f       	mul	r17, r19
    83d4:	e0 0d       	add	r30, r0
    83d6:	f1 1d       	adc	r31, r1
    83d8:	11 24       	eor	r1, r1
    83da:	33 96       	adiw	r30, 0x03	; 3
    83dc:	85 91       	lpm	r24, Z+
    83de:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    83e0:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    83e2:	00 97       	sbiw	r24, 0x00	; 0
    83e4:	19 f4       	brne	.+6      	; 0x83ec <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    83e6:	16 8a       	std	Z+22, r1	; 0x16
    83e8:	15 8a       	std	Z+21, r1	; 0x15
    83ea:	08 c0       	rjmp	.+16     	; 0x83fc <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    83ec:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    83ee:	fc 01       	movw	r30, r24
    83f0:	24 91       	lpm	r18, Z
    83f2:	f7 01       	movw	r30, r14
    83f4:	22 8b       	std	Z+18, r18	; 0x12
    83f6:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    83f8:	96 8b       	std	Z+22, r25	; 0x16
    83fa:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    83fc:	0f 90       	pop	r0
    83fe:	df 91       	pop	r29
    8400:	cf 91       	pop	r28
    8402:	1f 91       	pop	r17
    8404:	0f 91       	pop	r16
    8406:	ff 90       	pop	r15
    8408:	ef 90       	pop	r14
    840a:	08 95       	ret

0000840c <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    840c:	cf 93       	push	r28
    840e:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8410:	e0 91 77 0d 	lds	r30, 0x0D77
    8414:	f0 91 78 0d 	lds	r31, 0x0D78
    8418:	99 e0       	ldi	r25, 0x09	; 9
    841a:	89 9f       	mul	r24, r25
    841c:	e0 0d       	add	r30, r0
    841e:	f1 1d       	adc	r31, r1
    8420:	11 24       	eor	r1, r1
    8422:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8424:	e1 30       	cpi	r30, 0x01	; 1
    8426:	e9 f0       	breq	.+58     	; 0x8462 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8428:	e2 30       	cpi	r30, 0x02	; 2
    842a:	e9 f0       	breq	.+58     	; 0x8466 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    842c:	20 91 19 0d 	lds	r18, 0x0D19
    8430:	27 ff       	sbrs	r18, 7
    8432:	1d c0       	rjmp	.+58     	; 0x846e <TriggerFx+0x62>
    8434:	20 91 2a 0d 	lds	r18, 0x0D2A
    8438:	28 13       	cpse	r18, r24
    843a:	02 c0       	rjmp	.+4      	; 0x8440 <TriggerFx+0x34>
    843c:	41 11       	cpse	r20, r1
    843e:	17 c0       	rjmp	.+46     	; 0x846e <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8440:	20 91 30 0d 	lds	r18, 0x0D30
    8444:	27 ff       	sbrs	r18, 7
    8446:	11 c0       	rjmp	.+34     	; 0x846a <TriggerFx+0x5e>
    8448:	20 91 41 0d 	lds	r18, 0x0D41
    844c:	28 13       	cpse	r18, r24
    844e:	02 c0       	rjmp	.+4      	; 0x8454 <TriggerFx+0x48>
    8450:	41 11       	cpse	r20, r1
    8452:	0b c0       	rjmp	.+22     	; 0x846a <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8454:	20 91 2d 0d 	lds	r18, 0x0D2D
    8458:	90 91 44 0d 	lds	r25, 0x0D44
    845c:	92 17       	cp	r25, r18
    845e:	28 f4       	brcc	.+10     	; 0x846a <TriggerFx+0x5e>
    8460:	06 c0       	rjmp	.+12     	; 0x846e <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8462:	c3 e0       	ldi	r28, 0x03	; 3
    8464:	05 c0       	rjmp	.+10     	; 0x8470 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8466:	c4 e0       	ldi	r28, 0x04	; 4
    8468:	03 c0       	rjmp	.+6      	; 0x8470 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    846a:	c2 e0       	ldi	r28, 0x02	; 2
    846c:	01 c0       	rjmp	.+2      	; 0x8470 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    846e:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8470:	97 e1       	ldi	r25, 0x17	; 23
    8472:	c9 9f       	mul	r28, r25
    8474:	e0 01       	movw	r28, r0
    8476:	11 24       	eor	r1, r1
    8478:	ce 5f       	subi	r28, 0xFE	; 254
    847a:	d2 4f       	sbci	r29, 0xF2	; 242
    847c:	90 e8       	ldi	r25, 0x80	; 128
    847e:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8480:	1e 8a       	std	Y+22, r1	; 0x16
    8482:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8484:	20 e5       	ldi	r18, 0x50	; 80
    8486:	46 2f       	mov	r20, r22
    8488:	68 2f       	mov	r22, r24
    848a:	ce 01       	movw	r24, r28
    848c:	0e 94 78 41 	call	0x82f0	; 0x82f0 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8490:	88 81       	ld	r24, Y
    8492:	80 62       	ori	r24, 0x20	; 32
    8494:	88 83       	st	Y, r24
}
    8496:	df 91       	pop	r29
    8498:	cf 91       	pop	r28
    849a:	08 95       	ret

0000849c <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    849c:	cf 93       	push	r28
    849e:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    84a0:	a8 2f       	mov	r26, r24
    84a2:	b0 e0       	ldi	r27, 0x00	; 0
    84a4:	97 e1       	ldi	r25, 0x17	; 23
    84a6:	89 9f       	mul	r24, r25
    84a8:	f0 01       	movw	r30, r0
    84aa:	11 24       	eor	r1, r1
    84ac:	ee 5f       	subi	r30, 0xFE	; 254
    84ae:	f2 4f       	sbci	r31, 0xF2	; 242
    84b0:	80 81       	ld	r24, Z
    84b2:	85 ff       	sbrs	r24, 5
    84b4:	02 c0       	rjmp	.+4      	; 0x84ba <TriggerNote+0x1e>
    84b6:	87 fd       	sbrc	r24, 7
    84b8:	2e c0       	rjmp	.+92     	; 0x8516 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    84ba:	21 11       	cpse	r18, r1
    84bc:	18 c0       	rjmp	.+48     	; 0x84ee <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    84be:	97 e1       	ldi	r25, 0x17	; 23
    84c0:	9a 9f       	mul	r25, r26
    84c2:	f0 01       	movw	r30, r0
    84c4:	9b 9f       	mul	r25, r27
    84c6:	f0 0d       	add	r31, r0
    84c8:	11 24       	eor	r1, r1
    84ca:	ee 5f       	subi	r30, 0xFE	; 254
    84cc:	f2 4f       	sbci	r31, 0xF2	; 242
    84ce:	97 85       	ldd	r25, Z+15	; 0x0f
    84d0:	91 11       	cpse	r25, r1
    84d2:	02 c0       	rjmp	.+4      	; 0x84d8 <TriggerNote+0x3c>
    84d4:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    84d6:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    84d8:	97 e1       	ldi	r25, 0x17	; 23
    84da:	9a 9f       	mul	r25, r26
    84dc:	f0 01       	movw	r30, r0
    84de:	9b 9f       	mul	r25, r27
    84e0:	f0 0d       	add	r31, r0
    84e2:	11 24       	eor	r1, r1
    84e4:	ee 5f       	subi	r30, 0xFE	; 254
    84e6:	f2 4f       	sbci	r31, 0xF2	; 242
    84e8:	8f 7b       	andi	r24, 0xBF	; 191
    84ea:	80 83       	st	Z, r24
    84ec:	14 c0       	rjmp	.+40     	; 0x8516 <TriggerNote+0x7a>
    84ee:	82 2f       	mov	r24, r18
    84f0:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    84f2:	97 e1       	ldi	r25, 0x17	; 23
    84f4:	9a 9f       	mul	r25, r26
    84f6:	e0 01       	movw	r28, r0
    84f8:	9b 9f       	mul	r25, r27
    84fa:	d0 0d       	add	r29, r0
    84fc:	11 24       	eor	r1, r1
    84fe:	ce 5f       	subi	r28, 0xFE	; 254
    8500:	d2 4f       	sbci	r29, 0xF2	; 242
    8502:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8504:	1e 8a       	std	Y+22, r1	; 0x16
    8506:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8508:	48 2f       	mov	r20, r24
    850a:	ce 01       	movw	r24, r28
    850c:	0e 94 78 41 	call	0x82f0	; 0x82f0 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8510:	88 81       	ld	r24, Y
    8512:	80 62       	ori	r24, 0x20	; 32
    8514:	88 83       	st	Y, r24
		}

	}
}
    8516:	df 91       	pop	r29
    8518:	cf 91       	pop	r28
    851a:	08 95       	ret

0000851c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    851c:	6f 92       	push	r6
    851e:	7f 92       	push	r7
    8520:	8f 92       	push	r8
    8522:	9f 92       	push	r9
    8524:	af 92       	push	r10
    8526:	bf 92       	push	r11
    8528:	cf 92       	push	r12
    852a:	df 92       	push	r13
    852c:	ef 92       	push	r14
    852e:	ff 92       	push	r15
    8530:	0f 93       	push	r16
    8532:	1f 93       	push	r17
    8534:	cf 93       	push	r28
    8536:	df 93       	push	r29
    8538:	c2 e0       	ldi	r28, 0x02	; 2
    853a:	dd e0       	ldi	r29, 0x0D	; 13
    853c:	02 ed       	ldi	r16, 0xD2	; 210
    853e:	1c e0       	ldi	r17, 0x0C	; 12
    8540:	d8 01       	movw	r26, r16
    8542:	9e 01       	movw	r18, r28
    8544:	40 e0       	ldi	r20, 0x00	; 0
    8546:	50 e0       	ldi	r21, 0x00	; 0
    8548:	ca 01       	movw	r24, r20
    854a:	8e 5f       	subi	r24, 0xFE	; 254
    854c:	92 4f       	sbci	r25, 0xF2	; 242
    854e:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8550:	fc 01       	movw	r30, r24
    8552:	87 85       	ldd	r24, Z+15	; 0x0f
    8554:	88 23       	and	r24, r24
    8556:	91 f0       	breq	.+36     	; 0x857c <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8558:	66 85       	ldd	r22, Z+14	; 0x0e
    855a:	99 27       	eor	r25, r25
    855c:	87 fd       	sbrc	r24, 7
    855e:	90 95       	com	r25
    8560:	86 0f       	add	r24, r22
    8562:	91 1d       	adc	r25, r1
    8564:	8f 3f       	cpi	r24, 0xFF	; 255
    8566:	91 05       	cpc	r25, r1
    8568:	19 f0       	breq	.+6      	; 0x8570 <ProcessMusic+0x54>
    856a:	14 f0       	brlt	.+4      	; 0x8570 <ProcessMusic+0x54>
    856c:	8f ef       	ldi	r24, 0xFF	; 255
    856e:	90 e0       	ldi	r25, 0x00	; 0
    8570:	97 ff       	sbrs	r25, 7
    8572:	02 c0       	rjmp	.+4      	; 0x8578 <ProcessMusic+0x5c>
    8574:	80 e0       	ldi	r24, 0x00	; 0
    8576:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8578:	f6 01       	movw	r30, r12
    857a:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    857c:	f9 01       	movw	r30, r18
    857e:	f0 80       	ld	r15, Z
    8580:	f3 fe       	sbrs	r15, 3
    8582:	2a c0       	rjmp	.+84     	; 0x85d8 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8584:	65 81       	ldd	r22, Z+5	; 0x05
    8586:	76 81       	ldd	r23, Z+6	; 0x06
    8588:	11 96       	adiw	r26, 0x01	; 1
    858a:	8d 91       	ld	r24, X+
    858c:	9c 91       	ld	r25, X
    858e:	12 97       	sbiw	r26, 0x02	; 2
    8590:	86 0f       	add	r24, r22
    8592:	97 1f       	adc	r25, r23
    8594:	12 96       	adiw	r26, 0x02	; 2
    8596:	9c 93       	st	X, r25
    8598:	8e 93       	st	-X, r24
    859a:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    859c:	f6 01       	movw	r30, r12
    859e:	e7 80       	ldd	r14, Z+7	; 0x07
    85a0:	ee 2d       	mov	r30, r14
    85a2:	f0 e0       	ldi	r31, 0x00	; 0
    85a4:	ee 0f       	add	r30, r30
    85a6:	ff 1f       	adc	r31, r31
    85a8:	e2 53       	subi	r30, 0x32	; 50
    85aa:	f6 47       	sbci	r31, 0x76	; 118
    85ac:	c5 90       	lpm	r12, Z+
    85ae:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    85b0:	16 16       	cp	r1, r22
    85b2:	17 06       	cpc	r1, r23
    85b4:	24 f4       	brge	.+8      	; 0x85be <ProcessMusic+0xa2>
    85b6:	8c 15       	cp	r24, r12
    85b8:	9d 05       	cpc	r25, r13
    85ba:	30 f4       	brcc	.+12     	; 0x85c8 <ProcessMusic+0xac>
    85bc:	0d c0       	rjmp	.+26     	; 0x85d8 <ProcessMusic+0xbc>
    85be:	67 2b       	or	r22, r23
    85c0:	59 f0       	breq	.+22     	; 0x85d8 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    85c2:	c8 16       	cp	r12, r24
    85c4:	d9 06       	cpc	r13, r25
    85c6:	40 f0       	brcs	.+16     	; 0x85d8 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    85c8:	12 96       	adiw	r26, 0x02	; 2
    85ca:	dc 92       	st	X, r13
    85cc:	ce 92       	st	-X, r12
    85ce:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    85d0:	8f 2d       	mov	r24, r15
    85d2:	87 7f       	andi	r24, 0xF7	; 247
    85d4:	f9 01       	movw	r30, r18
    85d6:	80 83       	st	Z, r24
    85d8:	49 5e       	subi	r20, 0xE9	; 233
    85da:	5f 4f       	sbci	r21, 0xFF	; 255
    85dc:	29 5e       	subi	r18, 0xE9	; 233
    85de:	3f 4f       	sbci	r19, 0xFF	; 255
    85e0:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    85e2:	43 37       	cpi	r20, 0x73	; 115
    85e4:	51 05       	cpc	r21, r1
    85e6:	09 f0       	breq	.+2      	; 0x85ea <ProcessMusic+0xce>
    85e8:	af cf       	rjmp	.-162    	; 0x8548 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    85ea:	80 91 d0 0c 	lds	r24, 0x0CD0
    85ee:	88 23       	and	r24, r24
    85f0:	09 f4       	brne	.+2      	; 0x85f4 <ProcessMusic+0xd8>
    85f2:	cc c0       	rjmp	.+408    	; 0x878c <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    85f4:	57 e1       	ldi	r21, 0x17	; 23
    85f6:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    85f8:	80 91 75 0d 	lds	r24, 0x0D75
    85fc:	90 91 76 0d 	lds	r25, 0x0D76
    8600:	20 91 7b 0d 	lds	r18, 0x0D7B
    8604:	30 91 7c 0d 	lds	r19, 0x0D7C
    8608:	82 17       	cp	r24, r18
    860a:	93 07       	cpc	r25, r19
    860c:	09 f0       	breq	.+2      	; 0x8610 <ProcessMusic+0xf4>
    860e:	b9 c0       	rjmp	.+370    	; 0x8782 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8610:	20 91 7e 0d 	lds	r18, 0x0D7E
    8614:	30 91 7f 0d 	lds	r19, 0x0D7F
    8618:	b9 01       	movw	r22, r18
    861a:	6f 5f       	subi	r22, 0xFF	; 255
    861c:	7f 4f       	sbci	r23, 0xFF	; 255
    861e:	70 93 7f 0d 	sts	0x0D7F, r23
    8622:	60 93 7e 0d 	sts	0x0D7E, r22
    8626:	f9 01       	movw	r30, r18
    8628:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    862a:	4f 3f       	cpi	r20, 0xFF	; 255
    862c:	79 f5       	brne	.+94     	; 0x868c <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    862e:	a9 01       	movw	r20, r18
    8630:	4e 5f       	subi	r20, 0xFE	; 254
    8632:	5f 4f       	sbci	r21, 0xFF	; 255
    8634:	50 93 7f 0d 	sts	0x0D7F, r21
    8638:	40 93 7e 0d 	sts	0x0D7E, r20
    863c:	fb 01       	movw	r30, r22
    863e:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8640:	6f 32       	cpi	r22, 0x2F	; 47
    8642:	19 f4       	brne	.+6      	; 0x864a <ProcessMusic+0x12e>
						playSong=false;
    8644:	10 92 d0 0c 	sts	0x0CD0, r1
						break;	
    8648:	9c c0       	rjmp	.+312    	; 0x8782 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    864a:	66 30       	cpi	r22, 0x06	; 6
    864c:	09 f0       	breq	.+2      	; 0x8650 <ProcessMusic+0x134>
    864e:	8c c0       	rjmp	.+280    	; 0x8768 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8650:	fa 01       	movw	r30, r20
    8652:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8654:	c9 01       	movw	r24, r18
    8656:	04 96       	adiw	r24, 0x04	; 4
    8658:	90 93 7f 0d 	sts	0x0D7F, r25
    865c:	80 93 7e 0d 	sts	0x0D7E, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8660:	f9 01       	movw	r30, r18
    8662:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8664:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8666:	e3 35       	cpi	r30, 0x53	; 83
    8668:	29 f4       	brne	.+10     	; 0x8674 <ProcessMusic+0x158>
							loopStart=songPos;
    866a:	90 93 81 0d 	sts	0x0D81, r25
    866e:	80 93 80 0d 	sts	0x0D80, r24
    8672:	7a c0       	rjmp	.+244    	; 0x8768 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8674:	e5 34       	cpi	r30, 0x45	; 69
    8676:	09 f0       	breq	.+2      	; 0x867a <ProcessMusic+0x15e>
    8678:	77 c0       	rjmp	.+238    	; 0x8768 <ProcessMusic+0x24c>
							songPos=loopStart;
    867a:	80 91 80 0d 	lds	r24, 0x0D80
    867e:	90 91 81 0d 	lds	r25, 0x0D81
    8682:	90 93 7f 0d 	sts	0x0D7F, r25
    8686:	80 93 7e 0d 	sts	0x0D7E, r24
    868a:	6e c0       	rjmp	.+220    	; 0x8768 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    868c:	47 fd       	sbrc	r20, 7
    868e:	40 93 79 0d 	sts	0x0D79, r20
					channel=lastStatus&0x0f;
    8692:	90 91 79 0d 	lds	r25, 0x0D79
    8696:	89 2f       	mov	r24, r25
    8698:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    869a:	47 ff       	sbrs	r20, 7
    869c:	08 c0       	rjmp	.+16     	; 0x86ae <ProcessMusic+0x192>
    869e:	2e 5f       	subi	r18, 0xFE	; 254
    86a0:	3f 4f       	sbci	r19, 0xFF	; 255
    86a2:	30 93 7f 0d 	sts	0x0D7F, r19
    86a6:	20 93 7e 0d 	sts	0x0D7E, r18
    86aa:	fb 01       	movw	r30, r22
    86ac:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    86ae:	90 7f       	andi	r25, 0xF0	; 240
    86b0:	90 3b       	cpi	r25, 0xB0	; 176
    86b2:	e1 f0       	breq	.+56     	; 0x86ec <ProcessMusic+0x1d0>
    86b4:	90 3c       	cpi	r25, 0xC0	; 192
    86b6:	09 f4       	brne	.+2      	; 0x86ba <ProcessMusic+0x19e>
    86b8:	51 c0       	rjmp	.+162    	; 0x875c <ProcessMusic+0x240>
    86ba:	90 39       	cpi	r25, 0x90	; 144
    86bc:	09 f0       	breq	.+2      	; 0x86c0 <ProcessMusic+0x1a4>
    86be:	54 c0       	rjmp	.+168    	; 0x8768 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    86c0:	e0 91 7e 0d 	lds	r30, 0x0D7E
    86c4:	f0 91 7f 0d 	lds	r31, 0x0D7F
    86c8:	9f 01       	movw	r18, r30
    86ca:	2f 5f       	subi	r18, 0xFF	; 255
    86cc:	3f 4f       	sbci	r19, 0xFF	; 255
    86ce:	30 93 7f 0d 	sts	0x0D7F, r19
    86d2:	20 93 7e 0d 	sts	0x0D7E, r18
    86d6:	24 91       	lpm	r18, Z
    86d8:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    86da:	f8 9e       	mul	r15, r24
    86dc:	f0 01       	movw	r30, r0
    86de:	11 24       	eor	r1, r1
    86e0:	ee 5f       	subi	r30, 0xFE	; 254
    86e2:	f2 4f       	sbci	r31, 0xF2	; 242
    86e4:	60 89       	ldd	r22, Z+16	; 0x10
    86e6:	0e 94 4e 42 	call	0x849c	; 0x849c <TriggerNote>
    86ea:	3e c0       	rjmp	.+124    	; 0x8768 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    86ec:	e0 91 7e 0d 	lds	r30, 0x0D7E
    86f0:	f0 91 7f 0d 	lds	r31, 0x0D7F
    86f4:	9f 01       	movw	r18, r30
    86f6:	2f 5f       	subi	r18, 0xFF	; 255
    86f8:	3f 4f       	sbci	r19, 0xFF	; 255
    86fa:	30 93 7f 0d 	sts	0x0D7F, r19
    86fe:	20 93 7e 0d 	sts	0x0D7E, r18
    8702:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8704:	47 30       	cpi	r20, 0x07	; 7
    8706:	49 f4       	brne	.+18     	; 0x871a <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8708:	f8 9e       	mul	r15, r24
    870a:	d0 01       	movw	r26, r0
    870c:	11 24       	eor	r1, r1
    870e:	ae 5f       	subi	r26, 0xFE	; 254
    8710:	b2 4f       	sbci	r27, 0xF2	; 242
    8712:	ee 0f       	add	r30, r30
    8714:	1c 96       	adiw	r26, 0x0c	; 12
    8716:	ec 93       	st	X, r30
    8718:	27 c0       	rjmp	.+78     	; 0x8768 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    871a:	4b 30       	cpi	r20, 0x0B	; 11
    871c:	49 f4       	brne	.+18     	; 0x8730 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    871e:	f8 9e       	mul	r15, r24
    8720:	d0 01       	movw	r26, r0
    8722:	11 24       	eor	r1, r1
    8724:	ae 5f       	subi	r26, 0xFE	; 254
    8726:	b2 4f       	sbci	r27, 0xF2	; 242
    8728:	ee 0f       	add	r30, r30
    872a:	13 96       	adiw	r26, 0x03	; 3
    872c:	ec 93       	st	X, r30
    872e:	1c c0       	rjmp	.+56     	; 0x8768 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8730:	4c 35       	cpi	r20, 0x5C	; 92
    8732:	49 f4       	brne	.+18     	; 0x8746 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8734:	f8 9e       	mul	r15, r24
    8736:	d0 01       	movw	r26, r0
    8738:	11 24       	eor	r1, r1
    873a:	ae 5f       	subi	r26, 0xFE	; 254
    873c:	b2 4f       	sbci	r27, 0xF2	; 242
    873e:	ee 0f       	add	r30, r30
    8740:	1a 96       	adiw	r26, 0x0a	; 10
    8742:	ec 93       	st	X, r30
    8744:	11 c0       	rjmp	.+34     	; 0x8768 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8746:	44 36       	cpi	r20, 0x64	; 100
    8748:	79 f4       	brne	.+30     	; 0x8768 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    874a:	f8 9e       	mul	r15, r24
    874c:	d0 01       	movw	r26, r0
    874e:	11 24       	eor	r1, r1
    8750:	ae 5f       	subi	r26, 0xFE	; 254
    8752:	b2 4f       	sbci	r27, 0xF2	; 242
    8754:	ee 0f       	add	r30, r30
    8756:	1b 96       	adiw	r26, 0x0b	; 11
    8758:	ec 93       	st	X, r30
    875a:	06 c0       	rjmp	.+12     	; 0x8768 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    875c:	f8 9e       	mul	r15, r24
    875e:	f0 01       	movw	r30, r0
    8760:	11 24       	eor	r1, r1
    8762:	ee 5f       	subi	r30, 0xFE	; 254
    8764:	f2 4f       	sbci	r31, 0xF2	; 242
    8766:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8768:	8e e7       	ldi	r24, 0x7E	; 126
    876a:	9d e0       	ldi	r25, 0x0D	; 13
    876c:	0e 94 52 41 	call	0x82a4	; 0x82a4 <ReadVarLen>
    8770:	90 93 7c 0d 	sts	0x0D7C, r25
    8774:	80 93 7b 0d 	sts	0x0D7B, r24
				currDeltaTime=0;
    8778:	10 92 76 0d 	sts	0x0D76, r1
    877c:	10 92 75 0d 	sts	0x0D75, r1
    8780:	3b cf       	rjmp	.-394    	; 0x85f8 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8782:	01 96       	adiw	r24, 0x01	; 1
    8784:	90 93 76 0d 	sts	0x0D76, r25
    8788:	80 93 75 0d 	sts	0x0D75, r24
    878c:	9b e0       	ldi	r25, 0x0B	; 11
    878e:	a9 2e       	mov	r10, r25
    8790:	9d e0       	ldi	r25, 0x0D	; 13
    8792:	b9 2e       	mov	r11, r25
    8794:	25 e1       	ldi	r18, 0x15	; 21
    8796:	c2 2e       	mov	r12, r18
    8798:	2d e0       	ldi	r18, 0x0D	; 13
    879a:	d2 2e       	mov	r13, r18
    879c:	36 e1       	ldi	r19, 0x16	; 22
    879e:	e3 2e       	mov	r14, r19
    87a0:	3d e0       	ldi	r19, 0x0D	; 13
    87a2:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    87a4:	66 24       	eor	r6, r6
    87a6:	6a 94       	dec	r6
    87a8:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    87aa:	88 81       	ld	r24, Y
    87ac:	85 ff       	sbrs	r24, 5
    87ae:	42 c0       	rjmp	.+132    	; 0x8834 <ProcessMusic+0x318>
    87b0:	2d 89       	ldd	r18, Y+21	; 0x15
    87b2:	3e 89       	ldd	r19, Y+22	; 0x16
    87b4:	23 2b       	or	r18, r19
    87b6:	09 f4       	brne	.+2      	; 0x87ba <ProcessMusic+0x29e>
    87b8:	3d c0       	rjmp	.+122    	; 0x8834 <ProcessMusic+0x318>
    87ba:	86 fd       	sbrc	r24, 6
    87bc:	3b c0       	rjmp	.+118    	; 0x8834 <ProcessMusic+0x318>
    87be:	47 01       	movw	r8, r14
    87c0:	f2 e0       	ldi	r31, 0x02	; 2
    87c2:	8f 1a       	sub	r8, r31
    87c4:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    87c6:	d6 01       	movw	r26, r12
    87c8:	9c 91       	ld	r25, X
    87ca:	f4 01       	movw	r30, r8
    87cc:	80 81       	ld	r24, Z
    87ce:	98 13       	cpse	r25, r24
    87d0:	2e c0       	rjmp	.+92     	; 0x882e <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    87d2:	ed 89       	ldd	r30, Y+21	; 0x15
    87d4:	fe 89       	ldd	r31, Y+22	; 0x16
    87d6:	bf 01       	movw	r22, r30
    87d8:	6f 5f       	subi	r22, 0xFF	; 255
    87da:	7f 4f       	sbci	r23, 0xFF	; 255
    87dc:	7e 8b       	std	Y+22, r23	; 0x16
    87de:	6d 8b       	std	Y+21, r22	; 0x15
    87e0:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    87e2:	8f 3f       	cpi	r24, 0xFF	; 255
    87e4:	31 f4       	brne	.+12     	; 0x87f2 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87e6:	88 81       	ld	r24, Y
    87e8:	8f 77       	andi	r24, 0x7F	; 127
    87ea:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    87ec:	1e 8a       	std	Y+22, r1	; 0x16
    87ee:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    87f0:	1e c0       	rjmp	.+60     	; 0x882e <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    87f2:	9f 01       	movw	r18, r30
    87f4:	2e 5f       	subi	r18, 0xFE	; 254
    87f6:	3f 4f       	sbci	r19, 0xFF	; 255
    87f8:	3e 8b       	std	Y+22, r19	; 0x16
    87fa:	2d 8b       	std	Y+21, r18	; 0x15
    87fc:	fb 01       	movw	r30, r22
    87fe:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8800:	e8 2f       	mov	r30, r24
    8802:	f0 e0       	ldi	r31, 0x00	; 0
    8804:	ee 0f       	add	r30, r30
    8806:	ff 1f       	adc	r31, r31
    8808:	e8 51       	subi	r30, 0x18	; 24
    880a:	ff 4f       	sbci	r31, 0xFF	; 255
    880c:	25 91       	lpm	r18, Z+
    880e:	34 91       	lpm	r19, Z
    8810:	ce 01       	movw	r24, r28
    8812:	f9 01       	movw	r30, r18
    8814:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8816:	ed 89       	ldd	r30, Y+21	; 0x15
    8818:	fe 89       	ldd	r31, Y+22	; 0x16
    881a:	cf 01       	movw	r24, r30
    881c:	01 96       	adiw	r24, 0x01	; 1
    881e:	9e 8b       	std	Y+22, r25	; 0x16
    8820:	8d 8b       	std	Y+21, r24	; 0x15
    8822:	e4 91       	lpm	r30, Z
    8824:	d4 01       	movw	r26, r8
    8826:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8828:	f6 01       	movw	r30, r12
    882a:	10 82       	st	Z, r1
    882c:	cc cf       	rjmp	.-104    	; 0x87c6 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    882e:	9f 5f       	subi	r25, 0xFF	; 255
    8830:	d6 01       	movw	r26, r12
    8832:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8834:	98 81       	ld	r25, Y
    8836:	95 ff       	sbrs	r25, 5
    8838:	6c c0       	rjmp	.+216    	; 0x8912 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    883a:	f7 01       	movw	r30, r14
    883c:	80 81       	ld	r24, Z
    883e:	8f 3f       	cpi	r24, 0xFF	; 255
    8840:	11 f0       	breq	.+4      	; 0x8846 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8842:	8f 5f       	subi	r24, 0xFF	; 255
    8844:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8846:	97 fd       	sbrc	r25, 7
    8848:	04 c0       	rjmp	.+8      	; 0x8852 <ProcessMusic+0x336>
    884a:	f7 01       	movw	r30, r14
    884c:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    884e:	90 81       	ld	r25, Z
    8850:	01 c0       	rjmp	.+2      	; 0x8854 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8852:	9f ef       	ldi	r25, 0xFF	; 255
    8854:	f7 01       	movw	r30, r14
    8856:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8858:	80 81       	ld	r24, Z
    885a:	88 23       	and	r24, r24
    885c:	09 f4       	brne	.+2      	; 0x8860 <ProcessMusic+0x344>
    885e:	4e c0       	rjmp	.+156    	; 0x88fc <ProcessMusic+0x3e0>
    8860:	31 96       	adiw	r30, 0x01	; 1
    8862:	50 81       	ld	r21, Z
    8864:	55 23       	and	r21, r21
    8866:	09 f4       	brne	.+2      	; 0x886a <ProcessMusic+0x34e>
    8868:	49 c0       	rjmp	.+146    	; 0x88fc <ProcessMusic+0x3e0>
    886a:	99 23       	and	r25, r25
    886c:	09 f4       	brne	.+2      	; 0x8870 <ProcessMusic+0x354>
    886e:	46 c0       	rjmp	.+140    	; 0x88fc <ProcessMusic+0x3e0>
    8870:	40 91 7a 0d 	lds	r20, 0x0D7A
    8874:	44 23       	and	r20, r20
    8876:	09 f4       	brne	.+2      	; 0x887a <ProcessMusic+0x35e>
    8878:	41 c0       	rjmp	.+130    	; 0x88fc <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    887a:	89 9f       	mul	r24, r25
    887c:	c0 01       	movw	r24, r0
    887e:	11 24       	eor	r1, r1
    8880:	93 95       	inc	r25
				uVol>>=8;
    8882:	89 2f       	mov	r24, r25
    8884:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8886:	58 9f       	mul	r21, r24
    8888:	90 01       	movw	r18, r0
    888a:	59 9f       	mul	r21, r25
    888c:	30 0d       	add	r19, r0
    888e:	11 24       	eor	r1, r1
    8890:	c9 01       	movw	r24, r18
    8892:	93 95       	inc	r25
				uVol>>=8;
    8894:	89 2f       	mov	r24, r25
    8896:	99 27       	eor	r25, r25
    8898:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    889a:	50 81       	ld	r21, Z
    889c:	58 9f       	mul	r21, r24
    889e:	90 01       	movw	r18, r0
    88a0:	59 9f       	mul	r21, r25
    88a2:	30 0d       	add	r19, r0
    88a4:	11 24       	eor	r1, r1
    88a6:	33 95       	inc	r19
					uVol>>=8;
    88a8:	23 2f       	mov	r18, r19
    88aa:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    88ac:	42 9f       	mul	r20, r18
    88ae:	c0 01       	movw	r24, r0
    88b0:	43 9f       	mul	r20, r19
    88b2:	90 0d       	add	r25, r0
    88b4:	11 24       	eor	r1, r1
    88b6:	93 95       	inc	r25
				uVol>>=8;
    88b8:	89 2f       	mov	r24, r25
    88ba:	99 27       	eor	r25, r25
    88bc:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){
    88be:	20 81       	ld	r18, Z
    88c0:	22 23       	and	r18, r18
    88c2:	f1 f0       	breq	.+60     	; 0x8900 <ProcessMusic+0x3e4>
					#if (INCLUDE_DEFAULT_WAVES != 0)
						tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    88c4:	d5 01       	movw	r26, r10
    88c6:	ec 91       	ld	r30, X
    88c8:	f0 e0       	ldi	r31, 0x00	; 0
    88ca:	e0 50       	subi	r30, 0x00	; 0
    88cc:	f5 47       	sbci	r31, 0x75	; 117
    88ce:	e4 91       	lpm	r30, Z
					#else
						tmp=0;
					#endif
					tmp-=128; //convert to unsigned
    88d0:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    88d2:	2e 9f       	mul	r18, r30
    88d4:	f0 01       	movw	r30, r0
    88d6:	11 24       	eor	r1, r1
    88d8:	f3 95       	inc	r31
					tVol>>=8;
    88da:	ef 2f       	mov	r30, r31
    88dc:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    88de:	a3 01       	movw	r20, r6
    88e0:	4e 1b       	sub	r20, r30
    88e2:	5f 0b       	sbc	r21, r31
    88e4:	48 9f       	mul	r20, r24
    88e6:	90 01       	movw	r18, r0
    88e8:	49 9f       	mul	r20, r25
    88ea:	30 0d       	add	r19, r0
    88ec:	58 9f       	mul	r21, r24
    88ee:	30 0d       	add	r19, r0
    88f0:	11 24       	eor	r1, r1
    88f2:	c9 01       	movw	r24, r18
    88f4:	93 95       	inc	r25
					uVol>>=8;
    88f6:	89 2f       	mov	r24, r25
    88f8:	99 27       	eor	r25, r25
    88fa:	02 c0       	rjmp	.+4      	; 0x8900 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    88fc:	80 e0       	ldi	r24, 0x00	; 0
    88fe:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8900:	f5 01       	movw	r30, r10
    8902:	30 81       	ld	r19, Z
    8904:	f7 01       	movw	r30, r14
    8906:	39 97       	sbiw	r30, 0x09	; 9
    8908:	20 81       	ld	r18, Z
    890a:	23 0f       	add	r18, r19
    890c:	d5 01       	movw	r26, r10
    890e:	2c 93       	st	X, r18
    8910:	02 c0       	rjmp	.+4      	; 0x8916 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8912:	80 e0       	ldi	r24, 0x00	; 0
    8914:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8916:	f8 01       	movw	r30, r16
    8918:	80 83       	st	Z, r24
    891a:	67 96       	adiw	r28, 0x17	; 23
    891c:	0a 5f       	subi	r16, 0xFA	; 250
    891e:	1f 4f       	sbci	r17, 0xFF	; 255
    8920:	f7 e1       	ldi	r31, 0x17	; 23
    8922:	af 0e       	add	r10, r31
    8924:	b1 1c       	adc	r11, r1
    8926:	87 e1       	ldi	r24, 0x17	; 23
    8928:	c8 0e       	add	r12, r24
    892a:	d1 1c       	adc	r13, r1
    892c:	97 e1       	ldi	r25, 0x17	; 23
    892e:	e9 0e       	add	r14, r25
    8930:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8932:	ad e0       	ldi	r26, 0x0D	; 13
    8934:	c5 37       	cpi	r28, 0x75	; 117
    8936:	da 07       	cpc	r29, r26
    8938:	09 f0       	breq	.+2      	; 0x893c <ProcessMusic+0x420>
    893a:	37 cf       	rjmp	.-402    	; 0x87aa <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    893c:	df 91       	pop	r29
    893e:	cf 91       	pop	r28
    8940:	1f 91       	pop	r17
    8942:	0f 91       	pop	r16
    8944:	ff 90       	pop	r15
    8946:	ef 90       	pop	r14
    8948:	df 90       	pop	r13
    894a:	cf 90       	pop	r12
    894c:	bf 90       	pop	r11
    894e:	af 90       	pop	r10
    8950:	9f 90       	pop	r9
    8952:	8f 90       	pop	r8
    8954:	7f 90       	pop	r7
    8956:	6f 90       	pop	r6
    8958:	08 95       	ret

0000895a <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    895a:	80 93 7a 0d 	sts	0x0D7A, r24
    895e:	08 95       	ret

00008960 <IsSongPlaying>:
	return masterVolume;
}

bool IsSongPlaying(){
	return playSong;
    8960:	80 91 d0 0c 	lds	r24, 0x0CD0
    8964:	08 95       	ret

00008966 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8966:	99 27       	eor	r25, r25
	clr r23
    8968:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    896a:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    896c:	09 f4       	brne	.+2      	; 0x8970 <set_note_waves>
		ret
    896e:	08 95       	ret

00008970 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8970:	ee ec       	ldi	r30, 0xCE	; 206
	ldi ZH,hi8(steptable)
    8972:	f9 e8       	ldi	r31, 0x89	; 137
	lsl r22
    8974:	66 0f       	add	r22, r22
	rol r23
    8976:	77 1f       	adc	r23, r23
	add ZL,r22
    8978:	e6 0f       	add	r30, r22
	adc ZH,r23	
    897a:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    897c:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    897e:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8980:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    8982:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8984:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8986:	28 9f       	mul	r18, r24
	add ZL,r0
    8988:	e0 0d       	add	r30, r0
	adc ZH,r1
    898a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    898c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    898e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8990:	11 24       	eor	r1, r1
	

	ret
    8992:	08 95       	ret

00008994 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8994:	99 27       	eor	r25, r25
	clr r23
    8996:	77 27       	eor	r23, r23

#if (INCLUDE_DEFAULT_WAVES != 0)
	ldi ZL,lo8(mixerStruct)
    8998:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    899a:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    899c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    899e:	28 9f       	mul	r18, r24
	add ZL,r0
    89a0:	e0 0d       	add	r30, r0
	adc ZH,r1
    89a2:	f1 1d       	adc	r31, r1
#endif

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    89a4:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    89a6:	31 f4       	brne	.+12     	; 0x89b4 <smw1>
	lds r22,tr4_params
    89a8:	60 91 e5 0c 	lds	r22, 0x0CE5
	andi r22,0xfe;
    89ac:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    89ae:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw	
    89b2:	0b c0       	rjmp	.+22     	; 0x89ca <esmw>

000089b4 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    89b4:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    89b6:	31 f4       	brne	.+12     	; 0x89c4 <smw2>
	lds r22,tr4_params
    89b8:	60 91 e5 0c 	lds	r22, 0x0CE5
	ori r22,0xfe;
    89bc:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    89be:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw
    89c2:	03 c0       	rjmp	.+6      	; 0x89ca <esmw>

000089c4 <smw2>:
smw2:
#endif

#if (INCLUDE_DEFAULT_WAVES != 0)
	ldi r23,hi8(waves)
    89c4:	7b e8       	ldi	r23, 0x8B	; 139
	add r23,r22
    89c6:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    89c8:	75 83       	std	Z+5, r23	; 0x05

000089ca <esmw>:
#endif

esmw:
	clr r1	
    89ca:	11 24       	eor	r1, r1
	ret
    89cc:	08 95       	ret

000089ce <steptable>:
    89ce:	22 00       	.word	0x0022	; ????
    89d0:	24 00       	.word	0x0024	; ????
    89d2:	26 00       	.word	0x0026	; ????
    89d4:	28 00       	.word	0x0028	; ????
    89d6:	2b 00       	.word	0x002b	; ????
    89d8:	2d 00       	.word	0x002d	; ????
    89da:	30 00       	.word	0x0030	; ????
    89dc:	33 00       	.word	0x0033	; ????
    89de:	36 00       	.word	0x0036	; ????
    89e0:	39 00       	.word	0x0039	; ????
    89e2:	3d 00       	.word	0x003d	; ????
    89e4:	40 00       	.word	0x0040	; ????
    89e6:	44 00       	.word	0x0044	; ????
    89e8:	48 00       	.word	0x0048	; ????
    89ea:	4c 00       	.word	0x004c	; ????
    89ec:	51 00       	.word	0x0051	; ????
    89ee:	56 00       	.word	0x0056	; ????
    89f0:	5b 00       	.word	0x005b	; ????
    89f2:	60 00       	.word	0x0060	; ????
    89f4:	66 00       	.word	0x0066	; ????
    89f6:	6c 00       	.word	0x006c	; ????
    89f8:	73 00       	.word	0x0073	; ????
    89fa:	79 00       	.word	0x0079	; ????
    89fc:	81 00       	.word	0x0081	; ????
    89fe:	88 00       	.word	0x0088	; ????
    8a00:	90 00       	.word	0x0090	; ????
    8a02:	99 00       	.word	0x0099	; ????
    8a04:	a2 00       	.word	0x00a2	; ????
    8a06:	ac 00       	.word	0x00ac	; ????
    8a08:	b6 00       	.word	0x00b6	; ????
    8a0a:	c1 00       	.word	0x00c1	; ????
    8a0c:	cc 00       	.word	0x00cc	; ????
    8a0e:	d8 00       	.word	0x00d8	; ????
    8a10:	e5 00       	.word	0x00e5	; ????
    8a12:	f3 00       	.word	0x00f3	; ????
    8a14:	01 01       	movw	r0, r2
    8a16:	10 01       	movw	r2, r0
    8a18:	21 01       	movw	r4, r2
    8a1a:	32 01       	movw	r6, r4
    8a1c:	44 01       	movw	r8, r8
    8a1e:	57 01       	movw	r10, r14
    8a20:	6c 01       	movw	r12, r24
    8a22:	81 01       	movw	r16, r2
    8a24:	98 01       	movw	r18, r16
    8a26:	b0 01       	movw	r22, r0
    8a28:	ca 01       	movw	r24, r20
    8a2a:	e5 01       	movw	r28, r10
    8a2c:	02 02       	muls	r16, r18
    8a2e:	21 02       	muls	r18, r17
    8a30:	41 02       	muls	r20, r17
    8a32:	64 02       	muls	r22, r20
    8a34:	88 02       	muls	r24, r24
    8a36:	ae 02       	muls	r26, r30
    8a38:	d7 02       	muls	r29, r23
    8a3a:	03 03       	mulsu	r16, r19
    8a3c:	30 03       	mulsu	r19, r16
    8a3e:	61 03       	mulsu	r22, r17
    8a40:	94 03       	fmuls	r17, r20
    8a42:	cb 03       	fmulsu	r20, r19
    8a44:	05 04       	cpc	r0, r5
    8a46:	42 04       	cpc	r4, r2
    8a48:	83 04       	cpc	r8, r3
    8a4a:	c7 04       	cpc	r12, r7
    8a4c:	10 05       	cpc	r17, r0
    8a4e:	5d 05       	cpc	r21, r13
    8a50:	af 05       	cpc	r26, r15
    8a52:	05 06       	cpc	r0, r21
    8a54:	61 06       	cpc	r6, r17
    8a56:	c2 06       	cpc	r12, r18
    8a58:	29 07       	cpc	r18, r25
    8a5a:	96 07       	cpc	r25, r22
    8a5c:	09 08       	sbc	r0, r9
    8a5e:	83 08       	sbc	r8, r3
    8a60:	05 09       	sbc	r16, r5
    8a62:	8e 09       	sbc	r24, r14
    8a64:	20 0a       	sbc	r2, r16
    8a66:	ba 0a       	sbc	r11, r26
    8a68:	5d 0b       	sbc	r21, r29
    8a6a:	0a 0c       	add	r0, r10
    8a6c:	c1 0c       	add	r12, r1
    8a6e:	84 0d       	add	r24, r4
    8a70:	51 0e       	add	r5, r17
    8a72:	2b 0f       	add	r18, r27
    8a74:	12 10       	cpse	r1, r2
    8a76:	07 11       	cpse	r16, r7
    8a78:	0a 12       	cpse	r0, r26
    8a7a:	1d 13       	cpse	r17, r29
    8a7c:	40 14       	cp	r4, r0
    8a7e:	74 15       	cp	r23, r4
    8a80:	ba 16       	cp	r11, r26
    8a82:	14 18       	sub	r1, r4
    8a84:	83 19       	sub	r24, r3
    8a86:	07 1b       	sub	r16, r23
    8a88:	a3 1c       	adc	r10, r3
    8a8a:	57 1e       	adc	r5, r23
    8a8c:	24 20       	and	r2, r4
    8a8e:	0e 22       	and	r0, r30
    8a90:	14 24       	eor	r1, r4
    8a92:	39 26       	eor	r3, r25
    8a94:	7f 28       	or	r7, r15
    8a96:	e8 2a       	or	r14, r24
    8a98:	75 2d       	mov	r23, r5
    8a9a:	29 30       	cpi	r18, 0x09	; 9
    8a9c:	06 33       	cpi	r16, 0x36	; 54
    8a9e:	0f 36       	cpi	r16, 0x6F	; 111
    8aa0:	45 39       	cpi	r20, 0x95	; 149
    8aa2:	ad 3c       	cpi	r26, 0xCD	; 205
    8aa4:	49 40       	sbci	r20, 0x09	; 9
    8aa6:	1b 44       	sbci	r17, 0x4B	; 75
    8aa8:	28 48       	sbci	r18, 0x88	; 136
    8aaa:	73 4c       	sbci	r23, 0xC3	; 195
    8aac:	fe 50       	subi	r31, 0x0E	; 14
    8aae:	cf 55       	subi	r28, 0x5F	; 95
    8ab0:	ea 5a       	subi	r30, 0xAA	; 170
    8ab2:	51 60       	ori	r21, 0x01	; 1
    8ab4:	0c 66       	ori	r16, 0x6C	; 108
    8ab6:	1d 6c       	ori	r17, 0xCD	; 205
    8ab8:	8b 72       	andi	r24, 0x2B	; 43
    8aba:	5a 79       	andi	r21, 0x9A	; 154
    8abc:	92 80       	ldd	r9, Z+2	; 0x02
    8abe:	37 88       	ldd	r3, Z+23	; 0x17
    8ac0:	50 90 e5 98 	lds	r5, 0x98E5
    8ac4:	fd a1       	ldd	r31, Y+37	; 0x25
    8ac6:	9f ab       	std	Y+55, r25	; 0x37
    8ac8:	d3 b5       	in	r29, 0x23	; 35
    8aca:	a3 c0       	rjmp	.+326    	; 0x8c12 <waves+0x112>
	...

00008b00 <waves>:
    8b00:	00 03       	mulsu	r16, r16
    8b02:	06 09       	sbc	r16, r6
    8b04:	0c 10       	cpse	r0, r12
    8b06:	13 16       	cp	r1, r19
    8b08:	19 1c       	adc	r1, r9
    8b0a:	1f 22       	and	r1, r31
    8b0c:	25 28       	or	r2, r5
    8b0e:	2b 2e       	mov	r2, r27
    8b10:	31 33       	cpi	r19, 0x31	; 49
    8b12:	36 39       	cpi	r19, 0x96	; 150
    8b14:	3c 3f       	cpi	r19, 0xFC	; 252
    8b16:	41 44       	sbci	r20, 0x41	; 65
    8b18:	47 49       	sbci	r20, 0x97	; 151
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	51 53       	subi	r21, 0x31	; 49
    8b1e:	55 58       	subi	r21, 0x85	; 133
    8b20:	5a 5c       	subi	r21, 0xCA	; 202
    8b22:	5e 60       	ori	r21, 0x0E	; 14
    8b24:	62 64       	ori	r22, 0x42	; 66
    8b26:	66 68       	ori	r22, 0x86	; 134
    8b28:	6a 6b       	ori	r22, 0xBA	; 186
    8b2a:	6d 6f       	ori	r22, 0xFD	; 253
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 76       	andi	r23, 0x65	; 101
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7a       	andi	r23, 0xAA	; 170
    8b36:	7b 7c       	andi	r23, 0xCB	; 203
    8b38:	7d 7d       	andi	r23, 0xDD	; 221
    8b3a:	7e 7e       	andi	r23, 0xEE	; 238
    8b3c:	7e 7f       	andi	r23, 0xFE	; 254
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7e 7e       	andi	r23, 0xEE	; 238
    8b46:	7e 7d       	andi	r23, 0xDE	; 222
    8b48:	7d 7c       	andi	r23, 0xCD	; 205
    8b4a:	7b 7a       	andi	r23, 0xAB	; 171
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 76       	andi	r23, 0x68	; 104
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6f       	ori	r23, 0xF0	; 240
    8b56:	6d 6b       	ori	r22, 0xBD	; 189
    8b58:	6a 68       	ori	r22, 0x8A	; 138
    8b5a:	66 64       	ori	r22, 0x46	; 70
    8b5c:	62 60       	ori	r22, 0x02	; 2
    8b5e:	5e 5c       	subi	r21, 0xCE	; 206
    8b60:	5a 58       	subi	r21, 0x8A	; 138
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	51 4e       	sbci	r21, 0xE1	; 225
    8b66:	4c 49       	sbci	r20, 0x9C	; 156
    8b68:	47 44       	sbci	r20, 0x47	; 71
    8b6a:	41 3f       	cpi	r20, 0xF1	; 241
    8b6c:	3c 39       	cpi	r19, 0x9C	; 156
    8b6e:	36 33       	cpi	r19, 0x36	; 54
    8b70:	31 2e       	mov	r3, r17
    8b72:	2b 28       	or	r2, r11
    8b74:	25 22       	and	r2, r21
    8b76:	1f 1c       	adc	r1, r15
    8b78:	19 16       	cp	r1, r25
    8b7a:	13 10       	cpse	r1, r3
    8b7c:	0c 09       	sbc	r16, r12
    8b7e:	06 03       	mulsu	r16, r22
    8b80:	00 fd       	sbrc	r16, 0
    8b82:	fa f7       	brpl	.-2      	; 0x8b82 <waves+0x82>
    8b84:	f4 f0       	brlt	.+60     	; 0x8bc2 <waves+0xc2>
    8b86:	ed ea       	ldi	r30, 0xAD	; 173
    8b88:	e7 e4       	ldi	r30, 0x47	; 71
    8b8a:	e1 de       	rcall	.-574    	; 0x894e <ProcessMusic+0x432>
    8b8c:	db d8       	rcall	.-3658   	; 0x7d44 <wait+0x2>
    8b8e:	d5 d2       	rcall	.+1450   	; 0x913a <waves+0x63a>
    8b90:	cf cd       	rjmp	.-1122   	; 0x8730 <ProcessMusic+0x214>
    8b92:	ca c7       	rjmp	.+3988   	; 0x9b28 <LBPrintByte+0x42>
    8b94:	c4 c1       	rjmp	.+904    	; 0x8f1e <waves+0x41e>
    8b96:	bf bc       	out	0x2f, r11	; 47
    8b98:	b9 b7       	in	r27, 0x39	; 57
    8b9a:	b4 b2       	in	r11, 0x14	; 20
    8b9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8ba0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8ba2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8ba4:	9e 9c       	mul	r9, r14
    8ba6:	9a 98       	cbi	0x13, 2	; 19
    8ba8:	96 95       	lsr	r25
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	88 87       	std	Y+8, r24	; 0x08
    8bb4:	86 86       	std	Z+14, r8	; 0x0e
    8bb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8bb8:	83 83       	std	Z+3, r24	; 0x03
    8bba:	82 82       	std	Z+2, r8	; 0x02
    8bbc:	82 81       	ldd	r24, Z+2	; 0x02
    8bbe:	81 81       	ldd	r24, Z+1	; 0x01
    8bc0:	81 81       	ldd	r24, Z+1	; 0x01
    8bc2:	81 81       	ldd	r24, Z+1	; 0x01
    8bc4:	82 82       	std	Z+2, r8	; 0x02
    8bc6:	82 83       	std	Z+2, r24	; 0x02
    8bc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8bca:	85 86       	std	Z+13, r8	; 0x0d
    8bcc:	86 87       	std	Z+14, r24	; 0x0e
    8bce:	88 8a       	std	Y+16, r8	; 0x10
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 95 	lds	r25, 0x9593
    8bd8:	96 98       	cbi	0x12, 6	; 18
    8bda:	9a 9c       	mul	r9, r10
    8bdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8bde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8be0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8be2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be4:	af b2       	in	r10, 0x1f	; 31
    8be6:	b4 b7       	in	r27, 0x34	; 52
    8be8:	b9 bc       	out	0x29, r11	; 41
    8bea:	bf c1       	rjmp	.+894    	; 0x8f6a <waves+0x46a>
    8bec:	c4 c7       	rjmp	.+3976   	; 0x9b76 <LBPrintInt+0x2e>
    8bee:	ca cd       	rjmp	.-1132   	; 0x8784 <ProcessMusic+0x268>
    8bf0:	cf d2       	rcall	.+1438   	; 0x9190 <waves+0x690>
    8bf2:	d5 d8       	rcall	.-3670   	; 0x7d9e <ReadButtons+0x4>
    8bf4:	db de       	rcall	.-586    	; 0x89ac <SetMixerWave+0x18>
    8bf6:	e1 e4       	ldi	r30, 0x41	; 65
    8bf8:	e7 ea       	ldi	r30, 0xA7	; 167
    8bfa:	ed f0       	brhs	.+58     	; 0x8c36 <waves+0x136>
    8bfc:	f4 f7       	brge	.-4      	; 0x8bfa <waves+0xfa>
    8bfe:	fa fd       	.word	0xfdfa	; ????
    8c00:	80 81       	ld	r24, Z
    8c02:	82 83       	std	Z+2, r24	; 0x02
    8c04:	84 85       	ldd	r24, Z+12	; 0x0c
    8c06:	86 87       	std	Z+14, r24	; 0x0e
    8c08:	88 89       	ldd	r24, Y+16	; 0x10
    8c0a:	8a 8b       	std	Y+18, r24	; 0x12
    8c0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8c10:	90 91 92 93 	lds	r25, 0x9392
    8c14:	94 95       	.word	0x9594	; ????
    8c16:	96 97       	sbiw	r26, 0x26	; 38
    8c18:	98 99       	sbic	0x13, 0	; 19
    8c1a:	9a 9b       	sbis	0x13, 2	; 19
    8c1c:	9c 9d       	mul	r25, r12
    8c1e:	9e 9f       	mul	r25, r30
    8c20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8c22:	a2 a3       	std	Z+34, r26	; 0x22
    8c24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8c26:	a6 a7       	std	Z+46, r26	; 0x2e
    8c28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8c2a:	aa ab       	std	Y+50, r26	; 0x32
    8c2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8c2e:	ae af       	std	Y+62, r26	; 0x3e
    8c30:	b0 b1       	in	r27, 0x00	; 0
    8c32:	b2 b3       	in	r27, 0x12	; 18
    8c34:	b4 b5       	in	r27, 0x24	; 36
    8c36:	b6 b7       	in	r27, 0x36	; 54
    8c38:	b8 b9       	out	0x08, r27	; 8
    8c3a:	ba bb       	out	0x1a, r27	; 26
    8c3c:	bc bd       	out	0x2c, r27	; 44
    8c3e:	be bf       	out	0x3e, r27	; 62
    8c40:	c0 c1       	rjmp	.+896    	; 0x8fc2 <waves+0x4c2>
    8c42:	c2 c3       	rjmp	.+1924   	; 0x93c8 <waves+0x8c8>
    8c44:	c4 c5       	rjmp	.+2952   	; 0x97ce <InitializeVideoMode+0x2a>
    8c46:	c6 c7       	rjmp	.+3980   	; 0x9bd4 <LBCollides+0x1a>
    8c48:	c8 c9       	rjmp	.-3184   	; 0x7fda <EepromReadBlock+0xa>
    8c4a:	ca cb       	rjmp	.-2156   	; 0x83e0 <TriggerCommon+0xf0>
    8c4c:	cc cd       	rjmp	.-1128   	; 0x87e6 <ProcessMusic+0x2ca>
    8c4e:	ce cf       	rjmp	.-100    	; 0x8bec <waves+0xec>
    8c50:	d0 d1       	rcall	.+928    	; 0x8ff2 <waves+0x4f2>
    8c52:	d2 d3       	rcall	.+1956   	; 0x93f8 <waves+0x8f8>
    8c54:	d4 d5       	rcall	.+2984   	; 0x97fe <DrawMap+0x2e>
    8c56:	d6 d7       	rcall	.+4012   	; 0x9c04 <LBCollides+0x4a>
    8c58:	d8 d9       	rcall	.-3152   	; 0x800a <EepromReadBlock+0x3a>
    8c5a:	da db       	rcall	.-2124   	; 0x8410 <TriggerFx+0x4>
    8c5c:	dc dd       	rcall	.-1096   	; 0x8816 <ProcessMusic+0x2fa>
    8c5e:	de df       	rcall	.-68     	; 0x8c1c <waves+0x11c>
    8c60:	e0 e1       	ldi	r30, 0x10	; 16
    8c62:	e2 e3       	ldi	r30, 0x32	; 50
    8c64:	e4 e5       	ldi	r30, 0x54	; 84
    8c66:	e6 e7       	ldi	r30, 0x76	; 118
    8c68:	e8 e9       	ldi	r30, 0x98	; 152
    8c6a:	ea eb       	ldi	r30, 0xBA	; 186
    8c6c:	ec ed       	ldi	r30, 0xDC	; 220
    8c6e:	ee ef       	ldi	r30, 0xFE	; 254
    8c70:	f0 f1       	brcs	.+124    	; 0x8cee <waves+0x1ee>
    8c72:	f2 f3       	brmi	.-4      	; 0x8c70 <waves+0x170>
    8c74:	f4 f5       	brge	.+124    	; 0x8cf2 <waves+0x1f2>
    8c76:	f6 f7       	brtc	.-4      	; 0x8c74 <waves+0x174>
    8c78:	f8 f9       	.word	0xf9f8	; ????
    8c7a:	fa fb       	.word	0xfbfa	; ????
    8c7c:	fc fd       	.word	0xfdfc	; ????
    8c7e:	fe ff       	.word	0xfffe	; ????
    8c80:	00 01       	movw	r0, r0
    8c82:	02 03       	mulsu	r16, r18
    8c84:	04 05       	cpc	r16, r4
    8c86:	06 07       	cpc	r16, r22
    8c88:	08 09       	sbc	r16, r8
    8c8a:	0a 0b       	sbc	r16, r26
    8c8c:	0c 0d       	add	r16, r12
    8c8e:	0e 0f       	add	r16, r30
    8c90:	10 11       	cpse	r17, r0
    8c92:	12 13       	cpse	r17, r18
    8c94:	14 15       	cp	r17, r4
    8c96:	16 17       	cp	r17, r22
    8c98:	18 19       	sub	r17, r8
    8c9a:	1a 1b       	sub	r17, r26
    8c9c:	1c 1d       	adc	r17, r12
    8c9e:	1e 1f       	adc	r17, r30
    8ca0:	20 21       	and	r18, r0
    8ca2:	22 23       	and	r18, r18
    8ca4:	24 25       	eor	r18, r4
    8ca6:	26 27       	eor	r18, r22
    8ca8:	28 29       	or	r18, r8
    8caa:	2a 2b       	or	r18, r26
    8cac:	2c 2d       	mov	r18, r12
    8cae:	2e 2f       	mov	r18, r30
    8cb0:	30 31       	cpi	r19, 0x10	; 16
    8cb2:	32 33       	cpi	r19, 0x32	; 50
    8cb4:	34 35       	cpi	r19, 0x54	; 84
    8cb6:	36 37       	cpi	r19, 0x76	; 118
    8cb8:	38 39       	cpi	r19, 0x98	; 152
    8cba:	3a 3b       	cpi	r19, 0xBA	; 186
    8cbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8cbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8cc0:	40 41       	sbci	r20, 0x10	; 16
    8cc2:	42 43       	sbci	r20, 0x32	; 50
    8cc4:	44 45       	sbci	r20, 0x54	; 84
    8cc6:	46 47       	sbci	r20, 0x76	; 118
    8cc8:	48 49       	sbci	r20, 0x98	; 152
    8cca:	4a 4b       	sbci	r20, 0xBA	; 186
    8ccc:	4c 4d       	sbci	r20, 0xDC	; 220
    8cce:	4e 4f       	sbci	r20, 0xFE	; 254
    8cd0:	50 51       	subi	r21, 0x10	; 16
    8cd2:	52 53       	subi	r21, 0x32	; 50
    8cd4:	54 55       	subi	r21, 0x54	; 84
    8cd6:	56 57       	subi	r21, 0x76	; 118
    8cd8:	58 59       	subi	r21, 0x98	; 152
    8cda:	5a 5b       	subi	r21, 0xBA	; 186
    8cdc:	5c 5d       	subi	r21, 0xDC	; 220
    8cde:	5e 5f       	subi	r21, 0xFE	; 254
    8ce0:	60 61       	ori	r22, 0x10	; 16
    8ce2:	62 63       	ori	r22, 0x32	; 50
    8ce4:	64 65       	ori	r22, 0x54	; 84
    8ce6:	66 67       	ori	r22, 0x76	; 118
    8ce8:	68 69       	ori	r22, 0x98	; 152
    8cea:	6a 6b       	ori	r22, 0xBA	; 186
    8cec:	6c 6d       	ori	r22, 0xDC	; 220
    8cee:	6e 6f       	ori	r22, 0xFE	; 254
    8cf0:	70 71       	andi	r23, 0x10	; 16
    8cf2:	72 73       	andi	r23, 0x32	; 50
    8cf4:	74 75       	andi	r23, 0x54	; 84
    8cf6:	76 77       	andi	r23, 0x76	; 118
    8cf8:	78 79       	andi	r23, 0x98	; 152
    8cfa:	7a 7b       	andi	r23, 0xBA	; 186
    8cfc:	7c 7d       	andi	r23, 0xDC	; 220
    8cfe:	7e 7f       	andi	r23, 0xFE	; 254
    8d00:	00 02       	muls	r16, r16
    8d02:	04 06       	cpc	r0, r20
    8d04:	08 0a       	sbc	r0, r24
    8d06:	0c 0e       	add	r0, r28
    8d08:	10 12       	cpse	r1, r16
    8d0a:	14 16       	cp	r1, r20
    8d0c:	18 1a       	sub	r1, r24
    8d0e:	1c 1e       	adc	r1, r28
    8d10:	20 22       	and	r2, r16
    8d12:	24 26       	eor	r2, r20
    8d14:	28 2a       	or	r2, r24
    8d16:	2c 2e       	mov	r2, r28
    8d18:	30 32       	cpi	r19, 0x20	; 32
    8d1a:	34 36       	cpi	r19, 0x64	; 100
    8d1c:	38 3a       	cpi	r19, 0xA8	; 168
    8d1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8d20:	40 42       	sbci	r20, 0x20	; 32
    8d22:	44 46       	sbci	r20, 0x64	; 100
    8d24:	48 4a       	sbci	r20, 0xA8	; 168
    8d26:	4c 4e       	sbci	r20, 0xEC	; 236
    8d28:	50 52       	subi	r21, 0x20	; 32
    8d2a:	54 56       	subi	r21, 0x64	; 100
    8d2c:	58 5a       	subi	r21, 0xA8	; 168
    8d2e:	5c 5e       	subi	r21, 0xEC	; 236
    8d30:	60 62       	ori	r22, 0x20	; 32
    8d32:	64 66       	ori	r22, 0x64	; 100
    8d34:	68 6a       	ori	r22, 0xA8	; 168
    8d36:	6c 6e       	ori	r22, 0xEC	; 236
    8d38:	70 72       	andi	r23, 0x20	; 32
    8d3a:	74 76       	andi	r23, 0x64	; 100
    8d3c:	78 7a       	andi	r23, 0xA8	; 168
    8d3e:	7c 7e       	andi	r23, 0xEC	; 236
    8d40:	7f 7d       	andi	r23, 0xDF	; 223
    8d42:	7b 79       	andi	r23, 0x9B	; 155
    8d44:	77 75       	andi	r23, 0x57	; 87
    8d46:	73 71       	andi	r23, 0x13	; 19
    8d48:	6f 6d       	ori	r22, 0xDF	; 223
    8d4a:	6b 69       	ori	r22, 0x9B	; 155
    8d4c:	67 65       	ori	r22, 0x57	; 87
    8d4e:	63 61       	ori	r22, 0x13	; 19
    8d50:	5f 5d       	subi	r21, 0xDF	; 223
    8d52:	5b 59       	subi	r21, 0x9B	; 155
    8d54:	57 55       	subi	r21, 0x57	; 87
    8d56:	53 51       	subi	r21, 0x13	; 19
    8d58:	4f 4d       	sbci	r20, 0xDF	; 223
    8d5a:	4b 49       	sbci	r20, 0x9B	; 155
    8d5c:	47 45       	sbci	r20, 0x57	; 87
    8d5e:	43 41       	sbci	r20, 0x13	; 19
    8d60:	3f 3d       	cpi	r19, 0xDF	; 223
    8d62:	3b 39       	cpi	r19, 0x9B	; 155
    8d64:	37 35       	cpi	r19, 0x57	; 87
    8d66:	33 31       	cpi	r19, 0x13	; 19
    8d68:	2f 2d       	mov	r18, r15
    8d6a:	2b 29       	or	r18, r11
    8d6c:	27 25       	eor	r18, r7
    8d6e:	23 21       	and	r18, r3
    8d70:	1f 1d       	adc	r17, r15
    8d72:	1b 19       	sub	r17, r11
    8d74:	17 15       	cp	r17, r7
    8d76:	13 11       	cpse	r17, r3
    8d78:	0f 0d       	add	r16, r15
    8d7a:	0b 09       	sbc	r16, r11
    8d7c:	07 05       	cpc	r16, r7
    8d7e:	03 01       	movw	r0, r6
    8d80:	ff fd       	.word	0xfdff	; ????
    8d82:	fb f9       	.word	0xf9fb	; ????
    8d84:	f7 f5       	brid	.+124    	; 0x8e02 <waves+0x302>
    8d86:	f3 f1       	brvs	.+124    	; 0x8e04 <waves+0x304>
    8d88:	ef ed       	ldi	r30, 0xDF	; 223
    8d8a:	eb e9       	ldi	r30, 0x9B	; 155
    8d8c:	e7 e5       	ldi	r30, 0x57	; 87
    8d8e:	e3 e1       	ldi	r30, 0x13	; 19
    8d90:	df dd       	rcall	.-1090   	; 0x8950 <ProcessMusic+0x434>
    8d92:	db d9       	rcall	.-3146   	; 0x814a <PatchCommand13>
    8d94:	d7 d5       	rcall	.+2990   	; 0x9944 <LBMoveDelta+0xe>
    8d96:	d3 d1       	rcall	.+934    	; 0x913e <waves+0x63e>
    8d98:	cf cd       	rjmp	.-1122   	; 0x8938 <ProcessMusic+0x41c>
    8d9a:	cb c9       	rjmp	.-3178   	; 0x8132 <PatchCommand11+0x64>
    8d9c:	c7 c5       	rjmp	.+2958   	; 0x992c <ProcessFading+0x48>
    8d9e:	c3 c1       	rjmp	.+902    	; 0x9126 <waves+0x626>
    8da0:	bf bd       	out	0x2f, r27	; 47
    8da2:	bb b9       	out	0x0b, r27	; 11
    8da4:	b7 b5       	in	r27, 0x27	; 39
    8da6:	b3 b1       	in	r27, 0x03	; 3
    8da8:	af ad       	ldd	r26, Y+63	; 0x3f
    8daa:	ab a9       	ldd	r26, Y+51	; 0x33
    8dac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8dae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8db0:	9f 9d       	mul	r25, r15
    8db2:	9b 99       	sbic	0x13, 3	; 19
    8db4:	97 95       	ror	r25
    8db6:	93 91       	.word	0x9193	; ????
    8db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8dba:	8b 89       	ldd	r24, Y+19	; 0x13
    8dbc:	87 85       	ldd	r24, Z+15	; 0x0f
    8dbe:	83 81       	ldd	r24, Z+3	; 0x03
    8dc0:	80 82       	st	Z, r8
    8dc2:	84 86       	std	Z+12, r8	; 0x0c
    8dc4:	88 8a       	std	Y+16, r8	; 0x10
    8dc6:	8c 8e       	std	Y+28, r8	; 0x1c
    8dc8:	90 92 94 96 	sts	0x9694, r9
    8dcc:	98 9a       	sbi	0x13, 0	; 19
    8dce:	9c 9e       	mul	r9, r28
    8dd0:	a0 a2       	std	Z+32, r10	; 0x20
    8dd2:	a4 a6       	std	Z+44, r10	; 0x2c
    8dd4:	a8 aa       	std	Y+48, r10	; 0x30
    8dd6:	ac ae       	std	Y+60, r10	; 0x3c
    8dd8:	b0 b2       	in	r11, 0x10	; 16
    8dda:	b4 b6       	in	r11, 0x34	; 52
    8ddc:	b8 ba       	out	0x18, r11	; 24
    8dde:	bc be       	out	0x3c, r11	; 60
    8de0:	c0 c2       	rjmp	.+1408   	; 0x9362 <waves+0x862>
    8de2:	c4 c6       	rjmp	.+3464   	; 0x9b6c <LBPrintInt+0x24>
    8de4:	c8 ca       	rjmp	.-2672   	; 0x8376 <TriggerCommon+0x86>
    8de6:	cc ce       	rjmp	.-616    	; 0x8b80 <waves+0x80>
    8de8:	d0 d2       	rcall	.+1440   	; 0x938a <waves+0x88a>
    8dea:	d4 d6       	rcall	.+3496   	; 0x9b94 <LBPrintInt+0x4c>
    8dec:	d8 da       	rcall	.-2640   	; 0x839e <TriggerCommon+0xae>
    8dee:	dc de       	rcall	.-584    	; 0x8ba8 <waves+0xa8>
    8df0:	e0 e2       	ldi	r30, 0x20	; 32
    8df2:	e4 e6       	ldi	r30, 0x64	; 100
    8df4:	e8 ea       	ldi	r30, 0xA8	; 168
    8df6:	ec ee       	ldi	r30, 0xEC	; 236
    8df8:	f0 f2       	brcs	.-68     	; 0x8db6 <waves+0x2b6>
    8dfa:	f4 f6       	brge	.-68     	; 0x8db8 <waves+0x2b8>
    8dfc:	f8 fa       	.word	0xfaf8	; ????
    8dfe:	fc fe       	.word	0xfefc	; ????
    8e00:	7f 7f       	andi	r23, 0xFF	; 255
    8e02:	7f 7f       	andi	r23, 0xFF	; 255
    8e04:	7f 7f       	andi	r23, 0xFF	; 255
    8e06:	7f 7f       	andi	r23, 0xFF	; 255
    8e08:	7f 7f       	andi	r23, 0xFF	; 255
    8e0a:	7f 7f       	andi	r23, 0xFF	; 255
    8e0c:	7f 7f       	andi	r23, 0xFF	; 255
    8e0e:	7f 7f       	andi	r23, 0xFF	; 255
    8e10:	7f 7f       	andi	r23, 0xFF	; 255
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	80 80       	ld	r8, Z
    8e42:	80 80       	ld	r8, Z
    8e44:	80 80       	ld	r8, Z
    8e46:	80 80       	ld	r8, Z
    8e48:	80 80       	ld	r8, Z
    8e4a:	80 80       	ld	r8, Z
    8e4c:	80 80       	ld	r8, Z
    8e4e:	80 80       	ld	r8, Z
    8e50:	80 80       	ld	r8, Z
    8e52:	80 80       	ld	r8, Z
    8e54:	80 80       	ld	r8, Z
    8e56:	80 80       	ld	r8, Z
    8e58:	80 80       	ld	r8, Z
    8e5a:	80 80       	ld	r8, Z
    8e5c:	80 80       	ld	r8, Z
    8e5e:	80 80       	ld	r8, Z
    8e60:	80 80       	ld	r8, Z
    8e62:	80 80       	ld	r8, Z
    8e64:	80 80       	ld	r8, Z
    8e66:	80 80       	ld	r8, Z
    8e68:	80 80       	ld	r8, Z
    8e6a:	80 80       	ld	r8, Z
    8e6c:	80 80       	ld	r8, Z
    8e6e:	80 80       	ld	r8, Z
    8e70:	80 80       	ld	r8, Z
    8e72:	80 80       	ld	r8, Z
    8e74:	80 80       	ld	r8, Z
    8e76:	80 80       	ld	r8, Z
    8e78:	80 80       	ld	r8, Z
    8e7a:	80 80       	ld	r8, Z
    8e7c:	80 80       	ld	r8, Z
    8e7e:	80 80       	ld	r8, Z
    8e80:	80 80       	ld	r8, Z
    8e82:	80 80       	ld	r8, Z
    8e84:	80 80       	ld	r8, Z
    8e86:	80 80       	ld	r8, Z
    8e88:	80 80       	ld	r8, Z
    8e8a:	80 80       	ld	r8, Z
    8e8c:	80 80       	ld	r8, Z
    8e8e:	80 80       	ld	r8, Z
    8e90:	80 80       	ld	r8, Z
    8e92:	80 80       	ld	r8, Z
    8e94:	80 80       	ld	r8, Z
    8e96:	80 80       	ld	r8, Z
    8e98:	80 80       	ld	r8, Z
    8e9a:	80 80       	ld	r8, Z
    8e9c:	80 80       	ld	r8, Z
    8e9e:	80 80       	ld	r8, Z
    8ea0:	80 80       	ld	r8, Z
    8ea2:	80 80       	ld	r8, Z
    8ea4:	80 80       	ld	r8, Z
    8ea6:	80 80       	ld	r8, Z
    8ea8:	80 80       	ld	r8, Z
    8eaa:	80 80       	ld	r8, Z
    8eac:	80 80       	ld	r8, Z
    8eae:	80 80       	ld	r8, Z
    8eb0:	80 80       	ld	r8, Z
    8eb2:	80 80       	ld	r8, Z
    8eb4:	80 80       	ld	r8, Z
    8eb6:	80 80       	ld	r8, Z
    8eb8:	80 80       	ld	r8, Z
    8eba:	80 80       	ld	r8, Z
    8ebc:	80 80       	ld	r8, Z
    8ebe:	80 80       	ld	r8, Z
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 80       	ld	r8, Z
    8ef6:	80 80       	ld	r8, Z
    8ef8:	80 80       	ld	r8, Z
    8efa:	80 80       	ld	r8, Z
    8efc:	80 80       	ld	r8, Z
    8efe:	80 80       	ld	r8, Z
    8f00:	7f 7f       	andi	r23, 0xFF	; 255
    8f02:	7f 7f       	andi	r23, 0xFF	; 255
    8f04:	7f 7f       	andi	r23, 0xFF	; 255
    8f06:	7f 7f       	andi	r23, 0xFF	; 255
    8f08:	7f 7f       	andi	r23, 0xFF	; 255
    8f0a:	7f 7f       	andi	r23, 0xFF	; 255
    8f0c:	7f 7f       	andi	r23, 0xFF	; 255
    8f0e:	7f 7f       	andi	r23, 0xFF	; 255
    8f10:	7f 7f       	andi	r23, 0xFF	; 255
    8f12:	7f 7f       	andi	r23, 0xFF	; 255
    8f14:	7f 7f       	andi	r23, 0xFF	; 255
    8f16:	7f 7f       	andi	r23, 0xFF	; 255
    8f18:	7f 7f       	andi	r23, 0xFF	; 255
    8f1a:	7f 7f       	andi	r23, 0xFF	; 255
    8f1c:	7f 7f       	andi	r23, 0xFF	; 255
    8f1e:	7f 7f       	andi	r23, 0xFF	; 255
    8f20:	7f 7f       	andi	r23, 0xFF	; 255
    8f22:	7f 7f       	andi	r23, 0xFF	; 255
    8f24:	7f 7f       	andi	r23, 0xFF	; 255
    8f26:	7f 7f       	andi	r23, 0xFF	; 255
    8f28:	7f 7f       	andi	r23, 0xFF	; 255
    8f2a:	7f 7f       	andi	r23, 0xFF	; 255
    8f2c:	7f 7f       	andi	r23, 0xFF	; 255
    8f2e:	7f 7f       	andi	r23, 0xFF	; 255
    8f30:	7f 7f       	andi	r23, 0xFF	; 255
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7f 7f       	andi	r23, 0xFF	; 255
    8f46:	7f 7f       	andi	r23, 0xFF	; 255
    8f48:	7f 7f       	andi	r23, 0xFF	; 255
    8f4a:	7f 7f       	andi	r23, 0xFF	; 255
    8f4c:	7f 7f       	andi	r23, 0xFF	; 255
    8f4e:	7f 7f       	andi	r23, 0xFF	; 255
    8f50:	7f 7f       	andi	r23, 0xFF	; 255
    8f52:	7f 7f       	andi	r23, 0xFF	; 255
    8f54:	7f 7f       	andi	r23, 0xFF	; 255
    8f56:	7f 7f       	andi	r23, 0xFF	; 255
    8f58:	7f 7f       	andi	r23, 0xFF	; 255
    8f5a:	7f 7f       	andi	r23, 0xFF	; 255
    8f5c:	7f 7f       	andi	r23, 0xFF	; 255
    8f5e:	7f 7f       	andi	r23, 0xFF	; 255
    8f60:	7f 7f       	andi	r23, 0xFF	; 255
    8f62:	7f 7f       	andi	r23, 0xFF	; 255
    8f64:	7f 7f       	andi	r23, 0xFF	; 255
    8f66:	7f 7f       	andi	r23, 0xFF	; 255
    8f68:	7f 7f       	andi	r23, 0xFF	; 255
    8f6a:	7f 7f       	andi	r23, 0xFF	; 255
    8f6c:	7f 7f       	andi	r23, 0xFF	; 255
    8f6e:	7f 7f       	andi	r23, 0xFF	; 255
    8f70:	7f 7f       	andi	r23, 0xFF	; 255
    8f72:	7f 7f       	andi	r23, 0xFF	; 255
    8f74:	7f 7f       	andi	r23, 0xFF	; 255
    8f76:	7f 7f       	andi	r23, 0xFF	; 255
    8f78:	7f 7f       	andi	r23, 0xFF	; 255
    8f7a:	7f 7f       	andi	r23, 0xFF	; 255
    8f7c:	7f 7f       	andi	r23, 0xFF	; 255
    8f7e:	7f 7f       	andi	r23, 0xFF	; 255
    8f80:	80 80       	ld	r8, Z
    8f82:	80 80       	ld	r8, Z
    8f84:	80 80       	ld	r8, Z
    8f86:	80 80       	ld	r8, Z
    8f88:	80 80       	ld	r8, Z
    8f8a:	80 80       	ld	r8, Z
    8f8c:	80 80       	ld	r8, Z
    8f8e:	80 80       	ld	r8, Z
    8f90:	80 80       	ld	r8, Z
    8f92:	80 80       	ld	r8, Z
    8f94:	80 80       	ld	r8, Z
    8f96:	80 80       	ld	r8, Z
    8f98:	80 80       	ld	r8, Z
    8f9a:	80 80       	ld	r8, Z
    8f9c:	80 80       	ld	r8, Z
    8f9e:	80 80       	ld	r8, Z
    8fa0:	80 80       	ld	r8, Z
    8fa2:	80 80       	ld	r8, Z
    8fa4:	80 80       	ld	r8, Z
    8fa6:	80 80       	ld	r8, Z
    8fa8:	80 80       	ld	r8, Z
    8faa:	80 80       	ld	r8, Z
    8fac:	80 80       	ld	r8, Z
    8fae:	80 80       	ld	r8, Z
    8fb0:	80 80       	ld	r8, Z
    8fb2:	80 80       	ld	r8, Z
    8fb4:	80 80       	ld	r8, Z
    8fb6:	80 80       	ld	r8, Z
    8fb8:	80 80       	ld	r8, Z
    8fba:	80 80       	ld	r8, Z
    8fbc:	80 80       	ld	r8, Z
    8fbe:	80 80       	ld	r8, Z
    8fc0:	80 80       	ld	r8, Z
    8fc2:	80 80       	ld	r8, Z
    8fc4:	80 80       	ld	r8, Z
    8fc6:	80 80       	ld	r8, Z
    8fc8:	80 80       	ld	r8, Z
    8fca:	80 80       	ld	r8, Z
    8fcc:	80 80       	ld	r8, Z
    8fce:	80 80       	ld	r8, Z
    8fd0:	80 80       	ld	r8, Z
    8fd2:	80 80       	ld	r8, Z
    8fd4:	80 80       	ld	r8, Z
    8fd6:	80 80       	ld	r8, Z
    8fd8:	80 80       	ld	r8, Z
    8fda:	80 80       	ld	r8, Z
    8fdc:	80 80       	ld	r8, Z
    8fde:	80 80       	ld	r8, Z
    8fe0:	80 80       	ld	r8, Z
    8fe2:	80 80       	ld	r8, Z
    8fe4:	80 80       	ld	r8, Z
    8fe6:	80 80       	ld	r8, Z
    8fe8:	80 80       	ld	r8, Z
    8fea:	80 80       	ld	r8, Z
    8fec:	80 80       	ld	r8, Z
    8fee:	80 80       	ld	r8, Z
    8ff0:	80 80       	ld	r8, Z
    8ff2:	80 80       	ld	r8, Z
    8ff4:	80 80       	ld	r8, Z
    8ff6:	80 80       	ld	r8, Z
    8ff8:	80 80       	ld	r8, Z
    8ffa:	80 80       	ld	r8, Z
    8ffc:	80 80       	ld	r8, Z
    8ffe:	80 80       	ld	r8, Z
    9000:	7f 7f       	andi	r23, 0xFF	; 255
    9002:	7f 7f       	andi	r23, 0xFF	; 255
    9004:	7f 7f       	andi	r23, 0xFF	; 255
    9006:	7f 7f       	andi	r23, 0xFF	; 255
    9008:	7f 7f       	andi	r23, 0xFF	; 255
    900a:	7f 7f       	andi	r23, 0xFF	; 255
    900c:	7f 7f       	andi	r23, 0xFF	; 255
    900e:	7f 7f       	andi	r23, 0xFF	; 255
    9010:	7f 7f       	andi	r23, 0xFF	; 255
    9012:	7f 7f       	andi	r23, 0xFF	; 255
    9014:	7f 7f       	andi	r23, 0xFF	; 255
    9016:	7f 7f       	andi	r23, 0xFF	; 255
    9018:	7f 7f       	andi	r23, 0xFF	; 255
    901a:	7f 7f       	andi	r23, 0xFF	; 255
    901c:	7f 7f       	andi	r23, 0xFF	; 255
    901e:	7f 7f       	andi	r23, 0xFF	; 255
    9020:	7f 7f       	andi	r23, 0xFF	; 255
    9022:	7f 7f       	andi	r23, 0xFF	; 255
    9024:	7f 7f       	andi	r23, 0xFF	; 255
    9026:	7f 7f       	andi	r23, 0xFF	; 255
    9028:	7f 7f       	andi	r23, 0xFF	; 255
    902a:	7f 7f       	andi	r23, 0xFF	; 255
    902c:	7f 7f       	andi	r23, 0xFF	; 255
    902e:	7f 7f       	andi	r23, 0xFF	; 255
    9030:	7f 7f       	andi	r23, 0xFF	; 255
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7f 7f       	andi	r23, 0xFF	; 255
    9046:	7f 7f       	andi	r23, 0xFF	; 255
    9048:	7f 7f       	andi	r23, 0xFF	; 255
    904a:	7f 7f       	andi	r23, 0xFF	; 255
    904c:	7f 7f       	andi	r23, 0xFF	; 255
    904e:	7f 7f       	andi	r23, 0xFF	; 255
    9050:	7f 7f       	andi	r23, 0xFF	; 255
    9052:	7f 7f       	andi	r23, 0xFF	; 255
    9054:	7f 7f       	andi	r23, 0xFF	; 255
    9056:	7f 7f       	andi	r23, 0xFF	; 255
    9058:	7f 7f       	andi	r23, 0xFF	; 255
    905a:	7f 7f       	andi	r23, 0xFF	; 255
    905c:	7f 7f       	andi	r23, 0xFF	; 255
    905e:	7f 7f       	andi	r23, 0xFF	; 255
    9060:	7f 7f       	andi	r23, 0xFF	; 255
    9062:	7f 7f       	andi	r23, 0xFF	; 255
    9064:	7f 7f       	andi	r23, 0xFF	; 255
    9066:	7f 7f       	andi	r23, 0xFF	; 255
    9068:	7f 7f       	andi	r23, 0xFF	; 255
    906a:	7f 7f       	andi	r23, 0xFF	; 255
    906c:	7f 7f       	andi	r23, 0xFF	; 255
    906e:	7f 7f       	andi	r23, 0xFF	; 255
    9070:	7f 7f       	andi	r23, 0xFF	; 255
    9072:	7f 7f       	andi	r23, 0xFF	; 255
    9074:	7f 7f       	andi	r23, 0xFF	; 255
    9076:	7f 7f       	andi	r23, 0xFF	; 255
    9078:	7f 7f       	andi	r23, 0xFF	; 255
    907a:	7f 7f       	andi	r23, 0xFF	; 255
    907c:	7f 7f       	andi	r23, 0xFF	; 255
    907e:	7f 7f       	andi	r23, 0xFF	; 255
    9080:	7f 7f       	andi	r23, 0xFF	; 255
    9082:	7f 7f       	andi	r23, 0xFF	; 255
    9084:	7f 7f       	andi	r23, 0xFF	; 255
    9086:	7f 7f       	andi	r23, 0xFF	; 255
    9088:	7f 7f       	andi	r23, 0xFF	; 255
    908a:	7f 7f       	andi	r23, 0xFF	; 255
    908c:	7f 7f       	andi	r23, 0xFF	; 255
    908e:	7f 7f       	andi	r23, 0xFF	; 255
    9090:	7f 7f       	andi	r23, 0xFF	; 255
    9092:	7f 7f       	andi	r23, 0xFF	; 255
    9094:	7f 7f       	andi	r23, 0xFF	; 255
    9096:	7f 7f       	andi	r23, 0xFF	; 255
    9098:	7f 7f       	andi	r23, 0xFF	; 255
    909a:	7f 7f       	andi	r23, 0xFF	; 255
    909c:	7f 7f       	andi	r23, 0xFF	; 255
    909e:	7f 7f       	andi	r23, 0xFF	; 255
    90a0:	7f 7f       	andi	r23, 0xFF	; 255
    90a2:	7f 7f       	andi	r23, 0xFF	; 255
    90a4:	7f 7f       	andi	r23, 0xFF	; 255
    90a6:	7f 7f       	andi	r23, 0xFF	; 255
    90a8:	7f 7f       	andi	r23, 0xFF	; 255
    90aa:	7f 7f       	andi	r23, 0xFF	; 255
    90ac:	7f 7f       	andi	r23, 0xFF	; 255
    90ae:	7f 7f       	andi	r23, 0xFF	; 255
    90b0:	7f 7f       	andi	r23, 0xFF	; 255
    90b2:	7f 7f       	andi	r23, 0xFF	; 255
    90b4:	7f 7f       	andi	r23, 0xFF	; 255
    90b6:	7f 7f       	andi	r23, 0xFF	; 255
    90b8:	7f 7f       	andi	r23, 0xFF	; 255
    90ba:	7f 7f       	andi	r23, 0xFF	; 255
    90bc:	7f 7f       	andi	r23, 0xFF	; 255
    90be:	7f 7f       	andi	r23, 0xFF	; 255
    90c0:	80 80       	ld	r8, Z
    90c2:	80 80       	ld	r8, Z
    90c4:	80 80       	ld	r8, Z
    90c6:	80 80       	ld	r8, Z
    90c8:	80 80       	ld	r8, Z
    90ca:	80 80       	ld	r8, Z
    90cc:	80 80       	ld	r8, Z
    90ce:	80 80       	ld	r8, Z
    90d0:	80 80       	ld	r8, Z
    90d2:	80 80       	ld	r8, Z
    90d4:	80 80       	ld	r8, Z
    90d6:	80 80       	ld	r8, Z
    90d8:	80 80       	ld	r8, Z
    90da:	80 80       	ld	r8, Z
    90dc:	80 80       	ld	r8, Z
    90de:	80 80       	ld	r8, Z
    90e0:	80 80       	ld	r8, Z
    90e2:	80 80       	ld	r8, Z
    90e4:	80 80       	ld	r8, Z
    90e6:	80 80       	ld	r8, Z
    90e8:	80 80       	ld	r8, Z
    90ea:	80 80       	ld	r8, Z
    90ec:	80 80       	ld	r8, Z
    90ee:	80 80       	ld	r8, Z
    90f0:	80 80       	ld	r8, Z
    90f2:	80 80       	ld	r8, Z
    90f4:	80 80       	ld	r8, Z
    90f6:	80 80       	ld	r8, Z
    90f8:	80 80       	ld	r8, Z
    90fa:	80 80       	ld	r8, Z
    90fc:	80 80       	ld	r8, Z
    90fe:	80 80       	ld	r8, Z
    9100:	03 09       	sbc	r16, r3
    9102:	13 1e       	adc	r1, r19
    9104:	28 31       	cpi	r18, 0x18	; 24
    9106:	3a 40       	sbci	r19, 0x0A	; 10
    9108:	46 4c       	sbci	r20, 0xC6	; 198
    910a:	50 54       	subi	r21, 0x40	; 64
    910c:	58 5b       	subi	r21, 0xB8	; 184
    910e:	5e 61       	ori	r21, 0x1E	; 30
    9110:	63 65       	ori	r22, 0x53	; 83
    9112:	67 69       	ori	r22, 0x97	; 151
    9114:	6b 6c       	ori	r22, 0xCB	; 203
    9116:	6e 6f       	ori	r22, 0xFE	; 254
    9118:	70 71       	andi	r23, 0x10	; 16
    911a:	72 73       	andi	r23, 0x32	; 50
    911c:	74 75       	andi	r23, 0x54	; 84
    911e:	76 77       	andi	r23, 0x76	; 118
    9120:	77 78       	andi	r23, 0x87	; 135
    9122:	79 79       	andi	r23, 0x99	; 153
    9124:	7a 7a       	andi	r23, 0xAA	; 170
    9126:	7b 7b       	andi	r23, 0xBB	; 187
    9128:	7c 7c       	andi	r23, 0xCC	; 204
    912a:	7c 7d       	andi	r23, 0xDC	; 220
    912c:	7d 7d       	andi	r23, 0xDD	; 221
    912e:	7e 7e       	andi	r23, 0xEE	; 238
    9130:	7e 7e       	andi	r23, 0xEE	; 238
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7f 7f       	andi	r23, 0xFF	; 255
    9148:	7f 7f       	andi	r23, 0xFF	; 255
    914a:	7f 7f       	andi	r23, 0xFF	; 255
    914c:	7f 7e       	andi	r23, 0xEF	; 239
    914e:	7e 7e       	andi	r23, 0xEE	; 238
    9150:	7e 7d       	andi	r23, 0xDE	; 222
    9152:	7d 7d       	andi	r23, 0xDD	; 221
    9154:	7c 7c       	andi	r23, 0xCC	; 204
    9156:	7c 7b       	andi	r23, 0xBC	; 188
    9158:	7b 7a       	andi	r23, 0xAB	; 171
    915a:	7a 79       	andi	r23, 0x9A	; 154
    915c:	79 78       	andi	r23, 0x89	; 137
    915e:	77 77       	andi	r23, 0x77	; 119
    9160:	76 75       	andi	r23, 0x56	; 86
    9162:	74 73       	andi	r23, 0x34	; 52
    9164:	72 71       	andi	r23, 0x12	; 18
    9166:	70 6f       	ori	r23, 0xF0	; 240
    9168:	6e 6c       	ori	r22, 0xCE	; 206
    916a:	6b 69       	ori	r22, 0x9B	; 155
    916c:	67 65       	ori	r22, 0x57	; 87
    916e:	63 61       	ori	r22, 0x13	; 19
    9170:	5e 5b       	subi	r21, 0xBE	; 190
    9172:	58 54       	subi	r21, 0x48	; 72
    9174:	50 4c       	sbci	r21, 0xC0	; 192
    9176:	46 40       	sbci	r20, 0x06	; 6
    9178:	3a 31       	cpi	r19, 0x1A	; 26
    917a:	28 1e       	adc	r2, r24
    917c:	13 09       	sbc	r17, r3
    917e:	03 00       	.word	0x0003	; ????
    9180:	c6 cc       	rjmp	.-1652   	; 0x8b0e <waves+0xe>
    9182:	d5 db       	rcall	.-2134   	; 0x892e <ProcessMusic+0x412>
    9184:	df e3       	ldi	r29, 0x3F	; 63
    9186:	e5 e7       	ldi	r30, 0x75	; 117
    9188:	e9 ea       	ldi	r30, 0xA9	; 169
    918a:	eb ec       	ldi	r30, 0xCB	; 203
    918c:	ed ee       	ldi	r30, 0xED	; 237
    918e:	ef ef       	ldi	r30, 0xFF	; 255
    9190:	f0 f0       	brcs	.+60     	; 0x91ce <waves+0x6ce>
    9192:	f0 f1       	brcs	.+124    	; 0x9210 <waves+0x710>
    9194:	f1 f1       	breq	.+124    	; 0x9212 <waves+0x712>
    9196:	f1 f2       	breq	.-68     	; 0x9154 <waves+0x654>
    9198:	f2 f2       	brmi	.-68     	; 0x9156 <waves+0x656>
    919a:	f2 f2       	brmi	.-68     	; 0x9158 <waves+0x658>
    919c:	f2 f2       	brmi	.-68     	; 0x915a <waves+0x65a>
    919e:	f2 f3       	brmi	.-4      	; 0x919c <waves+0x69c>
    91a0:	f3 f3       	brvs	.-4      	; 0x919e <waves+0x69e>
    91a2:	f3 f3       	brvs	.-4      	; 0x91a0 <waves+0x6a0>
    91a4:	f3 f3       	brvs	.-4      	; 0x91a2 <waves+0x6a2>
    91a6:	f3 f3       	brvs	.-4      	; 0x91a4 <waves+0x6a4>
    91a8:	f3 f3       	brvs	.-4      	; 0x91a6 <waves+0x6a6>
    91aa:	f3 f3       	brvs	.-4      	; 0x91a8 <waves+0x6a8>
    91ac:	f3 f3       	brvs	.-4      	; 0x91aa <waves+0x6aa>
    91ae:	f3 f3       	brvs	.-4      	; 0x91ac <waves+0x6ac>
    91b0:	f3 f3       	brvs	.-4      	; 0x91ae <waves+0x6ae>
    91b2:	f3 f3       	brvs	.-4      	; 0x91b0 <waves+0x6b0>
    91b4:	f3 f3       	brvs	.-4      	; 0x91b2 <waves+0x6b2>
    91b6:	f3 f3       	brvs	.-4      	; 0x91b4 <waves+0x6b4>
    91b8:	f3 f3       	brvs	.-4      	; 0x91b6 <waves+0x6b6>
    91ba:	f3 f3       	brvs	.-4      	; 0x91b8 <waves+0x6b8>
    91bc:	f3 f3       	brvs	.-4      	; 0x91ba <waves+0x6ba>
    91be:	f3 f3       	brvs	.-4      	; 0x91bc <waves+0x6bc>
    91c0:	f3 f3       	brvs	.-4      	; 0x91be <waves+0x6be>
    91c2:	f3 f3       	brvs	.-4      	; 0x91c0 <waves+0x6c0>
    91c4:	f3 f3       	brvs	.-4      	; 0x91c2 <waves+0x6c2>
    91c6:	f3 f3       	brvs	.-4      	; 0x91c4 <waves+0x6c4>
    91c8:	f3 f3       	brvs	.-4      	; 0x91c6 <waves+0x6c6>
    91ca:	f3 f3       	brvs	.-4      	; 0x91c8 <waves+0x6c8>
    91cc:	f3 f3       	brvs	.-4      	; 0x91ca <waves+0x6ca>
    91ce:	f3 f3       	brvs	.-4      	; 0x91cc <waves+0x6cc>
    91d0:	f3 f3       	brvs	.-4      	; 0x91ce <waves+0x6ce>
    91d2:	f3 f3       	brvs	.-4      	; 0x91d0 <waves+0x6d0>
    91d4:	f3 f3       	brvs	.-4      	; 0x91d2 <waves+0x6d2>
    91d6:	f3 f3       	brvs	.-4      	; 0x91d4 <waves+0x6d4>
    91d8:	f3 f3       	brvs	.-4      	; 0x91d6 <waves+0x6d6>
    91da:	f3 f3       	brvs	.-4      	; 0x91d8 <waves+0x6d8>
    91dc:	f3 f3       	brvs	.-4      	; 0x91da <waves+0x6da>
    91de:	f3 f3       	brvs	.-4      	; 0x91dc <waves+0x6dc>
    91e0:	f2 f2       	brmi	.-68     	; 0x919e <waves+0x69e>
    91e2:	f2 f2       	brmi	.-68     	; 0x91a0 <waves+0x6a0>
    91e4:	f2 f2       	brmi	.-68     	; 0x91a2 <waves+0x6a2>
    91e6:	f2 f2       	brmi	.-68     	; 0x91a4 <waves+0x6a4>
    91e8:	f1 f1       	breq	.+124    	; 0x9266 <waves+0x766>
    91ea:	f1 f1       	breq	.+124    	; 0x9268 <waves+0x768>
    91ec:	f0 f0       	brcs	.+60     	; 0x922a <waves+0x72a>
    91ee:	f0 ef       	ldi	r31, 0xF0	; 240
    91f0:	ef ee       	ldi	r30, 0xEF	; 239
    91f2:	ed ec       	ldi	r30, 0xCD	; 205
    91f4:	eb ea       	ldi	r30, 0xAB	; 171
    91f6:	e9 e7       	ldi	r30, 0x79	; 121
    91f8:	e5 e3       	ldi	r30, 0x35	; 53
    91fa:	df db       	rcall	.-2114   	; 0x89ba <smw1+0x6>
    91fc:	d5 cc       	rjmp	.-1622   	; 0x8ba8 <waves+0xa8>
    91fe:	c6 00       	.word	0x00c6	; ????
    9200:	00 28       	or	r0, r0
    9202:	3d 42       	sbci	r19, 0x2D	; 45
    9204:	30 2d       	mov	r19, r0
    9206:	2c 2b       	or	r18, r28
    9208:	2c 2d       	mov	r18, r12
    920a:	2e 2f       	mov	r18, r30
    920c:	30 32       	cpi	r19, 0x20	; 32
    920e:	33 35       	cpi	r19, 0x53	; 83
    9210:	37 39       	cpi	r19, 0x97	; 151
    9212:	3b 3d       	cpi	r19, 0xDB	; 219
    9214:	3f 41       	sbci	r19, 0x1F	; 31
    9216:	43 45       	sbci	r20, 0x53	; 83
    9218:	48 4a       	sbci	r20, 0xA8	; 168
    921a:	4c 4e       	sbci	r20, 0xEC	; 236
    921c:	50 53       	subi	r21, 0x30	; 48
    921e:	55 57       	subi	r21, 0x75	; 117
    9220:	59 5b       	subi	r21, 0xB9	; 185
    9222:	5d 5f       	subi	r21, 0xFD	; 253
    9224:	61 63       	ori	r22, 0x31	; 49
    9226:	65 67       	ori	r22, 0x75	; 117
    9228:	69 6b       	ori	r22, 0xB9	; 185
    922a:	6c 6e       	ori	r22, 0xEC	; 236
    922c:	70 71       	andi	r23, 0x10	; 16
    922e:	73 74       	andi	r23, 0x43	; 67
    9230:	75 77       	andi	r23, 0x75	; 117
    9232:	78 79       	andi	r23, 0x98	; 152
    9234:	7a 7b       	andi	r23, 0xBA	; 186
    9236:	7c 7d       	andi	r23, 0xDC	; 220
    9238:	7d 7e       	andi	r23, 0xED	; 237
    923a:	7e 7f       	andi	r23, 0xFE	; 254
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7e 7e       	andi	r23, 0xEE	; 238
    9248:	7d 7d       	andi	r23, 0xDD	; 221
    924a:	7c 7b       	andi	r23, 0xBC	; 188
    924c:	7a 79       	andi	r23, 0x9A	; 154
    924e:	78 77       	andi	r23, 0x78	; 120
    9250:	75 74       	andi	r23, 0x45	; 69
    9252:	73 71       	andi	r23, 0x13	; 19
    9254:	70 6e       	ori	r23, 0xE0	; 224
    9256:	6c 6b       	ori	r22, 0xBC	; 188
    9258:	69 67       	ori	r22, 0x79	; 121
    925a:	65 63       	ori	r22, 0x35	; 53
    925c:	61 5f       	subi	r22, 0xF1	; 241
    925e:	5d 5b       	subi	r21, 0xBD	; 189
    9260:	59 57       	subi	r21, 0x79	; 121
    9262:	55 53       	subi	r21, 0x35	; 53
    9264:	50 4e       	sbci	r21, 0xE0	; 224
    9266:	4c 4a       	sbci	r20, 0xAC	; 172
    9268:	48 45       	sbci	r20, 0x58	; 88
    926a:	43 41       	sbci	r20, 0x13	; 19
    926c:	3f 3d       	cpi	r19, 0xDF	; 223
    926e:	3b 39       	cpi	r19, 0x9B	; 155
    9270:	37 35       	cpi	r19, 0x57	; 87
    9272:	33 32       	cpi	r19, 0x23	; 35
    9274:	30 2f       	mov	r19, r16
    9276:	2e 2d       	mov	r18, r14
    9278:	2c 2b       	or	r18, r28
    927a:	2c 2d       	mov	r18, r12
    927c:	30 42       	sbci	r19, 0x20	; 32
    927e:	3d 28       	or	r3, r13
    9280:	00 e9       	ldi	r16, 0x90	; 144
    9282:	e5 fe       	sbrs	r14, 5
    9284:	d4 d7       	rcall	.+4008   	; 0xa22e <init_player_shot+0x3f4>
    9286:	d7 d7       	rcall	.+4014   	; 0xa236 <init_player_shot+0x3fc>
    9288:	d6 d4       	rcall	.+2476   	; 0x9c36 <LBRandom+0x28>
    928a:	d2 d0       	rcall	.+420    	; 0x9430 <waves+0x930>
    928c:	ce cc       	rjmp	.-1636   	; 0x8c2a <waves+0x12a>
    928e:	ca c8       	rjmp	.-3692   	; 0x8424 <TriggerFx+0x18>
    9290:	c6 c3       	rjmp	.+1932   	; 0x9a1e <LBGetJoyPadState+0x46>
    9292:	c1 bf       	out	0x31, r28	; 49
    9294:	bd ba       	out	0x1d, r11	; 29
    9296:	b8 b6       	in	r11, 0x38	; 56
    9298:	b4 b1       	in	r27, 0x04	; 4
    929a:	af ad       	ldd	r26, Y+63	; 0x3f
    929c:	ab a9       	ldd	r26, Y+51	; 0x33
    929e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    92a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    92a2:	9f 9e       	mul	r9, r31
    92a4:	9c 9a       	sbi	0x13, 4	; 19
    92a6:	99 97       	sbiw	r26, 0x29	; 41
    92a8:	95 94       	asr	r9
    92aa:	93 91       	.word	0x9193	; ????
    92ac:	90 8f       	std	Z+24, r25	; 0x18
    92ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    92b0:	8b 8a       	std	Y+19, r8	; 0x13
    92b2:	89 88       	ldd	r8, Y+17	; 0x11
    92b4:	88 87       	std	Y+8, r24	; 0x08
    92b6:	86 85       	ldd	r24, Z+14	; 0x0e
    92b8:	85 84       	ldd	r8, Z+13	; 0x0d
    92ba:	84 84       	ldd	r8, Z+12	; 0x0c
    92bc:	83 83       	std	Z+3, r24	; 0x03
    92be:	83 83       	std	Z+3, r24	; 0x03
    92c0:	83 83       	std	Z+3, r24	; 0x03
    92c2:	83 83       	std	Z+3, r24	; 0x03
    92c4:	83 84       	ldd	r8, Z+11	; 0x0b
    92c6:	84 84       	ldd	r8, Z+12	; 0x0c
    92c8:	85 85       	ldd	r24, Z+13	; 0x0d
    92ca:	86 87       	std	Z+14, r24	; 0x0e
    92cc:	88 88       	ldd	r8, Y+16	; 0x10
    92ce:	89 8a       	std	Y+17, r8	; 0x11
    92d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    92d2:	8d 8f       	std	Y+29, r24	; 0x1d
    92d4:	90 91 93 94 	lds	r25, 0x9493
    92d8:	95 97       	sbiw	r26, 0x25	; 37
    92da:	99 9a       	sbi	0x13, 1	; 19
    92dc:	9c 9e       	mul	r9, r28
    92de:	9f a1       	ldd	r25, Y+39	; 0x27
    92e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    92e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    92e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    92e6:	af b1       	in	r26, 0x0f	; 15
    92e8:	b4 b6       	in	r11, 0x34	; 52
    92ea:	b8 ba       	out	0x18, r11	; 24
    92ec:	bd bf       	out	0x3d, r27	; 61
    92ee:	c1 c3       	rjmp	.+1922   	; 0x9a72 <LBPrintChar+0x4>
    92f0:	c6 c8       	rjmp	.-3700   	; 0x847e <TriggerFx+0x72>
    92f2:	ca cc       	rjmp	.-1644   	; 0x8c88 <waves+0x188>
    92f4:	ce d0       	rcall	.+412    	; 0x9492 <waves+0x992>
    92f6:	d2 d4       	rcall	.+2468   	; 0x9c9c <LBMapSprite+0x44>
    92f8:	d6 d7       	rcall	.+4012   	; 0xa2a6 <init_boss_shot+0x2e>
    92fa:	d7 d7       	rcall	.+4014   	; 0xa2aa <init_boss_shot+0x32>
    92fc:	d4 fe       	sbrs	r13, 4
    92fe:	e5 e9       	ldi	r30, 0x95	; 149
    9300:	f9 f8       	.word	0xf8f9	; ????
    9302:	f9 f5       	brne	.+126    	; 0x9382 <waves+0x882>
    9304:	eb e1       	ldi	r30, 0x1B	; 27
    9306:	dd de       	rcall	.-582    	; 0x90c2 <waves+0x5c2>
    9308:	e0 e2       	ldi	r30, 0x20	; 32
    930a:	e4 e5       	ldi	r30, 0x54	; 84
    930c:	e6 e5       	ldi	r30, 0x56	; 86
    930e:	e4 e2       	ldi	r30, 0x24	; 36
    9310:	de d9       	rcall	.-3140   	; 0x86ce <ProcessMusic+0x1b2>
    9312:	d2 ca       	rjmp	.-2652   	; 0x88b8 <ProcessMusic+0x39c>
    9314:	c1 b7       	in	r28, 0x31	; 49
    9316:	ac a2       	std	Y+36, r10	; 0x24
    9318:	99 91       	ld	r25, Y+
    931a:	8a 86       	std	Y+10, r8	; 0x0a
    931c:	83 81       	ldd	r24, Z+3	; 0x03
    931e:	80 80       	ld	r8, Z
    9320:	81 82       	std	Z+1, r8	; 0x01
    9322:	83 85       	ldd	r24, Z+11	; 0x0b
    9324:	86 88       	ldd	r8, Z+22	; 0x16
    9326:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9328:	8d 8f       	std	Y+29, r24	; 0x1d
    932a:	90 92 93 95 	sts	0x9593, r9
    932e:	96 97       	sbiw	r26, 0x26	; 38
    9330:	98 99       	sbic	0x13, 0	; 19
    9332:	9a 9b       	sbis	0x13, 2	; 19
    9334:	9b 9c       	mul	r9, r11
    9336:	9d 9d       	mul	r25, r13
    9338:	9d 9e       	mul	r9, r29
    933a:	9e 9e       	mul	r9, r30
    933c:	9f 9f       	mul	r25, r31
    933e:	9f 9f       	mul	r25, r31
    9340:	9f 9f       	mul	r25, r31
    9342:	9f 9e       	mul	r9, r31
    9344:	9e 9e       	mul	r9, r30
    9346:	9d 9d       	mul	r25, r13
    9348:	9d 9c       	mul	r9, r13
    934a:	9b 9b       	sbis	0x13, 3	; 19
    934c:	9a 99       	sbic	0x13, 2	; 19
    934e:	98 97       	sbiw	r26, 0x28	; 40
    9350:	96 95       	lsr	r25
    9352:	93 92       	.word	0x9293	; ????
    9354:	90 8f       	std	Z+24, r25	; 0x18
    9356:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9358:	8a 88       	ldd	r8, Y+18	; 0x12
    935a:	86 85       	ldd	r24, Z+14	; 0x0e
    935c:	83 82       	std	Z+3, r8	; 0x03
    935e:	81 80       	ldd	r8, Z+1	; 0x01
    9360:	80 81       	ld	r24, Z
    9362:	83 86       	std	Z+11, r8	; 0x0b
    9364:	8a 91       	ld	r24, -Y
    9366:	99 a2       	std	Y+33, r9	; 0x21
    9368:	ac b7       	in	r26, 0x3c	; 60
    936a:	c1 ca       	rjmp	.-2686   	; 0x88ee <ProcessMusic+0x3d2>
    936c:	d2 d9       	rcall	.-3164   	; 0x8712 <ProcessMusic+0x1f6>
    936e:	de e2       	ldi	r29, 0x2E	; 46
    9370:	e4 e5       	ldi	r30, 0x54	; 84
    9372:	e6 e5       	ldi	r30, 0x56	; 86
    9374:	e4 e2       	ldi	r30, 0x24	; 36
    9376:	e0 de       	rcall	.-576    	; 0x9138 <waves+0x638>
    9378:	dd e1       	ldi	r29, 0x1D	; 29
    937a:	eb f5       	brvc	.+122    	; 0x93f6 <waves+0x8f6>
    937c:	f9 f8       	.word	0xf8f9	; ????
    937e:	f9 00       	.word	0x00f9	; ????
    9380:	07 08       	sbc	r0, r7
    9382:	07 0b       	sbc	r16, r23
    9384:	15 1f       	adc	r17, r21
    9386:	23 22       	and	r2, r19
    9388:	20 1e       	adc	r2, r16
    938a:	1c 1b       	sub	r17, r28
    938c:	1a 1b       	sub	r17, r26
    938e:	1c 1e       	adc	r1, r28
    9390:	22 27       	eor	r18, r18
    9392:	2e 36       	cpi	r18, 0x6E	; 110
    9394:	3f 49       	sbci	r19, 0x9F	; 159
    9396:	54 5e       	subi	r21, 0xE4	; 228
    9398:	67 6f       	ori	r22, 0xF7	; 247
    939a:	76 7a       	andi	r23, 0xA6	; 166
    939c:	7e 7f       	andi	r23, 0xFE	; 254
    939e:	7f 7f       	andi	r23, 0xFF	; 255
    93a0:	7f 7e       	andi	r23, 0xEF	; 239
    93a2:	7d 7b       	andi	r23, 0xBD	; 189
    93a4:	7a 78       	andi	r23, 0x8A	; 138
    93a6:	76 74       	andi	r23, 0x46	; 70
    93a8:	73 71       	andi	r23, 0x13	; 19
    93aa:	70 6e       	ori	r23, 0xE0	; 224
    93ac:	6d 6b       	ori	r22, 0xBD	; 189
    93ae:	6a 69       	ori	r22, 0x9A	; 154
    93b0:	68 67       	ori	r22, 0x78	; 120
    93b2:	66 65       	ori	r22, 0x56	; 86
    93b4:	65 64       	ori	r22, 0x45	; 69
    93b6:	64 63       	ori	r22, 0x34	; 52
    93b8:	63 62       	ori	r22, 0x23	; 35
    93ba:	62 62       	ori	r22, 0x22	; 34
    93bc:	61 61       	ori	r22, 0x11	; 17
    93be:	61 61       	ori	r22, 0x11	; 17
    93c0:	61 61       	ori	r22, 0x11	; 17
    93c2:	61 62       	ori	r22, 0x21	; 33
    93c4:	62 62       	ori	r22, 0x22	; 34
    93c6:	63 63       	ori	r22, 0x33	; 51
    93c8:	63 64       	ori	r22, 0x43	; 67
    93ca:	65 65       	ori	r22, 0x55	; 85
    93cc:	66 67       	ori	r22, 0x76	; 118
    93ce:	68 69       	ori	r22, 0x98	; 152
    93d0:	6a 6b       	ori	r22, 0xBA	; 186
    93d2:	6d 6e       	ori	r22, 0xED	; 237
    93d4:	70 71       	andi	r23, 0x10	; 16
    93d6:	73 74       	andi	r23, 0x43	; 67
    93d8:	76 78       	andi	r23, 0x86	; 134
    93da:	7a 7b       	andi	r23, 0xBA	; 186
    93dc:	7d 7e       	andi	r23, 0xED	; 237
    93de:	7f 7f       	andi	r23, 0xFF	; 255
    93e0:	7f 7f       	andi	r23, 0xFF	; 255
    93e2:	7e 7a       	andi	r23, 0xAE	; 174
    93e4:	76 6f       	ori	r23, 0xF6	; 246
    93e6:	67 5e       	subi	r22, 0xE7	; 231
    93e8:	54 49       	sbci	r21, 0x94	; 148
    93ea:	3f 36       	cpi	r19, 0x6F	; 111
    93ec:	2e 27       	eor	r18, r30
    93ee:	22 1e       	adc	r2, r18
    93f0:	1c 1b       	sub	r17, r28
    93f2:	1a 1b       	sub	r17, r26
    93f4:	1c 1e       	adc	r1, r28
    93f6:	20 22       	and	r2, r16
    93f8:	23 1f       	adc	r18, r19
    93fa:	15 0b       	sbc	r17, r21
    93fc:	07 08       	sbc	r0, r7
    93fe:	07 00       	.word	0x0007	; ????
    9400:	1f 31       	cpi	r17, 0x1F	; 31
    9402:	3d 44       	sbci	r19, 0x4D	; 77
    9404:	4e 53       	subi	r20, 0x3E	; 62
    9406:	54 56       	subi	r21, 0x64	; 100
    9408:	5a 5f       	subi	r21, 0xFA	; 250
    940a:	64 69       	ori	r22, 0x94	; 148
    940c:	6e 74       	andi	r22, 0x4E	; 78
    940e:	76 79       	andi	r23, 0x96	; 150
    9410:	7c 7f       	andi	r23, 0xFC	; 252
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7c       	andi	r23, 0xCF	; 207
    947c:	78 71       	andi	r23, 0x18	; 24
    947e:	68 4c       	sbci	r22, 0xC8	; 200
    9480:	2c 1c       	adc	r2, r12
    9482:	12 0c       	add	r1, r2
    9484:	0a 0b       	sbc	r16, r26
    9486:	0a 05       	cpc	r16, r10
    9488:	fd f3       	brhs	.-2      	; 0x9488 <waves+0x988>
    948a:	e9 df       	rcall	.-46     	; 0x945e <waves+0x95e>
    948c:	d4 ca       	rjmp	.-2648   	; 0x8a36 <steptable+0x68>
    948e:	c0 b7       	in	r28, 0x30	; 48
    9490:	ae a6       	std	Y+46, r10	; 0x2e
    9492:	9e 97       	sbiw	r26, 0x2e	; 46
    9494:	91 8b       	std	Z+17, r25	; 0x11
    9496:	86 85       	ldd	r24, Z+14	; 0x0e
    9498:	82 80       	ldd	r8, Z+2	; 0x02
    949a:	80 80       	ld	r8, Z
    949c:	80 80       	ld	r8, Z
    949e:	80 80       	ld	r8, Z
    94a0:	80 80       	ld	r8, Z
    94a2:	80 80       	ld	r8, Z
    94a4:	80 80       	ld	r8, Z
    94a6:	80 80       	ld	r8, Z
    94a8:	80 80       	ld	r8, Z
    94aa:	80 80       	ld	r8, Z
    94ac:	80 80       	ld	r8, Z
    94ae:	80 80       	ld	r8, Z
    94b0:	80 80       	ld	r8, Z
    94b2:	80 80       	ld	r8, Z
    94b4:	80 80       	ld	r8, Z
    94b6:	80 80       	ld	r8, Z
    94b8:	80 80       	ld	r8, Z
    94ba:	80 80       	ld	r8, Z
    94bc:	80 80       	ld	r8, Z
    94be:	80 80       	ld	r8, Z
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 87       	std	Z+8, r24	; 0x08
    94f6:	91 9d       	mul	r25, r1
    94f8:	ac c4       	rjmp	.+2392   	; 0x9e52 <init_player_shot+0x18>
    94fa:	cb d4       	rcall	.+2454   	; 0x9e92 <init_player_shot+0x58>
    94fc:	dd f2       	brhs	.-74     	; 0x94b4 <waves+0x9b4>
    94fe:	fa fa       	.word	0xfafa	; ????

00009500 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    9500:	2f 92       	push	r2
    9502:	3f 92       	push	r3
    9504:	4f 92       	push	r4
    9506:	5f 92       	push	r5
    9508:	6f 92       	push	r6
    950a:	7f 92       	push	r7
    950c:	8f 92       	push	r8
    950e:	9f 92       	push	r9
    9510:	af 92       	push	r10
    9512:	bf 92       	push	r11
    9514:	cf 92       	push	r12
    9516:	df 92       	push	r13
    9518:	ef 92       	push	r14
    951a:	ff 92       	push	r15
    951c:	0f 93       	push	r16
    951e:	1f 93       	push	r17
    9520:	cf 93       	push	r28
    9522:	df 93       	push	r29
    9524:	cd b7       	in	r28, 0x3d	; 61
    9526:	de b7       	in	r29, 0x3e	; 62
    9528:	27 97       	sbiw	r28, 0x07	; 7
    952a:	0f b6       	in	r0, 0x3f	; 63
    952c:	f8 94       	cli
    952e:	de bf       	out	0x3e, r29	; 62
    9530:	0f be       	out	0x3f, r0	; 63
    9532:	cd bf       	out	0x3d, r28	; 61

	u8 i;

	if (!sprites_on){ return; }
    9534:	80 91 00 05 	lds	r24, 0x0500
    9538:	88 23       	and	r24, r24
    953a:	09 f4       	brne	.+2      	; 0x953e <ProcessSprites+0x3e>
    953c:	00 c1       	rjmp	.+512    	; 0x973e <ProcessSprites+0x23e>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    953e:	80 91 a6 0c 	lds	r24, 0x0CA6
    9542:	80 93 a5 0c 	sts	0x0CA5, r24
	free_tile_index = user_ram_tiles_c;
    9546:	80 93 a4 0c 	sts	0x0CA4, r24
    954a:	a1 2c       	mov	r10, r1
    954c:	b1 2c       	mov	r11, r1
    954e:	f5 01       	movw	r30, r10
    9550:	e0 5f       	subi	r30, 0xF0	; 240
    9552:	fa 4f       	sbci	r31, 0xFA	; 250

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    9554:	a1 81       	ldd	r26, Z+1	; 0x01
    9556:	40 81       	ld	r20, Z
    9558:	52 81       	ldd	r21, Z+2	; 0x02
    955a:	e3 81       	ldd	r30, Z+3	; 0x03
	u8  ssy;
	#endif

	/* if sprite is off, then don't draw it */

	if ((flags & SPRITE_OFF) != 0U){ return; }
    955c:	e2 ff       	sbrs	r30, 2
    955e:	21 c0       	rjmp	.+66     	; 0x95a2 <ProcessSprites+0xa2>
    9560:	24 e0       	ldi	r18, 0x04	; 4
    9562:	a2 0e       	add	r10, r18
    9564:	b1 1c       	adc	r11, r1
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9566:	30 e4       	ldi	r19, 0x40	; 64
    9568:	a3 16       	cp	r10, r19
    956a:	b1 04       	cpc	r11, r1
    956c:	81 f7       	brne	.-32     	; 0x954e <ProcessSprites+0x4e>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    956e:	27 96       	adiw	r28, 0x07	; 7
    9570:	0f b6       	in	r0, 0x3f	; 63
    9572:	f8 94       	cli
    9574:	de bf       	out	0x3e, r29	; 62
    9576:	0f be       	out	0x3f, r0	; 63
    9578:	cd bf       	out	0x3d, r28	; 61
    957a:	df 91       	pop	r29
    957c:	cf 91       	pop	r28
    957e:	1f 91       	pop	r17
    9580:	0f 91       	pop	r16
    9582:	ff 90       	pop	r15
    9584:	ef 90       	pop	r14
    9586:	df 90       	pop	r13
    9588:	cf 90       	pop	r12
    958a:	bf 90       	pop	r11
    958c:	af 90       	pop	r10
    958e:	9f 90       	pop	r9
    9590:	8f 90       	pop	r8
    9592:	7f 90       	pop	r7
    9594:	6f 90       	pop	r6
    9596:	5f 90       	pop	r5
    9598:	4f 90       	pop	r4
    959a:	3f 90       	pop	r3
    959c:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    959e:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <RestoreBackground>
	if ((flags & SPRITE_OFF) != 0U){ return; }

	/* get tile's screen section offsets */

	#if (SCROLLING != 0)
	ssx = xpos + Screen.scrollX;
    95a2:	20 91 b5 0c 	lds	r18, 0x0CB5
    95a6:	24 0f       	add	r18, r20
	ssy = ypos + Screen.scrollY;
    95a8:	80 91 b6 0c 	lds	r24, 0x0CB6
    95ac:	90 e0       	ldi	r25, 0x00	; 0
    95ae:	8a 0f       	add	r24, r26
    95b0:	91 1d       	adc	r25, r1
	if (ypos > (u8)((Screen.scrollHeight << 3) - 1U)){
    95b2:	30 91 b7 0c 	lds	r19, 0x0CB7
    95b6:	33 0f       	add	r19, r19
    95b8:	33 0f       	add	r19, r19
    95ba:	33 0f       	add	r19, r19
    95bc:	31 50       	subi	r19, 0x01	; 1
    95be:	3a 17       	cp	r19, r26
    95c0:	08 f4       	brcc	.+2      	; 0x95c4 <ProcessSprites+0xc4>
		ssy += 0xFF00U; /* Sprite should clip on top */
    95c2:	9a 95       	dec	r25
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if ((SCROLLING == 0) && (SCREEN_TILES_H < 32))
	bx = ((u8)((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
	#else
	bx = ssx / TILE_WIDTH;
    95c4:	32 2e       	mov	r3, r18
    95c6:	36 94       	lsr	r3
    95c8:	36 94       	lsr	r3
    95ca:	36 94       	lsr	r3
	#endif
	dx = ssx % TILE_WIDTH;
    95cc:	27 70       	andi	r18, 0x07	; 7
	if (dx != 0U){ tx++; }
    95ce:	19 f0       	breq	.+6      	; 0x95d6 <ProcessSprites+0xd6>
    95d0:	62 e0       	ldi	r22, 0x02	; 2
    95d2:	69 83       	std	Y+1, r22	; 0x01
    95d4:	02 c0       	rjmp	.+4      	; 0x95da <ProcessSprites+0xda>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    95d6:	71 e0       	ldi	r23, 0x01	; 1
    95d8:	79 83       	std	Y+1, r23	; 0x01
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = ((u8)((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
	#else
	by = ssy / TILE_HEIGHT;
    95da:	bc 01       	movw	r22, r24
    95dc:	13 e0       	ldi	r17, 0x03	; 3
    95de:	76 95       	lsr	r23
    95e0:	67 95       	ror	r22
    95e2:	1a 95       	dec	r17
    95e4:	e1 f7       	brne	.-8      	; 0x95de <ProcessSprites+0xde>
    95e6:	26 2e       	mov	r2, r22
	#endif
	dy = ssy % TILE_HEIGHT;
    95e8:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    95ea:	11 f0       	breq	.+4      	; 0x95f0 <ProcessSprites+0xf0>
    95ec:	92 e0       	ldi	r25, 0x02	; 2
    95ee:	01 c0       	rjmp	.+2      	; 0x95f2 <ProcessSprites+0xf2>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    95f0:	91 e0       	ldi	r25, 0x01	; 1
    95f2:	9a 83       	std	Y+2, r25	; 0x02
					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
						               ((u16)(flags) << 8) + sprindex,
						               ((u16)(y)     << 8) + x,
						               ((u16)(dy)    << 8) + dx);
    95f4:	68 2e       	mov	r6, r24
    95f6:	71 2c       	mov	r7, r1
    95f8:	76 2c       	mov	r7, r6
    95fa:	66 24       	eor	r6, r6

					}

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    95fc:	62 0e       	add	r6, r18
    95fe:	71 1c       	adc	r7, r1
						               ((u16)(flags) << 8) + sprindex,
    9600:	f0 e0       	ldi	r31, 0x00	; 0
    9602:	fe 2f       	mov	r31, r30
    9604:	ee 27       	eor	r30, r30

					}

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    9606:	bf 01       	movw	r22, r30
    9608:	65 0f       	add	r22, r21
    960a:	71 1d       	adc	r23, r1
    960c:	7c 83       	std	Y+4, r23	; 0x04
    960e:	6b 83       	std	Y+3, r22	; 0x03
    9610:	e1 2c       	mov	r14, r1
    9612:	f1 2c       	mov	r15, r1
    9614:	97 e0       	ldi	r25, 0x07	; 7
    9616:	9a 0f       	add	r25, r26
    9618:	59 2e       	mov	r5, r25
    961a:	58 1a       	sub	r5, r24
    961c:	49 5f       	subi	r20, 0xF9	; 249
    961e:	44 2e       	mov	r4, r20
    9620:	42 1a       	sub	r4, r18
    9622:	8e 2d       	mov	r24, r14

		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
    9624:	90 91 b7 0c 	lds	r25, 0x0CB7
    9628:	91 11       	cpse	r25, r1
    962a:	07 c0       	rjmp	.+14     	; 0x963a <ProcessSprites+0x13a>
    962c:	7f ef       	ldi	r23, 0xFF	; 255
    962e:	e7 1a       	sub	r14, r23
    9630:	f7 0a       	sbc	r15, r23
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    9632:	9a 81       	ldd	r25, Y+2	; 0x02
    9634:	e9 16       	cp	r14, r25
    9636:	a8 f3       	brcs	.-22     	; 0x9622 <ProcessSprites+0x122>
    9638:	93 cf       	rjmp	.-218    	; 0x9560 <ProcessSprites+0x60>
		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
		     ((u8)((ypos + 7U + (y << 3) - dy) & 0xFFU) < (u8)((Screen.scrollHeight << 3) - 1U)) ){
    963a:	29 2f       	mov	r18, r25
    963c:	22 0f       	add	r18, r18
    963e:	22 0f       	add	r18, r18
    9640:	22 0f       	add	r18, r18
    9642:	21 50       	subi	r18, 0x01	; 1

		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
    9644:	35 2d       	mov	r19, r5
    9646:	e8 e0       	ldi	r30, 0x08	; 8
    9648:	ee 9e       	mul	r14, r30
    964a:	30 0d       	add	r19, r0
    964c:	11 24       	eor	r1, r1
    964e:	32 17       	cp	r19, r18
    9650:	68 f7       	brcc	.-38     	; 0x962c <ProcessSprites+0x12c>
    9652:	82 0d       	add	r24, r2
		     ((u8)((ypos + 7U + (y << 3) - dy) & 0xFFU) < (u8)((Screen.scrollHeight << 3) - 1U)) ){

			while (wy >= Screen.scrollHeight){
    9654:	89 17       	cp	r24, r25
    9656:	10 f0       	brcs	.+4      	; 0x965c <ProcessSprites+0x15c>
				wy -= Screen.scrollHeight;
    9658:	89 1b       	sub	r24, r25
    965a:	fc cf       	rjmp	.-8      	; 0x9654 <ProcessSprites+0x154>

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    965c:	08 2f       	mov	r16, r24
    965e:	06 95       	lsr	r16
    9660:	06 95       	lsr	r16
    9662:	06 95       	lsr	r16
    9664:	10 e0       	ldi	r17, 0x00	; 0
    9666:	10 2f       	mov	r17, r16
    9668:	00 27       	eor	r16, r16
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
    966a:	87 70       	andi	r24, 0x07	; 7
    966c:	08 0f       	add	r16, r24
    966e:	11 1d       	adc	r17, r1

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
						               ((u16)(flags) << 8) + sprindex,
						               ((u16)(y)     << 8) + x,
    9670:	9e 2c       	mov	r9, r14
    9672:	88 24       	eor	r8, r8
    9674:	c1 2c       	mov	r12, r1
    9676:	d1 2c       	mov	r13, r1
				#if (SCROLLING == 0)
				if (wx < VRAM_TILES_H){
				#else
				wx = wx % VRAM_TILES_H;
				#if (SCREEN_TILES_H < 32U)
				if ((u8)((xpos + 7U + (x << 3) - dx) & 0xFFU) < (((SCREEN_TILES_H + 1U) << 3) - 1U)){
    9678:	84 2d       	mov	r24, r4
    967a:	f8 e0       	ldi	r31, 0x08	; 8
    967c:	cf 9e       	mul	r12, r31
    967e:	80 0d       	add	r24, r0
    9680:	11 24       	eor	r1, r1
    9682:	87 3e       	cpi	r24, 0xE7	; 231
    9684:	08 f0       	brcs	.+2      	; 0x9688 <ProcessSprites+0x188>
    9686:	53 c0       	rjmp	.+166    	; 0x972e <ProcessSprites+0x22e>
    9688:	83 2d       	mov	r24, r3
    968a:	8c 0d       	add	r24, r12
					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
    968c:	88 0f       	add	r24, r24
    968e:	88 0f       	add	r24, r24
    9690:	88 0f       	add	r24, r24

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    9692:	98 01       	movw	r18, r16
    9694:	28 0f       	add	r18, r24
    9696:	31 1d       	adc	r19, r1
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
					#endif

					bt = vram[ramPtr];
    9698:	20 50       	subi	r18, 0x00	; 0
    969a:	3f 4f       	sbci	r19, 0xFF	; 255
    969c:	3f 83       	std	Y+7, r19	; 0x07
    969e:	2e 83       	std	Y+6, r18	; 0x06
    96a0:	f9 01       	movw	r30, r18
    96a2:	90 81       	ld	r25, Z

					if ( ( (bt >= RAM_TILES_COUNT) |
    96a4:	81 e0       	ldi	r24, 0x01	; 1
    96a6:	9c 31       	cpi	r25, 0x1C	; 28
    96a8:	08 f4       	brcc	.+2      	; 0x96ac <ProcessSprites+0x1ac>
    96aa:	80 e0       	ldi	r24, 0x00	; 0
    96ac:	21 e0       	ldi	r18, 0x01	; 1
    96ae:	30 91 a5 0c 	lds	r19, 0x0CA5
    96b2:	93 17       	cp	r25, r19
    96b4:	18 f0       	brcs	.+6      	; 0x96bc <ProcessSprites+0x1bc>
    96b6:	20 e0       	ldi	r18, 0x00	; 0
    96b8:	88 23       	and	r24, r24
    96ba:	61 f1       	breq	.+88     	; 0x9714 <ProcessSprites+0x214>
					       (bt < user_ram_tiles_c)) &&
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    96bc:	60 91 a4 0c 	lds	r22, 0x0CA4
					#endif

					bt = vram[ramPtr];

					if ( ( (bt >= RAM_TILES_COUNT) |
					       (bt < user_ram_tiles_c)) &&
    96c0:	6c 31       	cpi	r22, 0x1C	; 28
    96c2:	30 f5       	brcc	.+76     	; 0x9710 <ProcessSprites+0x210>
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

						if (bt >= RAM_TILES_COUNT){
    96c4:	88 23       	and	r24, r24
    96c6:	31 f0       	breq	.+12     	; 0x96d4 <ProcessSprites+0x1d4>
							/* tile is mapped to flash. Copy it to next free RAM tile. */
							CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    96c8:	84 ee       	ldi	r24, 0xE4	; 228
    96ca:	89 0f       	add	r24, r25
    96cc:	9d 83       	std	Y+5, r25	; 0x05
    96ce:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <CopyFlashTile>
    96d2:	06 c0       	rjmp	.+12     	; 0x96e0 <ProcessSprites+0x1e0>
						}else if (bt < user_ram_tiles_c){
    96d4:	22 23       	and	r18, r18
    96d6:	29 f0       	breq	.+10     	; 0x96e2 <ProcessSprites+0x1e2>
							/* tile is a user ram tile. Copy it to next free RAM tile. */
							CopyRamTile(bt, free_tile_index);
    96d8:	89 2f       	mov	r24, r25
    96da:	9d 83       	std	Y+5, r25	; 0x05
    96dc:	0e 94 76 3b 	call	0x76ec	; 0x76ec <CopyRamTile>
    96e0:	9d 81       	ldd	r25, Y+5	; 0x05
						}
						#if (RTLIST_ENABLE != 0)
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    96e2:	80 91 a4 0c 	lds	r24, 0x0CA4
    96e6:	e8 2f       	mov	r30, r24
    96e8:	f0 e0       	ldi	r31, 0x00	; 0
    96ea:	9f 01       	movw	r18, r30
    96ec:	22 0f       	add	r18, r18
    96ee:	33 1f       	adc	r19, r19
    96f0:	e2 0f       	add	r30, r18
    96f2:	f3 1f       	adc	r31, r19
    96f4:	e0 5b       	subi	r30, 0xB0	; 176
    96f6:	f3 4f       	sbci	r31, 0xF3	; 243
    96f8:	2e 81       	ldd	r18, Y+6	; 0x06
    96fa:	3f 81       	ldd	r19, Y+7	; 0x07
    96fc:	31 83       	std	Z+1, r19	; 0x01
    96fe:	20 83       	st	Z, r18
						ram_tiles_restore[free_tile_index].tileIndex = bt;
    9700:	92 83       	std	Z+2, r25	; 0x02
						#endif
						vram[ramPtr] = free_tile_index;
    9702:	f9 01       	movw	r30, r18
    9704:	80 83       	st	Z, r24
						bt = free_tile_index;
						free_tile_index++;
    9706:	91 e0       	ldi	r25, 0x01	; 1
    9708:	98 0f       	add	r25, r24
    970a:	90 93 a4 0c 	sts	0x0CA4, r25
						#if (RTLIST_ENABLE != 0)
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
						ram_tiles_restore[free_tile_index].tileIndex = bt;
						#endif
						vram[ramPtr] = free_tile_index;
						bt = free_tile_index;
    970e:	98 2f       	mov	r25, r24
						free_tile_index++;

					}

					if ( (bt < RAM_TILES_COUNT) &&
    9710:	9c 31       	cpi	r25, 0x1C	; 28
    9712:	68 f4       	brcc	.+26     	; 0x972e <ProcessSprites+0x22e>
    9714:	80 91 a5 0c 	lds	r24, 0x0CA5
    9718:	98 17       	cp	r25, r24
    971a:	48 f0       	brcs	.+18     	; 0x972e <ProcessSprites+0x22e>
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    971c:	93 01       	movw	r18, r6
    971e:	a6 01       	movw	r20, r12
    9720:	48 0d       	add	r20, r8
    9722:	59 1d       	adc	r21, r9
    9724:	6b 81       	ldd	r22, Y+3	; 0x03
    9726:	7c 81       	ldd	r23, Y+4	; 0x04
    9728:	89 2f       	mov	r24, r25
    972a:	0e 94 16 3c 	call	0x782c	; 0x782c <BlitSpritePart>
    972e:	ff ef       	ldi	r31, 0xFF	; 255
    9730:	cf 1a       	sub	r12, r31
    9732:	df 0a       	sbc	r13, r31
			while (wy >= Screen.scrollHeight){
				wy -= Screen.scrollHeight;
			}
		#endif

			for (x = 0U; x < tx; x++){
    9734:	99 81       	ldd	r25, Y+1	; 0x01
    9736:	c9 16       	cp	r12, r25
    9738:	08 f4       	brcc	.+2      	; 0x973c <ProcessSprites+0x23c>
    973a:	9e cf       	rjmp	.-196    	; 0x9678 <ProcessSprites+0x178>
    973c:	77 cf       	rjmp	.-274    	; 0x962c <ProcessSprites+0x12c>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    973e:	27 96       	adiw	r28, 0x07	; 7
    9740:	0f b6       	in	r0, 0x3f	; 63
    9742:	f8 94       	cli
    9744:	de bf       	out	0x3e, r29	; 62
    9746:	0f be       	out	0x3f, r0	; 63
    9748:	cd bf       	out	0x3d, r28	; 61
    974a:	df 91       	pop	r29
    974c:	cf 91       	pop	r28
    974e:	1f 91       	pop	r17
    9750:	0f 91       	pop	r16
    9752:	ff 90       	pop	r15
    9754:	ef 90       	pop	r14
    9756:	df 90       	pop	r13
    9758:	cf 90       	pop	r12
    975a:	bf 90       	pop	r11
    975c:	af 90       	pop	r10
    975e:	9f 90       	pop	r9
    9760:	8f 90       	pop	r8
    9762:	7f 90       	pop	r7
    9764:	6f 90       	pop	r6
    9766:	5f 90       	pop	r5
    9768:	4f 90       	pop	r4
    976a:	3f 90       	pop	r3
    976c:	2f 90       	pop	r2
    976e:	08 95       	ret

00009770 <Scroll>:
*/
void Scroll(char dx, char dy){

	/* Handles case with TILE_HEIGHT = 8 and scrollHeight = 32 correctly
	** (this will be zero, so zero will add / subtract) */
	u8 scmax = (u8)(Screen.scrollHeight * TILE_HEIGHT);
    9770:	20 91 b7 0c 	lds	r18, 0x0CB7
    9774:	22 0f       	add	r18, r18
    9776:	22 0f       	add	r18, r18
    9778:	22 0f       	add	r18, r18

	Screen.scrollY += (u8)(dy);
    977a:	90 91 b6 0c 	lds	r25, 0x0CB6
    977e:	96 0f       	add	r25, r22
    9780:	90 93 b6 0c 	sts	0x0CB6, r25
	Screen.scrollX += (u8)(dx);
    9784:	30 91 b5 0c 	lds	r19, 0x0CB5
    9788:	83 0f       	add	r24, r19
    978a:	80 93 b5 0c 	sts	0x0CB5, r24

	if (Screen.scrollY >= scmax){
    978e:	92 17       	cp	r25, r18
    9790:	38 f0       	brcs	.+14     	; 0x97a0 <Scroll+0x30>
		if((s8)(dy) >= 0){
    9792:	67 fd       	sbrc	r22, 7
    9794:	02 c0       	rjmp	.+4      	; 0x979a <Scroll+0x2a>
			Screen.scrollY -= scmax;
    9796:	92 1b       	sub	r25, r18
    9798:	01 c0       	rjmp	.+2      	; 0x979c <Scroll+0x2c>
		}else{
			Screen.scrollY += scmax;
    979a:	92 0f       	add	r25, r18
    979c:	90 93 b6 0c 	sts	0x0CB6, r25
    97a0:	08 95       	ret

000097a2 <DisplayLogo>:


/*
** Callback invoked by UzeboxCore.Initialize()
*/
void DisplayLogo(){
    97a2:	08 95       	ret

000097a4 <InitializeVideoMode>:


/*
** Callback invoked by UzeboxCore.Initialize()
*/
void InitializeVideoMode(){
    97a4:	80 e0       	ldi	r24, 0x00	; 0
    97a6:	90 e0       	ldi	r25, 0x00	; 0

	/* Disable sprites */

	#if (SPRITES_AUTO_PROCESS != 0)
	for(i = 0U; i < MAX_SPRITES; i++){
		sprites[i].x = (SCREEN_TILES_H * TILE_WIDTH);
    97a8:	20 ee       	ldi	r18, 0xE0	; 224
    97aa:	fc 01       	movw	r30, r24
    97ac:	e0 5f       	subi	r30, 0xF0	; 240
    97ae:	fa 4f       	sbci	r31, 0xFA	; 250
    97b0:	20 83       	st	Z, r18
		sprites[i].y = (SCREEN_TILES_V * TILE_HEIGHT);
    97b2:	21 83       	std	Z+1, r18	; 0x01
    97b4:	04 96       	adiw	r24, 0x04	; 4
	u8 i;

	/* Disable sprites */

	#if (SPRITES_AUTO_PROCESS != 0)
	for(i = 0U; i < MAX_SPRITES; i++){
    97b6:	80 34       	cpi	r24, 0x40	; 64
    97b8:	91 05       	cpc	r25, r1
    97ba:	b9 f7       	brne	.-18     	; 0x97aa <InitializeVideoMode+0x6>
		sprites[i].y = (SCREEN_TILES_V * TILE_HEIGHT);
	}
	#endif

	#if (SCROLLING == 1)
	Screen.scrollHeight  = VRAM_TILES_V;
    97bc:	80 e2       	ldi	r24, 0x20	; 32
    97be:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0U;
    97c2:	10 92 b2 0c 	sts	0x0CB2, r1
	#endif

	free_tile_index      = 0U;
    97c6:	10 92 a4 0c 	sts	0x0CA4, r1
	user_ram_tiles_c_tmp = 0U;
    97ca:	10 92 a6 0c 	sts	0x0CA6, r1
    97ce:	08 95       	ret

000097d0 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    97d0:	4f 92       	push	r4
    97d2:	5f 92       	push	r5
    97d4:	6f 92       	push	r6
    97d6:	7f 92       	push	r7
    97d8:	8f 92       	push	r8
    97da:	9f 92       	push	r9
    97dc:	af 92       	push	r10
    97de:	bf 92       	push	r11
    97e0:	cf 92       	push	r12
    97e2:	df 92       	push	r13
    97e4:	ef 92       	push	r14
    97e6:	ff 92       	push	r15
    97e8:	0f 93       	push	r16
    97ea:	1f 93       	push	r17
    97ec:	cf 93       	push	r28
    97ee:	df 93       	push	r29
    97f0:	68 2e       	mov	r6, r24
    97f2:	56 2e       	mov	r5, r22
    97f4:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    97f6:	fa 01       	movw	r30, r20
    97f8:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    97fa:	31 96       	adiw	r30, 0x01	; 1
    97fc:	84 90       	lpm	r8, Z
    97fe:	c7 2c       	mov	r12, r7
    9800:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9802:	00 e0       	ldi	r16, 0x00	; 0
    9804:	10 e0       	ldi	r17, 0x00	; 0
    9806:	91 2c       	mov	r9, r1
    9808:	98 14       	cp	r9, r8
    980a:	f1 f0       	breq	.+60     	; 0x9848 <DrawMap+0x78>
    980c:	c0 e0       	ldi	r28, 0x00	; 0
    980e:	d0 e0       	ldi	r29, 0x00	; 0
    9810:	58 01       	movw	r10, r16
    9812:	f2 e0       	ldi	r31, 0x02	; 2
    9814:	af 0e       	add	r10, r31
    9816:	b1 1c       	adc	r11, r1
    9818:	49 2c       	mov	r4, r9
    981a:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    981c:	c7 15       	cp	r28, r7
    981e:	80 f4       	brcc	.+32     	; 0x9840 <DrawMap+0x70>
    9820:	95 01       	movw	r18, r10
    9822:	2c 0f       	add	r18, r28
    9824:	3d 1f       	adc	r19, r29
    9826:	f7 01       	movw	r30, r14
    9828:	e2 0f       	add	r30, r18
    982a:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    982c:	24 91       	lpm	r18, Z
    982e:	42 2f       	mov	r20, r18
    9830:	50 e0       	ldi	r21, 0x00	; 0
    9832:	64 2d       	mov	r22, r4
    9834:	8c 2f       	mov	r24, r28
    9836:	86 0d       	add	r24, r6
    9838:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <SetTile>
    983c:	21 96       	adiw	r28, 0x01	; 1
    983e:	ee cf       	rjmp	.-36     	; 0x981c <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9840:	93 94       	inc	r9
    9842:	0c 0d       	add	r16, r12
    9844:	1d 1d       	adc	r17, r13
    9846:	e0 cf       	rjmp	.-64     	; 0x9808 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9848:	df 91       	pop	r29
    984a:	cf 91       	pop	r28
    984c:	1f 91       	pop	r17
    984e:	0f 91       	pop	r16
    9850:	ff 90       	pop	r15
    9852:	ef 90       	pop	r14
    9854:	df 90       	pop	r13
    9856:	cf 90       	pop	r12
    9858:	bf 90       	pop	r11
    985a:	af 90       	pop	r10
    985c:	9f 90       	pop	r9
    985e:	8f 90       	pop	r8
    9860:	7f 90       	pop	r7
    9862:	6f 90       	pop	r6
    9864:	5f 90       	pop	r5
    9866:	4f 90       	pop	r4
    9868:	08 95       	ret

0000986a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    986a:	0f 93       	push	r16
    986c:	1f 93       	push	r17
    986e:	cf 93       	push	r28
    9870:	df 93       	push	r29
    9872:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9874:	c0 e0       	ldi	r28, 0x00	; 0
    9876:	d0 e0       	ldi	r29, 0x00	; 0
    9878:	c0 17       	cp	r28, r16
    987a:	d1 07       	cpc	r29, r17
    987c:	44 f4       	brge	.+16     	; 0x988e <WaitVsync+0x24>
		while(!GetVsyncFlag());
    987e:	0e 94 42 3e 	call	0x7c84	; 0x7c84 <GetVsyncFlag>
    9882:	88 23       	and	r24, r24
    9884:	e1 f3       	breq	.-8      	; 0x987e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9886:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    988a:	21 96       	adiw	r28, 0x01	; 1
    988c:	f5 cf       	rjmp	.-22     	; 0x9878 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    988e:	df 91       	pop	r29
    9890:	cf 91       	pop	r28
    9892:	1f 91       	pop	r17
    9894:	0f 91       	pop	r16
    9896:	08 95       	ret

00009898 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9898:	80 93 83 0d 	sts	0x0D83, r24
	currFadeFrame=0;
    989c:	10 92 86 0d 	sts	0x0D86, r1
	fadeActive=true;
    98a0:	81 e0       	ldi	r24, 0x01	; 1
    98a2:	80 93 85 0d 	sts	0x0D85, r24
		
	if(blocking){
    98a6:	66 23       	and	r22, r22
    98a8:	21 f0       	breq	.+8      	; 0x98b2 <doFade+0x1a>
		while(fadeActive==true);
    98aa:	80 91 85 0d 	lds	r24, 0x0D85
    98ae:	81 11       	cpse	r24, r1
    98b0:	fc cf       	rjmp	.-8      	; 0x98aa <doFade+0x12>
    98b2:	08 95       	ret

000098b4 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    98b4:	81 11       	cpse	r24, r1
    98b6:	03 c0       	rjmp	.+6      	; 0x98be <FadeIn+0xa>
		DDRC=0xff;
    98b8:	8f ef       	ldi	r24, 0xFF	; 255
    98ba:	87 b9       	out	0x07, r24	; 7
		return;
    98bc:	08 95       	ret
	}
	fadeStep=1;
    98be:	91 e0       	ldi	r25, 0x01	; 1
    98c0:	90 93 87 0d 	sts	0x0D87, r25
	fadeDir=1;
    98c4:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    98c8:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <doFade>

000098cc <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    98cc:	81 11       	cpse	r24, r1
    98ce:	02 c0       	rjmp	.+4      	; 0x98d4 <FadeOut+0x8>
		DDRC=0;
    98d0:	17 b8       	out	0x07, r1	; 7
		return;
    98d2:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    98d4:	9c e0       	ldi	r25, 0x0C	; 12
    98d6:	90 93 87 0d 	sts	0x0D87, r25
	fadeDir=-1;
    98da:	9f ef       	ldi	r25, 0xFF	; 255
    98dc:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    98e0:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <doFade>

000098e4 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    98e4:	80 91 85 0d 	lds	r24, 0x0D85
    98e8:	88 23       	and	r24, r24
    98ea:	01 f1       	breq	.+64     	; 0x992c <ProcessFading+0x48>
		if(currFadeFrame==0){
    98ec:	80 91 86 0d 	lds	r24, 0x0D86
    98f0:	81 11       	cpse	r24, r1
    98f2:	19 c0       	rjmp	.+50     	; 0x9926 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    98f4:	80 91 83 0d 	lds	r24, 0x0D83
    98f8:	80 93 86 0d 	sts	0x0D86, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    98fc:	e0 91 87 0d 	lds	r30, 0x0D87
    9900:	f0 e0       	ldi	r31, 0x00	; 0
    9902:	eb 5f       	subi	r30, 0xFB	; 251
    9904:	fe 4f       	sbci	r31, 0xFE	; 254
    9906:	e4 91       	lpm	r30, Z
    9908:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    990a:	90 91 84 0d 	lds	r25, 0x0D84
    990e:	80 91 87 0d 	lds	r24, 0x0D87
    9912:	89 0f       	add	r24, r25
    9914:	80 93 87 0d 	sts	0x0D87, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9918:	88 23       	and	r24, r24
    991a:	11 f0       	breq	.+4      	; 0x9920 <ProcessFading+0x3c>
    991c:	8d 30       	cpi	r24, 0x0D	; 13
    991e:	31 f4       	brne	.+12     	; 0x992c <ProcessFading+0x48>
				fadeActive=false;
    9920:	10 92 85 0d 	sts	0x0D85, r1
    9924:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9926:	81 50       	subi	r24, 0x01	; 1
    9928:	80 93 86 0d 	sts	0x0D86, r24
    992c:	08 95       	ret

0000992e <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    992e:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    9932:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <ProcessSprites>

00009936 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9936:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9938:	88 23       	and	r24, r24
    993a:	29 f1       	breq	.+74     	; 0x9986 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    993c:	87 ff       	sbrs	r24, 7
    993e:	03 c0       	rjmp	.+6      	; 0x9946 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9940:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9942:	3f ef       	ldi	r19, 0xFF	; 255
    9944:	01 c0       	rjmp	.+2      	; 0x9948 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9946:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9948:	6c e3       	ldi	r22, 0x3C	; 60
    994a:	0e 94 7e 71 	call	0xe2fc	; 0xe2fc <__divmodqi4>
    994e:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9950:	99 23       	and	r25, r25
    9952:	a9 f0       	breq	.+42     	; 0x997e <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9954:	69 2f       	mov	r22, r25
    9956:	70 e0       	ldi	r23, 0x00	; 0
    9958:	8c e3       	ldi	r24, 0x3C	; 60
    995a:	90 e0       	ldi	r25, 0x00	; 0
    995c:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9960:	8e 2f       	mov	r24, r30
    9962:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    9966:	91 11       	cpse	r25, r1
    9968:	0a c0       	rjmp	.+20     	; 0x997e <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    996a:	42 2f       	mov	r20, r18
    996c:	50 e0       	ldi	r21, 0x00	; 0
    996e:	4f 5f       	subi	r20, 0xFF	; 255
    9970:	5f 4f       	sbci	r21, 0xFF	; 255
    9972:	34 03       	mulsu	r19, r20
    9974:	c0 01       	movw	r24, r0
    9976:	35 9f       	mul	r19, r21
    9978:	90 0d       	add	r25, r0
    997a:	11 24       	eor	r1, r1
    997c:	08 95       	ret
	}
	return direction*base_delta;
    997e:	32 03       	mulsu	r19, r18
    9980:	c0 01       	movw	r24, r0
    9982:	11 24       	eor	r1, r1
    9984:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9986:	80 e0       	ldi	r24, 0x00	; 0
    9988:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    998a:	08 95       	ret

0000998c <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    998c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    998e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9990:	93 81       	ldd	r25, Z+3	; 0x03
    9992:	9f 5f       	subi	r25, 0xFF	; 255
    9994:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9996:	42 81       	ldd	r20, Z+2	; 0x02
    9998:	80 81       	ld	r24, Z
    999a:	26 81       	ldd	r18, Z+6	; 0x06
    999c:	37 81       	ldd	r19, Z+7	; 0x07
    999e:	94 17       	cp	r25, r20
    99a0:	30 f4       	brcc	.+12     	; 0x99ae <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    99a2:	f9 01       	movw	r30, r18
    99a4:	e8 0f       	add	r30, r24
    99a6:	f1 1d       	adc	r31, r1
    99a8:	e8 0f       	add	r30, r24
    99aa:	f1 1d       	adc	r31, r1
    99ac:	12 c0       	rjmp	.+36     	; 0x99d2 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    99ae:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    99b0:	90 e0       	ldi	r25, 0x00	; 0
    99b2:	01 96       	adiw	r24, 0x01	; 1
    99b4:	61 81       	ldd	r22, Z+1	; 0x01
    99b6:	70 e0       	ldi	r23, 0x00	; 0
    99b8:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    99bc:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    99be:	81 11       	cpse	r24, r1
    99c0:	02 c0       	rjmp	.+4      	; 0x99c6 <LBGetNextFrame+0x3a>
    99c2:	41 e0       	ldi	r20, 0x01	; 1
    99c4:	44 83       	std	Z+4, r20	; 0x04
    99c6:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    99c8:	88 0f       	add	r24, r24
    99ca:	99 1f       	adc	r25, r25
    99cc:	f9 01       	movw	r30, r18
    99ce:	e8 0f       	add	r30, r24
    99d0:	f9 1f       	adc	r31, r25
    99d2:	80 81       	ld	r24, Z
    99d4:	91 81       	ldd	r25, Z+1	; 0x01
}
    99d6:	08 95       	ret

000099d8 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    99d8:	0f 93       	push	r16
    99da:	1f 93       	push	r17
    99dc:	cf 93       	push	r28
    99de:	df 93       	push	r29
    99e0:	1f 92       	push	r1
    99e2:	cd b7       	in	r28, 0x3d	; 61
    99e4:	de b7       	in	r29, 0x3e	; 62
    99e6:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    99e8:	86 2f       	mov	r24, r22
    99ea:	69 83       	std	Y+1, r22	; 0x01
    99ec:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <ReadJoypad>
    99f0:	d8 01       	movw	r26, r16
    99f2:	15 96       	adiw	r26, 0x05	; 5
    99f4:	9c 93       	st	X, r25
    99f6:	8e 93       	st	-X, r24
    99f8:	14 97       	sbiw	r26, 0x04	; 4
    99fa:	69 81       	ldd	r22, Y+1	; 0x01
    99fc:	e6 2f       	mov	r30, r22
    99fe:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9a00:	00 97       	sbiw	r24, 0x00	; 0
    9a02:	51 f0       	breq	.+20     	; 0x9a18 <LBGetJoyPadState+0x40>
    9a04:	df 01       	movw	r26, r30
    9a06:	aa 0f       	add	r26, r26
    9a08:	bb 1f       	adc	r27, r27
    9a0a:	a5 50       	subi	r26, 0x05	; 5
    9a0c:	b3 4f       	sbci	r27, 0xF3	; 243
    9a0e:	2d 91       	ld	r18, X+
    9a10:	3c 91       	ld	r19, X
    9a12:	82 17       	cp	r24, r18
    9a14:	93 07       	cpc	r25, r19
    9a16:	21 f0       	breq	.+8      	; 0x9a20 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9a18:	d8 01       	movw	r26, r16
    9a1a:	16 96       	adiw	r26, 0x06	; 6
    9a1c:	1c 92       	st	X, r1
    9a1e:	07 c0       	rjmp	.+14     	; 0x9a2e <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9a20:	d8 01       	movw	r26, r16
    9a22:	16 96       	adiw	r26, 0x06	; 6
    9a24:	2c 91       	ld	r18, X
    9a26:	16 97       	sbiw	r26, 0x06	; 6
    9a28:	2f 5f       	subi	r18, 0xFF	; 255
    9a2a:	16 96       	adiw	r26, 0x06	; 6
    9a2c:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9a2e:	ee 0f       	add	r30, r30
    9a30:	ff 1f       	adc	r31, r31
    9a32:	e5 50       	subi	r30, 0x05	; 5
    9a34:	f3 4f       	sbci	r31, 0xF3	; 243
    9a36:	20 81       	ld	r18, Z
    9a38:	31 81       	ldd	r19, Z+1	; 0x01
    9a3a:	a9 01       	movw	r20, r18
    9a3c:	40 95       	com	r20
    9a3e:	50 95       	com	r21
    9a40:	48 23       	and	r20, r24
    9a42:	59 23       	and	r21, r25
    9a44:	d8 01       	movw	r26, r16
    9a46:	11 96       	adiw	r26, 0x01	; 1
    9a48:	5c 93       	st	X, r21
    9a4a:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9a4c:	ac 01       	movw	r20, r24
    9a4e:	40 95       	com	r20
    9a50:	50 95       	com	r21
    9a52:	24 23       	and	r18, r20
    9a54:	35 23       	and	r19, r21
    9a56:	13 96       	adiw	r26, 0x03	; 3
    9a58:	3c 93       	st	X, r19
    9a5a:	2e 93       	st	-X, r18
    9a5c:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9a5e:	91 83       	std	Z+1, r25	; 0x01
    9a60:	80 83       	st	Z, r24
}
    9a62:	0f 90       	pop	r0
    9a64:	df 91       	pop	r29
    9a66:	cf 91       	pop	r28
    9a68:	1f 91       	pop	r17
    9a6a:	0f 91       	pop	r16
    9a6c:	08 95       	ret

00009a6e <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9a6e:	90 ed       	ldi	r25, 0xD0	; 208
    9a70:	94 0f       	add	r25, r20
    9a72:	e0 91 88 0d 	lds	r30, 0x0D88
    9a76:	f0 91 89 0d 	lds	r31, 0x0D89
    9a7a:	9a 30       	cpi	r25, 0x0A	; 10
    9a7c:	38 f4       	brcc	.+14     	; 0x9a8c <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9a7e:	24 2f       	mov	r18, r20
    9a80:	30 e0       	ldi	r19, 0x00	; 0
    9a82:	2d 52       	subi	r18, 0x2D	; 45
    9a84:	31 09       	sbc	r19, r1
    9a86:	e2 0f       	add	r30, r18
    9a88:	f3 1f       	adc	r31, r19
    9a8a:	0c c0       	rjmp	.+24     	; 0x9aa4 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    9a8c:	9f eb       	ldi	r25, 0xBF	; 191
    9a8e:	94 0f       	add	r25, r20
    9a90:	9a 31       	cpi	r25, 0x1A	; 26
    9a92:	38 f4       	brcc	.+14     	; 0x9aa2 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9a94:	50 e0       	ldi	r21, 0x00	; 0
    9a96:	44 53       	subi	r20, 0x34	; 52
    9a98:	51 09       	sbc	r21, r1
    9a9a:	e4 0f       	add	r30, r20
    9a9c:	f5 1f       	adc	r31, r21
    9a9e:	44 91       	lpm	r20, Z
    9aa0:	03 c0       	rjmp	.+6      	; 0x9aa8 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9aa2:	32 96       	adiw	r30, 0x02	; 2
    9aa4:	e4 91       	lpm	r30, Z
    9aa6:	4e 2f       	mov	r20, r30
    9aa8:	50 e0       	ldi	r21, 0x00	; 0
    9aaa:	0c 94 2c 3e 	jmp	0x7c58	; 0x7c58 <SetTile>

00009aae <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9aae:	ff 92       	push	r15
    9ab0:	0f 93       	push	r16
    9ab2:	1f 93       	push	r17
    9ab4:	cf 93       	push	r28
    9ab6:	df 93       	push	r29
    9ab8:	d8 2f       	mov	r29, r24
    9aba:	f6 2e       	mov	r15, r22
    9abc:	8a 01       	movw	r16, r20
	u8 i = 0;
    9abe:	c0 e0       	ldi	r28, 0x00	; 0
    9ac0:	8c 2f       	mov	r24, r28
    9ac2:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9ac4:	f8 01       	movw	r30, r16
    9ac6:	ec 0f       	add	r30, r28
    9ac8:	f1 1d       	adc	r31, r1
    9aca:	44 91       	lpm	r20, Z
    9acc:	44 23       	and	r20, r20
    9ace:	29 f0       	breq	.+10     	; 0x9ada <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9ad0:	6f 2d       	mov	r22, r15
    9ad2:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		i++;
    9ad6:	cf 5f       	subi	r28, 0xFF	; 255
    9ad8:	f3 cf       	rjmp	.-26     	; 0x9ac0 <LBPrint+0x12>
	}
}
    9ada:	df 91       	pop	r29
    9adc:	cf 91       	pop	r28
    9ade:	1f 91       	pop	r17
    9ae0:	0f 91       	pop	r16
    9ae2:	ff 90       	pop	r15
    9ae4:	08 95       	ret

00009ae6 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9ae6:	df 92       	push	r13
    9ae8:	ef 92       	push	r14
    9aea:	ff 92       	push	r15
    9aec:	0f 93       	push	r16
    9aee:	1f 93       	push	r17
    9af0:	cf 93       	push	r28
    9af2:	df 93       	push	r29
    9af4:	1f 92       	push	r1
    9af6:	cd b7       	in	r28, 0x3d	; 61
    9af8:	de b7       	in	r29, 0x3e	; 62
    9afa:	38 2f       	mov	r19, r24
    9afc:	06 2f       	mov	r16, r22
    9afe:	84 2f       	mov	r24, r20
    9b00:	9d ef       	ldi	r25, 0xFD	; 253
    9b02:	e9 2e       	mov	r14, r25
    9b04:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9b06:	4a e0       	ldi	r20, 0x0A	; 10
    9b08:	f4 2e       	mov	r15, r20
    9b0a:	1f ef       	ldi	r17, 0xFF	; 255
    9b0c:	13 0f       	add	r17, r19
    9b0e:	6f 2d       	mov	r22, r15
    9b10:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    9b14:	d8 2e       	mov	r13, r24
    9b16:	40 e3       	ldi	r20, 0x30	; 48
    9b18:	49 0f       	add	r20, r25
    9b1a:	60 2f       	mov	r22, r16
    9b1c:	83 2f       	mov	r24, r19
    9b1e:	29 83       	std	Y+1, r18	; 0x01
    9b20:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		value /= 10;
    9b24:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9b26:	29 81       	ldd	r18, Y+1	; 0x01
    9b28:	21 11       	cpse	r18, r1
    9b2a:	02 c0       	rjmp	.+4      	; 0x9b30 <LBPrintByte+0x4a>
    9b2c:	dd 20       	and	r13, r13
    9b2e:	19 f0       	breq	.+6      	; 0x9b36 <LBPrintByte+0x50>
    9b30:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9b32:	1e 11       	cpse	r17, r14
    9b34:	ea cf       	rjmp	.-44     	; 0x9b0a <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9b36:	0f 90       	pop	r0
    9b38:	df 91       	pop	r29
    9b3a:	cf 91       	pop	r28
    9b3c:	1f 91       	pop	r17
    9b3e:	0f 91       	pop	r16
    9b40:	ff 90       	pop	r15
    9b42:	ef 90       	pop	r14
    9b44:	df 90       	pop	r13
    9b46:	08 95       	ret

00009b48 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9b48:	cf 92       	push	r12
    9b4a:	df 92       	push	r13
    9b4c:	ef 92       	push	r14
    9b4e:	ff 92       	push	r15
    9b50:	0f 93       	push	r16
    9b52:	1f 93       	push	r17
    9b54:	cf 93       	push	r28
    9b56:	df 93       	push	r29
    9b58:	00 d0       	rcall	.+0      	; 0x9b5a <LBPrintInt+0x12>
    9b5a:	cd b7       	in	r28, 0x3d	; 61
    9b5c:	de b7       	in	r29, 0x3e	; 62
    9b5e:	38 2f       	mov	r19, r24
    9b60:	16 2f       	mov	r17, r22
    9b62:	ca 01       	movw	r24, r20
    9b64:	4b ef       	ldi	r20, 0xFB	; 251
    9b66:	d4 2e       	mov	r13, r20
    9b68:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9b6a:	5a e0       	ldi	r21, 0x0A	; 10
    9b6c:	e5 2e       	mov	r14, r21
    9b6e:	f1 2c       	mov	r15, r1
    9b70:	cc 24       	eor	r12, r12
    9b72:	ca 94       	dec	r12
    9b74:	c3 0e       	add	r12, r19
    9b76:	b7 01       	movw	r22, r14
    9b78:	0e 94 8c 71 	call	0xe318	; 0xe318 <__udivmodhi4>
    9b7c:	06 2f       	mov	r16, r22
    9b7e:	40 e3       	ldi	r20, 0x30	; 48
    9b80:	48 0f       	add	r20, r24
    9b82:	61 2f       	mov	r22, r17
    9b84:	83 2f       	mov	r24, r19
    9b86:	29 83       	std	Y+1, r18	; 0x01
    9b88:	7a 83       	std	Y+2, r23	; 0x02
    9b8a:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		value /= 10;
    9b8e:	80 2f       	mov	r24, r16
    9b90:	7a 81       	ldd	r23, Y+2	; 0x02
    9b92:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    9b94:	29 81       	ldd	r18, Y+1	; 0x01
    9b96:	21 11       	cpse	r18, r1
    9b98:	02 c0       	rjmp	.+4      	; 0x9b9e <LBPrintInt+0x56>
    9b9a:	00 97       	sbiw	r24, 0x00	; 0
    9b9c:	19 f0       	breq	.+6      	; 0x9ba4 <LBPrintInt+0x5c>
    9b9e:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    9ba0:	cd 10       	cpse	r12, r13
    9ba2:	e6 cf       	rjmp	.-52     	; 0x9b70 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9ba4:	0f 90       	pop	r0
    9ba6:	0f 90       	pop	r0
    9ba8:	df 91       	pop	r29
    9baa:	cf 91       	pop	r28
    9bac:	1f 91       	pop	r17
    9bae:	0f 91       	pop	r16
    9bb0:	ff 90       	pop	r15
    9bb2:	ef 90       	pop	r14
    9bb4:	df 90       	pop	r13
    9bb6:	cf 90       	pop	r12
    9bb8:	08 95       	ret

00009bba <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9bba:	af 92       	push	r10
    9bbc:	cf 92       	push	r12
    9bbe:	ef 92       	push	r14
    9bc0:	ff 92       	push	r15
    9bc2:	0f 93       	push	r16
    9bc4:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9bc6:	70 e0       	ldi	r23, 0x00	; 0
    9bc8:	f1 2c       	mov	r15, r1
    9bca:	fb 01       	movw	r30, r22
    9bcc:	e2 0f       	add	r30, r18
    9bce:	f1 1d       	adc	r31, r1
    9bd0:	ee 16       	cp	r14, r30
    9bd2:	ff 06       	cpc	r15, r31
    9bd4:	a4 f4       	brge	.+40     	; 0x9bfe <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9bd6:	ea 0c       	add	r14, r10
    9bd8:	f1 1c       	adc	r15, r1
    9bda:	6e 15       	cp	r22, r14
    9bdc:	7f 05       	cpc	r23, r15
    9bde:	7c f4       	brge	.+30     	; 0x9bfe <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9be0:	28 2f       	mov	r18, r24
    9be2:	30 e0       	ldi	r19, 0x00	; 0
    9be4:	10 e0       	ldi	r17, 0x00	; 0
    9be6:	c9 01       	movw	r24, r18
    9be8:	84 0f       	add	r24, r20
    9bea:	91 1d       	adc	r25, r1
    9bec:	08 17       	cp	r16, r24
    9bee:	19 07       	cpc	r17, r25
    9bf0:	34 f4       	brge	.+12     	; 0x9bfe <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9bf2:	0c 0d       	add	r16, r12
    9bf4:	11 1d       	adc	r17, r1
    9bf6:	81 e0       	ldi	r24, 0x01	; 1
    9bf8:	20 17       	cp	r18, r16
    9bfa:	31 07       	cpc	r19, r17
    9bfc:	0c f0       	brlt	.+2      	; 0x9c00 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9bfe:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9c00:	1f 91       	pop	r17
    9c02:	0f 91       	pop	r16
    9c04:	ff 90       	pop	r15
    9c06:	ef 90       	pop	r14
    9c08:	cf 90       	pop	r12
    9c0a:	af 90       	pop	r10
    9c0c:	08 95       	ret

00009c0e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9c0e:	cf 93       	push	r28
    9c10:	df 93       	push	r29
    9c12:	d8 2f       	mov	r29, r24
    9c14:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9c16:	80 e0       	ldi	r24, 0x00	; 0
    9c18:	90 e0       	ldi	r25, 0x00	; 0
    9c1a:	0e 94 1b 40 	call	0x8036	; 0x8036 <GetPrngNumber>
    9c1e:	6f ef       	ldi	r22, 0xFF	; 255
    9c20:	70 e0       	ldi	r23, 0x00	; 0
    9c22:	0e 94 8c 71 	call	0xe318	; 0xe318 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9c26:	6c 2f       	mov	r22, r28
    9c28:	70 e0       	ldi	r23, 0x00	; 0
    9c2a:	6d 1b       	sub	r22, r29
    9c2c:	71 09       	sbc	r23, r1
    9c2e:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
}
    9c32:	8d 0f       	add	r24, r29
    9c34:	df 91       	pop	r29
    9c36:	cf 91       	pop	r28
    9c38:	08 95       	ret

00009c3a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9c3a:	cf 93       	push	r28
    9c3c:	df 93       	push	r29
    9c3e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9c40:	c0 e0       	ldi	r28, 0x00	; 0
    9c42:	cd 17       	cp	r28, r29
    9c44:	31 f0       	breq	.+12     	; 0x9c52 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9c46:	8f ef       	ldi	r24, 0xFF	; 255
    9c48:	9f ef       	ldi	r25, 0xFF	; 255
    9c4a:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9c4e:	cf 5f       	subi	r28, 0xFF	; 255
    9c50:	f8 cf       	rjmp	.-16     	; 0x9c42 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9c52:	df 91       	pop	r29
    9c54:	cf 91       	pop	r28
    9c56:	08 95       	ret

00009c58 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9c58:	df 92       	push	r13
    9c5a:	ef 92       	push	r14
    9c5c:	ff 92       	push	r15
    9c5e:	0f 93       	push	r16
    9c60:	1f 93       	push	r17
    9c62:	cf 93       	push	r28
    9c64:	df 93       	push	r29
    9c66:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9c68:	fb 01       	movw	r30, r22
    9c6a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9c6c:	31 96       	adiw	r30, 0x01	; 1
    9c6e:	64 91       	lpm	r22, Z
    9c70:	5f ef       	ldi	r21, 0xFF	; 255
    9c72:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9c74:	24 2f       	mov	r18, r20
    9c76:	21 70       	andi	r18, 0x01	; 1
    9c78:	40 ff       	sbrs	r20, 0
    9c7a:	04 c0       	rjmp	.+8      	; 0x9c84 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    9c7c:	95 2f       	mov	r25, r21
		dx=-1;
    9c7e:	ff 24       	eor	r15, r15
    9c80:	fa 94       	dec	r15
    9c82:	03 c0       	rjmp	.+6      	; 0x9c8a <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9c84:	ff 24       	eor	r15, r15
    9c86:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    9c88:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    9c8a:	41 ff       	sbrs	r20, 1
    9c8c:	05 c0       	rjmp	.+10     	; 0x9c98 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9c8e:	7f ef       	ldi	r23, 0xFF	; 255
    9c90:	76 0f       	add	r23, r22
		dy=-1;
    9c92:	ee 24       	eor	r14, r14
    9c94:	ea 94       	dec	r14
    9c96:	03 c0       	rjmp	.+6      	; 0x9c9e <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    9c98:	ee 24       	eor	r14, r14
    9c9a:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    9c9c:	70 e0       	ldi	r23, 0x00	; 0
    9c9e:	21 11       	cpse	r18, r1
    9ca0:	01 c0       	rjmp	.+2      	; 0x9ca4 <LBMapSprite+0x4c>
    9ca2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9ca4:	00 e0       	ldi	r16, 0x00	; 0
    9ca6:	06 17       	cp	r16, r22
    9ca8:	09 f1       	breq	.+66     	; 0x9cec <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9caa:	71 03       	mulsu	r23, r17
    9cac:	e0 01       	movw	r28, r0
    9cae:	11 24       	eor	r1, r1
    9cb0:	d8 2e       	mov	r13, r24
    9cb2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    9cb4:	8d 15       	cp	r24, r13
    9cb6:	b1 f0       	breq	.+44     	; 0x9ce4 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9cb8:	9e 01       	movw	r18, r28
    9cba:	29 0f       	add	r18, r25
    9cbc:	31 1d       	adc	r19, r1
    9cbe:	97 fd       	sbrc	r25, 7
    9cc0:	3a 95       	dec	r19
    9cc2:	2e 5f       	subi	r18, 0xFE	; 254
    9cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    9cc6:	fd 01       	movw	r30, r26
    9cc8:	e2 0f       	add	r30, r18
    9cca:	f3 1f       	adc	r31, r19
    9ccc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    9cce:	34 e0       	ldi	r19, 0x04	; 4
    9cd0:	83 9f       	mul	r24, r19
    9cd2:	f0 01       	movw	r30, r0
    9cd4:	11 24       	eor	r1, r1
    9cd6:	ec 51       	subi	r30, 0x1C	; 28
    9cd8:	f0 4f       	sbci	r31, 0xF0	; 240
    9cda:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    9cdc:	8f 5f       	subi	r24, 0xFF	; 255
    9cde:	43 83       	std	Z+3, r20	; 0x03
    9ce0:	9f 0d       	add	r25, r15
    9ce2:	e8 cf       	rjmp	.-48     	; 0x9cb4 <LBMapSprite+0x5c>
    9ce4:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9ce6:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9ce8:	95 2f       	mov	r25, r21
    9cea:	dd cf       	rjmp	.-70     	; 0x9ca6 <LBMapSprite+0x4e>
	}
}
    9cec:	df 91       	pop	r29
    9cee:	cf 91       	pop	r28
    9cf0:	1f 91       	pop	r17
    9cf2:	0f 91       	pop	r16
    9cf4:	ff 90       	pop	r15
    9cf6:	ef 90       	pop	r14
    9cf8:	df 90       	pop	r13
    9cfa:	08 95       	ret

00009cfc <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    9cfc:	df 92       	push	r13
    9cfe:	ef 92       	push	r14
    9d00:	ff 92       	push	r15
    9d02:	0f 93       	push	r16
    9d04:	1f 93       	push	r17
    9d06:	cf 93       	push	r28
    9d08:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9d0a:	a0 91 b7 0c 	lds	r26, 0x0CB7
    9d0e:	98 e0       	ldi	r25, 0x08	; 8
    9d10:	a9 9f       	mul	r26, r25
    9d12:	70 01       	movw	r14, r0
    9d14:	11 24       	eor	r1, r1
    9d16:	50 e0       	ldi	r21, 0x00	; 0
    9d18:	38 ef       	ldi	r19, 0xF8	; 248
    9d1a:	a3 9f       	mul	r26, r19
    9d1c:	30 2d       	mov	r19, r0
    9d1e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9d20:	70 e0       	ldi	r23, 0x00	; 0
    9d22:	70 17       	cp	r23, r16
    9d24:	09 f1       	breq	.+66     	; 0x9d68 <LBMoveSprite+0x6c>
    9d26:	d4 2e       	mov	r13, r20
    9d28:	13 2f       	mov	r17, r19
    9d2a:	14 0f       	add	r17, r20
    9d2c:	b8 2f       	mov	r27, r24
    9d2e:	b2 0f       	add	r27, r18
    9d30:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9d32:	8b 17       	cp	r24, r27
    9d34:	a9 f0       	breq	.+42     	; 0x9d60 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9d36:	c4 e0       	ldi	r28, 0x04	; 4
    9d38:	8c 9f       	mul	r24, r28
    9d3a:	f0 01       	movw	r30, r0
    9d3c:	11 24       	eor	r1, r1
    9d3e:	ef 01       	movw	r28, r30
    9d40:	cc 51       	subi	r28, 0x1C	; 28
    9d42:	d0 4f       	sbci	r29, 0xF0	; 240
    9d44:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9d46:	a0 32       	cpi	r26, 0x20	; 32
    9d48:	28 f4       	brcc	.+10     	; 0x9d54 <LBMoveSprite+0x58>
    9d4a:	e4 16       	cp	r14, r20
    9d4c:	f5 06       	cpc	r15, r21
    9d4e:	14 f4       	brge	.+4      	; 0x9d54 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9d50:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9d52:	03 c0       	rjmp	.+6      	; 0x9d5a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9d54:	ec 51       	subi	r30, 0x1C	; 28
    9d56:	f0 4f       	sbci	r31, 0xF0	; 240
    9d58:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    9d5a:	8f 5f       	subi	r24, 0xFF	; 255
    9d5c:	98 5f       	subi	r25, 0xF8	; 248
    9d5e:	e9 cf       	rjmp	.-46     	; 0x9d32 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9d60:	7f 5f       	subi	r23, 0xFF	; 255
    9d62:	48 5f       	subi	r20, 0xF8	; 248
    9d64:	5f 4f       	sbci	r21, 0xFF	; 255
    9d66:	dd cf       	rjmp	.-70     	; 0x9d22 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9d68:	df 91       	pop	r29
    9d6a:	cf 91       	pop	r28
    9d6c:	1f 91       	pop	r17
    9d6e:	0f 91       	pop	r16
    9d70:	ff 90       	pop	r15
    9d72:	ef 90       	pop	r14
    9d74:	df 90       	pop	r13
    9d76:	08 95       	ret

00009d78 <LBRotateSprites>:

void LBRotateSprites()
{
    9d78:	80 e0       	ldi	r24, 0x00	; 0
    9d7a:	90 e0       	ldi	r25, 0x00	; 0
    9d7c:	dc 01       	movw	r26, r24
    9d7e:	ac 51       	subi	r26, 0x1C	; 28
    9d80:	b0 4f       	sbci	r27, 0xF0	; 240
    9d82:	fc 01       	movw	r30, r24
    9d84:	e0 5f       	subi	r30, 0xF0	; 240
    9d86:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9d88:	13 96       	adiw	r26, 0x03	; 3
    9d8a:	2c 91       	ld	r18, X
    9d8c:	13 97       	sbiw	r26, 0x03	; 3
    9d8e:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9d90:	12 96       	adiw	r26, 0x02	; 2
    9d92:	2c 91       	ld	r18, X
    9d94:	12 97       	sbiw	r26, 0x02	; 2
    9d96:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9d98:	2c 91       	ld	r18, X
    9d9a:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9d9c:	11 96       	adiw	r26, 0x01	; 1
    9d9e:	2c 91       	ld	r18, X
    9da0:	21 83       	std	Z+1, r18	; 0x01
    9da2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    9da4:	8c 33       	cpi	r24, 0x3C	; 60
    9da6:	91 05       	cpc	r25, r1
    9da8:	49 f7       	brne	.-46     	; 0x9d7c <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    9daa:	80 91 01 05 	lds	r24, 0x0501
    9dae:	94 e0       	ldi	r25, 0x04	; 4
    9db0:	89 9f       	mul	r24, r25
    9db2:	f0 01       	movw	r30, r0
    9db4:	11 24       	eor	r1, r1
    9db6:	ec 51       	subi	r30, 0x1C	; 28
    9db8:	f0 4f       	sbci	r31, 0xF0	; 240
    9dba:	93 81       	ldd	r25, Z+3	; 0x03
    9dbc:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9dc0:	92 81       	ldd	r25, Z+2	; 0x02
    9dc2:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    9dc6:	90 81       	ld	r25, Z
    9dc8:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    9dcc:	91 81       	ldd	r25, Z+1	; 0x01
    9dce:	90 93 4d 05 	sts	0x054D, r25
		if (++rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9dd2:	8f 5f       	subi	r24, 0xFF	; 255
    9dd4:	84 31       	cpi	r24, 0x14	; 20
    9dd6:	08 f0       	brcs	.+2      	; 0x9dda <LBRotateSprites+0x62>
    9dd8:	8f e0       	ldi	r24, 0x0F	; 15
    9dda:	80 93 01 05 	sts	0x0501, r24
    9dde:	08 95       	ret

00009de0 <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9de0:	80 91 cb 0d 	lds	r24, 0x0DCB
}
    9de4:	81 70       	andi	r24, 0x01	; 1
    9de6:	08 95       	ret

00009de8 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    9de8:	8e e8       	ldi	r24, 0x8E	; 142
    9dea:	90 e0       	ldi	r25, 0x00	; 0
    9dec:	90 93 97 0d 	sts	0x0D97, r25
    9df0:	80 93 96 0d 	sts	0x0D96, r24
    9df4:	80 e0       	ldi	r24, 0x00	; 0
    9df6:	90 e0       	ldi	r25, 0x00	; 0
    9df8:	fc 01       	movw	r30, r24
    9dfa:	ef 5f       	subi	r30, 0xFF	; 255
    9dfc:	fc 4f       	sbci	r31, 0xFC	; 252
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9dfe:	e4 91       	lpm	r30, Z
    9e00:	dc 01       	movw	r26, r24
    9e02:	aa 56       	subi	r26, 0x6A	; 106
    9e04:	b2 4f       	sbci	r27, 0xF2	; 242
    9e06:	12 96       	adiw	r26, 0x02	; 2
    9e08:	ec 93       	st	X, r30
    9e0a:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9e0c:	8e 31       	cpi	r24, 0x1E	; 30
    9e0e:	91 05       	cpc	r25, r1
    9e10:	99 f7       	brne	.-26     	; 0x9df8 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9e12:	08 95       	ret

00009e14 <init_enemy_state>:

void init_enemy_state()
{
    9e14:	80 e0       	ldi	r24, 0x00	; 0
    9e16:	90 e0       	ldi	r25, 0x00	; 0
    9e18:	9c 01       	movw	r18, r24
    9e1a:	2a 54       	subi	r18, 0x4A	; 74
    9e1c:	32 4f       	sbci	r19, 0xF2	; 242
    9e1e:	f9 01       	movw	r30, r18
    9e20:	e0 5e       	subi	r30, 0xE0	; 224
    9e22:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    9e24:	10 82       	st	Z, r1
    9e26:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    9e28:	10 82       	st	Z, r1
    9e2a:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9e2c:	89 30       	cpi	r24, 0x09	; 9
    9e2e:	21 e0       	ldi	r18, 0x01	; 1
    9e30:	92 07       	cpc	r25, r18
    9e32:	91 f7       	brne	.-28     	; 0x9e18 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    9e34:	10 92 d1 0d 	sts	0x0DD1, r1
    9e38:	08 95       	ret

00009e3a <init_player_shot>:
	shot->active = 0;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    9e3a:	81 11       	cpse	r24, r1
    9e3c:	3f c0       	rjmp	.+126    	; 0x9ebc <init_player_shot+0x82>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9e3e:	10 92 f0 0d 	sts	0x0DF0, r1
	shot->hit_count = damage;
    9e42:	81 e0       	ldi	r24, 0x01	; 1
    9e44:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9e48:	90 e5       	ldi	r25, 0x50	; 80
    9e4a:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9e4e:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    9e52:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9e56:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9e5a:	2a e8       	ldi	r18, 0x8A	; 138
    9e5c:	3d e0       	ldi	r19, 0x0D	; 13
    9e5e:	30 93 fc 0d 	sts	0x0DFC, r19
    9e62:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    9e66:	21 e9       	ldi	r18, 0x91	; 145
    9e68:	30 e3       	ldi	r19, 0x30	; 48
    9e6a:	30 93 8b 0d 	sts	0x0D8B, r19
    9e6e:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    9e72:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    9e76:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9e7a:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9e7e:	10 92 04 0e 	sts	0x0E04, r1
	shot->hit_count = damage;
    9e82:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    9e86:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    9e8a:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    9e8e:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    9e92:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    9e96:	40 e4       	ldi	r20, 0x40	; 64
    9e98:	50 e1       	ldi	r21, 0x10	; 16
    9e9a:	50 93 10 0e 	sts	0x0E10, r21
    9e9e:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    9ea2:	30 93 41 10 	sts	0x1041, r19
    9ea6:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    9eaa:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    9eae:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9eb2:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9eb6:	10 92 18 0e 	sts	0x0E18, r1
    9eba:	41 c0       	rjmp	.+130    	; 0x9f3e <init_player_shot+0x104>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    9ebc:	82 30       	cpi	r24, 0x02	; 2
    9ebe:	09 f0       	breq	.+2      	; 0x9ec2 <init_player_shot+0x88>
    9ec0:	57 c0       	rjmp	.+174    	; 0x9f70 <init_player_shot+0x136>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9ec2:	81 e0       	ldi	r24, 0x01	; 1
    9ec4:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    9ec8:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9ecc:	94 e6       	ldi	r25, 0x64	; 100
    9ece:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9ed2:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    9ed6:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9eda:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9ede:	2a e8       	ldi	r18, 0x8A	; 138
    9ee0:	3d e0       	ldi	r19, 0x0D	; 13
    9ee2:	30 93 fc 0d 	sts	0x0DFC, r19
    9ee6:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    9eea:	2e e8       	ldi	r18, 0x8E	; 142
    9eec:	30 e3       	ldi	r19, 0x30	; 48
    9eee:	30 93 8b 0d 	sts	0x0D8B, r19
    9ef2:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    9ef6:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    9efa:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9efe:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f02:	80 93 04 0e 	sts	0x0E04, r24
	shot->hit_count = damage;
    9f06:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    9f0a:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    9f0e:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    9f12:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    9f16:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    9f1a:	40 e4       	ldi	r20, 0x40	; 64
    9f1c:	50 e1       	ldi	r21, 0x10	; 16
    9f1e:	50 93 10 0e 	sts	0x0E10, r21
    9f22:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    9f26:	30 93 41 10 	sts	0x1041, r19
    9f2a:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    9f2e:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    9f32:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9f36:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f3a:	80 93 18 0e 	sts	0x0E18, r24
	shot->hit_count = damage;
    9f3e:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    9f42:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    9f46:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    9f4a:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    9f4e:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    9f52:	42 e5       	ldi	r20, 0x52	; 82
    9f54:	50 e1       	ldi	r21, 0x10	; 16
    9f56:	50 93 24 0e 	sts	0x0E24, r21
    9f5a:	40 93 23 0e 	sts	0x0E23, r20
	shot->anim.anims[0] = (char*) map;
    9f5e:	30 93 53 10 	sts	0x1053, r19
    9f62:	20 93 52 10 	sts	0x1052, r18
	shot->shared.vx = speed;
    9f66:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
    9f6a:	10 92 15 0e 	sts	0x0E15, r1
    9f6e:	7f c1       	rjmp	.+766    	; 0xa26e <init_player_shot+0x434>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    9f70:	84 30       	cpi	r24, 0x04	; 4
    9f72:	09 f0       	breq	.+2      	; 0x9f76 <init_player_shot+0x13c>
    9f74:	5a c0       	rjmp	.+180    	; 0xa02a <init_player_shot+0x1f0>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f76:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    9f7a:	81 e0       	ldi	r24, 0x01	; 1
    9f7c:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9f80:	9f e7       	ldi	r25, 0x7F	; 127
    9f82:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9f86:	28 ef       	ldi	r18, 0xF8	; 248
    9f88:	20 93 f4 0d 	sts	0x0DF4, r18
	shot->anim.anim_count = 1;
    9f8c:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9f90:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9f94:	2a e8       	ldi	r18, 0x8A	; 138
    9f96:	3d e0       	ldi	r19, 0x0D	; 13
    9f98:	30 93 fc 0d 	sts	0x0DFC, r19
    9f9c:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    9fa0:	21 e9       	ldi	r18, 0x91	; 145
    9fa2:	30 e3       	ldi	r19, 0x30	; 48
    9fa4:	30 93 8b 0d 	sts	0x0D8B, r19
    9fa8:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    9fac:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    9fb0:	21 e8       	ldi	r18, 0x81	; 129
    9fb2:	20 93 ed 0d 	sts	0x0DED, r18
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9fb6:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fba:	22 e0       	ldi	r18, 0x02	; 2
    9fbc:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    9fc0:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    9fc4:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    9fc8:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    9fcc:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    9fd0:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    9fd4:	40 e4       	ldi	r20, 0x40	; 64
    9fd6:	50 e1       	ldi	r21, 0x10	; 16
    9fd8:	50 93 10 0e 	sts	0x0E10, r21
    9fdc:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    9fe0:	45 e8       	ldi	r20, 0x85	; 133
    9fe2:	50 e3       	ldi	r21, 0x30	; 48
    9fe4:	50 93 41 10 	sts	0x1041, r21
    9fe8:	40 93 40 10 	sts	0x1040, r20
	shot->shared.vx = speed;
    9fec:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    9ff0:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9ff4:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9ff8:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    9ffc:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a000:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a004:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a008:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a00c:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a010:	62 e5       	ldi	r22, 0x52	; 82
    a012:	70 e1       	ldi	r23, 0x10	; 16
    a014:	70 93 24 0e 	sts	0x0E24, r23
    a018:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a01c:	50 93 53 10 	sts	0x1053, r21
    a020:	40 93 52 10 	sts	0x1052, r20
	shot->shared.vx = speed;
    a024:	90 93 16 0e 	sts	0x0E16, r25
    a028:	5c c0       	rjmp	.+184    	; 0xa0e2 <init_player_shot+0x2a8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a02a:	86 30       	cpi	r24, 0x06	; 6
    a02c:	09 f0       	breq	.+2      	; 0xa030 <init_player_shot+0x1f6>
    a02e:	60 c0       	rjmp	.+192    	; 0xa0f0 <init_player_shot+0x2b6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a030:	33 e0       	ldi	r19, 0x03	; 3
    a032:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a036:	22 e0       	ldi	r18, 0x02	; 2
    a038:	20 93 f1 0d 	sts	0x0DF1, r18
	shot->shot_speed = speed;
    a03c:	8f e7       	ldi	r24, 0x7F	; 127
    a03e:	80 93 f3 0d 	sts	0x0DF3, r24
	shot->y_delta = y_delta;
    a042:	98 ef       	ldi	r25, 0xF8	; 248
    a044:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a048:	91 e0       	ldi	r25, 0x01	; 1
    a04a:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a04e:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a052:	4a e8       	ldi	r20, 0x8A	; 138
    a054:	5d e0       	ldi	r21, 0x0D	; 13
    a056:	50 93 fc 0d 	sts	0x0DFC, r21
    a05a:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a05e:	44 e9       	ldi	r20, 0x94	; 148
    a060:	50 e3       	ldi	r21, 0x30	; 48
    a062:	50 93 8b 0d 	sts	0x0D8B, r21
    a066:	40 93 8a 0d 	sts	0x0D8A, r20
	shot->shared.vx = speed;
    a06a:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->shared.vy = 0;
    a06e:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a072:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a076:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    a07a:	20 93 05 0e 	sts	0x0E05, r18
	shot->shot_speed = speed;
    a07e:	80 93 07 0e 	sts	0x0E07, r24
	shot->y_delta = y_delta;
    a082:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a086:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a08a:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a08e:	60 e4       	ldi	r22, 0x40	; 64
    a090:	70 e1       	ldi	r23, 0x10	; 16
    a092:	70 93 10 0e 	sts	0x0E10, r23
    a096:	60 93 0f 0e 	sts	0x0E0F, r22
	shot->anim.anims[0] = (char*) map;
    a09a:	65 e8       	ldi	r22, 0x85	; 133
    a09c:	70 e3       	ldi	r23, 0x30	; 48
    a09e:	70 93 41 10 	sts	0x1041, r23
    a0a2:	60 93 40 10 	sts	0x1040, r22
	shot->shared.vx = speed;
    a0a6:	80 93 02 0e 	sts	0x0E02, r24
	shot->shared.vy = 0;
    a0aa:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a0ae:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a0b2:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a0b6:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    a0ba:	80 93 1b 0e 	sts	0x0E1B, r24
	shot->y_delta = y_delta;
    a0be:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a0c2:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a0c6:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a0ca:	62 e5       	ldi	r22, 0x52	; 82
    a0cc:	70 e1       	ldi	r23, 0x10	; 16
    a0ce:	70 93 24 0e 	sts	0x0E24, r23
    a0d2:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a0d6:	50 93 53 10 	sts	0x1053, r21
    a0da:	40 93 52 10 	sts	0x1052, r20
	shot->shared.vx = speed;
    a0de:	80 93 16 0e 	sts	0x0E16, r24
	shot->shared.vy = 0;
    a0e2:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a0e6:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a0ea:	20 93 e7 0d 	sts	0x0DE7, r18
    a0ee:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a0f0:	88 30       	cpi	r24, 0x08	; 8
    a0f2:	09 f0       	breq	.+2      	; 0xa0f6 <init_player_shot+0x2bc>
    a0f4:	60 c0       	rjmp	.+192    	; 0xa1b6 <init_player_shot+0x37c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a0f6:	33 e0       	ldi	r19, 0x03	; 3
    a0f8:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a0fc:	62 e0       	ldi	r22, 0x02	; 2
    a0fe:	60 93 f1 0d 	sts	0x0DF1, r22
	shot->shot_speed = speed;
    a102:	2f e7       	ldi	r18, 0x7F	; 127
    a104:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->y_delta = y_delta;
    a108:	98 ef       	ldi	r25, 0xF8	; 248
    a10a:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a10e:	91 e0       	ldi	r25, 0x01	; 1
    a110:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a114:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a118:	4a e8       	ldi	r20, 0x8A	; 138
    a11a:	5d e0       	ldi	r21, 0x0D	; 13
    a11c:	50 93 fc 0d 	sts	0x0DFC, r21
    a120:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a124:	44 e9       	ldi	r20, 0x94	; 148
    a126:	50 e3       	ldi	r21, 0x30	; 48
    a128:	50 93 8b 0d 	sts	0x0D8B, r21
    a12c:	40 93 8a 0d 	sts	0x0D8A, r20
	shot->shared.vx = speed;
    a130:	20 93 ee 0d 	sts	0x0DEE, r18
	shot->shared.vy = 0;
    a134:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a138:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a13c:	90 93 04 0e 	sts	0x0E04, r25
	shot->hit_count = damage;
    a140:	90 93 05 0e 	sts	0x0E05, r25
	shot->shot_speed = speed;
    a144:	20 93 07 0e 	sts	0x0E07, r18
	shot->y_delta = y_delta;
    a148:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a14c:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a150:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a154:	e0 e4       	ldi	r30, 0x40	; 64
    a156:	f0 e1       	ldi	r31, 0x10	; 16
    a158:	f0 93 10 0e 	sts	0x0E10, r31
    a15c:	e0 93 0f 0e 	sts	0x0E0F, r30
	shot->anim.anims[0] = (char*) map;
    a160:	ee e8       	ldi	r30, 0x8E	; 142
    a162:	f0 e3       	ldi	r31, 0x30	; 48
    a164:	f0 93 41 10 	sts	0x1041, r31
    a168:	e0 93 40 10 	sts	0x1040, r30
	shot->shared.vx = speed;
    a16c:	20 93 02 0e 	sts	0x0E02, r18
	shot->shared.vy = 0;
    a170:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a174:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a178:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a17c:	60 93 19 0e 	sts	0x0E19, r22
	shot->shot_speed = speed;
    a180:	20 93 1b 0e 	sts	0x0E1B, r18
	shot->y_delta = y_delta;
    a184:	80 93 1c 0e 	sts	0x0E1C, r24
	shot->anim.anim_count = 1;
    a188:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a18c:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a190:	82 e5       	ldi	r24, 0x52	; 82
    a192:	90 e1       	ldi	r25, 0x10	; 16
    a194:	90 93 24 0e 	sts	0x0E24, r25
    a198:	80 93 23 0e 	sts	0x0E23, r24
	shot->anim.anims[0] = (char*) map;
    a19c:	50 93 53 10 	sts	0x1053, r21
    a1a0:	40 93 52 10 	sts	0x1052, r20
	shot->shared.vx = speed;
    a1a4:	20 93 16 0e 	sts	0x0E16, r18
	shot->shared.vy = 0;
    a1a8:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1ac:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a1b0:	30 93 e7 0d 	sts	0x0DE7, r19
    a1b4:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1b6:	55 e0       	ldi	r21, 0x05	; 5
    a1b8:	50 93 f0 0d 	sts	0x0DF0, r21
	shot->hit_count = damage;
    a1bc:	42 e0       	ldi	r20, 0x02	; 2
    a1be:	40 93 f1 0d 	sts	0x0DF1, r20
	shot->shot_speed = speed;
    a1c2:	9f e7       	ldi	r25, 0x7F	; 127
    a1c4:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a1c8:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    a1cc:	81 e0       	ldi	r24, 0x01	; 1
    a1ce:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a1d2:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a1d6:	2a e8       	ldi	r18, 0x8A	; 138
    a1d8:	3d e0       	ldi	r19, 0x0D	; 13
    a1da:	30 93 fc 0d 	sts	0x0DFC, r19
    a1de:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a1e2:	2b e8       	ldi	r18, 0x8B	; 139
    a1e4:	30 e3       	ldi	r19, 0x30	; 48
    a1e6:	30 93 8b 0d 	sts	0x0D8B, r19
    a1ea:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    a1ee:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a1f2:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1f6:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1fa:	50 93 04 0e 	sts	0x0E04, r21
	shot->hit_count = damage;
    a1fe:	40 93 05 0e 	sts	0x0E05, r20
	shot->shot_speed = speed;
    a202:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a206:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a20a:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a20e:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a212:	40 e4       	ldi	r20, 0x40	; 64
    a214:	50 e1       	ldi	r21, 0x10	; 16
    a216:	50 93 10 0e 	sts	0x0E10, r21
    a21a:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a21e:	30 93 41 10 	sts	0x1041, r19
    a222:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    a226:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a22a:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a22e:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a232:	26 e0       	ldi	r18, 0x06	; 6
    a234:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    a238:	24 e0       	ldi	r18, 0x04	; 4
    a23a:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    a23e:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a242:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a246:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a24a:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a24e:	22 e5       	ldi	r18, 0x52	; 82
    a250:	30 e1       	ldi	r19, 0x10	; 16
    a252:	30 93 24 0e 	sts	0x0E24, r19
    a256:	20 93 23 0e 	sts	0x0E23, r18
	shot->anim.anims[0] = (char*) map;
    a25a:	28 e8       	ldi	r18, 0x88	; 136
    a25c:	30 e3       	ldi	r19, 0x30	; 48
    a25e:	30 93 53 10 	sts	0x1053, r19
    a262:	20 93 52 10 	sts	0x1052, r18
	shot->shared.vx = speed;
    a266:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a26a:	90 93 15 0e 	sts	0x0E15, r25
	}
	shot->active = 0;
    a26e:	10 92 1a 0e 	sts	0x0E1A, r1
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a272:	80 93 e7 0d 	sts	0x0DE7, r24
    a276:	08 95       	ret

0000a278 <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a278:	81 11       	cpse	r24, r1
    a27a:	55 c0       	rjmp	.+170    	; 0xa326 <init_boss_shot+0xae>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a27c:	81 e0       	ldi	r24, 0x01	; 1
    a27e:	80 93 6b 0e 	sts	0x0E6B, r24
	shot->hit_count = damage;
    a282:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->shot_speed = speed;
    a286:	94 e6       	ldi	r25, 0x64	; 100
    a288:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    a28c:	10 92 6f 0e 	sts	0x0E6F, r1
	shot->anim.anim_count = 1;
    a290:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    a294:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    a298:	2a ed       	ldi	r18, 0xDA	; 218
    a29a:	3f e0       	ldi	r19, 0x0F	; 15
    a29c:	30 93 77 0e 	sts	0x0E77, r19
    a2a0:	20 93 76 0e 	sts	0x0E76, r18
	shot->anim.anims[0] = (char*) map;
    a2a4:	2e e8       	ldi	r18, 0x8E	; 142
    a2a6:	30 e3       	ldi	r19, 0x30	; 48
    a2a8:	30 93 db 0f 	sts	0x0FDB, r19
    a2ac:	20 93 da 0f 	sts	0x0FDA, r18
	shot->shared.vx = speed;
    a2b0:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    a2b4:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a2b8:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2bc:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a2c0:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    a2c4:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    a2c8:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a2cc:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    a2d0:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    a2d4:	46 e5       	ldi	r20, 0x56	; 86
    a2d6:	50 e1       	ldi	r21, 0x10	; 16
    a2d8:	50 93 8b 0e 	sts	0x0E8B, r21
    a2dc:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    a2e0:	30 93 57 10 	sts	0x1057, r19
    a2e4:	20 93 56 10 	sts	0x1056, r18
	shot->shared.vx = speed;
    a2e8:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    a2ec:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a2f0:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2f4:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    a2f8:	80 93 94 0e 	sts	0x0E94, r24
	shot->shot_speed = speed;
    a2fc:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    a300:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a304:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    a308:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    a30c:	46 e3       	ldi	r20, 0x36	; 54
    a30e:	50 e1       	ldi	r21, 0x10	; 16
    a310:	50 93 9f 0e 	sts	0x0E9F, r21
    a314:	40 93 9e 0e 	sts	0x0E9E, r20
	shot->anim.anims[0] = (char*) map;
    a318:	30 93 37 10 	sts	0x1037, r19
    a31c:	20 93 36 10 	sts	0x1036, r18
	shot->shared.vx = speed;
    a320:	90 93 91 0e 	sts	0x0E91, r25
    a324:	5c c0       	rjmp	.+184    	; 0xa3de <init_boss_shot+0x166>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a326:	82 30       	cpi	r24, 0x02	; 2
    a328:	09 f0       	breq	.+2      	; 0xa32c <init_boss_shot+0xb4>
    a32a:	5e c0       	rjmp	.+188    	; 0xa3e8 <init_boss_shot+0x170>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a32c:	94 e0       	ldi	r25, 0x04	; 4
    a32e:	90 93 6b 0e 	sts	0x0E6B, r25
	shot->hit_count = damage;
    a332:	91 e0       	ldi	r25, 0x01	; 1
    a334:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->shot_speed = speed;
    a338:	2f e7       	ldi	r18, 0x7F	; 127
    a33a:	20 93 6e 0e 	sts	0x0E6E, r18
	shot->y_delta = y_delta;
    a33e:	38 ef       	ldi	r19, 0xF8	; 248
    a340:	30 93 6f 0e 	sts	0x0E6F, r19
	shot->anim.anim_count = 1;
    a344:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a348:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a34c:	4a ed       	ldi	r20, 0xDA	; 218
    a34e:	5f e0       	ldi	r21, 0x0F	; 15
    a350:	50 93 77 0e 	sts	0x0E77, r21
    a354:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a358:	41 e9       	ldi	r20, 0x91	; 145
    a35a:	50 e3       	ldi	r21, 0x30	; 48
    a35c:	50 93 db 0f 	sts	0x0FDB, r21
    a360:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a364:	20 93 69 0e 	sts	0x0E69, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a368:	31 e8       	ldi	r19, 0x81	; 129
    a36a:	30 93 68 0e 	sts	0x0E68, r19
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a36e:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a372:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a376:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    a37a:	20 93 82 0e 	sts	0x0E82, r18
	shot->y_delta = y_delta;
    a37e:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a382:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a386:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a38a:	46 e5       	ldi	r20, 0x56	; 86
    a38c:	50 e1       	ldi	r21, 0x10	; 16
    a38e:	50 93 8b 0e 	sts	0x0E8B, r21
    a392:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    a396:	45 e8       	ldi	r20, 0x85	; 133
    a398:	50 e3       	ldi	r21, 0x30	; 48
    a39a:	50 93 57 10 	sts	0x1057, r21
    a39e:	40 93 56 10 	sts	0x1056, r20
	shot->shared.vx = speed;
    a3a2:	20 93 7d 0e 	sts	0x0E7D, r18
	shot->shared.vy = 0;
    a3a6:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3aa:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3ae:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    a3b2:	90 93 94 0e 	sts	0x0E94, r25
	shot->shot_speed = speed;
    a3b6:	20 93 96 0e 	sts	0x0E96, r18
	shot->y_delta = y_delta;
    a3ba:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a3be:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a3c2:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a3c6:	66 e3       	ldi	r22, 0x36	; 54
    a3c8:	70 e1       	ldi	r23, 0x10	; 16
    a3ca:	70 93 9f 0e 	sts	0x0E9F, r23
    a3ce:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a3d2:	50 93 37 10 	sts	0x1037, r21
    a3d6:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a3da:	20 93 91 0e 	sts	0x0E91, r18
	shot->shared.vy = 0;
    a3de:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3e2:	10 92 95 0e 	sts	0x0E95, r1
    a3e6:	20 c1       	rjmp	.+576    	; 0xa628 <init_boss_shot+0x3b0>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    a3e8:	84 30       	cpi	r24, 0x04	; 4
    a3ea:	09 f0       	breq	.+2      	; 0xa3ee <init_boss_shot+0x176>
    a3ec:	5a c0       	rjmp	.+180    	; 0xa4a2 <init_boss_shot+0x22a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3ee:	33 e0       	ldi	r19, 0x03	; 3
    a3f0:	30 93 6b 0e 	sts	0x0E6B, r19
	shot->hit_count = damage;
    a3f4:	22 e0       	ldi	r18, 0x02	; 2
    a3f6:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    a3fa:	8f e7       	ldi	r24, 0x7F	; 127
    a3fc:	80 93 6e 0e 	sts	0x0E6E, r24
	shot->y_delta = y_delta;
    a400:	98 ef       	ldi	r25, 0xF8	; 248
    a402:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    a406:	91 e0       	ldi	r25, 0x01	; 1
    a408:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a40c:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a410:	4a ed       	ldi	r20, 0xDA	; 218
    a412:	5f e0       	ldi	r21, 0x0F	; 15
    a414:	50 93 77 0e 	sts	0x0E77, r21
    a418:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a41c:	44 e9       	ldi	r20, 0x94	; 148
    a41e:	50 e3       	ldi	r21, 0x30	; 48
    a420:	50 93 db 0f 	sts	0x0FDB, r21
    a424:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a428:	80 93 69 0e 	sts	0x0E69, r24
	shot->shared.vy = 0;
    a42c:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a430:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a434:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    a438:	20 93 80 0e 	sts	0x0E80, r18
	shot->shot_speed = speed;
    a43c:	80 93 82 0e 	sts	0x0E82, r24
	shot->y_delta = y_delta;
    a440:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a444:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a448:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a44c:	66 e5       	ldi	r22, 0x56	; 86
    a44e:	70 e1       	ldi	r23, 0x10	; 16
    a450:	70 93 8b 0e 	sts	0x0E8B, r23
    a454:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    a458:	65 e8       	ldi	r22, 0x85	; 133
    a45a:	70 e3       	ldi	r23, 0x30	; 48
    a45c:	70 93 57 10 	sts	0x1057, r23
    a460:	60 93 56 10 	sts	0x1056, r22
	shot->shared.vx = speed;
    a464:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->shared.vy = 0;
    a468:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a46c:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a470:	30 93 93 0e 	sts	0x0E93, r19
	shot->hit_count = damage;
    a474:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    a478:	80 93 96 0e 	sts	0x0E96, r24
	shot->y_delta = y_delta;
    a47c:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a480:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a484:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a488:	66 e3       	ldi	r22, 0x36	; 54
    a48a:	70 e1       	ldi	r23, 0x10	; 16
    a48c:	70 93 9f 0e 	sts	0x0E9F, r23
    a490:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a494:	50 93 37 10 	sts	0x1037, r21
    a498:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a49c:	80 93 91 0e 	sts	0x0E91, r24
    a4a0:	5d c0       	rjmp	.+186    	; 0xa55c <init_boss_shot+0x2e4>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    a4a2:	86 30       	cpi	r24, 0x06	; 6
    a4a4:	09 f0       	breq	.+2      	; 0xa4a8 <init_boss_shot+0x230>
    a4a6:	61 c0       	rjmp	.+194    	; 0xa56a <init_boss_shot+0x2f2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4a8:	23 e0       	ldi	r18, 0x03	; 3
    a4aa:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    a4ae:	32 e0       	ldi	r19, 0x02	; 2
    a4b0:	30 93 6c 0e 	sts	0x0E6C, r19
	shot->shot_speed = speed;
    a4b4:	9f e7       	ldi	r25, 0x7F	; 127
    a4b6:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    a4ba:	88 ef       	ldi	r24, 0xF8	; 248
    a4bc:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.anim_count = 1;
    a4c0:	81 e0       	ldi	r24, 0x01	; 1
    a4c2:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    a4c6:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    a4ca:	4a ed       	ldi	r20, 0xDA	; 218
    a4cc:	5f e0       	ldi	r21, 0x0F	; 15
    a4ce:	50 93 77 0e 	sts	0x0E77, r21
    a4d2:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a4d6:	44 e9       	ldi	r20, 0x94	; 148
    a4d8:	50 e3       	ldi	r21, 0x30	; 48
    a4da:	50 93 db 0f 	sts	0x0FDB, r21
    a4de:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a4e2:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    a4e6:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a4ea:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4ee:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a4f2:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    a4f6:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    a4fa:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a4fe:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    a502:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    a506:	66 e5       	ldi	r22, 0x56	; 86
    a508:	70 e1       	ldi	r23, 0x10	; 16
    a50a:	70 93 8b 0e 	sts	0x0E8B, r23
    a50e:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    a512:	6e e8       	ldi	r22, 0x8E	; 142
    a514:	70 e3       	ldi	r23, 0x30	; 48
    a516:	70 93 57 10 	sts	0x1057, r23
    a51a:	60 93 56 10 	sts	0x1056, r22
	shot->shared.vx = speed;
    a51e:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    a522:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a526:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a52a:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    a52e:	30 93 94 0e 	sts	0x0E94, r19
	shot->shot_speed = speed;
    a532:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    a536:	38 e0       	ldi	r19, 0x08	; 8
    a538:	30 93 97 0e 	sts	0x0E97, r19
	shot->anim.anim_count = 1;
    a53c:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    a540:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    a544:	66 e3       	ldi	r22, 0x36	; 54
    a546:	70 e1       	ldi	r23, 0x10	; 16
    a548:	70 93 9f 0e 	sts	0x0E9F, r23
    a54c:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a550:	50 93 37 10 	sts	0x1037, r21
    a554:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a558:	90 93 91 0e 	sts	0x0E91, r25
	shot->shared.vy = 0;
    a55c:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a560:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a564:	20 93 62 0e 	sts	0x0E62, r18
    a568:	08 95       	ret
	}
	else if (level == 8) // Dessert
    a56a:	88 30       	cpi	r24, 0x08	; 8
    a56c:	09 f0       	breq	.+2      	; 0xa570 <init_boss_shot+0x2f8>
    a56e:	5e c0       	rjmp	.+188    	; 0xa62c <init_boss_shot+0x3b4>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a570:	22 e0       	ldi	r18, 0x02	; 2
    a572:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    a576:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    a57a:	3f e7       	ldi	r19, 0x7F	; 127
    a57c:	30 93 6e 0e 	sts	0x0E6E, r19
	shot->y_delta = y_delta;
    a580:	98 ef       	ldi	r25, 0xF8	; 248
    a582:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    a586:	91 e0       	ldi	r25, 0x01	; 1
    a588:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a58c:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a590:	4a ed       	ldi	r20, 0xDA	; 218
    a592:	5f e0       	ldi	r21, 0x0F	; 15
    a594:	50 93 77 0e 	sts	0x0E77, r21
    a598:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a59c:	45 e8       	ldi	r20, 0x85	; 133
    a59e:	50 e3       	ldi	r21, 0x30	; 48
    a5a0:	50 93 db 0f 	sts	0x0FDB, r21
    a5a4:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a5a8:	30 93 69 0e 	sts	0x0E69, r19
	shot->shared.vy = 0;
    a5ac:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a5b0:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5b4:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    a5b8:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    a5bc:	64 e6       	ldi	r22, 0x64	; 100
    a5be:	60 93 82 0e 	sts	0x0E82, r22
	shot->y_delta = y_delta;
    a5c2:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a5c6:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a5ca:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a5ce:	e6 e5       	ldi	r30, 0x56	; 86
    a5d0:	f0 e1       	ldi	r31, 0x10	; 16
    a5d2:	f0 93 8b 0e 	sts	0x0E8B, r31
    a5d6:	e0 93 8a 0e 	sts	0x0E8A, r30
	shot->anim.anims[0] = (char*) map;
    a5da:	50 93 57 10 	sts	0x1057, r21
    a5de:	40 93 56 10 	sts	0x1056, r20
	shot->shared.vx = speed;
    a5e2:	60 93 7d 0e 	sts	0x0E7D, r22
	shot->shared.vy = 0;
    a5e6:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a5ea:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5ee:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    a5f2:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    a5f6:	30 93 96 0e 	sts	0x0E96, r19
	shot->y_delta = y_delta;
    a5fa:	80 93 97 0e 	sts	0x0E97, r24
	shot->anim.anim_count = 1;
    a5fe:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a602:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a606:	86 e3       	ldi	r24, 0x36	; 54
    a608:	90 e1       	ldi	r25, 0x10	; 16
    a60a:	90 93 9f 0e 	sts	0x0E9F, r25
    a60e:	80 93 9e 0e 	sts	0x0E9E, r24
	shot->anim.anims[0] = (char*) map;
    a612:	50 93 37 10 	sts	0x1037, r21
    a616:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a61a:	30 93 91 0e 	sts	0x0E91, r19
	shot->shared.vy = 0;
    a61e:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a622:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a626:	83 e0       	ldi	r24, 0x03	; 3
    a628:	80 93 62 0e 	sts	0x0E62, r24
    a62c:	08 95       	ret

0000a62e <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a62e:	10 92 cd 0e 	sts	0x0ECD, r1
    a632:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    a636:	10 92 c9 0e 	sts	0x0EC9, r1
    a63a:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    a63e:	10 92 cb 0e 	sts	0x0ECB, r1
    a642:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    a646:	10 92 ce 0e 	sts	0x0ECE, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	game.boss.width = 2;
    a64a:	82 e0       	ldi	r24, 0x02	; 2
    a64c:	80 93 5f 0e 	sts	0x0E5F, r24
	game.boss.height = 3;
    a650:	93 e0       	ldi	r25, 0x03	; 3
    a652:	90 93 60 0e 	sts	0x0E60, r25
	game.boss.run.anim_count = 4;
    a656:	84 e0       	ldi	r24, 0x04	; 4
    a658:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a65c:	8c e0       	ldi	r24, 0x0C	; 12
    a65e:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.run.anims = boss_run_anim;
    a662:	ec e8       	ldi	r30, 0x8C	; 140
    a664:	fd e0       	ldi	r31, 0x0D	; 13
    a666:	f0 93 af 0e 	sts	0x0EAF, r31
    a66a:	e0 93 ae 0e 	sts	0x0EAE, r30
	game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a66e:	25 e7       	ldi	r18, 0x75	; 117
    a670:	30 e3       	ldi	r19, 0x30	; 48
    a672:	31 83       	std	Z+1, r19	; 0x01
    a674:	20 83       	st	Z, r18
	game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a676:	2d e6       	ldi	r18, 0x6D	; 109
    a678:	30 e3       	ldi	r19, 0x30	; 48
    a67a:	33 83       	std	Z+3, r19	; 0x03
    a67c:	22 83       	std	Z+2, r18	; 0x02
	game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a67e:	25 e6       	ldi	r18, 0x65	; 101
    a680:	30 e3       	ldi	r19, 0x30	; 48
    a682:	35 83       	std	Z+5, r19	; 0x05
    a684:	24 83       	std	Z+4, r18	; 0x04
	game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a686:	2d e5       	ldi	r18, 0x5D	; 93
    a688:	30 e3       	ldi	r19, 0x30	; 48
    a68a:	37 83       	std	Z+7, r19	; 0x07
    a68c:	26 83       	std	Z+6, r18	; 0x06
	game.boss.active_shots = 0;
    a68e:	10 92 5b 0e 	sts	0x0E5B, r1
	game.boss.shared.vx = 0;
    a692:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.shared.vy = 0;
    a696:	10 92 58 0e 	sts	0x0E58, r1
	game.boss.shared.gravity = 0;
    a69a:	10 92 5a 0e 	sts	0x0E5A, r1
	game.boss.active = 0;
    a69e:	10 92 61 0e 	sts	0x0E61, r1
	game.boss.direction = D_LEFT;
    a6a2:	10 92 5e 0e 	sts	0x0E5E, r1
	game.boss.flags = IDLE;
    a6a6:	88 e0       	ldi	r24, 0x08	; 8
    a6a8:	80 93 5c 0e 	sts	0x0E5C, r24
	game.boss.ai_flags = AI_NOT_READY;
    a6ac:	10 92 5d 0e 	sts	0x0E5D, r1
	game.boss.shield = BOSS_SHIELD;
    a6b0:	8e e1       	ldi	r24, 0x1E	; 30
    a6b2:	80 93 63 0e 	sts	0x0E63, r24
	game.boss.idle.anim_count = 1;
    a6b6:	81 e0       	ldi	r24, 0x01	; 1
    a6b8:	80 93 a1 0e 	sts	0x0EA1, r24
	game.boss.idle.frames_per_anim = 1;
    a6bc:	80 93 a2 0e 	sts	0x0EA2, r24
	game.boss.idle.anims = boss_idle_anim;
    a6c0:	e4 e5       	ldi	r30, 0x54	; 84
    a6c2:	f0 e1       	ldi	r31, 0x10	; 16
    a6c4:	f0 93 a7 0e 	sts	0x0EA7, r31
    a6c8:	e0 93 a6 0e 	sts	0x0EA6, r30
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a6cc:	2d e7       	ldi	r18, 0x7D	; 125
    a6ce:	30 e3       	ldi	r19, 0x30	; 48
    a6d0:	31 83       	std	Z+1, r19	; 0x01
    a6d2:	20 83       	st	Z, r18
	
	game.boss.jump.anim_count = 1;
    a6d4:	80 93 b1 0e 	sts	0x0EB1, r24
	game.boss.jump.frames_per_anim = 1;
    a6d8:	80 93 b2 0e 	sts	0x0EB2, r24
	game.boss.jump.anims = boss_jump_anim;
    a6dc:	e2 e4       	ldi	r30, 0x42	; 66
    a6de:	f0 e1       	ldi	r31, 0x10	; 16
    a6e0:	f0 93 b7 0e 	sts	0x0EB7, r31
    a6e4:	e0 93 b6 0e 	sts	0x0EB6, r30
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a6e8:	20 e5       	ldi	r18, 0x50	; 80
    a6ea:	30 e3       	ldi	r19, 0x30	; 48
    a6ec:	31 83       	std	Z+1, r19	; 0x01
    a6ee:	20 83       	st	Z, r18
	
	game.boss.prone.anim_count = 1;
    a6f0:	80 93 b9 0e 	sts	0x0EB9, r24
	game.boss.prone.frames_per_anim = 1;
    a6f4:	80 93 ba 0e 	sts	0x0EBA, r24
	game.boss.prone.anims = boss_prone_anim;
    a6f8:	e0 e5       	ldi	r30, 0x50	; 80
    a6fa:	f0 e1       	ldi	r31, 0x10	; 16
    a6fc:	f0 93 bf 0e 	sts	0x0EBF, r31
    a700:	e0 93 be 0e 	sts	0x0EBE, r30
	game.boss.prone.anims[0] = (char*) map_ahero_prone;
    a704:	28 e5       	ldi	r18, 0x58	; 88
    a706:	30 e3       	ldi	r19, 0x30	; 48
    a708:	31 83       	std	Z+1, r19	; 0x01
    a70a:	20 83       	st	Z, r18
	
	game.boss.expl.anim_count = 3;
    a70c:	90 93 c1 0e 	sts	0x0EC1, r25
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a710:	85 e0       	ldi	r24, 0x05	; 5
    a712:	80 93 c2 0e 	sts	0x0EC2, r24
	game.boss.expl.anims = expl_anim;
    a716:	ea e4       	ldi	r30, 0x4A	; 74
    a718:	f0 e1       	ldi	r31, 0x10	; 16
    a71a:	f0 93 c7 0e 	sts	0x0EC7, r31
    a71e:	e0 93 c6 0e 	sts	0x0EC6, r30
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a722:	8f ef       	ldi	r24, 0xFF	; 255
    a724:	90 e3       	ldi	r25, 0x30	; 48
    a726:	91 83       	std	Z+1, r25	; 0x01
    a728:	80 83       	st	Z, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a72a:	8c ef       	ldi	r24, 0xFC	; 252
    a72c:	90 e3       	ldi	r25, 0x30	; 48
    a72e:	93 83       	std	Z+3, r25	; 0x03
    a730:	82 83       	std	Z+2, r24	; 0x02
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a732:	89 ef       	ldi	r24, 0xF9	; 249
    a734:	90 e3       	ldi	r25, 0x30	; 48
    a736:	95 83       	std	Z+5, r25	; 0x05
    a738:	84 83       	std	Z+4, r24	; 0x04
	
	init_boss_shot(game.current_level_index);
    a73a:	80 91 cb 0d 	lds	r24, 0x0DCB
    a73e:	0c 94 3c 51 	jmp	0xa278	; 0xa278 <init_boss_shot>

0000a742 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    a742:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    a746:	88 23       	and	r24, r24
    a748:	f9 f0       	breq	.+62     	; 0xa788 <init_player_state+0x46>
	{
		game.player.width = 3;
    a74a:	83 e0       	ldi	r24, 0x03	; 3
    a74c:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 1;
    a750:	81 e0       	ldi	r24, 0x01	; 1
    a752:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 2;
    a756:	82 e0       	ldi	r24, 0x02	; 2
    a758:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a75c:	85 e0       	ldi	r24, 0x05	; 5
    a75e:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    a762:	88 e3       	ldi	r24, 0x38	; 56
    a764:	90 e1       	ldi	r25, 0x10	; 16
    a766:	90 93 34 0e 	sts	0x0E34, r25
    a76a:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    a76e:	80 eb       	ldi	r24, 0xB0	; 176
    a770:	90 e3       	ldi	r25, 0x30	; 48
    a772:	90 93 39 10 	sts	0x1039, r25
    a776:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    a77a:	8b ea       	ldi	r24, 0xAB	; 171
    a77c:	90 e3       	ldi	r25, 0x30	; 48
    a77e:	90 93 3b 10 	sts	0x103B, r25
    a782:	80 93 3a 10 	sts	0x103A, r24
    a786:	2a c0       	rjmp	.+84     	; 0xa7dc <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    a788:	82 e0       	ldi	r24, 0x02	; 2
    a78a:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 3;
    a78e:	83 e0       	ldi	r24, 0x03	; 3
    a790:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 4;
    a794:	84 e0       	ldi	r24, 0x04	; 4
    a796:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a79a:	8c e0       	ldi	r24, 0x0C	; 12
    a79c:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    a7a0:	88 e3       	ldi	r24, 0x38	; 56
    a7a2:	90 e1       	ldi	r25, 0x10	; 16
    a7a4:	90 93 34 0e 	sts	0x0E34, r25
    a7a8:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    a7ac:	8a ed       	ldi	r24, 0xDA	; 218
    a7ae:	90 e3       	ldi	r25, 0x30	; 48
    a7b0:	90 93 39 10 	sts	0x1039, r25
    a7b4:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    a7b8:	82 ed       	ldi	r24, 0xD2	; 210
    a7ba:	90 e3       	ldi	r25, 0x30	; 48
    a7bc:	90 93 3b 10 	sts	0x103B, r25
    a7c0:	80 93 3a 10 	sts	0x103A, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a7c4:	8a ec       	ldi	r24, 0xCA	; 202
    a7c6:	90 e3       	ldi	r25, 0x30	; 48
    a7c8:	90 93 3d 10 	sts	0x103D, r25
    a7cc:	80 93 3c 10 	sts	0x103C, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a7d0:	82 ec       	ldi	r24, 0xC2	; 194
    a7d2:	90 e3       	ldi	r25, 0x30	; 48
    a7d4:	90 93 3f 10 	sts	0x103F, r25
    a7d8:	80 93 3e 10 	sts	0x103E, r24
	}
	game.player.shared.vx = 0;
    a7dc:	10 92 de 0d 	sts	0x0DDE, r1
	game.player.shared.vy = 0;
    a7e0:	10 92 dd 0d 	sts	0x0DDD, r1
	game.player.shared.gravity = 0;
    a7e4:	10 92 df 0d 	sts	0x0DDF, r1
	game.player.active_shots = 0;
    a7e8:	10 92 e0 0d 	sts	0x0DE0, r1
	game.player.active = 1;
    a7ec:	81 e0       	ldi	r24, 0x01	; 1
    a7ee:	80 93 e6 0d 	sts	0x0DE6, r24
	game.player.direction = D_RIGHT;
    a7f2:	80 93 e3 0d 	sts	0x0DE3, r24
	game.player.flags = IDLE;
    a7f6:	98 e0       	ldi	r25, 0x08	; 8
    a7f8:	90 93 e1 0d 	sts	0x0DE1, r25
	game.player.ai_flags = AI_NOT_READY;
    a7fc:	10 92 e2 0d 	sts	0x0DE2, r1
	game.player.shield = PLAYER_SHIELD;
    a800:	9f e0       	ldi	r25, 0x0F	; 15
    a802:	90 93 e8 0d 	sts	0x0DE8, r25
	game.player.idle.anim_count = 1;
    a806:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.frames_per_anim = 1;
    a80a:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.anims = idle_anim;
    a80e:	2c e5       	ldi	r18, 0x5C	; 92
    a810:	30 e1       	ldi	r19, 0x10	; 16
    a812:	30 93 2c 0e 	sts	0x0E2C, r19
    a816:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a81a:	22 ee       	ldi	r18, 0xE2	; 226
    a81c:	30 e3       	ldi	r19, 0x30	; 48
    a81e:	30 93 5d 10 	sts	0x105D, r19
    a822:	20 93 5c 10 	sts	0x105C, r18
	
	game.player.jump.anim_count = 1;
    a826:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.frames_per_anim = 1;
    a82a:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.anims = jump_anim;
    a82e:	24 e9       	ldi	r18, 0x94	; 148
    a830:	3d e0       	ldi	r19, 0x0D	; 13
    a832:	30 93 3c 0e 	sts	0x0E3C, r19
    a836:	20 93 3b 0e 	sts	0x0E3B, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a83a:	2a eb       	ldi	r18, 0xBA	; 186
    a83c:	30 e3       	ldi	r19, 0x30	; 48
    a83e:	30 93 95 0d 	sts	0x0D95, r19
    a842:	20 93 94 0d 	sts	0x0D94, r18
	
	game.player.prone.anim_count = 1;
    a846:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.frames_per_anim = 1;
    a84a:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.anims = prone_anim;
    a84e:	8c ed       	ldi	r24, 0xDC	; 220
    a850:	9f e0       	ldi	r25, 0x0F	; 15
    a852:	90 93 44 0e 	sts	0x0E44, r25
    a856:	80 93 43 0e 	sts	0x0E43, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a85a:	85 eb       	ldi	r24, 0xB5	; 181
    a85c:	90 e3       	ldi	r25, 0x30	; 48
    a85e:	90 93 dd 0f 	sts	0x0FDD, r25
    a862:	80 93 dc 0f 	sts	0x0FDC, r24
	
	game.player.expl.anim_count = 3;
    a866:	83 e0       	ldi	r24, 0x03	; 3
    a868:	80 93 46 0e 	sts	0x0E46, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a86c:	85 e0       	ldi	r24, 0x05	; 5
    a86e:	80 93 47 0e 	sts	0x0E47, r24
	game.player.expl.anims = expl_anim;
    a872:	8a e4       	ldi	r24, 0x4A	; 74
    a874:	90 e1       	ldi	r25, 0x10	; 16
    a876:	90 93 4c 0e 	sts	0x0E4C, r25
    a87a:	80 93 4b 0e 	sts	0x0E4B, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a87e:	8f ef       	ldi	r24, 0xFF	; 255
    a880:	90 e3       	ldi	r25, 0x30	; 48
    a882:	90 93 4b 10 	sts	0x104B, r25
    a886:	80 93 4a 10 	sts	0x104A, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a88a:	8c ef       	ldi	r24, 0xFC	; 252
    a88c:	90 e3       	ldi	r25, 0x30	; 48
    a88e:	90 93 4d 10 	sts	0x104D, r25
    a892:	80 93 4c 10 	sts	0x104C, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a896:	89 ef       	ldi	r24, 0xF9	; 249
    a898:	90 e3       	ldi	r25, 0x30	; 48
    a89a:	90 93 4f 10 	sts	0x104F, r25
    a89e:	80 93 4e 10 	sts	0x104E, r24
	game.eye_clusters = 9;
    a8a2:	89 e0       	ldi	r24, 0x09	; 9
    a8a4:	80 93 d4 0d 	sts	0x0DD4, r24
	init_player_shot(game.current_level_index);
    a8a8:	80 91 cb 0d 	lds	r24, 0x0DCB
    a8ac:	0c 94 1d 4f 	jmp	0x9e3a	; 0x9e3a <init_player_shot>

0000a8b0 <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    a8b0:	0f 93       	push	r16
    a8b2:	1f 93       	push	r17
    a8b4:	cf 93       	push	r28
    a8b6:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    a8b8:	a8 2f       	mov	r26, r24
    a8ba:	b0 e0       	ldi	r27, 0x00	; 0
    a8bc:	35 e3       	ldi	r19, 0x35	; 53
    a8be:	83 9f       	mul	r24, r19
    a8c0:	c0 01       	movw	r24, r0
    a8c2:	11 24       	eor	r1, r1
    a8c4:	8a 54       	subi	r24, 0x4A	; 74
    a8c6:	92 4f       	sbci	r25, 0xF2	; 242
    a8c8:	fc 01       	movw	r30, r24
    a8ca:	e9 5b       	subi	r30, 0xB9	; 185
    a8cc:	fe 4f       	sbci	r31, 0xFE	; 254
    a8ce:	33 e0       	ldi	r19, 0x03	; 3
    a8d0:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a8d2:	31 96       	adiw	r30, 0x01	; 1
    a8d4:	35 e0       	ldi	r19, 0x05	; 5
    a8d6:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    a8d8:	34 96       	adiw	r30, 0x04	; 4
    a8da:	ca e4       	ldi	r28, 0x4A	; 74
    a8dc:	d0 e1       	ldi	r29, 0x10	; 16
    a8de:	d1 83       	std	Z+1, r29	; 0x01
    a8e0:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    a8e2:	ef ef       	ldi	r30, 0xFF	; 255
    a8e4:	f0 e3       	ldi	r31, 0x30	; 48
    a8e6:	f0 93 4b 10 	sts	0x104B, r31
    a8ea:	e0 93 4a 10 	sts	0x104A, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    a8ee:	ec ef       	ldi	r30, 0xFC	; 252
    a8f0:	f0 e3       	ldi	r31, 0x30	; 48
    a8f2:	f0 93 4d 10 	sts	0x104D, r31
    a8f6:	e0 93 4c 10 	sts	0x104C, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    a8fa:	e9 ef       	ldi	r30, 0xF9	; 249
    a8fc:	f0 e3       	ldi	r31, 0x30	; 48
    a8fe:	f0 93 4f 10 	sts	0x104F, r31
    a902:	e0 93 4e 10 	sts	0x104E, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    a906:	ec 01       	movw	r28, r24
    a908:	ce 5c       	subi	r28, 0xCE	; 206
    a90a:	de 4f       	sbci	r29, 0xFE	; 254
    a90c:	31 e0       	ldi	r19, 0x01	; 1
    a90e:	38 83       	st	Y, r19
		game.enemies[i].shot[j].active = 0;
    a910:	fc 01       	movw	r30, r24
    a912:	ed 5c       	subi	r30, 0xCD	; 205
    a914:	fe 4f       	sbci	r31, 0xFE	; 254
    a916:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    a918:	32 97       	sbiw	r30, 0x02	; 2
    a91a:	17 e0       	ldi	r17, 0x07	; 7
    a91c:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    a91e:	36 96       	adiw	r30, 0x06	; 6
    a920:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    a922:	31 96       	adiw	r30, 0x01	; 1
    a924:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    a926:	34 96       	adiw	r30, 0x04	; 4
    a928:	04 e4       	ldi	r16, 0x44	; 68
    a92a:	10 e1       	ldi	r17, 0x10	; 16
    a92c:	11 83       	std	Z+1, r17	; 0x01
    a92e:	00 83       	st	Z, r16
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    a930:	ed e4       	ldi	r30, 0x4D	; 77
    a932:	f0 e3       	ldi	r31, 0x30	; 48
    a934:	f0 93 45 10 	sts	0x1045, r31
    a938:	e0 93 44 10 	sts	0x1044, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    a93c:	fc 01       	movw	r30, r24
    a93e:	ec 5c       	subi	r30, 0xCC	; 204
    a940:	fe 4f       	sbci	r31, 0xFE	; 254
    a942:	30 e5       	ldi	r19, 0x50	; 80
    a944:	30 83       	st	Z, r19
		if (is_boss)
    a946:	22 23       	and	r18, r18
    a948:	51 f0       	breq	.+20     	; 0xa95e <init_enemy_shot+0xae>
		{
			game.enemies[i].shot[j].hit_count = CRITICAL_SHOT_DAMAGE;
    a94a:	8a e0       	ldi	r24, 0x0A	; 10
    a94c:	88 83       	st	Y, r24
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    a94e:	8f e2       	ldi	r24, 0x2F	; 47
    a950:	90 e3       	ldi	r25, 0x30	; 48
    a952:	90 93 45 10 	sts	0x1045, r25
    a956:	80 93 44 10 	sts	0x1044, r24
			game.enemies[i].shot[j].shot_speed = MEDIUM_SHOT_SPEED;
    a95a:	84 e6       	ldi	r24, 0x64	; 100
    a95c:	08 c0       	rjmp	.+16     	; 0xa96e <init_enemy_shot+0xbe>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    a95e:	fc 01       	movw	r30, r24
    a960:	eb 5d       	subi	r30, 0xDB	; 219
    a962:	fe 4f       	sbci	r31, 0xFE	; 254
    a964:	20 81       	ld	r18, Z
    a966:	3a 96       	adiw	r30, 0x0a	; 10
    a968:	24 30       	cpi	r18, 0x04	; 4
    a96a:	19 f4       	brne	.+6      	; 0xa972 <init_enemy_shot+0xc2>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    a96c:	82 ee       	ldi	r24, 0xE2	; 226
    a96e:	80 83       	st	Z, r24
    a970:	05 c0       	rjmp	.+10     	; 0xa97c <init_enemy_shot+0xcc>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    a972:	25 30       	cpi	r18, 0x05	; 5
    a974:	11 f4       	brne	.+4      	; 0xa97a <init_enemy_shot+0xca>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    a976:	8a e0       	ldi	r24, 0x0A	; 10
    a978:	fa cf       	rjmp	.-12     	; 0xa96e <init_enemy_shot+0xbe>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    a97a:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    a97c:	25 e3       	ldi	r18, 0x35	; 53
    a97e:	2a 9f       	mul	r18, r26
    a980:	c0 01       	movw	r24, r0
    a982:	2b 9f       	mul	r18, r27
    a984:	90 0d       	add	r25, r0
    a986:	11 24       	eor	r1, r1
    a988:	8a 54       	subi	r24, 0x4A	; 74
    a98a:	92 4f       	sbci	r25, 0xF2	; 242
    a98c:	fc 01       	movw	r30, r24
    a98e:	e2 5d       	subi	r30, 0xD2	; 210
    a990:	fe 4f       	sbci	r31, 0xFE	; 254
    a992:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    a994:	34 97       	sbiw	r30, 0x04	; 4
    a996:	71 83       	std	Z+1, r23	; 0x01
    a998:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    a99a:	32 96       	adiw	r30, 0x02	; 2
    a99c:	51 83       	std	Z+1, r21	; 0x01
    a99e:	40 83       	st	Z, r20
	}
}
    a9a0:	df 91       	pop	r29
    a9a2:	cf 91       	pop	r28
    a9a4:	1f 91       	pop	r17
    a9a6:	0f 91       	pop	r16
    a9a8:	08 95       	ret

0000a9aa <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    a9aa:	95 e3       	ldi	r25, 0x35	; 53
    a9ac:	89 9f       	mul	r24, r25
    a9ae:	90 01       	movw	r18, r0
    a9b0:	11 24       	eor	r1, r1
    a9b2:	2a 54       	subi	r18, 0x4A	; 74
    a9b4:	32 4f       	sbci	r19, 0xF2	; 242
    a9b6:	f9 01       	movw	r30, r18
    a9b8:	e0 5e       	subi	r30, 0xE0	; 224
    a9ba:	fe 4f       	sbci	r31, 0xFE	; 254
    a9bc:	91 e0       	ldi	r25, 0x01	; 1
    a9be:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    a9c0:	32 96       	adiw	r30, 0x02	; 2
    a9c2:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    a9c4:	31 97       	sbiw	r30, 0x01	; 1
    a9c6:	a8 e0       	ldi	r26, 0x08	; 8
    a9c8:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    a9ca:	32 96       	adiw	r30, 0x02	; 2
    a9cc:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a9ce:	31 96       	adiw	r30, 0x01	; 1
    a9d0:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    a9d2:	31 96       	adiw	r30, 0x01	; 1
    a9d4:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    a9d6:	31 96       	adiw	r30, 0x01	; 1
    a9d8:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a9da:	31 96       	adiw	r30, 0x01	; 1
    a9dc:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    a9de:	32 96       	adiw	r30, 0x02	; 2
    a9e0:	92 e0       	ldi	r25, 0x02	; 2
    a9e2:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    a9e4:	76 96       	adiw	r30, 0x16	; 22
    a9e6:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    a9e8:	31 96       	adiw	r30, 0x01	; 1
    a9ea:	9a e0       	ldi	r25, 0x0A	; 10
    a9ec:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    a9ee:	d9 01       	movw	r26, r18
    a9f0:	ac 5b       	subi	r26, 0xBC	; 188
    a9f2:	be 4f       	sbci	r27, 0xFE	; 254
    a9f4:	ee ed       	ldi	r30, 0xDE	; 222
    a9f6:	ff e0       	ldi	r31, 0x0F	; 15
    a9f8:	ed 93       	st	X+, r30
    a9fa:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    a9fc:	a4 e4       	ldi	r26, 0x44	; 68
    a9fe:	b0 e3       	ldi	r27, 0x30	; 48
    aa00:	b1 83       	std	Z+1, r27	; 0x01
    aa02:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    aa04:	a1 e4       	ldi	r26, 0x41	; 65
    aa06:	b0 e3       	ldi	r27, 0x30	; 48
    aa08:	b3 83       	std	Z+3, r27	; 0x03
    aa0a:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    aa0c:	f9 01       	movw	r30, r18
    aa0e:	e1 5e       	subi	r30, 0xE1	; 225
    aa10:	fe 4f       	sbci	r31, 0xFE	; 254
    aa12:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    aa14:	31 97       	sbiw	r30, 0x01	; 1
    aa16:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    aa18:	31 97       	sbiw	r30, 0x01	; 1
    aa1a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aa1c:	34 97       	sbiw	r30, 0x04	; 4
    aa1e:	71 83       	std	Z+1, r23	; 0x01
    aa20:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aa22:	32 96       	adiw	r30, 0x02	; 2
    aa24:	51 83       	std	Z+1, r21	; 0x01
    aa26:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aa28:	20 e0       	ldi	r18, 0x00	; 0
    aa2a:	0c 94 58 54 	jmp	0xa8b0	; 0xa8b0 <init_enemy_shot>

0000aa2e <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aa2e:	95 e3       	ldi	r25, 0x35	; 53
    aa30:	89 9f       	mul	r24, r25
    aa32:	90 01       	movw	r18, r0
    aa34:	11 24       	eor	r1, r1
    aa36:	2a 54       	subi	r18, 0x4A	; 74
    aa38:	32 4f       	sbci	r19, 0xF2	; 242
    aa3a:	f9 01       	movw	r30, r18
    aa3c:	ef 5d       	subi	r30, 0xDF	; 223
    aa3e:	fe 4f       	sbci	r31, 0xFE	; 254
    aa40:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aa42:	31 97       	sbiw	r30, 0x01	; 1
    aa44:	91 e0       	ldi	r25, 0x01	; 1
    aa46:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aa48:	32 96       	adiw	r30, 0x02	; 2
    aa4a:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    aa4c:	31 96       	adiw	r30, 0x01	; 1
    aa4e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aa50:	31 96       	adiw	r30, 0x01	; 1
    aa52:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    aa54:	31 96       	adiw	r30, 0x01	; 1
    aa56:	a3 e0       	ldi	r26, 0x03	; 3
    aa58:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    aa5a:	31 96       	adiw	r30, 0x01	; 1
    aa5c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aa5e:	31 96       	adiw	r30, 0x01	; 1
    aa60:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    aa62:	32 96       	adiw	r30, 0x02	; 2
    aa64:	a2 e0       	ldi	r26, 0x02	; 2
    aa66:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    aa68:	76 96       	adiw	r30, 0x16	; 22
    aa6a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    aa6c:	31 96       	adiw	r30, 0x01	; 1
    aa6e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    aa70:	d9 01       	movw	r26, r18
    aa72:	ac 5b       	subi	r26, 0xBC	; 188
    aa74:	be 4f       	sbci	r27, 0xFE	; 254
    aa76:	e4 e3       	ldi	r30, 0x34	; 52
    aa78:	f0 e1       	ldi	r31, 0x10	; 16
    aa7a:	ed 93       	st	X+, r30
    aa7c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    aa7e:	ab e3       	ldi	r26, 0x3B	; 59
    aa80:	b0 e3       	ldi	r27, 0x30	; 48
    aa82:	b1 83       	std	Z+1, r27	; 0x01
    aa84:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aa86:	f9 01       	movw	r30, r18
    aa88:	e1 5e       	subi	r30, 0xE1	; 225
    aa8a:	fe 4f       	sbci	r31, 0xFE	; 254
    aa8c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    aa8e:	31 97       	sbiw	r30, 0x01	; 1
    aa90:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    aa92:	31 97       	sbiw	r30, 0x01	; 1
    aa94:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aa96:	34 97       	sbiw	r30, 0x04	; 4
    aa98:	71 83       	std	Z+1, r23	; 0x01
    aa9a:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aa9c:	32 96       	adiw	r30, 0x02	; 2
    aa9e:	51 83       	std	Z+1, r21	; 0x01
    aaa0:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aaa2:	20 e0       	ldi	r18, 0x00	; 0
    aaa4:	0c 94 58 54 	jmp	0xa8b0	; 0xa8b0 <init_enemy_shot>

0000aaa8 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aaa8:	95 e3       	ldi	r25, 0x35	; 53
    aaaa:	89 9f       	mul	r24, r25
    aaac:	90 01       	movw	r18, r0
    aaae:	11 24       	eor	r1, r1
    aab0:	2a 54       	subi	r18, 0x4A	; 74
    aab2:	32 4f       	sbci	r19, 0xF2	; 242
    aab4:	f9 01       	movw	r30, r18
    aab6:	ef 5d       	subi	r30, 0xDF	; 223
    aab8:	fe 4f       	sbci	r31, 0xFE	; 254
    aaba:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aabc:	31 97       	sbiw	r30, 0x01	; 1
    aabe:	91 e0       	ldi	r25, 0x01	; 1
    aac0:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aac2:	32 96       	adiw	r30, 0x02	; 2
    aac4:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    aac6:	31 96       	adiw	r30, 0x01	; 1
    aac8:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aaca:	31 96       	adiw	r30, 0x01	; 1
    aacc:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    aace:	31 96       	adiw	r30, 0x01	; 1
    aad0:	a4 e0       	ldi	r26, 0x04	; 4
    aad2:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    aad4:	31 96       	adiw	r30, 0x01	; 1
    aad6:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aad8:	31 96       	adiw	r30, 0x01	; 1
    aada:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    aadc:	32 96       	adiw	r30, 0x02	; 2
    aade:	a2 e0       	ldi	r26, 0x02	; 2
    aae0:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    aae2:	76 96       	adiw	r30, 0x16	; 22
    aae4:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    aae6:	31 96       	adiw	r30, 0x01	; 1
    aae8:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    aaea:	d9 01       	movw	r26, r18
    aaec:	ac 5b       	subi	r26, 0xBC	; 188
    aaee:	be 4f       	sbci	r27, 0xFE	; 254
    aaf0:	e8 e4       	ldi	r30, 0x48	; 72
    aaf2:	f0 e1       	ldi	r31, 0x10	; 16
    aaf4:	ed 93       	st	X+, r30
    aaf6:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    aaf8:	a8 e3       	ldi	r26, 0x38	; 56
    aafa:	b0 e3       	ldi	r27, 0x30	; 48
    aafc:	b1 83       	std	Z+1, r27	; 0x01
    aafe:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ab00:	f9 01       	movw	r30, r18
    ab02:	e1 5e       	subi	r30, 0xE1	; 225
    ab04:	fe 4f       	sbci	r31, 0xFE	; 254
    ab06:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    ab08:	31 97       	sbiw	r30, 0x01	; 1
    ab0a:	92 ee       	ldi	r25, 0xE2	; 226
    ab0c:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ab0e:	31 97       	sbiw	r30, 0x01	; 1
    ab10:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab12:	34 97       	sbiw	r30, 0x04	; 4
    ab14:	71 83       	std	Z+1, r23	; 0x01
    ab16:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab18:	32 96       	adiw	r30, 0x02	; 2
    ab1a:	51 83       	std	Z+1, r21	; 0x01
    ab1c:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ab1e:	20 e0       	ldi	r18, 0x00	; 0
    ab20:	0c 94 58 54 	jmp	0xa8b0	; 0xa8b0 <init_enemy_shot>

0000ab24 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ab24:	95 e3       	ldi	r25, 0x35	; 53
    ab26:	89 9f       	mul	r24, r25
    ab28:	90 01       	movw	r18, r0
    ab2a:	11 24       	eor	r1, r1
    ab2c:	2a 54       	subi	r18, 0x4A	; 74
    ab2e:	32 4f       	sbci	r19, 0xF2	; 242
    ab30:	f9 01       	movw	r30, r18
    ab32:	ef 5d       	subi	r30, 0xDF	; 223
    ab34:	fe 4f       	sbci	r31, 0xFE	; 254
    ab36:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ab38:	31 97       	sbiw	r30, 0x01	; 1
    ab3a:	91 e0       	ldi	r25, 0x01	; 1
    ab3c:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ab3e:	33 96       	adiw	r30, 0x03	; 3
    ab40:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ab42:	31 96       	adiw	r30, 0x01	; 1
    ab44:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    ab46:	31 96       	adiw	r30, 0x01	; 1
    ab48:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    ab4a:	31 96       	adiw	r30, 0x01	; 1
    ab4c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ab4e:	31 96       	adiw	r30, 0x01	; 1
    ab50:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    ab52:	32 96       	adiw	r30, 0x02	; 2
    ab54:	a4 e0       	ldi	r26, 0x04	; 4
    ab56:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ab58:	76 96       	adiw	r30, 0x16	; 22
    ab5a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ab5c:	31 96       	adiw	r30, 0x01	; 1
    ab5e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    ab60:	d9 01       	movw	r26, r18
    ab62:	ac 5b       	subi	r26, 0xBC	; 188
    ab64:	be 4f       	sbci	r27, 0xFE	; 254
    ab66:	e2 ee       	ldi	r30, 0xE2	; 226
    ab68:	ff e0       	ldi	r31, 0x0F	; 15
    ab6a:	ed 93       	st	X+, r30
    ab6c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    ab6e:	aa e4       	ldi	r26, 0x4A	; 74
    ab70:	b0 e3       	ldi	r27, 0x30	; 48
    ab72:	b1 83       	std	Z+1, r27	; 0x01
    ab74:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ab76:	f9 01       	movw	r30, r18
    ab78:	e1 5e       	subi	r30, 0xE1	; 225
    ab7a:	fe 4f       	sbci	r31, 0xFE	; 254
    ab7c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    ab7e:	31 97       	sbiw	r30, 0x01	; 1
    ab80:	9e e1       	ldi	r25, 0x1E	; 30
    ab82:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ab84:	31 97       	sbiw	r30, 0x01	; 1
    ab86:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab88:	34 97       	sbiw	r30, 0x04	; 4
    ab8a:	71 83       	std	Z+1, r23	; 0x01
    ab8c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab8e:	32 96       	adiw	r30, 0x02	; 2
    ab90:	51 83       	std	Z+1, r21	; 0x01
    ab92:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ab94:	20 e0       	ldi	r18, 0x00	; 0
    ab96:	0c 94 58 54 	jmp	0xa8b0	; 0xa8b0 <init_enemy_shot>

0000ab9a <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ab9a:	95 e3       	ldi	r25, 0x35	; 53
    ab9c:	89 9f       	mul	r24, r25
    ab9e:	90 01       	movw	r18, r0
    aba0:	11 24       	eor	r1, r1
    aba2:	2a 54       	subi	r18, 0x4A	; 74
    aba4:	32 4f       	sbci	r19, 0xF2	; 242
    aba6:	f9 01       	movw	r30, r18
    aba8:	ef 5d       	subi	r30, 0xDF	; 223
    abaa:	fe 4f       	sbci	r31, 0xFE	; 254
    abac:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    abae:	31 97       	sbiw	r30, 0x01	; 1
    abb0:	91 e0       	ldi	r25, 0x01	; 1
    abb2:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    abb4:	33 96       	adiw	r30, 0x03	; 3
    abb6:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    abb8:	31 96       	adiw	r30, 0x01	; 1
    abba:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    abbc:	31 96       	adiw	r30, 0x01	; 1
    abbe:	a5 e0       	ldi	r26, 0x05	; 5
    abc0:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    abc2:	31 96       	adiw	r30, 0x01	; 1
    abc4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    abc6:	31 96       	adiw	r30, 0x01	; 1
    abc8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    abca:	32 96       	adiw	r30, 0x02	; 2
    abcc:	a4 e0       	ldi	r26, 0x04	; 4
    abce:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    abd0:	76 96       	adiw	r30, 0x16	; 22
    abd2:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    abd4:	31 96       	adiw	r30, 0x01	; 1
    abd6:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    abd8:	d9 01       	movw	r26, r18
    abda:	ac 5b       	subi	r26, 0xBC	; 188
    abdc:	be 4f       	sbci	r27, 0xFE	; 254
    abde:	e6 e4       	ldi	r30, 0x46	; 70
    abe0:	f0 e1       	ldi	r31, 0x10	; 16
    abe2:	ed 93       	st	X+, r30
    abe4:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    abe6:	ae e3       	ldi	r26, 0x3E	; 62
    abe8:	b0 e3       	ldi	r27, 0x30	; 48
    abea:	b1 83       	std	Z+1, r27	; 0x01
    abec:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    abee:	f9 01       	movw	r30, r18
    abf0:	e1 5e       	subi	r30, 0xE1	; 225
    abf2:	fe 4f       	sbci	r31, 0xFE	; 254
    abf4:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    abf6:	31 97       	sbiw	r30, 0x01	; 1
    abf8:	9a e0       	ldi	r25, 0x0A	; 10
    abfa:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    abfc:	31 97       	sbiw	r30, 0x01	; 1
    abfe:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ac00:	34 97       	sbiw	r30, 0x04	; 4
    ac02:	71 83       	std	Z+1, r23	; 0x01
    ac04:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac06:	32 96       	adiw	r30, 0x02	; 2
    ac08:	51 83       	std	Z+1, r21	; 0x01
    ac0a:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ac0c:	20 e0       	ldi	r18, 0x00	; 0
    ac0e:	0c 94 58 54 	jmp	0xa8b0	; 0xa8b0 <init_enemy_shot>

0000ac12 <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ac12:	95 e3       	ldi	r25, 0x35	; 53
    ac14:	89 9f       	mul	r24, r25
    ac16:	90 01       	movw	r18, r0
    ac18:	11 24       	eor	r1, r1
    ac1a:	2a 54       	subi	r18, 0x4A	; 74
    ac1c:	32 4f       	sbci	r19, 0xF2	; 242
    ac1e:	f9 01       	movw	r30, r18
    ac20:	ef 5d       	subi	r30, 0xDF	; 223
    ac22:	fe 4f       	sbci	r31, 0xFE	; 254
    ac24:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ac26:	31 97       	sbiw	r30, 0x01	; 1
    ac28:	91 e0       	ldi	r25, 0x01	; 1
    ac2a:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ac2c:	33 96       	adiw	r30, 0x03	; 3
    ac2e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ac30:	31 96       	adiw	r30, 0x01	; 1
    ac32:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    ac34:	31 96       	adiw	r30, 0x01	; 1
    ac36:	a8 e0       	ldi	r26, 0x08	; 8
    ac38:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ac3a:	31 96       	adiw	r30, 0x01	; 1
    ac3c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ac3e:	31 96       	adiw	r30, 0x01	; 1
    ac40:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    ac42:	32 96       	adiw	r30, 0x02	; 2
    ac44:	a4 e0       	ldi	r26, 0x04	; 4
    ac46:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ac48:	76 96       	adiw	r30, 0x16	; 22
    ac4a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ac4c:	31 96       	adiw	r30, 0x01	; 1
    ac4e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    ac50:	d9 01       	movw	r26, r18
    ac52:	ac 5b       	subi	r26, 0xBC	; 188
    ac54:	be 4f       	sbci	r27, 0xFE	; 254
    ac56:	e8 e5       	ldi	r30, 0x58	; 88
    ac58:	f0 e1       	ldi	r31, 0x10	; 16
    ac5a:	ed 93       	st	X+, r30
    ac5c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    ac5e:	a7 e4       	ldi	r26, 0x47	; 71
    ac60:	b0 e3       	ldi	r27, 0x30	; 48
    ac62:	b1 83       	std	Z+1, r27	; 0x01
    ac64:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ac66:	f9 01       	movw	r30, r18
    ac68:	e1 5e       	subi	r30, 0xE1	; 225
    ac6a:	fe 4f       	sbci	r31, 0xFE	; 254
    ac6c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    ac6e:	31 97       	sbiw	r30, 0x01	; 1
    ac70:	94 e1       	ldi	r25, 0x14	; 20
    ac72:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    ac74:	31 97       	sbiw	r30, 0x01	; 1
    ac76:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    ac78:	34 97       	sbiw	r30, 0x04	; 4
    ac7a:	71 83       	std	Z+1, r23	; 0x01
    ac7c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac7e:	32 96       	adiw	r30, 0x02	; 2
    ac80:	51 83       	std	Z+1, r21	; 0x01
    ac82:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ac84:	20 e0       	ldi	r18, 0x00	; 0
    ac86:	0c 94 58 54 	jmp	0xa8b0	; 0xa8b0 <init_enemy_shot>

0000ac8a <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ac8a:	95 e3       	ldi	r25, 0x35	; 53
    ac8c:	89 9f       	mul	r24, r25
    ac8e:	90 01       	movw	r18, r0
    ac90:	11 24       	eor	r1, r1
    ac92:	2a 54       	subi	r18, 0x4A	; 74
    ac94:	32 4f       	sbci	r19, 0xF2	; 242
    ac96:	f9 01       	movw	r30, r18
    ac98:	ef 5d       	subi	r30, 0xDF	; 223
    ac9a:	fe 4f       	sbci	r31, 0xFE	; 254
    ac9c:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ac9e:	31 97       	sbiw	r30, 0x01	; 1
    aca0:	91 e0       	ldi	r25, 0x01	; 1
    aca2:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aca4:	32 96       	adiw	r30, 0x02	; 2
    aca6:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    aca8:	31 96       	adiw	r30, 0x01	; 1
    acaa:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    acac:	31 96       	adiw	r30, 0x01	; 1
    acae:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    acb0:	31 96       	adiw	r30, 0x01	; 1
    acb2:	a6 e0       	ldi	r26, 0x06	; 6
    acb4:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    acb6:	31 96       	adiw	r30, 0x01	; 1
    acb8:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    acba:	31 96       	adiw	r30, 0x01	; 1
    acbc:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    acbe:	32 96       	adiw	r30, 0x02	; 2
    acc0:	a8 e0       	ldi	r26, 0x08	; 8
    acc2:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    acc4:	76 96       	adiw	r30, 0x16	; 22
    acc6:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    acc8:	31 96       	adiw	r30, 0x01	; 1
    acca:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    accc:	d9 01       	movw	r26, r18
    acce:	ac 5b       	subi	r26, 0xBC	; 188
    acd0:	be 4f       	sbci	r27, 0xFE	; 254
    acd2:	e4 e3       	ldi	r30, 0x34	; 52
    acd4:	f0 e1       	ldi	r31, 0x10	; 16
    acd6:	ed 93       	st	X+, r30
    acd8:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    acda:	a5 e3       	ldi	r26, 0x35	; 53
    acdc:	b0 e3       	ldi	r27, 0x30	; 48
    acde:	b1 83       	std	Z+1, r27	; 0x01
    ace0:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ace2:	f9 01       	movw	r30, r18
    ace4:	e1 5e       	subi	r30, 0xE1	; 225
    ace6:	fe 4f       	sbci	r31, 0xFE	; 254
    ace8:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    acea:	31 97       	sbiw	r30, 0x01	; 1
    acec:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    acee:	31 97       	sbiw	r30, 0x01	; 1
    acf0:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    acf2:	34 97       	sbiw	r30, 0x04	; 4
    acf4:	71 83       	std	Z+1, r23	; 0x01
    acf6:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    acf8:	32 96       	adiw	r30, 0x02	; 2
    acfa:	51 83       	std	Z+1, r21	; 0x01
    acfc:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    acfe:	21 e0       	ldi	r18, 0x01	; 1
    ad00:	0c 94 58 54 	jmp	0xa8b0	; 0xa8b0 <init_enemy_shot>

0000ad04 <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    ad04:	cf 93       	push	r28
    ad06:	df 93       	push	r29
    ad08:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    ad0a:	95 e3       	ldi	r25, 0x35	; 53
    ad0c:	89 9f       	mul	r24, r25
    ad0e:	90 01       	movw	r18, r0
    ad10:	11 24       	eor	r1, r1
    ad12:	2a 54       	subi	r18, 0x4A	; 74
    ad14:	32 4f       	sbci	r19, 0xF2	; 242
    ad16:	f9 01       	movw	r30, r18
    ad18:	ef 5d       	subi	r30, 0xDF	; 223
    ad1a:	fe 4f       	sbci	r31, 0xFE	; 254
    ad1c:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ad1e:	31 97       	sbiw	r30, 0x01	; 1
    ad20:	91 e0       	ldi	r25, 0x01	; 1
    ad22:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ad24:	32 96       	adiw	r30, 0x02	; 2
    ad26:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ad28:	31 96       	adiw	r30, 0x01	; 1
    ad2a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ad2c:	31 96       	adiw	r30, 0x01	; 1
    ad2e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    ad30:	31 96       	adiw	r30, 0x01	; 1
    ad32:	47 e0       	ldi	r20, 0x07	; 7
    ad34:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    ad36:	31 96       	adiw	r30, 0x01	; 1
    ad38:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ad3a:	31 96       	adiw	r30, 0x01	; 1
    ad3c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    ad3e:	32 96       	adiw	r30, 0x02	; 2
    ad40:	48 e0       	ldi	r20, 0x08	; 8
    ad42:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    ad44:	76 96       	adiw	r30, 0x16	; 22
    ad46:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ad48:	31 96       	adiw	r30, 0x01	; 1
    ad4a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ad4c:	d9 01       	movw	r26, r18
    ad4e:	ac 5b       	subi	r26, 0xBC	; 188
    ad50:	be 4f       	sbci	r27, 0xFE	; 254
    ad52:	e4 e3       	ldi	r30, 0x34	; 52
    ad54:	f0 e1       	ldi	r31, 0x10	; 16
    ad56:	ed 93       	st	X+, r30
    ad58:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    ad5a:	42 e3       	ldi	r20, 0x32	; 50
    ad5c:	50 e3       	ldi	r21, 0x30	; 48
    ad5e:	51 83       	std	Z+1, r21	; 0x01
    ad60:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    ad62:	f9 01       	movw	r30, r18
    ad64:	e1 5e       	subi	r30, 0xE1	; 225
    ad66:	fe 4f       	sbci	r31, 0xFE	; 254
    ad68:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ad6a:	31 97       	sbiw	r30, 0x01	; 1
    ad6c:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ad6e:	31 97       	sbiw	r30, 0x01	; 1
    ad70:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ad72:	34 97       	sbiw	r30, 0x04	; 4
    ad74:	71 83       	std	Z+1, r23	; 0x01
    ad76:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad78:	32 96       	adiw	r30, 0x02	; 2
    ad7a:	d1 83       	std	Z+1, r29	; 0x01
    ad7c:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    ad7e:	21 e0       	ldi	r18, 0x01	; 1
    ad80:	ae 01       	movw	r20, r28
    ad82:	0e 94 58 54 	call	0xa8b0	; 0xa8b0 <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    ad86:	be 01       	movw	r22, r28
    ad88:	83 e0       	ldi	r24, 0x03	; 3
    ad8a:	76 95       	lsr	r23
    ad8c:	67 95       	ror	r22
    ad8e:	8a 95       	dec	r24
    ad90:	e1 f7       	brne	.-8      	; 0xad8a <init_enemy_boss_eye+0x86>
    ad92:	90 91 d4 0d 	lds	r25, 0x0DD4
    ad96:	40 e0       	ldi	r20, 0x00	; 0
    ad98:	50 e0       	ldi	r21, 0x00	; 0
    ad9a:	80 e2       	ldi	r24, 0x20	; 32
    ad9c:	89 1b       	sub	r24, r25
}
    ad9e:	df 91       	pop	r29
    ada0:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    ada2:	0c 94 2c 3e 	jmp	0x7c58	; 0x7c58 <SetTile>

0000ada6 <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    ada6:	40 e2       	ldi	r20, 0x20	; 32
    ada8:	50 e0       	ldi	r21, 0x00	; 0
    adaa:	68 ec       	ldi	r22, 0xC8	; 200
    adac:	77 e0       	ldi	r23, 0x07	; 7
    adae:	80 e0       	ldi	r24, 0x00	; 0
    adb0:	0e 94 45 56 	call	0xac8a	; 0xac8a <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    adb4:	40 e3       	ldi	r20, 0x30	; 48
    adb6:	50 e0       	ldi	r21, 0x00	; 0
    adb8:	68 ec       	ldi	r22, 0xC8	; 200
    adba:	77 e0       	ldi	r23, 0x07	; 7
    adbc:	81 e0       	ldi	r24, 0x01	; 1
    adbe:	0e 94 45 56 	call	0xac8a	; 0xac8a <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    adc2:	40 e9       	ldi	r20, 0x90	; 144
    adc4:	50 e0       	ldi	r21, 0x00	; 0
    adc6:	68 ec       	ldi	r22, 0xC8	; 200
    adc8:	77 e0       	ldi	r23, 0x07	; 7
    adca:	82 e0       	ldi	r24, 0x02	; 2
    adcc:	0e 94 45 56 	call	0xac8a	; 0xac8a <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    add0:	40 ea       	ldi	r20, 0xA0	; 160
    add2:	50 e0       	ldi	r21, 0x00	; 0
    add4:	68 ec       	ldi	r22, 0xC8	; 200
    add6:	77 e0       	ldi	r23, 0x07	; 7
    add8:	83 e0       	ldi	r24, 0x03	; 3
    adda:	0e 94 45 56 	call	0xac8a	; 0xac8a <init_enemy_boss_turret>
	game.active_enemies = 4;
    adde:	84 e0       	ldi	r24, 0x04	; 4
    ade0:	80 93 d1 0d 	sts	0x0DD1, r24
    ade4:	08 95       	ret

0000ade6 <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    ade6:	ef 92       	push	r14
    ade8:	ff 92       	push	r15
    adea:	0f 93       	push	r16
    adec:	1f 93       	push	r17
    adee:	cf 93       	push	r28
    adf0:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    adf2:	06 eb       	ldi	r16, 0xB6	; 182
    adf4:	1d e0       	ldi	r17, 0x0D	; 13
    adf6:	f8 01       	movw	r30, r16
    adf8:	86 8d       	ldd	r24, Z+30	; 0x1e
    adfa:	c0 e0       	ldi	r28, 0x00	; 0
    adfc:	d1 e0       	ldi	r29, 0x01	; 1
    adfe:	9e 01       	movw	r18, r28
    ae00:	28 1b       	sub	r18, r24
    ae02:	31 09       	sbc	r19, r1
    ae04:	83 e0       	ldi	r24, 0x03	; 3
    ae06:	22 0f       	add	r18, r18
    ae08:	33 1f       	adc	r19, r19
    ae0a:	8a 95       	dec	r24
    ae0c:	e1 f7       	brne	.-8      	; 0xae06 <init_enemy_boss_eyes+0x20>
    ae0e:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae12:	65 e0       	ldi	r22, 0x05	; 5
    ae14:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    ae18:	89 2f       	mov	r24, r25
    ae1a:	48 e5       	ldi	r20, 0x58	; 88
    ae1c:	50 e0       	ldi	r21, 0x00	; 0
    ae1e:	b9 01       	movw	r22, r18
    ae20:	0e 94 82 56 	call	0xad04	; 0xad04 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    ae24:	f8 01       	movw	r30, r16
    ae26:	86 8d       	ldd	r24, Z+30	; 0x1e
    ae28:	9e 01       	movw	r18, r28
    ae2a:	28 1b       	sub	r18, r24
    ae2c:	31 09       	sbc	r19, r1
    ae2e:	93 e0       	ldi	r25, 0x03	; 3
    ae30:	22 0f       	add	r18, r18
    ae32:	33 1f       	adc	r19, r19
    ae34:	9a 95       	dec	r25
    ae36:	e1 f7       	brne	.-8      	; 0xae30 <init_enemy_boss_eyes+0x4a>
    ae38:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae3c:	90 e0       	ldi	r25, 0x00	; 0
    ae3e:	01 96       	adiw	r24, 0x01	; 1
    ae40:	45 e0       	ldi	r20, 0x05	; 5
    ae42:	e4 2e       	mov	r14, r20
    ae44:	f1 2c       	mov	r15, r1
    ae46:	b7 01       	movw	r22, r14
    ae48:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    ae4c:	40 e6       	ldi	r20, 0x60	; 96
    ae4e:	50 e0       	ldi	r21, 0x00	; 0
    ae50:	b9 01       	movw	r22, r18
    ae52:	0e 94 82 56 	call	0xad04	; 0xad04 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    ae56:	f8 01       	movw	r30, r16
    ae58:	86 8d       	ldd	r24, Z+30	; 0x1e
    ae5a:	c8 1b       	sub	r28, r24
    ae5c:	d1 09       	sbc	r29, r1
    ae5e:	53 e0       	ldi	r21, 0x03	; 3
    ae60:	cc 0f       	add	r28, r28
    ae62:	dd 1f       	adc	r29, r29
    ae64:	5a 95       	dec	r21
    ae66:	e1 f7       	brne	.-8      	; 0xae60 <init_enemy_boss_eyes+0x7a>
    ae68:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae6c:	90 e0       	ldi	r25, 0x00	; 0
    ae6e:	02 96       	adiw	r24, 0x02	; 2
    ae70:	b7 01       	movw	r22, r14
    ae72:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    ae76:	48 e6       	ldi	r20, 0x68	; 104
    ae78:	50 e0       	ldi	r21, 0x00	; 0
    ae7a:	be 01       	movw	r22, r28
    ae7c:	0e 94 82 56 	call	0xad04	; 0xad04 <init_enemy_boss_eye>
	game.active_enemies = 3;
    ae80:	83 e0       	ldi	r24, 0x03	; 3
    ae82:	f8 01       	movw	r30, r16
    ae84:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    ae86:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae8a:	8d 5f       	subi	r24, 0xFD	; 253
    ae8c:	80 93 fa 0c 	sts	0x0CFA, r24
}
    ae90:	df 91       	pop	r29
    ae92:	cf 91       	pop	r28
    ae94:	1f 91       	pop	r17
    ae96:	0f 91       	pop	r16
    ae98:	ff 90       	pop	r15
    ae9a:	ef 90       	pop	r14
    ae9c:	08 95       	ret

0000ae9e <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    ae9e:	a8 2f       	mov	r26, r24
    aea0:	b0 e0       	ldi	r27, 0x00	; 0
    aea2:	25 e3       	ldi	r18, 0x35	; 53
    aea4:	82 9f       	mul	r24, r18
    aea6:	c0 01       	movw	r24, r0
    aea8:	11 24       	eor	r1, r1
    aeaa:	8a 54       	subi	r24, 0x4A	; 74
    aeac:	92 4f       	sbci	r25, 0xF2	; 242
    aeae:	fc 01       	movw	r30, r24
    aeb0:	e0 5e       	subi	r30, 0xE0	; 224
    aeb2:	fe 4f       	sbci	r31, 0xFE	; 254
    aeb4:	21 e0       	ldi	r18, 0x01	; 1
    aeb6:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    aeb8:	33 96       	adiw	r30, 0x03	; 3
    aeba:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    aebc:	31 96       	adiw	r30, 0x01	; 1
    aebe:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    aec0:	31 96       	adiw	r30, 0x01	; 1
    aec2:	32 e0       	ldi	r19, 0x02	; 2
    aec4:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    aec6:	31 96       	adiw	r30, 0x01	; 1
    aec8:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aeca:	31 96       	adiw	r30, 0x01	; 1
    aecc:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    aece:	78 96       	adiw	r30, 0x18	; 24
    aed0:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    aed2:	31 96       	adiw	r30, 0x01	; 1
    aed4:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    aed6:	34 96       	adiw	r30, 0x04	; 4
    aed8:	8a e5       	ldi	r24, 0x5A	; 90
    aeda:	90 e1       	ldi	r25, 0x10	; 16
    aedc:	91 83       	std	Z+1, r25	; 0x01
    aede:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    aee0:	80 91 cb 0d 	lds	r24, 0x0DCB
    aee4:	84 30       	cpi	r24, 0x04	; 4
    aee6:	79 f0       	breq	.+30     	; 0xaf06 <init_enemy_level_hazard+0x68>
    aee8:	38 f4       	brcc	.+14     	; 0xaef8 <init_enemy_level_hazard+0x5a>
    aeea:	88 23       	and	r24, r24
    aeec:	91 f0       	breq	.+36     	; 0xaf12 <init_enemy_level_hazard+0x74>
    aeee:	82 30       	cpi	r24, 0x02	; 2
    aef0:	81 f4       	brne	.+32     	; 0xaf12 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    aef2:	89 e2       	ldi	r24, 0x29	; 41
    aef4:	90 e3       	ldi	r25, 0x30	; 48
    aef6:	0f c0       	rjmp	.+30     	; 0xaf16 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    aef8:	86 30       	cpi	r24, 0x06	; 6
    aefa:	41 f0       	breq	.+16     	; 0xaf0c <init_enemy_level_hazard+0x6e>
    aefc:	88 30       	cpi	r24, 0x08	; 8
    aefe:	49 f4       	brne	.+18     	; 0xaf12 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    af00:	80 e2       	ldi	r24, 0x20	; 32
    af02:	90 e3       	ldi	r25, 0x30	; 48
    af04:	08 c0       	rjmp	.+16     	; 0xaf16 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    af06:	86 e2       	ldi	r24, 0x26	; 38
    af08:	90 e3       	ldi	r25, 0x30	; 48
    af0a:	05 c0       	rjmp	.+10     	; 0xaf16 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    af0c:	83 e2       	ldi	r24, 0x23	; 35
    af0e:	90 e3       	ldi	r25, 0x30	; 48
    af10:	02 c0       	rjmp	.+4      	; 0xaf16 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    af12:	8c e2       	ldi	r24, 0x2C	; 44
    af14:	90 e3       	ldi	r25, 0x30	; 48
    af16:	90 93 5b 10 	sts	0x105B, r25
    af1a:	80 93 5a 10 	sts	0x105A, r24
	}
	game.enemies[i].shared.gravity = 0;
    af1e:	25 e3       	ldi	r18, 0x35	; 53
    af20:	2a 9f       	mul	r18, r26
    af22:	c0 01       	movw	r24, r0
    af24:	2b 9f       	mul	r18, r27
    af26:	90 0d       	add	r25, r0
    af28:	11 24       	eor	r1, r1
    af2a:	8a 54       	subi	r24, 0x4A	; 74
    af2c:	92 4f       	sbci	r25, 0xF2	; 242
    af2e:	fc 01       	movw	r30, r24
    af30:	e1 5e       	subi	r30, 0xE1	; 225
    af32:	fe 4f       	sbci	r31, 0xFE	; 254
    af34:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    af36:	32 97       	sbiw	r30, 0x02	; 2
    af38:	2e e1       	ldi	r18, 0x1E	; 30
    af3a:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    af3c:	31 96       	adiw	r30, 0x01	; 1
    af3e:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    af40:	35 97       	sbiw	r30, 0x05	; 5
    af42:	71 83       	std	Z+1, r23	; 0x01
    af44:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    af46:	32 96       	adiw	r30, 0x02	; 2
    af48:	51 83       	std	Z+1, r21	; 0x01
    af4a:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    af4c:	3d 96       	adiw	r30, 0x0d	; 13
    af4e:	83 e0       	ldi	r24, 0x03	; 3
    af50:	56 95       	lsr	r21
    af52:	47 95       	ror	r20
    af54:	8a 95       	dec	r24
    af56:	e1 f7       	brne	.-8      	; 0xaf50 <init_enemy_level_hazard+0xb2>
    af58:	40 83       	st	Z, r20
    af5a:	08 95       	ret

0000af5c <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    af5c:	cf 93       	push	r28
    af5e:	df 93       	push	r29
    af60:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    af62:	bc 01       	movw	r22, r24
    af64:	88 81       	ld	r24, Y
    af66:	99 81       	ldd	r25, Y+1	; 0x01
    af68:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <EepromReadBlock>
	if (status == 0x03)
    af6c:	83 30       	cpi	r24, 0x03	; 3
    af6e:	29 f4       	brne	.+10     	; 0xaf7a <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    af70:	ce 01       	movw	r24, r28
	}
}
    af72:	df 91       	pop	r29
    af74:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    af76:	0c 94 9e 3f 	jmp	0x7f3c	; 0x7f3c <EepromWriteBlock>
	}
}
    af7a:	df 91       	pop	r29
    af7c:	cf 91       	pop	r28
    af7e:	08 95       	ret

0000af80 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    af80:	1f 93       	push	r17
    af82:	cf 93       	push	r28
    af84:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    af86:	d0 e0       	ldi	r29, 0x00	; 0
    af88:	10 e2       	ldi	r17, 0x20	; 32
    af8a:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    af8c:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    af8e:	c1 17       	cp	r28, r17
    af90:	41 f0       	breq	.+16     	; 0xafa2 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    af92:	40 e0       	ldi	r20, 0x00	; 0
    af94:	50 e0       	ldi	r21, 0x00	; 0
    af96:	6c 2f       	mov	r22, r28
    af98:	8d 2f       	mov	r24, r29
    af9a:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <SetTile>
    af9e:	cf 5f       	subi	r28, 0xFF	; 255
    afa0:	f6 cf       	rjmp	.-20     	; 0xaf8e <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    afa2:	df 5f       	subi	r29, 0xFF	; 255
    afa4:	dc 31       	cpi	r29, 0x1C	; 28
    afa6:	91 f7       	brne	.-28     	; 0xaf8c <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    afa8:	df 91       	pop	r29
    afaa:	cf 91       	pop	r28
    afac:	1f 91       	pop	r17
    afae:	08 95       	ret

0000afb0 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    afb0:	dc 01       	movw	r26, r24
    afb2:	e6 2f       	mov	r30, r22
    afb4:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    afb6:	25 e0       	ldi	r18, 0x05	; 5
    afb8:	62 2f       	mov	r22, r18
    afba:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    afbe:	58 2f       	mov	r21, r24
    afc0:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    afc2:	40 91 cc 0d 	lds	r20, 0x0DCC
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    afc6:	8e 2f       	mov	r24, r30
    afc8:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    afcc:	e8 2f       	mov	r30, r24
    afce:	f0 e0       	ldi	r31, 0x00	; 0
    afd0:	54 9f       	mul	r21, r20
    afd2:	e0 0d       	add	r30, r0
    afd4:	f1 1d       	adc	r31, r1
    afd6:	11 24       	eor	r1, r1
    afd8:	32 96       	adiw	r30, 0x02	; 2
    afda:	ea 0f       	add	r30, r26
    afdc:	fb 1f       	adc	r31, r27
    afde:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    afe0:	e9 2f       	mov	r30, r25
    afe2:	f0 e0       	ldi	r31, 0x00	; 0
    afe4:	95 e0       	ldi	r25, 0x05	; 5
    afe6:	39 9f       	mul	r19, r25
    afe8:	e0 0d       	add	r30, r0
    afea:	f1 1d       	adc	r31, r1
    afec:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    afee:	99 e1       	ldi	r25, 0x19	; 25
    aff0:	89 9f       	mul	r24, r25
    aff2:	e0 0d       	add	r30, r0
    aff4:	f1 1d       	adc	r31, r1
    aff6:	11 24       	eor	r1, r1
    aff8:	e3 59       	subi	r30, 0x93	; 147
    affa:	f5 4a       	sbci	r31, 0xA5	; 165
    affc:	84 91       	lpm	r24, Z
}
    affe:	08 95       	ret

0000b000 <render_camera_view>:

void render_camera_view()
{
    b000:	7f 92       	push	r7
    b002:	8f 92       	push	r8
    b004:	9f 92       	push	r9
    b006:	af 92       	push	r10
    b008:	bf 92       	push	r11
    b00a:	cf 92       	push	r12
    b00c:	df 92       	push	r13
    b00e:	ef 92       	push	r14
    b010:	ff 92       	push	r15
    b012:	0f 93       	push	r16
    b014:	1f 93       	push	r17
    b016:	cf 93       	push	r28
    b018:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b01a:	c0 91 b6 0d 	lds	r28, 0x0DB6
    b01e:	d0 91 b7 0d 	lds	r29, 0x0DB7
    b022:	83 e0       	ldi	r24, 0x03	; 3
    b024:	d6 95       	lsr	r29
    b026:	c7 95       	ror	r28
    b028:	8a 95       	dec	r24
    b02a:	e1 f7       	brne	.-8      	; 0xb024 <render_camera_view+0x24>
    b02c:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b02e:	00 91 be 0d 	lds	r16, 0x0DBE
    b032:	06 95       	lsr	r16
    b034:	06 95       	lsr	r16
    b036:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b038:	dd 27       	eor	r29, r29
    b03a:	7e 01       	movw	r14, r28
    b03c:	4c e1       	ldi	r20, 0x1C	; 28
    b03e:	e4 0e       	add	r14, r20
    b040:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b042:	10 e0       	ldi	r17, 0x00	; 0
    b044:	68 01       	movw	r12, r16
    b046:	89 e1       	ldi	r24, 0x19	; 25
    b048:	c8 0e       	add	r12, r24
    b04a:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b04c:	9e e1       	ldi	r25, 0x1E	; 30
    b04e:	a9 2e       	mov	r10, r25
    b050:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b052:	ec 16       	cp	r14, r28
    b054:	fd 06       	cpc	r15, r29
    b056:	70 f1       	brcs	.+92     	; 0xb0b4 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b058:	48 01       	movw	r8, r16
    b05a:	c8 14       	cp	r12, r8
    b05c:	d9 04       	cpc	r13, r9
    b05e:	40 f1       	brcs	.+80     	; 0xb0b0 <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b060:	48 2d       	mov	r20, r8
    b062:	6c 2f       	mov	r22, r28
    b064:	80 91 d8 0f 	lds	r24, 0x0FD8
    b068:	90 91 d9 0f 	lds	r25, 0x0FD9
    b06c:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b070:	28 2f       	mov	r18, r24
    b072:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b074:	80 91 b6 0c 	lds	r24, 0x0CB6
    b078:	86 95       	lsr	r24
    b07a:	86 95       	lsr	r24
    b07c:	86 95       	lsr	r24
    b07e:	90 e0       	ldi	r25, 0x00	; 0
    b080:	80 1b       	sub	r24, r16
    b082:	91 0b       	sbc	r25, r17
    b084:	88 0d       	add	r24, r8
    b086:	99 1d       	adc	r25, r9
    b088:	b5 01       	movw	r22, r10
    b08a:	0e 94 8c 71 	call	0xe318	; 0xe318 <__udivmodhi4>
    b08e:	90 91 b5 0c 	lds	r25, 0x0CB5
    b092:	96 95       	lsr	r25
    b094:	96 95       	lsr	r25
    b096:	96 95       	lsr	r25
    b098:	97 19       	sub	r25, r7
    b09a:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b09c:	a9 01       	movw	r20, r18
    b09e:	68 2f       	mov	r22, r24
    b0a0:	89 2f       	mov	r24, r25
    b0a2:	8f 71       	andi	r24, 0x1F	; 31
    b0a4:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b0a8:	8f ef       	ldi	r24, 0xFF	; 255
    b0aa:	88 1a       	sub	r8, r24
    b0ac:	98 0a       	sbc	r9, r24
    b0ae:	d5 cf       	rjmp	.-86     	; 0xb05a <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b0b0:	21 96       	adiw	r28, 0x01	; 1
    b0b2:	cf cf       	rjmp	.-98     	; 0xb052 <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b0b4:	df 91       	pop	r29
    b0b6:	cf 91       	pop	r28
    b0b8:	1f 91       	pop	r17
    b0ba:	0f 91       	pop	r16
    b0bc:	ff 90       	pop	r15
    b0be:	ef 90       	pop	r14
    b0c0:	df 90       	pop	r13
    b0c2:	cf 90       	pop	r12
    b0c4:	bf 90       	pop	r11
    b0c6:	af 90       	pop	r10
    b0c8:	9f 90       	pop	r9
    b0ca:	8f 90       	pop	r8
    b0cc:	7f 90       	pop	r7
    b0ce:	08 95       	ret

0000b0d0 <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b0d0:	28 2f       	mov	r18, r24
    b0d2:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b0d4:	80 91 cb 0d 	lds	r24, 0x0DCB
    b0d8:	81 11       	cpse	r24, r1
    b0da:	04 c0       	rjmp	.+8      	; 0xb0e4 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b0dc:	bf 01       	movw	r22, r30
    b0de:	82 2f       	mov	r24, r18
    b0e0:	0c 94 17 55 	jmp	0xaa2e	; 0xaa2e <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b0e4:	82 30       	cpi	r24, 0x02	; 2
    b0e6:	21 f4       	brne	.+8      	; 0xb0f0 <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b0e8:	bf 01       	movw	r22, r30
    b0ea:	82 2f       	mov	r24, r18
    b0ec:	0c 94 d5 54 	jmp	0xa9aa	; 0xa9aa <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b0f0:	84 30       	cpi	r24, 0x04	; 4
    b0f2:	31 f4       	brne	.+12     	; 0xb100 <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b0f4:	48 52       	subi	r20, 0x28	; 40
    b0f6:	51 09       	sbc	r21, r1
    b0f8:	bf 01       	movw	r22, r30
    b0fa:	82 2f       	mov	r24, r18
    b0fc:	0c 94 54 55 	jmp	0xaaa8	; 0xaaa8 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b100:	80 91 d0 0d 	lds	r24, 0x0DD0
    b104:	63 e0       	ldi	r22, 0x03	; 3
    b106:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    b10a:	99 23       	and	r25, r25
    b10c:	39 f3       	breq	.-50     	; 0xb0dc <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b10e:	91 30       	cpi	r25, 0x01	; 1
    b110:	89 f7       	brne	.-30     	; 0xb0f4 <init_level_enemy+0x24>
    b112:	ea cf       	rjmp	.-44     	; 0xb0e8 <init_level_enemy+0x18>

0000b114 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b114:	28 2f       	mov	r18, r24
    b116:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b118:	80 91 cb 0d 	lds	r24, 0x0DCB
    b11c:	81 30       	cpi	r24, 0x01	; 1
    b11e:	21 f4       	brne	.+8      	; 0xb128 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b120:	bf 01       	movw	r22, r30
    b122:	82 2f       	mov	r24, r18
    b124:	0c 94 92 55 	jmp	0xab24	; 0xab24 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b128:	83 30       	cpi	r24, 0x03	; 3
    b12a:	21 f4       	brne	.+8      	; 0xb134 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b12c:	bf 01       	movw	r22, r30
    b12e:	82 2f       	mov	r24, r18
    b130:	0c 94 cd 55 	jmp	0xab9a	; 0xab9a <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    b134:	85 30       	cpi	r24, 0x05	; 5
    b136:	21 f4       	brne	.+8      	; 0xb140 <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    b138:	bf 01       	movw	r22, r30
    b13a:	82 2f       	mov	r24, r18
    b13c:	0c 94 09 56 	jmp	0xac12	; 0xac12 <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    b140:	80 91 d0 0d 	lds	r24, 0x0DD0
    b144:	63 e0       	ldi	r22, 0x03	; 3
    b146:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    b14a:	99 23       	and	r25, r25
    b14c:	49 f3       	breq	.-46     	; 0xb120 <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b14e:	91 30       	cpi	r25, 0x01	; 1
    b150:	99 f7       	brne	.-26     	; 0xb138 <init_space_enemy+0x24>
    b152:	ec cf       	rjmp	.-40     	; 0xb12c <init_space_enemy+0x18>

0000b154 <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b154:	0f 93       	push	r16
    b156:	1f 93       	push	r17
    b158:	cf 93       	push	r28
    b15a:	df 93       	push	r29
    b15c:	00 d0       	rcall	.+0      	; 0xb15e <spawn_enemy+0xa>
    b15e:	00 d0       	rcall	.+0      	; 0xb160 <spawn_enemy+0xc>
    b160:	cd b7       	in	r28, 0x3d	; 61
    b162:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b164:	20 91 b6 0d 	lds	r18, 0x0DB6
    b168:	30 91 b7 0d 	lds	r19, 0x0DB7
    b16c:	28 3c       	cpi	r18, 0xC8	; 200
    b16e:	35 40       	sbci	r19, 0x05	; 5
    b170:	98 f5       	brcc	.+102    	; 0xb1d8 <spawn_enemy+0x84>
    b172:	26 eb       	ldi	r18, 0xB6	; 182
    b174:	3d e0       	ldi	r19, 0x0D	; 13
    b176:	10 e0       	ldi	r17, 0x00	; 0
    b178:	f9 01       	movw	r30, r18
    b17a:	e0 5e       	subi	r30, 0xE0	; 224
    b17c:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b17e:	50 81       	ld	r21, Z
    b180:	51 11       	cpse	r21, r1
    b182:	25 c0       	rjmp	.+74     	; 0xb1ce <spawn_enemy+0x7a>
    b184:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b186:	50 81       	ld	r21, Z
    b188:	51 11       	cpse	r21, r1
    b18a:	21 c0       	rjmp	.+66     	; 0xb1ce <spawn_enemy+0x7a>
    b18c:	04 2f       	mov	r16, r20
    b18e:	ab 01       	movw	r20, r22
    b190:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b192:	4b 83       	std	Y+3, r20	; 0x03
    b194:	5c 83       	std	Y+4, r21	; 0x04
    b196:	89 83       	std	Y+1, r24	; 0x01
    b198:	7a 83       	std	Y+2, r23	; 0x02
    b19a:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    b19e:	4b 81       	ldd	r20, Y+3	; 0x03
    b1a0:	5c 81       	ldd	r21, Y+4	; 0x04
    b1a2:	69 81       	ldd	r22, Y+1	; 0x01
    b1a4:	7a 81       	ldd	r23, Y+2	; 0x02
    b1a6:	88 23       	and	r24, r24
    b1a8:	21 f0       	breq	.+8      	; 0xb1b2 <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b1aa:	81 2f       	mov	r24, r17
    b1ac:	0e 94 8a 58 	call	0xb114	; 0xb114 <init_space_enemy>
    b1b0:	08 c0       	rjmp	.+16     	; 0xb1c2 <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b1b2:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b1b4:	01 11       	cpse	r16, r1
    b1b6:	03 c0       	rjmp	.+6      	; 0xb1be <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b1b8:	0e 94 68 58 	call	0xb0d0	; 0xb0d0 <init_level_enemy>
    b1bc:	02 c0       	rjmp	.+4      	; 0xb1c2 <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b1be:	0e 94 4f 57 	call	0xae9e	; 0xae9e <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b1c2:	80 91 d1 0d 	lds	r24, 0x0DD1
    b1c6:	8f 5f       	subi	r24, 0xFF	; 255
    b1c8:	80 93 d1 0d 	sts	0x0DD1, r24
    b1cc:	05 c0       	rjmp	.+10     	; 0xb1d8 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b1ce:	1f 5f       	subi	r17, 0xFF	; 255
    b1d0:	2b 5c       	subi	r18, 0xCB	; 203
    b1d2:	3f 4f       	sbci	r19, 0xFF	; 255
    b1d4:	15 30       	cpi	r17, 0x05	; 5
    b1d6:	81 f6       	brne	.-96     	; 0xb178 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b1d8:	0f 90       	pop	r0
    b1da:	0f 90       	pop	r0
    b1dc:	0f 90       	pop	r0
    b1de:	0f 90       	pop	r0
    b1e0:	df 91       	pop	r29
    b1e2:	cf 91       	pop	r28
    b1e4:	1f 91       	pop	r17
    b1e6:	0f 91       	pop	r16
    b1e8:	08 95       	ret

0000b1ea <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b1ea:	9f ef       	ldi	r25, 0xFF	; 255
    b1ec:	98 0f       	add	r25, r24
    b1ee:	9e 30       	cpi	r25, 0x0E	; 14
    b1f0:	28 f0       	brcs	.+10     	; 0xb1fc <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    b1f2:	8f 50       	subi	r24, 0x0F	; 15
    b1f4:	8c 30       	cpi	r24, 0x0C	; 12
    b1f6:	20 f0       	brcs	.+8      	; 0xb200 <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b1f8:	80 e0       	ldi	r24, 0x00	; 0
    b1fa:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b1fc:	81 e0       	ldi	r24, 0x01	; 1
    b1fe:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    b200:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b202:	08 95       	ret

0000b204 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b204:	af 92       	push	r10
    b206:	bf 92       	push	r11
    b208:	cf 92       	push	r12
    b20a:	df 92       	push	r13
    b20c:	ef 92       	push	r14
    b20e:	ff 92       	push	r15
    b210:	0f 93       	push	r16
    b212:	1f 93       	push	r17
    b214:	cf 93       	push	r28
    b216:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b218:	66 e1       	ldi	r22, 0x16	; 22
    b21a:	82 e0       	ldi	r24, 0x02	; 2
    b21c:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <LBRandom>
    b220:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b222:	80 91 c7 0d 	lds	r24, 0x0DC7
    b226:	8f 5f       	subi	r24, 0xFF	; 255
    b228:	80 93 c7 0d 	sts	0x0DC7, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b22c:	20 91 d2 0d 	lds	r18, 0x0DD2
    b230:	62 2f       	mov	r22, r18
    b232:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    b236:	89 2f       	mov	r24, r25
    b238:	90 e0       	ldi	r25, 0x00	; 0
    b23a:	30 e0       	ldi	r19, 0x00	; 0
    b23c:	21 50       	subi	r18, 0x01	; 1
    b23e:	31 09       	sbc	r19, r1
    b240:	82 17       	cp	r24, r18
    b242:	93 07       	cpc	r25, r19
    b244:	31 f4       	brne	.+12     	; 0xb252 <append_tile_column+0x4e>
    b246:	bb 24       	eor	r11, r11
    b248:	b3 94       	inc	r11
    b24a:	80 91 d1 0d 	lds	r24, 0x0DD1
    b24e:	85 30       	cpi	r24, 0x05	; 5
    b250:	08 f0       	brcs	.+2      	; 0xb254 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b252:	b1 2c       	mov	r11, r1
    b254:	00 e0       	ldi	r16, 0x00	; 0
    b256:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b258:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    b25a:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b25c:	2e e1       	ldi	r18, 0x1E	; 30
    b25e:	c2 2e       	mov	r12, r18
    b260:	d1 2c       	mov	r13, r1
    b262:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b264:	40 91 be 0d 	lds	r20, 0x0DBE
    b268:	46 95       	lsr	r20
    b26a:	46 95       	lsr	r20
    b26c:	46 95       	lsr	r20
    b26e:	40 0f       	add	r20, r16
    b270:	60 91 bf 0d 	lds	r22, 0x0DBF
    b274:	80 91 d8 0f 	lds	r24, 0x0FD8
    b278:	90 91 d9 0f 	lds	r25, 0x0FD9
    b27c:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    b280:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b282:	28 2f       	mov	r18, r24
    b284:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b286:	80 91 b6 0c 	lds	r24, 0x0CB6
    b28a:	86 95       	lsr	r24
    b28c:	86 95       	lsr	r24
    b28e:	86 95       	lsr	r24
    b290:	a8 01       	movw	r20, r16
    b292:	48 0f       	add	r20, r24
    b294:	51 1d       	adc	r21, r1
    b296:	ca 01       	movw	r24, r20
    b298:	b6 01       	movw	r22, r12
    b29a:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b29e:	a9 01       	movw	r20, r18
    b2a0:	68 2f       	mov	r22, r24
    b2a2:	80 91 c3 0d 	lds	r24, 0x0DC3
    b2a6:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b2aa:	bb 20       	and	r11, r11
    b2ac:	81 f0       	breq	.+32     	; 0xb2ce <append_tile_column+0xca>
    b2ae:	01 15       	cp	r16, r1
    b2b0:	11 05       	cpc	r17, r1
    b2b2:	69 f0       	breq	.+26     	; 0xb2ce <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b2b4:	81 ef       	ldi	r24, 0xF1	; 241
    b2b6:	8e 0d       	add	r24, r14
    b2b8:	85 30       	cpi	r24, 0x05	; 5
    b2ba:	30 f0       	brcs	.+12     	; 0xb2c8 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b2bc:	8f ef       	ldi	r24, 0xFF	; 255
    b2be:	8e 0d       	add	r24, r14
    b2c0:	8e 30       	cpi	r24, 0x0E	; 14
    b2c2:	08 f4       	brcc	.+2      	; 0xb2c6 <append_tile_column+0xc2>
    b2c4:	60 c0       	rjmp	.+192    	; 0xb386 <append_tile_column+0x182>
    b2c6:	03 c0       	rjmp	.+6      	; 0xb2ce <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b2c8:	c1 11       	cpse	r28, r1
    b2ca:	f8 cf       	rjmp	.-16     	; 0xb2bc <append_tile_column+0xb8>
    b2cc:	c0 2f       	mov	r28, r16
    b2ce:	0f 5f       	subi	r16, 0xFF	; 255
    b2d0:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b2d2:	09 31       	cpi	r16, 0x19	; 25
    b2d4:	11 05       	cpc	r17, r1
    b2d6:	29 f6       	brne	.-118    	; 0xb262 <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b2d8:	bb 20       	and	r11, r11
    b2da:	51 f0       	breq	.+20     	; 0xb2f0 <append_tile_column+0xec>
    b2dc:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    b2e0:	88 23       	and	r24, r24
    b2e2:	31 f0       	breq	.+12     	; 0xb2f0 <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b2e4:	ff 0c       	add	r15, r15
    b2e6:	ff 0c       	add	r15, r15
    b2e8:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b2ea:	6f 2d       	mov	r22, r15
    b2ec:	70 e0       	ldi	r23, 0x00	; 0
    b2ee:	32 c0       	rjmp	.+100    	; 0xb354 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b2f0:	cc 23       	and	r28, r28
    b2f2:	f1 f0       	breq	.+60     	; 0xb330 <append_tile_column+0x12c>
    b2f4:	80 91 cb 0d 	lds	r24, 0x0DCB
    b2f8:	90 91 be 0d 	lds	r25, 0x0DBE
    b2fc:	20 91 b6 0d 	lds	r18, 0x0DB6
    b300:	30 91 b7 0d 	lds	r19, 0x0DB7
    b304:	6c 2f       	mov	r22, r28
    b306:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b308:	96 95       	lsr	r25
    b30a:	96 95       	lsr	r25
    b30c:	96 95       	lsr	r25
    b30e:	69 0f       	add	r22, r25
    b310:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b312:	82 30       	cpi	r24, 0x02	; 2
    b314:	19 f4       	brne	.+6      	; 0xb31c <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b316:	61 50       	subi	r22, 0x01	; 1
    b318:	71 09       	sbc	r23, r1
    b31a:	02 c0       	rjmp	.+4      	; 0xb320 <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b31c:	6f 5f       	subi	r22, 0xFF	; 255
    b31e:	7f 4f       	sbci	r23, 0xFF	; 255
    b320:	93 e0       	ldi	r25, 0x03	; 3
    b322:	66 0f       	add	r22, r22
    b324:	77 1f       	adc	r23, r23
    b326:	9a 95       	dec	r25
    b328:	e1 f7       	brne	.-8      	; 0xb322 <append_tile_column+0x11e>
    b32a:	41 e0       	ldi	r20, 0x01	; 1
    b32c:	c9 01       	movw	r24, r18
    b32e:	17 c0       	rjmp	.+46     	; 0xb35e <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b330:	dd 23       	and	r29, r29
    b332:	c9 f0       	breq	.+50     	; 0xb366 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b334:	80 91 be 0d 	lds	r24, 0x0DBE
    b338:	86 95       	lsr	r24
    b33a:	86 95       	lsr	r24
    b33c:	86 95       	lsr	r24
    b33e:	6d 2f       	mov	r22, r29
    b340:	70 e0       	ldi	r23, 0x00	; 0
    b342:	68 0f       	add	r22, r24
    b344:	71 1d       	adc	r23, r1
    b346:	61 50       	subi	r22, 0x01	; 1
    b348:	71 09       	sbc	r23, r1
    b34a:	83 e0       	ldi	r24, 0x03	; 3
    b34c:	66 0f       	add	r22, r22
    b34e:	77 1f       	adc	r23, r23
    b350:	8a 95       	dec	r24
    b352:	e1 f7       	brne	.-8      	; 0xb34c <append_tile_column+0x148>
    b354:	80 91 b6 0d 	lds	r24, 0x0DB6
    b358:	90 91 b7 0d 	lds	r25, 0x0DB7
    b35c:	40 e0       	ldi	r20, 0x00	; 0
    b35e:	80 52       	subi	r24, 0x20	; 32
    b360:	9f 4f       	sbci	r25, 0xFF	; 255
    b362:	0e 94 aa 58 	call	0xb154	; 0xb154 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b366:	80 91 bf 0d 	lds	r24, 0x0DBF
    b36a:	8f 5f       	subi	r24, 0xFF	; 255
    b36c:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_dest_x++;
    b370:	80 91 c3 0d 	lds	r24, 0x0DC3
    b374:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b376:	80 32       	cpi	r24, 0x20	; 32
    b378:	18 f4       	brcc	.+6      	; 0xb380 <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b37a:	80 93 c3 0d 	sts	0x0DC3, r24
    b37e:	07 c0       	rjmp	.+14     	; 0xb38e <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b380:	10 92 c3 0d 	sts	0x0DC3, r1
    b384:	04 c0       	rjmp	.+8      	; 0xb38e <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b386:	d1 11       	cpse	r29, r1
    b388:	a2 cf       	rjmp	.-188    	; 0xb2ce <append_tile_column+0xca>
    b38a:	da 2d       	mov	r29, r10
    b38c:	a0 cf       	rjmp	.-192    	; 0xb2ce <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b38e:	df 91       	pop	r29
    b390:	cf 91       	pop	r28
    b392:	1f 91       	pop	r17
    b394:	0f 91       	pop	r16
    b396:	ff 90       	pop	r15
    b398:	ef 90       	pop	r14
    b39a:	df 90       	pop	r13
    b39c:	cf 90       	pop	r12
    b39e:	bf 90       	pop	r11
    b3a0:	af 90       	pop	r10
    b3a2:	08 95       	ret

0000b3a4 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b3a4:	80 91 b6 0d 	lds	r24, 0x0DB6
    b3a8:	90 91 b7 0d 	lds	r25, 0x0DB7
    b3ac:	01 96       	adiw	r24, 0x01	; 1
    b3ae:	90 93 b7 0d 	sts	0x0DB7, r25
    b3b2:	80 93 b6 0d 	sts	0x0DB6, r24
	Scroll(1,0);
    b3b6:	60 e0       	ldi	r22, 0x00	; 0
    b3b8:	81 e0       	ldi	r24, 0x01	; 1
    b3ba:	0e 94 b8 4b 	call	0x9770	; 0x9770 <Scroll>
	if (++game.scroll_x == 8)
    b3be:	80 91 c1 0d 	lds	r24, 0x0DC1
    b3c2:	8f 5f       	subi	r24, 0xFF	; 255
    b3c4:	88 30       	cpi	r24, 0x08	; 8
    b3c6:	19 f0       	breq	.+6      	; 0xb3ce <move_camera_x+0x2a>
    b3c8:	80 93 c1 0d 	sts	0x0DC1, r24
    b3cc:	08 95       	ret
	{
		game.scroll_x = 0;
    b3ce:	10 92 c1 0d 	sts	0x0DC1, r1
		append_tile_column();
    b3d2:	0c 94 02 59 	jmp	0xb204	; 0xb204 <append_tile_column>

0000b3d6 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b3d6:	82 e0       	ldi	r24, 0x02	; 2
    b3d8:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b3dc:	85 e0       	ldi	r24, 0x05	; 5
    b3de:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.anims = run_anim;
    b3e2:	e8 e3       	ldi	r30, 0x38	; 56
    b3e4:	f0 e1       	ldi	r31, 0x10	; 16
    b3e6:	f0 93 34 0e 	sts	0x0E34, r31
    b3ea:	e0 93 33 0e 	sts	0x0E33, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b3ee:	81 ea       	ldi	r24, 0xA1	; 161
    b3f0:	90 e3       	ldi	r25, 0x30	; 48
    b3f2:	91 83       	std	Z+1, r25	; 0x01
    b3f4:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b3f6:	87 e9       	ldi	r24, 0x97	; 151
    b3f8:	90 e3       	ldi	r25, 0x30	; 48
    b3fa:	93 83       	std	Z+3, r25	; 0x03
    b3fc:	82 83       	std	Z+2, r24	; 0x02
    b3fe:	08 95       	ret

0000b400 <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b400:	a6 eb       	ldi	r26, 0xB6	; 182
    b402:	bd e0       	ldi	r27, 0x0D	; 13
    b404:	90 93 d9 0f 	sts	0x0FD9, r25
    b408:	80 93 d8 0f 	sts	0x0FD8, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b40c:	fc 01       	movw	r30, r24
    b40e:	24 91       	lpm	r18, Z
    b410:	56 96       	adiw	r26, 0x16	; 22
    b412:	2c 93       	st	X, r18
    b414:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b416:	9c 01       	movw	r18, r24
    b418:	2f 5f       	subi	r18, 0xFF	; 255
    b41a:	3f 4f       	sbci	r19, 0xFF	; 255
    b41c:	f9 01       	movw	r30, r18
    b41e:	44 91       	lpm	r20, Z
    b420:	57 96       	adiw	r26, 0x17	; 23
    b422:	4c 93       	st	X, r20
    b424:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b426:	fc 01       	movw	r30, r24
    b428:	84 91       	lpm	r24, Z
    b42a:	98 2f       	mov	r25, r24
    b42c:	99 0f       	add	r25, r25
    b42e:	99 0f       	add	r25, r25
    b430:	89 0f       	add	r24, r25
    b432:	1f 96       	adiw	r26, 0x0f	; 15
    b434:	8c 93       	st	X, r24
    b436:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b438:	f9 01       	movw	r30, r18
    b43a:	24 91       	lpm	r18, Z
    b43c:	82 2f       	mov	r24, r18
    b43e:	88 0f       	add	r24, r24
    b440:	88 0f       	add	r24, r24
    b442:	28 0f       	add	r18, r24
    b444:	50 96       	adiw	r26, 0x10	; 16
    b446:	2c 93       	st	X, r18
    b448:	08 95       	ret

0000b44a <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b44a:	cf 92       	push	r12
    b44c:	df 92       	push	r13
    b44e:	ef 92       	push	r14
    b450:	ff 92       	push	r15
    b452:	0f 93       	push	r16
    b454:	1f 93       	push	r17
    b456:	cf 93       	push	r28
    b458:	df 93       	push	r29
    b45a:	7c 01       	movw	r14, r24
    b45c:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b45e:	88 e0       	ldi	r24, 0x08	; 8
    b460:	48 9f       	mul	r20, r24
    b462:	80 01       	movw	r16, r0
    b464:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b466:	c0 e0       	ldi	r28, 0x00	; 0
    b468:	cd 17       	cp	r28, r29
    b46a:	09 f4       	brne	.+2      	; 0xb46e <on_solid_ground+0x24>
    b46c:	41 c0       	rjmp	.+130    	; 0xb4f0 <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b46e:	f7 01       	movw	r30, r14
    b470:	42 81       	ldd	r20, Z+2	; 0x02
    b472:	53 81       	ldd	r21, Z+3	; 0x03
    b474:	40 0f       	add	r20, r16
    b476:	51 1f       	adc	r21, r17
    b478:	83 e0       	ldi	r24, 0x03	; 3
    b47a:	56 95       	lsr	r21
    b47c:	47 95       	ror	r20
    b47e:	8a 95       	dec	r24
    b480:	e1 f7       	brne	.-8      	; 0xb47a <on_solid_ground+0x30>
    b482:	60 81       	ld	r22, Z
    b484:	71 81       	ldd	r23, Z+1	; 0x01
    b486:	93 e0       	ldi	r25, 0x03	; 3
    b488:	76 95       	lsr	r23
    b48a:	67 95       	ror	r22
    b48c:	9a 95       	dec	r25
    b48e:	e1 f7       	brne	.-8      	; 0xb488 <on_solid_ground+0x3e>
    b490:	6c 0f       	add	r22, r28
    b492:	80 91 d8 0f 	lds	r24, 0x0FD8
    b496:	90 91 d9 0f 	lds	r25, 0x0FD9
    b49a:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    b49e:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b4a0:	f7 01       	movw	r30, r14
    b4a2:	42 81       	ldd	r20, Z+2	; 0x02
    b4a4:	53 81       	ldd	r21, Z+3	; 0x03
    b4a6:	40 0f       	add	r20, r16
    b4a8:	51 1f       	adc	r21, r17
    b4aa:	23 e0       	ldi	r18, 0x03	; 3
    b4ac:	56 95       	lsr	r21
    b4ae:	47 95       	ror	r20
    b4b0:	2a 95       	dec	r18
    b4b2:	e1 f7       	brne	.-8      	; 0xb4ac <on_solid_ground+0x62>
    b4b4:	20 81       	ld	r18, Z
    b4b6:	31 81       	ldd	r19, Z+1	; 0x01
    b4b8:	29 5f       	subi	r18, 0xF9	; 249
    b4ba:	3f 4f       	sbci	r19, 0xFF	; 255
    b4bc:	53 e0       	ldi	r21, 0x03	; 3
    b4be:	36 95       	lsr	r19
    b4c0:	27 95       	ror	r18
    b4c2:	5a 95       	dec	r21
    b4c4:	e1 f7       	brne	.-8      	; 0xb4be <on_solid_ground+0x74>
    b4c6:	6c 2f       	mov	r22, r28
    b4c8:	62 0f       	add	r22, r18
    b4ca:	80 91 d8 0f 	lds	r24, 0x0FD8
    b4ce:	90 91 d9 0f 	lds	r25, 0x0FD9
    b4d2:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    b4d6:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b4d8:	8c 2d       	mov	r24, r12
    b4da:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    b4de:	81 11       	cpse	r24, r1
    b4e0:	09 c0       	rjmp	.+18     	; 0xb4f4 <on_solid_ground+0xaa>
    b4e2:	8d 2d       	mov	r24, r13
    b4e4:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    b4e8:	81 11       	cpse	r24, r1
    b4ea:	04 c0       	rjmp	.+8      	; 0xb4f4 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b4ec:	cf 5f       	subi	r28, 0xFF	; 255
    b4ee:	bc cf       	rjmp	.-136    	; 0xb468 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b4f0:	80 e0       	ldi	r24, 0x00	; 0
    b4f2:	01 c0       	rjmp	.+2      	; 0xb4f6 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b4f4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b4f6:	df 91       	pop	r29
    b4f8:	cf 91       	pop	r28
    b4fa:	1f 91       	pop	r17
    b4fc:	0f 91       	pop	r16
    b4fe:	ff 90       	pop	r15
    b500:	ef 90       	pop	r14
    b502:	df 90       	pop	r13
    b504:	cf 90       	pop	r12
    b506:	08 95       	ret

0000b508 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b508:	9c 01       	movw	r18, r24
    b50a:	80 91 f9 0c 	lds	r24, 0x0CF9
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b50e:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b510:	83 30       	cpi	r24, 0x03	; 3
    b512:	08 f0       	brcs	.+2      	; 0xb516 <find_shot_slot+0xe>
    b514:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b516:	f9 01       	movw	r30, r18
    b518:	48 9f       	mul	r20, r24
    b51a:	e0 0d       	add	r30, r0
    b51c:	f1 1d       	adc	r31, r1
    b51e:	11 24       	eor	r1, r1
    b520:	51 8d       	ldd	r21, Z+25	; 0x19
    b522:	91 e0       	ldi	r25, 0x01	; 1
    b524:	98 0f       	add	r25, r24
    b526:	51 11       	cpse	r21, r1
    b528:	03 c0       	rjmp	.+6      	; 0xb530 <find_shot_slot+0x28>
		{
			return i++;
    b52a:	90 93 f9 0c 	sts	0x0CF9, r25
    b52e:	08 95       	ret
		}
		i++;
    b530:	89 2f       	mov	r24, r25
	}
    b532:	ee cf       	rjmp	.-36     	; 0xb510 <find_shot_slot+0x8>

0000b534 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b534:	bf 92       	push	r11
    b536:	cf 92       	push	r12
    b538:	df 92       	push	r13
    b53a:	ef 92       	push	r14
    b53c:	ff 92       	push	r15
    b53e:	0f 93       	push	r16
    b540:	1f 93       	push	r17
    b542:	cf 93       	push	r28
    b544:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_B && player->active_shots < MAX_PLAYER_SHOTS)
    b546:	fc 01       	movw	r30, r24
    b548:	ec 58       	subi	r30, 0x8C	; 140
    b54a:	ff 4f       	sbci	r31, 0xFF	; 255
    b54c:	20 81       	ld	r18, Z
    b54e:	20 ff       	sbrs	r18, 0
    b550:	a7 c0       	rjmp	.+334    	; 0xb6a0 <update_shot+0x16c>
    b552:	fc 01       	movw	r30, r24
    b554:	27 81       	ldd	r18, Z+7	; 0x07
    b556:	23 30       	cpi	r18, 0x03	; 3
    b558:	08 f0       	brcs	.+2      	; 0xb55c <update_shot+0x28>
    b55a:	a2 c0       	rjmp	.+324    	; 0xb6a0 <update_shot+0x16c>
    b55c:	16 2f       	mov	r17, r22
    b55e:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    b560:	0e 94 84 5a 	call	0xb508	; 0xb508 <find_shot_slot>
    b564:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    b566:	e8 2e       	mov	r14, r24
    b568:	f1 2c       	mov	r15, r1
    b56a:	fe 01       	movw	r30, r28
    b56c:	24 e1       	ldi	r18, 0x14	; 20
    b56e:	82 9f       	mul	r24, r18
    b570:	e0 0d       	add	r30, r0
    b572:	f1 1d       	adc	r31, r1
    b574:	11 24       	eor	r1, r1
    b576:	87 89       	ldd	r24, Z+23	; 0x17
    b578:	86 30       	cpi	r24, 0x06	; 6
    b57a:	29 f4       	brne	.+10     	; 0xb586 <update_shot+0x52>
    b57c:	8a 81       	ldd	r24, Y+2	; 0x02
    b57e:	9b 81       	ldd	r25, Y+3	; 0x03
    b580:	04 97       	sbiw	r24, 0x04	; 4
    b582:	08 f4       	brcc	.+2      	; 0xb586 <update_shot+0x52>
    b584:	8d c0       	rjmp	.+282    	; 0xb6a0 <update_shot+0x16c>
		SFX_PLAYER_SHOOT;
    b586:	2f ef       	ldi	r18, 0xFF	; 255
    b588:	43 e2       	ldi	r20, 0x23	; 35
    b58a:	63 e0       	ldi	r22, 0x03	; 3
    b58c:	82 e0       	ldi	r24, 0x02	; 2
    b58e:	0e 94 4e 42 	call	0x849c	; 0x849c <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b592:	84 e1       	ldi	r24, 0x14	; 20
    b594:	8e 9d       	mul	r24, r14
    b596:	60 01       	movw	r12, r0
    b598:	8f 9d       	mul	r24, r15
    b59a:	d0 0c       	add	r13, r0
    b59c:	11 24       	eor	r1, r1
    b59e:	c6 01       	movw	r24, r12
    b5a0:	4c 96       	adiw	r24, 0x1c	; 28
    b5a2:	8c 0f       	add	r24, r28
    b5a4:	9d 1f       	adc	r25, r29
    b5a6:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    b5aa:	40 e0       	ldi	r20, 0x00	; 0
    b5ac:	bc 01       	movw	r22, r24
    b5ae:	8b 2d       	mov	r24, r11
    b5b0:	81 0f       	add	r24, r17
    b5b2:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
		player->shot[idx].active = 1;
    b5b6:	8e 01       	movw	r16, r28
    b5b8:	0c 0d       	add	r16, r12
    b5ba:	1d 1d       	adc	r17, r13
    b5bc:	81 e0       	ldi	r24, 0x01	; 1
    b5be:	f8 01       	movw	r30, r16
    b5c0:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    b5c2:	ca 80       	ldd	r12, Y+2	; 0x02
    b5c4:	db 80       	ldd	r13, Y+3	; 0x03
    b5c6:	f8 ef       	ldi	r31, 0xF8	; 248
    b5c8:	cf 22       	and	r12, r31
    b5ca:	f8 01       	movw	r30, r16
    b5cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    b5ce:	c8 0e       	add	r12, r24
    b5d0:	d1 1c       	adc	r13, r1
    b5d2:	87 fd       	sbrc	r24, 7
    b5d4:	da 94       	dec	r13
    b5d6:	d3 8a       	std	Z+19, r13	; 0x13
    b5d8:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    b5da:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    b5de:	28 81       	ld	r18, Y
    b5e0:	39 81       	ldd	r19, Y+1	; 0x01
    b5e2:	88 23       	and	r24, r24
    b5e4:	e1 f0       	breq	.+56     	; 0xb61e <update_shot+0xea>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b5e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5e8:	f8 e0       	ldi	r31, 0x08	; 8
    b5ea:	8f 9f       	mul	r24, r31
    b5ec:	20 0d       	add	r18, r0
    b5ee:	31 1d       	adc	r19, r1
    b5f0:	11 24       	eor	r1, r1
    b5f2:	f8 01       	movw	r30, r16
    b5f4:	31 8b       	std	Z+17, r19	; 0x11
    b5f6:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b5f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    b5fa:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    b5fc:	87 89       	ldd	r24, Z+23	; 0x17
    b5fe:	86 30       	cpi	r24, 0x06	; 6
    b600:	09 f0       	breq	.+2      	; 0xb604 <update_shot+0xd0>
    b602:	4b c0       	rjmp	.+150    	; 0xb69a <update_shot+0x166>
    b604:	fe 01       	movw	r30, r28
    b606:	24 e1       	ldi	r18, 0x14	; 20
    b608:	b2 9e       	mul	r11, r18
    b60a:	e0 0d       	add	r30, r0
    b60c:	f1 1d       	adc	r31, r1
    b60e:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    b610:	84 89       	ldd	r24, Z+20	; 0x14
    b612:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    b614:	81 11       	cpse	r24, r1
    b616:	01 c0       	rjmp	.+2      	; 0xb61a <update_shot+0xe6>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    b618:	8f e7       	ldi	r24, 0x7F	; 127
    b61a:	84 8b       	std	Z+20, r24	; 0x14
    b61c:	3e c0       	rjmp	.+124    	; 0xb69a <update_shot+0x166>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    b61e:	88 85       	ldd	r24, Y+8	; 0x08
    b620:	82 fd       	sbrc	r24, 2
    b622:	06 c0       	rjmp	.+12     	; 0xb630 <update_shot+0xfc>
			{
				player->shot[idx].shared.y += 8;
    b624:	88 e0       	ldi	r24, 0x08	; 8
    b626:	c8 0e       	add	r12, r24
    b628:	d1 1c       	adc	r13, r1
    b62a:	f8 01       	movw	r30, r16
    b62c:	d3 8a       	std	Z+19, r13	; 0x13
    b62e:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    b630:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b632:	94 e1       	ldi	r25, 0x14	; 20
    b634:	9e 9d       	mul	r25, r14
    b636:	f0 01       	movw	r30, r0
    b638:	9f 9d       	mul	r25, r15
    b63a:	f0 0d       	add	r31, r0
    b63c:	11 24       	eor	r1, r1
    b63e:	ec 0f       	add	r30, r28
    b640:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    b642:	81 30       	cpi	r24, 0x01	; 1
    b644:	a9 f4       	brne	.+42     	; 0xb670 <update_shot+0x13c>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b646:	20 5f       	subi	r18, 0xF0	; 240
    b648:	3f 4f       	sbci	r19, 0xFF	; 255
    b64a:	31 8b       	std	Z+17, r19	; 0x11
    b64c:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b64e:	82 8d       	ldd	r24, Z+26	; 0x1a
    b650:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b652:	27 89       	ldd	r18, Z+23	; 0x17
    b654:	24 30       	cpi	r18, 0x04	; 4
    b656:	09 f5       	brne	.+66     	; 0xb69a <update_shot+0x166>
    b658:	ff ef       	ldi	r31, 0xFF	; 255
    b65a:	ef 1a       	sub	r14, r31
    b65c:	ff 0a       	sbc	r15, r31
    b65e:	9e 9d       	mul	r25, r14
    b660:	f0 01       	movw	r30, r0
    b662:	9f 9d       	mul	r25, r15
    b664:	f0 0d       	add	r31, r0
    b666:	11 24       	eor	r1, r1
    b668:	ec 0f       	add	r30, r28
    b66a:	fd 1f       	adc	r31, r29
    b66c:	81 95       	neg	r24
    b66e:	14 c0       	rjmp	.+40     	; 0xb698 <update_shot+0x164>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    b670:	28 50       	subi	r18, 0x08	; 8
    b672:	31 09       	sbc	r19, r1
    b674:	31 8b       	std	Z+17, r19	; 0x11
    b676:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    b678:	82 8d       	ldd	r24, Z+26	; 0x1a
    b67a:	81 95       	neg	r24
    b67c:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b67e:	27 89       	ldd	r18, Z+23	; 0x17
    b680:	24 30       	cpi	r18, 0x04	; 4
    b682:	59 f4       	brne	.+22     	; 0xb69a <update_shot+0x166>
    b684:	2f ef       	ldi	r18, 0xFF	; 255
    b686:	e2 1a       	sub	r14, r18
    b688:	f2 0a       	sbc	r15, r18
    b68a:	9e 9d       	mul	r25, r14
    b68c:	f0 01       	movw	r30, r0
    b68e:	9f 9d       	mul	r25, r15
    b690:	f0 0d       	add	r31, r0
    b692:	11 24       	eor	r1, r1
    b694:	ec 0f       	add	r30, r28
    b696:	fd 1f       	adc	r31, r29
    b698:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    b69a:	8f 81       	ldd	r24, Y+7	; 0x07
    b69c:	8f 5f       	subi	r24, 0xFF	; 255
    b69e:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    b6a0:	df 91       	pop	r29
    b6a2:	cf 91       	pop	r28
    b6a4:	1f 91       	pop	r17
    b6a6:	0f 91       	pop	r16
    b6a8:	ff 90       	pop	r15
    b6aa:	ef 90       	pop	r14
    b6ac:	df 90       	pop	r13
    b6ae:	cf 90       	pop	r12
    b6b0:	bf 90       	pop	r11
    b6b2:	08 95       	ret

0000b6b4 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    b6b4:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    b6b6:	40 81       	ld	r20, Z
    b6b8:	51 81       	ldd	r21, Z+1	; 0x01
    b6ba:	20 91 b6 0d 	lds	r18, 0x0DB6
    b6be:	30 91 b7 0d 	lds	r19, 0x0DB7
    b6c2:	42 17       	cp	r20, r18
    b6c4:	53 07       	cpc	r21, r19
    b6c6:	08 f1       	brcs	.+66     	; 0xb70a <out_of_bounds+0x56>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    b6c8:	48 5f       	subi	r20, 0xF8	; 248
    b6ca:	5f 4f       	sbci	r21, 0xFF	; 255
    b6cc:	20 52       	subi	r18, 0x20	; 32
    b6ce:	3f 4f       	sbci	r19, 0xFF	; 255
    b6d0:	24 17       	cp	r18, r20
    b6d2:	35 07       	cpc	r19, r21
    b6d4:	d0 f0       	brcs	.+52     	; 0xb70a <out_of_bounds+0x56>
	if (s->y < game.camera_y) return 1;
    b6d6:	42 81       	ldd	r20, Z+2	; 0x02
    b6d8:	53 81       	ldd	r21, Z+3	; 0x03
    b6da:	20 91 be 0d 	lds	r18, 0x0DBE
    b6de:	30 e0       	ldi	r19, 0x00	; 0
    b6e0:	42 17       	cp	r20, r18
    b6e2:	53 07       	cpc	r21, r19
    b6e4:	90 f0       	brcs	.+36     	; 0xb70a <out_of_bounds+0x56>
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
    b6e6:	c9 01       	movw	r24, r18
    b6e8:	01 96       	adiw	r24, 0x01	; 1
    b6ea:	48 17       	cp	r20, r24
    b6ec:	59 07       	cpc	r21, r25
    b6ee:	18 f4       	brcc	.+6      	; 0xb6f6 <out_of_bounds+0x42>
    b6f0:	84 81       	ldd	r24, Z+4	; 0x04
    b6f2:	81 11       	cpse	r24, r1
    b6f4:	0a c0       	rjmp	.+20     	; 0xb70a <out_of_bounds+0x56>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    b6f6:	48 5f       	subi	r20, 0xF8	; 248
    b6f8:	5f 4f       	sbci	r21, 0xFF	; 255
    b6fa:	28 53       	subi	r18, 0x38	; 56
    b6fc:	3f 4f       	sbci	r19, 0xFF	; 255
    b6fe:	81 e0       	ldi	r24, 0x01	; 1
    b700:	24 17       	cp	r18, r20
    b702:	35 07       	cpc	r19, r21
    b704:	18 f0       	brcs	.+6      	; 0xb70c <out_of_bounds+0x58>
    b706:	80 e0       	ldi	r24, 0x00	; 0
    b708:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    b70a:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    b70c:	08 95       	ret

0000b70e <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    b70e:	40 91 d1 0d 	lds	r20, 0x0DD1
    b712:	80 e0       	ldi	r24, 0x00	; 0
    b714:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    b716:	50 e1       	ldi	r21, 0x10	; 16
    b718:	9c 01       	movw	r18, r24
    b71a:	2a 54       	subi	r18, 0x4A	; 74
    b71c:	32 4f       	sbci	r19, 0xF2	; 242
    b71e:	d9 01       	movw	r26, r18
    b720:	a0 5e       	subi	r26, 0xE0	; 224
    b722:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    b724:	6c 91       	ld	r22, X
    b726:	66 23       	and	r22, r22
    b728:	31 f0       	breq	.+12     	; 0xb736 <explode_all_enemies+0x28>
    b72a:	f9 01       	movw	r30, r18
    b72c:	ef 5d       	subi	r30, 0xDF	; 223
    b72e:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    b730:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    b732:	1c 92       	st	X, r1
			game.active_enemies--;
    b734:	41 50       	subi	r20, 0x01	; 1
    b736:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b738:	89 30       	cpi	r24, 0x09	; 9
    b73a:	21 e0       	ldi	r18, 0x01	; 1
    b73c:	92 07       	cpc	r25, r18
    b73e:	61 f7       	brne	.-40     	; 0xb718 <explode_all_enemies+0xa>
    b740:	40 93 d1 0d 	sts	0x0DD1, r20
    b744:	08 95       	ret

0000b746 <handle_music_toggle>:
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
}

char music_toggle_pressed(JoyPadState* p)
{
	return (p->pressed & BTN_SELECT);
    b746:	fc 01       	movw	r30, r24
    b748:	80 81       	ld	r24, Z
	}
}

void handle_music_toggle(JoyPadState* p)
{
	if (music_toggle_pressed(p))
    b74a:	82 ff       	sbrs	r24, 2
    b74c:	07 c0       	rjmp	.+14     	; 0xb75c <handle_music_toggle+0x16>
	{
		if (IsSongPlaying())
    b74e:	0e 94 b0 44 	call	0x8960	; 0x8960 <IsSongPlaying>
    b752:	81 11       	cpse	r24, r1
		{
			StopSong();
    b754:	0c 94 40 41 	jmp	0x8280	; 0x8280 <StopSong>
		}
		else
		{
			ResumeSong();
    b758:	0c 94 4e 41 	jmp	0x829c	; 0x829c <ResumeSong>
    b75c:	08 95       	ret

0000b75e <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    b75e:	0f 93       	push	r16
    b760:	1f 93       	push	r17
    b762:	cf 93       	push	r28
    b764:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    b766:	20 91 cf 0d 	lds	r18, 0x0DCF
    b76a:	22 30       	cpi	r18, 0x02	; 2
    b76c:	b9 f5       	brne	.+110    	; 0xb7dc <handle_demo_play+0x7e>
    b76e:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    b770:	8c 01       	movw	r16, r24
    b772:	0c 58       	subi	r16, 0x8C	; 140
    b774:	1f 4f       	sbci	r17, 0xFF	; 255
    b776:	f8 01       	movw	r30, r16
    b778:	11 82       	std	Z+1, r1	; 0x01
    b77a:	10 82       	st	Z, r1
		if (is_space())
    b77c:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    b780:	88 23       	and	r24, r24
    b782:	69 f0       	breq	.+26     	; 0xb79e <handle_demo_play+0x40>
		{
			if (game.time < 2)
    b784:	80 91 bc 0d 	lds	r24, 0x0DBC
    b788:	90 91 bd 0d 	lds	r25, 0x0DBD
    b78c:	02 97       	sbiw	r24, 0x02	; 2
    b78e:	d0 f4       	brcc	.+52     	; 0xb7c4 <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    b790:	c8 58       	subi	r28, 0x88	; 136
    b792:	df 4f       	sbci	r29, 0xFF	; 255
    b794:	80 e1       	ldi	r24, 0x10	; 16
    b796:	90 e0       	ldi	r25, 0x00	; 0
    b798:	99 83       	std	Y+1, r25	; 0x01
    b79a:	88 83       	st	Y, r24
    b79c:	13 c0       	rjmp	.+38     	; 0xb7c4 <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    b79e:	80 e8       	ldi	r24, 0x80	; 128
    b7a0:	90 e0       	ldi	r25, 0x00	; 0
    b7a2:	fe 01       	movw	r30, r28
    b7a4:	e8 58       	subi	r30, 0x88	; 136
    b7a6:	ff 4f       	sbci	r31, 0xFF	; 255
    b7a8:	91 83       	std	Z+1, r25	; 0x01
    b7aa:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    b7ac:	8d 81       	ldd	r24, Y+5	; 0x05
    b7ae:	81 11       	cpse	r24, r1
    b7b0:	09 c0       	rjmp	.+18     	; 0xb7c4 <handle_demo_play+0x66>
    b7b2:	88 81       	ld	r24, Y
    b7b4:	99 81       	ldd	r25, Y+1	; 0x01
    b7b6:	89 97       	sbiw	r24, 0x29	; 41
    b7b8:	28 f0       	brcs	.+10     	; 0xb7c4 <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_A;
    b7ba:	80 e0       	ldi	r24, 0x00	; 0
    b7bc:	91 e0       	ldi	r25, 0x01	; 1
    b7be:	f8 01       	movw	r30, r16
    b7c0:	91 83       	std	Z+1, r25	; 0x01
    b7c2:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    b7c4:	80 91 d0 0d 	lds	r24, 0x0DD0
    b7c8:	6f e0       	ldi	r22, 0x0F	; 15
    b7ca:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    b7ce:	91 11       	cpse	r25, r1
    b7d0:	05 c0       	rjmp	.+10     	; 0xb7dc <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_B;
    b7d2:	81 e0       	ldi	r24, 0x01	; 1
    b7d4:	90 e0       	ldi	r25, 0x00	; 0
    b7d6:	f8 01       	movw	r30, r16
    b7d8:	91 83       	std	Z+1, r25	; 0x01
    b7da:	80 83       	st	Z, r24
		}
	}
}
    b7dc:	df 91       	pop	r29
    b7de:	cf 91       	pop	r28
    b7e0:	1f 91       	pop	r17
    b7e2:	0f 91       	pop	r16
    b7e4:	08 95       	ret

0000b7e6 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    b7e6:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    b7e8:	86 17       	cp	r24, r22
    b7ea:	10 f4       	brcc	.+4      	; 0xb7f0 <pixel_overlap+0xa>
    b7ec:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    b7ee:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    b7f0:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    b7f2:	26 0f       	add	r18, r22
	if (s2 < s1)
    b7f4:	28 17       	cp	r18, r24
    b7f6:	10 f4       	brcc	.+4      	; 0xb7fc <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    b7f8:	28 1b       	sub	r18, r24
    b7fa:	92 0f       	add	r25, r18
	}
	return result;
}
    b7fc:	89 2f       	mov	r24, r25
    b7fe:	08 95       	ret

0000b800 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b800:	2f 92       	push	r2
    b802:	3f 92       	push	r3
    b804:	4f 92       	push	r4
    b806:	5f 92       	push	r5
    b808:	6f 92       	push	r6
    b80a:	7f 92       	push	r7
    b80c:	8f 92       	push	r8
    b80e:	9f 92       	push	r9
    b810:	af 92       	push	r10
    b812:	bf 92       	push	r11
    b814:	cf 92       	push	r12
    b816:	df 92       	push	r13
    b818:	ef 92       	push	r14
    b81a:	ff 92       	push	r15
    b81c:	0f 93       	push	r16
    b81e:	1f 93       	push	r17
    b820:	cf 93       	push	r28
    b822:	df 93       	push	r29
    b824:	00 d0       	rcall	.+0      	; 0xb826 <collision_detect_level+0x26>
    b826:	00 d0       	rcall	.+0      	; 0xb828 <collision_detect_level+0x28>
    b828:	00 d0       	rcall	.+0      	; 0xb82a <collision_detect_level+0x2a>
    b82a:	cd b7       	in	r28, 0x3d	; 61
    b82c:	de b7       	in	r29, 0x3e	; 62
    b82e:	9e 83       	std	Y+6, r25	; 0x06
    b830:	8d 83       	std	Y+5, r24	; 0x05
    b832:	56 2e       	mov	r5, r22
    b834:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    b836:	fc 01       	movw	r30, r24
    b838:	a0 80       	ld	r10, Z
    b83a:	b1 80       	ldd	r11, Z+1	; 0x01
    b83c:	75 01       	movw	r14, r10
    b83e:	13 e0       	ldi	r17, 0x03	; 3
    b840:	f6 94       	lsr	r15
    b842:	e7 94       	ror	r14
    b844:	1a 95       	dec	r17
    b846:	e1 f7       	brne	.-8      	; 0xb840 <collision_detect_level+0x40>
    b848:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    b84a:	c2 80       	ldd	r12, Z+2	; 0x02
    b84c:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    b84e:	84 81       	ldd	r24, Z+4	; 0x04
    b850:	88 23       	and	r24, r24
    b852:	09 f4       	brne	.+2      	; 0xb856 <collision_detect_level+0x56>
    b854:	e1 c0       	rjmp	.+450    	; 0xba18 <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    b856:	e3 e0       	ldi	r30, 0x03	; 3
    b858:	d6 94       	lsr	r13
    b85a:	c7 94       	ror	r12
    b85c:	ea 95       	dec	r30
    b85e:	e1 f7       	brne	.-8      	; 0xb858 <collision_detect_level+0x58>
    b860:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    b862:	f7 e0       	ldi	r31, 0x07	; 7
    b864:	af 0e       	add	r10, r31
    b866:	b1 1c       	adc	r11, r1
    b868:	f3 e0       	ldi	r31, 0x03	; 3
    b86a:	b6 94       	lsr	r11
    b86c:	a7 94       	ror	r10
    b86e:	fa 95       	dec	r31
    b870:	e1 f7       	brne	.-8      	; 0xb86a <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b872:	8e 2d       	mov	r24, r14
    b874:	88 0f       	add	r24, r24
    b876:	88 0f       	add	r24, r24
    b878:	88 0f       	add	r24, r24
    b87a:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b87c:	2a 2c       	mov	r2, r10
    b87e:	22 0c       	add	r2, r2
    b880:	22 0c       	add	r2, r2
    b882:	22 0c       	add	r2, r2
    b884:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b886:	46 01       	movw	r8, r12
    b888:	9f ef       	ldi	r25, 0xFF	; 255
    b88a:	89 1a       	sub	r8, r25
    b88c:	99 0a       	sbc	r9, r25
    b88e:	a3 e0       	ldi	r26, 0x03	; 3
    b890:	88 0c       	add	r8, r8
    b892:	99 1c       	adc	r9, r9
    b894:	aa 95       	dec	r26
    b896:	e1 f7       	brne	.-8      	; 0xb890 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b898:	e8 e0       	ldi	r30, 0x08	; 8
    b89a:	4e 9f       	mul	r20, r30
    b89c:	30 01       	movw	r6, r0
    b89e:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b8a0:	b3 e0       	ldi	r27, 0x03	; 3
    b8a2:	cc 0c       	add	r12, r12
    b8a4:	dd 1c       	adc	r13, r13
    b8a6:	ba 95       	dec	r27
    b8a8:	e1 f7       	brne	.-8      	; 0xb8a2 <collision_detect_level+0xa2>
    b8aa:	41 2c       	mov	r4, r1
    b8ac:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b8ae:	45 14       	cp	r4, r5
    b8b0:	09 f4       	brne	.+2      	; 0xb8b4 <collision_detect_level+0xb4>
    b8b2:	b3 c0       	rjmp	.+358    	; 0xba1a <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    b8b4:	ed 81       	ldd	r30, Y+5	; 0x05
    b8b6:	fe 81       	ldd	r31, Y+6	; 0x06
    b8b8:	84 81       	ldd	r24, Z+4	; 0x04
    b8ba:	87 ff       	sbrs	r24, 7
    b8bc:	47 c0       	rjmp	.+142    	; 0xb94c <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    b8be:	49 81       	ldd	r20, Y+1	; 0x01
    b8c0:	64 2d       	mov	r22, r4
    b8c2:	6e 0d       	add	r22, r14
    b8c4:	80 91 d8 0f 	lds	r24, 0x0FD8
    b8c8:	90 91 d9 0f 	lds	r25, 0x0FD9
    b8cc:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    b8d0:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    b8d2:	49 81       	ldd	r20, Y+1	; 0x01
    b8d4:	64 2d       	mov	r22, r4
    b8d6:	6a 0d       	add	r22, r10
    b8d8:	80 91 d8 0f 	lds	r24, 0x0FD8
    b8dc:	90 91 d9 0f 	lds	r25, 0x0FD9
    b8e0:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    b8e4:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b8e6:	83 2d       	mov	r24, r3
    b8e8:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    b8ec:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b8ee:	80 2f       	mov	r24, r16
    b8f0:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    b8f4:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b8f6:	33 20       	and	r3, r3
    b8f8:	71 f0       	breq	.+28     	; 0xb916 <collision_detect_level+0x116>
    b8fa:	30 91 b6 0d 	lds	r19, 0x0DB6
    b8fe:	6b 81       	ldd	r22, Y+3	; 0x03
    b900:	63 1b       	sub	r22, r19
    b902:	ed 81       	ldd	r30, Y+5	; 0x05
    b904:	fe 81       	ldd	r31, Y+6	; 0x06
    b906:	80 81       	ld	r24, Z
    b908:	28 e0       	ldi	r18, 0x08	; 8
    b90a:	48 e0       	ldi	r20, 0x08	; 8
    b90c:	83 1b       	sub	r24, r19
    b90e:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    b912:	84 30       	cpi	r24, 0x04	; 4
    b914:	80 f4       	brcc	.+32     	; 0xb936 <collision_detect_level+0x136>
    b916:	00 23       	and	r16, r16
    b918:	c9 f0       	breq	.+50     	; 0xb94c <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b91a:	30 91 b6 0d 	lds	r19, 0x0DB6
    b91e:	62 2d       	mov	r22, r2
    b920:	63 1b       	sub	r22, r19
    b922:	ed 81       	ldd	r30, Y+5	; 0x05
    b924:	fe 81       	ldd	r31, Y+6	; 0x06
    b926:	80 81       	ld	r24, Z
    b928:	28 e0       	ldi	r18, 0x08	; 8
    b92a:	48 e0       	ldi	r20, 0x08	; 8
    b92c:	83 1b       	sub	r24, r19
    b92e:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    b932:	84 30       	cpi	r24, 0x04	; 4
    b934:	58 f0       	brcs	.+22     	; 0xb94c <collision_detect_level+0x14c>
				{
					s->vy =  0;
    b936:	ed 81       	ldd	r30, Y+5	; 0x05
    b938:	fe 81       	ldd	r31, Y+6	; 0x06
    b93a:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    b93c:	93 82       	std	Z+3, r9	; 0x03
    b93e:	82 82       	std	Z+2, r8	; 0x02
    b940:	30 16       	cp	r3, r16
    b942:	08 f4       	brcc	.+2      	; 0xb946 <collision_detect_level+0x146>
    b944:	30 2e       	mov	r3, r16
    b946:	13 15       	cp	r17, r3
    b948:	08 f4       	brcc	.+2      	; 0xb94c <collision_detect_level+0x14c>
    b94a:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    b94c:	ed 81       	ldd	r30, Y+5	; 0x05
    b94e:	fe 81       	ldd	r31, Y+6	; 0x06
    b950:	84 81       	ldd	r24, Z+4	; 0x04
    b952:	18 16       	cp	r1, r24
    b954:	0c f0       	brlt	.+2      	; 0xb958 <collision_detect_level+0x158>
    b956:	5e c0       	rjmp	.+188    	; 0xba14 <collision_detect_level+0x214>
    b958:	42 81       	ldd	r20, Z+2	; 0x02
    b95a:	53 81       	ldd	r21, Z+3	; 0x03
    b95c:	41 50       	subi	r20, 0x01	; 1
    b95e:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b960:	46 0d       	add	r20, r6
    b962:	57 1d       	adc	r21, r7
    b964:	63 e0       	ldi	r22, 0x03	; 3
    b966:	56 95       	lsr	r21
    b968:	47 95       	ror	r20
    b96a:	6a 95       	dec	r22
    b96c:	e1 f7       	brne	.-8      	; 0xb966 <collision_detect_level+0x166>
    b96e:	64 2d       	mov	r22, r4
    b970:	6e 0d       	add	r22, r14
    b972:	80 91 d8 0f 	lds	r24, 0x0FD8
    b976:	90 91 d9 0f 	lds	r25, 0x0FD9
    b97a:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    b97e:	38 2e       	mov	r3, r24
    b980:	ed 81       	ldd	r30, Y+5	; 0x05
    b982:	fe 81       	ldd	r31, Y+6	; 0x06
    b984:	42 81       	ldd	r20, Z+2	; 0x02
    b986:	53 81       	ldd	r21, Z+3	; 0x03
    b988:	41 50       	subi	r20, 0x01	; 1
    b98a:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    b98c:	46 0d       	add	r20, r6
    b98e:	57 1d       	adc	r21, r7
    b990:	73 e0       	ldi	r23, 0x03	; 3
    b992:	56 95       	lsr	r21
    b994:	47 95       	ror	r20
    b996:	7a 95       	dec	r23
    b998:	e1 f7       	brne	.-8      	; 0xb992 <collision_detect_level+0x192>
    b99a:	64 2d       	mov	r22, r4
    b99c:	6a 0d       	add	r22, r10
    b99e:	80 91 d8 0f 	lds	r24, 0x0FD8
    b9a2:	90 91 d9 0f 	lds	r25, 0x0FD9
    b9a6:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    b9aa:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b9ac:	83 2d       	mov	r24, r3
    b9ae:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    b9b2:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b9b4:	80 2f       	mov	r24, r16
    b9b6:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    b9ba:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    b9bc:	33 20       	and	r3, r3
    b9be:	71 f0       	breq	.+28     	; 0xb9dc <collision_detect_level+0x1dc>
    b9c0:	30 91 b6 0d 	lds	r19, 0x0DB6
    b9c4:	6b 81       	ldd	r22, Y+3	; 0x03
    b9c6:	63 1b       	sub	r22, r19
    b9c8:	ed 81       	ldd	r30, Y+5	; 0x05
    b9ca:	fe 81       	ldd	r31, Y+6	; 0x06
    b9cc:	80 81       	ld	r24, Z
    b9ce:	28 e0       	ldi	r18, 0x08	; 8
    b9d0:	48 e0       	ldi	r20, 0x08	; 8
    b9d2:	83 1b       	sub	r24, r19
    b9d4:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    b9d8:	84 30       	cpi	r24, 0x04	; 4
    b9da:	80 f4       	brcc	.+32     	; 0xb9fc <collision_detect_level+0x1fc>
    b9dc:	00 23       	and	r16, r16
    b9de:	d1 f0       	breq	.+52     	; 0xba14 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b9e0:	30 91 b6 0d 	lds	r19, 0x0DB6
    b9e4:	62 2d       	mov	r22, r2
    b9e6:	63 1b       	sub	r22, r19
    b9e8:	ed 81       	ldd	r30, Y+5	; 0x05
    b9ea:	fe 81       	ldd	r31, Y+6	; 0x06
    b9ec:	80 81       	ld	r24, Z
    b9ee:	28 e0       	ldi	r18, 0x08	; 8
    b9f0:	48 e0       	ldi	r20, 0x08	; 8
    b9f2:	83 1b       	sub	r24, r19
    b9f4:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    b9f8:	84 30       	cpi	r24, 0x04	; 4
    b9fa:	60 f0       	brcs	.+24     	; 0xba14 <collision_detect_level+0x214>
				{
					s->vy =  0;
    b9fc:	ed 81       	ldd	r30, Y+5	; 0x05
    b9fe:	fe 81       	ldd	r31, Y+6	; 0x06
    ba00:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    ba02:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    ba04:	d3 82       	std	Z+3, r13	; 0x03
    ba06:	c2 82       	std	Z+2, r12	; 0x02
    ba08:	30 16       	cp	r3, r16
    ba0a:	08 f4       	brcc	.+2      	; 0xba0e <collision_detect_level+0x20e>
    ba0c:	30 2e       	mov	r3, r16
    ba0e:	13 15       	cp	r17, r3
    ba10:	08 f4       	brcc	.+2      	; 0xba14 <collision_detect_level+0x214>
    ba12:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    ba14:	43 94       	inc	r4
    ba16:	4b cf       	rjmp	.-362    	; 0xb8ae <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    ba18:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    ba1a:	ed 81       	ldd	r30, Y+5	; 0x05
    ba1c:	fe 81       	ldd	r31, Y+6	; 0x06
    ba1e:	85 81       	ldd	r24, Z+5	; 0x05
    ba20:	88 23       	and	r24, r24
    ba22:	09 f4       	brne	.+2      	; 0xba26 <collision_detect_level+0x226>
    ba24:	e1 c0       	rjmp	.+450    	; 0xbbe8 <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    ba26:	c2 80       	ldd	r12, Z+2	; 0x02
    ba28:	d3 80       	ldd	r13, Z+3	; 0x03
    ba2a:	56 01       	movw	r10, r12
    ba2c:	23 e0       	ldi	r18, 0x03	; 3
    ba2e:	b6 94       	lsr	r11
    ba30:	a7 94       	ror	r10
    ba32:	2a 95       	dec	r18
    ba34:	e1 f7       	brne	.-8      	; 0xba2e <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    ba36:	f7 e0       	ldi	r31, 0x07	; 7
    ba38:	cf 0e       	add	r12, r31
    ba3a:	d1 1c       	adc	r13, r1
    ba3c:	33 e0       	ldi	r19, 0x03	; 3
    ba3e:	d6 94       	lsr	r13
    ba40:	c7 94       	ror	r12
    ba42:	3a 95       	dec	r19
    ba44:	e1 f7       	brne	.-8      	; 0xba3e <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    ba46:	3a 2c       	mov	r3, r10
    ba48:	33 0c       	add	r3, r3
    ba4a:	33 0c       	add	r3, r3
    ba4c:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    ba4e:	4c 2c       	mov	r4, r12
    ba50:	44 0c       	add	r4, r4
    ba52:	44 0c       	add	r4, r4
    ba54:	44 0c       	add	r4, r4
    ba56:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    ba58:	37 01       	movw	r6, r14
    ba5a:	8f ef       	ldi	r24, 0xFF	; 255
    ba5c:	68 1a       	sub	r6, r24
    ba5e:	78 0a       	sbc	r7, r24
    ba60:	43 e0       	ldi	r20, 0x03	; 3
    ba62:	66 0c       	add	r6, r6
    ba64:	77 1c       	adc	r7, r7
    ba66:	4a 95       	dec	r20
    ba68:	e1 f7       	brne	.-8      	; 0xba62 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    ba6a:	98 e0       	ldi	r25, 0x08	; 8
    ba6c:	59 9e       	mul	r5, r25
    ba6e:	40 01       	movw	r8, r0
    ba70:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    ba72:	53 e0       	ldi	r21, 0x03	; 3
    ba74:	ee 0c       	add	r14, r14
    ba76:	ff 1c       	adc	r15, r15
    ba78:	5a 95       	dec	r21
    ba7a:	e1 f7       	brne	.-8      	; 0xba74 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    ba7c:	51 2c       	mov	r5, r1
    ba7e:	fc 81       	ldd	r31, Y+4	; 0x04
    ba80:	5f 16       	cp	r5, r31
    ba82:	09 f4       	brne	.+2      	; 0xba86 <collision_detect_level+0x286>
    ba84:	b1 c0       	rjmp	.+354    	; 0xbbe8 <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    ba86:	ed 81       	ldd	r30, Y+5	; 0x05
    ba88:	fe 81       	ldd	r31, Y+6	; 0x06
    ba8a:	85 81       	ldd	r24, Z+5	; 0x05
    ba8c:	87 ff       	sbrs	r24, 7
    ba8e:	47 c0       	rjmp	.+142    	; 0xbb1e <collision_detect_level+0x31e>
    ba90:	45 2d       	mov	r20, r5
    ba92:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    ba94:	6a 81       	ldd	r22, Y+2	; 0x02
    ba96:	80 91 d8 0f 	lds	r24, 0x0FD8
    ba9a:	90 91 d9 0f 	lds	r25, 0x0FD9
    ba9e:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    baa2:	28 2e       	mov	r2, r24
    baa4:	45 2d       	mov	r20, r5
    baa6:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    baa8:	6a 81       	ldd	r22, Y+2	; 0x02
    baaa:	80 91 d8 0f 	lds	r24, 0x0FD8
    baae:	90 91 d9 0f 	lds	r25, 0x0FD9
    bab2:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    bab6:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bab8:	82 2d       	mov	r24, r2
    baba:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    babe:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bac0:	80 2f       	mov	r24, r16
    bac2:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    bac6:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bac8:	22 20       	and	r2, r2
    baca:	71 f0       	breq	.+28     	; 0xbae8 <collision_detect_level+0x2e8>
    bacc:	30 91 be 0d 	lds	r19, 0x0DBE
    bad0:	63 2d       	mov	r22, r3
    bad2:	63 1b       	sub	r22, r19
    bad4:	ed 81       	ldd	r30, Y+5	; 0x05
    bad6:	fe 81       	ldd	r31, Y+6	; 0x06
    bad8:	82 81       	ldd	r24, Z+2	; 0x02
    bada:	28 e0       	ldi	r18, 0x08	; 8
    badc:	48 e0       	ldi	r20, 0x08	; 8
    bade:	83 1b       	sub	r24, r19
    bae0:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    bae4:	84 30       	cpi	r24, 0x04	; 4
    bae6:	80 f4       	brcc	.+32     	; 0xbb08 <collision_detect_level+0x308>
    bae8:	00 23       	and	r16, r16
    baea:	c9 f0       	breq	.+50     	; 0xbb1e <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    baec:	30 91 be 0d 	lds	r19, 0x0DBE
    baf0:	64 2d       	mov	r22, r4
    baf2:	63 1b       	sub	r22, r19
    baf4:	ed 81       	ldd	r30, Y+5	; 0x05
    baf6:	fe 81       	ldd	r31, Y+6	; 0x06
    baf8:	82 81       	ldd	r24, Z+2	; 0x02
    bafa:	28 e0       	ldi	r18, 0x08	; 8
    bafc:	48 e0       	ldi	r20, 0x08	; 8
    bafe:	83 1b       	sub	r24, r19
    bb00:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    bb04:	84 30       	cpi	r24, 0x04	; 4
    bb06:	58 f0       	brcs	.+22     	; 0xbb1e <collision_detect_level+0x31e>
				{
					s->vx =  0;
    bb08:	ed 81       	ldd	r30, Y+5	; 0x05
    bb0a:	fe 81       	ldd	r31, Y+6	; 0x06
    bb0c:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    bb0e:	71 82       	std	Z+1, r7	; 0x01
    bb10:	60 82       	st	Z, r6
    bb12:	20 16       	cp	r2, r16
    bb14:	08 f4       	brcc	.+2      	; 0xbb18 <collision_detect_level+0x318>
    bb16:	20 2e       	mov	r2, r16
    bb18:	12 15       	cp	r17, r2
    bb1a:	08 f4       	brcc	.+2      	; 0xbb1e <collision_detect_level+0x31e>
    bb1c:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    bb1e:	ed 81       	ldd	r30, Y+5	; 0x05
    bb20:	fe 81       	ldd	r31, Y+6	; 0x06
    bb22:	85 81       	ldd	r24, Z+5	; 0x05
    bb24:	18 16       	cp	r1, r24
    bb26:	0c f0       	brlt	.+2      	; 0xbb2a <collision_detect_level+0x32a>
    bb28:	5d c0       	rjmp	.+186    	; 0xbbe4 <collision_detect_level+0x3e4>
    bb2a:	60 81       	ld	r22, Z
    bb2c:	71 81       	ldd	r23, Z+1	; 0x01
    bb2e:	61 50       	subi	r22, 0x01	; 1
    bb30:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bb32:	68 0d       	add	r22, r8
    bb34:	79 1d       	adc	r23, r9
    bb36:	83 e0       	ldi	r24, 0x03	; 3
    bb38:	76 95       	lsr	r23
    bb3a:	67 95       	ror	r22
    bb3c:	8a 95       	dec	r24
    bb3e:	e1 f7       	brne	.-8      	; 0xbb38 <collision_detect_level+0x338>
    bb40:	45 2d       	mov	r20, r5
    bb42:	4a 0d       	add	r20, r10
    bb44:	80 91 d8 0f 	lds	r24, 0x0FD8
    bb48:	90 91 d9 0f 	lds	r25, 0x0FD9
    bb4c:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    bb50:	28 2e       	mov	r2, r24
    bb52:	ed 81       	ldd	r30, Y+5	; 0x05
    bb54:	fe 81       	ldd	r31, Y+6	; 0x06
    bb56:	60 81       	ld	r22, Z
    bb58:	71 81       	ldd	r23, Z+1	; 0x01
    bb5a:	61 50       	subi	r22, 0x01	; 1
    bb5c:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bb5e:	68 0d       	add	r22, r8
    bb60:	79 1d       	adc	r23, r9
    bb62:	93 e0       	ldi	r25, 0x03	; 3
    bb64:	76 95       	lsr	r23
    bb66:	67 95       	ror	r22
    bb68:	9a 95       	dec	r25
    bb6a:	e1 f7       	brne	.-8      	; 0xbb64 <collision_detect_level+0x364>
    bb6c:	45 2d       	mov	r20, r5
    bb6e:	4c 0d       	add	r20, r12
    bb70:	80 91 d8 0f 	lds	r24, 0x0FD8
    bb74:	90 91 d9 0f 	lds	r25, 0x0FD9
    bb78:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <get_level_tile>
    bb7c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bb7e:	82 2d       	mov	r24, r2
    bb80:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    bb84:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bb86:	80 2f       	mov	r24, r16
    bb88:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <solid_or_hazard_tile>
    bb8c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bb8e:	22 20       	and	r2, r2
    bb90:	71 f0       	breq	.+28     	; 0xbbae <collision_detect_level+0x3ae>
    bb92:	30 91 be 0d 	lds	r19, 0x0DBE
    bb96:	63 2d       	mov	r22, r3
    bb98:	63 1b       	sub	r22, r19
    bb9a:	ed 81       	ldd	r30, Y+5	; 0x05
    bb9c:	fe 81       	ldd	r31, Y+6	; 0x06
    bb9e:	82 81       	ldd	r24, Z+2	; 0x02
    bba0:	28 e0       	ldi	r18, 0x08	; 8
    bba2:	48 e0       	ldi	r20, 0x08	; 8
    bba4:	83 1b       	sub	r24, r19
    bba6:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    bbaa:	84 30       	cpi	r24, 0x04	; 4
    bbac:	80 f4       	brcc	.+32     	; 0xbbce <collision_detect_level+0x3ce>
    bbae:	00 23       	and	r16, r16
    bbb0:	c9 f0       	breq	.+50     	; 0xbbe4 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bbb2:	30 91 be 0d 	lds	r19, 0x0DBE
    bbb6:	64 2d       	mov	r22, r4
    bbb8:	63 1b       	sub	r22, r19
    bbba:	ed 81       	ldd	r30, Y+5	; 0x05
    bbbc:	fe 81       	ldd	r31, Y+6	; 0x06
    bbbe:	82 81       	ldd	r24, Z+2	; 0x02
    bbc0:	28 e0       	ldi	r18, 0x08	; 8
    bbc2:	48 e0       	ldi	r20, 0x08	; 8
    bbc4:	83 1b       	sub	r24, r19
    bbc6:	0e 94 f3 5b 	call	0xb7e6	; 0xb7e6 <pixel_overlap>
    bbca:	84 30       	cpi	r24, 0x04	; 4
    bbcc:	58 f0       	brcs	.+22     	; 0xbbe4 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    bbce:	ed 81       	ldd	r30, Y+5	; 0x05
    bbd0:	fe 81       	ldd	r31, Y+6	; 0x06
    bbd2:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    bbd4:	f1 82       	std	Z+1, r15	; 0x01
    bbd6:	e0 82       	st	Z, r14
    bbd8:	20 16       	cp	r2, r16
    bbda:	08 f4       	brcc	.+2      	; 0xbbde <collision_detect_level+0x3de>
    bbdc:	20 2e       	mov	r2, r16
    bbde:	12 15       	cp	r17, r2
    bbe0:	08 f4       	brcc	.+2      	; 0xbbe4 <collision_detect_level+0x3e4>
    bbe2:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bbe4:	53 94       	inc	r5
    bbe6:	4b cf       	rjmp	.-362    	; 0xba7e <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    bbe8:	81 2f       	mov	r24, r17
    bbea:	26 96       	adiw	r28, 0x06	; 6
    bbec:	0f b6       	in	r0, 0x3f	; 63
    bbee:	f8 94       	cli
    bbf0:	de bf       	out	0x3e, r29	; 62
    bbf2:	0f be       	out	0x3f, r0	; 63
    bbf4:	cd bf       	out	0x3d, r28	; 61
    bbf6:	df 91       	pop	r29
    bbf8:	cf 91       	pop	r28
    bbfa:	1f 91       	pop	r17
    bbfc:	0f 91       	pop	r16
    bbfe:	ff 90       	pop	r15
    bc00:	ef 90       	pop	r14
    bc02:	df 90       	pop	r13
    bc04:	cf 90       	pop	r12
    bc06:	bf 90       	pop	r11
    bc08:	af 90       	pop	r10
    bc0a:	9f 90       	pop	r9
    bc0c:	8f 90       	pop	r8
    bc0e:	7f 90       	pop	r7
    bc10:	6f 90       	pop	r6
    bc12:	5f 90       	pop	r5
    bc14:	4f 90       	pop	r4
    bc16:	3f 90       	pop	r3
    bc18:	2f 90       	pop	r2
    bc1a:	08 95       	ret

0000bc1c <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    bc1c:	2f 92       	push	r2
    bc1e:	3f 92       	push	r3
    bc20:	4f 92       	push	r4
    bc22:	5f 92       	push	r5
    bc24:	6f 92       	push	r6
    bc26:	7f 92       	push	r7
    bc28:	8f 92       	push	r8
    bc2a:	9f 92       	push	r9
    bc2c:	af 92       	push	r10
    bc2e:	bf 92       	push	r11
    bc30:	cf 92       	push	r12
    bc32:	df 92       	push	r13
    bc34:	ef 92       	push	r14
    bc36:	ff 92       	push	r15
    bc38:	0f 93       	push	r16
    bc3a:	1f 93       	push	r17
    bc3c:	cf 93       	push	r28
    bc3e:	df 93       	push	r29
    bc40:	00 d0       	rcall	.+0      	; 0xbc42 <animate_shot+0x26>
    bc42:	00 d0       	rcall	.+0      	; 0xbc44 <animate_shot+0x28>
    bc44:	1f 92       	push	r1
    bc46:	cd b7       	in	r28, 0x3d	; 61
    bc48:	de b7       	in	r29, 0x3e	; 62
    bc4a:	2c 01       	movw	r4, r24
    bc4c:	3b 01       	movw	r6, r22
    bc4e:	d4 2e       	mov	r13, r20
    bc50:	4c 01       	movw	r8, r24
    bc52:	29 e1       	ldi	r18, 0x19	; 25
    bc54:	82 0e       	add	r8, r18
    bc56:	91 1c       	adc	r9, r1
    bc58:	40 96       	adiw	r24, 0x10	; 16
    bc5a:	9d 83       	std	Y+5, r25	; 0x05
    bc5c:	8c 83       	std	Y+4, r24	; 0x04
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bc5e:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    bc60:	30 e1       	ldi	r19, 0x10	; 16
    bc62:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bc64:	f4 01       	movw	r30, r8
    bc66:	80 81       	ld	r24, Z
    bc68:	88 23       	and	r24, r24
    bc6a:	09 f4       	brne	.+2      	; 0xbc6e <animate_shot+0x52>
    bc6c:	12 c1       	rjmp	.+548    	; 0xbe92 <animate_shot+0x276>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bc6e:	60 91 d0 0d 	lds	r22, 0x0DD0
    bc72:	34 97       	sbiw	r30, 0x04	; 4
    bc74:	80 81       	ld	r24, Z
    bc76:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    bc7a:	88 0f       	add	r24, r24
    bc7c:	99 1f       	adc	r25, r25
    bc7e:	ec 81       	ldd	r30, Y+4	; 0x04
    bc80:	fd 81       	ldd	r31, Y+5	; 0x05
    bc82:	20 81       	ld	r18, Z
    bc84:	31 81       	ldd	r19, Z+1	; 0x01
    bc86:	82 0f       	add	r24, r18
    bc88:	93 1f       	adc	r25, r19
    bc8a:	91 83       	std	Z+1, r25	; 0x01
    bc8c:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    bc8e:	60 91 d0 0d 	lds	r22, 0x0DD0
    bc92:	f4 01       	movw	r30, r8
    bc94:	35 97       	sbiw	r30, 0x05	; 5
    bc96:	80 81       	ld	r24, Z
    bc98:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    bc9c:	ec 81       	ldd	r30, Y+4	; 0x04
    bc9e:	fd 81       	ldd	r31, Y+5	; 0x05
    bca0:	42 81       	ldd	r20, Z+2	; 0x02
    bca2:	53 81       	ldd	r21, Z+3	; 0x03
    bca4:	84 0f       	add	r24, r20
    bca6:	95 1f       	adc	r25, r21
    bca8:	93 83       	std	Z+3, r25	; 0x03
    bcaa:	82 83       	std	Z+2, r24	; 0x02
    bcac:	f1 2e       	mov	r15, r17
    bcae:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    bcb0:	90 91 be 0d 	lds	r25, 0x0DBE
    bcb4:	48 2f       	mov	r20, r24
    bcb6:	49 1b       	sub	r20, r25
    bcb8:	60 81       	ld	r22, Z
    bcba:	80 91 b6 0d 	lds	r24, 0x0DB6
    bcbe:	68 1b       	sub	r22, r24
    bcc0:	01 e0       	ldi	r16, 0x01	; 1
    bcc2:	21 e0       	ldi	r18, 0x01	; 1
    bcc4:	8f 2d       	mov	r24, r15
    bcc6:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    bcca:	8c 81       	ldd	r24, Y+4	; 0x04
    bccc:	9d 81       	ldd	r25, Y+5	; 0x05
    bcce:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <out_of_bounds>
    bcd2:	81 11       	cpse	r24, r1
    bcd4:	d1 c0       	rjmp	.+418    	; 0xbe78 <animate_shot+0x25c>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    bcd6:	41 e0       	ldi	r20, 0x01	; 1
    bcd8:	61 e0       	ldi	r22, 0x01	; 1
    bcda:	8c 81       	ldd	r24, Y+4	; 0x04
    bcdc:	9d 81       	ldd	r25, Y+5	; 0x05
    bcde:	0e 94 00 5c 	call	0xb800	; 0xb800 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    bce2:	81 11       	cpse	r24, r1
    bce4:	c9 c0       	rjmp	.+402    	; 0xbe78 <animate_shot+0x25c>
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bce6:	90 91 b6 0d 	lds	r25, 0x0DB6
    bcea:	8b ed       	ldi	r24, 0xDB	; 219
    bcec:	28 2e       	mov	r2, r24
    bcee:	8e e0       	ldi	r24, 0x0E	; 14
    bcf0:	38 2e       	mov	r3, r24
    bcf2:	1a 82       	std	Y+2, r1	; 0x02
    bcf4:	19 82       	std	Y+1, r1	; 0x01
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bcf6:	f1 01       	movw	r30, r2
    bcf8:	80 81       	ld	r24, Z
    bcfa:	82 30       	cpi	r24, 0x02	; 2
    bcfc:	09 f4       	brne	.+2      	; 0xbd00 <animate_shot+0xe4>
    bcfe:	68 c0       	rjmp	.+208    	; 0xbdd0 <animate_shot+0x1b4>
    bd00:	35 97       	sbiw	r30, 0x05	; 5
    bd02:	80 81       	ld	r24, Z
    bd04:	88 23       	and	r24, r24
    bd06:	09 f4       	brne	.+2      	; 0xbd0a <animate_shot+0xee>
    bd08:	63 c0       	rjmp	.+198    	; 0xbdd0 <animate_shot+0x1b4>
    bd0a:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bd0c:	a0 80       	ld	r10, Z
    bd0e:	aa 0c       	add	r10, r10
    bd10:	aa 0c       	add	r10, r10
    bd12:	aa 0c       	add	r10, r10
    bd14:	31 97       	sbiw	r30, 0x01	; 1
    bd16:	c0 80       	ld	r12, Z
    bd18:	cc 0c       	add	r12, r12
    bd1a:	cc 0c       	add	r12, r12
    bd1c:	cc 0c       	add	r12, r12
    bd1e:	3a 97       	sbiw	r30, 0x0a	; 10
    bd20:	00 81       	ld	r16, Z
    bd22:	09 1b       	sub	r16, r25
    bd24:	ec 81       	ldd	r30, Y+4	; 0x04
    bd26:	fd 81       	ldd	r31, Y+5	; 0x05
    bd28:	80 81       	ld	r24, Z
    bd2a:	f1 01       	movw	r30, r2
    bd2c:	3a 97       	sbiw	r30, 0x0a	; 10
    bd2e:	e0 80       	ld	r14, Z
    bd30:	28 e0       	ldi	r18, 0x08	; 8
    bd32:	48 e0       	ldi	r20, 0x08	; 8
    bd34:	ec 81       	ldd	r30, Y+4	; 0x04
    bd36:	fd 81       	ldd	r31, Y+5	; 0x05
    bd38:	62 81       	ldd	r22, Z+2	; 0x02
    bd3a:	89 1b       	sub	r24, r25
    bd3c:	9b 83       	std	Y+3, r25	; 0x03
    bd3e:	0e 94 dd 4d 	call	0x9bba	; 0x9bba <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bd42:	9b 81       	ldd	r25, Y+3	; 0x03
    bd44:	88 23       	and	r24, r24
    bd46:	09 f4       	brne	.+2      	; 0xbd4a <animate_shot+0x12e>
    bd48:	43 c0       	rjmp	.+134    	; 0xbdd0 <animate_shot+0x1b4>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    bd4a:	41 e0       	ldi	r20, 0x01	; 1
    bd4c:	6f ef       	ldi	r22, 0xFF	; 255
    bd4e:	84 e0       	ldi	r24, 0x04	; 4
    bd50:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    bd54:	45 e3       	ldi	r20, 0x35	; 53
    bd56:	29 81       	ldd	r18, Y+1	; 0x01
    bd58:	3a 81       	ldd	r19, Y+2	; 0x02
    bd5a:	42 9f       	mul	r20, r18
    bd5c:	c0 01       	movw	r24, r0
    bd5e:	43 9f       	mul	r20, r19
    bd60:	90 0d       	add	r25, r0
    bd62:	11 24       	eor	r1, r1
    bd64:	fc 01       	movw	r30, r24
    bd66:	ea 54       	subi	r30, 0x4A	; 74
    bd68:	f2 4f       	sbci	r31, 0xF2	; 242
    bd6a:	1f 01       	movw	r2, r30
    bd6c:	df 01       	movw	r26, r30
    bd6e:	a7 5d       	subi	r26, 0xD7	; 215
    bd70:	be 4f       	sbci	r27, 0xFE	; 254
    bd72:	8c 91       	ld	r24, X
    bd74:	f4 01       	movw	r30, r8
    bd76:	31 97       	sbiw	r30, 0x01	; 1
    bd78:	90 81       	ld	r25, Z
    bd7a:	89 1b       	sub	r24, r25
    bd7c:	8c 93       	st	X, r24
						if (game.enemies[j].shield <= 0)
    bd7e:	18 16       	cp	r1, r24
    bd80:	cc f0       	brlt	.+50     	; 0xbdb4 <animate_shot+0x198>
						{
							SFX_ENEMY_EXPLODE;
    bd82:	41 e0       	ldi	r20, 0x01	; 1
    bd84:	6f ef       	ldi	r22, 0xFF	; 255
    bd86:	86 e0       	ldi	r24, 0x06	; 6
    bd88:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    bd8c:	f1 01       	movw	r30, r2
    bd8e:	ef 5d       	subi	r30, 0xDF	; 223
    bd90:	fe 4f       	sbci	r31, 0xFE	; 254
    bd92:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    bd94:	31 97       	sbiw	r30, 0x01	; 1
    bd96:	10 82       	st	Z, r1
							game.active_enemies--;
    bd98:	80 91 d1 0d 	lds	r24, 0x0DD1
    bd9c:	81 50       	subi	r24, 0x01	; 1
    bd9e:	80 93 d1 0d 	sts	0x0DD1, r24
							game.level_score += KILL_SCORE;
    bda2:	80 91 ba 0d 	lds	r24, 0x0DBA
    bda6:	90 91 bb 0d 	lds	r25, 0x0DBB
    bdaa:	0a 96       	adiw	r24, 0x0a	; 10
    bdac:	90 93 bb 0d 	sts	0x0DBB, r25
    bdb0:	80 93 ba 0d 	sts	0x0DBA, r24
						}
						player->shot[i].active = 0;
    bdb4:	f4 01       	movw	r30, r8
    bdb6:	10 82       	st	Z, r1
						player->active_shots--;
    bdb8:	f2 01       	movw	r30, r4
    bdba:	87 81       	ldd	r24, Z+7	; 0x07
    bdbc:	81 50       	subi	r24, 0x01	; 1
    bdbe:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    bdc0:	01 e0       	ldi	r16, 0x01	; 1
    bdc2:	21 e0       	ldi	r18, 0x01	; 1
    bdc4:	40 e0       	ldi	r20, 0x00	; 0
    bdc6:	60 ee       	ldi	r22, 0xE0	; 224
    bdc8:	8f 2d       	mov	r24, r15
    bdca:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
						break;
    bdce:	0e c0       	rjmp	.+28     	; 0xbdec <animate_shot+0x1d0>
    bdd0:	29 81       	ldd	r18, Y+1	; 0x01
    bdd2:	3a 81       	ldd	r19, Y+2	; 0x02
    bdd4:	2f 5f       	subi	r18, 0xFF	; 255
    bdd6:	3f 4f       	sbci	r19, 0xFF	; 255
    bdd8:	3a 83       	std	Y+2, r19	; 0x02
    bdda:	29 83       	std	Y+1, r18	; 0x01
    bddc:	35 e3       	ldi	r19, 0x35	; 53
    bdde:	23 0e       	add	r2, r19
    bde0:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    bde2:	e9 81       	ldd	r30, Y+1	; 0x01
    bde4:	fa 81       	ldd	r31, Y+2	; 0x02
    bde6:	35 97       	sbiw	r30, 0x05	; 5
    bde8:	09 f0       	breq	.+2      	; 0xbdec <animate_shot+0x1d0>
    bdea:	85 cf       	rjmp	.-246    	; 0xbcf6 <animate_shot+0xda>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    bdec:	f3 01       	movw	r30, r6
    bdee:	85 85       	ldd	r24, Z+13	; 0x0d
    bdf0:	88 23       	and	r24, r24
    bdf2:	09 f4       	brne	.+2      	; 0xbdf6 <animate_shot+0x1da>
    bdf4:	4e c0       	rjmp	.+156    	; 0xbe92 <animate_shot+0x276>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bdf6:	90 91 b6 0d 	lds	r25, 0x0DB6
    bdfa:	a4 84       	ldd	r10, Z+12	; 0x0c
    bdfc:	aa 0c       	add	r10, r10
    bdfe:	aa 0c       	add	r10, r10
    be00:	aa 0c       	add	r10, r10
    be02:	c3 84       	ldd	r12, Z+11	; 0x0b
    be04:	cc 0c       	add	r12, r12
    be06:	cc 0c       	add	r12, r12
    be08:	cc 0c       	add	r12, r12
    be0a:	00 81       	ld	r16, Z
    be0c:	09 1b       	sub	r16, r25
    be0e:	ec 81       	ldd	r30, Y+4	; 0x04
    be10:	fd 81       	ldd	r31, Y+5	; 0x05
    be12:	80 81       	ld	r24, Z
    be14:	f3 01       	movw	r30, r6
    be16:	e2 80       	ldd	r14, Z+2	; 0x02
    be18:	28 e0       	ldi	r18, 0x08	; 8
    be1a:	48 e0       	ldi	r20, 0x08	; 8
    be1c:	ec 81       	ldd	r30, Y+4	; 0x04
    be1e:	fd 81       	ldd	r31, Y+5	; 0x05
    be20:	62 81       	ldd	r22, Z+2	; 0x02
    be22:	89 1b       	sub	r24, r25
    be24:	0e 94 dd 4d 	call	0x9bba	; 0x9bba <LBCollides>
    be28:	88 23       	and	r24, r24
    be2a:	99 f1       	breq	.+102    	; 0xbe92 <animate_shot+0x276>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    be2c:	41 e0       	ldi	r20, 0x01	; 1
    be2e:	6f ef       	ldi	r22, 0xFF	; 255
    be30:	84 e0       	ldi	r24, 0x04	; 4
    be32:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    be36:	f3 01       	movw	r30, r6
    be38:	87 85       	ldd	r24, Z+15	; 0x0f
    be3a:	f4 01       	movw	r30, r8
    be3c:	31 97       	sbiw	r30, 0x01	; 1
    be3e:	90 81       	ld	r25, Z
    be40:	89 1b       	sub	r24, r25
    be42:	f3 01       	movw	r30, r6
    be44:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    be46:	18 16       	cp	r1, r24
    be48:	bc f0       	brlt	.+46     	; 0xbe78 <animate_shot+0x25c>
							{
								SFX_PLAYER_EXPLODE;
    be4a:	41 e0       	ldi	r20, 0x01	; 1
    be4c:	6f ef       	ldi	r22, 0xFF	; 255
    be4e:	85 e0       	ldi	r24, 0x05	; 5
    be50:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
								other_player->shield = 0;
    be54:	f3 01       	movw	r30, r6
    be56:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    be58:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    be5a:	f4 e5       	ldi	r31, 0x54	; 84
    be5c:	6f 16       	cp	r6, r31
    be5e:	fe e0       	ldi	r31, 0x0E	; 14
    be60:	7f 06       	cpc	r7, r31
    be62:	51 f4       	brne	.+20     	; 0xbe78 <animate_shot+0x25c>
    be64:	80 91 ba 0d 	lds	r24, 0x0DBA
    be68:	90 91 bb 0d 	lds	r25, 0x0DBB
    be6c:	8c 59       	subi	r24, 0x9C	; 156
    be6e:	9f 4f       	sbci	r25, 0xFF	; 255
    be70:	90 93 bb 0d 	sts	0x0DBB, r25
    be74:	80 93 ba 0d 	sts	0x0DBA, r24
							}
							player->shot[i].active = 0;
    be78:	f4 01       	movw	r30, r8
    be7a:	10 82       	st	Z, r1
							player->active_shots--;
    be7c:	f2 01       	movw	r30, r4
    be7e:	87 81       	ldd	r24, Z+7	; 0x07
    be80:	81 50       	subi	r24, 0x01	; 1
    be82:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    be84:	01 e0       	ldi	r16, 0x01	; 1
    be86:	21 e0       	ldi	r18, 0x01	; 1
    be88:	40 e0       	ldi	r20, 0x00	; 0
    be8a:	60 ee       	ldi	r22, 0xE0	; 224
    be8c:	8f 2d       	mov	r24, r15
    be8e:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    be92:	1f 5f       	subi	r17, 0xFF	; 255
    be94:	f4 e1       	ldi	r31, 0x14	; 20
    be96:	8f 0e       	add	r8, r31
    be98:	91 1c       	adc	r9, r1
    be9a:	2c 81       	ldd	r18, Y+4	; 0x04
    be9c:	3d 81       	ldd	r19, Y+5	; 0x05
    be9e:	2c 5e       	subi	r18, 0xEC	; 236
    bea0:	3f 4f       	sbci	r19, 0xFF	; 255
    bea2:	3d 83       	std	Y+5, r19	; 0x05
    bea4:	2c 83       	std	Y+4, r18	; 0x04
    bea6:	13 30       	cpi	r17, 0x03	; 3
    bea8:	09 f0       	breq	.+2      	; 0xbeac <animate_shot+0x290>
    beaa:	dc ce       	rjmp	.-584    	; 0xbc64 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    beac:	0f 90       	pop	r0
    beae:	0f 90       	pop	r0
    beb0:	0f 90       	pop	r0
    beb2:	0f 90       	pop	r0
    beb4:	0f 90       	pop	r0
    beb6:	df 91       	pop	r29
    beb8:	cf 91       	pop	r28
    beba:	1f 91       	pop	r17
    bebc:	0f 91       	pop	r16
    bebe:	ff 90       	pop	r15
    bec0:	ef 90       	pop	r14
    bec2:	df 90       	pop	r13
    bec4:	cf 90       	pop	r12
    bec6:	bf 90       	pop	r11
    bec8:	af 90       	pop	r10
    beca:	9f 90       	pop	r9
    becc:	8f 90       	pop	r8
    bece:	7f 90       	pop	r7
    bed0:	6f 90       	pop	r6
    bed2:	5f 90       	pop	r5
    bed4:	4f 90       	pop	r4
    bed6:	3f 90       	pop	r3
    bed8:	2f 90       	pop	r2
    beda:	08 95       	ret

0000bedc <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    bedc:	7f 92       	push	r7
    bede:	8f 92       	push	r8
    bee0:	9f 92       	push	r9
    bee2:	af 92       	push	r10
    bee4:	bf 92       	push	r11
    bee6:	cf 92       	push	r12
    bee8:	df 92       	push	r13
    beea:	ef 92       	push	r14
    beec:	ff 92       	push	r15
    beee:	0f 93       	push	r16
    bef0:	1f 93       	push	r17
    bef2:	cf 93       	push	r28
    bef4:	df 93       	push	r29
    bef6:	1f 92       	push	r1
    bef8:	cd b7       	in	r28, 0x3d	; 61
    befa:	de b7       	in	r29, 0x3e	; 62
    befc:	6c 01       	movw	r12, r24
    befe:	7b 01       	movw	r14, r22
    bf00:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    bf02:	cb 01       	movw	r24, r22
    bf04:	29 83       	std	Y+1, r18	; 0x01
    bf06:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    bf0a:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    bf0c:	29 81       	ldd	r18, Y+1	; 0x01
    bf0e:	20 9f       	mul	r18, r16
    bf10:	50 01       	movw	r10, r0
    bf12:	11 24       	eor	r1, r1
    bf14:	10 e0       	ldi	r17, 0x00	; 0
    bf16:	81 2f       	mov	r24, r17
    bf18:	90 e0       	ldi	r25, 0x00	; 0
    bf1a:	8a 15       	cp	r24, r10
    bf1c:	9b 05       	cpc	r25, r11
    bf1e:	54 f4       	brge	.+20     	; 0xbf34 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    bf20:	40 e0       	ldi	r20, 0x00	; 0
    bf22:	b4 01       	movw	r22, r8
    bf24:	81 2f       	mov	r24, r17
    bf26:	87 0d       	add	r24, r7
    bf28:	29 83       	std	Y+1, r18	; 0x01
    bf2a:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    bf2e:	1f 5f       	subi	r17, 0xFF	; 255
    bf30:	29 81       	ldd	r18, Y+1	; 0x01
    bf32:	f1 cf       	rjmp	.-30     	; 0xbf16 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    bf34:	f7 01       	movw	r30, r14
    bf36:	84 81       	ldd	r24, Z+4	; 0x04
    bf38:	88 23       	and	r24, r24
    bf3a:	51 f0       	breq	.+20     	; 0xbf50 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    bf3c:	f6 01       	movw	r30, r12
    bf3e:	80 81       	ld	r24, Z
    bf40:	90 e1       	ldi	r25, 0x10	; 16
    bf42:	98 27       	eor	r25, r24
    bf44:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    bf46:	40 e0       	ldi	r20, 0x00	; 0
    bf48:	60 ee       	ldi	r22, 0xE0	; 224
    bf4a:	87 2d       	mov	r24, r7
    bf4c:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	}
	return anim->looped;
}
    bf50:	f7 01       	movw	r30, r14
    bf52:	84 81       	ldd	r24, Z+4	; 0x04
    bf54:	0f 90       	pop	r0
    bf56:	df 91       	pop	r29
    bf58:	cf 91       	pop	r28
    bf5a:	1f 91       	pop	r17
    bf5c:	0f 91       	pop	r16
    bf5e:	ff 90       	pop	r15
    bf60:	ef 90       	pop	r14
    bf62:	df 90       	pop	r13
    bf64:	cf 90       	pop	r12
    bf66:	bf 90       	pop	r11
    bf68:	af 90       	pop	r10
    bf6a:	9f 90       	pop	r9
    bf6c:	8f 90       	pop	r8
    bf6e:	7f 90       	pop	r7
    bf70:	08 95       	ret

0000bf72 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    bf72:	8f 92       	push	r8
    bf74:	9f 92       	push	r9
    bf76:	af 92       	push	r10
    bf78:	bf 92       	push	r11
    bf7a:	cf 92       	push	r12
    bf7c:	df 92       	push	r13
    bf7e:	ef 92       	push	r14
    bf80:	ff 92       	push	r15
    bf82:	0f 93       	push	r16
    bf84:	1f 93       	push	r17
    bf86:	cf 93       	push	r28
    bf88:	df 93       	push	r29
    bf8a:	ec 01       	movw	r28, r24
    bf8c:	c6 2e       	mov	r12, r22
    bf8e:	14 2f       	mov	r17, r20
    bf90:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    bf92:	6c 81       	ldd	r22, Y+4	; 0x04
    bf94:	77 27       	eor	r23, r23
    bf96:	67 fd       	sbrc	r22, 7
    bf98:	70 95       	com	r23
    bf9a:	87 2f       	mov	r24, r23
    bf9c:	97 2f       	mov	r25, r23
    bf9e:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__floatsisf>
    bfa2:	4b 01       	movw	r8, r22
    bfa4:	5c 01       	movw	r10, r24
    bfa6:	8e 81       	ldd	r24, Y+6	; 0x06
    bfa8:	68 2f       	mov	r22, r24
    bfaa:	70 e0       	ldi	r23, 0x00	; 0
    bfac:	80 e0       	ldi	r24, 0x00	; 0
    bfae:	90 e0       	ldi	r25, 0x00	; 0
    bfb0:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__floatsisf>
    bfb4:	29 e8       	ldi	r18, 0x89	; 137
    bfb6:	38 e8       	ldi	r19, 0x88	; 136
    bfb8:	48 e8       	ldi	r20, 0x88	; 136
    bfba:	5c e3       	ldi	r21, 0x3C	; 60
    bfbc:	0e 94 de 72 	call	0xe5bc	; 0xe5bc <__mulsf3>
    bfc0:	9b 01       	movw	r18, r22
    bfc2:	ac 01       	movw	r20, r24
    bfc4:	c5 01       	movw	r24, r10
    bfc6:	b4 01       	movw	r22, r8
    bfc8:	0e 94 bb 71 	call	0xe376	; 0xe376 <__addsf3>
    bfcc:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    bfd0:	69 37       	cpi	r22, 0x79	; 121
    bfd2:	14 f4       	brge	.+4      	; 0xbfd8 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    bfd4:	6c 83       	std	Y+4, r22	; 0x04
    bfd6:	02 c0       	rjmp	.+4      	; 0xbfdc <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    bfd8:	88 e7       	ldi	r24, 0x78	; 120
    bfda:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    bfdc:	60 91 d0 0d 	lds	r22, 0x0DD0
    bfe0:	8d 81       	ldd	r24, Y+5	; 0x05
    bfe2:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    bfe6:	28 81       	ld	r18, Y
    bfe8:	39 81       	ldd	r19, Y+1	; 0x01
    bfea:	82 0f       	add	r24, r18
    bfec:	93 1f       	adc	r25, r19
    bfee:	99 83       	std	Y+1, r25	; 0x01
    bff0:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    bff2:	60 91 d0 0d 	lds	r22, 0x0DD0
    bff6:	8c 81       	ldd	r24, Y+4	; 0x04
    bff8:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    bffc:	ea 81       	ldd	r30, Y+2	; 0x02
    bffe:	fb 81       	ldd	r31, Y+3	; 0x03
    c000:	8e 0f       	add	r24, r30
    c002:	9f 1f       	adc	r25, r31
    c004:	9b 83       	std	Y+3, r25	; 0x03
    c006:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c008:	4d 2d       	mov	r20, r13
    c00a:	61 2f       	mov	r22, r17
    c00c:	ce 01       	movw	r24, r28
    c00e:	0e 94 00 5c 	call	0xb800	; 0xb800 <collision_detect_level>
    c012:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c014:	88 23       	and	r24, r24
    c016:	41 f0       	breq	.+16     	; 0xc028 <animate_sprite+0xb6>
    c018:	00 23       	and	r16, r16
    c01a:	31 f0       	breq	.+12     	; 0xc028 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c01c:	88 e0       	ldi	r24, 0x08	; 8
    c01e:	e8 9e       	mul	r14, r24
    c020:	70 01       	movw	r14, r0
    c022:	11 24       	eor	r1, r1
    c024:	fb 82       	std	Y+3, r15	; 0x03
    c026:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c028:	3a 81       	ldd	r19, Y+2	; 0x02
    c02a:	80 91 be 0d 	lds	r24, 0x0DBE
    c02e:	43 2f       	mov	r20, r19
    c030:	48 1b       	sub	r20, r24
    c032:	98 81       	ld	r25, Y
    c034:	80 91 b6 0d 	lds	r24, 0x0DB6
    c038:	69 2f       	mov	r22, r25
    c03a:	68 1b       	sub	r22, r24
    c03c:	0d 2d       	mov	r16, r13
    c03e:	21 2f       	mov	r18, r17
    c040:	8c 2d       	mov	r24, r12
    c042:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	return result;
}
    c046:	8b 2d       	mov	r24, r11
    c048:	df 91       	pop	r29
    c04a:	cf 91       	pop	r28
    c04c:	1f 91       	pop	r17
    c04e:	0f 91       	pop	r16
    c050:	ff 90       	pop	r15
    c052:	ef 90       	pop	r14
    c054:	df 90       	pop	r13
    c056:	cf 90       	pop	r12
    c058:	bf 90       	pop	r11
    c05a:	af 90       	pop	r10
    c05c:	9f 90       	pop	r9
    c05e:	8f 90       	pop	r8
    c060:	08 95       	ret

0000c062 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c062:	ef 92       	push	r14
    c064:	0f 93       	push	r16
    c066:	fc 01       	movw	r30, r24
    c068:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    c06a:	90 85       	ldd	r25, Z+8	; 0x08
    c06c:	94 ff       	sbrs	r25, 4
    c06e:	0f c0       	rjmp	.+30     	; 0xc08e <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c070:	92 81       	ldd	r25, Z+2	; 0x02
    c072:	20 91 be 0d 	lds	r18, 0x0DBE
    c076:	49 2f       	mov	r20, r25
    c078:	42 1b       	sub	r20, r18
    c07a:	90 81       	ld	r25, Z
    c07c:	20 91 b6 0d 	lds	r18, 0x0DB6
    c080:	69 2f       	mov	r22, r25
    c082:	62 1b       	sub	r22, r18
    c084:	04 85       	ldd	r16, Z+12	; 0x0c
    c086:	23 85       	ldd	r18, Z+11	; 0x0b
    c088:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
    c08c:	14 c0       	rjmp	.+40     	; 0xc0b6 <animate_player+0x54>
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c08e:	e1 2c       	mov	r14, r1
    c090:	00 e0       	ldi	r16, 0x00	; 0
    c092:	24 85       	ldd	r18, Z+12	; 0x0c
    c094:	43 85       	ldd	r20, Z+11	; 0x0b
    c096:	68 2f       	mov	r22, r24
    c098:	cf 01       	movw	r24, r30
    c09a:	0e 94 b9 5f 	call	0xbf72	; 0xbf72 <animate_sprite>
    c09e:	82 30       	cpi	r24, 0x02	; 2
    c0a0:	50 f0       	brcs	.+20     	; 0xc0b6 <animate_player+0x54>
	{
		SFX_PLAYER_EXPLODE;
    c0a2:	41 e0       	ldi	r20, 0x01	; 1
    c0a4:	6f ef       	ldi	r22, 0xFF	; 255
    c0a6:	85 e0       	ldi	r24, 0x05	; 5
    c0a8:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
		game.player.shield = 0;
    c0ac:	10 92 e8 0d 	sts	0x0DE8, r1
		game.player.flags = EXPLODING;
    c0b0:	80 e1       	ldi	r24, 0x10	; 16
    c0b2:	80 93 e1 0d 	sts	0x0DE1, r24
	}
}
    c0b6:	0f 91       	pop	r16
    c0b8:	ef 90       	pop	r14
    c0ba:	08 95       	ret

0000c0bc <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c0bc:	1f 93       	push	r17
    c0be:	cf 93       	push	r28
    c0c0:	df 93       	push	r29
    c0c2:	ec 01       	movw	r28, r24
    c0c4:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c0c6:	98 85       	ldd	r25, Y+8	; 0x08
    c0c8:	89 2f       	mov	r24, r25
    c0ca:	88 70       	andi	r24, 0x08	; 8
    c0cc:	93 ff       	sbrs	r25, 3
    c0ce:	14 c0       	rjmp	.+40     	; 0xc0f8 <update_spider_enemy+0x3c>
    c0d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    c0d2:	20 38       	cpi	r18, 0x80	; 128
    c0d4:	89 f4       	brne	.+34     	; 0xc0f8 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c0d6:	81 e0       	ldi	r24, 0x01	; 1
    c0d8:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c0da:	8c e9       	ldi	r24, 0x9C	; 156
    c0dc:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c0de:	88 ec       	ldi	r24, 0xC8	; 200
    c0e0:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c0e2:	8c e3       	ldi	r24, 0x3C	; 60
    c0e4:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c0e6:	89 85       	ldd	r24, Y+9	; 0x09
    c0e8:	81 11       	cpse	r24, r1
    c0ea:	02 c0       	rjmp	.+4      	; 0xc0f0 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c0ec:	84 ec       	ldi	r24, 0xC4	; 196
    c0ee:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c0f0:	40 e0       	ldi	r20, 0x00	; 0
    c0f2:	61 e4       	ldi	r22, 0x41	; 65
    c0f4:	70 e3       	ldi	r23, 0x30	; 48
    c0f6:	19 c0       	rjmp	.+50     	; 0xc12a <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c0f8:	90 ff       	sbrs	r25, 0
    c0fa:	0f c0       	rjmp	.+30     	; 0xc11a <update_spider_enemy+0x5e>
    c0fc:	9e 81       	ldd	r25, Y+6	; 0x06
    c0fe:	91 11       	cpse	r25, r1
    c100:	0c c0       	rjmp	.+24     	; 0xc11a <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c102:	88 e0       	ldi	r24, 0x08	; 8
    c104:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c106:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c108:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c10a:	89 85       	ldd	r24, Y+9	; 0x09
    c10c:	81 11       	cpse	r24, r1
    c10e:	03 c0       	rjmp	.+6      	; 0xc116 <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c110:	81 e0       	ldi	r24, 0x01	; 1
    c112:	89 87       	std	Y+9, r24	; 0x09
    c114:	0d c0       	rjmp	.+26     	; 0xc130 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c116:	19 86       	std	Y+9, r1	; 0x09
    c118:	0b c0       	rjmp	.+22     	; 0xc130 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c11a:	88 23       	and	r24, r24
    c11c:	49 f0       	breq	.+18     	; 0xc130 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c11e:	ce 01       	movw	r24, r28
    c120:	85 96       	adiw	r24, 0x25	; 37
    c122:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c126:	40 e0       	ldi	r20, 0x00	; 0
    c128:	bc 01       	movw	r22, r24
    c12a:	81 2f       	mov	r24, r17
    c12c:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	}
	e->frame_count++;
    c130:	8d 85       	ldd	r24, Y+13	; 0x0d
    c132:	8f 5f       	subi	r24, 0xFF	; 255
    c134:	8d 87       	std	Y+13, r24	; 0x0d
}
    c136:	df 91       	pop	r29
    c138:	cf 91       	pop	r28
    c13a:	1f 91       	pop	r17
    c13c:	08 95       	ret

0000c13e <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c13e:	cf 93       	push	r28
    c140:	fc 01       	movw	r30, r24
    c142:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c144:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c146:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    c148:	40 91 d9 0d 	lds	r20, 0x0DD9
    c14c:	50 91 da 0d 	lds	r21, 0x0DDA
    c150:	20 81       	ld	r18, Z
    c152:	31 81       	ldd	r19, Z+1	; 0x01
    c154:	85 96       	adiw	r24, 0x25	; 37
    c156:	24 17       	cp	r18, r20
    c158:	35 07       	cpc	r19, r21
    c15a:	38 f4       	brcc	.+14     	; 0xc16a <update_turret_enemy+0x2c>
    c15c:	24 85       	ldd	r18, Z+12	; 0x0c
    c15e:	26 30       	cpi	r18, 0x06	; 6
    c160:	21 f0       	breq	.+8      	; 0xc16a <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c162:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c166:	41 e0       	ldi	r20, 0x01	; 1
    c168:	03 c0       	rjmp	.+6      	; 0xc170 <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c16a:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c16e:	40 e0       	ldi	r20, 0x00	; 0
    c170:	bc 01       	movw	r22, r24
    c172:	8c 2f       	mov	r24, r28
	}
}
    c174:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c176:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000c17a <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c17a:	cf 93       	push	r28
    c17c:	fc 01       	movw	r30, r24
    c17e:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c180:	82 ee       	ldi	r24, 0xE2	; 226
    c182:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c184:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c186:	cf 01       	movw	r24, r30
    c188:	85 96       	adiw	r24, 0x25	; 37
    c18a:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c18e:	40 e0       	ldi	r20, 0x00	; 0
    c190:	bc 01       	movw	r22, r24
    c192:	8c 2f       	mov	r24, r28
}
    c194:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c196:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000c19a <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c19a:	cf 93       	push	r28
    c19c:	fc 01       	movw	r30, r24
    c19e:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c1a0:	8a e0       	ldi	r24, 0x0A	; 10
    c1a2:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c1a4:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1a6:	cf 01       	movw	r24, r30
    c1a8:	85 96       	adiw	r24, 0x25	; 37
    c1aa:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c1ae:	40 e0       	ldi	r20, 0x00	; 0
    c1b0:	bc 01       	movw	r22, r24
    c1b2:	8c 2f       	mov	r24, r28
}
    c1b4:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1b6:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000c1ba <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    c1ba:	cf 93       	push	r28
    c1bc:	fc 01       	movw	r30, r24
    c1be:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    c1c0:	84 e1       	ldi	r24, 0x14	; 20
    c1c2:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    c1c4:	80 91 d0 0d 	lds	r24, 0x0DD0
    c1c8:	6c e3       	ldi	r22, 0x3C	; 60
    c1ca:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    c1ce:	91 11       	cpse	r25, r1
    c1d0:	03 c0       	rjmp	.+6      	; 0xc1d8 <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    c1d2:	94 81       	ldd	r25, Z+4	; 0x04
    c1d4:	91 95       	neg	r25
    c1d6:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1d8:	cf 01       	movw	r24, r30
    c1da:	85 96       	adiw	r24, 0x25	; 37
    c1dc:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c1e0:	40 e0       	ldi	r20, 0x00	; 0
    c1e2:	bc 01       	movw	r22, r24
    c1e4:	8c 2f       	mov	r24, r28
}
    c1e6:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1e8:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000c1ec <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c1ec:	cf 93       	push	r28
    c1ee:	fc 01       	movw	r30, r24
    c1f0:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c1f2:	8e e1       	ldi	r24, 0x1E	; 30
    c1f4:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c1f6:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1f8:	cf 01       	movw	r24, r30
    c1fa:	85 96       	adiw	r24, 0x25	; 37
    c1fc:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c200:	40 e0       	ldi	r20, 0x00	; 0
    c202:	bc 01       	movw	r22, r24
    c204:	8c 2f       	mov	r24, r28
}
    c206:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c208:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000c20c <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c20c:	cf 93       	push	r28
    c20e:	fc 01       	movw	r30, r24
    c210:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c212:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c214:	8e e1       	ldi	r24, 0x1E	; 30
    c216:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c218:	80 91 cb 0d 	lds	r24, 0x0DCB
    c21c:	82 30       	cpi	r24, 0x02	; 2
    c21e:	11 f4       	brne	.+4      	; 0xc224 <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c220:	82 ee       	ldi	r24, 0xE2	; 226
    c222:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c224:	22 81       	ldd	r18, Z+2	; 0x02
    c226:	33 81       	ldd	r19, Z+3	; 0x03
    c228:	24 50       	subi	r18, 0x04	; 4
    c22a:	31 09       	sbc	r19, r1
    c22c:	2d 3b       	cpi	r18, 0xBD	; 189
    c22e:	31 05       	cpc	r19, r1
    c230:	38 f0       	brcs	.+14     	; 0xc240 <update_level_hazard+0x34>
    c232:	27 85       	ldd	r18, Z+15	; 0x0f
    c234:	88 e0       	ldi	r24, 0x08	; 8
    c236:	28 9f       	mul	r18, r24
    c238:	90 01       	movw	r18, r0
    c23a:	11 24       	eor	r1, r1
    c23c:	33 83       	std	Z+3, r19	; 0x03
    c23e:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c240:	cf 01       	movw	r24, r30
    c242:	85 96       	adiw	r24, 0x25	; 37
    c244:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c248:	40 e0       	ldi	r20, 0x00	; 0
    c24a:	bc 01       	movw	r22, r24
    c24c:	8c 2f       	mov	r24, r28
}
    c24e:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c250:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000c254 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c254:	cf 93       	push	r28
    c256:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c258:	0c 96       	adiw	r24, 0x0c	; 12
    c25a:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c25e:	40 e0       	ldi	r20, 0x00	; 0
    c260:	bc 01       	movw	r22, r24
    c262:	8c 2f       	mov	r24, r28
}
    c264:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c266:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000c26a <update_enemies>:
}

void update_enemies()
{
    c26a:	cf 92       	push	r12
    c26c:	df 92       	push	r13
    c26e:	ef 92       	push	r14
    c270:	ff 92       	push	r15
    c272:	0f 93       	push	r16
    c274:	1f 93       	push	r17
    c276:	cf 93       	push	r28
    c278:	df 93       	push	r29
    c27a:	8a ed       	ldi	r24, 0xDA	; 218
    c27c:	e8 2e       	mov	r14, r24
    c27e:	8e e0       	ldi	r24, 0x0E	; 14
    c280:	f8 2e       	mov	r15, r24
    c282:	cf ec       	ldi	r28, 0xCF	; 207
    c284:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c286:	19 e0       	ldi	r17, 0x09	; 9
    c288:	f7 01       	movw	r30, r14
    c28a:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c28c:	80 81       	ld	r24, Z
    c28e:	97 01       	movw	r18, r14
    c290:	21 50       	subi	r18, 0x01	; 1
    c292:	31 09       	sbc	r19, r1
    c294:	69 01       	movw	r12, r18
    c296:	84 ff       	sbrs	r24, 4
    c298:	0d c0       	rjmp	.+26     	; 0xc2b4 <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c29a:	d7 01       	movw	r26, r14
    c29c:	0c 91       	ld	r16, X
    c29e:	f9 01       	movw	r30, r18
    c2a0:	20 81       	ld	r18, Z
    c2a2:	41 2f       	mov	r20, r17
    c2a4:	be 01       	movw	r22, r28
    c2a6:	63 5d       	subi	r22, 0xD3	; 211
    c2a8:	7f 4f       	sbci	r23, 0xFF	; 255
    c2aa:	ce 01       	movw	r24, r28
    c2ac:	08 96       	adiw	r24, 0x08	; 8
    c2ae:	0e 94 6e 5f 	call	0xbedc	; 0xbedc <map_explosion>
    c2b2:	2e c0       	rjmp	.+92     	; 0xc310 <update_enemies+0xa6>
    c2b4:	f7 01       	movw	r30, r14
    c2b6:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c2b8:	80 81       	ld	r24, Z
    c2ba:	88 23       	and	r24, r24
    c2bc:	49 f1       	breq	.+82     	; 0xc310 <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c2be:	d7 01       	movw	r26, r14
    c2c0:	11 96       	adiw	r26, 0x01	; 1
    c2c2:	ec 91       	ld	r30, X
    c2c4:	8e 2f       	mov	r24, r30
    c2c6:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c2c8:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c2ca:	89 30       	cpi	r24, 0x09	; 9
    c2cc:	91 05       	cpc	r25, r1
    c2ce:	e8 f4       	brcc	.+58     	; 0xc30a <update_enemies+0xa0>
    c2d0:	fc 01       	movw	r30, r24
    c2d2:	e8 5c       	subi	r30, 0xC8	; 200
    c2d4:	ff 4f       	sbci	r31, 0xFF	; 255
    c2d6:	0c 94 b4 71 	jmp	0xe368	; 0xe368 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c2da:	ce 01       	movw	r24, r28
    c2dc:	0e 94 5e 60 	call	0xc0bc	; 0xc0bc <update_spider_enemy>
    c2e0:	17 c0       	rjmp	.+46     	; 0xc310 <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    c2e2:	ce 01       	movw	r24, r28
    c2e4:	0e 94 9f 60 	call	0xc13e	; 0xc13e <update_turret_enemy>
    c2e8:	13 c0       	rjmp	.+38     	; 0xc310 <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c2ea:	ce 01       	movw	r24, r28
    c2ec:	0e 94 bd 60 	call	0xc17a	; 0xc17a <update_drone_enemy>
    c2f0:	0f c0       	rjmp	.+30     	; 0xc310 <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c2f2:	ce 01       	movw	r24, r28
    c2f4:	0e 94 f6 60 	call	0xc1ec	; 0xc1ec <update_shark_enemy>
    c2f8:	0b c0       	rjmp	.+22     	; 0xc310 <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c2fa:	ce 01       	movw	r24, r28
    c2fc:	0e 94 cd 60 	call	0xc19a	; 0xc19a <update_globe_enemy>
    c300:	07 c0       	rjmp	.+14     	; 0xc310 <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    c302:	ce 01       	movw	r24, r28
    c304:	0e 94 dd 60 	call	0xc1ba	; 0xc1ba <update_xwing_enemy>
    c308:	03 c0       	rjmp	.+6      	; 0xc310 <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    c30a:	ce 01       	movw	r24, r28
    c30c:	0e 94 06 61 	call	0xc20c	; 0xc20c <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c310:	f6 01       	movw	r30, r12
    c312:	90 81       	ld	r25, Z
    c314:	d7 01       	movw	r26, r14
    c316:	8c 91       	ld	r24, X
    c318:	98 9f       	mul	r25, r24
    c31a:	10 0d       	add	r17, r0
    c31c:	11 24       	eor	r1, r1
    c31e:	b5 e3       	ldi	r27, 0x35	; 53
    c320:	eb 0e       	add	r14, r27
    c322:	f1 1c       	adc	r15, r1
    c324:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c326:	e3 ee       	ldi	r30, 0xE3	; 227
    c328:	ee 16       	cp	r14, r30
    c32a:	ef e0       	ldi	r30, 0x0F	; 15
    c32c:	fe 06       	cpc	r15, r30
    c32e:	09 f0       	breq	.+2      	; 0xc332 <update_enemies+0xc8>
    c330:	ab cf       	rjmp	.-170    	; 0xc288 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c332:	df 91       	pop	r29
    c334:	cf 91       	pop	r28
    c336:	1f 91       	pop	r17
    c338:	0f 91       	pop	r16
    c33a:	ff 90       	pop	r15
    c33c:	ef 90       	pop	r14
    c33e:	df 90       	pop	r13
    c340:	cf 90       	pop	r12
    c342:	08 95       	ret

0000c344 <update_enemy_shots>:

void update_enemy_shots()
{
    c344:	6f 92       	push	r6
    c346:	7f 92       	push	r7
    c348:	8f 92       	push	r8
    c34a:	9f 92       	push	r9
    c34c:	bf 92       	push	r11
    c34e:	cf 92       	push	r12
    c350:	df 92       	push	r13
    c352:	ef 92       	push	r14
    c354:	ff 92       	push	r15
    c356:	0f 93       	push	r16
    c358:	1f 93       	push	r17
    c35a:	cf 93       	push	r28
    c35c:	df 93       	push	r29
    c35e:	1f 92       	push	r1
    c360:	cd b7       	in	r28, 0x3d	; 61
    c362:	de b7       	in	r29, 0x3e	; 62
    c364:	8d ed       	ldi	r24, 0xDD	; 221
    c366:	68 2e       	mov	r6, r24
    c368:	8e e0       	ldi	r24, 0x0E	; 14
    c36a:	78 2e       	mov	r7, r24
    c36c:	9a ee       	ldi	r25, 0xEA	; 234
    c36e:	e9 2e       	mov	r14, r25
    c370:	9e e0       	ldi	r25, 0x0E	; 14
    c372:	f9 2e       	mov	r15, r25
    c374:	24 ee       	ldi	r18, 0xE4	; 228
    c376:	c2 2e       	mov	r12, r18
    c378:	2e e0       	ldi	r18, 0x0E	; 14
    c37a:	d2 2e       	mov	r13, r18
    c37c:	00 e1       	ldi	r16, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c37e:	bb 24       	eor	r11, r11
    c380:	b3 94       	inc	r11
    c382:	6f ef       	ldi	r22, 0xFF	; 255
    c384:	60 0f       	add	r22, r16
    c386:	f3 01       	movw	r30, r6
    c388:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c38a:	80 81       	ld	r24, Z
    c38c:	35 97       	sbiw	r30, 0x05	; 5
    c38e:	82 30       	cpi	r24, 0x02	; 2
    c390:	09 f4       	brne	.+2      	; 0xc394 <update_enemy_shots+0x50>
    c392:	55 c0       	rjmp	.+170    	; 0xc43e <update_enemy_shots+0xfa>
    c394:	90 81       	ld	r25, Z
    c396:	99 23       	and	r25, r25
    c398:	09 f4       	brne	.+2      	; 0xc39c <update_enemy_shots+0x58>
    c39a:	51 c0       	rjmp	.+162    	; 0xc43e <update_enemy_shots+0xfa>
    c39c:	d3 01       	movw	r26, r6
    c39e:	9c 91       	ld	r25, X
    c3a0:	9c 33       	cpi	r25, 0x3C	; 60
    c3a2:	08 f4       	brcc	.+2      	; 0xc3a6 <update_enemy_shots+0x62>
    c3a4:	4c c0       	rjmp	.+152    	; 0xc43e <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    c3a6:	1c 92       	st	X, r1
    c3a8:	f7 01       	movw	r30, r14
    c3aa:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c3ac:	90 81       	ld	r25, Z
    c3ae:	97 30       	cpi	r25, 0x07	; 7
    c3b0:	09 f0       	breq	.+2      	; 0xc3b4 <update_enemy_shots+0x70>
    c3b2:	4c c0       	rjmp	.+152    	; 0xc44c <update_enemy_shots+0x108>
    c3b4:	f7 01       	movw	r30, r14
				{
					if (!game.enemies[i].shot[j].active)
    c3b6:	92 91       	ld	r25, -Z
    c3b8:	91 11       	cpse	r25, r1
    c3ba:	3c c0       	rjmp	.+120    	; 0xc434 <update_enemy_shots+0xf0>
					{
						game.enemies[i].shot[j].active = 1;
    c3bc:	b0 82       	st	Z, r11
    c3be:	f3 01       	movw	r30, r6
    c3c0:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c3c2:	20 81       	ld	r18, Z
    c3c4:	31 81       	ldd	r19, Z+1	; 0x01
    c3c6:	f3 01       	movw	r30, r6
    c3c8:	34 83       	std	Z+4, r19	; 0x04
    c3ca:	23 83       	std	Z+3, r18	; 0x03
    c3cc:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c3ce:	40 81       	ld	r20, Z
    c3d0:	51 81       	ldd	r21, Z+1	; 0x01
    c3d2:	fa 01       	movw	r30, r20
    c3d4:	e8 7f       	andi	r30, 0xF8	; 248
    c3d6:	16 96       	adiw	r26, 0x06	; 6
    c3d8:	fc 93       	st	X, r31
    c3da:	ee 93       	st	-X, r30
    c3dc:	15 97       	sbiw	r26, 0x05	; 5
    c3de:	f7 01       	movw	r30, r14
    c3e0:	10 81       	ld	r17, Z
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c3e2:	84 30       	cpi	r24, 0x04	; 4
    c3e4:	19 f4       	brne	.+6      	; 0xc3ec <update_enemy_shots+0xa8>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c3e6:	d6 01       	movw	r26, r12
    c3e8:	1c 93       	st	X, r17
    c3ea:	24 c0       	rjmp	.+72     	; 0xc434 <update_enemy_shots+0xf0>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c3ec:	85 30       	cpi	r24, 0x05	; 5
    c3ee:	59 f4       	brne	.+22     	; 0xc406 <update_enemy_shots+0xc2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c3f0:	f6 01       	movw	r30, r12
    c3f2:	10 83       	st	Z, r17
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c3f4:	80 91 db 0d 	lds	r24, 0x0DDB
    c3f8:	90 91 dc 0d 	lds	r25, 0x0DDC
    c3fc:	48 17       	cp	r20, r24
    c3fe:	59 07       	cpc	r21, r25
    c400:	c8 f0       	brcs	.+50     	; 0xc434 <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c402:	11 95       	neg	r17
    c404:	16 c0       	rjmp	.+44     	; 0xc432 <update_enemy_shots+0xee>
    c406:	47 01       	movw	r8, r14
    c408:	f5 e0       	ldi	r31, 0x05	; 5
    c40a:	8f 1a       	sub	r8, r31
    c40c:	91 08       	sbc	r9, r1
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c40e:	81 2f       	mov	r24, r17
    c410:	81 95       	neg	r24
    c412:	d4 01       	movw	r26, r8
    c414:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    c416:	80 91 d9 0d 	lds	r24, 0x0DD9
    c41a:	90 91 da 0d 	lds	r25, 0x0DDA
    c41e:	82 17       	cp	r24, r18
    c420:	93 07       	cpc	r25, r19
    c422:	40 f0       	brcs	.+16     	; 0xc434 <update_enemy_shots+0xf0>
    c424:	69 83       	std	Y+1, r22	; 0x01
    c426:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    c42a:	69 81       	ldd	r22, Y+1	; 0x01
    c42c:	81 11       	cpse	r24, r1
    c42e:	02 c0       	rjmp	.+4      	; 0xc434 <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c430:	f4 01       	movw	r30, r8
    c432:	10 83       	st	Z, r17
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c434:	c3 01       	movw	r24, r6
    c436:	03 96       	adiw	r24, 0x03	; 3
    c438:	0e 94 2a 61 	call	0xc254	; 0xc254 <update_basic_shot>
    c43c:	07 c0       	rjmp	.+14     	; 0xc44c <update_enemy_shots+0x108>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c43e:	80 81       	ld	r24, Z
    c440:	88 23       	and	r24, r24
    c442:	21 f0       	breq	.+8      	; 0xc44c <update_enemy_shots+0x108>
		{
			game.enemies[i].shot_frame_count++;
    c444:	d3 01       	movw	r26, r6
    c446:	8c 91       	ld	r24, X
    c448:	8f 5f       	subi	r24, 0xFF	; 255
    c44a:	8c 93       	st	X, r24
    c44c:	0f 5f       	subi	r16, 0xFF	; 255
    c44e:	b5 e3       	ldi	r27, 0x35	; 53
    c450:	6b 0e       	add	r6, r27
    c452:	71 1c       	adc	r7, r1
    c454:	e5 e3       	ldi	r30, 0x35	; 53
    c456:	ee 0e       	add	r14, r30
    c458:	f1 1c       	adc	r15, r1
    c45a:	f5 e3       	ldi	r31, 0x35	; 53
    c45c:	cf 0e       	add	r12, r31
    c45e:	d1 1c       	adc	r13, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c460:	05 31       	cpi	r16, 0x15	; 21
    c462:	09 f0       	breq	.+2      	; 0xc466 <update_enemy_shots+0x122>
    c464:	8e cf       	rjmp	.-228    	; 0xc382 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c466:	0f 90       	pop	r0
    c468:	df 91       	pop	r29
    c46a:	cf 91       	pop	r28
    c46c:	1f 91       	pop	r17
    c46e:	0f 91       	pop	r16
    c470:	ff 90       	pop	r15
    c472:	ef 90       	pop	r14
    c474:	df 90       	pop	r13
    c476:	cf 90       	pop	r12
    c478:	bf 90       	pop	r11
    c47a:	9f 90       	pop	r9
    c47c:	8f 90       	pop	r8
    c47e:	7f 90       	pop	r7
    c480:	6f 90       	pop	r6
    c482:	08 95       	ret

0000c484 <animate_enemies>:

void animate_enemies()
{
    c484:	2f 92       	push	r2
    c486:	3f 92       	push	r3
    c488:	4f 92       	push	r4
    c48a:	5f 92       	push	r5
    c48c:	6f 92       	push	r6
    c48e:	7f 92       	push	r7
    c490:	8f 92       	push	r8
    c492:	9f 92       	push	r9
    c494:	af 92       	push	r10
    c496:	cf 92       	push	r12
    c498:	df 92       	push	r13
    c49a:	ef 92       	push	r14
    c49c:	ff 92       	push	r15
    c49e:	0f 93       	push	r16
    c4a0:	1f 93       	push	r17
    c4a2:	cf 93       	push	r28
    c4a4:	df 93       	push	r29
    c4a6:	00 d0       	rcall	.+0      	; 0xc4a8 <animate_enemies+0x24>
    c4a8:	00 d0       	rcall	.+0      	; 0xc4aa <animate_enemies+0x26>
    c4aa:	cd b7       	in	r28, 0x3d	; 61
    c4ac:	de b7       	in	r29, 0x3e	; 62
    c4ae:	46 ed       	ldi	r20, 0xD6	; 214
    c4b0:	24 2e       	mov	r2, r20
    c4b2:	4e e0       	ldi	r20, 0x0E	; 14
    c4b4:	34 2e       	mov	r3, r20
    c4b6:	59 ed       	ldi	r21, 0xD9	; 217
    c4b8:	65 2e       	mov	r6, r21
    c4ba:	5e e0       	ldi	r21, 0x0E	; 14
    c4bc:	75 2e       	mov	r7, r21
    c4be:	6a ed       	ldi	r22, 0xDA	; 218
    c4c0:	86 2e       	mov	r8, r22
    c4c2:	6e e0       	ldi	r22, 0x0E	; 14
    c4c4:	96 2e       	mov	r9, r22
    c4c6:	8f ec       	ldi	r24, 0xCF	; 207
    c4c8:	9e e0       	ldi	r25, 0x0E	; 14
    c4ca:	9c 83       	std	Y+4, r25	; 0x04
    c4cc:	8b 83       	std	Y+3, r24	; 0x03
    c4ce:	a7 ed       	ldi	r26, 0xD7	; 215
    c4d0:	be e0       	ldi	r27, 0x0E	; 14
    c4d2:	ba 83       	std	Y+2, r27	; 0x02
    c4d4:	a9 83       	std	Y+1, r26	; 0x01
    c4d6:	41 2c       	mov	r4, r1
    c4d8:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    c4da:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c4dc:	70 e1       	ldi	r23, 0x10	; 16
    c4de:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c4e0:	f1 01       	movw	r30, r2
    c4e2:	80 81       	ld	r24, Z
    c4e4:	88 23       	and	r24, r24
    c4e6:	09 f4       	brne	.+2      	; 0xc4ea <animate_enemies+0x66>
    c4e8:	9b c0       	rjmp	.+310    	; 0xc620 <animate_enemies+0x19c>
    c4ea:	a9 81       	ldd	r26, Y+1	; 0x01
    c4ec:	ba 81       	ldd	r27, Y+2	; 0x02
    c4ee:	8c 91       	ld	r24, X
    c4f0:	84 fd       	sbrc	r24, 4
    c4f2:	96 c0       	rjmp	.+300    	; 0xc620 <animate_enemies+0x19c>
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c4f4:	eb 81       	ldd	r30, Y+3	; 0x03
    c4f6:	fc 81       	ldd	r31, Y+4	; 0x04
    c4f8:	20 81       	ld	r18, Z
    c4fa:	31 81       	ldd	r19, Z+1	; 0x01
    c4fc:	e0 91 b6 0d 	lds	r30, 0x0DB6
    c500:	f0 91 b7 0d 	lds	r31, 0x0DB7
    c504:	2e 17       	cp	r18, r30
    c506:	3f 07       	cpc	r19, r31
    c508:	10 f1       	brcs	.+68     	; 0xc54e <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
    c50a:	ab 81       	ldd	r26, Y+3	; 0x03
    c50c:	bc 81       	ldd	r27, Y+4	; 0x04
    c50e:	12 96       	adiw	r26, 0x02	; 2
    c510:	ed 90       	ld	r14, X+
    c512:	fc 90       	ld	r15, X
    c514:	13 97       	sbiw	r26, 0x03	; 3
    c516:	80 91 be 0d 	lds	r24, 0x0DBE
    c51a:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c51c:	e8 16       	cp	r14, r24
    c51e:	f9 06       	cpc	r15, r25
    c520:	b0 f0       	brcs	.+44     	; 0xc54e <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c522:	88 53       	subi	r24, 0x38	; 56
    c524:	9f 4f       	sbci	r25, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
    c526:	8e 15       	cp	r24, r14
    c528:	9f 05       	cpc	r25, r15
    c52a:	88 f0       	brcs	.+34     	; 0xc54e <animate_enemies+0xca>
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c52c:	cf 01       	movw	r24, r30
    c52e:	80 52       	subi	r24, 0x20	; 32
    c530:	9f 4f       	sbci	r25, 0xFF	; 255
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c532:	82 17       	cp	r24, r18
    c534:	93 07       	cpc	r25, r19
    c536:	c8 f4       	brcc	.+50     	; 0xc56a <animate_enemies+0xe6>
    c538:	d2 01       	movw	r26, r4
    c53a:	a5 52       	subi	r26, 0x25	; 37
    c53c:	b1 4f       	sbci	r27, 0xF1	; 241
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c53e:	8c 91       	ld	r24, X
    c540:	81 11       	cpse	r24, r1
    c542:	13 c0       	rjmp	.+38     	; 0xc56a <animate_enemies+0xe6>
    c544:	d4 01       	movw	r26, r8
    c546:	12 97       	sbiw	r26, 0x02	; 2
				 game.enemies[i].enemy_type == ENEMY_SPIDER &&
    c548:	8c 91       	ld	r24, X
    c54a:	81 30       	cpi	r24, 0x01	; 1
    c54c:	71 f4       	brne	.+28     	; 0xc56a <animate_enemies+0xe6>
				 game.enemies[i].direction == D_RIGHT))
			{
				game.enemies[i].active = 0;
    c54e:	f1 01       	movw	r30, r2
    c550:	10 82       	st	Z, r1
				game.active_enemies--;
    c552:	80 91 d1 0d 	lds	r24, 0x0DD1
    c556:	81 50       	subi	r24, 0x01	; 1
    c558:	80 93 d1 0d 	sts	0x0DD1, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c55c:	d4 01       	movw	r26, r8
    c55e:	0c 91       	ld	r16, X
    c560:	f3 01       	movw	r30, r6
    c562:	20 81       	ld	r18, Z
    c564:	40 e0       	ldi	r20, 0x00	; 0
    c566:	60 ee       	ldi	r22, 0xE0	; 224
    c568:	6e c0       	rjmp	.+220    	; 0xc646 <animate_enemies+0x1c2>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c56a:	02 2f       	mov	r16, r18
    c56c:	0e 1b       	sub	r16, r30
    c56e:	20 91 e5 0d 	lds	r18, 0x0DE5
    c572:	22 0f       	add	r18, r18
    c574:	22 0f       	add	r18, r18
    c576:	22 0f       	add	r18, r18
    c578:	40 91 e4 0d 	lds	r20, 0x0DE4
    c57c:	44 0f       	add	r20, r20
    c57e:	44 0f       	add	r20, r20
    c580:	44 0f       	add	r20, r20
    c582:	80 91 d9 0d 	lds	r24, 0x0DD9
    c586:	98 e0       	ldi	r25, 0x08	; 8
    c588:	a9 2e       	mov	r10, r25
    c58a:	38 e0       	ldi	r19, 0x08	; 8
    c58c:	c3 2e       	mov	r12, r19
    c58e:	60 91 db 0d 	lds	r22, 0x0DDB
    c592:	8e 1b       	sub	r24, r30
    c594:	0e 94 dd 4d 	call	0x9bba	; 0x9bba <LBCollides>
    c598:	88 23       	and	r24, r24
    c59a:	79 f0       	breq	.+30     	; 0xc5ba <animate_enemies+0x136>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c59c:	80 91 e1 0d 	lds	r24, 0x0DE1
    c5a0:	84 fd       	sbrc	r24, 4
    c5a2:	0b c0       	rjmp	.+22     	; 0xc5ba <animate_enemies+0x136>
			)
			{
				SFX_PLAYER_EXPLODE;
    c5a4:	41 e0       	ldi	r20, 0x01	; 1
    c5a6:	6f ef       	ldi	r22, 0xFF	; 255
    c5a8:	85 e0       	ldi	r24, 0x05	; 5
    c5aa:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
				game.player.shield = 0;
    c5ae:	10 92 e8 0d 	sts	0x0DE8, r1
				game.player.flags = EXPLODING;
    c5b2:	80 e1       	ldi	r24, 0x10	; 16
    c5b4:	80 93 e1 0d 	sts	0x0DE1, r24
				return;
    c5b8:	6c c0       	rjmp	.+216    	; 0xc692 <animate_enemies+0x20e>
    c5ba:	c2 01       	movw	r24, r4
    c5bc:	8a 54       	subi	r24, 0x4A	; 74
    c5be:	92 4f       	sbci	r25, 0xF2	; 242
    c5c0:	fc 01       	movw	r30, r24
    c5c2:	eb 5d       	subi	r30, 0xDB	; 219
    c5c4:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c5c6:	20 81       	ld	r18, Z
    c5c8:	22 30       	cpi	r18, 0x02	; 2
    c5ca:	69 f4       	brne	.+26     	; 0xc5e6 <animate_enemies+0x162>
    c5cc:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c5ce:	e0 80       	ld	r14, Z
    c5d0:	01 e0       	ldi	r16, 0x01	; 1
    c5d2:	d4 01       	movw	r26, r8
    c5d4:	2c 91       	ld	r18, X
    c5d6:	f3 01       	movw	r30, r6
    c5d8:	40 81       	ld	r20, Z
    c5da:	61 2f       	mov	r22, r17
    c5dc:	8b 81       	ldd	r24, Y+3	; 0x03
    c5de:	9c 81       	ldd	r25, Y+4	; 0x04
    c5e0:	0e 94 b9 5f 	call	0xbf72	; 0xbf72 <animate_sprite>
    c5e4:	33 c0       	rjmp	.+102    	; 0xc64c <animate_enemies+0x1c8>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c5e6:	e1 2c       	mov	r14, r1
    c5e8:	00 e0       	ldi	r16, 0x00	; 0
    c5ea:	d4 01       	movw	r26, r8
    c5ec:	2c 91       	ld	r18, X
    c5ee:	f3 01       	movw	r30, r6
    c5f0:	40 81       	ld	r20, Z
    c5f2:	61 2f       	mov	r22, r17
    c5f4:	8b 81       	ldd	r24, Y+3	; 0x03
    c5f6:	9c 81       	ldd	r25, Y+4	; 0x04
    c5f8:	0e 94 b9 5f 	call	0xbf72	; 0xbf72 <animate_sprite>
    c5fc:	82 30       	cpi	r24, 0x02	; 2
    c5fe:	30 f1       	brcs	.+76     	; 0xc64c <animate_enemies+0x1c8>
			{
				SFX_ENEMY_EXPLODE;
    c600:	41 e0       	ldi	r20, 0x01	; 1
    c602:	6f ef       	ldi	r22, 0xFF	; 255
    c604:	86 e0       	ldi	r24, 0x06	; 6
    c606:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c60a:	a9 81       	ldd	r26, Y+1	; 0x01
    c60c:	ba 81       	ldd	r27, Y+2	; 0x02
    c60e:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    c610:	f1 01       	movw	r30, r2
    c612:	10 82       	st	Z, r1
				game.active_enemies--;
    c614:	80 91 d1 0d 	lds	r24, 0x0DD1
    c618:	81 50       	subi	r24, 0x01	; 1
    c61a:	80 93 d1 0d 	sts	0x0DD1, r24
    c61e:	16 c0       	rjmp	.+44     	; 0xc64c <animate_enemies+0x1c8>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c620:	a9 81       	ldd	r26, Y+1	; 0x01
    c622:	ba 81       	ldd	r27, Y+2	; 0x02
    c624:	8c 91       	ld	r24, X
    c626:	84 ff       	sbrs	r24, 4
    c628:	11 c0       	rjmp	.+34     	; 0xc64c <animate_enemies+0x1c8>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c62a:	eb 81       	ldd	r30, Y+3	; 0x03
    c62c:	fc 81       	ldd	r31, Y+4	; 0x04
    c62e:	42 81       	ldd	r20, Z+2	; 0x02
    c630:	80 91 be 0d 	lds	r24, 0x0DBE
    c634:	48 1b       	sub	r20, r24
    c636:	60 81       	ld	r22, Z
    c638:	80 91 b6 0d 	lds	r24, 0x0DB6
    c63c:	68 1b       	sub	r22, r24
    c63e:	d4 01       	movw	r26, r8
    c640:	0c 91       	ld	r16, X
    c642:	f3 01       	movw	r30, r6
    c644:	20 81       	ld	r18, Z
    c646:	81 2f       	mov	r24, r17
    c648:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c64c:	d4 01       	movw	r26, r8
    c64e:	9c 91       	ld	r25, X
    c650:	f3 01       	movw	r30, r6
    c652:	80 81       	ld	r24, Z
    c654:	98 9f       	mul	r25, r24
    c656:	10 0d       	add	r17, r0
    c658:	11 24       	eor	r1, r1
    c65a:	f5 e3       	ldi	r31, 0x35	; 53
    c65c:	2f 0e       	add	r2, r31
    c65e:	31 1c       	adc	r3, r1
    c660:	85 e3       	ldi	r24, 0x35	; 53
    c662:	48 0e       	add	r4, r24
    c664:	51 1c       	adc	r5, r1
    c666:	95 e3       	ldi	r25, 0x35	; 53
    c668:	69 0e       	add	r6, r25
    c66a:	71 1c       	adc	r7, r1
    c66c:	a5 e3       	ldi	r26, 0x35	; 53
    c66e:	8a 0e       	add	r8, r26
    c670:	91 1c       	adc	r9, r1
    c672:	eb 81       	ldd	r30, Y+3	; 0x03
    c674:	fc 81       	ldd	r31, Y+4	; 0x04
    c676:	f5 96       	adiw	r30, 0x35	; 53
    c678:	fc 83       	std	Y+4, r31	; 0x04
    c67a:	eb 83       	std	Y+3, r30	; 0x03
    c67c:	89 81       	ldd	r24, Y+1	; 0x01
    c67e:	9a 81       	ldd	r25, Y+2	; 0x02
    c680:	c5 96       	adiw	r24, 0x35	; 53
    c682:	9a 83       	std	Y+2, r25	; 0x02
    c684:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c686:	99 e0       	ldi	r25, 0x09	; 9
    c688:	49 16       	cp	r4, r25
    c68a:	91 e0       	ldi	r25, 0x01	; 1
    c68c:	59 06       	cpc	r5, r25
    c68e:	09 f0       	breq	.+2      	; 0xc692 <animate_enemies+0x20e>
    c690:	27 cf       	rjmp	.-434    	; 0xc4e0 <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c692:	0f 90       	pop	r0
    c694:	0f 90       	pop	r0
    c696:	0f 90       	pop	r0
    c698:	0f 90       	pop	r0
    c69a:	df 91       	pop	r29
    c69c:	cf 91       	pop	r28
    c69e:	1f 91       	pop	r17
    c6a0:	0f 91       	pop	r16
    c6a2:	ff 90       	pop	r15
    c6a4:	ef 90       	pop	r14
    c6a6:	df 90       	pop	r13
    c6a8:	cf 90       	pop	r12
    c6aa:	af 90       	pop	r10
    c6ac:	9f 90       	pop	r9
    c6ae:	8f 90       	pop	r8
    c6b0:	7f 90       	pop	r7
    c6b2:	6f 90       	pop	r6
    c6b4:	5f 90       	pop	r5
    c6b6:	4f 90       	pop	r4
    c6b8:	3f 90       	pop	r3
    c6ba:	2f 90       	pop	r2
    c6bc:	08 95       	ret

0000c6be <animate_enemy_shots>:

void animate_enemy_shots()
{
    c6be:	4f 92       	push	r4
    c6c0:	5f 92       	push	r5
    c6c2:	6f 92       	push	r6
    c6c4:	7f 92       	push	r7
    c6c6:	8f 92       	push	r8
    c6c8:	9f 92       	push	r9
    c6ca:	af 92       	push	r10
    c6cc:	cf 92       	push	r12
    c6ce:	df 92       	push	r13
    c6d0:	ef 92       	push	r14
    c6d2:	ff 92       	push	r15
    c6d4:	0f 93       	push	r16
    c6d6:	1f 93       	push	r17
    c6d8:	cf 93       	push	r28
    c6da:	df 93       	push	r29
    c6dc:	c9 ee       	ldi	r28, 0xE9	; 233
    c6de:	de e0       	ldi	r29, 0x0E	; 14
    c6e0:	40 ee       	ldi	r20, 0xE0	; 224
    c6e2:	84 2e       	mov	r8, r20
    c6e4:	4e e0       	ldi	r20, 0x0E	; 14
    c6e6:	94 2e       	mov	r9, r20
	u8 slot = ENEMY_SHOT_SLOT;
    c6e8:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    c6ea:	50 e1       	ldi	r21, 0x10	; 16
    c6ec:	f5 2e       	mov	r15, r21
    c6ee:	fe 01       	movw	r30, r28
    c6f0:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c6f2:	80 81       	ld	r24, Z
    c6f4:	87 30       	cpi	r24, 0x07	; 7
    c6f6:	09 f0       	breq	.+2      	; 0xc6fa <animate_enemy_shots+0x3c>
    c6f8:	73 c0       	rjmp	.+230    	; 0xc7e0 <animate_enemy_shots+0x122>
			{
				if (game.enemies[i].shot[j].active)
    c6fa:	88 81       	ld	r24, Y
    c6fc:	88 23       	and	r24, r24
    c6fe:	09 f4       	brne	.+2      	; 0xc702 <animate_enemy_shots+0x44>
    c700:	68 c0       	rjmp	.+208    	; 0xc7d2 <animate_enemy_shots+0x114>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c702:	c4 01       	movw	r24, r8
    c704:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <out_of_bounds>
    c708:	81 11       	cpse	r24, r1
    c70a:	40 c0       	rjmp	.+128    	; 0xc78c <animate_enemy_shots+0xce>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c70c:	41 e0       	ldi	r20, 0x01	; 1
    c70e:	61 e0       	ldi	r22, 0x01	; 1
    c710:	c4 01       	movw	r24, r8
    c712:	0e 94 00 5c 	call	0xb800	; 0xb800 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c716:	81 11       	cpse	r24, r1
    c718:	39 c0       	rjmp	.+114    	; 0xc78c <animate_enemy_shots+0xce>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    c71a:	f4 01       	movw	r30, r8
    c71c:	42 80       	ldd	r4, Z+2	; 0x02
    c71e:	53 80       	ldd	r5, Z+3	; 0x03
    c720:	60 80       	ld	r6, Z
    c722:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c724:	d0 90 b6 0d 	lds	r13, 0x0DB6
    c728:	06 2d       	mov	r16, r6
    c72a:	0d 19       	sub	r16, r13
    c72c:	20 91 e5 0d 	lds	r18, 0x0DE5
    c730:	22 0f       	add	r18, r18
    c732:	22 0f       	add	r18, r18
    c734:	22 0f       	add	r18, r18
    c736:	40 91 e4 0d 	lds	r20, 0x0DE4
    c73a:	44 0f       	add	r20, r20
    c73c:	44 0f       	add	r20, r20
    c73e:	44 0f       	add	r20, r20
    c740:	80 91 d9 0d 	lds	r24, 0x0DD9
    c744:	98 e0       	ldi	r25, 0x08	; 8
    c746:	a9 2e       	mov	r10, r25
    c748:	38 e0       	ldi	r19, 0x08	; 8
    c74a:	c3 2e       	mov	r12, r19
    c74c:	e4 2c       	mov	r14, r4
    c74e:	60 91 db 0d 	lds	r22, 0x0DDB
    c752:	8d 19       	sub	r24, r13
    c754:	0e 94 dd 4d 	call	0x9bba	; 0x9bba <LBCollides>
    c758:	88 23       	and	r24, r24
    c75a:	d1 f0       	breq	.+52     	; 0xc790 <animate_enemy_shots+0xd2>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    c75c:	41 e0       	ldi	r20, 0x01	; 1
    c75e:	6f ef       	ldi	r22, 0xFF	; 255
    c760:	84 e0       	ldi	r24, 0x04	; 4
    c762:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    c766:	80 91 e8 0d 	lds	r24, 0x0DE8
    c76a:	fe 01       	movw	r30, r28
    c76c:	31 97       	sbiw	r30, 0x01	; 1
    c76e:	90 81       	ld	r25, Z
    c770:	89 1b       	sub	r24, r25
    c772:	80 93 e8 0d 	sts	0x0DE8, r24
#endif
						if (game.player.shield <= 0)
    c776:	18 16       	cp	r1, r24
    c778:	4c f0       	brlt	.+18     	; 0xc78c <animate_enemy_shots+0xce>
						{
							SFX_PLAYER_EXPLODE;
    c77a:	41 e0       	ldi	r20, 0x01	; 1
    c77c:	6f ef       	ldi	r22, 0xFF	; 255
    c77e:	85 e0       	ldi	r24, 0x05	; 5
    c780:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
							game.player.shield = 0;
    c784:	10 92 e8 0d 	sts	0x0DE8, r1
							game.player.flags = EXPLODING;
    c788:	f0 92 e1 0d 	sts	0x0DE1, r15
						}
						game.enemies[i].shot[j].active = 0;
    c78c:	18 82       	st	Y, r1
    c78e:	21 c0       	rjmp	.+66     	; 0xc7d2 <animate_enemy_shots+0x114>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    c790:	00 91 d0 0d 	lds	r16, 0x0DD0
    c794:	60 2f       	mov	r22, r16
    c796:	fe 01       	movw	r30, r28
    c798:	34 97       	sbiw	r30, 0x04	; 4
    c79a:	80 81       	ld	r24, Z
    c79c:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    c7a0:	68 0e       	add	r6, r24
    c7a2:	79 1e       	adc	r7, r25
    c7a4:	f4 01       	movw	r30, r8
    c7a6:	71 82       	std	Z+1, r7	; 0x01
    c7a8:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    c7aa:	60 2f       	mov	r22, r16
    c7ac:	fe 01       	movw	r30, r28
    c7ae:	35 97       	sbiw	r30, 0x05	; 5
    c7b0:	80 81       	ld	r24, Z
    c7b2:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    c7b6:	48 0e       	add	r4, r24
    c7b8:	59 1e       	adc	r5, r25
    c7ba:	f4 01       	movw	r30, r8
    c7bc:	53 82       	std	Z+3, r5	; 0x03
    c7be:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    c7c0:	80 91 be 0d 	lds	r24, 0x0DBE
    c7c4:	44 2d       	mov	r20, r4
    c7c6:	48 1b       	sub	r20, r24
    c7c8:	66 2d       	mov	r22, r6
    c7ca:	6d 19       	sub	r22, r13
    c7cc:	01 e0       	ldi	r16, 0x01	; 1
    c7ce:	21 e0       	ldi	r18, 0x01	; 1
    c7d0:	04 c0       	rjmp	.+8      	; 0xc7da <animate_enemy_shots+0x11c>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    c7d2:	01 e0       	ldi	r16, 0x01	; 1
    c7d4:	21 e0       	ldi	r18, 0x01	; 1
    c7d6:	40 e0       	ldi	r20, 0x00	; 0
    c7d8:	60 ee       	ldi	r22, 0xE0	; 224
    c7da:	81 2f       	mov	r24, r17
    c7dc:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
				}
			}
			slot += 1;
    c7e0:	1f 5f       	subi	r17, 0xFF	; 255
    c7e2:	e5 96       	adiw	r28, 0x35	; 53
    c7e4:	f5 e3       	ldi	r31, 0x35	; 53
    c7e6:	8f 0e       	add	r8, r31
    c7e8:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c7ea:	14 31       	cpi	r17, 0x14	; 20
    c7ec:	09 f0       	breq	.+2      	; 0xc7f0 <animate_enemy_shots+0x132>
    c7ee:	7f cf       	rjmp	.-258    	; 0xc6ee <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    c7f0:	df 91       	pop	r29
    c7f2:	cf 91       	pop	r28
    c7f4:	1f 91       	pop	r17
    c7f6:	0f 91       	pop	r16
    c7f8:	ff 90       	pop	r15
    c7fa:	ef 90       	pop	r14
    c7fc:	df 90       	pop	r13
    c7fe:	cf 90       	pop	r12
    c800:	af 90       	pop	r10
    c802:	9f 90       	pop	r9
    c804:	8f 90       	pop	r8
    c806:	7f 90       	pop	r7
    c808:	6f 90       	pop	r6
    c80a:	5f 90       	pop	r5
    c80c:	4f 90       	pop	r4
    c80e:	08 95       	ret

0000c810 <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    c810:	df 92       	push	r13
    c812:	ef 92       	push	r14
    c814:	ff 92       	push	r15
    c816:	0f 93       	push	r16
    c818:	1f 93       	push	r17
    c81a:	cf 93       	push	r28
    c81c:	df 93       	push	r29
    c81e:	ec 01       	movw	r28, r24
    c820:	16 2f       	mov	r17, r22
    c822:	7a 01       	movw	r14, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    c824:	8e e0       	ldi	r24, 0x0E	; 14
    c826:	d8 2e       	mov	r13, r24

void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c828:	fe 01       	movw	r30, r28
    c82a:	84 91       	lpm	r24, Z
    c82c:	83 32       	cpi	r24, 0x23	; 35
    c82e:	29 f1       	breq	.+74     	; 0xc87a <stream_text_middle+0x6a>
	{
		ln = strnlen_P(dialogue, 255);
    c830:	6f ef       	ldi	r22, 0xFF	; 255
    c832:	70 e0       	ldi	r23, 0x00	; 0
    c834:	ce 01       	movw	r24, r28
    c836:	0e 94 41 73 	call	0xe682	; 0xe682 <strnlen_P>
		x = 14 - ln / 2;
    c83a:	86 95       	lsr	r24
    c83c:	0d 2d       	mov	r16, r13
    c83e:	08 1b       	sub	r16, r24
    c840:	0c 1b       	sub	r16, r28
    c842:	8c 2f       	mov	r24, r28
    c844:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c846:	21 96       	adiw	r28, 0x01	; 1
    c848:	fe 01       	movw	r30, r28
    c84a:	31 97       	sbiw	r30, 0x01	; 1
    c84c:	44 91       	lpm	r20, Z
    c84e:	44 23       	and	r20, r20
    c850:	91 f0       	breq	.+36     	; 0xc876 <stream_text_middle+0x66>
		{
			LBPrintChar(x++, y, c);
    c852:	61 2f       	mov	r22, r17
    c854:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    c858:	60 e0       	ldi	r22, 0x00	; 0
    c85a:	8d e4       	ldi	r24, 0x4D	; 77
    c85c:	9e e0       	ldi	r25, 0x0E	; 14
    c85e:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_A)) WaitUs(delay);
    c862:	80 91 51 0e 	lds	r24, 0x0E51
    c866:	90 91 52 0e 	lds	r25, 0x0E52
    c86a:	90 fd       	sbrc	r25, 0
    c86c:	ea cf       	rjmp	.-44     	; 0xc842 <stream_text_middle+0x32>
    c86e:	c7 01       	movw	r24, r14
    c870:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <WaitUs>
    c874:	e6 cf       	rjmp	.-52     	; 0xc842 <stream_text_middle+0x32>
		}
		y++;
    c876:	1f 5f       	subi	r17, 0xFF	; 255
    c878:	d7 cf       	rjmp	.-82     	; 0xc828 <stream_text_middle+0x18>
	}
}
    c87a:	df 91       	pop	r29
    c87c:	cf 91       	pop	r28
    c87e:	1f 91       	pop	r17
    c880:	0f 91       	pop	r16
    c882:	ff 90       	pop	r15
    c884:	ef 90       	pop	r14
    c886:	df 90       	pop	r13
    c888:	08 95       	ret

0000c88a <print_scroll>:

void print_scroll(const unsigned char text[])
{
    c88a:	0f 93       	push	r16
    c88c:	cf 93       	push	r28
    c88e:	df 93       	push	r29
    c890:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    c892:	40 e0       	ldi	r20, 0x00	; 0
    c894:	66 ef       	ldi	r22, 0xF6	; 246
    c896:	70 e3       	ldi	r23, 0x30	; 48
    c898:	80 e0       	ldi	r24, 0x00	; 0
    c89a:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    c89e:	01 e0       	ldi	r16, 0x01	; 1
    c8a0:	21 e0       	ldi	r18, 0x01	; 1
    c8a2:	40 e3       	ldi	r20, 0x30	; 48
    c8a4:	60 e5       	ldi	r22, 0x50	; 80
    c8a6:	80 e0       	ldi	r24, 0x00	; 0
    c8a8:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c8ac:	40 e0       	ldi	r20, 0x00	; 0
    c8ae:	63 ef       	ldi	r22, 0xF3	; 243
    c8b0:	70 e3       	ldi	r23, 0x30	; 48
    c8b2:	81 e0       	ldi	r24, 0x01	; 1
    c8b4:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    c8b8:	21 e0       	ldi	r18, 0x01	; 1
    c8ba:	40 e3       	ldi	r20, 0x30	; 48
    c8bc:	60 e6       	ldi	r22, 0x60	; 96
    c8be:	81 e0       	ldi	r24, 0x01	; 1
    c8c0:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    c8c4:	40 e0       	ldi	r20, 0x00	; 0
    c8c6:	60 ef       	ldi	r22, 0xF0	; 240
    c8c8:	70 e3       	ldi	r23, 0x30	; 48
    c8ca:	82 e0       	ldi	r24, 0x02	; 2
    c8cc:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    c8d0:	21 e0       	ldi	r18, 0x01	; 1
    c8d2:	40 e3       	ldi	r20, 0x30	; 48
    c8d4:	60 e7       	ldi	r22, 0x70	; 112
    c8d6:	82 e0       	ldi	r24, 0x02	; 2
    c8d8:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    c8dc:	40 e0       	ldi	r20, 0x00	; 0
    c8de:	6d ee       	ldi	r22, 0xED	; 237
    c8e0:	70 e3       	ldi	r23, 0x30	; 48
    c8e2:	83 e0       	ldi	r24, 0x03	; 3
    c8e4:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    c8e8:	21 e0       	ldi	r18, 0x01	; 1
    c8ea:	40 e3       	ldi	r20, 0x30	; 48
    c8ec:	60 e8       	ldi	r22, 0x80	; 128
    c8ee:	83 e0       	ldi	r24, 0x03	; 3
    c8f0:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c8f4:	40 e0       	ldi	r20, 0x00	; 0
    c8f6:	6a ee       	ldi	r22, 0xEA	; 234
    c8f8:	70 e3       	ldi	r23, 0x30	; 48
    c8fa:	84 e0       	ldi	r24, 0x04	; 4
    c8fc:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c900:	21 e0       	ldi	r18, 0x01	; 1
    c902:	40 e3       	ldi	r20, 0x30	; 48
    c904:	60 e9       	ldi	r22, 0x90	; 144
    c906:	84 e0       	ldi	r24, 0x04	; 4
    c908:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	LBRotateSprites();
    c90c:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	stream_text_middle((const char*) text, 12, CHARACTER_DELAY_US);
    c910:	40 e7       	ldi	r20, 0x70	; 112
    c912:	57 e1       	ldi	r21, 0x17	; 23
    c914:	6c e0       	ldi	r22, 0x0C	; 12
    c916:	ce 01       	movw	r24, r28
    c918:	0e 94 08 64 	call	0xc810	; 0xc810 <stream_text_middle>
	LBWaitSeconds(2);
    c91c:	82 e0       	ldi	r24, 0x02	; 2
}
    c91e:	df 91       	pop	r29
    c920:	cf 91       	pop	r28
    c922:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12, CHARACTER_DELAY_US);
	LBWaitSeconds(2);
    c924:	0c 94 1d 4e 	jmp	0x9c3a	; 0x9c3a <LBWaitSeconds>

0000c928 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    c928:	ef 92       	push	r14
    c92a:	ff 92       	push	r15
    c92c:	0f 93       	push	r16
    c92e:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    c930:	c8 2f       	mov	r28, r24
    c932:	e6 2e       	mov	r14, r22
    c934:	f1 2c       	mov	r15, r1
    c936:	e8 0e       	add	r14, r24
    c938:	f1 1c       	adc	r15, r1
    c93a:	8c 2f       	mov	r24, r28
    c93c:	90 e0       	ldi	r25, 0x00	; 0
    c93e:	8e 15       	cp	r24, r14
    c940:	9f 05       	cpc	r25, r15
    c942:	7c f4       	brge	.+30     	; 0xc962 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    c944:	40 e0       	ldi	r20, 0x00	; 0
    c946:	6e e0       	ldi	r22, 0x0E	; 14
    c948:	71 e3       	ldi	r23, 0x31	; 49
    c94a:	8c 2f       	mov	r24, r28
    c94c:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    c950:	01 e0       	ldi	r16, 0x01	; 1
    c952:	21 e0       	ldi	r18, 0x01	; 1
    c954:	40 e0       	ldi	r20, 0x00	; 0
    c956:	60 ee       	ldi	r22, 0xE0	; 224
    c958:	8c 2f       	mov	r24, r28
    c95a:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    c95e:	cf 5f       	subi	r28, 0xFF	; 255
    c960:	ec cf       	rjmp	.-40     	; 0xc93a <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    c962:	cf 91       	pop	r28
    c964:	0f 91       	pop	r16
    c966:	ff 90       	pop	r15
    c968:	ef 90       	pop	r14
    c96a:	08 95       	ret

0000c96c <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    c96c:	61 e0       	ldi	r22, 0x01	; 1
    c96e:	81 e0       	ldi	r24, 0x01	; 1
    c970:	0e 94 66 4c 	call	0x98cc	; 0x98cc <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c974:	64 e1       	ldi	r22, 0x14	; 20
    c976:	80 e0       	ldi	r24, 0x00	; 0
    c978:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
	LBRotateSprites();
    c97c:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	ClearVram();
    c980:	0e 94 22 3e 	call	0x7c44	; 0x7c44 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c984:	60 e0       	ldi	r22, 0x00	; 0
    c986:	81 e0       	ldi	r24, 0x01	; 1
    c988:	0c 94 5a 4c 	jmp	0x98b4	; 0x98b4 <FadeIn>

0000c98c <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    c98c:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	StartSong(spacesong);
    c990:	8f e2       	ldi	r24, 0x2F	; 47
    c992:	94 e0       	ldi	r25, 0x04	; 4
    c994:	0e 94 17 41 	call	0x822e	; 0x822e <StartSong>
	Screen.scrollX = 0;
    c998:	e2 eb       	ldi	r30, 0xB2	; 178
    c99a:	fc e0       	ldi	r31, 0x0C	; 12
    c99c:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    c99e:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    c9a0:	80 e2       	ldi	r24, 0x20	; 32
    c9a2:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    c9a4:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    c9a6:	82 ec       	ldi	r24, 0xC2	; 194
    c9a8:	91 e0       	ldi	r25, 0x01	; 1
    c9aa:	0e 94 45 64 	call	0xc88a	; 0xc88a <print_scroll>
	StopSong();
    c9ae:	0c 94 40 41 	jmp	0x8280	; 0x8280 <StopSong>

0000c9b2 <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    c9b2:	0f 93       	push	r16
    c9b4:	cf 93       	push	r28
    c9b6:	df 93       	push	r29
    c9b8:	c8 2f       	mov	r28, r24
    c9ba:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    c9bc:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    c9c0:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 29;
    c9c4:	8d e1       	ldi	r24, 0x1D	; 29
    c9c6:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayTileTable = tiles_data;
    c9ca:	81 e1       	ldi	r24, 0x11	; 17
    c9cc:	91 e3       	ldi	r25, 0x31	; 49
    c9ce:	90 93 b4 0c 	sts	0x0CB4, r25
    c9d2:	80 93 b3 0c 	sts	0x0CB3, r24
	Screen.overlayHeight = 3;
    c9d6:	83 e0       	ldi	r24, 0x03	; 3
    c9d8:	80 93 b2 0c 	sts	0x0CB2, r24
	clear_overlay(2);
    c9dc:	82 e0       	ldi	r24, 0x02	; 2
    c9de:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <clear_overlay>
	game.current_level_index = index;
    c9e2:	c0 93 cb 0d 	sts	0x0DCB, r28
	game.level_ended = 0;
    c9e6:	10 92 d3 0d 	sts	0x0DD3, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    c9ea:	10 92 52 0e 	sts	0x0E52, r1
    c9ee:	10 92 51 0e 	sts	0x0E51, r1
	p->pressed = 0;
    c9f2:	10 92 4e 0e 	sts	0x0E4E, r1
    c9f6:	10 92 4d 0e 	sts	0x0E4D, r1
	p->released = 0;
    c9fa:	10 92 50 0e 	sts	0x0E50, r1
    c9fe:	10 92 4f 0e 	sts	0x0E4F, r1
	p->held_cycles = 0;
    ca02:	10 92 53 0e 	sts	0x0E53, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    ca06:	10 92 cd 0e 	sts	0x0ECD, r1
    ca0a:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    ca0e:	10 92 c9 0e 	sts	0x0EC9, r1
    ca12:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    ca16:	10 92 cb 0e 	sts	0x0ECB, r1
    ca1a:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    ca1e:	10 92 ce 0e 	sts	0x0ECE, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    ca22:	8c 2f       	mov	r24, r28
    ca24:	90 e0       	ldi	r25, 0x00	; 0
    ca26:	8a 30       	cpi	r24, 0x0A	; 10
    ca28:	91 05       	cpc	r25, r1
    ca2a:	d8 f4       	brcc	.+54     	; 0xca62 <load_level+0xb0>
    ca2c:	fc 01       	movw	r30, r24
    ca2e:	ef 5b       	subi	r30, 0xBF	; 191
    ca30:	ff 4f       	sbci	r31, 0xFF	; 255
    ca32:	0c 94 b4 71 	jmp	0xe368	; 0xe368 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    ca36:	80 e9       	ldi	r24, 0x90	; 144
    ca38:	90 e7       	ldi	r25, 0x70	; 112
    ca3a:	11 c0       	rjmp	.+34     	; 0xca5e <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    ca3c:	8f e8       	ldi	r24, 0x8F	; 143
    ca3e:	9f e6       	ldi	r25, 0x6F	; 111
    ca40:	0e c0       	rjmp	.+28     	; 0xca5e <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    ca42:	8e e8       	ldi	r24, 0x8E	; 142
    ca44:	9e e6       	ldi	r25, 0x6E	; 110
    ca46:	0b c0       	rjmp	.+22     	; 0xca5e <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    ca48:	8d e8       	ldi	r24, 0x8D	; 141
    ca4a:	9d e6       	ldi	r25, 0x6D	; 109
    ca4c:	08 c0       	rjmp	.+16     	; 0xca5e <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    ca4e:	8b e8       	ldi	r24, 0x8B	; 139
    ca50:	9b e6       	ldi	r25, 0x6B	; 107
    ca52:	05 c0       	rjmp	.+10     	; 0xca5e <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    ca54:	8c e8       	ldi	r24, 0x8C	; 140
    ca56:	9c e6       	ldi	r25, 0x6C	; 108
    ca58:	02 c0       	rjmp	.+4      	; 0xca5e <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    ca5a:	8a e8       	ldi	r24, 0x8A	; 138
    ca5c:	9a e6       	ldi	r25, 0x6A	; 106
    ca5e:	0e 94 00 5a 	call	0xb400	; 0xb400 <map_level_info>
	}
	game.column_count = 0;
    ca62:	10 92 c7 0d 	sts	0x0DC7, r1
	game.camera_x = get_camera_x(index);
    ca66:	10 92 b7 0d 	sts	0x0DB7, r1
    ca6a:	10 92 b6 0d 	sts	0x0DB6, r1
	game.camera_y = get_camera_y(index);
    ca6e:	10 92 be 0d 	sts	0x0DBE, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    ca72:	88 e1       	ldi	r24, 0x18	; 24
    ca74:	90 e0       	ldi	r25, 0x00	; 0
    ca76:	90 93 da 0d 	sts	0x0DDA, r25
    ca7a:	80 93 d9 0d 	sts	0x0DD9, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    ca7e:	88 ea       	ldi	r24, 0xA8	; 168
    ca80:	90 e0       	ldi	r25, 0x00	; 0
    ca82:	90 93 dc 0d 	sts	0x0DDC, r25
    ca86:	80 93 db 0d 	sts	0x0DDB, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    ca8a:	28 ed       	ldi	r18, 0xD8	; 216
    ca8c:	37 e0       	ldi	r19, 0x07	; 7
    ca8e:	30 93 55 0e 	sts	0x0E55, r19
    ca92:	20 93 54 0e 	sts	0x0E54, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    ca96:	90 93 57 0e 	sts	0x0E57, r25
    ca9a:	80 93 56 0e 	sts	0x0E56, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    ca9e:	8d e1       	ldi	r24, 0x1D	; 29
    caa0:	80 93 bf 0d 	sts	0x0DBF, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    caa4:	80 93 c3 0d 	sts	0x0DC3, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    caa8:	8a e1       	ldi	r24, 0x1A	; 26
    caaa:	80 93 c0 0d 	sts	0x0DC0, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    caae:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_x = 0;
    cab2:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    cab6:	10 92 c2 0d 	sts	0x0DC2, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    caba:	8a e0       	ldi	r24, 0x0A	; 10
    cabc:	80 93 d2 0d 	sts	0x0DD2, r24
	game.flags = 0;
    cac0:	10 92 d5 0d 	sts	0x0DD5, r1
	render_camera_view();
    cac4:	0e 94 00 58 	call	0xb000	; 0xb000 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    cac8:	48 ef       	ldi	r20, 0xF8	; 248
    caca:	53 e0       	ldi	r21, 0x03	; 3
    cacc:	6d e1       	ldi	r22, 0x1D	; 29
    cace:	80 e0       	ldi	r24, 0x00	; 0
    cad0:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    cad4:	4b ee       	ldi	r20, 0xEB	; 235
    cad6:	53 e0       	ldi	r21, 0x03	; 3
    cad8:	6d e1       	ldi	r22, 0x1D	; 29
    cada:	82 e1       	ldi	r24, 0x12	; 18
    cadc:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    cae0:	41 ef       	ldi	r20, 0xF1	; 241
    cae2:	53 e0       	ldi	r21, 0x03	; 3
    cae4:	6e e1       	ldi	r22, 0x1E	; 30
    cae6:	80 e0       	ldi	r24, 0x00	; 0
    cae8:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    caec:	40 e0       	ldi	r20, 0x00	; 0
    caee:	54 e0       	ldi	r21, 0x04	; 4
    caf0:	6e e1       	ldi	r22, 0x1E	; 30
    caf2:	81 e1       	ldi	r24, 0x11	; 17
    caf4:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    caf8:	4a ea       	ldi	r20, 0xAA	; 170
    cafa:	53 e0       	ldi	r21, 0x03	; 3
    cafc:	6f e1       	ldi	r22, 0x1F	; 31
    cafe:	81 e1       	ldi	r24, 0x11	; 17
    cb00:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cb04:	21 e0       	ldi	r18, 0x01	; 1
    cb06:	40 91 e8 0d 	lds	r20, 0x0DE8
    cb0a:	6d e1       	ldi	r22, 0x1D	; 29
    cb0c:	89 e0       	ldi	r24, 0x09	; 9
    cb0e:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cb12:	40 91 bc 0d 	lds	r20, 0x0DBC
    cb16:	50 91 bd 0d 	lds	r21, 0x0DBD
    cb1a:	21 e0       	ldi	r18, 0x01	; 1
    cb1c:	6d e1       	ldi	r22, 0x1D	; 29
    cb1e:	8b e1       	ldi	r24, 0x1B	; 27
    cb20:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cb24:	21 e0       	ldi	r18, 0x01	; 1
    cb26:	40 91 c9 0d 	lds	r20, 0x0DC9
    cb2a:	6e e1       	ldi	r22, 0x1E	; 30
    cb2c:	89 e0       	ldi	r24, 0x09	; 9
    cb2e:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cb32:	40 91 ba 0d 	lds	r20, 0x0DBA
    cb36:	50 91 bb 0d 	lds	r21, 0x0DBB
    cb3a:	21 e0       	ldi	r18, 0x01	; 1
    cb3c:	6e e1       	ldi	r22, 0x1E	; 30
    cb3e:	8b e1       	ldi	r24, 0x1B	; 27
    cb40:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cb44:	40 91 b8 0d 	lds	r20, 0x0DB8
    cb48:	50 91 b9 0d 	lds	r21, 0x0DB9
    cb4c:	21 e0       	ldi	r18, 0x01	; 1
    cb4e:	6f e1       	ldi	r22, 0x1F	; 31
    cb50:	8b e1       	ldi	r24, 0x1B	; 27
    cb52:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cb56:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    cb5a:	81 11       	cpse	r24, r1
    cb5c:	39 c0       	rjmp	.+114    	; 0xcbd0 <load_level+0x21e>
    cb5e:	dd 23       	and	r29, r29
    cb60:	b9 f1       	breq	.+110    	; 0xcbd0 <load_level+0x21e>
	{
		map_ship();
    cb62:	0e 94 eb 59 	call	0xb3d6	; 0xb3d6 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cb66:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cb68:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cb6a:	81 e0       	ldi	r24, 0x01	; 1
    cb6c:	90 e0       	ldi	r25, 0x00	; 0
    cb6e:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cb72:	8c 2f       	mov	r24, r28
    cb74:	90 e0       	ldi	r25, 0x00	; 0
    cb76:	88 3a       	cpi	r24, 0xA8	; 168
    cb78:	91 05       	cpc	r25, r1
    cb7a:	74 f0       	brlt	.+28     	; 0xcb98 <load_level+0x1e6>
			{
				LBMapSprite(0, map_hero_idle, 0);
    cb7c:	40 e0       	ldi	r20, 0x00	; 0
    cb7e:	62 ee       	ldi	r22, 0xE2	; 226
    cb80:	70 e3       	ldi	r23, 0x30	; 48
    cb82:	80 e0       	ldi	r24, 0x00	; 0
    cb84:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cb88:	03 e0       	ldi	r16, 0x03	; 3
    cb8a:	22 e0       	ldi	r18, 0x02	; 2
    cb8c:	48 ea       	ldi	r20, 0xA8	; 168
    cb8e:	68 e1       	ldi	r22, 0x18	; 24
    cb90:	80 e0       	ldi	r24, 0x00	; 0
    cb92:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
				ship_increment = -3;
    cb96:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cb98:	8d e2       	ldi	r24, 0x2D	; 45
    cb9a:	9e e0       	ldi	r25, 0x0E	; 14
    cb9c:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    cba0:	40 e0       	ldi	r20, 0x00	; 0
    cba2:	bc 01       	movw	r22, r24
    cba4:	86 e0       	ldi	r24, 0x06	; 6
    cba6:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cbaa:	02 e0       	ldi	r16, 0x02	; 2
    cbac:	24 e0       	ldi	r18, 0x04	; 4
    cbae:	4c 2f       	mov	r20, r28
    cbb0:	68 e0       	ldi	r22, 0x08	; 8
    cbb2:	86 e0       	ldi	r24, 0x06	; 6
    cbb4:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
			ship_y += ship_increment;
    cbb8:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cbba:	39 f4       	brne	.+14     	; 0xcbca <load_level+0x218>
			{
				clear_sprites(6, 8);
    cbbc:	68 e0       	ldi	r22, 0x08	; 8
    cbbe:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    cbc0:	df 91       	pop	r29
    cbc2:	cf 91       	pop	r28
    cbc4:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    cbc6:	0c 94 94 64 	jmp	0xc928	; 0xc928 <clear_sprites>
				break;
			}
			LBRotateSprites();
    cbca:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
		}
    cbce:	cd cf       	rjmp	.-102    	; 0xcb6a <load_level+0x1b8>
	}
}
    cbd0:	df 91       	pop	r29
    cbd2:	cf 91       	pop	r28
    cbd4:	0f 91       	pop	r16
    cbd6:	08 95       	ret

0000cbd8 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    cbd8:	0f 93       	push	r16
    cbda:	1f 93       	push	r17
    cbdc:	cf 93       	push	r28
    cbde:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    cbe0:	18 2f       	mov	r17, r24
    cbe2:	c6 2f       	mov	r28, r22
    cbe4:	d0 e0       	ldi	r29, 0x00	; 0
    cbe6:	c8 0f       	add	r28, r24
    cbe8:	d1 1d       	adc	r29, r1
    cbea:	81 2f       	mov	r24, r17
    cbec:	90 e0       	ldi	r25, 0x00	; 0
    cbee:	8c 17       	cp	r24, r28
    cbf0:	9d 07       	cpc	r25, r29
    cbf2:	4c f4       	brge	.+18     	; 0xcc06 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cbf4:	01 e0       	ldi	r16, 0x01	; 1
    cbf6:	21 e0       	ldi	r18, 0x01	; 1
    cbf8:	40 e0       	ldi	r20, 0x00	; 0
    cbfa:	60 ee       	ldi	r22, 0xE0	; 224
    cbfc:	81 2f       	mov	r24, r17
    cbfe:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cc02:	1f 5f       	subi	r17, 0xFF	; 255
    cc04:	f2 cf       	rjmp	.-28     	; 0xcbea <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cc06:	df 91       	pop	r29
    cc08:	cf 91       	pop	r28
    cc0a:	1f 91       	pop	r17
    cc0c:	0f 91       	pop	r16
    cc0e:	08 95       	ret

0000cc10 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    cc10:	fc 01       	movw	r30, r24
    cc12:	20 81       	ld	r18, Z
    cc14:	31 81       	ldd	r19, Z+1	; 0x01
    cc16:	29 70       	andi	r18, 0x09	; 9
    cc18:	33 27       	eor	r19, r19
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
    cc1a:	81 e0       	ldi	r24, 0x01	; 1
    cc1c:	23 2b       	or	r18, r19
    cc1e:	09 f4       	brne	.+2      	; 0xcc22 <select_pressed+0x12>
    cc20:	80 e0       	ldi	r24, 0x00	; 0
}
    cc22:	08 95       	ret

0000cc24 <stream_text_anywhere>:
{
	return (p->pressed & BTN_SELECT);
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    cc24:	ff 92       	push	r15
    cc26:	0f 93       	push	r16
    cc28:	1f 93       	push	r17
    cc2a:	cf 93       	push	r28
    cc2c:	df 93       	push	r29
    cc2e:	f6 2e       	mov	r15, r22
    cc30:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    cc32:	fc 01       	movw	r30, r24
    cc34:	24 91       	lpm	r18, Z
    cc36:	23 32       	cpi	r18, 0x23	; 35
    cc38:	b1 f0       	breq	.+44     	; 0xcc66 <stream_text_anywhere+0x42>
    cc3a:	ec 01       	movw	r28, r24
    cc3c:	0f 2d       	mov	r16, r15
    cc3e:	08 1b       	sub	r16, r24
    cc40:	8c 2f       	mov	r24, r28
    cc42:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cc44:	21 96       	adiw	r28, 0x01	; 1
    cc46:	fe 01       	movw	r30, r28
    cc48:	31 97       	sbiw	r30, 0x01	; 1
    cc4a:	44 91       	lpm	r20, Z
    cc4c:	44 23       	and	r20, r20
    cc4e:	41 f0       	breq	.+16     	; 0xcc60 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    cc50:	61 2f       	mov	r22, r17
    cc52:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    cc56:	80 e7       	ldi	r24, 0x70	; 112
    cc58:	97 e1       	ldi	r25, 0x17	; 23
    cc5a:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <WaitUs>
    cc5e:	f0 cf       	rjmp	.-32     	; 0xcc40 <stream_text_anywhere+0x1c>
		}
		y++;
    cc60:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cc62:	ce 01       	movw	r24, r28
    cc64:	e6 cf       	rjmp	.-52     	; 0xcc32 <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cc66:	df 91       	pop	r29
    cc68:	cf 91       	pop	r28
    cc6a:	1f 91       	pop	r17
    cc6c:	0f 91       	pop	r16
    cc6e:	ff 90       	pop	r15
    cc70:	08 95       	ret

0000cc72 <map_particles>:

void map_particles()
{
    cc72:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    cc74:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    cc76:	40 e0       	ldi	r20, 0x00	; 0
    cc78:	62 e0       	ldi	r22, 0x02	; 2
    cc7a:	71 e3       	ldi	r23, 0x31	; 49
    cc7c:	8c 2f       	mov	r24, r28
    cc7e:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    cc82:	cf 5f       	subi	r28, 0xFF	; 255
    cc84:	c4 31       	cpi	r28, 0x14	; 20
    cc86:	b9 f7       	brne	.-18     	; 0xcc76 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    cc88:	cf 91       	pop	r28
    cc8a:	08 95       	ret

0000cc8c <place_particles>:

void place_particles()
{
    cc8c:	0f 93       	push	r16
    cc8e:	1f 93       	push	r17
    cc90:	cf 93       	push	r28
    cc92:	df 93       	push	r29
    cc94:	1f 92       	push	r1
    cc96:	cd b7       	in	r28, 0x3d	; 61
    cc98:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    cc9a:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    cc9c:	68 ec       	ldi	r22, 0xC8	; 200
    cc9e:	80 e0       	ldi	r24, 0x00	; 0
    cca0:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <LBRandom>
    cca4:	48 2f       	mov	r20, r24
    cca6:	60 ee       	ldi	r22, 0xE0	; 224
    cca8:	80 e0       	ldi	r24, 0x00	; 0
    ccaa:	49 83       	std	Y+1, r20	; 0x01
    ccac:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <LBRandom>
    ccb0:	68 2f       	mov	r22, r24
    ccb2:	01 e0       	ldi	r16, 0x01	; 1
    ccb4:	21 e0       	ldi	r18, 0x01	; 1
    ccb6:	49 81       	ldd	r20, Y+1	; 0x01
    ccb8:	81 2f       	mov	r24, r17
    ccba:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    ccbe:	1f 5f       	subi	r17, 0xFF	; 255
    ccc0:	14 31       	cpi	r17, 0x14	; 20
    ccc2:	61 f7       	brne	.-40     	; 0xcc9c <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    ccc4:	0f 90       	pop	r0
    ccc6:	df 91       	pop	r29
    ccc8:	cf 91       	pop	r28
    ccca:	1f 91       	pop	r17
    cccc:	0f 91       	pop	r16
    ccce:	08 95       	ret

0000ccd0 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    ccd0:	ef 92       	push	r14
    ccd2:	ff 92       	push	r15
    ccd4:	0f 93       	push	r16
    ccd6:	1f 93       	push	r17
    ccd8:	cf 93       	push	r28
    ccda:	df 93       	push	r29
    ccdc:	d8 2f       	mov	r29, r24
    ccde:	16 2f       	mov	r17, r22
    cce0:	89 e0       	ldi	r24, 0x09	; 9
    cce2:	e8 2e       	mov	r14, r24
    cce4:	80 e1       	ldi	r24, 0x10	; 16
    cce6:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    cce8:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    ccea:	f7 01       	movw	r30, r14
    ccec:	40 81       	ld	r20, Z
    ccee:	4d 0f       	add	r20, r29
    ccf0:	01 e0       	ldi	r16, 0x01	; 1
    ccf2:	21 e0       	ldi	r18, 0x01	; 1
    ccf4:	31 97       	sbiw	r30, 0x01	; 1
    ccf6:	60 81       	ld	r22, Z
    ccf8:	8c 2f       	mov	r24, r28
    ccfa:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    ccfe:	f7 01       	movw	r30, r14
    cd00:	80 81       	ld	r24, Z
    cd02:	89 3c       	cpi	r24, 0xC9	; 201
    cd04:	50 f0       	brcs	.+20     	; 0xcd1a <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    cd06:	60 ee       	ldi	r22, 0xE0	; 224
    cd08:	80 e0       	ldi	r24, 0x00	; 0
    cd0a:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <LBRandom>
    cd0e:	21 e0       	ldi	r18, 0x01	; 1
    cd10:	41 2f       	mov	r20, r17
    cd12:	68 2f       	mov	r22, r24
    cd14:	8c 2f       	mov	r24, r28
    cd16:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    cd1a:	cf 5f       	subi	r28, 0xFF	; 255
    cd1c:	f4 e0       	ldi	r31, 0x04	; 4
    cd1e:	ef 0e       	add	r14, r31
    cd20:	f1 1c       	adc	r15, r1
    cd22:	c4 31       	cpi	r28, 0x14	; 20
    cd24:	11 f7       	brne	.-60     	; 0xccea <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    cd26:	df 91       	pop	r29
    cd28:	cf 91       	pop	r28
    cd2a:	1f 91       	pop	r17
    cd2c:	0f 91       	pop	r16
    cd2e:	ff 90       	pop	r15
    cd30:	ef 90       	pop	r14
    cd32:	08 95       	ret

0000cd34 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    cd34:	82 50       	subi	r24, 0x02	; 2
    cd36:	87 30       	cpi	r24, 0x07	; 7
    cd38:	48 f4       	brcc	.+18     	; 0xcd4c <get_emarald_map+0x18>
    cd3a:	e8 2f       	mov	r30, r24
    cd3c:	f0 e0       	ldi	r31, 0x00	; 0
    cd3e:	ee 0f       	add	r30, r30
    cd40:	ff 1f       	adc	r31, r31
    cd42:	ee 5f       	subi	r30, 0xFE	; 254
    cd44:	fa 4f       	sbci	r31, 0xFA	; 250
    cd46:	80 81       	ld	r24, Z
    cd48:	91 81       	ldd	r25, Z+1	; 0x01
    cd4a:	08 95       	ret
    cd4c:	86 ef       	ldi	r24, 0xF6	; 246
    cd4e:	90 e3       	ldi	r25, 0x30	; 48
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    cd50:	08 95       	ret

0000cd52 <music_transition>:

void music_transition()
{
	if (is_space())
    cd52:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    cd56:	88 23       	and	r24, r24
    cd58:	19 f0       	breq	.+6      	; 0xcd60 <music_transition+0xe>
	{
		StartSong(spacesong);
    cd5a:	8f e2       	ldi	r24, 0x2F	; 47
    cd5c:	94 e0       	ldi	r25, 0x04	; 4
    cd5e:	06 c0       	rjmp	.+12     	; 0xcd6c <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    cd60:	80 91 cb 0d 	lds	r24, 0x0DCB
    cd64:	88 23       	and	r24, r24
    cd66:	21 f0       	breq	.+8      	; 0xcd70 <music_transition+0x1e>
	{
		StartSong(planetsong);
    cd68:	8f ec       	ldi	r24, 0xCF	; 207
    cd6a:	9a e0       	ldi	r25, 0x0A	; 10
    cd6c:	0c 94 17 41 	jmp	0x822e	; 0x822e <StartSong>
    cd70:	08 95       	ret

0000cd72 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cd72:	cf 92       	push	r12
    cd74:	df 92       	push	r13
    cd76:	ef 92       	push	r14
    cd78:	ff 92       	push	r15
    cd7a:	0f 93       	push	r16
    cd7c:	1f 93       	push	r17
    cd7e:	cf 93       	push	r28
    cd80:	df 93       	push	r29
    cd82:	1f 92       	push	r1
    cd84:	cd b7       	in	r28, 0x3d	; 61
    cd86:	de b7       	in	r29, 0x3e	; 62
    cd88:	c8 2e       	mov	r12, r24
    cd8a:	e6 2e       	mov	r14, r22
    cd8c:	12 2f       	mov	r17, r18
    cd8e:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    cd90:	49 83       	std	Y+1, r20	; 0x01
    cd92:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	Screen.scrollX = 0;
    cd96:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    cd9a:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    cd9e:	80 e2       	ldi	r24, 0x20	; 32
    cda0:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    cda4:	10 92 b2 0c 	sts	0x0CB2, r1
	game.scroll_x = 0;
    cda8:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    cdac:	10 92 c2 0d 	sts	0x0DC2, r1
	map_particles();
    cdb0:	0e 94 39 66 	call	0xcc72	; 0xcc72 <map_particles>
	map_ship();
    cdb4:	0e 94 eb 59 	call	0xb3d6	; 0xb3d6 <map_ship>
	place_particles();
    cdb8:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    cdbc:	48 ef       	ldi	r20, 0xF8	; 248
    cdbe:	58 e5       	ldi	r21, 0x58	; 88
    cdc0:	69 81       	ldd	r22, Y+1	; 0x01
    cdc2:	80 e0       	ldi	r24, 0x00	; 0
    cdc4:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	game.current_level_index = index;
    cdc8:	c0 92 cb 0d 	sts	0x0DCB, r12
	music_transition();
    cdcc:	0e 94 a9 66 	call	0xcd52	; 0xcd52 <music_transition>
	if (!is_space())
    cdd0:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    cdd4:	81 11       	cpse	r24, r1
    cdd6:	0f c0       	rjmp	.+30     	; 0xcdf6 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    cdd8:	8c 2d       	mov	r24, r12
    cdda:	0e 94 9a 66 	call	0xcd34	; 0xcd34 <get_emarald_map>
    cdde:	40 e0       	ldi	r20, 0x00	; 0
    cde0:	bc 01       	movw	r22, r24
    cde2:	88 e0       	ldi	r24, 0x08	; 8
    cde4:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    cde8:	01 e0       	ldi	r16, 0x01	; 1
    cdea:	21 e0       	ldi	r18, 0x01	; 1
    cdec:	40 e3       	ldi	r20, 0x30	; 48
    cdee:	60 e7       	ldi	r22, 0x70	; 112
    cdf0:	88 e0       	ldi	r24, 0x08	; 8
    cdf2:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cdf6:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    cdf8:	81 e0       	ldi	r24, 0x01	; 1
    cdfa:	90 e0       	ldi	r25, 0x00	; 0
    cdfc:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    ce00:	8d e2       	ldi	r24, 0x2D	; 45
    ce02:	9e e0       	ldi	r25, 0x0E	; 14
    ce04:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    ce08:	40 e0       	ldi	r20, 0x00	; 0
    ce0a:	bc 01       	movw	r22, r24
    ce0c:	80 e0       	ldi	r24, 0x00	; 0
    ce0e:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    ce12:	02 e0       	ldi	r16, 0x02	; 2
    ce14:	24 e0       	ldi	r18, 0x04	; 4
    ce16:	48 e6       	ldi	r20, 0x68	; 104
    ce18:	68 e6       	ldi	r22, 0x68	; 104
    ce1a:	80 e0       	ldi	r24, 0x00	; 0
    ce1c:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
		frame_counter++;
    ce20:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    ce22:	8d 2d       	mov	r24, r13
    ce24:	8f 70       	andi	r24, 0x0F	; 15
    ce26:	29 f4       	brne	.+10     	; 0xce32 <planet_transition+0xc0>
    ce28:	90 91 b6 0c 	lds	r25, 0x0CB6
    ce2c:	9e 0d       	add	r25, r14
    ce2e:	90 93 b6 0c 	sts	0x0CB6, r25
		animate_particles(dy, oy);
    ce32:	6f 2d       	mov	r22, r15
    ce34:	81 2f       	mov	r24, r17
    ce36:	0e 94 68 66 	call	0xccd0	; 0xccd0 <animate_particles>
		LBRotateSprites();
    ce3a:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    ce3e:	8f ef       	ldi	r24, 0xFF	; 255
    ce40:	d8 12       	cpse	r13, r24
    ce42:	da cf       	rjmp	.-76     	; 0xcdf8 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    ce44:	82 e0       	ldi	r24, 0x02	; 2
    ce46:	80 93 ca 0d 	sts	0x0DCA, r24
	ClearVram();
    ce4a:	0e 94 22 3e 	call	0x7c44	; 0x7c44 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    ce4e:	64 e1       	ldi	r22, 0x14	; 20
    ce50:	80 e0       	ldi	r24, 0x00	; 0
    ce52:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
	LBRotateSprites();
    ce56:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	fade_through();
    ce5a:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	game.level_score = 0;
    ce5e:	10 92 bb 0d 	sts	0x0DBB, r1
    ce62:	10 92 ba 0d 	sts	0x0DBA, r1
	load_level(index, true);
    ce66:	61 e0       	ldi	r22, 0x01	; 1
    ce68:	8c 2d       	mov	r24, r12
    ce6a:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <load_level>
	init_player_state();
    ce6e:	0e 94 a1 53 	call	0xa742	; 0xa742 <init_player_state>
	init_boss_state();
    ce72:	0e 94 17 53 	call	0xa62e	; 0xa62e <init_boss_state>
	init_enemy_state();
}
    ce76:	0f 90       	pop	r0
    ce78:	df 91       	pop	r29
    ce7a:	cf 91       	pop	r28
    ce7c:	1f 91       	pop	r17
    ce7e:	0f 91       	pop	r16
    ce80:	ff 90       	pop	r15
    ce82:	ef 90       	pop	r14
    ce84:	df 90       	pop	r13
    ce86:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    ce88:	0c 94 0a 4f 	jmp	0x9e14	; 0x9e14 <init_enemy_state>

0000ce8c <intro>:
}


void intro()
{
    ce8c:	0f 93       	push	r16
	fade_through();
    ce8e:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	game.lives = LIVES;
    ce92:	e6 eb       	ldi	r30, 0xB6	; 182
    ce94:	fd e0       	ldi	r31, 0x0D	; 13
    ce96:	8a e0       	ldi	r24, 0x0A	; 10
    ce98:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    ce9a:	13 82       	std	Z+3, r1	; 0x03
    ce9c:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    ce9e:	15 82       	std	Z+5, r1	; 0x05
    cea0:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    cea2:	17 82       	std	Z+7, r1	; 0x07
    cea4:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    cea6:	8f ec       	ldi	r24, 0xCF	; 207
    cea8:	9a e0       	ldi	r25, 0x0A	; 10
    ceaa:	0e 94 17 41 	call	0x822e	; 0x822e <StartSong>
	print_scroll(strIntro);
    ceae:	88 e7       	ldi	r24, 0x78	; 120
    ceb0:	92 e0       	ldi	r25, 0x02	; 2
    ceb2:	0e 94 45 64 	call	0xc88a	; 0xc88a <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    ceb6:	07 ec       	ldi	r16, 0xC7	; 199
    ceb8:	2d ef       	ldi	r18, 0xFD	; 253
    ceba:	4c e1       	ldi	r20, 0x1C	; 28
    cebc:	61 e0       	ldi	r22, 0x01	; 1
    cebe:	80 e0       	ldi	r24, 0x00	; 0
    cec0:	0e 94 b9 66 	call	0xcd72	; 0xcd72 <planet_transition>
}
    cec4:	0f 91       	pop	r16
    cec6:	08 95       	ret

0000cec8 <demo_load>:

void demo_load(u8 idx)
{
    cec8:	cf 93       	push	r28
    ceca:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    cecc:	e6 eb       	ldi	r30, 0xB6	; 182
    cece:	fd e0       	ldi	r31, 0x0D	; 13
    ced0:	8a e0       	ldi	r24, 0x0A	; 10
    ced2:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    ced4:	13 82       	std	Z+3, r1	; 0x03
    ced6:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    ced8:	15 82       	std	Z+5, r1	; 0x05
    ceda:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    cedc:	17 82       	std	Z+7, r1	; 0x07
    cede:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    cee0:	82 e0       	ldi	r24, 0x02	; 2
    cee2:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    cee4:	0e 94 22 3e 	call	0x7c44	; 0x7c44 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cee8:	64 e1       	ldi	r22, 0x14	; 20
    ceea:	80 e0       	ldi	r24, 0x00	; 0
    ceec:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
	LBRotateSprites();
    cef0:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	fade_through();
    cef4:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	load_level(idx, true);
    cef8:	61 e0       	ldi	r22, 0x01	; 1
    cefa:	8c 2f       	mov	r24, r28
    cefc:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <load_level>
	init_player_state();
    cf00:	0e 94 a1 53 	call	0xa742	; 0xa742 <init_player_state>
	init_boss_state();
    cf04:	0e 94 17 53 	call	0xa62e	; 0xa62e <init_boss_state>
	init_enemy_state();
}
    cf08:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    cf0a:	0c 94 0a 4f 	jmp	0x9e14	; 0x9e14 <init_enemy_state>

0000cf0e <load_splash>:
}

void load_splash()
{
	fade_through();
    cf0e:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	Screen.scrollX = 0;
    cf12:	e2 eb       	ldi	r30, 0xB2	; 178
    cf14:	fc e0       	ldi	r31, 0x0C	; 12
    cf16:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    cf18:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    cf1a:	80 e2       	ldi	r24, 0x20	; 32
    cf1c:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    cf1e:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    cf20:	e6 eb       	ldi	r30, 0xB6	; 182
    cf22:	fd e0       	ldi	r31, 0x0D	; 13
    cf24:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    cf26:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cf28:	64 e1       	ldi	r22, 0x14	; 20
    cf2a:	80 e0       	ldi	r24, 0x00	; 0
    cf2c:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
	LBRotateSprites();
    cf30:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    cf34:	44 e1       	ldi	r20, 0x14	; 20
    cf36:	54 e0       	ldi	r21, 0x04	; 4
    cf38:	6f e0       	ldi	r22, 0x0F	; 15
    cf3a:	88 e0       	ldi	r24, 0x08	; 8
    cf3c:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    cf40:	48 e0       	ldi	r20, 0x08	; 8
    cf42:	54 e0       	ldi	r21, 0x04	; 4
    cf44:	60 e1       	ldi	r22, 0x10	; 16
    cf46:	88 e0       	ldi	r24, 0x08	; 8
    cf48:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    cf4c:	4a e1       	ldi	r20, 0x1A	; 26
    cf4e:	54 e0       	ldi	r21, 0x04	; 4
    cf50:	65 e1       	ldi	r22, 0x15	; 21
    cf52:	84 e0       	ldi	r24, 0x04	; 4
    cf54:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	DrawMap2(6, 5, map_splash);
    cf58:	4d e1       	ldi	r20, 0x1D	; 29
    cf5a:	5a e5       	ldi	r21, 0x5A	; 90
    cf5c:	65 e0       	ldi	r22, 0x05	; 5
    cf5e:	86 e0       	ldi	r24, 0x06	; 6
    cf60:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    cf64:	40 e0       	ldi	r20, 0x00	; 0
    cf66:	6b e0       	ldi	r22, 0x0B	; 11
    cf68:	71 e3       	ldi	r23, 0x31	; 49
    cf6a:	80 e0       	ldi	r24, 0x00	; 0
    cf6c:	0c 94 2c 4e 	jmp	0x9c58	; 0x9c58 <LBMapSprite>

0000cf70 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    cf70:	2f 92       	push	r2
    cf72:	3f 92       	push	r3
    cf74:	5f 92       	push	r5
    cf76:	6f 92       	push	r6
    cf78:	7f 92       	push	r7
    cf7a:	8f 92       	push	r8
    cf7c:	9f 92       	push	r9
    cf7e:	af 92       	push	r10
    cf80:	bf 92       	push	r11
    cf82:	cf 92       	push	r12
    cf84:	df 92       	push	r13
    cf86:	ef 92       	push	r14
    cf88:	ff 92       	push	r15
    cf8a:	0f 93       	push	r16
    cf8c:	1f 93       	push	r17
    cf8e:	cf 93       	push	r28
    cf90:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    cf92:	81 e0       	ldi	r24, 0x01	; 1
    cf94:	80 93 ca 0d 	sts	0x0DCA, r24
	game.high_score_index = -1;
    cf98:	8f ef       	ldi	r24, 0xFF	; 255
    cf9a:	80 93 c8 0d 	sts	0x0DC8, r24
	fade_through();
    cf9e:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	Screen.scrollX = 0;
    cfa2:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    cfa6:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    cfaa:	80 e2       	ldi	r24, 0x20	; 32
    cfac:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    cfb0:	10 92 b2 0c 	sts	0x0CB2, r1
	load_eeprom(&scores);
    cfb4:	86 e9       	ldi	r24, 0x96	; 150
    cfb6:	9d e0       	ldi	r25, 0x0D	; 13
    cfb8:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    cfbc:	48 e0       	ldi	r20, 0x08	; 8
    cfbe:	54 e0       	ldi	r21, 0x04	; 4
    cfc0:	63 e0       	ldi	r22, 0x03	; 3
    cfc2:	89 e0       	ldi	r24, 0x09	; 9
    cfc4:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    cfc8:	40 e0       	ldi	r20, 0x00	; 0
    cfca:	66 ef       	ldi	r22, 0xF6	; 246
    cfcc:	70 e3       	ldi	r23, 0x30	; 48
    cfce:	80 e0       	ldi	r24, 0x00	; 0
    cfd0:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    cfd4:	40 e0       	ldi	r20, 0x00	; 0
    cfd6:	63 ef       	ldi	r22, 0xF3	; 243
    cfd8:	70 e3       	ldi	r23, 0x30	; 48
    cfda:	81 e0       	ldi	r24, 0x01	; 1
    cfdc:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    cfe0:	01 e0       	ldi	r16, 0x01	; 1
    cfe2:	21 e0       	ldi	r18, 0x01	; 1
    cfe4:	48 e1       	ldi	r20, 0x18	; 24
    cfe6:	68 e3       	ldi	r22, 0x38	; 56
    cfe8:	80 e0       	ldi	r24, 0x00	; 0
    cfea:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    cfee:	21 e0       	ldi	r18, 0x01	; 1
    cff0:	48 e1       	ldi	r20, 0x18	; 24
    cff2:	68 ea       	ldi	r22, 0xA8	; 168
    cff4:	81 e0       	ldi	r24, 0x01	; 1
    cff6:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
    cffa:	88 e9       	ldi	r24, 0x98	; 152
    cffc:	a8 2e       	mov	r10, r24
    cffe:	8d e0       	ldi	r24, 0x0D	; 13
    d000:	b8 2e       	mov	r11, r24
    d002:	99 e9       	ldi	r25, 0x99	; 153
    d004:	c9 2e       	mov	r12, r25
    d006:	9d e0       	ldi	r25, 0x0D	; 13
    d008:	d9 2e       	mov	r13, r25
    d00a:	2a e9       	ldi	r18, 0x9A	; 154
    d00c:	82 2e       	mov	r8, r18
    d00e:	2d e0       	ldi	r18, 0x0D	; 13
    d010:	92 2e       	mov	r9, r18
    d012:	74 01       	movw	r14, r8
    d014:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d016:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d018:	35 e0       	ldi	r19, 0x05	; 5
    d01a:	53 2e       	mov	r5, r19
    d01c:	41 eb       	ldi	r20, 0xB1	; 177
    d01e:	64 2e       	mov	r6, r20
    d020:	4d e0       	ldi	r20, 0x0D	; 13
    d022:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d024:	11 e4       	ldi	r17, 0x41	; 65
    d026:	0e 2d       	mov	r16, r14
    d028:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d02a:	80 2f       	mov	r24, r16
    d02c:	65 2d       	mov	r22, r5
    d02e:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    d032:	41 e0       	ldi	r20, 0x01	; 1
    d034:	48 0f       	add	r20, r24
    d036:	20 e0       	ldi	r18, 0x00	; 0
    d038:	6c 2f       	mov	r22, r28
    d03a:	89 e0       	ldi	r24, 0x09	; 9
    d03c:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d040:	40 e2       	ldi	r20, 0x20	; 32
    d042:	6c 2f       	mov	r22, r28
    d044:	8a e0       	ldi	r24, 0x0A	; 10
    d046:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d04a:	f5 01       	movw	r30, r10
    d04c:	40 81       	ld	r20, Z
    d04e:	6c 2f       	mov	r22, r28
    d050:	8b e0       	ldi	r24, 0x0B	; 11
    d052:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d056:	f6 01       	movw	r30, r12
    d058:	40 81       	ld	r20, Z
    d05a:	6c 2f       	mov	r22, r28
    d05c:	8c e0       	ldi	r24, 0x0C	; 12
    d05e:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d062:	f7 01       	movw	r30, r14
    d064:	40 81       	ld	r20, Z
    d066:	6c 2f       	mov	r22, r28
    d068:	8d e0       	ldi	r24, 0x0D	; 13
    d06a:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d06e:	40 e2       	ldi	r20, 0x20	; 32
    d070:	6c 2f       	mov	r22, r28
    d072:	8e e0       	ldi	r24, 0x0E	; 14
    d074:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d078:	f7 01       	movw	r30, r14
    d07a:	21 80       	ldd	r2, Z+1	; 0x01
    d07c:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d07e:	21 e0       	ldi	r18, 0x01	; 1
    d080:	a1 01       	movw	r20, r2
    d082:	6c 2f       	mov	r22, r28
    d084:	83 e1       	ldi	r24, 0x13	; 19
    d086:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d08a:	20 91 b8 0d 	lds	r18, 0x0DB8
    d08e:	30 91 b9 0d 	lds	r19, 0x0DB9
    d092:	22 16       	cp	r2, r18
    d094:	33 06       	cpc	r3, r19
    d096:	08 f0       	brcs	.+2      	; 0xd09a <load_high_scores+0x12a>
    d098:	5a c0       	rjmp	.+180    	; 0xd14e <load_high_scores+0x1de>
    d09a:	80 91 c8 0d 	lds	r24, 0x0DC8
    d09e:	8f 3f       	cpi	r24, 0xFF	; 255
    d0a0:	09 f0       	breq	.+2      	; 0xd0a4 <load_high_scores+0x134>
    d0a2:	55 c0       	rjmp	.+170    	; 0xd14e <load_high_scores+0x1de>
    d0a4:	80 91 cf 0d 	lds	r24, 0x0DCF
    d0a8:	82 30       	cpi	r24, 0x02	; 2
    d0aa:	09 f4       	brne	.+2      	; 0xd0ae <load_high_scores+0x13e>
    d0ac:	50 c0       	rjmp	.+160    	; 0xd14e <load_high_scores+0x1de>
    d0ae:	a1 eb       	ldi	r26, 0xB1	; 177
    d0b0:	bd e0       	ldi	r27, 0x0D	; 13
    d0b2:	cd 01       	movw	r24, r26
    d0b4:	05 97       	sbiw	r24, 0x05	; 5
    d0b6:	4e e1       	ldi	r20, 0x1E	; 30
    d0b8:	48 0f       	add	r20, r24
    d0ba:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d0bc:	04 17       	cp	r16, r20
    d0be:	40 f4       	brcc	.+16     	; 0xd0d0 <load_high_scores+0x160>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d0c0:	fc 01       	movw	r30, r24
    d0c2:	45 2d       	mov	r20, r5
    d0c4:	01 90       	ld	r0, Z+
    d0c6:	0d 92       	st	X+, r0
    d0c8:	4a 95       	dec	r20
    d0ca:	e1 f7       	brne	.-8      	; 0xd0c4 <load_high_scores+0x154>
    d0cc:	dc 01       	movw	r26, r24
    d0ce:	f1 cf       	rjmp	.-30     	; 0xd0b2 <load_high_scores+0x142>
			}
			scores.data[i] = 'A';
    d0d0:	f5 01       	movw	r30, r10
    d0d2:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d0d4:	f6 01       	movw	r30, r12
    d0d6:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d0d8:	f7 01       	movw	r30, r14
    d0da:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d0dc:	32 83       	std	Z+2, r19	; 0x02
    d0de:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d0e0:	f5 01       	movw	r30, r10
    d0e2:	40 81       	ld	r20, Z
    d0e4:	6c 2f       	mov	r22, r28
    d0e6:	8b e0       	ldi	r24, 0x0B	; 11
    d0e8:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d0ec:	f6 01       	movw	r30, r12
    d0ee:	40 81       	ld	r20, Z
    d0f0:	6c 2f       	mov	r22, r28
    d0f2:	8c e0       	ldi	r24, 0x0C	; 12
    d0f4:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d0f8:	f7 01       	movw	r30, r14
    d0fa:	40 81       	ld	r20, Z
    d0fc:	6c 2f       	mov	r22, r28
    d0fe:	8d e0       	ldi	r24, 0x0D	; 13
    d100:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d104:	40 91 b8 0d 	lds	r20, 0x0DB8
    d108:	50 91 b9 0d 	lds	r21, 0x0DB9
    d10c:	21 e0       	ldi	r18, 0x01	; 1
    d10e:	6c 2f       	mov	r22, r28
    d110:	83 e1       	ldi	r24, 0x13	; 19
    d112:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
			game.high_score_index = i;
    d116:	00 93 c8 0d 	sts	0x0DC8, r16
			LBMapSprite(2, map_down_arrow, 0);
    d11a:	40 e0       	ldi	r20, 0x00	; 0
    d11c:	68 e0       	ldi	r22, 0x08	; 8
    d11e:	71 e3       	ldi	r23, 0x31	; 49
    d120:	82 e0       	ldi	r24, 0x02	; 2
    d122:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d126:	40 e0       	ldi	r20, 0x00	; 0
    d128:	65 e0       	ldi	r22, 0x05	; 5
    d12a:	71 e3       	ldi	r23, 0x31	; 49
    d12c:	83 e0       	ldi	r24, 0x03	; 3
    d12e:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d132:	01 e0       	ldi	r16, 0x01	; 1
    d134:	21 e0       	ldi	r18, 0x01	; 1
    d136:	4d 2f       	mov	r20, r29
    d138:	68 e5       	ldi	r22, 0x58	; 88
    d13a:	82 e0       	ldi	r24, 0x02	; 2
    d13c:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d140:	21 e0       	ldi	r18, 0x01	; 1
    d142:	40 e1       	ldi	r20, 0x10	; 16
    d144:	4d 0f       	add	r20, r29
    d146:	68 e5       	ldi	r22, 0x58	; 88
    d148:	83 e0       	ldi	r24, 0x03	; 3
    d14a:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
		}
		
		ypos += 2;
    d14e:	ce 5f       	subi	r28, 0xFE	; 254
    d150:	f5 e0       	ldi	r31, 0x05	; 5
    d152:	af 0e       	add	r10, r31
    d154:	b1 1c       	adc	r11, r1
    d156:	85 e0       	ldi	r24, 0x05	; 5
    d158:	c8 0e       	add	r12, r24
    d15a:	d1 1c       	adc	r13, r1
    d15c:	e5 e0       	ldi	r30, 0x05	; 5
    d15e:	ee 0e       	add	r14, r30
    d160:	f1 1c       	adc	r15, r1
    d162:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d164:	c3 31       	cpi	r28, 0x13	; 19
    d166:	09 f0       	breq	.+2      	; 0xd16a <load_high_scores+0x1fa>
    d168:	5e cf       	rjmp	.-324    	; 0xd026 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d16a:	4f ed       	ldi	r20, 0xDF	; 223
    d16c:	53 e0       	ldi	r21, 0x03	; 3
    d16e:	66 e1       	ldi	r22, 0x16	; 22
    d170:	89 e0       	ldi	r24, 0x09	; 9
}
    d172:	df 91       	pop	r29
    d174:	cf 91       	pop	r28
    d176:	1f 91       	pop	r17
    d178:	0f 91       	pop	r16
    d17a:	ff 90       	pop	r15
    d17c:	ef 90       	pop	r14
    d17e:	df 90       	pop	r13
    d180:	cf 90       	pop	r12
    d182:	bf 90       	pop	r11
    d184:	af 90       	pop	r10
    d186:	9f 90       	pop	r9
    d188:	8f 90       	pop	r8
    d18a:	7f 90       	pop	r7
    d18c:	6f 90       	pop	r6
    d18e:	5f 90       	pop	r5
    d190:	3f 90       	pop	r3
    d192:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d194:	0c 94 57 4d 	jmp	0x9aae	; 0x9aae <LBPrint>

0000d198 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d198:	64 e1       	ldi	r22, 0x14	; 20
    d19a:	80 e0       	ldi	r24, 0x00	; 0
    d19c:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
	LBRotateSprites();
    d1a0:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	init_player_state();
    d1a4:	0e 94 a1 53 	call	0xa742	; 0xa742 <init_player_state>
	init_boss_state();
    d1a8:	0e 94 17 53 	call	0xa62e	; 0xa62e <init_boss_state>
	init_enemy_state();
    d1ac:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <init_enemy_state>
	StopSong();
    d1b0:	0e 94 40 41 	call	0x8280	; 0x8280 <StopSong>
	load_high_scores();
    d1b4:	0c 94 b8 67 	jmp	0xcf70	; 0xcf70 <load_high_scores>

0000d1b8 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d1b8:	0f 93       	push	r16
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	if (game.player.controls.pressed) demo_counter = 0;
    d1ba:	80 91 4d 0e 	lds	r24, 0x0E4D
    d1be:	90 91 4e 0e 	lds	r25, 0x0E4E
    d1c2:	00 97       	sbiw	r24, 0x00	; 0
    d1c4:	21 f0       	breq	.+8      	; 0xd1ce <update_splash+0x16>
    d1c6:	10 92 f6 0c 	sts	0x0CF6, r1
    d1ca:	10 92 f5 0c 	sts	0x0CF5, r1
	
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d1ce:	85 ff       	sbrs	r24, 5
    d1d0:	08 c0       	rjmp	.+16     	; 0xd1e2 <update_splash+0x2a>
    d1d2:	20 91 cf 0d 	lds	r18, 0x0DCF
    d1d6:	21 11       	cpse	r18, r1
    d1d8:	04 c0       	rjmp	.+8      	; 0xd1e2 <update_splash+0x2a>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d1da:	81 e0       	ldi	r24, 0x01	; 1
    d1dc:	80 93 cf 0d 	sts	0x0DCF, r24
    d1e0:	08 c0       	rjmp	.+16     	; 0xd1f2 <update_splash+0x3a>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d1e2:	84 ff       	sbrs	r24, 4
    d1e4:	0c c0       	rjmp	.+24     	; 0xd1fe <update_splash+0x46>
    d1e6:	80 91 cf 0d 	lds	r24, 0x0DCF
    d1ea:	81 30       	cpi	r24, 0x01	; 1
    d1ec:	41 f4       	brne	.+16     	; 0xd1fe <update_splash+0x46>
	{
		game.selection = START_SELECTED;
    d1ee:	10 92 cf 0d 	sts	0x0DCF, r1
		SFX_NAVIGATE;
    d1f2:	41 e0       	ldi	r20, 0x01	; 1
    d1f4:	6f ef       	ldi	r22, 0xFF	; 255
    d1f6:	82 e0       	ldi	r24, 0x02	; 2
    d1f8:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
    d1fc:	40 c0       	rjmp	.+128    	; 0xd27e <update_splash+0xc6>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d1fe:	8d e4       	ldi	r24, 0x4D	; 77
    d200:	9e e0       	ldi	r25, 0x0E	; 14
    d202:	0e 94 08 66 	call	0xcc10	; 0xcc10 <select_pressed>
    d206:	88 23       	and	r24, r24
    d208:	b1 f0       	breq	.+44     	; 0xd236 <update_splash+0x7e>
    d20a:	80 91 cf 0d 	lds	r24, 0x0DCF
    d20e:	81 11       	cpse	r24, r1
    d210:	08 c0       	rjmp	.+16     	; 0xd222 <update_splash+0x6a>
	{
		SFX_NAVIGATE;
    d212:	41 e0       	ldi	r20, 0x01	; 1
    d214:	6f ef       	ldi	r22, 0xFF	; 255
    d216:	82 e0       	ldi	r24, 0x02	; 2
    d218:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d21c:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d21e:	0c 94 46 67 	jmp	0xce8c	; 0xce8c <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d222:	81 30       	cpi	r24, 0x01	; 1
    d224:	41 f4       	brne	.+16     	; 0xd236 <update_splash+0x7e>
	{
		SFX_NAVIGATE;
    d226:	41 e0       	ldi	r20, 0x01	; 1
    d228:	6f ef       	ldi	r22, 0xFF	; 255
    d22a:	82 e0       	ldi	r24, 0x02	; 2
    d22c:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d230:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d232:	0c 94 b8 67 	jmp	0xcf70	; 0xcf70 <load_high_scores>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    d236:	80 91 f5 0c 	lds	r24, 0x0CF5
    d23a:	90 91 f6 0c 	lds	r25, 0x0CF6
    d23e:	88 35       	cpi	r24, 0x58	; 88
    d240:	92 40       	sbci	r25, 0x02	; 2
    d242:	e8 f0       	brcs	.+58     	; 0xd27e <update_splash+0xc6>
	{
		demo_counter = 0;
    d244:	10 92 f6 0c 	sts	0x0CF6, r1
    d248:	10 92 f5 0c 	sts	0x0CF5, r1
		game.selection = DEMO_SELECTED;
    d24c:	82 e0       	ldi	r24, 0x02	; 2
    d24e:	80 93 cf 0d 	sts	0x0DCF, r24
		demo_load(demo_choice++);
    d252:	80 91 f4 0c 	lds	r24, 0x0CF4
    d256:	91 e0       	ldi	r25, 0x01	; 1
    d258:	98 0f       	add	r25, r24
    d25a:	90 93 f4 0c 	sts	0x0CF4, r25
    d25e:	0e 94 64 67 	call	0xcec8	; 0xcec8 <demo_load>
		if (demo_choice == 2) demo_choice = 3;
    d262:	80 91 f4 0c 	lds	r24, 0x0CF4
    d266:	82 30       	cpi	r24, 0x02	; 2
    d268:	19 f4       	brne	.+6      	; 0xd270 <update_splash+0xb8>
    d26a:	83 e0       	ldi	r24, 0x03	; 3
    d26c:	80 93 f4 0c 	sts	0x0CF4, r24
		if (demo_choice == 5) demo_choice = 0;
    d270:	80 91 f4 0c 	lds	r24, 0x0CF4
    d274:	85 30       	cpi	r24, 0x05	; 5
    d276:	d1 f4       	brne	.+52     	; 0xd2ac <update_splash+0xf4>
    d278:	10 92 f4 0c 	sts	0x0CF4, r1
    d27c:	17 c0       	rjmp	.+46     	; 0xd2ac <update_splash+0xf4>
		return;
		
	}
	demo_counter++;
    d27e:	80 91 f5 0c 	lds	r24, 0x0CF5
    d282:	90 91 f6 0c 	lds	r25, 0x0CF6
    d286:	01 96       	adiw	r24, 0x01	; 1
    d288:	90 93 f6 0c 	sts	0x0CF6, r25
    d28c:	80 93 f5 0c 	sts	0x0CF5, r24
	
	if (game.selection == START_SELECTED)
    d290:	80 91 cf 0d 	lds	r24, 0x0DCF
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d294:	01 e0       	ldi	r16, 0x01	; 1
    d296:	21 e0       	ldi	r18, 0x01	; 1
		return;
		
	}
	demo_counter++;
	
	if (game.selection == START_SELECTED)
    d298:	81 11       	cpse	r24, r1
    d29a:	03 c0       	rjmp	.+6      	; 0xd2a2 <update_splash+0xea>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d29c:	48 e7       	ldi	r20, 0x78	; 120
    d29e:	68 e3       	ldi	r22, 0x38	; 56
    d2a0:	03 c0       	rjmp	.+6      	; 0xd2a8 <update_splash+0xf0>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d2a2:	40 e8       	ldi	r20, 0x80	; 128
    d2a4:	68 e3       	ldi	r22, 0x38	; 56
    d2a6:	80 e0       	ldi	r24, 0x00	; 0
    d2a8:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
	}
}
    d2ac:	0f 91       	pop	r16
    d2ae:	08 95       	ret

0000d2b0 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{	
    d2b0:	0f 93       	push	r16
    d2b2:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_X)
    d2b4:	80 91 4d 0e 	lds	r24, 0x0E4D
    d2b8:	90 91 4e 0e 	lds	r25, 0x0E4E
    d2bc:	91 ff       	sbrs	r25, 1
    d2be:	14 c0       	rjmp	.+40     	; 0xd2e8 <update_high_scores+0x38>
	{
		game.high_score_counter = 0;
    d2c0:	10 92 d8 0d 	sts	0x0DD8, r1
		SFX_NAVIGATE;
    d2c4:	41 e0       	ldi	r20, 0x01	; 1
    d2c6:	6f ef       	ldi	r22, 0xFF	; 255
    d2c8:	82 e0       	ldi	r24, 0x02	; 2
    d2ca:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
		game.high_score_index = -1;
    d2ce:	8f ef       	ldi	r24, 0xFF	; 255
    d2d0:	80 93 c8 0d 	sts	0x0DC8, r24
		game.score = 0;
    d2d4:	10 92 b9 0d 	sts	0x0DB9, r1
    d2d8:	10 92 b8 0d 	sts	0x0DB8, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d2dc:	86 e9       	ldi	r24, 0x96	; 150
    d2de:	9d e0       	ldi	r25, 0x0D	; 13
    d2e0:	0e 94 9e 3f 	call	0x7f3c	; 0x7f3c <EepromWriteBlock>
		game.high_score_counter = 0;
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    d2e4:	0e 94 87 67 	call	0xcf0e	; 0xcf0e <load_splash>
	}
	if ((game.player.controls.held & BTN_SL) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    d2e8:	80 91 51 0e 	lds	r24, 0x0E51
    d2ec:	90 91 52 0e 	lds	r25, 0x0E52
    d2f0:	92 ff       	sbrs	r25, 2
    d2f2:	17 c0       	rjmp	.+46     	; 0xd322 <update_high_scores+0x72>
    d2f4:	80 91 53 0e 	lds	r24, 0x0E53
    d2f8:	8f 3f       	cpi	r24, 0xFF	; 255
    d2fa:	99 f4       	brne	.+38     	; 0xd322 <update_high_scores+0x72>
    d2fc:	80 91 c8 0d 	lds	r24, 0x0DC8
    d300:	8f 3f       	cpi	r24, 0xFF	; 255
    d302:	79 f4       	brne	.+30     	; 0xd322 <update_high_scores+0x72>
	{
		game.high_score_counter = 0;
    d304:	10 92 d8 0d 	sts	0x0DD8, r1
	    SFX_NAVIGATE;
    d308:	41 e0       	ldi	r20, 0x01	; 1
    d30a:	6f ef       	ldi	r22, 0xFF	; 255
    d30c:	82 e0       	ldi	r24, 0x02	; 2
    d30e:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
		init_default_high_scores();
    d312:	0e 94 f4 4e 	call	0x9de8	; 0x9de8 <init_default_high_scores>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d316:	86 e9       	ldi	r24, 0x96	; 150
    d318:	9d e0       	ldi	r25, 0x0D	; 13
    d31a:	0e 94 9e 3f 	call	0x7f3c	; 0x7f3c <EepromWriteBlock>
	{
		game.high_score_counter = 0;
	    SFX_NAVIGATE;
		init_default_high_scores();
	    save_eeprom(&scores);
		load_high_scores();
    d31e:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <load_high_scores>
	}
	
	if (game.high_score_index != -1)
    d322:	30 91 c8 0d 	lds	r19, 0x0DC8
    d326:	3f 3f       	cpi	r19, 0xFF	; 255
    d328:	09 f4       	brne	.+2      	; 0xd32c <update_high_scores+0x7c>
    d32a:	7f c0       	rjmp	.+254    	; 0xd42a <update_high_scores+0x17a>
	{
		game.high_score_counter = 0;
    d32c:	10 92 d8 0d 	sts	0x0DD8, r1
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d330:	20 91 4d 0e 	lds	r18, 0x0E4D
    d334:	27 ff       	sbrs	r18, 7
    d336:	1e c0       	rjmp	.+60     	; 0xd374 <update_high_scores+0xc4>
    d338:	83 2f       	mov	r24, r19
    d33a:	65 e0       	ldi	r22, 0x05	; 5
    d33c:	0e 94 7e 71 	call	0xe2fc	; 0xe2fc <__divmodqi4>
    d340:	92 30       	cpi	r25, 0x02	; 2
    d342:	c1 f0       	breq	.+48     	; 0xd374 <update_high_scores+0xc4>
		{
			SFX_NAVIGATE;
    d344:	41 e0       	ldi	r20, 0x01	; 1
    d346:	6f ef       	ldi	r22, 0xFF	; 255
    d348:	82 e0       	ldi	r24, 0x02	; 2
    d34a:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
			game.high_score_index++;
    d34e:	80 91 c8 0d 	lds	r24, 0x0DC8
    d352:	8f 5f       	subi	r24, 0xFF	; 255
    d354:	80 93 c8 0d 	sts	0x0DC8, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d358:	60 91 ec 0f 	lds	r22, 0x0FEC
    d35c:	68 5f       	subi	r22, 0xF8	; 248
    d35e:	01 e0       	ldi	r16, 0x01	; 1
    d360:	21 e0       	ldi	r18, 0x01	; 1
    d362:	40 91 ed 0f 	lds	r20, 0x0FED
    d366:	82 e0       	ldi	r24, 0x02	; 2
    d368:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d36c:	60 91 f0 0f 	lds	r22, 0x0FF0
    d370:	68 5f       	subi	r22, 0xF8	; 248
    d372:	1f c0       	rjmp	.+62     	; 0xd3b2 <update_high_scores+0x102>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d374:	26 ff       	sbrs	r18, 6
    d376:	24 c0       	rjmp	.+72     	; 0xd3c0 <update_high_scores+0x110>
    d378:	83 2f       	mov	r24, r19
    d37a:	65 e0       	ldi	r22, 0x05	; 5
    d37c:	0e 94 7e 71 	call	0xe2fc	; 0xe2fc <__divmodqi4>
    d380:	99 23       	and	r25, r25
    d382:	f1 f0       	breq	.+60     	; 0xd3c0 <update_high_scores+0x110>
		{
			SFX_NAVIGATE;
    d384:	41 e0       	ldi	r20, 0x01	; 1
    d386:	6f ef       	ldi	r22, 0xFF	; 255
    d388:	82 e0       	ldi	r24, 0x02	; 2
    d38a:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
			game.high_score_index--;
    d38e:	80 91 c8 0d 	lds	r24, 0x0DC8
    d392:	81 50       	subi	r24, 0x01	; 1
    d394:	80 93 c8 0d 	sts	0x0DC8, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d398:	60 91 ec 0f 	lds	r22, 0x0FEC
    d39c:	68 50       	subi	r22, 0x08	; 8
    d39e:	01 e0       	ldi	r16, 0x01	; 1
    d3a0:	21 e0       	ldi	r18, 0x01	; 1
    d3a2:	40 91 ed 0f 	lds	r20, 0x0FED
    d3a6:	82 e0       	ldi	r24, 0x02	; 2
    d3a8:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d3ac:	60 91 f0 0f 	lds	r22, 0x0FF0
    d3b0:	68 50       	subi	r22, 0x08	; 8
    d3b2:	21 e0       	ldi	r18, 0x01	; 1
    d3b4:	40 91 f1 0f 	lds	r20, 0x0FF1
    d3b8:	83 e0       	ldi	r24, 0x03	; 3
    d3ba:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
    d3be:	35 c0       	rjmp	.+106    	; 0xd42a <update_high_scores+0x17a>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d3c0:	24 ff       	sbrs	r18, 4
    d3c2:	13 c0       	rjmp	.+38     	; 0xd3ea <update_high_scores+0x13a>
		{
			SFX_NAVIGATE;
    d3c4:	41 e0       	ldi	r20, 0x01	; 1
    d3c6:	6f ef       	ldi	r22, 0xFF	; 255
    d3c8:	82 e0       	ldi	r24, 0x02	; 2
    d3ca:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d3ce:	80 91 c8 0d 	lds	r24, 0x0DC8
    d3d2:	e8 2f       	mov	r30, r24
    d3d4:	ff 27       	eor	r31, r31
    d3d6:	e7 fd       	sbrc	r30, 7
    d3d8:	f0 95       	com	r31
    d3da:	ea 56       	subi	r30, 0x6A	; 106
    d3dc:	f2 4f       	sbci	r31, 0xF2	; 242
    d3de:	92 81       	ldd	r25, Z+2	; 0x02
    d3e0:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d3e2:	91 34       	cpi	r25, 0x41	; 65
    d3e4:	b0 f4       	brcc	.+44     	; 0xd412 <update_high_scores+0x162>
    d3e6:	91 e4       	ldi	r25, 0x41	; 65
    d3e8:	14 c0       	rjmp	.+40     	; 0xd412 <update_high_scores+0x162>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d3ea:	25 ff       	sbrs	r18, 5
    d3ec:	1e c0       	rjmp	.+60     	; 0xd42a <update_high_scores+0x17a>
		{
			SFX_NAVIGATE;
    d3ee:	41 e0       	ldi	r20, 0x01	; 1
    d3f0:	6f ef       	ldi	r22, 0xFF	; 255
    d3f2:	82 e0       	ldi	r24, 0x02	; 2
    d3f4:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d3f8:	80 91 c8 0d 	lds	r24, 0x0DC8
    d3fc:	e8 2f       	mov	r30, r24
    d3fe:	ff 27       	eor	r31, r31
    d400:	e7 fd       	sbrc	r30, 7
    d402:	f0 95       	com	r31
    d404:	ea 56       	subi	r30, 0x6A	; 106
    d406:	f2 4f       	sbci	r31, 0xF2	; 242
    d408:	92 81       	ldd	r25, Z+2	; 0x02
    d40a:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d40c:	9b 35       	cpi	r25, 0x5B	; 91
    d40e:	08 f0       	brcs	.+2      	; 0xd412 <update_high_scores+0x162>
    d410:	9a e5       	ldi	r25, 0x5A	; 90
    d412:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d414:	65 e0       	ldi	r22, 0x05	; 5
    d416:	0e 94 7e 71 	call	0xe2fc	; 0xe2fc <__divmodqi4>
    d41a:	68 2f       	mov	r22, r24
    d41c:	66 0f       	add	r22, r22
    d41e:	69 5f       	subi	r22, 0xF9	; 249
    d420:	42 81       	ldd	r20, Z+2	; 0x02
    d422:	8b e0       	ldi	r24, 0x0B	; 11
    d424:	89 0f       	add	r24, r25
    d426:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		}
	}
	if (game.high_score_counter >= HIGH_SCORES_LENGTH)
    d42a:	c0 91 d8 0d 	lds	r28, 0x0DD8
    d42e:	cf 3f       	cpi	r28, 0xFF	; 255
    d430:	79 f4       	brne	.+30     	; 0xd450 <update_high_scores+0x1a0>
	{
		game.high_score_counter = 0;
    d432:	10 92 d8 0d 	sts	0x0DD8, r1
		SFX_NAVIGATE;
    d436:	41 e0       	ldi	r20, 0x01	; 1
    d438:	6f ef       	ldi	r22, 0xFF	; 255
    d43a:	82 e0       	ldi	r24, 0x02	; 2
    d43c:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
		game.high_score_index = -1;
    d440:	c0 93 c8 0d 	sts	0x0DC8, r28
		game.score = 0;
    d444:	10 92 b9 0d 	sts	0x0DB9, r1
    d448:	10 92 b8 0d 	sts	0x0DB8, r1
		load_splash();
    d44c:	0e 94 87 67 	call	0xcf0e	; 0xcf0e <load_splash>
	}
	game.high_score_counter++;
    d450:	80 91 d8 0d 	lds	r24, 0x0DD8
    d454:	8f 5f       	subi	r24, 0xFF	; 255
    d456:	80 93 d8 0d 	sts	0x0DD8, r24
}
    d45a:	cf 91       	pop	r28
    d45c:	0f 91       	pop	r16
    d45e:	08 95       	ret

0000d460 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d460:	2f 92       	push	r2
    d462:	3f 92       	push	r3
    d464:	4f 92       	push	r4
    d466:	5f 92       	push	r5
    d468:	6f 92       	push	r6
    d46a:	7f 92       	push	r7
    d46c:	8f 92       	push	r8
    d46e:	9f 92       	push	r9
    d470:	af 92       	push	r10
    d472:	bf 92       	push	r11
    d474:	cf 92       	push	r12
    d476:	df 92       	push	r13
    d478:	ef 92       	push	r14
    d47a:	ff 92       	push	r15
    d47c:	0f 93       	push	r16
    d47e:	1f 93       	push	r17
    d480:	cf 93       	push	r28
    d482:	df 93       	push	r29
    d484:	7c 01       	movw	r14, r24
    d486:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d488:	c0 91 b5 0c 	lds	r28, 0x0CB5
    d48c:	c6 95       	lsr	r28
    d48e:	c6 95       	lsr	r28
    d490:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d492:	00 91 b6 0c 	lds	r16, 0x0CB6
    d496:	06 95       	lsr	r16
    d498:	06 95       	lsr	r16
    d49a:	06 95       	lsr	r16
	u16 tally = game.score;
    d49c:	a0 90 b8 0d 	lds	r10, 0x0DB8
    d4a0:	b0 90 b9 0d 	lds	r11, 0x0DB9
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d4a4:	64 e1       	ldi	r22, 0x14	; 20
    d4a6:	80 e0       	ldi	r24, 0x00	; 0
    d4a8:	0e 94 ec 65 	call	0xcbd8	; 0xcbd8 <hide_sprites>
	LBRotateSprites();
    d4ac:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	
	StopSong();
    d4b0:	0e 94 40 41 	call	0x8280	; 0x8280 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d4b4:	10 e0       	ldi	r17, 0x00	; 0
    d4b6:	d0 e0       	ldi	r29, 0x00	; 0
    d4b8:	c8 01       	movw	r24, r16
    d4ba:	06 96       	adiw	r24, 0x06	; 6
    d4bc:	2e e1       	ldi	r18, 0x1E	; 30
    d4be:	82 2e       	mov	r8, r18
    d4c0:	91 2c       	mov	r9, r1
    d4c2:	b4 01       	movw	r22, r8
    d4c4:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    d4c8:	9e 01       	movw	r18, r28
    d4ca:	28 5f       	subi	r18, 0xF8	; 248
    d4cc:	3f 4f       	sbci	r19, 0xFF	; 255
    d4ce:	44 e9       	ldi	r20, 0x94	; 148
    d4d0:	59 e5       	ldi	r21, 0x59	; 89
    d4d2:	68 2f       	mov	r22, r24
    d4d4:	82 2f       	mov	r24, r18
    d4d6:	8f 71       	andi	r24, 0x1F	; 31
    d4d8:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d4dc:	c8 01       	movw	r24, r16
    d4de:	07 96       	adiw	r24, 0x07	; 7
    d4e0:	b4 01       	movw	r22, r8
    d4e2:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    d4e6:	9e 01       	movw	r18, r28
    d4e8:	26 5f       	subi	r18, 0xF6	; 246
    d4ea:	3f 4f       	sbci	r19, 0xFF	; 255
    d4ec:	a7 01       	movw	r20, r14
    d4ee:	68 2f       	mov	r22, r24
    d4f0:	82 2f       	mov	r24, r18
    d4f2:	8f 71       	andi	r24, 0x1F	; 31
    d4f4:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d4f8:	c8 01       	movw	r24, r16
    d4fa:	09 96       	adiw	r24, 0x09	; 9
    d4fc:	b4 01       	movw	r22, r8
    d4fe:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    d502:	48 2e       	mov	r4, r24
    d504:	78 2e       	mov	r7, r24
    d506:	7e 01       	movw	r14, r28
    d508:	29 e0       	ldi	r18, 0x09	; 9
    d50a:	e2 0e       	add	r14, r18
    d50c:	f1 1c       	adc	r15, r1
    d50e:	8f e1       	ldi	r24, 0x1F	; 31
    d510:	e8 22       	and	r14, r24
    d512:	ff 24       	eor	r15, r15
    d514:	4a ea       	ldi	r20, 0xAA	; 170
    d516:	53 e0       	ldi	r21, 0x03	; 3
    d518:	64 2d       	mov	r22, r4
    d51a:	8e 2d       	mov	r24, r14
    d51c:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d520:	c8 01       	movw	r24, r16
    d522:	0b 96       	adiw	r24, 0x0b	; 11
    d524:	b4 01       	movw	r22, r8
    d526:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    d52a:	38 2e       	mov	r3, r24
    d52c:	68 2e       	mov	r6, r24
    d52e:	40 e0       	ldi	r20, 0x00	; 0
    d530:	54 e0       	ldi	r21, 0x04	; 4
    d532:	68 2f       	mov	r22, r24
    d534:	8e 2d       	mov	r24, r14
    d536:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d53a:	c8 01       	movw	r24, r16
    d53c:	0c 96       	adiw	r24, 0x0c	; 12
    d53e:	b4 01       	movw	r22, r8
    d540:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    d544:	58 2e       	mov	r5, r24
    d546:	f8 2e       	mov	r15, r24
    d548:	4b ee       	ldi	r20, 0xEB	; 235
    d54a:	53 e0       	ldi	r21, 0x03	; 3
    d54c:	68 2f       	mov	r22, r24
    d54e:	8e 2d       	mov	r24, r14
    d550:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d554:	c8 01       	movw	r24, r16
    d556:	0d 96       	adiw	r24, 0x0d	; 13
    d558:	b4 01       	movw	r22, r8
    d55a:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    d55e:	18 2f       	mov	r17, r24
    d560:	28 2e       	mov	r2, r24
    d562:	4b eb       	ldi	r20, 0xBB	; 187
    d564:	53 e0       	ldi	r21, 0x03	; 3
    d566:	68 2f       	mov	r22, r24
    d568:	8e 2d       	mov	r24, r14
    d56a:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d56e:	64 96       	adiw	r28, 0x14	; 20
    d570:	cf 71       	andi	r28, 0x1F	; 31
    d572:	dd 27       	eor	r29, r29
    d574:	ec 2e       	mov	r14, r28
    d576:	21 e0       	ldi	r18, 0x01	; 1
    d578:	a5 01       	movw	r20, r10
    d57a:	64 2d       	mov	r22, r4
    d57c:	8c 2f       	mov	r24, r28
    d57e:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d582:	40 91 ba 0d 	lds	r20, 0x0DBA
    d586:	50 91 bb 0d 	lds	r21, 0x0DBB
    d58a:	21 e0       	ldi	r18, 0x01	; 1
    d58c:	63 2d       	mov	r22, r3
    d58e:	8c 2f       	mov	r24, r28
    d590:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d594:	40 91 bc 0d 	lds	r20, 0x0DBC
    d598:	50 91 bd 0d 	lds	r21, 0x0DBD
    d59c:	21 e0       	ldi	r18, 0x01	; 1
    d59e:	65 2d       	mov	r22, r5
    d5a0:	8c 2f       	mov	r24, r28
    d5a2:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d5a6:	21 e0       	ldi	r18, 0x01	; 1
    d5a8:	a6 01       	movw	r20, r12
    d5aa:	61 2f       	mov	r22, r17
    d5ac:	8c 2f       	mov	r24, r28
    d5ae:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	
	LBWaitSeconds(2);
    d5b2:	82 e0       	ldi	r24, 0x02	; 2
    d5b4:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d5b8:	80 90 ba 0d 	lds	r8, 0x0DBA
    d5bc:	90 90 bb 0d 	lds	r9, 0x0DBB
    d5c0:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d5c2:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d5c4:	20 97       	sbiw	r28, 0x00	; 0
    d5c6:	e9 f0       	breq	.+58     	; 0xd602 <tally_score+0x1a2>
	{
		WaitVsync(1);
    d5c8:	81 e0       	ldi	r24, 0x01	; 1
    d5ca:	90 e0       	ldi	r25, 0x00	; 0
    d5cc:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		SFX_HIT;
    d5d0:	41 e0       	ldi	r20, 0x01	; 1
    d5d2:	6f ef       	ldi	r22, 0xFF	; 255
    d5d4:	84 e0       	ldi	r24, 0x04	; 4
    d5d6:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
		tally += 1;
    d5da:	0f 5f       	subi	r16, 0xFF	; 255
    d5dc:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d5de:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d5e0:	21 e0       	ldi	r18, 0x01	; 1
    d5e2:	a8 01       	movw	r20, r16
    d5e4:	67 2d       	mov	r22, r7
    d5e6:	8e 2d       	mov	r24, r14
    d5e8:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d5ec:	21 e0       	ldi	r18, 0x01	; 1
    d5ee:	ae 01       	movw	r20, r28
    d5f0:	66 2d       	mov	r22, r6
    d5f2:	8e 2d       	mov	r24, r14
    d5f4:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d5f8:	8c ed       	ldi	r24, 0xDC	; 220
    d5fa:	95 e0       	ldi	r25, 0x05	; 5
    d5fc:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <WaitUs>
    d600:	e1 cf       	rjmp	.-62     	; 0xd5c4 <tally_score+0x164>
    d602:	a8 0c       	add	r10, r8
    d604:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d606:	c0 91 bc 0d 	lds	r28, 0x0DBC
    d60a:	d0 91 bd 0d 	lds	r29, 0x0DBD
	while (counter > 0)
    d60e:	20 97       	sbiw	r28, 0x00	; 0
    d610:	31 f1       	breq	.+76     	; 0xd65e <tally_score+0x1fe>
	{
		WaitVsync(1);
    d612:	81 e0       	ldi	r24, 0x01	; 1
    d614:	90 e0       	ldi	r25, 0x00	; 0
    d616:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		SFX_HIT;
    d61a:	41 e0       	ldi	r20, 0x01	; 1
    d61c:	6f ef       	ldi	r22, 0xFF	; 255
    d61e:	84 e0       	ldi	r24, 0x04	; 4
    d620:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d624:	c5 01       	movw	r24, r10
    d626:	02 97       	sbiw	r24, 0x02	; 2
    d628:	8e 3f       	cpi	r24, 0xFE	; 254
    d62a:	9f 4f       	sbci	r25, 0xFF	; 255
    d62c:	20 f4       	brcc	.+8      	; 0xd636 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d62e:	81 e0       	ldi	r24, 0x01	; 1
    d630:	a8 1a       	sub	r10, r24
    d632:	b1 08       	sbc	r11, r1
    d634:	02 c0       	rjmp	.+4      	; 0xd63a <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d636:	a1 2c       	mov	r10, r1
    d638:	b1 2c       	mov	r11, r1
		counter -= 1;
    d63a:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d63c:	21 e0       	ldi	r18, 0x01	; 1
    d63e:	a5 01       	movw	r20, r10
    d640:	67 2d       	mov	r22, r7
    d642:	8e 2d       	mov	r24, r14
    d644:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d648:	21 e0       	ldi	r18, 0x01	; 1
    d64a:	ae 01       	movw	r20, r28
    d64c:	6f 2d       	mov	r22, r15
    d64e:	8e 2d       	mov	r24, r14
    d650:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d654:	8c ed       	ldi	r24, 0xDC	; 220
    d656:	95 e0       	ldi	r25, 0x05	; 5
    d658:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <WaitUs>
    d65c:	d8 cf       	rjmp	.-80     	; 0xd60e <tally_score+0x1ae>
    d65e:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d660:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d662:	20 97       	sbiw	r28, 0x00	; 0
    d664:	e9 f0       	breq	.+58     	; 0xd6a0 <tally_score+0x240>
	{
		WaitVsync(1);
    d666:	81 e0       	ldi	r24, 0x01	; 1
    d668:	90 e0       	ldi	r25, 0x00	; 0
    d66a:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		SFX_HIT;
    d66e:	41 e0       	ldi	r20, 0x01	; 1
    d670:	6f ef       	ldi	r22, 0xFF	; 255
    d672:	84 e0       	ldi	r24, 0x04	; 4
    d674:	0e 94 06 42 	call	0x840c	; 0x840c <TriggerFx>
		tally += 1;
    d678:	0f 5f       	subi	r16, 0xFF	; 255
    d67a:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d67c:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d67e:	21 e0       	ldi	r18, 0x01	; 1
    d680:	a8 01       	movw	r20, r16
    d682:	67 2d       	mov	r22, r7
    d684:	8e 2d       	mov	r24, r14
    d686:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d68a:	21 e0       	ldi	r18, 0x01	; 1
    d68c:	ae 01       	movw	r20, r28
    d68e:	62 2d       	mov	r22, r2
    d690:	8e 2d       	mov	r24, r14
    d692:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d696:	8c ed       	ldi	r24, 0xDC	; 220
    d698:	95 e0       	ldi	r25, 0x05	; 5
    d69a:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <WaitUs>
    d69e:	e1 cf       	rjmp	.-62     	; 0xd662 <tally_score+0x202>
    d6a0:	ac 0c       	add	r10, r12
    d6a2:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d6a4:	b0 92 b9 0d 	sts	0x0DB9, r11
    d6a8:	a0 92 b8 0d 	sts	0x0DB8, r10
	game.time = 0;
    d6ac:	10 92 bd 0d 	sts	0x0DBD, r1
    d6b0:	10 92 bc 0d 	sts	0x0DBC, r1
	LBWaitSeconds(2);
    d6b4:	82 e0       	ldi	r24, 0x02	; 2
}
    d6b6:	df 91       	pop	r29
    d6b8:	cf 91       	pop	r28
    d6ba:	1f 91       	pop	r17
    d6bc:	0f 91       	pop	r16
    d6be:	ff 90       	pop	r15
    d6c0:	ef 90       	pop	r14
    d6c2:	df 90       	pop	r13
    d6c4:	cf 90       	pop	r12
    d6c6:	bf 90       	pop	r11
    d6c8:	af 90       	pop	r10
    d6ca:	9f 90       	pop	r9
    d6cc:	8f 90       	pop	r8
    d6ce:	7f 90       	pop	r7
    d6d0:	6f 90       	pop	r6
    d6d2:	5f 90       	pop	r5
    d6d4:	4f 90       	pop	r4
    d6d6:	3f 90       	pop	r3
    d6d8:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    d6da:	0c 94 1d 4e 	jmp	0x9c3a	; 0x9c3a <LBWaitSeconds>

0000d6de <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    d6de:	cf 93       	push	r28
	if (player == &game.boss) {
    d6e0:	84 55       	subi	r24, 0x54	; 84
    d6e2:	9e 40       	sbci	r25, 0x0E	; 14
    d6e4:	29 f4       	brne	.+10     	; 0xd6f0 <handle_player_death+0x12>
		game.level_ended = 1;
    d6e6:	81 e0       	ldi	r24, 0x01	; 1
    d6e8:	80 93 d3 0d 	sts	0x0DD3, r24
		return 1;
    d6ec:	c1 e0       	ldi	r28, 0x01	; 1
    d6ee:	34 c0       	rjmp	.+104    	; 0xd758 <handle_player_death+0x7a>
	}
	game.lives--;
    d6f0:	80 91 c9 0d 	lds	r24, 0x0DC9
    d6f4:	81 50       	subi	r24, 0x01	; 1
    d6f6:	80 93 c9 0d 	sts	0x0DC9, r24
	clear_sprites(0, 6);
    d6fa:	66 e0       	ldi	r22, 0x06	; 6
    d6fc:	80 e0       	ldi	r24, 0x00	; 0
    d6fe:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
	LBRotateSprites();
    d702:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	if (game.lives == 0)
    d706:	c0 91 c9 0d 	lds	r28, 0x0DC9
    d70a:	c1 11       	cpse	r28, r1
    d70c:	09 c0       	rjmp	.+18     	; 0xd720 <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    d70e:	60 e0       	ldi	r22, 0x00	; 0
    d710:	70 e0       	ldi	r23, 0x00	; 0
    d712:	81 eb       	ldi	r24, 0xB1	; 177
    d714:	93 e0       	ldi	r25, 0x03	; 3
    d716:	0e 94 30 6a 	call	0xd460	; 0xd460 <tally_score>
		exit_game();
    d71a:	0e 94 cc 68 	call	0xd198	; 0xd198 <exit_game>
    d71e:	1c c0       	rjmp	.+56     	; 0xd758 <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d720:	61 e0       	ldi	r22, 0x01	; 1
    d722:	81 e0       	ldi	r24, 0x01	; 1
    d724:	0e 94 66 4c 	call	0x98cc	; 0x98cc <FadeOut>
	ClearVram();
    d728:	0e 94 22 3e 	call	0x7c44	; 0x7c44 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d72c:	64 e1       	ldi	r22, 0x14	; 20
    d72e:	80 e0       	ldi	r24, 0x00	; 0
    d730:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
	LBRotateSprites();
    d734:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d738:	60 e0       	ldi	r22, 0x00	; 0
    d73a:	81 e0       	ldi	r24, 0x01	; 1
    d73c:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <FadeIn>
	init_player_state();
    d740:	0e 94 a1 53 	call	0xa742	; 0xa742 <init_player_state>
	init_boss_state();
    d744:	0e 94 17 53 	call	0xa62e	; 0xa62e <init_boss_state>
	init_enemy_state();
    d748:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <init_enemy_state>
	load_level(game.current_level_index, false);
    d74c:	60 e0       	ldi	r22, 0x00	; 0
    d74e:	80 91 cb 0d 	lds	r24, 0x0DCB
    d752:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <load_level>
	return 0;
    d756:	c0 e0       	ldi	r28, 0x00	; 0
}
    d758:	8c 2f       	mov	r24, r28
    d75a:	cf 91       	pop	r28
    d75c:	08 95       	ret

0000d75e <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    d75e:	cf 92       	push	r12
    d760:	df 92       	push	r13
    d762:	ef 92       	push	r14
    d764:	ff 92       	push	r15
    d766:	0f 93       	push	r16
    d768:	1f 93       	push	r17
    d76a:	cf 93       	push	r28
    d76c:	df 93       	push	r29
    d76e:	1f 92       	push	r1
    d770:	cd b7       	in	r28, 0x3d	; 61
    d772:	de b7       	in	r29, 0x3e	; 62
    d774:	6c 01       	movw	r12, r24
    d776:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	handle_music_toggle(&player->controls);
    d778:	7c 01       	movw	r14, r24
    d77a:	24 e7       	ldi	r18, 0x74	; 116
    d77c:	e2 0e       	add	r14, r18
    d77e:	f1 1c       	adc	r15, r1
    d780:	c7 01       	movw	r24, r14
    d782:	0e 94 a3 5b 	call	0xb746	; 0xb746 <handle_music_toggle>
	handle_demo_play(player);
    d786:	c6 01       	movw	r24, r12
    d788:	0e 94 af 5b 	call	0xb75e	; 0xb75e <handle_demo_play>
	
	if (player->flags & EXPLODING)
    d78c:	f6 01       	movw	r30, r12
    d78e:	00 85       	ldd	r16, Z+8	; 0x08
    d790:	04 ff       	sbrs	r16, 4
    d792:	19 c0       	rjmp	.+50     	; 0xd7c6 <update_player+0x68>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    d794:	04 85       	ldd	r16, Z+12	; 0x0c
    d796:	23 85       	ldd	r18, Z+11	; 0x0b
    d798:	41 2f       	mov	r20, r17
    d79a:	b6 01       	movw	r22, r12
    d79c:	64 59       	subi	r22, 0x94	; 148
    d79e:	7f 4f       	sbci	r23, 0xFF	; 255
    d7a0:	c6 01       	movw	r24, r12
    d7a2:	08 96       	adiw	r24, 0x08	; 8
    d7a4:	0e 94 6e 5f 	call	0xbedc	; 0xbedc <map_explosion>
    d7a8:	88 23       	and	r24, r24
    d7aa:	09 f4       	brne	.+2      	; 0xd7ae <update_player+0x50>
    d7ac:	01 c2       	rjmp	.+1026   	; 0xdbb0 <update_player+0x452>
		{
			return handle_player_death(player);
    d7ae:	c6 01       	movw	r24, r12
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    d7b0:	0f 90       	pop	r0
    d7b2:	df 91       	pop	r29
    d7b4:	cf 91       	pop	r28
    d7b6:	1f 91       	pop	r17
    d7b8:	0f 91       	pop	r16
    d7ba:	ff 90       	pop	r15
    d7bc:	ef 90       	pop	r14
    d7be:	df 90       	pop	r13
    d7c0:	cf 90       	pop	r12
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    d7c2:	0c 94 6f 6b 	jmp	0xd6de	; 0xd6de <handle_player_death>
		}
	}
	else if (is_space())
    d7c6:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    d7ca:	88 23       	and	r24, r24
    d7cc:	09 f4       	brne	.+2      	; 0xd7d0 <update_player+0x72>
    d7ce:	a6 c0       	rjmp	.+332    	; 0xd91c <update_player+0x1be>
	{
		if (game.current_level_index == 9)
    d7d0:	80 91 cb 0d 	lds	r24, 0x0DCB
    d7d4:	89 30       	cpi	r24, 0x09	; 9
    d7d6:	09 f0       	breq	.+2      	; 0xd7da <update_player+0x7c>
    d7d8:	4d c0       	rjmp	.+154    	; 0xd874 <update_player+0x116>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    d7da:	80 91 b6 0d 	lds	r24, 0x0DB6
    d7de:	90 91 b7 0d 	lds	r25, 0x0DB7
    d7e2:	e3 e0       	ldi	r30, 0x03	; 3
    d7e4:	96 95       	lsr	r25
    d7e6:	87 95       	ror	r24
    d7e8:	ea 95       	dec	r30
    d7ea:	e1 f7       	brne	.-8      	; 0xd7e4 <update_player+0x86>
    d7ec:	4c 96       	adiw	r24, 0x1c	; 28
    d7ee:	82 3d       	cpi	r24, 0xD2	; 210
    d7f0:	91 05       	cpc	r25, r1
    d7f2:	08 f4       	brcc	.+2      	; 0xd7f6 <update_player+0x98>
    d7f4:	3f c0       	rjmp	.+126    	; 0xd874 <update_player+0x116>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    d7f6:	05 ff       	sbrs	r16, 5
    d7f8:	02 c0       	rjmp	.+4      	; 0xd7fe <update_player+0xa0>
				{
					space_ship_speed = 0;
    d7fa:	00 e0       	ldi	r16, 0x00	; 0
    d7fc:	01 c0       	rjmp	.+2      	; 0xd800 <update_player+0xa2>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    d7fe:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(game.flags & BOSS_APROACHING))
    d800:	80 91 d5 0d 	lds	r24, 0x0DD5
    d804:	86 fd       	sbrc	r24, 6
    d806:	07 c0       	rjmp	.+14     	; 0xd816 <update_player+0xb8>
				{
					game.flags |= BOSS_APROACHING;
    d808:	80 64       	ori	r24, 0x40	; 64
    d80a:	80 93 d5 0d 	sts	0x0DD5, r24
					explode_all_enemies();
    d80e:	0e 94 87 5b 	call	0xb70e	; 0xb70e <explode_all_enemies>
					StopSong();
    d812:	0e 94 40 41 	call	0x8280	; 0x8280 <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(game.flags & BOSS_REACHED))
    d816:	80 91 b6 0d 	lds	r24, 0x0DB6
    d81a:	90 91 b7 0d 	lds	r25, 0x0DB7
    d81e:	73 e0       	ldi	r23, 0x03	; 3
    d820:	96 95       	lsr	r25
    d822:	87 95       	ror	r24
    d824:	7a 95       	dec	r23
    d826:	e1 f7       	brne	.-8      	; 0xd820 <update_player+0xc2>
    d828:	4c 96       	adiw	r24, 0x1c	; 28
    d82a:	8a 3f       	cpi	r24, 0xFA	; 250
    d82c:	91 05       	cpc	r25, r1
    d82e:	68 f0       	brcs	.+26     	; 0xd84a <update_player+0xec>
    d830:	80 91 d5 0d 	lds	r24, 0x0DD5
    d834:	87 fd       	sbrc	r24, 7
    d836:	09 c0       	rjmp	.+18     	; 0xd84a <update_player+0xec>
				{
					game.flags |= BOSS_REACHED;
    d838:	80 68       	ori	r24, 0x80	; 128
    d83a:	80 93 d5 0d 	sts	0x0DD5, r24
					init_enemy_boss_turrets();
    d83e:	0e 94 d3 56 	call	0xada6	; 0xada6 <init_enemy_boss_turrets>
					StartSong(planetsong);
    d842:	8f ec       	ldi	r24, 0xCF	; 207
    d844:	9a e0       	ldi	r25, 0x0A	; 10
    d846:	0e 94 17 41 	call	0x822e	; 0x822e <StartSong>
				}
				if ((game.flags & BOSS_REACHED) && (game.active_enemies == 0))
    d84a:	80 91 d5 0d 	lds	r24, 0x0DD5
    d84e:	87 ff       	sbrs	r24, 7
    d850:	12 c0       	rjmp	.+36     	; 0xd876 <update_player+0x118>
    d852:	80 91 d1 0d 	lds	r24, 0x0DD1
    d856:	81 11       	cpse	r24, r1
    d858:	0e c0       	rjmp	.+28     	; 0xd876 <update_player+0x118>
				{
					init_enemy_boss_eyes();
    d85a:	0e 94 f3 56 	call	0xade6	; 0xade6 <init_enemy_boss_eyes>
					game.eye_clusters--;
    d85e:	80 91 d4 0d 	lds	r24, 0x0DD4
    d862:	81 50       	subi	r24, 0x01	; 1
    d864:	80 93 d4 0d 	sts	0x0DD4, r24
					if (game.eye_clusters == 0)
    d868:	81 11       	cpse	r24, r1
    d86a:	05 c0       	rjmp	.+10     	; 0xd876 <update_player+0x118>
					{
						game.level_ended = 1;
    d86c:	81 e0       	ldi	r24, 0x01	; 1
    d86e:	80 93 d3 0d 	sts	0x0DD3, r24
    d872:	01 c0       	rjmp	.+2      	; 0xd876 <update_player+0x118>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    d874:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    d876:	f6 01       	movw	r30, r12
    d878:	80 85       	ldd	r24, Z+8	; 0x08
    d87a:	85 ff       	sbrs	r24, 5
    d87c:	08 c0       	rjmp	.+16     	; 0xd88e <update_player+0x130>
    d87e:	80 91 cb 0d 	lds	r24, 0x0DCB
    d882:	89 30       	cpi	r24, 0x09	; 9
    d884:	21 f0       	breq	.+8      	; 0xd88e <update_player+0x130>
			player->shared.vx = space_ship_speed*2;
    d886:	00 0f       	add	r16, r16
    d888:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    d88a:	14 82       	std	Z+4, r1	; 0x04
    d88c:	43 c0       	rjmp	.+134    	; 0xd914 <update_player+0x1b6>
		} else {
			player->shared.vy = 0;
    d88e:	f6 01       	movw	r30, r12
    d890:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    d892:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    d894:	e8 58       	subi	r30, 0x88	; 136
    d896:	ff 4f       	sbci	r31, 0xFF	; 255
    d898:	20 81       	ld	r18, Z
    d89a:	25 ff       	sbrs	r18, 5
    d89c:	11 c0       	rjmp	.+34     	; 0xd8c0 <update_player+0x162>
    d89e:	f6 01       	movw	r30, r12
    d8a0:	82 81       	ldd	r24, Z+2	; 0x02
    d8a2:	93 81       	ldd	r25, Z+3	; 0x03
    d8a4:	63 e0       	ldi	r22, 0x03	; 3
    d8a6:	96 95       	lsr	r25
    d8a8:	87 95       	ror	r24
    d8aa:	6a 95       	dec	r22
    d8ac:	e1 f7       	brne	.-8      	; 0xd8a6 <update_player+0x148>
    d8ae:	01 96       	adiw	r24, 0x01	; 1
    d8b0:	40 91 c6 0d 	lds	r20, 0x0DC6
    d8b4:	50 e0       	ldi	r21, 0x00	; 0
    d8b6:	84 17       	cp	r24, r20
    d8b8:	95 07       	cpc	r25, r21
    d8ba:	10 f4       	brcc	.+4      	; 0xd8c0 <update_player+0x162>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    d8bc:	8c e3       	ldi	r24, 0x3C	; 60
    d8be:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    d8c0:	27 ff       	sbrs	r18, 7
    d8c2:	11 c0       	rjmp	.+34     	; 0xd8e6 <update_player+0x188>
    d8c4:	f6 01       	movw	r30, r12
    d8c6:	40 81       	ld	r20, Z
    d8c8:	51 81       	ldd	r21, Z+1	; 0x01
    d8ca:	48 5e       	subi	r20, 0xE8	; 232
    d8cc:	5f 4f       	sbci	r21, 0xFF	; 255
    d8ce:	80 91 b6 0d 	lds	r24, 0x0DB6
    d8d2:	90 91 b7 0d 	lds	r25, 0x0DB7
    d8d6:	80 52       	subi	r24, 0x20	; 32
    d8d8:	9f 4f       	sbci	r25, 0xFF	; 255
    d8da:	48 17       	cp	r20, r24
    d8dc:	59 07       	cpc	r21, r25
    d8de:	18 f4       	brcc	.+6      	; 0xd8e6 <update_player+0x188>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    d8e0:	8c e3       	ldi	r24, 0x3C	; 60
    d8e2:	80 0f       	add	r24, r16
    d8e4:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d8e6:	26 ff       	sbrs	r18, 6
    d8e8:	0c c0       	rjmp	.+24     	; 0xd902 <update_player+0x1a4>
    d8ea:	f6 01       	movw	r30, r12
    d8ec:	40 81       	ld	r20, Z
    d8ee:	51 81       	ldd	r21, Z+1	; 0x01
    d8f0:	80 91 b6 0d 	lds	r24, 0x0DB6
    d8f4:	90 91 b7 0d 	lds	r25, 0x0DB7
    d8f8:	84 17       	cp	r24, r20
    d8fa:	95 07       	cpc	r25, r21
    d8fc:	10 f4       	brcc	.+4      	; 0xd902 <update_player+0x1a4>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    d8fe:	0c 53       	subi	r16, 0x3C	; 60
    d900:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    d902:	24 ff       	sbrs	r18, 4
    d904:	07 c0       	rjmp	.+14     	; 0xd914 <update_player+0x1b6>
    d906:	f6 01       	movw	r30, r12
    d908:	82 81       	ldd	r24, Z+2	; 0x02
    d90a:	93 81       	ldd	r25, Z+3	; 0x03
    d90c:	89 2b       	or	r24, r25
    d90e:	11 f0       	breq	.+4      	; 0xd914 <update_player+0x1b6>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    d910:	84 ec       	ldi	r24, 0xC4	; 196
    d912:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d914:	c6 01       	movw	r24, r12
    d916:	8c 5a       	subi	r24, 0xAC	; 172
    d918:	9f 4f       	sbci	r25, 0xFF	; 255
    d91a:	43 c1       	rjmp	.+646    	; 0xdba2 <update_player+0x444>
	}
	else if (player->flags & (IDLE|RUNNING))
    d91c:	80 2f       	mov	r24, r16
    d91e:	8a 70       	andi	r24, 0x0A	; 10
    d920:	09 f4       	brne	.+2      	; 0xd924 <update_player+0x1c6>
    d922:	97 c0       	rjmp	.+302    	; 0xda52 <update_player+0x2f4>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    d924:	f6 01       	movw	r30, r12
    d926:	44 85       	ldd	r20, Z+12	; 0x0c
    d928:	63 85       	ldd	r22, Z+11	; 0x0b
    d92a:	c6 01       	movw	r24, r12
    d92c:	0e 94 25 5a 	call	0xb44a	; 0xb44a <on_solid_ground>
    d930:	81 11       	cpse	r24, r1
    d932:	06 c0       	rjmp	.+12     	; 0xd940 <update_player+0x1e2>
		{
			player->shared.gravity = GRAVITY;
    d934:	88 ec       	ldi	r24, 0xC8	; 200
    d936:	f6 01       	movw	r30, r12
    d938:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    d93a:	81 e0       	ldi	r24, 0x01	; 1
    d93c:	80 87       	std	Z+8, r24	; 0x08
    d93e:	0f c1       	rjmp	.+542    	; 0xdb5e <update_player+0x400>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    d940:	f6 01       	movw	r30, r12
    d942:	e8 58       	subi	r30, 0x88	; 136
    d944:	ff 4f       	sbci	r31, 0xFF	; 255
    d946:	80 81       	ld	r24, Z
    d948:	85 ff       	sbrs	r24, 5
    d94a:	26 c0       	rjmp	.+76     	; 0xd998 <update_player+0x23a>
			{
				player->shared.y += 16;
    d94c:	f6 01       	movw	r30, r12
    d94e:	82 81       	ldd	r24, Z+2	; 0x02
    d950:	93 81       	ldd	r25, Z+3	; 0x03
    d952:	40 96       	adiw	r24, 0x10	; 16
    d954:	93 83       	std	Z+3, r25	; 0x03
    d956:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    d958:	82 85       	ldd	r24, Z+10	; 0x0a
    d95a:	81 30       	cpi	r24, 0x01	; 1
    d95c:	29 f4       	brne	.+10     	; 0xd968 <update_player+0x20a>
				{
					player->shared.x -= 8;
    d95e:	80 81       	ld	r24, Z
    d960:	91 81       	ldd	r25, Z+1	; 0x01
    d962:	08 97       	sbiw	r24, 0x08	; 8
    d964:	91 83       	std	Z+1, r25	; 0x01
    d966:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    d968:	f6 01       	movw	r30, r12
    d96a:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    d96c:	84 e0       	ldi	r24, 0x04	; 4
    d96e:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    d970:	83 e0       	ldi	r24, 0x03	; 3
    d972:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    d974:	81 e0       	ldi	r24, 0x01	; 1
    d976:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(slot+3, 3);
    d978:	63 e0       	ldi	r22, 0x03	; 3
    d97a:	83 e0       	ldi	r24, 0x03	; 3
    d97c:	81 0f       	add	r24, r17
    d97e:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    d982:	24 e0       	ldi	r18, 0x04	; 4
    d984:	12 9f       	mul	r17, r18
    d986:	f0 01       	movw	r30, r0
    d988:	11 24       	eor	r1, r1
    d98a:	ec 51       	subi	r30, 0x1C	; 28
    d98c:	f0 4f       	sbci	r31, 0xF0	; 240
    d98e:	43 81       	ldd	r20, Z+3	; 0x03
    d990:	c6 01       	movw	r24, r12
    d992:	8c 59       	subi	r24, 0x9C	; 156
    d994:	9f 4f       	sbci	r25, 0xFF	; 255
    d996:	45 c0       	rjmp	.+138    	; 0xda22 <update_player+0x2c4>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    d998:	87 ff       	sbrs	r24, 7
    d99a:	1d c0       	rjmp	.+58     	; 0xd9d6 <update_player+0x278>
    d99c:	f6 01       	movw	r30, r12
    d99e:	20 81       	ld	r18, Z
    d9a0:	31 81       	ldd	r19, Z+1	; 0x01
    d9a2:	53 e0       	ldi	r21, 0x03	; 3
    d9a4:	36 95       	lsr	r19
    d9a6:	27 95       	ror	r18
    d9a8:	5a 95       	dec	r21
    d9aa:	e1 f7       	brne	.-8      	; 0xd9a4 <update_player+0x246>
    d9ac:	2e 5f       	subi	r18, 0xFE	; 254
    d9ae:	3f 4f       	sbci	r19, 0xFF	; 255
    d9b0:	40 91 c5 0d 	lds	r20, 0x0DC5
    d9b4:	50 e0       	ldi	r21, 0x00	; 0
    d9b6:	24 17       	cp	r18, r20
    d9b8:	35 07       	cpc	r19, r21
    d9ba:	68 f4       	brcc	.+26     	; 0xd9d6 <update_player+0x278>
			{
				player->shared.vx = RUN_SPEED;
    d9bc:	8c e3       	ldi	r24, 0x3C	; 60
    d9be:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    d9c0:	82 e0       	ldi	r24, 0x02	; 2
    d9c2:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    d9c4:	81 e0       	ldi	r24, 0x01	; 1
    d9c6:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d9c8:	c6 01       	movw	r24, r12
    d9ca:	8c 5a       	subi	r24, 0xAC	; 172
    d9cc:	9f 4f       	sbci	r25, 0xFF	; 255
    d9ce:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    d9d2:	40 e0       	ldi	r20, 0x00	; 0
    d9d4:	2a c0       	rjmp	.+84     	; 0xda2a <update_player+0x2cc>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d9d6:	86 ff       	sbrs	r24, 6
    d9d8:	16 c0       	rjmp	.+44     	; 0xda06 <update_player+0x2a8>
    d9da:	f6 01       	movw	r30, r12
    d9dc:	20 81       	ld	r18, Z
    d9de:	31 81       	ldd	r19, Z+1	; 0x01
    d9e0:	80 91 b6 0d 	lds	r24, 0x0DB6
    d9e4:	90 91 b7 0d 	lds	r25, 0x0DB7
    d9e8:	82 17       	cp	r24, r18
    d9ea:	93 07       	cpc	r25, r19
    d9ec:	60 f4       	brcc	.+24     	; 0xda06 <update_player+0x2a8>
			{
				player->shared.vx = -RUN_SPEED;
    d9ee:	84 ec       	ldi	r24, 0xC4	; 196
    d9f0:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    d9f2:	82 e0       	ldi	r24, 0x02	; 2
    d9f4:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    d9f6:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    d9f8:	c6 01       	movw	r24, r12
    d9fa:	8c 5a       	subi	r24, 0xAC	; 172
    d9fc:	9f 4f       	sbci	r25, 0xFF	; 255
    d9fe:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    da02:	41 e0       	ldi	r20, 0x01	; 1
    da04:	12 c0       	rjmp	.+36     	; 0xda2a <update_player+0x2cc>
			}
			else
			{
				player->flags = IDLE;
    da06:	88 e0       	ldi	r24, 0x08	; 8
    da08:	f6 01       	movw	r30, r12
    da0a:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    da0c:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    da0e:	24 e0       	ldi	r18, 0x04	; 4
    da10:	12 9f       	mul	r17, r18
    da12:	f0 01       	movw	r30, r0
    da14:	11 24       	eor	r1, r1
    da16:	ec 51       	subi	r30, 0x1C	; 28
    da18:	f0 4f       	sbci	r31, 0xF0	; 240
    da1a:	43 81       	ldd	r20, Z+3	; 0x03
    da1c:	c6 01       	movw	r24, r12
    da1e:	84 5b       	subi	r24, 0xB4	; 180
    da20:	9f 4f       	sbci	r25, 0xFF	; 255
    da22:	49 83       	std	Y+1, r20	; 0x01
    da24:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    da28:	49 81       	ldd	r20, Y+1	; 0x01
    da2a:	bc 01       	movw	r22, r24
    da2c:	81 2f       	mov	r24, r17
    da2e:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_A && !(player->flags & PRONE))
    da32:	f7 01       	movw	r30, r14
    da34:	80 81       	ld	r24, Z
    da36:	91 81       	ldd	r25, Z+1	; 0x01
    da38:	90 ff       	sbrs	r25, 0
    da3a:	ba c0       	rjmp	.+372    	; 0xdbb0 <update_player+0x452>
    da3c:	f6 01       	movw	r30, r12
    da3e:	80 85       	ldd	r24, Z+8	; 0x08
    da40:	82 fd       	sbrc	r24, 2
    da42:	b6 c0       	rjmp	.+364    	; 0xdbb0 <update_player+0x452>
			{
				player->shared.vy = -JUMP_SPEED;
    da44:	81 e8       	ldi	r24, 0x81	; 129
    da46:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    da48:	88 ec       	ldi	r24, 0xC8	; 200
    da4a:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    da4c:	81 e0       	ldi	r24, 0x01	; 1
    da4e:	80 87       	std	Z+8, r24	; 0x08
    da50:	82 c0       	rjmp	.+260    	; 0xdb56 <update_player+0x3f8>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    da52:	00 ff       	sbrs	r16, 0
    da54:	4c c0       	rjmp	.+152    	; 0xdaee <update_player+0x390>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    da56:	f6 01       	movw	r30, r12
    da58:	e8 58       	subi	r30, 0x88	; 136
    da5a:	ff 4f       	sbci	r31, 0xFF	; 255
    da5c:	60 81       	ld	r22, Z
    da5e:	c6 01       	movw	r24, r12
    da60:	84 5a       	subi	r24, 0xA4	; 164
    da62:	9f 4f       	sbci	r25, 0xFF	; 255
    da64:	67 ff       	sbrs	r22, 7
    da66:	18 c0       	rjmp	.+48     	; 0xda98 <update_player+0x33a>
    da68:	f6 01       	movw	r30, r12
    da6a:	20 81       	ld	r18, Z
    da6c:	31 81       	ldd	r19, Z+1	; 0x01
    da6e:	43 e0       	ldi	r20, 0x03	; 3
    da70:	36 95       	lsr	r19
    da72:	27 95       	ror	r18
    da74:	4a 95       	dec	r20
    da76:	e1 f7       	brne	.-8      	; 0xda70 <update_player+0x312>
    da78:	2e 5f       	subi	r18, 0xFE	; 254
    da7a:	3f 4f       	sbci	r19, 0xFF	; 255
    da7c:	40 91 c5 0d 	lds	r20, 0x0DC5
    da80:	50 e0       	ldi	r21, 0x00	; 0
    da82:	24 17       	cp	r18, r20
    da84:	35 07       	cpc	r19, r21
    da86:	40 f4       	brcc	.+16     	; 0xda98 <update_player+0x33a>
		{
			player->shared.vx = RUN_SPEED;
    da88:	2c e3       	ldi	r18, 0x3C	; 60
    da8a:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    da8c:	21 e0       	ldi	r18, 0x01	; 1
    da8e:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    da90:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    da94:	40 e0       	ldi	r20, 0x00	; 0
    da96:	20 c0       	rjmp	.+64     	; 0xdad8 <update_player+0x37a>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    da98:	66 ff       	sbrs	r22, 6
    da9a:	11 c0       	rjmp	.+34     	; 0xdabe <update_player+0x360>
    da9c:	f6 01       	movw	r30, r12
    da9e:	40 81       	ld	r20, Z
    daa0:	51 81       	ldd	r21, Z+1	; 0x01
    daa2:	20 91 b6 0d 	lds	r18, 0x0DB6
    daa6:	30 91 b7 0d 	lds	r19, 0x0DB7
    daaa:	24 17       	cp	r18, r20
    daac:	35 07       	cpc	r19, r21
    daae:	38 f4       	brcc	.+14     	; 0xdabe <update_player+0x360>
		{
			player->shared.vx = -RUN_SPEED;
    dab0:	24 ec       	ldi	r18, 0xC4	; 196
    dab2:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    dab4:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    dab6:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    daba:	41 e0       	ldi	r20, 0x01	; 1
    dabc:	0d c0       	rjmp	.+26     	; 0xdad8 <update_player+0x37a>
		}
		else
		{
			player->shared.vx = 0;
    dabe:	f6 01       	movw	r30, r12
    dac0:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dac2:	24 e0       	ldi	r18, 0x04	; 4
    dac4:	12 9f       	mul	r17, r18
    dac6:	f0 01       	movw	r30, r0
    dac8:	11 24       	eor	r1, r1
    daca:	ec 51       	subi	r30, 0x1C	; 28
    dacc:	f0 4f       	sbci	r31, 0xF0	; 240
    dace:	43 81       	ldd	r20, Z+3	; 0x03
    dad0:	49 83       	std	Y+1, r20	; 0x01
    dad2:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    dad6:	49 81       	ldd	r20, Y+1	; 0x01
    dad8:	bc 01       	movw	r22, r24
    dada:	81 2f       	mov	r24, r17
    dadc:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    dae0:	f6 01       	movw	r30, r12
    dae2:	86 81       	ldd	r24, Z+6	; 0x06
    dae4:	81 11       	cpse	r24, r1
    dae6:	64 c0       	rjmp	.+200    	; 0xdbb0 <update_player+0x452>
		{
			player->flags = IDLE;
    dae8:	88 e0       	ldi	r24, 0x08	; 8
    daea:	80 87       	std	Z+8, r24	; 0x08
    daec:	61 c0       	rjmp	.+194    	; 0xdbb0 <update_player+0x452>
		}
	}
	else if (player->flags & PRONE)
    daee:	02 ff       	sbrs	r16, 2
    daf0:	5f c0       	rjmp	.+190    	; 0xdbb0 <update_player+0x452>
	{
		if (player->controls.pressed & BTN_UP)
    daf2:	f7 01       	movw	r30, r14
    daf4:	80 81       	ld	r24, Z
    daf6:	91 81       	ldd	r25, Z+1	; 0x01
    daf8:	84 ff       	sbrs	r24, 4
    dafa:	16 c0       	rjmp	.+44     	; 0xdb28 <update_player+0x3ca>
		{
			player->flags = IDLE;	
    dafc:	88 e0       	ldi	r24, 0x08	; 8
    dafe:	f6 01       	movw	r30, r12
    db00:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    db02:	82 81       	ldd	r24, Z+2	; 0x02
    db04:	93 81       	ldd	r25, Z+3	; 0x03
    db06:	40 97       	sbiw	r24, 0x10	; 16
    db08:	93 83       	std	Z+3, r25	; 0x03
    db0a:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    db0c:	82 85       	ldd	r24, Z+10	; 0x0a
    db0e:	81 30       	cpi	r24, 0x01	; 1
    db10:	29 f4       	brne	.+10     	; 0xdb1c <update_player+0x3be>
			{
				player->shared.x += 8;
    db12:	80 81       	ld	r24, Z
    db14:	91 81       	ldd	r25, Z+1	; 0x01
    db16:	08 96       	adiw	r24, 0x08	; 8
    db18:	91 83       	std	Z+1, r25	; 0x01
    db1a:	80 83       	st	Z, r24
			}
			player->width = 2;
    db1c:	82 e0       	ldi	r24, 0x02	; 2
    db1e:	f6 01       	movw	r30, r12
    db20:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    db22:	83 e0       	ldi	r24, 0x03	; 3
    db24:	84 87       	std	Z+12, r24	; 0x0c
    db26:	44 c0       	rjmp	.+136    	; 0xdbb0 <update_player+0x452>
		}
		else if (player->controls.pressed & BTN_A)
    db28:	90 ff       	sbrs	r25, 0
    db2a:	28 c0       	rjmp	.+80     	; 0xdb7c <update_player+0x41e>
		{
			player->flags = JUMPING;
    db2c:	81 e0       	ldi	r24, 0x01	; 1
    db2e:	f6 01       	movw	r30, r12
    db30:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    db32:	82 81       	ldd	r24, Z+2	; 0x02
    db34:	93 81       	ldd	r25, Z+3	; 0x03
    db36:	40 97       	sbiw	r24, 0x10	; 16
    db38:	93 83       	std	Z+3, r25	; 0x03
    db3a:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    db3c:	82 85       	ldd	r24, Z+10	; 0x0a
    db3e:	81 30       	cpi	r24, 0x01	; 1
    db40:	29 f4       	brne	.+10     	; 0xdb4c <update_player+0x3ee>
			{
				player->shared.x += 8;
    db42:	80 81       	ld	r24, Z
    db44:	91 81       	ldd	r25, Z+1	; 0x01
    db46:	08 96       	adiw	r24, 0x08	; 8
    db48:	91 83       	std	Z+1, r25	; 0x01
    db4a:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    db4c:	81 e8       	ldi	r24, 0x81	; 129
    db4e:	f6 01       	movw	r30, r12
    db50:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    db52:	88 ec       	ldi	r24, 0xC8	; 200
    db54:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    db56:	82 e0       	ldi	r24, 0x02	; 2
    db58:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    db5a:	83 e0       	ldi	r24, 0x03	; 3
    db5c:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    db5e:	24 e0       	ldi	r18, 0x04	; 4
    db60:	12 9f       	mul	r17, r18
    db62:	f0 01       	movw	r30, r0
    db64:	11 24       	eor	r1, r1
    db66:	ec 51       	subi	r30, 0x1C	; 28
    db68:	f0 4f       	sbci	r31, 0xF0	; 240
    db6a:	43 81       	ldd	r20, Z+3	; 0x03
    db6c:	c6 01       	movw	r24, r12
    db6e:	84 5a       	subi	r24, 0xA4	; 164
    db70:	9f 4f       	sbci	r25, 0xFF	; 255
    db72:	49 83       	std	Y+1, r20	; 0x01
    db74:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    db78:	49 81       	ldd	r20, Y+1	; 0x01
    db7a:	16 c0       	rjmp	.+44     	; 0xdba8 <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_LEFT)
    db7c:	86 ff       	sbrs	r24, 6
    db7e:	09 c0       	rjmp	.+18     	; 0xdb92 <update_player+0x434>
		{
			player->direction = D_LEFT;
    db80:	f6 01       	movw	r30, r12
    db82:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    db84:	c6 01       	movw	r24, r12
    db86:	8c 59       	subi	r24, 0x9C	; 156
    db88:	9f 4f       	sbci	r25, 0xFF	; 255
    db8a:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    db8e:	41 e0       	ldi	r20, 0x01	; 1
    db90:	0b c0       	rjmp	.+22     	; 0xdba8 <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    db92:	87 ff       	sbrs	r24, 7
    db94:	0d c0       	rjmp	.+26     	; 0xdbb0 <update_player+0x452>
		{
			player->direction = D_RIGHT;
    db96:	81 e0       	ldi	r24, 0x01	; 1
    db98:	f6 01       	movw	r30, r12
    db9a:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    db9c:	c6 01       	movw	r24, r12
    db9e:	8c 59       	subi	r24, 0x9C	; 156
    dba0:	9f 4f       	sbci	r25, 0xFF	; 255
    dba2:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    dba6:	40 e0       	ldi	r20, 0x00	; 0
    dba8:	bc 01       	movw	r22, r24
    dbaa:	81 2f       	mov	r24, r17
    dbac:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
		}
	}
	return 1;
}
    dbb0:	81 e0       	ldi	r24, 0x01	; 1
    dbb2:	0f 90       	pop	r0
    dbb4:	df 91       	pop	r29
    dbb6:	cf 91       	pop	r28
    dbb8:	1f 91       	pop	r17
    dbba:	0f 91       	pop	r16
    dbbc:	ff 90       	pop	r15
    dbbe:	ef 90       	pop	r14
    dbc0:	df 90       	pop	r13
    dbc2:	cf 90       	pop	r12
    dbc4:	08 95       	ret

0000dbc6 <update_level>:
	print_scroll(strCongrats);
	StopSong();
}

u8 update_level()
{
    dbc6:	cf 92       	push	r12
    dbc8:	df 92       	push	r13
    dbca:	ef 92       	push	r14
    dbcc:	ff 92       	push	r15
    dbce:	0f 93       	push	r16
    dbd0:	cf 93       	push	r28
    dbd2:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    dbd4:	e0 90 d9 0d 	lds	r14, 0x0DD9
    dbd8:	f0 90 da 0d 	lds	r15, 0x0DDA
    dbdc:	c0 90 b6 0d 	lds	r12, 0x0DB6
    dbe0:	d0 90 b7 0d 	lds	r13, 0x0DB7
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    dbe4:	80 91 d0 0d 	lds	r24, 0x0DD0
    dbe8:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    dbea:	8c 33       	cpi	r24, 0x3C	; 60
    dbec:	19 f0       	breq	.+6      	; 0xdbf4 <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    dbee:	80 93 d0 0d 	sts	0x0DD0, r24
    dbf2:	0f c0       	rjmp	.+30     	; 0xdc12 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    dbf4:	10 92 d0 0d 	sts	0x0DD0, r1
		if (game.time != 65535) game.time++;
    dbf8:	80 91 bc 0d 	lds	r24, 0x0DBC
    dbfc:	90 91 bd 0d 	lds	r25, 0x0DBD
    dc00:	8f 3f       	cpi	r24, 0xFF	; 255
    dc02:	2f ef       	ldi	r18, 0xFF	; 255
    dc04:	92 07       	cpc	r25, r18
    dc06:	29 f0       	breq	.+10     	; 0xdc12 <update_level+0x4c>
    dc08:	01 96       	adiw	r24, 0x01	; 1
    dc0a:	90 93 bd 0d 	sts	0x0DBD, r25
    dc0e:	80 93 bc 0d 	sts	0x0DBC, r24
	}
	
	if (is_space())
    dc12:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    dc16:	88 23       	and	r24, r24
    dc18:	a1 f1       	breq	.+104    	; 0xdc82 <update_level+0xbc>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    dc1a:	c6 01       	movw	r24, r12
    dc1c:	23 e0       	ldi	r18, 0x03	; 3
    dc1e:	96 95       	lsr	r25
    dc20:	87 95       	ror	r24
    dc22:	2a 95       	dec	r18
    dc24:	e1 f7       	brne	.-8      	; 0xdc1e <update_level+0x58>
    dc26:	4c 96       	adiw	r24, 0x1c	; 28
    dc28:	20 91 c5 0d 	lds	r18, 0x0DC5
    dc2c:	30 e0       	ldi	r19, 0x00	; 0
    dc2e:	82 17       	cp	r24, r18
    dc30:	93 07       	cpc	r25, r19
    dc32:	70 f4       	brcc	.+28     	; 0xdc50 <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    dc34:	20 91 cb 0d 	lds	r18, 0x0DCB
    dc38:	29 30       	cpi	r18, 0x09	; 9
    dc3a:	39 f4       	brne	.+14     	; 0xdc4a <update_level+0x84>
    dc3c:	82 3d       	cpi	r24, 0xD2	; 210
    dc3e:	91 05       	cpc	r25, r1
    dc40:	20 f0       	brcs	.+8      	; 0xdc4a <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    dc42:	80 91 d0 0d 	lds	r24, 0x0DD0
    dc46:	80 fd       	sbrc	r24, 0
    dc48:	34 c0       	rjmp	.+104    	; 0xdcb2 <update_level+0xec>
    dc4a:	0e 94 d2 59 	call	0xb3a4	; 0xb3a4 <move_camera_x>
    dc4e:	31 c0       	rjmp	.+98     	; 0xdcb2 <update_level+0xec>
    dc50:	80 91 e1 0d 	lds	r24, 0x0DE1
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x+24 >= game.camera_x+CAMERA_WIDTH*8 && game.current_level_index != 9)
    dc54:	a7 01       	movw	r20, r14
    dc56:	48 5e       	subi	r20, 0xE8	; 232
    dc58:	5f 4f       	sbci	r21, 0xFF	; 255
    dc5a:	96 01       	movw	r18, r12
    dc5c:	20 52       	subi	r18, 0x20	; 32
    dc5e:	3f 4f       	sbci	r19, 0xFF	; 255
    dc60:	42 17       	cp	r20, r18
    dc62:	53 07       	cpc	r21, r19
    dc64:	50 f0       	brcs	.+20     	; 0xdc7a <update_level+0xb4>
    dc66:	90 91 cb 0d 	lds	r25, 0x0DCB
    dc6a:	99 30       	cpi	r25, 0x09	; 9
    dc6c:	31 f0       	breq	.+12     	; 0xdc7a <update_level+0xb4>
		{
			game.level_ended = 1;
    dc6e:	91 e0       	ldi	r25, 0x01	; 1
    dc70:	90 93 d3 0d 	sts	0x0DD3, r25
			game.player.flags ^= END_OF_SPACE;
    dc74:	90 e2       	ldi	r25, 0x20	; 32
    dc76:	89 27       	eor	r24, r25
    dc78:	01 c0       	rjmp	.+2      	; 0xdc7c <update_level+0xb6>
		} else {
			game.player.flags |= END_OF_SPACE;
    dc7a:	80 62       	ori	r24, 0x20	; 32
    dc7c:	80 93 e1 0d 	sts	0x0DE1, r24
    dc80:	18 c0       	rjmp	.+48     	; 0xdcb2 <update_level+0xec>
		}
	}
	else if (game.player.shared.vx > 0 &&
    dc82:	80 91 de 0d 	lds	r24, 0x0DDE
    dc86:	18 16       	cp	r1, r24
    dc88:	a4 f4       	brge	.+40     	; 0xdcb2 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dc8a:	c7 01       	movw	r24, r14
    dc8c:	8c 19       	sub	r24, r12
    dc8e:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    dc90:	80 37       	cpi	r24, 0x70	; 112
    dc92:	91 05       	cpc	r25, r1
    dc94:	70 f0       	brcs	.+28     	; 0xdcb2 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    dc96:	96 01       	movw	r18, r12
    dc98:	83 e0       	ldi	r24, 0x03	; 3
    dc9a:	36 95       	lsr	r19
    dc9c:	27 95       	ror	r18
    dc9e:	8a 95       	dec	r24
    dca0:	e1 f7       	brne	.-8      	; 0xdc9a <update_level+0xd4>
    dca2:	24 5e       	subi	r18, 0xE4	; 228
    dca4:	3f 4f       	sbci	r19, 0xFF	; 255
    dca6:	80 91 c5 0d 	lds	r24, 0x0DC5
    dcaa:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dcac:	28 17       	cp	r18, r24
    dcae:	39 07       	cpc	r19, r25
    dcb0:	60 f2       	brcs	.-104    	; 0xdc4a <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    dcb2:	21 e0       	ldi	r18, 0x01	; 1
    dcb4:	40 91 e8 0d 	lds	r20, 0x0DE8
    dcb8:	6d e1       	ldi	r22, 0x1D	; 29
    dcba:	89 e0       	ldi	r24, 0x09	; 9
    dcbc:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    dcc0:	40 91 bc 0d 	lds	r20, 0x0DBC
    dcc4:	50 91 bd 0d 	lds	r21, 0x0DBD
    dcc8:	21 e0       	ldi	r18, 0x01	; 1
    dcca:	6d e1       	ldi	r22, 0x1D	; 29
    dccc:	8b e1       	ldi	r24, 0x1B	; 27
    dcce:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    dcd2:	21 e0       	ldi	r18, 0x01	; 1
    dcd4:	40 91 c9 0d 	lds	r20, 0x0DC9
    dcd8:	6e e1       	ldi	r22, 0x1E	; 30
    dcda:	89 e0       	ldi	r24, 0x09	; 9
    dcdc:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    dce0:	40 91 ba 0d 	lds	r20, 0x0DBA
    dce4:	50 91 bb 0d 	lds	r21, 0x0DBB
    dce8:	21 e0       	ldi	r18, 0x01	; 1
    dcea:	6e e1       	ldi	r22, 0x1E	; 30
    dcec:	8b e1       	ldi	r24, 0x1B	; 27
    dcee:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    dcf2:	40 91 b8 0d 	lds	r20, 0x0DB8
    dcf6:	50 91 b9 0d 	lds	r21, 0x0DB9
    dcfa:	21 e0       	ldi	r18, 0x01	; 1
    dcfc:	6f e1       	ldi	r22, 0x1F	; 31
    dcfe:	8b e1       	ldi	r24, 0x1B	; 27
    dd00:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    dd04:	80 91 d3 0d 	lds	r24, 0x0DD3
    dd08:	88 23       	and	r24, r24
    dd0a:	09 f4       	brne	.+2      	; 0xdd0e <update_level+0x148>
    dd0c:	8c c0       	rjmp	.+280    	; 0xde26 <update_level+0x260>
    dd0e:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    dd12:	81 11       	cpse	r24, r1
    dd14:	6c c0       	rjmp	.+216    	; 0xddee <update_level+0x228>
    dd16:	80 91 e1 0d 	lds	r24, 0x0DE1
    dd1a:	8e 70       	andi	r24, 0x0E	; 14
    dd1c:	09 f4       	brne	.+2      	; 0xdd20 <update_level+0x15a>
    dd1e:	83 c0       	rjmp	.+262    	; 0xde26 <update_level+0x260>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    dd20:	40 e0       	ldi	r20, 0x00	; 0
    dd22:	62 ee       	ldi	r22, 0xE2	; 226
    dd24:	70 e3       	ldi	r23, 0x30	; 48
    dd26:	80 e0       	ldi	r24, 0x00	; 0
    dd28:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
		if (game.player.flags & PRONE) {
    dd2c:	80 91 e1 0d 	lds	r24, 0x0DE1
    dd30:	82 ff       	sbrs	r24, 2
    dd32:	1a c0       	rjmp	.+52     	; 0xdd68 <update_level+0x1a2>
			game.player.shared.y -= 16;
    dd34:	40 91 db 0d 	lds	r20, 0x0DDB
    dd38:	50 91 dc 0d 	lds	r21, 0x0DDC
    dd3c:	40 51       	subi	r20, 0x10	; 16
    dd3e:	51 09       	sbc	r21, r1
    dd40:	50 93 dc 0d 	sts	0x0DDC, r21
    dd44:	40 93 db 0d 	sts	0x0DDB, r20
			game.player.width = 2;
    dd48:	82 e0       	ldi	r24, 0x02	; 2
    dd4a:	80 93 e4 0d 	sts	0x0DE4, r24
			game.player.height = 3;
    dd4e:	83 e0       	ldi	r24, 0x03	; 3
    dd50:	80 93 e5 0d 	sts	0x0DE5, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    dd54:	60 91 d9 0d 	lds	r22, 0x0DD9
    dd58:	80 91 b6 0d 	lds	r24, 0x0DB6
    dd5c:	68 1b       	sub	r22, r24
    dd5e:	03 e0       	ldi	r16, 0x03	; 3
    dd60:	22 e0       	ldi	r18, 0x02	; 2
    dd62:	80 e0       	ldi	r24, 0x00	; 0
    dd64:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    dd68:	6b e0       	ldi	r22, 0x0B	; 11
    dd6a:	89 e0       	ldi	r24, 0x09	; 9
    dd6c:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
		LBRotateSprites();
    dd70:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
		map_ship();
    dd74:	0e 94 eb 59 	call	0xb3d6	; 0xb3d6 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    dd78:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    dd7a:	c0 e0       	ldi	r28, 0x00	; 0
	StopSong();
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    dd7c:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    dd7e:	81 e0       	ldi	r24, 0x01	; 1
    dd80:	90 e0       	ldi	r25, 0x00	; 0
    dd82:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    dd86:	8c 2f       	mov	r24, r28
    dd88:	90 e0       	ldi	r25, 0x00	; 0
    dd8a:	88 3a       	cpi	r24, 0xA8	; 168
    dd8c:	91 05       	cpc	r25, r1
    dd8e:	3c f0       	brlt	.+14     	; 0xdd9e <update_level+0x1d8>
			{
				clear_sprites(0, 6);
    dd90:	66 e0       	ldi	r22, 0x06	; 6
    dd92:	80 e0       	ldi	r24, 0x00	; 0
    dd94:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
				LBRotateSprites();
    dd98:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
				ship_increment = -3;
    dd9c:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    dd9e:	8d e2       	ldi	r24, 0x2D	; 45
    dda0:	9e e0       	ldi	r25, 0x0E	; 14
    dda2:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    dda6:	40 e0       	ldi	r20, 0x00	; 0
    dda8:	bc 01       	movw	r22, r24
    ddaa:	86 e0       	ldi	r24, 0x06	; 6
    ddac:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    ddb0:	02 e0       	ldi	r16, 0x02	; 2
    ddb2:	24 e0       	ldi	r18, 0x04	; 4
    ddb4:	4c 2f       	mov	r20, r28
    ddb6:	6e 2d       	mov	r22, r14
    ddb8:	86 e0       	ldi	r24, 0x06	; 6
    ddba:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <LBMoveSprite>
			ship_y += ship_increment;
    ddbe:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    ddc0:	99 f4       	brne	.+38     	; 0xdde8 <update_level+0x222>
			{
				clear_sprites(6, 8);
    ddc2:	68 e0       	ldi	r22, 0x08	; 8
    ddc4:	86 e0       	ldi	r24, 0x06	; 6
    ddc6:	0e 94 94 64 	call	0xc928	; 0xc928 <clear_sprites>
				LBRotateSprites();
    ddca:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    ddce:	64 e6       	ldi	r22, 0x64	; 100
    ddd0:	70 e0       	ldi	r23, 0x00	; 0
    ddd2:	81 ec       	ldi	r24, 0xC1	; 193
    ddd4:	93 e0       	ldi	r25, 0x03	; 3
    ddd6:	0e 94 30 6a 	call	0xd460	; 0xd460 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    ddda:	80 91 cb 0d 	lds	r24, 0x0DCB
    ddde:	00 e0       	ldi	r16, 0x00	; 0
    dde0:	23 e0       	ldi	r18, 0x03	; 3
    dde2:	4a e1       	ldi	r20, 0x1A	; 26
    dde4:	6f ef       	ldi	r22, 0xFF	; 255
    dde6:	1c c0       	rjmp	.+56     	; 0xde20 <update_level+0x25a>
				break;
			}
			LBRotateSprites();
    dde8:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
		}
    ddec:	c8 cf       	rjmp	.-112    	; 0xdd7e <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    ddee:	80 91 cb 0d 	lds	r24, 0x0DCB
    ddf2:	89 30       	cpi	r24, 0x09	; 9
    ddf4:	49 f4       	brne	.+18     	; 0xde08 <update_level+0x242>
			tally_score((char*) strLevelClear, 500);
    ddf6:	64 ef       	ldi	r22, 0xF4	; 244
    ddf8:	71 e0       	ldi	r23, 0x01	; 1
    ddfa:	81 ec       	ldi	r24, 0xC1	; 193
    ddfc:	93 e0       	ldi	r25, 0x03	; 3
    ddfe:	0e 94 30 6a 	call	0xd460	; 0xd460 <tally_score>
			congratulations();
    de02:	0e 94 c6 64 	call	0xc98c	; 0xc98c <congratulations>
    de06:	2e c0       	rjmp	.+92     	; 0xde64 <update_level+0x29e>
			exit_game();
			return 1;
		} else {
			tally_score((char*) strLevelClear, 100);
    de08:	64 e6       	ldi	r22, 0x64	; 100
    de0a:	70 e0       	ldi	r23, 0x00	; 0
    de0c:	81 ec       	ldi	r24, 0xC1	; 193
    de0e:	93 e0       	ldi	r25, 0x03	; 3
    de10:	0e 94 30 6a 	call	0xd460	; 0xd460 <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    de14:	80 91 cb 0d 	lds	r24, 0x0DCB
    de18:	07 ec       	ldi	r16, 0xC7	; 199
    de1a:	2d ef       	ldi	r18, 0xFD	; 253
    de1c:	4c e1       	ldi	r20, 0x1C	; 28
    de1e:	61 e0       	ldi	r22, 0x01	; 1
    de20:	8f 5f       	subi	r24, 0xFF	; 255
    de22:	0e 94 b9 66 	call	0xcd72	; 0xcd72 <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    de26:	80 91 cf 0d 	lds	r24, 0x0DCF
    de2a:	82 30       	cpi	r24, 0x02	; 2
    de2c:	11 f0       	breq	.+4      	; 0xde32 <update_level+0x26c>
			demo_counter = 0;
			exit_game();
			return 1;
		}
	}
	return 0;
    de2e:	80 e0       	ldi	r24, 0x00	; 0
    de30:	1c c0       	rjmp	.+56     	; 0xde6a <update_level+0x2a4>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    de32:	80 91 f7 0c 	lds	r24, 0x0CF7
    de36:	90 91 f8 0c 	lds	r25, 0x0CF8
    de3a:	01 96       	adiw	r24, 0x01	; 1
    de3c:	90 93 f8 0c 	sts	0x0CF8, r25
    de40:	80 93 f7 0c 	sts	0x0CF7, r24
		if (ReadJoypad(0) || (demo_counter >= DEMO_LENGTH))
    de44:	80 e0       	ldi	r24, 0x00	; 0
    de46:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <ReadJoypad>
    de4a:	89 2b       	or	r24, r25
    de4c:	39 f4       	brne	.+14     	; 0xde5c <update_level+0x296>
    de4e:	80 91 f7 0c 	lds	r24, 0x0CF7
    de52:	90 91 f8 0c 	lds	r25, 0x0CF8
    de56:	84 38       	cpi	r24, 0x84	; 132
    de58:	93 40       	sbci	r25, 0x03	; 3
    de5a:	48 f3       	brcs	.-46     	; 0xde2e <update_level+0x268>
		{
			demo_counter = 0;
    de5c:	10 92 f8 0c 	sts	0x0CF8, r1
    de60:	10 92 f7 0c 	sts	0x0CF7, r1
			exit_game();
    de64:	0e 94 cc 68 	call	0xd198	; 0xd198 <exit_game>
			return 1;
    de68:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
	
}
    de6a:	df 91       	pop	r29
    de6c:	cf 91       	pop	r28
    de6e:	0f 91       	pop	r16
    de70:	ff 90       	pop	r15
    de72:	ef 90       	pop	r14
    de74:	df 90       	pop	r13
    de76:	cf 90       	pop	r12
    de78:	08 95       	ret

0000de7a <update_pause>:
	}
	game.high_score_counter++;
}

void update_pause()
{
    de7a:	ef 92       	push	r14
    de7c:	ff 92       	push	r15
    de7e:	0f 93       	push	r16
    de80:	1f 93       	push	r17
    de82:	cf 93       	push	r28
    de84:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    de86:	c0 91 b5 0c 	lds	r28, 0x0CB5
	u8 y = Screen.scrollY / 8;
    de8a:	00 91 b6 0c 	lds	r16, 0x0CB6
	
	if (game.player.controls.pressed & BTN_START)
    de8e:	80 91 4d 0e 	lds	r24, 0x0E4D
    de92:	83 ff       	sbrs	r24, 3
    de94:	63 c0       	rjmp	.+198    	; 0xdf5c <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    de96:	06 95       	lsr	r16
    de98:	06 95       	lsr	r16
    de9a:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    de9c:	10 e0       	ldi	r17, 0x00	; 0
	game.high_score_counter++;
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    de9e:	c6 95       	lsr	r28
    dea0:	c6 95       	lsr	r28
    dea2:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    dea4:	d0 e0       	ldi	r29, 0x00	; 0
    dea6:	c8 01       	movw	r24, r16
    dea8:	06 96       	adiw	r24, 0x06	; 6
    deaa:	2e e1       	ldi	r18, 0x1E	; 30
    deac:	e2 2e       	mov	r14, r18
    deae:	f1 2c       	mov	r15, r1
    deb0:	b7 01       	movw	r22, r14
    deb2:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    deb6:	9e 01       	movw	r18, r28
    deb8:	28 5f       	subi	r18, 0xF8	; 248
    deba:	3f 4f       	sbci	r19, 0xFF	; 255
    debc:	44 e9       	ldi	r20, 0x94	; 148
    debe:	59 e5       	ldi	r21, 0x59	; 89
    dec0:	68 2f       	mov	r22, r24
    dec2:	82 2f       	mov	r24, r18
    dec4:	8f 71       	andi	r24, 0x1F	; 31
    dec6:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    deca:	c8 01       	movw	r24, r16
    decc:	09 96       	adiw	r24, 0x09	; 9
    dece:	b7 01       	movw	r22, r14
    ded0:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    ded4:	9e 01       	movw	r18, r28
    ded6:	23 5f       	subi	r18, 0xF3	; 243
    ded8:	3f 4f       	sbci	r19, 0xFF	; 255
    deda:	4d ec       	ldi	r20, 0xCD	; 205
    dedc:	53 e0       	ldi	r21, 0x03	; 3
    dede:	68 2f       	mov	r22, r24
    dee0:	82 2f       	mov	r24, r18
    dee2:	8f 71       	andi	r24, 0x1F	; 31
    dee4:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    dee8:	c8 01       	movw	r24, r16
    deea:	0c 96       	adiw	r24, 0x0c	; 12
    deec:	b7 01       	movw	r22, r14
    deee:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    def2:	2a 96       	adiw	r28, 0x0a	; 10
    def4:	43 ed       	ldi	r20, 0xD3	; 211
    def6:	53 e0       	ldi	r21, 0x03	; 3
    def8:	68 2f       	mov	r22, r24
    defa:	8c 2f       	mov	r24, r28
    defc:	8f 71       	andi	r24, 0x1F	; 31
    defe:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    df02:	64 e1       	ldi	r22, 0x14	; 20
    df04:	80 e0       	ldi	r24, 0x00	; 0
    df06:	0e 94 ec 65 	call	0xcbd8	; 0xcbd8 <hide_sprites>
		LBRotateSprites();
    df0a:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    df0e:	81 e0       	ldi	r24, 0x01	; 1
    df10:	90 e0       	ldi	r25, 0x00	; 0
    df12:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    df16:	60 e0       	ldi	r22, 0x00	; 0
    df18:	8d e4       	ldi	r24, 0x4D	; 77
    df1a:	9e e0       	ldi	r25, 0x0E	; 14
    df1c:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    df20:	80 91 4d 0e 	lds	r24, 0x0E4D
    df24:	90 91 4e 0e 	lds	r25, 0x0E4E
    df28:	83 ff       	sbrs	r24, 3
    df2a:	08 c0       	rjmp	.+16     	; 0xdf3c <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    df2c:	df 91       	pop	r29
    df2e:	cf 91       	pop	r28
    df30:	1f 91       	pop	r17
    df32:	0f 91       	pop	r16
    df34:	ff 90       	pop	r15
    df36:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    df38:	0c 94 00 58 	jmp	0xb000	; 0xb000 <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    df3c:	91 ff       	sbrs	r25, 1
    df3e:	e7 cf       	rjmp	.-50     	; 0xdf0e <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    df40:	60 e0       	ldi	r22, 0x00	; 0
    df42:	70 e0       	ldi	r23, 0x00	; 0
    df44:	81 eb       	ldi	r24, 0xB1	; 177
    df46:	93 e0       	ldi	r25, 0x03	; 3
    df48:	0e 94 30 6a 	call	0xd460	; 0xd460 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    df4c:	df 91       	pop	r29
    df4e:	cf 91       	pop	r28
    df50:	1f 91       	pop	r17
    df52:	0f 91       	pop	r16
    df54:	ff 90       	pop	r15
    df56:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    df58:	0c 94 cc 68 	jmp	0xd198	; 0xd198 <exit_game>
				break;
			}
		}
	}
}
    df5c:	df 91       	pop	r29
    df5e:	cf 91       	pop	r28
    df60:	1f 91       	pop	r17
    df62:	0f 91       	pop	r16
    df64:	ff 90       	pop	r15
    df66:	ef 90       	pop	r14
    df68:	08 95       	ret

0000df6a <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    df6a:	cf 92       	push	r12
    df6c:	df 92       	push	r13
    df6e:	ff 92       	push	r15
    df70:	0f 93       	push	r16
    df72:	1f 93       	push	r17
    df74:	cf 93       	push	r28
    df76:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    df78:	20 91 cb 0d 	lds	r18, 0x0DCB
    df7c:	f2 2e       	mov	r15, r18
    df7e:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    df80:	e2 eb       	ldi	r30, 0xB2	; 178
    df82:	fc e0       	ldi	r31, 0x0C	; 12
    df84:	84 81       	ldd	r24, Z+4	; 0x04
    df86:	86 95       	lsr	r24
    df88:	86 95       	lsr	r24
    df8a:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    df8c:	08 2f       	mov	r16, r24
    df8e:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    df90:	c3 81       	ldd	r28, Z+3	; 0x03
    df92:	c6 95       	lsr	r28
    df94:	c6 95       	lsr	r28
    df96:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    df98:	d0 e0       	ldi	r29, 0x00	; 0
    df9a:	c8 01       	movw	r24, r16
    df9c:	06 96       	adiw	r24, 0x06	; 6
    df9e:	2e e1       	ldi	r18, 0x1E	; 30
    dfa0:	c2 2e       	mov	r12, r18
    dfa2:	d1 2c       	mov	r13, r1
    dfa4:	b6 01       	movw	r22, r12
    dfa6:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    dfaa:	9e 01       	movw	r18, r28
    dfac:	29 5f       	subi	r18, 0xF9	; 249
    dfae:	3f 4f       	sbci	r19, 0xFF	; 255
    dfb0:	42 e3       	ldi	r20, 0x32	; 50
    dfb2:	59 e5       	ldi	r21, 0x59	; 89
    dfb4:	68 2f       	mov	r22, r24
    dfb6:	82 2f       	mov	r24, r18
    dfb8:	8f 71       	andi	r24, 0x1F	; 31
    dfba:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    dfbe:	c8 01       	movw	r24, r16
    dfc0:	09 96       	adiw	r24, 0x09	; 9
    dfc2:	b6 01       	movw	r22, r12
    dfc4:	0e 94 a0 71 	call	0xe340	; 0xe340 <__divmodhi4>
    dfc8:	be 01       	movw	r22, r28
    dfca:	68 5f       	subi	r22, 0xF8	; 248
    dfcc:	7f 4f       	sbci	r23, 0xFF	; 255
    dfce:	6f 71       	andi	r22, 0x1F	; 31
    dfd0:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    dfd2:	93 e2       	ldi	r25, 0x23	; 35
    dfd4:	f9 9e       	mul	r15, r25
    dfd6:	90 01       	movw	r18, r0
    dfd8:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    dfda:	48 2f       	mov	r20, r24
    dfdc:	c9 01       	movw	r24, r18
    dfde:	8e 5e       	subi	r24, 0xEE	; 238
    dfe0:	9e 4f       	sbci	r25, 0xFE	; 254
    dfe2:	0e 94 12 66 	call	0xcc24	; 0xcc24 <stream_text_anywhere>
	LBWaitSeconds(3);
    dfe6:	83 e0       	ldi	r24, 0x03	; 3
    dfe8:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <LBWaitSeconds>
	game.boss.active = 1;
    dfec:	81 e0       	ldi	r24, 0x01	; 1
    dfee:	80 93 61 0e 	sts	0x0E61, r24
	render_camera_view();
}
    dff2:	df 91       	pop	r29
    dff4:	cf 91       	pop	r28
    dff6:	1f 91       	pop	r17
    dff8:	0f 91       	pop	r16
    dffa:	ff 90       	pop	r15
    dffc:	df 90       	pop	r13
    dffe:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e000:	0c 94 00 58 	jmp	0xb000	; 0xb000 <render_camera_view>

0000e004 <update_player_ai>:
}

void update_player_ai(Player* player) 
{	 
    e004:	cf 93       	push	r28
    e006:	df 93       	push	r29
    e008:	fc 01       	movw	r30, r24
	if (player->ai_flags == AI_NOT_READY)
    e00a:	81 85       	ldd	r24, Z+9	; 0x09
    e00c:	81 11       	cpse	r24, r1
    e00e:	0e c0       	rjmp	.+28     	; 0xe02c <update_player_ai+0x28>
	 {
		 player->controls.held = BTN_LEFT;
    e010:	df 01       	movw	r26, r30
    e012:	a8 58       	subi	r26, 0x88	; 136
    e014:	bf 4f       	sbci	r27, 0xFF	; 255
    e016:	80 e4       	ldi	r24, 0x40	; 64
    e018:	90 e0       	ldi	r25, 0x00	; 0
    e01a:	8d 93       	st	X+, r24
    e01c:	9c 93       	st	X, r25
		 player->ai_flags = AI_READY;
    e01e:	81 e0       	ldi	r24, 0x01	; 1
    e020:	81 87       	std	Z+9, r24	; 0x09
		 game.ai_prone_counter = 0;
    e022:	10 92 d6 0d 	sts	0x0DD6, r1
		 game.ai_do_prone = 1;
    e026:	80 93 d7 0d 	sts	0x0DD7, r24
    e02a:	b9 c0       	rjmp	.+370    	; 0xe19e <update_player_ai+0x19a>
	 }
	 else if (player->ai_flags & AI_READY)
    e02c:	80 ff       	sbrs	r24, 0
    e02e:	2e c0       	rjmp	.+92     	; 0xe08c <update_player_ai+0x88>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e030:	df 01       	movw	r26, r30
    e032:	ac 58       	subi	r26, 0x8C	; 140
    e034:	bf 4f       	sbci	r27, 0xFF	; 255
    e036:	15 96       	adiw	r26, 0x05	; 5
    e038:	1c 92       	st	X, r1
    e03a:	1e 92       	st	-X, r1
    e03c:	14 97       	sbiw	r26, 0x04	; 4
	p->pressed = 0;
    e03e:	11 96       	adiw	r26, 0x01	; 1
    e040:	1c 92       	st	X, r1
    e042:	1e 92       	st	-X, r1
	p->released = 0;
    e044:	13 96       	adiw	r26, 0x03	; 3
    e046:	1c 92       	st	X, r1
    e048:	1e 92       	st	-X, r1
    e04a:	12 97       	sbiw	r26, 0x02	; 2
	p->held_cycles = 0;
    e04c:	16 96       	adiw	r26, 0x06	; 6
    e04e:	1c 92       	st	X, r1
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    e050:	80 91 b6 0d 	lds	r24, 0x0DB6
    e054:	90 91 b7 0d 	lds	r25, 0x0DB7
    e058:	23 e0       	ldi	r18, 0x03	; 3
    e05a:	96 95       	lsr	r25
    e05c:	87 95       	ror	r24
    e05e:	2a 95       	dec	r18
    e060:	e1 f7       	brne	.-8      	; 0xe05a <update_player_ai+0x56>
    e062:	4c 96       	adiw	r24, 0x1c	; 28
    e064:	20 91 c5 0d 	lds	r18, 0x0DC5
    e068:	30 e0       	ldi	r19, 0x00	; 0
    e06a:	82 17       	cp	r24, r18
    e06c:	93 07       	cpc	r25, r19
    e06e:	08 f4       	brcc	.+2      	; 0xe072 <update_player_ai+0x6e>
    e070:	96 c0       	rjmp	.+300    	; 0xe19e <update_player_ai+0x19a>
    e072:	ef 01       	movw	r28, r30
		 {
			 challenge();
    e074:	0e 94 b5 6f 	call	0xdf6a	; 0xdf6a <challenge>
			 player->ai_flags = AI_WALKING;
    e078:	82 e0       	ldi	r24, 0x02	; 2
    e07a:	89 87       	std	Y+9, r24	; 0x09
			 player->controls.held = BTN_LEFT;
    e07c:	fe 01       	movw	r30, r28
    e07e:	e8 58       	subi	r30, 0x88	; 136
    e080:	ff 4f       	sbci	r31, 0xFF	; 255
    e082:	80 e4       	ldi	r24, 0x40	; 64
    e084:	90 e0       	ldi	r25, 0x00	; 0
    e086:	91 83       	std	Z+1, r25	; 0x01
    e088:	80 83       	st	Z, r24
    e08a:	89 c0       	rjmp	.+274    	; 0xe19e <update_player_ai+0x19a>
		 }
	 }
	 else if (player->ai_flags & AI_WALKING) 
    e08c:	81 ff       	sbrs	r24, 1
    e08e:	87 c0       	rjmp	.+270    	; 0xe19e <update_player_ai+0x19a>
	 {
		 player->controls.pressed = 0;
    e090:	df 01       	movw	r26, r30
    e092:	ac 58       	subi	r26, 0x8C	; 140
    e094:	bf 4f       	sbci	r27, 0xFF	; 255
    e096:	11 96       	adiw	r26, 0x01	; 1
    e098:	1c 92       	st	X, r1
    e09a:	1e 92       	st	-X, r1
		 if (game.frame_counter % 15 == 0)
    e09c:	80 91 d0 0d 	lds	r24, 0x0DD0
    e0a0:	6f e0       	ldi	r22, 0x0F	; 15
    e0a2:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    e0a6:	91 11       	cpse	r25, r1
    e0a8:	05 c0       	rjmp	.+10     	; 0xe0b4 <update_player_ai+0xb0>
		 {
			 player->controls.pressed = BTN_B;
    e0aa:	81 e0       	ldi	r24, 0x01	; 1
    e0ac:	90 e0       	ldi	r25, 0x00	; 0
    e0ae:	11 96       	adiw	r26, 0x01	; 1
    e0b0:	9c 93       	st	X, r25
    e0b2:	8e 93       	st	-X, r24
		 }
		 if (player->shared.x >= game.camera_x+(CAMERA_WIDTH*8/2-40) && player->shared.x <= game.camera_x+(CAMERA_WIDTH*8/2+40))
    e0b4:	20 81       	ld	r18, Z
    e0b6:	31 81       	ldd	r19, Z+1	; 0x01
    e0b8:	80 91 b6 0d 	lds	r24, 0x0DB6
    e0bc:	90 91 b7 0d 	lds	r25, 0x0DB7
    e0c0:	ac 01       	movw	r20, r24
    e0c2:	48 5b       	subi	r20, 0xB8	; 184
    e0c4:	5f 4f       	sbci	r21, 0xFF	; 255
    e0c6:	24 17       	cp	r18, r20
    e0c8:	35 07       	cpc	r19, r21
    e0ca:	78 f0       	brcs	.+30     	; 0xe0ea <update_player_ai+0xe6>
    e0cc:	40 5b       	subi	r20, 0xB0	; 176
    e0ce:	5f 4f       	sbci	r21, 0xFF	; 255
    e0d0:	42 17       	cp	r20, r18
    e0d2:	53 07       	cpc	r21, r19
    e0d4:	50 f0       	brcs	.+20     	; 0xe0ea <update_player_ai+0xe6>
		 {
			 player->controls.pressed |= BTN_A;
    e0d6:	2d 91       	ld	r18, X+
    e0d8:	3c 91       	ld	r19, X
    e0da:	11 97       	sbiw	r26, 0x01	; 1
    e0dc:	31 60       	ori	r19, 0x01	; 1
    e0de:	11 96       	adiw	r26, 0x01	; 1
    e0e0:	3c 93       	st	X, r19
    e0e2:	2e 93       	st	-X, r18
			 game.ai_do_prone = 1;
    e0e4:	21 e0       	ldi	r18, 0x01	; 1
    e0e6:	20 93 d7 0d 	sts	0x0DD7, r18
		 }
		 if (player->shared.x <= game.camera_x)
    e0ea:	20 81       	ld	r18, Z
    e0ec:	31 81       	ldd	r19, Z+1	; 0x01
    e0ee:	e8 58       	subi	r30, 0x88	; 136
    e0f0:	ff 4f       	sbci	r31, 0xFF	; 255
    e0f2:	82 17       	cp	r24, r18
    e0f4:	93 07       	cpc	r25, r19
    e0f6:	18 f0       	brcs	.+6      	; 0xe0fe <update_player_ai+0xfa>
		 {
			 player->controls.held = BTN_RIGHT;
    e0f8:	40 e8       	ldi	r20, 0x80	; 128
    e0fa:	50 e0       	ldi	r21, 0x00	; 0
    e0fc:	08 c0       	rjmp	.+16     	; 0xe10e <update_player_ai+0x10a>
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    e0fe:	ac 01       	movw	r20, r24
    e100:	40 53       	subi	r20, 0x30	; 48
    e102:	5f 4f       	sbci	r21, 0xFF	; 255
    e104:	24 17       	cp	r18, r20
    e106:	35 07       	cpc	r19, r21
    e108:	20 f0       	brcs	.+8      	; 0xe112 <update_player_ai+0x10e>
		 {
			 player->controls.held = BTN_LEFT;
    e10a:	40 e4       	ldi	r20, 0x40	; 64
    e10c:	50 e0       	ldi	r21, 0x00	; 0
    e10e:	51 83       	std	Z+1, r21	; 0x01
    e110:	40 83       	st	Z, r20
		 }
		 if (player->controls.held == BTN_RIGHT && player->shared.x >= game.camera_x+3*8 && player->shared.x <=  game.camera_x+4*8 && game.ai_do_prone)
    e112:	40 81       	ld	r20, Z
    e114:	51 81       	ldd	r21, Z+1	; 0x01
    e116:	40 38       	cpi	r20, 0x80	; 128
    e118:	51 05       	cpc	r21, r1
    e11a:	89 f4       	brne	.+34     	; 0xe13e <update_player_ai+0x13a>
    e11c:	ac 01       	movw	r20, r24
    e11e:	48 5e       	subi	r20, 0xE8	; 232
    e120:	5f 4f       	sbci	r21, 0xFF	; 255
    e122:	24 17       	cp	r18, r20
    e124:	35 07       	cpc	r19, r21
    e126:	08 f1       	brcs	.+66     	; 0xe16a <update_player_ai+0x166>
    e128:	80 96       	adiw	r24, 0x20	; 32
    e12a:	82 17       	cp	r24, r18
    e12c:	93 07       	cpc	r25, r19
    e12e:	e8 f0       	brcs	.+58     	; 0xe16a <update_player_ai+0x166>
    e130:	80 91 d7 0d 	lds	r24, 0x0DD7
    e134:	88 23       	and	r24, r24
    e136:	c9 f0       	breq	.+50     	; 0xe16a <update_player_ai+0x166>
		 {
			 player->controls.held |= BTN_DOWN;
    e138:	80 ea       	ldi	r24, 0xA0	; 160
    e13a:	90 e0       	ldi	r25, 0x00	; 0
    e13c:	14 c0       	rjmp	.+40     	; 0xe166 <update_player_ai+0x162>
		 }
		 else if (player->controls.held == BTN_LEFT && player->shared.x >= game.camera_x+(CAMERA_WIDTH*8)-6*8 && player->shared.x <=  game.camera_x+(CAMERA_WIDTH*8)-5*8 && game.ai_do_prone)
    e13e:	40 34       	cpi	r20, 0x40	; 64
    e140:	51 05       	cpc	r21, r1
    e142:	99 f4       	brne	.+38     	; 0xe16a <update_player_ai+0x166>
    e144:	ac 01       	movw	r20, r24
    e146:	40 55       	subi	r20, 0x50	; 80
    e148:	5f 4f       	sbci	r21, 0xFF	; 255
    e14a:	24 17       	cp	r18, r20
    e14c:	35 07       	cpc	r19, r21
    e14e:	68 f0       	brcs	.+26     	; 0xe16a <update_player_ai+0x166>
    e150:	88 54       	subi	r24, 0x48	; 72
    e152:	9f 4f       	sbci	r25, 0xFF	; 255
    e154:	82 17       	cp	r24, r18
    e156:	93 07       	cpc	r25, r19
    e158:	40 f0       	brcs	.+16     	; 0xe16a <update_player_ai+0x166>
    e15a:	80 91 d7 0d 	lds	r24, 0x0DD7
    e15e:	88 23       	and	r24, r24
    e160:	21 f0       	breq	.+8      	; 0xe16a <update_player_ai+0x166>
		 {
			player->controls.held |= BTN_DOWN; 
    e162:	80 e6       	ldi	r24, 0x60	; 96
    e164:	90 e0       	ldi	r25, 0x00	; 0
    e166:	91 83       	std	Z+1, r25	; 0x01
    e168:	80 83       	st	Z, r24
		 }
		 if (player->controls.held & BTN_DOWN)
    e16a:	80 81       	ld	r24, Z
    e16c:	91 81       	ldd	r25, Z+1	; 0x01
    e16e:	85 ff       	sbrs	r24, 5
    e170:	16 c0       	rjmp	.+44     	; 0xe19e <update_player_ai+0x19a>
		 {
			 game.ai_prone_counter++;
    e172:	20 91 d6 0d 	lds	r18, 0x0DD6
    e176:	2f 5f       	subi	r18, 0xFF	; 255
			 if (game.ai_prone_counter >= 60)
    e178:	2c 33       	cpi	r18, 0x3C	; 60
    e17a:	18 f4       	brcc	.+6      	; 0xe182 <update_player_ai+0x17e>
		 {
			player->controls.held |= BTN_DOWN; 
		 }
		 if (player->controls.held & BTN_DOWN)
		 {
			 game.ai_prone_counter++;
    e17c:	20 93 d6 0d 	sts	0x0DD6, r18
    e180:	0e c0       	rjmp	.+28     	; 0xe19e <update_player_ai+0x19a>
			 if (game.ai_prone_counter >= 60)
			 {
				game.ai_prone_counter = 0;
    e182:	10 92 d6 0d 	sts	0x0DD6, r1
				player->controls.held ^= BTN_DOWN;
    e186:	20 e2       	ldi	r18, 0x20	; 32
    e188:	82 27       	eor	r24, r18
    e18a:	91 83       	std	Z+1, r25	; 0x01
    e18c:	80 83       	st	Z, r24
				player->controls.pressed |= BTN_UP;
    e18e:	8d 91       	ld	r24, X+
    e190:	9c 91       	ld	r25, X
    e192:	11 97       	sbiw	r26, 0x01	; 1
    e194:	80 61       	ori	r24, 0x10	; 16
    e196:	8d 93       	st	X+, r24
    e198:	9c 93       	st	X, r25
				game.ai_do_prone = 0;
    e19a:	10 92 d7 0d 	sts	0x0DD7, r1
			 }
		 }
	 }
}
    e19e:	df 91       	pop	r29
    e1a0:	cf 91       	pop	r28
    e1a2:	08 95       	ret

0000e1a4 <load_credits>:
}
#endif

void load_credits()
{
	fade_through();
    e1a4:	0e 94 b6 64 	call	0xc96c	; 0xc96c <fade_through>
	Screen.scrollX = 0;
    e1a8:	e2 eb       	ldi	r30, 0xB2	; 178
    e1aa:	fc e0       	ldi	r31, 0x0C	; 12
    e1ac:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    e1ae:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    e1b0:	80 e2       	ldi	r24, 0x20	; 32
    e1b2:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    e1b4:	10 82       	st	Z, r1
	stream_text_middle((const char*) strCredits, 5, 100);
    e1b6:	44 e6       	ldi	r20, 0x64	; 100
    e1b8:	50 e0       	ldi	r21, 0x00	; 0
    e1ba:	65 e0       	ldi	r22, 0x05	; 5
    e1bc:	8f e1       	ldi	r24, 0x1F	; 31
    e1be:	93 e0       	ldi	r25, 0x03	; 3
    e1c0:	0e 94 08 64 	call	0xc810	; 0xc810 <stream_text_middle>
	LBWaitSeconds(8);
    e1c4:	88 e0       	ldi	r24, 0x08	; 8
    e1c6:	0c 94 1d 4e 	jmp	0x9c3a	; 0x9c3a <LBWaitSeconds>

0000e1ca <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e1ca:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <GetTrueRandomSeed>
    e1ce:	0e 94 1b 40 	call	0x8036	; 0x8036 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e1d2:	81 ea       	ldi	r24, 0xA1	; 161
    e1d4:	95 e1       	ldi	r25, 0x15	; 21
    e1d6:	0e 94 f5 40 	call	0x81ea	; 0x81ea <InitMusicPlayer>
	ClearVram();
    e1da:	0e 94 22 3e 	call	0x7c44	; 0x7c44 <ClearVram>
	SetMasterVolume(0x05);
    e1de:	85 e0       	ldi	r24, 0x05	; 5
    e1e0:	0e 94 ad 44 	call	0x895a	; 0x895a <SetMasterVolume>
	SetTileTable(tiles_data);
    e1e4:	81 e1       	ldi	r24, 0x11	; 17
    e1e6:	91 e3       	ldi	r25, 0x31	; 49
    e1e8:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e1ec:	80 e2       	ldi	r24, 0x20	; 32
    e1ee:	97 e1       	ldi	r25, 0x17	; 23
    e1f0:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e1f4:	81 ed       	ldi	r24, 0xD1	; 209
    e1f6:	98 e5       	ldi	r25, 0x58	; 88
    e1f8:	90 93 89 0d 	sts	0x0D89, r25
    e1fc:	80 93 88 0d 	sts	0x0D88, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e200:	0e 94 f4 4e 	call	0x9de8	; 0x9de8 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_credits();
    e204:	0e 94 d2 70 	call	0xe1a4	; 0xe1a4 <load_credits>
	load_splash();
    e208:	0e 94 87 67 	call	0xcf0e	; 0xcf0e <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    e20c:	81 e0       	ldi	r24, 0x01	; 1
    e20e:	90 e0       	ldi	r25, 0x00	; 0
    e210:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e214:	60 e0       	ldi	r22, 0x00	; 0
    e216:	8d e4       	ldi	r24, 0x4D	; 77
    e218:	9e e0       	ldi	r25, 0x0E	; 14
    e21a:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e21e:	80 91 ca 0d 	lds	r24, 0x0DCA
    e222:	82 30       	cpi	r24, 0x02	; 2
    e224:	09 f0       	breq	.+2      	; 0xe228 <main+0x5e>
    e226:	52 c0       	rjmp	.+164    	; 0xe2cc <main+0x102>
		{
			if (update_level()) continue;
    e228:	0e 94 e3 6d 	call	0xdbc6	; 0xdbc6 <update_level>
    e22c:	81 11       	cpse	r24, r1
    e22e:	ee cf       	rjmp	.-36     	; 0xe20c <main+0x42>
			if (update_player(&game.player, PLAYER_SLOT))
    e230:	60 e0       	ldi	r22, 0x00	; 0
    e232:	89 ed       	ldi	r24, 0xD9	; 217
    e234:	9d e0       	ldi	r25, 0x0D	; 13
    e236:	0e 94 af 6b 	call	0xd75e	; 0xd75e <update_player>
    e23a:	88 23       	and	r24, r24
    e23c:	e9 f0       	breq	.+58     	; 0xe278 <main+0xae>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e23e:	66 e0       	ldi	r22, 0x06	; 6
    e240:	89 ed       	ldi	r24, 0xD9	; 217
    e242:	9d e0       	ldi	r25, 0x0D	; 13
    e244:	0e 94 9a 5a 	call	0xb534	; 0xb534 <update_shot>
				update_enemies();
    e248:	0e 94 35 61 	call	0xc26a	; 0xc26a <update_enemies>
				update_enemy_shots();
    e24c:	0e 94 a2 61 	call	0xc344	; 0xc344 <update_enemy_shots>
				animate_enemies();
    e250:	0e 94 42 62 	call	0xc484	; 0xc484 <animate_enemies>
				animate_enemy_shots();
    e254:	0e 94 5f 63 	call	0xc6be	; 0xc6be <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e258:	40 e0       	ldi	r20, 0x00	; 0
    e25a:	64 e5       	ldi	r22, 0x54	; 84
    e25c:	7e e0       	ldi	r23, 0x0E	; 14
    e25e:	89 ed       	ldi	r24, 0xD9	; 217
    e260:	9d e0       	ldi	r25, 0x0D	; 13
    e262:	0e 94 31 60 	call	0xc062	; 0xc062 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e266:	46 e0       	ldi	r20, 0x06	; 6
    e268:	64 e5       	ldi	r22, 0x54	; 84
    e26a:	7e e0       	ldi	r23, 0x0E	; 14
    e26c:	89 ed       	ldi	r24, 0xD9	; 217
    e26e:	9d e0       	ldi	r25, 0x0D	; 13
    e270:	0e 94 0e 5e 	call	0xbc1c	; 0xbc1c <animate_shot>
				update_pause();
    e274:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e278:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <is_space>
    e27c:	81 11       	cpse	r24, r1
    e27e:	2f c0       	rjmp	.+94     	; 0xe2de <main+0x114>
    e280:	80 91 b6 0d 	lds	r24, 0x0DB6
    e284:	90 91 b7 0d 	lds	r25, 0x0DB7
    e288:	88 3f       	cpi	r24, 0xF8	; 248
    e28a:	96 40       	sbci	r25, 0x06	; 6
    e28c:	40 f1       	brcs	.+80     	; 0xe2de <main+0x114>
    e28e:	69 e0       	ldi	r22, 0x09	; 9
    e290:	84 e5       	ldi	r24, 0x54	; 84
    e292:	9e e0       	ldi	r25, 0x0E	; 14
    e294:	0e 94 af 6b 	call	0xd75e	; 0xd75e <update_player>
    e298:	88 23       	and	r24, r24
    e29a:	09 f1       	breq	.+66     	; 0xe2de <main+0x114>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e29c:	6f e0       	ldi	r22, 0x0F	; 15
    e29e:	84 e5       	ldi	r24, 0x54	; 84
    e2a0:	9e e0       	ldi	r25, 0x0E	; 14
    e2a2:	0e 94 9a 5a 	call	0xb534	; 0xb534 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e2a6:	49 e0       	ldi	r20, 0x09	; 9
    e2a8:	69 ed       	ldi	r22, 0xD9	; 217
    e2aa:	7d e0       	ldi	r23, 0x0D	; 13
    e2ac:	84 e5       	ldi	r24, 0x54	; 84
    e2ae:	9e e0       	ldi	r25, 0x0E	; 14
    e2b0:	0e 94 31 60 	call	0xc062	; 0xc062 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e2b4:	4f e0       	ldi	r20, 0x0F	; 15
    e2b6:	69 ed       	ldi	r22, 0xD9	; 217
    e2b8:	7d e0       	ldi	r23, 0x0D	; 13
    e2ba:	84 e5       	ldi	r24, 0x54	; 84
    e2bc:	9e e0       	ldi	r25, 0x0E	; 14
    e2be:	0e 94 0e 5e 	call	0xbc1c	; 0xbc1c <animate_shot>
				update_player_ai(&game.boss);
    e2c2:	84 e5       	ldi	r24, 0x54	; 84
    e2c4:	9e e0       	ldi	r25, 0x0E	; 14
    e2c6:	0e 94 02 70 	call	0xe004	; 0xe004 <update_player_ai>
    e2ca:	09 c0       	rjmp	.+18     	; 0xe2de <main+0x114>
			}
		}
		else if (game.current_screen == SPLASH)
    e2cc:	81 11       	cpse	r24, r1
    e2ce:	03 c0       	rjmp	.+6      	; 0xe2d6 <main+0x10c>
		{
			update_splash();
    e2d0:	0e 94 dc 68 	call	0xd1b8	; 0xd1b8 <update_splash>
    e2d4:	04 c0       	rjmp	.+8      	; 0xe2de <main+0x114>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e2d6:	81 30       	cpi	r24, 0x01	; 1
    e2d8:	11 f4       	brne	.+4      	; 0xe2de <main+0x114>
		{
			update_high_scores();
    e2da:	0e 94 58 69 	call	0xd2b0	; 0xd2b0 <update_high_scores>
			
		}
		LBRotateSprites();
    e2de:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <LBRotateSprites>
    e2e2:	94 cf       	rjmp	.-216    	; 0xe20c <main+0x42>

0000e2e4 <__udivmodqi4>:
    e2e4:	99 1b       	sub	r25, r25
    e2e6:	79 e0       	ldi	r23, 0x09	; 9
    e2e8:	04 c0       	rjmp	.+8      	; 0xe2f2 <__udivmodqi4_ep>

0000e2ea <__udivmodqi4_loop>:
    e2ea:	99 1f       	adc	r25, r25
    e2ec:	96 17       	cp	r25, r22
    e2ee:	08 f0       	brcs	.+2      	; 0xe2f2 <__udivmodqi4_ep>
    e2f0:	96 1b       	sub	r25, r22

0000e2f2 <__udivmodqi4_ep>:
    e2f2:	88 1f       	adc	r24, r24
    e2f4:	7a 95       	dec	r23
    e2f6:	c9 f7       	brne	.-14     	; 0xe2ea <__udivmodqi4_loop>
    e2f8:	80 95       	com	r24
    e2fa:	08 95       	ret

0000e2fc <__divmodqi4>:
    e2fc:	87 fb       	bst	r24, 7
    e2fe:	08 2e       	mov	r0, r24
    e300:	06 26       	eor	r0, r22
    e302:	87 fd       	sbrc	r24, 7
    e304:	81 95       	neg	r24
    e306:	67 fd       	sbrc	r22, 7
    e308:	61 95       	neg	r22
    e30a:	0e 94 72 71 	call	0xe2e4	; 0xe2e4 <__udivmodqi4>
    e30e:	0e f4       	brtc	.+2      	; 0xe312 <__divmodqi4_1>
    e310:	91 95       	neg	r25

0000e312 <__divmodqi4_1>:
    e312:	07 fc       	sbrc	r0, 7
    e314:	81 95       	neg	r24

0000e316 <__divmodqi4_exit>:
    e316:	08 95       	ret

0000e318 <__udivmodhi4>:
    e318:	aa 1b       	sub	r26, r26
    e31a:	bb 1b       	sub	r27, r27
    e31c:	51 e1       	ldi	r21, 0x11	; 17
    e31e:	07 c0       	rjmp	.+14     	; 0xe32e <__udivmodhi4_ep>

0000e320 <__udivmodhi4_loop>:
    e320:	aa 1f       	adc	r26, r26
    e322:	bb 1f       	adc	r27, r27
    e324:	a6 17       	cp	r26, r22
    e326:	b7 07       	cpc	r27, r23
    e328:	10 f0       	brcs	.+4      	; 0xe32e <__udivmodhi4_ep>
    e32a:	a6 1b       	sub	r26, r22
    e32c:	b7 0b       	sbc	r27, r23

0000e32e <__udivmodhi4_ep>:
    e32e:	88 1f       	adc	r24, r24
    e330:	99 1f       	adc	r25, r25
    e332:	5a 95       	dec	r21
    e334:	a9 f7       	brne	.-22     	; 0xe320 <__udivmodhi4_loop>
    e336:	80 95       	com	r24
    e338:	90 95       	com	r25
    e33a:	bc 01       	movw	r22, r24
    e33c:	cd 01       	movw	r24, r26
    e33e:	08 95       	ret

0000e340 <__divmodhi4>:
    e340:	97 fb       	bst	r25, 7
    e342:	07 2e       	mov	r0, r23
    e344:	16 f4       	brtc	.+4      	; 0xe34a <__divmodhi4+0xa>
    e346:	00 94       	com	r0
    e348:	07 d0       	rcall	.+14     	; 0xe358 <__divmodhi4_neg1>
    e34a:	77 fd       	sbrc	r23, 7
    e34c:	09 d0       	rcall	.+18     	; 0xe360 <__divmodhi4_neg2>
    e34e:	0e 94 8c 71 	call	0xe318	; 0xe318 <__udivmodhi4>
    e352:	07 fc       	sbrc	r0, 7
    e354:	05 d0       	rcall	.+10     	; 0xe360 <__divmodhi4_neg2>
    e356:	3e f4       	brtc	.+14     	; 0xe366 <__divmodhi4_exit>

0000e358 <__divmodhi4_neg1>:
    e358:	90 95       	com	r25
    e35a:	81 95       	neg	r24
    e35c:	9f 4f       	sbci	r25, 0xFF	; 255
    e35e:	08 95       	ret

0000e360 <__divmodhi4_neg2>:
    e360:	70 95       	com	r23
    e362:	61 95       	neg	r22
    e364:	7f 4f       	sbci	r23, 0xFF	; 255

0000e366 <__divmodhi4_exit>:
    e366:	08 95       	ret

0000e368 <__tablejump2__>:
    e368:	ee 0f       	add	r30, r30
    e36a:	ff 1f       	adc	r31, r31
    e36c:	05 90       	lpm	r0, Z+
    e36e:	f4 91       	lpm	r31, Z
    e370:	e0 2d       	mov	r30, r0
    e372:	09 94       	ijmp

0000e374 <__subsf3>:
    e374:	50 58       	subi	r21, 0x80	; 128

0000e376 <__addsf3>:
    e376:	bb 27       	eor	r27, r27
    e378:	aa 27       	eor	r26, r26
    e37a:	0e d0       	rcall	.+28     	; 0xe398 <__addsf3x>
    e37c:	e5 c0       	rjmp	.+458    	; 0xe548 <__fp_round>
    e37e:	d6 d0       	rcall	.+428    	; 0xe52c <__fp_pscA>
    e380:	30 f0       	brcs	.+12     	; 0xe38e <__addsf3+0x18>
    e382:	db d0       	rcall	.+438    	; 0xe53a <__fp_pscB>
    e384:	20 f0       	brcs	.+8      	; 0xe38e <__addsf3+0x18>
    e386:	31 f4       	brne	.+12     	; 0xe394 <__addsf3+0x1e>
    e388:	9f 3f       	cpi	r25, 0xFF	; 255
    e38a:	11 f4       	brne	.+4      	; 0xe390 <__addsf3+0x1a>
    e38c:	1e f4       	brtc	.+6      	; 0xe394 <__addsf3+0x1e>
    e38e:	cb c0       	rjmp	.+406    	; 0xe526 <__fp_nan>
    e390:	0e f4       	brtc	.+2      	; 0xe394 <__addsf3+0x1e>
    e392:	e0 95       	com	r30
    e394:	e7 fb       	bst	r30, 7
    e396:	c1 c0       	rjmp	.+386    	; 0xe51a <__fp_inf>

0000e398 <__addsf3x>:
    e398:	e9 2f       	mov	r30, r25
    e39a:	e7 d0       	rcall	.+462    	; 0xe56a <__fp_split3>
    e39c:	80 f3       	brcs	.-32     	; 0xe37e <__addsf3+0x8>
    e39e:	ba 17       	cp	r27, r26
    e3a0:	62 07       	cpc	r22, r18
    e3a2:	73 07       	cpc	r23, r19
    e3a4:	84 07       	cpc	r24, r20
    e3a6:	95 07       	cpc	r25, r21
    e3a8:	18 f0       	brcs	.+6      	; 0xe3b0 <__addsf3x+0x18>
    e3aa:	71 f4       	brne	.+28     	; 0xe3c8 <__addsf3x+0x30>
    e3ac:	9e f5       	brtc	.+102    	; 0xe414 <__addsf3x+0x7c>
    e3ae:	ff c0       	rjmp	.+510    	; 0xe5ae <__fp_zero>
    e3b0:	0e f4       	brtc	.+2      	; 0xe3b4 <__addsf3x+0x1c>
    e3b2:	e0 95       	com	r30
    e3b4:	0b 2e       	mov	r0, r27
    e3b6:	ba 2f       	mov	r27, r26
    e3b8:	a0 2d       	mov	r26, r0
    e3ba:	0b 01       	movw	r0, r22
    e3bc:	b9 01       	movw	r22, r18
    e3be:	90 01       	movw	r18, r0
    e3c0:	0c 01       	movw	r0, r24
    e3c2:	ca 01       	movw	r24, r20
    e3c4:	a0 01       	movw	r20, r0
    e3c6:	11 24       	eor	r1, r1
    e3c8:	ff 27       	eor	r31, r31
    e3ca:	59 1b       	sub	r21, r25
    e3cc:	99 f0       	breq	.+38     	; 0xe3f4 <__addsf3x+0x5c>
    e3ce:	59 3f       	cpi	r21, 0xF9	; 249
    e3d0:	50 f4       	brcc	.+20     	; 0xe3e6 <__addsf3x+0x4e>
    e3d2:	50 3e       	cpi	r21, 0xE0	; 224
    e3d4:	68 f1       	brcs	.+90     	; 0xe430 <__addsf3x+0x98>
    e3d6:	1a 16       	cp	r1, r26
    e3d8:	f0 40       	sbci	r31, 0x00	; 0
    e3da:	a2 2f       	mov	r26, r18
    e3dc:	23 2f       	mov	r18, r19
    e3de:	34 2f       	mov	r19, r20
    e3e0:	44 27       	eor	r20, r20
    e3e2:	58 5f       	subi	r21, 0xF8	; 248
    e3e4:	f3 cf       	rjmp	.-26     	; 0xe3cc <__addsf3x+0x34>
    e3e6:	46 95       	lsr	r20
    e3e8:	37 95       	ror	r19
    e3ea:	27 95       	ror	r18
    e3ec:	a7 95       	ror	r26
    e3ee:	f0 40       	sbci	r31, 0x00	; 0
    e3f0:	53 95       	inc	r21
    e3f2:	c9 f7       	brne	.-14     	; 0xe3e6 <__addsf3x+0x4e>
    e3f4:	7e f4       	brtc	.+30     	; 0xe414 <__addsf3x+0x7c>
    e3f6:	1f 16       	cp	r1, r31
    e3f8:	ba 0b       	sbc	r27, r26
    e3fa:	62 0b       	sbc	r22, r18
    e3fc:	73 0b       	sbc	r23, r19
    e3fe:	84 0b       	sbc	r24, r20
    e400:	ba f0       	brmi	.+46     	; 0xe430 <__addsf3x+0x98>
    e402:	91 50       	subi	r25, 0x01	; 1
    e404:	a1 f0       	breq	.+40     	; 0xe42e <__addsf3x+0x96>
    e406:	ff 0f       	add	r31, r31
    e408:	bb 1f       	adc	r27, r27
    e40a:	66 1f       	adc	r22, r22
    e40c:	77 1f       	adc	r23, r23
    e40e:	88 1f       	adc	r24, r24
    e410:	c2 f7       	brpl	.-16     	; 0xe402 <__addsf3x+0x6a>
    e412:	0e c0       	rjmp	.+28     	; 0xe430 <__addsf3x+0x98>
    e414:	ba 0f       	add	r27, r26
    e416:	62 1f       	adc	r22, r18
    e418:	73 1f       	adc	r23, r19
    e41a:	84 1f       	adc	r24, r20
    e41c:	48 f4       	brcc	.+18     	; 0xe430 <__addsf3x+0x98>
    e41e:	87 95       	ror	r24
    e420:	77 95       	ror	r23
    e422:	67 95       	ror	r22
    e424:	b7 95       	ror	r27
    e426:	f7 95       	ror	r31
    e428:	9e 3f       	cpi	r25, 0xFE	; 254
    e42a:	08 f0       	brcs	.+2      	; 0xe42e <__addsf3x+0x96>
    e42c:	b3 cf       	rjmp	.-154    	; 0xe394 <__addsf3+0x1e>
    e42e:	93 95       	inc	r25
    e430:	88 0f       	add	r24, r24
    e432:	08 f0       	brcs	.+2      	; 0xe436 <__addsf3x+0x9e>
    e434:	99 27       	eor	r25, r25
    e436:	ee 0f       	add	r30, r30
    e438:	97 95       	ror	r25
    e43a:	87 95       	ror	r24
    e43c:	08 95       	ret

0000e43e <__fixsfsi>:
    e43e:	04 d0       	rcall	.+8      	; 0xe448 <__fixunssfsi>
    e440:	68 94       	set
    e442:	b1 11       	cpse	r27, r1
    e444:	b5 c0       	rjmp	.+362    	; 0xe5b0 <__fp_szero>
    e446:	08 95       	ret

0000e448 <__fixunssfsi>:
    e448:	98 d0       	rcall	.+304    	; 0xe57a <__fp_splitA>
    e44a:	88 f0       	brcs	.+34     	; 0xe46e <__fixunssfsi+0x26>
    e44c:	9f 57       	subi	r25, 0x7F	; 127
    e44e:	90 f0       	brcs	.+36     	; 0xe474 <__fixunssfsi+0x2c>
    e450:	b9 2f       	mov	r27, r25
    e452:	99 27       	eor	r25, r25
    e454:	b7 51       	subi	r27, 0x17	; 23
    e456:	a0 f0       	brcs	.+40     	; 0xe480 <__fixunssfsi+0x38>
    e458:	d1 f0       	breq	.+52     	; 0xe48e <__fixunssfsi+0x46>
    e45a:	66 0f       	add	r22, r22
    e45c:	77 1f       	adc	r23, r23
    e45e:	88 1f       	adc	r24, r24
    e460:	99 1f       	adc	r25, r25
    e462:	1a f0       	brmi	.+6      	; 0xe46a <__fixunssfsi+0x22>
    e464:	ba 95       	dec	r27
    e466:	c9 f7       	brne	.-14     	; 0xe45a <__fixunssfsi+0x12>
    e468:	12 c0       	rjmp	.+36     	; 0xe48e <__fixunssfsi+0x46>
    e46a:	b1 30       	cpi	r27, 0x01	; 1
    e46c:	81 f0       	breq	.+32     	; 0xe48e <__fixunssfsi+0x46>
    e46e:	9f d0       	rcall	.+318    	; 0xe5ae <__fp_zero>
    e470:	b1 e0       	ldi	r27, 0x01	; 1
    e472:	08 95       	ret
    e474:	9c c0       	rjmp	.+312    	; 0xe5ae <__fp_zero>
    e476:	67 2f       	mov	r22, r23
    e478:	78 2f       	mov	r23, r24
    e47a:	88 27       	eor	r24, r24
    e47c:	b8 5f       	subi	r27, 0xF8	; 248
    e47e:	39 f0       	breq	.+14     	; 0xe48e <__fixunssfsi+0x46>
    e480:	b9 3f       	cpi	r27, 0xF9	; 249
    e482:	cc f3       	brlt	.-14     	; 0xe476 <__fixunssfsi+0x2e>
    e484:	86 95       	lsr	r24
    e486:	77 95       	ror	r23
    e488:	67 95       	ror	r22
    e48a:	b3 95       	inc	r27
    e48c:	d9 f7       	brne	.-10     	; 0xe484 <__fixunssfsi+0x3c>
    e48e:	3e f4       	brtc	.+14     	; 0xe49e <__fixunssfsi+0x56>
    e490:	90 95       	com	r25
    e492:	80 95       	com	r24
    e494:	70 95       	com	r23
    e496:	61 95       	neg	r22
    e498:	7f 4f       	sbci	r23, 0xFF	; 255
    e49a:	8f 4f       	sbci	r24, 0xFF	; 255
    e49c:	9f 4f       	sbci	r25, 0xFF	; 255
    e49e:	08 95       	ret

0000e4a0 <__floatunsisf>:
    e4a0:	e8 94       	clt
    e4a2:	09 c0       	rjmp	.+18     	; 0xe4b6 <__floatsisf+0x12>

0000e4a4 <__floatsisf>:
    e4a4:	97 fb       	bst	r25, 7
    e4a6:	3e f4       	brtc	.+14     	; 0xe4b6 <__floatsisf+0x12>
    e4a8:	90 95       	com	r25
    e4aa:	80 95       	com	r24
    e4ac:	70 95       	com	r23
    e4ae:	61 95       	neg	r22
    e4b0:	7f 4f       	sbci	r23, 0xFF	; 255
    e4b2:	8f 4f       	sbci	r24, 0xFF	; 255
    e4b4:	9f 4f       	sbci	r25, 0xFF	; 255
    e4b6:	99 23       	and	r25, r25
    e4b8:	a9 f0       	breq	.+42     	; 0xe4e4 <__floatsisf+0x40>
    e4ba:	f9 2f       	mov	r31, r25
    e4bc:	96 e9       	ldi	r25, 0x96	; 150
    e4be:	bb 27       	eor	r27, r27
    e4c0:	93 95       	inc	r25
    e4c2:	f6 95       	lsr	r31
    e4c4:	87 95       	ror	r24
    e4c6:	77 95       	ror	r23
    e4c8:	67 95       	ror	r22
    e4ca:	b7 95       	ror	r27
    e4cc:	f1 11       	cpse	r31, r1
    e4ce:	f8 cf       	rjmp	.-16     	; 0xe4c0 <__floatsisf+0x1c>
    e4d0:	fa f4       	brpl	.+62     	; 0xe510 <__floatsisf+0x6c>
    e4d2:	bb 0f       	add	r27, r27
    e4d4:	11 f4       	brne	.+4      	; 0xe4da <__floatsisf+0x36>
    e4d6:	60 ff       	sbrs	r22, 0
    e4d8:	1b c0       	rjmp	.+54     	; 0xe510 <__floatsisf+0x6c>
    e4da:	6f 5f       	subi	r22, 0xFF	; 255
    e4dc:	7f 4f       	sbci	r23, 0xFF	; 255
    e4de:	8f 4f       	sbci	r24, 0xFF	; 255
    e4e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e4e2:	16 c0       	rjmp	.+44     	; 0xe510 <__floatsisf+0x6c>
    e4e4:	88 23       	and	r24, r24
    e4e6:	11 f0       	breq	.+4      	; 0xe4ec <__floatsisf+0x48>
    e4e8:	96 e9       	ldi	r25, 0x96	; 150
    e4ea:	11 c0       	rjmp	.+34     	; 0xe50e <__floatsisf+0x6a>
    e4ec:	77 23       	and	r23, r23
    e4ee:	21 f0       	breq	.+8      	; 0xe4f8 <__floatsisf+0x54>
    e4f0:	9e e8       	ldi	r25, 0x8E	; 142
    e4f2:	87 2f       	mov	r24, r23
    e4f4:	76 2f       	mov	r23, r22
    e4f6:	05 c0       	rjmp	.+10     	; 0xe502 <__floatsisf+0x5e>
    e4f8:	66 23       	and	r22, r22
    e4fa:	71 f0       	breq	.+28     	; 0xe518 <__floatsisf+0x74>
    e4fc:	96 e8       	ldi	r25, 0x86	; 134
    e4fe:	86 2f       	mov	r24, r22
    e500:	70 e0       	ldi	r23, 0x00	; 0
    e502:	60 e0       	ldi	r22, 0x00	; 0
    e504:	2a f0       	brmi	.+10     	; 0xe510 <__floatsisf+0x6c>
    e506:	9a 95       	dec	r25
    e508:	66 0f       	add	r22, r22
    e50a:	77 1f       	adc	r23, r23
    e50c:	88 1f       	adc	r24, r24
    e50e:	da f7       	brpl	.-10     	; 0xe506 <__floatsisf+0x62>
    e510:	88 0f       	add	r24, r24
    e512:	96 95       	lsr	r25
    e514:	87 95       	ror	r24
    e516:	97 f9       	bld	r25, 7
    e518:	08 95       	ret

0000e51a <__fp_inf>:
    e51a:	97 f9       	bld	r25, 7
    e51c:	9f 67       	ori	r25, 0x7F	; 127
    e51e:	80 e8       	ldi	r24, 0x80	; 128
    e520:	70 e0       	ldi	r23, 0x00	; 0
    e522:	60 e0       	ldi	r22, 0x00	; 0
    e524:	08 95       	ret

0000e526 <__fp_nan>:
    e526:	9f ef       	ldi	r25, 0xFF	; 255
    e528:	80 ec       	ldi	r24, 0xC0	; 192
    e52a:	08 95       	ret

0000e52c <__fp_pscA>:
    e52c:	00 24       	eor	r0, r0
    e52e:	0a 94       	dec	r0
    e530:	16 16       	cp	r1, r22
    e532:	17 06       	cpc	r1, r23
    e534:	18 06       	cpc	r1, r24
    e536:	09 06       	cpc	r0, r25
    e538:	08 95       	ret

0000e53a <__fp_pscB>:
    e53a:	00 24       	eor	r0, r0
    e53c:	0a 94       	dec	r0
    e53e:	12 16       	cp	r1, r18
    e540:	13 06       	cpc	r1, r19
    e542:	14 06       	cpc	r1, r20
    e544:	05 06       	cpc	r0, r21
    e546:	08 95       	ret

0000e548 <__fp_round>:
    e548:	09 2e       	mov	r0, r25
    e54a:	03 94       	inc	r0
    e54c:	00 0c       	add	r0, r0
    e54e:	11 f4       	brne	.+4      	; 0xe554 <__fp_round+0xc>
    e550:	88 23       	and	r24, r24
    e552:	52 f0       	brmi	.+20     	; 0xe568 <__fp_round+0x20>
    e554:	bb 0f       	add	r27, r27
    e556:	40 f4       	brcc	.+16     	; 0xe568 <__fp_round+0x20>
    e558:	bf 2b       	or	r27, r31
    e55a:	11 f4       	brne	.+4      	; 0xe560 <__fp_round+0x18>
    e55c:	60 ff       	sbrs	r22, 0
    e55e:	04 c0       	rjmp	.+8      	; 0xe568 <__fp_round+0x20>
    e560:	6f 5f       	subi	r22, 0xFF	; 255
    e562:	7f 4f       	sbci	r23, 0xFF	; 255
    e564:	8f 4f       	sbci	r24, 0xFF	; 255
    e566:	9f 4f       	sbci	r25, 0xFF	; 255
    e568:	08 95       	ret

0000e56a <__fp_split3>:
    e56a:	57 fd       	sbrc	r21, 7
    e56c:	90 58       	subi	r25, 0x80	; 128
    e56e:	44 0f       	add	r20, r20
    e570:	55 1f       	adc	r21, r21
    e572:	59 f0       	breq	.+22     	; 0xe58a <__fp_splitA+0x10>
    e574:	5f 3f       	cpi	r21, 0xFF	; 255
    e576:	71 f0       	breq	.+28     	; 0xe594 <__fp_splitA+0x1a>
    e578:	47 95       	ror	r20

0000e57a <__fp_splitA>:
    e57a:	88 0f       	add	r24, r24
    e57c:	97 fb       	bst	r25, 7
    e57e:	99 1f       	adc	r25, r25
    e580:	61 f0       	breq	.+24     	; 0xe59a <__fp_splitA+0x20>
    e582:	9f 3f       	cpi	r25, 0xFF	; 255
    e584:	79 f0       	breq	.+30     	; 0xe5a4 <__fp_splitA+0x2a>
    e586:	87 95       	ror	r24
    e588:	08 95       	ret
    e58a:	12 16       	cp	r1, r18
    e58c:	13 06       	cpc	r1, r19
    e58e:	14 06       	cpc	r1, r20
    e590:	55 1f       	adc	r21, r21
    e592:	f2 cf       	rjmp	.-28     	; 0xe578 <__fp_split3+0xe>
    e594:	46 95       	lsr	r20
    e596:	f1 df       	rcall	.-30     	; 0xe57a <__fp_splitA>
    e598:	08 c0       	rjmp	.+16     	; 0xe5aa <__fp_splitA+0x30>
    e59a:	16 16       	cp	r1, r22
    e59c:	17 06       	cpc	r1, r23
    e59e:	18 06       	cpc	r1, r24
    e5a0:	99 1f       	adc	r25, r25
    e5a2:	f1 cf       	rjmp	.-30     	; 0xe586 <__fp_splitA+0xc>
    e5a4:	86 95       	lsr	r24
    e5a6:	71 05       	cpc	r23, r1
    e5a8:	61 05       	cpc	r22, r1
    e5aa:	08 94       	sec
    e5ac:	08 95       	ret

0000e5ae <__fp_zero>:
    e5ae:	e8 94       	clt

0000e5b0 <__fp_szero>:
    e5b0:	bb 27       	eor	r27, r27
    e5b2:	66 27       	eor	r22, r22
    e5b4:	77 27       	eor	r23, r23
    e5b6:	cb 01       	movw	r24, r22
    e5b8:	97 f9       	bld	r25, 7
    e5ba:	08 95       	ret

0000e5bc <__mulsf3>:
    e5bc:	0b d0       	rcall	.+22     	; 0xe5d4 <__mulsf3x>
    e5be:	c4 cf       	rjmp	.-120    	; 0xe548 <__fp_round>
    e5c0:	b5 df       	rcall	.-150    	; 0xe52c <__fp_pscA>
    e5c2:	28 f0       	brcs	.+10     	; 0xe5ce <__mulsf3+0x12>
    e5c4:	ba df       	rcall	.-140    	; 0xe53a <__fp_pscB>
    e5c6:	18 f0       	brcs	.+6      	; 0xe5ce <__mulsf3+0x12>
    e5c8:	95 23       	and	r25, r21
    e5ca:	09 f0       	breq	.+2      	; 0xe5ce <__mulsf3+0x12>
    e5cc:	a6 cf       	rjmp	.-180    	; 0xe51a <__fp_inf>
    e5ce:	ab cf       	rjmp	.-170    	; 0xe526 <__fp_nan>
    e5d0:	11 24       	eor	r1, r1
    e5d2:	ee cf       	rjmp	.-36     	; 0xe5b0 <__fp_szero>

0000e5d4 <__mulsf3x>:
    e5d4:	ca df       	rcall	.-108    	; 0xe56a <__fp_split3>
    e5d6:	a0 f3       	brcs	.-24     	; 0xe5c0 <__mulsf3+0x4>

0000e5d8 <__mulsf3_pse>:
    e5d8:	95 9f       	mul	r25, r21
    e5da:	d1 f3       	breq	.-12     	; 0xe5d0 <__mulsf3+0x14>
    e5dc:	95 0f       	add	r25, r21
    e5de:	50 e0       	ldi	r21, 0x00	; 0
    e5e0:	55 1f       	adc	r21, r21
    e5e2:	62 9f       	mul	r22, r18
    e5e4:	f0 01       	movw	r30, r0
    e5e6:	72 9f       	mul	r23, r18
    e5e8:	bb 27       	eor	r27, r27
    e5ea:	f0 0d       	add	r31, r0
    e5ec:	b1 1d       	adc	r27, r1
    e5ee:	63 9f       	mul	r22, r19
    e5f0:	aa 27       	eor	r26, r26
    e5f2:	f0 0d       	add	r31, r0
    e5f4:	b1 1d       	adc	r27, r1
    e5f6:	aa 1f       	adc	r26, r26
    e5f8:	64 9f       	mul	r22, r20
    e5fa:	66 27       	eor	r22, r22
    e5fc:	b0 0d       	add	r27, r0
    e5fe:	a1 1d       	adc	r26, r1
    e600:	66 1f       	adc	r22, r22
    e602:	82 9f       	mul	r24, r18
    e604:	22 27       	eor	r18, r18
    e606:	b0 0d       	add	r27, r0
    e608:	a1 1d       	adc	r26, r1
    e60a:	62 1f       	adc	r22, r18
    e60c:	73 9f       	mul	r23, r19
    e60e:	b0 0d       	add	r27, r0
    e610:	a1 1d       	adc	r26, r1
    e612:	62 1f       	adc	r22, r18
    e614:	83 9f       	mul	r24, r19
    e616:	a0 0d       	add	r26, r0
    e618:	61 1d       	adc	r22, r1
    e61a:	22 1f       	adc	r18, r18
    e61c:	74 9f       	mul	r23, r20
    e61e:	33 27       	eor	r19, r19
    e620:	a0 0d       	add	r26, r0
    e622:	61 1d       	adc	r22, r1
    e624:	23 1f       	adc	r18, r19
    e626:	84 9f       	mul	r24, r20
    e628:	60 0d       	add	r22, r0
    e62a:	21 1d       	adc	r18, r1
    e62c:	82 2f       	mov	r24, r18
    e62e:	76 2f       	mov	r23, r22
    e630:	6a 2f       	mov	r22, r26
    e632:	11 24       	eor	r1, r1
    e634:	9f 57       	subi	r25, 0x7F	; 127
    e636:	50 40       	sbci	r21, 0x00	; 0
    e638:	8a f0       	brmi	.+34     	; 0xe65c <__mulsf3_pse+0x84>
    e63a:	e1 f0       	breq	.+56     	; 0xe674 <__mulsf3_pse+0x9c>
    e63c:	88 23       	and	r24, r24
    e63e:	4a f0       	brmi	.+18     	; 0xe652 <__mulsf3_pse+0x7a>
    e640:	ee 0f       	add	r30, r30
    e642:	ff 1f       	adc	r31, r31
    e644:	bb 1f       	adc	r27, r27
    e646:	66 1f       	adc	r22, r22
    e648:	77 1f       	adc	r23, r23
    e64a:	88 1f       	adc	r24, r24
    e64c:	91 50       	subi	r25, 0x01	; 1
    e64e:	50 40       	sbci	r21, 0x00	; 0
    e650:	a9 f7       	brne	.-22     	; 0xe63c <__mulsf3_pse+0x64>
    e652:	9e 3f       	cpi	r25, 0xFE	; 254
    e654:	51 05       	cpc	r21, r1
    e656:	70 f0       	brcs	.+28     	; 0xe674 <__mulsf3_pse+0x9c>
    e658:	60 cf       	rjmp	.-320    	; 0xe51a <__fp_inf>
    e65a:	aa cf       	rjmp	.-172    	; 0xe5b0 <__fp_szero>
    e65c:	5f 3f       	cpi	r21, 0xFF	; 255
    e65e:	ec f3       	brlt	.-6      	; 0xe65a <__mulsf3_pse+0x82>
    e660:	98 3e       	cpi	r25, 0xE8	; 232
    e662:	dc f3       	brlt	.-10     	; 0xe65a <__mulsf3_pse+0x82>
    e664:	86 95       	lsr	r24
    e666:	77 95       	ror	r23
    e668:	67 95       	ror	r22
    e66a:	b7 95       	ror	r27
    e66c:	f7 95       	ror	r31
    e66e:	e7 95       	ror	r30
    e670:	9f 5f       	subi	r25, 0xFF	; 255
    e672:	c1 f7       	brne	.-16     	; 0xe664 <__mulsf3_pse+0x8c>
    e674:	fe 2b       	or	r31, r30
    e676:	88 0f       	add	r24, r24
    e678:	91 1d       	adc	r25, r1
    e67a:	96 95       	lsr	r25
    e67c:	87 95       	ror	r24
    e67e:	97 f9       	bld	r25, 7
    e680:	08 95       	ret

0000e682 <strnlen_P>:
    e682:	fc 01       	movw	r30, r24
    e684:	05 90       	lpm	r0, Z+
    e686:	61 50       	subi	r22, 0x01	; 1
    e688:	70 40       	sbci	r23, 0x00	; 0
    e68a:	01 10       	cpse	r0, r1
    e68c:	d8 f7       	brcc	.-10     	; 0xe684 <strnlen_P+0x2>
    e68e:	80 95       	com	r24
    e690:	90 95       	com	r25
    e692:	8e 0f       	add	r24, r30
    e694:	9f 1f       	adc	r25, r31
    e696:	08 95       	ret

0000e698 <_exit>:
    e698:	f8 94       	cli

0000e69a <__stop_program>:
    e69a:	ff cf       	rjmp	.-2      	; 0xe69a <__stop_program>
