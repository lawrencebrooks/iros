
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000ee14  0000ef14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000ef40  2**5
                  CONTENTS, READONLY
  2 .text         0000ee14  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b4c  00800510  00800510  0000ef24  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000f340  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000fa48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000fd39  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000790  00000000  00000000  0000fd50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ae9f  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001654  00000000  00000000  0001b37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000028c3  00000000  00000000  0001c9d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001818  00000000  00000000  0001f298  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000020ae  00000000  00000000  00020ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000093c1  00000000  00000000  00022b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000928  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 3c 	jmp	0x787a	; 0x787a <__ctors_end>
       4:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
       8:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
       c:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      10:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      14:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      18:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      1c:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      20:	0c 94 1e 42 	jmp	0x843c	; 0x843c <__vector_8>
      24:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      28:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      2c:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      30:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      34:	0c 94 ea 3f 	jmp	0x7fd4	; 0x7fd4 <__vector_13>
      38:	0c 94 2a 40 	jmp	0x8054	; 0x8054 <__vector_14>
      3c:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      40:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      44:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      48:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      4c:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      50:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      54:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      58:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      5c:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      60:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      64:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      68:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      6c:	0c 94 a6 3c 	jmp	0x794c	; 0x794c <__bad_interrupt>
      70:	c2 65       	ori	r28, 0x52	; 82
      72:	ce 65       	ori	r28, 0x5E	; 94
      74:	da 65       	ori	r29, 0x5A	; 90
      76:	c6 65       	ori	r28, 0x56	; 86
      78:	ca 65       	ori	r28, 0x5A	; 90
      7a:	d2 65       	ori	r29, 0x52	; 82
      7c:	c6 65       	ori	r28, 0x56	; 86
      7e:	c6 65       	ori	r28, 0x56	; 86
      80:	d6 65       	ori	r29, 0x56	; 86
      82:	57 69       	ori	r21, 0x97	; 151
      84:	63 69       	ori	r22, 0x93	; 147
      86:	5a 69       	ori	r21, 0x9A	; 154
      88:	63 69       	ori	r22, 0x93	; 147
      8a:	5d 69       	ori	r21, 0x9D	; 157
      8c:	63 69       	ori	r22, 0x93	; 147
      8e:	60 69       	ori	r22, 0x90	; 144
      90:	63 69       	ori	r22, 0x93	; 147
      92:	66 69       	ori	r22, 0x96	; 150
      94:	69 69       	ori	r22, 0x99	; 153

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	27 ff       	sbrs	r18, 7
      9c:	24 ff       	sbrs	r18, 4
      9e:	2a 90       	ld	r2, -Y
      a0:	2b 1c       	adc	r2, r11
      a2:	21 0c       	add	r2, r1
      a4:	22 fb       	bst	r18, 2
      a6:	85 00       	.word	0x0085	; ????
      a8:	84 00       	.word	0x0084	; ????
      aa:	89 03       	fmulsu	r16, r17
      ac:	88 8d       	ldd	r24, Y+24	; 0x18
      ae:	81 09       	sbc	r24, r1
      b0:	6f 02       	muls	r22, r31
      b2:	44 42       	sbci	r20, 0x24	; 36
      b4:	47 00       	.word	0x0047	; ????
      b6:	45 01       	movw	r8, r10
      b8:	b0 83       	st	Z, r27
      ba:	b3 00       	.word	0x00b3	; ????
      bc:	b1 01       	movw	r22, r2
      be:	25 11       	cpse	r18, r5
      c0:	8a 4f       	sbci	r24, 0xFA	; 250
      c2:	8b 03       	fmulsu	r16, r19

000000c4 <eeprom_format_table>:
      c4:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e4 <patchCommands>:
      e4:	c7 43 ca 43 26 44 2a 44 31 44 d2 43 d7 43 dc 43     .C.C&D*D1D.C.C.C
      f4:	39 44 df 43 e2 43 e5 43 20 44 23 44 49 44           9D.C.C.C D#DID

00000102 <fader>:
     102:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000010e <map_uzeboxlogo2>:
     10e:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000011f <map_uzeboxlogo>:
     11f:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     12f:	00 0e 0f 10 11 12                                   ......

00000135 <logo_tileset>:
	...
     191:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     1a1:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     1b1:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1c1:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1d1:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1e1:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1f1:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     201:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     211:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     221:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     231:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     241:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     251:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     261:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     279:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     289:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     299:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     2a9:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2b9:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2c9:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2d9:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2e9:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2f9:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     309:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     319:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     329:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     339:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     349:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     359:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     369:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     379:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     389:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3b5:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3c5:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3d5:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3e5:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3f5:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     405:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     415:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     425:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     435:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     445:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     455:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     465:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     475:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     485:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4bd:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4cd:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4dd:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4ed:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4fd:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     50d:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     51d:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     52d:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     53d:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     54d:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     55d:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     56d:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     57d:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     58d:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     59d:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     5ad:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5bd:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5cd:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5dd:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5ed:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     611:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     621:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     631:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     641:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     651:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     661:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     671:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     681:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     691:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     6a1:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     6b1:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6c1:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6d1:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6e1:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6f9:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     709:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     719:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     729:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     739:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     749:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     759:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     769:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     779:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     789:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     799:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     7a9:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7b9:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7c9:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7d9:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7e9:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7f9:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     809:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     835:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     845:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     855:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     865:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     875:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     885:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     895:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     8a5:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8b5:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8c5:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8d5:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8e5:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8f5:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     905:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000935 <logoInitPatches>:
     935:	00 00 00 3e 09 00 00 00 00                          ...>.....

0000093e <initPatch>:
     93e:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     94e:	0a 1e 32 05 00 00 ff                                ..2....

00000955 <strChallenge>:
     955:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     965:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     975:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     985:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     995:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     9a5:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     9b5:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     9c5:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     9d5:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     9e5:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     9f5:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

00000a05 <strCongrats>:
     a05:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     a15:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     a25:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     a35:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     a45:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     a55:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     a65:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     a75:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     a85:	49 4e 45 52 53 00 00 54 41 50 20 59 4f 55 52 53     INERS..TAP YOURS
     a95:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     aa5:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     ab5:	4f 4e 45 00 23 00                                   ONE.#.

00000abb <strIntro>:
     abb:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     acb:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     adb:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     aeb:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     afb:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     b0b:	45 43 41 55 41 53 45 20 54 48 45 59 20 53 55 43     ECAUASE THEY SUC
     b1b:	4b 00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20     K..DESTROY THEM 
     b2b:	41 4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f     AND.TAKE BACK YO
     b3b:	55 52 20 53 57 41 47 00 23 00                       UR SWAG.#.

00000b45 <default_scores>:
     b45:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b55:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b63 <strTally>:
     b63:	54 41 4c 4c 59 20 00                                TALLY .

00000b6a <strGameOver>:
     b6a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b74 <strLevelBonus>:
     b74:	42 4f 4e 55 53 00                                   BONUS.

00000b7a <strLevelClear>:
     b7a:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b86 <strPaused>:
     b86:	50 41 55 53 45 00                                   PAUSE.

00000b8c <strExitGame>:
     b8c:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b98 <strMainMenu>:
     b98:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000ba4 <strTime>:
     ba4:	54 49 4d 45 20 00                                   TIME .

00000baa <strLives>:
     baa:	4c 49 56 45 53 20 00                                LIVES .

00000bb1 <strShield>:
     bb1:	53 48 49 45 4c 44 20 00                             SHIELD .

00000bb9 <strScore>:
     bb9:	53 43 4f 52 45 20 00                                SCORE .

00000bc0 <strSelectHandle>:
	...

00000bc1 <strHighScores>:
     bc1:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000bcd <str1Player>:
     bcd:	53 54 41 52 54 00                                   START.

00000bd3 <strCopyright>:
     bd3:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     be3:	4f 4f 4b 53 00                                      OOKS.

00000be8 <spacesong>:
     be8:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bf8:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     c08:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     c18:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     c28:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     c38:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c48:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c58:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c68:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c78:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c88:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c98:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     ca8:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     cb8:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     cc8:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     cd8:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ce8:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cf8:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     d08:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     d18:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     d28:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     d38:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d48:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d58:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d68:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d78:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d88:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d98:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     da8:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     db8:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     dc8:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     dd8:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     de8:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     df8:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     e08:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     e18:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     e28:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     e38:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e48:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e58:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e68:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e78:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e88:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e98:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     ea8:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     eb8:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ec8:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     ed8:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     ee8:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ef8:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     f08:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     f18:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     f28:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     f38:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f48:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f58:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f68:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f78:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f88:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f98:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     fa8:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     fb8:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     fc8:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     fd8:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fe8:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     ff8:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
    1008:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
    1018:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
    1028:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
    1038:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    1048:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    1058:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    1068:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    1078:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    1088:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    1098:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    10a8:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    10b8:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    10c8:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    10d8:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10e8:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10f8:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    1108:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    1118:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    1128:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    1138:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    1148:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    1158:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    1168:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    1178:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    1188:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    1198:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    11a8:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    11b8:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    11c8:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    11d8:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11e8:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11f8:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    1208:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1218:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1228:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1238:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1248:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1258:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1268:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1278:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001288 <planetsong>:
    1288:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1298:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    12a8:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    12b8:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    12c8:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    12d8:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12e8:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12f8:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    1308:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1318:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1328:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1338:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1348:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1358:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1368:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1378:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1388:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1398:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    13a8:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13b8:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    13c8:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    13d8:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13e8:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13f8:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1408:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1418:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1428:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1438:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1448:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1458:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1468:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1478:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1488:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1498:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    14a8:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    14b8:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    14c8:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    14d8:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14e8:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14f8:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1508:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1518:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1528:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1538:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1548:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1558:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1568:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1578:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1588:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1598:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    15a8:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    15b8:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    15c8:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    15d8:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15e8:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15f8:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1608:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1618:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1628:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1638:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1648:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1658:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1668:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1678:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1688:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1698:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    16a8:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    16b8:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    16c8:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    16d8:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16e8:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16f8:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1708:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1718:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1728:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1738:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1748:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1758:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1768:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1778:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1788:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1798:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    17a8:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    17b8:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    17c8:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    17d8:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17e8:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17f8:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1808:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1818:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1828:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1838:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1848:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1858:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1868:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1878:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1888:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1898:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    18a8:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    18b8:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    18c8:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    18d8:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18e8:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18f8:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1908:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1918:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1928:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1938:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1948:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1958:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1968:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1978:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1988:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1998:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    19a8:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    19b8:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    19c8:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    19d8:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19e8:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19f8:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1a08:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1a18:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1a28:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1a38:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a48:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a58:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a68:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a78:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a88:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a98:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1aa8:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1ab8:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1ac8:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1ad8:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1ae8:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1af8:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1b08:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1b18:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1b28:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1b38:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b48:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b58:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b68:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b78:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b88:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b98:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1ba8:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1bb8:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1bc8:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1bd8:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1be8:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bf8:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1c08:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1c18:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1c28:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1c38:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c48:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c58:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c68:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c78:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c88:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c98:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1ca8:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1cb8:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1cc8:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1cd8:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ce8:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cf8:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1d08:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1d18:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1d28:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1d38:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d48:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d58:	2f 00                                               /.

00001d5a <my_patches>:
    1d5a:	00 00 00 d1 1e 00 00 00 00 00 00 00 d1 1e 00 00     ................
    1d6a:	00 00 00 00 00 c0 1e 00 00 00 00 00 00 00 6a 1e     ..............j.
    1d7a:	00 00 00 00 00 00 00 c0 1e 00 00 00 00 00 00 00     ................
    1d8a:	99 1d 00 00 00 00 00 00 00 99 1d 00 00 00 00        ...............

00001d99 <explode>:
    1d99:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1da9:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1db9:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1dc9:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dd9:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1de9:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1df9:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1e09:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1e19:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1e29:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1e39:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e49:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e59:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e69:	ff                                                  .

00001e6a <pshoot>:
    1e6a:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e7a:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e8a:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e9a:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1eaa:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1eba:	00 01 05 00 00 ff                                   ......

00001ec0 <navigate>:
    1ec0:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1ed0:	ff                                                  .

00001ed1 <instrument>:
    1ed1:	00 02 04 00 00 dd 00 ff                             ........

00001ed9 <sprites_data>:
    1ed9:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ee9:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ef9:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1f09:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1f19:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1f29:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1f39:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f49:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f59:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f69:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f79:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f89:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f99:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1fa9:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1fb9:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1fc9:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1fd9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fe9:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1ff9:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    2009:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2019:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    2029:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    2039:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    2049:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    2059:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    2069:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    2079:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    2089:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2099:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    20a9:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    20b9:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    20c9:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20d9:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20e9:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20f9:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2109:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2119:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2129:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    2139:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    2149:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2159:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    2169:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    2179:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    2189:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    2199:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21a9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21b9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21d9:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21e9:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21f9:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2209:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2219:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2229:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2239:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2249:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2259:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2269:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2279:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2289:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2299:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    22a9:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    22b9:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    22c9:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    22d9:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22e9:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22f9:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2309:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2319:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2329:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2339:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    2349:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2359:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2369:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2379:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2389:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    2399:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23a9:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    23b9:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    23c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d9:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    23e9:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    23f9:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    2409:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    2419:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2429:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    2439:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    2449:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2459:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2469:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    2479:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    2489:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2499:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24a9:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    24b9:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    24c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24e9:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    24f9:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    2509:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2519:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2529:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2539:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2549:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2559:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2569:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2579:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2589:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2599:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25a9:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    25b9:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    25c9:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    25d9:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    25e9:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    25f9:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2609:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2619:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2629:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2639:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2649:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2659:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2669:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    2679:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    2689:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2699:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    26a9:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    26b9:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    26c9:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    26d9:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    26e9:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    26f9:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2709:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2719:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2729:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2739:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2749:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2759:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2769:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    2779:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    2789:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2799:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    27a9:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    27b9:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    27c9:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    27d9:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    27e9:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    27f9:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2809:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2819:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2829:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2839:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2849:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2859:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    2869:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    2879:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2889:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    2899:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    28a9:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    28b9:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    28c9:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28d9:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    28e9:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    28f9:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2909:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2919:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2929:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2939:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2949:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2959:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2969:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    2979:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    2989:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2999:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    29a9:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    29b9:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    29c9:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    29d9:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    29e9:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    29f9:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2a09:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a19:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2a29:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2a39:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2a49:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2a59:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a69:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2a79:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2a89:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a99:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2aa9:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2ab9:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2ac9:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2ad9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ae9:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2af9:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b19:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2b29:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2b39:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2b49:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2b59:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b69:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b79:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2b89:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2b99:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2ba9:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2bb9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bc9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bd9:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2be9:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2bf9:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2c09:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2c19:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2c29:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2c39:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2c49:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2c59:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2c69:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    2c79:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    2c89:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2c99:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2ca9:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2cb9:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2cc9:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2cd9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ce9:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2cf9:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2d09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d19:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2d29:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2d39:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2d49:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d59:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    2d69:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    2d79:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    2d89:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    2d99:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2da9:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2db9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dc9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dd9:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2de9:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2df9:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2e09:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2e19:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e29:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2e39:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2e49:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2e59:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e69:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2e79:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2e89:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2e99:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ea9:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2eb9:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2ec9:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2ed9:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ee9:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2ef9:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2f09:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2f19:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2f29:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2f39:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2f49:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2f59:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2f69:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2f79:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2f89:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2f99:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2fa9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fb9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fc9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fd9:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2fe9:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2ff9:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    3009:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    3019:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    3029:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    3039:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    3049:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3059:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    3069:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    3079:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    3089:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    3099:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30a9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30b9:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    30c9:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    30d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    30e9:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    30f9:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    3109:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    3119:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    3129:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    3139:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    3149:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    3159:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    3169:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    3179:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    3189:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    3199:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    31a9:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    31b9:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    31c9:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    31d9:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    31e9:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    31f9:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    3209:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    3219:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    3229:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    3239:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    3249:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    3259:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    3269:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    3279:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    3289:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    3299:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    32a9:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    32b9:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    32c9:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    32d9:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    32e9:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    32f9:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    3309:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    3319:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3329:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3339:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3349:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    3359:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3369:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3379:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3389:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    3399:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    33a9:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    33b9:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    33c9:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    33d9:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    33e9:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    33f9:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    3409:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3419:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3429:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3439:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    3449:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3459:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    3469:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    3479:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    3489:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    3499:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    34a9:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    34b9:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    34c9:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    34d9:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    34e9:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    34f9:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    3509:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    3519:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3529:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    3539:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    3549:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3559:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3569:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3579:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    3589:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3599:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    35a9:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    35b9:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    35c9:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35d9:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    35e9:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    35f9:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    3609:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    3619:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3629:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    3639:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    3649:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3659:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    3669:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3679:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3689:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3699:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    36a9:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    36b9:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    36c9:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    36d9:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    36e9:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    36f9:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    3709:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3719:	00 00 00 fe fe fe fe fe fe 00 00 00 fe fe fe fe     ................
    3729:	fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe fe     ................
    3739:	fe fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe     ................
    3749:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00003759 <map_hazard_desert>:
    3759:	01 01 28                                            ..(

0000375c <map_hazard_city>:
    375c:	01 01 29                                            ..)

0000375f <map_hazard_jungle>:
    375f:	01 01 27                                            ..'

00003762 <map_hazard_fire>:
    3762:	01 01 26                                            ..&

00003765 <map_hazard_ice>:
    3765:	01 01 25                                            ..%

00003768 <map_enemy_boss_shot>:
    3768:	01 01 39                                            ..9

0000376b <map_enemy_boss_eye>:
    376b:	01 01 37                                            ..7

0000376e <map_enemy_boss_turret>:
    376e:	01 01 36                                            ..6

00003771 <map_enemy_drone>:
    3771:	01 01 35                                            ..5

00003774 <map_enemy_tank>:
    3774:	01 01 24                                            ..$

00003777 <map_enemy_ball>:
    3777:	01 01 14                                            ...

0000377a <map_enemy_spider_1>:
    377a:	01 01 34                                            ..4

0000377d <map_enemy_spider_0>:
    377d:	01 01 23                                            ..#

00003780 <map_enemy_xwing>:
    3780:	01 01 3a                                            ..:

00003783 <map_enemy_shark>:
    3783:	01 01 05                                            ...

00003786 <map_enemy_shot>:
    3786:	01 01 13                                            ...

00003789 <map_ahero_jump>:
    3789:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

00003791 <map_ahero_step_3>:
    3791:	02 03 4e 4f 53 54 5b 61                             ..NOST[a

00003799 <map_ahero_step_2>:
    3799:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

000037a1 <map_ahero_step_1>:
    37a1:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

000037a9 <map_ahero_step_0>:
    37a9:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

000037b1 <map_ahero_idle>:
    37b1:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

000037b9 <map_hero_rplasma_shot>:
    37b9:	01 01 38                                            ..8

000037bc <map_hero_space_bomb>:
    37bc:	01 01 18                                            ...

000037bf <map_hero_space_shot>:
    37bf:	01 01 17                                            ...

000037c2 <map_hero_ice_shot>:
    37c2:	01 01 16                                            ...

000037c5 <map_hero_ball_shot>:
    37c5:	01 01 15                                            ...

000037c8 <map_hero_gplasma_shot>:
    37c8:	01 01 04                                            ...

000037cb <map_hero_ship_large_1>:
    37cb:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

000037d5 <map_hero_ship_large_0>:
    37d5:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

000037df <map_hero_ship_1>:
    37df:	03 01 3b 2b 2c                                      ..;+,

000037e4 <map_hero_ship_0>:
    37e4:	03 01 2a 2b 2c                                      ..*+,

000037e9 <map_hero_prone>:
    37e9:	03 01 47 48 49                                      ..GHI

000037ee <map_hero_jump>:
    37ee:	02 03 02 03 0f 12 21 22                             ......!"

000037f6 <map_hero_step_3>:
    37f6:	02 03 02 03 0f 44 45 46                             .....DEF

000037fe <map_hero_step_2>:
    37fe:	02 03 00 01 0c 11 1f 20                             ....... 

00003806 <map_hero_step_1>:
    3806:	02 03 02 03 0f 10 1d 1e                             ........

0000380e <map_hero_step_0>:
    380e:	02 03 00 01 0c 0e 1b 1c                             ........

00003816 <map_hero_idle>:
    3816:	02 03 00 01 0c 0d 19 1a                             ........

0000381e <map_emerald_4>:
    381e:	01 01 0a                                            ...

00003821 <map_emerald_3>:
    3821:	01 01 09                                            ...

00003824 <map_emerald_2>:
    3824:	01 01 08                                            ...

00003827 <map_emerald_1>:
    3827:	01 01 07                                            ...

0000382a <map_emerald_0>:
    382a:	01 01 06                                            ...

0000382d <map_explosion_2>:
    382d:	01 01 2f                                            ../

00003830 <map_explosion_1>:
    3830:	01 01 2e                                            ...

00003833 <map_explosion_0>:
    3833:	01 01 2d                                            ..-

00003836 <map_particle>:
    3836:	01 01 30                                            ..0

00003839 <map_up_arrow>:
    3839:	01 01 33                                            ..3

0000383c <map_down_arrow>:
    383c:	01 01 32                                            ..2

0000383f <map_right_arrow>:
    383f:	01 01 31                                            ..1

00003842 <map_none>:
    3842:	01 01 14                                            ...

00003845 <tiles_data>:
	...
    3885:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3895:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    38a5:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    38b5:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    38c5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    38d5:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    38e5:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    38f5:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3905:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3915:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3925:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3935:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3945:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3955:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3965:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3975:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3985:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3995:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    39a5:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    39b5:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    39c5:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    39d5:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    39e5:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    39f5:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3a05:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    3a15:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3a25:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3a35:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3a45:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3a55:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3a65:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3a75:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3a85:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3a95:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3aa5:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3ab5:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3ac5:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3ad5:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3ae5:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3af5:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    3b05:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3b15:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3b25:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3b35:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3b45:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3b55:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3b65:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3b75:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3b85:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3b95:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3ba5:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3bb5:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3bc5:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3bd5:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3be5:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3bf5:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3c05:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3c15:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3c25:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3c35:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3c45:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3c55:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3c65:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3c75:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3c85:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3c95:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3ca5:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3cb5:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3cc5:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3cd5:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3ce5:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3cf5:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3d05:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3d15:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3d25:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3d35:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3d45:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3d55:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3d65:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3d75:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3d85:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3d95:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3da5:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3db5:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3dc5:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3dd5:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3de5:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3df5:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3e05:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3e15:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3e25:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3e35:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3e45:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3e55:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3e65:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3e75:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3e85:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3e95:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3ea5:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3eb5:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3ec5:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3ed5:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    3ee5:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    3ef5:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3f05:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    3f15:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    3f25:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3f35:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3f45:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f55:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3f65:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3f75:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3f85:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f95:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3fc5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3fd5:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3fe5:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ff5:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4005:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4015:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    4025:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    4035:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    4045:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4055:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    4065:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    4075:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    409d:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    40ad:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40dd:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    40ed:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4105:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4115:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4125:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4135:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4145:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4155:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4165:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4175:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4185:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    4195:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    41a5:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    41b5:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    41c5:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    41d5:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    41e5:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    41f5:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    4205:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    4215:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    4225:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    4235:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    4245:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    4255:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    4265:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    4275:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    4285:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4295:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    42a5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    42b5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    42d1:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    42e1:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    42f1:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    4301:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    4311:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4321:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4331:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4341:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    4351:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    4361:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    4371:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    4381:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    4391:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    43a1:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    43b1:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    43c1:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    43d1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    43e1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    43f1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4401:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    4411:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    4421:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    4431:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    4441:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    4451:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    4461:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    4471:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4481:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    44ad:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    44bd:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    44cd:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    44dd:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    44ed:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    44fd:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    450d:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    451d:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    452d:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    453d:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    454d:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    455d:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    456d:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    457d:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    458d:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    459d:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    45ad:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    45bd:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    45cd:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    45dd:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    45ed:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    45fd:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    460d:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    461d:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    462d:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    463d:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    464d:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    465d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    466d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    467d:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    468d:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    469d:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    46ad:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    46c5:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    46d5:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    46e5:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    46f5:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    4705:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4715:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4725:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    474d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    475d:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    476d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    478d:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    479d:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    47ad:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    47cd:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    47dd:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    47ed:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    480d:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    481d:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    482d:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4851:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4861:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4871:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    488d:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    489d:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    48ad:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    48cd:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    48dd:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    48ed:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    490d:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    491d:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    492d:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    494d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    495d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    496d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    498d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    499d:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    49ad:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    49cd:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    49dd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    49ed:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4a0d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4a1d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4a2d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4a4d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4a5d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4a6d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4a8d:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4a9d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4aad:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4acd:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4add:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4aed:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4b0d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4b1d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4b2d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4b4d:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4b5d:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4b6d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4b8d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4b9d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4bad:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4bcd:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4bdd:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4bed:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4c11:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4c21:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4c31:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4c4d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4c5d:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4c6d:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4c8d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4c9d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4cad:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4ccd:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4cdd:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4ced:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4d0d:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4d1d:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4d2d:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4d4d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4d5d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4d6d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4d8d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4d9d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4dad:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4dcd:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4ddd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4ded:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4e0d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4e1d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4e2d:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4e4d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4e5d:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4e6d:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4e8d:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4e9d:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4ead:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4ecd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4edd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4eed:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4f0d:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4f1d:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4f2d:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4f4d:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4f5d:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4f6d:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4f8d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4f9d:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4fad:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4fcd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4fdd:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4fed:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    500d:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    501d:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    502d:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5045:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5055:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5065:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5075:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5085:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5095:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    50a5:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    50b5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    50c5:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    50d5:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    50e5:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    50f5:	af af af af af af af af af af af af af af af af     ................
    5105:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5115:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5125:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5135:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5145:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    5155:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    5165:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    5175:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    5185:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    5195:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51a5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51b5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51c5:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    51d5:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51e5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51f5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5205:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    5215:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    5225:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5235:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5245:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5255:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5265:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5275:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5285:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5295:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    52a5:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    52b5:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    52c5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52d5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52e5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52f5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5305:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5315:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5325:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5335:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5345:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5355:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5365:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5375:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5385:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    5395:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    53a5:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    53b5:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    53c5:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    53d5:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    53e5:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    53f5:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    5405:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    5415:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    5425:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5435:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    5445:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    5455:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    5465:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    5475:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5485:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    5495:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    54a5:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    54b5:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    54c5:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    54d5:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    54e5:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    54f5:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5505:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    5515:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    5525:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5535:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5545:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    5555:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5565:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5575:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5585:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    5595:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    55a5:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    55b5:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    55c5:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    55d5:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    55e5:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    55f5:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    5605:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    5615:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    5625:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    5635:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5645:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5655:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5665:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5675:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5685:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    5695:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    56a5:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    56b5:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    56c5:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    56d5:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    56e5:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    56f5:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5705:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5715:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5725:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5735:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5745:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5755:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5765:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5775:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5785:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5795:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57a5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57b5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57c5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57d5:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    57e5:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    57f5:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5805:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5815:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5825:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5835:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5845:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5855:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5865:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5875:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5885:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5895:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    58a5:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    58b5:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    58c5:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    58d5:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    58e5:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    58f5:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5905:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5915:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5925:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5935:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5945:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5955:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5965:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5975:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5985:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5995:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    59a5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    59b5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    59c5:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    59d5:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    59e5:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    59f5:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5a05:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5a15:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5a25:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5a35:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5a45:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5a55:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5a65:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5a75:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5a85:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5a95:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    5aa5:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    5ab5:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5ac5:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5ad5:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    5ae5:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5af5:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5b05:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5b15:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5b25:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5b35:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5b45:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5b55:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5b65:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5b75:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5b85:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5b95:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5ba5:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5bb5:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5bc5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5bd5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5be5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5bf5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c05:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5c1d:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5c2d:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5c3d:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c4d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c5d:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5c6d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c7d:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5c8d:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5c9d:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5cad:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5cbd:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5ccd:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5cdd:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5ced:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5cfd:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d0d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d1d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d2d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d3d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d4d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d5d:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5d6d:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5d7d:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5d8d:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5d9d:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5dad:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5dbd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dcd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5ddd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5ded:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dfd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5e0d:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5e1d:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5e2d:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5e3d:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5e4d:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5e5d:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5e6d:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5e7d:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5e8d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e9d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5ead:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5ebd:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5ecd:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5edd:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5eed:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5efd:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    5f0d:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5f1d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f2d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f3d:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5f4d:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5f5d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f6d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f7d:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5f8d:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5f9d:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5fad:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5fbd:	5c 5c 5c 5c 5c 5c 5c 5c 00 00 00 00 00 00 00 00     \\\\\\\\........
    5fcd:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5fdd:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5fed:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5ffd:	00 00 00 00 00 00 00 a4                             ........

00006005 <map_font>:
    6005:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    6015:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    6025:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

0000602c <map_atmosphere>:
    602c:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    603c:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    604c:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    605c:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00006066 <map_dialog>:
    6066:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    6076:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    6086:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    6096:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    60a6:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    60b6:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    60c6:	31 32                                               12

000060c8 <map_canvas>:
    60c8:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    60d8:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    60e8:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    6104:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    6114:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    6124:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    6140:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    6150:	32                                                  2

00006151 <map_splash>:
    6151:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    6161:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    6171:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    6181:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    6191:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

0000619e <map_tile_none>:
    619e:	01 01 00                                            ...

000061a1 <map_level_mega_tiles>:
    61a1:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    61b1:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    61c1:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    61d1:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    61e1:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    61f1:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    6201:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    6211:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    6221:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    6231:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    6241:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6251:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6261:	63 63 63 02 02 02 02 02 63 63 63 63 63 63 63 63     ccc.....cccccccc
    6271:	63 63 63 63 63 63 63 63 63 02 02 02 63 63 04 11     ccccccccc...cc..
    6281:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    6291:	02 02 02 02 02 11 11 11 11 11 63 63 63 63 63 63     ..........cccccc
    62a1:	63 63 63 63 63 63 63 63 63 02 02 63 63 63 11 04     ccccccccc..ccc..
    62b1:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    62c1:	63 63 63 63 64 63 63 63 63 65 66 67 63 63 63 63     ccccdccccefgcccc
    62d1:	63 63 63 02 02 02 63 02 04 04 04 63 04 04 04 04     ccc...c....c....
    62e1:	02 04 04 04 04 63 63 63 63 63 02 02 02 63 63 04     .....ccccc...cc.
    62f1:	04 04 02 63 04 04 04 04 02 04 04 04 04 04 63 63     ...c..........cc
    6301:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6311:	63 63 63 63 63 63 02 63 63 63 63 63 63 63 63 63     cccccc.ccccccccc
    6321:	63 63 63 63 63 63 63 63 63 63 63 02 63 63 63 02     ccccccccccc.ccc.
    6331:	63 63 63 63 63 63 63 63 63 02 63 63 63 63 04 63     ccccccccc.cccc.c
    6341:	63 63 63 63 02 63 63 63 63 63 63 63 63 63 02 02     cccc.ccccccccc..
    6351:	02 02 02 11 11 11 11 11 63 63 63 63 63 63 63 63     ........cccccccc
    6361:	63 63 63 63 63 63 63 02 02 02 02 63 11 11 11 04     ccccccc....c....
    6371:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6381:	02 02 02 02 02 04 11 11 11 04 63 63 63 63 63 63     ..........cccccc
    6391:	63 63 63 63 67 66 68 63 63 63 63 68 67 66 66 67     ccccgfhcccchgffg
    63a1:	68 63 63 63 63 69 63 63 02 02 02 02 02 63 63 63     hccccicc.....ccc
    63b1:	63 63 63 63 63 02 02 63 63 63 04 04 02 02 02 04     ccccc..ccc......
    63c1:	04 04 04 04 04 04 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    63d1:	63 63 63 63 63 63 63 63 63 02 02 02 02 02 04 63     ccccccccc......c
    63e1:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    63f1:	63 63 63 18 18 18 18 18 63 63 63 63 63 63 63 63     ccc.....cccccccc
    6401:	63 63 63 63 63 63 63 02 63 63 63 02 04 02 02 02     ccccccc.ccc.....
    6411:	04 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    6421:	02 63 63 63 63 04 02 02 02 02 63 63 63 63 02 63     .cccc.....cccc.c
    6431:	63 63 02 04 63 63 02 04 04 63 02 04 04 04 02 04     cc..cc...c......
    6441:	04 04 04 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
    6451:	04 04 04 04 04 04 04 04 04 04 04 04 02 02 02 02     ................
    6461:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    6471:	04 04 04 04 04 18 18 18 18 18 04 04 04 04 04 04     ................
    6481:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 02     ................
    6491:	02 02 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    64a1:	04 04 04 04 04 04 04 04 63 63 63 63 04 02 63 63     ........cccc..cc
    64b1:	63 04 04 02 63 63 04 04 04 02 63 04 04 04 04 02     c...cc....c.....
    64c1:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    64d1:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    64e1:	6a 6a 6a 6a 6a 6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c     jjjjjjjjkkkkklll
    64f1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6501:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c     llllllllllllmnol
    6511:	70 68 68 68 71 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     phhhqlllllllllll
    6521:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6531:	6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c     llllllll.lllllll
    6541:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6551:	6c 6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llll.lllllllllll
    6561:	6c 6c 6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c     lllll.....llllll
    6571:	6c 6c 6c 05 6c 6c 6c 05 05 6c 6c 05 05 05 6c 05     lll.lll..ll...l.
    6581:	05 05 05 05 05 05 05 05 05 13 13 13 13 05 05 13     ................
    6591:	13 13 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    65a1:	05 13 13 13 05 05 13 13 05 05 05 05 05 05 05 05     ................
    65b1:	05 05 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c 05     ..........lllll.
    65c1:	6c 6c 6c 6c 05 05 6c 6c 6c 05 05 05 6c 6c 05 05     llll..lll...ll..
    65d1:	05 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ..llllllllllllll
    65e1:	6c 6c 6c 6c 6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c     lllllll.....llll
    65f1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c     lllllllllll..lll
    6601:	05 05 13 13 13 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     .....lllllllllll
    6611:	6c 6c 6c 6c 6c 6c 6c 6c 6c 13 13 13 13 13 6c 6c     lllllllll.....ll
    6621:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c     lllllllllllll..l
    6631:	6c 6c 05 05 06 06 06 06 06 06 06 06 6c 6c 6c 6c     ll..........llll
    6641:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 06 06 06     lllllllllll.....
    6651:	6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 06     llll.lll..ll....
    6661:	06 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6671:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6681:	05 05 05 05 05 05 06 05 05 05 05 05 05 05 05 05     ................
    6691:	05 05 05 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c     ...........lllll
    66a1:	06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05     .llll..lll...ll.
    66b1:	05 05 13 13 6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c     ....llll.lll..ll
    66c1:	06 05 05 6c 06 05 05 05 06 05 05 05 05 6c 6c 6c     ...l.........lll
    66d1:	6c 6c 06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c     ll.llll..lll...l
    66e1:	6c 05 05 05 05 05 6c 6c 6c 6c 06 6c 6c 6c 06 05     l.....llll.lll..
    66f1:	6c 6c 06 05 05 6c 06 05 05 05 05 05 05 05 05 6c     ll...l.........l
    6701:	6c 6c 6c 6c 06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05     llll.llll..lll..
    6711:	06 6c 6c 05 05 05 06 06 72 73 74 74 73 74 73 74     .ll.....rsttstst
    6721:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    6731:	73 74 73 74 74 73 74 73 74 74 73 74 73 74 74 73     ststtststtststts
    6741:	74 73 74 74 73 74 73 74 74 73 74 73 74 74 75 74     tsttststtststtut
    6751:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 74 73     sttststtststtsts
    6761:	74 74 73 76 73 74 74 73 78 78 78 78 78 78 78 78     ttsvsttsxxxxxxxx
    6771:	78 78 78 78 78 78 78 78 78 78 78 78 74 73 74 74     xxxxxxxxxxxxtstt
    6781:	73 79 7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a     syzyyz{|{{|yzyyz
    6791:	7b 7c 7b 7b 7c 74 73 74 74 77 78 78 78 78 78 78     {|{{|tsttwxxxxxx
    67a1:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    67b1:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    67c1:	78 78 78 78 78 78 78 79 7a 79 79 7a 7b 7c 7b 7b     xxxxxxxyzyyz{|{{
    67d1:	7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a     |yzyyz{|{{|yzyyz
    67e1:	0d 0e 0e 0d 0e 78 78 12 78 78 78 78 78 78 78 78     .....xx.xxxxxxxx
    67f1:	78 78 78 78 78 78 78 78 78 7b 7c 7b 7b 7c 79 7a     xxxxxxxxx{|{{|yz
    6801:	79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b     yyz{|{{|yzyyz{|{
    6811:	7b 7c 78 78 78 78 78 78 78 78 78 78 78 78 78 78     {|xxxxxxxxxxxxxx
    6821:	78 78 78 78 78 78 07 07 07 07 07 79 7a 79 79 7a     xxxxxx.....yzyyz
    6831:	7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 07     {|{{|yzyyz{|{{|.
    6841:	07 07 07 07 0d 0e 0e 0d 0e 78 78 78 78 78 78 78     .........xxxxxxx
    6851:	78 78 78 78 78 78 78 78 07 07 07 07 07 78 78 78     xxxxxxxx.....xxx
    6861:	78 78 78 07 07 07 07 78 05 05 05 05 07 05 05 05     xxx....x........
    6871:	05 05 05 05 05 05 78 78 78 78 78 07 07 07 07 78     ......xxxxx....x
    6881:	05 05 05 05 78 05 05 05 05 07 05 05 05 05 05 78     ....x..........x
    6891:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 07 78     xxxxxxxxxxxxxx.x
    68a1:	78 78 78 05 14 14 14 14 78 78 78 78 78 78 78 78     xxx.....xxxxxxxx
    68b1:	78 78 78 78 78 78 78 78 78 78 78 07 14 14 14 14     xxxxxxxxxxx.....
    68c1:	05 0d 0e 0e 0d 0e 78 78 78 78 78 78 78 78 78 78     ......xxxxxxxxxx
    68d1:	07 78 78 78 78 05 14 14 14 14 7d 7d 7d 7d 7d 7d     .xxxx.....}}}}}}
    68e1:	7d 7d 7d 7d 7d 0f 81 7d 0f 85 85 85 85 85 85 85     }}}}}..}........
    68f1:	85 85 85 7d 7d 7d 7d 7d 7d 7d 7d 7e 7f 81 7d 0f     ...}}}}}}}}~..}.
    6901:	82 83 85 85 85 86 87 85 85 85 89 8a 7d 7d 7d 7d     ............}}}}
    6911:	7d 80 7d 7d 7d 7d 84 81 7d 0f 81 88 85 85 85 85     }.}}}}..}.......
    6921:	84 85 85 85 85 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 81     .....}}}}}}}}}}.
    6931:	7d 0f 81 7d 85 85 85 85 85 85 85 85 85 85 85 85     }..}............
    6941:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6951:	85 85 85 85 85 85 85 85 85 85 86 87 85 85 85 89     ................
    6961:	8a 85 85 85 86 87 85 85 85 89 8a 85 85 85 86 87     ................
    6971:	88 85 85 85 85 84 85 85 85 85 88 85 85 85 85 84     ................
    6981:	85 85 85 85 88 85 85 85 85 85 85 85 85 85 85 85     ................
    6991:	85 85 85 85 85 85 85 8b 85 85 85 8b 60 85 85 8b     ............`...
    69a1:	60 60 85 85 85 89 8a 85 85 85 86 87 85 85 85 89     ``..............
    69b1:	8a 85 85 85 86 87 85 85 85 89 8a 84 85 85 85 85     ................
    69c1:	88 85 85 85 85 84 85 85 85 85 88 85 85 85 85 84     ................
    69d1:	85 85 85 85 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    69e1:	8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 85     ................
    69f1:	86 87 85 8d 85 89 8a 8d 8e 85 85 8f 90 90 90 90     ................
    6a01:	90 90 90 90 90 90 88 85 85 85 85 84 85 85 85 85     ................
    6a11:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6a21:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c     ................
    6a31:	8c 8c 8c 85 8c 8c 8c 8c 85 85 85 85 85 85 85 85     ................
    6a41:	85 85 85 85 85 85 85 85 85 90 90 90 85 85 90 90     ................
    6a51:	90 85 09 09 09 09 85 8d 85 89 8a 8d 8e 85 85 8f     ................
    6a61:	90 90 90 90 90 90 90 90 90 90 09 85 85 85 85 84     ................
    6a71:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6a81:	85 85 85 85 85 85 85 85 85 8c 8c 8c 8c 85 8c 8c     ................
    6a91:	8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 85 8c 8c     ................
    6aa1:	8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 60 60 60     .............```
    6ab1:	09 09 09 09 09 90 90 90 90 90 90 90 90 90 90 90     ................
    6ac1:	90 90 90 90 90 90 90 90 90 09 09 09 09 09 85 85     ................
    6ad1:	85 85 85 85 8c 8c 85 85 85 8c 8c 90 85 85 60 60     ..............``
    6ae1:	90 85 09 09 09 09 09 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    6af1:	8c 85 8c 8c 8c 8c 85 60 60 60 60 09 09 09 09 09     .......````.....
    6b01:	85 85 90 90 90 85 85 90 90 90 85 85 90 90 90 85     ................
    6b11:	85 90 90 90 09 09 09 09 09 85 09 09 09 09 85 85     ................
    6b21:	8c 8c 8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09     ..........```...
    6b31:	09 09 09 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6b41:	90 90 90 90 90 90 09 09 09 09 09 85 09 09 09 09     ................
    6b51:	85 8c 8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09     ...........``...
    6b61:	09 09 09 09 09 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c     ................
    6b71:	8c 8c 8c 85 60 60 60 60 09 09 09 09 09 85 85 90     ....````........
    6b81:	90 90 85 85 90 90 90 85 85 90 90 90 85 09 90 90     ................
    6b91:	90 09 08 15 15 15 85 85 8c 8c 8c 85 85 8c 8c 8c     ................
    6ba1:	85 85 8c 8c 8c 85 85 09 60 60 15 15 08 09 09 90     ........``......
    6bb1:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6bc1:	90 09 90 09 09 09 08 15 85 85 85 85 85 85 85 85     ................
    6bd1:	85 85 85 85 85 85 85 85 85 85 85 09 15 15 15 15     ................
    6be1:	08 90 90 90 90 90 90 90 90 90 09 90 90 90 09 08     ................
    6bf1:	90 90 09 08 08 09 09 08 08 08 85 8c 8c 8c 8c 85     ................
    6c01:	8c 8c 8c 8c 15 15 15 15 15 08 08 08 08 08 08 08     ................
    6c11:	08 08 08 85 8c 8c 8c 8c 85 09 09 8c 8c 15 08 08     ................
    6c21:	15 15 08 08 08 08 08 08 08 08 08 08 85 85 90 90     ................
    6c31:	90 85 85 09 09 90 15 15 08 08 15 08 08 08 08 08     ................
    6c41:	08 08 08 08 08 85 85 8c 8c 8c 85 85 09 09 09 15     ................
    6c51:	15 08 08 08 08 08 08 08 08 08 08 08 08 08 90 90     ................
    6c61:	90 90 90 90 90 90 90 90 09 90 90 90 90 08 09 90     ................
    6c71:	90 90 08 08 09 09 09 91 91 91 91 91 91 91 91 91     ................
    6c81:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6c91:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 92     ................
    6ca1:	92 92 92 92 93 93 93 93 93 91 91 91 91 91 91 91     ................
    6cb1:	91 91 91 91 91 91 91 91 92 92 92 92 92 93 93 94     ................
    6cc1:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6cd1:	93 93 93 93 93 93 93 93 93 93 93 93 95 96 97 93     ................
    6ce1:	95 96 96 96 97 93 93 93 93 93 93 93 93 93 93 93     ................
    6cf1:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d01:	93 93 93 93 93 93 93 93 93 93 94 93 93 93 93 93     ................
    6d11:	93 93 93 93 94 93 93 93 95 96 97 93 95 96 96 96     ................
    6d21:	97 93 93 93 93 93 93 98 99 9a 93 95 9b 10 9c 97     ................
    6d31:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d41:	93 93 93 93 93 93 94 93 93 93 98 99 9a 93 95 9b     ................
    6d51:	10 9c 97 93 93 93 93 93 93 93 93 93 93 0a 0a 0a     ................
    6d61:	0a 0a 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d71:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d81:	93 93 93 93 93 93 93 93 0a 0a 93 93 93 93 93 93     ................
    6d91:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    6da1:	0a 9d 0a 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6db1:	93 93 93 93 93 93 93 0a 0a 0a 0a 0a 0a 0a 0a 0a     ................
    6dc1:	0a 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6dd1:	0a 0a 0a 0a 0a 93 93 93 0a 0a 93 93 0a 0b 0b 93     ................
    6de1:	0a 0b 0b 0b 0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a     ................
    6df1:	0a 0a 0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6e01:	0b 0b 0b 0b 0b 0b 0b 9d 0a 0a 93 93 0b 0b 0b 0a     ................
    6e11:	93 0b 0b 0b 0b 0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6e21:	93 93 93 0a 16 93 93 93 93 93 93 93 93 93 93 0a     ................
    6e31:	93 93 93 93 0b 0a 0a 0a 0a 16 16 16 16 0a 93 93     ................
    6e41:	93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a 0a     ................
    6e51:	0a 0a 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6e61:	93 93 93 93 93 0a 0a 0a 0a 0a 0b 93 93 93 93 93     ................
    6e71:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 17     ................
    6e81:	17 17 17 17 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6e91:	93 93 93 0a 0a 93 93 93 0b 0b 17 17 17 93 93 93     ................
    6ea1:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    6eb1:	93 17 17 0b 0b 17 93 93 93 93 93 93 93 93 93 93     ................
    6ec1:	93 93 93 93 93 93 93 93 93 0a 17 17 17 17 0b 93     ................
    6ed1:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 93     ................
    6ee1:	93 93 93 0b 17 17 17 17 93 93 93 93 93 93 93 93     ................
    6ef1:	93 93 93 93 93 93 93 93 0a 93 93 93 17 0b 0a 0a     ................
    6f01:	0a 0a 0a 0a 9d 0a 0a 16 16 16 0a 93 93 93 93 93     ................
    6f11:	93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93 93 93 93     ................
    6f21:	93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 0a     ................
    6f31:	0a 0a 0a 00 21 00 00 00 00 00 00 00 00 00 00 00     ....!...........
    6f41:	00 00 00 21 00 00 00 00 00 00 00 00 00 00 00 00     ...!............
    6f51:	00 00 00 00 00 22 00 21 00 00 00 00 00 00 00 00     .....".!........
    6f61:	00 00 00 00 21 00 00 00 00 00 00 00 22 00 00 00     ....!......."...
    6f71:	21 00 00 00 00 00 00 00 00 00 00 00 22 00 22 00     !...........".".
	...
    6f89:	00 21 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .!..............
    6f99:	21 19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21     !..............!
	...
    6fb1:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
	...
    6fc9:	21 19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a     !...............
    6fd9:	00 21 00 00 00 00 00 00 00 00 19 19 9e 9e 9e 19     .!..............
    6fe9:	19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00     ................
    6ff9:	00 00 21 9e 9e 9e 9e 9e 19 19 19 19 19 1a 1a 1a     ..!.............
    7009:	1a 1a 00 21 00 00 00 00 00 00 00 00 9e 9e 19 19     ...!............
    7019:	19 19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00     ................
    7029:	00 00 00 00 21 19 19 19 19 19 19 19 19 19 19 1a     ....!...........
    7039:	1a 1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00 00     ................
    7049:	00 00 00 00 00 22 00 00 00 21 00 00 00 00 00 00     ....."...!......
    7059:	1a 1a 00 00 00 22 00 22 00 00 00 00 00 00 00 00     ....."."........
    7069:	00 00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00 1b     ..!.............
    7079:	19 19 00 00 00 19 19 22 00 00 19 19 00 00 00 1a     ......."........
    7089:	1a 1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00 00     ......."........
    7099:	1b 1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00 00     ....!...........
    70a9:	1b 1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    70b9:	1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00 00     ................
    70c9:	00 00 22 1a 1a 00 21 00 00 00 00 00 00 00 00 00     .."...!.........
    70d9:	00 00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00 21     .."."..........!
	...
    70f5:	00 1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00     ................
    7105:	19 19 00 00 00 19 19 00 22 00 00 21 00 00 00 00     ........"..!....
    7115:	00 00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00     ..........!.....
    7125:	19 19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a     ............"...
    7135:	1a 1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00     .............!..
    7145:	00 00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19     ................
    7155:	19 19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a     ................
    7165:	1a 1a 1a 1a 19 19 19 19 19 19 19 19 19 19           ..............

00007173 <map_level_space_final>:
    7173:	33 05 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     3...............
    7183:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7193:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8f 90 91 90     ................
    71a3:	91 92 93 94 95 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    71b3:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    71c3:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    71d3:	8e 8d 8e 8d 8e 96 97 98 8b 8c 8b 8c 8b 8c 8b 8c     ................
    71e3:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    71f3:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7203:	8b 8c 8b 8c 8b 8c 8b 8c 8b 99 9a 8d 8e 8d 8e 8d     ................
    7213:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    7223:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    7233:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 9b 9c 9d 8b 8c     ................
    7243:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7253:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7263:	8b 8c 8b 8c 8b 8c 8b 8c 9e 9f a0 9f a0 9f a0 9f     ................
    7273:	a1                                                  .

00007274 <map_level_space>:
    7274:	33 05 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     3...............
    7284:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7294:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    72a4:	8b 8c 8b 8c 8b 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    72b4:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    72c4:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    72d4:	8e 8d 8e 8d 8e 8d 8e 8d 8b 8c 8b 8c 8b 8c 8b 8c     ................
    72e4:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    72f4:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7304:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8d 8e 8d 8e 8d     ................
    7314:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    7324:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d     ................
    7334:	8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8e 8d 8b 8c     ................
    7344:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7354:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7364:	8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c 8b 8c     ................
    7374:	8b                                                  .

00007375 <map_level_desert>:
    7375:	33 05 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f     3.oooooooooooooo
    7385:	6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f     oooooooooooooooo
    7395:	6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f     oooooooooooooooo
    73a5:	6f 6f 6f 6f 6f 70 71 70 70 70 71 70 70 70 71 70     ooooopqpppqpppqp
    73b5:	70 70 71 70 70 70 70 70 70 70 71 70 70 70 71 70     ppqpppppppqpppqp
    73c5:	70 70 71 70 70 70 71 70 70 70 70 70 70 70 70 70     ppqpppqppppppppp
    73d5:	70 70 70 70 70 70 70 70 72 73 72 74 72 73 72 75     pppppppprsrtrsru
    73e5:	72 76 72 74 72 76 72 75 72 77 72 74 72 76 72 75     rvrtrvrurwrtrvru
    73f5:	72 76 72 74 72 76 72 75 72 76 72 74 72 74 72 75     rvrtrvrurvrtrtru
    7405:	72 77 72 74 72 74 72 75 72 75 72 72 72 72 73 72     rwrtrtrururrrrsr
    7415:	78 72 72 72 72 72 73 79 7a 72 72 72 72 72 73 72     xrrrrrsyzrrrrrsr
    7425:	72 72 72 72 72 72 73 72 72 72 72 72 72 72 73 72     rrrrrrsrrrrrrrsr
    7435:	76 72 72 72 72 72 73 72 73 72 72 72 72 72 7b 7b     vrrrrrsrsrrrrr{{
    7445:	7b 7b 7c 7b 7c 7b 7d 7e 7e 7f 80 81 7b 7b 82 83     {{|{|{}~~...{{..
    7455:	84 85 86 87 88 7b 7c 7b 7c 7b 89 7b 7b 7b 7d 7e     .....{|{|{.{{{}~
    7465:	7e 7f 8a 7b 7b 7b 7b 87 88 7b 7b 7b 7b 7b 7b 7b     ~..{{{{..{{{{{{{
    7475:	7b                                                  {

00007476 <map_level_city>:
    7476:	33 05 4a 4b 4c 4a 4d 4a 4b 4c 4a 4d 4a 4b 4c 4a     3.JKLJMJKLJMJKLJ
    7486:	4d 4a 4b 4c 4a 4d 4a 4b 4c 4a 4d 4a 4b 4c 4a 4d     MJKLJMJKLJMJKLJM
    7496:	4a 4b 4c 4a 4d 4a 4b 4c 4a 4d 4a 4b 4c 4a 4d 4a     JKLJMJKLJMJKLJMJ
    74a6:	4b 4c 4a 4d 4a 4e 4f 50 4e 4e 4e 4f 50 4e 4e 4e     KLJMJNOPNNNOPNNN
    74b6:	4f 50 4e 4e 4e 4f 50 4e 4e 4e 4f 50 4e 4e 4e 4f     OPNNNOPNNNOPNNNO
    74c6:	50 4e 4e 4e 4f 50 4e 4e 4e 4f 50 4e 4e 4e 4f 50     PNNNOPNNNOPNNNOP
    74d6:	4e 4e 4e 4f 50 4e 4e 4e 51 52 53 4e 4e 51 52 53     NNNOPNNNQRSNNQRS
    74e6:	4e 4e 51 52 53 4e 4e 51 52 53 4e 4e 51 52 53 4e     NNQRSNNQRSNNQRSN
    74f6:	4e 51 52 53 4e 4e 51 52 53 4e 4e 51 52 53 4e 4e     NQRSNNQRSNNQRSNN
    7506:	51 52 53 4e 4e 51 52 53 4e 4e 51 54 55 56 57 58     QRSNNQRSNNQTUVWX
    7516:	54 59 5a 57 58 54 55 56 57 58 54 59 5a 57 58 54     TYZWXTUVWXTYZWXT
    7526:	55 56 5b 58 54 55 56 57 58 54 55 56 57 58 54 55     UV[XTUVWXTUVWXTU
    7536:	56 57 58 54 59 5a 57 58 54 55 56 57 58 54 5c 5d     VWXTYZWXTUVWXT\]
    7546:	5e 5f 60 61 62 63 64 65 66 67 68 5f 60 61 62 63     ^_`abcdefgh_`abc
    7556:	64 60 5c 69 6a 6b 6c 6d 6e 5e 5f 60 5c 69 6a 6b     d`\ijklmn^_`\ijk
    7566:	6c 6d 6e 5e 5f 60 61 62 63 64 60 5c 5d 5e 5f 60     lmn^_`abcd`\]^_`
    7576:	5c                                                  \

00007577 <map_level_forest>:
    7577:	33 05 38 39 3a 38 39 3a 38 39 3a 38 39 3a 38 39     3.89:89:89:89:89
    7587:	3a 38 39 3a 38 39 3a 38 39 3a 38 39 3a 38 39 3a     :89:89:89:89:89:
    7597:	38 39 3a 38 39 3a 38 39 3a 38 39 3a 38 39 3a 38     89:89:89:89:89:8
    75a7:	39 3a 38 39 3a 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     9:89:;<=;<=;<=;<
    75b7:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    75c7:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    75d7:	3c 3d 3b 3c 3d 3b 3c 3d 3e 3f 3e 3e 3f 3e 3e 3f     <=;<=;<=>?>>?>>?
    75e7:	3e 3e 3f 3e 3e 3f 3e 3e 3f 40 3e 3f 3e 3e 3f 3e     >>?>>?>>?@>?>>?>
    75f7:	3e 3f 3e 3e 3f 3e 3e 3f 3e 3e 3f 40 3e 3f 40 3e     >?>>?>>?>>?@>?@>
    7607:	3f 3e 3e 3f 3e 3e 3f 3e 3e 3f 3e 3e 41 3e 3e 41     ?>>?>>?>>?>>A>>A
    7617:	3e 3e 41 40 3e 41 40 3e 41 3e 40 41 3e 3e 41 3e     >>A@>A@>A>@A>>A>
    7627:	3e 41 3e 3e 41 3e 3e 41 3e 3e 41 3e 3e 41 3e 3e     >A>>A>>A>>A>>A>>
    7637:	41 3e 3e 41 3e 3e 41 40 3e 41 3e 3e 41 3e 42 43     A>>A>>A@>A>>A>BC
    7647:	42 42 43 42 44 43 42 44 43 42 44 43 42 42 43 45     BBCBDCBDCBDCBBCE
    7657:	46 43 45 46 43 45 46 43 47 48 43 49 48 43 44 42     FCEFCEFCGHCIHCDB
    7667:	43 47 48 43 47 48 43 47 48 43 42 42 43 42 42 43     CGHCGHCGHCBBCBBC
    7677:	42                                                  B

00007678 <map_level_fire>:
    7678:	33 05 20 20 20 20 20 20 20 20 20 20 20 20 20 20     3.              
    7688:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    7698:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    76a8:	20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 21          !!!!!!!!!!!
    76b8:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    76c8:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    76d8:	21 21 21 21 21 21 21 21 22 23 22 22 22 22 23 22     !!!!!!!!"#""""#"
    76e8:	22 22 22 23 22 22 22 22 22 22 22 23 22 22 22 22     """#"""""""#""""
    76f8:	22 22 22 22 22 24 25 23 22 22 22 22 23 22 22 22     """""$%#""""#"""
    7708:	22 22 22 22 22 22 22 23 22 22 22 22 22 22 22 22     """""""#""""""""
    7718:	22 22 22 22 22 22 22 22 22 22 22 22 26 22 22 22     """"""""""""&"""
    7728:	22 22 22 22 22 22 22 27 28 29 2a 22 22 22 22 22     """""""'()*"""""
    7738:	22 24 25 22 22 24 25 22 22 22 22 22 22 22 2b 2b     "$%""$%"""""""++
    7748:	2c 2d 2c 2d 2c 2d 2c 2d 2e 2b 2f 2b 2b 2f 2b 2b     ,-,-,-,-.+/++/++
    7758:	2b 2f 2b 2b 2b 2c 2d 2c 2d 30 31 31 31 32 33 2d     +/+++,-,-011123-
    7768:	2c 2d 2e 34 28 29 35 36 28 29 37 2b 2b 2b 2b 2b     ,-.4()56()7+++++
    7778:	2b                                                  +

00007779 <map_level_ice>:
    7779:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    7789:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    7799:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    77a9:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    77b9:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    77c9:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    77d9:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    77e9:	06 07 07 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    77f9:	06 06 06 06 06 06 06 06 06 06 06 08 09 0a 06 06     ................
    7809:	06 06 06 06 06 06 06 06 06 06 06 06 06 0b 06 06     ................
    7819:	06 06 06 0c 02 02 0d 06 06 06 0b 06 06 06 06 06     ................
    7829:	06 06 06 06 06 0e 06 0f 06 0f 06 10 11 12 06 06     ................
    7839:	06 13 06 06 0b 06 06 06 06 06 06 06 06 06 07 07     ................
    7849:	14 07 07 07 07 15 02 02 02 02 0d 07 07 14 16 17     ................
    7859:	18 17 18 17 19 1a 1b 1b 1c 1d 1e 1d 1e 1d 1f 07     ................
    7869:	07 07 07 07 07 07 07 14 07 07 07 07 07 07 07 07     ................
    7879:	07                                                  .

0000787a <__ctors_end>:
    787a:	11 24       	eor	r1, r1
    787c:	1f be       	out	0x3f, r1	; 63
    787e:	cf ef       	ldi	r28, 0xFF	; 255
    7880:	d0 e1       	ldi	r29, 0x10	; 16
    7882:	de bf       	out	0x3e, r29	; 62
    7884:	cd bf       	out	0x3d, r28	; 61

00007886 <__do_copy_data>:
    7886:	15 e0       	ldi	r17, 0x05	; 5
    7888:	a0 e0       	ldi	r26, 0x00	; 0
    788a:	b5 e0       	ldi	r27, 0x05	; 5
    788c:	e4 e1       	ldi	r30, 0x14	; 20
    788e:	fe ee       	ldi	r31, 0xEE	; 238
    7890:	02 c0       	rjmp	.+4      	; 0x7896 <__do_copy_data+0x10>
    7892:	05 90       	lpm	r0, Z+
    7894:	0d 92       	st	X+, r0
    7896:	a0 31       	cpi	r26, 0x10	; 16
    7898:	b1 07       	cpc	r27, r17
    789a:	d9 f7       	brne	.-10     	; 0x7892 <__do_copy_data+0xc>

0000789c <__do_clear_bss>:
    789c:	10 e1       	ldi	r17, 0x10	; 16
    789e:	a0 e1       	ldi	r26, 0x10	; 16
    78a0:	b5 e0       	ldi	r27, 0x05	; 5
    78a2:	01 c0       	rjmp	.+2      	; 0x78a6 <.do_clear_bss_start>

000078a4 <.do_clear_bss_loop>:
    78a4:	1d 92       	st	X+, r1

000078a6 <.do_clear_bss_start>:
    78a6:	ac 35       	cpi	r26, 0x5C	; 92
    78a8:	b1 07       	cpc	r27, r17
    78aa:	e1 f7       	brne	.-8      	; 0x78a4 <.do_clear_bss_loop>

000078ac <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    78ac:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <wdt_randomize>
#endif

    MCUSR = 0;
    78b0:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    78b2:	88 e1       	ldi	r24, 0x18	; 24
    78b4:	0f b6       	in	r0, 0x3f	; 63
    78b6:	f8 94       	cli
    78b8:	80 93 60 00 	sts	0x0060, r24
    78bc:	10 92 60 00 	sts	0x0060, r1
    78c0:	0f be       	out	0x3f, r0	; 63

000078c2 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    78c2:	0e 94 b3 42 	call	0x8566	; 0x8566 <isEepromFormatted>
    78c6:	81 11       	cpse	r24, r1
    78c8:	02 c0       	rjmp	.+4      	; 0x78ce <Initialize+0xc>
    78ca:	0e 94 91 42 	call	0x8522	; 0x8522 <FormatEeprom>

	cli();
    78ce:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    78d0:	81 e0       	ldi	r24, 0x01	; 1
    78d2:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    78d6:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    78da:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    78de:	10 92 d0 0c 	sts	0x0CD0, r1
    78e2:	10 92 d6 0c 	sts	0x0CD6, r1
    78e6:	10 92 dc 0c 	sts	0x0CDC, r1
    78ea:	10 92 e2 0c 	sts	0x0CE2, r1
    78ee:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    78f2:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    78f6:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    78fa:	92 e1       	ldi	r25, 0x12	; 18
    78fc:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7900:	90 ee       	ldi	r25, 0xE0	; 224
    7902:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    7906:	94 e1       	ldi	r25, 0x14	; 20
    7908:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    790c:	10 92 c2 0c 	sts	0x0CC2, r1
    7910:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    7914:	10 92 c6 0c 	sts	0x0CC6, r1
    7918:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    791c:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    7920:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <InitializeVideoMode>
    7924:	86 e9       	ldi	r24, 0x96	; 150
    7926:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7928:	fc 01       	movw	r30, r24
    792a:	25 91       	lpm	r18, Z+
    792c:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    792e:	f9 01       	movw	r30, r18
    7930:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7932:	30 83       	st	Z, r19
    7934:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7936:	20 e0       	ldi	r18, 0x00	; 0
    7938:	84 3c       	cpi	r24, 0xC4	; 196
    793a:	92 07       	cpc	r25, r18
    793c:	a9 f7       	brne	.-22     	; 0x7928 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    793e:	78 94       	sei
	
	DisplayLogo();
    7940:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DisplayLogo>
    7944:	0e 94 a3 74 	call	0xe946	; 0xe946 <main>
    7948:	0c 94 08 77 	jmp	0xee10	; 0xee10 <_exit>

0000794c <__bad_interrupt>:
    794c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007950 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    7950:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7952:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    7956:	ad e8       	ldi	r26, 0x8D	; 141
    7958:	aa 95       	dec	r26
    795a:	f1 f7       	brne	.-4      	; 0x7958 <sub_video_mode3+0x8>
    795c:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    795e:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    7962:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    7964:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    7966:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    7968:	02 9f       	mul	r16, r18
		add ZL,r0
    796a:	e0 0d       	add	r30, r0
		adc ZH,r1
    796c:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    796e:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7970:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7972:	20 91 88 0d 	lds	r18, 0x0D88
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    7976:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    7978:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    797a:	30 0f       	add	r19, r16

		cp r18,r16
    797c:	20 17       	cp	r18, r16
		breq no_ramtiles
    797e:	51 f0       	breq	.+20     	; 0x7994 <no_ramtiles>
		nop
    7980:	00 00       	nop
	...

00007984 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7984:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7986:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7988:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    798a:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    798c:	0c 93       	st	X, r16

		inc r16
    798e:	03 95       	inc	r16
		cp r16,r18
    7990:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7992:	c0 f3       	brcs	.-16     	; 0x7984 <upd_loop>

00007994 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7994:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7996:	1a 95       	dec	r17
		brne .-4
    7998:	f1 f7       	brne	.-4      	; 0x7996 <no_ramtiles+0x2>
		rjmp .
    799a:	00 c0       	rjmp	.+0      	; 0x799c <no_ramtiles+0x8>
		dec r19
    799c:	3a 95       	dec	r19
		brne 1b
    799e:	d1 f7       	brne	.-12     	; 0x7994 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    79a0:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    79a2:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    79a4:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    79a8:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    79aa:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    79ac:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    79ae:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    79b0:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    79b4:	60 2f       	mov	r22, r16
		lsr r16
    79b6:	06 95       	lsr	r16
		lsr r16
    79b8:	06 95       	lsr	r16
		lsr r16 ;/8
    79ba:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    79bc:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    79c0:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    79c2:	f1 2e       	mov	r15, r17

        mov r17,r16
    79c4:	10 2f       	mov	r17, r16
        lsr r16
    79c6:	06 95       	lsr	r16
        lsr r16
    79c8:	06 95       	lsr	r16
        lsr r16 ;/8
    79ca:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    79cc:	d0 0f       	add	r29, r16
		andi r17,0x7
    79ce:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    79d0:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    79d2:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    79d4:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    79d8:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    79dc:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    79e0:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    79e4:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    79e6:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    79e8:	5e 01       	movw	r10, r28
		mov r23,r22
    79ea:	76 2f       	mov	r23, r22
		mov r24,r15
    79ec:	8f 2d       	mov	r24, r15
		mov r9,r25
    79ee:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    79f0:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    79f4:	20 2f       	mov	r18, r16
		lsr r16
    79f6:	06 95       	lsr	r16
		lsr r16
    79f8:	06 95       	lsr	r16
		lsr r16			;hi8
    79fa:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    79fc:	03 95       	inc	r16
		andi r18,7		;lo8
    79fe:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    7a00:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    7a04:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    7a06:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    7a08:	01 fe       	sbrs	r0, 1
		clr r22
    7a0a:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    7a0c:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    7a0e:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    7a10:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    7a12:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    7a14:	01 fe       	sbrs	r0, 1
		ser r24
    7a16:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    7a18:	01 fe       	sbrs	r0, 1
		clr r9
    7a1a:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    7a1c:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    7a1e:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    7a20:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    7a22:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    7a24:	80 90 be 0c 	lds	r8, 0x0CBE

00007a28 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    7a28:	bc d3       	rcall	.+1912   	; 0x81a2 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    7a2a:	24 e0       	ldi	r18, 0x04	; 4
    7a2c:	2a 95       	dec	r18
    7a2e:	f1 f7       	brne	.-4      	; 0x7a2c <next_tile_line+0x4>
    7a30:	00 00       	nop
				
		call render_tile_line
    7a32:	0e 94 5a 3d 	call	0x7ab4	; 0x7ab4 <render_tile_line>

		WAIT r18,58
    7a36:	23 e1       	ldi	r18, 0x13	; 19
    7a38:	2a 95       	dec	r18
    7a3a:	f1 f7       	brne	.-4      	; 0x7a38 <next_tile_line+0x10>
    7a3c:	00 00       	nop

		inc r22
    7a3e:	63 95       	inc	r22
		dec r8
    7a40:	8a 94       	dec	r8
		breq text_frame_end
    7a42:	09 f1       	breq	.+66     	; 0x7a86 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    7a44:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    7a46:	29 f0       	breq	.+10     	; 0x7a52 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    7a48:	08 e0       	ldi	r16, 0x08	; 8
    7a4a:	0a 95       	dec	r16
    7a4c:	f1 f7       	brne	.-4      	; 0x7a4a <next_tile_line+0x22>
    7a4e:	00 00       	nop
		rjmp next_tile_line
    7a50:	eb cf       	rjmp	.-42     	; 0x7a28 <next_tile_line>

00007a52 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    7a52:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    7a54:	0c 2f       	mov	r16, r28
		andi r16,0x7
    7a56:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    7a58:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    7a5a:	11 f0       	breq	.+4      	; 0x7a60 <next_tile_row+0xe>
		inc YL
    7a5c:	c3 95       	inc	r28
		rjmp 2f
    7a5e:	02 c0       	rjmp	.+4      	; 0x7a64 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    7a60:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    7a62:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    7a64:	8a 95       	dec	r24
		brne .+2
    7a66:	09 f4       	brne	.+2      	; 0x7a6a <next_tile_row+0x18>
		movw YL,r12
    7a68:	e6 01       	movw	r28, r12

		dec r19
    7a6a:	3a 95       	dec	r19
		brne .+2
    7a6c:	09 f4       	brne	.+2      	; 0x7a70 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    7a6e:	67 2f       	mov	r22, r23
		brne .+2
    7a70:	09 f4       	brne	.+2      	; 0x7a74 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    7a72:	e5 01       	movw	r28, r10
		brne .+2
    7a74:	09 f4       	brne	.+2      	; 0x7a78 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    7a76:	8f 2d       	mov	r24, r15
		brne .+2
    7a78:	09 f4       	brne	.+2      	; 0x7a7c <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    7a7a:	99 2e       	mov	r9, r25

		brne .+2
    7a7c:	09 f4       	brne	.+2      	; 0x7a80 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7a7e:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    7a80:	09 f4       	brne	.+2      	; 0x7a84 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7a82:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    7a84:	d1 cf       	rjmp	.-94     	; 0x7a28 <next_tile_line>

00007a86 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    7a86:	29 e0       	ldi	r18, 0x09	; 9
    7a88:	2a 95       	dec	r18
    7a8a:	f1 f7       	brne	.-4      	; 0x7a88 <text_frame_end+0x2>
    7a8c:	00 00       	nop

		rcall hsync_pulse ;145
    7a8e:	89 d3       	rcall	.+1810   	; 0x81a2 <hsync_pulse>
	
		clr r1
    7a90:	11 24       	eor	r1, r1
		call RestoreBackground
    7a92:	0e 94 80 4e 	call	0x9d00	; 0x9d00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7a96:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    7a9a:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7a9c:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7a9e:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7aa0:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    7aa4:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    7aa6:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7aa8:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7aac:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7aae:	e0 93 36 00 	sts	0x0036, r30

		ret
    7ab2:	08 95       	ret

00007ab4 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    7ab4:	cf 93       	push	r28
		push YH
    7ab6:	df 93       	push	r29
		push r23
    7ab8:	7f 93       	push	r23
		push r22
    7aba:	6f 93       	push	r22
		push r19
    7abc:	3f 93       	push	r19
		push r13
    7abe:	df 92       	push	r13
		push r12
    7ac0:	cf 92       	push	r12
		push r9
    7ac2:	9f 92       	push	r9
		push r7
    7ac4:	7f 92       	push	r7
		push r6
    7ac6:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    7ac8:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    7aca:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    7acc:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    7ace:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7ad0:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7ad2:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    7ad4:	00 0d       	add	r16, r0
		adc r17,r1
    7ad6:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    7ad8:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7ada:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    7adc:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    7ade:	00 0d       	add	r16, r0
		adc r17,r1
    7ae0:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    7ae2:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7ae4:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    7ae6:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    7ae8:	69 2d       	mov	r22, r9
		andi r22,0x7		
    7aea:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    7aec:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    7aee:	f8 94       	cli
		breq .+2
    7af0:	09 f0       	breq	.+2      	; 0x7af4 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    7af2:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    7af4:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    7af6:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    7af8:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    7afa:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    7afc:	02 0c       	add	r0, r2
	    adc r1,r3
    7afe:	13 1c       	adc	r1, r3
		movw ZL,r0
    7b00:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    7b02:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    7b04:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7b06:	28 81       	ld	r18, Y
		subi YL,-8
    7b08:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7b0a:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    7b0c:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    7b0e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    7b10:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    7b12:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    7b14:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    7b16:	04 0e       	add	r0, r20
	    adc r1,r21
    7b18:	15 1e       	adc	r1, r21
		movw XL,r0
    7b1a:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7b1c:	28 81       	ld	r18, Y
		subi YL,-8
    7b1e:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7b20:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    7b22:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    7b24:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    7b26:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    7b28:	a1 01       	movw	r20, r2
		brtc .+2
    7b2a:	0e f4       	brtc	.+2      	; 0x7b2e <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    7b2c:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    7b2e:	04 0e       	add	r0, r20
	    adc r1,r21
    7b30:	15 1e       	adc	r1, r21
		movw ZL,r0
    7b32:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    7b34:	3f 01       	movw	r6, r30

00007b36 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    7b36:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    7b38:	a6 0f       	add	r26, r22
		adc XH,r0
    7b3a:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    7b3c:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    7b3e:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    7b40:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    7b42:	22 c0       	rjmp	.+68     	; 0x7b88 <rom_fine_scroll>

00007b44 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    7b44:	00 c0       	rjmp	.+0      	; 0x7b46 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    7b46:	6a ea       	ldi	r22, 0xAA	; 170
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    7b48:	7d e3       	ldi	r23, 0x3D	; 61
		add r22,r0
    7b4a:	60 0d       	add	r22, r0
		adc r23,r1
    7b4c:	71 1d       	adc	r23, r1
		push r22
    7b4e:	6f 93       	push	r22
		push r23	
    7b50:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    7b52:	08 95       	ret

00007b54 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    7b54:	0d 91       	ld	r16, X+
    7b56:	c8 95       	lpm
    7b58:	08 b9       	out	0x08, r16	; 8
    7b5a:	0d 91       	ld	r16, X+
    7b5c:	c8 95       	lpm
    7b5e:	08 b9       	out	0x08, r16	; 8
    7b60:	0d 91       	ld	r16, X+
    7b62:	c8 95       	lpm
    7b64:	08 b9       	out	0x08, r16	; 8
    7b66:	0d 91       	ld	r16, X+
    7b68:	c8 95       	lpm
    7b6a:	08 b9       	out	0x08, r16	; 8
    7b6c:	0d 91       	ld	r16, X+
    7b6e:	c8 95       	lpm
    7b70:	08 b9       	out	0x08, r16	; 8
    7b72:	0d 91       	ld	r16, X+
    7b74:	c8 95       	lpm
    7b76:	08 b9       	out	0x08, r16	; 8
    7b78:	0d 91       	ld	r16, X+
    7b7a:	c8 95       	lpm
    7b7c:	08 b9       	out	0x08, r16	; 8
    7b7e:	0d 91       	ld	r16, X+
    7b80:	c8 95       	lpm
    7b82:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    7b84:	1e f5       	brtc	.+70     	; 0x7bcc <romloop>
		rjmp ramloop
    7b86:	40 c0       	rjmp	.+128    	; 0x7c08 <ramloop>

00007b88 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    7b88:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    7b8a:	6c ec       	ldi	r22, 0xCC	; 204
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    7b8c:	7d e3       	ldi	r23, 0x3D	; 61
		add r22,r0
    7b8e:	60 0d       	add	r22, r0
		adc r23,r1
    7b90:	71 1d       	adc	r23, r1
		push r22
    7b92:	6f 93       	push	r22
		push r23	
    7b94:	7f 93       	push	r23
		ret
    7b96:	08 95       	ret

00007b98 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    7b98:	05 91       	lpm	r16, Z+
    7b9a:	00 c0       	rjmp	.+0      	; 0x7b9c <rom_fine_scroll_loop+0x4>
    7b9c:	08 b9       	out	0x08, r16	; 8
    7b9e:	05 91       	lpm	r16, Z+
    7ba0:	00 c0       	rjmp	.+0      	; 0x7ba2 <rom_fine_scroll_loop+0xa>
    7ba2:	08 b9       	out	0x08, r16	; 8
    7ba4:	05 91       	lpm	r16, Z+
    7ba6:	00 c0       	rjmp	.+0      	; 0x7ba8 <rom_fine_scroll_loop+0x10>
    7ba8:	08 b9       	out	0x08, r16	; 8
    7baa:	05 91       	lpm	r16, Z+
    7bac:	00 c0       	rjmp	.+0      	; 0x7bae <rom_fine_scroll_loop+0x16>
    7bae:	08 b9       	out	0x08, r16	; 8
    7bb0:	05 91       	lpm	r16, Z+
    7bb2:	00 c0       	rjmp	.+0      	; 0x7bb4 <rom_fine_scroll_loop+0x1c>
    7bb4:	08 b9       	out	0x08, r16	; 8
    7bb6:	05 91       	lpm	r16, Z+
    7bb8:	00 c0       	rjmp	.+0      	; 0x7bba <rom_fine_scroll_loop+0x22>
    7bba:	08 b9       	out	0x08, r16	; 8
    7bbc:	05 91       	lpm	r16, Z+
    7bbe:	00 c0       	rjmp	.+0      	; 0x7bc0 <rom_fine_scroll_loop+0x28>
    7bc0:	08 b9       	out	0x08, r16	; 8
    7bc2:	05 91       	lpm	r16, Z+
    7bc4:	00 c0       	rjmp	.+0      	; 0x7bc6 <rom_fine_scroll_loop+0x2e>
    7bc6:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    7bc8:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    7bca:	f6 f0       	brts	.+60     	; 0x7c08 <ramloop>

00007bcc <romloop>:

	
	romloop:
	    lpm r16,Z+
    7bcc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7bce:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7bd0:	28 81       	ld	r18, Y

	    lpm r16,Z+
    7bd2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7bd4:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7bd6:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    7bd8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7bda:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    7bdc:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7bde:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    7be0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7be2:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    7be4:	08 f4       	brcc	.+2      	; 0x7be8 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    7be6:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    7be8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7bea:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    7bec:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7bee:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7bf0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7bf2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    7bf4:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    7bf6:	1a 95       	dec	r17
   
	    lpm r16,Z+
    7bf8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7bfa:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7bfc:	05 91       	lpm	r16, Z+

		breq end	
    7bfe:	39 f1       	breq	.+78     	; 0x7c4e <end>
	    movw ZL,r0   	;copy next tile adress
    7c00:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7c02:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7c04:	18 f7       	brcc	.-58     	; 0x7bcc <romloop>
	
		rjmp .
    7c06:	00 c0       	rjmp	.+0      	; 0x7c08 <ramloop>

00007c08 <ramloop>:

	ramloop:

	    ld r16,Z+
    7c08:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7c0a:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7c0c:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    7c0e:	01 91       	ld	r16, Z+
		subi YL,-8   		
    7c10:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7c12:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7c14:	23 9f       	mul	r18, r19

	    ld r16,Z+
    7c16:	01 91       	ld	r16, Z+
		nop
    7c18:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7c1a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7c1c:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    7c1e:	00 c0       	rjmp	.+0      	; 0x7c20 <ramloop+0x18>
   
	    ld r16,Z+
    7c20:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7c22:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7c24:	08 f0       	brcs	.+2      	; 0x7c28 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7c26:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7c28:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7c2a:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7c2c:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7c2e:	15 1e       	adc	r1, r21
		rjmp .
    7c30:	00 c0       	rjmp	.+0      	; 0x7c32 <ramloop+0x2a>
    
		ld r16,Z+		
    7c32:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7c34:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    7c36:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    7c38:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    7c3a:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7c3c:	78 b8       	out	0x08, r7	; 8
		nop
    7c3e:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7c40:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7c42:	1a 95       	dec	r17
	    breq end
    7c44:	21 f0       	breq	.+8      	; 0x7c4e <end>
	
		nop
    7c46:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7c48:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7c4a:	00 f6       	brcc	.-128    	; 0x7bcc <romloop>
		rjmp ramloop
    7c4c:	dd cf       	rjmp	.-70     	; 0x7c08 <ramloop>

00007c4e <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7c4e:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    7c50:	27 f5       	brid	.+72     	; 0x7c9a <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    7c52:	30 f4       	brcc	.+12     	; 0x7c60 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    7c54:	f0 01       	movw	r30, r0

00007c56 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    7c56:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7c58:	08 b9       	out	0x08, r16	; 8
		dec r14
    7c5a:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    7c5c:	e1 f7       	brne	.-8      	; 0x7c56 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    7c5e:	1f c0       	rjmp	.+62     	; 0x7c9e <end_fine_scroll_ram>

00007c60 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    7c60:	f6 01       	movw	r30, r12
		nop
    7c62:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7c64:	98 b8       	out	0x08, r9	; 8
		dec r14
    7c66:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    7c68:	c9 f0       	breq	.+50     	; 0x7c9c <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    7c6a:	05 91       	lpm	r16, Z+
    7c6c:	08 b9       	out	0x08, r16	; 8
    7c6e:	ea 94       	dec	r14
    7c70:	a9 f0       	breq	.+42     	; 0x7c9c <end_fine_scroll_rom>
    7c72:	05 91       	lpm	r16, Z+
    7c74:	08 b9       	out	0x08, r16	; 8
    7c76:	ea 94       	dec	r14
    7c78:	89 f0       	breq	.+34     	; 0x7c9c <end_fine_scroll_rom>
    7c7a:	05 91       	lpm	r16, Z+
    7c7c:	08 b9       	out	0x08, r16	; 8
    7c7e:	ea 94       	dec	r14
    7c80:	69 f0       	breq	.+26     	; 0x7c9c <end_fine_scroll_rom>
    7c82:	05 91       	lpm	r16, Z+
    7c84:	08 b9       	out	0x08, r16	; 8
    7c86:	ea 94       	dec	r14
    7c88:	49 f0       	breq	.+18     	; 0x7c9c <end_fine_scroll_rom>
    7c8a:	05 91       	lpm	r16, Z+
    7c8c:	08 b9       	out	0x08, r16	; 8
    7c8e:	ea 94       	dec	r14
    7c90:	29 f0       	breq	.+10     	; 0x7c9c <end_fine_scroll_rom>
    7c92:	05 91       	lpm	r16, Z+
    7c94:	08 b9       	out	0x08, r16	; 8
    7c96:	ea 94       	dec	r14
    7c98:	09 f0       	breq	.+2      	; 0x7c9c <end_fine_scroll_rom>

00007c9a <end_fine_scroll>:
	...

00007c9c <end_fine_scroll_rom>:
	...

00007c9e <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    7c9e:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    7ca0:	08 b9       	out	0x08, r16	; 8

		pop r6
    7ca2:	6f 90       	pop	r6
		pop r7
    7ca4:	7f 90       	pop	r7
		pop r9
    7ca6:	9f 90       	pop	r9
		pop r12
    7ca8:	cf 90       	pop	r12
		pop r13
    7caa:	df 90       	pop	r13
		pop r19
    7cac:	3f 91       	pop	r19
		pop r22
    7cae:	6f 91       	pop	r22
		pop r23
    7cb0:	7f 91       	pop	r23
		pop YH
    7cb2:	df 91       	pop	r29
		pop YL
    7cb4:	cf 91       	pop	r28

		ret
    7cb6:	08 95       	ret

00007cb8 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7cb8:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7cba:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    7cbe:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    7cc2:	82 9f       	mul	r24, r18
	add ZL,r0
    7cc4:	e0 0d       	add	r30, r0
	adc ZH,r1
    7cc6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7cc8:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7cca:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7ccc:	62 9f       	mul	r22, r18
	add XL,r0
    7cce:	a0 0d       	add	r26, r0
	adc XH,r1
    7cd0:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    7cd2:	15 90       	lpm	r1, Z+
    7cd4:	1d 92       	st	X+, r1
    7cd6:	15 90       	lpm	r1, Z+
    7cd8:	1d 92       	st	X+, r1
    7cda:	15 90       	lpm	r1, Z+
    7cdc:	1d 92       	st	X+, r1
    7cde:	15 90       	lpm	r1, Z+
    7ce0:	1d 92       	st	X+, r1
    7ce2:	15 90       	lpm	r1, Z+
    7ce4:	1d 92       	st	X+, r1
    7ce6:	15 90       	lpm	r1, Z+
    7ce8:	1d 92       	st	X+, r1
    7cea:	15 90       	lpm	r1, Z+
    7cec:	1d 92       	st	X+, r1
    7cee:	15 90       	lpm	r1, Z+
    7cf0:	1d 92       	st	X+, r1
    7cf2:	15 90       	lpm	r1, Z+
    7cf4:	1d 92       	st	X+, r1
    7cf6:	15 90       	lpm	r1, Z+
    7cf8:	1d 92       	st	X+, r1
    7cfa:	15 90       	lpm	r1, Z+
    7cfc:	1d 92       	st	X+, r1
    7cfe:	15 90       	lpm	r1, Z+
    7d00:	1d 92       	st	X+, r1
    7d02:	15 90       	lpm	r1, Z+
    7d04:	1d 92       	st	X+, r1
    7d06:	15 90       	lpm	r1, Z+
    7d08:	1d 92       	st	X+, r1
    7d0a:	15 90       	lpm	r1, Z+
    7d0c:	1d 92       	st	X+, r1
    7d0e:	15 90       	lpm	r1, Z+
    7d10:	1d 92       	st	X+, r1
    7d12:	15 90       	lpm	r1, Z+
    7d14:	1d 92       	st	X+, r1
    7d16:	15 90       	lpm	r1, Z+
    7d18:	1d 92       	st	X+, r1
    7d1a:	15 90       	lpm	r1, Z+
    7d1c:	1d 92       	st	X+, r1
    7d1e:	15 90       	lpm	r1, Z+
    7d20:	1d 92       	st	X+, r1
    7d22:	15 90       	lpm	r1, Z+
    7d24:	1d 92       	st	X+, r1
    7d26:	15 90       	lpm	r1, Z+
    7d28:	1d 92       	st	X+, r1
    7d2a:	15 90       	lpm	r1, Z+
    7d2c:	1d 92       	st	X+, r1
    7d2e:	15 90       	lpm	r1, Z+
    7d30:	1d 92       	st	X+, r1
    7d32:	15 90       	lpm	r1, Z+
    7d34:	1d 92       	st	X+, r1
    7d36:	15 90       	lpm	r1, Z+
    7d38:	1d 92       	st	X+, r1
    7d3a:	15 90       	lpm	r1, Z+
    7d3c:	1d 92       	st	X+, r1
    7d3e:	15 90       	lpm	r1, Z+
    7d40:	1d 92       	st	X+, r1
    7d42:	15 90       	lpm	r1, Z+
    7d44:	1d 92       	st	X+, r1
    7d46:	15 90       	lpm	r1, Z+
    7d48:	1d 92       	st	X+, r1
    7d4a:	15 90       	lpm	r1, Z+
    7d4c:	1d 92       	st	X+, r1
    7d4e:	15 90       	lpm	r1, Z+
    7d50:	1d 92       	st	X+, r1
    7d52:	15 90       	lpm	r1, Z+
    7d54:	1d 92       	st	X+, r1
    7d56:	15 90       	lpm	r1, Z+
    7d58:	1d 92       	st	X+, r1
    7d5a:	15 90       	lpm	r1, Z+
    7d5c:	1d 92       	st	X+, r1
    7d5e:	15 90       	lpm	r1, Z+
    7d60:	1d 92       	st	X+, r1
    7d62:	15 90       	lpm	r1, Z+
    7d64:	1d 92       	st	X+, r1
    7d66:	15 90       	lpm	r1, Z+
    7d68:	1d 92       	st	X+, r1
    7d6a:	15 90       	lpm	r1, Z+
    7d6c:	1d 92       	st	X+, r1
    7d6e:	15 90       	lpm	r1, Z+
    7d70:	1d 92       	st	X+, r1
    7d72:	15 90       	lpm	r1, Z+
    7d74:	1d 92       	st	X+, r1
    7d76:	15 90       	lpm	r1, Z+
    7d78:	1d 92       	st	X+, r1
    7d7a:	15 90       	lpm	r1, Z+
    7d7c:	1d 92       	st	X+, r1
    7d7e:	15 90       	lpm	r1, Z+
    7d80:	1d 92       	st	X+, r1
    7d82:	15 90       	lpm	r1, Z+
    7d84:	1d 92       	st	X+, r1
    7d86:	15 90       	lpm	r1, Z+
    7d88:	1d 92       	st	X+, r1
    7d8a:	15 90       	lpm	r1, Z+
    7d8c:	1d 92       	st	X+, r1
    7d8e:	15 90       	lpm	r1, Z+
    7d90:	1d 92       	st	X+, r1
    7d92:	15 90       	lpm	r1, Z+
    7d94:	1d 92       	st	X+, r1
    7d96:	15 90       	lpm	r1, Z+
    7d98:	1d 92       	st	X+, r1
    7d9a:	15 90       	lpm	r1, Z+
    7d9c:	1d 92       	st	X+, r1
    7d9e:	15 90       	lpm	r1, Z+
    7da0:	1d 92       	st	X+, r1
    7da2:	15 90       	lpm	r1, Z+
    7da4:	1d 92       	st	X+, r1
    7da6:	15 90       	lpm	r1, Z+
    7da8:	1d 92       	st	X+, r1
    7daa:	15 90       	lpm	r1, Z+
    7dac:	1d 92       	st	X+, r1
    7dae:	15 90       	lpm	r1, Z+
    7db0:	1d 92       	st	X+, r1
    7db2:	15 90       	lpm	r1, Z+
    7db4:	1d 92       	st	X+, r1
    7db6:	15 90       	lpm	r1, Z+
    7db8:	1d 92       	st	X+, r1
    7dba:	15 90       	lpm	r1, Z+
    7dbc:	1d 92       	st	X+, r1
    7dbe:	15 90       	lpm	r1, Z+
    7dc0:	1d 92       	st	X+, r1
    7dc2:	15 90       	lpm	r1, Z+
    7dc4:	1d 92       	st	X+, r1
    7dc6:	15 90       	lpm	r1, Z+
    7dc8:	1d 92       	st	X+, r1
    7dca:	15 90       	lpm	r1, Z+
    7dcc:	1d 92       	st	X+, r1
    7dce:	15 90       	lpm	r1, Z+
    7dd0:	1d 92       	st	X+, r1
	clr r1
    7dd2:	11 24       	eor	r1, r1
	ret
    7dd4:	08 95       	ret

00007dd6 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7dd6:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7dd8:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    7dda:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    7ddc:	82 9f       	mul	r24, r18
	add ZL,r0
    7dde:	e0 0d       	add	r30, r0
	adc ZH,r1
    7de0:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7de2:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7de4:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7de6:	62 9f       	mul	r22, r18
	add XL,r0
    7de8:	a0 0d       	add	r26, r0
	adc XH,r1
    7dea:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7dec:	11 90       	ld	r1, Z+
    7dee:	1d 92       	st	X+, r1
    7df0:	11 90       	ld	r1, Z+
    7df2:	1d 92       	st	X+, r1
    7df4:	11 90       	ld	r1, Z+
    7df6:	1d 92       	st	X+, r1
    7df8:	11 90       	ld	r1, Z+
    7dfa:	1d 92       	st	X+, r1
    7dfc:	11 90       	ld	r1, Z+
    7dfe:	1d 92       	st	X+, r1
    7e00:	11 90       	ld	r1, Z+
    7e02:	1d 92       	st	X+, r1
    7e04:	11 90       	ld	r1, Z+
    7e06:	1d 92       	st	X+, r1
    7e08:	11 90       	ld	r1, Z+
    7e0a:	1d 92       	st	X+, r1
    7e0c:	11 90       	ld	r1, Z+
    7e0e:	1d 92       	st	X+, r1
    7e10:	11 90       	ld	r1, Z+
    7e12:	1d 92       	st	X+, r1
    7e14:	11 90       	ld	r1, Z+
    7e16:	1d 92       	st	X+, r1
    7e18:	11 90       	ld	r1, Z+
    7e1a:	1d 92       	st	X+, r1
    7e1c:	11 90       	ld	r1, Z+
    7e1e:	1d 92       	st	X+, r1
    7e20:	11 90       	ld	r1, Z+
    7e22:	1d 92       	st	X+, r1
    7e24:	11 90       	ld	r1, Z+
    7e26:	1d 92       	st	X+, r1
    7e28:	11 90       	ld	r1, Z+
    7e2a:	1d 92       	st	X+, r1
    7e2c:	11 90       	ld	r1, Z+
    7e2e:	1d 92       	st	X+, r1
    7e30:	11 90       	ld	r1, Z+
    7e32:	1d 92       	st	X+, r1
    7e34:	11 90       	ld	r1, Z+
    7e36:	1d 92       	st	X+, r1
    7e38:	11 90       	ld	r1, Z+
    7e3a:	1d 92       	st	X+, r1
    7e3c:	11 90       	ld	r1, Z+
    7e3e:	1d 92       	st	X+, r1
    7e40:	11 90       	ld	r1, Z+
    7e42:	1d 92       	st	X+, r1
    7e44:	11 90       	ld	r1, Z+
    7e46:	1d 92       	st	X+, r1
    7e48:	11 90       	ld	r1, Z+
    7e4a:	1d 92       	st	X+, r1
    7e4c:	11 90       	ld	r1, Z+
    7e4e:	1d 92       	st	X+, r1
    7e50:	11 90       	ld	r1, Z+
    7e52:	1d 92       	st	X+, r1
    7e54:	11 90       	ld	r1, Z+
    7e56:	1d 92       	st	X+, r1
    7e58:	11 90       	ld	r1, Z+
    7e5a:	1d 92       	st	X+, r1
    7e5c:	11 90       	ld	r1, Z+
    7e5e:	1d 92       	st	X+, r1
    7e60:	11 90       	ld	r1, Z+
    7e62:	1d 92       	st	X+, r1
    7e64:	11 90       	ld	r1, Z+
    7e66:	1d 92       	st	X+, r1
    7e68:	11 90       	ld	r1, Z+
    7e6a:	1d 92       	st	X+, r1
    7e6c:	11 90       	ld	r1, Z+
    7e6e:	1d 92       	st	X+, r1
    7e70:	11 90       	ld	r1, Z+
    7e72:	1d 92       	st	X+, r1
    7e74:	11 90       	ld	r1, Z+
    7e76:	1d 92       	st	X+, r1
    7e78:	11 90       	ld	r1, Z+
    7e7a:	1d 92       	st	X+, r1
    7e7c:	11 90       	ld	r1, Z+
    7e7e:	1d 92       	st	X+, r1
    7e80:	11 90       	ld	r1, Z+
    7e82:	1d 92       	st	X+, r1
    7e84:	11 90       	ld	r1, Z+
    7e86:	1d 92       	st	X+, r1
    7e88:	11 90       	ld	r1, Z+
    7e8a:	1d 92       	st	X+, r1
    7e8c:	11 90       	ld	r1, Z+
    7e8e:	1d 92       	st	X+, r1
    7e90:	11 90       	ld	r1, Z+
    7e92:	1d 92       	st	X+, r1
    7e94:	11 90       	ld	r1, Z+
    7e96:	1d 92       	st	X+, r1
    7e98:	11 90       	ld	r1, Z+
    7e9a:	1d 92       	st	X+, r1
    7e9c:	11 90       	ld	r1, Z+
    7e9e:	1d 92       	st	X+, r1
    7ea0:	11 90       	ld	r1, Z+
    7ea2:	1d 92       	st	X+, r1
    7ea4:	11 90       	ld	r1, Z+
    7ea6:	1d 92       	st	X+, r1
    7ea8:	11 90       	ld	r1, Z+
    7eaa:	1d 92       	st	X+, r1
    7eac:	11 90       	ld	r1, Z+
    7eae:	1d 92       	st	X+, r1
    7eb0:	11 90       	ld	r1, Z+
    7eb2:	1d 92       	st	X+, r1
    7eb4:	11 90       	ld	r1, Z+
    7eb6:	1d 92       	st	X+, r1
    7eb8:	11 90       	ld	r1, Z+
    7eba:	1d 92       	st	X+, r1
    7ebc:	11 90       	ld	r1, Z+
    7ebe:	1d 92       	st	X+, r1
    7ec0:	11 90       	ld	r1, Z+
    7ec2:	1d 92       	st	X+, r1
    7ec4:	11 90       	ld	r1, Z+
    7ec6:	1d 92       	st	X+, r1
    7ec8:	11 90       	ld	r1, Z+
    7eca:	1d 92       	st	X+, r1
    7ecc:	11 90       	ld	r1, Z+
    7ece:	1d 92       	st	X+, r1
    7ed0:	11 90       	ld	r1, Z+
    7ed2:	1d 92       	st	X+, r1
    7ed4:	11 90       	ld	r1, Z+
    7ed6:	1d 92       	st	X+, r1
    7ed8:	11 90       	ld	r1, Z+
    7eda:	1d 92       	st	X+, r1
    7edc:	11 90       	ld	r1, Z+
    7ede:	1d 92       	st	X+, r1
    7ee0:	11 90       	ld	r1, Z+
    7ee2:	1d 92       	st	X+, r1
    7ee4:	11 90       	ld	r1, Z+
    7ee6:	1d 92       	st	X+, r1
    7ee8:	11 90       	ld	r1, Z+
    7eea:	1d 92       	st	X+, r1
	clr r1
    7eec:	11 24       	eor	r1, r1
	ret
    7eee:	08 95       	ret

00007ef0 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7ef0:	0f 93       	push	r16
	push r17
    7ef2:	1f 93       	push	r17
	push YL
    7ef4:	cf 93       	push	r28
	push YH
    7ef6:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7ef8:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7efa:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7efc:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    7efe:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    7f00:	e0 0d       	add	r30, r0
	adc ZH,r1
    7f02:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7f04:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7f06:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7f08:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7f0a:	8e 9f       	mul	r24, r30
	movw r26,r0
    7f0c:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7f0e:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7f10:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    7f12:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    7f14:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    7f16:	00 24       	eor	r0, r0
	add YL,r1
    7f18:	c1 0d       	add	r28, r1
	adc YH,r0		
    7f1a:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7f1c:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7f1e:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7f20:	ea 0f       	add	r30, r26
	adc ZH,r27
    7f22:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7f24:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7f26:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7f28:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7f2a:	69 9f       	mul	r22, r25
	add XL,r0
    7f2c:	a0 0d       	add	r26, r0
	adc XH,r1
    7f2e:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7f30:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7f32:	dd 27       	eor	r29, r29

	cpi r20,0	
    7f34:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7f36:	51 f4       	brne	.+20     	; 0x7f4c <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7f38:	a2 0f       	add	r26, r18
	adc XH,r1
    7f3a:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7f3c:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7f3e:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7f40:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7f42:	11 c0       	rjmp	.+34     	; 0x7f66 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7f44:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7f46:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7f48:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7f4a:	0d c0       	rjmp	.+26     	; 0x7f66 <x_check_end>

00007f4c <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7f4c:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7f4e:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7f50:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7f52:	04 c0       	rjmp	.+8      	; 0x7f5c <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7f54:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7f56:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7f58:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7f5a:	05 c0       	rjmp	.+10     	; 0x7f66 <x_check_end>

00007f5c <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7f5c:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7f5e:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7f60:	e2 0f       	add	r30, r18
	adc ZH,r1
    7f62:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7f64:	31 97       	sbiw	r30, 0x01	; 1

00007f66 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7f66:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7f68:	51 f4       	brne	.+20     	; 0x7f7e <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    7f6a:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7f6c:	93 9f       	mul	r25, r19
	add XL,r0
    7f6e:	a0 0d       	add	r26, r0
	adc XH,r1
    7f70:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7f72:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    7f74:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    7f76:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    7f78:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    7f7a:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    7f7c:	0a c0       	rjmp	.+20     	; 0x7f92 <y_check_end>

00007f7e <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7f7e:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7f80:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7f82:	63 2f       	mov	r22, r19
	dec r22
    7f84:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7f86:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7f88:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    7f8a:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7f8c:	56 9f       	mul	r21, r22
	add ZL,r0
    7f8e:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7f90:	f1 1d       	adc	r31, r1

00007f92 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7f92:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7f94:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7f96:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7f98:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    7f9a:	00 ff       	sbrs	r16, 0
	clr r23
    7f9c:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7f9e:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7fa0:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7fa2:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7fa4:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7fa6:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7fa8:	59 1b       	sub	r21, r25

00007faa <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    7faa:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7fac:	48 1b       	sub	r20, r24

00007fae <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7fae:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7fb0:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7fb2:	2c 93       	st	X, r18
	adiw XL,1
    7fb4:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7fb6:	e6 0f       	add	r30, r22
	adc ZH,r23
    7fb8:	f7 1f       	adc	r31, r23
	dec r20
    7fba:	4a 95       	dec	r20
	brne x_loop
    7fbc:	c1 f7       	brne	.-16     	; 0x7fae <x_loop>

	add ZL,YL		;src+=srcXdiff
    7fbe:	ec 0f       	add	r30, r28
	adc ZH,YH
    7fc0:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7fc2:	a8 0f       	add	r26, r24
	adc XH,r1
    7fc4:	b1 1d       	adc	r27, r1
	dec r21
    7fc6:	5a 95       	dec	r21
	brne y_loop
    7fc8:	81 f7       	brne	.-32     	; 0x7faa <y_loop>


	pop YH
    7fca:	df 91       	pop	r29
	pop YL
    7fcc:	cf 91       	pop	r28
	pop r17
    7fce:	1f 91       	pop	r17
	pop r16
    7fd0:	0f 91       	pop	r16
	ret
    7fd2:	08 95       	ret

00007fd4 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7fd4:	0f 92       	push	r0
	push r1
    7fd6:	1f 92       	push	r1
	push ZL;2
    7fd8:	ef 93       	push	r30
	push ZH;2
    7fda:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7fdc:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7fde:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7fe0:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7fe4:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    7fe6:	f1 e0       	ldi	r31, 0x01	; 1

00007fe8 <latency_loop>:
latency_loop:
	cp ZL,ZH
    7fe8:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7fea:	00 f0       	brcs	.+0      	; 0x7fec <latency_loop+0x4>
	inc ZH
    7fec:	f3 95       	inc	r31
	cpi ZH,10
    7fee:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7ff0:	d8 f3       	brcs	.-10     	; 0x7fe8 <latency_loop>
	jmp .
    7ff2:	0c 94 fb 3f 	jmp	0x7ff6	; 0x7ff6 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7ff6:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7ffa:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7ffc:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    8000:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    8004:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8006:	57 c0       	rjmp	.+174    	; 0x80b6 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8008:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    800a:	98 f0       	brcs	.+38     	; 0x8032 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    800c:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    800e:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8012:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8014:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8018:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    801a:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    801c:	26 f4       	brtc	.+8      	; 0x8026 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    801e:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8020:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <update_sound>
	rjmp sync_end
    8024:	b7 c0       	rjmp	.+366    	; 0x8194 <sync_end>

00008026 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8026:	e5 e1       	ldi	r30, 0x15	; 21
    8028:	ea 95       	dec	r30
    802a:	f1 f7       	brne	.-4      	; 0x8028 <sync_pre_eq_no_sound_update+0x2>
    802c:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    802e:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    8030:	b1 c0       	rjmp	.+354    	; 0x8194 <sync_end>

00008032 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8032:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    8034:	38 f1       	brcs	.+78     	; 0x8084 <sync_post_eq>

	rjmp .
    8036:	00 c0       	rjmp	.+0      	; 0x8038 <sync_eq+0x6>
	rjmp .
    8038:	00 c0       	rjmp	.+0      	; 0x803a <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    803a:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    803c:	e0 fb       	bst	r30, 0
	ldi ZL,4
    803e:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8040:	16 f4       	brtc	.+4      	; 0x8046 <sync_eq_skip>
	
	call update_sound
    8042:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <update_sound>

00008046 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8046:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8048:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    804c:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    804e:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    8052:	a0 c0       	rjmp	.+320    	; 0x8194 <sync_end>

00008054 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    8054:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8056:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8058:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    805a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    805e:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    8060:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    8062:	00 f0       	brcs	.+0      	; 0x8064 <__vector_14+0x10>

	cpi ZL,2
    8064:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    8066:	00 f0       	brcs	.+0      	; 0x8068 <__vector_14+0x14>

	cpi ZL,3
    8068:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    806a:	00 f0       	brcs	.+0      	; 0x806c <__vector_14+0x18>

	cpi ZL,4
    806c:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    806e:	00 f0       	brcs	.+0      	; 0x8070 <__vector_14+0x1c>

	cpi ZL,5
    8070:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    8072:	00 f0       	brcs	.+0      	; 0x8074 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8074:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8076:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8078:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    807c:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    807e:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    8080:	ef 91       	pop	r30
	reti
    8082:	18 95       	reti

00008084 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8084:	00 c0       	rjmp	.+0      	; 0x8086 <sync_post_eq+0x2>

	bst ZL,0
    8086:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8088:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    808a:	26 f4       	brtc	.+8      	; 0x8094 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    808c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    808e:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <update_sound>
	rjmp sync_pre_eq_cont
    8092:	05 c0       	rjmp	.+10     	; 0x809e <sync_pre_eq_cont>

00008094 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8094:	e5 e1       	ldi	r30, 0x15	; 21
    8096:	ea 95       	dec	r30
    8098:	f1 f7       	brne	.-4      	; 0x8096 <sync_post_eq_no_sound_update+0x2>
    809a:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    809c:	28 9a       	sbi	0x05, 0	; 5

0000809e <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    809e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    80a2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    80a4:	09 f0       	breq	.+2      	; 0x80a8 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    80a6:	76 c0       	rjmp	.+236    	; 0x8194 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    80a8:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    80aa:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    80ae:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    80b0:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    80b4:	6f c0       	rjmp	.+222    	; 0x8194 <sync_end>

000080b6 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    80b6:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    80b8:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    80bc:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    80be:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    80c2:	00 c0       	rjmp	.+0      	; 0x80c4 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    80c4:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    80c6:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    80c8:	00 c0       	rjmp	.+0      	; 0x80ca <sync_hsync+0x14>
	call update_sound
    80ca:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    80ce:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    80d0:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    80d4:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    80d6:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    80da:	ef 17       	cp	r30, r31
	brsh no_render
    80dc:	d0 f4       	brcc	.+52     	; 0x8112 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    80de:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    80e0:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    80e4:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    80e6:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    80ea:	f0 19       	sub	r31, r0
	cp ZL,ZH
    80ec:	ef 17       	cp	r30, r31
	brlo no_render
    80ee:	88 f0       	brcs	.+34     	; 0x8112 <no_render>

	;push r1-r29
	ldi ZL,29
    80f0:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    80f2:	ff 27       	eor	r31, r31

000080f4 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    80f4:	00 80       	ld	r0, Z
	push r0
    80f6:	0f 92       	push	r0
	dec ZL
    80f8:	ea 95       	dec	r30
	brne push_loop	
    80fa:	e1 f7       	brne	.-8      	; 0x80f4 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    80fc:	06 e0       	ldi	r16, 0x06	; 6
    80fe:	0a 95       	dec	r16
    8100:	f1 f7       	brne	.-4      	; 0x80fe <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8102:	0e 94 a8 3c 	call	0x7950	; 0x7950 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8106:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8108:	ff 27       	eor	r31, r31

0000810a <pop_loop>:
pop_loop:
	pop r0
    810a:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    810c:	01 92       	st	Z+, r0
	cpi ZL,30
    810e:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    8110:	e0 f3       	brcs	.-8      	; 0x810a <pop_loop>

00008112 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8112:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    8116:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8118:	09 f0       	breq	.+2      	; 0x811c <no_render+0xa>
	rjmp sync_end
    811a:	3c c0       	rjmp	.+120    	; 0x8194 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    811c:	2f 93       	push	r18
	push r19
    811e:	3f 93       	push	r19
	push r20
    8120:	4f 93       	push	r20
	push r21
    8122:	5f 93       	push	r21
	push r22
    8124:	6f 93       	push	r22
	push r23
    8126:	7f 93       	push	r23
	push r24
    8128:	8f 93       	push	r24
	push r25
    812a:	9f 93       	push	r25
	push r26
    812c:	af 93       	push	r26
	push r27
    812e:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    8130:	78 94       	sei
	clr r1
    8132:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    8134:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    8136:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    813a:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    813c:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    8140:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    8144:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    8148:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    814a:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    814e:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8152:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    8156:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    815a:	e1 15       	cp	r30, r1
	cpc ZH,r1
    815c:	f1 05       	cpc	r31, r1
	breq .+2 
    815e:	09 f0       	breq	.+2      	; 0x8162 <no_render+0x50>
	icall
    8160:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8162:	0e 94 81 42 	call	0x8502	; 0x8502 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8166:	0e 94 de 50 	call	0xa1bc	; 0xa1bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    816a:	0e 94 dc 40 	call	0x81b8	; 0x81b8 <process_music>
	clr r1
    816e:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    8170:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    8174:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    8178:	e1 15       	cp	r30, r1
	cpc ZH,r1
    817a:	f1 05       	cpc	r31, r1
	breq .+2 
    817c:	09 f0       	breq	.+2      	; 0x8180 <no_render+0x6e>
	icall
    817e:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8180:	bf 91       	pop	r27
	pop r26
    8182:	af 91       	pop	r26
	pop r25
    8184:	9f 91       	pop	r25
	pop r24
    8186:	8f 91       	pop	r24
	pop r23
    8188:	7f 91       	pop	r23
	pop r22
    818a:	6f 91       	pop	r22
	pop r21
    818c:	5f 91       	pop	r21
	pop r20
    818e:	4f 91       	pop	r20
	pop r19
    8190:	3f 91       	pop	r19
	pop r18
    8192:	2f 91       	pop	r18

00008194 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8194:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8196:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8198:	ff 91       	pop	r31
	pop ZL
    819a:	ef 91       	pop	r30
	pop r1
    819c:	1f 90       	pop	r1
	pop r0
    819e:	0f 90       	pop	r0
	reti
    81a0:	18 95       	reti

000081a2 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    81a2:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    81a4:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    81a6:	00 c0       	rjmp	.+0      	; 0x81a8 <hsync_pulse+0x6>
	call update_sound
    81a8:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <update_sound>

	lds ZL,sync_pulse
    81ac:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    81b0:	ea 95       	dec	r30
	sts sync_pulse,ZL
    81b2:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    81b6:	08 95       	ret

000081b8 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    81b8:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    81bc:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    81be:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <ProcessMusic>
#endif

	ret
    81c2:	08 95       	ret

000081c4 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    81c4:	0f 93       	push	r16
	push r17
    81c6:	1f 93       	push	r17
	push r18
    81c8:	2f 93       	push	r18
	push r28
    81ca:	cf 93       	push	r28
	push r29
    81cc:	df 93       	push	r29

	mov r18,ZL
    81ce:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    81d0:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    81d4:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    81d8:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    81da:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    81de:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    81e2:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    81e6:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    81e8:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    81ea:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    81ee:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    81f2:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    81f6:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    81f8:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    81fa:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    81fc:	d0 2d       	mov	r29, r0
	nop
    81fe:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8200:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    8204:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    8208:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    820a:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    820e:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    8212:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    8216:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8218:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    821a:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    821e:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    8222:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8226:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8228:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    822a:	20 ff       	sbrs	r18, 0
	rjmp .
    822c:	00 c0       	rjmp	.+0      	; 0x822e <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    822e:	01 03       	mulsu	r16, r17
	clr r0
    8230:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8232:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8234:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8236:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8238:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    823c:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    8240:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8242:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    8246:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    824a:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    824e:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8250:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8252:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    8256:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    825a:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    825e:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8260:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8262:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8264:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8266:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    826a:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    826e:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    8272:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8274:	92 f4       	brpl	.+36     	; 0x829a <ch4_no_shift>

	lds ZH,tr4_params
    8276:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    827a:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    827c:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    827e:	00 2e       	mov	r0, r16
	lsr r0
    8280:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8282:	00 26       	eor	r0, r16
	bst r0,0
    8284:	00 fa       	bst	r0, 0
	lsr r17
    8286:	16 95       	lsr	r17
	ror r16
    8288:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    828a:	16 f9       	bld	r17, 6
	sbrs ZH,0
    828c:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    828e:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8290:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    8294:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    8298:	03 c0       	rjmp	.+6      	; 0x82a0 <ch4_end>

0000829a <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    829a:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    829c:	1a 95       	dec	r17
	brne .-4
    829e:	f1 f7       	brne	.-4      	; 0x829c <ch4_no_shift+0x2>

000082a0 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    82a0:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    82a4:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    82a6:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    82a8:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    82aa:	21 ff       	sbrs	r18, 1
	rjmp .
    82ac:	00 c0       	rjmp	.+0      	; 0x82ae <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    82ae:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    82b0:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    82b2:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    82b6:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    82b8:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    82ba:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    82bc:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    82be:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    82c2:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    82c6:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    82c8:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    82cc:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    82d0:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    82d4:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    82d6:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    82da:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    82dc:	f0 1f       	adc	r31, r16

	movw r16,ZL
    82de:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    82e0:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    82e4:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    82e8:	00 19       	sub	r16, r0
	sbc r17,r1
    82ea:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    82ec:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    82f0:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    82f4:	e0 15       	cp	r30, r0
	cpc ZH,r1
    82f6:	f1 05       	cpc	r31, r1
	brlo .+2
    82f8:	08 f0       	brcs	.+2      	; 0x82fc <ch4_end+0x5c>
	movw ZL,r16
    82fa:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    82fc:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    8300:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    8304:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8306:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    830a:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    830c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    830e:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8310:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8312:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8314:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8316:	d0 05       	cpc	r29, r0
	brlt .+2
    8318:	0c f0       	brlt	.+2      	; 0x831c <ch4_end+0x7c>
	ldi r28,127
    831a:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    831c:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    831e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8320:	d0 05       	cpc	r29, r0
	brge .+2
    8322:	0c f4       	brge	.+2      	; 0x8326 <ch4_end+0x86>
	ldi r28,-128
    8324:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8326:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8328:	c0 93 b3 00 	sts	0x00B3, r28

0000832c <update_sound_end>:
#endif


update_sound_end:

	pop r29
    832c:	df 91       	pop	r29
	pop r28
    832e:	cf 91       	pop	r28
	pop r18
    8330:	2f 91       	pop	r18
	pop r17
    8332:	1f 91       	pop	r17
	pop r16
    8334:	0f 91       	pop	r16
	
	ret
    8336:	08 95       	ret

00008338 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    8338:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    833c:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    8340:	08 95       	ret

00008342 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8342:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8344:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    8346:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    8348:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    834a:	6c e1       	ldi	r22, 0x1C	; 28

0000834c <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    834c:	6d 93       	st	X+, r22
	sbiw r30,1
    834e:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8350:	e9 f7       	brne	.-6      	; 0x834c <fill_vram_loop>

	clr r1
    8352:	11 24       	eor	r1, r1

	ret
    8354:	08 95       	ret

00008356 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    8356:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    8358:	76 2f       	mov	r23, r22
	lsr r22
    835a:	66 95       	lsr	r22
	lsr r22
    835c:	66 95       	lsr	r22
	lsr r22			;y>>3
    835e:	66 95       	lsr	r22
	ldi r18,8		
    8360:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    8362:	82 9f       	mul	r24, r18
	movw XL,r0
    8364:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    8366:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    8368:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    836a:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    836c:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    836e:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    8370:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    8372:	4c 93       	st	X, r20

	clr r1
    8374:	11 24       	eor	r1, r1

	ret
    8376:	08 95       	ret

00008378 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8378:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    837c:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    8380:	08 95       	ret

00008382 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8382:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    8386:	81 70       	andi	r24, 0x01	; 1
	ret
    8388:	08 95       	ret

0000838a <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    838a:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    838e:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    8390:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    8394:	08 95       	ret

00008396 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8396:	88 23       	and	r24, r24
	brne rj_p2
    8398:	29 f4       	brne	.+10     	; 0x83a4 <rj_p2>
		
	lds r24,joypad1_status_lo
    839a:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    839e:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    83a2:	08 95       	ret

000083a4 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    83a4:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    83a8:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    83ac:	08 95       	ret

000083ae <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    83ae:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    83b0:	7a 95       	dec	r23
	brne .-4 ;~1 us
    83b2:	f1 f7       	brne	.-4      	; 0x83b0 <WaitUs+0x2>
	nop
    83b4:	00 00       	nop
	sbiw r24,1
    83b6:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    83b8:	d1 f7       	brne	.-12     	; 0x83ae <WaitUs>

	ret
    83ba:	08 95       	ret

000083bc <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    83bc:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    83be:	fe cf       	rjmp	.-4      	; 0x83bc <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    83c0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    83c2:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    83c4:	60 bd       	out	0x20, r22	; 32
   cli
    83c6:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    83c8:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    83ca:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    83cc:	78 94       	sei
   ret
    83ce:	08 95       	ret

000083d0 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    83d0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    83d2:	fe cf       	rjmp	.-4      	; 0x83d0 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    83d4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    83d6:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    83d8:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    83da:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    83dc:	80 b5       	in	r24, 0x20	; 32
   sei
    83de:	78 94       	sei
   ret
    83e0:	08 95       	ret

000083e2 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    83e2:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    83e4:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    83e8:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    83ec:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    83f0:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    83f4:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    83f8:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    83fc:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    8400:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8404:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8408:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    840a:	80 93 81 00 	sts	0x0081, r24

		cli
    840e:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8410:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8412:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8416:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8418:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    841c:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    841e:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8422:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8426:	78 94       	sei

00008428 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8428:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    842c:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    842e:	e0 f3       	brcs	.-8      	; 0x8428 <wait>

		ret
    8430:	08 95       	ret

00008432 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8432:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    8436:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    843a:	08 95       	ret

0000843c <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    843c:	0f 93       	push	r16
		push r17
    843e:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    8440:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8442:	0f 93       	push	r16

		lds r16,sync_pulse
    8444:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    8448:	03 95       	inc	r16
		sts sync_pulse,r16
    844a:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    844e:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8450:	08 c0       	rjmp	.+16     	; 0x8462 <__vector_8+0x26>
		lds r17,random_value
    8452:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8456:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    845a:	10 27       	eor	r17, r16
		sts random_value,r17
    845c:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    8460:	07 c0       	rjmp	.+14     	; 0x8470 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8462:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8466:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    846a:	10 27       	eor	r17, r16
		sts random_value+1,r17
    846c:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8470:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8472:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8476:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8478:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    847a:	1f 91       	pop	r17
		pop r16
    847c:	0f 91       	pop	r16
		reti
    847e:	18 95       	reti

00008480 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8480:	98 e0       	ldi	r25, 0x08	; 8
    8482:	88 e1       	ldi	r24, 0x18	; 24
    8484:	0f b6       	in	r0, 0x3f	; 63
    8486:	f8 94       	cli
    8488:	a8 95       	wdr
    848a:	80 93 60 00 	sts	0x0060, r24
    848e:	0f be       	out	0x3f, r0	; 63
    8490:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8494:	ff cf       	rjmp	.-2      	; 0x8494 <SoftReset+0x14>

00008496 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8496:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8498:	c8 95       	lpm
    849a:	c8 95       	lpm
		Wait200ns();
    849c:	c8 95       	lpm
    849e:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    84a0:	12 98       	cbi	0x02, 2	; 2
    84a2:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    84a4:	80 e0       	ldi	r24, 0x00	; 0
    84a6:	90 e0       	ldi	r25, 0x00	; 0
    84a8:	20 e0       	ldi	r18, 0x00	; 0
    84aa:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    84ac:	36 95       	lsr	r19
    84ae:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    84b0:	96 95       	lsr	r25
    84b2:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    84b4:	c8 95       	lpm
    84b6:	c8 95       	lpm
			Wait200ns();
    84b8:	c8 95       	lpm
    84ba:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    84bc:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    84be:	00 9b       	sbis	0x00, 0	; 0
    84c0:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    84c2:	01 9b       	sbis	0x00, 1	; 0
    84c4:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    84c6:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    84c8:	c8 95       	lpm
    84ca:	c8 95       	lpm
			Wait200ns();
    84cc:	c8 95       	lpm
    84ce:	c8 95       	lpm
    84d0:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    84d2:	61 f7       	brne	.-40     	; 0x84ac <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    84d4:	30 93 c0 0c 	sts	0x0CC0, r19
    84d8:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    84dc:	90 93 c4 0c 	sts	0x0CC4, r25
    84e0:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    84e4:	80 91 bf 0c 	lds	r24, 0x0CBF
    84e8:	90 91 c0 0c 	lds	r25, 0x0CC0
    84ec:	0f 97       	sbiw	r24, 0x0f	; 15
    84ee:	31 f0       	breq	.+12     	; 0x84fc <ReadButtons+0x66>
    84f0:	80 91 c3 0c 	lds	r24, 0x0CC3
    84f4:	90 91 c4 0c 	lds	r25, 0x0CC4
    84f8:	0f 97       	sbiw	r24, 0x0f	; 15
    84fa:	11 f4       	brne	.+4      	; 0x8500 <ReadButtons+0x6a>
		SoftReset();
    84fc:	0e 94 40 42 	call	0x8480	; 0x8480 <SoftReset>
    8500:	08 95       	ret

00008502 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8502:	10 92 02 0d 	sts	0x0D02, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8506:	00 99       	sbic	0x00, 0	; 0
    8508:	03 c0       	rjmp	.+6      	; 0x8510 <ReadControllers+0xe>
    850a:	81 e0       	ldi	r24, 0x01	; 1
    850c:	80 93 02 0d 	sts	0x0D02, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8510:	01 99       	sbic	0x00, 1	; 0
    8512:	05 c0       	rjmp	.+10     	; 0x851e <ReadControllers+0x1c>
    8514:	80 91 02 0d 	lds	r24, 0x0D02
    8518:	82 60       	ori	r24, 0x02	; 2
    851a:	80 93 02 0d 	sts	0x0D02, r24
			
	//read the standard buttons
	ReadButtons();
    851e:	0c 94 4b 42 	jmp	0x8496	; 0x8496 <ReadButtons>

00008522 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8522:	cf 93       	push	r28
    8524:	df 93       	push	r29
    8526:	c0 e0       	ldi	r28, 0x00	; 0
    8528:	d0 e0       	ldi	r29, 0x00	; 0
    852a:	fe 01       	movw	r30, r28
    852c:	ec 53       	subi	r30, 0x3C	; 60
    852e:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8530:	64 91       	lpm	r22, Z
    8532:	ce 01       	movw	r24, r28
    8534:	0e 94 de 41 	call	0x83bc	; 0x83bc <WriteEeprom>
    8538:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    853a:	c0 32       	cpi	r28, 0x20	; 32
    853c:	d1 05       	cpc	r29, r1
    853e:	a9 f7       	brne	.-22     	; 0x852a <FormatEeprom+0x8>
    8540:	c0 e2       	ldi	r28, 0x20	; 32
    8542:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8544:	6f ef       	ldi	r22, 0xFF	; 255
    8546:	ce 01       	movw	r24, r28
    8548:	0e 94 de 41 	call	0x83bc	; 0x83bc <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    854c:	6f ef       	ldi	r22, 0xFF	; 255
    854e:	ce 01       	movw	r24, r28
    8550:	01 96       	adiw	r24, 0x01	; 1
    8552:	0e 94 de 41 	call	0x83bc	; 0x83bc <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8556:	a0 96       	adiw	r28, 0x20	; 32
    8558:	c1 15       	cp	r28, r1
    855a:	88 e0       	ldi	r24, 0x08	; 8
    855c:	d8 07       	cpc	r29, r24
    855e:	91 f7       	brne	.-28     	; 0x8544 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8560:	df 91       	pop	r29
    8562:	cf 91       	pop	r28
    8564:	08 95       	ret

00008566 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8566:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8568:	80 e0       	ldi	r24, 0x00	; 0
    856a:	90 e0       	ldi	r25, 0x00	; 0
    856c:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <ReadEeprom>
    8570:	c8 2f       	mov	r28, r24
    8572:	81 e0       	ldi	r24, 0x01	; 1
    8574:	90 e0       	ldi	r25, 0x00	; 0
    8576:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <ReadEeprom>
    857a:	28 2f       	mov	r18, r24
    857c:	30 e0       	ldi	r19, 0x00	; 0
    857e:	32 2f       	mov	r19, r18
    8580:	22 27       	eor	r18, r18
    8582:	2c 0f       	add	r18, r28
    8584:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8586:	81 e0       	ldi	r24, 0x01	; 1
    8588:	2a 35       	cpi	r18, 0x5A	; 90
    858a:	35 45       	sbci	r19, 0x55	; 85
    858c:	09 f0       	breq	.+2      	; 0x8590 <isEepromFormatted+0x2a>
    858e:	80 e0       	ldi	r24, 0x00	; 0
}
    8590:	cf 91       	pop	r28
    8592:	08 95       	ret

00008594 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8594:	8f 92       	push	r8
    8596:	9f 92       	push	r9
    8598:	af 92       	push	r10
    859a:	bf 92       	push	r11
    859c:	cf 92       	push	r12
    859e:	df 92       	push	r13
    85a0:	ef 92       	push	r14
    85a2:	ff 92       	push	r15
    85a4:	0f 93       	push	r16
    85a6:	1f 93       	push	r17
    85a8:	cf 93       	push	r28
    85aa:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    85ac:	fb 01       	movw	r30, r22
    85ae:	11 82       	std	Z+1, r1	; 0x01
    85b0:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    85b2:	8f 3f       	cpi	r24, 0xFF	; 255
    85b4:	ff ef       	ldi	r31, 0xFF	; 255
    85b6:	9f 07       	cpc	r25, r31
    85b8:	89 f1       	breq	.+98     	; 0x861c <EepromBlockExists+0x88>
    85ba:	6a 01       	movw	r12, r20
    85bc:	8b 01       	movw	r16, r22
    85be:	7c 01       	movw	r14, r24
    85c0:	a1 2c       	mov	r10, r1
    85c2:	b1 2c       	mov	r11, r1
    85c4:	c0 e0       	ldi	r28, 0x00	; 0
    85c6:	d3 e0       	ldi	r29, 0x03	; 3
    85c8:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    85ca:	c5 01       	movw	r24, r10
    85cc:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <ReadEeprom>
    85d0:	88 2e       	mov	r8, r24
    85d2:	c5 01       	movw	r24, r10
    85d4:	01 96       	adiw	r24, 0x01	; 1
    85d6:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <ReadEeprom>
    85da:	28 2f       	mov	r18, r24
    85dc:	30 e0       	ldi	r19, 0x00	; 0
    85de:	32 2f       	mov	r19, r18
    85e0:	22 27       	eor	r18, r18
    85e2:	28 0d       	add	r18, r8
    85e4:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    85e6:	2e 15       	cp	r18, r14
    85e8:	3f 05       	cpc	r19, r15
    85ea:	29 f4       	brne	.+10     	; 0x85f6 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    85ec:	f8 01       	movw	r30, r16
    85ee:	b1 82       	std	Z+1, r11	; 0x01
    85f0:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    85f2:	d0 e0       	ldi	r29, 0x00	; 0
    85f4:	0b c0       	rjmp	.+22     	; 0x860c <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    85f6:	2f 3f       	cpi	r18, 0xFF	; 255
    85f8:	3f 4f       	sbci	r19, 0xFF	; 255
    85fa:	41 f4       	brne	.+16     	; 0x860c <EepromBlockExists+0x78>
    85fc:	91 10       	cpse	r9, r1
    85fe:	06 c0       	rjmp	.+12     	; 0x860c <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8600:	c1 14       	cp	r12, r1
    8602:	d1 04       	cpc	r13, r1
    8604:	11 f0       	breq	.+4      	; 0x860a <EepromBlockExists+0x76>
    8606:	f6 01       	movw	r30, r12
    8608:	c0 83       	st	Z, r28
    860a:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    860c:	cf 5f       	subi	r28, 0xFF	; 255
    860e:	f0 e2       	ldi	r31, 0x20	; 32
    8610:	af 0e       	add	r10, r31
    8612:	b1 1c       	adc	r11, r1
    8614:	c0 34       	cpi	r28, 0x40	; 64
    8616:	c9 f6       	brne	.-78     	; 0x85ca <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8618:	8d 2f       	mov	r24, r29
    861a:	01 c0       	rjmp	.+2      	; 0x861e <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    861c:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    861e:	df 91       	pop	r29
    8620:	cf 91       	pop	r28
    8622:	1f 91       	pop	r17
    8624:	0f 91       	pop	r16
    8626:	ff 90       	pop	r15
    8628:	ef 90       	pop	r14
    862a:	df 90       	pop	r13
    862c:	cf 90       	pop	r12
    862e:	bf 90       	pop	r11
    8630:	af 90       	pop	r10
    8632:	9f 90       	pop	r9
    8634:	8f 90       	pop	r8
    8636:	08 95       	ret

00008638 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8638:	ef 92       	push	r14
    863a:	ff 92       	push	r15
    863c:	0f 93       	push	r16
    863e:	1f 93       	push	r17
    8640:	cf 93       	push	r28
    8642:	df 93       	push	r29
    8644:	00 d0       	rcall	.+0      	; 0x8646 <EepromWriteBlock+0xe>
    8646:	1f 92       	push	r1
    8648:	cd b7       	in	r28, 0x3d	; 61
    864a:	de b7       	in	r29, 0x3e	; 62
    864c:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    864e:	1a 82       	std	Y+2, r1	; 0x02
    8650:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8652:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    8654:	ae 01       	movw	r20, r28
    8656:	4d 5f       	subi	r20, 0xFD	; 253
    8658:	5f 4f       	sbci	r21, 0xFF	; 255
    865a:	be 01       	movw	r22, r28
    865c:	6f 5f       	subi	r22, 0xFF	; 255
    865e:	7f 4f       	sbci	r23, 0xFF	; 255
    8660:	fc 01       	movw	r30, r24
    8662:	80 81       	ld	r24, Z
    8664:	91 81       	ldd	r25, Z+1	; 0x01
    8666:	0e 94 ca 42 	call	0x8594	; 0x8594 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    866a:	88 23       	and	r24, r24
    866c:	11 f0       	breq	.+4      	; 0x8672 <EepromWriteBlock+0x3a>
    866e:	83 30       	cpi	r24, 0x03	; 3
    8670:	19 f5       	brne	.+70     	; 0x86b8 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8672:	89 81       	ldd	r24, Y+1	; 0x01
    8674:	9a 81       	ldd	r25, Y+2	; 0x02
    8676:	89 2b       	or	r24, r25
    8678:	49 f4       	brne	.+18     	; 0x868c <EepromWriteBlock+0x54>
    867a:	8b 81       	ldd	r24, Y+3	; 0x03
    867c:	88 23       	and	r24, r24
    867e:	d9 f0       	breq	.+54     	; 0x86b6 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8680:	f0 e2       	ldi	r31, 0x20	; 32
    8682:	8f 9f       	mul	r24, r31
    8684:	c0 01       	movw	r24, r0
    8686:	11 24       	eor	r1, r1
    8688:	9a 83       	std	Y+2, r25	; 0x02
    868a:	89 83       	std	Y+1, r24	; 0x01
    868c:	78 01       	movw	r14, r16
    868e:	20 e2       	ldi	r18, 0x20	; 32
    8690:	e2 0e       	add	r14, r18
    8692:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8694:	f8 01       	movw	r30, r16
    8696:	61 91       	ld	r22, Z+
    8698:	8f 01       	movw	r16, r30
    869a:	89 81       	ldd	r24, Y+1	; 0x01
    869c:	9a 81       	ldd	r25, Y+2	; 0x02
    869e:	9c 01       	movw	r18, r24
    86a0:	2f 5f       	subi	r18, 0xFF	; 255
    86a2:	3f 4f       	sbci	r19, 0xFF	; 255
    86a4:	3a 83       	std	Y+2, r19	; 0x02
    86a6:	29 83       	std	Y+1, r18	; 0x01
    86a8:	0e 94 de 41 	call	0x83bc	; 0x83bc <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    86ac:	0e 15       	cp	r16, r14
    86ae:	1f 05       	cpc	r17, r15
    86b0:	89 f7       	brne	.-30     	; 0x8694 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    86b2:	80 e0       	ldi	r24, 0x00	; 0
    86b4:	01 c0       	rjmp	.+2      	; 0x86b8 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    86b6:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    86b8:	0f 90       	pop	r0
    86ba:	0f 90       	pop	r0
    86bc:	0f 90       	pop	r0
    86be:	df 91       	pop	r29
    86c0:	cf 91       	pop	r28
    86c2:	1f 91       	pop	r17
    86c4:	0f 91       	pop	r16
    86c6:	ff 90       	pop	r15
    86c8:	ef 90       	pop	r14
    86ca:	08 95       	ret

000086cc <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    86cc:	cf 92       	push	r12
    86ce:	df 92       	push	r13
    86d0:	ff 92       	push	r15
    86d2:	0f 93       	push	r16
    86d4:	1f 93       	push	r17
    86d6:	cf 93       	push	r28
    86d8:	df 93       	push	r29
    86da:	00 d0       	rcall	.+0      	; 0x86dc <EepromReadBlock+0x10>
    86dc:	cd b7       	in	r28, 0x3d	; 61
    86de:	de b7       	in	r29, 0x3e	; 62
    86e0:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    86e2:	40 e0       	ldi	r20, 0x00	; 0
    86e4:	50 e0       	ldi	r21, 0x00	; 0
    86e6:	be 01       	movw	r22, r28
    86e8:	6f 5f       	subi	r22, 0xFF	; 255
    86ea:	7f 4f       	sbci	r23, 0xFF	; 255
    86ec:	0e 94 ca 42 	call	0x8594	; 0x8594 <EepromBlockExists>
    86f0:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    86f2:	81 11       	cpse	r24, r1
    86f4:	13 c0       	rjmp	.+38     	; 0x871c <EepromReadBlock+0x50>
    86f6:	68 01       	movw	r12, r16
    86f8:	80 e2       	ldi	r24, 0x20	; 32
    86fa:	c8 0e       	add	r12, r24
    86fc:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    86fe:	89 81       	ldd	r24, Y+1	; 0x01
    8700:	9a 81       	ldd	r25, Y+2	; 0x02
    8702:	9c 01       	movw	r18, r24
    8704:	2f 5f       	subi	r18, 0xFF	; 255
    8706:	3f 4f       	sbci	r19, 0xFF	; 255
    8708:	3a 83       	std	Y+2, r19	; 0x02
    870a:	29 83       	std	Y+1, r18	; 0x01
    870c:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <ReadEeprom>
    8710:	f8 01       	movw	r30, r16
    8712:	81 93       	st	Z+, r24
    8714:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8716:	ec 15       	cp	r30, r12
    8718:	fd 05       	cpc	r31, r13
    871a:	89 f7       	brne	.-30     	; 0x86fe <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    871c:	8f 2d       	mov	r24, r15
    871e:	0f 90       	pop	r0
    8720:	0f 90       	pop	r0
    8722:	df 91       	pop	r29
    8724:	cf 91       	pop	r28
    8726:	1f 91       	pop	r17
    8728:	0f 91       	pop	r16
    872a:	ff 90       	pop	r15
    872c:	df 90       	pop	r13
    872e:	cf 90       	pop	r12
    8730:	08 95       	ret

00008732 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8732:	00 97       	sbiw	r24, 0x00	; 0
    8734:	21 f0       	breq	.+8      	; 0x873e <GetPrngNumber+0xc>
    8736:	90 93 cd 0c 	sts	0x0CCD, r25
    873a:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    873e:	20 91 cc 0c 	lds	r18, 0x0CCC
    8742:	30 91 cd 0c 	lds	r19, 0x0CCD
    8746:	a9 01       	movw	r20, r18
    8748:	56 95       	lsr	r21
    874a:	47 95       	ror	r20
    874c:	56 95       	lsr	r21
    874e:	47 95       	ror	r20
    8750:	c9 01       	movw	r24, r18
    8752:	63 e0       	ldi	r22, 0x03	; 3
    8754:	96 95       	lsr	r25
    8756:	87 95       	ror	r24
    8758:	6a 95       	dec	r22
    875a:	e1 f7       	brne	.-8      	; 0x8754 <GetPrngNumber+0x22>
    875c:	84 27       	eor	r24, r20
    875e:	95 27       	eor	r25, r21
    8760:	82 27       	eor	r24, r18
    8762:	93 27       	eor	r25, r19
    8764:	a9 01       	movw	r20, r18
    8766:	75 e0       	ldi	r23, 0x05	; 5
    8768:	56 95       	lsr	r21
    876a:	47 95       	ror	r20
    876c:	7a 95       	dec	r23
    876e:	e1 f7       	brne	.-8      	; 0x8768 <GetPrngNumber+0x36>
    8770:	84 27       	eor	r24, r20
    8772:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8774:	99 27       	eor	r25, r25
    8776:	86 95       	lsr	r24
    8778:	97 95       	ror	r25
    877a:	88 27       	eor	r24, r24
    877c:	36 95       	lsr	r19
    877e:	27 95       	ror	r18
    8780:	82 2b       	or	r24, r18
    8782:	93 2b       	or	r25, r19
    8784:	90 93 cd 0c 	sts	0x0CCD, r25
    8788:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    878c:	08 95       	ret

0000878e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    878e:	fc 01       	movw	r30, r24
    8790:	67 87       	std	Z+15, r22	; 0x0f
    8792:	08 95       	ret

00008794 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8794:	e0 ed       	ldi	r30, 0xD0	; 208
    8796:	fc e0       	ldi	r31, 0x0C	; 12
    8798:	81 e0       	ldi	r24, 0x01	; 1
    879a:	91 e0       	ldi	r25, 0x01	; 1
    879c:	95 8b       	std	Z+21, r25	; 0x15
    879e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    87a0:	63 8b       	std	Z+19, r22	; 0x13
    87a2:	08 95       	ret

000087a4 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    87a4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    87a6:	90 81       	ld	r25, Z
    87a8:	9f 75       	andi	r25, 0x5F	; 95
    87aa:	90 83       	st	Z, r25
    87ac:	08 95       	ret

000087ae <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    87ae:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    87b0:	90 81       	ld	r25, Z
    87b2:	90 64       	ori	r25, 0x40	; 64
    87b4:	90 83       	st	Z, r25
    87b6:	08 95       	ret

000087b8 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    87b8:	fc 01       	movw	r30, r24
    87ba:	66 87       	std	Z+14, r22	; 0x0e
    87bc:	08 95       	ret

000087be <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    87be:	fc 01       	movw	r30, r24
    87c0:	62 87       	std	Z+10, r22	; 0x0a
    87c2:	08 95       	ret

000087c4 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    87c4:	fc 01       	movw	r30, r24
    87c6:	63 87       	std	Z+11, r22	; 0x0b
    87c8:	08 95       	ret

000087ca <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    87ca:	cf 93       	push	r28
    87cc:	df 93       	push	r29
    87ce:	ec 01       	movw	r28, r24
    87d0:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    87d2:	29 81       	ldd	r18, Y+1	; 0x01
    87d4:	30 e0       	ldi	r19, 0x00	; 0
    87d6:	f9 01       	movw	r30, r18
    87d8:	ee 0f       	add	r30, r30
    87da:	ff 1f       	adc	r31, r31
    87dc:	e8 5f       	subi	r30, 0xF8	; 248
    87de:	fe 46       	sbci	r31, 0x6E	; 110
    87e0:	65 91       	lpm	r22, Z+
    87e2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    87e4:	f9 01       	movw	r30, r18
    87e6:	e4 0f       	add	r30, r20
    87e8:	f1 1d       	adc	r31, r1
    87ea:	47 fd       	sbrc	r20, 7
    87ec:	fa 95       	dec	r31
    87ee:	ee 0f       	add	r30, r30
    87f0:	ff 1f       	adc	r31, r31
    87f2:	e8 5f       	subi	r30, 0xF8	; 248
    87f4:	fe 46       	sbci	r31, 0x6E	; 110
    87f6:	85 91       	lpm	r24, Z+
    87f8:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    87fa:	86 1b       	sub	r24, r22
    87fc:	97 0b       	sbc	r25, r23
    87fe:	68 85       	ldd	r22, Y+8	; 0x08
    8800:	70 e0       	ldi	r23, 0x00	; 0
    8802:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
	if(delta==0)delta++;
    8806:	61 15       	cp	r22, r1
    8808:	71 05       	cpc	r23, r1
    880a:	11 f4       	brne	.+4      	; 0x8810 <PatchCommand11+0x46>
    880c:	61 e0       	ldi	r22, 0x01	; 1
    880e:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8810:	ea 81       	ldd	r30, Y+2	; 0x02
    8812:	86 e0       	ldi	r24, 0x06	; 6
    8814:	e8 9f       	mul	r30, r24
    8816:	f0 01       	movw	r30, r0
    8818:	11 24       	eor	r1, r1
    881a:	e0 53       	subi	r30, 0x30	; 48
    881c:	f3 4f       	sbci	r31, 0xF3	; 243
    881e:	81 81       	ldd	r24, Z+1	; 0x01
    8820:	92 81       	ldd	r25, Z+2	; 0x02
    8822:	86 0f       	add	r24, r22
    8824:	97 1f       	adc	r25, r23
    8826:	92 83       	std	Z+2, r25	; 0x02
    8828:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    882a:	7e 83       	std	Y+6, r23	; 0x06
    882c:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    882e:	88 81       	ld	r24, Y
    8830:	88 60       	ori	r24, 0x08	; 8
    8832:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8834:	89 81       	ldd	r24, Y+1	; 0x01
    8836:	48 0f       	add	r20, r24
    8838:	4f 83       	std	Y+7, r20	; 0x07
}
    883a:	df 91       	pop	r29
    883c:	cf 91       	pop	r28
    883e:	08 95       	ret

00008840 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8840:	fc 01       	movw	r30, r24
    8842:	60 87       	std	Z+8, r22	; 0x08
    8844:	08 95       	ret

00008846 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8846:	fc 01       	movw	r30, r24
    8848:	64 83       	std	Z+4, r22	; 0x04
    884a:	08 95       	ret

0000884c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    884c:	fc 01       	movw	r30, r24
    884e:	82 81       	ldd	r24, Z+2	; 0x02
    8850:	0c 94 48 48 	jmp	0x9090	; 0x9090 <SetMixerWave>

00008854 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8854:	fc 01       	movw	r30, r24
	track->note+=param;
    8856:	91 81       	ldd	r25, Z+1	; 0x01
    8858:	69 0f       	add	r22, r25
    885a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    885c:	82 81       	ldd	r24, Z+2	; 0x02
    885e:	0c 94 31 48 	jmp	0x9062	; 0x9062 <SetMixerNote>

00008862 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8862:	fc 01       	movw	r30, r24
	track->note-=param;
    8864:	91 81       	ldd	r25, Z+1	; 0x01
    8866:	96 1b       	sub	r25, r22
    8868:	69 2f       	mov	r22, r25
    886a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    886c:	82 81       	ldd	r24, Z+2	; 0x02
    886e:	0c 94 31 48 	jmp	0x9062	; 0x9062 <SetMixerNote>

00008872 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8872:	1f 93       	push	r17
    8874:	cf 93       	push	r28
    8876:	df 93       	push	r29
    8878:	ec 01       	movw	r28, r24
    887a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    887c:	8a 81       	ldd	r24, Y+2	; 0x02
    887e:	0e 94 31 48 	call	0x9062	; 0x9062 <SetMixerNote>
	track->note=param;
    8882:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8884:	88 81       	ld	r24, Y
    8886:	87 7f       	andi	r24, 0xF7	; 247
    8888:	88 83       	st	Y, r24
}
    888a:	df 91       	pop	r29
    888c:	cf 91       	pop	r28
    888e:	1f 91       	pop	r17
    8890:	08 95       	ret

00008892 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8892:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8894:	14 96       	adiw	r26, 0x04	; 4
    8896:	8c 91       	ld	r24, X
    8898:	14 97       	sbiw	r26, 0x04	; 4
    889a:	88 23       	and	r24, r24
    889c:	19 f1       	breq	.+70     	; 0x88e4 <PatchCommand14+0x52>
    889e:	55 96       	adiw	r26, 0x15	; 21
    88a0:	2d 91       	ld	r18, X+
    88a2:	3c 91       	ld	r19, X
    88a4:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    88a6:	66 23       	and	r22, r22
    88a8:	79 f0       	breq	.+30     	; 0x88c8 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    88aa:	77 27       	eor	r23, r23
    88ac:	67 fd       	sbrc	r22, 7
    88ae:	70 95       	com	r23
    88b0:	6f 5f       	subi	r22, 0xFF	; 255
    88b2:	7f 4f       	sbci	r23, 0xFF	; 255
    88b4:	ab 01       	movw	r20, r22
    88b6:	44 0f       	add	r20, r20
    88b8:	55 1f       	adc	r21, r21
    88ba:	64 0f       	add	r22, r20
    88bc:	75 1f       	adc	r23, r21
    88be:	26 1b       	sub	r18, r22
    88c0:	37 0b       	sbc	r19, r23
    88c2:	09 c0       	rjmp	.+18     	; 0x88d6 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    88c4:	ef 3f       	cpi	r30, 0xFF	; 255
    88c6:	39 f0       	breq	.+14     	; 0x88d6 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    88c8:	23 50       	subi	r18, 0x03	; 3
    88ca:	31 09       	sbc	r19, r1
    88cc:	f9 01       	movw	r30, r18
    88ce:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    88d0:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    88d2:	ed 30       	cpi	r30, 0x0D	; 13
    88d4:	b9 f7       	brne	.-18     	; 0x88c4 <PatchCommand14+0x32>
    88d6:	56 96       	adiw	r26, 0x16	; 22
    88d8:	3c 93       	st	X, r19
    88da:	2e 93       	st	-X, r18
    88dc:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    88de:	81 50       	subi	r24, 0x01	; 1
    88e0:	14 96       	adiw	r26, 0x04	; 4
    88e2:	8c 93       	st	X, r24
    88e4:	08 95       	ret

000088e6 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    88e6:	90 93 7b 0d 	sts	0x0D7B, r25
    88ea:	80 93 7a 0d 	sts	0x0D7A, r24

	masterVolume=DEFAULT_MASTER_VOL;
    88ee:	8f e6       	ldi	r24, 0x6F	; 111
    88f0:	80 93 7d 0d 	sts	0x0D7D, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    88f4:	10 92 ce 0c 	sts	0x0CCE, r1
    88f8:	e5 e1       	ldi	r30, 0x15	; 21
    88fa:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    88fc:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    88fe:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8900:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8902:	28 e1       	ldi	r18, 0x18	; 24
    8904:	df 01       	movw	r26, r30
    8906:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8908:	8c 93       	st	X, r24
    890a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    890c:	9c 93       	st	X, r25
    890e:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8910:	1c 92       	st	X, r1
    8912:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8914:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8916:	10 82       	st	Z, r1
    8918:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    891a:	2c 93       	st	X, r18
    891c:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    891e:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8920:	8f 5f       	subi	r24, 0xFF	; 255
    8922:	77 96       	adiw	r30, 0x17	; 23
    8924:	85 30       	cpi	r24, 0x05	; 5
    8926:	71 f7       	brne	.-36     	; 0x8904 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8928:	08 95       	ret

0000892a <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    892a:	e5 e0       	ldi	r30, 0x05	; 5
    892c:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    892e:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8930:	20 81       	ld	r18, Z
    8932:	2f 77       	andi	r18, 0x7F	; 127
    8934:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8936:	33 83       	std	Z+3, r19	; 0x03
    8938:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    893a:	2d e0       	ldi	r18, 0x0D	; 13
    893c:	e8 37       	cpi	r30, 0x78	; 120
    893e:	f2 07       	cpc	r31, r18
    8940:	b9 f7       	brne	.-18     	; 0x8930 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8942:	01 96       	adiw	r24, 0x01	; 1
    8944:	90 93 82 0d 	sts	0x0D82, r25
    8948:	80 93 81 0d 	sts	0x0D81, r24
		songStart=song+1;//skip first delta-time
    894c:	90 93 04 0d 	sts	0x0D04, r25
    8950:	80 93 03 0d 	sts	0x0D03, r24
		loopStart=song+1;
    8954:	90 93 84 0d 	sts	0x0D84, r25
    8958:	80 93 83 0d 	sts	0x0D83, r24
		nextDeltaTime=0;
    895c:	10 92 7f 0d 	sts	0x0D7F, r1
    8960:	10 92 7e 0d 	sts	0x0D7E, r1
		currDeltaTime=0;
    8964:	10 92 79 0d 	sts	0x0D79, r1
    8968:	10 92 78 0d 	sts	0x0D78, r1
		songSpeed=0;
    896c:	10 92 80 0d 	sts	0x0D80, r1

		lastStatus=0;
    8970:	10 92 7c 0d 	sts	0x0D7C, r1
		playSong=true;
    8974:	81 e0       	ldi	r24, 0x01	; 1
    8976:	80 93 ce 0c 	sts	0x0CCE, r24
    897a:	08 95       	ret

0000897c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    897c:	e5 e0       	ldi	r30, 0x05	; 5
    897e:	fd e0       	ldi	r31, 0x0D	; 13
    8980:	8a ef       	ldi	r24, 0xFA	; 250
    8982:	87 87       	std	Z+15, r24	; 0x0f
    8984:	86 a3       	std	Z+38, r24	; 0x26
    8986:	80 93 42 0d 	sts	0x0D42, r24
    898a:	80 93 59 0d 	sts	0x0D59, r24
    898e:	80 93 70 0d 	sts	0x0D70, r24
	}

	playSong=false;
    8992:	10 92 ce 0c 	sts	0x0CCE, r1
    8996:	08 95       	ret

00008998 <ResumeSong>:
}


void ResumeSong(){
	playSong=true;
    8998:	81 e0       	ldi	r24, 0x01	; 1
    899a:	80 93 ce 0c 	sts	0x0CCE, r24
    899e:	08 95       	ret

000089a0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    89a0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    89a2:	ed 91       	ld	r30, X+
    89a4:	fc 91       	ld	r31, X
    89a6:	11 97       	sbiw	r26, 0x01	; 1
    89a8:	9f 01       	movw	r18, r30
    89aa:	2f 5f       	subi	r18, 0xFF	; 255
    89ac:	3f 4f       	sbci	r19, 0xFF	; 255
    89ae:	11 96       	adiw	r26, 0x01	; 1
    89b0:	3c 93       	st	X, r19
    89b2:	2e 93       	st	-X, r18
    89b4:	e4 91       	lpm	r30, Z
    89b6:	e7 fd       	sbrc	r30, 7
    89b8:	03 c0       	rjmp	.+6      	; 0x89c0 <ReadVarLen+0x20>
    89ba:	8e 2f       	mov	r24, r30
    89bc:	90 e0       	ldi	r25, 0x00	; 0
    89be:	08 95       	ret
    {
       value &= 0x7F;
    89c0:	ef 77       	andi	r30, 0x7F	; 127
    89c2:	8e 2f       	mov	r24, r30
    89c4:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    89c6:	96 95       	lsr	r25
    89c8:	98 2f       	mov	r25, r24
    89ca:	88 27       	eor	r24, r24
    89cc:	97 95       	ror	r25
    89ce:	87 95       	ror	r24
    89d0:	2f 5f       	subi	r18, 0xFF	; 255
    89d2:	3f 4f       	sbci	r19, 0xFF	; 255
    89d4:	f9 01       	movw	r30, r18
    89d6:	31 97       	sbiw	r30, 0x01	; 1
    89d8:	e4 91       	lpm	r30, Z
    89da:	4e 2f       	mov	r20, r30
    89dc:	4f 77       	andi	r20, 0x7F	; 127
    89de:	84 0f       	add	r24, r20
    89e0:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    89e2:	e7 fd       	sbrc	r30, 7
    89e4:	f0 cf       	rjmp	.-32     	; 0x89c6 <ReadVarLen+0x26>
    89e6:	2d 93       	st	X+, r18
    89e8:	3c 93       	st	X, r19
    }


    return value;
}
    89ea:	08 95       	ret

000089ec <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    89ec:	ef 92       	push	r14
    89ee:	ff 92       	push	r15
    89f0:	0f 93       	push	r16
    89f2:	1f 93       	push	r17
    89f4:	cf 93       	push	r28
    89f6:	df 93       	push	r29
    89f8:	1f 92       	push	r1
    89fa:	cd b7       	in	r28, 0x3d	; 61
    89fc:	de b7       	in	r29, 0x3e	; 62
    89fe:	7c 01       	movw	r14, r24
    8a00:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8a02:	fc 01       	movw	r30, r24
    8a04:	80 81       	ld	r24, Z
    8a06:	08 2f       	mov	r16, r24
    8a08:	00 1f       	adc	r16, r16
    8a0a:	00 27       	eor	r16, r16
    8a0c:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8a0e:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8a10:	9f ef       	ldi	r25, 0xFF	; 255
    8a12:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8a14:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8a16:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8a18:	87 7b       	andi	r24, 0xB7	; 183
    8a1a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8a1c:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8a1e:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8a20:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8a22:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8a24:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8a26:	82 81       	ldd	r24, Z+2	; 0x02
    8a28:	83 30       	cpi	r24, 0x03	; 3
    8a2a:	69 f4       	brne	.+26     	; 0x8a46 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8a2c:	01 11       	cpse	r16, r1
    8a2e:	01 c0       	rjmp	.+2      	; 0x8a32 <TriggerCommon+0x46>
    8a30:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8a32:	81 e0       	ldi	r24, 0x01	; 1
    8a34:	91 e0       	ldi	r25, 0x01	; 1
    8a36:	90 93 e5 0c 	sts	0x0CE5, r25
    8a3a:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8a3e:	81 e0       	ldi	r24, 0x01	; 1
    8a40:	80 93 e3 0c 	sts	0x0CE3, r24
    8a44:	39 c0       	rjmp	.+114    	; 0x8ab8 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8a46:	84 30       	cpi	r24, 0x04	; 4
    8a48:	69 f5       	brne	.+90     	; 0x8aa4 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8a4a:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8a4e:	80 91 7a 0d 	lds	r24, 0x0D7A
    8a52:	90 91 7b 0d 	lds	r25, 0x0D7B
    8a56:	f9 e0       	ldi	r31, 0x09	; 9
    8a58:	6f 9f       	mul	r22, r31
    8a5a:	80 0d       	add	r24, r0
    8a5c:	91 1d       	adc	r25, r1
    8a5e:	11 24       	eor	r1, r1
    8a60:	fc 01       	movw	r30, r24
    8a62:	31 96       	adiw	r30, 0x01	; 1
    8a64:	a5 91       	lpm	r26, Z+
    8a66:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8a68:	b0 93 ed 0c 	sts	0x0CED, r27
    8a6c:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8a70:	ac 01       	movw	r20, r24
    8a72:	49 5f       	subi	r20, 0xF9	; 249
    8a74:	5f 4f       	sbci	r21, 0xFF	; 255
    8a76:	fa 01       	movw	r30, r20
    8a78:	65 91       	lpm	r22, Z+
    8a7a:	74 91       	lpm	r23, Z
    8a7c:	05 96       	adiw	r24, 0x05	; 5
    8a7e:	fc 01       	movw	r30, r24
    8a80:	85 91       	lpm	r24, Z+
    8a82:	94 91       	lpm	r25, Z
    8a84:	68 1b       	sub	r22, r24
    8a86:	79 0b       	sbc	r23, r25
    8a88:	70 93 ef 0c 	sts	0x0CEF, r23
    8a8c:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8a90:	fa 01       	movw	r30, r20
    8a92:	85 91       	lpm	r24, Z+
    8a94:	94 91       	lpm	r25, Z
    8a96:	a8 0f       	add	r26, r24
    8a98:	b9 1f       	adc	r27, r25
    8a9a:	b0 93 f1 0c 	sts	0x0CF1, r27
    8a9e:	a0 93 f0 0c 	sts	0x0CF0, r26
    8aa2:	05 c0       	rjmp	.+10     	; 0x8aae <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8aa4:	60 e0       	ldi	r22, 0x00	; 0
    8aa6:	29 83       	std	Y+1, r18	; 0x01
    8aa8:	0e 94 48 48 	call	0x9090	; 0x9090 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8aac:	29 81       	ldd	r18, Y+1	; 0x01
    8aae:	62 2f       	mov	r22, r18
    8ab0:	f7 01       	movw	r30, r14
    8ab2:	82 81       	ldd	r24, Z+2	; 0x02
    8ab4:	0e 94 31 48 	call	0x9062	; 0x9062 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8ab8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8aba:	00 23       	and	r16, r16
    8abc:	11 f0       	breq	.+4      	; 0x8ac2 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8abe:	11 8b       	std	Z+17, r17	; 0x11
    8ac0:	01 c0       	rjmp	.+2      	; 0x8ac4 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8ac2:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8ac4:	e0 91 7a 0d 	lds	r30, 0x0D7A
    8ac8:	f0 91 7b 0d 	lds	r31, 0x0D7B
    8acc:	39 e0       	ldi	r19, 0x09	; 9
    8ace:	13 9f       	mul	r17, r19
    8ad0:	e0 0d       	add	r30, r0
    8ad2:	f1 1d       	adc	r31, r1
    8ad4:	11 24       	eor	r1, r1
    8ad6:	33 96       	adiw	r30, 0x03	; 3
    8ad8:	85 91       	lpm	r24, Z+
    8ada:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8adc:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8ade:	00 97       	sbiw	r24, 0x00	; 0
    8ae0:	19 f4       	brne	.+6      	; 0x8ae8 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8ae2:	16 8a       	std	Z+22, r1	; 0x16
    8ae4:	15 8a       	std	Z+21, r1	; 0x15
    8ae6:	08 c0       	rjmp	.+16     	; 0x8af8 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8ae8:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8aea:	fc 01       	movw	r30, r24
    8aec:	24 91       	lpm	r18, Z
    8aee:	f7 01       	movw	r30, r14
    8af0:	22 8b       	std	Z+18, r18	; 0x12
    8af2:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8af4:	96 8b       	std	Z+22, r25	; 0x16
    8af6:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8af8:	0f 90       	pop	r0
    8afa:	df 91       	pop	r29
    8afc:	cf 91       	pop	r28
    8afe:	1f 91       	pop	r17
    8b00:	0f 91       	pop	r16
    8b02:	ff 90       	pop	r15
    8b04:	ef 90       	pop	r14
    8b06:	08 95       	ret

00008b08 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8b08:	cf 93       	push	r28
    8b0a:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8b0c:	e0 91 7a 0d 	lds	r30, 0x0D7A
    8b10:	f0 91 7b 0d 	lds	r31, 0x0D7B
    8b14:	99 e0       	ldi	r25, 0x09	; 9
    8b16:	89 9f       	mul	r24, r25
    8b18:	e0 0d       	add	r30, r0
    8b1a:	f1 1d       	adc	r31, r1
    8b1c:	11 24       	eor	r1, r1
    8b1e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8b20:	e1 30       	cpi	r30, 0x01	; 1
    8b22:	e9 f0       	breq	.+58     	; 0x8b5e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8b24:	e2 30       	cpi	r30, 0x02	; 2
    8b26:	e9 f0       	breq	.+58     	; 0x8b62 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8b28:	20 91 1c 0d 	lds	r18, 0x0D1C
    8b2c:	27 ff       	sbrs	r18, 7
    8b2e:	1d c0       	rjmp	.+58     	; 0x8b6a <TriggerFx+0x62>
    8b30:	20 91 2d 0d 	lds	r18, 0x0D2D
    8b34:	28 13       	cpse	r18, r24
    8b36:	02 c0       	rjmp	.+4      	; 0x8b3c <TriggerFx+0x34>
    8b38:	41 11       	cpse	r20, r1
    8b3a:	17 c0       	rjmp	.+46     	; 0x8b6a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8b3c:	20 91 33 0d 	lds	r18, 0x0D33
    8b40:	27 ff       	sbrs	r18, 7
    8b42:	11 c0       	rjmp	.+34     	; 0x8b66 <TriggerFx+0x5e>
    8b44:	20 91 44 0d 	lds	r18, 0x0D44
    8b48:	28 13       	cpse	r18, r24
    8b4a:	02 c0       	rjmp	.+4      	; 0x8b50 <TriggerFx+0x48>
    8b4c:	41 11       	cpse	r20, r1
    8b4e:	0b c0       	rjmp	.+22     	; 0x8b66 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8b50:	20 91 30 0d 	lds	r18, 0x0D30
    8b54:	90 91 47 0d 	lds	r25, 0x0D47
    8b58:	92 17       	cp	r25, r18
    8b5a:	28 f4       	brcc	.+10     	; 0x8b66 <TriggerFx+0x5e>
    8b5c:	06 c0       	rjmp	.+12     	; 0x8b6a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8b5e:	c3 e0       	ldi	r28, 0x03	; 3
    8b60:	05 c0       	rjmp	.+10     	; 0x8b6c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8b62:	c4 e0       	ldi	r28, 0x04	; 4
    8b64:	03 c0       	rjmp	.+6      	; 0x8b6c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8b66:	c2 e0       	ldi	r28, 0x02	; 2
    8b68:	01 c0       	rjmp	.+2      	; 0x8b6c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8b6a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8b6c:	97 e1       	ldi	r25, 0x17	; 23
    8b6e:	c9 9f       	mul	r28, r25
    8b70:	e0 01       	movw	r28, r0
    8b72:	11 24       	eor	r1, r1
    8b74:	cb 5f       	subi	r28, 0xFB	; 251
    8b76:	d2 4f       	sbci	r29, 0xF2	; 242
    8b78:	90 e8       	ldi	r25, 0x80	; 128
    8b7a:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8b7c:	1e 8a       	std	Y+22, r1	; 0x16
    8b7e:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8b80:	20 e5       	ldi	r18, 0x50	; 80
    8b82:	46 2f       	mov	r20, r22
    8b84:	68 2f       	mov	r22, r24
    8b86:	ce 01       	movw	r24, r28
    8b88:	0e 94 f6 44 	call	0x89ec	; 0x89ec <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8b8c:	88 81       	ld	r24, Y
    8b8e:	80 62       	ori	r24, 0x20	; 32
    8b90:	88 83       	st	Y, r24
}
    8b92:	df 91       	pop	r29
    8b94:	cf 91       	pop	r28
    8b96:	08 95       	ret

00008b98 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8b98:	cf 93       	push	r28
    8b9a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8b9c:	a8 2f       	mov	r26, r24
    8b9e:	b0 e0       	ldi	r27, 0x00	; 0
    8ba0:	97 e1       	ldi	r25, 0x17	; 23
    8ba2:	89 9f       	mul	r24, r25
    8ba4:	f0 01       	movw	r30, r0
    8ba6:	11 24       	eor	r1, r1
    8ba8:	eb 5f       	subi	r30, 0xFB	; 251
    8baa:	f2 4f       	sbci	r31, 0xF2	; 242
    8bac:	80 81       	ld	r24, Z
    8bae:	85 ff       	sbrs	r24, 5
    8bb0:	02 c0       	rjmp	.+4      	; 0x8bb6 <TriggerNote+0x1e>
    8bb2:	87 fd       	sbrc	r24, 7
    8bb4:	2e c0       	rjmp	.+92     	; 0x8c12 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8bb6:	21 11       	cpse	r18, r1
    8bb8:	18 c0       	rjmp	.+48     	; 0x8bea <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8bba:	97 e1       	ldi	r25, 0x17	; 23
    8bbc:	9a 9f       	mul	r25, r26
    8bbe:	f0 01       	movw	r30, r0
    8bc0:	9b 9f       	mul	r25, r27
    8bc2:	f0 0d       	add	r31, r0
    8bc4:	11 24       	eor	r1, r1
    8bc6:	eb 5f       	subi	r30, 0xFB	; 251
    8bc8:	f2 4f       	sbci	r31, 0xF2	; 242
    8bca:	97 85       	ldd	r25, Z+15	; 0x0f
    8bcc:	91 11       	cpse	r25, r1
    8bce:	02 c0       	rjmp	.+4      	; 0x8bd4 <TriggerNote+0x3c>
    8bd0:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8bd2:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8bd4:	97 e1       	ldi	r25, 0x17	; 23
    8bd6:	9a 9f       	mul	r25, r26
    8bd8:	f0 01       	movw	r30, r0
    8bda:	9b 9f       	mul	r25, r27
    8bdc:	f0 0d       	add	r31, r0
    8bde:	11 24       	eor	r1, r1
    8be0:	eb 5f       	subi	r30, 0xFB	; 251
    8be2:	f2 4f       	sbci	r31, 0xF2	; 242
    8be4:	8f 7b       	andi	r24, 0xBF	; 191
    8be6:	80 83       	st	Z, r24
    8be8:	14 c0       	rjmp	.+40     	; 0x8c12 <TriggerNote+0x7a>
    8bea:	82 2f       	mov	r24, r18
    8bec:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8bee:	97 e1       	ldi	r25, 0x17	; 23
    8bf0:	9a 9f       	mul	r25, r26
    8bf2:	e0 01       	movw	r28, r0
    8bf4:	9b 9f       	mul	r25, r27
    8bf6:	d0 0d       	add	r29, r0
    8bf8:	11 24       	eor	r1, r1
    8bfa:	cb 5f       	subi	r28, 0xFB	; 251
    8bfc:	d2 4f       	sbci	r29, 0xF2	; 242
    8bfe:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8c00:	1e 8a       	std	Y+22, r1	; 0x16
    8c02:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8c04:	48 2f       	mov	r20, r24
    8c06:	ce 01       	movw	r24, r28
    8c08:	0e 94 f6 44 	call	0x89ec	; 0x89ec <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8c0c:	88 81       	ld	r24, Y
    8c0e:	80 62       	ori	r24, 0x20	; 32
    8c10:	88 83       	st	Y, r24
		}

	}
}
    8c12:	df 91       	pop	r29
    8c14:	cf 91       	pop	r28
    8c16:	08 95       	ret

00008c18 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8c18:	6f 92       	push	r6
    8c1a:	7f 92       	push	r7
    8c1c:	8f 92       	push	r8
    8c1e:	9f 92       	push	r9
    8c20:	af 92       	push	r10
    8c22:	bf 92       	push	r11
    8c24:	cf 92       	push	r12
    8c26:	df 92       	push	r13
    8c28:	ef 92       	push	r14
    8c2a:	ff 92       	push	r15
    8c2c:	0f 93       	push	r16
    8c2e:	1f 93       	push	r17
    8c30:	cf 93       	push	r28
    8c32:	df 93       	push	r29
    8c34:	c5 e0       	ldi	r28, 0x05	; 5
    8c36:	dd e0       	ldi	r29, 0x0D	; 13
    8c38:	00 ed       	ldi	r16, 0xD0	; 208
    8c3a:	1c e0       	ldi	r17, 0x0C	; 12
    8c3c:	d8 01       	movw	r26, r16
    8c3e:	9e 01       	movw	r18, r28
    8c40:	40 e0       	ldi	r20, 0x00	; 0
    8c42:	50 e0       	ldi	r21, 0x00	; 0
    8c44:	ca 01       	movw	r24, r20
    8c46:	8b 5f       	subi	r24, 0xFB	; 251
    8c48:	92 4f       	sbci	r25, 0xF2	; 242
    8c4a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8c4c:	fc 01       	movw	r30, r24
    8c4e:	87 85       	ldd	r24, Z+15	; 0x0f
    8c50:	88 23       	and	r24, r24
    8c52:	91 f0       	breq	.+36     	; 0x8c78 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8c54:	66 85       	ldd	r22, Z+14	; 0x0e
    8c56:	99 27       	eor	r25, r25
    8c58:	87 fd       	sbrc	r24, 7
    8c5a:	90 95       	com	r25
    8c5c:	86 0f       	add	r24, r22
    8c5e:	91 1d       	adc	r25, r1
    8c60:	8f 3f       	cpi	r24, 0xFF	; 255
    8c62:	91 05       	cpc	r25, r1
    8c64:	19 f0       	breq	.+6      	; 0x8c6c <ProcessMusic+0x54>
    8c66:	14 f0       	brlt	.+4      	; 0x8c6c <ProcessMusic+0x54>
    8c68:	8f ef       	ldi	r24, 0xFF	; 255
    8c6a:	90 e0       	ldi	r25, 0x00	; 0
    8c6c:	97 ff       	sbrs	r25, 7
    8c6e:	02 c0       	rjmp	.+4      	; 0x8c74 <ProcessMusic+0x5c>
    8c70:	80 e0       	ldi	r24, 0x00	; 0
    8c72:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8c74:	f6 01       	movw	r30, r12
    8c76:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8c78:	f9 01       	movw	r30, r18
    8c7a:	f0 80       	ld	r15, Z
    8c7c:	f3 fe       	sbrs	r15, 3
    8c7e:	2a c0       	rjmp	.+84     	; 0x8cd4 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8c80:	65 81       	ldd	r22, Z+5	; 0x05
    8c82:	76 81       	ldd	r23, Z+6	; 0x06
    8c84:	11 96       	adiw	r26, 0x01	; 1
    8c86:	8d 91       	ld	r24, X+
    8c88:	9c 91       	ld	r25, X
    8c8a:	12 97       	sbiw	r26, 0x02	; 2
    8c8c:	86 0f       	add	r24, r22
    8c8e:	97 1f       	adc	r25, r23
    8c90:	12 96       	adiw	r26, 0x02	; 2
    8c92:	9c 93       	st	X, r25
    8c94:	8e 93       	st	-X, r24
    8c96:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8c98:	f6 01       	movw	r30, r12
    8c9a:	e7 80       	ldd	r14, Z+7	; 0x07
    8c9c:	ee 2d       	mov	r30, r14
    8c9e:	f0 e0       	ldi	r31, 0x00	; 0
    8ca0:	ee 0f       	add	r30, r30
    8ca2:	ff 1f       	adc	r31, r31
    8ca4:	e8 5f       	subi	r30, 0xF8	; 248
    8ca6:	fe 46       	sbci	r31, 0x6E	; 110
    8ca8:	c5 90       	lpm	r12, Z+
    8caa:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8cac:	16 16       	cp	r1, r22
    8cae:	17 06       	cpc	r1, r23
    8cb0:	24 f4       	brge	.+8      	; 0x8cba <ProcessMusic+0xa2>
    8cb2:	8c 15       	cp	r24, r12
    8cb4:	9d 05       	cpc	r25, r13
    8cb6:	30 f4       	brcc	.+12     	; 0x8cc4 <ProcessMusic+0xac>
    8cb8:	0d c0       	rjmp	.+26     	; 0x8cd4 <ProcessMusic+0xbc>
    8cba:	67 2b       	or	r22, r23
    8cbc:	59 f0       	breq	.+22     	; 0x8cd4 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8cbe:	c8 16       	cp	r12, r24
    8cc0:	d9 06       	cpc	r13, r25
    8cc2:	40 f0       	brcs	.+16     	; 0x8cd4 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8cc4:	12 96       	adiw	r26, 0x02	; 2
    8cc6:	dc 92       	st	X, r13
    8cc8:	ce 92       	st	-X, r12
    8cca:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8ccc:	8f 2d       	mov	r24, r15
    8cce:	87 7f       	andi	r24, 0xF7	; 247
    8cd0:	f9 01       	movw	r30, r18
    8cd2:	80 83       	st	Z, r24
    8cd4:	49 5e       	subi	r20, 0xE9	; 233
    8cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd8:	29 5e       	subi	r18, 0xE9	; 233
    8cda:	3f 4f       	sbci	r19, 0xFF	; 255
    8cdc:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8cde:	43 37       	cpi	r20, 0x73	; 115
    8ce0:	51 05       	cpc	r21, r1
    8ce2:	09 f0       	breq	.+2      	; 0x8ce6 <ProcessMusic+0xce>
    8ce4:	af cf       	rjmp	.-162    	; 0x8c44 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8ce6:	80 91 ce 0c 	lds	r24, 0x0CCE
    8cea:	88 23       	and	r24, r24
    8cec:	09 f4       	brne	.+2      	; 0x8cf0 <ProcessMusic+0xd8>
    8cee:	cc c0       	rjmp	.+408    	; 0x8e88 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8cf0:	57 e1       	ldi	r21, 0x17	; 23
    8cf2:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8cf4:	80 91 78 0d 	lds	r24, 0x0D78
    8cf8:	90 91 79 0d 	lds	r25, 0x0D79
    8cfc:	20 91 7e 0d 	lds	r18, 0x0D7E
    8d00:	30 91 7f 0d 	lds	r19, 0x0D7F
    8d04:	82 17       	cp	r24, r18
    8d06:	93 07       	cpc	r25, r19
    8d08:	09 f0       	breq	.+2      	; 0x8d0c <ProcessMusic+0xf4>
    8d0a:	b9 c0       	rjmp	.+370    	; 0x8e7e <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8d0c:	20 91 81 0d 	lds	r18, 0x0D81
    8d10:	30 91 82 0d 	lds	r19, 0x0D82
    8d14:	b9 01       	movw	r22, r18
    8d16:	6f 5f       	subi	r22, 0xFF	; 255
    8d18:	7f 4f       	sbci	r23, 0xFF	; 255
    8d1a:	70 93 82 0d 	sts	0x0D82, r23
    8d1e:	60 93 81 0d 	sts	0x0D81, r22
    8d22:	f9 01       	movw	r30, r18
    8d24:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8d26:	4f 3f       	cpi	r20, 0xFF	; 255
    8d28:	79 f5       	brne	.+94     	; 0x8d88 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8d2a:	a9 01       	movw	r20, r18
    8d2c:	4e 5f       	subi	r20, 0xFE	; 254
    8d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d30:	50 93 82 0d 	sts	0x0D82, r21
    8d34:	40 93 81 0d 	sts	0x0D81, r20
    8d38:	fb 01       	movw	r30, r22
    8d3a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8d3c:	6f 32       	cpi	r22, 0x2F	; 47
    8d3e:	19 f4       	brne	.+6      	; 0x8d46 <ProcessMusic+0x12e>
						playSong=false;
    8d40:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    8d44:	9c c0       	rjmp	.+312    	; 0x8e7e <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8d46:	66 30       	cpi	r22, 0x06	; 6
    8d48:	09 f0       	breq	.+2      	; 0x8d4c <ProcessMusic+0x134>
    8d4a:	8c c0       	rjmp	.+280    	; 0x8e64 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8d4c:	fa 01       	movw	r30, r20
    8d4e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8d50:	c9 01       	movw	r24, r18
    8d52:	04 96       	adiw	r24, 0x04	; 4
    8d54:	90 93 82 0d 	sts	0x0D82, r25
    8d58:	80 93 81 0d 	sts	0x0D81, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8d5c:	f9 01       	movw	r30, r18
    8d5e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8d60:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8d62:	e3 35       	cpi	r30, 0x53	; 83
    8d64:	29 f4       	brne	.+10     	; 0x8d70 <ProcessMusic+0x158>
							loopStart=songPos;
    8d66:	90 93 84 0d 	sts	0x0D84, r25
    8d6a:	80 93 83 0d 	sts	0x0D83, r24
    8d6e:	7a c0       	rjmp	.+244    	; 0x8e64 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8d70:	e5 34       	cpi	r30, 0x45	; 69
    8d72:	09 f0       	breq	.+2      	; 0x8d76 <ProcessMusic+0x15e>
    8d74:	77 c0       	rjmp	.+238    	; 0x8e64 <ProcessMusic+0x24c>
							songPos=loopStart;
    8d76:	80 91 83 0d 	lds	r24, 0x0D83
    8d7a:	90 91 84 0d 	lds	r25, 0x0D84
    8d7e:	90 93 82 0d 	sts	0x0D82, r25
    8d82:	80 93 81 0d 	sts	0x0D81, r24
    8d86:	6e c0       	rjmp	.+220    	; 0x8e64 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8d88:	47 fd       	sbrc	r20, 7
    8d8a:	40 93 7c 0d 	sts	0x0D7C, r20
					channel=lastStatus&0x0f;
    8d8e:	90 91 7c 0d 	lds	r25, 0x0D7C
    8d92:	89 2f       	mov	r24, r25
    8d94:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8d96:	47 ff       	sbrs	r20, 7
    8d98:	08 c0       	rjmp	.+16     	; 0x8daa <ProcessMusic+0x192>
    8d9a:	2e 5f       	subi	r18, 0xFE	; 254
    8d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    8d9e:	30 93 82 0d 	sts	0x0D82, r19
    8da2:	20 93 81 0d 	sts	0x0D81, r18
    8da6:	fb 01       	movw	r30, r22
    8da8:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8daa:	90 7f       	andi	r25, 0xF0	; 240
    8dac:	90 3b       	cpi	r25, 0xB0	; 176
    8dae:	e1 f0       	breq	.+56     	; 0x8de8 <ProcessMusic+0x1d0>
    8db0:	90 3c       	cpi	r25, 0xC0	; 192
    8db2:	09 f4       	brne	.+2      	; 0x8db6 <ProcessMusic+0x19e>
    8db4:	51 c0       	rjmp	.+162    	; 0x8e58 <ProcessMusic+0x240>
    8db6:	90 39       	cpi	r25, 0x90	; 144
    8db8:	09 f0       	breq	.+2      	; 0x8dbc <ProcessMusic+0x1a4>
    8dba:	54 c0       	rjmp	.+168    	; 0x8e64 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8dbc:	e0 91 81 0d 	lds	r30, 0x0D81
    8dc0:	f0 91 82 0d 	lds	r31, 0x0D82
    8dc4:	9f 01       	movw	r18, r30
    8dc6:	2f 5f       	subi	r18, 0xFF	; 255
    8dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    8dca:	30 93 82 0d 	sts	0x0D82, r19
    8dce:	20 93 81 0d 	sts	0x0D81, r18
    8dd2:	24 91       	lpm	r18, Z
    8dd4:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8dd6:	f8 9e       	mul	r15, r24
    8dd8:	f0 01       	movw	r30, r0
    8dda:	11 24       	eor	r1, r1
    8ddc:	eb 5f       	subi	r30, 0xFB	; 251
    8dde:	f2 4f       	sbci	r31, 0xF2	; 242
    8de0:	60 89       	ldd	r22, Z+16	; 0x10
    8de2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <TriggerNote>
    8de6:	3e c0       	rjmp	.+124    	; 0x8e64 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8de8:	e0 91 81 0d 	lds	r30, 0x0D81
    8dec:	f0 91 82 0d 	lds	r31, 0x0D82
    8df0:	9f 01       	movw	r18, r30
    8df2:	2f 5f       	subi	r18, 0xFF	; 255
    8df4:	3f 4f       	sbci	r19, 0xFF	; 255
    8df6:	30 93 82 0d 	sts	0x0D82, r19
    8dfa:	20 93 81 0d 	sts	0x0D81, r18
    8dfe:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8e00:	47 30       	cpi	r20, 0x07	; 7
    8e02:	49 f4       	brne	.+18     	; 0x8e16 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8e04:	f8 9e       	mul	r15, r24
    8e06:	d0 01       	movw	r26, r0
    8e08:	11 24       	eor	r1, r1
    8e0a:	ab 5f       	subi	r26, 0xFB	; 251
    8e0c:	b2 4f       	sbci	r27, 0xF2	; 242
    8e0e:	ee 0f       	add	r30, r30
    8e10:	1c 96       	adiw	r26, 0x0c	; 12
    8e12:	ec 93       	st	X, r30
    8e14:	27 c0       	rjmp	.+78     	; 0x8e64 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8e16:	4b 30       	cpi	r20, 0x0B	; 11
    8e18:	49 f4       	brne	.+18     	; 0x8e2c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8e1a:	f8 9e       	mul	r15, r24
    8e1c:	d0 01       	movw	r26, r0
    8e1e:	11 24       	eor	r1, r1
    8e20:	ab 5f       	subi	r26, 0xFB	; 251
    8e22:	b2 4f       	sbci	r27, 0xF2	; 242
    8e24:	ee 0f       	add	r30, r30
    8e26:	13 96       	adiw	r26, 0x03	; 3
    8e28:	ec 93       	st	X, r30
    8e2a:	1c c0       	rjmp	.+56     	; 0x8e64 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8e2c:	4c 35       	cpi	r20, 0x5C	; 92
    8e2e:	49 f4       	brne	.+18     	; 0x8e42 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8e30:	f8 9e       	mul	r15, r24
    8e32:	d0 01       	movw	r26, r0
    8e34:	11 24       	eor	r1, r1
    8e36:	ab 5f       	subi	r26, 0xFB	; 251
    8e38:	b2 4f       	sbci	r27, 0xF2	; 242
    8e3a:	ee 0f       	add	r30, r30
    8e3c:	1a 96       	adiw	r26, 0x0a	; 10
    8e3e:	ec 93       	st	X, r30
    8e40:	11 c0       	rjmp	.+34     	; 0x8e64 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8e42:	44 36       	cpi	r20, 0x64	; 100
    8e44:	79 f4       	brne	.+30     	; 0x8e64 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8e46:	f8 9e       	mul	r15, r24
    8e48:	d0 01       	movw	r26, r0
    8e4a:	11 24       	eor	r1, r1
    8e4c:	ab 5f       	subi	r26, 0xFB	; 251
    8e4e:	b2 4f       	sbci	r27, 0xF2	; 242
    8e50:	ee 0f       	add	r30, r30
    8e52:	1b 96       	adiw	r26, 0x0b	; 11
    8e54:	ec 93       	st	X, r30
    8e56:	06 c0       	rjmp	.+12     	; 0x8e64 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8e58:	f8 9e       	mul	r15, r24
    8e5a:	f0 01       	movw	r30, r0
    8e5c:	11 24       	eor	r1, r1
    8e5e:	eb 5f       	subi	r30, 0xFB	; 251
    8e60:	f2 4f       	sbci	r31, 0xF2	; 242
    8e62:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8e64:	81 e8       	ldi	r24, 0x81	; 129
    8e66:	9d e0       	ldi	r25, 0x0D	; 13
    8e68:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <ReadVarLen>
    8e6c:	90 93 7f 0d 	sts	0x0D7F, r25
    8e70:	80 93 7e 0d 	sts	0x0D7E, r24
				currDeltaTime=0;
    8e74:	10 92 79 0d 	sts	0x0D79, r1
    8e78:	10 92 78 0d 	sts	0x0D78, r1
    8e7c:	3b cf       	rjmp	.-394    	; 0x8cf4 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8e7e:	01 96       	adiw	r24, 0x01	; 1
    8e80:	90 93 79 0d 	sts	0x0D79, r25
    8e84:	80 93 78 0d 	sts	0x0D78, r24
    8e88:	9e e0       	ldi	r25, 0x0E	; 14
    8e8a:	a9 2e       	mov	r10, r25
    8e8c:	9d e0       	ldi	r25, 0x0D	; 13
    8e8e:	b9 2e       	mov	r11, r25
    8e90:	28 e1       	ldi	r18, 0x18	; 24
    8e92:	c2 2e       	mov	r12, r18
    8e94:	2d e0       	ldi	r18, 0x0D	; 13
    8e96:	d2 2e       	mov	r13, r18
    8e98:	39 e1       	ldi	r19, 0x19	; 25
    8e9a:	e3 2e       	mov	r14, r19
    8e9c:	3d e0       	ldi	r19, 0x0D	; 13
    8e9e:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8ea0:	66 24       	eor	r6, r6
    8ea2:	6a 94       	dec	r6
    8ea4:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8ea6:	88 81       	ld	r24, Y
    8ea8:	85 ff       	sbrs	r24, 5
    8eaa:	42 c0       	rjmp	.+132    	; 0x8f30 <ProcessMusic+0x318>
    8eac:	2d 89       	ldd	r18, Y+21	; 0x15
    8eae:	3e 89       	ldd	r19, Y+22	; 0x16
    8eb0:	23 2b       	or	r18, r19
    8eb2:	09 f4       	brne	.+2      	; 0x8eb6 <ProcessMusic+0x29e>
    8eb4:	3d c0       	rjmp	.+122    	; 0x8f30 <ProcessMusic+0x318>
    8eb6:	86 fd       	sbrc	r24, 6
    8eb8:	3b c0       	rjmp	.+118    	; 0x8f30 <ProcessMusic+0x318>
    8eba:	47 01       	movw	r8, r14
    8ebc:	f2 e0       	ldi	r31, 0x02	; 2
    8ebe:	8f 1a       	sub	r8, r31
    8ec0:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8ec2:	d6 01       	movw	r26, r12
    8ec4:	9c 91       	ld	r25, X
    8ec6:	f4 01       	movw	r30, r8
    8ec8:	80 81       	ld	r24, Z
    8eca:	98 13       	cpse	r25, r24
    8ecc:	2e c0       	rjmp	.+92     	; 0x8f2a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8ece:	ed 89       	ldd	r30, Y+21	; 0x15
    8ed0:	fe 89       	ldd	r31, Y+22	; 0x16
    8ed2:	bf 01       	movw	r22, r30
    8ed4:	6f 5f       	subi	r22, 0xFF	; 255
    8ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed8:	7e 8b       	std	Y+22, r23	; 0x16
    8eda:	6d 8b       	std	Y+21, r22	; 0x15
    8edc:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8ede:	8f 3f       	cpi	r24, 0xFF	; 255
    8ee0:	31 f4       	brne	.+12     	; 0x8eee <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8ee2:	88 81       	ld	r24, Y
    8ee4:	8f 77       	andi	r24, 0x7F	; 127
    8ee6:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8ee8:	1e 8a       	std	Y+22, r1	; 0x16
    8eea:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8eec:	1e c0       	rjmp	.+60     	; 0x8f2a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8eee:	9f 01       	movw	r18, r30
    8ef0:	2e 5f       	subi	r18, 0xFE	; 254
    8ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    8ef4:	3e 8b       	std	Y+22, r19	; 0x16
    8ef6:	2d 8b       	std	Y+21, r18	; 0x15
    8ef8:	fb 01       	movw	r30, r22
    8efa:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8efc:	e8 2f       	mov	r30, r24
    8efe:	f0 e0       	ldi	r31, 0x00	; 0
    8f00:	ee 0f       	add	r30, r30
    8f02:	ff 1f       	adc	r31, r31
    8f04:	ec 51       	subi	r30, 0x1C	; 28
    8f06:	ff 4f       	sbci	r31, 0xFF	; 255
    8f08:	25 91       	lpm	r18, Z+
    8f0a:	34 91       	lpm	r19, Z
    8f0c:	ce 01       	movw	r24, r28
    8f0e:	f9 01       	movw	r30, r18
    8f10:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8f12:	ed 89       	ldd	r30, Y+21	; 0x15
    8f14:	fe 89       	ldd	r31, Y+22	; 0x16
    8f16:	cf 01       	movw	r24, r30
    8f18:	01 96       	adiw	r24, 0x01	; 1
    8f1a:	9e 8b       	std	Y+22, r25	; 0x16
    8f1c:	8d 8b       	std	Y+21, r24	; 0x15
    8f1e:	e4 91       	lpm	r30, Z
    8f20:	d4 01       	movw	r26, r8
    8f22:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8f24:	f6 01       	movw	r30, r12
    8f26:	10 82       	st	Z, r1
    8f28:	cc cf       	rjmp	.-104    	; 0x8ec2 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8f2a:	9f 5f       	subi	r25, 0xFF	; 255
    8f2c:	d6 01       	movw	r26, r12
    8f2e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8f30:	98 81       	ld	r25, Y
    8f32:	95 ff       	sbrs	r25, 5
    8f34:	6c c0       	rjmp	.+216    	; 0x900e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8f36:	f7 01       	movw	r30, r14
    8f38:	80 81       	ld	r24, Z
    8f3a:	8f 3f       	cpi	r24, 0xFF	; 255
    8f3c:	11 f0       	breq	.+4      	; 0x8f42 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8f3e:	8f 5f       	subi	r24, 0xFF	; 255
    8f40:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8f42:	97 fd       	sbrc	r25, 7
    8f44:	04 c0       	rjmp	.+8      	; 0x8f4e <ProcessMusic+0x336>
    8f46:	f7 01       	movw	r30, r14
    8f48:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8f4a:	90 81       	ld	r25, Z
    8f4c:	01 c0       	rjmp	.+2      	; 0x8f50 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8f4e:	9f ef       	ldi	r25, 0xFF	; 255
    8f50:	f7 01       	movw	r30, r14
    8f52:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8f54:	80 81       	ld	r24, Z
    8f56:	88 23       	and	r24, r24
    8f58:	09 f4       	brne	.+2      	; 0x8f5c <ProcessMusic+0x344>
    8f5a:	4e c0       	rjmp	.+156    	; 0x8ff8 <ProcessMusic+0x3e0>
    8f5c:	31 96       	adiw	r30, 0x01	; 1
    8f5e:	50 81       	ld	r21, Z
    8f60:	55 23       	and	r21, r21
    8f62:	09 f4       	brne	.+2      	; 0x8f66 <ProcessMusic+0x34e>
    8f64:	49 c0       	rjmp	.+146    	; 0x8ff8 <ProcessMusic+0x3e0>
    8f66:	99 23       	and	r25, r25
    8f68:	09 f4       	brne	.+2      	; 0x8f6c <ProcessMusic+0x354>
    8f6a:	46 c0       	rjmp	.+140    	; 0x8ff8 <ProcessMusic+0x3e0>
    8f6c:	40 91 7d 0d 	lds	r20, 0x0D7D
    8f70:	44 23       	and	r20, r20
    8f72:	09 f4       	brne	.+2      	; 0x8f76 <ProcessMusic+0x35e>
    8f74:	41 c0       	rjmp	.+130    	; 0x8ff8 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8f76:	89 9f       	mul	r24, r25
    8f78:	c0 01       	movw	r24, r0
    8f7a:	11 24       	eor	r1, r1
    8f7c:	93 95       	inc	r25
				uVol>>=8;
    8f7e:	89 2f       	mov	r24, r25
    8f80:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8f82:	58 9f       	mul	r21, r24
    8f84:	90 01       	movw	r18, r0
    8f86:	59 9f       	mul	r21, r25
    8f88:	30 0d       	add	r19, r0
    8f8a:	11 24       	eor	r1, r1
    8f8c:	c9 01       	movw	r24, r18
    8f8e:	93 95       	inc	r25
				uVol>>=8;
    8f90:	89 2f       	mov	r24, r25
    8f92:	99 27       	eor	r25, r25
    8f94:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8f96:	50 81       	ld	r21, Z
    8f98:	58 9f       	mul	r21, r24
    8f9a:	90 01       	movw	r18, r0
    8f9c:	59 9f       	mul	r21, r25
    8f9e:	30 0d       	add	r19, r0
    8fa0:	11 24       	eor	r1, r1
    8fa2:	33 95       	inc	r19
					uVol>>=8;
    8fa4:	23 2f       	mov	r18, r19
    8fa6:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8fa8:	42 9f       	mul	r20, r18
    8faa:	c0 01       	movw	r24, r0
    8fac:	43 9f       	mul	r20, r19
    8fae:	90 0d       	add	r25, r0
    8fb0:	11 24       	eor	r1, r1
    8fb2:	93 95       	inc	r25
				uVol>>=8;
    8fb4:	89 2f       	mov	r24, r25
    8fb6:	99 27       	eor	r25, r25
    8fb8:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8fba:	20 81       	ld	r18, Z
    8fbc:	22 23       	and	r18, r18
    8fbe:	f1 f0       	breq	.+60     	; 0x8ffc <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8fc0:	d5 01       	movw	r26, r10
    8fc2:	ec 91       	ld	r30, X
    8fc4:	f0 e0       	ldi	r31, 0x00	; 0
    8fc6:	e0 50       	subi	r30, 0x00	; 0
    8fc8:	fd 46       	sbci	r31, 0x6D	; 109
    8fca:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8fcc:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8fce:	2e 9f       	mul	r18, r30
    8fd0:	f0 01       	movw	r30, r0
    8fd2:	11 24       	eor	r1, r1
    8fd4:	f3 95       	inc	r31
					tVol>>=8;
    8fd6:	ef 2f       	mov	r30, r31
    8fd8:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8fda:	a3 01       	movw	r20, r6
    8fdc:	4e 1b       	sub	r20, r30
    8fde:	5f 0b       	sbc	r21, r31
    8fe0:	48 9f       	mul	r20, r24
    8fe2:	90 01       	movw	r18, r0
    8fe4:	49 9f       	mul	r20, r25
    8fe6:	30 0d       	add	r19, r0
    8fe8:	58 9f       	mul	r21, r24
    8fea:	30 0d       	add	r19, r0
    8fec:	11 24       	eor	r1, r1
    8fee:	c9 01       	movw	r24, r18
    8ff0:	93 95       	inc	r25
					uVol>>=8;
    8ff2:	89 2f       	mov	r24, r25
    8ff4:	99 27       	eor	r25, r25
    8ff6:	02 c0       	rjmp	.+4      	; 0x8ffc <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8ff8:	80 e0       	ldi	r24, 0x00	; 0
    8ffa:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8ffc:	f5 01       	movw	r30, r10
    8ffe:	30 81       	ld	r19, Z
    9000:	f7 01       	movw	r30, r14
    9002:	39 97       	sbiw	r30, 0x09	; 9
    9004:	20 81       	ld	r18, Z
    9006:	23 0f       	add	r18, r19
    9008:	d5 01       	movw	r26, r10
    900a:	2c 93       	st	X, r18
    900c:	02 c0       	rjmp	.+4      	; 0x9012 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    900e:	80 e0       	ldi	r24, 0x00	; 0
    9010:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9012:	f8 01       	movw	r30, r16
    9014:	80 83       	st	Z, r24
    9016:	67 96       	adiw	r28, 0x17	; 23
    9018:	0a 5f       	subi	r16, 0xFA	; 250
    901a:	1f 4f       	sbci	r17, 0xFF	; 255
    901c:	f7 e1       	ldi	r31, 0x17	; 23
    901e:	af 0e       	add	r10, r31
    9020:	b1 1c       	adc	r11, r1
    9022:	87 e1       	ldi	r24, 0x17	; 23
    9024:	c8 0e       	add	r12, r24
    9026:	d1 1c       	adc	r13, r1
    9028:	97 e1       	ldi	r25, 0x17	; 23
    902a:	e9 0e       	add	r14, r25
    902c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    902e:	ad e0       	ldi	r26, 0x0D	; 13
    9030:	c8 37       	cpi	r28, 0x78	; 120
    9032:	da 07       	cpc	r29, r26
    9034:	09 f0       	breq	.+2      	; 0x9038 <ProcessMusic+0x420>
    9036:	37 cf       	rjmp	.-402    	; 0x8ea6 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9038:	df 91       	pop	r29
    903a:	cf 91       	pop	r28
    903c:	1f 91       	pop	r17
    903e:	0f 91       	pop	r16
    9040:	ff 90       	pop	r15
    9042:	ef 90       	pop	r14
    9044:	df 90       	pop	r13
    9046:	cf 90       	pop	r12
    9048:	bf 90       	pop	r11
    904a:	af 90       	pop	r10
    904c:	9f 90       	pop	r9
    904e:	8f 90       	pop	r8
    9050:	7f 90       	pop	r7
    9052:	6f 90       	pop	r6
    9054:	08 95       	ret

00009056 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    9056:	80 93 7d 0d 	sts	0x0D7D, r24
    905a:	08 95       	ret

0000905c <IsSongPlaying>:
	return masterVolume;
}

bool IsSongPlaying(){
    return playSong;
}
    905c:	80 91 ce 0c 	lds	r24, 0x0CCE
    9060:	08 95       	ret

00009062 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9062:	99 27       	eor	r25, r25
	clr r23
    9064:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9066:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    9068:	09 f4       	brne	.+2      	; 0x906c <set_note_waves>
		ret
    906a:	08 95       	ret

0000906c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    906c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    906e:	f1 e9       	ldi	r31, 0x91	; 145
	lsl r22
    9070:	66 0f       	add	r22, r22
	rol r23
    9072:	77 1f       	adc	r23, r23
	add ZL,r22
    9074:	e6 0f       	add	r30, r22
	adc ZH,r23	
    9076:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    9078:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    907a:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    907c:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    907e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    9080:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9082:	28 9f       	mul	r18, r24
	add ZL,r0
    9084:	e0 0d       	add	r30, r0
	adc ZH,r1
    9086:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    9088:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    908a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    908c:	11 24       	eor	r1, r1
	

	ret
    908e:	08 95       	ret

00009090 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    9090:	99 27       	eor	r25, r25
	clr r23
    9092:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    9094:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    9096:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    9098:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    909a:	28 9f       	mul	r18, r24
	add ZL,r0
    909c:	e0 0d       	add	r30, r0
	adc ZH,r1
    909e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    90a0:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    90a2:	31 f4       	brne	.+12     	; 0x90b0 <smw1>
	lds r22,tr4_params
    90a4:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    90a8:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    90aa:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    90ae:	0b c0       	rjmp	.+22     	; 0x90c6 <esmw>

000090b0 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    90b0:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    90b2:	31 f4       	brne	.+12     	; 0x90c0 <smw2>
	lds r22,tr4_params
    90b4:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    90b8:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    90ba:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    90be:	03 c0       	rjmp	.+6      	; 0x90c6 <esmw>

000090c0 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    90c0:	73 e9       	ldi	r23, 0x93	; 147
	add r23,r22
    90c2:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    90c4:	75 83       	std	Z+5, r23	; 0x05

000090c6 <esmw>:

esmw:
	clr r1	
    90c6:	11 24       	eor	r1, r1
	ret
    90c8:	08 95       	ret
	...

00009100 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9100:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9102:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    9106:	08 95       	ret

00009108 <steptable>:
    9108:	22 00       	.word	0x0022	; ????
    910a:	24 00       	.word	0x0024	; ????
    910c:	26 00       	.word	0x0026	; ????
    910e:	28 00       	.word	0x0028	; ????
    9110:	2b 00       	.word	0x002b	; ????
    9112:	2d 00       	.word	0x002d	; ????
    9114:	30 00       	.word	0x0030	; ????
    9116:	33 00       	.word	0x0033	; ????
    9118:	36 00       	.word	0x0036	; ????
    911a:	39 00       	.word	0x0039	; ????
    911c:	3d 00       	.word	0x003d	; ????
    911e:	40 00       	.word	0x0040	; ????
    9120:	44 00       	.word	0x0044	; ????
    9122:	48 00       	.word	0x0048	; ????
    9124:	4c 00       	.word	0x004c	; ????
    9126:	51 00       	.word	0x0051	; ????
    9128:	56 00       	.word	0x0056	; ????
    912a:	5b 00       	.word	0x005b	; ????
    912c:	60 00       	.word	0x0060	; ????
    912e:	66 00       	.word	0x0066	; ????
    9130:	6c 00       	.word	0x006c	; ????
    9132:	73 00       	.word	0x0073	; ????
    9134:	79 00       	.word	0x0079	; ????
    9136:	81 00       	.word	0x0081	; ????
    9138:	88 00       	.word	0x0088	; ????
    913a:	90 00       	.word	0x0090	; ????
    913c:	99 00       	.word	0x0099	; ????
    913e:	a2 00       	.word	0x00a2	; ????
    9140:	ac 00       	.word	0x00ac	; ????
    9142:	b6 00       	.word	0x00b6	; ????
    9144:	c1 00       	.word	0x00c1	; ????
    9146:	cc 00       	.word	0x00cc	; ????
    9148:	d8 00       	.word	0x00d8	; ????
    914a:	e5 00       	.word	0x00e5	; ????
    914c:	f3 00       	.word	0x00f3	; ????
    914e:	01 01       	movw	r0, r2
    9150:	10 01       	movw	r2, r0
    9152:	21 01       	movw	r4, r2
    9154:	32 01       	movw	r6, r4
    9156:	44 01       	movw	r8, r8
    9158:	57 01       	movw	r10, r14
    915a:	6c 01       	movw	r12, r24
    915c:	81 01       	movw	r16, r2
    915e:	98 01       	movw	r18, r16
    9160:	b0 01       	movw	r22, r0
    9162:	ca 01       	movw	r24, r20
    9164:	e5 01       	movw	r28, r10
    9166:	02 02       	muls	r16, r18
    9168:	21 02       	muls	r18, r17
    916a:	41 02       	muls	r20, r17
    916c:	64 02       	muls	r22, r20
    916e:	88 02       	muls	r24, r24
    9170:	ae 02       	muls	r26, r30
    9172:	d7 02       	muls	r29, r23
    9174:	03 03       	mulsu	r16, r19
    9176:	30 03       	mulsu	r19, r16
    9178:	61 03       	mulsu	r22, r17
    917a:	94 03       	fmuls	r17, r20
    917c:	cb 03       	fmulsu	r20, r19
    917e:	05 04       	cpc	r0, r5
    9180:	42 04       	cpc	r4, r2
    9182:	83 04       	cpc	r8, r3
    9184:	c7 04       	cpc	r12, r7
    9186:	10 05       	cpc	r17, r0
    9188:	5d 05       	cpc	r21, r13
    918a:	af 05       	cpc	r26, r15
    918c:	05 06       	cpc	r0, r21
    918e:	61 06       	cpc	r6, r17
    9190:	c2 06       	cpc	r12, r18
    9192:	29 07       	cpc	r18, r25
    9194:	96 07       	cpc	r25, r22
    9196:	09 08       	sbc	r0, r9
    9198:	83 08       	sbc	r8, r3
    919a:	05 09       	sbc	r16, r5
    919c:	8e 09       	sbc	r24, r14
    919e:	20 0a       	sbc	r2, r16
    91a0:	ba 0a       	sbc	r11, r26
    91a2:	5d 0b       	sbc	r21, r29
    91a4:	0a 0c       	add	r0, r10
    91a6:	c1 0c       	add	r12, r1
    91a8:	84 0d       	add	r24, r4
    91aa:	51 0e       	add	r5, r17
    91ac:	2b 0f       	add	r18, r27
    91ae:	12 10       	cpse	r1, r2
    91b0:	07 11       	cpse	r16, r7
    91b2:	0a 12       	cpse	r0, r26
    91b4:	1d 13       	cpse	r17, r29
    91b6:	40 14       	cp	r4, r0
    91b8:	74 15       	cp	r23, r4
    91ba:	ba 16       	cp	r11, r26
    91bc:	14 18       	sub	r1, r4
    91be:	83 19       	sub	r24, r3
    91c0:	07 1b       	sub	r16, r23
    91c2:	a3 1c       	adc	r10, r3
    91c4:	57 1e       	adc	r5, r23
    91c6:	24 20       	and	r2, r4
    91c8:	0e 22       	and	r0, r30
    91ca:	14 24       	eor	r1, r4
    91cc:	39 26       	eor	r3, r25
    91ce:	7f 28       	or	r7, r15
    91d0:	e8 2a       	or	r14, r24
    91d2:	75 2d       	mov	r23, r5
    91d4:	29 30       	cpi	r18, 0x09	; 9
    91d6:	06 33       	cpi	r16, 0x36	; 54
    91d8:	0f 36       	cpi	r16, 0x6F	; 111
    91da:	45 39       	cpi	r20, 0x95	; 149
    91dc:	ad 3c       	cpi	r26, 0xCD	; 205
    91de:	49 40       	sbci	r20, 0x09	; 9
    91e0:	1b 44       	sbci	r17, 0x4B	; 75
    91e2:	28 48       	sbci	r18, 0x88	; 136
    91e4:	73 4c       	sbci	r23, 0xC3	; 195
    91e6:	fe 50       	subi	r31, 0x0E	; 14
    91e8:	cf 55       	subi	r28, 0x5F	; 95
    91ea:	ea 5a       	subi	r30, 0xAA	; 170
    91ec:	51 60       	ori	r21, 0x01	; 1
    91ee:	0c 66       	ori	r16, 0x6C	; 108
    91f0:	1d 6c       	ori	r17, 0xCD	; 205
    91f2:	8b 72       	andi	r24, 0x2B	; 43
    91f4:	5a 79       	andi	r21, 0x9A	; 154
    91f6:	92 80       	ldd	r9, Z+2	; 0x02
    91f8:	37 88       	ldd	r3, Z+23	; 0x17
    91fa:	50 90 e5 98 	lds	r5, 0x98E5
    91fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9200:	9f ab       	std	Y+55, r25	; 0x37
    9202:	d3 b5       	in	r29, 0x23	; 35
    9204:	a3 c0       	rjmp	.+326    	; 0x934c <waves+0x4c>
	...

00009300 <waves>:
    9300:	00 03       	mulsu	r16, r16
    9302:	06 09       	sbc	r16, r6
    9304:	0c 10       	cpse	r0, r12
    9306:	13 16       	cp	r1, r19
    9308:	19 1c       	adc	r1, r9
    930a:	1f 22       	and	r1, r31
    930c:	25 28       	or	r2, r5
    930e:	2b 2e       	mov	r2, r27
    9310:	31 33       	cpi	r19, 0x31	; 49
    9312:	36 39       	cpi	r19, 0x96	; 150
    9314:	3c 3f       	cpi	r19, 0xFC	; 252
    9316:	41 44       	sbci	r20, 0x41	; 65
    9318:	47 49       	sbci	r20, 0x97	; 151
    931a:	4c 4e       	sbci	r20, 0xEC	; 236
    931c:	51 53       	subi	r21, 0x31	; 49
    931e:	55 58       	subi	r21, 0x85	; 133
    9320:	5a 5c       	subi	r21, 0xCA	; 202
    9322:	5e 60       	ori	r21, 0x0E	; 14
    9324:	62 64       	ori	r22, 0x42	; 66
    9326:	66 68       	ori	r22, 0x86	; 134
    9328:	6a 6b       	ori	r22, 0xBA	; 186
    932a:	6d 6f       	ori	r22, 0xFD	; 253
    932c:	70 71       	andi	r23, 0x10	; 16
    932e:	73 74       	andi	r23, 0x43	; 67
    9330:	75 76       	andi	r23, 0x65	; 101
    9332:	78 79       	andi	r23, 0x98	; 152
    9334:	7a 7a       	andi	r23, 0xAA	; 170
    9336:	7b 7c       	andi	r23, 0xCB	; 203
    9338:	7d 7d       	andi	r23, 0xDD	; 221
    933a:	7e 7e       	andi	r23, 0xEE	; 238
    933c:	7e 7f       	andi	r23, 0xFE	; 254
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7e 7e       	andi	r23, 0xEE	; 238
    9346:	7e 7d       	andi	r23, 0xDE	; 222
    9348:	7d 7c       	andi	r23, 0xCD	; 205
    934a:	7b 7a       	andi	r23, 0xAB	; 171
    934c:	7a 79       	andi	r23, 0x9A	; 154
    934e:	78 76       	andi	r23, 0x68	; 104
    9350:	75 74       	andi	r23, 0x45	; 69
    9352:	73 71       	andi	r23, 0x13	; 19
    9354:	70 6f       	ori	r23, 0xF0	; 240
    9356:	6d 6b       	ori	r22, 0xBD	; 189
    9358:	6a 68       	ori	r22, 0x8A	; 138
    935a:	66 64       	ori	r22, 0x46	; 70
    935c:	62 60       	ori	r22, 0x02	; 2
    935e:	5e 5c       	subi	r21, 0xCE	; 206
    9360:	5a 58       	subi	r21, 0x8A	; 138
    9362:	55 53       	subi	r21, 0x35	; 53
    9364:	51 4e       	sbci	r21, 0xE1	; 225
    9366:	4c 49       	sbci	r20, 0x9C	; 156
    9368:	47 44       	sbci	r20, 0x47	; 71
    936a:	41 3f       	cpi	r20, 0xF1	; 241
    936c:	3c 39       	cpi	r19, 0x9C	; 156
    936e:	36 33       	cpi	r19, 0x36	; 54
    9370:	31 2e       	mov	r3, r17
    9372:	2b 28       	or	r2, r11
    9374:	25 22       	and	r2, r21
    9376:	1f 1c       	adc	r1, r15
    9378:	19 16       	cp	r1, r25
    937a:	13 10       	cpse	r1, r3
    937c:	0c 09       	sbc	r16, r12
    937e:	06 03       	mulsu	r16, r22
    9380:	00 fd       	sbrc	r16, 0
    9382:	fa f7       	brpl	.-2      	; 0x9382 <waves+0x82>
    9384:	f4 f0       	brlt	.+60     	; 0x93c2 <waves+0xc2>
    9386:	ed ea       	ldi	r30, 0xAD	; 173
    9388:	e7 e4       	ldi	r30, 0x47	; 71
    938a:	e1 de       	rcall	.-574    	; 0x914e <steptable+0x46>
    938c:	db d8       	rcall	.-3658   	; 0x8544 <FormatEeprom+0x22>
    938e:	d5 d2       	rcall	.+1450   	; 0x993a <waves+0x63a>
    9390:	cf cd       	rjmp	.-1122   	; 0x8f30 <ProcessMusic+0x318>
    9392:	ca c7       	rjmp	.+3988   	; 0xa328 <LBPrintChar+0x2c>
    9394:	c4 c1       	rjmp	.+904    	; 0x971e <waves+0x41e>
    9396:	bf bc       	out	0x2f, r11	; 47
    9398:	b9 b7       	in	r27, 0x39	; 57
    939a:	b4 b2       	in	r11, 0x14	; 20
    939c:	af ad       	ldd	r26, Y+63	; 0x3f
    939e:	ab a8       	ldd	r10, Y+51	; 0x33
    93a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    93a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    93a4:	9e 9c       	mul	r9, r14
    93a6:	9a 98       	cbi	0x13, 2	; 19
    93a8:	96 95       	lsr	r25
    93aa:	93 91       	.word	0x9193	; ????
    93ac:	90 8f       	std	Z+24, r25	; 0x18
    93ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    93b0:	8b 8a       	std	Y+19, r8	; 0x13
    93b2:	88 87       	std	Y+8, r24	; 0x08
    93b4:	86 86       	std	Z+14, r8	; 0x0e
    93b6:	85 84       	ldd	r8, Z+13	; 0x0d
    93b8:	83 83       	std	Z+3, r24	; 0x03
    93ba:	82 82       	std	Z+2, r8	; 0x02
    93bc:	82 81       	ldd	r24, Z+2	; 0x02
    93be:	81 81       	ldd	r24, Z+1	; 0x01
    93c0:	81 81       	ldd	r24, Z+1	; 0x01
    93c2:	81 81       	ldd	r24, Z+1	; 0x01
    93c4:	82 82       	std	Z+2, r8	; 0x02
    93c6:	82 83       	std	Z+2, r24	; 0x02
    93c8:	83 84       	ldd	r8, Z+11	; 0x0b
    93ca:	85 86       	std	Z+13, r8	; 0x0d
    93cc:	86 87       	std	Z+14, r24	; 0x0e
    93ce:	88 8a       	std	Y+16, r8	; 0x10
    93d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    93d2:	8d 8f       	std	Y+29, r24	; 0x1d
    93d4:	90 91 93 95 	lds	r25, 0x9593
    93d8:	96 98       	cbi	0x12, 6	; 18
    93da:	9a 9c       	mul	r9, r10
    93dc:	9e a0       	ldd	r9, Y+38	; 0x26
    93de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    93e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    93e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    93e4:	af b2       	in	r10, 0x1f	; 31
    93e6:	b4 b7       	in	r27, 0x34	; 52
    93e8:	b9 bc       	out	0x29, r11	; 41
    93ea:	bf c1       	rjmp	.+894    	; 0x976a <waves+0x46a>
    93ec:	c4 c7       	rjmp	.+3976   	; 0xa376 <LBPrintByte+0x2>
    93ee:	ca cd       	rjmp	.-1132   	; 0x8f84 <ProcessMusic+0x36c>
    93f0:	cf d2       	rcall	.+1438   	; 0x9990 <waves+0x690>
    93f2:	d5 d8       	rcall	.-3670   	; 0x859e <EepromBlockExists+0xa>
    93f4:	db de       	rcall	.-586    	; 0x91ac <steptable+0xa4>
    93f6:	e1 e4       	ldi	r30, 0x41	; 65
    93f8:	e7 ea       	ldi	r30, 0xA7	; 167
    93fa:	ed f0       	brhs	.+58     	; 0x9436 <waves+0x136>
    93fc:	f4 f7       	brge	.-4      	; 0x93fa <waves+0xfa>
    93fe:	fa fd       	.word	0xfdfa	; ????
    9400:	80 81       	ld	r24, Z
    9402:	82 83       	std	Z+2, r24	; 0x02
    9404:	84 85       	ldd	r24, Z+12	; 0x0c
    9406:	86 87       	std	Z+14, r24	; 0x0e
    9408:	88 89       	ldd	r24, Y+16	; 0x10
    940a:	8a 8b       	std	Y+18, r24	; 0x12
    940c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    940e:	8e 8f       	std	Y+30, r24	; 0x1e
    9410:	90 91 92 93 	lds	r25, 0x9392
    9414:	94 95       	.word	0x9594	; ????
    9416:	96 97       	sbiw	r26, 0x26	; 38
    9418:	98 99       	sbic	0x13, 0	; 19
    941a:	9a 9b       	sbis	0x13, 2	; 19
    941c:	9c 9d       	mul	r25, r12
    941e:	9e 9f       	mul	r25, r30
    9420:	a0 a1       	ldd	r26, Z+32	; 0x20
    9422:	a2 a3       	std	Z+34, r26	; 0x22
    9424:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9426:	a6 a7       	std	Z+46, r26	; 0x2e
    9428:	a8 a9       	ldd	r26, Y+48	; 0x30
    942a:	aa ab       	std	Y+50, r26	; 0x32
    942c:	ac ad       	ldd	r26, Y+60	; 0x3c
    942e:	ae af       	std	Y+62, r26	; 0x3e
    9430:	b0 b1       	in	r27, 0x00	; 0
    9432:	b2 b3       	in	r27, 0x12	; 18
    9434:	b4 b5       	in	r27, 0x24	; 36
    9436:	b6 b7       	in	r27, 0x36	; 54
    9438:	b8 b9       	out	0x08, r27	; 8
    943a:	ba bb       	out	0x1a, r27	; 26
    943c:	bc bd       	out	0x2c, r27	; 44
    943e:	be bf       	out	0x3e, r27	; 62
    9440:	c0 c1       	rjmp	.+896    	; 0x97c2 <waves+0x4c2>
    9442:	c2 c3       	rjmp	.+1924   	; 0x9bc8 <waves+0x8c8>
    9444:	c4 c5       	rjmp	.+2952   	; 0x9fce <DrawMap+0x16>
    9446:	c6 c7       	rjmp	.+3980   	; 0xa3d4 <LBPrintByte+0x60>
    9448:	c8 c9       	rjmp	.-3184   	; 0x87da <PatchCommand11+0x10>
    944a:	ca cb       	rjmp	.-2156   	; 0x8be0 <TriggerNote+0x48>
    944c:	cc cd       	rjmp	.-1128   	; 0x8fe6 <ProcessMusic+0x3ce>
    944e:	ce cf       	rjmp	.-100    	; 0x93ec <waves+0xec>
    9450:	d0 d1       	rcall	.+928    	; 0x97f2 <waves+0x4f2>
    9452:	d2 d3       	rcall	.+1956   	; 0x9bf8 <waves+0x8f8>
    9454:	d4 d5       	rcall	.+2984   	; 0x9ffe <DrawMap+0x46>
    9456:	d6 d7       	rcall	.+4012   	; 0xa404 <LBPrintInt+0x2e>
    9458:	d8 d9       	rcall	.-3152   	; 0x880a <PatchCommand11+0x40>
    945a:	da db       	rcall	.-2124   	; 0x8c10 <TriggerNote+0x78>
    945c:	dc dd       	rcall	.-1096   	; 0x9016 <ProcessMusic+0x3fe>
    945e:	de df       	rcall	.-68     	; 0x941c <waves+0x11c>
    9460:	e0 e1       	ldi	r30, 0x10	; 16
    9462:	e2 e3       	ldi	r30, 0x32	; 50
    9464:	e4 e5       	ldi	r30, 0x54	; 84
    9466:	e6 e7       	ldi	r30, 0x76	; 118
    9468:	e8 e9       	ldi	r30, 0x98	; 152
    946a:	ea eb       	ldi	r30, 0xBA	; 186
    946c:	ec ed       	ldi	r30, 0xDC	; 220
    946e:	ee ef       	ldi	r30, 0xFE	; 254
    9470:	f0 f1       	brcs	.+124    	; 0x94ee <waves+0x1ee>
    9472:	f2 f3       	brmi	.-4      	; 0x9470 <waves+0x170>
    9474:	f4 f5       	brge	.+124    	; 0x94f2 <waves+0x1f2>
    9476:	f6 f7       	brtc	.-4      	; 0x9474 <waves+0x174>
    9478:	f8 f9       	.word	0xf9f8	; ????
    947a:	fa fb       	.word	0xfbfa	; ????
    947c:	fc fd       	.word	0xfdfc	; ????
    947e:	fe ff       	.word	0xfffe	; ????
    9480:	00 01       	movw	r0, r0
    9482:	02 03       	mulsu	r16, r18
    9484:	04 05       	cpc	r16, r4
    9486:	06 07       	cpc	r16, r22
    9488:	08 09       	sbc	r16, r8
    948a:	0a 0b       	sbc	r16, r26
    948c:	0c 0d       	add	r16, r12
    948e:	0e 0f       	add	r16, r30
    9490:	10 11       	cpse	r17, r0
    9492:	12 13       	cpse	r17, r18
    9494:	14 15       	cp	r17, r4
    9496:	16 17       	cp	r17, r22
    9498:	18 19       	sub	r17, r8
    949a:	1a 1b       	sub	r17, r26
    949c:	1c 1d       	adc	r17, r12
    949e:	1e 1f       	adc	r17, r30
    94a0:	20 21       	and	r18, r0
    94a2:	22 23       	and	r18, r18
    94a4:	24 25       	eor	r18, r4
    94a6:	26 27       	eor	r18, r22
    94a8:	28 29       	or	r18, r8
    94aa:	2a 2b       	or	r18, r26
    94ac:	2c 2d       	mov	r18, r12
    94ae:	2e 2f       	mov	r18, r30
    94b0:	30 31       	cpi	r19, 0x10	; 16
    94b2:	32 33       	cpi	r19, 0x32	; 50
    94b4:	34 35       	cpi	r19, 0x54	; 84
    94b6:	36 37       	cpi	r19, 0x76	; 118
    94b8:	38 39       	cpi	r19, 0x98	; 152
    94ba:	3a 3b       	cpi	r19, 0xBA	; 186
    94bc:	3c 3d       	cpi	r19, 0xDC	; 220
    94be:	3e 3f       	cpi	r19, 0xFE	; 254
    94c0:	40 41       	sbci	r20, 0x10	; 16
    94c2:	42 43       	sbci	r20, 0x32	; 50
    94c4:	44 45       	sbci	r20, 0x54	; 84
    94c6:	46 47       	sbci	r20, 0x76	; 118
    94c8:	48 49       	sbci	r20, 0x98	; 152
    94ca:	4a 4b       	sbci	r20, 0xBA	; 186
    94cc:	4c 4d       	sbci	r20, 0xDC	; 220
    94ce:	4e 4f       	sbci	r20, 0xFE	; 254
    94d0:	50 51       	subi	r21, 0x10	; 16
    94d2:	52 53       	subi	r21, 0x32	; 50
    94d4:	54 55       	subi	r21, 0x54	; 84
    94d6:	56 57       	subi	r21, 0x76	; 118
    94d8:	58 59       	subi	r21, 0x98	; 152
    94da:	5a 5b       	subi	r21, 0xBA	; 186
    94dc:	5c 5d       	subi	r21, 0xDC	; 220
    94de:	5e 5f       	subi	r21, 0xFE	; 254
    94e0:	60 61       	ori	r22, 0x10	; 16
    94e2:	62 63       	ori	r22, 0x32	; 50
    94e4:	64 65       	ori	r22, 0x54	; 84
    94e6:	66 67       	ori	r22, 0x76	; 118
    94e8:	68 69       	ori	r22, 0x98	; 152
    94ea:	6a 6b       	ori	r22, 0xBA	; 186
    94ec:	6c 6d       	ori	r22, 0xDC	; 220
    94ee:	6e 6f       	ori	r22, 0xFE	; 254
    94f0:	70 71       	andi	r23, 0x10	; 16
    94f2:	72 73       	andi	r23, 0x32	; 50
    94f4:	74 75       	andi	r23, 0x54	; 84
    94f6:	76 77       	andi	r23, 0x76	; 118
    94f8:	78 79       	andi	r23, 0x98	; 152
    94fa:	7a 7b       	andi	r23, 0xBA	; 186
    94fc:	7c 7d       	andi	r23, 0xDC	; 220
    94fe:	7e 7f       	andi	r23, 0xFE	; 254
    9500:	00 02       	muls	r16, r16
    9502:	04 06       	cpc	r0, r20
    9504:	08 0a       	sbc	r0, r24
    9506:	0c 0e       	add	r0, r28
    9508:	10 12       	cpse	r1, r16
    950a:	14 16       	cp	r1, r20
    950c:	18 1a       	sub	r1, r24
    950e:	1c 1e       	adc	r1, r28
    9510:	20 22       	and	r2, r16
    9512:	24 26       	eor	r2, r20
    9514:	28 2a       	or	r2, r24
    9516:	2c 2e       	mov	r2, r28
    9518:	30 32       	cpi	r19, 0x20	; 32
    951a:	34 36       	cpi	r19, 0x64	; 100
    951c:	38 3a       	cpi	r19, 0xA8	; 168
    951e:	3c 3e       	cpi	r19, 0xEC	; 236
    9520:	40 42       	sbci	r20, 0x20	; 32
    9522:	44 46       	sbci	r20, 0x64	; 100
    9524:	48 4a       	sbci	r20, 0xA8	; 168
    9526:	4c 4e       	sbci	r20, 0xEC	; 236
    9528:	50 52       	subi	r21, 0x20	; 32
    952a:	54 56       	subi	r21, 0x64	; 100
    952c:	58 5a       	subi	r21, 0xA8	; 168
    952e:	5c 5e       	subi	r21, 0xEC	; 236
    9530:	60 62       	ori	r22, 0x20	; 32
    9532:	64 66       	ori	r22, 0x64	; 100
    9534:	68 6a       	ori	r22, 0xA8	; 168
    9536:	6c 6e       	ori	r22, 0xEC	; 236
    9538:	70 72       	andi	r23, 0x20	; 32
    953a:	74 76       	andi	r23, 0x64	; 100
    953c:	78 7a       	andi	r23, 0xA8	; 168
    953e:	7c 7e       	andi	r23, 0xEC	; 236
    9540:	7f 7d       	andi	r23, 0xDF	; 223
    9542:	7b 79       	andi	r23, 0x9B	; 155
    9544:	77 75       	andi	r23, 0x57	; 87
    9546:	73 71       	andi	r23, 0x13	; 19
    9548:	6f 6d       	ori	r22, 0xDF	; 223
    954a:	6b 69       	ori	r22, 0x9B	; 155
    954c:	67 65       	ori	r22, 0x57	; 87
    954e:	63 61       	ori	r22, 0x13	; 19
    9550:	5f 5d       	subi	r21, 0xDF	; 223
    9552:	5b 59       	subi	r21, 0x9B	; 155
    9554:	57 55       	subi	r21, 0x57	; 87
    9556:	53 51       	subi	r21, 0x13	; 19
    9558:	4f 4d       	sbci	r20, 0xDF	; 223
    955a:	4b 49       	sbci	r20, 0x9B	; 155
    955c:	47 45       	sbci	r20, 0x57	; 87
    955e:	43 41       	sbci	r20, 0x13	; 19
    9560:	3f 3d       	cpi	r19, 0xDF	; 223
    9562:	3b 39       	cpi	r19, 0x9B	; 155
    9564:	37 35       	cpi	r19, 0x57	; 87
    9566:	33 31       	cpi	r19, 0x13	; 19
    9568:	2f 2d       	mov	r18, r15
    956a:	2b 29       	or	r18, r11
    956c:	27 25       	eor	r18, r7
    956e:	23 21       	and	r18, r3
    9570:	1f 1d       	adc	r17, r15
    9572:	1b 19       	sub	r17, r11
    9574:	17 15       	cp	r17, r7
    9576:	13 11       	cpse	r17, r3
    9578:	0f 0d       	add	r16, r15
    957a:	0b 09       	sbc	r16, r11
    957c:	07 05       	cpc	r16, r7
    957e:	03 01       	movw	r0, r6
    9580:	ff fd       	.word	0xfdff	; ????
    9582:	fb f9       	.word	0xf9fb	; ????
    9584:	f7 f5       	brid	.+124    	; 0x9602 <waves+0x302>
    9586:	f3 f1       	brvs	.+124    	; 0x9604 <waves+0x304>
    9588:	ef ed       	ldi	r30, 0xDF	; 223
    958a:	eb e9       	ldi	r30, 0x9B	; 155
    958c:	e7 e5       	ldi	r30, 0x57	; 87
    958e:	e3 e1       	ldi	r30, 0x13	; 19
    9590:	df dd       	rcall	.-1090   	; 0x9150 <steptable+0x48>
    9592:	db d9       	rcall	.-3146   	; 0x894a <StartSong+0x20>
    9594:	d7 d5       	rcall	.+2990   	; 0xa144 <FadeIn+0x2>
    9596:	d3 d1       	rcall	.+934    	; 0x993e <waves+0x63e>
    9598:	cf cd       	rjmp	.-1122   	; 0x9138 <steptable+0x30>
    959a:	cb c9       	rjmp	.-3178   	; 0x8932 <StartSong+0x8>
    959c:	c7 c5       	rjmp	.+2958   	; 0xa12c <doFade+0x6>
    959e:	c3 c1       	rjmp	.+902    	; 0x9926 <waves+0x626>
    95a0:	bf bd       	out	0x2f, r27	; 47
    95a2:	bb b9       	out	0x0b, r27	; 11
    95a4:	b7 b5       	in	r27, 0x27	; 39
    95a6:	b3 b1       	in	r27, 0x03	; 3
    95a8:	af ad       	ldd	r26, Y+63	; 0x3f
    95aa:	ab a9       	ldd	r26, Y+51	; 0x33
    95ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    95ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    95b0:	9f 9d       	mul	r25, r15
    95b2:	9b 99       	sbic	0x13, 3	; 19
    95b4:	97 95       	ror	r25
    95b6:	93 91       	.word	0x9193	; ????
    95b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    95ba:	8b 89       	ldd	r24, Y+19	; 0x13
    95bc:	87 85       	ldd	r24, Z+15	; 0x0f
    95be:	83 81       	ldd	r24, Z+3	; 0x03
    95c0:	80 82       	st	Z, r8
    95c2:	84 86       	std	Z+12, r8	; 0x0c
    95c4:	88 8a       	std	Y+16, r8	; 0x10
    95c6:	8c 8e       	std	Y+28, r8	; 0x1c
    95c8:	90 92 94 96 	sts	0x9694, r9
    95cc:	98 9a       	sbi	0x13, 0	; 19
    95ce:	9c 9e       	mul	r9, r28
    95d0:	a0 a2       	std	Z+32, r10	; 0x20
    95d2:	a4 a6       	std	Z+44, r10	; 0x2c
    95d4:	a8 aa       	std	Y+48, r10	; 0x30
    95d6:	ac ae       	std	Y+60, r10	; 0x3c
    95d8:	b0 b2       	in	r11, 0x10	; 16
    95da:	b4 b6       	in	r11, 0x34	; 52
    95dc:	b8 ba       	out	0x18, r11	; 24
    95de:	bc be       	out	0x3c, r11	; 60
    95e0:	c0 c2       	rjmp	.+1408   	; 0x9b62 <waves+0x862>
    95e2:	c4 c6       	rjmp	.+3464   	; 0xa36c <LBPrint+0x30>
    95e4:	c8 ca       	rjmp	.-2672   	; 0x8b76 <TriggerFx+0x6e>
    95e6:	cc ce       	rjmp	.-616    	; 0x9380 <waves+0x80>
    95e8:	d0 d2       	rcall	.+1440   	; 0x9b8a <waves+0x88a>
    95ea:	d4 d6       	rcall	.+3496   	; 0xa394 <LBPrintByte+0x20>
    95ec:	d8 da       	rcall	.-2640   	; 0x8b9e <TriggerNote+0x6>
    95ee:	dc de       	rcall	.-584    	; 0x93a8 <waves+0xa8>
    95f0:	e0 e2       	ldi	r30, 0x20	; 32
    95f2:	e4 e6       	ldi	r30, 0x64	; 100
    95f4:	e8 ea       	ldi	r30, 0xA8	; 168
    95f6:	ec ee       	ldi	r30, 0xEC	; 236
    95f8:	f0 f2       	brcs	.-68     	; 0x95b6 <waves+0x2b6>
    95fa:	f4 f6       	brge	.-68     	; 0x95b8 <waves+0x2b8>
    95fc:	f8 fa       	.word	0xfaf8	; ????
    95fe:	fc fe       	.word	0xfefc	; ????
    9600:	7f 7f       	andi	r23, 0xFF	; 255
    9602:	7f 7f       	andi	r23, 0xFF	; 255
    9604:	7f 7f       	andi	r23, 0xFF	; 255
    9606:	7f 7f       	andi	r23, 0xFF	; 255
    9608:	7f 7f       	andi	r23, 0xFF	; 255
    960a:	7f 7f       	andi	r23, 0xFF	; 255
    960c:	7f 7f       	andi	r23, 0xFF	; 255
    960e:	7f 7f       	andi	r23, 0xFF	; 255
    9610:	7f 7f       	andi	r23, 0xFF	; 255
    9612:	7f 7f       	andi	r23, 0xFF	; 255
    9614:	7f 7f       	andi	r23, 0xFF	; 255
    9616:	7f 7f       	andi	r23, 0xFF	; 255
    9618:	7f 7f       	andi	r23, 0xFF	; 255
    961a:	7f 7f       	andi	r23, 0xFF	; 255
    961c:	7f 7f       	andi	r23, 0xFF	; 255
    961e:	7f 7f       	andi	r23, 0xFF	; 255
    9620:	7f 7f       	andi	r23, 0xFF	; 255
    9622:	7f 7f       	andi	r23, 0xFF	; 255
    9624:	7f 7f       	andi	r23, 0xFF	; 255
    9626:	7f 7f       	andi	r23, 0xFF	; 255
    9628:	7f 7f       	andi	r23, 0xFF	; 255
    962a:	7f 7f       	andi	r23, 0xFF	; 255
    962c:	7f 7f       	andi	r23, 0xFF	; 255
    962e:	7f 7f       	andi	r23, 0xFF	; 255
    9630:	7f 7f       	andi	r23, 0xFF	; 255
    9632:	7f 7f       	andi	r23, 0xFF	; 255
    9634:	7f 7f       	andi	r23, 0xFF	; 255
    9636:	7f 7f       	andi	r23, 0xFF	; 255
    9638:	7f 7f       	andi	r23, 0xFF	; 255
    963a:	7f 7f       	andi	r23, 0xFF	; 255
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	80 80       	ld	r8, Z
    9642:	80 80       	ld	r8, Z
    9644:	80 80       	ld	r8, Z
    9646:	80 80       	ld	r8, Z
    9648:	80 80       	ld	r8, Z
    964a:	80 80       	ld	r8, Z
    964c:	80 80       	ld	r8, Z
    964e:	80 80       	ld	r8, Z
    9650:	80 80       	ld	r8, Z
    9652:	80 80       	ld	r8, Z
    9654:	80 80       	ld	r8, Z
    9656:	80 80       	ld	r8, Z
    9658:	80 80       	ld	r8, Z
    965a:	80 80       	ld	r8, Z
    965c:	80 80       	ld	r8, Z
    965e:	80 80       	ld	r8, Z
    9660:	80 80       	ld	r8, Z
    9662:	80 80       	ld	r8, Z
    9664:	80 80       	ld	r8, Z
    9666:	80 80       	ld	r8, Z
    9668:	80 80       	ld	r8, Z
    966a:	80 80       	ld	r8, Z
    966c:	80 80       	ld	r8, Z
    966e:	80 80       	ld	r8, Z
    9670:	80 80       	ld	r8, Z
    9672:	80 80       	ld	r8, Z
    9674:	80 80       	ld	r8, Z
    9676:	80 80       	ld	r8, Z
    9678:	80 80       	ld	r8, Z
    967a:	80 80       	ld	r8, Z
    967c:	80 80       	ld	r8, Z
    967e:	80 80       	ld	r8, Z
    9680:	80 80       	ld	r8, Z
    9682:	80 80       	ld	r8, Z
    9684:	80 80       	ld	r8, Z
    9686:	80 80       	ld	r8, Z
    9688:	80 80       	ld	r8, Z
    968a:	80 80       	ld	r8, Z
    968c:	80 80       	ld	r8, Z
    968e:	80 80       	ld	r8, Z
    9690:	80 80       	ld	r8, Z
    9692:	80 80       	ld	r8, Z
    9694:	80 80       	ld	r8, Z
    9696:	80 80       	ld	r8, Z
    9698:	80 80       	ld	r8, Z
    969a:	80 80       	ld	r8, Z
    969c:	80 80       	ld	r8, Z
    969e:	80 80       	ld	r8, Z
    96a0:	80 80       	ld	r8, Z
    96a2:	80 80       	ld	r8, Z
    96a4:	80 80       	ld	r8, Z
    96a6:	80 80       	ld	r8, Z
    96a8:	80 80       	ld	r8, Z
    96aa:	80 80       	ld	r8, Z
    96ac:	80 80       	ld	r8, Z
    96ae:	80 80       	ld	r8, Z
    96b0:	80 80       	ld	r8, Z
    96b2:	80 80       	ld	r8, Z
    96b4:	80 80       	ld	r8, Z
    96b6:	80 80       	ld	r8, Z
    96b8:	80 80       	ld	r8, Z
    96ba:	80 80       	ld	r8, Z
    96bc:	80 80       	ld	r8, Z
    96be:	80 80       	ld	r8, Z
    96c0:	80 80       	ld	r8, Z
    96c2:	80 80       	ld	r8, Z
    96c4:	80 80       	ld	r8, Z
    96c6:	80 80       	ld	r8, Z
    96c8:	80 80       	ld	r8, Z
    96ca:	80 80       	ld	r8, Z
    96cc:	80 80       	ld	r8, Z
    96ce:	80 80       	ld	r8, Z
    96d0:	80 80       	ld	r8, Z
    96d2:	80 80       	ld	r8, Z
    96d4:	80 80       	ld	r8, Z
    96d6:	80 80       	ld	r8, Z
    96d8:	80 80       	ld	r8, Z
    96da:	80 80       	ld	r8, Z
    96dc:	80 80       	ld	r8, Z
    96de:	80 80       	ld	r8, Z
    96e0:	80 80       	ld	r8, Z
    96e2:	80 80       	ld	r8, Z
    96e4:	80 80       	ld	r8, Z
    96e6:	80 80       	ld	r8, Z
    96e8:	80 80       	ld	r8, Z
    96ea:	80 80       	ld	r8, Z
    96ec:	80 80       	ld	r8, Z
    96ee:	80 80       	ld	r8, Z
    96f0:	80 80       	ld	r8, Z
    96f2:	80 80       	ld	r8, Z
    96f4:	80 80       	ld	r8, Z
    96f6:	80 80       	ld	r8, Z
    96f8:	80 80       	ld	r8, Z
    96fa:	80 80       	ld	r8, Z
    96fc:	80 80       	ld	r8, Z
    96fe:	80 80       	ld	r8, Z
    9700:	7f 7f       	andi	r23, 0xFF	; 255
    9702:	7f 7f       	andi	r23, 0xFF	; 255
    9704:	7f 7f       	andi	r23, 0xFF	; 255
    9706:	7f 7f       	andi	r23, 0xFF	; 255
    9708:	7f 7f       	andi	r23, 0xFF	; 255
    970a:	7f 7f       	andi	r23, 0xFF	; 255
    970c:	7f 7f       	andi	r23, 0xFF	; 255
    970e:	7f 7f       	andi	r23, 0xFF	; 255
    9710:	7f 7f       	andi	r23, 0xFF	; 255
    9712:	7f 7f       	andi	r23, 0xFF	; 255
    9714:	7f 7f       	andi	r23, 0xFF	; 255
    9716:	7f 7f       	andi	r23, 0xFF	; 255
    9718:	7f 7f       	andi	r23, 0xFF	; 255
    971a:	7f 7f       	andi	r23, 0xFF	; 255
    971c:	7f 7f       	andi	r23, 0xFF	; 255
    971e:	7f 7f       	andi	r23, 0xFF	; 255
    9720:	7f 7f       	andi	r23, 0xFF	; 255
    9722:	7f 7f       	andi	r23, 0xFF	; 255
    9724:	7f 7f       	andi	r23, 0xFF	; 255
    9726:	7f 7f       	andi	r23, 0xFF	; 255
    9728:	7f 7f       	andi	r23, 0xFF	; 255
    972a:	7f 7f       	andi	r23, 0xFF	; 255
    972c:	7f 7f       	andi	r23, 0xFF	; 255
    972e:	7f 7f       	andi	r23, 0xFF	; 255
    9730:	7f 7f       	andi	r23, 0xFF	; 255
    9732:	7f 7f       	andi	r23, 0xFF	; 255
    9734:	7f 7f       	andi	r23, 0xFF	; 255
    9736:	7f 7f       	andi	r23, 0xFF	; 255
    9738:	7f 7f       	andi	r23, 0xFF	; 255
    973a:	7f 7f       	andi	r23, 0xFF	; 255
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7f 7f       	andi	r23, 0xFF	; 255
    9746:	7f 7f       	andi	r23, 0xFF	; 255
    9748:	7f 7f       	andi	r23, 0xFF	; 255
    974a:	7f 7f       	andi	r23, 0xFF	; 255
    974c:	7f 7f       	andi	r23, 0xFF	; 255
    974e:	7f 7f       	andi	r23, 0xFF	; 255
    9750:	7f 7f       	andi	r23, 0xFF	; 255
    9752:	7f 7f       	andi	r23, 0xFF	; 255
    9754:	7f 7f       	andi	r23, 0xFF	; 255
    9756:	7f 7f       	andi	r23, 0xFF	; 255
    9758:	7f 7f       	andi	r23, 0xFF	; 255
    975a:	7f 7f       	andi	r23, 0xFF	; 255
    975c:	7f 7f       	andi	r23, 0xFF	; 255
    975e:	7f 7f       	andi	r23, 0xFF	; 255
    9760:	7f 7f       	andi	r23, 0xFF	; 255
    9762:	7f 7f       	andi	r23, 0xFF	; 255
    9764:	7f 7f       	andi	r23, 0xFF	; 255
    9766:	7f 7f       	andi	r23, 0xFF	; 255
    9768:	7f 7f       	andi	r23, 0xFF	; 255
    976a:	7f 7f       	andi	r23, 0xFF	; 255
    976c:	7f 7f       	andi	r23, 0xFF	; 255
    976e:	7f 7f       	andi	r23, 0xFF	; 255
    9770:	7f 7f       	andi	r23, 0xFF	; 255
    9772:	7f 7f       	andi	r23, 0xFF	; 255
    9774:	7f 7f       	andi	r23, 0xFF	; 255
    9776:	7f 7f       	andi	r23, 0xFF	; 255
    9778:	7f 7f       	andi	r23, 0xFF	; 255
    977a:	7f 7f       	andi	r23, 0xFF	; 255
    977c:	7f 7f       	andi	r23, 0xFF	; 255
    977e:	7f 7f       	andi	r23, 0xFF	; 255
    9780:	80 80       	ld	r8, Z
    9782:	80 80       	ld	r8, Z
    9784:	80 80       	ld	r8, Z
    9786:	80 80       	ld	r8, Z
    9788:	80 80       	ld	r8, Z
    978a:	80 80       	ld	r8, Z
    978c:	80 80       	ld	r8, Z
    978e:	80 80       	ld	r8, Z
    9790:	80 80       	ld	r8, Z
    9792:	80 80       	ld	r8, Z
    9794:	80 80       	ld	r8, Z
    9796:	80 80       	ld	r8, Z
    9798:	80 80       	ld	r8, Z
    979a:	80 80       	ld	r8, Z
    979c:	80 80       	ld	r8, Z
    979e:	80 80       	ld	r8, Z
    97a0:	80 80       	ld	r8, Z
    97a2:	80 80       	ld	r8, Z
    97a4:	80 80       	ld	r8, Z
    97a6:	80 80       	ld	r8, Z
    97a8:	80 80       	ld	r8, Z
    97aa:	80 80       	ld	r8, Z
    97ac:	80 80       	ld	r8, Z
    97ae:	80 80       	ld	r8, Z
    97b0:	80 80       	ld	r8, Z
    97b2:	80 80       	ld	r8, Z
    97b4:	80 80       	ld	r8, Z
    97b6:	80 80       	ld	r8, Z
    97b8:	80 80       	ld	r8, Z
    97ba:	80 80       	ld	r8, Z
    97bc:	80 80       	ld	r8, Z
    97be:	80 80       	ld	r8, Z
    97c0:	80 80       	ld	r8, Z
    97c2:	80 80       	ld	r8, Z
    97c4:	80 80       	ld	r8, Z
    97c6:	80 80       	ld	r8, Z
    97c8:	80 80       	ld	r8, Z
    97ca:	80 80       	ld	r8, Z
    97cc:	80 80       	ld	r8, Z
    97ce:	80 80       	ld	r8, Z
    97d0:	80 80       	ld	r8, Z
    97d2:	80 80       	ld	r8, Z
    97d4:	80 80       	ld	r8, Z
    97d6:	80 80       	ld	r8, Z
    97d8:	80 80       	ld	r8, Z
    97da:	80 80       	ld	r8, Z
    97dc:	80 80       	ld	r8, Z
    97de:	80 80       	ld	r8, Z
    97e0:	80 80       	ld	r8, Z
    97e2:	80 80       	ld	r8, Z
    97e4:	80 80       	ld	r8, Z
    97e6:	80 80       	ld	r8, Z
    97e8:	80 80       	ld	r8, Z
    97ea:	80 80       	ld	r8, Z
    97ec:	80 80       	ld	r8, Z
    97ee:	80 80       	ld	r8, Z
    97f0:	80 80       	ld	r8, Z
    97f2:	80 80       	ld	r8, Z
    97f4:	80 80       	ld	r8, Z
    97f6:	80 80       	ld	r8, Z
    97f8:	80 80       	ld	r8, Z
    97fa:	80 80       	ld	r8, Z
    97fc:	80 80       	ld	r8, Z
    97fe:	80 80       	ld	r8, Z
    9800:	7f 7f       	andi	r23, 0xFF	; 255
    9802:	7f 7f       	andi	r23, 0xFF	; 255
    9804:	7f 7f       	andi	r23, 0xFF	; 255
    9806:	7f 7f       	andi	r23, 0xFF	; 255
    9808:	7f 7f       	andi	r23, 0xFF	; 255
    980a:	7f 7f       	andi	r23, 0xFF	; 255
    980c:	7f 7f       	andi	r23, 0xFF	; 255
    980e:	7f 7f       	andi	r23, 0xFF	; 255
    9810:	7f 7f       	andi	r23, 0xFF	; 255
    9812:	7f 7f       	andi	r23, 0xFF	; 255
    9814:	7f 7f       	andi	r23, 0xFF	; 255
    9816:	7f 7f       	andi	r23, 0xFF	; 255
    9818:	7f 7f       	andi	r23, 0xFF	; 255
    981a:	7f 7f       	andi	r23, 0xFF	; 255
    981c:	7f 7f       	andi	r23, 0xFF	; 255
    981e:	7f 7f       	andi	r23, 0xFF	; 255
    9820:	7f 7f       	andi	r23, 0xFF	; 255
    9822:	7f 7f       	andi	r23, 0xFF	; 255
    9824:	7f 7f       	andi	r23, 0xFF	; 255
    9826:	7f 7f       	andi	r23, 0xFF	; 255
    9828:	7f 7f       	andi	r23, 0xFF	; 255
    982a:	7f 7f       	andi	r23, 0xFF	; 255
    982c:	7f 7f       	andi	r23, 0xFF	; 255
    982e:	7f 7f       	andi	r23, 0xFF	; 255
    9830:	7f 7f       	andi	r23, 0xFF	; 255
    9832:	7f 7f       	andi	r23, 0xFF	; 255
    9834:	7f 7f       	andi	r23, 0xFF	; 255
    9836:	7f 7f       	andi	r23, 0xFF	; 255
    9838:	7f 7f       	andi	r23, 0xFF	; 255
    983a:	7f 7f       	andi	r23, 0xFF	; 255
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7f 7f       	andi	r23, 0xFF	; 255
    9848:	7f 7f       	andi	r23, 0xFF	; 255
    984a:	7f 7f       	andi	r23, 0xFF	; 255
    984c:	7f 7f       	andi	r23, 0xFF	; 255
    984e:	7f 7f       	andi	r23, 0xFF	; 255
    9850:	7f 7f       	andi	r23, 0xFF	; 255
    9852:	7f 7f       	andi	r23, 0xFF	; 255
    9854:	7f 7f       	andi	r23, 0xFF	; 255
    9856:	7f 7f       	andi	r23, 0xFF	; 255
    9858:	7f 7f       	andi	r23, 0xFF	; 255
    985a:	7f 7f       	andi	r23, 0xFF	; 255
    985c:	7f 7f       	andi	r23, 0xFF	; 255
    985e:	7f 7f       	andi	r23, 0xFF	; 255
    9860:	7f 7f       	andi	r23, 0xFF	; 255
    9862:	7f 7f       	andi	r23, 0xFF	; 255
    9864:	7f 7f       	andi	r23, 0xFF	; 255
    9866:	7f 7f       	andi	r23, 0xFF	; 255
    9868:	7f 7f       	andi	r23, 0xFF	; 255
    986a:	7f 7f       	andi	r23, 0xFF	; 255
    986c:	7f 7f       	andi	r23, 0xFF	; 255
    986e:	7f 7f       	andi	r23, 0xFF	; 255
    9870:	7f 7f       	andi	r23, 0xFF	; 255
    9872:	7f 7f       	andi	r23, 0xFF	; 255
    9874:	7f 7f       	andi	r23, 0xFF	; 255
    9876:	7f 7f       	andi	r23, 0xFF	; 255
    9878:	7f 7f       	andi	r23, 0xFF	; 255
    987a:	7f 7f       	andi	r23, 0xFF	; 255
    987c:	7f 7f       	andi	r23, 0xFF	; 255
    987e:	7f 7f       	andi	r23, 0xFF	; 255
    9880:	7f 7f       	andi	r23, 0xFF	; 255
    9882:	7f 7f       	andi	r23, 0xFF	; 255
    9884:	7f 7f       	andi	r23, 0xFF	; 255
    9886:	7f 7f       	andi	r23, 0xFF	; 255
    9888:	7f 7f       	andi	r23, 0xFF	; 255
    988a:	7f 7f       	andi	r23, 0xFF	; 255
    988c:	7f 7f       	andi	r23, 0xFF	; 255
    988e:	7f 7f       	andi	r23, 0xFF	; 255
    9890:	7f 7f       	andi	r23, 0xFF	; 255
    9892:	7f 7f       	andi	r23, 0xFF	; 255
    9894:	7f 7f       	andi	r23, 0xFF	; 255
    9896:	7f 7f       	andi	r23, 0xFF	; 255
    9898:	7f 7f       	andi	r23, 0xFF	; 255
    989a:	7f 7f       	andi	r23, 0xFF	; 255
    989c:	7f 7f       	andi	r23, 0xFF	; 255
    989e:	7f 7f       	andi	r23, 0xFF	; 255
    98a0:	7f 7f       	andi	r23, 0xFF	; 255
    98a2:	7f 7f       	andi	r23, 0xFF	; 255
    98a4:	7f 7f       	andi	r23, 0xFF	; 255
    98a6:	7f 7f       	andi	r23, 0xFF	; 255
    98a8:	7f 7f       	andi	r23, 0xFF	; 255
    98aa:	7f 7f       	andi	r23, 0xFF	; 255
    98ac:	7f 7f       	andi	r23, 0xFF	; 255
    98ae:	7f 7f       	andi	r23, 0xFF	; 255
    98b0:	7f 7f       	andi	r23, 0xFF	; 255
    98b2:	7f 7f       	andi	r23, 0xFF	; 255
    98b4:	7f 7f       	andi	r23, 0xFF	; 255
    98b6:	7f 7f       	andi	r23, 0xFF	; 255
    98b8:	7f 7f       	andi	r23, 0xFF	; 255
    98ba:	7f 7f       	andi	r23, 0xFF	; 255
    98bc:	7f 7f       	andi	r23, 0xFF	; 255
    98be:	7f 7f       	andi	r23, 0xFF	; 255
    98c0:	80 80       	ld	r8, Z
    98c2:	80 80       	ld	r8, Z
    98c4:	80 80       	ld	r8, Z
    98c6:	80 80       	ld	r8, Z
    98c8:	80 80       	ld	r8, Z
    98ca:	80 80       	ld	r8, Z
    98cc:	80 80       	ld	r8, Z
    98ce:	80 80       	ld	r8, Z
    98d0:	80 80       	ld	r8, Z
    98d2:	80 80       	ld	r8, Z
    98d4:	80 80       	ld	r8, Z
    98d6:	80 80       	ld	r8, Z
    98d8:	80 80       	ld	r8, Z
    98da:	80 80       	ld	r8, Z
    98dc:	80 80       	ld	r8, Z
    98de:	80 80       	ld	r8, Z
    98e0:	80 80       	ld	r8, Z
    98e2:	80 80       	ld	r8, Z
    98e4:	80 80       	ld	r8, Z
    98e6:	80 80       	ld	r8, Z
    98e8:	80 80       	ld	r8, Z
    98ea:	80 80       	ld	r8, Z
    98ec:	80 80       	ld	r8, Z
    98ee:	80 80       	ld	r8, Z
    98f0:	80 80       	ld	r8, Z
    98f2:	80 80       	ld	r8, Z
    98f4:	80 80       	ld	r8, Z
    98f6:	80 80       	ld	r8, Z
    98f8:	80 80       	ld	r8, Z
    98fa:	80 80       	ld	r8, Z
    98fc:	80 80       	ld	r8, Z
    98fe:	80 80       	ld	r8, Z
    9900:	03 09       	sbc	r16, r3
    9902:	13 1e       	adc	r1, r19
    9904:	28 31       	cpi	r18, 0x18	; 24
    9906:	3a 40       	sbci	r19, 0x0A	; 10
    9908:	46 4c       	sbci	r20, 0xC6	; 198
    990a:	50 54       	subi	r21, 0x40	; 64
    990c:	58 5b       	subi	r21, 0xB8	; 184
    990e:	5e 61       	ori	r21, 0x1E	; 30
    9910:	63 65       	ori	r22, 0x53	; 83
    9912:	67 69       	ori	r22, 0x97	; 151
    9914:	6b 6c       	ori	r22, 0xCB	; 203
    9916:	6e 6f       	ori	r22, 0xFE	; 254
    9918:	70 71       	andi	r23, 0x10	; 16
    991a:	72 73       	andi	r23, 0x32	; 50
    991c:	74 75       	andi	r23, 0x54	; 84
    991e:	76 77       	andi	r23, 0x76	; 118
    9920:	77 78       	andi	r23, 0x87	; 135
    9922:	79 79       	andi	r23, 0x99	; 153
    9924:	7a 7a       	andi	r23, 0xAA	; 170
    9926:	7b 7b       	andi	r23, 0xBB	; 187
    9928:	7c 7c       	andi	r23, 0xCC	; 204
    992a:	7c 7d       	andi	r23, 0xDC	; 220
    992c:	7d 7d       	andi	r23, 0xDD	; 221
    992e:	7e 7e       	andi	r23, 0xEE	; 238
    9930:	7e 7e       	andi	r23, 0xEE	; 238
    9932:	7f 7f       	andi	r23, 0xFF	; 255
    9934:	7f 7f       	andi	r23, 0xFF	; 255
    9936:	7f 7f       	andi	r23, 0xFF	; 255
    9938:	7f 7f       	andi	r23, 0xFF	; 255
    993a:	7f 7f       	andi	r23, 0xFF	; 255
    993c:	7f 7f       	andi	r23, 0xFF	; 255
    993e:	7f 7f       	andi	r23, 0xFF	; 255
    9940:	7f 7f       	andi	r23, 0xFF	; 255
    9942:	7f 7f       	andi	r23, 0xFF	; 255
    9944:	7f 7f       	andi	r23, 0xFF	; 255
    9946:	7f 7f       	andi	r23, 0xFF	; 255
    9948:	7f 7f       	andi	r23, 0xFF	; 255
    994a:	7f 7f       	andi	r23, 0xFF	; 255
    994c:	7f 7e       	andi	r23, 0xEF	; 239
    994e:	7e 7e       	andi	r23, 0xEE	; 238
    9950:	7e 7d       	andi	r23, 0xDE	; 222
    9952:	7d 7d       	andi	r23, 0xDD	; 221
    9954:	7c 7c       	andi	r23, 0xCC	; 204
    9956:	7c 7b       	andi	r23, 0xBC	; 188
    9958:	7b 7a       	andi	r23, 0xAB	; 171
    995a:	7a 79       	andi	r23, 0x9A	; 154
    995c:	79 78       	andi	r23, 0x89	; 137
    995e:	77 77       	andi	r23, 0x77	; 119
    9960:	76 75       	andi	r23, 0x56	; 86
    9962:	74 73       	andi	r23, 0x34	; 52
    9964:	72 71       	andi	r23, 0x12	; 18
    9966:	70 6f       	ori	r23, 0xF0	; 240
    9968:	6e 6c       	ori	r22, 0xCE	; 206
    996a:	6b 69       	ori	r22, 0x9B	; 155
    996c:	67 65       	ori	r22, 0x57	; 87
    996e:	63 61       	ori	r22, 0x13	; 19
    9970:	5e 5b       	subi	r21, 0xBE	; 190
    9972:	58 54       	subi	r21, 0x48	; 72
    9974:	50 4c       	sbci	r21, 0xC0	; 192
    9976:	46 40       	sbci	r20, 0x06	; 6
    9978:	3a 31       	cpi	r19, 0x1A	; 26
    997a:	28 1e       	adc	r2, r24
    997c:	13 09       	sbc	r17, r3
    997e:	03 00       	.word	0x0003	; ????
    9980:	c6 cc       	rjmp	.-1652   	; 0x930e <waves+0xe>
    9982:	d5 db       	rcall	.-2134   	; 0x912e <steptable+0x26>
    9984:	df e3       	ldi	r29, 0x3F	; 63
    9986:	e5 e7       	ldi	r30, 0x75	; 117
    9988:	e9 ea       	ldi	r30, 0xA9	; 169
    998a:	eb ec       	ldi	r30, 0xCB	; 203
    998c:	ed ee       	ldi	r30, 0xED	; 237
    998e:	ef ef       	ldi	r30, 0xFF	; 255
    9990:	f0 f0       	brcs	.+60     	; 0x99ce <waves+0x6ce>
    9992:	f0 f1       	brcs	.+124    	; 0x9a10 <waves+0x710>
    9994:	f1 f1       	breq	.+124    	; 0x9a12 <waves+0x712>
    9996:	f1 f2       	breq	.-68     	; 0x9954 <waves+0x654>
    9998:	f2 f2       	brmi	.-68     	; 0x9956 <waves+0x656>
    999a:	f2 f2       	brmi	.-68     	; 0x9958 <waves+0x658>
    999c:	f2 f2       	brmi	.-68     	; 0x995a <waves+0x65a>
    999e:	f2 f3       	brmi	.-4      	; 0x999c <waves+0x69c>
    99a0:	f3 f3       	brvs	.-4      	; 0x999e <waves+0x69e>
    99a2:	f3 f3       	brvs	.-4      	; 0x99a0 <waves+0x6a0>
    99a4:	f3 f3       	brvs	.-4      	; 0x99a2 <waves+0x6a2>
    99a6:	f3 f3       	brvs	.-4      	; 0x99a4 <waves+0x6a4>
    99a8:	f3 f3       	brvs	.-4      	; 0x99a6 <waves+0x6a6>
    99aa:	f3 f3       	brvs	.-4      	; 0x99a8 <waves+0x6a8>
    99ac:	f3 f3       	brvs	.-4      	; 0x99aa <waves+0x6aa>
    99ae:	f3 f3       	brvs	.-4      	; 0x99ac <waves+0x6ac>
    99b0:	f3 f3       	brvs	.-4      	; 0x99ae <waves+0x6ae>
    99b2:	f3 f3       	brvs	.-4      	; 0x99b0 <waves+0x6b0>
    99b4:	f3 f3       	brvs	.-4      	; 0x99b2 <waves+0x6b2>
    99b6:	f3 f3       	brvs	.-4      	; 0x99b4 <waves+0x6b4>
    99b8:	f3 f3       	brvs	.-4      	; 0x99b6 <waves+0x6b6>
    99ba:	f3 f3       	brvs	.-4      	; 0x99b8 <waves+0x6b8>
    99bc:	f3 f3       	brvs	.-4      	; 0x99ba <waves+0x6ba>
    99be:	f3 f3       	brvs	.-4      	; 0x99bc <waves+0x6bc>
    99c0:	f3 f3       	brvs	.-4      	; 0x99be <waves+0x6be>
    99c2:	f3 f3       	brvs	.-4      	; 0x99c0 <waves+0x6c0>
    99c4:	f3 f3       	brvs	.-4      	; 0x99c2 <waves+0x6c2>
    99c6:	f3 f3       	brvs	.-4      	; 0x99c4 <waves+0x6c4>
    99c8:	f3 f3       	brvs	.-4      	; 0x99c6 <waves+0x6c6>
    99ca:	f3 f3       	brvs	.-4      	; 0x99c8 <waves+0x6c8>
    99cc:	f3 f3       	brvs	.-4      	; 0x99ca <waves+0x6ca>
    99ce:	f3 f3       	brvs	.-4      	; 0x99cc <waves+0x6cc>
    99d0:	f3 f3       	brvs	.-4      	; 0x99ce <waves+0x6ce>
    99d2:	f3 f3       	brvs	.-4      	; 0x99d0 <waves+0x6d0>
    99d4:	f3 f3       	brvs	.-4      	; 0x99d2 <waves+0x6d2>
    99d6:	f3 f3       	brvs	.-4      	; 0x99d4 <waves+0x6d4>
    99d8:	f3 f3       	brvs	.-4      	; 0x99d6 <waves+0x6d6>
    99da:	f3 f3       	brvs	.-4      	; 0x99d8 <waves+0x6d8>
    99dc:	f3 f3       	brvs	.-4      	; 0x99da <waves+0x6da>
    99de:	f3 f3       	brvs	.-4      	; 0x99dc <waves+0x6dc>
    99e0:	f2 f2       	brmi	.-68     	; 0x999e <waves+0x69e>
    99e2:	f2 f2       	brmi	.-68     	; 0x99a0 <waves+0x6a0>
    99e4:	f2 f2       	brmi	.-68     	; 0x99a2 <waves+0x6a2>
    99e6:	f2 f2       	brmi	.-68     	; 0x99a4 <waves+0x6a4>
    99e8:	f1 f1       	breq	.+124    	; 0x9a66 <waves+0x766>
    99ea:	f1 f1       	breq	.+124    	; 0x9a68 <waves+0x768>
    99ec:	f0 f0       	brcs	.+60     	; 0x9a2a <waves+0x72a>
    99ee:	f0 ef       	ldi	r31, 0xF0	; 240
    99f0:	ef ee       	ldi	r30, 0xEF	; 239
    99f2:	ed ec       	ldi	r30, 0xCD	; 205
    99f4:	eb ea       	ldi	r30, 0xAB	; 171
    99f6:	e9 e7       	ldi	r30, 0x79	; 121
    99f8:	e5 e3       	ldi	r30, 0x35	; 53
    99fa:	df db       	rcall	.-2114   	; 0x91ba <steptable+0xb2>
    99fc:	d5 cc       	rjmp	.-1622   	; 0x93a8 <waves+0xa8>
    99fe:	c6 00       	.word	0x00c6	; ????
    9a00:	00 28       	or	r0, r0
    9a02:	3d 42       	sbci	r19, 0x2D	; 45
    9a04:	30 2d       	mov	r19, r0
    9a06:	2c 2b       	or	r18, r28
    9a08:	2c 2d       	mov	r18, r12
    9a0a:	2e 2f       	mov	r18, r30
    9a0c:	30 32       	cpi	r19, 0x20	; 32
    9a0e:	33 35       	cpi	r19, 0x53	; 83
    9a10:	37 39       	cpi	r19, 0x97	; 151
    9a12:	3b 3d       	cpi	r19, 0xDB	; 219
    9a14:	3f 41       	sbci	r19, 0x1F	; 31
    9a16:	43 45       	sbci	r20, 0x53	; 83
    9a18:	48 4a       	sbci	r20, 0xA8	; 168
    9a1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9a1c:	50 53       	subi	r21, 0x30	; 48
    9a1e:	55 57       	subi	r21, 0x75	; 117
    9a20:	59 5b       	subi	r21, 0xB9	; 185
    9a22:	5d 5f       	subi	r21, 0xFD	; 253
    9a24:	61 63       	ori	r22, 0x31	; 49
    9a26:	65 67       	ori	r22, 0x75	; 117
    9a28:	69 6b       	ori	r22, 0xB9	; 185
    9a2a:	6c 6e       	ori	r22, 0xEC	; 236
    9a2c:	70 71       	andi	r23, 0x10	; 16
    9a2e:	73 74       	andi	r23, 0x43	; 67
    9a30:	75 77       	andi	r23, 0x75	; 117
    9a32:	78 79       	andi	r23, 0x98	; 152
    9a34:	7a 7b       	andi	r23, 0xBA	; 186
    9a36:	7c 7d       	andi	r23, 0xDC	; 220
    9a38:	7d 7e       	andi	r23, 0xED	; 237
    9a3a:	7e 7f       	andi	r23, 0xFE	; 254
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	7f 7f       	andi	r23, 0xFF	; 255
    9a42:	7f 7f       	andi	r23, 0xFF	; 255
    9a44:	7f 7f       	andi	r23, 0xFF	; 255
    9a46:	7e 7e       	andi	r23, 0xEE	; 238
    9a48:	7d 7d       	andi	r23, 0xDD	; 221
    9a4a:	7c 7b       	andi	r23, 0xBC	; 188
    9a4c:	7a 79       	andi	r23, 0x9A	; 154
    9a4e:	78 77       	andi	r23, 0x78	; 120
    9a50:	75 74       	andi	r23, 0x45	; 69
    9a52:	73 71       	andi	r23, 0x13	; 19
    9a54:	70 6e       	ori	r23, 0xE0	; 224
    9a56:	6c 6b       	ori	r22, 0xBC	; 188
    9a58:	69 67       	ori	r22, 0x79	; 121
    9a5a:	65 63       	ori	r22, 0x35	; 53
    9a5c:	61 5f       	subi	r22, 0xF1	; 241
    9a5e:	5d 5b       	subi	r21, 0xBD	; 189
    9a60:	59 57       	subi	r21, 0x79	; 121
    9a62:	55 53       	subi	r21, 0x35	; 53
    9a64:	50 4e       	sbci	r21, 0xE0	; 224
    9a66:	4c 4a       	sbci	r20, 0xAC	; 172
    9a68:	48 45       	sbci	r20, 0x58	; 88
    9a6a:	43 41       	sbci	r20, 0x13	; 19
    9a6c:	3f 3d       	cpi	r19, 0xDF	; 223
    9a6e:	3b 39       	cpi	r19, 0x9B	; 155
    9a70:	37 35       	cpi	r19, 0x57	; 87
    9a72:	33 32       	cpi	r19, 0x23	; 35
    9a74:	30 2f       	mov	r19, r16
    9a76:	2e 2d       	mov	r18, r14
    9a78:	2c 2b       	or	r18, r28
    9a7a:	2c 2d       	mov	r18, r12
    9a7c:	30 42       	sbci	r19, 0x20	; 32
    9a7e:	3d 28       	or	r3, r13
    9a80:	00 e9       	ldi	r16, 0x90	; 144
    9a82:	e5 fe       	sbrs	r14, 5
    9a84:	d4 d7       	rcall	.+4008   	; 0xaa2e <init_player_shot+0x366>
    9a86:	d7 d7       	rcall	.+4014   	; 0xaa36 <init_player_shot+0x36e>
    9a88:	d6 d4       	rcall	.+2476   	; 0xa436 <LBPrintInt+0x60>
    9a8a:	d2 d0       	rcall	.+420    	; 0x9c30 <waves+0x930>
    9a8c:	ce cc       	rjmp	.-1636   	; 0x942a <waves+0x12a>
    9a8e:	ca c8       	rjmp	.-3692   	; 0x8c24 <ProcessMusic+0xc>
    9a90:	c6 c3       	rjmp	.+1932   	; 0xa21e <LBGetNextFrame+0x4>
    9a92:	c1 bf       	out	0x31, r28	; 49
    9a94:	bd ba       	out	0x1d, r11	; 29
    9a96:	b8 b6       	in	r11, 0x38	; 56
    9a98:	b4 b1       	in	r27, 0x04	; 4
    9a9a:	af ad       	ldd	r26, Y+63	; 0x3f
    9a9c:	ab a9       	ldd	r26, Y+51	; 0x33
    9a9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9aa0:	a3 a1       	ldd	r26, Z+35	; 0x23
    9aa2:	9f 9e       	mul	r9, r31
    9aa4:	9c 9a       	sbi	0x13, 4	; 19
    9aa6:	99 97       	sbiw	r26, 0x29	; 41
    9aa8:	95 94       	asr	r9
    9aaa:	93 91       	.word	0x9193	; ????
    9aac:	90 8f       	std	Z+24, r25	; 0x18
    9aae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9ab0:	8b 8a       	std	Y+19, r8	; 0x13
    9ab2:	89 88       	ldd	r8, Y+17	; 0x11
    9ab4:	88 87       	std	Y+8, r24	; 0x08
    9ab6:	86 85       	ldd	r24, Z+14	; 0x0e
    9ab8:	85 84       	ldd	r8, Z+13	; 0x0d
    9aba:	84 84       	ldd	r8, Z+12	; 0x0c
    9abc:	83 83       	std	Z+3, r24	; 0x03
    9abe:	83 83       	std	Z+3, r24	; 0x03
    9ac0:	83 83       	std	Z+3, r24	; 0x03
    9ac2:	83 83       	std	Z+3, r24	; 0x03
    9ac4:	83 84       	ldd	r8, Z+11	; 0x0b
    9ac6:	84 84       	ldd	r8, Z+12	; 0x0c
    9ac8:	85 85       	ldd	r24, Z+13	; 0x0d
    9aca:	86 87       	std	Z+14, r24	; 0x0e
    9acc:	88 88       	ldd	r8, Y+16	; 0x10
    9ace:	89 8a       	std	Y+17, r8	; 0x11
    9ad0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    9ad4:	90 91 93 94 	lds	r25, 0x9493
    9ad8:	95 97       	sbiw	r26, 0x25	; 37
    9ada:	99 9a       	sbi	0x13, 1	; 19
    9adc:	9c 9e       	mul	r9, r28
    9ade:	9f a1       	ldd	r25, Y+39	; 0x27
    9ae0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ae2:	a7 a9       	ldd	r26, Z+55	; 0x37
    9ae4:	ab ad       	ldd	r26, Y+59	; 0x3b
    9ae6:	af b1       	in	r26, 0x0f	; 15
    9ae8:	b4 b6       	in	r11, 0x34	; 52
    9aea:	b8 ba       	out	0x18, r11	; 24
    9aec:	bd bf       	out	0x3d, r27	; 61
    9aee:	c1 c3       	rjmp	.+1922   	; 0xa272 <LBGetJoyPadState+0xc>
    9af0:	c6 c8       	rjmp	.-3700   	; 0x8c7e <ProcessMusic+0x66>
    9af2:	ca cc       	rjmp	.-1644   	; 0x9488 <waves+0x188>
    9af4:	ce d0       	rcall	.+412    	; 0x9c92 <waves+0x992>
    9af6:	d2 d4       	rcall	.+2468   	; 0xa49c <LBRandom>
    9af8:	d6 d7       	rcall	.+4012   	; 0xaaa6 <init_player_shot+0x3de>
    9afa:	d7 d7       	rcall	.+4014   	; 0xaaaa <init_player_shot+0x3e2>
    9afc:	d4 fe       	sbrs	r13, 4
    9afe:	e5 e9       	ldi	r30, 0x95	; 149
    9b00:	f9 f8       	.word	0xf8f9	; ????
    9b02:	f9 f5       	brne	.+126    	; 0x9b82 <waves+0x882>
    9b04:	eb e1       	ldi	r30, 0x1B	; 27
    9b06:	dd de       	rcall	.-582    	; 0x98c2 <waves+0x5c2>
    9b08:	e0 e2       	ldi	r30, 0x20	; 32
    9b0a:	e4 e5       	ldi	r30, 0x54	; 84
    9b0c:	e6 e5       	ldi	r30, 0x56	; 86
    9b0e:	e4 e2       	ldi	r30, 0x24	; 36
    9b10:	de d9       	rcall	.-3140   	; 0x8ece <ProcessMusic+0x2b6>
    9b12:	d2 ca       	rjmp	.-2652   	; 0x90b8 <smw1+0x8>
    9b14:	c1 b7       	in	r28, 0x31	; 49
    9b16:	ac a2       	std	Y+36, r10	; 0x24
    9b18:	99 91       	ld	r25, Y+
    9b1a:	8a 86       	std	Y+10, r8	; 0x0a
    9b1c:	83 81       	ldd	r24, Z+3	; 0x03
    9b1e:	80 80       	ld	r8, Z
    9b20:	81 82       	std	Z+1, r8	; 0x01
    9b22:	83 85       	ldd	r24, Z+11	; 0x0b
    9b24:	86 88       	ldd	r8, Z+22	; 0x16
    9b26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9b28:	8d 8f       	std	Y+29, r24	; 0x1d
    9b2a:	90 92 93 95 	sts	0x9593, r9
    9b2e:	96 97       	sbiw	r26, 0x26	; 38
    9b30:	98 99       	sbic	0x13, 0	; 19
    9b32:	9a 9b       	sbis	0x13, 2	; 19
    9b34:	9b 9c       	mul	r9, r11
    9b36:	9d 9d       	mul	r25, r13
    9b38:	9d 9e       	mul	r9, r29
    9b3a:	9e 9e       	mul	r9, r30
    9b3c:	9f 9f       	mul	r25, r31
    9b3e:	9f 9f       	mul	r25, r31
    9b40:	9f 9f       	mul	r25, r31
    9b42:	9f 9e       	mul	r9, r31
    9b44:	9e 9e       	mul	r9, r30
    9b46:	9d 9d       	mul	r25, r13
    9b48:	9d 9c       	mul	r9, r13
    9b4a:	9b 9b       	sbis	0x13, 3	; 19
    9b4c:	9a 99       	sbic	0x13, 2	; 19
    9b4e:	98 97       	sbiw	r26, 0x28	; 40
    9b50:	96 95       	lsr	r25
    9b52:	93 92       	.word	0x9293	; ????
    9b54:	90 8f       	std	Z+24, r25	; 0x18
    9b56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9b58:	8a 88       	ldd	r8, Y+18	; 0x12
    9b5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9b5c:	83 82       	std	Z+3, r8	; 0x03
    9b5e:	81 80       	ldd	r8, Z+1	; 0x01
    9b60:	80 81       	ld	r24, Z
    9b62:	83 86       	std	Z+11, r8	; 0x0b
    9b64:	8a 91       	ld	r24, -Y
    9b66:	99 a2       	std	Y+33, r9	; 0x21
    9b68:	ac b7       	in	r26, 0x3c	; 60
    9b6a:	c1 ca       	rjmp	.-2686   	; 0x90ee <esmw+0x28>
    9b6c:	d2 d9       	rcall	.-3164   	; 0x8f12 <ProcessMusic+0x2fa>
    9b6e:	de e2       	ldi	r29, 0x2E	; 46
    9b70:	e4 e5       	ldi	r30, 0x54	; 84
    9b72:	e6 e5       	ldi	r30, 0x56	; 86
    9b74:	e4 e2       	ldi	r30, 0x24	; 36
    9b76:	e0 de       	rcall	.-576    	; 0x9938 <waves+0x638>
    9b78:	dd e1       	ldi	r29, 0x1D	; 29
    9b7a:	eb f5       	brvc	.+122    	; 0x9bf6 <waves+0x8f6>
    9b7c:	f9 f8       	.word	0xf8f9	; ????
    9b7e:	f9 00       	.word	0x00f9	; ????
    9b80:	07 08       	sbc	r0, r7
    9b82:	07 0b       	sbc	r16, r23
    9b84:	15 1f       	adc	r17, r21
    9b86:	23 22       	and	r2, r19
    9b88:	20 1e       	adc	r2, r16
    9b8a:	1c 1b       	sub	r17, r28
    9b8c:	1a 1b       	sub	r17, r26
    9b8e:	1c 1e       	adc	r1, r28
    9b90:	22 27       	eor	r18, r18
    9b92:	2e 36       	cpi	r18, 0x6E	; 110
    9b94:	3f 49       	sbci	r19, 0x9F	; 159
    9b96:	54 5e       	subi	r21, 0xE4	; 228
    9b98:	67 6f       	ori	r22, 0xF7	; 247
    9b9a:	76 7a       	andi	r23, 0xA6	; 166
    9b9c:	7e 7f       	andi	r23, 0xFE	; 254
    9b9e:	7f 7f       	andi	r23, 0xFF	; 255
    9ba0:	7f 7e       	andi	r23, 0xEF	; 239
    9ba2:	7d 7b       	andi	r23, 0xBD	; 189
    9ba4:	7a 78       	andi	r23, 0x8A	; 138
    9ba6:	76 74       	andi	r23, 0x46	; 70
    9ba8:	73 71       	andi	r23, 0x13	; 19
    9baa:	70 6e       	ori	r23, 0xE0	; 224
    9bac:	6d 6b       	ori	r22, 0xBD	; 189
    9bae:	6a 69       	ori	r22, 0x9A	; 154
    9bb0:	68 67       	ori	r22, 0x78	; 120
    9bb2:	66 65       	ori	r22, 0x56	; 86
    9bb4:	65 64       	ori	r22, 0x45	; 69
    9bb6:	64 63       	ori	r22, 0x34	; 52
    9bb8:	63 62       	ori	r22, 0x23	; 35
    9bba:	62 62       	ori	r22, 0x22	; 34
    9bbc:	61 61       	ori	r22, 0x11	; 17
    9bbe:	61 61       	ori	r22, 0x11	; 17
    9bc0:	61 61       	ori	r22, 0x11	; 17
    9bc2:	61 62       	ori	r22, 0x21	; 33
    9bc4:	62 62       	ori	r22, 0x22	; 34
    9bc6:	63 63       	ori	r22, 0x33	; 51
    9bc8:	63 64       	ori	r22, 0x43	; 67
    9bca:	65 65       	ori	r22, 0x55	; 85
    9bcc:	66 67       	ori	r22, 0x76	; 118
    9bce:	68 69       	ori	r22, 0x98	; 152
    9bd0:	6a 6b       	ori	r22, 0xBA	; 186
    9bd2:	6d 6e       	ori	r22, 0xED	; 237
    9bd4:	70 71       	andi	r23, 0x10	; 16
    9bd6:	73 74       	andi	r23, 0x43	; 67
    9bd8:	76 78       	andi	r23, 0x86	; 134
    9bda:	7a 7b       	andi	r23, 0xBA	; 186
    9bdc:	7d 7e       	andi	r23, 0xED	; 237
    9bde:	7f 7f       	andi	r23, 0xFF	; 255
    9be0:	7f 7f       	andi	r23, 0xFF	; 255
    9be2:	7e 7a       	andi	r23, 0xAE	; 174
    9be4:	76 6f       	ori	r23, 0xF6	; 246
    9be6:	67 5e       	subi	r22, 0xE7	; 231
    9be8:	54 49       	sbci	r21, 0x94	; 148
    9bea:	3f 36       	cpi	r19, 0x6F	; 111
    9bec:	2e 27       	eor	r18, r30
    9bee:	22 1e       	adc	r2, r18
    9bf0:	1c 1b       	sub	r17, r28
    9bf2:	1a 1b       	sub	r17, r26
    9bf4:	1c 1e       	adc	r1, r28
    9bf6:	20 22       	and	r2, r16
    9bf8:	23 1f       	adc	r18, r19
    9bfa:	15 0b       	sbc	r17, r21
    9bfc:	07 08       	sbc	r0, r7
    9bfe:	07 00       	.word	0x0007	; ????
    9c00:	1f 31       	cpi	r17, 0x1F	; 31
    9c02:	3d 44       	sbci	r19, 0x4D	; 77
    9c04:	4e 53       	subi	r20, 0x3E	; 62
    9c06:	54 56       	subi	r21, 0x64	; 100
    9c08:	5a 5f       	subi	r21, 0xFA	; 250
    9c0a:	64 69       	ori	r22, 0x94	; 148
    9c0c:	6e 74       	andi	r22, 0x4E	; 78
    9c0e:	76 79       	andi	r23, 0x96	; 150
    9c10:	7c 7f       	andi	r23, 0xFC	; 252
    9c12:	7f 7f       	andi	r23, 0xFF	; 255
    9c14:	7f 7f       	andi	r23, 0xFF	; 255
    9c16:	7f 7f       	andi	r23, 0xFF	; 255
    9c18:	7f 7f       	andi	r23, 0xFF	; 255
    9c1a:	7f 7f       	andi	r23, 0xFF	; 255
    9c1c:	7f 7f       	andi	r23, 0xFF	; 255
    9c1e:	7f 7f       	andi	r23, 0xFF	; 255
    9c20:	7f 7f       	andi	r23, 0xFF	; 255
    9c22:	7f 7f       	andi	r23, 0xFF	; 255
    9c24:	7f 7f       	andi	r23, 0xFF	; 255
    9c26:	7f 7f       	andi	r23, 0xFF	; 255
    9c28:	7f 7f       	andi	r23, 0xFF	; 255
    9c2a:	7f 7f       	andi	r23, 0xFF	; 255
    9c2c:	7f 7f       	andi	r23, 0xFF	; 255
    9c2e:	7f 7f       	andi	r23, 0xFF	; 255
    9c30:	7f 7f       	andi	r23, 0xFF	; 255
    9c32:	7f 7f       	andi	r23, 0xFF	; 255
    9c34:	7f 7f       	andi	r23, 0xFF	; 255
    9c36:	7f 7f       	andi	r23, 0xFF	; 255
    9c38:	7f 7f       	andi	r23, 0xFF	; 255
    9c3a:	7f 7f       	andi	r23, 0xFF	; 255
    9c3c:	7f 7f       	andi	r23, 0xFF	; 255
    9c3e:	7f 7f       	andi	r23, 0xFF	; 255
    9c40:	7f 7f       	andi	r23, 0xFF	; 255
    9c42:	7f 7f       	andi	r23, 0xFF	; 255
    9c44:	7f 7f       	andi	r23, 0xFF	; 255
    9c46:	7f 7f       	andi	r23, 0xFF	; 255
    9c48:	7f 7f       	andi	r23, 0xFF	; 255
    9c4a:	7f 7f       	andi	r23, 0xFF	; 255
    9c4c:	7f 7f       	andi	r23, 0xFF	; 255
    9c4e:	7f 7f       	andi	r23, 0xFF	; 255
    9c50:	7f 7f       	andi	r23, 0xFF	; 255
    9c52:	7f 7f       	andi	r23, 0xFF	; 255
    9c54:	7f 7f       	andi	r23, 0xFF	; 255
    9c56:	7f 7f       	andi	r23, 0xFF	; 255
    9c58:	7f 7f       	andi	r23, 0xFF	; 255
    9c5a:	7f 7f       	andi	r23, 0xFF	; 255
    9c5c:	7f 7f       	andi	r23, 0xFF	; 255
    9c5e:	7f 7f       	andi	r23, 0xFF	; 255
    9c60:	7f 7f       	andi	r23, 0xFF	; 255
    9c62:	7f 7f       	andi	r23, 0xFF	; 255
    9c64:	7f 7f       	andi	r23, 0xFF	; 255
    9c66:	7f 7f       	andi	r23, 0xFF	; 255
    9c68:	7f 7f       	andi	r23, 0xFF	; 255
    9c6a:	7f 7f       	andi	r23, 0xFF	; 255
    9c6c:	7f 7f       	andi	r23, 0xFF	; 255
    9c6e:	7f 7f       	andi	r23, 0xFF	; 255
    9c70:	7f 7f       	andi	r23, 0xFF	; 255
    9c72:	7f 7f       	andi	r23, 0xFF	; 255
    9c74:	7f 7f       	andi	r23, 0xFF	; 255
    9c76:	7f 7f       	andi	r23, 0xFF	; 255
    9c78:	7f 7f       	andi	r23, 0xFF	; 255
    9c7a:	7f 7c       	andi	r23, 0xCF	; 207
    9c7c:	78 71       	andi	r23, 0x18	; 24
    9c7e:	68 4c       	sbci	r22, 0xC8	; 200
    9c80:	2c 1c       	adc	r2, r12
    9c82:	12 0c       	add	r1, r2
    9c84:	0a 0b       	sbc	r16, r26
    9c86:	0a 05       	cpc	r16, r10
    9c88:	fd f3       	brhs	.-2      	; 0x9c88 <waves+0x988>
    9c8a:	e9 df       	rcall	.-46     	; 0x9c5e <waves+0x95e>
    9c8c:	d4 ca       	rjmp	.-2648   	; 0x9236 <steptable+0x12e>
    9c8e:	c0 b7       	in	r28, 0x30	; 48
    9c90:	ae a6       	std	Y+46, r10	; 0x2e
    9c92:	9e 97       	sbiw	r26, 0x2e	; 46
    9c94:	91 8b       	std	Z+17, r25	; 0x11
    9c96:	86 85       	ldd	r24, Z+14	; 0x0e
    9c98:	82 80       	ldd	r8, Z+2	; 0x02
    9c9a:	80 80       	ld	r8, Z
    9c9c:	80 80       	ld	r8, Z
    9c9e:	80 80       	ld	r8, Z
    9ca0:	80 80       	ld	r8, Z
    9ca2:	80 80       	ld	r8, Z
    9ca4:	80 80       	ld	r8, Z
    9ca6:	80 80       	ld	r8, Z
    9ca8:	80 80       	ld	r8, Z
    9caa:	80 80       	ld	r8, Z
    9cac:	80 80       	ld	r8, Z
    9cae:	80 80       	ld	r8, Z
    9cb0:	80 80       	ld	r8, Z
    9cb2:	80 80       	ld	r8, Z
    9cb4:	80 80       	ld	r8, Z
    9cb6:	80 80       	ld	r8, Z
    9cb8:	80 80       	ld	r8, Z
    9cba:	80 80       	ld	r8, Z
    9cbc:	80 80       	ld	r8, Z
    9cbe:	80 80       	ld	r8, Z
    9cc0:	80 80       	ld	r8, Z
    9cc2:	80 80       	ld	r8, Z
    9cc4:	80 80       	ld	r8, Z
    9cc6:	80 80       	ld	r8, Z
    9cc8:	80 80       	ld	r8, Z
    9cca:	80 80       	ld	r8, Z
    9ccc:	80 80       	ld	r8, Z
    9cce:	80 80       	ld	r8, Z
    9cd0:	80 80       	ld	r8, Z
    9cd2:	80 80       	ld	r8, Z
    9cd4:	80 80       	ld	r8, Z
    9cd6:	80 80       	ld	r8, Z
    9cd8:	80 80       	ld	r8, Z
    9cda:	80 80       	ld	r8, Z
    9cdc:	80 80       	ld	r8, Z
    9cde:	80 80       	ld	r8, Z
    9ce0:	80 80       	ld	r8, Z
    9ce2:	80 80       	ld	r8, Z
    9ce4:	80 80       	ld	r8, Z
    9ce6:	80 80       	ld	r8, Z
    9ce8:	80 80       	ld	r8, Z
    9cea:	80 80       	ld	r8, Z
    9cec:	80 80       	ld	r8, Z
    9cee:	80 80       	ld	r8, Z
    9cf0:	80 80       	ld	r8, Z
    9cf2:	80 80       	ld	r8, Z
    9cf4:	80 87       	std	Z+8, r24	; 0x08
    9cf6:	91 9d       	mul	r25, r1
    9cf8:	ac c4       	rjmp	.+2392   	; 0xa652 <LBRotateSprites+0x4c>
    9cfa:	cb d4       	rcall	.+2454   	; 0xa692 <init_default_high_scores+0x1c>
    9cfc:	dd f2       	brhs	.-74     	; 0x9cb4 <waves+0x9b4>
    9cfe:	fa fa       	.word	0xfafa	; ????

00009d00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9d00:	80 91 f3 0c 	lds	r24, 0x0CF3
    9d04:	90 91 88 0d 	lds	r25, 0x0D88
    9d08:	89 17       	cp	r24, r25
    9d0a:	78 f4       	brcc	.+30     	; 0x9d2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    9d0c:	e8 2f       	mov	r30, r24
    9d0e:	f0 e0       	ldi	r31, 0x00	; 0
    9d10:	9f 01       	movw	r18, r30
    9d12:	22 0f       	add	r18, r18
    9d14:	33 1f       	adc	r19, r19
    9d16:	e2 0f       	add	r30, r18
    9d18:	f3 1f       	adc	r31, r19
    9d1a:	e0 5b       	subi	r30, 0xB0	; 176
    9d1c:	f3 4f       	sbci	r31, 0xF3	; 243
    9d1e:	a0 81       	ld	r26, Z
    9d20:	b1 81       	ldd	r27, Z+1	; 0x01
    9d22:	92 81       	ldd	r25, Z+2	; 0x02
    9d24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9d26:	8f 5f       	subi	r24, 0xFF	; 255
    9d28:	ed cf       	rjmp	.-38     	; 0x9d04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    9d2a:	08 95       	ret

00009d2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    9d2c:	2f 92       	push	r2
    9d2e:	3f 92       	push	r3
    9d30:	4f 92       	push	r4
    9d32:	5f 92       	push	r5
    9d34:	6f 92       	push	r6
    9d36:	7f 92       	push	r7
    9d38:	8f 92       	push	r8
    9d3a:	9f 92       	push	r9
    9d3c:	af 92       	push	r10
    9d3e:	bf 92       	push	r11
    9d40:	cf 92       	push	r12
    9d42:	df 92       	push	r13
    9d44:	ef 92       	push	r14
    9d46:	ff 92       	push	r15
    9d48:	0f 93       	push	r16
    9d4a:	1f 93       	push	r17
    9d4c:	cf 93       	push	r28
    9d4e:	df 93       	push	r29
    9d50:	00 d0       	rcall	.+0      	; 0x9d52 <ProcessSprites+0x26>
    9d52:	00 d0       	rcall	.+0      	; 0x9d54 <ProcessSprites+0x28>
    9d54:	cd b7       	in	r28, 0x3d	; 61
    9d56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9d58:	80 91 00 05 	lds	r24, 0x0500
    9d5c:	88 23       	and	r24, r24
    9d5e:	09 f4       	brne	.+2      	; 0x9d62 <ProcessSprites+0x36>
    9d60:	e0 c0       	rjmp	.+448    	; 0x9f22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9d62:	80 91 f2 0c 	lds	r24, 0x0CF2
    9d66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    9d6a:	80 93 88 0d 	sts	0x0D88, r24
    9d6e:	e0 e1       	ldi	r30, 0x10	; 16
    9d70:	ce 2e       	mov	r12, r30
    9d72:	e5 e0       	ldi	r30, 0x05	; 5
    9d74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9d76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9d78:	f6 01       	movw	r30, r12
    9d7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    9d7c:	20 3e       	cpi	r18, 0xE0	; 224
    9d7e:	09 f4       	brne	.+2      	; 0x9d82 <ProcessSprites+0x56>
    9d80:	b1 c0       	rjmp	.+354    	; 0x9ee4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9d82:	80 91 b2 0c 	lds	r24, 0x0CB2
    9d86:	90 e0       	ldi	r25, 0x00	; 0
    9d88:	82 0f       	add	r24, r18
    9d8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    9d8c:	41 81       	ldd	r20, Z+1	; 0x01
    9d8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9d92:	30 e0       	ldi	r19, 0x00	; 0
    9d94:	24 0f       	add	r18, r20
    9d96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9d98:	ac 01       	movw	r20, r24
    9d9a:	73 e0       	ldi	r23, 0x03	; 3
    9d9c:	56 95       	lsr	r21
    9d9e:	47 95       	ror	r20
    9da0:	7a 95       	dec	r23
    9da2:	e1 f7       	brne	.-8      	; 0x9d9c <ProcessSprites+0x70>
    9da4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    9da6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    9da8:	11 f0       	breq	.+4      	; 0x9dae <ProcessSprites+0x82>
    9daa:	92 e0       	ldi	r25, 0x02	; 2
    9dac:	01 c0       	rjmp	.+2      	; 0x9db0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    9dae:	91 e0       	ldi	r25, 0x01	; 1
    9db0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    9db2:	a9 01       	movw	r20, r18
    9db4:	63 e0       	ldi	r22, 0x03	; 3
    9db6:	56 95       	lsr	r21
    9db8:	47 95       	ror	r20
    9dba:	6a 95       	dec	r22
    9dbc:	e1 f7       	brne	.-8      	; 0x9db6 <ProcessSprites+0x8a>
    9dbe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    9dc0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    9dc2:	19 f0       	breq	.+6      	; 0x9dca <ProcessSprites+0x9e>
    9dc4:	52 e0       	ldi	r21, 0x02	; 2
    9dc6:	35 2e       	mov	r3, r21
    9dc8:	02 c0       	rjmp	.+4      	; 0x9dce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    9dca:	33 24       	eor	r3, r3
    9dcc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9dce:	30 e0       	ldi	r19, 0x00	; 0
    9dd0:	32 2f       	mov	r19, r18
    9dd2:	22 27       	eor	r18, r18
    9dd4:	f9 01       	movw	r30, r18
    9dd6:	e8 0f       	add	r30, r24
    9dd8:	f1 1d       	adc	r31, r1
    9dda:	fc 83       	std	Y+4, r31	; 0x04
    9ddc:	eb 83       	std	Y+3, r30	; 0x03
    9dde:	e1 2c       	mov	r14, r1
    9de0:	f1 2c       	mov	r15, r1
    9de2:	be 2c       	mov	r11, r14
    9de4:	aa 24       	eor	r10, r10
    9de6:	26 2c       	mov	r2, r6
    9de8:	45 2c       	mov	r4, r5
    9dea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    9dec:	84 2c       	mov	r8, r4
    9dee:	91 2c       	mov	r9, r1
    9df0:	84 2d       	mov	r24, r4
    9df2:	20 91 b4 0c 	lds	r18, 0x0CB4
    9df6:	42 2f       	mov	r20, r18
    9df8:	50 e0       	ldi	r21, 0x00	; 0
    9dfa:	44 0f       	add	r20, r20
    9dfc:	55 1f       	adc	r21, r21
    9dfe:	84 16       	cp	r8, r20
    9e00:	95 06       	cpc	r9, r21
    9e02:	14 f0       	brlt	.+4      	; 0x9e08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9e04:	22 0f       	add	r18, r18
    9e06:	03 c0       	rjmp	.+6      	; 0x9e0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9e08:	42 16       	cp	r4, r18
    9e0a:	10 f0       	brcs	.+4      	; 0x9e10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    9e0c:	84 2d       	mov	r24, r4
    9e0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9e10:	ff e1       	ldi	r31, 0x1F	; 31
    9e12:	f2 15       	cp	r31, r2
    9e14:	18 f4       	brcc	.+6      	; 0x9e1c <ProcessSprites+0xf0>
    9e16:	00 ee       	ldi	r16, 0xE0	; 224
    9e18:	02 0d       	add	r16, r2
    9e1a:	01 c0       	rjmp	.+2      	; 0x9e1e <ProcessSprites+0xf2>
    9e1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    9e1e:	28 2f       	mov	r18, r24
    9e20:	26 95       	lsr	r18
    9e22:	26 95       	lsr	r18
    9e24:	26 95       	lsr	r18
    9e26:	10 e0       	ldi	r17, 0x00	; 0
    9e28:	40 e2       	ldi	r20, 0x20	; 32
    9e2a:	24 9f       	mul	r18, r20
    9e2c:	00 0d       	add	r16, r0
    9e2e:	11 1d       	adc	r17, r1
    9e30:	11 24       	eor	r1, r1
    9e32:	23 e0       	ldi	r18, 0x03	; 3
    9e34:	00 0f       	add	r16, r16
    9e36:	11 1f       	adc	r17, r17
    9e38:	2a 95       	dec	r18
    9e3a:	e1 f7       	brne	.-8      	; 0x9e34 <ProcessSprites+0x108>
    9e3c:	87 70       	andi	r24, 0x07	; 7
    9e3e:	08 0f       	add	r16, r24
    9e40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9e42:	00 50       	subi	r16, 0x00	; 0
    9e44:	1f 4f       	sbci	r17, 0xFF	; 255
    9e46:	f8 01       	movw	r30, r16
    9e48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    9e4a:	81 e0       	ldi	r24, 0x01	; 1
    9e4c:	7c 31       	cpi	r23, 0x1C	; 28
    9e4e:	08 f4       	brcc	.+2      	; 0x9e52 <ProcessSprites+0x126>
    9e50:	80 e0       	ldi	r24, 0x00	; 0
    9e52:	21 e0       	ldi	r18, 0x01	; 1
    9e54:	30 91 f3 0c 	lds	r19, 0x0CF3
    9e58:	73 17       	cp	r23, r19
    9e5a:	18 f0       	brcs	.+6      	; 0x9e62 <ProcessSprites+0x136>
    9e5c:	20 e0       	ldi	r18, 0x00	; 0
    9e5e:	88 23       	and	r24, r24
    9e60:	51 f1       	breq	.+84     	; 0x9eb6 <ProcessSprites+0x18a>
    9e62:	60 91 88 0d 	lds	r22, 0x0D88
    9e66:	6c 31       	cpi	r22, 0x1C	; 28
    9e68:	20 f5       	brcc	.+72     	; 0x9eb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    9e6a:	88 23       	and	r24, r24
    9e6c:	31 f0       	breq	.+12     	; 0x9e7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    9e6e:	84 ee       	ldi	r24, 0xE4	; 228
    9e70:	87 0f       	add	r24, r23
    9e72:	7a 83       	std	Y+2, r23	; 0x02
    9e74:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <CopyFlashTile>
    9e78:	06 c0       	rjmp	.+12     	; 0x9e86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    9e7a:	22 23       	and	r18, r18
    9e7c:	29 f0       	breq	.+10     	; 0x9e88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    9e7e:	87 2f       	mov	r24, r23
    9e80:	7a 83       	std	Y+2, r23	; 0x02
    9e82:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <CopyRamTile>
    9e86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9e88:	80 91 88 0d 	lds	r24, 0x0D88
    9e8c:	e8 2f       	mov	r30, r24
    9e8e:	f0 e0       	ldi	r31, 0x00	; 0
    9e90:	9f 01       	movw	r18, r30
    9e92:	22 0f       	add	r18, r18
    9e94:	33 1f       	adc	r19, r19
    9e96:	e2 0f       	add	r30, r18
    9e98:	f3 1f       	adc	r31, r19
    9e9a:	e0 5b       	subi	r30, 0xB0	; 176
    9e9c:	f3 4f       	sbci	r31, 0xF3	; 243
    9e9e:	11 83       	std	Z+1, r17	; 0x01
    9ea0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9ea2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    9ea4:	f8 01       	movw	r30, r16
    9ea6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    9ea8:	21 e0       	ldi	r18, 0x01	; 1
    9eaa:	28 0f       	add	r18, r24
    9eac:	20 93 88 0d 	sts	0x0D88, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    9eb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    9eb2:	7c 31       	cpi	r23, 0x1C	; 28
    9eb4:	38 f4       	brcc	.+14     	; 0x9ec4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    9eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    9eba:	a5 01       	movw	r20, r10
    9ebc:	67 2f       	mov	r22, r23
    9ebe:	87 2d       	mov	r24, r7
    9ec0:	0e 94 78 3f 	call	0x7ef0	; 0x7ef0 <BlitSprite>
    9ec4:	ff ef       	ldi	r31, 0xFF	; 255
    9ec6:	af 1a       	sub	r10, r31
    9ec8:	bf 0a       	sbc	r11, r31
    9eca:	23 94       	inc	r2
    9ecc:	82 2d       	mov	r24, r2
    9ece:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9ed0:	99 81       	ldd	r25, Y+1	; 0x01
    9ed2:	89 17       	cp	r24, r25
    9ed4:	08 f4       	brcc	.+2      	; 0x9ed8 <ProcessSprites+0x1ac>
    9ed6:	8c cf       	rjmp	.-232    	; 0x9df0 <ProcessSprites+0xc4>
    9ed8:	ef ef       	ldi	r30, 0xFF	; 255
    9eda:	ee 1a       	sub	r14, r30
    9edc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9ede:	e3 14       	cp	r14, r3
    9ee0:	08 f4       	brcc	.+2      	; 0x9ee4 <ProcessSprites+0x1b8>
    9ee2:	7f cf       	rjmp	.-258    	; 0x9de2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    9ee4:	73 94       	inc	r7
    9ee6:	f4 e0       	ldi	r31, 0x04	; 4
    9ee8:	cf 0e       	add	r12, r31
    9eea:	d1 1c       	adc	r13, r1
    9eec:	40 e1       	ldi	r20, 0x10	; 16
    9eee:	74 12       	cpse	r7, r20
    9ef0:	43 cf       	rjmp	.-378    	; 0x9d78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    9ef2:	0f 90       	pop	r0
    9ef4:	0f 90       	pop	r0
    9ef6:	0f 90       	pop	r0
    9ef8:	0f 90       	pop	r0
    9efa:	df 91       	pop	r29
    9efc:	cf 91       	pop	r28
    9efe:	1f 91       	pop	r17
    9f00:	0f 91       	pop	r16
    9f02:	ff 90       	pop	r15
    9f04:	ef 90       	pop	r14
    9f06:	df 90       	pop	r13
    9f08:	cf 90       	pop	r12
    9f0a:	bf 90       	pop	r11
    9f0c:	af 90       	pop	r10
    9f0e:	9f 90       	pop	r9
    9f10:	8f 90       	pop	r8
    9f12:	7f 90       	pop	r7
    9f14:	6f 90       	pop	r6
    9f16:	5f 90       	pop	r5
    9f18:	4f 90       	pop	r4
    9f1a:	3f 90       	pop	r3
    9f1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    9f1e:	0c 94 80 4e 	jmp	0x9d00	; 0x9d00 <RestoreBackground>

	}
    9f22:	0f 90       	pop	r0
    9f24:	0f 90       	pop	r0
    9f26:	0f 90       	pop	r0
    9f28:	0f 90       	pop	r0
    9f2a:	df 91       	pop	r29
    9f2c:	cf 91       	pop	r28
    9f2e:	1f 91       	pop	r17
    9f30:	0f 91       	pop	r16
    9f32:	ff 90       	pop	r15
    9f34:	ef 90       	pop	r14
    9f36:	df 90       	pop	r13
    9f38:	cf 90       	pop	r12
    9f3a:	bf 90       	pop	r11
    9f3c:	af 90       	pop	r10
    9f3e:	9f 90       	pop	r9
    9f40:	8f 90       	pop	r8
    9f42:	7f 90       	pop	r7
    9f44:	6f 90       	pop	r6
    9f46:	5f 90       	pop	r5
    9f48:	4f 90       	pop	r4
    9f4a:	3f 90       	pop	r3
    9f4c:	2f 90       	pop	r2
    9f4e:	08 95       	ret

00009f50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9f50:	90 91 b3 0c 	lds	r25, 0x0CB3
    9f54:	96 0f       	add	r25, r22
    9f56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    9f5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    9f5e:	82 0f       	add	r24, r18
    9f60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9f64:	80 91 b4 0c 	lds	r24, 0x0CB4
    9f68:	80 32       	cpi	r24, 0x20	; 32
    9f6a:	b0 f4       	brcc	.+44     	; 0x9f98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    9f6c:	29 2f       	mov	r18, r25
    9f6e:	30 e0       	ldi	r19, 0x00	; 0
    9f70:	78 e0       	ldi	r23, 0x08	; 8
    9f72:	87 9f       	mul	r24, r23
    9f74:	a0 01       	movw	r20, r0
    9f76:	11 24       	eor	r1, r1
    9f78:	24 17       	cp	r18, r20
    9f7a:	35 07       	cpc	r19, r21
    9f7c:	6c f0       	brlt	.+26     	; 0x9f98 <Scroll+0x48>
				if(dy>=0){	
    9f7e:	67 fd       	sbrc	r22, 7
    9f80:	05 c0       	rjmp	.+10     	; 0x9f8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9f82:	28 ef       	ldi	r18, 0xF8	; 248
    9f84:	82 9f       	mul	r24, r18
    9f86:	90 0d       	add	r25, r0
    9f88:	11 24       	eor	r1, r1
    9f8a:	04 c0       	rjmp	.+8      	; 0x9f94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    9f8c:	78 e0       	ldi	r23, 0x08	; 8
    9f8e:	87 9f       	mul	r24, r23
    9f90:	90 0d       	add	r25, r0
    9f92:	11 24       	eor	r1, r1
    9f94:	90 93 b3 0c 	sts	0x0CB3, r25
    9f98:	08 95       	ret

00009f9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9f9a:	e0 e1       	ldi	r30, 0x10	; 16
    9f9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9f9e:	80 ee       	ldi	r24, 0xE0	; 224
    9fa0:	80 83       	st	Z, r24
    9fa2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9fa4:	95 e0       	ldi	r25, 0x05	; 5
    9fa6:	e0 35       	cpi	r30, 0x50	; 80
    9fa8:	f9 07       	cpc	r31, r25
    9faa:	d1 f7       	brne	.-12     	; 0x9fa0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    9fac:	80 e2       	ldi	r24, 0x20	; 32
    9fae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    9fb2:	10 92 af 0c 	sts	0x0CAF, r1
    9fb6:	08 95       	ret

00009fb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9fb8:	2f 92       	push	r2
    9fba:	3f 92       	push	r3
    9fbc:	4f 92       	push	r4
    9fbe:	5f 92       	push	r5
    9fc0:	6f 92       	push	r6
    9fc2:	7f 92       	push	r7
    9fc4:	8f 92       	push	r8
    9fc6:	9f 92       	push	r9
    9fc8:	af 92       	push	r10
    9fca:	bf 92       	push	r11
    9fcc:	cf 92       	push	r12
    9fce:	df 92       	push	r13
    9fd0:	ef 92       	push	r14
    9fd2:	ff 92       	push	r15
    9fd4:	0f 93       	push	r16
    9fd6:	1f 93       	push	r17
    9fd8:	cf 93       	push	r28
    9fda:	df 93       	push	r29
    9fdc:	00 d0       	rcall	.+0      	; 0x9fde <DrawMap+0x26>
    9fde:	1f 92       	push	r1
    9fe0:	cd b7       	in	r28, 0x3d	; 61
    9fe2:	de b7       	in	r29, 0x3e	; 62
    9fe4:	28 2f       	mov	r18, r24
    9fe6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9fe8:	fa 01       	movw	r30, r20
    9fea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9fec:	31 96       	adiw	r30, 0x01	; 1
    9fee:	34 90       	lpm	r3, Z
    9ff0:	42 2c       	mov	r4, r2
    9ff2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9ff4:	e1 2c       	mov	r14, r1
    9ff6:	f1 2c       	mov	r15, r1
    9ff8:	00 e0       	ldi	r16, 0x00	; 0
    9ffa:	10 e0       	ldi	r17, 0x00	; 0
    9ffc:	c6 2e       	mov	r12, r22
    9ffe:	d1 2c       	mov	r13, r1
    a000:	03 15       	cp	r16, r3
    a002:	68 f5       	brcc	.+90     	; 0xa05e <DrawMap+0xa6>
    a004:	1b 82       	std	Y+3, r1	; 0x03
    a006:	1a 82       	std	Y+2, r1	; 0x02
    a008:	57 01       	movw	r10, r14
    a00a:	92 e0       	ldi	r25, 0x02	; 2
    a00c:	a9 0e       	add	r10, r25
    a00e:	b1 1c       	adc	r11, r1
    a010:	48 01       	movw	r8, r16
    a012:	8c 0c       	add	r8, r12
    a014:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    a016:	ea 81       	ldd	r30, Y+2	; 0x02
    a018:	e2 15       	cp	r30, r2
    a01a:	e0 f4       	brcc	.+56     	; 0xa054 <DrawMap+0x9c>
    a01c:	ea 81       	ldd	r30, Y+2	; 0x02
    a01e:	fb 81       	ldd	r31, Y+3	; 0x03
    a020:	ea 0d       	add	r30, r10
    a022:	fb 1d       	adc	r31, r11
    a024:	e6 0d       	add	r30, r6
    a026:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a028:	e4 91       	lpm	r30, Z
    a02a:	f0 e0       	ldi	r31, 0x00	; 0
    a02c:	60 91 b4 0c 	lds	r22, 0x0CB4
    a030:	70 e0       	ldi	r23, 0x00	; 0
    a032:	c4 01       	movw	r24, r8
    a034:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    a038:	af 01       	movw	r20, r30
    a03a:	68 2f       	mov	r22, r24
    a03c:	8a 81       	ldd	r24, Y+2	; 0x02
    a03e:	82 0f       	add	r24, r18
    a040:	29 83       	std	Y+1, r18	; 0x01
    a042:	0e 94 ab 41 	call	0x8356	; 0x8356 <SetTile>
    a046:	8a 81       	ldd	r24, Y+2	; 0x02
    a048:	9b 81       	ldd	r25, Y+3	; 0x03
    a04a:	01 96       	adiw	r24, 0x01	; 1
    a04c:	9b 83       	std	Y+3, r25	; 0x03
    a04e:	8a 83       	std	Y+2, r24	; 0x02
    a050:	29 81       	ldd	r18, Y+1	; 0x01
    a052:	e1 cf       	rjmp	.-62     	; 0xa016 <DrawMap+0x5e>
    a054:	0f 5f       	subi	r16, 0xFF	; 255
    a056:	1f 4f       	sbci	r17, 0xFF	; 255
    a058:	e4 0c       	add	r14, r4
    a05a:	f5 1c       	adc	r15, r5
    a05c:	d1 cf       	rjmp	.-94     	; 0xa000 <DrawMap+0x48>
			}
		}

	}
    a05e:	0f 90       	pop	r0
    a060:	0f 90       	pop	r0
    a062:	0f 90       	pop	r0
    a064:	df 91       	pop	r29
    a066:	cf 91       	pop	r28
    a068:	1f 91       	pop	r17
    a06a:	0f 91       	pop	r16
    a06c:	ff 90       	pop	r15
    a06e:	ef 90       	pop	r14
    a070:	df 90       	pop	r13
    a072:	cf 90       	pop	r12
    a074:	bf 90       	pop	r11
    a076:	af 90       	pop	r10
    a078:	9f 90       	pop	r9
    a07a:	8f 90       	pop	r8
    a07c:	7f 90       	pop	r7
    a07e:	6f 90       	pop	r6
    a080:	5f 90       	pop	r5
    a082:	4f 90       	pop	r4
    a084:	3f 90       	pop	r3
    a086:	2f 90       	pop	r2
    a088:	08 95       	ret

0000a08a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a08a:	0f 93       	push	r16
    a08c:	1f 93       	push	r17
    a08e:	cf 93       	push	r28
    a090:	df 93       	push	r29
    a092:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a094:	c0 e0       	ldi	r28, 0x00	; 0
    a096:	d0 e0       	ldi	r29, 0x00	; 0
    a098:	c0 17       	cp	r28, r16
    a09a:	d1 07       	cpc	r29, r17
    a09c:	44 f4       	brge	.+16     	; 0xa0ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a09e:	0e 94 c1 41 	call	0x8382	; 0x8382 <GetVsyncFlag>
    a0a2:	88 23       	and	r24, r24
    a0a4:	e1 f3       	breq	.-8      	; 0xa09e <WaitVsync+0x14>
		ClearVsyncFlag();		
    a0a6:	0e 94 c5 41 	call	0x838a	; 0x838a <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a0aa:	21 96       	adiw	r28, 0x01	; 1
    a0ac:	f5 cf       	rjmp	.-22     	; 0xa098 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a0ae:	df 91       	pop	r29
    a0b0:	cf 91       	pop	r28
    a0b2:	1f 91       	pop	r17
    a0b4:	0f 91       	pop	r16
    a0b6:	08 95       	ret

0000a0b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    a0b8:	85 e3       	ldi	r24, 0x35	; 53
    a0ba:	99 e0       	ldi	r25, 0x09	; 9
    a0bc:	0e 94 73 44 	call	0x88e6	; 0x88e6 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    a0c0:	85 e3       	ldi	r24, 0x35	; 53
    a0c2:	91 e0       	ldi	r25, 0x01	; 1
    a0c4:	0e 94 bc 41 	call	0x8378	; 0x8378 <SetTileTable>
			
			//draw logo
			ClearVram();
    a0c8:	0e 94 a1 41 	call	0x8342	; 0x8342 <ClearVram>
			WaitVsync(15);		
    a0cc:	8f e0       	ldi	r24, 0x0F	; 15
    a0ce:	90 e0       	ldi	r25, 0x00	; 0
    a0d0:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    a0d4:	41 e0       	ldi	r20, 0x01	; 1
    a0d6:	6f ef       	ldi	r22, 0xFF	; 255
    a0d8:	80 e0       	ldi	r24, 0x00	; 0
    a0da:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a0de:	4f e1       	ldi	r20, 0x1F	; 31
    a0e0:	51 e0       	ldi	r21, 0x01	; 1
    a0e2:	6c e0       	ldi	r22, 0x0C	; 12
    a0e4:	8c e0       	ldi	r24, 0x0C	; 12
    a0e6:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
			WaitVsync(3);
    a0ea:	83 e0       	ldi	r24, 0x03	; 3
    a0ec:	90 e0       	ldi	r25, 0x00	; 0
    a0ee:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    a0f2:	4e e0       	ldi	r20, 0x0E	; 14
    a0f4:	51 e0       	ldi	r21, 0x01	; 1
    a0f6:	6c e0       	ldi	r22, 0x0C	; 12
    a0f8:	8c e0       	ldi	r24, 0x0C	; 12
    a0fa:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
			WaitVsync(2);
    a0fe:	82 e0       	ldi	r24, 0x02	; 2
    a100:	90 e0       	ldi	r25, 0x00	; 0
    a102:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a106:	4f e1       	ldi	r20, 0x1F	; 31
    a108:	51 e0       	ldi	r21, 0x01	; 1
    a10a:	6c e0       	ldi	r22, 0x0C	; 12
    a10c:	8c e0       	ldi	r24, 0x0C	; 12
    a10e:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    a112:	81 e4       	ldi	r24, 0x41	; 65
    a114:	90 e0       	ldi	r25, 0x00	; 0
    a116:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
			ClearVram();
    a11a:	0e 94 a1 41 	call	0x8342	; 0x8342 <ClearVram>
			WaitVsync(20);
    a11e:	84 e1       	ldi	r24, 0x14	; 20
    a120:	90 e0       	ldi	r25, 0x00	; 0
    a122:	0c 94 45 50 	jmp	0xa08a	; 0xa08a <WaitVsync>

0000a126 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a126:	80 93 86 0d 	sts	0x0D86, r24
	currFadeFrame=0;
    a12a:	10 92 8a 0d 	sts	0x0D8A, r1
	fadeActive=true;
    a12e:	81 e0       	ldi	r24, 0x01	; 1
    a130:	80 93 89 0d 	sts	0x0D89, r24
		
	if(blocking){
    a134:	66 23       	and	r22, r22
    a136:	21 f0       	breq	.+8      	; 0xa140 <doFade+0x1a>
		while(fadeActive==true);
    a138:	80 91 89 0d 	lds	r24, 0x0D89
    a13c:	81 11       	cpse	r24, r1
    a13e:	fc cf       	rjmp	.-8      	; 0xa138 <doFade+0x12>
    a140:	08 95       	ret

0000a142 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a142:	81 11       	cpse	r24, r1
    a144:	03 c0       	rjmp	.+6      	; 0xa14c <FadeIn+0xa>
		DDRC=0xff;
    a146:	8f ef       	ldi	r24, 0xFF	; 255
    a148:	87 b9       	out	0x07, r24	; 7
		return;
    a14a:	08 95       	ret
	}
	fadeStep=1;
    a14c:	91 e0       	ldi	r25, 0x01	; 1
    a14e:	90 93 8b 0d 	sts	0x0D8B, r25
	fadeDir=1;
    a152:	90 93 87 0d 	sts	0x0D87, r25
	doFade(speed,blocking);
    a156:	0c 94 93 50 	jmp	0xa126	; 0xa126 <doFade>

0000a15a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a15a:	81 11       	cpse	r24, r1
    a15c:	02 c0       	rjmp	.+4      	; 0xa162 <FadeOut+0x8>
		DDRC=0;
    a15e:	17 b8       	out	0x07, r1	; 7
		return;
    a160:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a162:	9c e0       	ldi	r25, 0x0C	; 12
    a164:	90 93 8b 0d 	sts	0x0D8B, r25
	fadeDir=-1;
    a168:	9f ef       	ldi	r25, 0xFF	; 255
    a16a:	90 93 87 0d 	sts	0x0D87, r25
	doFade(speed,blocking);
    a16e:	0c 94 93 50 	jmp	0xa126	; 0xa126 <doFade>

0000a172 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a172:	80 91 89 0d 	lds	r24, 0x0D89
    a176:	88 23       	and	r24, r24
    a178:	01 f1       	breq	.+64     	; 0xa1ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    a17a:	80 91 8a 0d 	lds	r24, 0x0D8A
    a17e:	81 11       	cpse	r24, r1
    a180:	19 c0       	rjmp	.+50     	; 0xa1b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a182:	80 91 86 0d 	lds	r24, 0x0D86
    a186:	80 93 8a 0d 	sts	0x0D8A, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a18a:	e0 91 8b 0d 	lds	r30, 0x0D8B
    a18e:	f0 e0       	ldi	r31, 0x00	; 0
    a190:	ef 5f       	subi	r30, 0xFF	; 255
    a192:	fe 4f       	sbci	r31, 0xFE	; 254
    a194:	e4 91       	lpm	r30, Z
    a196:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a198:	90 91 87 0d 	lds	r25, 0x0D87
    a19c:	80 91 8b 0d 	lds	r24, 0x0D8B
    a1a0:	89 0f       	add	r24, r25
    a1a2:	80 93 8b 0d 	sts	0x0D8B, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a1a6:	88 23       	and	r24, r24
    a1a8:	11 f0       	breq	.+4      	; 0xa1ae <ProcessFading+0x3c>
    a1aa:	8d 30       	cpi	r24, 0x0D	; 13
    a1ac:	31 f4       	brne	.+12     	; 0xa1ba <ProcessFading+0x48>
				fadeActive=false;
    a1ae:	10 92 89 0d 	sts	0x0D89, r1
    a1b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a1b4:	81 50       	subi	r24, 0x01	; 1
    a1b6:	80 93 8a 0d 	sts	0x0D8A, r24
    a1ba:	08 95       	ret

0000a1bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a1bc:	0e 94 b9 50 	call	0xa172	; 0xa172 <ProcessFading>
		ProcessSprites();
    a1c0:	0c 94 96 4e 	jmp	0x9d2c	; 0x9d2c <ProcessSprites>

0000a1c4 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    a1c4:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a1c6:	88 23       	and	r24, r24
    a1c8:	29 f1       	breq	.+74     	; 0xa214 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    a1ca:	87 ff       	sbrs	r24, 7
    a1cc:	03 c0       	rjmp	.+6      	; 0xa1d4 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    a1ce:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    a1d0:	3f ef       	ldi	r19, 0xFF	; 255
    a1d2:	01 c0       	rjmp	.+2      	; 0xa1d6 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    a1d4:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    a1d6:	6c e3       	ldi	r22, 0x3C	; 60
    a1d8:	0e 94 3a 75 	call	0xea74	; 0xea74 <__divmodqi4>
    a1dc:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    a1de:	99 23       	and	r25, r25
    a1e0:	a9 f0       	breq	.+42     	; 0xa20c <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    a1e2:	69 2f       	mov	r22, r25
    a1e4:	70 e0       	ldi	r23, 0x00	; 0
    a1e6:	8c e3       	ldi	r24, 0x3C	; 60
    a1e8:	90 e0       	ldi	r25, 0x00	; 0
    a1ea:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    a1ee:	8e 2f       	mov	r24, r30
    a1f0:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    a1f4:	91 11       	cpse	r25, r1
    a1f6:	0a c0       	rjmp	.+20     	; 0xa20c <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    a1f8:	42 2f       	mov	r20, r18
    a1fa:	50 e0       	ldi	r21, 0x00	; 0
    a1fc:	4f 5f       	subi	r20, 0xFF	; 255
    a1fe:	5f 4f       	sbci	r21, 0xFF	; 255
    a200:	34 03       	mulsu	r19, r20
    a202:	c0 01       	movw	r24, r0
    a204:	35 9f       	mul	r19, r21
    a206:	90 0d       	add	r25, r0
    a208:	11 24       	eor	r1, r1
    a20a:	08 95       	ret
	}
	return direction*base_delta;
    a20c:	32 03       	mulsu	r19, r18
    a20e:	c0 01       	movw	r24, r0
    a210:	11 24       	eor	r1, r1
    a212:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a214:	80 e0       	ldi	r24, 0x00	; 0
    a216:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    a218:	08 95       	ret

0000a21a <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    a21a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a21c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a21e:	93 81       	ldd	r25, Z+3	; 0x03
    a220:	9f 5f       	subi	r25, 0xFF	; 255
    a222:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a224:	42 81       	ldd	r20, Z+2	; 0x02
    a226:	80 81       	ld	r24, Z
    a228:	26 81       	ldd	r18, Z+6	; 0x06
    a22a:	37 81       	ldd	r19, Z+7	; 0x07
    a22c:	94 17       	cp	r25, r20
    a22e:	30 f4       	brcc	.+12     	; 0xa23c <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    a230:	f9 01       	movw	r30, r18
    a232:	e8 0f       	add	r30, r24
    a234:	f1 1d       	adc	r31, r1
    a236:	e8 0f       	add	r30, r24
    a238:	f1 1d       	adc	r31, r1
    a23a:	12 c0       	rjmp	.+36     	; 0xa260 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    a23c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a23e:	90 e0       	ldi	r25, 0x00	; 0
    a240:	01 96       	adiw	r24, 0x01	; 1
    a242:	61 81       	ldd	r22, Z+1	; 0x01
    a244:	70 e0       	ldi	r23, 0x00	; 0
    a246:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    a24a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a24c:	81 11       	cpse	r24, r1
    a24e:	02 c0       	rjmp	.+4      	; 0xa254 <LBGetNextFrame+0x3a>
    a250:	41 e0       	ldi	r20, 0x01	; 1
    a252:	44 83       	std	Z+4, r20	; 0x04
    a254:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    a256:	88 0f       	add	r24, r24
    a258:	99 1f       	adc	r25, r25
    a25a:	f9 01       	movw	r30, r18
    a25c:	e8 0f       	add	r30, r24
    a25e:	f9 1f       	adc	r31, r25
    a260:	80 81       	ld	r24, Z
    a262:	91 81       	ldd	r25, Z+1	; 0x01
}
    a264:	08 95       	ret

0000a266 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a266:	0f 93       	push	r16
    a268:	1f 93       	push	r17
    a26a:	cf 93       	push	r28
    a26c:	df 93       	push	r29
    a26e:	1f 92       	push	r1
    a270:	cd b7       	in	r28, 0x3d	; 61
    a272:	de b7       	in	r29, 0x3e	; 62
    a274:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    a276:	86 2f       	mov	r24, r22
    a278:	69 83       	std	Y+1, r22	; 0x01
    a27a:	0e 94 cb 41 	call	0x8396	; 0x8396 <ReadJoypad>
    a27e:	d8 01       	movw	r26, r16
    a280:	15 96       	adiw	r26, 0x05	; 5
    a282:	9c 93       	st	X, r25
    a284:	8e 93       	st	-X, r24
    a286:	14 97       	sbiw	r26, 0x04	; 4
    a288:	69 81       	ldd	r22, Y+1	; 0x01
    a28a:	e6 2f       	mov	r30, r22
    a28c:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a28e:	00 97       	sbiw	r24, 0x00	; 0
    a290:	51 f0       	breq	.+20     	; 0xa2a6 <LBGetJoyPadState+0x40>
    a292:	df 01       	movw	r26, r30
    a294:	aa 0f       	add	r26, r26
    a296:	bb 1f       	adc	r27, r27
    a298:	a2 50       	subi	r26, 0x02	; 2
    a29a:	b3 4f       	sbci	r27, 0xF3	; 243
    a29c:	2d 91       	ld	r18, X+
    a29e:	3c 91       	ld	r19, X
    a2a0:	82 17       	cp	r24, r18
    a2a2:	93 07       	cpc	r25, r19
    a2a4:	21 f0       	breq	.+8      	; 0xa2ae <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a2a6:	d8 01       	movw	r26, r16
    a2a8:	16 96       	adiw	r26, 0x06	; 6
    a2aa:	1c 92       	st	X, r1
    a2ac:	07 c0       	rjmp	.+14     	; 0xa2bc <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a2ae:	d8 01       	movw	r26, r16
    a2b0:	16 96       	adiw	r26, 0x06	; 6
    a2b2:	2c 91       	ld	r18, X
    a2b4:	16 97       	sbiw	r26, 0x06	; 6
    a2b6:	2f 5f       	subi	r18, 0xFF	; 255
    a2b8:	16 96       	adiw	r26, 0x06	; 6
    a2ba:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a2bc:	ee 0f       	add	r30, r30
    a2be:	ff 1f       	adc	r31, r31
    a2c0:	e2 50       	subi	r30, 0x02	; 2
    a2c2:	f3 4f       	sbci	r31, 0xF3	; 243
    a2c4:	20 81       	ld	r18, Z
    a2c6:	31 81       	ldd	r19, Z+1	; 0x01
    a2c8:	a9 01       	movw	r20, r18
    a2ca:	40 95       	com	r20
    a2cc:	50 95       	com	r21
    a2ce:	48 23       	and	r20, r24
    a2d0:	59 23       	and	r21, r25
    a2d2:	d8 01       	movw	r26, r16
    a2d4:	11 96       	adiw	r26, 0x01	; 1
    a2d6:	5c 93       	st	X, r21
    a2d8:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a2da:	ac 01       	movw	r20, r24
    a2dc:	40 95       	com	r20
    a2de:	50 95       	com	r21
    a2e0:	24 23       	and	r18, r20
    a2e2:	35 23       	and	r19, r21
    a2e4:	13 96       	adiw	r26, 0x03	; 3
    a2e6:	3c 93       	st	X, r19
    a2e8:	2e 93       	st	-X, r18
    a2ea:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a2ec:	91 83       	std	Z+1, r25	; 0x01
    a2ee:	80 83       	st	Z, r24
}
    a2f0:	0f 90       	pop	r0
    a2f2:	df 91       	pop	r29
    a2f4:	cf 91       	pop	r28
    a2f6:	1f 91       	pop	r17
    a2f8:	0f 91       	pop	r16
    a2fa:	08 95       	ret

0000a2fc <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    a2fc:	90 ed       	ldi	r25, 0xD0	; 208
    a2fe:	94 0f       	add	r25, r20
    a300:	e0 91 8c 0d 	lds	r30, 0x0D8C
    a304:	f0 91 8d 0d 	lds	r31, 0x0D8D
    a308:	9a 30       	cpi	r25, 0x0A	; 10
    a30a:	38 f4       	brcc	.+14     	; 0xa31a <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    a30c:	24 2f       	mov	r18, r20
    a30e:	30 e0       	ldi	r19, 0x00	; 0
    a310:	2d 52       	subi	r18, 0x2D	; 45
    a312:	31 09       	sbc	r19, r1
    a314:	e2 0f       	add	r30, r18
    a316:	f3 1f       	adc	r31, r19
    a318:	0c c0       	rjmp	.+24     	; 0xa332 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    a31a:	9f eb       	ldi	r25, 0xBF	; 191
    a31c:	94 0f       	add	r25, r20
    a31e:	9a 31       	cpi	r25, 0x1A	; 26
    a320:	38 f4       	brcc	.+14     	; 0xa330 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    a322:	50 e0       	ldi	r21, 0x00	; 0
    a324:	44 53       	subi	r20, 0x34	; 52
    a326:	51 09       	sbc	r21, r1
    a328:	e4 0f       	add	r30, r20
    a32a:	f5 1f       	adc	r31, r21
    a32c:	44 91       	lpm	r20, Z
    a32e:	03 c0       	rjmp	.+6      	; 0xa336 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    a330:	32 96       	adiw	r30, 0x02	; 2
    a332:	e4 91       	lpm	r30, Z
    a334:	4e 2f       	mov	r20, r30
    a336:	50 e0       	ldi	r21, 0x00	; 0
    a338:	0c 94 ab 41 	jmp	0x8356	; 0x8356 <SetTile>

0000a33c <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    a33c:	ff 92       	push	r15
    a33e:	0f 93       	push	r16
    a340:	1f 93       	push	r17
    a342:	cf 93       	push	r28
    a344:	df 93       	push	r29
    a346:	d8 2f       	mov	r29, r24
    a348:	f6 2e       	mov	r15, r22
    a34a:	8a 01       	movw	r16, r20
	u8 i = 0;
    a34c:	c0 e0       	ldi	r28, 0x00	; 0
    a34e:	8c 2f       	mov	r24, r28
    a350:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    a352:	f8 01       	movw	r30, r16
    a354:	ec 0f       	add	r30, r28
    a356:	f1 1d       	adc	r31, r1
    a358:	44 91       	lpm	r20, Z
    a35a:	44 23       	and	r20, r20
    a35c:	29 f0       	breq	.+10     	; 0xa368 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    a35e:	6f 2d       	mov	r22, r15
    a360:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		i++;
    a364:	cf 5f       	subi	r28, 0xFF	; 255
    a366:	f3 cf       	rjmp	.-26     	; 0xa34e <LBPrint+0x12>
	}
}
    a368:	df 91       	pop	r29
    a36a:	cf 91       	pop	r28
    a36c:	1f 91       	pop	r17
    a36e:	0f 91       	pop	r16
    a370:	ff 90       	pop	r15
    a372:	08 95       	ret

0000a374 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    a374:	df 92       	push	r13
    a376:	ef 92       	push	r14
    a378:	ff 92       	push	r15
    a37a:	0f 93       	push	r16
    a37c:	1f 93       	push	r17
    a37e:	cf 93       	push	r28
    a380:	df 93       	push	r29
    a382:	1f 92       	push	r1
    a384:	cd b7       	in	r28, 0x3d	; 61
    a386:	de b7       	in	r29, 0x3e	; 62
    a388:	38 2f       	mov	r19, r24
    a38a:	06 2f       	mov	r16, r22
    a38c:	84 2f       	mov	r24, r20
    a38e:	9d ef       	ldi	r25, 0xFD	; 253
    a390:	e9 2e       	mov	r14, r25
    a392:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a394:	4a e0       	ldi	r20, 0x0A	; 10
    a396:	f4 2e       	mov	r15, r20
    a398:	1f ef       	ldi	r17, 0xFF	; 255
    a39a:	13 0f       	add	r17, r19
    a39c:	6f 2d       	mov	r22, r15
    a39e:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    a3a2:	d8 2e       	mov	r13, r24
    a3a4:	40 e3       	ldi	r20, 0x30	; 48
    a3a6:	49 0f       	add	r20, r25
    a3a8:	60 2f       	mov	r22, r16
    a3aa:	83 2f       	mov	r24, r19
    a3ac:	29 83       	std	Y+1, r18	; 0x01
    a3ae:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		value /= 10;
    a3b2:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    a3b4:	29 81       	ldd	r18, Y+1	; 0x01
    a3b6:	21 11       	cpse	r18, r1
    a3b8:	02 c0       	rjmp	.+4      	; 0xa3be <LBPrintByte+0x4a>
    a3ba:	dd 20       	and	r13, r13
    a3bc:	19 f0       	breq	.+6      	; 0xa3c4 <LBPrintByte+0x50>
    a3be:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    a3c0:	1e 11       	cpse	r17, r14
    a3c2:	ea cf       	rjmp	.-44     	; 0xa398 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a3c4:	0f 90       	pop	r0
    a3c6:	df 91       	pop	r29
    a3c8:	cf 91       	pop	r28
    a3ca:	1f 91       	pop	r17
    a3cc:	0f 91       	pop	r16
    a3ce:	ff 90       	pop	r15
    a3d0:	ef 90       	pop	r14
    a3d2:	df 90       	pop	r13
    a3d4:	08 95       	ret

0000a3d6 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    a3d6:	cf 92       	push	r12
    a3d8:	df 92       	push	r13
    a3da:	ef 92       	push	r14
    a3dc:	ff 92       	push	r15
    a3de:	0f 93       	push	r16
    a3e0:	1f 93       	push	r17
    a3e2:	cf 93       	push	r28
    a3e4:	df 93       	push	r29
    a3e6:	00 d0       	rcall	.+0      	; 0xa3e8 <LBPrintInt+0x12>
    a3e8:	cd b7       	in	r28, 0x3d	; 61
    a3ea:	de b7       	in	r29, 0x3e	; 62
    a3ec:	38 2f       	mov	r19, r24
    a3ee:	16 2f       	mov	r17, r22
    a3f0:	ca 01       	movw	r24, r20
    a3f2:	4b ef       	ldi	r20, 0xFB	; 251
    a3f4:	d4 2e       	mov	r13, r20
    a3f6:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a3f8:	5a e0       	ldi	r21, 0x0A	; 10
    a3fa:	e5 2e       	mov	r14, r21
    a3fc:	f1 2c       	mov	r15, r1
    a3fe:	cc 24       	eor	r12, r12
    a400:	ca 94       	dec	r12
    a402:	c3 0e       	add	r12, r19
    a404:	b7 01       	movw	r22, r14
    a406:	0e 94 48 75 	call	0xea90	; 0xea90 <__udivmodhi4>
    a40a:	06 2f       	mov	r16, r22
    a40c:	40 e3       	ldi	r20, 0x30	; 48
    a40e:	48 0f       	add	r20, r24
    a410:	61 2f       	mov	r22, r17
    a412:	83 2f       	mov	r24, r19
    a414:	29 83       	std	Y+1, r18	; 0x01
    a416:	7a 83       	std	Y+2, r23	; 0x02
    a418:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		value /= 10;
    a41c:	80 2f       	mov	r24, r16
    a41e:	7a 81       	ldd	r23, Y+2	; 0x02
    a420:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a422:	29 81       	ldd	r18, Y+1	; 0x01
    a424:	21 11       	cpse	r18, r1
    a426:	02 c0       	rjmp	.+4      	; 0xa42c <LBPrintInt+0x56>
    a428:	00 97       	sbiw	r24, 0x00	; 0
    a42a:	19 f0       	breq	.+6      	; 0xa432 <LBPrintInt+0x5c>
    a42c:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a42e:	cd 10       	cpse	r12, r13
    a430:	e6 cf       	rjmp	.-52     	; 0xa3fe <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a432:	0f 90       	pop	r0
    a434:	0f 90       	pop	r0
    a436:	df 91       	pop	r29
    a438:	cf 91       	pop	r28
    a43a:	1f 91       	pop	r17
    a43c:	0f 91       	pop	r16
    a43e:	ff 90       	pop	r15
    a440:	ef 90       	pop	r14
    a442:	df 90       	pop	r13
    a444:	cf 90       	pop	r12
    a446:	08 95       	ret

0000a448 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a448:	af 92       	push	r10
    a44a:	cf 92       	push	r12
    a44c:	ef 92       	push	r14
    a44e:	ff 92       	push	r15
    a450:	0f 93       	push	r16
    a452:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a454:	70 e0       	ldi	r23, 0x00	; 0
    a456:	f1 2c       	mov	r15, r1
    a458:	fb 01       	movw	r30, r22
    a45a:	e2 0f       	add	r30, r18
    a45c:	f1 1d       	adc	r31, r1
    a45e:	ee 16       	cp	r14, r30
    a460:	ff 06       	cpc	r15, r31
    a462:	a4 f4       	brge	.+40     	; 0xa48c <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a464:	ea 0c       	add	r14, r10
    a466:	f1 1c       	adc	r15, r1
    a468:	6e 15       	cp	r22, r14
    a46a:	7f 05       	cpc	r23, r15
    a46c:	7c f4       	brge	.+30     	; 0xa48c <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a46e:	28 2f       	mov	r18, r24
    a470:	30 e0       	ldi	r19, 0x00	; 0
    a472:	10 e0       	ldi	r17, 0x00	; 0
    a474:	c9 01       	movw	r24, r18
    a476:	84 0f       	add	r24, r20
    a478:	91 1d       	adc	r25, r1
    a47a:	08 17       	cp	r16, r24
    a47c:	19 07       	cpc	r17, r25
    a47e:	34 f4       	brge	.+12     	; 0xa48c <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a480:	0c 0d       	add	r16, r12
    a482:	11 1d       	adc	r17, r1
    a484:	81 e0       	ldi	r24, 0x01	; 1
    a486:	20 17       	cp	r18, r16
    a488:	31 07       	cpc	r19, r17
    a48a:	0c f0       	brlt	.+2      	; 0xa48e <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a48c:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a48e:	1f 91       	pop	r17
    a490:	0f 91       	pop	r16
    a492:	ff 90       	pop	r15
    a494:	ef 90       	pop	r14
    a496:	cf 90       	pop	r12
    a498:	af 90       	pop	r10
    a49a:	08 95       	ret

0000a49c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a49c:	cf 93       	push	r28
    a49e:	df 93       	push	r29
    a4a0:	d8 2f       	mov	r29, r24
    a4a2:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a4a4:	80 e0       	ldi	r24, 0x00	; 0
    a4a6:	90 e0       	ldi	r25, 0x00	; 0
    a4a8:	0e 94 99 43 	call	0x8732	; 0x8732 <GetPrngNumber>
    a4ac:	6f ef       	ldi	r22, 0xFF	; 255
    a4ae:	70 e0       	ldi	r23, 0x00	; 0
    a4b0:	0e 94 48 75 	call	0xea90	; 0xea90 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a4b4:	6c 2f       	mov	r22, r28
    a4b6:	70 e0       	ldi	r23, 0x00	; 0
    a4b8:	6d 1b       	sub	r22, r29
    a4ba:	71 09       	sbc	r23, r1
    a4bc:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
}
    a4c0:	8d 0f       	add	r24, r29
    a4c2:	df 91       	pop	r29
    a4c4:	cf 91       	pop	r28
    a4c6:	08 95       	ret

0000a4c8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a4c8:	cf 93       	push	r28
    a4ca:	df 93       	push	r29
    a4cc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a4ce:	c0 e0       	ldi	r28, 0x00	; 0
    a4d0:	cd 17       	cp	r28, r29
    a4d2:	31 f0       	breq	.+12     	; 0xa4e0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a4d4:	8f ef       	ldi	r24, 0xFF	; 255
    a4d6:	9f ef       	ldi	r25, 0xFF	; 255
    a4d8:	0e 94 d7 41 	call	0x83ae	; 0x83ae <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a4dc:	cf 5f       	subi	r28, 0xFF	; 255
    a4de:	f8 cf       	rjmp	.-16     	; 0xa4d0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a4e0:	df 91       	pop	r29
    a4e2:	cf 91       	pop	r28
    a4e4:	08 95       	ret

0000a4e6 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a4e6:	df 92       	push	r13
    a4e8:	ef 92       	push	r14
    a4ea:	ff 92       	push	r15
    a4ec:	0f 93       	push	r16
    a4ee:	1f 93       	push	r17
    a4f0:	cf 93       	push	r28
    a4f2:	df 93       	push	r29
    a4f4:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a4f6:	fb 01       	movw	r30, r22
    a4f8:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a4fa:	31 96       	adiw	r30, 0x01	; 1
    a4fc:	64 91       	lpm	r22, Z
    a4fe:	5f ef       	ldi	r21, 0xFF	; 255
    a500:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a502:	24 2f       	mov	r18, r20
    a504:	21 70       	andi	r18, 0x01	; 1
    a506:	40 ff       	sbrs	r20, 0
    a508:	04 c0       	rjmp	.+8      	; 0xa512 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a50a:	95 2f       	mov	r25, r21
		dx=-1;
    a50c:	ff 24       	eor	r15, r15
    a50e:	fa 94       	dec	r15
    a510:	03 c0       	rjmp	.+6      	; 0xa518 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a512:	ff 24       	eor	r15, r15
    a514:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a516:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a518:	41 ff       	sbrs	r20, 1
    a51a:	05 c0       	rjmp	.+10     	; 0xa526 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a51c:	7f ef       	ldi	r23, 0xFF	; 255
    a51e:	76 0f       	add	r23, r22
		dy=-1;
    a520:	ee 24       	eor	r14, r14
    a522:	ea 94       	dec	r14
    a524:	03 c0       	rjmp	.+6      	; 0xa52c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a526:	ee 24       	eor	r14, r14
    a528:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a52a:	70 e0       	ldi	r23, 0x00	; 0
    a52c:	21 11       	cpse	r18, r1
    a52e:	01 c0       	rjmp	.+2      	; 0xa532 <LBMapSprite+0x4c>
    a530:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a532:	00 e0       	ldi	r16, 0x00	; 0
    a534:	06 17       	cp	r16, r22
    a536:	09 f1       	breq	.+66     	; 0xa57a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a538:	71 03       	mulsu	r23, r17
    a53a:	e0 01       	movw	r28, r0
    a53c:	11 24       	eor	r1, r1
    a53e:	d8 2e       	mov	r13, r24
    a540:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a542:	8d 15       	cp	r24, r13
    a544:	b1 f0       	breq	.+44     	; 0xa572 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a546:	9e 01       	movw	r18, r28
    a548:	29 0f       	add	r18, r25
    a54a:	31 1d       	adc	r19, r1
    a54c:	97 fd       	sbrc	r25, 7
    a54e:	3a 95       	dec	r19
    a550:	2e 5f       	subi	r18, 0xFE	; 254
    a552:	3f 4f       	sbci	r19, 0xFF	; 255
    a554:	fd 01       	movw	r30, r26
    a556:	e2 0f       	add	r30, r18
    a558:	f3 1f       	adc	r31, r19
    a55a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a55c:	34 e0       	ldi	r19, 0x04	; 4
    a55e:	83 9f       	mul	r24, r19
    a560:	f0 01       	movw	r30, r0
    a562:	11 24       	eor	r1, r1
    a564:	ec 51       	subi	r30, 0x1C	; 28
    a566:	f0 4f       	sbci	r31, 0xF0	; 240
    a568:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a56a:	8f 5f       	subi	r24, 0xFF	; 255
    a56c:	43 83       	std	Z+3, r20	; 0x03
    a56e:	9f 0d       	add	r25, r15
    a570:	e8 cf       	rjmp	.-48     	; 0xa542 <LBMapSprite+0x5c>
    a572:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a574:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a576:	95 2f       	mov	r25, r21
    a578:	dd cf       	rjmp	.-70     	; 0xa534 <LBMapSprite+0x4e>
	}
}
    a57a:	df 91       	pop	r29
    a57c:	cf 91       	pop	r28
    a57e:	1f 91       	pop	r17
    a580:	0f 91       	pop	r16
    a582:	ff 90       	pop	r15
    a584:	ef 90       	pop	r14
    a586:	df 90       	pop	r13
    a588:	08 95       	ret

0000a58a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a58a:	df 92       	push	r13
    a58c:	ef 92       	push	r14
    a58e:	ff 92       	push	r15
    a590:	0f 93       	push	r16
    a592:	1f 93       	push	r17
    a594:	cf 93       	push	r28
    a596:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a598:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a59c:	98 e0       	ldi	r25, 0x08	; 8
    a59e:	a9 9f       	mul	r26, r25
    a5a0:	70 01       	movw	r14, r0
    a5a2:	11 24       	eor	r1, r1
    a5a4:	50 e0       	ldi	r21, 0x00	; 0
    a5a6:	38 ef       	ldi	r19, 0xF8	; 248
    a5a8:	a3 9f       	mul	r26, r19
    a5aa:	30 2d       	mov	r19, r0
    a5ac:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a5ae:	70 e0       	ldi	r23, 0x00	; 0
    a5b0:	70 17       	cp	r23, r16
    a5b2:	09 f1       	breq	.+66     	; 0xa5f6 <LBMoveSprite+0x6c>
    a5b4:	d4 2e       	mov	r13, r20
    a5b6:	13 2f       	mov	r17, r19
    a5b8:	14 0f       	add	r17, r20
    a5ba:	b8 2f       	mov	r27, r24
    a5bc:	b2 0f       	add	r27, r18
    a5be:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a5c0:	8b 17       	cp	r24, r27
    a5c2:	a9 f0       	breq	.+42     	; 0xa5ee <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a5c4:	c4 e0       	ldi	r28, 0x04	; 4
    a5c6:	8c 9f       	mul	r24, r28
    a5c8:	f0 01       	movw	r30, r0
    a5ca:	11 24       	eor	r1, r1
    a5cc:	ef 01       	movw	r28, r30
    a5ce:	cc 51       	subi	r28, 0x1C	; 28
    a5d0:	d0 4f       	sbci	r29, 0xF0	; 240
    a5d2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a5d4:	a0 32       	cpi	r26, 0x20	; 32
    a5d6:	28 f4       	brcc	.+10     	; 0xa5e2 <LBMoveSprite+0x58>
    a5d8:	e4 16       	cp	r14, r20
    a5da:	f5 06       	cpc	r15, r21
    a5dc:	14 f4       	brge	.+4      	; 0xa5e2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a5de:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a5e0:	03 c0       	rjmp	.+6      	; 0xa5e8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a5e2:	ec 51       	subi	r30, 0x1C	; 28
    a5e4:	f0 4f       	sbci	r31, 0xF0	; 240
    a5e6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a5e8:	8f 5f       	subi	r24, 0xFF	; 255
    a5ea:	98 5f       	subi	r25, 0xF8	; 248
    a5ec:	e9 cf       	rjmp	.-46     	; 0xa5c0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a5ee:	7f 5f       	subi	r23, 0xFF	; 255
    a5f0:	48 5f       	subi	r20, 0xF8	; 248
    a5f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a5f4:	dd cf       	rjmp	.-70     	; 0xa5b0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a5f6:	df 91       	pop	r29
    a5f8:	cf 91       	pop	r28
    a5fa:	1f 91       	pop	r17
    a5fc:	0f 91       	pop	r16
    a5fe:	ff 90       	pop	r15
    a600:	ef 90       	pop	r14
    a602:	df 90       	pop	r13
    a604:	08 95       	ret

0000a606 <LBRotateSprites>:

void LBRotateSprites()
{
    a606:	80 e0       	ldi	r24, 0x00	; 0
    a608:	90 e0       	ldi	r25, 0x00	; 0
    a60a:	dc 01       	movw	r26, r24
    a60c:	ac 51       	subi	r26, 0x1C	; 28
    a60e:	b0 4f       	sbci	r27, 0xF0	; 240
    a610:	fc 01       	movw	r30, r24
    a612:	e0 5f       	subi	r30, 0xF0	; 240
    a614:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a616:	13 96       	adiw	r26, 0x03	; 3
    a618:	2c 91       	ld	r18, X
    a61a:	13 97       	sbiw	r26, 0x03	; 3
    a61c:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a61e:	12 96       	adiw	r26, 0x02	; 2
    a620:	2c 91       	ld	r18, X
    a622:	12 97       	sbiw	r26, 0x02	; 2
    a624:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a626:	2c 91       	ld	r18, X
    a628:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a62a:	11 96       	adiw	r26, 0x01	; 1
    a62c:	2c 91       	ld	r18, X
    a62e:	21 83       	std	Z+1, r18	; 0x01
    a630:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a632:	8c 33       	cpi	r24, 0x3C	; 60
    a634:	91 05       	cpc	r25, r1
    a636:	49 f7       	brne	.-46     	; 0xa60a <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a638:	80 91 01 05 	lds	r24, 0x0501
    a63c:	94 e0       	ldi	r25, 0x04	; 4
    a63e:	89 9f       	mul	r24, r25
    a640:	f0 01       	movw	r30, r0
    a642:	11 24       	eor	r1, r1
    a644:	ec 51       	subi	r30, 0x1C	; 28
    a646:	f0 4f       	sbci	r31, 0xF0	; 240
    a648:	93 81       	ldd	r25, Z+3	; 0x03
    a64a:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a64e:	92 81       	ldd	r25, Z+2	; 0x02
    a650:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a654:	90 81       	ld	r25, Z
    a656:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a65a:	91 81       	ldd	r25, Z+1	; 0x01
    a65c:	90 93 4d 05 	sts	0x054D, r25
		rotate_index += 1;
    a660:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a662:	84 31       	cpi	r24, 0x14	; 20
    a664:	08 f0       	brcs	.+2      	; 0xa668 <LBRotateSprites+0x62>
    a666:	8f e0       	ldi	r24, 0x0F	; 15
    a668:	80 93 01 05 	sts	0x0501, r24
    a66c:	08 95       	ret

0000a66e <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a66e:	80 91 cf 0d 	lds	r24, 0x0DCF
}
    a672:	81 70       	andi	r24, 0x01	; 1
    a674:	08 95       	ret

0000a676 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a676:	8e e8       	ldi	r24, 0x8E	; 142
    a678:	90 e0       	ldi	r25, 0x00	; 0
    a67a:	90 93 9b 0d 	sts	0x0D9B, r25
    a67e:	80 93 9a 0d 	sts	0x0D9A, r24
    a682:	80 e0       	ldi	r24, 0x00	; 0
    a684:	90 e0       	ldi	r25, 0x00	; 0
    a686:	fc 01       	movw	r30, r24
    a688:	eb 5b       	subi	r30, 0xBB	; 187
    a68a:	f4 4f       	sbci	r31, 0xF4	; 244
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a68c:	e4 91       	lpm	r30, Z
    a68e:	dc 01       	movw	r26, r24
    a690:	a6 56       	subi	r26, 0x66	; 102
    a692:	b2 4f       	sbci	r27, 0xF2	; 242
    a694:	12 96       	adiw	r26, 0x02	; 2
    a696:	ec 93       	st	X, r30
    a698:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a69a:	8e 31       	cpi	r24, 0x1E	; 30
    a69c:	91 05       	cpc	r25, r1
    a69e:	99 f7       	brne	.-26     	; 0xa686 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a6a0:	08 95       	ret

0000a6a2 <init_enemy_state>:

void init_enemy_state()
{
    a6a2:	80 e0       	ldi	r24, 0x00	; 0
    a6a4:	90 e0       	ldi	r25, 0x00	; 0
    a6a6:	9c 01       	movw	r18, r24
    a6a8:	26 54       	subi	r18, 0x46	; 70
    a6aa:	32 4f       	sbci	r19, 0xF2	; 242
    a6ac:	f9 01       	movw	r30, r18
    a6ae:	e4 5e       	subi	r30, 0xE4	; 228
    a6b0:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a6b2:	10 82       	st	Z, r1
    a6b4:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a6b6:	10 82       	st	Z, r1
    a6b8:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a6ba:	89 30       	cpi	r24, 0x09	; 9
    a6bc:	21 e0       	ldi	r18, 0x01	; 1
    a6be:	92 07       	cpc	r25, r18
    a6c0:	91 f7       	brne	.-28     	; 0xa6a6 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a6c2:	10 92 d5 0d 	sts	0x0DD5, r1
    a6c6:	08 95       	ret

0000a6c8 <init_player_shot>:
	}
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    a6c8:	81 11       	cpse	r24, r1
    a6ca:	3b c0       	rjmp	.+118    	; 0xa742 <init_player_shot+0x7a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6cc:	10 92 f0 0d 	sts	0x0DF0, r1
	shot->hit_count = damage;
    a6d0:	81 e0       	ldi	r24, 0x01	; 1
    a6d2:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    a6d6:	90 e5       	ldi	r25, 0x50	; 80
    a6d8:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a6dc:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    a6e0:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a6e4:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a6e8:	2e e8       	ldi	r18, 0x8E	; 142
    a6ea:	3d e0       	ldi	r19, 0x0D	; 13
    a6ec:	30 93 fc 0d 	sts	0x0DFC, r19
    a6f0:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a6f4:	25 ec       	ldi	r18, 0xC5	; 197
    a6f6:	37 e3       	ldi	r19, 0x37	; 55
    a6f8:	30 93 8f 0d 	sts	0x0D8F, r19
    a6fc:	20 93 8e 0d 	sts	0x0D8E, r18
	shot->shared.vx = speed;
    a700:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a704:	10 92 ed 0d 	sts	0x0DED, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a708:	10 92 04 0e 	sts	0x0E04, r1
	shot->hit_count = damage;
    a70c:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a710:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a714:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a718:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a71c:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a720:	40 e4       	ldi	r20, 0x40	; 64
    a722:	50 e1       	ldi	r21, 0x10	; 16
    a724:	50 93 10 0e 	sts	0x0E10, r21
    a728:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a72c:	30 93 41 10 	sts	0x1041, r19
    a730:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    a734:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a738:	10 92 01 0e 	sts	0x0E01, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a73c:	10 92 18 0e 	sts	0x0E18, r1
    a740:	3d c0       	rjmp	.+122    	; 0xa7bc <init_player_shot+0xf4>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a742:	82 30       	cpi	r24, 0x02	; 2
    a744:	09 f0       	breq	.+2      	; 0xa748 <init_player_shot+0x80>
    a746:	53 c0       	rjmp	.+166    	; 0xa7ee <init_player_shot+0x126>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a748:	81 e0       	ldi	r24, 0x01	; 1
    a74a:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    a74e:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    a752:	94 e6       	ldi	r25, 0x64	; 100
    a754:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a758:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    a75c:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a760:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a764:	2e e8       	ldi	r18, 0x8E	; 142
    a766:	3d e0       	ldi	r19, 0x0D	; 13
    a768:	30 93 fc 0d 	sts	0x0DFC, r19
    a76c:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a770:	22 ec       	ldi	r18, 0xC2	; 194
    a772:	37 e3       	ldi	r19, 0x37	; 55
    a774:	30 93 8f 0d 	sts	0x0D8F, r19
    a778:	20 93 8e 0d 	sts	0x0D8E, r18
	shot->shared.vx = speed;
    a77c:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a780:	10 92 ed 0d 	sts	0x0DED, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a784:	80 93 04 0e 	sts	0x0E04, r24
	shot->hit_count = damage;
    a788:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a78c:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a790:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a794:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a798:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a79c:	40 e4       	ldi	r20, 0x40	; 64
    a79e:	50 e1       	ldi	r21, 0x10	; 16
    a7a0:	50 93 10 0e 	sts	0x0E10, r21
    a7a4:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a7a8:	30 93 41 10 	sts	0x1041, r19
    a7ac:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    a7b0:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a7b4:	10 92 01 0e 	sts	0x0E01, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7b8:	80 93 18 0e 	sts	0x0E18, r24
	shot->hit_count = damage;
    a7bc:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a7c0:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a7c4:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a7c8:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a7cc:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a7d0:	40 e5       	ldi	r20, 0x50	; 80
    a7d2:	50 e1       	ldi	r21, 0x10	; 16
    a7d4:	50 93 24 0e 	sts	0x0E24, r21
    a7d8:	40 93 23 0e 	sts	0x0E23, r20
	shot->anim.anims[0] = (char*) map;
    a7dc:	30 93 51 10 	sts	0x1051, r19
    a7e0:	20 93 50 10 	sts	0x1050, r18
	shot->shared.vx = speed;
    a7e4:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
    a7e8:	10 92 15 0e 	sts	0x0E15, r1
    a7ec:	6b c1       	rjmp	.+726    	; 0xaac4 <init_player_shot+0x3fc>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    a7ee:	84 30       	cpi	r24, 0x04	; 4
    a7f0:	09 f0       	breq	.+2      	; 0xa7f4 <init_player_shot+0x12c>
    a7f2:	56 c0       	rjmp	.+172    	; 0xa8a0 <init_player_shot+0x1d8>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7f4:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    a7f8:	81 e0       	ldi	r24, 0x01	; 1
    a7fa:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    a7fe:	9f e7       	ldi	r25, 0x7F	; 127
    a800:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a804:	28 ef       	ldi	r18, 0xF8	; 248
    a806:	20 93 f4 0d 	sts	0x0DF4, r18
	shot->anim.anim_count = 1;
    a80a:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a80e:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a812:	2e e8       	ldi	r18, 0x8E	; 142
    a814:	3d e0       	ldi	r19, 0x0D	; 13
    a816:	30 93 fc 0d 	sts	0x0DFC, r19
    a81a:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a81e:	25 ec       	ldi	r18, 0xC5	; 197
    a820:	37 e3       	ldi	r19, 0x37	; 55
    a822:	30 93 8f 0d 	sts	0x0D8F, r19
    a826:	20 93 8e 0d 	sts	0x0D8E, r18
	shot->shared.vx = speed;
    a82a:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a82e:	21 e8       	ldi	r18, 0x81	; 129
    a830:	20 93 ed 0d 	sts	0x0DED, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a834:	22 e0       	ldi	r18, 0x02	; 2
    a836:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    a83a:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a83e:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a842:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a846:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a84a:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a84e:	40 e4       	ldi	r20, 0x40	; 64
    a850:	50 e1       	ldi	r21, 0x10	; 16
    a852:	50 93 10 0e 	sts	0x0E10, r21
    a856:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a85a:	49 eb       	ldi	r20, 0xB9	; 185
    a85c:	57 e3       	ldi	r21, 0x37	; 55
    a85e:	50 93 41 10 	sts	0x1041, r21
    a862:	40 93 40 10 	sts	0x1040, r20
	shot->shared.vx = speed;
    a866:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a86a:	10 92 01 0e 	sts	0x0E01, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a86e:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    a872:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a876:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a87a:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a87e:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a882:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a886:	60 e5       	ldi	r22, 0x50	; 80
    a888:	70 e1       	ldi	r23, 0x10	; 16
    a88a:	70 93 24 0e 	sts	0x0E24, r23
    a88e:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a892:	50 93 51 10 	sts	0x1051, r21
    a896:	40 93 50 10 	sts	0x1050, r20
	shot->shared.vx = speed;
    a89a:	90 93 16 0e 	sts	0x0E16, r25
    a89e:	58 c0       	rjmp	.+176    	; 0xa950 <init_player_shot+0x288>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a8a0:	86 30       	cpi	r24, 0x06	; 6
    a8a2:	09 f0       	breq	.+2      	; 0xa8a6 <init_player_shot+0x1de>
    a8a4:	5a c0       	rjmp	.+180    	; 0xa95a <init_player_shot+0x292>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a8a6:	33 e0       	ldi	r19, 0x03	; 3
    a8a8:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a8ac:	22 e0       	ldi	r18, 0x02	; 2
    a8ae:	20 93 f1 0d 	sts	0x0DF1, r18
	shot->shot_speed = speed;
    a8b2:	8f e7       	ldi	r24, 0x7F	; 127
    a8b4:	80 93 f3 0d 	sts	0x0DF3, r24
	shot->y_delta = y_delta;
    a8b8:	98 ef       	ldi	r25, 0xF8	; 248
    a8ba:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a8be:	91 e0       	ldi	r25, 0x01	; 1
    a8c0:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a8c4:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a8c8:	4e e8       	ldi	r20, 0x8E	; 142
    a8ca:	5d e0       	ldi	r21, 0x0D	; 13
    a8cc:	50 93 fc 0d 	sts	0x0DFC, r21
    a8d0:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a8d4:	48 ec       	ldi	r20, 0xC8	; 200
    a8d6:	57 e3       	ldi	r21, 0x37	; 55
    a8d8:	50 93 8f 0d 	sts	0x0D8F, r21
    a8dc:	40 93 8e 0d 	sts	0x0D8E, r20
	shot->shared.vx = speed;
    a8e0:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->shared.vy = 0;
    a8e4:	10 92 ed 0d 	sts	0x0DED, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a8e8:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    a8ec:	20 93 05 0e 	sts	0x0E05, r18
	shot->shot_speed = speed;
    a8f0:	80 93 07 0e 	sts	0x0E07, r24
	shot->y_delta = y_delta;
    a8f4:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a8f8:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a8fc:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a900:	60 e4       	ldi	r22, 0x40	; 64
    a902:	70 e1       	ldi	r23, 0x10	; 16
    a904:	70 93 10 0e 	sts	0x0E10, r23
    a908:	60 93 0f 0e 	sts	0x0E0F, r22
	shot->anim.anims[0] = (char*) map;
    a90c:	69 eb       	ldi	r22, 0xB9	; 185
    a90e:	77 e3       	ldi	r23, 0x37	; 55
    a910:	70 93 41 10 	sts	0x1041, r23
    a914:	60 93 40 10 	sts	0x1040, r22
	shot->shared.vx = speed;
    a918:	80 93 02 0e 	sts	0x0E02, r24
	shot->shared.vy = 0;
    a91c:	10 92 01 0e 	sts	0x0E01, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a920:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a924:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    a928:	80 93 1b 0e 	sts	0x0E1B, r24
	shot->y_delta = y_delta;
    a92c:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a930:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a934:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a938:	60 e5       	ldi	r22, 0x50	; 80
    a93a:	70 e1       	ldi	r23, 0x10	; 16
    a93c:	70 93 24 0e 	sts	0x0E24, r23
    a940:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a944:	50 93 51 10 	sts	0x1051, r21
    a948:	40 93 50 10 	sts	0x1050, r20
	shot->shared.vx = speed;
    a94c:	80 93 16 0e 	sts	0x0E16, r24
	shot->shared.vy = 0;
    a950:	10 92 15 0e 	sts	0x0E15, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a954:	20 93 e7 0d 	sts	0x0DE7, r18
    a958:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a95a:	88 30       	cpi	r24, 0x08	; 8
    a95c:	09 f0       	breq	.+2      	; 0xa960 <init_player_shot+0x298>
    a95e:	5a c0       	rjmp	.+180    	; 0xaa14 <init_player_shot+0x34c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a960:	33 e0       	ldi	r19, 0x03	; 3
    a962:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a966:	62 e0       	ldi	r22, 0x02	; 2
    a968:	60 93 f1 0d 	sts	0x0DF1, r22
	shot->shot_speed = speed;
    a96c:	2f e7       	ldi	r18, 0x7F	; 127
    a96e:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->y_delta = y_delta;
    a972:	98 ef       	ldi	r25, 0xF8	; 248
    a974:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a978:	91 e0       	ldi	r25, 0x01	; 1
    a97a:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a97e:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a982:	4e e8       	ldi	r20, 0x8E	; 142
    a984:	5d e0       	ldi	r21, 0x0D	; 13
    a986:	50 93 fc 0d 	sts	0x0DFC, r21
    a98a:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a98e:	48 ec       	ldi	r20, 0xC8	; 200
    a990:	57 e3       	ldi	r21, 0x37	; 55
    a992:	50 93 8f 0d 	sts	0x0D8F, r21
    a996:	40 93 8e 0d 	sts	0x0D8E, r20
	shot->shared.vx = speed;
    a99a:	20 93 ee 0d 	sts	0x0DEE, r18
	shot->shared.vy = 0;
    a99e:	10 92 ed 0d 	sts	0x0DED, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a9a2:	90 93 04 0e 	sts	0x0E04, r25
	shot->hit_count = damage;
    a9a6:	90 93 05 0e 	sts	0x0E05, r25
	shot->shot_speed = speed;
    a9aa:	20 93 07 0e 	sts	0x0E07, r18
	shot->y_delta = y_delta;
    a9ae:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a9b2:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a9b6:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a9ba:	e0 e4       	ldi	r30, 0x40	; 64
    a9bc:	f0 e1       	ldi	r31, 0x10	; 16
    a9be:	f0 93 10 0e 	sts	0x0E10, r31
    a9c2:	e0 93 0f 0e 	sts	0x0E0F, r30
	shot->anim.anims[0] = (char*) map;
    a9c6:	e2 ec       	ldi	r30, 0xC2	; 194
    a9c8:	f7 e3       	ldi	r31, 0x37	; 55
    a9ca:	f0 93 41 10 	sts	0x1041, r31
    a9ce:	e0 93 40 10 	sts	0x1040, r30
	shot->shared.vx = speed;
    a9d2:	20 93 02 0e 	sts	0x0E02, r18
	shot->shared.vy = 0;
    a9d6:	10 92 01 0e 	sts	0x0E01, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a9da:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a9de:	60 93 19 0e 	sts	0x0E19, r22
	shot->shot_speed = speed;
    a9e2:	20 93 1b 0e 	sts	0x0E1B, r18
	shot->y_delta = y_delta;
    a9e6:	80 93 1c 0e 	sts	0x0E1C, r24
	shot->anim.anim_count = 1;
    a9ea:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a9ee:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a9f2:	80 e5       	ldi	r24, 0x50	; 80
    a9f4:	90 e1       	ldi	r25, 0x10	; 16
    a9f6:	90 93 24 0e 	sts	0x0E24, r25
    a9fa:	80 93 23 0e 	sts	0x0E23, r24
	shot->anim.anims[0] = (char*) map;
    a9fe:	50 93 51 10 	sts	0x1051, r21
    aa02:	40 93 50 10 	sts	0x1050, r20
	shot->shared.vx = speed;
    aa06:	20 93 16 0e 	sts	0x0E16, r18
	shot->shared.vy = 0;
    aa0a:	10 92 15 0e 	sts	0x0E15, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    aa0e:	30 93 e7 0d 	sts	0x0DE7, r19
    aa12:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa14:	55 e0       	ldi	r21, 0x05	; 5
    aa16:	50 93 f0 0d 	sts	0x0DF0, r21
	shot->hit_count = damage;
    aa1a:	42 e0       	ldi	r20, 0x02	; 2
    aa1c:	40 93 f1 0d 	sts	0x0DF1, r20
	shot->shot_speed = speed;
    aa20:	9f e7       	ldi	r25, 0x7F	; 127
    aa22:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    aa26:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    aa2a:	81 e0       	ldi	r24, 0x01	; 1
    aa2c:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    aa30:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    aa34:	2e e8       	ldi	r18, 0x8E	; 142
    aa36:	3d e0       	ldi	r19, 0x0D	; 13
    aa38:	30 93 fc 0d 	sts	0x0DFC, r19
    aa3c:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    aa40:	2f eb       	ldi	r18, 0xBF	; 191
    aa42:	37 e3       	ldi	r19, 0x37	; 55
    aa44:	30 93 8f 0d 	sts	0x0D8F, r19
    aa48:	20 93 8e 0d 	sts	0x0D8E, r18
	shot->shared.vx = speed;
    aa4c:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    aa50:	10 92 ed 0d 	sts	0x0DED, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa54:	50 93 04 0e 	sts	0x0E04, r21
	shot->hit_count = damage;
    aa58:	40 93 05 0e 	sts	0x0E05, r20
	shot->shot_speed = speed;
    aa5c:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    aa60:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    aa64:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    aa68:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    aa6c:	40 e4       	ldi	r20, 0x40	; 64
    aa6e:	50 e1       	ldi	r21, 0x10	; 16
    aa70:	50 93 10 0e 	sts	0x0E10, r21
    aa74:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    aa78:	30 93 41 10 	sts	0x1041, r19
    aa7c:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    aa80:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    aa84:	10 92 01 0e 	sts	0x0E01, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa88:	26 e0       	ldi	r18, 0x06	; 6
    aa8a:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    aa8e:	24 e0       	ldi	r18, 0x04	; 4
    aa90:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    aa94:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    aa98:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    aa9c:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    aaa0:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    aaa4:	20 e5       	ldi	r18, 0x50	; 80
    aaa6:	30 e1       	ldi	r19, 0x10	; 16
    aaa8:	30 93 24 0e 	sts	0x0E24, r19
    aaac:	20 93 23 0e 	sts	0x0E23, r18
	shot->anim.anims[0] = (char*) map;
    aab0:	2c eb       	ldi	r18, 0xBC	; 188
    aab2:	37 e3       	ldi	r19, 0x37	; 55
    aab4:	30 93 51 10 	sts	0x1051, r19
    aab8:	20 93 50 10 	sts	0x1050, r18
	shot->shared.vx = speed;
    aabc:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    aac0:	90 93 15 0e 	sts	0x0E15, r25
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    aac4:	80 93 e7 0d 	sts	0x0DE7, r24
    aac8:	08 95       	ret

0000aaca <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    aaca:	81 11       	cpse	r24, r1
    aacc:	51 c0       	rjmp	.+162    	; 0xab70 <init_boss_shot+0xa6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aace:	81 e0       	ldi	r24, 0x01	; 1
    aad0:	80 93 6b 0e 	sts	0x0E6B, r24
	shot->hit_count = damage;
    aad4:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->shot_speed = speed;
    aad8:	94 e6       	ldi	r25, 0x64	; 100
    aada:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    aade:	10 92 6f 0e 	sts	0x0E6F, r1
	shot->anim.anim_count = 1;
    aae2:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    aae6:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    aaea:	2a ed       	ldi	r18, 0xDA	; 218
    aaec:	3f e0       	ldi	r19, 0x0F	; 15
    aaee:	30 93 77 0e 	sts	0x0E77, r19
    aaf2:	20 93 76 0e 	sts	0x0E76, r18
	shot->anim.anims[0] = (char*) map;
    aaf6:	22 ec       	ldi	r18, 0xC2	; 194
    aaf8:	37 e3       	ldi	r19, 0x37	; 55
    aafa:	30 93 db 0f 	sts	0x0FDB, r19
    aafe:	20 93 da 0f 	sts	0x0FDA, r18
	shot->shared.vx = speed;
    ab02:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    ab06:	10 92 68 0e 	sts	0x0E68, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab0a:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    ab0e:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    ab12:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    ab16:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    ab1a:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    ab1e:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    ab22:	44 e5       	ldi	r20, 0x54	; 84
    ab24:	50 e1       	ldi	r21, 0x10	; 16
    ab26:	50 93 8b 0e 	sts	0x0E8B, r21
    ab2a:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    ab2e:	30 93 55 10 	sts	0x1055, r19
    ab32:	20 93 54 10 	sts	0x1054, r18
	shot->shared.vx = speed;
    ab36:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    ab3a:	10 92 7c 0e 	sts	0x0E7C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab3e:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    ab42:	80 93 94 0e 	sts	0x0E94, r24
	shot->shot_speed = speed;
    ab46:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    ab4a:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    ab4e:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    ab52:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    ab56:	46 e3       	ldi	r20, 0x36	; 54
    ab58:	50 e1       	ldi	r21, 0x10	; 16
    ab5a:	50 93 9f 0e 	sts	0x0E9F, r21
    ab5e:	40 93 9e 0e 	sts	0x0E9E, r20
	shot->anim.anims[0] = (char*) map;
    ab62:	30 93 37 10 	sts	0x1037, r19
    ab66:	20 93 36 10 	sts	0x1036, r18
	shot->shared.vx = speed;
    ab6a:	90 93 91 0e 	sts	0x0E91, r25
    ab6e:	58 c0       	rjmp	.+176    	; 0xac20 <init_boss_shot+0x156>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    ab70:	82 30       	cpi	r24, 0x02	; 2
    ab72:	09 f0       	breq	.+2      	; 0xab76 <init_boss_shot+0xac>
    ab74:	58 c0       	rjmp	.+176    	; 0xac26 <init_boss_shot+0x15c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab76:	94 e0       	ldi	r25, 0x04	; 4
    ab78:	90 93 6b 0e 	sts	0x0E6B, r25
	shot->hit_count = damage;
    ab7c:	91 e0       	ldi	r25, 0x01	; 1
    ab7e:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->shot_speed = speed;
    ab82:	2f e7       	ldi	r18, 0x7F	; 127
    ab84:	20 93 6e 0e 	sts	0x0E6E, r18
	shot->y_delta = y_delta;
    ab88:	38 ef       	ldi	r19, 0xF8	; 248
    ab8a:	30 93 6f 0e 	sts	0x0E6F, r19
	shot->anim.anim_count = 1;
    ab8e:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    ab92:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    ab96:	4a ed       	ldi	r20, 0xDA	; 218
    ab98:	5f e0       	ldi	r21, 0x0F	; 15
    ab9a:	50 93 77 0e 	sts	0x0E77, r21
    ab9e:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    aba2:	45 ec       	ldi	r20, 0xC5	; 197
    aba4:	57 e3       	ldi	r21, 0x37	; 55
    aba6:	50 93 db 0f 	sts	0x0FDB, r21
    abaa:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    abae:	20 93 69 0e 	sts	0x0E69, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    abb2:	31 e8       	ldi	r19, 0x81	; 129
    abb4:	30 93 68 0e 	sts	0x0E68, r19
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    abb8:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    abbc:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    abc0:	20 93 82 0e 	sts	0x0E82, r18
	shot->y_delta = y_delta;
    abc4:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    abc8:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    abcc:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    abd0:	44 e5       	ldi	r20, 0x54	; 84
    abd2:	50 e1       	ldi	r21, 0x10	; 16
    abd4:	50 93 8b 0e 	sts	0x0E8B, r21
    abd8:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    abdc:	49 eb       	ldi	r20, 0xB9	; 185
    abde:	57 e3       	ldi	r21, 0x37	; 55
    abe0:	50 93 55 10 	sts	0x1055, r21
    abe4:	40 93 54 10 	sts	0x1054, r20
	shot->shared.vx = speed;
    abe8:	20 93 7d 0e 	sts	0x0E7D, r18
	shot->shared.vy = 0;
    abec:	10 92 7c 0e 	sts	0x0E7C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    abf0:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    abf4:	90 93 94 0e 	sts	0x0E94, r25
	shot->shot_speed = speed;
    abf8:	20 93 96 0e 	sts	0x0E96, r18
	shot->y_delta = y_delta;
    abfc:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    ac00:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    ac04:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    ac08:	66 e3       	ldi	r22, 0x36	; 54
    ac0a:	70 e1       	ldi	r23, 0x10	; 16
    ac0c:	70 93 9f 0e 	sts	0x0E9F, r23
    ac10:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    ac14:	50 93 37 10 	sts	0x1037, r21
    ac18:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    ac1c:	20 93 91 0e 	sts	0x0E91, r18
	shot->shared.vy = 0;
    ac20:	10 92 90 0e 	sts	0x0E90, r1
    ac24:	10 c1       	rjmp	.+544    	; 0xae46 <init_boss_shot+0x37c>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    ac26:	84 30       	cpi	r24, 0x04	; 4
    ac28:	09 f0       	breq	.+2      	; 0xac2c <init_boss_shot+0x162>
    ac2a:	56 c0       	rjmp	.+172    	; 0xacd8 <init_boss_shot+0x20e>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac2c:	33 e0       	ldi	r19, 0x03	; 3
    ac2e:	30 93 6b 0e 	sts	0x0E6B, r19
	shot->hit_count = damage;
    ac32:	22 e0       	ldi	r18, 0x02	; 2
    ac34:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    ac38:	8f e7       	ldi	r24, 0x7F	; 127
    ac3a:	80 93 6e 0e 	sts	0x0E6E, r24
	shot->y_delta = y_delta;
    ac3e:	98 ef       	ldi	r25, 0xF8	; 248
    ac40:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    ac44:	91 e0       	ldi	r25, 0x01	; 1
    ac46:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    ac4a:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    ac4e:	4a ed       	ldi	r20, 0xDA	; 218
    ac50:	5f e0       	ldi	r21, 0x0F	; 15
    ac52:	50 93 77 0e 	sts	0x0E77, r21
    ac56:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    ac5a:	48 ec       	ldi	r20, 0xC8	; 200
    ac5c:	57 e3       	ldi	r21, 0x37	; 55
    ac5e:	50 93 db 0f 	sts	0x0FDB, r21
    ac62:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    ac66:	80 93 69 0e 	sts	0x0E69, r24
	shot->shared.vy = 0;
    ac6a:	10 92 68 0e 	sts	0x0E68, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac6e:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    ac72:	20 93 80 0e 	sts	0x0E80, r18
	shot->shot_speed = speed;
    ac76:	80 93 82 0e 	sts	0x0E82, r24
	shot->y_delta = y_delta;
    ac7a:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    ac7e:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    ac82:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    ac86:	64 e5       	ldi	r22, 0x54	; 84
    ac88:	70 e1       	ldi	r23, 0x10	; 16
    ac8a:	70 93 8b 0e 	sts	0x0E8B, r23
    ac8e:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    ac92:	69 eb       	ldi	r22, 0xB9	; 185
    ac94:	77 e3       	ldi	r23, 0x37	; 55
    ac96:	70 93 55 10 	sts	0x1055, r23
    ac9a:	60 93 54 10 	sts	0x1054, r22
	shot->shared.vx = speed;
    ac9e:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->shared.vy = 0;
    aca2:	10 92 7c 0e 	sts	0x0E7C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aca6:	30 93 93 0e 	sts	0x0E93, r19
	shot->hit_count = damage;
    acaa:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    acae:	80 93 96 0e 	sts	0x0E96, r24
	shot->y_delta = y_delta;
    acb2:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    acb6:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    acba:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    acbe:	66 e3       	ldi	r22, 0x36	; 54
    acc0:	70 e1       	ldi	r23, 0x10	; 16
    acc2:	70 93 9f 0e 	sts	0x0E9F, r23
    acc6:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    acca:	50 93 37 10 	sts	0x1037, r21
    acce:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    acd2:	80 93 91 0e 	sts	0x0E91, r24
    acd6:	59 c0       	rjmp	.+178    	; 0xad8a <init_boss_shot+0x2c0>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    acd8:	86 30       	cpi	r24, 0x06	; 6
    acda:	09 f0       	breq	.+2      	; 0xacde <init_boss_shot+0x214>
    acdc:	5b c0       	rjmp	.+182    	; 0xad94 <init_boss_shot+0x2ca>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    acde:	23 e0       	ldi	r18, 0x03	; 3
    ace0:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    ace4:	32 e0       	ldi	r19, 0x02	; 2
    ace6:	30 93 6c 0e 	sts	0x0E6C, r19
	shot->shot_speed = speed;
    acea:	9f e7       	ldi	r25, 0x7F	; 127
    acec:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    acf0:	88 ef       	ldi	r24, 0xF8	; 248
    acf2:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.anim_count = 1;
    acf6:	81 e0       	ldi	r24, 0x01	; 1
    acf8:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    acfc:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    ad00:	4a ed       	ldi	r20, 0xDA	; 218
    ad02:	5f e0       	ldi	r21, 0x0F	; 15
    ad04:	50 93 77 0e 	sts	0x0E77, r21
    ad08:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    ad0c:	48 ec       	ldi	r20, 0xC8	; 200
    ad0e:	57 e3       	ldi	r21, 0x37	; 55
    ad10:	50 93 db 0f 	sts	0x0FDB, r21
    ad14:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    ad18:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    ad1c:	10 92 68 0e 	sts	0x0E68, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad20:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    ad24:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    ad28:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    ad2c:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    ad30:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    ad34:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    ad38:	64 e5       	ldi	r22, 0x54	; 84
    ad3a:	70 e1       	ldi	r23, 0x10	; 16
    ad3c:	70 93 8b 0e 	sts	0x0E8B, r23
    ad40:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    ad44:	62 ec       	ldi	r22, 0xC2	; 194
    ad46:	77 e3       	ldi	r23, 0x37	; 55
    ad48:	70 93 55 10 	sts	0x1055, r23
    ad4c:	60 93 54 10 	sts	0x1054, r22
	shot->shared.vx = speed;
    ad50:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    ad54:	10 92 7c 0e 	sts	0x0E7C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad58:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    ad5c:	30 93 94 0e 	sts	0x0E94, r19
	shot->shot_speed = speed;
    ad60:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    ad64:	38 e0       	ldi	r19, 0x08	; 8
    ad66:	30 93 97 0e 	sts	0x0E97, r19
	shot->anim.anim_count = 1;
    ad6a:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    ad6e:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    ad72:	66 e3       	ldi	r22, 0x36	; 54
    ad74:	70 e1       	ldi	r23, 0x10	; 16
    ad76:	70 93 9f 0e 	sts	0x0E9F, r23
    ad7a:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    ad7e:	50 93 37 10 	sts	0x1037, r21
    ad82:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    ad86:	90 93 91 0e 	sts	0x0E91, r25
	shot->shared.vy = 0;
    ad8a:	10 92 90 0e 	sts	0x0E90, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    ad8e:	20 93 62 0e 	sts	0x0E62, r18
    ad92:	08 95       	ret
	}
	else if (level == 8) // Dessert
    ad94:	88 30       	cpi	r24, 0x08	; 8
    ad96:	09 f0       	breq	.+2      	; 0xad9a <init_boss_shot+0x2d0>
    ad98:	58 c0       	rjmp	.+176    	; 0xae4a <init_boss_shot+0x380>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad9a:	22 e0       	ldi	r18, 0x02	; 2
    ad9c:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    ada0:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    ada4:	3f e7       	ldi	r19, 0x7F	; 127
    ada6:	30 93 6e 0e 	sts	0x0E6E, r19
	shot->y_delta = y_delta;
    adaa:	98 ef       	ldi	r25, 0xF8	; 248
    adac:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    adb0:	91 e0       	ldi	r25, 0x01	; 1
    adb2:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    adb6:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    adba:	4a ed       	ldi	r20, 0xDA	; 218
    adbc:	5f e0       	ldi	r21, 0x0F	; 15
    adbe:	50 93 77 0e 	sts	0x0E77, r21
    adc2:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    adc6:	49 eb       	ldi	r20, 0xB9	; 185
    adc8:	57 e3       	ldi	r21, 0x37	; 55
    adca:	50 93 db 0f 	sts	0x0FDB, r21
    adce:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    add2:	30 93 69 0e 	sts	0x0E69, r19
	shot->shared.vy = 0;
    add6:	10 92 68 0e 	sts	0x0E68, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    adda:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    adde:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    ade2:	64 e6       	ldi	r22, 0x64	; 100
    ade4:	60 93 82 0e 	sts	0x0E82, r22
	shot->y_delta = y_delta;
    ade8:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    adec:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    adf0:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    adf4:	e4 e5       	ldi	r30, 0x54	; 84
    adf6:	f0 e1       	ldi	r31, 0x10	; 16
    adf8:	f0 93 8b 0e 	sts	0x0E8B, r31
    adfc:	e0 93 8a 0e 	sts	0x0E8A, r30
	shot->anim.anims[0] = (char*) map;
    ae00:	50 93 55 10 	sts	0x1055, r21
    ae04:	40 93 54 10 	sts	0x1054, r20
	shot->shared.vx = speed;
    ae08:	60 93 7d 0e 	sts	0x0E7D, r22
	shot->shared.vy = 0;
    ae0c:	10 92 7c 0e 	sts	0x0E7C, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ae10:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    ae14:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    ae18:	30 93 96 0e 	sts	0x0E96, r19
	shot->y_delta = y_delta;
    ae1c:	80 93 97 0e 	sts	0x0E97, r24
	shot->anim.anim_count = 1;
    ae20:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    ae24:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    ae28:	86 e3       	ldi	r24, 0x36	; 54
    ae2a:	90 e1       	ldi	r25, 0x10	; 16
    ae2c:	90 93 9f 0e 	sts	0x0E9F, r25
    ae30:	80 93 9e 0e 	sts	0x0E9E, r24
	shot->anim.anims[0] = (char*) map;
    ae34:	50 93 37 10 	sts	0x1037, r21
    ae38:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    ae3c:	30 93 91 0e 	sts	0x0E91, r19
	shot->shared.vy = 0;
    ae40:	10 92 90 0e 	sts	0x0E90, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    ae44:	83 e0       	ldi	r24, 0x03	; 3
    ae46:	80 93 62 0e 	sts	0x0E62, r24
    ae4a:	08 95       	ret

0000ae4c <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    ae4c:	10 92 cd 0e 	sts	0x0ECD, r1
    ae50:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    ae54:	10 92 c9 0e 	sts	0x0EC9, r1
    ae58:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    ae5c:	10 92 cb 0e 	sts	0x0ECB, r1
    ae60:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    ae64:	10 92 ce 0e 	sts	0x0ECE, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	if (is_space())
    ae68:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    ae6c:	88 23       	and	r24, r24
    ae6e:	f9 f0       	breq	.+62     	; 0xaeae <init_boss_state+0x62>
	{
		game.boss.width = 3;
    ae70:	83 e0       	ldi	r24, 0x03	; 3
    ae72:	80 93 5f 0e 	sts	0x0E5F, r24
		game.boss.height = 1;
    ae76:	81 e0       	ldi	r24, 0x01	; 1
    ae78:	80 93 60 0e 	sts	0x0E60, r24
		game.boss.run.anim_count = 2;
    ae7c:	82 e0       	ldi	r24, 0x02	; 2
    ae7e:	80 93 a9 0e 	sts	0x0EA9, r24
		game.boss.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ae82:	85 e0       	ldi	r24, 0x05	; 5
    ae84:	80 93 aa 0e 	sts	0x0EAA, r24
		game.boss.run.anims = boss_run_anim;
    ae88:	80 e9       	ldi	r24, 0x90	; 144
    ae8a:	9d e0       	ldi	r25, 0x0D	; 13
    ae8c:	90 93 af 0e 	sts	0x0EAF, r25
    ae90:	80 93 ae 0e 	sts	0x0EAE, r24
		game.boss.run.anims[0] = (char*) map_hero_ship_0;
    ae94:	84 ee       	ldi	r24, 0xE4	; 228
    ae96:	97 e3       	ldi	r25, 0x37	; 55
    ae98:	90 93 91 0d 	sts	0x0D91, r25
    ae9c:	80 93 90 0d 	sts	0x0D90, r24
		game.boss.run.anims[1] = (char*) map_hero_ship_1;
    aea0:	8f ed       	ldi	r24, 0xDF	; 223
    aea2:	97 e3       	ldi	r25, 0x37	; 55
    aea4:	90 93 93 0d 	sts	0x0D93, r25
    aea8:	80 93 92 0d 	sts	0x0D92, r24
    aeac:	2a c0       	rjmp	.+84     	; 0xaf02 <init_boss_state+0xb6>
	}
	else
	{
		game.boss.width = 2;
    aeae:	82 e0       	ldi	r24, 0x02	; 2
    aeb0:	80 93 5f 0e 	sts	0x0E5F, r24
		game.boss.height = 3;
    aeb4:	83 e0       	ldi	r24, 0x03	; 3
    aeb6:	80 93 60 0e 	sts	0x0E60, r24
		game.boss.run.anim_count = 4;
    aeba:	84 e0       	ldi	r24, 0x04	; 4
    aebc:	80 93 a9 0e 	sts	0x0EA9, r24
		game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    aec0:	8c e0       	ldi	r24, 0x0C	; 12
    aec2:	80 93 aa 0e 	sts	0x0EAA, r24
		game.boss.run.anims = boss_run_anim;
    aec6:	80 e9       	ldi	r24, 0x90	; 144
    aec8:	9d e0       	ldi	r25, 0x0D	; 13
    aeca:	90 93 af 0e 	sts	0x0EAF, r25
    aece:	80 93 ae 0e 	sts	0x0EAE, r24
		game.boss.run.anims[0] = (char*) map_ahero_step_0;
    aed2:	89 ea       	ldi	r24, 0xA9	; 169
    aed4:	97 e3       	ldi	r25, 0x37	; 55
    aed6:	90 93 91 0d 	sts	0x0D91, r25
    aeda:	80 93 90 0d 	sts	0x0D90, r24
		game.boss.run.anims[1] = (char*) map_ahero_step_1;
    aede:	81 ea       	ldi	r24, 0xA1	; 161
    aee0:	97 e3       	ldi	r25, 0x37	; 55
    aee2:	90 93 93 0d 	sts	0x0D93, r25
    aee6:	80 93 92 0d 	sts	0x0D92, r24
		game.boss.run.anims[2] = (char*) map_ahero_step_2;
    aeea:	89 e9       	ldi	r24, 0x99	; 153
    aeec:	97 e3       	ldi	r25, 0x37	; 55
    aeee:	90 93 95 0d 	sts	0x0D95, r25
    aef2:	80 93 94 0d 	sts	0x0D94, r24
		game.boss.run.anims[3] = (char*) map_ahero_step_3;
    aef6:	81 e9       	ldi	r24, 0x91	; 145
    aef8:	97 e3       	ldi	r25, 0x37	; 55
    aefa:	90 93 97 0d 	sts	0x0D97, r25
    aefe:	80 93 96 0d 	sts	0x0D96, r24
	}
	game.boss.shared.y = 21*8;
    af02:	88 ea       	ldi	r24, 0xA8	; 168
    af04:	90 e0       	ldi	r25, 0x00	; 0
    af06:	90 93 57 0e 	sts	0x0E57, r25
    af0a:	80 93 56 0e 	sts	0x0E56, r24
	game.boss.active = 0;
    af0e:	10 92 61 0e 	sts	0x0E61, r1
	game.boss.direction = D_RIGHT;
    af12:	81 e0       	ldi	r24, 0x01	; 1
    af14:	80 93 5e 0e 	sts	0x0E5E, r24
	game.boss.flags = IDLE;
    af18:	98 e0       	ldi	r25, 0x08	; 8
    af1a:	90 93 5c 0e 	sts	0x0E5C, r25
	game.boss.ai_flags = AI_NOT_READY;
    af1e:	10 92 5d 0e 	sts	0x0E5D, r1
	game.boss.shield = BOSS_SHIELD;
    af22:	94 e1       	ldi	r25, 0x14	; 20
    af24:	90 93 63 0e 	sts	0x0E63, r25
	game.boss.idle.anim_count = 1;
    af28:	80 93 a1 0e 	sts	0x0EA1, r24
	game.boss.idle.frames_per_anim = 1;
    af2c:	80 93 a2 0e 	sts	0x0EA2, r24
	game.boss.idle.anims = boss_idle_anim;
    af30:	22 e5       	ldi	r18, 0x52	; 82
    af32:	30 e1       	ldi	r19, 0x10	; 16
    af34:	30 93 a7 0e 	sts	0x0EA7, r19
    af38:	20 93 a6 0e 	sts	0x0EA6, r18
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    af3c:	21 eb       	ldi	r18, 0xB1	; 177
    af3e:	37 e3       	ldi	r19, 0x37	; 55
    af40:	30 93 53 10 	sts	0x1053, r19
    af44:	20 93 52 10 	sts	0x1052, r18
	
	game.boss.jump.anim_count = 1;
    af48:	80 93 b1 0e 	sts	0x0EB1, r24
	game.boss.jump.frames_per_anim = 1;
    af4c:	80 93 b2 0e 	sts	0x0EB2, r24
	game.boss.jump.anims = boss_jump_anim;
    af50:	82 e4       	ldi	r24, 0x42	; 66
    af52:	90 e1       	ldi	r25, 0x10	; 16
    af54:	90 93 b7 0e 	sts	0x0EB7, r25
    af58:	80 93 b6 0e 	sts	0x0EB6, r24
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    af5c:	89 e8       	ldi	r24, 0x89	; 137
    af5e:	97 e3       	ldi	r25, 0x37	; 55
    af60:	90 93 43 10 	sts	0x1043, r25
    af64:	80 93 42 10 	sts	0x1042, r24
	
	game.boss.expl.anim_count = 3;
    af68:	83 e0       	ldi	r24, 0x03	; 3
    af6a:	80 93 c1 0e 	sts	0x0EC1, r24
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    af6e:	85 e0       	ldi	r24, 0x05	; 5
    af70:	80 93 c2 0e 	sts	0x0EC2, r24
	game.boss.expl.anims = expl_anim;
    af74:	8a e4       	ldi	r24, 0x4A	; 74
    af76:	90 e1       	ldi	r25, 0x10	; 16
    af78:	90 93 c7 0e 	sts	0x0EC7, r25
    af7c:	80 93 c6 0e 	sts	0x0EC6, r24
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    af80:	83 e3       	ldi	r24, 0x33	; 51
    af82:	98 e3       	ldi	r25, 0x38	; 56
    af84:	90 93 4b 10 	sts	0x104B, r25
    af88:	80 93 4a 10 	sts	0x104A, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    af8c:	80 e3       	ldi	r24, 0x30	; 48
    af8e:	98 e3       	ldi	r25, 0x38	; 56
    af90:	90 93 4d 10 	sts	0x104D, r25
    af94:	80 93 4c 10 	sts	0x104C, r24
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    af98:	8d e2       	ldi	r24, 0x2D	; 45
    af9a:	98 e3       	ldi	r25, 0x38	; 56
    af9c:	90 93 4f 10 	sts	0x104F, r25
    afa0:	80 93 4e 10 	sts	0x104E, r24
	
	init_boss_shot(game.current_level_index);
    afa4:	80 91 cf 0d 	lds	r24, 0x0DCF
    afa8:	0c 94 65 55 	jmp	0xaaca	; 0xaaca <init_boss_shot>

0000afac <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    afac:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    afb0:	88 23       	and	r24, r24
    afb2:	f9 f0       	breq	.+62     	; 0xaff2 <init_player_state+0x46>
	{
		game.player.width = 3;
    afb4:	83 e0       	ldi	r24, 0x03	; 3
    afb6:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 1;
    afba:	81 e0       	ldi	r24, 0x01	; 1
    afbc:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 2;
    afc0:	82 e0       	ldi	r24, 0x02	; 2
    afc2:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    afc6:	85 e0       	ldi	r24, 0x05	; 5
    afc8:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    afcc:	88 e3       	ldi	r24, 0x38	; 56
    afce:	90 e1       	ldi	r25, 0x10	; 16
    afd0:	90 93 34 0e 	sts	0x0E34, r25
    afd4:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    afd8:	84 ee       	ldi	r24, 0xE4	; 228
    afda:	97 e3       	ldi	r25, 0x37	; 55
    afdc:	90 93 39 10 	sts	0x1039, r25
    afe0:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    afe4:	8f ed       	ldi	r24, 0xDF	; 223
    afe6:	97 e3       	ldi	r25, 0x37	; 55
    afe8:	90 93 3b 10 	sts	0x103B, r25
    afec:	80 93 3a 10 	sts	0x103A, r24
    aff0:	2a c0       	rjmp	.+84     	; 0xb046 <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    aff2:	82 e0       	ldi	r24, 0x02	; 2
    aff4:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 3;
    aff8:	83 e0       	ldi	r24, 0x03	; 3
    affa:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 4;
    affe:	84 e0       	ldi	r24, 0x04	; 4
    b000:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    b004:	8c e0       	ldi	r24, 0x0C	; 12
    b006:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    b00a:	88 e3       	ldi	r24, 0x38	; 56
    b00c:	90 e1       	ldi	r25, 0x10	; 16
    b00e:	90 93 34 0e 	sts	0x0E34, r25
    b012:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    b016:	8e e0       	ldi	r24, 0x0E	; 14
    b018:	98 e3       	ldi	r25, 0x38	; 56
    b01a:	90 93 39 10 	sts	0x1039, r25
    b01e:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    b022:	86 e0       	ldi	r24, 0x06	; 6
    b024:	98 e3       	ldi	r25, 0x38	; 56
    b026:	90 93 3b 10 	sts	0x103B, r25
    b02a:	80 93 3a 10 	sts	0x103A, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    b02e:	8e ef       	ldi	r24, 0xFE	; 254
    b030:	97 e3       	ldi	r25, 0x37	; 55
    b032:	90 93 3d 10 	sts	0x103D, r25
    b036:	80 93 3c 10 	sts	0x103C, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    b03a:	86 ef       	ldi	r24, 0xF6	; 246
    b03c:	97 e3       	ldi	r25, 0x37	; 55
    b03e:	90 93 3f 10 	sts	0x103F, r25
    b042:	80 93 3e 10 	sts	0x103E, r24
	}
	game.player.active = 1;
    b046:	81 e0       	ldi	r24, 0x01	; 1
    b048:	80 93 e6 0d 	sts	0x0DE6, r24
	game.player.direction = D_RIGHT;
    b04c:	80 93 e3 0d 	sts	0x0DE3, r24
	game.player.flags = IDLE;
    b050:	98 e0       	ldi	r25, 0x08	; 8
    b052:	90 93 e1 0d 	sts	0x0DE1, r25
	game.player.ai_flags = AI_NOT_READY;
    b056:	10 92 e2 0d 	sts	0x0DE2, r1
	game.player.shield = PLAYER_SHIELD;
    b05a:	94 e1       	ldi	r25, 0x14	; 20
    b05c:	90 93 e8 0d 	sts	0x0DE8, r25
	game.player.idle.anim_count = 1;
    b060:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.frames_per_anim = 1;
    b064:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.anims = idle_anim;
    b068:	2a e5       	ldi	r18, 0x5A	; 90
    b06a:	30 e1       	ldi	r19, 0x10	; 16
    b06c:	30 93 2c 0e 	sts	0x0E2C, r19
    b070:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    b074:	26 e1       	ldi	r18, 0x16	; 22
    b076:	38 e3       	ldi	r19, 0x38	; 56
    b078:	30 93 5b 10 	sts	0x105B, r19
    b07c:	20 93 5a 10 	sts	0x105A, r18
	
	game.player.jump.anim_count = 1;
    b080:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.frames_per_anim = 1;
    b084:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.anims = jump_anim;
    b088:	28 e9       	ldi	r18, 0x98	; 152
    b08a:	3d e0       	ldi	r19, 0x0D	; 13
    b08c:	30 93 3c 0e 	sts	0x0E3C, r19
    b090:	20 93 3b 0e 	sts	0x0E3B, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    b094:	2e ee       	ldi	r18, 0xEE	; 238
    b096:	37 e3       	ldi	r19, 0x37	; 55
    b098:	30 93 99 0d 	sts	0x0D99, r19
    b09c:	20 93 98 0d 	sts	0x0D98, r18
	
	game.player.prone.anim_count = 1;
    b0a0:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.frames_per_anim = 1;
    b0a4:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.anims = prone_anim;
    b0a8:	8c ed       	ldi	r24, 0xDC	; 220
    b0aa:	9f e0       	ldi	r25, 0x0F	; 15
    b0ac:	90 93 44 0e 	sts	0x0E44, r25
    b0b0:	80 93 43 0e 	sts	0x0E43, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    b0b4:	89 ee       	ldi	r24, 0xE9	; 233
    b0b6:	97 e3       	ldi	r25, 0x37	; 55
    b0b8:	90 93 dd 0f 	sts	0x0FDD, r25
    b0bc:	80 93 dc 0f 	sts	0x0FDC, r24
	
	game.player.expl.anim_count = 3;
    b0c0:	83 e0       	ldi	r24, 0x03	; 3
    b0c2:	80 93 46 0e 	sts	0x0E46, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b0c6:	85 e0       	ldi	r24, 0x05	; 5
    b0c8:	80 93 47 0e 	sts	0x0E47, r24
	game.player.expl.anims = expl_anim;
    b0cc:	8a e4       	ldi	r24, 0x4A	; 74
    b0ce:	90 e1       	ldi	r25, 0x10	; 16
    b0d0:	90 93 4c 0e 	sts	0x0E4C, r25
    b0d4:	80 93 4b 0e 	sts	0x0E4B, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    b0d8:	83 e3       	ldi	r24, 0x33	; 51
    b0da:	98 e3       	ldi	r25, 0x38	; 56
    b0dc:	90 93 4b 10 	sts	0x104B, r25
    b0e0:	80 93 4a 10 	sts	0x104A, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    b0e4:	80 e3       	ldi	r24, 0x30	; 48
    b0e6:	98 e3       	ldi	r25, 0x38	; 56
    b0e8:	90 93 4d 10 	sts	0x104D, r25
    b0ec:	80 93 4c 10 	sts	0x104C, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    b0f0:	8d e2       	ldi	r24, 0x2D	; 45
    b0f2:	98 e3       	ldi	r25, 0x38	; 56
    b0f4:	90 93 4f 10 	sts	0x104F, r25
    b0f8:	80 93 4e 10 	sts	0x104E, r24
	game.eye_clusters = 9;
    b0fc:	89 e0       	ldi	r24, 0x09	; 9
    b0fe:	80 93 d8 0d 	sts	0x0DD8, r24
	init_player_shot(game.current_level_index);
    b102:	80 91 cf 0d 	lds	r24, 0x0DCF
    b106:	0c 94 64 53 	jmp	0xa6c8	; 0xa6c8 <init_player_shot>

0000b10a <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    b10a:	cf 93       	push	r28
    b10c:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    b10e:	a8 2f       	mov	r26, r24
    b110:	b0 e0       	ldi	r27, 0x00	; 0
    b112:	35 e3       	ldi	r19, 0x35	; 53
    b114:	83 9f       	mul	r24, r19
    b116:	c0 01       	movw	r24, r0
    b118:	11 24       	eor	r1, r1
    b11a:	86 54       	subi	r24, 0x46	; 70
    b11c:	92 4f       	sbci	r25, 0xF2	; 242
    b11e:	fc 01       	movw	r30, r24
    b120:	ed 5b       	subi	r30, 0xBD	; 189
    b122:	fe 4f       	sbci	r31, 0xFE	; 254
    b124:	33 e0       	ldi	r19, 0x03	; 3
    b126:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b128:	31 96       	adiw	r30, 0x01	; 1
    b12a:	35 e0       	ldi	r19, 0x05	; 5
    b12c:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    b12e:	34 96       	adiw	r30, 0x04	; 4
    b130:	ca e4       	ldi	r28, 0x4A	; 74
    b132:	d0 e1       	ldi	r29, 0x10	; 16
    b134:	d1 83       	std	Z+1, r29	; 0x01
    b136:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    b138:	e3 e3       	ldi	r30, 0x33	; 51
    b13a:	f8 e3       	ldi	r31, 0x38	; 56
    b13c:	f0 93 4b 10 	sts	0x104B, r31
    b140:	e0 93 4a 10 	sts	0x104A, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    b144:	e0 e3       	ldi	r30, 0x30	; 48
    b146:	f8 e3       	ldi	r31, 0x38	; 56
    b148:	f0 93 4d 10 	sts	0x104D, r31
    b14c:	e0 93 4c 10 	sts	0x104C, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    b150:	ed e2       	ldi	r30, 0x2D	; 45
    b152:	f8 e3       	ldi	r31, 0x38	; 56
    b154:	f0 93 4f 10 	sts	0x104F, r31
    b158:	e0 93 4e 10 	sts	0x104E, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    b15c:	fc 01       	movw	r30, r24
    b15e:	e2 5d       	subi	r30, 0xD2	; 210
    b160:	fe 4f       	sbci	r31, 0xFE	; 254
    b162:	31 e0       	ldi	r19, 0x01	; 1
    b164:	30 83       	st	Z, r19
		game.enemies[i].shot[j].active = 0;
    b166:	31 96       	adiw	r30, 0x01	; 1
    b168:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    b16a:	32 97       	sbiw	r30, 0x02	; 2
    b16c:	c7 e0       	ldi	r28, 0x07	; 7
    b16e:	c0 83       	st	Z, r28
		game.enemies[i].shot[j].anim.anim_count = 1;
    b170:	36 96       	adiw	r30, 0x06	; 6
    b172:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    b174:	31 96       	adiw	r30, 0x01	; 1
    b176:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    b178:	34 96       	adiw	r30, 0x04	; 4
    b17a:	c4 e4       	ldi	r28, 0x44	; 68
    b17c:	d0 e1       	ldi	r29, 0x10	; 16
    b17e:	d1 83       	std	Z+1, r29	; 0x01
    b180:	c0 83       	st	Z, r28
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    b182:	e6 e8       	ldi	r30, 0x86	; 134
    b184:	f7 e3       	ldi	r31, 0x37	; 55
    b186:	f0 93 45 10 	sts	0x1045, r31
    b18a:	e0 93 44 10 	sts	0x1044, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    b18e:	fc 01       	movw	r30, r24
    b190:	e0 5d       	subi	r30, 0xD0	; 208
    b192:	fe 4f       	sbci	r31, 0xFE	; 254
    b194:	30 e5       	ldi	r19, 0x50	; 80
    b196:	30 83       	st	Z, r19
		if (is_boss)
    b198:	22 23       	and	r18, r18
    b19a:	41 f0       	breq	.+16     	; 0xb1ac <init_enemy_shot+0xa2>
		{
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    b19c:	88 e6       	ldi	r24, 0x68	; 104
    b19e:	97 e3       	ldi	r25, 0x37	; 55
    b1a0:	90 93 45 10 	sts	0x1045, r25
    b1a4:	80 93 44 10 	sts	0x1044, r24
			game.enemies[i].shot[j].shot_speed = MEDIUM_SHOT_SPEED;
    b1a8:	84 e6       	ldi	r24, 0x64	; 100
    b1aa:	08 c0       	rjmp	.+16     	; 0xb1bc <init_enemy_shot+0xb2>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    b1ac:	fc 01       	movw	r30, r24
    b1ae:	ef 5d       	subi	r30, 0xDF	; 223
    b1b0:	fe 4f       	sbci	r31, 0xFE	; 254
    b1b2:	20 81       	ld	r18, Z
    b1b4:	3a 96       	adiw	r30, 0x0a	; 10
    b1b6:	24 30       	cpi	r18, 0x04	; 4
    b1b8:	19 f4       	brne	.+6      	; 0xb1c0 <init_enemy_shot+0xb6>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    b1ba:	82 ee       	ldi	r24, 0xE2	; 226
    b1bc:	80 83       	st	Z, r24
    b1be:	05 c0       	rjmp	.+10     	; 0xb1ca <init_enemy_shot+0xc0>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    b1c0:	25 30       	cpi	r18, 0x05	; 5
    b1c2:	11 f4       	brne	.+4      	; 0xb1c8 <init_enemy_shot+0xbe>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    b1c4:	8a e0       	ldi	r24, 0x0A	; 10
    b1c6:	fa cf       	rjmp	.-12     	; 0xb1bc <init_enemy_shot+0xb2>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    b1c8:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    b1ca:	25 e3       	ldi	r18, 0x35	; 53
    b1cc:	2a 9f       	mul	r18, r26
    b1ce:	c0 01       	movw	r24, r0
    b1d0:	2b 9f       	mul	r18, r27
    b1d2:	90 0d       	add	r25, r0
    b1d4:	11 24       	eor	r1, r1
    b1d6:	86 54       	subi	r24, 0x46	; 70
    b1d8:	92 4f       	sbci	r25, 0xF2	; 242
    b1da:	fc 01       	movw	r30, r24
    b1dc:	e6 5d       	subi	r30, 0xD6	; 214
    b1de:	fe 4f       	sbci	r31, 0xFE	; 254
    b1e0:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    b1e2:	34 97       	sbiw	r30, 0x04	; 4
    b1e4:	71 83       	std	Z+1, r23	; 0x01
    b1e6:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    b1e8:	32 96       	adiw	r30, 0x02	; 2
    b1ea:	51 83       	std	Z+1, r21	; 0x01
    b1ec:	40 83       	st	Z, r20
	}
}
    b1ee:	df 91       	pop	r29
    b1f0:	cf 91       	pop	r28
    b1f2:	08 95       	ret

0000b1f4 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b1f4:	95 e3       	ldi	r25, 0x35	; 53
    b1f6:	89 9f       	mul	r24, r25
    b1f8:	90 01       	movw	r18, r0
    b1fa:	11 24       	eor	r1, r1
    b1fc:	26 54       	subi	r18, 0x46	; 70
    b1fe:	32 4f       	sbci	r19, 0xF2	; 242
    b200:	f9 01       	movw	r30, r18
    b202:	e4 5e       	subi	r30, 0xE4	; 228
    b204:	fe 4f       	sbci	r31, 0xFE	; 254
    b206:	91 e0       	ldi	r25, 0x01	; 1
    b208:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b20a:	32 96       	adiw	r30, 0x02	; 2
    b20c:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    b20e:	31 97       	sbiw	r30, 0x01	; 1
    b210:	a8 e0       	ldi	r26, 0x08	; 8
    b212:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    b214:	32 96       	adiw	r30, 0x02	; 2
    b216:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b218:	31 96       	adiw	r30, 0x01	; 1
    b21a:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    b21c:	31 96       	adiw	r30, 0x01	; 1
    b21e:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    b220:	31 96       	adiw	r30, 0x01	; 1
    b222:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b224:	31 96       	adiw	r30, 0x01	; 1
    b226:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    b228:	32 96       	adiw	r30, 0x02	; 2
    b22a:	92 e0       	ldi	r25, 0x02	; 2
    b22c:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    b22e:	76 96       	adiw	r30, 0x16	; 22
    b230:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    b232:	31 96       	adiw	r30, 0x01	; 1
    b234:	9a e0       	ldi	r25, 0x0A	; 10
    b236:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    b238:	d9 01       	movw	r26, r18
    b23a:	a0 5c       	subi	r26, 0xC0	; 192
    b23c:	be 4f       	sbci	r27, 0xFE	; 254
    b23e:	ee ed       	ldi	r30, 0xDE	; 222
    b240:	ff e0       	ldi	r31, 0x0F	; 15
    b242:	ed 93       	st	X+, r30
    b244:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    b246:	ad e7       	ldi	r26, 0x7D	; 125
    b248:	b7 e3       	ldi	r27, 0x37	; 55
    b24a:	b1 83       	std	Z+1, r27	; 0x01
    b24c:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    b24e:	aa e7       	ldi	r26, 0x7A	; 122
    b250:	b7 e3       	ldi	r27, 0x37	; 55
    b252:	b3 83       	std	Z+3, r27	; 0x03
    b254:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    b256:	f9 01       	movw	r30, r18
    b258:	e5 5e       	subi	r30, 0xE5	; 229
    b25a:	fe 4f       	sbci	r31, 0xFE	; 254
    b25c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b25e:	31 97       	sbiw	r30, 0x01	; 1
    b260:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b262:	31 97       	sbiw	r30, 0x01	; 1
    b264:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b266:	34 97       	sbiw	r30, 0x04	; 4
    b268:	71 83       	std	Z+1, r23	; 0x01
    b26a:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b26c:	32 96       	adiw	r30, 0x02	; 2
    b26e:	51 83       	std	Z+1, r21	; 0x01
    b270:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b272:	20 e0       	ldi	r18, 0x00	; 0
    b274:	0c 94 85 58 	jmp	0xb10a	; 0xb10a <init_enemy_shot>

0000b278 <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b278:	95 e3       	ldi	r25, 0x35	; 53
    b27a:	89 9f       	mul	r24, r25
    b27c:	90 01       	movw	r18, r0
    b27e:	11 24       	eor	r1, r1
    b280:	26 54       	subi	r18, 0x46	; 70
    b282:	32 4f       	sbci	r19, 0xF2	; 242
    b284:	f9 01       	movw	r30, r18
    b286:	e3 5e       	subi	r30, 0xE3	; 227
    b288:	fe 4f       	sbci	r31, 0xFE	; 254
    b28a:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b28c:	31 97       	sbiw	r30, 0x01	; 1
    b28e:	91 e0       	ldi	r25, 0x01	; 1
    b290:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b292:	32 96       	adiw	r30, 0x02	; 2
    b294:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b296:	31 96       	adiw	r30, 0x01	; 1
    b298:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b29a:	31 96       	adiw	r30, 0x01	; 1
    b29c:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    b29e:	31 96       	adiw	r30, 0x01	; 1
    b2a0:	a3 e0       	ldi	r26, 0x03	; 3
    b2a2:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b2a4:	31 96       	adiw	r30, 0x01	; 1
    b2a6:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b2a8:	31 96       	adiw	r30, 0x01	; 1
    b2aa:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    b2ac:	32 96       	adiw	r30, 0x02	; 2
    b2ae:	a2 e0       	ldi	r26, 0x02	; 2
    b2b0:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b2b2:	76 96       	adiw	r30, 0x16	; 22
    b2b4:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b2b6:	31 96       	adiw	r30, 0x01	; 1
    b2b8:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b2ba:	d9 01       	movw	r26, r18
    b2bc:	a0 5c       	subi	r26, 0xC0	; 192
    b2be:	be 4f       	sbci	r27, 0xFE	; 254
    b2c0:	e4 e3       	ldi	r30, 0x34	; 52
    b2c2:	f0 e1       	ldi	r31, 0x10	; 16
    b2c4:	ed 93       	st	X+, r30
    b2c6:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    b2c8:	a4 e7       	ldi	r26, 0x74	; 116
    b2ca:	b7 e3       	ldi	r27, 0x37	; 55
    b2cc:	b1 83       	std	Z+1, r27	; 0x01
    b2ce:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b2d0:	f9 01       	movw	r30, r18
    b2d2:	e5 5e       	subi	r30, 0xE5	; 229
    b2d4:	fe 4f       	sbci	r31, 0xFE	; 254
    b2d6:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b2d8:	31 97       	sbiw	r30, 0x01	; 1
    b2da:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b2dc:	31 97       	sbiw	r30, 0x01	; 1
    b2de:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b2e0:	34 97       	sbiw	r30, 0x04	; 4
    b2e2:	71 83       	std	Z+1, r23	; 0x01
    b2e4:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b2e6:	32 96       	adiw	r30, 0x02	; 2
    b2e8:	51 83       	std	Z+1, r21	; 0x01
    b2ea:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b2ec:	20 e0       	ldi	r18, 0x00	; 0
    b2ee:	0c 94 85 58 	jmp	0xb10a	; 0xb10a <init_enemy_shot>

0000b2f2 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b2f2:	95 e3       	ldi	r25, 0x35	; 53
    b2f4:	89 9f       	mul	r24, r25
    b2f6:	90 01       	movw	r18, r0
    b2f8:	11 24       	eor	r1, r1
    b2fa:	26 54       	subi	r18, 0x46	; 70
    b2fc:	32 4f       	sbci	r19, 0xF2	; 242
    b2fe:	f9 01       	movw	r30, r18
    b300:	e3 5e       	subi	r30, 0xE3	; 227
    b302:	fe 4f       	sbci	r31, 0xFE	; 254
    b304:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b306:	31 97       	sbiw	r30, 0x01	; 1
    b308:	91 e0       	ldi	r25, 0x01	; 1
    b30a:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b30c:	32 96       	adiw	r30, 0x02	; 2
    b30e:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b310:	31 96       	adiw	r30, 0x01	; 1
    b312:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b314:	31 96       	adiw	r30, 0x01	; 1
    b316:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    b318:	31 96       	adiw	r30, 0x01	; 1
    b31a:	a4 e0       	ldi	r26, 0x04	; 4
    b31c:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b31e:	31 96       	adiw	r30, 0x01	; 1
    b320:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b322:	31 96       	adiw	r30, 0x01	; 1
    b324:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    b326:	32 96       	adiw	r30, 0x02	; 2
    b328:	a2 e0       	ldi	r26, 0x02	; 2
    b32a:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b32c:	76 96       	adiw	r30, 0x16	; 22
    b32e:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b330:	31 96       	adiw	r30, 0x01	; 1
    b332:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    b334:	d9 01       	movw	r26, r18
    b336:	a0 5c       	subi	r26, 0xC0	; 192
    b338:	be 4f       	sbci	r27, 0xFE	; 254
    b33a:	e8 e4       	ldi	r30, 0x48	; 72
    b33c:	f0 e1       	ldi	r31, 0x10	; 16
    b33e:	ed 93       	st	X+, r30
    b340:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    b342:	a1 e7       	ldi	r26, 0x71	; 113
    b344:	b7 e3       	ldi	r27, 0x37	; 55
    b346:	b1 83       	std	Z+1, r27	; 0x01
    b348:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b34a:	f9 01       	movw	r30, r18
    b34c:	e5 5e       	subi	r30, 0xE5	; 229
    b34e:	fe 4f       	sbci	r31, 0xFE	; 254
    b350:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    b352:	31 97       	sbiw	r30, 0x01	; 1
    b354:	92 ee       	ldi	r25, 0xE2	; 226
    b356:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b358:	31 97       	sbiw	r30, 0x01	; 1
    b35a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b35c:	34 97       	sbiw	r30, 0x04	; 4
    b35e:	71 83       	std	Z+1, r23	; 0x01
    b360:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b362:	32 96       	adiw	r30, 0x02	; 2
    b364:	51 83       	std	Z+1, r21	; 0x01
    b366:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b368:	20 e0       	ldi	r18, 0x00	; 0
    b36a:	0c 94 85 58 	jmp	0xb10a	; 0xb10a <init_enemy_shot>

0000b36e <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b36e:	95 e3       	ldi	r25, 0x35	; 53
    b370:	89 9f       	mul	r24, r25
    b372:	90 01       	movw	r18, r0
    b374:	11 24       	eor	r1, r1
    b376:	26 54       	subi	r18, 0x46	; 70
    b378:	32 4f       	sbci	r19, 0xF2	; 242
    b37a:	f9 01       	movw	r30, r18
    b37c:	e3 5e       	subi	r30, 0xE3	; 227
    b37e:	fe 4f       	sbci	r31, 0xFE	; 254
    b380:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b382:	31 97       	sbiw	r30, 0x01	; 1
    b384:	91 e0       	ldi	r25, 0x01	; 1
    b386:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b388:	33 96       	adiw	r30, 0x03	; 3
    b38a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b38c:	31 96       	adiw	r30, 0x01	; 1
    b38e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    b390:	31 96       	adiw	r30, 0x01	; 1
    b392:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    b394:	31 96       	adiw	r30, 0x01	; 1
    b396:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b398:	31 96       	adiw	r30, 0x01	; 1
    b39a:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    b39c:	32 96       	adiw	r30, 0x02	; 2
    b39e:	a4 e0       	ldi	r26, 0x04	; 4
    b3a0:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b3a2:	76 96       	adiw	r30, 0x16	; 22
    b3a4:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b3a6:	31 96       	adiw	r30, 0x01	; 1
    b3a8:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    b3aa:	d9 01       	movw	r26, r18
    b3ac:	a0 5c       	subi	r26, 0xC0	; 192
    b3ae:	be 4f       	sbci	r27, 0xFE	; 254
    b3b0:	e2 ee       	ldi	r30, 0xE2	; 226
    b3b2:	ff e0       	ldi	r31, 0x0F	; 15
    b3b4:	ed 93       	st	X+, r30
    b3b6:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    b3b8:	a3 e8       	ldi	r26, 0x83	; 131
    b3ba:	b7 e3       	ldi	r27, 0x37	; 55
    b3bc:	b1 83       	std	Z+1, r27	; 0x01
    b3be:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b3c0:	f9 01       	movw	r30, r18
    b3c2:	e5 5e       	subi	r30, 0xE5	; 229
    b3c4:	fe 4f       	sbci	r31, 0xFE	; 254
    b3c6:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    b3c8:	31 97       	sbiw	r30, 0x01	; 1
    b3ca:	9e e1       	ldi	r25, 0x1E	; 30
    b3cc:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b3ce:	31 97       	sbiw	r30, 0x01	; 1
    b3d0:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b3d2:	34 97       	sbiw	r30, 0x04	; 4
    b3d4:	71 83       	std	Z+1, r23	; 0x01
    b3d6:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b3d8:	32 96       	adiw	r30, 0x02	; 2
    b3da:	51 83       	std	Z+1, r21	; 0x01
    b3dc:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b3de:	20 e0       	ldi	r18, 0x00	; 0
    b3e0:	0c 94 85 58 	jmp	0xb10a	; 0xb10a <init_enemy_shot>

0000b3e4 <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b3e4:	95 e3       	ldi	r25, 0x35	; 53
    b3e6:	89 9f       	mul	r24, r25
    b3e8:	90 01       	movw	r18, r0
    b3ea:	11 24       	eor	r1, r1
    b3ec:	26 54       	subi	r18, 0x46	; 70
    b3ee:	32 4f       	sbci	r19, 0xF2	; 242
    b3f0:	f9 01       	movw	r30, r18
    b3f2:	e3 5e       	subi	r30, 0xE3	; 227
    b3f4:	fe 4f       	sbci	r31, 0xFE	; 254
    b3f6:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b3f8:	31 97       	sbiw	r30, 0x01	; 1
    b3fa:	91 e0       	ldi	r25, 0x01	; 1
    b3fc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b3fe:	33 96       	adiw	r30, 0x03	; 3
    b400:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b402:	31 96       	adiw	r30, 0x01	; 1
    b404:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    b406:	31 96       	adiw	r30, 0x01	; 1
    b408:	a5 e0       	ldi	r26, 0x05	; 5
    b40a:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b40c:	31 96       	adiw	r30, 0x01	; 1
    b40e:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b410:	31 96       	adiw	r30, 0x01	; 1
    b412:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    b414:	32 96       	adiw	r30, 0x02	; 2
    b416:	a4 e0       	ldi	r26, 0x04	; 4
    b418:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b41a:	76 96       	adiw	r30, 0x16	; 22
    b41c:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b41e:	31 96       	adiw	r30, 0x01	; 1
    b420:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    b422:	d9 01       	movw	r26, r18
    b424:	a0 5c       	subi	r26, 0xC0	; 192
    b426:	be 4f       	sbci	r27, 0xFE	; 254
    b428:	e6 e4       	ldi	r30, 0x46	; 70
    b42a:	f0 e1       	ldi	r31, 0x10	; 16
    b42c:	ed 93       	st	X+, r30
    b42e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    b430:	a7 e7       	ldi	r26, 0x77	; 119
    b432:	b7 e3       	ldi	r27, 0x37	; 55
    b434:	b1 83       	std	Z+1, r27	; 0x01
    b436:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b438:	f9 01       	movw	r30, r18
    b43a:	e5 5e       	subi	r30, 0xE5	; 229
    b43c:	fe 4f       	sbci	r31, 0xFE	; 254
    b43e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    b440:	31 97       	sbiw	r30, 0x01	; 1
    b442:	9a e0       	ldi	r25, 0x0A	; 10
    b444:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b446:	31 97       	sbiw	r30, 0x01	; 1
    b448:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b44a:	34 97       	sbiw	r30, 0x04	; 4
    b44c:	71 83       	std	Z+1, r23	; 0x01
    b44e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b450:	32 96       	adiw	r30, 0x02	; 2
    b452:	51 83       	std	Z+1, r21	; 0x01
    b454:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b456:	20 e0       	ldi	r18, 0x00	; 0
    b458:	0c 94 85 58 	jmp	0xb10a	; 0xb10a <init_enemy_shot>

0000b45c <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b45c:	95 e3       	ldi	r25, 0x35	; 53
    b45e:	89 9f       	mul	r24, r25
    b460:	90 01       	movw	r18, r0
    b462:	11 24       	eor	r1, r1
    b464:	26 54       	subi	r18, 0x46	; 70
    b466:	32 4f       	sbci	r19, 0xF2	; 242
    b468:	f9 01       	movw	r30, r18
    b46a:	e3 5e       	subi	r30, 0xE3	; 227
    b46c:	fe 4f       	sbci	r31, 0xFE	; 254
    b46e:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b470:	31 97       	sbiw	r30, 0x01	; 1
    b472:	91 e0       	ldi	r25, 0x01	; 1
    b474:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b476:	33 96       	adiw	r30, 0x03	; 3
    b478:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b47a:	31 96       	adiw	r30, 0x01	; 1
    b47c:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    b47e:	31 96       	adiw	r30, 0x01	; 1
    b480:	a8 e0       	ldi	r26, 0x08	; 8
    b482:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b484:	31 96       	adiw	r30, 0x01	; 1
    b486:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b488:	31 96       	adiw	r30, 0x01	; 1
    b48a:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    b48c:	32 96       	adiw	r30, 0x02	; 2
    b48e:	a4 e0       	ldi	r26, 0x04	; 4
    b490:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b492:	76 96       	adiw	r30, 0x16	; 22
    b494:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b496:	31 96       	adiw	r30, 0x01	; 1
    b498:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    b49a:	d9 01       	movw	r26, r18
    b49c:	a0 5c       	subi	r26, 0xC0	; 192
    b49e:	be 4f       	sbci	r27, 0xFE	; 254
    b4a0:	e6 e5       	ldi	r30, 0x56	; 86
    b4a2:	f0 e1       	ldi	r31, 0x10	; 16
    b4a4:	ed 93       	st	X+, r30
    b4a6:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    b4a8:	a0 e8       	ldi	r26, 0x80	; 128
    b4aa:	b7 e3       	ldi	r27, 0x37	; 55
    b4ac:	b1 83       	std	Z+1, r27	; 0x01
    b4ae:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b4b0:	f9 01       	movw	r30, r18
    b4b2:	e5 5e       	subi	r30, 0xE5	; 229
    b4b4:	fe 4f       	sbci	r31, 0xFE	; 254
    b4b6:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    b4b8:	31 97       	sbiw	r30, 0x01	; 1
    b4ba:	94 e1       	ldi	r25, 0x14	; 20
    b4bc:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    b4be:	31 97       	sbiw	r30, 0x01	; 1
    b4c0:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    b4c2:	34 97       	sbiw	r30, 0x04	; 4
    b4c4:	71 83       	std	Z+1, r23	; 0x01
    b4c6:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b4c8:	32 96       	adiw	r30, 0x02	; 2
    b4ca:	51 83       	std	Z+1, r21	; 0x01
    b4cc:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b4ce:	20 e0       	ldi	r18, 0x00	; 0
    b4d0:	0c 94 85 58 	jmp	0xb10a	; 0xb10a <init_enemy_shot>

0000b4d4 <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b4d4:	95 e3       	ldi	r25, 0x35	; 53
    b4d6:	89 9f       	mul	r24, r25
    b4d8:	90 01       	movw	r18, r0
    b4da:	11 24       	eor	r1, r1
    b4dc:	26 54       	subi	r18, 0x46	; 70
    b4de:	32 4f       	sbci	r19, 0xF2	; 242
    b4e0:	f9 01       	movw	r30, r18
    b4e2:	e3 5e       	subi	r30, 0xE3	; 227
    b4e4:	fe 4f       	sbci	r31, 0xFE	; 254
    b4e6:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b4e8:	31 97       	sbiw	r30, 0x01	; 1
    b4ea:	91 e0       	ldi	r25, 0x01	; 1
    b4ec:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b4ee:	32 96       	adiw	r30, 0x02	; 2
    b4f0:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b4f2:	31 96       	adiw	r30, 0x01	; 1
    b4f4:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b4f6:	31 96       	adiw	r30, 0x01	; 1
    b4f8:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    b4fa:	31 96       	adiw	r30, 0x01	; 1
    b4fc:	a6 e0       	ldi	r26, 0x06	; 6
    b4fe:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b500:	31 96       	adiw	r30, 0x01	; 1
    b502:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b504:	31 96       	adiw	r30, 0x01	; 1
    b506:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    b508:	32 96       	adiw	r30, 0x02	; 2
    b50a:	a8 e0       	ldi	r26, 0x08	; 8
    b50c:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b50e:	76 96       	adiw	r30, 0x16	; 22
    b510:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b512:	31 96       	adiw	r30, 0x01	; 1
    b514:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b516:	d9 01       	movw	r26, r18
    b518:	a0 5c       	subi	r26, 0xC0	; 192
    b51a:	be 4f       	sbci	r27, 0xFE	; 254
    b51c:	e4 e3       	ldi	r30, 0x34	; 52
    b51e:	f0 e1       	ldi	r31, 0x10	; 16
    b520:	ed 93       	st	X+, r30
    b522:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    b524:	ae e6       	ldi	r26, 0x6E	; 110
    b526:	b7 e3       	ldi	r27, 0x37	; 55
    b528:	b1 83       	std	Z+1, r27	; 0x01
    b52a:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b52c:	f9 01       	movw	r30, r18
    b52e:	e5 5e       	subi	r30, 0xE5	; 229
    b530:	fe 4f       	sbci	r31, 0xFE	; 254
    b532:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b534:	31 97       	sbiw	r30, 0x01	; 1
    b536:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b538:	31 97       	sbiw	r30, 0x01	; 1
    b53a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b53c:	34 97       	sbiw	r30, 0x04	; 4
    b53e:	71 83       	std	Z+1, r23	; 0x01
    b540:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b542:	32 96       	adiw	r30, 0x02	; 2
    b544:	51 83       	std	Z+1, r21	; 0x01
    b546:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    b548:	21 e0       	ldi	r18, 0x01	; 1
    b54a:	0c 94 85 58 	jmp	0xb10a	; 0xb10a <init_enemy_shot>

0000b54e <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    b54e:	cf 93       	push	r28
    b550:	df 93       	push	r29
    b552:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    b554:	95 e3       	ldi	r25, 0x35	; 53
    b556:	89 9f       	mul	r24, r25
    b558:	90 01       	movw	r18, r0
    b55a:	11 24       	eor	r1, r1
    b55c:	26 54       	subi	r18, 0x46	; 70
    b55e:	32 4f       	sbci	r19, 0xF2	; 242
    b560:	f9 01       	movw	r30, r18
    b562:	e3 5e       	subi	r30, 0xE3	; 227
    b564:	fe 4f       	sbci	r31, 0xFE	; 254
    b566:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b568:	31 97       	sbiw	r30, 0x01	; 1
    b56a:	91 e0       	ldi	r25, 0x01	; 1
    b56c:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b56e:	32 96       	adiw	r30, 0x02	; 2
    b570:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b572:	31 96       	adiw	r30, 0x01	; 1
    b574:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b576:	31 96       	adiw	r30, 0x01	; 1
    b578:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    b57a:	31 96       	adiw	r30, 0x01	; 1
    b57c:	47 e0       	ldi	r20, 0x07	; 7
    b57e:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    b580:	31 96       	adiw	r30, 0x01	; 1
    b582:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b584:	31 96       	adiw	r30, 0x01	; 1
    b586:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    b588:	32 96       	adiw	r30, 0x02	; 2
    b58a:	48 e0       	ldi	r20, 0x08	; 8
    b58c:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    b58e:	76 96       	adiw	r30, 0x16	; 22
    b590:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b592:	31 96       	adiw	r30, 0x01	; 1
    b594:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b596:	d9 01       	movw	r26, r18
    b598:	a0 5c       	subi	r26, 0xC0	; 192
    b59a:	be 4f       	sbci	r27, 0xFE	; 254
    b59c:	e4 e3       	ldi	r30, 0x34	; 52
    b59e:	f0 e1       	ldi	r31, 0x10	; 16
    b5a0:	ed 93       	st	X+, r30
    b5a2:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    b5a4:	4b e6       	ldi	r20, 0x6B	; 107
    b5a6:	57 e3       	ldi	r21, 0x37	; 55
    b5a8:	51 83       	std	Z+1, r21	; 0x01
    b5aa:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    b5ac:	f9 01       	movw	r30, r18
    b5ae:	e5 5e       	subi	r30, 0xE5	; 229
    b5b0:	fe 4f       	sbci	r31, 0xFE	; 254
    b5b2:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b5b4:	31 97       	sbiw	r30, 0x01	; 1
    b5b6:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b5b8:	31 97       	sbiw	r30, 0x01	; 1
    b5ba:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b5bc:	34 97       	sbiw	r30, 0x04	; 4
    b5be:	71 83       	std	Z+1, r23	; 0x01
    b5c0:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b5c2:	32 96       	adiw	r30, 0x02	; 2
    b5c4:	d1 83       	std	Z+1, r29	; 0x01
    b5c6:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    b5c8:	21 e0       	ldi	r18, 0x01	; 1
    b5ca:	ae 01       	movw	r20, r28
    b5cc:	0e 94 85 58 	call	0xb10a	; 0xb10a <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    b5d0:	be 01       	movw	r22, r28
    b5d2:	83 e0       	ldi	r24, 0x03	; 3
    b5d4:	76 95       	lsr	r23
    b5d6:	67 95       	ror	r22
    b5d8:	8a 95       	dec	r24
    b5da:	e1 f7       	brne	.-8      	; 0xb5d4 <init_enemy_boss_eye+0x86>
    b5dc:	90 91 d8 0d 	lds	r25, 0x0DD8
    b5e0:	40 e0       	ldi	r20, 0x00	; 0
    b5e2:	50 e0       	ldi	r21, 0x00	; 0
    b5e4:	80 e2       	ldi	r24, 0x20	; 32
    b5e6:	89 1b       	sub	r24, r25
}
    b5e8:	df 91       	pop	r29
    b5ea:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    b5ec:	0c 94 ab 41 	jmp	0x8356	; 0x8356 <SetTile>

0000b5f0 <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    b5f0:	40 e2       	ldi	r20, 0x20	; 32
    b5f2:	50 e0       	ldi	r21, 0x00	; 0
    b5f4:	68 ec       	ldi	r22, 0xC8	; 200
    b5f6:	77 e0       	ldi	r23, 0x07	; 7
    b5f8:	80 e0       	ldi	r24, 0x00	; 0
    b5fa:	0e 94 6a 5a 	call	0xb4d4	; 0xb4d4 <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    b5fe:	40 e3       	ldi	r20, 0x30	; 48
    b600:	50 e0       	ldi	r21, 0x00	; 0
    b602:	68 ec       	ldi	r22, 0xC8	; 200
    b604:	77 e0       	ldi	r23, 0x07	; 7
    b606:	81 e0       	ldi	r24, 0x01	; 1
    b608:	0e 94 6a 5a 	call	0xb4d4	; 0xb4d4 <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    b60c:	40 e9       	ldi	r20, 0x90	; 144
    b60e:	50 e0       	ldi	r21, 0x00	; 0
    b610:	68 ec       	ldi	r22, 0xC8	; 200
    b612:	77 e0       	ldi	r23, 0x07	; 7
    b614:	82 e0       	ldi	r24, 0x02	; 2
    b616:	0e 94 6a 5a 	call	0xb4d4	; 0xb4d4 <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    b61a:	40 ea       	ldi	r20, 0xA0	; 160
    b61c:	50 e0       	ldi	r21, 0x00	; 0
    b61e:	68 ec       	ldi	r22, 0xC8	; 200
    b620:	77 e0       	ldi	r23, 0x07	; 7
    b622:	83 e0       	ldi	r24, 0x03	; 3
    b624:	0e 94 6a 5a 	call	0xb4d4	; 0xb4d4 <init_enemy_boss_turret>
	game.active_enemies = 4;
    b628:	84 e0       	ldi	r24, 0x04	; 4
    b62a:	80 93 d5 0d 	sts	0x0DD5, r24
    b62e:	08 95       	ret

0000b630 <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    b630:	ef 92       	push	r14
    b632:	ff 92       	push	r15
    b634:	0f 93       	push	r16
    b636:	1f 93       	push	r17
    b638:	cf 93       	push	r28
    b63a:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    b63c:	0a eb       	ldi	r16, 0xBA	; 186
    b63e:	1d e0       	ldi	r17, 0x0D	; 13
    b640:	f8 01       	movw	r30, r16
    b642:	86 8d       	ldd	r24, Z+30	; 0x1e
    b644:	c0 e0       	ldi	r28, 0x00	; 0
    b646:	d1 e0       	ldi	r29, 0x01	; 1
    b648:	9e 01       	movw	r18, r28
    b64a:	28 1b       	sub	r18, r24
    b64c:	31 09       	sbc	r19, r1
    b64e:	83 e0       	ldi	r24, 0x03	; 3
    b650:	22 0f       	add	r18, r18
    b652:	33 1f       	adc	r19, r19
    b654:	8a 95       	dec	r24
    b656:	e1 f7       	brne	.-8      	; 0xb650 <init_enemy_boss_eyes+0x20>
    b658:	80 91 fd 0c 	lds	r24, 0x0CFD
    b65c:	65 e0       	ldi	r22, 0x05	; 5
    b65e:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    b662:	89 2f       	mov	r24, r25
    b664:	48 e5       	ldi	r20, 0x58	; 88
    b666:	50 e0       	ldi	r21, 0x00	; 0
    b668:	b9 01       	movw	r22, r18
    b66a:	0e 94 a7 5a 	call	0xb54e	; 0xb54e <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    b66e:	f8 01       	movw	r30, r16
    b670:	86 8d       	ldd	r24, Z+30	; 0x1e
    b672:	9e 01       	movw	r18, r28
    b674:	28 1b       	sub	r18, r24
    b676:	31 09       	sbc	r19, r1
    b678:	93 e0       	ldi	r25, 0x03	; 3
    b67a:	22 0f       	add	r18, r18
    b67c:	33 1f       	adc	r19, r19
    b67e:	9a 95       	dec	r25
    b680:	e1 f7       	brne	.-8      	; 0xb67a <init_enemy_boss_eyes+0x4a>
    b682:	80 91 fd 0c 	lds	r24, 0x0CFD
    b686:	90 e0       	ldi	r25, 0x00	; 0
    b688:	01 96       	adiw	r24, 0x01	; 1
    b68a:	45 e0       	ldi	r20, 0x05	; 5
    b68c:	e4 2e       	mov	r14, r20
    b68e:	f1 2c       	mov	r15, r1
    b690:	b7 01       	movw	r22, r14
    b692:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    b696:	40 e6       	ldi	r20, 0x60	; 96
    b698:	50 e0       	ldi	r21, 0x00	; 0
    b69a:	b9 01       	movw	r22, r18
    b69c:	0e 94 a7 5a 	call	0xb54e	; 0xb54e <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    b6a0:	f8 01       	movw	r30, r16
    b6a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    b6a4:	c8 1b       	sub	r28, r24
    b6a6:	d1 09       	sbc	r29, r1
    b6a8:	53 e0       	ldi	r21, 0x03	; 3
    b6aa:	cc 0f       	add	r28, r28
    b6ac:	dd 1f       	adc	r29, r29
    b6ae:	5a 95       	dec	r21
    b6b0:	e1 f7       	brne	.-8      	; 0xb6aa <init_enemy_boss_eyes+0x7a>
    b6b2:	80 91 fd 0c 	lds	r24, 0x0CFD
    b6b6:	90 e0       	ldi	r25, 0x00	; 0
    b6b8:	02 96       	adiw	r24, 0x02	; 2
    b6ba:	b7 01       	movw	r22, r14
    b6bc:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    b6c0:	48 e6       	ldi	r20, 0x68	; 104
    b6c2:	50 e0       	ldi	r21, 0x00	; 0
    b6c4:	be 01       	movw	r22, r28
    b6c6:	0e 94 a7 5a 	call	0xb54e	; 0xb54e <init_enemy_boss_eye>
	game.active_enemies = 3;
    b6ca:	83 e0       	ldi	r24, 0x03	; 3
    b6cc:	f8 01       	movw	r30, r16
    b6ce:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    b6d0:	80 91 fd 0c 	lds	r24, 0x0CFD
    b6d4:	8d 5f       	subi	r24, 0xFD	; 253
    b6d6:	80 93 fd 0c 	sts	0x0CFD, r24
}
    b6da:	df 91       	pop	r29
    b6dc:	cf 91       	pop	r28
    b6de:	1f 91       	pop	r17
    b6e0:	0f 91       	pop	r16
    b6e2:	ff 90       	pop	r15
    b6e4:	ef 90       	pop	r14
    b6e6:	08 95       	ret

0000b6e8 <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b6e8:	a8 2f       	mov	r26, r24
    b6ea:	b0 e0       	ldi	r27, 0x00	; 0
    b6ec:	25 e3       	ldi	r18, 0x35	; 53
    b6ee:	82 9f       	mul	r24, r18
    b6f0:	c0 01       	movw	r24, r0
    b6f2:	11 24       	eor	r1, r1
    b6f4:	86 54       	subi	r24, 0x46	; 70
    b6f6:	92 4f       	sbci	r25, 0xF2	; 242
    b6f8:	fc 01       	movw	r30, r24
    b6fa:	e4 5e       	subi	r30, 0xE4	; 228
    b6fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b6fe:	21 e0       	ldi	r18, 0x01	; 1
    b700:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    b702:	33 96       	adiw	r30, 0x03	; 3
    b704:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    b706:	31 96       	adiw	r30, 0x01	; 1
    b708:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    b70a:	31 96       	adiw	r30, 0x01	; 1
    b70c:	32 e0       	ldi	r19, 0x02	; 2
    b70e:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    b710:	31 96       	adiw	r30, 0x01	; 1
    b712:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b714:	31 96       	adiw	r30, 0x01	; 1
    b716:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    b718:	78 96       	adiw	r30, 0x18	; 24
    b71a:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    b71c:	31 96       	adiw	r30, 0x01	; 1
    b71e:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    b720:	34 96       	adiw	r30, 0x04	; 4
    b722:	88 e5       	ldi	r24, 0x58	; 88
    b724:	90 e1       	ldi	r25, 0x10	; 16
    b726:	91 83       	std	Z+1, r25	; 0x01
    b728:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b72a:	80 91 cf 0d 	lds	r24, 0x0DCF
    b72e:	84 30       	cpi	r24, 0x04	; 4
    b730:	79 f0       	breq	.+30     	; 0xb750 <init_enemy_level_hazard+0x68>
    b732:	38 f4       	brcc	.+14     	; 0xb742 <init_enemy_level_hazard+0x5a>
    b734:	88 23       	and	r24, r24
    b736:	91 f0       	breq	.+36     	; 0xb75c <init_enemy_level_hazard+0x74>
    b738:	82 30       	cpi	r24, 0x02	; 2
    b73a:	81 f4       	brne	.+32     	; 0xb75c <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b73c:	82 e6       	ldi	r24, 0x62	; 98
    b73e:	97 e3       	ldi	r25, 0x37	; 55
    b740:	0f c0       	rjmp	.+30     	; 0xb760 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b742:	86 30       	cpi	r24, 0x06	; 6
    b744:	41 f0       	breq	.+16     	; 0xb756 <init_enemy_level_hazard+0x6e>
    b746:	88 30       	cpi	r24, 0x08	; 8
    b748:	49 f4       	brne	.+18     	; 0xb75c <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b74a:	89 e5       	ldi	r24, 0x59	; 89
    b74c:	97 e3       	ldi	r25, 0x37	; 55
    b74e:	08 c0       	rjmp	.+16     	; 0xb760 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b750:	8f e5       	ldi	r24, 0x5F	; 95
    b752:	97 e3       	ldi	r25, 0x37	; 55
    b754:	05 c0       	rjmp	.+10     	; 0xb760 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b756:	8c e5       	ldi	r24, 0x5C	; 92
    b758:	97 e3       	ldi	r25, 0x37	; 55
    b75a:	02 c0       	rjmp	.+4      	; 0xb760 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b75c:	85 e6       	ldi	r24, 0x65	; 101
    b75e:	97 e3       	ldi	r25, 0x37	; 55
    b760:	90 93 59 10 	sts	0x1059, r25
    b764:	80 93 58 10 	sts	0x1058, r24
	}
	game.enemies[i].shared.gravity = 0;
    b768:	25 e3       	ldi	r18, 0x35	; 53
    b76a:	2a 9f       	mul	r18, r26
    b76c:	c0 01       	movw	r24, r0
    b76e:	2b 9f       	mul	r18, r27
    b770:	90 0d       	add	r25, r0
    b772:	11 24       	eor	r1, r1
    b774:	86 54       	subi	r24, 0x46	; 70
    b776:	92 4f       	sbci	r25, 0xF2	; 242
    b778:	fc 01       	movw	r30, r24
    b77a:	e5 5e       	subi	r30, 0xE5	; 229
    b77c:	fe 4f       	sbci	r31, 0xFE	; 254
    b77e:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b780:	32 97       	sbiw	r30, 0x02	; 2
    b782:	2e e1       	ldi	r18, 0x1E	; 30
    b784:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b786:	31 96       	adiw	r30, 0x01	; 1
    b788:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b78a:	35 97       	sbiw	r30, 0x05	; 5
    b78c:	71 83       	std	Z+1, r23	; 0x01
    b78e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b790:	32 96       	adiw	r30, 0x02	; 2
    b792:	51 83       	std	Z+1, r21	; 0x01
    b794:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b796:	3d 96       	adiw	r30, 0x0d	; 13
    b798:	83 e0       	ldi	r24, 0x03	; 3
    b79a:	56 95       	lsr	r21
    b79c:	47 95       	ror	r20
    b79e:	8a 95       	dec	r24
    b7a0:	e1 f7       	brne	.-8      	; 0xb79a <init_enemy_level_hazard+0xb2>
    b7a2:	40 83       	st	Z, r20
    b7a4:	08 95       	ret

0000b7a6 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b7a6:	cf 93       	push	r28
    b7a8:	df 93       	push	r29
    b7aa:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b7ac:	bc 01       	movw	r22, r24
    b7ae:	88 81       	ld	r24, Y
    b7b0:	99 81       	ldd	r25, Y+1	; 0x01
    b7b2:	0e 94 66 43 	call	0x86cc	; 0x86cc <EepromReadBlock>
	if (status == 0x03)
    b7b6:	83 30       	cpi	r24, 0x03	; 3
    b7b8:	29 f4       	brne	.+10     	; 0xb7c4 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b7ba:	ce 01       	movw	r24, r28
	}
}
    b7bc:	df 91       	pop	r29
    b7be:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b7c0:	0c 94 1c 43 	jmp	0x8638	; 0x8638 <EepromWriteBlock>
	}
}
    b7c4:	df 91       	pop	r29
    b7c6:	cf 91       	pop	r28
    b7c8:	08 95       	ret

0000b7ca <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b7ca:	1f 93       	push	r17
    b7cc:	cf 93       	push	r28
    b7ce:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b7d0:	d0 e0       	ldi	r29, 0x00	; 0
    b7d2:	10 e2       	ldi	r17, 0x20	; 32
    b7d4:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b7d6:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b7d8:	c1 17       	cp	r28, r17
    b7da:	41 f0       	breq	.+16     	; 0xb7ec <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b7dc:	40 e0       	ldi	r20, 0x00	; 0
    b7de:	50 e0       	ldi	r21, 0x00	; 0
    b7e0:	6c 2f       	mov	r22, r28
    b7e2:	8d 2f       	mov	r24, r29
    b7e4:	0e 94 ab 41 	call	0x8356	; 0x8356 <SetTile>
    b7e8:	cf 5f       	subi	r28, 0xFF	; 255
    b7ea:	f6 cf       	rjmp	.-20     	; 0xb7d8 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b7ec:	df 5f       	subi	r29, 0xFF	; 255
    b7ee:	dc 31       	cpi	r29, 0x1C	; 28
    b7f0:	91 f7       	brne	.-28     	; 0xb7d6 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b7f2:	df 91       	pop	r29
    b7f4:	cf 91       	pop	r28
    b7f6:	1f 91       	pop	r17
    b7f8:	08 95       	ret

0000b7fa <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b7fa:	dc 01       	movw	r26, r24
    b7fc:	e6 2f       	mov	r30, r22
    b7fe:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b800:	25 e0       	ldi	r18, 0x05	; 5
    b802:	62 2f       	mov	r22, r18
    b804:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    b808:	58 2f       	mov	r21, r24
    b80a:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b80c:	40 91 d0 0d 	lds	r20, 0x0DD0
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b810:	8e 2f       	mov	r24, r30
    b812:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b816:	e8 2f       	mov	r30, r24
    b818:	f0 e0       	ldi	r31, 0x00	; 0
    b81a:	54 9f       	mul	r21, r20
    b81c:	e0 0d       	add	r30, r0
    b81e:	f1 1d       	adc	r31, r1
    b820:	11 24       	eor	r1, r1
    b822:	32 96       	adiw	r30, 0x02	; 2
    b824:	ea 0f       	add	r30, r26
    b826:	fb 1f       	adc	r31, r27
    b828:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b82a:	e9 2f       	mov	r30, r25
    b82c:	f0 e0       	ldi	r31, 0x00	; 0
    b82e:	95 e0       	ldi	r25, 0x05	; 5
    b830:	39 9f       	mul	r19, r25
    b832:	e0 0d       	add	r30, r0
    b834:	f1 1d       	adc	r31, r1
    b836:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b838:	99 e1       	ldi	r25, 0x19	; 25
    b83a:	89 9f       	mul	r24, r25
    b83c:	e0 0d       	add	r30, r0
    b83e:	f1 1d       	adc	r31, r1
    b840:	11 24       	eor	r1, r1
    b842:	ef 55       	subi	r30, 0x5F	; 95
    b844:	fe 49       	sbci	r31, 0x9E	; 158
    b846:	84 91       	lpm	r24, Z
}
    b848:	08 95       	ret

0000b84a <render_camera_view>:

void render_camera_view()
{
    b84a:	7f 92       	push	r7
    b84c:	8f 92       	push	r8
    b84e:	9f 92       	push	r9
    b850:	af 92       	push	r10
    b852:	bf 92       	push	r11
    b854:	cf 92       	push	r12
    b856:	df 92       	push	r13
    b858:	ef 92       	push	r14
    b85a:	ff 92       	push	r15
    b85c:	0f 93       	push	r16
    b85e:	1f 93       	push	r17
    b860:	cf 93       	push	r28
    b862:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b864:	c0 91 ba 0d 	lds	r28, 0x0DBA
    b868:	d0 91 bb 0d 	lds	r29, 0x0DBB
    b86c:	83 e0       	ldi	r24, 0x03	; 3
    b86e:	d6 95       	lsr	r29
    b870:	c7 95       	ror	r28
    b872:	8a 95       	dec	r24
    b874:	e1 f7       	brne	.-8      	; 0xb86e <render_camera_view+0x24>
    b876:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b878:	00 91 c2 0d 	lds	r16, 0x0DC2
    b87c:	06 95       	lsr	r16
    b87e:	06 95       	lsr	r16
    b880:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b882:	dd 27       	eor	r29, r29
    b884:	7e 01       	movw	r14, r28
    b886:	4c e1       	ldi	r20, 0x1C	; 28
    b888:	e4 0e       	add	r14, r20
    b88a:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b88c:	10 e0       	ldi	r17, 0x00	; 0
    b88e:	68 01       	movw	r12, r16
    b890:	89 e1       	ldi	r24, 0x19	; 25
    b892:	c8 0e       	add	r12, r24
    b894:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b896:	9e e1       	ldi	r25, 0x1E	; 30
    b898:	a9 2e       	mov	r10, r25
    b89a:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b89c:	ec 16       	cp	r14, r28
    b89e:	fd 06       	cpc	r15, r29
    b8a0:	70 f1       	brcs	.+92     	; 0xb8fe <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b8a2:	48 01       	movw	r8, r16
    b8a4:	c8 14       	cp	r12, r8
    b8a6:	d9 04       	cpc	r13, r9
    b8a8:	40 f1       	brcs	.+80     	; 0xb8fa <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b8aa:	48 2d       	mov	r20, r8
    b8ac:	6c 2f       	mov	r22, r28
    b8ae:	80 91 d8 0f 	lds	r24, 0x0FD8
    b8b2:	90 91 d9 0f 	lds	r25, 0x0FD9
    b8b6:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b8ba:	28 2f       	mov	r18, r24
    b8bc:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b8be:	80 91 b3 0c 	lds	r24, 0x0CB3
    b8c2:	86 95       	lsr	r24
    b8c4:	86 95       	lsr	r24
    b8c6:	86 95       	lsr	r24
    b8c8:	90 e0       	ldi	r25, 0x00	; 0
    b8ca:	80 1b       	sub	r24, r16
    b8cc:	91 0b       	sbc	r25, r17
    b8ce:	88 0d       	add	r24, r8
    b8d0:	99 1d       	adc	r25, r9
    b8d2:	b5 01       	movw	r22, r10
    b8d4:	0e 94 48 75 	call	0xea90	; 0xea90 <__udivmodhi4>
    b8d8:	90 91 b2 0c 	lds	r25, 0x0CB2
    b8dc:	96 95       	lsr	r25
    b8de:	96 95       	lsr	r25
    b8e0:	96 95       	lsr	r25
    b8e2:	97 19       	sub	r25, r7
    b8e4:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b8e6:	a9 01       	movw	r20, r18
    b8e8:	68 2f       	mov	r22, r24
    b8ea:	89 2f       	mov	r24, r25
    b8ec:	8f 71       	andi	r24, 0x1F	; 31
    b8ee:	0e 94 ab 41 	call	0x8356	; 0x8356 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b8f2:	8f ef       	ldi	r24, 0xFF	; 255
    b8f4:	88 1a       	sub	r8, r24
    b8f6:	98 0a       	sbc	r9, r24
    b8f8:	d5 cf       	rjmp	.-86     	; 0xb8a4 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b8fa:	21 96       	adiw	r28, 0x01	; 1
    b8fc:	cf cf       	rjmp	.-98     	; 0xb89c <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b8fe:	df 91       	pop	r29
    b900:	cf 91       	pop	r28
    b902:	1f 91       	pop	r17
    b904:	0f 91       	pop	r16
    b906:	ff 90       	pop	r15
    b908:	ef 90       	pop	r14
    b90a:	df 90       	pop	r13
    b90c:	cf 90       	pop	r12
    b90e:	bf 90       	pop	r11
    b910:	af 90       	pop	r10
    b912:	9f 90       	pop	r9
    b914:	8f 90       	pop	r8
    b916:	7f 90       	pop	r7
    b918:	08 95       	ret

0000b91a <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b91a:	28 2f       	mov	r18, r24
    b91c:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b91e:	80 91 cf 0d 	lds	r24, 0x0DCF
    b922:	81 11       	cpse	r24, r1
    b924:	04 c0       	rjmp	.+8      	; 0xb92e <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b926:	bf 01       	movw	r22, r30
    b928:	82 2f       	mov	r24, r18
    b92a:	0c 94 3c 59 	jmp	0xb278	; 0xb278 <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b92e:	82 30       	cpi	r24, 0x02	; 2
    b930:	21 f4       	brne	.+8      	; 0xb93a <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b932:	bf 01       	movw	r22, r30
    b934:	82 2f       	mov	r24, r18
    b936:	0c 94 fa 58 	jmp	0xb1f4	; 0xb1f4 <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b93a:	84 30       	cpi	r24, 0x04	; 4
    b93c:	31 f4       	brne	.+12     	; 0xb94a <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b93e:	48 52       	subi	r20, 0x28	; 40
    b940:	51 09       	sbc	r21, r1
    b942:	bf 01       	movw	r22, r30
    b944:	82 2f       	mov	r24, r18
    b946:	0c 94 79 59 	jmp	0xb2f2	; 0xb2f2 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b94a:	80 91 d4 0d 	lds	r24, 0x0DD4
    b94e:	63 e0       	ldi	r22, 0x03	; 3
    b950:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    b954:	99 23       	and	r25, r25
    b956:	39 f3       	breq	.-50     	; 0xb926 <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b958:	91 30       	cpi	r25, 0x01	; 1
    b95a:	89 f7       	brne	.-30     	; 0xb93e <init_level_enemy+0x24>
    b95c:	ea cf       	rjmp	.-44     	; 0xb932 <init_level_enemy+0x18>

0000b95e <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b95e:	28 2f       	mov	r18, r24
    b960:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b962:	80 91 cf 0d 	lds	r24, 0x0DCF
    b966:	81 30       	cpi	r24, 0x01	; 1
    b968:	21 f4       	brne	.+8      	; 0xb972 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b96a:	bf 01       	movw	r22, r30
    b96c:	82 2f       	mov	r24, r18
    b96e:	0c 94 b7 59 	jmp	0xb36e	; 0xb36e <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b972:	83 30       	cpi	r24, 0x03	; 3
    b974:	21 f4       	brne	.+8      	; 0xb97e <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b976:	bf 01       	movw	r22, r30
    b978:	82 2f       	mov	r24, r18
    b97a:	0c 94 f2 59 	jmp	0xb3e4	; 0xb3e4 <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    b97e:	85 30       	cpi	r24, 0x05	; 5
    b980:	21 f4       	brne	.+8      	; 0xb98a <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    b982:	bf 01       	movw	r22, r30
    b984:	82 2f       	mov	r24, r18
    b986:	0c 94 2e 5a 	jmp	0xb45c	; 0xb45c <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    b98a:	80 91 d4 0d 	lds	r24, 0x0DD4
    b98e:	63 e0       	ldi	r22, 0x03	; 3
    b990:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    b994:	99 23       	and	r25, r25
    b996:	49 f3       	breq	.-46     	; 0xb96a <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b998:	91 30       	cpi	r25, 0x01	; 1
    b99a:	99 f7       	brne	.-26     	; 0xb982 <init_space_enemy+0x24>
    b99c:	ec cf       	rjmp	.-40     	; 0xb976 <init_space_enemy+0x18>

0000b99e <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b99e:	0f 93       	push	r16
    b9a0:	1f 93       	push	r17
    b9a2:	cf 93       	push	r28
    b9a4:	df 93       	push	r29
    b9a6:	00 d0       	rcall	.+0      	; 0xb9a8 <spawn_enemy+0xa>
    b9a8:	00 d0       	rcall	.+0      	; 0xb9aa <spawn_enemy+0xc>
    b9aa:	cd b7       	in	r28, 0x3d	; 61
    b9ac:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b9ae:	20 91 ba 0d 	lds	r18, 0x0DBA
    b9b2:	30 91 bb 0d 	lds	r19, 0x0DBB
    b9b6:	28 3c       	cpi	r18, 0xC8	; 200
    b9b8:	35 40       	sbci	r19, 0x05	; 5
    b9ba:	98 f5       	brcc	.+102    	; 0xba22 <spawn_enemy+0x84>
    b9bc:	2a eb       	ldi	r18, 0xBA	; 186
    b9be:	3d e0       	ldi	r19, 0x0D	; 13
    b9c0:	10 e0       	ldi	r17, 0x00	; 0
    b9c2:	f9 01       	movw	r30, r18
    b9c4:	e4 5e       	subi	r30, 0xE4	; 228
    b9c6:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b9c8:	50 81       	ld	r21, Z
    b9ca:	51 11       	cpse	r21, r1
    b9cc:	25 c0       	rjmp	.+74     	; 0xba18 <spawn_enemy+0x7a>
    b9ce:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b9d0:	50 81       	ld	r21, Z
    b9d2:	51 11       	cpse	r21, r1
    b9d4:	21 c0       	rjmp	.+66     	; 0xba18 <spawn_enemy+0x7a>
    b9d6:	04 2f       	mov	r16, r20
    b9d8:	ab 01       	movw	r20, r22
    b9da:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b9dc:	4b 83       	std	Y+3, r20	; 0x03
    b9de:	5c 83       	std	Y+4, r21	; 0x04
    b9e0:	89 83       	std	Y+1, r24	; 0x01
    b9e2:	7a 83       	std	Y+2, r23	; 0x02
    b9e4:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    b9e8:	4b 81       	ldd	r20, Y+3	; 0x03
    b9ea:	5c 81       	ldd	r21, Y+4	; 0x04
    b9ec:	69 81       	ldd	r22, Y+1	; 0x01
    b9ee:	7a 81       	ldd	r23, Y+2	; 0x02
    b9f0:	88 23       	and	r24, r24
    b9f2:	21 f0       	breq	.+8      	; 0xb9fc <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b9f4:	81 2f       	mov	r24, r17
    b9f6:	0e 94 af 5c 	call	0xb95e	; 0xb95e <init_space_enemy>
    b9fa:	08 c0       	rjmp	.+16     	; 0xba0c <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b9fc:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b9fe:	01 11       	cpse	r16, r1
    ba00:	03 c0       	rjmp	.+6      	; 0xba08 <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    ba02:	0e 94 8d 5c 	call	0xb91a	; 0xb91a <init_level_enemy>
    ba06:	02 c0       	rjmp	.+4      	; 0xba0c <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    ba08:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <init_enemy_level_hazard>
						}
						game.active_enemies++;
    ba0c:	80 91 d5 0d 	lds	r24, 0x0DD5
    ba10:	8f 5f       	subi	r24, 0xFF	; 255
    ba12:	80 93 d5 0d 	sts	0x0DD5, r24
    ba16:	05 c0       	rjmp	.+10     	; 0xba22 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    ba18:	1f 5f       	subi	r17, 0xFF	; 255
    ba1a:	2b 5c       	subi	r18, 0xCB	; 203
    ba1c:	3f 4f       	sbci	r19, 0xFF	; 255
    ba1e:	15 30       	cpi	r17, 0x05	; 5
    ba20:	81 f6       	brne	.-96     	; 0xb9c2 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    ba22:	0f 90       	pop	r0
    ba24:	0f 90       	pop	r0
    ba26:	0f 90       	pop	r0
    ba28:	0f 90       	pop	r0
    ba2a:	df 91       	pop	r29
    ba2c:	cf 91       	pop	r28
    ba2e:	1f 91       	pop	r17
    ba30:	0f 91       	pop	r16
    ba32:	08 95       	ret

0000ba34 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    ba34:	9f ef       	ldi	r25, 0xFF	; 255
    ba36:	98 0f       	add	r25, r24
    ba38:	9e 30       	cpi	r25, 0x0E	; 14
    ba3a:	28 f0       	brcs	.+10     	; 0xba46 <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    ba3c:	8f 50       	subi	r24, 0x0F	; 15
    ba3e:	8c 30       	cpi	r24, 0x0C	; 12
    ba40:	20 f0       	brcs	.+8      	; 0xba4a <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    ba42:	80 e0       	ldi	r24, 0x00	; 0
    ba44:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    ba46:	81 e0       	ldi	r24, 0x01	; 1
    ba48:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    ba4a:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    ba4c:	08 95       	ret

0000ba4e <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    ba4e:	af 92       	push	r10
    ba50:	bf 92       	push	r11
    ba52:	cf 92       	push	r12
    ba54:	df 92       	push	r13
    ba56:	ef 92       	push	r14
    ba58:	ff 92       	push	r15
    ba5a:	0f 93       	push	r16
    ba5c:	1f 93       	push	r17
    ba5e:	cf 93       	push	r28
    ba60:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    ba62:	66 e1       	ldi	r22, 0x16	; 22
    ba64:	82 e0       	ldi	r24, 0x02	; 2
    ba66:	0e 94 4e 52 	call	0xa49c	; 0xa49c <LBRandom>
    ba6a:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    ba6c:	80 91 cb 0d 	lds	r24, 0x0DCB
    ba70:	8f 5f       	subi	r24, 0xFF	; 255
    ba72:	80 93 cb 0d 	sts	0x0DCB, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    ba76:	20 91 d6 0d 	lds	r18, 0x0DD6
    ba7a:	62 2f       	mov	r22, r18
    ba7c:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    ba80:	89 2f       	mov	r24, r25
    ba82:	90 e0       	ldi	r25, 0x00	; 0
    ba84:	30 e0       	ldi	r19, 0x00	; 0
    ba86:	21 50       	subi	r18, 0x01	; 1
    ba88:	31 09       	sbc	r19, r1
    ba8a:	82 17       	cp	r24, r18
    ba8c:	93 07       	cpc	r25, r19
    ba8e:	31 f4       	brne	.+12     	; 0xba9c <append_tile_column+0x4e>
    ba90:	bb 24       	eor	r11, r11
    ba92:	b3 94       	inc	r11
    ba94:	80 91 d5 0d 	lds	r24, 0x0DD5
    ba98:	85 30       	cpi	r24, 0x05	; 5
    ba9a:	08 f0       	brcs	.+2      	; 0xba9e <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    ba9c:	b1 2c       	mov	r11, r1
    ba9e:	00 e0       	ldi	r16, 0x00	; 0
    baa0:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    baa2:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    baa4:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    baa6:	2e e1       	ldi	r18, 0x1E	; 30
    baa8:	c2 2e       	mov	r12, r18
    baaa:	d1 2c       	mov	r13, r1
    baac:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    baae:	40 91 c2 0d 	lds	r20, 0x0DC2
    bab2:	46 95       	lsr	r20
    bab4:	46 95       	lsr	r20
    bab6:	46 95       	lsr	r20
    bab8:	40 0f       	add	r20, r16
    baba:	60 91 c3 0d 	lds	r22, 0x0DC3
    babe:	80 91 d8 0f 	lds	r24, 0x0FD8
    bac2:	90 91 d9 0f 	lds	r25, 0x0FD9
    bac6:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    baca:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    bacc:	28 2f       	mov	r18, r24
    bace:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    bad0:	80 91 b3 0c 	lds	r24, 0x0CB3
    bad4:	86 95       	lsr	r24
    bad6:	86 95       	lsr	r24
    bad8:	86 95       	lsr	r24
    bada:	a8 01       	movw	r20, r16
    badc:	48 0f       	add	r20, r24
    bade:	51 1d       	adc	r21, r1
    bae0:	ca 01       	movw	r24, r20
    bae2:	b6 01       	movw	r22, r12
    bae4:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    bae8:	a9 01       	movw	r20, r18
    baea:	68 2f       	mov	r22, r24
    baec:	80 91 c7 0d 	lds	r24, 0x0DC7
    baf0:	0e 94 ab 41 	call	0x8356	; 0x8356 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    baf4:	bb 20       	and	r11, r11
    baf6:	81 f0       	breq	.+32     	; 0xbb18 <append_tile_column+0xca>
    baf8:	01 15       	cp	r16, r1
    bafa:	11 05       	cpc	r17, r1
    bafc:	69 f0       	breq	.+26     	; 0xbb18 <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    bafe:	81 ef       	ldi	r24, 0xF1	; 241
    bb00:	8e 0d       	add	r24, r14
    bb02:	85 30       	cpi	r24, 0x05	; 5
    bb04:	30 f0       	brcs	.+12     	; 0xbb12 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    bb06:	8f ef       	ldi	r24, 0xFF	; 255
    bb08:	8e 0d       	add	r24, r14
    bb0a:	8e 30       	cpi	r24, 0x0E	; 14
    bb0c:	08 f4       	brcc	.+2      	; 0xbb10 <append_tile_column+0xc2>
    bb0e:	60 c0       	rjmp	.+192    	; 0xbbd0 <append_tile_column+0x182>
    bb10:	03 c0       	rjmp	.+6      	; 0xbb18 <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    bb12:	c1 11       	cpse	r28, r1
    bb14:	f8 cf       	rjmp	.-16     	; 0xbb06 <append_tile_column+0xb8>
    bb16:	c0 2f       	mov	r28, r16
    bb18:	0f 5f       	subi	r16, 0xFF	; 255
    bb1a:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    bb1c:	09 31       	cpi	r16, 0x19	; 25
    bb1e:	11 05       	cpc	r17, r1
    bb20:	29 f6       	brne	.-118    	; 0xbaac <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    bb22:	bb 20       	and	r11, r11
    bb24:	51 f0       	breq	.+20     	; 0xbb3a <append_tile_column+0xec>
    bb26:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    bb2a:	88 23       	and	r24, r24
    bb2c:	31 f0       	breq	.+12     	; 0xbb3a <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    bb2e:	ff 0c       	add	r15, r15
    bb30:	ff 0c       	add	r15, r15
    bb32:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    bb34:	6f 2d       	mov	r22, r15
    bb36:	70 e0       	ldi	r23, 0x00	; 0
    bb38:	32 c0       	rjmp	.+100    	; 0xbb9e <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    bb3a:	cc 23       	and	r28, r28
    bb3c:	f1 f0       	breq	.+60     	; 0xbb7a <append_tile_column+0x12c>
    bb3e:	80 91 cf 0d 	lds	r24, 0x0DCF
    bb42:	90 91 c2 0d 	lds	r25, 0x0DC2
    bb46:	20 91 ba 0d 	lds	r18, 0x0DBA
    bb4a:	30 91 bb 0d 	lds	r19, 0x0DBB
    bb4e:	6c 2f       	mov	r22, r28
    bb50:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    bb52:	96 95       	lsr	r25
    bb54:	96 95       	lsr	r25
    bb56:	96 95       	lsr	r25
    bb58:	69 0f       	add	r22, r25
    bb5a:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    bb5c:	82 30       	cpi	r24, 0x02	; 2
    bb5e:	19 f4       	brne	.+6      	; 0xbb66 <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    bb60:	61 50       	subi	r22, 0x01	; 1
    bb62:	71 09       	sbc	r23, r1
    bb64:	02 c0       	rjmp	.+4      	; 0xbb6a <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    bb66:	6f 5f       	subi	r22, 0xFF	; 255
    bb68:	7f 4f       	sbci	r23, 0xFF	; 255
    bb6a:	93 e0       	ldi	r25, 0x03	; 3
    bb6c:	66 0f       	add	r22, r22
    bb6e:	77 1f       	adc	r23, r23
    bb70:	9a 95       	dec	r25
    bb72:	e1 f7       	brne	.-8      	; 0xbb6c <append_tile_column+0x11e>
    bb74:	41 e0       	ldi	r20, 0x01	; 1
    bb76:	c9 01       	movw	r24, r18
    bb78:	17 c0       	rjmp	.+46     	; 0xbba8 <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    bb7a:	dd 23       	and	r29, r29
    bb7c:	c9 f0       	breq	.+50     	; 0xbbb0 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    bb7e:	80 91 c2 0d 	lds	r24, 0x0DC2
    bb82:	86 95       	lsr	r24
    bb84:	86 95       	lsr	r24
    bb86:	86 95       	lsr	r24
    bb88:	6d 2f       	mov	r22, r29
    bb8a:	70 e0       	ldi	r23, 0x00	; 0
    bb8c:	68 0f       	add	r22, r24
    bb8e:	71 1d       	adc	r23, r1
    bb90:	61 50       	subi	r22, 0x01	; 1
    bb92:	71 09       	sbc	r23, r1
    bb94:	83 e0       	ldi	r24, 0x03	; 3
    bb96:	66 0f       	add	r22, r22
    bb98:	77 1f       	adc	r23, r23
    bb9a:	8a 95       	dec	r24
    bb9c:	e1 f7       	brne	.-8      	; 0xbb96 <append_tile_column+0x148>
    bb9e:	80 91 ba 0d 	lds	r24, 0x0DBA
    bba2:	90 91 bb 0d 	lds	r25, 0x0DBB
    bba6:	40 e0       	ldi	r20, 0x00	; 0
    bba8:	80 52       	subi	r24, 0x20	; 32
    bbaa:	9f 4f       	sbci	r25, 0xFF	; 255
    bbac:	0e 94 cf 5c 	call	0xb99e	; 0xb99e <spawn_enemy>
	}
	
    game.scroll_src_x++;
    bbb0:	80 91 c3 0d 	lds	r24, 0x0DC3
    bbb4:	8f 5f       	subi	r24, 0xFF	; 255
    bbb6:	80 93 c3 0d 	sts	0x0DC3, r24
	game.scroll_dest_x++;
    bbba:	80 91 c7 0d 	lds	r24, 0x0DC7
    bbbe:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    bbc0:	80 32       	cpi	r24, 0x20	; 32
    bbc2:	18 f4       	brcc	.+6      	; 0xbbca <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    bbc4:	80 93 c7 0d 	sts	0x0DC7, r24
    bbc8:	07 c0       	rjmp	.+14     	; 0xbbd8 <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    bbca:	10 92 c7 0d 	sts	0x0DC7, r1
    bbce:	04 c0       	rjmp	.+8      	; 0xbbd8 <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    bbd0:	d1 11       	cpse	r29, r1
    bbd2:	a2 cf       	rjmp	.-188    	; 0xbb18 <append_tile_column+0xca>
    bbd4:	da 2d       	mov	r29, r10
    bbd6:	a0 cf       	rjmp	.-192    	; 0xbb18 <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    bbd8:	df 91       	pop	r29
    bbda:	cf 91       	pop	r28
    bbdc:	1f 91       	pop	r17
    bbde:	0f 91       	pop	r16
    bbe0:	ff 90       	pop	r15
    bbe2:	ef 90       	pop	r14
    bbe4:	df 90       	pop	r13
    bbe6:	cf 90       	pop	r12
    bbe8:	bf 90       	pop	r11
    bbea:	af 90       	pop	r10
    bbec:	08 95       	ret

0000bbee <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    bbee:	80 91 ba 0d 	lds	r24, 0x0DBA
    bbf2:	90 91 bb 0d 	lds	r25, 0x0DBB
    bbf6:	01 96       	adiw	r24, 0x01	; 1
    bbf8:	90 93 bb 0d 	sts	0x0DBB, r25
    bbfc:	80 93 ba 0d 	sts	0x0DBA, r24
	Scroll(1,0);
    bc00:	60 e0       	ldi	r22, 0x00	; 0
    bc02:	81 e0       	ldi	r24, 0x01	; 1
    bc04:	0e 94 a8 4f 	call	0x9f50	; 0x9f50 <Scroll>
	if (++game.scroll_x == 8)
    bc08:	80 91 c5 0d 	lds	r24, 0x0DC5
    bc0c:	8f 5f       	subi	r24, 0xFF	; 255
    bc0e:	88 30       	cpi	r24, 0x08	; 8
    bc10:	19 f0       	breq	.+6      	; 0xbc18 <move_camera_x+0x2a>
    bc12:	80 93 c5 0d 	sts	0x0DC5, r24
    bc16:	08 95       	ret
	{
		game.scroll_x = 0;
    bc18:	10 92 c5 0d 	sts	0x0DC5, r1
		append_tile_column();
    bc1c:	0c 94 27 5d 	jmp	0xba4e	; 0xba4e <append_tile_column>

0000bc20 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    bc20:	82 e0       	ldi	r24, 0x02	; 2
    bc22:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    bc26:	85 e0       	ldi	r24, 0x05	; 5
    bc28:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.anims = run_anim;
    bc2c:	e8 e3       	ldi	r30, 0x38	; 56
    bc2e:	f0 e1       	ldi	r31, 0x10	; 16
    bc30:	f0 93 34 0e 	sts	0x0E34, r31
    bc34:	e0 93 33 0e 	sts	0x0E33, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    bc38:	85 ed       	ldi	r24, 0xD5	; 213
    bc3a:	97 e3       	ldi	r25, 0x37	; 55
    bc3c:	91 83       	std	Z+1, r25	; 0x01
    bc3e:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    bc40:	8b ec       	ldi	r24, 0xCB	; 203
    bc42:	97 e3       	ldi	r25, 0x37	; 55
    bc44:	93 83       	std	Z+3, r25	; 0x03
    bc46:	82 83       	std	Z+2, r24	; 0x02
    bc48:	08 95       	ret

0000bc4a <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    bc4a:	aa eb       	ldi	r26, 0xBA	; 186
    bc4c:	bd e0       	ldi	r27, 0x0D	; 13
    bc4e:	90 93 d9 0f 	sts	0x0FD9, r25
    bc52:	80 93 d8 0f 	sts	0x0FD8, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    bc56:	fc 01       	movw	r30, r24
    bc58:	24 91       	lpm	r18, Z
    bc5a:	56 96       	adiw	r26, 0x16	; 22
    bc5c:	2c 93       	st	X, r18
    bc5e:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    bc60:	9c 01       	movw	r18, r24
    bc62:	2f 5f       	subi	r18, 0xFF	; 255
    bc64:	3f 4f       	sbci	r19, 0xFF	; 255
    bc66:	f9 01       	movw	r30, r18
    bc68:	44 91       	lpm	r20, Z
    bc6a:	57 96       	adiw	r26, 0x17	; 23
    bc6c:	4c 93       	st	X, r20
    bc6e:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    bc70:	fc 01       	movw	r30, r24
    bc72:	84 91       	lpm	r24, Z
    bc74:	98 2f       	mov	r25, r24
    bc76:	99 0f       	add	r25, r25
    bc78:	99 0f       	add	r25, r25
    bc7a:	89 0f       	add	r24, r25
    bc7c:	1f 96       	adiw	r26, 0x0f	; 15
    bc7e:	8c 93       	st	X, r24
    bc80:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    bc82:	f9 01       	movw	r30, r18
    bc84:	24 91       	lpm	r18, Z
    bc86:	82 2f       	mov	r24, r18
    bc88:	88 0f       	add	r24, r24
    bc8a:	88 0f       	add	r24, r24
    bc8c:	28 0f       	add	r18, r24
    bc8e:	50 96       	adiw	r26, 0x10	; 16
    bc90:	2c 93       	st	X, r18
    bc92:	08 95       	ret

0000bc94 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    bc94:	cf 92       	push	r12
    bc96:	df 92       	push	r13
    bc98:	ef 92       	push	r14
    bc9a:	ff 92       	push	r15
    bc9c:	0f 93       	push	r16
    bc9e:	1f 93       	push	r17
    bca0:	cf 93       	push	r28
    bca2:	df 93       	push	r29
    bca4:	7c 01       	movw	r14, r24
    bca6:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bca8:	88 e0       	ldi	r24, 0x08	; 8
    bcaa:	48 9f       	mul	r20, r24
    bcac:	80 01       	movw	r16, r0
    bcae:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    bcb0:	c0 e0       	ldi	r28, 0x00	; 0
    bcb2:	cd 17       	cp	r28, r29
    bcb4:	09 f4       	brne	.+2      	; 0xbcb8 <on_solid_ground+0x24>
    bcb6:	41 c0       	rjmp	.+130    	; 0xbd3a <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bcb8:	f7 01       	movw	r30, r14
    bcba:	42 81       	ldd	r20, Z+2	; 0x02
    bcbc:	53 81       	ldd	r21, Z+3	; 0x03
    bcbe:	40 0f       	add	r20, r16
    bcc0:	51 1f       	adc	r21, r17
    bcc2:	83 e0       	ldi	r24, 0x03	; 3
    bcc4:	56 95       	lsr	r21
    bcc6:	47 95       	ror	r20
    bcc8:	8a 95       	dec	r24
    bcca:	e1 f7       	brne	.-8      	; 0xbcc4 <on_solid_ground+0x30>
    bccc:	60 81       	ld	r22, Z
    bcce:	71 81       	ldd	r23, Z+1	; 0x01
    bcd0:	93 e0       	ldi	r25, 0x03	; 3
    bcd2:	76 95       	lsr	r23
    bcd4:	67 95       	ror	r22
    bcd6:	9a 95       	dec	r25
    bcd8:	e1 f7       	brne	.-8      	; 0xbcd2 <on_solid_ground+0x3e>
    bcda:	6c 0f       	add	r22, r28
    bcdc:	80 91 d8 0f 	lds	r24, 0x0FD8
    bce0:	90 91 d9 0f 	lds	r25, 0x0FD9
    bce4:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    bce8:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    bcea:	f7 01       	movw	r30, r14
    bcec:	42 81       	ldd	r20, Z+2	; 0x02
    bcee:	53 81       	ldd	r21, Z+3	; 0x03
    bcf0:	40 0f       	add	r20, r16
    bcf2:	51 1f       	adc	r21, r17
    bcf4:	23 e0       	ldi	r18, 0x03	; 3
    bcf6:	56 95       	lsr	r21
    bcf8:	47 95       	ror	r20
    bcfa:	2a 95       	dec	r18
    bcfc:	e1 f7       	brne	.-8      	; 0xbcf6 <on_solid_ground+0x62>
    bcfe:	20 81       	ld	r18, Z
    bd00:	31 81       	ldd	r19, Z+1	; 0x01
    bd02:	29 5f       	subi	r18, 0xF9	; 249
    bd04:	3f 4f       	sbci	r19, 0xFF	; 255
    bd06:	53 e0       	ldi	r21, 0x03	; 3
    bd08:	36 95       	lsr	r19
    bd0a:	27 95       	ror	r18
    bd0c:	5a 95       	dec	r21
    bd0e:	e1 f7       	brne	.-8      	; 0xbd08 <on_solid_ground+0x74>
    bd10:	6c 2f       	mov	r22, r28
    bd12:	62 0f       	add	r22, r18
    bd14:	80 91 d8 0f 	lds	r24, 0x0FD8
    bd18:	90 91 d9 0f 	lds	r25, 0x0FD9
    bd1c:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    bd20:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    bd22:	8c 2d       	mov	r24, r12
    bd24:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    bd28:	81 11       	cpse	r24, r1
    bd2a:	09 c0       	rjmp	.+18     	; 0xbd3e <on_solid_ground+0xaa>
    bd2c:	8d 2d       	mov	r24, r13
    bd2e:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    bd32:	81 11       	cpse	r24, r1
    bd34:	04 c0       	rjmp	.+8      	; 0xbd3e <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    bd36:	cf 5f       	subi	r28, 0xFF	; 255
    bd38:	bc cf       	rjmp	.-136    	; 0xbcb2 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    bd3a:	80 e0       	ldi	r24, 0x00	; 0
    bd3c:	01 c0       	rjmp	.+2      	; 0xbd40 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    bd3e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    bd40:	df 91       	pop	r29
    bd42:	cf 91       	pop	r28
    bd44:	1f 91       	pop	r17
    bd46:	0f 91       	pop	r16
    bd48:	ff 90       	pop	r15
    bd4a:	ef 90       	pop	r14
    bd4c:	df 90       	pop	r13
    bd4e:	cf 90       	pop	r12
    bd50:	08 95       	ret

0000bd52 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    bd52:	9c 01       	movw	r18, r24
    bd54:	80 91 fc 0c 	lds	r24, 0x0CFC
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    bd58:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    bd5a:	83 30       	cpi	r24, 0x03	; 3
    bd5c:	08 f0       	brcs	.+2      	; 0xbd60 <find_shot_slot+0xe>
    bd5e:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    bd60:	f9 01       	movw	r30, r18
    bd62:	48 9f       	mul	r20, r24
    bd64:	e0 0d       	add	r30, r0
    bd66:	f1 1d       	adc	r31, r1
    bd68:	11 24       	eor	r1, r1
    bd6a:	51 8d       	ldd	r21, Z+25	; 0x19
    bd6c:	91 e0       	ldi	r25, 0x01	; 1
    bd6e:	98 0f       	add	r25, r24
    bd70:	51 11       	cpse	r21, r1
    bd72:	03 c0       	rjmp	.+6      	; 0xbd7a <find_shot_slot+0x28>
		{
			return i++;
    bd74:	90 93 fc 0c 	sts	0x0CFC, r25
    bd78:	08 95       	ret
		}
		i++;
    bd7a:	89 2f       	mov	r24, r25
	}
    bd7c:	ee cf       	rjmp	.-36     	; 0xbd5a <find_shot_slot+0x8>

0000bd7e <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    bd7e:	bf 92       	push	r11
    bd80:	cf 92       	push	r12
    bd82:	df 92       	push	r13
    bd84:	ef 92       	push	r14
    bd86:	ff 92       	push	r15
    bd88:	0f 93       	push	r16
    bd8a:	1f 93       	push	r17
    bd8c:	cf 93       	push	r28
    bd8e:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_A && player->active_shots < MAX_PLAYER_SHOTS)
    bd90:	fc 01       	movw	r30, r24
    bd92:	ec 58       	subi	r30, 0x8C	; 140
    bd94:	ff 4f       	sbci	r31, 0xFF	; 255
    bd96:	20 81       	ld	r18, Z
    bd98:	31 81       	ldd	r19, Z+1	; 0x01
    bd9a:	30 ff       	sbrs	r19, 0
    bd9c:	a7 c0       	rjmp	.+334    	; 0xbeec <update_shot+0x16e>
    bd9e:	fc 01       	movw	r30, r24
    bda0:	27 81       	ldd	r18, Z+7	; 0x07
    bda2:	23 30       	cpi	r18, 0x03	; 3
    bda4:	08 f0       	brcs	.+2      	; 0xbda8 <update_shot+0x2a>
    bda6:	a2 c0       	rjmp	.+324    	; 0xbeec <update_shot+0x16e>
    bda8:	16 2f       	mov	r17, r22
    bdaa:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    bdac:	0e 94 a9 5e 	call	0xbd52	; 0xbd52 <find_shot_slot>
    bdb0:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    bdb2:	e8 2e       	mov	r14, r24
    bdb4:	f1 2c       	mov	r15, r1
    bdb6:	fe 01       	movw	r30, r28
    bdb8:	24 e1       	ldi	r18, 0x14	; 20
    bdba:	82 9f       	mul	r24, r18
    bdbc:	e0 0d       	add	r30, r0
    bdbe:	f1 1d       	adc	r31, r1
    bdc0:	11 24       	eor	r1, r1
    bdc2:	87 89       	ldd	r24, Z+23	; 0x17
    bdc4:	86 30       	cpi	r24, 0x06	; 6
    bdc6:	29 f4       	brne	.+10     	; 0xbdd2 <update_shot+0x54>
    bdc8:	8a 81       	ldd	r24, Y+2	; 0x02
    bdca:	9b 81       	ldd	r25, Y+3	; 0x03
    bdcc:	04 97       	sbiw	r24, 0x04	; 4
    bdce:	08 f4       	brcc	.+2      	; 0xbdd2 <update_shot+0x54>
    bdd0:	8d c0       	rjmp	.+282    	; 0xbeec <update_shot+0x16e>
		SFX_PLAYER_SHOOT;
    bdd2:	2f ef       	ldi	r18, 0xFF	; 255
    bdd4:	43 e2       	ldi	r20, 0x23	; 35
    bdd6:	63 e0       	ldi	r22, 0x03	; 3
    bdd8:	82 e0       	ldi	r24, 0x02	; 2
    bdda:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    bdde:	84 e1       	ldi	r24, 0x14	; 20
    bde0:	8e 9d       	mul	r24, r14
    bde2:	60 01       	movw	r12, r0
    bde4:	8f 9d       	mul	r24, r15
    bde6:	d0 0c       	add	r13, r0
    bde8:	11 24       	eor	r1, r1
    bdea:	c6 01       	movw	r24, r12
    bdec:	4c 96       	adiw	r24, 0x1c	; 28
    bdee:	8c 0f       	add	r24, r28
    bdf0:	9d 1f       	adc	r25, r29
    bdf2:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    bdf6:	40 e0       	ldi	r20, 0x00	; 0
    bdf8:	bc 01       	movw	r22, r24
    bdfa:	8b 2d       	mov	r24, r11
    bdfc:	81 0f       	add	r24, r17
    bdfe:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
		player->shot[idx].active = 1;
    be02:	8e 01       	movw	r16, r28
    be04:	0c 0d       	add	r16, r12
    be06:	1d 1d       	adc	r17, r13
    be08:	81 e0       	ldi	r24, 0x01	; 1
    be0a:	f8 01       	movw	r30, r16
    be0c:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    be0e:	ca 80       	ldd	r12, Y+2	; 0x02
    be10:	db 80       	ldd	r13, Y+3	; 0x03
    be12:	f8 ef       	ldi	r31, 0xF8	; 248
    be14:	cf 22       	and	r12, r31
    be16:	f8 01       	movw	r30, r16
    be18:	83 8d       	ldd	r24, Z+27	; 0x1b
    be1a:	c8 0e       	add	r12, r24
    be1c:	d1 1c       	adc	r13, r1
    be1e:	87 fd       	sbrc	r24, 7
    be20:	da 94       	dec	r13
    be22:	d3 8a       	std	Z+19, r13	; 0x13
    be24:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    be26:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    be2a:	28 81       	ld	r18, Y
    be2c:	39 81       	ldd	r19, Y+1	; 0x01
    be2e:	88 23       	and	r24, r24
    be30:	e1 f0       	breq	.+56     	; 0xbe6a <update_shot+0xec>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    be32:	8b 85       	ldd	r24, Y+11	; 0x0b
    be34:	f8 e0       	ldi	r31, 0x08	; 8
    be36:	8f 9f       	mul	r24, r31
    be38:	20 0d       	add	r18, r0
    be3a:	31 1d       	adc	r19, r1
    be3c:	11 24       	eor	r1, r1
    be3e:	f8 01       	movw	r30, r16
    be40:	31 8b       	std	Z+17, r19	; 0x11
    be42:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    be44:	82 8d       	ldd	r24, Z+26	; 0x1a
    be46:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    be48:	87 89       	ldd	r24, Z+23	; 0x17
    be4a:	86 30       	cpi	r24, 0x06	; 6
    be4c:	09 f0       	breq	.+2      	; 0xbe50 <update_shot+0xd2>
    be4e:	4b c0       	rjmp	.+150    	; 0xbee6 <update_shot+0x168>
    be50:	fe 01       	movw	r30, r28
    be52:	24 e1       	ldi	r18, 0x14	; 20
    be54:	b2 9e       	mul	r11, r18
    be56:	e0 0d       	add	r30, r0
    be58:	f1 1d       	adc	r31, r1
    be5a:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    be5c:	84 89       	ldd	r24, Z+20	; 0x14
    be5e:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    be60:	81 11       	cpse	r24, r1
    be62:	01 c0       	rjmp	.+2      	; 0xbe66 <update_shot+0xe8>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    be64:	8f e7       	ldi	r24, 0x7F	; 127
    be66:	84 8b       	std	Z+20, r24	; 0x14
    be68:	3e c0       	rjmp	.+124    	; 0xbee6 <update_shot+0x168>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    be6a:	88 85       	ldd	r24, Y+8	; 0x08
    be6c:	82 fd       	sbrc	r24, 2
    be6e:	06 c0       	rjmp	.+12     	; 0xbe7c <update_shot+0xfe>
			{
				player->shot[idx].shared.y += 8;
    be70:	88 e0       	ldi	r24, 0x08	; 8
    be72:	c8 0e       	add	r12, r24
    be74:	d1 1c       	adc	r13, r1
    be76:	f8 01       	movw	r30, r16
    be78:	d3 8a       	std	Z+19, r13	; 0x13
    be7a:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    be7c:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    be7e:	94 e1       	ldi	r25, 0x14	; 20
    be80:	9e 9d       	mul	r25, r14
    be82:	f0 01       	movw	r30, r0
    be84:	9f 9d       	mul	r25, r15
    be86:	f0 0d       	add	r31, r0
    be88:	11 24       	eor	r1, r1
    be8a:	ec 0f       	add	r30, r28
    be8c:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    be8e:	81 30       	cpi	r24, 0x01	; 1
    be90:	a9 f4       	brne	.+42     	; 0xbebc <update_shot+0x13e>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    be92:	20 5f       	subi	r18, 0xF0	; 240
    be94:	3f 4f       	sbci	r19, 0xFF	; 255
    be96:	31 8b       	std	Z+17, r19	; 0x11
    be98:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    be9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    be9c:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    be9e:	27 89       	ldd	r18, Z+23	; 0x17
    bea0:	24 30       	cpi	r18, 0x04	; 4
    bea2:	09 f5       	brne	.+66     	; 0xbee6 <update_shot+0x168>
    bea4:	ff ef       	ldi	r31, 0xFF	; 255
    bea6:	ef 1a       	sub	r14, r31
    bea8:	ff 0a       	sbc	r15, r31
    beaa:	9e 9d       	mul	r25, r14
    beac:	f0 01       	movw	r30, r0
    beae:	9f 9d       	mul	r25, r15
    beb0:	f0 0d       	add	r31, r0
    beb2:	11 24       	eor	r1, r1
    beb4:	ec 0f       	add	r30, r28
    beb6:	fd 1f       	adc	r31, r29
    beb8:	81 95       	neg	r24
    beba:	14 c0       	rjmp	.+40     	; 0xbee4 <update_shot+0x166>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    bebc:	28 50       	subi	r18, 0x08	; 8
    bebe:	31 09       	sbc	r19, r1
    bec0:	31 8b       	std	Z+17, r19	; 0x11
    bec2:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    bec4:	82 8d       	ldd	r24, Z+26	; 0x1a
    bec6:	81 95       	neg	r24
    bec8:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    beca:	27 89       	ldd	r18, Z+23	; 0x17
    becc:	24 30       	cpi	r18, 0x04	; 4
    bece:	59 f4       	brne	.+22     	; 0xbee6 <update_shot+0x168>
    bed0:	2f ef       	ldi	r18, 0xFF	; 255
    bed2:	e2 1a       	sub	r14, r18
    bed4:	f2 0a       	sbc	r15, r18
    bed6:	9e 9d       	mul	r25, r14
    bed8:	f0 01       	movw	r30, r0
    beda:	9f 9d       	mul	r25, r15
    bedc:	f0 0d       	add	r31, r0
    bede:	11 24       	eor	r1, r1
    bee0:	ec 0f       	add	r30, r28
    bee2:	fd 1f       	adc	r31, r29
    bee4:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    bee6:	8f 81       	ldd	r24, Y+7	; 0x07
    bee8:	8f 5f       	subi	r24, 0xFF	; 255
    beea:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    beec:	df 91       	pop	r29
    beee:	cf 91       	pop	r28
    bef0:	1f 91       	pop	r17
    bef2:	0f 91       	pop	r16
    bef4:	ff 90       	pop	r15
    bef6:	ef 90       	pop	r14
    bef8:	df 90       	pop	r13
    befa:	cf 90       	pop	r12
    befc:	bf 90       	pop	r11
    befe:	08 95       	ret

0000bf00 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    bf00:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    bf02:	40 81       	ld	r20, Z
    bf04:	51 81       	ldd	r21, Z+1	; 0x01
    bf06:	20 91 ba 0d 	lds	r18, 0x0DBA
    bf0a:	30 91 bb 0d 	lds	r19, 0x0DBB
    bf0e:	42 17       	cp	r20, r18
    bf10:	53 07       	cpc	r21, r19
    bf12:	f8 f0       	brcs	.+62     	; 0xbf52 <out_of_bounds+0x52>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    bf14:	48 5f       	subi	r20, 0xF8	; 248
    bf16:	5f 4f       	sbci	r21, 0xFF	; 255
    bf18:	20 52       	subi	r18, 0x20	; 32
    bf1a:	3f 4f       	sbci	r19, 0xFF	; 255
    bf1c:	24 17       	cp	r18, r20
    bf1e:	35 07       	cpc	r19, r21
    bf20:	c0 f0       	brcs	.+48     	; 0xbf52 <out_of_bounds+0x52>
	if (s->y < game.camera_y) return 1;
    bf22:	42 81       	ldd	r20, Z+2	; 0x02
    bf24:	53 81       	ldd	r21, Z+3	; 0x03
    bf26:	20 91 c2 0d 	lds	r18, 0x0DC2
    bf2a:	30 e0       	ldi	r19, 0x00	; 0
    bf2c:	42 17       	cp	r20, r18
    bf2e:	53 07       	cpc	r21, r19
    bf30:	80 f0       	brcs	.+32     	; 0xbf52 <out_of_bounds+0x52>
	if (s->y < 4 && s->vy != 0) return 1;
    bf32:	44 30       	cpi	r20, 0x04	; 4
    bf34:	51 05       	cpc	r21, r1
    bf36:	18 f4       	brcc	.+6      	; 0xbf3e <out_of_bounds+0x3e>
    bf38:	84 81       	ldd	r24, Z+4	; 0x04
    bf3a:	81 11       	cpse	r24, r1
    bf3c:	0a c0       	rjmp	.+20     	; 0xbf52 <out_of_bounds+0x52>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    bf3e:	48 5f       	subi	r20, 0xF8	; 248
    bf40:	5f 4f       	sbci	r21, 0xFF	; 255
    bf42:	28 53       	subi	r18, 0x38	; 56
    bf44:	3f 4f       	sbci	r19, 0xFF	; 255
    bf46:	81 e0       	ldi	r24, 0x01	; 1
    bf48:	24 17       	cp	r18, r20
    bf4a:	35 07       	cpc	r19, r21
    bf4c:	18 f0       	brcs	.+6      	; 0xbf54 <out_of_bounds+0x54>
    bf4e:	80 e0       	ldi	r24, 0x00	; 0
    bf50:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    bf52:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < 4 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    bf54:	08 95       	ret

0000bf56 <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    bf56:	40 91 d5 0d 	lds	r20, 0x0DD5
    bf5a:	80 e0       	ldi	r24, 0x00	; 0
    bf5c:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    bf5e:	50 e1       	ldi	r21, 0x10	; 16
    bf60:	9c 01       	movw	r18, r24
    bf62:	26 54       	subi	r18, 0x46	; 70
    bf64:	32 4f       	sbci	r19, 0xF2	; 242
    bf66:	d9 01       	movw	r26, r18
    bf68:	a4 5e       	subi	r26, 0xE4	; 228
    bf6a:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    bf6c:	6c 91       	ld	r22, X
    bf6e:	66 23       	and	r22, r22
    bf70:	31 f0       	breq	.+12     	; 0xbf7e <explode_all_enemies+0x28>
    bf72:	f9 01       	movw	r30, r18
    bf74:	e3 5e       	subi	r30, 0xE3	; 227
    bf76:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    bf78:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    bf7a:	1c 92       	st	X, r1
			game.active_enemies--;
    bf7c:	41 50       	subi	r20, 0x01	; 1
    bf7e:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    bf80:	89 30       	cpi	r24, 0x09	; 9
    bf82:	21 e0       	ldi	r18, 0x01	; 1
    bf84:	92 07       	cpc	r25, r18
    bf86:	61 f7       	brne	.-40     	; 0xbf60 <explode_all_enemies+0xa>
    bf88:	40 93 d5 0d 	sts	0x0DD5, r20
    bf8c:	08 95       	ret

0000bf8e <handle_music_toggle>:
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
}

char music_toggle_pressed(JoyPadState* p)
{
	return (p->pressed & BTN_SELECT);
    bf8e:	fc 01       	movw	r30, r24
    bf90:	80 81       	ld	r24, Z
	}
}

void handle_music_toggle(JoyPadState* p)
{
	if (music_toggle_pressed(p))
    bf92:	82 ff       	sbrs	r24, 2
    bf94:	07 c0       	rjmp	.+14     	; 0xbfa4 <handle_music_toggle+0x16>
	{
		if (IsSongPlaying())
    bf96:	0e 94 2e 48 	call	0x905c	; 0x905c <IsSongPlaying>
    bf9a:	81 11       	cpse	r24, r1
		{
			StopSong();
    bf9c:	0c 94 be 44 	jmp	0x897c	; 0x897c <StopSong>
		}
		else
		{
			ResumeSong();
    bfa0:	0c 94 cc 44 	jmp	0x8998	; 0x8998 <ResumeSong>
    bfa4:	08 95       	ret

0000bfa6 <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    bfa6:	0f 93       	push	r16
    bfa8:	1f 93       	push	r17
    bfaa:	cf 93       	push	r28
    bfac:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    bfae:	20 91 d3 0d 	lds	r18, 0x0DD3
    bfb2:	22 30       	cpi	r18, 0x02	; 2
    bfb4:	b9 f5       	brne	.+110    	; 0xc024 <handle_demo_play+0x7e>
    bfb6:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    bfb8:	8c 01       	movw	r16, r24
    bfba:	0c 58       	subi	r16, 0x8C	; 140
    bfbc:	1f 4f       	sbci	r17, 0xFF	; 255
    bfbe:	f8 01       	movw	r30, r16
    bfc0:	11 82       	std	Z+1, r1	; 0x01
    bfc2:	10 82       	st	Z, r1
		if (is_space())
    bfc4:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    bfc8:	88 23       	and	r24, r24
    bfca:	69 f0       	breq	.+26     	; 0xbfe6 <handle_demo_play+0x40>
		{
			if (game.time < 1)
    bfcc:	80 91 c0 0d 	lds	r24, 0x0DC0
    bfd0:	90 91 c1 0d 	lds	r25, 0x0DC1
    bfd4:	89 2b       	or	r24, r25
    bfd6:	d1 f4       	brne	.+52     	; 0xc00c <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    bfd8:	c8 58       	subi	r28, 0x88	; 136
    bfda:	df 4f       	sbci	r29, 0xFF	; 255
    bfdc:	80 e1       	ldi	r24, 0x10	; 16
    bfde:	90 e0       	ldi	r25, 0x00	; 0
    bfe0:	99 83       	std	Y+1, r25	; 0x01
    bfe2:	88 83       	st	Y, r24
    bfe4:	13 c0       	rjmp	.+38     	; 0xc00c <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    bfe6:	80 e8       	ldi	r24, 0x80	; 128
    bfe8:	90 e0       	ldi	r25, 0x00	; 0
    bfea:	fe 01       	movw	r30, r28
    bfec:	e8 58       	subi	r30, 0x88	; 136
    bfee:	ff 4f       	sbci	r31, 0xFF	; 255
    bff0:	91 83       	std	Z+1, r25	; 0x01
    bff2:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    bff4:	8d 81       	ldd	r24, Y+5	; 0x05
    bff6:	81 11       	cpse	r24, r1
    bff8:	09 c0       	rjmp	.+18     	; 0xc00c <handle_demo_play+0x66>
    bffa:	88 81       	ld	r24, Y
    bffc:	99 81       	ldd	r25, Y+1	; 0x01
    bffe:	89 97       	sbiw	r24, 0x29	; 41
    c000:	28 f0       	brcs	.+10     	; 0xc00c <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_B;
    c002:	81 e0       	ldi	r24, 0x01	; 1
    c004:	90 e0       	ldi	r25, 0x00	; 0
    c006:	f8 01       	movw	r30, r16
    c008:	91 83       	std	Z+1, r25	; 0x01
    c00a:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    c00c:	80 91 d4 0d 	lds	r24, 0x0DD4
    c010:	6f e0       	ldi	r22, 0x0F	; 15
    c012:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    c016:	91 11       	cpse	r25, r1
    c018:	05 c0       	rjmp	.+10     	; 0xc024 <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_A;
    c01a:	80 e0       	ldi	r24, 0x00	; 0
    c01c:	91 e0       	ldi	r25, 0x01	; 1
    c01e:	f8 01       	movw	r30, r16
    c020:	91 83       	std	Z+1, r25	; 0x01
    c022:	80 83       	st	Z, r24
		}
	}
}
    c024:	df 91       	pop	r29
    c026:	cf 91       	pop	r28
    c028:	1f 91       	pop	r17
    c02a:	0f 91       	pop	r16
    c02c:	08 95       	ret

0000c02e <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    c02e:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    c030:	86 17       	cp	r24, r22
    c032:	10 f4       	brcc	.+4      	; 0xc038 <pixel_overlap+0xa>
    c034:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    c036:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    c038:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    c03a:	26 0f       	add	r18, r22
	if (s2 < s1)
    c03c:	28 17       	cp	r18, r24
    c03e:	10 f4       	brcc	.+4      	; 0xc044 <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    c040:	28 1b       	sub	r18, r24
    c042:	92 0f       	add	r25, r18
	}
	return result;
}
    c044:	89 2f       	mov	r24, r25
    c046:	08 95       	ret

0000c048 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    c048:	2f 92       	push	r2
    c04a:	3f 92       	push	r3
    c04c:	4f 92       	push	r4
    c04e:	5f 92       	push	r5
    c050:	6f 92       	push	r6
    c052:	7f 92       	push	r7
    c054:	8f 92       	push	r8
    c056:	9f 92       	push	r9
    c058:	af 92       	push	r10
    c05a:	bf 92       	push	r11
    c05c:	cf 92       	push	r12
    c05e:	df 92       	push	r13
    c060:	ef 92       	push	r14
    c062:	ff 92       	push	r15
    c064:	0f 93       	push	r16
    c066:	1f 93       	push	r17
    c068:	cf 93       	push	r28
    c06a:	df 93       	push	r29
    c06c:	00 d0       	rcall	.+0      	; 0xc06e <collision_detect_level+0x26>
    c06e:	00 d0       	rcall	.+0      	; 0xc070 <collision_detect_level+0x28>
    c070:	00 d0       	rcall	.+0      	; 0xc072 <collision_detect_level+0x2a>
    c072:	cd b7       	in	r28, 0x3d	; 61
    c074:	de b7       	in	r29, 0x3e	; 62
    c076:	9e 83       	std	Y+6, r25	; 0x06
    c078:	8d 83       	std	Y+5, r24	; 0x05
    c07a:	56 2e       	mov	r5, r22
    c07c:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    c07e:	fc 01       	movw	r30, r24
    c080:	a0 80       	ld	r10, Z
    c082:	b1 80       	ldd	r11, Z+1	; 0x01
    c084:	75 01       	movw	r14, r10
    c086:	13 e0       	ldi	r17, 0x03	; 3
    c088:	f6 94       	lsr	r15
    c08a:	e7 94       	ror	r14
    c08c:	1a 95       	dec	r17
    c08e:	e1 f7       	brne	.-8      	; 0xc088 <collision_detect_level+0x40>
    c090:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    c092:	c2 80       	ldd	r12, Z+2	; 0x02
    c094:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    c096:	84 81       	ldd	r24, Z+4	; 0x04
    c098:	88 23       	and	r24, r24
    c09a:	09 f4       	brne	.+2      	; 0xc09e <collision_detect_level+0x56>
    c09c:	e1 c0       	rjmp	.+450    	; 0xc260 <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    c09e:	e3 e0       	ldi	r30, 0x03	; 3
    c0a0:	d6 94       	lsr	r13
    c0a2:	c7 94       	ror	r12
    c0a4:	ea 95       	dec	r30
    c0a6:	e1 f7       	brne	.-8      	; 0xc0a0 <collision_detect_level+0x58>
    c0a8:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    c0aa:	f7 e0       	ldi	r31, 0x07	; 7
    c0ac:	af 0e       	add	r10, r31
    c0ae:	b1 1c       	adc	r11, r1
    c0b0:	f3 e0       	ldi	r31, 0x03	; 3
    c0b2:	b6 94       	lsr	r11
    c0b4:	a7 94       	ror	r10
    c0b6:	fa 95       	dec	r31
    c0b8:	e1 f7       	brne	.-8      	; 0xc0b2 <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    c0ba:	8e 2d       	mov	r24, r14
    c0bc:	88 0f       	add	r24, r24
    c0be:	88 0f       	add	r24, r24
    c0c0:	88 0f       	add	r24, r24
    c0c2:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    c0c4:	2a 2c       	mov	r2, r10
    c0c6:	22 0c       	add	r2, r2
    c0c8:	22 0c       	add	r2, r2
    c0ca:	22 0c       	add	r2, r2
    c0cc:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    c0ce:	46 01       	movw	r8, r12
    c0d0:	9f ef       	ldi	r25, 0xFF	; 255
    c0d2:	89 1a       	sub	r8, r25
    c0d4:	99 0a       	sbc	r9, r25
    c0d6:	a3 e0       	ldi	r26, 0x03	; 3
    c0d8:	88 0c       	add	r8, r8
    c0da:	99 1c       	adc	r9, r9
    c0dc:	aa 95       	dec	r26
    c0de:	e1 f7       	brne	.-8      	; 0xc0d8 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    c0e0:	e8 e0       	ldi	r30, 0x08	; 8
    c0e2:	4e 9f       	mul	r20, r30
    c0e4:	30 01       	movw	r6, r0
    c0e6:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    c0e8:	b3 e0       	ldi	r27, 0x03	; 3
    c0ea:	cc 0c       	add	r12, r12
    c0ec:	dd 1c       	adc	r13, r13
    c0ee:	ba 95       	dec	r27
    c0f0:	e1 f7       	brne	.-8      	; 0xc0ea <collision_detect_level+0xa2>
    c0f2:	41 2c       	mov	r4, r1
    c0f4:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    c0f6:	45 14       	cp	r4, r5
    c0f8:	09 f4       	brne	.+2      	; 0xc0fc <collision_detect_level+0xb4>
    c0fa:	b3 c0       	rjmp	.+358    	; 0xc262 <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    c0fc:	ed 81       	ldd	r30, Y+5	; 0x05
    c0fe:	fe 81       	ldd	r31, Y+6	; 0x06
    c100:	84 81       	ldd	r24, Z+4	; 0x04
    c102:	87 ff       	sbrs	r24, 7
    c104:	47 c0       	rjmp	.+142    	; 0xc194 <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    c106:	49 81       	ldd	r20, Y+1	; 0x01
    c108:	64 2d       	mov	r22, r4
    c10a:	6e 0d       	add	r22, r14
    c10c:	80 91 d8 0f 	lds	r24, 0x0FD8
    c110:	90 91 d9 0f 	lds	r25, 0x0FD9
    c114:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c118:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    c11a:	49 81       	ldd	r20, Y+1	; 0x01
    c11c:	64 2d       	mov	r22, r4
    c11e:	6a 0d       	add	r22, r10
    c120:	80 91 d8 0f 	lds	r24, 0x0FD8
    c124:	90 91 d9 0f 	lds	r25, 0x0FD9
    c128:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c12c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c12e:	83 2d       	mov	r24, r3
    c130:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c134:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c136:	80 2f       	mov	r24, r16
    c138:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c13c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    c13e:	33 20       	and	r3, r3
    c140:	71 f0       	breq	.+28     	; 0xc15e <collision_detect_level+0x116>
    c142:	30 91 ba 0d 	lds	r19, 0x0DBA
    c146:	6b 81       	ldd	r22, Y+3	; 0x03
    c148:	63 1b       	sub	r22, r19
    c14a:	ed 81       	ldd	r30, Y+5	; 0x05
    c14c:	fe 81       	ldd	r31, Y+6	; 0x06
    c14e:	80 81       	ld	r24, Z
    c150:	28 e0       	ldi	r18, 0x08	; 8
    c152:	48 e0       	ldi	r20, 0x08	; 8
    c154:	83 1b       	sub	r24, r19
    c156:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c15a:	84 30       	cpi	r24, 0x04	; 4
    c15c:	80 f4       	brcc	.+32     	; 0xc17e <collision_detect_level+0x136>
    c15e:	00 23       	and	r16, r16
    c160:	c9 f0       	breq	.+50     	; 0xc194 <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    c162:	30 91 ba 0d 	lds	r19, 0x0DBA
    c166:	62 2d       	mov	r22, r2
    c168:	63 1b       	sub	r22, r19
    c16a:	ed 81       	ldd	r30, Y+5	; 0x05
    c16c:	fe 81       	ldd	r31, Y+6	; 0x06
    c16e:	80 81       	ld	r24, Z
    c170:	28 e0       	ldi	r18, 0x08	; 8
    c172:	48 e0       	ldi	r20, 0x08	; 8
    c174:	83 1b       	sub	r24, r19
    c176:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c17a:	84 30       	cpi	r24, 0x04	; 4
    c17c:	58 f0       	brcs	.+22     	; 0xc194 <collision_detect_level+0x14c>
				{
					s->vy =  0;
    c17e:	ed 81       	ldd	r30, Y+5	; 0x05
    c180:	fe 81       	ldd	r31, Y+6	; 0x06
    c182:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    c184:	93 82       	std	Z+3, r9	; 0x03
    c186:	82 82       	std	Z+2, r8	; 0x02
    c188:	30 16       	cp	r3, r16
    c18a:	08 f4       	brcc	.+2      	; 0xc18e <collision_detect_level+0x146>
    c18c:	30 2e       	mov	r3, r16
    c18e:	13 15       	cp	r17, r3
    c190:	08 f4       	brcc	.+2      	; 0xc194 <collision_detect_level+0x14c>
    c192:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    c194:	ed 81       	ldd	r30, Y+5	; 0x05
    c196:	fe 81       	ldd	r31, Y+6	; 0x06
    c198:	84 81       	ldd	r24, Z+4	; 0x04
    c19a:	18 16       	cp	r1, r24
    c19c:	0c f0       	brlt	.+2      	; 0xc1a0 <collision_detect_level+0x158>
    c19e:	5e c0       	rjmp	.+188    	; 0xc25c <collision_detect_level+0x214>
    c1a0:	42 81       	ldd	r20, Z+2	; 0x02
    c1a2:	53 81       	ldd	r21, Z+3	; 0x03
    c1a4:	41 50       	subi	r20, 0x01	; 1
    c1a6:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    c1a8:	46 0d       	add	r20, r6
    c1aa:	57 1d       	adc	r21, r7
    c1ac:	63 e0       	ldi	r22, 0x03	; 3
    c1ae:	56 95       	lsr	r21
    c1b0:	47 95       	ror	r20
    c1b2:	6a 95       	dec	r22
    c1b4:	e1 f7       	brne	.-8      	; 0xc1ae <collision_detect_level+0x166>
    c1b6:	64 2d       	mov	r22, r4
    c1b8:	6e 0d       	add	r22, r14
    c1ba:	80 91 d8 0f 	lds	r24, 0x0FD8
    c1be:	90 91 d9 0f 	lds	r25, 0x0FD9
    c1c2:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c1c6:	38 2e       	mov	r3, r24
    c1c8:	ed 81       	ldd	r30, Y+5	; 0x05
    c1ca:	fe 81       	ldd	r31, Y+6	; 0x06
    c1cc:	42 81       	ldd	r20, Z+2	; 0x02
    c1ce:	53 81       	ldd	r21, Z+3	; 0x03
    c1d0:	41 50       	subi	r20, 0x01	; 1
    c1d2:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    c1d4:	46 0d       	add	r20, r6
    c1d6:	57 1d       	adc	r21, r7
    c1d8:	73 e0       	ldi	r23, 0x03	; 3
    c1da:	56 95       	lsr	r21
    c1dc:	47 95       	ror	r20
    c1de:	7a 95       	dec	r23
    c1e0:	e1 f7       	brne	.-8      	; 0xc1da <collision_detect_level+0x192>
    c1e2:	64 2d       	mov	r22, r4
    c1e4:	6a 0d       	add	r22, r10
    c1e6:	80 91 d8 0f 	lds	r24, 0x0FD8
    c1ea:	90 91 d9 0f 	lds	r25, 0x0FD9
    c1ee:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c1f2:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c1f4:	83 2d       	mov	r24, r3
    c1f6:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c1fa:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c1fc:	80 2f       	mov	r24, r16
    c1fe:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c202:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    c204:	33 20       	and	r3, r3
    c206:	71 f0       	breq	.+28     	; 0xc224 <collision_detect_level+0x1dc>
    c208:	30 91 ba 0d 	lds	r19, 0x0DBA
    c20c:	6b 81       	ldd	r22, Y+3	; 0x03
    c20e:	63 1b       	sub	r22, r19
    c210:	ed 81       	ldd	r30, Y+5	; 0x05
    c212:	fe 81       	ldd	r31, Y+6	; 0x06
    c214:	80 81       	ld	r24, Z
    c216:	28 e0       	ldi	r18, 0x08	; 8
    c218:	48 e0       	ldi	r20, 0x08	; 8
    c21a:	83 1b       	sub	r24, r19
    c21c:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c220:	84 30       	cpi	r24, 0x04	; 4
    c222:	80 f4       	brcc	.+32     	; 0xc244 <collision_detect_level+0x1fc>
    c224:	00 23       	and	r16, r16
    c226:	d1 f0       	breq	.+52     	; 0xc25c <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    c228:	30 91 ba 0d 	lds	r19, 0x0DBA
    c22c:	62 2d       	mov	r22, r2
    c22e:	63 1b       	sub	r22, r19
    c230:	ed 81       	ldd	r30, Y+5	; 0x05
    c232:	fe 81       	ldd	r31, Y+6	; 0x06
    c234:	80 81       	ld	r24, Z
    c236:	28 e0       	ldi	r18, 0x08	; 8
    c238:	48 e0       	ldi	r20, 0x08	; 8
    c23a:	83 1b       	sub	r24, r19
    c23c:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c240:	84 30       	cpi	r24, 0x04	; 4
    c242:	60 f0       	brcs	.+24     	; 0xc25c <collision_detect_level+0x214>
				{
					s->vy =  0;
    c244:	ed 81       	ldd	r30, Y+5	; 0x05
    c246:	fe 81       	ldd	r31, Y+6	; 0x06
    c248:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    c24a:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    c24c:	d3 82       	std	Z+3, r13	; 0x03
    c24e:	c2 82       	std	Z+2, r12	; 0x02
    c250:	30 16       	cp	r3, r16
    c252:	08 f4       	brcc	.+2      	; 0xc256 <collision_detect_level+0x20e>
    c254:	30 2e       	mov	r3, r16
    c256:	13 15       	cp	r17, r3
    c258:	08 f4       	brcc	.+2      	; 0xc25c <collision_detect_level+0x214>
    c25a:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    c25c:	43 94       	inc	r4
    c25e:	4b cf       	rjmp	.-362    	; 0xc0f6 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    c260:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    c262:	ed 81       	ldd	r30, Y+5	; 0x05
    c264:	fe 81       	ldd	r31, Y+6	; 0x06
    c266:	85 81       	ldd	r24, Z+5	; 0x05
    c268:	88 23       	and	r24, r24
    c26a:	09 f4       	brne	.+2      	; 0xc26e <collision_detect_level+0x226>
    c26c:	e1 c0       	rjmp	.+450    	; 0xc430 <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    c26e:	c2 80       	ldd	r12, Z+2	; 0x02
    c270:	d3 80       	ldd	r13, Z+3	; 0x03
    c272:	56 01       	movw	r10, r12
    c274:	23 e0       	ldi	r18, 0x03	; 3
    c276:	b6 94       	lsr	r11
    c278:	a7 94       	ror	r10
    c27a:	2a 95       	dec	r18
    c27c:	e1 f7       	brne	.-8      	; 0xc276 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    c27e:	f7 e0       	ldi	r31, 0x07	; 7
    c280:	cf 0e       	add	r12, r31
    c282:	d1 1c       	adc	r13, r1
    c284:	33 e0       	ldi	r19, 0x03	; 3
    c286:	d6 94       	lsr	r13
    c288:	c7 94       	ror	r12
    c28a:	3a 95       	dec	r19
    c28c:	e1 f7       	brne	.-8      	; 0xc286 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c28e:	3a 2c       	mov	r3, r10
    c290:	33 0c       	add	r3, r3
    c292:	33 0c       	add	r3, r3
    c294:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c296:	4c 2c       	mov	r4, r12
    c298:	44 0c       	add	r4, r4
    c29a:	44 0c       	add	r4, r4
    c29c:	44 0c       	add	r4, r4
    c29e:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    c2a0:	37 01       	movw	r6, r14
    c2a2:	8f ef       	ldi	r24, 0xFF	; 255
    c2a4:	68 1a       	sub	r6, r24
    c2a6:	78 0a       	sbc	r7, r24
    c2a8:	43 e0       	ldi	r20, 0x03	; 3
    c2aa:	66 0c       	add	r6, r6
    c2ac:	77 1c       	adc	r7, r7
    c2ae:	4a 95       	dec	r20
    c2b0:	e1 f7       	brne	.-8      	; 0xc2aa <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    c2b2:	98 e0       	ldi	r25, 0x08	; 8
    c2b4:	59 9e       	mul	r5, r25
    c2b6:	40 01       	movw	r8, r0
    c2b8:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    c2ba:	53 e0       	ldi	r21, 0x03	; 3
    c2bc:	ee 0c       	add	r14, r14
    c2be:	ff 1c       	adc	r15, r15
    c2c0:	5a 95       	dec	r21
    c2c2:	e1 f7       	brne	.-8      	; 0xc2bc <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    c2c4:	51 2c       	mov	r5, r1
    c2c6:	fc 81       	ldd	r31, Y+4	; 0x04
    c2c8:	5f 16       	cp	r5, r31
    c2ca:	09 f4       	brne	.+2      	; 0xc2ce <collision_detect_level+0x286>
    c2cc:	b1 c0       	rjmp	.+354    	; 0xc430 <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    c2ce:	ed 81       	ldd	r30, Y+5	; 0x05
    c2d0:	fe 81       	ldd	r31, Y+6	; 0x06
    c2d2:	85 81       	ldd	r24, Z+5	; 0x05
    c2d4:	87 ff       	sbrs	r24, 7
    c2d6:	47 c0       	rjmp	.+142    	; 0xc366 <collision_detect_level+0x31e>
    c2d8:	45 2d       	mov	r20, r5
    c2da:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    c2dc:	6a 81       	ldd	r22, Y+2	; 0x02
    c2de:	80 91 d8 0f 	lds	r24, 0x0FD8
    c2e2:	90 91 d9 0f 	lds	r25, 0x0FD9
    c2e6:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c2ea:	28 2e       	mov	r2, r24
    c2ec:	45 2d       	mov	r20, r5
    c2ee:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    c2f0:	6a 81       	ldd	r22, Y+2	; 0x02
    c2f2:	80 91 d8 0f 	lds	r24, 0x0FD8
    c2f6:	90 91 d9 0f 	lds	r25, 0x0FD9
    c2fa:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c2fe:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c300:	82 2d       	mov	r24, r2
    c302:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c306:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c308:	80 2f       	mov	r24, r16
    c30a:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c30e:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c310:	22 20       	and	r2, r2
    c312:	71 f0       	breq	.+28     	; 0xc330 <collision_detect_level+0x2e8>
    c314:	30 91 c2 0d 	lds	r19, 0x0DC2
    c318:	63 2d       	mov	r22, r3
    c31a:	63 1b       	sub	r22, r19
    c31c:	ed 81       	ldd	r30, Y+5	; 0x05
    c31e:	fe 81       	ldd	r31, Y+6	; 0x06
    c320:	82 81       	ldd	r24, Z+2	; 0x02
    c322:	28 e0       	ldi	r18, 0x08	; 8
    c324:	48 e0       	ldi	r20, 0x08	; 8
    c326:	83 1b       	sub	r24, r19
    c328:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c32c:	84 30       	cpi	r24, 0x04	; 4
    c32e:	80 f4       	brcc	.+32     	; 0xc350 <collision_detect_level+0x308>
    c330:	00 23       	and	r16, r16
    c332:	c9 f0       	breq	.+50     	; 0xc366 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c334:	30 91 c2 0d 	lds	r19, 0x0DC2
    c338:	64 2d       	mov	r22, r4
    c33a:	63 1b       	sub	r22, r19
    c33c:	ed 81       	ldd	r30, Y+5	; 0x05
    c33e:	fe 81       	ldd	r31, Y+6	; 0x06
    c340:	82 81       	ldd	r24, Z+2	; 0x02
    c342:	28 e0       	ldi	r18, 0x08	; 8
    c344:	48 e0       	ldi	r20, 0x08	; 8
    c346:	83 1b       	sub	r24, r19
    c348:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c34c:	84 30       	cpi	r24, 0x04	; 4
    c34e:	58 f0       	brcs	.+22     	; 0xc366 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    c350:	ed 81       	ldd	r30, Y+5	; 0x05
    c352:	fe 81       	ldd	r31, Y+6	; 0x06
    c354:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    c356:	71 82       	std	Z+1, r7	; 0x01
    c358:	60 82       	st	Z, r6
    c35a:	20 16       	cp	r2, r16
    c35c:	08 f4       	brcc	.+2      	; 0xc360 <collision_detect_level+0x318>
    c35e:	20 2e       	mov	r2, r16
    c360:	12 15       	cp	r17, r2
    c362:	08 f4       	brcc	.+2      	; 0xc366 <collision_detect_level+0x31e>
    c364:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    c366:	ed 81       	ldd	r30, Y+5	; 0x05
    c368:	fe 81       	ldd	r31, Y+6	; 0x06
    c36a:	85 81       	ldd	r24, Z+5	; 0x05
    c36c:	18 16       	cp	r1, r24
    c36e:	0c f0       	brlt	.+2      	; 0xc372 <collision_detect_level+0x32a>
    c370:	5d c0       	rjmp	.+186    	; 0xc42c <collision_detect_level+0x3e4>
    c372:	60 81       	ld	r22, Z
    c374:	71 81       	ldd	r23, Z+1	; 0x01
    c376:	61 50       	subi	r22, 0x01	; 1
    c378:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    c37a:	68 0d       	add	r22, r8
    c37c:	79 1d       	adc	r23, r9
    c37e:	83 e0       	ldi	r24, 0x03	; 3
    c380:	76 95       	lsr	r23
    c382:	67 95       	ror	r22
    c384:	8a 95       	dec	r24
    c386:	e1 f7       	brne	.-8      	; 0xc380 <collision_detect_level+0x338>
    c388:	45 2d       	mov	r20, r5
    c38a:	4a 0d       	add	r20, r10
    c38c:	80 91 d8 0f 	lds	r24, 0x0FD8
    c390:	90 91 d9 0f 	lds	r25, 0x0FD9
    c394:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c398:	28 2e       	mov	r2, r24
    c39a:	ed 81       	ldd	r30, Y+5	; 0x05
    c39c:	fe 81       	ldd	r31, Y+6	; 0x06
    c39e:	60 81       	ld	r22, Z
    c3a0:	71 81       	ldd	r23, Z+1	; 0x01
    c3a2:	61 50       	subi	r22, 0x01	; 1
    c3a4:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    c3a6:	68 0d       	add	r22, r8
    c3a8:	79 1d       	adc	r23, r9
    c3aa:	93 e0       	ldi	r25, 0x03	; 3
    c3ac:	76 95       	lsr	r23
    c3ae:	67 95       	ror	r22
    c3b0:	9a 95       	dec	r25
    c3b2:	e1 f7       	brne	.-8      	; 0xc3ac <collision_detect_level+0x364>
    c3b4:	45 2d       	mov	r20, r5
    c3b6:	4c 0d       	add	r20, r12
    c3b8:	80 91 d8 0f 	lds	r24, 0x0FD8
    c3bc:	90 91 d9 0f 	lds	r25, 0x0FD9
    c3c0:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <get_level_tile>
    c3c4:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c3c6:	82 2d       	mov	r24, r2
    c3c8:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c3cc:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c3ce:	80 2f       	mov	r24, r16
    c3d0:	0e 94 1a 5d 	call	0xba34	; 0xba34 <solid_or_hazard_tile>
    c3d4:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c3d6:	22 20       	and	r2, r2
    c3d8:	71 f0       	breq	.+28     	; 0xc3f6 <collision_detect_level+0x3ae>
    c3da:	30 91 c2 0d 	lds	r19, 0x0DC2
    c3de:	63 2d       	mov	r22, r3
    c3e0:	63 1b       	sub	r22, r19
    c3e2:	ed 81       	ldd	r30, Y+5	; 0x05
    c3e4:	fe 81       	ldd	r31, Y+6	; 0x06
    c3e6:	82 81       	ldd	r24, Z+2	; 0x02
    c3e8:	28 e0       	ldi	r18, 0x08	; 8
    c3ea:	48 e0       	ldi	r20, 0x08	; 8
    c3ec:	83 1b       	sub	r24, r19
    c3ee:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c3f2:	84 30       	cpi	r24, 0x04	; 4
    c3f4:	80 f4       	brcc	.+32     	; 0xc416 <collision_detect_level+0x3ce>
    c3f6:	00 23       	and	r16, r16
    c3f8:	c9 f0       	breq	.+50     	; 0xc42c <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c3fa:	30 91 c2 0d 	lds	r19, 0x0DC2
    c3fe:	64 2d       	mov	r22, r4
    c400:	63 1b       	sub	r22, r19
    c402:	ed 81       	ldd	r30, Y+5	; 0x05
    c404:	fe 81       	ldd	r31, Y+6	; 0x06
    c406:	82 81       	ldd	r24, Z+2	; 0x02
    c408:	28 e0       	ldi	r18, 0x08	; 8
    c40a:	48 e0       	ldi	r20, 0x08	; 8
    c40c:	83 1b       	sub	r24, r19
    c40e:	0e 94 17 60 	call	0xc02e	; 0xc02e <pixel_overlap>
    c412:	84 30       	cpi	r24, 0x04	; 4
    c414:	58 f0       	brcs	.+22     	; 0xc42c <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    c416:	ed 81       	ldd	r30, Y+5	; 0x05
    c418:	fe 81       	ldd	r31, Y+6	; 0x06
    c41a:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    c41c:	f1 82       	std	Z+1, r15	; 0x01
    c41e:	e0 82       	st	Z, r14
    c420:	20 16       	cp	r2, r16
    c422:	08 f4       	brcc	.+2      	; 0xc426 <collision_detect_level+0x3de>
    c424:	20 2e       	mov	r2, r16
    c426:	12 15       	cp	r17, r2
    c428:	08 f4       	brcc	.+2      	; 0xc42c <collision_detect_level+0x3e4>
    c42a:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    c42c:	53 94       	inc	r5
    c42e:	4b cf       	rjmp	.-362    	; 0xc2c6 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    c430:	81 2f       	mov	r24, r17
    c432:	26 96       	adiw	r28, 0x06	; 6
    c434:	0f b6       	in	r0, 0x3f	; 63
    c436:	f8 94       	cli
    c438:	de bf       	out	0x3e, r29	; 62
    c43a:	0f be       	out	0x3f, r0	; 63
    c43c:	cd bf       	out	0x3d, r28	; 61
    c43e:	df 91       	pop	r29
    c440:	cf 91       	pop	r28
    c442:	1f 91       	pop	r17
    c444:	0f 91       	pop	r16
    c446:	ff 90       	pop	r15
    c448:	ef 90       	pop	r14
    c44a:	df 90       	pop	r13
    c44c:	cf 90       	pop	r12
    c44e:	bf 90       	pop	r11
    c450:	af 90       	pop	r10
    c452:	9f 90       	pop	r9
    c454:	8f 90       	pop	r8
    c456:	7f 90       	pop	r7
    c458:	6f 90       	pop	r6
    c45a:	5f 90       	pop	r5
    c45c:	4f 90       	pop	r4
    c45e:	3f 90       	pop	r3
    c460:	2f 90       	pop	r2
    c462:	08 95       	ret

0000c464 <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    c464:	2f 92       	push	r2
    c466:	3f 92       	push	r3
    c468:	4f 92       	push	r4
    c46a:	5f 92       	push	r5
    c46c:	6f 92       	push	r6
    c46e:	7f 92       	push	r7
    c470:	8f 92       	push	r8
    c472:	9f 92       	push	r9
    c474:	af 92       	push	r10
    c476:	bf 92       	push	r11
    c478:	cf 92       	push	r12
    c47a:	df 92       	push	r13
    c47c:	ef 92       	push	r14
    c47e:	ff 92       	push	r15
    c480:	0f 93       	push	r16
    c482:	1f 93       	push	r17
    c484:	cf 93       	push	r28
    c486:	df 93       	push	r29
    c488:	00 d0       	rcall	.+0      	; 0xc48a <animate_shot+0x26>
    c48a:	00 d0       	rcall	.+0      	; 0xc48c <animate_shot+0x28>
    c48c:	00 d0       	rcall	.+0      	; 0xc48e <animate_shot+0x2a>
    c48e:	cd b7       	in	r28, 0x3d	; 61
    c490:	de b7       	in	r29, 0x3e	; 62
    c492:	2c 01       	movw	r4, r24
    c494:	3b 01       	movw	r6, r22
    c496:	d4 2e       	mov	r13, r20
    c498:	4c 01       	movw	r8, r24
    c49a:	29 e1       	ldi	r18, 0x19	; 25
    c49c:	82 0e       	add	r8, r18
    c49e:	91 1c       	adc	r9, r1
    c4a0:	40 96       	adiw	r24, 0x10	; 16
    c4a2:	9e 83       	std	Y+6, r25	; 0x06
    c4a4:	8d 83       	std	Y+5, r24	; 0x05
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c4a6:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    c4a8:	30 e1       	ldi	r19, 0x10	; 16
    c4aa:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    c4ac:	f4 01       	movw	r30, r8
    c4ae:	80 81       	ld	r24, Z
    c4b0:	88 23       	and	r24, r24
    c4b2:	09 f4       	brne	.+2      	; 0xc4b6 <animate_shot+0x52>
    c4b4:	13 c1       	rjmp	.+550    	; 0xc6dc <animate_shot+0x278>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    c4b6:	60 91 d4 0d 	lds	r22, 0x0DD4
    c4ba:	34 97       	sbiw	r30, 0x04	; 4
    c4bc:	80 81       	ld	r24, Z
    c4be:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBMoveDelta>
    c4c2:	88 0f       	add	r24, r24
    c4c4:	99 1f       	adc	r25, r25
    c4c6:	ed 81       	ldd	r30, Y+5	; 0x05
    c4c8:	fe 81       	ldd	r31, Y+6	; 0x06
    c4ca:	20 81       	ld	r18, Z
    c4cc:	31 81       	ldd	r19, Z+1	; 0x01
    c4ce:	82 0f       	add	r24, r18
    c4d0:	93 1f       	adc	r25, r19
    c4d2:	91 83       	std	Z+1, r25	; 0x01
    c4d4:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    c4d6:	60 91 d4 0d 	lds	r22, 0x0DD4
    c4da:	f4 01       	movw	r30, r8
    c4dc:	35 97       	sbiw	r30, 0x05	; 5
    c4de:	80 81       	ld	r24, Z
    c4e0:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBMoveDelta>
    c4e4:	ed 81       	ldd	r30, Y+5	; 0x05
    c4e6:	fe 81       	ldd	r31, Y+6	; 0x06
    c4e8:	42 81       	ldd	r20, Z+2	; 0x02
    c4ea:	53 81       	ldd	r21, Z+3	; 0x03
    c4ec:	84 0f       	add	r24, r20
    c4ee:	95 1f       	adc	r25, r21
    c4f0:	93 83       	std	Z+3, r25	; 0x03
    c4f2:	82 83       	std	Z+2, r24	; 0x02
    c4f4:	f1 2e       	mov	r15, r17
    c4f6:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    c4f8:	90 91 c2 0d 	lds	r25, 0x0DC2
    c4fc:	48 2f       	mov	r20, r24
    c4fe:	49 1b       	sub	r20, r25
    c500:	60 81       	ld	r22, Z
    c502:	80 91 ba 0d 	lds	r24, 0x0DBA
    c506:	68 1b       	sub	r22, r24
    c508:	01 e0       	ldi	r16, 0x01	; 1
    c50a:	21 e0       	ldi	r18, 0x01	; 1
    c50c:	8f 2d       	mov	r24, r15
    c50e:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    c512:	8d 81       	ldd	r24, Y+5	; 0x05
    c514:	9e 81       	ldd	r25, Y+6	; 0x06
    c516:	0e 94 80 5f 	call	0xbf00	; 0xbf00 <out_of_bounds>
    c51a:	81 11       	cpse	r24, r1
    c51c:	d2 c0       	rjmp	.+420    	; 0xc6c2 <animate_shot+0x25e>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    c51e:	41 e0       	ldi	r20, 0x01	; 1
    c520:	61 e0       	ldi	r22, 0x01	; 1
    c522:	8d 81       	ldd	r24, Y+5	; 0x05
    c524:	9e 81       	ldd	r25, Y+6	; 0x06
    c526:	0e 94 24 60 	call	0xc048	; 0xc048 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    c52a:	81 11       	cpse	r24, r1
    c52c:	ca c0       	rjmp	.+404    	; 0xc6c2 <animate_shot+0x25e>
    c52e:	8f ed       	ldi	r24, 0xDF	; 223
    c530:	28 2e       	mov	r2, r24
    c532:	8e e0       	ldi	r24, 0x0E	; 14
    c534:	38 2e       	mov	r3, r24
    c536:	1a 82       	std	Y+2, r1	; 0x02
    c538:	19 82       	std	Y+1, r1	; 0x01
    c53a:	94 01       	movw	r18, r8
    c53c:	21 50       	subi	r18, 0x01	; 1
    c53e:	31 09       	sbc	r19, r1
    c540:	3c 83       	std	Y+4, r19	; 0x04
    c542:	2b 83       	std	Y+3, r18	; 0x03
    c544:	f1 01       	movw	r30, r2
    c546:	34 97       	sbiw	r30, 0x04	; 4
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c548:	80 81       	ld	r24, Z
    c54a:	82 30       	cpi	r24, 0x02	; 2
    c54c:	09 f4       	brne	.+2      	; 0xc550 <animate_shot+0xec>
    c54e:	65 c0       	rjmp	.+202    	; 0xc61a <animate_shot+0x1b6>
    c550:	35 97       	sbiw	r30, 0x05	; 5
    c552:	80 81       	ld	r24, Z
    c554:	88 23       	and	r24, r24
    c556:	09 f4       	brne	.+2      	; 0xc55a <animate_shot+0xf6>
    c558:	60 c0       	rjmp	.+192    	; 0xc61a <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c55a:	90 91 ba 0d 	lds	r25, 0x0DBA
    c55e:	34 96       	adiw	r30, 0x04	; 4
    c560:	a0 80       	ld	r10, Z
    c562:	aa 0c       	add	r10, r10
    c564:	aa 0c       	add	r10, r10
    c566:	aa 0c       	add	r10, r10
    c568:	31 97       	sbiw	r30, 0x01	; 1
    c56a:	c0 80       	ld	r12, Z
    c56c:	cc 0c       	add	r12, r12
    c56e:	cc 0c       	add	r12, r12
    c570:	cc 0c       	add	r12, r12
    c572:	3a 97       	sbiw	r30, 0x0a	; 10
    c574:	00 81       	ld	r16, Z
    c576:	09 1b       	sub	r16, r25
    c578:	ed 81       	ldd	r30, Y+5	; 0x05
    c57a:	fe 81       	ldd	r31, Y+6	; 0x06
    c57c:	80 81       	ld	r24, Z
    c57e:	f1 01       	movw	r30, r2
    c580:	3e 97       	sbiw	r30, 0x0e	; 14
    c582:	e0 80       	ld	r14, Z
    c584:	28 e0       	ldi	r18, 0x08	; 8
    c586:	48 e0       	ldi	r20, 0x08	; 8
    c588:	ed 81       	ldd	r30, Y+5	; 0x05
    c58a:	fe 81       	ldd	r31, Y+6	; 0x06
    c58c:	62 81       	ldd	r22, Z+2	; 0x02
    c58e:	89 1b       	sub	r24, r25
    c590:	0e 94 24 52 	call	0xa448	; 0xa448 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c594:	88 23       	and	r24, r24
    c596:	09 f4       	brne	.+2      	; 0xc59a <animate_shot+0x136>
    c598:	40 c0       	rjmp	.+128    	; 0xc61a <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    c59a:	41 e0       	ldi	r20, 0x01	; 1
    c59c:	6f ef       	ldi	r22, 0xFF	; 255
    c59e:	84 e0       	ldi	r24, 0x04	; 4
    c5a0:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    c5a4:	f1 01       	movw	r30, r2
    c5a6:	80 81       	ld	r24, Z
    c5a8:	eb 81       	ldd	r30, Y+3	; 0x03
    c5aa:	fc 81       	ldd	r31, Y+4	; 0x04
    c5ac:	90 81       	ld	r25, Z
    c5ae:	89 1b       	sub	r24, r25
    c5b0:	f1 01       	movw	r30, r2
    c5b2:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    c5b4:	18 16       	cp	r1, r24
    c5b6:	24 f1       	brlt	.+72     	; 0xc600 <animate_shot+0x19c>
						{
							SFX_ENEMY_EXPLODE;
    c5b8:	41 e0       	ldi	r20, 0x01	; 1
    c5ba:	6f ef       	ldi	r22, 0xFF	; 255
    c5bc:	86 e0       	ldi	r24, 0x06	; 6
    c5be:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    c5c2:	45 e3       	ldi	r20, 0x35	; 53
    c5c4:	29 81       	ldd	r18, Y+1	; 0x01
    c5c6:	3a 81       	ldd	r19, Y+2	; 0x02
    c5c8:	42 9f       	mul	r20, r18
    c5ca:	c0 01       	movw	r24, r0
    c5cc:	43 9f       	mul	r20, r19
    c5ce:	90 0d       	add	r25, r0
    c5d0:	11 24       	eor	r1, r1
    c5d2:	86 54       	subi	r24, 0x46	; 70
    c5d4:	92 4f       	sbci	r25, 0xF2	; 242
    c5d6:	fc 01       	movw	r30, r24
    c5d8:	e3 5e       	subi	r30, 0xE3	; 227
    c5da:	fe 4f       	sbci	r31, 0xFE	; 254
    c5dc:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    c5de:	31 97       	sbiw	r30, 0x01	; 1
    c5e0:	10 82       	st	Z, r1
							game.active_enemies--;
    c5e2:	80 91 d5 0d 	lds	r24, 0x0DD5
    c5e6:	81 50       	subi	r24, 0x01	; 1
    c5e8:	80 93 d5 0d 	sts	0x0DD5, r24
							game.level_score += KILL_SCORE;
    c5ec:	80 91 be 0d 	lds	r24, 0x0DBE
    c5f0:	90 91 bf 0d 	lds	r25, 0x0DBF
    c5f4:	0a 96       	adiw	r24, 0x0a	; 10
    c5f6:	90 93 bf 0d 	sts	0x0DBF, r25
    c5fa:	80 93 be 0d 	sts	0x0DBE, r24
							break;
    c5fe:	1b c0       	rjmp	.+54     	; 0xc636 <animate_shot+0x1d2>
						}
						player->shot[i].active = 0;
    c600:	f4 01       	movw	r30, r8
    c602:	10 82       	st	Z, r1
						player->active_shots--;
    c604:	f2 01       	movw	r30, r4
    c606:	87 81       	ldd	r24, Z+7	; 0x07
    c608:	81 50       	subi	r24, 0x01	; 1
    c60a:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c60c:	01 e0       	ldi	r16, 0x01	; 1
    c60e:	21 e0       	ldi	r18, 0x01	; 1
    c610:	40 e0       	ldi	r20, 0x00	; 0
    c612:	60 ee       	ldi	r22, 0xE0	; 224
    c614:	8f 2d       	mov	r24, r15
    c616:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
    c61a:	29 81       	ldd	r18, Y+1	; 0x01
    c61c:	3a 81       	ldd	r19, Y+2	; 0x02
    c61e:	2f 5f       	subi	r18, 0xFF	; 255
    c620:	3f 4f       	sbci	r19, 0xFF	; 255
    c622:	3a 83       	std	Y+2, r19	; 0x02
    c624:	29 83       	std	Y+1, r18	; 0x01
    c626:	35 e3       	ldi	r19, 0x35	; 53
    c628:	23 0e       	add	r2, r19
    c62a:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    c62c:	89 81       	ldd	r24, Y+1	; 0x01
    c62e:	9a 81       	ldd	r25, Y+2	; 0x02
    c630:	05 97       	sbiw	r24, 0x05	; 5
    c632:	09 f0       	breq	.+2      	; 0xc636 <animate_shot+0x1d2>
    c634:	87 cf       	rjmp	.-242    	; 0xc544 <animate_shot+0xe0>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    c636:	f3 01       	movw	r30, r6
    c638:	85 85       	ldd	r24, Z+13	; 0x0d
    c63a:	88 23       	and	r24, r24
    c63c:	09 f4       	brne	.+2      	; 0xc640 <animate_shot+0x1dc>
    c63e:	4e c0       	rjmp	.+156    	; 0xc6dc <animate_shot+0x278>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c640:	90 91 ba 0d 	lds	r25, 0x0DBA
    c644:	a4 84       	ldd	r10, Z+12	; 0x0c
    c646:	aa 0c       	add	r10, r10
    c648:	aa 0c       	add	r10, r10
    c64a:	aa 0c       	add	r10, r10
    c64c:	c3 84       	ldd	r12, Z+11	; 0x0b
    c64e:	cc 0c       	add	r12, r12
    c650:	cc 0c       	add	r12, r12
    c652:	cc 0c       	add	r12, r12
    c654:	00 81       	ld	r16, Z
    c656:	09 1b       	sub	r16, r25
    c658:	ed 81       	ldd	r30, Y+5	; 0x05
    c65a:	fe 81       	ldd	r31, Y+6	; 0x06
    c65c:	80 81       	ld	r24, Z
    c65e:	f3 01       	movw	r30, r6
    c660:	e2 80       	ldd	r14, Z+2	; 0x02
    c662:	28 e0       	ldi	r18, 0x08	; 8
    c664:	48 e0       	ldi	r20, 0x08	; 8
    c666:	ed 81       	ldd	r30, Y+5	; 0x05
    c668:	fe 81       	ldd	r31, Y+6	; 0x06
    c66a:	62 81       	ldd	r22, Z+2	; 0x02
    c66c:	89 1b       	sub	r24, r25
    c66e:	0e 94 24 52 	call	0xa448	; 0xa448 <LBCollides>
    c672:	88 23       	and	r24, r24
    c674:	99 f1       	breq	.+102    	; 0xc6dc <animate_shot+0x278>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    c676:	41 e0       	ldi	r20, 0x01	; 1
    c678:	6f ef       	ldi	r22, 0xFF	; 255
    c67a:	84 e0       	ldi	r24, 0x04	; 4
    c67c:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    c680:	f3 01       	movw	r30, r6
    c682:	87 85       	ldd	r24, Z+15	; 0x0f
    c684:	f4 01       	movw	r30, r8
    c686:	31 97       	sbiw	r30, 0x01	; 1
    c688:	90 81       	ld	r25, Z
    c68a:	89 1b       	sub	r24, r25
    c68c:	f3 01       	movw	r30, r6
    c68e:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    c690:	18 16       	cp	r1, r24
    c692:	bc f0       	brlt	.+46     	; 0xc6c2 <animate_shot+0x25e>
							{
								SFX_PLAYER_EXPLODE;
    c694:	41 e0       	ldi	r20, 0x01	; 1
    c696:	6f ef       	ldi	r22, 0xFF	; 255
    c698:	85 e0       	ldi	r24, 0x05	; 5
    c69a:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
								other_player->shield = 0;
    c69e:	f3 01       	movw	r30, r6
    c6a0:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    c6a2:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    c6a4:	f4 e5       	ldi	r31, 0x54	; 84
    c6a6:	6f 16       	cp	r6, r31
    c6a8:	fe e0       	ldi	r31, 0x0E	; 14
    c6aa:	7f 06       	cpc	r7, r31
    c6ac:	51 f4       	brne	.+20     	; 0xc6c2 <animate_shot+0x25e>
    c6ae:	80 91 be 0d 	lds	r24, 0x0DBE
    c6b2:	90 91 bf 0d 	lds	r25, 0x0DBF
    c6b6:	8c 59       	subi	r24, 0x9C	; 156
    c6b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c6ba:	90 93 bf 0d 	sts	0x0DBF, r25
    c6be:	80 93 be 0d 	sts	0x0DBE, r24
							}
							player->shot[i].active = 0;
    c6c2:	f4 01       	movw	r30, r8
    c6c4:	10 82       	st	Z, r1
							player->active_shots--;
    c6c6:	f2 01       	movw	r30, r4
    c6c8:	87 81       	ldd	r24, Z+7	; 0x07
    c6ca:	81 50       	subi	r24, 0x01	; 1
    c6cc:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c6ce:	01 e0       	ldi	r16, 0x01	; 1
    c6d0:	21 e0       	ldi	r18, 0x01	; 1
    c6d2:	40 e0       	ldi	r20, 0x00	; 0
    c6d4:	60 ee       	ldi	r22, 0xE0	; 224
    c6d6:	8f 2d       	mov	r24, r15
    c6d8:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c6dc:	1f 5f       	subi	r17, 0xFF	; 255
    c6de:	f4 e1       	ldi	r31, 0x14	; 20
    c6e0:	8f 0e       	add	r8, r31
    c6e2:	91 1c       	adc	r9, r1
    c6e4:	2d 81       	ldd	r18, Y+5	; 0x05
    c6e6:	3e 81       	ldd	r19, Y+6	; 0x06
    c6e8:	2c 5e       	subi	r18, 0xEC	; 236
    c6ea:	3f 4f       	sbci	r19, 0xFF	; 255
    c6ec:	3e 83       	std	Y+6, r19	; 0x06
    c6ee:	2d 83       	std	Y+5, r18	; 0x05
    c6f0:	13 30       	cpi	r17, 0x03	; 3
    c6f2:	09 f0       	breq	.+2      	; 0xc6f6 <animate_shot+0x292>
    c6f4:	db ce       	rjmp	.-586    	; 0xc4ac <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    c6f6:	26 96       	adiw	r28, 0x06	; 6
    c6f8:	0f b6       	in	r0, 0x3f	; 63
    c6fa:	f8 94       	cli
    c6fc:	de bf       	out	0x3e, r29	; 62
    c6fe:	0f be       	out	0x3f, r0	; 63
    c700:	cd bf       	out	0x3d, r28	; 61
    c702:	df 91       	pop	r29
    c704:	cf 91       	pop	r28
    c706:	1f 91       	pop	r17
    c708:	0f 91       	pop	r16
    c70a:	ff 90       	pop	r15
    c70c:	ef 90       	pop	r14
    c70e:	df 90       	pop	r13
    c710:	cf 90       	pop	r12
    c712:	bf 90       	pop	r11
    c714:	af 90       	pop	r10
    c716:	9f 90       	pop	r9
    c718:	8f 90       	pop	r8
    c71a:	7f 90       	pop	r7
    c71c:	6f 90       	pop	r6
    c71e:	5f 90       	pop	r5
    c720:	4f 90       	pop	r4
    c722:	3f 90       	pop	r3
    c724:	2f 90       	pop	r2
    c726:	08 95       	ret

0000c728 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c728:	7f 92       	push	r7
    c72a:	8f 92       	push	r8
    c72c:	9f 92       	push	r9
    c72e:	af 92       	push	r10
    c730:	bf 92       	push	r11
    c732:	cf 92       	push	r12
    c734:	df 92       	push	r13
    c736:	ef 92       	push	r14
    c738:	ff 92       	push	r15
    c73a:	0f 93       	push	r16
    c73c:	1f 93       	push	r17
    c73e:	cf 93       	push	r28
    c740:	df 93       	push	r29
    c742:	1f 92       	push	r1
    c744:	cd b7       	in	r28, 0x3d	; 61
    c746:	de b7       	in	r29, 0x3e	; 62
    c748:	6c 01       	movw	r12, r24
    c74a:	7b 01       	movw	r14, r22
    c74c:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c74e:	cb 01       	movw	r24, r22
    c750:	29 83       	std	Y+1, r18	; 0x01
    c752:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    c756:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c758:	29 81       	ldd	r18, Y+1	; 0x01
    c75a:	20 9f       	mul	r18, r16
    c75c:	50 01       	movw	r10, r0
    c75e:	11 24       	eor	r1, r1
    c760:	10 e0       	ldi	r17, 0x00	; 0
    c762:	81 2f       	mov	r24, r17
    c764:	90 e0       	ldi	r25, 0x00	; 0
    c766:	8a 15       	cp	r24, r10
    c768:	9b 05       	cpc	r25, r11
    c76a:	54 f4       	brge	.+20     	; 0xc780 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c76c:	40 e0       	ldi	r20, 0x00	; 0
    c76e:	b4 01       	movw	r22, r8
    c770:	81 2f       	mov	r24, r17
    c772:	87 0d       	add	r24, r7
    c774:	29 83       	std	Y+1, r18	; 0x01
    c776:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c77a:	1f 5f       	subi	r17, 0xFF	; 255
    c77c:	29 81       	ldd	r18, Y+1	; 0x01
    c77e:	f1 cf       	rjmp	.-30     	; 0xc762 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c780:	f7 01       	movw	r30, r14
    c782:	84 81       	ldd	r24, Z+4	; 0x04
    c784:	88 23       	and	r24, r24
    c786:	51 f0       	breq	.+20     	; 0xc79c <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c788:	f6 01       	movw	r30, r12
    c78a:	80 81       	ld	r24, Z
    c78c:	90 e1       	ldi	r25, 0x10	; 16
    c78e:	98 27       	eor	r25, r24
    c790:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c792:	40 e0       	ldi	r20, 0x00	; 0
    c794:	60 ee       	ldi	r22, 0xE0	; 224
    c796:	87 2d       	mov	r24, r7
    c798:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	}
	return anim->looped;
}
    c79c:	f7 01       	movw	r30, r14
    c79e:	84 81       	ldd	r24, Z+4	; 0x04
    c7a0:	0f 90       	pop	r0
    c7a2:	df 91       	pop	r29
    c7a4:	cf 91       	pop	r28
    c7a6:	1f 91       	pop	r17
    c7a8:	0f 91       	pop	r16
    c7aa:	ff 90       	pop	r15
    c7ac:	ef 90       	pop	r14
    c7ae:	df 90       	pop	r13
    c7b0:	cf 90       	pop	r12
    c7b2:	bf 90       	pop	r11
    c7b4:	af 90       	pop	r10
    c7b6:	9f 90       	pop	r9
    c7b8:	8f 90       	pop	r8
    c7ba:	7f 90       	pop	r7
    c7bc:	08 95       	ret

0000c7be <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c7be:	8f 92       	push	r8
    c7c0:	9f 92       	push	r9
    c7c2:	af 92       	push	r10
    c7c4:	bf 92       	push	r11
    c7c6:	cf 92       	push	r12
    c7c8:	df 92       	push	r13
    c7ca:	ef 92       	push	r14
    c7cc:	ff 92       	push	r15
    c7ce:	0f 93       	push	r16
    c7d0:	1f 93       	push	r17
    c7d2:	cf 93       	push	r28
    c7d4:	df 93       	push	r29
    c7d6:	ec 01       	movw	r28, r24
    c7d8:	c6 2e       	mov	r12, r22
    c7da:	14 2f       	mov	r17, r20
    c7dc:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c7de:	6c 81       	ldd	r22, Y+4	; 0x04
    c7e0:	77 27       	eor	r23, r23
    c7e2:	67 fd       	sbrc	r22, 7
    c7e4:	70 95       	com	r23
    c7e6:	87 2f       	mov	r24, r23
    c7e8:	97 2f       	mov	r25, r23
    c7ea:	0e 94 0e 76 	call	0xec1c	; 0xec1c <__floatsisf>
    c7ee:	4b 01       	movw	r8, r22
    c7f0:	5c 01       	movw	r10, r24
    c7f2:	8e 81       	ldd	r24, Y+6	; 0x06
    c7f4:	68 2f       	mov	r22, r24
    c7f6:	70 e0       	ldi	r23, 0x00	; 0
    c7f8:	80 e0       	ldi	r24, 0x00	; 0
    c7fa:	90 e0       	ldi	r25, 0x00	; 0
    c7fc:	0e 94 0e 76 	call	0xec1c	; 0xec1c <__floatsisf>
    c800:	29 e8       	ldi	r18, 0x89	; 137
    c802:	38 e8       	ldi	r19, 0x88	; 136
    c804:	48 e8       	ldi	r20, 0x88	; 136
    c806:	5c e3       	ldi	r21, 0x3C	; 60
    c808:	0e 94 9a 76 	call	0xed34	; 0xed34 <__mulsf3>
    c80c:	9b 01       	movw	r18, r22
    c80e:	ac 01       	movw	r20, r24
    c810:	c5 01       	movw	r24, r10
    c812:	b4 01       	movw	r22, r8
    c814:	0e 94 77 75 	call	0xeaee	; 0xeaee <__addsf3>
    c818:	0e 94 db 75 	call	0xebb6	; 0xebb6 <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c81c:	69 37       	cpi	r22, 0x79	; 121
    c81e:	14 f4       	brge	.+4      	; 0xc824 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c820:	6c 83       	std	Y+4, r22	; 0x04
    c822:	02 c0       	rjmp	.+4      	; 0xc828 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c824:	88 e7       	ldi	r24, 0x78	; 120
    c826:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c828:	60 91 d4 0d 	lds	r22, 0x0DD4
    c82c:	8d 81       	ldd	r24, Y+5	; 0x05
    c82e:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBMoveDelta>
    c832:	28 81       	ld	r18, Y
    c834:	39 81       	ldd	r19, Y+1	; 0x01
    c836:	82 0f       	add	r24, r18
    c838:	93 1f       	adc	r25, r19
    c83a:	99 83       	std	Y+1, r25	; 0x01
    c83c:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c83e:	60 91 d4 0d 	lds	r22, 0x0DD4
    c842:	8c 81       	ldd	r24, Y+4	; 0x04
    c844:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBMoveDelta>
    c848:	ea 81       	ldd	r30, Y+2	; 0x02
    c84a:	fb 81       	ldd	r31, Y+3	; 0x03
    c84c:	8e 0f       	add	r24, r30
    c84e:	9f 1f       	adc	r25, r31
    c850:	9b 83       	std	Y+3, r25	; 0x03
    c852:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c854:	4d 2d       	mov	r20, r13
    c856:	61 2f       	mov	r22, r17
    c858:	ce 01       	movw	r24, r28
    c85a:	0e 94 24 60 	call	0xc048	; 0xc048 <collision_detect_level>
    c85e:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c860:	88 23       	and	r24, r24
    c862:	41 f0       	breq	.+16     	; 0xc874 <animate_sprite+0xb6>
    c864:	00 23       	and	r16, r16
    c866:	31 f0       	breq	.+12     	; 0xc874 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c868:	88 e0       	ldi	r24, 0x08	; 8
    c86a:	e8 9e       	mul	r14, r24
    c86c:	70 01       	movw	r14, r0
    c86e:	11 24       	eor	r1, r1
    c870:	fb 82       	std	Y+3, r15	; 0x03
    c872:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c874:	3a 81       	ldd	r19, Y+2	; 0x02
    c876:	80 91 c2 0d 	lds	r24, 0x0DC2
    c87a:	43 2f       	mov	r20, r19
    c87c:	48 1b       	sub	r20, r24
    c87e:	98 81       	ld	r25, Y
    c880:	80 91 ba 0d 	lds	r24, 0x0DBA
    c884:	69 2f       	mov	r22, r25
    c886:	68 1b       	sub	r22, r24
    c888:	0d 2d       	mov	r16, r13
    c88a:	21 2f       	mov	r18, r17
    c88c:	8c 2d       	mov	r24, r12
    c88e:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	return result;
}
    c892:	8b 2d       	mov	r24, r11
    c894:	df 91       	pop	r29
    c896:	cf 91       	pop	r28
    c898:	1f 91       	pop	r17
    c89a:	0f 91       	pop	r16
    c89c:	ff 90       	pop	r15
    c89e:	ef 90       	pop	r14
    c8a0:	df 90       	pop	r13
    c8a2:	cf 90       	pop	r12
    c8a4:	bf 90       	pop	r11
    c8a6:	af 90       	pop	r10
    c8a8:	9f 90       	pop	r9
    c8aa:	8f 90       	pop	r8
    c8ac:	08 95       	ret

0000c8ae <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c8ae:	af 92       	push	r10
    c8b0:	cf 92       	push	r12
    c8b2:	ef 92       	push	r14
    c8b4:	0f 93       	push	r16
    c8b6:	1f 93       	push	r17
    c8b8:	cf 93       	push	r28
    c8ba:	df 93       	push	r29
    c8bc:	ec 01       	movw	r28, r24
    c8be:	14 2f       	mov	r17, r20
	if (player->flags & EXPLODING)
    c8c0:	88 85       	ldd	r24, Y+8	; 0x08
    c8c2:	84 ff       	sbrs	r24, 4
    c8c4:	10 c0       	rjmp	.+32     	; 0xc8e6 <animate_player+0x38>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c8c6:	9a 81       	ldd	r25, Y+2	; 0x02
    c8c8:	80 91 c2 0d 	lds	r24, 0x0DC2
    c8cc:	49 2f       	mov	r20, r25
    c8ce:	48 1b       	sub	r20, r24
    c8d0:	98 81       	ld	r25, Y
    c8d2:	80 91 ba 0d 	lds	r24, 0x0DBA
    c8d6:	69 2f       	mov	r22, r25
    c8d8:	68 1b       	sub	r22, r24
    c8da:	0c 85       	ldd	r16, Y+12	; 0x0c
    c8dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    c8de:	81 2f       	mov	r24, r17
    c8e0:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
    c8e4:	38 c0       	rjmp	.+112    	; 0xc956 <animate_player+0xa8>
	}
	else if (!DEBUG_GODMODE && other_player == &game.player && LBCollides(player->shared.x-game.camera_x,player->shared.y, player->width*8, player->height*8,
    c8e6:	69 5d       	subi	r22, 0xD9	; 217
    c8e8:	7d 40       	sbci	r23, 0x0D	; 13
    c8ea:	09 f5       	brne	.+66     	; 0xc92e <animate_player+0x80>
    c8ec:	30 91 ba 0d 	lds	r19, 0x0DBA
    c8f0:	a0 90 e5 0d 	lds	r10, 0x0DE5
    c8f4:	aa 0c       	add	r10, r10
    c8f6:	aa 0c       	add	r10, r10
    c8f8:	aa 0c       	add	r10, r10
    c8fa:	c0 90 e4 0d 	lds	r12, 0x0DE4
    c8fe:	cc 0c       	add	r12, r12
    c900:	cc 0c       	add	r12, r12
    c902:	cc 0c       	add	r12, r12
    c904:	00 91 d9 0d 	lds	r16, 0x0DD9
    c908:	03 1b       	sub	r16, r19
    c90a:	2c 85       	ldd	r18, Y+12	; 0x0c
    c90c:	22 0f       	add	r18, r18
    c90e:	22 0f       	add	r18, r18
    c910:	22 0f       	add	r18, r18
    c912:	9b 85       	ldd	r25, Y+11	; 0x0b
    c914:	49 2f       	mov	r20, r25
    c916:	44 0f       	add	r20, r20
    c918:	44 0f       	add	r20, r20
    c91a:	44 0f       	add	r20, r20
    c91c:	88 81       	ld	r24, Y
    c91e:	e0 90 db 0d 	lds	r14, 0x0DDB
    c922:	6a 81       	ldd	r22, Y+2	; 0x02
    c924:	83 1b       	sub	r24, r19
    c926:	0e 94 24 52 	call	0xa448	; 0xa448 <LBCollides>
    c92a:	81 11       	cpse	r24, r1
    c92c:	0a c0       	rjmp	.+20     	; 0xc942 <animate_player+0x94>
	{
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
	}
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c92e:	e1 2c       	mov	r14, r1
    c930:	00 e0       	ldi	r16, 0x00	; 0
    c932:	2c 85       	ldd	r18, Y+12	; 0x0c
    c934:	4b 85       	ldd	r20, Y+11	; 0x0b
    c936:	61 2f       	mov	r22, r17
    c938:	ce 01       	movw	r24, r28
    c93a:	0e 94 df 63 	call	0xc7be	; 0xc7be <animate_sprite>
    c93e:	82 30       	cpi	r24, 0x02	; 2
    c940:	50 f0       	brcs	.+20     	; 0xc956 <animate_player+0xa8>
	{
		SFX_PLAYER_EXPLODE;
    c942:	41 e0       	ldi	r20, 0x01	; 1
    c944:	6f ef       	ldi	r22, 0xFF	; 255
    c946:	85 e0       	ldi	r24, 0x05	; 5
    c948:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
		game.player.shield = 0;
    c94c:	10 92 e8 0d 	sts	0x0DE8, r1
		game.player.flags = EXPLODING;
    c950:	80 e1       	ldi	r24, 0x10	; 16
    c952:	80 93 e1 0d 	sts	0x0DE1, r24
	}
}
    c956:	df 91       	pop	r29
    c958:	cf 91       	pop	r28
    c95a:	1f 91       	pop	r17
    c95c:	0f 91       	pop	r16
    c95e:	ef 90       	pop	r14
    c960:	cf 90       	pop	r12
    c962:	af 90       	pop	r10
    c964:	08 95       	ret

0000c966 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c966:	1f 93       	push	r17
    c968:	cf 93       	push	r28
    c96a:	df 93       	push	r29
    c96c:	ec 01       	movw	r28, r24
    c96e:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c970:	98 85       	ldd	r25, Y+8	; 0x08
    c972:	89 2f       	mov	r24, r25
    c974:	88 70       	andi	r24, 0x08	; 8
    c976:	93 ff       	sbrs	r25, 3
    c978:	14 c0       	rjmp	.+40     	; 0xc9a2 <update_spider_enemy+0x3c>
    c97a:	2d 85       	ldd	r18, Y+13	; 0x0d
    c97c:	20 38       	cpi	r18, 0x80	; 128
    c97e:	89 f4       	brne	.+34     	; 0xc9a2 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c980:	81 e0       	ldi	r24, 0x01	; 1
    c982:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c984:	8c e9       	ldi	r24, 0x9C	; 156
    c986:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c988:	88 ec       	ldi	r24, 0xC8	; 200
    c98a:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c98c:	8c e3       	ldi	r24, 0x3C	; 60
    c98e:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c990:	89 85       	ldd	r24, Y+9	; 0x09
    c992:	81 11       	cpse	r24, r1
    c994:	02 c0       	rjmp	.+4      	; 0xc99a <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c996:	84 ec       	ldi	r24, 0xC4	; 196
    c998:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c99a:	40 e0       	ldi	r20, 0x00	; 0
    c99c:	6a e7       	ldi	r22, 0x7A	; 122
    c99e:	77 e3       	ldi	r23, 0x37	; 55
    c9a0:	19 c0       	rjmp	.+50     	; 0xc9d4 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c9a2:	90 ff       	sbrs	r25, 0
    c9a4:	0f c0       	rjmp	.+30     	; 0xc9c4 <update_spider_enemy+0x5e>
    c9a6:	9e 81       	ldd	r25, Y+6	; 0x06
    c9a8:	91 11       	cpse	r25, r1
    c9aa:	0c c0       	rjmp	.+24     	; 0xc9c4 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c9ac:	88 e0       	ldi	r24, 0x08	; 8
    c9ae:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c9b0:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c9b2:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c9b4:	89 85       	ldd	r24, Y+9	; 0x09
    c9b6:	81 11       	cpse	r24, r1
    c9b8:	03 c0       	rjmp	.+6      	; 0xc9c0 <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c9ba:	81 e0       	ldi	r24, 0x01	; 1
    c9bc:	89 87       	std	Y+9, r24	; 0x09
    c9be:	0d c0       	rjmp	.+26     	; 0xc9da <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c9c0:	19 86       	std	Y+9, r1	; 0x09
    c9c2:	0b c0       	rjmp	.+22     	; 0xc9da <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c9c4:	88 23       	and	r24, r24
    c9c6:	49 f0       	breq	.+18     	; 0xc9da <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c9c8:	ce 01       	movw	r24, r28
    c9ca:	85 96       	adiw	r24, 0x25	; 37
    c9cc:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    c9d0:	40 e0       	ldi	r20, 0x00	; 0
    c9d2:	bc 01       	movw	r22, r24
    c9d4:	81 2f       	mov	r24, r17
    c9d6:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	}
	e->frame_count++;
    c9da:	8d 85       	ldd	r24, Y+13	; 0x0d
    c9dc:	8f 5f       	subi	r24, 0xFF	; 255
    c9de:	8d 87       	std	Y+13, r24	; 0x0d
}
    c9e0:	df 91       	pop	r29
    c9e2:	cf 91       	pop	r28
    c9e4:	1f 91       	pop	r17
    c9e6:	08 95       	ret

0000c9e8 <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c9e8:	cf 93       	push	r28
    c9ea:	fc 01       	movw	r30, r24
    c9ec:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c9ee:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c9f0:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    c9f2:	40 91 d9 0d 	lds	r20, 0x0DD9
    c9f6:	50 91 da 0d 	lds	r21, 0x0DDA
    c9fa:	20 81       	ld	r18, Z
    c9fc:	31 81       	ldd	r19, Z+1	; 0x01
    c9fe:	85 96       	adiw	r24, 0x25	; 37
    ca00:	24 17       	cp	r18, r20
    ca02:	35 07       	cpc	r19, r21
    ca04:	38 f4       	brcc	.+14     	; 0xca14 <update_turret_enemy+0x2c>
    ca06:	24 85       	ldd	r18, Z+12	; 0x0c
    ca08:	26 30       	cpi	r18, 0x06	; 6
    ca0a:	21 f0       	breq	.+8      	; 0xca14 <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    ca0c:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    ca10:	41 e0       	ldi	r20, 0x01	; 1
    ca12:	03 c0       	rjmp	.+6      	; 0xca1a <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca14:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    ca18:	40 e0       	ldi	r20, 0x00	; 0
    ca1a:	bc 01       	movw	r22, r24
    ca1c:	8c 2f       	mov	r24, r28
	}
}
    ca1e:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca20:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000ca24 <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    ca24:	cf 93       	push	r28
    ca26:	fc 01       	movw	r30, r24
    ca28:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    ca2a:	82 ee       	ldi	r24, 0xE2	; 226
    ca2c:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    ca2e:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca30:	cf 01       	movw	r24, r30
    ca32:	85 96       	adiw	r24, 0x25	; 37
    ca34:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    ca38:	40 e0       	ldi	r20, 0x00	; 0
    ca3a:	bc 01       	movw	r22, r24
    ca3c:	8c 2f       	mov	r24, r28
}
    ca3e:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca40:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000ca44 <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    ca44:	cf 93       	push	r28
    ca46:	fc 01       	movw	r30, r24
    ca48:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    ca4a:	8a e0       	ldi	r24, 0x0A	; 10
    ca4c:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    ca4e:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca50:	cf 01       	movw	r24, r30
    ca52:	85 96       	adiw	r24, 0x25	; 37
    ca54:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    ca58:	40 e0       	ldi	r20, 0x00	; 0
    ca5a:	bc 01       	movw	r22, r24
    ca5c:	8c 2f       	mov	r24, r28
}
    ca5e:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca60:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000ca64 <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    ca64:	cf 93       	push	r28
    ca66:	fc 01       	movw	r30, r24
    ca68:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    ca6a:	84 e1       	ldi	r24, 0x14	; 20
    ca6c:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    ca6e:	80 91 d4 0d 	lds	r24, 0x0DD4
    ca72:	6c e3       	ldi	r22, 0x3C	; 60
    ca74:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    ca78:	91 11       	cpse	r25, r1
    ca7a:	03 c0       	rjmp	.+6      	; 0xca82 <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    ca7c:	94 81       	ldd	r25, Z+4	; 0x04
    ca7e:	91 95       	neg	r25
    ca80:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca82:	cf 01       	movw	r24, r30
    ca84:	85 96       	adiw	r24, 0x25	; 37
    ca86:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    ca8a:	40 e0       	ldi	r20, 0x00	; 0
    ca8c:	bc 01       	movw	r22, r24
    ca8e:	8c 2f       	mov	r24, r28
}
    ca90:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca92:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000ca96 <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    ca96:	cf 93       	push	r28
    ca98:	fc 01       	movw	r30, r24
    ca9a:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    ca9c:	8e e1       	ldi	r24, 0x1E	; 30
    ca9e:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    caa0:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    caa2:	cf 01       	movw	r24, r30
    caa4:	85 96       	adiw	r24, 0x25	; 37
    caa6:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    caaa:	40 e0       	ldi	r20, 0x00	; 0
    caac:	bc 01       	movw	r22, r24
    caae:	8c 2f       	mov	r24, r28
}
    cab0:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cab2:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000cab6 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    cab6:	cf 93       	push	r28
    cab8:	fc 01       	movw	r30, r24
    caba:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    cabc:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    cabe:	8e e1       	ldi	r24, 0x1E	; 30
    cac0:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    cac2:	80 91 cf 0d 	lds	r24, 0x0DCF
    cac6:	82 30       	cpi	r24, 0x02	; 2
    cac8:	11 f4       	brne	.+4      	; 0xcace <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    caca:	82 ee       	ldi	r24, 0xE2	; 226
    cacc:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    cace:	22 81       	ldd	r18, Z+2	; 0x02
    cad0:	33 81       	ldd	r19, Z+3	; 0x03
    cad2:	24 50       	subi	r18, 0x04	; 4
    cad4:	31 09       	sbc	r19, r1
    cad6:	2d 3b       	cpi	r18, 0xBD	; 189
    cad8:	31 05       	cpc	r19, r1
    cada:	38 f0       	brcs	.+14     	; 0xcaea <update_level_hazard+0x34>
    cadc:	27 85       	ldd	r18, Z+15	; 0x0f
    cade:	88 e0       	ldi	r24, 0x08	; 8
    cae0:	28 9f       	mul	r18, r24
    cae2:	90 01       	movw	r18, r0
    cae4:	11 24       	eor	r1, r1
    cae6:	33 83       	std	Z+3, r19	; 0x03
    cae8:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    caea:	cf 01       	movw	r24, r30
    caec:	85 96       	adiw	r24, 0x25	; 37
    caee:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    caf2:	40 e0       	ldi	r20, 0x00	; 0
    caf4:	bc 01       	movw	r22, r24
    caf6:	8c 2f       	mov	r24, r28
}
    caf8:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cafa:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000cafe <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    cafe:	cf 93       	push	r28
    cb00:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    cb02:	0c 96       	adiw	r24, 0x0c	; 12
    cb04:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    cb08:	40 e0       	ldi	r20, 0x00	; 0
    cb0a:	bc 01       	movw	r22, r24
    cb0c:	8c 2f       	mov	r24, r28
}
    cb0e:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    cb10:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000cb14 <update_enemies>:
}

void update_enemies()
{
    cb14:	cf 92       	push	r12
    cb16:	df 92       	push	r13
    cb18:	ef 92       	push	r14
    cb1a:	ff 92       	push	r15
    cb1c:	0f 93       	push	r16
    cb1e:	1f 93       	push	r17
    cb20:	cf 93       	push	r28
    cb22:	df 93       	push	r29
    cb24:	8a ed       	ldi	r24, 0xDA	; 218
    cb26:	e8 2e       	mov	r14, r24
    cb28:	8e e0       	ldi	r24, 0x0E	; 14
    cb2a:	f8 2e       	mov	r15, r24
    cb2c:	cf ec       	ldi	r28, 0xCF	; 207
    cb2e:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    cb30:	19 e0       	ldi	r17, 0x09	; 9
    cb32:	f7 01       	movw	r30, r14
    cb34:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    cb36:	80 81       	ld	r24, Z
    cb38:	97 01       	movw	r18, r14
    cb3a:	21 50       	subi	r18, 0x01	; 1
    cb3c:	31 09       	sbc	r19, r1
    cb3e:	69 01       	movw	r12, r18
    cb40:	84 ff       	sbrs	r24, 4
    cb42:	0d c0       	rjmp	.+26     	; 0xcb5e <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    cb44:	d7 01       	movw	r26, r14
    cb46:	0c 91       	ld	r16, X
    cb48:	f9 01       	movw	r30, r18
    cb4a:	20 81       	ld	r18, Z
    cb4c:	41 2f       	mov	r20, r17
    cb4e:	be 01       	movw	r22, r28
    cb50:	63 5d       	subi	r22, 0xD3	; 211
    cb52:	7f 4f       	sbci	r23, 0xFF	; 255
    cb54:	ce 01       	movw	r24, r28
    cb56:	08 96       	adiw	r24, 0x08	; 8
    cb58:	0e 94 94 63 	call	0xc728	; 0xc728 <map_explosion>
    cb5c:	2e c0       	rjmp	.+92     	; 0xcbba <update_enemies+0xa6>
    cb5e:	f7 01       	movw	r30, r14
    cb60:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    cb62:	80 81       	ld	r24, Z
    cb64:	88 23       	and	r24, r24
    cb66:	49 f1       	breq	.+82     	; 0xcbba <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    cb68:	d7 01       	movw	r26, r14
    cb6a:	11 96       	adiw	r26, 0x01	; 1
    cb6c:	ec 91       	ld	r30, X
    cb6e:	8e 2f       	mov	r24, r30
    cb70:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    cb72:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    cb74:	89 30       	cpi	r24, 0x09	; 9
    cb76:	91 05       	cpc	r25, r1
    cb78:	e8 f4       	brcc	.+58     	; 0xcbb4 <update_enemies+0xa0>
    cb7a:	fc 01       	movw	r30, r24
    cb7c:	e8 5c       	subi	r30, 0xC8	; 200
    cb7e:	ff 4f       	sbci	r31, 0xFF	; 255
    cb80:	0c 94 70 75 	jmp	0xeae0	; 0xeae0 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    cb84:	ce 01       	movw	r24, r28
    cb86:	0e 94 b3 64 	call	0xc966	; 0xc966 <update_spider_enemy>
    cb8a:	17 c0       	rjmp	.+46     	; 0xcbba <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    cb8c:	ce 01       	movw	r24, r28
    cb8e:	0e 94 f4 64 	call	0xc9e8	; 0xc9e8 <update_turret_enemy>
    cb92:	13 c0       	rjmp	.+38     	; 0xcbba <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    cb94:	ce 01       	movw	r24, r28
    cb96:	0e 94 12 65 	call	0xca24	; 0xca24 <update_drone_enemy>
    cb9a:	0f c0       	rjmp	.+30     	; 0xcbba <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    cb9c:	ce 01       	movw	r24, r28
    cb9e:	0e 94 4b 65 	call	0xca96	; 0xca96 <update_shark_enemy>
    cba2:	0b c0       	rjmp	.+22     	; 0xcbba <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    cba4:	ce 01       	movw	r24, r28
    cba6:	0e 94 22 65 	call	0xca44	; 0xca44 <update_globe_enemy>
    cbaa:	07 c0       	rjmp	.+14     	; 0xcbba <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    cbac:	ce 01       	movw	r24, r28
    cbae:	0e 94 32 65 	call	0xca64	; 0xca64 <update_xwing_enemy>
    cbb2:	03 c0       	rjmp	.+6      	; 0xcbba <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    cbb4:	ce 01       	movw	r24, r28
    cbb6:	0e 94 5b 65 	call	0xcab6	; 0xcab6 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    cbba:	f6 01       	movw	r30, r12
    cbbc:	90 81       	ld	r25, Z
    cbbe:	d7 01       	movw	r26, r14
    cbc0:	8c 91       	ld	r24, X
    cbc2:	98 9f       	mul	r25, r24
    cbc4:	10 0d       	add	r17, r0
    cbc6:	11 24       	eor	r1, r1
    cbc8:	b5 e3       	ldi	r27, 0x35	; 53
    cbca:	eb 0e       	add	r14, r27
    cbcc:	f1 1c       	adc	r15, r1
    cbce:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cbd0:	e3 ee       	ldi	r30, 0xE3	; 227
    cbd2:	ee 16       	cp	r14, r30
    cbd4:	ef e0       	ldi	r30, 0x0F	; 15
    cbd6:	fe 06       	cpc	r15, r30
    cbd8:	09 f0       	breq	.+2      	; 0xcbdc <update_enemies+0xc8>
    cbda:	ab cf       	rjmp	.-170    	; 0xcb32 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    cbdc:	df 91       	pop	r29
    cbde:	cf 91       	pop	r28
    cbe0:	1f 91       	pop	r17
    cbe2:	0f 91       	pop	r16
    cbe4:	ff 90       	pop	r15
    cbe6:	ef 90       	pop	r14
    cbe8:	df 90       	pop	r13
    cbea:	cf 90       	pop	r12
    cbec:	08 95       	ret

0000cbee <update_enemy_shots>:

void update_enemy_shots()
{
    cbee:	6f 92       	push	r6
    cbf0:	7f 92       	push	r7
    cbf2:	8f 92       	push	r8
    cbf4:	9f 92       	push	r9
    cbf6:	bf 92       	push	r11
    cbf8:	cf 92       	push	r12
    cbfa:	df 92       	push	r13
    cbfc:	ef 92       	push	r14
    cbfe:	ff 92       	push	r15
    cc00:	0f 93       	push	r16
    cc02:	1f 93       	push	r17
    cc04:	cf 93       	push	r28
    cc06:	df 93       	push	r29
    cc08:	1f 92       	push	r1
    cc0a:	cd b7       	in	r28, 0x3d	; 61
    cc0c:	de b7       	in	r29, 0x3e	; 62
    cc0e:	8d ed       	ldi	r24, 0xDD	; 221
    cc10:	68 2e       	mov	r6, r24
    cc12:	8e e0       	ldi	r24, 0x0E	; 14
    cc14:	78 2e       	mov	r7, r24
    cc16:	9a ee       	ldi	r25, 0xEA	; 234
    cc18:	e9 2e       	mov	r14, r25
    cc1a:	9e e0       	ldi	r25, 0x0E	; 14
    cc1c:	f9 2e       	mov	r15, r25
    cc1e:	24 ee       	ldi	r18, 0xE4	; 228
    cc20:	c2 2e       	mov	r12, r18
    cc22:	2e e0       	ldi	r18, 0x0E	; 14
    cc24:	d2 2e       	mov	r13, r18
    cc26:	00 e1       	ldi	r16, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    cc28:	bb 24       	eor	r11, r11
    cc2a:	b3 94       	inc	r11
    cc2c:	6f ef       	ldi	r22, 0xFF	; 255
    cc2e:	60 0f       	add	r22, r16
    cc30:	f3 01       	movw	r30, r6
    cc32:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    cc34:	80 81       	ld	r24, Z
    cc36:	35 97       	sbiw	r30, 0x05	; 5
    cc38:	82 30       	cpi	r24, 0x02	; 2
    cc3a:	09 f4       	brne	.+2      	; 0xcc3e <update_enemy_shots+0x50>
    cc3c:	55 c0       	rjmp	.+170    	; 0xcce8 <update_enemy_shots+0xfa>
    cc3e:	90 81       	ld	r25, Z
    cc40:	99 23       	and	r25, r25
    cc42:	09 f4       	brne	.+2      	; 0xcc46 <update_enemy_shots+0x58>
    cc44:	51 c0       	rjmp	.+162    	; 0xcce8 <update_enemy_shots+0xfa>
    cc46:	d3 01       	movw	r26, r6
    cc48:	9c 91       	ld	r25, X
    cc4a:	9c 33       	cpi	r25, 0x3C	; 60
    cc4c:	08 f4       	brcc	.+2      	; 0xcc50 <update_enemy_shots+0x62>
    cc4e:	4c c0       	rjmp	.+152    	; 0xcce8 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    cc50:	1c 92       	st	X, r1
    cc52:	f7 01       	movw	r30, r14
    cc54:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    cc56:	90 81       	ld	r25, Z
    cc58:	97 30       	cpi	r25, 0x07	; 7
    cc5a:	09 f0       	breq	.+2      	; 0xcc5e <update_enemy_shots+0x70>
    cc5c:	4c c0       	rjmp	.+152    	; 0xccf6 <update_enemy_shots+0x108>
    cc5e:	f7 01       	movw	r30, r14
				{
					if (!game.enemies[i].shot[j].active)
    cc60:	92 91       	ld	r25, -Z
    cc62:	91 11       	cpse	r25, r1
    cc64:	3c c0       	rjmp	.+120    	; 0xccde <update_enemy_shots+0xf0>
					{
						game.enemies[i].shot[j].active = 1;
    cc66:	b0 82       	st	Z, r11
    cc68:	f3 01       	movw	r30, r6
    cc6a:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    cc6c:	20 81       	ld	r18, Z
    cc6e:	31 81       	ldd	r19, Z+1	; 0x01
    cc70:	f3 01       	movw	r30, r6
    cc72:	34 83       	std	Z+4, r19	; 0x04
    cc74:	23 83       	std	Z+3, r18	; 0x03
    cc76:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    cc78:	40 81       	ld	r20, Z
    cc7a:	51 81       	ldd	r21, Z+1	; 0x01
    cc7c:	fa 01       	movw	r30, r20
    cc7e:	e8 7f       	andi	r30, 0xF8	; 248
    cc80:	16 96       	adiw	r26, 0x06	; 6
    cc82:	fc 93       	st	X, r31
    cc84:	ee 93       	st	-X, r30
    cc86:	15 97       	sbiw	r26, 0x05	; 5
    cc88:	f7 01       	movw	r30, r14
    cc8a:	10 81       	ld	r17, Z
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    cc8c:	84 30       	cpi	r24, 0x04	; 4
    cc8e:	19 f4       	brne	.+6      	; 0xcc96 <update_enemy_shots+0xa8>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    cc90:	d6 01       	movw	r26, r12
    cc92:	1c 93       	st	X, r17
    cc94:	24 c0       	rjmp	.+72     	; 0xccde <update_enemy_shots+0xf0>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    cc96:	85 30       	cpi	r24, 0x05	; 5
    cc98:	59 f4       	brne	.+22     	; 0xccb0 <update_enemy_shots+0xc2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    cc9a:	f6 01       	movw	r30, r12
    cc9c:	10 83       	st	Z, r17
							if (game.player.shared.y <= game.enemies[i].shared.y)
    cc9e:	80 91 db 0d 	lds	r24, 0x0DDB
    cca2:	90 91 dc 0d 	lds	r25, 0x0DDC
    cca6:	48 17       	cp	r20, r24
    cca8:	59 07       	cpc	r21, r25
    ccaa:	c8 f0       	brcs	.+50     	; 0xccde <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    ccac:	11 95       	neg	r17
    ccae:	16 c0       	rjmp	.+44     	; 0xccdc <update_enemy_shots+0xee>
    ccb0:	47 01       	movw	r8, r14
    ccb2:	f5 e0       	ldi	r31, 0x05	; 5
    ccb4:	8f 1a       	sub	r8, r31
    ccb6:	91 08       	sbc	r9, r1
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    ccb8:	81 2f       	mov	r24, r17
    ccba:	81 95       	neg	r24
    ccbc:	d4 01       	movw	r26, r8
    ccbe:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    ccc0:	80 91 d9 0d 	lds	r24, 0x0DD9
    ccc4:	90 91 da 0d 	lds	r25, 0x0DDA
    ccc8:	82 17       	cp	r24, r18
    ccca:	93 07       	cpc	r25, r19
    cccc:	40 f0       	brcs	.+16     	; 0xccde <update_enemy_shots+0xf0>
    ccce:	69 83       	std	Y+1, r22	; 0x01
    ccd0:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    ccd4:	69 81       	ldd	r22, Y+1	; 0x01
    ccd6:	81 11       	cpse	r24, r1
    ccd8:	02 c0       	rjmp	.+4      	; 0xccde <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    ccda:	f4 01       	movw	r30, r8
    ccdc:	10 83       	st	Z, r17
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    ccde:	c3 01       	movw	r24, r6
    cce0:	03 96       	adiw	r24, 0x03	; 3
    cce2:	0e 94 7f 65 	call	0xcafe	; 0xcafe <update_basic_shot>
    cce6:	07 c0       	rjmp	.+14     	; 0xccf6 <update_enemy_shots+0x108>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    cce8:	80 81       	ld	r24, Z
    ccea:	88 23       	and	r24, r24
    ccec:	21 f0       	breq	.+8      	; 0xccf6 <update_enemy_shots+0x108>
		{
			game.enemies[i].shot_frame_count++;
    ccee:	d3 01       	movw	r26, r6
    ccf0:	8c 91       	ld	r24, X
    ccf2:	8f 5f       	subi	r24, 0xFF	; 255
    ccf4:	8c 93       	st	X, r24
    ccf6:	0f 5f       	subi	r16, 0xFF	; 255
    ccf8:	b5 e3       	ldi	r27, 0x35	; 53
    ccfa:	6b 0e       	add	r6, r27
    ccfc:	71 1c       	adc	r7, r1
    ccfe:	e5 e3       	ldi	r30, 0x35	; 53
    cd00:	ee 0e       	add	r14, r30
    cd02:	f1 1c       	adc	r15, r1
    cd04:	f5 e3       	ldi	r31, 0x35	; 53
    cd06:	cf 0e       	add	r12, r31
    cd08:	d1 1c       	adc	r13, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cd0a:	05 31       	cpi	r16, 0x15	; 21
    cd0c:	09 f0       	breq	.+2      	; 0xcd10 <update_enemy_shots+0x122>
    cd0e:	8e cf       	rjmp	.-228    	; 0xcc2c <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    cd10:	0f 90       	pop	r0
    cd12:	df 91       	pop	r29
    cd14:	cf 91       	pop	r28
    cd16:	1f 91       	pop	r17
    cd18:	0f 91       	pop	r16
    cd1a:	ff 90       	pop	r15
    cd1c:	ef 90       	pop	r14
    cd1e:	df 90       	pop	r13
    cd20:	cf 90       	pop	r12
    cd22:	bf 90       	pop	r11
    cd24:	9f 90       	pop	r9
    cd26:	8f 90       	pop	r8
    cd28:	7f 90       	pop	r7
    cd2a:	6f 90       	pop	r6
    cd2c:	08 95       	ret

0000cd2e <animate_enemies>:

void animate_enemies()
{
    cd2e:	2f 92       	push	r2
    cd30:	3f 92       	push	r3
    cd32:	4f 92       	push	r4
    cd34:	5f 92       	push	r5
    cd36:	6f 92       	push	r6
    cd38:	7f 92       	push	r7
    cd3a:	8f 92       	push	r8
    cd3c:	9f 92       	push	r9
    cd3e:	af 92       	push	r10
    cd40:	cf 92       	push	r12
    cd42:	df 92       	push	r13
    cd44:	ef 92       	push	r14
    cd46:	ff 92       	push	r15
    cd48:	0f 93       	push	r16
    cd4a:	1f 93       	push	r17
    cd4c:	cf 93       	push	r28
    cd4e:	df 93       	push	r29
    cd50:	00 d0       	rcall	.+0      	; 0xcd52 <animate_enemies+0x24>
    cd52:	00 d0       	rcall	.+0      	; 0xcd54 <animate_enemies+0x26>
    cd54:	cd b7       	in	r28, 0x3d	; 61
    cd56:	de b7       	in	r29, 0x3e	; 62
    cd58:	46 ed       	ldi	r20, 0xD6	; 214
    cd5a:	24 2e       	mov	r2, r20
    cd5c:	4e e0       	ldi	r20, 0x0E	; 14
    cd5e:	34 2e       	mov	r3, r20
    cd60:	59 ed       	ldi	r21, 0xD9	; 217
    cd62:	65 2e       	mov	r6, r21
    cd64:	5e e0       	ldi	r21, 0x0E	; 14
    cd66:	75 2e       	mov	r7, r21
    cd68:	6a ed       	ldi	r22, 0xDA	; 218
    cd6a:	86 2e       	mov	r8, r22
    cd6c:	6e e0       	ldi	r22, 0x0E	; 14
    cd6e:	96 2e       	mov	r9, r22
    cd70:	8f ec       	ldi	r24, 0xCF	; 207
    cd72:	9e e0       	ldi	r25, 0x0E	; 14
    cd74:	9c 83       	std	Y+4, r25	; 0x04
    cd76:	8b 83       	std	Y+3, r24	; 0x03
    cd78:	a7 ed       	ldi	r26, 0xD7	; 215
    cd7a:	be e0       	ldi	r27, 0x0E	; 14
    cd7c:	ba 83       	std	Y+2, r27	; 0x02
    cd7e:	a9 83       	std	Y+1, r26	; 0x01
    cd80:	41 2c       	mov	r4, r1
    cd82:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    cd84:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    cd86:	70 e1       	ldi	r23, 0x10	; 16
    cd88:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    cd8a:	f1 01       	movw	r30, r2
    cd8c:	80 81       	ld	r24, Z
    cd8e:	88 23       	and	r24, r24
    cd90:	09 f4       	brne	.+2      	; 0xcd94 <animate_enemies+0x66>
    cd92:	8a c0       	rjmp	.+276    	; 0xcea8 <animate_enemies+0x17a>
    cd94:	a9 81       	ldd	r26, Y+1	; 0x01
    cd96:	ba 81       	ldd	r27, Y+2	; 0x02
    cd98:	8c 91       	ld	r24, X
    cd9a:	84 fd       	sbrc	r24, 4
    cd9c:	85 c0       	rjmp	.+266    	; 0xcea8 <animate_enemies+0x17a>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    cd9e:	eb 81       	ldd	r30, Y+3	; 0x03
    cda0:	fc 81       	ldd	r31, Y+4	; 0x04
    cda2:	20 81       	ld	r18, Z
    cda4:	31 81       	ldd	r19, Z+1	; 0x01
    cda6:	e0 91 ba 0d 	lds	r30, 0x0DBA
    cdaa:	f0 91 bb 0d 	lds	r31, 0x0DBB
    cdae:	2e 17       	cp	r18, r30
    cdb0:	3f 07       	cpc	r19, r31
    cdb2:	88 f0       	brcs	.+34     	; 0xcdd6 <animate_enemies+0xa8>
    cdb4:	ab 81       	ldd	r26, Y+3	; 0x03
    cdb6:	bc 81       	ldd	r27, Y+4	; 0x04
    cdb8:	12 96       	adiw	r26, 0x02	; 2
    cdba:	ed 90       	ld	r14, X+
    cdbc:	fc 90       	ld	r15, X
    cdbe:	13 97       	sbiw	r26, 0x03	; 3
    cdc0:	80 91 c2 0d 	lds	r24, 0x0DC2
    cdc4:	90 e0       	ldi	r25, 0x00	; 0
    cdc6:	e8 16       	cp	r14, r24
    cdc8:	f9 06       	cpc	r15, r25
    cdca:	28 f0       	brcs	.+10     	; 0xcdd6 <animate_enemies+0xa8>
    cdcc:	88 53       	subi	r24, 0x38	; 56
    cdce:	9f 4f       	sbci	r25, 0xFF	; 255
    cdd0:	8e 15       	cp	r24, r14
    cdd2:	9f 05       	cpc	r25, r15
    cdd4:	70 f4       	brcc	.+28     	; 0xcdf2 <animate_enemies+0xc4>
			{
				game.enemies[i].active = 0;
    cdd6:	f1 01       	movw	r30, r2
    cdd8:	10 82       	st	Z, r1
				game.active_enemies--;
    cdda:	80 91 d5 0d 	lds	r24, 0x0DD5
    cdde:	81 50       	subi	r24, 0x01	; 1
    cde0:	80 93 d5 0d 	sts	0x0DD5, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    cde4:	d4 01       	movw	r26, r8
    cde6:	0c 91       	ld	r16, X
    cde8:	f3 01       	movw	r30, r6
    cdea:	20 81       	ld	r18, Z
    cdec:	40 e0       	ldi	r20, 0x00	; 0
    cdee:	60 ee       	ldi	r22, 0xE0	; 224
    cdf0:	6e c0       	rjmp	.+220    	; 0xcece <animate_enemies+0x1a0>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    cdf2:	02 2f       	mov	r16, r18
    cdf4:	0e 1b       	sub	r16, r30
    cdf6:	20 91 e5 0d 	lds	r18, 0x0DE5
    cdfa:	22 0f       	add	r18, r18
    cdfc:	22 0f       	add	r18, r18
    cdfe:	22 0f       	add	r18, r18
    ce00:	40 91 e4 0d 	lds	r20, 0x0DE4
    ce04:	44 0f       	add	r20, r20
    ce06:	44 0f       	add	r20, r20
    ce08:	44 0f       	add	r20, r20
    ce0a:	80 91 d9 0d 	lds	r24, 0x0DD9
    ce0e:	98 e0       	ldi	r25, 0x08	; 8
    ce10:	a9 2e       	mov	r10, r25
    ce12:	38 e0       	ldi	r19, 0x08	; 8
    ce14:	c3 2e       	mov	r12, r19
    ce16:	60 91 db 0d 	lds	r22, 0x0DDB
    ce1a:	8e 1b       	sub	r24, r30
    ce1c:	0e 94 24 52 	call	0xa448	; 0xa448 <LBCollides>
    ce20:	88 23       	and	r24, r24
    ce22:	79 f0       	breq	.+30     	; 0xce42 <animate_enemies+0x114>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    ce24:	80 91 e1 0d 	lds	r24, 0x0DE1
    ce28:	84 fd       	sbrc	r24, 4
    ce2a:	0b c0       	rjmp	.+22     	; 0xce42 <animate_enemies+0x114>
			)
			{
				SFX_PLAYER_EXPLODE;
    ce2c:	41 e0       	ldi	r20, 0x01	; 1
    ce2e:	6f ef       	ldi	r22, 0xFF	; 255
    ce30:	85 e0       	ldi	r24, 0x05	; 5
    ce32:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
				game.player.shield = 0;
    ce36:	10 92 e8 0d 	sts	0x0DE8, r1
				game.player.flags = EXPLODING;
    ce3a:	80 e1       	ldi	r24, 0x10	; 16
    ce3c:	80 93 e1 0d 	sts	0x0DE1, r24
				return;
    ce40:	6c c0       	rjmp	.+216    	; 0xcf1a <animate_enemies+0x1ec>
    ce42:	c2 01       	movw	r24, r4
    ce44:	86 54       	subi	r24, 0x46	; 70
    ce46:	92 4f       	sbci	r25, 0xF2	; 242
    ce48:	fc 01       	movw	r30, r24
    ce4a:	ef 5d       	subi	r30, 0xDF	; 223
    ce4c:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    ce4e:	20 81       	ld	r18, Z
    ce50:	22 30       	cpi	r18, 0x02	; 2
    ce52:	69 f4       	brne	.+26     	; 0xce6e <animate_enemies+0x140>
    ce54:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    ce56:	e0 80       	ld	r14, Z
    ce58:	01 e0       	ldi	r16, 0x01	; 1
    ce5a:	d4 01       	movw	r26, r8
    ce5c:	2c 91       	ld	r18, X
    ce5e:	f3 01       	movw	r30, r6
    ce60:	40 81       	ld	r20, Z
    ce62:	61 2f       	mov	r22, r17
    ce64:	8b 81       	ldd	r24, Y+3	; 0x03
    ce66:	9c 81       	ldd	r25, Y+4	; 0x04
    ce68:	0e 94 df 63 	call	0xc7be	; 0xc7be <animate_sprite>
    ce6c:	33 c0       	rjmp	.+102    	; 0xced4 <animate_enemies+0x1a6>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    ce6e:	e1 2c       	mov	r14, r1
    ce70:	00 e0       	ldi	r16, 0x00	; 0
    ce72:	d4 01       	movw	r26, r8
    ce74:	2c 91       	ld	r18, X
    ce76:	f3 01       	movw	r30, r6
    ce78:	40 81       	ld	r20, Z
    ce7a:	61 2f       	mov	r22, r17
    ce7c:	8b 81       	ldd	r24, Y+3	; 0x03
    ce7e:	9c 81       	ldd	r25, Y+4	; 0x04
    ce80:	0e 94 df 63 	call	0xc7be	; 0xc7be <animate_sprite>
    ce84:	82 30       	cpi	r24, 0x02	; 2
    ce86:	30 f1       	brcs	.+76     	; 0xced4 <animate_enemies+0x1a6>
			{
				SFX_ENEMY_EXPLODE;
    ce88:	41 e0       	ldi	r20, 0x01	; 1
    ce8a:	6f ef       	ldi	r22, 0xFF	; 255
    ce8c:	86 e0       	ldi	r24, 0x06	; 6
    ce8e:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    ce92:	a9 81       	ldd	r26, Y+1	; 0x01
    ce94:	ba 81       	ldd	r27, Y+2	; 0x02
    ce96:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    ce98:	f1 01       	movw	r30, r2
    ce9a:	10 82       	st	Z, r1
				game.active_enemies--;
    ce9c:	80 91 d5 0d 	lds	r24, 0x0DD5
    cea0:	81 50       	subi	r24, 0x01	; 1
    cea2:	80 93 d5 0d 	sts	0x0DD5, r24
    cea6:	16 c0       	rjmp	.+44     	; 0xced4 <animate_enemies+0x1a6>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    cea8:	a9 81       	ldd	r26, Y+1	; 0x01
    ceaa:	ba 81       	ldd	r27, Y+2	; 0x02
    ceac:	8c 91       	ld	r24, X
    ceae:	84 ff       	sbrs	r24, 4
    ceb0:	11 c0       	rjmp	.+34     	; 0xced4 <animate_enemies+0x1a6>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    ceb2:	eb 81       	ldd	r30, Y+3	; 0x03
    ceb4:	fc 81       	ldd	r31, Y+4	; 0x04
    ceb6:	42 81       	ldd	r20, Z+2	; 0x02
    ceb8:	80 91 c2 0d 	lds	r24, 0x0DC2
    cebc:	48 1b       	sub	r20, r24
    cebe:	60 81       	ld	r22, Z
    cec0:	80 91 ba 0d 	lds	r24, 0x0DBA
    cec4:	68 1b       	sub	r22, r24
    cec6:	d4 01       	movw	r26, r8
    cec8:	0c 91       	ld	r16, X
    ceca:	f3 01       	movw	r30, r6
    cecc:	20 81       	ld	r18, Z
    cece:	81 2f       	mov	r24, r17
    ced0:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    ced4:	d4 01       	movw	r26, r8
    ced6:	9c 91       	ld	r25, X
    ced8:	f3 01       	movw	r30, r6
    ceda:	80 81       	ld	r24, Z
    cedc:	98 9f       	mul	r25, r24
    cede:	10 0d       	add	r17, r0
    cee0:	11 24       	eor	r1, r1
    cee2:	f5 e3       	ldi	r31, 0x35	; 53
    cee4:	2f 0e       	add	r2, r31
    cee6:	31 1c       	adc	r3, r1
    cee8:	85 e3       	ldi	r24, 0x35	; 53
    ceea:	48 0e       	add	r4, r24
    ceec:	51 1c       	adc	r5, r1
    ceee:	95 e3       	ldi	r25, 0x35	; 53
    cef0:	69 0e       	add	r6, r25
    cef2:	71 1c       	adc	r7, r1
    cef4:	a5 e3       	ldi	r26, 0x35	; 53
    cef6:	8a 0e       	add	r8, r26
    cef8:	91 1c       	adc	r9, r1
    cefa:	eb 81       	ldd	r30, Y+3	; 0x03
    cefc:	fc 81       	ldd	r31, Y+4	; 0x04
    cefe:	f5 96       	adiw	r30, 0x35	; 53
    cf00:	fc 83       	std	Y+4, r31	; 0x04
    cf02:	eb 83       	std	Y+3, r30	; 0x03
    cf04:	89 81       	ldd	r24, Y+1	; 0x01
    cf06:	9a 81       	ldd	r25, Y+2	; 0x02
    cf08:	c5 96       	adiw	r24, 0x35	; 53
    cf0a:	9a 83       	std	Y+2, r25	; 0x02
    cf0c:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cf0e:	99 e0       	ldi	r25, 0x09	; 9
    cf10:	49 16       	cp	r4, r25
    cf12:	91 e0       	ldi	r25, 0x01	; 1
    cf14:	59 06       	cpc	r5, r25
    cf16:	09 f0       	breq	.+2      	; 0xcf1a <animate_enemies+0x1ec>
    cf18:	38 cf       	rjmp	.-400    	; 0xcd8a <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    cf1a:	0f 90       	pop	r0
    cf1c:	0f 90       	pop	r0
    cf1e:	0f 90       	pop	r0
    cf20:	0f 90       	pop	r0
    cf22:	df 91       	pop	r29
    cf24:	cf 91       	pop	r28
    cf26:	1f 91       	pop	r17
    cf28:	0f 91       	pop	r16
    cf2a:	ff 90       	pop	r15
    cf2c:	ef 90       	pop	r14
    cf2e:	df 90       	pop	r13
    cf30:	cf 90       	pop	r12
    cf32:	af 90       	pop	r10
    cf34:	9f 90       	pop	r9
    cf36:	8f 90       	pop	r8
    cf38:	7f 90       	pop	r7
    cf3a:	6f 90       	pop	r6
    cf3c:	5f 90       	pop	r5
    cf3e:	4f 90       	pop	r4
    cf40:	3f 90       	pop	r3
    cf42:	2f 90       	pop	r2
    cf44:	08 95       	ret

0000cf46 <animate_enemy_shots>:

void animate_enemy_shots()
{
    cf46:	4f 92       	push	r4
    cf48:	5f 92       	push	r5
    cf4a:	6f 92       	push	r6
    cf4c:	7f 92       	push	r7
    cf4e:	8f 92       	push	r8
    cf50:	9f 92       	push	r9
    cf52:	af 92       	push	r10
    cf54:	cf 92       	push	r12
    cf56:	df 92       	push	r13
    cf58:	ef 92       	push	r14
    cf5a:	ff 92       	push	r15
    cf5c:	0f 93       	push	r16
    cf5e:	1f 93       	push	r17
    cf60:	cf 93       	push	r28
    cf62:	df 93       	push	r29
    cf64:	c9 ee       	ldi	r28, 0xE9	; 233
    cf66:	de e0       	ldi	r29, 0x0E	; 14
    cf68:	40 ee       	ldi	r20, 0xE0	; 224
    cf6a:	84 2e       	mov	r8, r20
    cf6c:	4e e0       	ldi	r20, 0x0E	; 14
    cf6e:	94 2e       	mov	r9, r20
	u8 slot = ENEMY_SHOT_SLOT;
    cf70:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    cf72:	50 e1       	ldi	r21, 0x10	; 16
    cf74:	f5 2e       	mov	r15, r21
    cf76:	fe 01       	movw	r30, r28
    cf78:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    cf7a:	80 81       	ld	r24, Z
    cf7c:	87 30       	cpi	r24, 0x07	; 7
    cf7e:	09 f0       	breq	.+2      	; 0xcf82 <animate_enemy_shots+0x3c>
    cf80:	73 c0       	rjmp	.+230    	; 0xd068 <animate_enemy_shots+0x122>
			{
				if (game.enemies[i].shot[j].active)
    cf82:	88 81       	ld	r24, Y
    cf84:	88 23       	and	r24, r24
    cf86:	09 f4       	brne	.+2      	; 0xcf8a <animate_enemy_shots+0x44>
    cf88:	68 c0       	rjmp	.+208    	; 0xd05a <animate_enemy_shots+0x114>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    cf8a:	c4 01       	movw	r24, r8
    cf8c:	0e 94 80 5f 	call	0xbf00	; 0xbf00 <out_of_bounds>
    cf90:	81 11       	cpse	r24, r1
    cf92:	40 c0       	rjmp	.+128    	; 0xd014 <animate_enemy_shots+0xce>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    cf94:	41 e0       	ldi	r20, 0x01	; 1
    cf96:	61 e0       	ldi	r22, 0x01	; 1
    cf98:	c4 01       	movw	r24, r8
    cf9a:	0e 94 24 60 	call	0xc048	; 0xc048 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    cf9e:	81 11       	cpse	r24, r1
    cfa0:	39 c0       	rjmp	.+114    	; 0xd014 <animate_enemy_shots+0xce>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    cfa2:	f4 01       	movw	r30, r8
    cfa4:	42 80       	ldd	r4, Z+2	; 0x02
    cfa6:	53 80       	ldd	r5, Z+3	; 0x03
    cfa8:	60 80       	ld	r6, Z
    cfaa:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    cfac:	d0 90 ba 0d 	lds	r13, 0x0DBA
    cfb0:	06 2d       	mov	r16, r6
    cfb2:	0d 19       	sub	r16, r13
    cfb4:	20 91 e5 0d 	lds	r18, 0x0DE5
    cfb8:	22 0f       	add	r18, r18
    cfba:	22 0f       	add	r18, r18
    cfbc:	22 0f       	add	r18, r18
    cfbe:	40 91 e4 0d 	lds	r20, 0x0DE4
    cfc2:	44 0f       	add	r20, r20
    cfc4:	44 0f       	add	r20, r20
    cfc6:	44 0f       	add	r20, r20
    cfc8:	80 91 d9 0d 	lds	r24, 0x0DD9
    cfcc:	98 e0       	ldi	r25, 0x08	; 8
    cfce:	a9 2e       	mov	r10, r25
    cfd0:	38 e0       	ldi	r19, 0x08	; 8
    cfd2:	c3 2e       	mov	r12, r19
    cfd4:	e4 2c       	mov	r14, r4
    cfd6:	60 91 db 0d 	lds	r22, 0x0DDB
    cfda:	8d 19       	sub	r24, r13
    cfdc:	0e 94 24 52 	call	0xa448	; 0xa448 <LBCollides>
    cfe0:	88 23       	and	r24, r24
    cfe2:	d1 f0       	breq	.+52     	; 0xd018 <animate_enemy_shots+0xd2>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    cfe4:	41 e0       	ldi	r20, 0x01	; 1
    cfe6:	6f ef       	ldi	r22, 0xFF	; 255
    cfe8:	84 e0       	ldi	r24, 0x04	; 4
    cfea:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    cfee:	80 91 e8 0d 	lds	r24, 0x0DE8
    cff2:	fe 01       	movw	r30, r28
    cff4:	31 97       	sbiw	r30, 0x01	; 1
    cff6:	90 81       	ld	r25, Z
    cff8:	89 1b       	sub	r24, r25
    cffa:	80 93 e8 0d 	sts	0x0DE8, r24
#endif
						if (game.player.shield <= 0)
    cffe:	18 16       	cp	r1, r24
    d000:	4c f0       	brlt	.+18     	; 0xd014 <animate_enemy_shots+0xce>
						{
							SFX_PLAYER_EXPLODE;
    d002:	41 e0       	ldi	r20, 0x01	; 1
    d004:	6f ef       	ldi	r22, 0xFF	; 255
    d006:	85 e0       	ldi	r24, 0x05	; 5
    d008:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
							game.player.shield = 0;
    d00c:	10 92 e8 0d 	sts	0x0DE8, r1
							game.player.flags = EXPLODING;
    d010:	f0 92 e1 0d 	sts	0x0DE1, r15
						}
						game.enemies[i].shot[j].active = 0;
    d014:	18 82       	st	Y, r1
    d016:	21 c0       	rjmp	.+66     	; 0xd05a <animate_enemy_shots+0x114>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    d018:	00 91 d4 0d 	lds	r16, 0x0DD4
    d01c:	60 2f       	mov	r22, r16
    d01e:	fe 01       	movw	r30, r28
    d020:	34 97       	sbiw	r30, 0x04	; 4
    d022:	80 81       	ld	r24, Z
    d024:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBMoveDelta>
    d028:	68 0e       	add	r6, r24
    d02a:	79 1e       	adc	r7, r25
    d02c:	f4 01       	movw	r30, r8
    d02e:	71 82       	std	Z+1, r7	; 0x01
    d030:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    d032:	60 2f       	mov	r22, r16
    d034:	fe 01       	movw	r30, r28
    d036:	35 97       	sbiw	r30, 0x05	; 5
    d038:	80 81       	ld	r24, Z
    d03a:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBMoveDelta>
    d03e:	48 0e       	add	r4, r24
    d040:	59 1e       	adc	r5, r25
    d042:	f4 01       	movw	r30, r8
    d044:	53 82       	std	Z+3, r5	; 0x03
    d046:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    d048:	80 91 c2 0d 	lds	r24, 0x0DC2
    d04c:	44 2d       	mov	r20, r4
    d04e:	48 1b       	sub	r20, r24
    d050:	66 2d       	mov	r22, r6
    d052:	6d 19       	sub	r22, r13
    d054:	01 e0       	ldi	r16, 0x01	; 1
    d056:	21 e0       	ldi	r18, 0x01	; 1
    d058:	04 c0       	rjmp	.+8      	; 0xd062 <animate_enemy_shots+0x11c>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    d05a:	01 e0       	ldi	r16, 0x01	; 1
    d05c:	21 e0       	ldi	r18, 0x01	; 1
    d05e:	40 e0       	ldi	r20, 0x00	; 0
    d060:	60 ee       	ldi	r22, 0xE0	; 224
    d062:	81 2f       	mov	r24, r17
    d064:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
				}
			}
			slot += 1;
    d068:	1f 5f       	subi	r17, 0xFF	; 255
    d06a:	e5 96       	adiw	r28, 0x35	; 53
    d06c:	f5 e3       	ldi	r31, 0x35	; 53
    d06e:	8f 0e       	add	r8, r31
    d070:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    d072:	14 31       	cpi	r17, 0x14	; 20
    d074:	09 f0       	breq	.+2      	; 0xd078 <animate_enemy_shots+0x132>
    d076:	7f cf       	rjmp	.-258    	; 0xcf76 <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    d078:	df 91       	pop	r29
    d07a:	cf 91       	pop	r28
    d07c:	1f 91       	pop	r17
    d07e:	0f 91       	pop	r16
    d080:	ff 90       	pop	r15
    d082:	ef 90       	pop	r14
    d084:	df 90       	pop	r13
    d086:	cf 90       	pop	r12
    d088:	af 90       	pop	r10
    d08a:	9f 90       	pop	r9
    d08c:	8f 90       	pop	r8
    d08e:	7f 90       	pop	r7
    d090:	6f 90       	pop	r6
    d092:	5f 90       	pop	r5
    d094:	4f 90       	pop	r4
    d096:	08 95       	ret

0000d098 <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y)
{
    d098:	ff 92       	push	r15
    d09a:	0f 93       	push	r16
    d09c:	1f 93       	push	r17
    d09e:	cf 93       	push	r28
    d0a0:	df 93       	push	r29
    d0a2:	ec 01       	movw	r28, r24
    d0a4:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    d0a6:	8e e0       	ldi	r24, 0x0E	; 14
    d0a8:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    d0aa:	fe 01       	movw	r30, r28
    d0ac:	84 91       	lpm	r24, Z
    d0ae:	83 32       	cpi	r24, 0x23	; 35
    d0b0:	21 f1       	breq	.+72     	; 0xd0fa <stream_text_middle+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    d0b2:	6f ef       	ldi	r22, 0xFF	; 255
    d0b4:	70 e0       	ldi	r23, 0x00	; 0
    d0b6:	ce 01       	movw	r24, r28
    d0b8:	0e 94 fd 76 	call	0xedfa	; 0xedfa <strnlen_P>
		x = 14 - ln / 2;
    d0bc:	86 95       	lsr	r24
    d0be:	0f 2d       	mov	r16, r15
    d0c0:	08 1b       	sub	r16, r24
    d0c2:	0c 1b       	sub	r16, r28
    d0c4:	8c 2f       	mov	r24, r28
    d0c6:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    d0c8:	21 96       	adiw	r28, 0x01	; 1
    d0ca:	fe 01       	movw	r30, r28
    d0cc:	31 97       	sbiw	r30, 0x01	; 1
    d0ce:	44 91       	lpm	r20, Z
    d0d0:	44 23       	and	r20, r20
    d0d2:	89 f0       	breq	.+34     	; 0xd0f6 <stream_text_middle+0x5e>
		{
			LBPrintChar(x++, y, c);
    d0d4:	61 2f       	mov	r22, r17
    d0d6:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    d0da:	60 e0       	ldi	r22, 0x00	; 0
    d0dc:	8d e4       	ldi	r24, 0x4D	; 77
    d0de:	9e e0       	ldi	r25, 0x0E	; 14
    d0e0:	0e 94 33 51 	call	0xa266	; 0xa266 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    d0e4:	80 91 51 0e 	lds	r24, 0x0E51
    d0e8:	80 fd       	sbrc	r24, 0
    d0ea:	ec cf       	rjmp	.-40     	; 0xd0c4 <stream_text_middle+0x2c>
    d0ec:	80 e7       	ldi	r24, 0x70	; 112
    d0ee:	97 e1       	ldi	r25, 0x17	; 23
    d0f0:	0e 94 d7 41 	call	0x83ae	; 0x83ae <WaitUs>
    d0f4:	e7 cf       	rjmp	.-50     	; 0xd0c4 <stream_text_middle+0x2c>
		}
		y++;
    d0f6:	1f 5f       	subi	r17, 0xFF	; 255
    d0f8:	d8 cf       	rjmp	.-80     	; 0xd0aa <stream_text_middle+0x12>
	}
}
    d0fa:	df 91       	pop	r29
    d0fc:	cf 91       	pop	r28
    d0fe:	1f 91       	pop	r17
    d100:	0f 91       	pop	r16
    d102:	ff 90       	pop	r15
    d104:	08 95       	ret

0000d106 <print_scroll>:

void print_scroll(const unsigned char text[])
{
    d106:	0f 93       	push	r16
    d108:	cf 93       	push	r28
    d10a:	df 93       	push	r29
    d10c:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    d10e:	40 e0       	ldi	r20, 0x00	; 0
    d110:	6a e2       	ldi	r22, 0x2A	; 42
    d112:	78 e3       	ldi	r23, 0x38	; 56
    d114:	80 e0       	ldi	r24, 0x00	; 0
    d116:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    d11a:	01 e0       	ldi	r16, 0x01	; 1
    d11c:	21 e0       	ldi	r18, 0x01	; 1
    d11e:	40 e3       	ldi	r20, 0x30	; 48
    d120:	60 e5       	ldi	r22, 0x50	; 80
    d122:	80 e0       	ldi	r24, 0x00	; 0
    d124:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d128:	40 e0       	ldi	r20, 0x00	; 0
    d12a:	67 e2       	ldi	r22, 0x27	; 39
    d12c:	78 e3       	ldi	r23, 0x38	; 56
    d12e:	81 e0       	ldi	r24, 0x01	; 1
    d130:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    d134:	21 e0       	ldi	r18, 0x01	; 1
    d136:	40 e3       	ldi	r20, 0x30	; 48
    d138:	60 e6       	ldi	r22, 0x60	; 96
    d13a:	81 e0       	ldi	r24, 0x01	; 1
    d13c:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    d140:	40 e0       	ldi	r20, 0x00	; 0
    d142:	64 e2       	ldi	r22, 0x24	; 36
    d144:	78 e3       	ldi	r23, 0x38	; 56
    d146:	82 e0       	ldi	r24, 0x02	; 2
    d148:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    d14c:	21 e0       	ldi	r18, 0x01	; 1
    d14e:	40 e3       	ldi	r20, 0x30	; 48
    d150:	60 e7       	ldi	r22, 0x70	; 112
    d152:	82 e0       	ldi	r24, 0x02	; 2
    d154:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    d158:	40 e0       	ldi	r20, 0x00	; 0
    d15a:	61 e2       	ldi	r22, 0x21	; 33
    d15c:	78 e3       	ldi	r23, 0x38	; 56
    d15e:	83 e0       	ldi	r24, 0x03	; 3
    d160:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    d164:	21 e0       	ldi	r18, 0x01	; 1
    d166:	40 e3       	ldi	r20, 0x30	; 48
    d168:	60 e8       	ldi	r22, 0x80	; 128
    d16a:	83 e0       	ldi	r24, 0x03	; 3
    d16c:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    d170:	40 e0       	ldi	r20, 0x00	; 0
    d172:	6e e1       	ldi	r22, 0x1E	; 30
    d174:	78 e3       	ldi	r23, 0x38	; 56
    d176:	84 e0       	ldi	r24, 0x04	; 4
    d178:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    d17c:	21 e0       	ldi	r18, 0x01	; 1
    d17e:	40 e3       	ldi	r20, 0x30	; 48
    d180:	60 e9       	ldi	r22, 0x90	; 144
    d182:	84 e0       	ldi	r24, 0x04	; 4
    d184:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	LBRotateSprites();
    d188:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	stream_text_middle((const char*) text, 12);
    d18c:	6c e0       	ldi	r22, 0x0C	; 12
    d18e:	ce 01       	movw	r24, r28
    d190:	0e 94 4c 68 	call	0xd098	; 0xd098 <stream_text_middle>
	LBWaitSeconds(2);
    d194:	82 e0       	ldi	r24, 0x02	; 2
}
    d196:	df 91       	pop	r29
    d198:	cf 91       	pop	r28
    d19a:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12);
	LBWaitSeconds(2);
    d19c:	0c 94 64 52 	jmp	0xa4c8	; 0xa4c8 <LBWaitSeconds>

0000d1a0 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    d1a0:	ef 92       	push	r14
    d1a2:	ff 92       	push	r15
    d1a4:	0f 93       	push	r16
    d1a6:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    d1a8:	c8 2f       	mov	r28, r24
    d1aa:	e6 2e       	mov	r14, r22
    d1ac:	f1 2c       	mov	r15, r1
    d1ae:	e8 0e       	add	r14, r24
    d1b0:	f1 1c       	adc	r15, r1
    d1b2:	8c 2f       	mov	r24, r28
    d1b4:	90 e0       	ldi	r25, 0x00	; 0
    d1b6:	8e 15       	cp	r24, r14
    d1b8:	9f 05       	cpc	r25, r15
    d1ba:	7c f4       	brge	.+30     	; 0xd1da <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    d1bc:	40 e0       	ldi	r20, 0x00	; 0
    d1be:	62 e4       	ldi	r22, 0x42	; 66
    d1c0:	78 e3       	ldi	r23, 0x38	; 56
    d1c2:	8c 2f       	mov	r24, r28
    d1c4:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    d1c8:	01 e0       	ldi	r16, 0x01	; 1
    d1ca:	21 e0       	ldi	r18, 0x01	; 1
    d1cc:	40 e0       	ldi	r20, 0x00	; 0
    d1ce:	60 ee       	ldi	r22, 0xE0	; 224
    d1d0:	8c 2f       	mov	r24, r28
    d1d2:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    d1d6:	cf 5f       	subi	r28, 0xFF	; 255
    d1d8:	ec cf       	rjmp	.-40     	; 0xd1b2 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    d1da:	cf 91       	pop	r28
    d1dc:	0f 91       	pop	r16
    d1de:	ff 90       	pop	r15
    d1e0:	ef 90       	pop	r14
    d1e2:	08 95       	ret

0000d1e4 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    d1e4:	61 e0       	ldi	r22, 0x01	; 1
    d1e6:	81 e0       	ldi	r24, 0x01	; 1
    d1e8:	0e 94 ad 50 	call	0xa15a	; 0xa15a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d1ec:	64 e1       	ldi	r22, 0x14	; 20
    d1ee:	80 e0       	ldi	r24, 0x00	; 0
    d1f0:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
	LBRotateSprites();
    d1f4:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	ClearVram();
    d1f8:	0e 94 a1 41 	call	0x8342	; 0x8342 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    d1fc:	60 e0       	ldi	r22, 0x00	; 0
    d1fe:	81 e0       	ldi	r24, 0x01	; 1
    d200:	0c 94 a1 50 	jmp	0xa142	; 0xa142 <FadeIn>

0000d204 <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    d204:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <fade_through>
	StartSong(spacesong);
    d208:	88 ee       	ldi	r24, 0xE8	; 232
    d20a:	9b e0       	ldi	r25, 0x0B	; 11
    d20c:	0e 94 95 44 	call	0x892a	; 0x892a <StartSong>
	Screen.scrollX = 0;
    d210:	ef ea       	ldi	r30, 0xAF	; 175
    d212:	fc e0       	ldi	r31, 0x0C	; 12
    d214:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d216:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d218:	80 e2       	ldi	r24, 0x20	; 32
    d21a:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d21c:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    d21e:	85 e0       	ldi	r24, 0x05	; 5
    d220:	9a e0       	ldi	r25, 0x0A	; 10
    d222:	0e 94 83 68 	call	0xd106	; 0xd106 <print_scroll>
	StopSong();
    d226:	0c 94 be 44 	jmp	0x897c	; 0x897c <StopSong>

0000d22a <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    d22a:	0f 93       	push	r16
    d22c:	cf 93       	push	r28
    d22e:	df 93       	push	r29
    d230:	c8 2f       	mov	r28, r24
    d232:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    d234:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d238:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    d23c:	8d e1       	ldi	r24, 0x1D	; 29
    d23e:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    d242:	85 e4       	ldi	r24, 0x45	; 69
    d244:	98 e3       	ldi	r25, 0x38	; 56
    d246:	90 93 b1 0c 	sts	0x0CB1, r25
    d24a:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    d24e:	83 e0       	ldi	r24, 0x03	; 3
    d250:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    d254:	82 e0       	ldi	r24, 0x02	; 2
    d256:	0e 94 e5 5b 	call	0xb7ca	; 0xb7ca <clear_overlay>
	game.current_level_index = index;
    d25a:	c0 93 cf 0d 	sts	0x0DCF, r28
	game.level_ended = 0;
    d25e:	10 92 d7 0d 	sts	0x0DD7, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    d262:	10 92 52 0e 	sts	0x0E52, r1
    d266:	10 92 51 0e 	sts	0x0E51, r1
	p->pressed = 0;
    d26a:	10 92 4e 0e 	sts	0x0E4E, r1
    d26e:	10 92 4d 0e 	sts	0x0E4D, r1
	p->released = 0;
    d272:	10 92 50 0e 	sts	0x0E50, r1
    d276:	10 92 4f 0e 	sts	0x0E4F, r1
	p->held_cycles = 0;
    d27a:	10 92 53 0e 	sts	0x0E53, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    d27e:	10 92 cd 0e 	sts	0x0ECD, r1
    d282:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    d286:	10 92 c9 0e 	sts	0x0EC9, r1
    d28a:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    d28e:	10 92 cb 0e 	sts	0x0ECB, r1
    d292:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    d296:	10 92 ce 0e 	sts	0x0ECE, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    d29a:	8c 2f       	mov	r24, r28
    d29c:	90 e0       	ldi	r25, 0x00	; 0
    d29e:	8a 30       	cpi	r24, 0x0A	; 10
    d2a0:	91 05       	cpc	r25, r1
    d2a2:	d8 f4       	brcc	.+54     	; 0xd2da <load_level+0xb0>
    d2a4:	fc 01       	movw	r30, r24
    d2a6:	ef 5b       	subi	r30, 0xBF	; 191
    d2a8:	ff 4f       	sbci	r31, 0xFF	; 255
    d2aa:	0c 94 70 75 	jmp	0xeae0	; 0xeae0 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    d2ae:	89 e7       	ldi	r24, 0x79	; 121
    d2b0:	97 e7       	ldi	r25, 0x77	; 119
    d2b2:	11 c0       	rjmp	.+34     	; 0xd2d6 <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    d2b4:	88 e7       	ldi	r24, 0x78	; 120
    d2b6:	96 e7       	ldi	r25, 0x76	; 118
    d2b8:	0e c0       	rjmp	.+28     	; 0xd2d6 <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    d2ba:	87 e7       	ldi	r24, 0x77	; 119
    d2bc:	95 e7       	ldi	r25, 0x75	; 117
    d2be:	0b c0       	rjmp	.+22     	; 0xd2d6 <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    d2c0:	86 e7       	ldi	r24, 0x76	; 118
    d2c2:	94 e7       	ldi	r25, 0x74	; 116
    d2c4:	08 c0       	rjmp	.+16     	; 0xd2d6 <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    d2c6:	84 e7       	ldi	r24, 0x74	; 116
    d2c8:	92 e7       	ldi	r25, 0x72	; 114
    d2ca:	05 c0       	rjmp	.+10     	; 0xd2d6 <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    d2cc:	85 e7       	ldi	r24, 0x75	; 117
    d2ce:	93 e7       	ldi	r25, 0x73	; 115
    d2d0:	02 c0       	rjmp	.+4      	; 0xd2d6 <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    d2d2:	83 e7       	ldi	r24, 0x73	; 115
    d2d4:	91 e7       	ldi	r25, 0x71	; 113
    d2d6:	0e 94 25 5e 	call	0xbc4a	; 0xbc4a <map_level_info>
	}
	game.column_count = 0;
    d2da:	10 92 cb 0d 	sts	0x0DCB, r1
	game.camera_x = get_camera_x(index);
    d2de:	10 92 bb 0d 	sts	0x0DBB, r1
    d2e2:	10 92 ba 0d 	sts	0x0DBA, r1
	game.camera_y = get_camera_y(index);
    d2e6:	10 92 c2 0d 	sts	0x0DC2, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    d2ea:	88 e1       	ldi	r24, 0x18	; 24
    d2ec:	90 e0       	ldi	r25, 0x00	; 0
    d2ee:	90 93 da 0d 	sts	0x0DDA, r25
    d2f2:	80 93 d9 0d 	sts	0x0DD9, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    d2f6:	88 ea       	ldi	r24, 0xA8	; 168
    d2f8:	90 e0       	ldi	r25, 0x00	; 0
    d2fa:	90 93 dc 0d 	sts	0x0DDC, r25
    d2fe:	80 93 db 0d 	sts	0x0DDB, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    d302:	28 ed       	ldi	r18, 0xD8	; 216
    d304:	37 e0       	ldi	r19, 0x07	; 7
    d306:	30 93 55 0e 	sts	0x0E55, r19
    d30a:	20 93 54 0e 	sts	0x0E54, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    d30e:	90 93 57 0e 	sts	0x0E57, r25
    d312:	80 93 56 0e 	sts	0x0E56, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    d316:	8d e1       	ldi	r24, 0x1D	; 29
    d318:	80 93 c3 0d 	sts	0x0DC3, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    d31c:	80 93 c7 0d 	sts	0x0DC7, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    d320:	8a e1       	ldi	r24, 0x1A	; 26
    d322:	80 93 c4 0d 	sts	0x0DC4, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    d326:	80 93 c8 0d 	sts	0x0DC8, r24
	game.scroll_x = 0;
    d32a:	10 92 c5 0d 	sts	0x0DC5, r1
	game.scroll_y = 0;
    d32e:	10 92 c6 0d 	sts	0x0DC6, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    d332:	8a e0       	ldi	r24, 0x0A	; 10
    d334:	80 93 d6 0d 	sts	0x0DD6, r24
	render_camera_view();
    d338:	0e 94 25 5c 	call	0xb84a	; 0xb84a <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    d33c:	41 eb       	ldi	r20, 0xB1	; 177
    d33e:	5b e0       	ldi	r21, 0x0B	; 11
    d340:	6d e1       	ldi	r22, 0x1D	; 29
    d342:	80 e0       	ldi	r24, 0x00	; 0
    d344:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    d348:	44 ea       	ldi	r20, 0xA4	; 164
    d34a:	5b e0       	ldi	r21, 0x0B	; 11
    d34c:	6d e1       	ldi	r22, 0x1D	; 29
    d34e:	82 e1       	ldi	r24, 0x12	; 18
    d350:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    d354:	4a ea       	ldi	r20, 0xAA	; 170
    d356:	5b e0       	ldi	r21, 0x0B	; 11
    d358:	6e e1       	ldi	r22, 0x1E	; 30
    d35a:	80 e0       	ldi	r24, 0x00	; 0
    d35c:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    d360:	49 eb       	ldi	r20, 0xB9	; 185
    d362:	5b e0       	ldi	r21, 0x0B	; 11
    d364:	6e e1       	ldi	r22, 0x1E	; 30
    d366:	81 e1       	ldi	r24, 0x11	; 17
    d368:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    d36c:	43 e6       	ldi	r20, 0x63	; 99
    d36e:	5b e0       	ldi	r21, 0x0B	; 11
    d370:	6f e1       	ldi	r22, 0x1F	; 31
    d372:	81 e1       	ldi	r24, 0x11	; 17
    d374:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    d378:	21 e0       	ldi	r18, 0x01	; 1
    d37a:	40 91 e8 0d 	lds	r20, 0x0DE8
    d37e:	6d e1       	ldi	r22, 0x1D	; 29
    d380:	89 e0       	ldi	r24, 0x09	; 9
    d382:	0e 94 ba 51 	call	0xa374	; 0xa374 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    d386:	40 91 c0 0d 	lds	r20, 0x0DC0
    d38a:	50 91 c1 0d 	lds	r21, 0x0DC1
    d38e:	21 e0       	ldi	r18, 0x01	; 1
    d390:	6d e1       	ldi	r22, 0x1D	; 29
    d392:	8b e1       	ldi	r24, 0x1B	; 27
    d394:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    d398:	21 e0       	ldi	r18, 0x01	; 1
    d39a:	40 91 cd 0d 	lds	r20, 0x0DCD
    d39e:	6e e1       	ldi	r22, 0x1E	; 30
    d3a0:	89 e0       	ldi	r24, 0x09	; 9
    d3a2:	0e 94 ba 51 	call	0xa374	; 0xa374 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    d3a6:	40 91 be 0d 	lds	r20, 0x0DBE
    d3aa:	50 91 bf 0d 	lds	r21, 0x0DBF
    d3ae:	21 e0       	ldi	r18, 0x01	; 1
    d3b0:	6e e1       	ldi	r22, 0x1E	; 30
    d3b2:	8b e1       	ldi	r24, 0x1B	; 27
    d3b4:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    d3b8:	40 91 bc 0d 	lds	r20, 0x0DBC
    d3bc:	50 91 bd 0d 	lds	r21, 0x0DBD
    d3c0:	21 e0       	ldi	r18, 0x01	; 1
    d3c2:	6f e1       	ldi	r22, 0x1F	; 31
    d3c4:	8b e1       	ldi	r24, 0x1B	; 27
    d3c6:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    d3ca:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    d3ce:	81 11       	cpse	r24, r1
    d3d0:	39 c0       	rjmp	.+114    	; 0xd444 <load_level+0x21a>
    d3d2:	dd 23       	and	r29, r29
    d3d4:	b9 f1       	breq	.+110    	; 0xd444 <load_level+0x21a>
	{
		map_ship();
    d3d6:	0e 94 10 5e 	call	0xbc20	; 0xbc20 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    d3da:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    d3dc:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    d3de:	81 e0       	ldi	r24, 0x01	; 1
    d3e0:	90 e0       	ldi	r25, 0x00	; 0
    d3e2:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    d3e6:	8c 2f       	mov	r24, r28
    d3e8:	90 e0       	ldi	r25, 0x00	; 0
    d3ea:	88 3a       	cpi	r24, 0xA8	; 168
    d3ec:	91 05       	cpc	r25, r1
    d3ee:	74 f0       	brlt	.+28     	; 0xd40c <load_level+0x1e2>
			{
				LBMapSprite(0, map_hero_idle, 0);
    d3f0:	40 e0       	ldi	r20, 0x00	; 0
    d3f2:	66 e1       	ldi	r22, 0x16	; 22
    d3f4:	78 e3       	ldi	r23, 0x38	; 56
    d3f6:	80 e0       	ldi	r24, 0x00	; 0
    d3f8:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    d3fc:	03 e0       	ldi	r16, 0x03	; 3
    d3fe:	22 e0       	ldi	r18, 0x02	; 2
    d400:	48 ea       	ldi	r20, 0xA8	; 168
    d402:	68 e1       	ldi	r22, 0x18	; 24
    d404:	80 e0       	ldi	r24, 0x00	; 0
    d406:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
				ship_increment = -3;
    d40a:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    d40c:	8d e2       	ldi	r24, 0x2D	; 45
    d40e:	9e e0       	ldi	r25, 0x0E	; 14
    d410:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    d414:	40 e0       	ldi	r20, 0x00	; 0
    d416:	bc 01       	movw	r22, r24
    d418:	86 e0       	ldi	r24, 0x06	; 6
    d41a:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    d41e:	02 e0       	ldi	r16, 0x02	; 2
    d420:	24 e0       	ldi	r18, 0x04	; 4
    d422:	4c 2f       	mov	r20, r28
    d424:	68 e0       	ldi	r22, 0x08	; 8
    d426:	86 e0       	ldi	r24, 0x06	; 6
    d428:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
			ship_y += ship_increment;
    d42c:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    d42e:	39 f4       	brne	.+14     	; 0xd43e <load_level+0x214>
			{
				clear_sprites(6, 8);
    d430:	68 e0       	ldi	r22, 0x08	; 8
    d432:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    d434:	df 91       	pop	r29
    d436:	cf 91       	pop	r28
    d438:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    d43a:	0c 94 d0 68 	jmp	0xd1a0	; 0xd1a0 <clear_sprites>
				break;
			}
			LBRotateSprites();
    d43e:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
		}
    d442:	cd cf       	rjmp	.-102    	; 0xd3de <load_level+0x1b4>
	}
}
    d444:	df 91       	pop	r29
    d446:	cf 91       	pop	r28
    d448:	0f 91       	pop	r16
    d44a:	08 95       	ret

0000d44c <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    d44c:	0f 93       	push	r16
    d44e:	1f 93       	push	r17
    d450:	cf 93       	push	r28
    d452:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    d454:	18 2f       	mov	r17, r24
    d456:	c6 2f       	mov	r28, r22
    d458:	d0 e0       	ldi	r29, 0x00	; 0
    d45a:	c8 0f       	add	r28, r24
    d45c:	d1 1d       	adc	r29, r1
    d45e:	81 2f       	mov	r24, r17
    d460:	90 e0       	ldi	r25, 0x00	; 0
    d462:	8c 17       	cp	r24, r28
    d464:	9d 07       	cpc	r25, r29
    d466:	4c f4       	brge	.+18     	; 0xd47a <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    d468:	01 e0       	ldi	r16, 0x01	; 1
    d46a:	21 e0       	ldi	r18, 0x01	; 1
    d46c:	40 e0       	ldi	r20, 0x00	; 0
    d46e:	60 ee       	ldi	r22, 0xE0	; 224
    d470:	81 2f       	mov	r24, r17
    d472:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    d476:	1f 5f       	subi	r17, 0xFF	; 255
    d478:	f2 cf       	rjmp	.-28     	; 0xd45e <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    d47a:	df 91       	pop	r29
    d47c:	cf 91       	pop	r28
    d47e:	1f 91       	pop	r17
    d480:	0f 91       	pop	r16
    d482:	08 95       	ret

0000d484 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    d484:	fc 01       	movw	r30, r24
    d486:	20 81       	ld	r18, Z
    d488:	31 81       	ldd	r19, Z+1	; 0x01
    d48a:	28 70       	andi	r18, 0x08	; 8
    d48c:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    d48e:	81 e0       	ldi	r24, 0x01	; 1
    d490:	23 2b       	or	r18, r19
    d492:	09 f4       	brne	.+2      	; 0xd496 <select_pressed+0x12>
    d494:	80 e0       	ldi	r24, 0x00	; 0
}
    d496:	08 95       	ret

0000d498 <stream_text_anywhere>:
{
	return (p->pressed & BTN_SELECT);
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    d498:	ff 92       	push	r15
    d49a:	0f 93       	push	r16
    d49c:	1f 93       	push	r17
    d49e:	cf 93       	push	r28
    d4a0:	df 93       	push	r29
    d4a2:	f6 2e       	mov	r15, r22
    d4a4:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    d4a6:	fc 01       	movw	r30, r24
    d4a8:	24 91       	lpm	r18, Z
    d4aa:	23 32       	cpi	r18, 0x23	; 35
    d4ac:	b1 f0       	breq	.+44     	; 0xd4da <stream_text_anywhere+0x42>
    d4ae:	ec 01       	movw	r28, r24
    d4b0:	0f 2d       	mov	r16, r15
    d4b2:	08 1b       	sub	r16, r24
    d4b4:	8c 2f       	mov	r24, r28
    d4b6:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    d4b8:	21 96       	adiw	r28, 0x01	; 1
    d4ba:	fe 01       	movw	r30, r28
    d4bc:	31 97       	sbiw	r30, 0x01	; 1
    d4be:	44 91       	lpm	r20, Z
    d4c0:	44 23       	and	r20, r20
    d4c2:	41 f0       	breq	.+16     	; 0xd4d4 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    d4c4:	61 2f       	mov	r22, r17
    d4c6:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    d4ca:	80 e7       	ldi	r24, 0x70	; 112
    d4cc:	97 e1       	ldi	r25, 0x17	; 23
    d4ce:	0e 94 d7 41 	call	0x83ae	; 0x83ae <WaitUs>
    d4d2:	f0 cf       	rjmp	.-32     	; 0xd4b4 <stream_text_anywhere+0x1c>
		}
		y++;
    d4d4:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    d4d6:	ce 01       	movw	r24, r28
    d4d8:	e6 cf       	rjmp	.-52     	; 0xd4a6 <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    d4da:	df 91       	pop	r29
    d4dc:	cf 91       	pop	r28
    d4de:	1f 91       	pop	r17
    d4e0:	0f 91       	pop	r16
    d4e2:	ff 90       	pop	r15
    d4e4:	08 95       	ret

0000d4e6 <map_particles>:

void map_particles()
{
    d4e6:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    d4e8:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    d4ea:	40 e0       	ldi	r20, 0x00	; 0
    d4ec:	66 e3       	ldi	r22, 0x36	; 54
    d4ee:	78 e3       	ldi	r23, 0x38	; 56
    d4f0:	8c 2f       	mov	r24, r28
    d4f2:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    d4f6:	cf 5f       	subi	r28, 0xFF	; 255
    d4f8:	c4 31       	cpi	r28, 0x14	; 20
    d4fa:	b9 f7       	brne	.-18     	; 0xd4ea <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    d4fc:	cf 91       	pop	r28
    d4fe:	08 95       	ret

0000d500 <place_particles>:

void place_particles()
{
    d500:	0f 93       	push	r16
    d502:	1f 93       	push	r17
    d504:	cf 93       	push	r28
    d506:	df 93       	push	r29
    d508:	1f 92       	push	r1
    d50a:	cd b7       	in	r28, 0x3d	; 61
    d50c:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    d50e:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    d510:	68 ec       	ldi	r22, 0xC8	; 200
    d512:	80 e0       	ldi	r24, 0x00	; 0
    d514:	0e 94 4e 52 	call	0xa49c	; 0xa49c <LBRandom>
    d518:	48 2f       	mov	r20, r24
    d51a:	60 ee       	ldi	r22, 0xE0	; 224
    d51c:	80 e0       	ldi	r24, 0x00	; 0
    d51e:	49 83       	std	Y+1, r20	; 0x01
    d520:	0e 94 4e 52 	call	0xa49c	; 0xa49c <LBRandom>
    d524:	68 2f       	mov	r22, r24
    d526:	01 e0       	ldi	r16, 0x01	; 1
    d528:	21 e0       	ldi	r18, 0x01	; 1
    d52a:	49 81       	ldd	r20, Y+1	; 0x01
    d52c:	81 2f       	mov	r24, r17
    d52e:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    d532:	1f 5f       	subi	r17, 0xFF	; 255
    d534:	14 31       	cpi	r17, 0x14	; 20
    d536:	61 f7       	brne	.-40     	; 0xd510 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    d538:	0f 90       	pop	r0
    d53a:	df 91       	pop	r29
    d53c:	cf 91       	pop	r28
    d53e:	1f 91       	pop	r17
    d540:	0f 91       	pop	r16
    d542:	08 95       	ret

0000d544 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    d544:	ef 92       	push	r14
    d546:	ff 92       	push	r15
    d548:	0f 93       	push	r16
    d54a:	1f 93       	push	r17
    d54c:	cf 93       	push	r28
    d54e:	df 93       	push	r29
    d550:	d8 2f       	mov	r29, r24
    d552:	16 2f       	mov	r17, r22
    d554:	89 e0       	ldi	r24, 0x09	; 9
    d556:	e8 2e       	mov	r14, r24
    d558:	80 e1       	ldi	r24, 0x10	; 16
    d55a:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    d55c:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    d55e:	f7 01       	movw	r30, r14
    d560:	40 81       	ld	r20, Z
    d562:	4d 0f       	add	r20, r29
    d564:	01 e0       	ldi	r16, 0x01	; 1
    d566:	21 e0       	ldi	r18, 0x01	; 1
    d568:	31 97       	sbiw	r30, 0x01	; 1
    d56a:	60 81       	ld	r22, Z
    d56c:	8c 2f       	mov	r24, r28
    d56e:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    d572:	f7 01       	movw	r30, r14
    d574:	80 81       	ld	r24, Z
    d576:	89 3c       	cpi	r24, 0xC9	; 201
    d578:	50 f0       	brcs	.+20     	; 0xd58e <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    d57a:	60 ee       	ldi	r22, 0xE0	; 224
    d57c:	80 e0       	ldi	r24, 0x00	; 0
    d57e:	0e 94 4e 52 	call	0xa49c	; 0xa49c <LBRandom>
    d582:	21 e0       	ldi	r18, 0x01	; 1
    d584:	41 2f       	mov	r20, r17
    d586:	68 2f       	mov	r22, r24
    d588:	8c 2f       	mov	r24, r28
    d58a:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    d58e:	cf 5f       	subi	r28, 0xFF	; 255
    d590:	f4 e0       	ldi	r31, 0x04	; 4
    d592:	ef 0e       	add	r14, r31
    d594:	f1 1c       	adc	r15, r1
    d596:	c4 31       	cpi	r28, 0x14	; 20
    d598:	11 f7       	brne	.-60     	; 0xd55e <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    d59a:	df 91       	pop	r29
    d59c:	cf 91       	pop	r28
    d59e:	1f 91       	pop	r17
    d5a0:	0f 91       	pop	r16
    d5a2:	ff 90       	pop	r15
    d5a4:	ef 90       	pop	r14
    d5a6:	08 95       	ret

0000d5a8 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    d5a8:	82 50       	subi	r24, 0x02	; 2
    d5aa:	87 30       	cpi	r24, 0x07	; 7
    d5ac:	48 f4       	brcc	.+18     	; 0xd5c0 <get_emarald_map+0x18>
    d5ae:	e8 2f       	mov	r30, r24
    d5b0:	f0 e0       	ldi	r31, 0x00	; 0
    d5b2:	ee 0f       	add	r30, r30
    d5b4:	ff 1f       	adc	r31, r31
    d5b6:	ee 5f       	subi	r30, 0xFE	; 254
    d5b8:	fa 4f       	sbci	r31, 0xFA	; 250
    d5ba:	80 81       	ld	r24, Z
    d5bc:	91 81       	ldd	r25, Z+1	; 0x01
    d5be:	08 95       	ret
    d5c0:	8a e2       	ldi	r24, 0x2A	; 42
    d5c2:	98 e3       	ldi	r25, 0x38	; 56
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    d5c4:	08 95       	ret

0000d5c6 <music_transition>:

void music_transition()
{
	if (is_space())
    d5c6:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    d5ca:	88 23       	and	r24, r24
    d5cc:	19 f0       	breq	.+6      	; 0xd5d4 <music_transition+0xe>
	{
		StartSong(spacesong);
    d5ce:	88 ee       	ldi	r24, 0xE8	; 232
    d5d0:	9b e0       	ldi	r25, 0x0B	; 11
    d5d2:	06 c0       	rjmp	.+12     	; 0xd5e0 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    d5d4:	80 91 cf 0d 	lds	r24, 0x0DCF
    d5d8:	88 23       	and	r24, r24
    d5da:	21 f0       	breq	.+8      	; 0xd5e4 <music_transition+0x1e>
	{
		StartSong(planetsong);
    d5dc:	88 e8       	ldi	r24, 0x88	; 136
    d5de:	92 e1       	ldi	r25, 0x12	; 18
    d5e0:	0c 94 95 44 	jmp	0x892a	; 0x892a <StartSong>
    d5e4:	08 95       	ret

0000d5e6 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d5e6:	cf 92       	push	r12
    d5e8:	df 92       	push	r13
    d5ea:	ef 92       	push	r14
    d5ec:	ff 92       	push	r15
    d5ee:	0f 93       	push	r16
    d5f0:	1f 93       	push	r17
    d5f2:	cf 93       	push	r28
    d5f4:	df 93       	push	r29
    d5f6:	1f 92       	push	r1
    d5f8:	cd b7       	in	r28, 0x3d	; 61
    d5fa:	de b7       	in	r29, 0x3e	; 62
    d5fc:	c8 2e       	mov	r12, r24
    d5fe:	e6 2e       	mov	r14, r22
    d600:	12 2f       	mov	r17, r18
    d602:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    d604:	49 83       	std	Y+1, r20	; 0x01
    d606:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <fade_through>
	Screen.scrollX = 0;
    d60a:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d60e:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d612:	80 e2       	ldi	r24, 0x20	; 32
    d614:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d618:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    d61c:	10 92 c5 0d 	sts	0x0DC5, r1
	game.scroll_y = 0;
    d620:	10 92 c6 0d 	sts	0x0DC6, r1
	map_particles();
    d624:	0e 94 73 6a 	call	0xd4e6	; 0xd4e6 <map_particles>
	map_ship();
    d628:	0e 94 10 5e 	call	0xbc20	; 0xbc20 <map_ship>
	place_particles();
    d62c:	0e 94 80 6a 	call	0xd500	; 0xd500 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    d630:	4c e2       	ldi	r20, 0x2C	; 44
    d632:	50 e6       	ldi	r21, 0x60	; 96
    d634:	69 81       	ldd	r22, Y+1	; 0x01
    d636:	80 e0       	ldi	r24, 0x00	; 0
    d638:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
	game.current_level_index = index;
    d63c:	c0 92 cf 0d 	sts	0x0DCF, r12
	music_transition();
    d640:	0e 94 e3 6a 	call	0xd5c6	; 0xd5c6 <music_transition>
	if (!is_space())
    d644:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    d648:	81 11       	cpse	r24, r1
    d64a:	0f c0       	rjmp	.+30     	; 0xd66a <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    d64c:	8c 2d       	mov	r24, r12
    d64e:	0e 94 d4 6a 	call	0xd5a8	; 0xd5a8 <get_emarald_map>
    d652:	40 e0       	ldi	r20, 0x00	; 0
    d654:	bc 01       	movw	r22, r24
    d656:	88 e0       	ldi	r24, 0x08	; 8
    d658:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    d65c:	01 e0       	ldi	r16, 0x01	; 1
    d65e:	21 e0       	ldi	r18, 0x01	; 1
    d660:	40 e3       	ldi	r20, 0x30	; 48
    d662:	60 e7       	ldi	r22, 0x70	; 112
    d664:	88 e0       	ldi	r24, 0x08	; 8
    d666:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d66a:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    d66c:	81 e0       	ldi	r24, 0x01	; 1
    d66e:	90 e0       	ldi	r25, 0x00	; 0
    d670:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    d674:	8d e2       	ldi	r24, 0x2D	; 45
    d676:	9e e0       	ldi	r25, 0x0E	; 14
    d678:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    d67c:	40 e0       	ldi	r20, 0x00	; 0
    d67e:	bc 01       	movw	r22, r24
    d680:	80 e0       	ldi	r24, 0x00	; 0
    d682:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    d686:	02 e0       	ldi	r16, 0x02	; 2
    d688:	24 e0       	ldi	r18, 0x04	; 4
    d68a:	48 e6       	ldi	r20, 0x68	; 104
    d68c:	68 e6       	ldi	r22, 0x68	; 104
    d68e:	80 e0       	ldi	r24, 0x00	; 0
    d690:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
		frame_counter++;
    d694:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    d696:	8d 2d       	mov	r24, r13
    d698:	8f 70       	andi	r24, 0x0F	; 15
    d69a:	29 f4       	brne	.+10     	; 0xd6a6 <planet_transition+0xc0>
    d69c:	90 91 b3 0c 	lds	r25, 0x0CB3
    d6a0:	9e 0d       	add	r25, r14
    d6a2:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    d6a6:	6f 2d       	mov	r22, r15
    d6a8:	81 2f       	mov	r24, r17
    d6aa:	0e 94 a2 6a 	call	0xd544	; 0xd544 <animate_particles>
		LBRotateSprites();
    d6ae:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    d6b2:	8f ef       	ldi	r24, 0xFF	; 255
    d6b4:	d8 12       	cpse	r13, r24
    d6b6:	da cf       	rjmp	.-76     	; 0xd66c <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    d6b8:	82 e0       	ldi	r24, 0x02	; 2
    d6ba:	80 93 ce 0d 	sts	0x0DCE, r24
	ClearVram();
    d6be:	0e 94 a1 41 	call	0x8342	; 0x8342 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d6c2:	64 e1       	ldi	r22, 0x14	; 20
    d6c4:	80 e0       	ldi	r24, 0x00	; 0
    d6c6:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
	LBRotateSprites();
    d6ca:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	fade_through();
    d6ce:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <fade_through>
	game.level_score = 0;
    d6d2:	10 92 bf 0d 	sts	0x0DBF, r1
    d6d6:	10 92 be 0d 	sts	0x0DBE, r1
	load_level(index, true);
    d6da:	61 e0       	ldi	r22, 0x01	; 1
    d6dc:	8c 2d       	mov	r24, r12
    d6de:	0e 94 15 69 	call	0xd22a	; 0xd22a <load_level>
	init_player_state();
    d6e2:	0e 94 d6 57 	call	0xafac	; 0xafac <init_player_state>
	init_boss_state();
    d6e6:	0e 94 26 57 	call	0xae4c	; 0xae4c <init_boss_state>
	init_enemy_state();
}
    d6ea:	0f 90       	pop	r0
    d6ec:	df 91       	pop	r29
    d6ee:	cf 91       	pop	r28
    d6f0:	1f 91       	pop	r17
    d6f2:	0f 91       	pop	r16
    d6f4:	ff 90       	pop	r15
    d6f6:	ef 90       	pop	r14
    d6f8:	df 90       	pop	r13
    d6fa:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d6fc:	0c 94 51 53 	jmp	0xa6a2	; 0xa6a2 <init_enemy_state>

0000d700 <intro>:
}


void intro()
{
    d700:	0f 93       	push	r16
	fade_through();
    d702:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <fade_through>
	game.lives = LIVES;
    d706:	ea eb       	ldi	r30, 0xBA	; 186
    d708:	fd e0       	ldi	r31, 0x0D	; 13
    d70a:	8a e0       	ldi	r24, 0x0A	; 10
    d70c:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d70e:	13 82       	std	Z+3, r1	; 0x03
    d710:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d712:	15 82       	std	Z+5, r1	; 0x05
    d714:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d716:	17 82       	std	Z+7, r1	; 0x07
    d718:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    d71a:	88 e8       	ldi	r24, 0x88	; 136
    d71c:	92 e1       	ldi	r25, 0x12	; 18
    d71e:	0e 94 95 44 	call	0x892a	; 0x892a <StartSong>
	print_scroll(strIntro);
    d722:	8b eb       	ldi	r24, 0xBB	; 187
    d724:	9a e0       	ldi	r25, 0x0A	; 10
    d726:	0e 94 83 68 	call	0xd106	; 0xd106 <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    d72a:	07 ec       	ldi	r16, 0xC7	; 199
    d72c:	2d ef       	ldi	r18, 0xFD	; 253
    d72e:	4c e1       	ldi	r20, 0x1C	; 28
    d730:	61 e0       	ldi	r22, 0x01	; 1
    d732:	80 e0       	ldi	r24, 0x00	; 0
    d734:	0e 94 f3 6a 	call	0xd5e6	; 0xd5e6 <planet_transition>
}
    d738:	0f 91       	pop	r16
    d73a:	08 95       	ret

0000d73c <demo_load>:

void demo_load(u8 idx)
{
    d73c:	cf 93       	push	r28
    d73e:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    d740:	ea eb       	ldi	r30, 0xBA	; 186
    d742:	fd e0       	ldi	r31, 0x0D	; 13
    d744:	8a e0       	ldi	r24, 0x0A	; 10
    d746:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d748:	13 82       	std	Z+3, r1	; 0x03
    d74a:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d74c:	15 82       	std	Z+5, r1	; 0x05
    d74e:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d750:	17 82       	std	Z+7, r1	; 0x07
    d752:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    d754:	82 e0       	ldi	r24, 0x02	; 2
    d756:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    d758:	0e 94 a1 41 	call	0x8342	; 0x8342 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d75c:	64 e1       	ldi	r22, 0x14	; 20
    d75e:	80 e0       	ldi	r24, 0x00	; 0
    d760:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
	LBRotateSprites();
    d764:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	fade_through();
    d768:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <fade_through>
	load_level(idx, true);
    d76c:	61 e0       	ldi	r22, 0x01	; 1
    d76e:	8c 2f       	mov	r24, r28
    d770:	0e 94 15 69 	call	0xd22a	; 0xd22a <load_level>
	init_player_state();
    d774:	0e 94 d6 57 	call	0xafac	; 0xafac <init_player_state>
	init_boss_state();
    d778:	0e 94 26 57 	call	0xae4c	; 0xae4c <init_boss_state>
	init_enemy_state();
}
    d77c:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d77e:	0c 94 51 53 	jmp	0xa6a2	; 0xa6a2 <init_enemy_state>

0000d782 <load_splash>:
}

void load_splash()
{
	fade_through();
    d782:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <fade_through>
	Screen.scrollX = 0;
    d786:	ef ea       	ldi	r30, 0xAF	; 175
    d788:	fc e0       	ldi	r31, 0x0C	; 12
    d78a:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d78c:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d78e:	80 e2       	ldi	r24, 0x20	; 32
    d790:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d792:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d794:	ea eb       	ldi	r30, 0xBA	; 186
    d796:	fd e0       	ldi	r31, 0x0D	; 13
    d798:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    d79a:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d79c:	64 e1       	ldi	r22, 0x14	; 20
    d79e:	80 e0       	ldi	r24, 0x00	; 0
    d7a0:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
	LBRotateSprites();
    d7a4:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d7a8:	4d ec       	ldi	r20, 0xCD	; 205
    d7aa:	5b e0       	ldi	r21, 0x0B	; 11
    d7ac:	6f e0       	ldi	r22, 0x0F	; 15
    d7ae:	88 e0       	ldi	r24, 0x08	; 8
    d7b0:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d7b4:	41 ec       	ldi	r20, 0xC1	; 193
    d7b6:	5b e0       	ldi	r21, 0x0B	; 11
    d7b8:	60 e1       	ldi	r22, 0x10	; 16
    d7ba:	88 e0       	ldi	r24, 0x08	; 8
    d7bc:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d7c0:	43 ed       	ldi	r20, 0xD3	; 211
    d7c2:	5b e0       	ldi	r21, 0x0B	; 11
    d7c4:	65 e1       	ldi	r22, 0x15	; 21
    d7c6:	84 e0       	ldi	r24, 0x04	; 4
    d7c8:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	DrawMap2(6, 5, map_splash);
    d7cc:	41 e5       	ldi	r20, 0x51	; 81
    d7ce:	51 e6       	ldi	r21, 0x61	; 97
    d7d0:	65 e0       	ldi	r22, 0x05	; 5
    d7d2:	86 e0       	ldi	r24, 0x06	; 6
    d7d4:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d7d8:	40 e0       	ldi	r20, 0x00	; 0
    d7da:	6f e3       	ldi	r22, 0x3F	; 63
    d7dc:	78 e3       	ldi	r23, 0x38	; 56
    d7de:	80 e0       	ldi	r24, 0x00	; 0
    d7e0:	0c 94 73 52 	jmp	0xa4e6	; 0xa4e6 <LBMapSprite>

0000d7e4 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d7e4:	2f 92       	push	r2
    d7e6:	3f 92       	push	r3
    d7e8:	5f 92       	push	r5
    d7ea:	6f 92       	push	r6
    d7ec:	7f 92       	push	r7
    d7ee:	8f 92       	push	r8
    d7f0:	9f 92       	push	r9
    d7f2:	af 92       	push	r10
    d7f4:	bf 92       	push	r11
    d7f6:	cf 92       	push	r12
    d7f8:	df 92       	push	r13
    d7fa:	ef 92       	push	r14
    d7fc:	ff 92       	push	r15
    d7fe:	0f 93       	push	r16
    d800:	1f 93       	push	r17
    d802:	cf 93       	push	r28
    d804:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d806:	81 e0       	ldi	r24, 0x01	; 1
    d808:	80 93 ce 0d 	sts	0x0DCE, r24
	game.high_score_index = -1;
    d80c:	8f ef       	ldi	r24, 0xFF	; 255
    d80e:	80 93 cc 0d 	sts	0x0DCC, r24
	fade_through();
    d812:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <fade_through>
	Screen.scrollX = 0;
    d816:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d81a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d81e:	80 e2       	ldi	r24, 0x20	; 32
    d820:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d824:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    d828:	8a e9       	ldi	r24, 0x9A	; 154
    d82a:	9d e0       	ldi	r25, 0x0D	; 13
    d82c:	0e 94 d3 5b 	call	0xb7a6	; 0xb7a6 <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d830:	41 ec       	ldi	r20, 0xC1	; 193
    d832:	5b e0       	ldi	r21, 0x0B	; 11
    d834:	63 e0       	ldi	r22, 0x03	; 3
    d836:	89 e0       	ldi	r24, 0x09	; 9
    d838:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d83c:	40 e0       	ldi	r20, 0x00	; 0
    d83e:	6a e2       	ldi	r22, 0x2A	; 42
    d840:	78 e3       	ldi	r23, 0x38	; 56
    d842:	80 e0       	ldi	r24, 0x00	; 0
    d844:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d848:	40 e0       	ldi	r20, 0x00	; 0
    d84a:	67 e2       	ldi	r22, 0x27	; 39
    d84c:	78 e3       	ldi	r23, 0x38	; 56
    d84e:	81 e0       	ldi	r24, 0x01	; 1
    d850:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d854:	01 e0       	ldi	r16, 0x01	; 1
    d856:	21 e0       	ldi	r18, 0x01	; 1
    d858:	48 e1       	ldi	r20, 0x18	; 24
    d85a:	68 e3       	ldi	r22, 0x38	; 56
    d85c:	80 e0       	ldi	r24, 0x00	; 0
    d85e:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d862:	21 e0       	ldi	r18, 0x01	; 1
    d864:	48 e1       	ldi	r20, 0x18	; 24
    d866:	68 ea       	ldi	r22, 0xA8	; 168
    d868:	81 e0       	ldi	r24, 0x01	; 1
    d86a:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
    d86e:	8c e9       	ldi	r24, 0x9C	; 156
    d870:	a8 2e       	mov	r10, r24
    d872:	8d e0       	ldi	r24, 0x0D	; 13
    d874:	b8 2e       	mov	r11, r24
    d876:	9d e9       	ldi	r25, 0x9D	; 157
    d878:	c9 2e       	mov	r12, r25
    d87a:	9d e0       	ldi	r25, 0x0D	; 13
    d87c:	d9 2e       	mov	r13, r25
    d87e:	2e e9       	ldi	r18, 0x9E	; 158
    d880:	82 2e       	mov	r8, r18
    d882:	2d e0       	ldi	r18, 0x0D	; 13
    d884:	92 2e       	mov	r9, r18
    d886:	74 01       	movw	r14, r8
    d888:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d88a:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d88c:	35 e0       	ldi	r19, 0x05	; 5
    d88e:	53 2e       	mov	r5, r19
    d890:	45 eb       	ldi	r20, 0xB5	; 181
    d892:	64 2e       	mov	r6, r20
    d894:	4d e0       	ldi	r20, 0x0D	; 13
    d896:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d898:	11 e4       	ldi	r17, 0x41	; 65
    d89a:	0e 2d       	mov	r16, r14
    d89c:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d89e:	80 2f       	mov	r24, r16
    d8a0:	65 2d       	mov	r22, r5
    d8a2:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    d8a6:	41 e0       	ldi	r20, 0x01	; 1
    d8a8:	48 0f       	add	r20, r24
    d8aa:	20 e0       	ldi	r18, 0x00	; 0
    d8ac:	6c 2f       	mov	r22, r28
    d8ae:	89 e0       	ldi	r24, 0x09	; 9
    d8b0:	0e 94 ba 51 	call	0xa374	; 0xa374 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d8b4:	40 e2       	ldi	r20, 0x20	; 32
    d8b6:	6c 2f       	mov	r22, r28
    d8b8:	8a e0       	ldi	r24, 0x0A	; 10
    d8ba:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d8be:	f5 01       	movw	r30, r10
    d8c0:	40 81       	ld	r20, Z
    d8c2:	6c 2f       	mov	r22, r28
    d8c4:	8b e0       	ldi	r24, 0x0B	; 11
    d8c6:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d8ca:	f6 01       	movw	r30, r12
    d8cc:	40 81       	ld	r20, Z
    d8ce:	6c 2f       	mov	r22, r28
    d8d0:	8c e0       	ldi	r24, 0x0C	; 12
    d8d2:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d8d6:	f7 01       	movw	r30, r14
    d8d8:	40 81       	ld	r20, Z
    d8da:	6c 2f       	mov	r22, r28
    d8dc:	8d e0       	ldi	r24, 0x0D	; 13
    d8de:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d8e2:	40 e2       	ldi	r20, 0x20	; 32
    d8e4:	6c 2f       	mov	r22, r28
    d8e6:	8e e0       	ldi	r24, 0x0E	; 14
    d8e8:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d8ec:	f7 01       	movw	r30, r14
    d8ee:	21 80       	ldd	r2, Z+1	; 0x01
    d8f0:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d8f2:	21 e0       	ldi	r18, 0x01	; 1
    d8f4:	a1 01       	movw	r20, r2
    d8f6:	6c 2f       	mov	r22, r28
    d8f8:	83 e1       	ldi	r24, 0x13	; 19
    d8fa:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d8fe:	20 91 bc 0d 	lds	r18, 0x0DBC
    d902:	30 91 bd 0d 	lds	r19, 0x0DBD
    d906:	22 16       	cp	r2, r18
    d908:	33 06       	cpc	r3, r19
    d90a:	08 f0       	brcs	.+2      	; 0xd90e <load_high_scores+0x12a>
    d90c:	5a c0       	rjmp	.+180    	; 0xd9c2 <load_high_scores+0x1de>
    d90e:	80 91 cc 0d 	lds	r24, 0x0DCC
    d912:	8f 3f       	cpi	r24, 0xFF	; 255
    d914:	09 f0       	breq	.+2      	; 0xd918 <load_high_scores+0x134>
    d916:	55 c0       	rjmp	.+170    	; 0xd9c2 <load_high_scores+0x1de>
    d918:	80 91 d3 0d 	lds	r24, 0x0DD3
    d91c:	82 30       	cpi	r24, 0x02	; 2
    d91e:	09 f4       	brne	.+2      	; 0xd922 <load_high_scores+0x13e>
    d920:	50 c0       	rjmp	.+160    	; 0xd9c2 <load_high_scores+0x1de>
    d922:	a5 eb       	ldi	r26, 0xB5	; 181
    d924:	bd e0       	ldi	r27, 0x0D	; 13
    d926:	cd 01       	movw	r24, r26
    d928:	05 97       	sbiw	r24, 0x05	; 5
    d92a:	4e e1       	ldi	r20, 0x1E	; 30
    d92c:	48 0f       	add	r20, r24
    d92e:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d930:	04 17       	cp	r16, r20
    d932:	40 f4       	brcc	.+16     	; 0xd944 <load_high_scores+0x160>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d934:	fc 01       	movw	r30, r24
    d936:	45 2d       	mov	r20, r5
    d938:	01 90       	ld	r0, Z+
    d93a:	0d 92       	st	X+, r0
    d93c:	4a 95       	dec	r20
    d93e:	e1 f7       	brne	.-8      	; 0xd938 <load_high_scores+0x154>
    d940:	dc 01       	movw	r26, r24
    d942:	f1 cf       	rjmp	.-30     	; 0xd926 <load_high_scores+0x142>
			}
			scores.data[i] = 'A';
    d944:	f5 01       	movw	r30, r10
    d946:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d948:	f6 01       	movw	r30, r12
    d94a:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d94c:	f7 01       	movw	r30, r14
    d94e:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d950:	32 83       	std	Z+2, r19	; 0x02
    d952:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d954:	f5 01       	movw	r30, r10
    d956:	40 81       	ld	r20, Z
    d958:	6c 2f       	mov	r22, r28
    d95a:	8b e0       	ldi	r24, 0x0B	; 11
    d95c:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d960:	f6 01       	movw	r30, r12
    d962:	40 81       	ld	r20, Z
    d964:	6c 2f       	mov	r22, r28
    d966:	8c e0       	ldi	r24, 0x0C	; 12
    d968:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d96c:	f7 01       	movw	r30, r14
    d96e:	40 81       	ld	r20, Z
    d970:	6c 2f       	mov	r22, r28
    d972:	8d e0       	ldi	r24, 0x0D	; 13
    d974:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d978:	40 91 bc 0d 	lds	r20, 0x0DBC
    d97c:	50 91 bd 0d 	lds	r21, 0x0DBD
    d980:	21 e0       	ldi	r18, 0x01	; 1
    d982:	6c 2f       	mov	r22, r28
    d984:	83 e1       	ldi	r24, 0x13	; 19
    d986:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
			game.high_score_index = i;
    d98a:	00 93 cc 0d 	sts	0x0DCC, r16
			LBMapSprite(2, map_down_arrow, 0);
    d98e:	40 e0       	ldi	r20, 0x00	; 0
    d990:	6c e3       	ldi	r22, 0x3C	; 60
    d992:	78 e3       	ldi	r23, 0x38	; 56
    d994:	82 e0       	ldi	r24, 0x02	; 2
    d996:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d99a:	40 e0       	ldi	r20, 0x00	; 0
    d99c:	69 e3       	ldi	r22, 0x39	; 57
    d99e:	78 e3       	ldi	r23, 0x38	; 56
    d9a0:	83 e0       	ldi	r24, 0x03	; 3
    d9a2:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d9a6:	01 e0       	ldi	r16, 0x01	; 1
    d9a8:	21 e0       	ldi	r18, 0x01	; 1
    d9aa:	4d 2f       	mov	r20, r29
    d9ac:	68 e5       	ldi	r22, 0x58	; 88
    d9ae:	82 e0       	ldi	r24, 0x02	; 2
    d9b0:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d9b4:	21 e0       	ldi	r18, 0x01	; 1
    d9b6:	40 e1       	ldi	r20, 0x10	; 16
    d9b8:	4d 0f       	add	r20, r29
    d9ba:	68 e5       	ldi	r22, 0x58	; 88
    d9bc:	83 e0       	ldi	r24, 0x03	; 3
    d9be:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
		}
		
		ypos += 2;
    d9c2:	ce 5f       	subi	r28, 0xFE	; 254
    d9c4:	f5 e0       	ldi	r31, 0x05	; 5
    d9c6:	af 0e       	add	r10, r31
    d9c8:	b1 1c       	adc	r11, r1
    d9ca:	85 e0       	ldi	r24, 0x05	; 5
    d9cc:	c8 0e       	add	r12, r24
    d9ce:	d1 1c       	adc	r13, r1
    d9d0:	e5 e0       	ldi	r30, 0x05	; 5
    d9d2:	ee 0e       	add	r14, r30
    d9d4:	f1 1c       	adc	r15, r1
    d9d6:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d9d8:	c3 31       	cpi	r28, 0x13	; 19
    d9da:	09 f0       	breq	.+2      	; 0xd9de <load_high_scores+0x1fa>
    d9dc:	5e cf       	rjmp	.-324    	; 0xd89a <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d9de:	48 e9       	ldi	r20, 0x98	; 152
    d9e0:	5b e0       	ldi	r21, 0x0B	; 11
    d9e2:	66 e1       	ldi	r22, 0x16	; 22
    d9e4:	89 e0       	ldi	r24, 0x09	; 9
}
    d9e6:	df 91       	pop	r29
    d9e8:	cf 91       	pop	r28
    d9ea:	1f 91       	pop	r17
    d9ec:	0f 91       	pop	r16
    d9ee:	ff 90       	pop	r15
    d9f0:	ef 90       	pop	r14
    d9f2:	df 90       	pop	r13
    d9f4:	cf 90       	pop	r12
    d9f6:	bf 90       	pop	r11
    d9f8:	af 90       	pop	r10
    d9fa:	9f 90       	pop	r9
    d9fc:	8f 90       	pop	r8
    d9fe:	7f 90       	pop	r7
    da00:	6f 90       	pop	r6
    da02:	5f 90       	pop	r5
    da04:	3f 90       	pop	r3
    da06:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    da08:	0c 94 9e 51 	jmp	0xa33c	; 0xa33c <LBPrint>

0000da0c <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    da0c:	64 e1       	ldi	r22, 0x14	; 20
    da0e:	80 e0       	ldi	r24, 0x00	; 0
    da10:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
	LBRotateSprites();
    da14:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	init_player_state();
    da18:	0e 94 d6 57 	call	0xafac	; 0xafac <init_player_state>
	init_boss_state();
    da1c:	0e 94 26 57 	call	0xae4c	; 0xae4c <init_boss_state>
	init_enemy_state();
    da20:	0e 94 51 53 	call	0xa6a2	; 0xa6a2 <init_enemy_state>
	StopSong();
    da24:	0e 94 be 44 	call	0x897c	; 0x897c <StopSong>
	load_high_scores();
    da28:	0c 94 f2 6b 	jmp	0xd7e4	; 0xd7e4 <load_high_scores>

0000da2c <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    da2c:	0f 93       	push	r16
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	if (game.player.controls.pressed) demo_counter = 0;
    da2e:	80 91 4d 0e 	lds	r24, 0x0E4D
    da32:	90 91 4e 0e 	lds	r25, 0x0E4E
    da36:	00 97       	sbiw	r24, 0x00	; 0
    da38:	21 f0       	breq	.+8      	; 0xda42 <update_splash+0x16>
    da3a:	10 92 f9 0c 	sts	0x0CF9, r1
    da3e:	10 92 f8 0c 	sts	0x0CF8, r1
	
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    da42:	85 ff       	sbrs	r24, 5
    da44:	08 c0       	rjmp	.+16     	; 0xda56 <update_splash+0x2a>
    da46:	20 91 d3 0d 	lds	r18, 0x0DD3
    da4a:	21 11       	cpse	r18, r1
    da4c:	04 c0       	rjmp	.+8      	; 0xda56 <update_splash+0x2a>
	{
		game.selection = HIGH_SCORES_SELECTED;
    da4e:	81 e0       	ldi	r24, 0x01	; 1
    da50:	80 93 d3 0d 	sts	0x0DD3, r24
    da54:	08 c0       	rjmp	.+16     	; 0xda66 <update_splash+0x3a>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    da56:	84 ff       	sbrs	r24, 4
    da58:	0c c0       	rjmp	.+24     	; 0xda72 <update_splash+0x46>
    da5a:	80 91 d3 0d 	lds	r24, 0x0DD3
    da5e:	81 30       	cpi	r24, 0x01	; 1
    da60:	41 f4       	brne	.+16     	; 0xda72 <update_splash+0x46>
	{
		game.selection = START_SELECTED;
    da62:	10 92 d3 0d 	sts	0x0DD3, r1
		SFX_NAVIGATE;
    da66:	41 e0       	ldi	r20, 0x01	; 1
    da68:	6f ef       	ldi	r22, 0xFF	; 255
    da6a:	82 e0       	ldi	r24, 0x02	; 2
    da6c:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
    da70:	39 c0       	rjmp	.+114    	; 0xdae4 <update_splash+0xb8>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    da72:	8d e4       	ldi	r24, 0x4D	; 77
    da74:	9e e0       	ldi	r25, 0x0E	; 14
    da76:	0e 94 42 6a 	call	0xd484	; 0xd484 <select_pressed>
    da7a:	88 23       	and	r24, r24
    da7c:	b1 f0       	breq	.+44     	; 0xdaaa <update_splash+0x7e>
    da7e:	80 91 d3 0d 	lds	r24, 0x0DD3
    da82:	81 11       	cpse	r24, r1
    da84:	08 c0       	rjmp	.+16     	; 0xda96 <update_splash+0x6a>
	{
		SFX_NAVIGATE;
    da86:	41 e0       	ldi	r20, 0x01	; 1
    da88:	6f ef       	ldi	r22, 0xFF	; 255
    da8a:	82 e0       	ldi	r24, 0x02	; 2
    da8c:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    da90:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    da92:	0c 94 80 6b 	jmp	0xd700	; 0xd700 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    da96:	81 30       	cpi	r24, 0x01	; 1
    da98:	41 f4       	brne	.+16     	; 0xdaaa <update_splash+0x7e>
	{
		SFX_NAVIGATE;
    da9a:	41 e0       	ldi	r20, 0x01	; 1
    da9c:	6f ef       	ldi	r22, 0xFF	; 255
    da9e:	82 e0       	ldi	r24, 0x02	; 2
    daa0:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    daa4:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    daa6:	0c 94 f2 6b 	jmp	0xd7e4	; 0xd7e4 <load_high_scores>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    daaa:	80 91 f8 0c 	lds	r24, 0x0CF8
    daae:	90 91 f9 0c 	lds	r25, 0x0CF9
    dab2:	88 35       	cpi	r24, 0x58	; 88
    dab4:	92 40       	sbci	r25, 0x02	; 2
    dab6:	b0 f0       	brcs	.+44     	; 0xdae4 <update_splash+0xb8>
	{
		demo_counter = 0;
    dab8:	10 92 f9 0c 	sts	0x0CF9, r1
    dabc:	10 92 f8 0c 	sts	0x0CF8, r1
		game.selection = DEMO_SELECTED;
    dac0:	82 e0       	ldi	r24, 0x02	; 2
    dac2:	80 93 d3 0d 	sts	0x0DD3, r24
		if (demo_choice % 2 == 0)
    dac6:	80 91 f7 0c 	lds	r24, 0x0CF7
    daca:	80 fd       	sbrc	r24, 0
    dacc:	02 c0       	rjmp	.+4      	; 0xdad2 <update_splash+0xa6>
		{
			demo_load(0);
    dace:	80 e0       	ldi	r24, 0x00	; 0
    dad0:	01 c0       	rjmp	.+2      	; 0xdad4 <update_splash+0xa8>
		}
		else
		{
			demo_load(1);
    dad2:	81 e0       	ldi	r24, 0x01	; 1
    dad4:	0e 94 9e 6b 	call	0xd73c	; 0xd73c <demo_load>
		}
		demo_choice++;
    dad8:	80 91 f7 0c 	lds	r24, 0x0CF7
    dadc:	8f 5f       	subi	r24, 0xFF	; 255
    dade:	80 93 f7 0c 	sts	0x0CF7, r24
		return;
    dae2:	17 c0       	rjmp	.+46     	; 0xdb12 <update_splash+0xe6>
		
	}
	demo_counter++;
    dae4:	80 91 f8 0c 	lds	r24, 0x0CF8
    dae8:	90 91 f9 0c 	lds	r25, 0x0CF9
    daec:	01 96       	adiw	r24, 0x01	; 1
    daee:	90 93 f9 0c 	sts	0x0CF9, r25
    daf2:	80 93 f8 0c 	sts	0x0CF8, r24
	
	if (game.selection == START_SELECTED)
    daf6:	80 91 d3 0d 	lds	r24, 0x0DD3
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    dafa:	01 e0       	ldi	r16, 0x01	; 1
    dafc:	21 e0       	ldi	r18, 0x01	; 1
		return;
		
	}
	demo_counter++;
	
	if (game.selection == START_SELECTED)
    dafe:	81 11       	cpse	r24, r1
    db00:	03 c0       	rjmp	.+6      	; 0xdb08 <update_splash+0xdc>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    db02:	48 e7       	ldi	r20, 0x78	; 120
    db04:	68 e3       	ldi	r22, 0x38	; 56
    db06:	03 c0       	rjmp	.+6      	; 0xdb0e <update_splash+0xe2>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    db08:	40 e8       	ldi	r20, 0x80	; 128
    db0a:	68 e3       	ldi	r22, 0x38	; 56
    db0c:	80 e0       	ldi	r24, 0x00	; 0
    db0e:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
	}
}
    db12:	0f 91       	pop	r16
    db14:	08 95       	ret

0000db16 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    db16:	0f 93       	push	r16
	static u16 high_score_counter = 0;
	
	if (game.player.controls.pressed & BTN_X)
    db18:	80 91 4d 0e 	lds	r24, 0x0E4D
    db1c:	90 91 4e 0e 	lds	r25, 0x0E4E
    db20:	91 ff       	sbrs	r25, 1
    db22:	16 c0       	rjmp	.+44     	; 0xdb50 <update_high_scores+0x3a>
	{
		high_score_counter = 0;
    db24:	10 92 f6 0c 	sts	0x0CF6, r1
    db28:	10 92 f5 0c 	sts	0x0CF5, r1
		SFX_NAVIGATE;
    db2c:	41 e0       	ldi	r20, 0x01	; 1
    db2e:	6f ef       	ldi	r22, 0xFF	; 255
    db30:	82 e0       	ldi	r24, 0x02	; 2
    db32:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
		game.high_score_index = -1;
    db36:	8f ef       	ldi	r24, 0xFF	; 255
    db38:	80 93 cc 0d 	sts	0x0DCC, r24
		game.score = 0;
    db3c:	10 92 bd 0d 	sts	0x0DBD, r1
    db40:	10 92 bc 0d 	sts	0x0DBC, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    db44:	8a e9       	ldi	r24, 0x9A	; 154
    db46:	9d e0       	ldi	r25, 0x0D	; 13
    db48:	0e 94 1c 43 	call	0x8638	; 0x8638 <EepromWriteBlock>
		high_score_counter = 0;
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    db4c:	0e 94 c1 6b 	call	0xd782	; 0xd782 <load_splash>
	}
	if ((game.player.controls.held & BTN_SL) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    db50:	80 91 51 0e 	lds	r24, 0x0E51
    db54:	90 91 52 0e 	lds	r25, 0x0E52
    db58:	92 ff       	sbrs	r25, 2
    db5a:	19 c0       	rjmp	.+50     	; 0xdb8e <update_high_scores+0x78>
    db5c:	80 91 53 0e 	lds	r24, 0x0E53
    db60:	8f 3f       	cpi	r24, 0xFF	; 255
    db62:	a9 f4       	brne	.+42     	; 0xdb8e <update_high_scores+0x78>
    db64:	80 91 cc 0d 	lds	r24, 0x0DCC
    db68:	8f 3f       	cpi	r24, 0xFF	; 255
    db6a:	89 f4       	brne	.+34     	; 0xdb8e <update_high_scores+0x78>
	{
		high_score_counter = 0;
    db6c:	10 92 f6 0c 	sts	0x0CF6, r1
    db70:	10 92 f5 0c 	sts	0x0CF5, r1
	    SFX_NAVIGATE;
    db74:	41 e0       	ldi	r20, 0x01	; 1
    db76:	6f ef       	ldi	r22, 0xFF	; 255
    db78:	82 e0       	ldi	r24, 0x02	; 2
    db7a:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
		init_default_high_scores();
    db7e:	0e 94 3b 53 	call	0xa676	; 0xa676 <init_default_high_scores>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    db82:	8a e9       	ldi	r24, 0x9A	; 154
    db84:	9d e0       	ldi	r25, 0x0D	; 13
    db86:	0e 94 1c 43 	call	0x8638	; 0x8638 <EepromWriteBlock>
	{
		high_score_counter = 0;
	    SFX_NAVIGATE;
		init_default_high_scores();
	    save_eeprom(&scores);
		load_high_scores();
    db8a:	0e 94 f2 6b 	call	0xd7e4	; 0xd7e4 <load_high_scores>
	}
	
	if (game.high_score_index != -1)
    db8e:	30 91 cc 0d 	lds	r19, 0x0DCC
    db92:	3f 3f       	cpi	r19, 0xFF	; 255
    db94:	09 f4       	brne	.+2      	; 0xdb98 <update_high_scores+0x82>
    db96:	81 c0       	rjmp	.+258    	; 0xdc9a <update_high_scores+0x184>
	{
		high_score_counter = 0;
    db98:	10 92 f6 0c 	sts	0x0CF6, r1
    db9c:	10 92 f5 0c 	sts	0x0CF5, r1
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    dba0:	20 91 4d 0e 	lds	r18, 0x0E4D
    dba4:	27 ff       	sbrs	r18, 7
    dba6:	1e c0       	rjmp	.+60     	; 0xdbe4 <update_high_scores+0xce>
    dba8:	83 2f       	mov	r24, r19
    dbaa:	65 e0       	ldi	r22, 0x05	; 5
    dbac:	0e 94 3a 75 	call	0xea74	; 0xea74 <__divmodqi4>
    dbb0:	92 30       	cpi	r25, 0x02	; 2
    dbb2:	c1 f0       	breq	.+48     	; 0xdbe4 <update_high_scores+0xce>
		{
			SFX_NAVIGATE;
    dbb4:	41 e0       	ldi	r20, 0x01	; 1
    dbb6:	6f ef       	ldi	r22, 0xFF	; 255
    dbb8:	82 e0       	ldi	r24, 0x02	; 2
    dbba:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
			game.high_score_index++;
    dbbe:	80 91 cc 0d 	lds	r24, 0x0DCC
    dbc2:	8f 5f       	subi	r24, 0xFF	; 255
    dbc4:	80 93 cc 0d 	sts	0x0DCC, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    dbc8:	60 91 ec 0f 	lds	r22, 0x0FEC
    dbcc:	68 5f       	subi	r22, 0xF8	; 248
    dbce:	01 e0       	ldi	r16, 0x01	; 1
    dbd0:	21 e0       	ldi	r18, 0x01	; 1
    dbd2:	40 91 ed 0f 	lds	r20, 0x0FED
    dbd6:	82 e0       	ldi	r24, 0x02	; 2
    dbd8:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    dbdc:	60 91 f0 0f 	lds	r22, 0x0FF0
    dbe0:	68 5f       	subi	r22, 0xF8	; 248
    dbe2:	1f c0       	rjmp	.+62     	; 0xdc22 <update_high_scores+0x10c>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    dbe4:	26 ff       	sbrs	r18, 6
    dbe6:	24 c0       	rjmp	.+72     	; 0xdc30 <update_high_scores+0x11a>
    dbe8:	83 2f       	mov	r24, r19
    dbea:	65 e0       	ldi	r22, 0x05	; 5
    dbec:	0e 94 3a 75 	call	0xea74	; 0xea74 <__divmodqi4>
    dbf0:	99 23       	and	r25, r25
    dbf2:	f1 f0       	breq	.+60     	; 0xdc30 <update_high_scores+0x11a>
		{
			SFX_NAVIGATE;
    dbf4:	41 e0       	ldi	r20, 0x01	; 1
    dbf6:	6f ef       	ldi	r22, 0xFF	; 255
    dbf8:	82 e0       	ldi	r24, 0x02	; 2
    dbfa:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
			game.high_score_index--;
    dbfe:	80 91 cc 0d 	lds	r24, 0x0DCC
    dc02:	81 50       	subi	r24, 0x01	; 1
    dc04:	80 93 cc 0d 	sts	0x0DCC, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    dc08:	60 91 ec 0f 	lds	r22, 0x0FEC
    dc0c:	68 50       	subi	r22, 0x08	; 8
    dc0e:	01 e0       	ldi	r16, 0x01	; 1
    dc10:	21 e0       	ldi	r18, 0x01	; 1
    dc12:	40 91 ed 0f 	lds	r20, 0x0FED
    dc16:	82 e0       	ldi	r24, 0x02	; 2
    dc18:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    dc1c:	60 91 f0 0f 	lds	r22, 0x0FF0
    dc20:	68 50       	subi	r22, 0x08	; 8
    dc22:	21 e0       	ldi	r18, 0x01	; 1
    dc24:	40 91 f1 0f 	lds	r20, 0x0FF1
    dc28:	83 e0       	ldi	r24, 0x03	; 3
    dc2a:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
    dc2e:	35 c0       	rjmp	.+106    	; 0xdc9a <update_high_scores+0x184>
		}
		else if (game.player.controls.pressed & BTN_UP)
    dc30:	24 ff       	sbrs	r18, 4
    dc32:	13 c0       	rjmp	.+38     	; 0xdc5a <update_high_scores+0x144>
		{
			SFX_NAVIGATE;
    dc34:	41 e0       	ldi	r20, 0x01	; 1
    dc36:	6f ef       	ldi	r22, 0xFF	; 255
    dc38:	82 e0       	ldi	r24, 0x02	; 2
    dc3a:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    dc3e:	80 91 cc 0d 	lds	r24, 0x0DCC
    dc42:	e8 2f       	mov	r30, r24
    dc44:	ff 27       	eor	r31, r31
    dc46:	e7 fd       	sbrc	r30, 7
    dc48:	f0 95       	com	r31
    dc4a:	e6 56       	subi	r30, 0x66	; 102
    dc4c:	f2 4f       	sbci	r31, 0xF2	; 242
    dc4e:	92 81       	ldd	r25, Z+2	; 0x02
    dc50:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    dc52:	91 34       	cpi	r25, 0x41	; 65
    dc54:	b0 f4       	brcc	.+44     	; 0xdc82 <update_high_scores+0x16c>
    dc56:	91 e4       	ldi	r25, 0x41	; 65
    dc58:	14 c0       	rjmp	.+40     	; 0xdc82 <update_high_scores+0x16c>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    dc5a:	25 ff       	sbrs	r18, 5
    dc5c:	1e c0       	rjmp	.+60     	; 0xdc9a <update_high_scores+0x184>
		{
			SFX_NAVIGATE;
    dc5e:	41 e0       	ldi	r20, 0x01	; 1
    dc60:	6f ef       	ldi	r22, 0xFF	; 255
    dc62:	82 e0       	ldi	r24, 0x02	; 2
    dc64:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    dc68:	80 91 cc 0d 	lds	r24, 0x0DCC
    dc6c:	e8 2f       	mov	r30, r24
    dc6e:	ff 27       	eor	r31, r31
    dc70:	e7 fd       	sbrc	r30, 7
    dc72:	f0 95       	com	r31
    dc74:	e6 56       	subi	r30, 0x66	; 102
    dc76:	f2 4f       	sbci	r31, 0xF2	; 242
    dc78:	92 81       	ldd	r25, Z+2	; 0x02
    dc7a:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    dc7c:	9b 35       	cpi	r25, 0x5B	; 91
    dc7e:	08 f0       	brcs	.+2      	; 0xdc82 <update_high_scores+0x16c>
    dc80:	9a e5       	ldi	r25, 0x5A	; 90
    dc82:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    dc84:	65 e0       	ldi	r22, 0x05	; 5
    dc86:	0e 94 3a 75 	call	0xea74	; 0xea74 <__divmodqi4>
    dc8a:	68 2f       	mov	r22, r24
    dc8c:	66 0f       	add	r22, r22
    dc8e:	69 5f       	subi	r22, 0xF9	; 249
    dc90:	42 81       	ldd	r20, Z+2	; 0x02
    dc92:	8b e0       	ldi	r24, 0x0B	; 11
    dc94:	89 0f       	add	r24, r25
    dc96:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <LBPrintChar>
		}
	}
	if (high_score_counter > HIGH_SCORES_LENGTH)
    dc9a:	80 91 f5 0c 	lds	r24, 0x0CF5
    dc9e:	90 91 f6 0c 	lds	r25, 0x0CF6
    dca2:	85 38       	cpi	r24, 0x85	; 133
    dca4:	93 40       	sbci	r25, 0x03	; 3
    dca6:	90 f0       	brcs	.+36     	; 0xdccc <update_high_scores+0x1b6>
	{
		high_score_counter = 0;
    dca8:	10 92 f6 0c 	sts	0x0CF6, r1
    dcac:	10 92 f5 0c 	sts	0x0CF5, r1
		SFX_NAVIGATE;
    dcb0:	41 e0       	ldi	r20, 0x01	; 1
    dcb2:	6f ef       	ldi	r22, 0xFF	; 255
    dcb4:	82 e0       	ldi	r24, 0x02	; 2
    dcb6:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
		game.high_score_index = -1;
    dcba:	8f ef       	ldi	r24, 0xFF	; 255
    dcbc:	80 93 cc 0d 	sts	0x0DCC, r24
		game.score = 0;
    dcc0:	10 92 bd 0d 	sts	0x0DBD, r1
    dcc4:	10 92 bc 0d 	sts	0x0DBC, r1
		load_splash();
    dcc8:	0e 94 c1 6b 	call	0xd782	; 0xd782 <load_splash>
	}
	high_score_counter++;
    dccc:	80 91 f5 0c 	lds	r24, 0x0CF5
    dcd0:	90 91 f6 0c 	lds	r25, 0x0CF6
    dcd4:	01 96       	adiw	r24, 0x01	; 1
    dcd6:	90 93 f6 0c 	sts	0x0CF6, r25
    dcda:	80 93 f5 0c 	sts	0x0CF5, r24
}
    dcde:	0f 91       	pop	r16
    dce0:	08 95       	ret

0000dce2 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    dce2:	2f 92       	push	r2
    dce4:	3f 92       	push	r3
    dce6:	4f 92       	push	r4
    dce8:	5f 92       	push	r5
    dcea:	6f 92       	push	r6
    dcec:	7f 92       	push	r7
    dcee:	8f 92       	push	r8
    dcf0:	9f 92       	push	r9
    dcf2:	af 92       	push	r10
    dcf4:	bf 92       	push	r11
    dcf6:	cf 92       	push	r12
    dcf8:	df 92       	push	r13
    dcfa:	ef 92       	push	r14
    dcfc:	ff 92       	push	r15
    dcfe:	0f 93       	push	r16
    dd00:	1f 93       	push	r17
    dd02:	cf 93       	push	r28
    dd04:	df 93       	push	r29
    dd06:	7c 01       	movw	r14, r24
    dd08:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    dd0a:	c0 91 b2 0c 	lds	r28, 0x0CB2
    dd0e:	c6 95       	lsr	r28
    dd10:	c6 95       	lsr	r28
    dd12:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    dd14:	00 91 b3 0c 	lds	r16, 0x0CB3
    dd18:	06 95       	lsr	r16
    dd1a:	06 95       	lsr	r16
    dd1c:	06 95       	lsr	r16
	u16 tally = game.score;
    dd1e:	a0 90 bc 0d 	lds	r10, 0x0DBC
    dd22:	b0 90 bd 0d 	lds	r11, 0x0DBD
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    dd26:	64 e1       	ldi	r22, 0x14	; 20
    dd28:	80 e0       	ldi	r24, 0x00	; 0
    dd2a:	0e 94 26 6a 	call	0xd44c	; 0xd44c <hide_sprites>
	LBRotateSprites();
    dd2e:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	
	StopSong();
    dd32:	0e 94 be 44 	call	0x897c	; 0x897c <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    dd36:	10 e0       	ldi	r17, 0x00	; 0
    dd38:	d0 e0       	ldi	r29, 0x00	; 0
    dd3a:	c8 01       	movw	r24, r16
    dd3c:	06 96       	adiw	r24, 0x06	; 6
    dd3e:	2e e1       	ldi	r18, 0x1E	; 30
    dd40:	82 2e       	mov	r8, r18
    dd42:	91 2c       	mov	r9, r1
    dd44:	b4 01       	movw	r22, r8
    dd46:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    dd4a:	9e 01       	movw	r18, r28
    dd4c:	28 5f       	subi	r18, 0xF8	; 248
    dd4e:	3f 4f       	sbci	r19, 0xFF	; 255
    dd50:	48 ec       	ldi	r20, 0xC8	; 200
    dd52:	50 e6       	ldi	r21, 0x60	; 96
    dd54:	68 2f       	mov	r22, r24
    dd56:	82 2f       	mov	r24, r18
    dd58:	8f 71       	andi	r24, 0x1F	; 31
    dd5a:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    dd5e:	c8 01       	movw	r24, r16
    dd60:	07 96       	adiw	r24, 0x07	; 7
    dd62:	b4 01       	movw	r22, r8
    dd64:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    dd68:	9e 01       	movw	r18, r28
    dd6a:	26 5f       	subi	r18, 0xF6	; 246
    dd6c:	3f 4f       	sbci	r19, 0xFF	; 255
    dd6e:	a7 01       	movw	r20, r14
    dd70:	68 2f       	mov	r22, r24
    dd72:	82 2f       	mov	r24, r18
    dd74:	8f 71       	andi	r24, 0x1F	; 31
    dd76:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    dd7a:	c8 01       	movw	r24, r16
    dd7c:	09 96       	adiw	r24, 0x09	; 9
    dd7e:	b4 01       	movw	r22, r8
    dd80:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    dd84:	48 2e       	mov	r4, r24
    dd86:	78 2e       	mov	r7, r24
    dd88:	7e 01       	movw	r14, r28
    dd8a:	29 e0       	ldi	r18, 0x09	; 9
    dd8c:	e2 0e       	add	r14, r18
    dd8e:	f1 1c       	adc	r15, r1
    dd90:	8f e1       	ldi	r24, 0x1F	; 31
    dd92:	e8 22       	and	r14, r24
    dd94:	ff 24       	eor	r15, r15
    dd96:	43 e6       	ldi	r20, 0x63	; 99
    dd98:	5b e0       	ldi	r21, 0x0B	; 11
    dd9a:	64 2d       	mov	r22, r4
    dd9c:	8e 2d       	mov	r24, r14
    dd9e:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    dda2:	c8 01       	movw	r24, r16
    dda4:	0b 96       	adiw	r24, 0x0b	; 11
    dda6:	b4 01       	movw	r22, r8
    dda8:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    ddac:	38 2e       	mov	r3, r24
    ddae:	68 2e       	mov	r6, r24
    ddb0:	49 eb       	ldi	r20, 0xB9	; 185
    ddb2:	5b e0       	ldi	r21, 0x0B	; 11
    ddb4:	68 2f       	mov	r22, r24
    ddb6:	8e 2d       	mov	r24, r14
    ddb8:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    ddbc:	c8 01       	movw	r24, r16
    ddbe:	0c 96       	adiw	r24, 0x0c	; 12
    ddc0:	b4 01       	movw	r22, r8
    ddc2:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    ddc6:	58 2e       	mov	r5, r24
    ddc8:	f8 2e       	mov	r15, r24
    ddca:	44 ea       	ldi	r20, 0xA4	; 164
    ddcc:	5b e0       	ldi	r21, 0x0B	; 11
    ddce:	68 2f       	mov	r22, r24
    ddd0:	8e 2d       	mov	r24, r14
    ddd2:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    ddd6:	c8 01       	movw	r24, r16
    ddd8:	0d 96       	adiw	r24, 0x0d	; 13
    ddda:	b4 01       	movw	r22, r8
    dddc:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    dde0:	18 2f       	mov	r17, r24
    dde2:	28 2e       	mov	r2, r24
    dde4:	44 e7       	ldi	r20, 0x74	; 116
    dde6:	5b e0       	ldi	r21, 0x0B	; 11
    dde8:	68 2f       	mov	r22, r24
    ddea:	8e 2d       	mov	r24, r14
    ddec:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    ddf0:	64 96       	adiw	r28, 0x14	; 20
    ddf2:	cf 71       	andi	r28, 0x1F	; 31
    ddf4:	dd 27       	eor	r29, r29
    ddf6:	ec 2e       	mov	r14, r28
    ddf8:	21 e0       	ldi	r18, 0x01	; 1
    ddfa:	a5 01       	movw	r20, r10
    ddfc:	64 2d       	mov	r22, r4
    ddfe:	8c 2f       	mov	r24, r28
    de00:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    de04:	40 91 be 0d 	lds	r20, 0x0DBE
    de08:	50 91 bf 0d 	lds	r21, 0x0DBF
    de0c:	21 e0       	ldi	r18, 0x01	; 1
    de0e:	63 2d       	mov	r22, r3
    de10:	8c 2f       	mov	r24, r28
    de12:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    de16:	40 91 c0 0d 	lds	r20, 0x0DC0
    de1a:	50 91 c1 0d 	lds	r21, 0x0DC1
    de1e:	21 e0       	ldi	r18, 0x01	; 1
    de20:	65 2d       	mov	r22, r5
    de22:	8c 2f       	mov	r24, r28
    de24:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    de28:	21 e0       	ldi	r18, 0x01	; 1
    de2a:	a6 01       	movw	r20, r12
    de2c:	61 2f       	mov	r22, r17
    de2e:	8c 2f       	mov	r24, r28
    de30:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	
	LBWaitSeconds(2);
    de34:	82 e0       	ldi	r24, 0x02	; 2
    de36:	0e 94 64 52 	call	0xa4c8	; 0xa4c8 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    de3a:	80 90 be 0d 	lds	r8, 0x0DBE
    de3e:	90 90 bf 0d 	lds	r9, 0x0DBF
    de42:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    de44:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    de46:	20 97       	sbiw	r28, 0x00	; 0
    de48:	e9 f0       	breq	.+58     	; 0xde84 <tally_score+0x1a2>
	{
		WaitVsync(1);
    de4a:	81 e0       	ldi	r24, 0x01	; 1
    de4c:	90 e0       	ldi	r25, 0x00	; 0
    de4e:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
		SFX_HIT;
    de52:	41 e0       	ldi	r20, 0x01	; 1
    de54:	6f ef       	ldi	r22, 0xFF	; 255
    de56:	84 e0       	ldi	r24, 0x04	; 4
    de58:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
		tally += 1;
    de5c:	0f 5f       	subi	r16, 0xFF	; 255
    de5e:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    de60:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    de62:	21 e0       	ldi	r18, 0x01	; 1
    de64:	a8 01       	movw	r20, r16
    de66:	67 2d       	mov	r22, r7
    de68:	8e 2d       	mov	r24, r14
    de6a:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    de6e:	21 e0       	ldi	r18, 0x01	; 1
    de70:	ae 01       	movw	r20, r28
    de72:	66 2d       	mov	r22, r6
    de74:	8e 2d       	mov	r24, r14
    de76:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    de7a:	8c ed       	ldi	r24, 0xDC	; 220
    de7c:	95 e0       	ldi	r25, 0x05	; 5
    de7e:	0e 94 d7 41 	call	0x83ae	; 0x83ae <WaitUs>
    de82:	e1 cf       	rjmp	.-62     	; 0xde46 <tally_score+0x164>
    de84:	a8 0c       	add	r10, r8
    de86:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    de88:	c0 91 c0 0d 	lds	r28, 0x0DC0
    de8c:	d0 91 c1 0d 	lds	r29, 0x0DC1
	while (counter > 0)
    de90:	20 97       	sbiw	r28, 0x00	; 0
    de92:	31 f1       	breq	.+76     	; 0xdee0 <tally_score+0x1fe>
	{
		WaitVsync(1);
    de94:	81 e0       	ldi	r24, 0x01	; 1
    de96:	90 e0       	ldi	r25, 0x00	; 0
    de98:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
		SFX_HIT;
    de9c:	41 e0       	ldi	r20, 0x01	; 1
    de9e:	6f ef       	ldi	r22, 0xFF	; 255
    dea0:	84 e0       	ldi	r24, 0x04	; 4
    dea2:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    dea6:	c5 01       	movw	r24, r10
    dea8:	02 97       	sbiw	r24, 0x02	; 2
    deaa:	8e 3f       	cpi	r24, 0xFE	; 254
    deac:	9f 4f       	sbci	r25, 0xFF	; 255
    deae:	20 f4       	brcc	.+8      	; 0xdeb8 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    deb0:	81 e0       	ldi	r24, 0x01	; 1
    deb2:	a8 1a       	sub	r10, r24
    deb4:	b1 08       	sbc	r11, r1
    deb6:	02 c0       	rjmp	.+4      	; 0xdebc <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    deb8:	a1 2c       	mov	r10, r1
    deba:	b1 2c       	mov	r11, r1
		counter -= 1;
    debc:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    debe:	21 e0       	ldi	r18, 0x01	; 1
    dec0:	a5 01       	movw	r20, r10
    dec2:	67 2d       	mov	r22, r7
    dec4:	8e 2d       	mov	r24, r14
    dec6:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    deca:	21 e0       	ldi	r18, 0x01	; 1
    decc:	ae 01       	movw	r20, r28
    dece:	6f 2d       	mov	r22, r15
    ded0:	8e 2d       	mov	r24, r14
    ded2:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    ded6:	8c ed       	ldi	r24, 0xDC	; 220
    ded8:	95 e0       	ldi	r25, 0x05	; 5
    deda:	0e 94 d7 41 	call	0x83ae	; 0x83ae <WaitUs>
    dede:	d8 cf       	rjmp	.-80     	; 0xde90 <tally_score+0x1ae>
    dee0:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    dee2:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    dee4:	20 97       	sbiw	r28, 0x00	; 0
    dee6:	e9 f0       	breq	.+58     	; 0xdf22 <tally_score+0x240>
	{
		WaitVsync(1);
    dee8:	81 e0       	ldi	r24, 0x01	; 1
    deea:	90 e0       	ldi	r25, 0x00	; 0
    deec:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
		SFX_HIT;
    def0:	41 e0       	ldi	r20, 0x01	; 1
    def2:	6f ef       	ldi	r22, 0xFF	; 255
    def4:	84 e0       	ldi	r24, 0x04	; 4
    def6:	0e 94 84 45 	call	0x8b08	; 0x8b08 <TriggerFx>
		tally += 1;
    defa:	0f 5f       	subi	r16, 0xFF	; 255
    defc:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    defe:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    df00:	21 e0       	ldi	r18, 0x01	; 1
    df02:	a8 01       	movw	r20, r16
    df04:	67 2d       	mov	r22, r7
    df06:	8e 2d       	mov	r24, r14
    df08:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    df0c:	21 e0       	ldi	r18, 0x01	; 1
    df0e:	ae 01       	movw	r20, r28
    df10:	62 2d       	mov	r22, r2
    df12:	8e 2d       	mov	r24, r14
    df14:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    df18:	8c ed       	ldi	r24, 0xDC	; 220
    df1a:	95 e0       	ldi	r25, 0x05	; 5
    df1c:	0e 94 d7 41 	call	0x83ae	; 0x83ae <WaitUs>
    df20:	e1 cf       	rjmp	.-62     	; 0xdee4 <tally_score+0x202>
    df22:	ac 0c       	add	r10, r12
    df24:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    df26:	b0 92 bd 0d 	sts	0x0DBD, r11
    df2a:	a0 92 bc 0d 	sts	0x0DBC, r10
	game.time = 0;
    df2e:	10 92 c1 0d 	sts	0x0DC1, r1
    df32:	10 92 c0 0d 	sts	0x0DC0, r1
	LBWaitSeconds(2);
    df36:	82 e0       	ldi	r24, 0x02	; 2
}
    df38:	df 91       	pop	r29
    df3a:	cf 91       	pop	r28
    df3c:	1f 91       	pop	r17
    df3e:	0f 91       	pop	r16
    df40:	ff 90       	pop	r15
    df42:	ef 90       	pop	r14
    df44:	df 90       	pop	r13
    df46:	cf 90       	pop	r12
    df48:	bf 90       	pop	r11
    df4a:	af 90       	pop	r10
    df4c:	9f 90       	pop	r9
    df4e:	8f 90       	pop	r8
    df50:	7f 90       	pop	r7
    df52:	6f 90       	pop	r6
    df54:	5f 90       	pop	r5
    df56:	4f 90       	pop	r4
    df58:	3f 90       	pop	r3
    df5a:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    df5c:	0c 94 64 52 	jmp	0xa4c8	; 0xa4c8 <LBWaitSeconds>

0000df60 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    df60:	cf 93       	push	r28
	if (player == &game.boss) {
    df62:	84 55       	subi	r24, 0x54	; 84
    df64:	9e 40       	sbci	r25, 0x0E	; 14
    df66:	29 f4       	brne	.+10     	; 0xdf72 <handle_player_death+0x12>
		game.level_ended = 1;
    df68:	81 e0       	ldi	r24, 0x01	; 1
    df6a:	80 93 d7 0d 	sts	0x0DD7, r24
		return 1;
    df6e:	c1 e0       	ldi	r28, 0x01	; 1
    df70:	34 c0       	rjmp	.+104    	; 0xdfda <handle_player_death+0x7a>
	}
	game.lives--;
    df72:	80 91 cd 0d 	lds	r24, 0x0DCD
    df76:	81 50       	subi	r24, 0x01	; 1
    df78:	80 93 cd 0d 	sts	0x0DCD, r24
	clear_sprites(0, 6);
    df7c:	66 e0       	ldi	r22, 0x06	; 6
    df7e:	80 e0       	ldi	r24, 0x00	; 0
    df80:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
	LBRotateSprites();
    df84:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	if (game.lives == 0)
    df88:	c0 91 cd 0d 	lds	r28, 0x0DCD
    df8c:	c1 11       	cpse	r28, r1
    df8e:	09 c0       	rjmp	.+18     	; 0xdfa2 <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    df90:	60 e0       	ldi	r22, 0x00	; 0
    df92:	70 e0       	ldi	r23, 0x00	; 0
    df94:	8a e6       	ldi	r24, 0x6A	; 106
    df96:	9b e0       	ldi	r25, 0x0B	; 11
    df98:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <tally_score>
		exit_game();
    df9c:	0e 94 06 6d 	call	0xda0c	; 0xda0c <exit_game>
    dfa0:	1c c0       	rjmp	.+56     	; 0xdfda <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    dfa2:	61 e0       	ldi	r22, 0x01	; 1
    dfa4:	81 e0       	ldi	r24, 0x01	; 1
    dfa6:	0e 94 ad 50 	call	0xa15a	; 0xa15a <FadeOut>
	ClearVram();
    dfaa:	0e 94 a1 41 	call	0x8342	; 0x8342 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    dfae:	64 e1       	ldi	r22, 0x14	; 20
    dfb0:	80 e0       	ldi	r24, 0x00	; 0
    dfb2:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
	LBRotateSprites();
    dfb6:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    dfba:	60 e0       	ldi	r22, 0x00	; 0
    dfbc:	81 e0       	ldi	r24, 0x01	; 1
    dfbe:	0e 94 a1 50 	call	0xa142	; 0xa142 <FadeIn>
	init_player_state();
    dfc2:	0e 94 d6 57 	call	0xafac	; 0xafac <init_player_state>
	init_boss_state();
    dfc6:	0e 94 26 57 	call	0xae4c	; 0xae4c <init_boss_state>
	init_enemy_state();
    dfca:	0e 94 51 53 	call	0xa6a2	; 0xa6a2 <init_enemy_state>
	load_level(game.current_level_index, false);
    dfce:	60 e0       	ldi	r22, 0x00	; 0
    dfd0:	80 91 cf 0d 	lds	r24, 0x0DCF
    dfd4:	0e 94 15 69 	call	0xd22a	; 0xd22a <load_level>
	return 0;
    dfd8:	c0 e0       	ldi	r28, 0x00	; 0
}
    dfda:	8c 2f       	mov	r24, r28
    dfdc:	cf 91       	pop	r28
    dfde:	08 95       	ret

0000dfe0 <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    dfe0:	cf 92       	push	r12
    dfe2:	df 92       	push	r13
    dfe4:	ef 92       	push	r14
    dfe6:	ff 92       	push	r15
    dfe8:	0f 93       	push	r16
    dfea:	1f 93       	push	r17
    dfec:	cf 93       	push	r28
    dfee:	df 93       	push	r29
    dff0:	1f 92       	push	r1
    dff2:	cd b7       	in	r28, 0x3d	; 61
    dff4:	de b7       	in	r29, 0x3e	; 62
    dff6:	6c 01       	movw	r12, r24
    dff8:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	handle_music_toggle(&player->controls);
    dffa:	7c 01       	movw	r14, r24
    dffc:	24 e7       	ldi	r18, 0x74	; 116
    dffe:	e2 0e       	add	r14, r18
    e000:	f1 1c       	adc	r15, r1
    e002:	c7 01       	movw	r24, r14
    e004:	0e 94 c7 5f 	call	0xbf8e	; 0xbf8e <handle_music_toggle>
	handle_demo_play(player);
    e008:	c6 01       	movw	r24, r12
    e00a:	0e 94 d3 5f 	call	0xbfa6	; 0xbfa6 <handle_demo_play>
	
	if (player->flags & EXPLODING)
    e00e:	f6 01       	movw	r30, r12
    e010:	90 85       	ldd	r25, Z+8	; 0x08
    e012:	94 ff       	sbrs	r25, 4
    e014:	19 c0       	rjmp	.+50     	; 0xe048 <update_player+0x68>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    e016:	04 85       	ldd	r16, Z+12	; 0x0c
    e018:	23 85       	ldd	r18, Z+11	; 0x0b
    e01a:	41 2f       	mov	r20, r17
    e01c:	b6 01       	movw	r22, r12
    e01e:	64 59       	subi	r22, 0x94	; 148
    e020:	7f 4f       	sbci	r23, 0xFF	; 255
    e022:	c6 01       	movw	r24, r12
    e024:	08 96       	adiw	r24, 0x08	; 8
    e026:	0e 94 94 63 	call	0xc728	; 0xc728 <map_explosion>
    e02a:	88 23       	and	r24, r24
    e02c:	09 f4       	brne	.+2      	; 0xe030 <update_player+0x50>
    e02e:	fd c1       	rjmp	.+1018   	; 0xe42a <update_player+0x44a>
		{
			return handle_player_death(player);
    e030:	c6 01       	movw	r24, r12
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    e032:	0f 90       	pop	r0
    e034:	df 91       	pop	r29
    e036:	cf 91       	pop	r28
    e038:	1f 91       	pop	r17
    e03a:	0f 91       	pop	r16
    e03c:	ff 90       	pop	r15
    e03e:	ef 90       	pop	r14
    e040:	df 90       	pop	r13
    e042:	cf 90       	pop	r12
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    e044:	0c 94 b0 6f 	jmp	0xdf60	; 0xdf60 <handle_player_death>
		}
	}
	else if (is_space())
    e048:	99 83       	std	Y+1, r25	; 0x01
    e04a:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    e04e:	99 81       	ldd	r25, Y+1	; 0x01
    e050:	88 23       	and	r24, r24
    e052:	09 f4       	brne	.+2      	; 0xe056 <update_player+0x76>
    e054:	a3 c0       	rjmp	.+326    	; 0xe19c <update_player+0x1bc>
	{
		if (game.current_level_index == 9)
    e056:	80 91 cf 0d 	lds	r24, 0x0DCF
    e05a:	89 30       	cpi	r24, 0x09	; 9
    e05c:	09 f0       	breq	.+2      	; 0xe060 <update_player+0x80>
    e05e:	4a c0       	rjmp	.+148    	; 0xe0f4 <update_player+0x114>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    e060:	20 91 ba 0d 	lds	r18, 0x0DBA
    e064:	30 91 bb 0d 	lds	r19, 0x0DBB
    e068:	e3 e0       	ldi	r30, 0x03	; 3
    e06a:	36 95       	lsr	r19
    e06c:	27 95       	ror	r18
    e06e:	ea 95       	dec	r30
    e070:	e1 f7       	brne	.-8      	; 0xe06a <update_player+0x8a>
    e072:	24 5e       	subi	r18, 0xE4	; 228
    e074:	3f 4f       	sbci	r19, 0xFF	; 255
    e076:	22 3d       	cpi	r18, 0xD2	; 210
    e078:	31 05       	cpc	r19, r1
    e07a:	e0 f1       	brcs	.+120    	; 0xe0f4 <update_player+0x114>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    e07c:	95 ff       	sbrs	r25, 5
    e07e:	02 c0       	rjmp	.+4      	; 0xe084 <update_player+0xa4>
				{
					space_ship_speed = 0;
    e080:	00 e0       	ldi	r16, 0x00	; 0
    e082:	01 c0       	rjmp	.+2      	; 0xe086 <update_player+0xa6>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    e084:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(player->flags & BOSS_APROACHING))
    e086:	96 fd       	sbrc	r25, 6
    e088:	07 c0       	rjmp	.+14     	; 0xe098 <update_player+0xb8>
				{
					player->flags |= BOSS_APROACHING;
    e08a:	90 64       	ori	r25, 0x40	; 64
    e08c:	f6 01       	movw	r30, r12
    e08e:	90 87       	std	Z+8, r25	; 0x08
					explode_all_enemies();
    e090:	0e 94 ab 5f 	call	0xbf56	; 0xbf56 <explode_all_enemies>
					StopSong();
    e094:	0e 94 be 44 	call	0x897c	; 0x897c <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(player->flags & BOSS_REACHED))
    e098:	80 91 ba 0d 	lds	r24, 0x0DBA
    e09c:	90 91 bb 0d 	lds	r25, 0x0DBB
    e0a0:	73 e0       	ldi	r23, 0x03	; 3
    e0a2:	96 95       	lsr	r25
    e0a4:	87 95       	ror	r24
    e0a6:	7a 95       	dec	r23
    e0a8:	e1 f7       	brne	.-8      	; 0xe0a2 <update_player+0xc2>
    e0aa:	4c 96       	adiw	r24, 0x1c	; 28
    e0ac:	8a 3f       	cpi	r24, 0xFA	; 250
    e0ae:	91 05       	cpc	r25, r1
    e0b0:	60 f0       	brcs	.+24     	; 0xe0ca <update_player+0xea>
    e0b2:	f6 01       	movw	r30, r12
    e0b4:	80 85       	ldd	r24, Z+8	; 0x08
    e0b6:	87 fd       	sbrc	r24, 7
    e0b8:	08 c0       	rjmp	.+16     	; 0xe0ca <update_player+0xea>
				{
					player->flags |= BOSS_REACHED;
    e0ba:	80 68       	ori	r24, 0x80	; 128
    e0bc:	80 87       	std	Z+8, r24	; 0x08
					init_enemy_boss_turrets();
    e0be:	0e 94 f8 5a 	call	0xb5f0	; 0xb5f0 <init_enemy_boss_turrets>
					StartSong(planetsong);
    e0c2:	88 e8       	ldi	r24, 0x88	; 136
    e0c4:	92 e1       	ldi	r25, 0x12	; 18
    e0c6:	0e 94 95 44 	call	0x892a	; 0x892a <StartSong>
				}
				if ((player->flags & BOSS_REACHED) && (game.active_enemies == 0))
    e0ca:	f6 01       	movw	r30, r12
    e0cc:	80 85       	ldd	r24, Z+8	; 0x08
    e0ce:	87 ff       	sbrs	r24, 7
    e0d0:	12 c0       	rjmp	.+36     	; 0xe0f6 <update_player+0x116>
    e0d2:	80 91 d5 0d 	lds	r24, 0x0DD5
    e0d6:	81 11       	cpse	r24, r1
    e0d8:	0e c0       	rjmp	.+28     	; 0xe0f6 <update_player+0x116>
				{
					init_enemy_boss_eyes();
    e0da:	0e 94 18 5b 	call	0xb630	; 0xb630 <init_enemy_boss_eyes>
					game.eye_clusters--;
    e0de:	80 91 d8 0d 	lds	r24, 0x0DD8
    e0e2:	81 50       	subi	r24, 0x01	; 1
    e0e4:	80 93 d8 0d 	sts	0x0DD8, r24
					if (game.eye_clusters == 0)
    e0e8:	81 11       	cpse	r24, r1
    e0ea:	05 c0       	rjmp	.+10     	; 0xe0f6 <update_player+0x116>
					{
						game.level_ended = 1;
    e0ec:	81 e0       	ldi	r24, 0x01	; 1
    e0ee:	80 93 d7 0d 	sts	0x0DD7, r24
    e0f2:	01 c0       	rjmp	.+2      	; 0xe0f6 <update_player+0x116>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    e0f4:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    e0f6:	f6 01       	movw	r30, r12
    e0f8:	80 85       	ldd	r24, Z+8	; 0x08
    e0fa:	85 ff       	sbrs	r24, 5
    e0fc:	08 c0       	rjmp	.+16     	; 0xe10e <update_player+0x12e>
    e0fe:	80 91 cf 0d 	lds	r24, 0x0DCF
    e102:	89 30       	cpi	r24, 0x09	; 9
    e104:	21 f0       	breq	.+8      	; 0xe10e <update_player+0x12e>
			player->shared.vx = space_ship_speed*2;
    e106:	00 0f       	add	r16, r16
    e108:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    e10a:	14 82       	std	Z+4, r1	; 0x04
    e10c:	43 c0       	rjmp	.+134    	; 0xe194 <update_player+0x1b4>
		} else {
			player->shared.vy = 0;
    e10e:	f6 01       	movw	r30, r12
    e110:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    e112:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    e114:	e8 58       	subi	r30, 0x88	; 136
    e116:	ff 4f       	sbci	r31, 0xFF	; 255
    e118:	20 81       	ld	r18, Z
    e11a:	25 ff       	sbrs	r18, 5
    e11c:	11 c0       	rjmp	.+34     	; 0xe140 <update_player+0x160>
    e11e:	f6 01       	movw	r30, r12
    e120:	82 81       	ldd	r24, Z+2	; 0x02
    e122:	93 81       	ldd	r25, Z+3	; 0x03
    e124:	63 e0       	ldi	r22, 0x03	; 3
    e126:	96 95       	lsr	r25
    e128:	87 95       	ror	r24
    e12a:	6a 95       	dec	r22
    e12c:	e1 f7       	brne	.-8      	; 0xe126 <update_player+0x146>
    e12e:	01 96       	adiw	r24, 0x01	; 1
    e130:	40 91 ca 0d 	lds	r20, 0x0DCA
    e134:	50 e0       	ldi	r21, 0x00	; 0
    e136:	84 17       	cp	r24, r20
    e138:	95 07       	cpc	r25, r21
    e13a:	10 f4       	brcc	.+4      	; 0xe140 <update_player+0x160>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    e13c:	8c e3       	ldi	r24, 0x3C	; 60
    e13e:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    e140:	27 ff       	sbrs	r18, 7
    e142:	11 c0       	rjmp	.+34     	; 0xe166 <update_player+0x186>
    e144:	f6 01       	movw	r30, r12
    e146:	40 81       	ld	r20, Z
    e148:	51 81       	ldd	r21, Z+1	; 0x01
    e14a:	48 5e       	subi	r20, 0xE8	; 232
    e14c:	5f 4f       	sbci	r21, 0xFF	; 255
    e14e:	80 91 ba 0d 	lds	r24, 0x0DBA
    e152:	90 91 bb 0d 	lds	r25, 0x0DBB
    e156:	80 52       	subi	r24, 0x20	; 32
    e158:	9f 4f       	sbci	r25, 0xFF	; 255
    e15a:	48 17       	cp	r20, r24
    e15c:	59 07       	cpc	r21, r25
    e15e:	18 f4       	brcc	.+6      	; 0xe166 <update_player+0x186>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    e160:	8c e3       	ldi	r24, 0x3C	; 60
    e162:	80 0f       	add	r24, r16
    e164:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    e166:	26 ff       	sbrs	r18, 6
    e168:	0c c0       	rjmp	.+24     	; 0xe182 <update_player+0x1a2>
    e16a:	f6 01       	movw	r30, r12
    e16c:	40 81       	ld	r20, Z
    e16e:	51 81       	ldd	r21, Z+1	; 0x01
    e170:	80 91 ba 0d 	lds	r24, 0x0DBA
    e174:	90 91 bb 0d 	lds	r25, 0x0DBB
    e178:	84 17       	cp	r24, r20
    e17a:	95 07       	cpc	r25, r21
    e17c:	10 f4       	brcc	.+4      	; 0xe182 <update_player+0x1a2>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    e17e:	0c 53       	subi	r16, 0x3C	; 60
    e180:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    e182:	24 ff       	sbrs	r18, 4
    e184:	07 c0       	rjmp	.+14     	; 0xe194 <update_player+0x1b4>
    e186:	f6 01       	movw	r30, r12
    e188:	82 81       	ldd	r24, Z+2	; 0x02
    e18a:	93 81       	ldd	r25, Z+3	; 0x03
    e18c:	89 2b       	or	r24, r25
    e18e:	11 f0       	breq	.+4      	; 0xe194 <update_player+0x1b4>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    e190:	84 ec       	ldi	r24, 0xC4	; 196
    e192:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    e194:	c6 01       	movw	r24, r12
    e196:	8c 5a       	subi	r24, 0xAC	; 172
    e198:	9f 4f       	sbci	r25, 0xFF	; 255
    e19a:	40 c1       	rjmp	.+640    	; 0xe41c <update_player+0x43c>
	}
	else if (player->flags & (IDLE|RUNNING))
    e19c:	89 2f       	mov	r24, r25
    e19e:	8a 70       	andi	r24, 0x0A	; 10
    e1a0:	09 f4       	brne	.+2      	; 0xe1a4 <update_player+0x1c4>
    e1a2:	95 c0       	rjmp	.+298    	; 0xe2ce <update_player+0x2ee>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    e1a4:	f6 01       	movw	r30, r12
    e1a6:	44 85       	ldd	r20, Z+12	; 0x0c
    e1a8:	63 85       	ldd	r22, Z+11	; 0x0b
    e1aa:	c6 01       	movw	r24, r12
    e1ac:	0e 94 4a 5e 	call	0xbc94	; 0xbc94 <on_solid_ground>
    e1b0:	81 11       	cpse	r24, r1
    e1b2:	06 c0       	rjmp	.+12     	; 0xe1c0 <update_player+0x1e0>
		{
			player->shared.gravity = GRAVITY;
    e1b4:	88 ec       	ldi	r24, 0xC8	; 200
    e1b6:	f6 01       	movw	r30, r12
    e1b8:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    e1ba:	81 e0       	ldi	r24, 0x01	; 1
    e1bc:	80 87       	std	Z+8, r24	; 0x08
    e1be:	0c c1       	rjmp	.+536    	; 0xe3d8 <update_player+0x3f8>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    e1c0:	f6 01       	movw	r30, r12
    e1c2:	e8 58       	subi	r30, 0x88	; 136
    e1c4:	ff 4f       	sbci	r31, 0xFF	; 255
    e1c6:	80 81       	ld	r24, Z
    e1c8:	85 ff       	sbrs	r24, 5
    e1ca:	25 c0       	rjmp	.+74     	; 0xe216 <update_player+0x236>
			{
				player->shared.y += 16;
    e1cc:	f6 01       	movw	r30, r12
    e1ce:	82 81       	ldd	r24, Z+2	; 0x02
    e1d0:	93 81       	ldd	r25, Z+3	; 0x03
    e1d2:	40 96       	adiw	r24, 0x10	; 16
    e1d4:	93 83       	std	Z+3, r25	; 0x03
    e1d6:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    e1d8:	82 85       	ldd	r24, Z+10	; 0x0a
    e1da:	81 30       	cpi	r24, 0x01	; 1
    e1dc:	29 f4       	brne	.+10     	; 0xe1e8 <update_player+0x208>
				{
					player->shared.x -= 8;
    e1de:	80 81       	ld	r24, Z
    e1e0:	91 81       	ldd	r25, Z+1	; 0x01
    e1e2:	08 97       	sbiw	r24, 0x08	; 8
    e1e4:	91 83       	std	Z+1, r25	; 0x01
    e1e6:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    e1e8:	f6 01       	movw	r30, r12
    e1ea:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    e1ec:	84 e0       	ldi	r24, 0x04	; 4
    e1ee:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    e1f0:	83 e0       	ldi	r24, 0x03	; 3
    e1f2:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    e1f4:	81 e0       	ldi	r24, 0x01	; 1
    e1f6:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    e1f8:	63 e0       	ldi	r22, 0x03	; 3
    e1fa:	83 e0       	ldi	r24, 0x03	; 3
    e1fc:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    e200:	24 e0       	ldi	r18, 0x04	; 4
    e202:	12 9f       	mul	r17, r18
    e204:	f0 01       	movw	r30, r0
    e206:	11 24       	eor	r1, r1
    e208:	ec 51       	subi	r30, 0x1C	; 28
    e20a:	f0 4f       	sbci	r31, 0xF0	; 240
    e20c:	43 81       	ldd	r20, Z+3	; 0x03
    e20e:	c6 01       	movw	r24, r12
    e210:	8c 59       	subi	r24, 0x9C	; 156
    e212:	9f 4f       	sbci	r25, 0xFF	; 255
    e214:	45 c0       	rjmp	.+138    	; 0xe2a0 <update_player+0x2c0>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    e216:	87 ff       	sbrs	r24, 7
    e218:	1d c0       	rjmp	.+58     	; 0xe254 <update_player+0x274>
    e21a:	f6 01       	movw	r30, r12
    e21c:	20 81       	ld	r18, Z
    e21e:	31 81       	ldd	r19, Z+1	; 0x01
    e220:	53 e0       	ldi	r21, 0x03	; 3
    e222:	36 95       	lsr	r19
    e224:	27 95       	ror	r18
    e226:	5a 95       	dec	r21
    e228:	e1 f7       	brne	.-8      	; 0xe222 <update_player+0x242>
    e22a:	2e 5f       	subi	r18, 0xFE	; 254
    e22c:	3f 4f       	sbci	r19, 0xFF	; 255
    e22e:	40 91 c9 0d 	lds	r20, 0x0DC9
    e232:	50 e0       	ldi	r21, 0x00	; 0
    e234:	24 17       	cp	r18, r20
    e236:	35 07       	cpc	r19, r21
    e238:	68 f4       	brcc	.+26     	; 0xe254 <update_player+0x274>
			{
				player->shared.vx = RUN_SPEED;
    e23a:	8c e3       	ldi	r24, 0x3C	; 60
    e23c:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    e23e:	82 e0       	ldi	r24, 0x02	; 2
    e240:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    e242:	81 e0       	ldi	r24, 0x01	; 1
    e244:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    e246:	c6 01       	movw	r24, r12
    e248:	8c 5a       	subi	r24, 0xAC	; 172
    e24a:	9f 4f       	sbci	r25, 0xFF	; 255
    e24c:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e250:	40 e0       	ldi	r20, 0x00	; 0
    e252:	2a c0       	rjmp	.+84     	; 0xe2a8 <update_player+0x2c8>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    e254:	86 ff       	sbrs	r24, 6
    e256:	16 c0       	rjmp	.+44     	; 0xe284 <update_player+0x2a4>
    e258:	f6 01       	movw	r30, r12
    e25a:	20 81       	ld	r18, Z
    e25c:	31 81       	ldd	r19, Z+1	; 0x01
    e25e:	80 91 ba 0d 	lds	r24, 0x0DBA
    e262:	90 91 bb 0d 	lds	r25, 0x0DBB
    e266:	82 17       	cp	r24, r18
    e268:	93 07       	cpc	r25, r19
    e26a:	60 f4       	brcc	.+24     	; 0xe284 <update_player+0x2a4>
			{
				player->shared.vx = -RUN_SPEED;
    e26c:	84 ec       	ldi	r24, 0xC4	; 196
    e26e:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    e270:	82 e0       	ldi	r24, 0x02	; 2
    e272:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    e274:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    e276:	c6 01       	movw	r24, r12
    e278:	8c 5a       	subi	r24, 0xAC	; 172
    e27a:	9f 4f       	sbci	r25, 0xFF	; 255
    e27c:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e280:	41 e0       	ldi	r20, 0x01	; 1
    e282:	12 c0       	rjmp	.+36     	; 0xe2a8 <update_player+0x2c8>
			}
			else
			{
				player->flags = IDLE;
    e284:	88 e0       	ldi	r24, 0x08	; 8
    e286:	f6 01       	movw	r30, r12
    e288:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    e28a:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    e28c:	24 e0       	ldi	r18, 0x04	; 4
    e28e:	12 9f       	mul	r17, r18
    e290:	f0 01       	movw	r30, r0
    e292:	11 24       	eor	r1, r1
    e294:	ec 51       	subi	r30, 0x1C	; 28
    e296:	f0 4f       	sbci	r31, 0xF0	; 240
    e298:	43 81       	ldd	r20, Z+3	; 0x03
    e29a:	c6 01       	movw	r24, r12
    e29c:	84 5b       	subi	r24, 0xB4	; 180
    e29e:	9f 4f       	sbci	r25, 0xFF	; 255
    e2a0:	49 83       	std	Y+1, r20	; 0x01
    e2a2:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e2a6:	49 81       	ldd	r20, Y+1	; 0x01
    e2a8:	bc 01       	movw	r22, r24
    e2aa:	81 2f       	mov	r24, r17
    e2ac:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_B && !(player->flags & PRONE))
    e2b0:	f7 01       	movw	r30, r14
    e2b2:	80 81       	ld	r24, Z
    e2b4:	80 ff       	sbrs	r24, 0
    e2b6:	b9 c0       	rjmp	.+370    	; 0xe42a <update_player+0x44a>
    e2b8:	f6 01       	movw	r30, r12
    e2ba:	80 85       	ldd	r24, Z+8	; 0x08
    e2bc:	82 fd       	sbrc	r24, 2
    e2be:	b5 c0       	rjmp	.+362    	; 0xe42a <update_player+0x44a>
			{
				player->shared.vy = -JUMP_SPEED;
    e2c0:	81 e8       	ldi	r24, 0x81	; 129
    e2c2:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    e2c4:	88 ec       	ldi	r24, 0xC8	; 200
    e2c6:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    e2c8:	81 e0       	ldi	r24, 0x01	; 1
    e2ca:	80 87       	std	Z+8, r24	; 0x08
    e2cc:	81 c0       	rjmp	.+258    	; 0xe3d0 <update_player+0x3f0>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    e2ce:	90 ff       	sbrs	r25, 0
    e2d0:	4c c0       	rjmp	.+152    	; 0xe36a <update_player+0x38a>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    e2d2:	f6 01       	movw	r30, r12
    e2d4:	e8 58       	subi	r30, 0x88	; 136
    e2d6:	ff 4f       	sbci	r31, 0xFF	; 255
    e2d8:	60 81       	ld	r22, Z
    e2da:	c6 01       	movw	r24, r12
    e2dc:	84 5a       	subi	r24, 0xA4	; 164
    e2de:	9f 4f       	sbci	r25, 0xFF	; 255
    e2e0:	67 ff       	sbrs	r22, 7
    e2e2:	18 c0       	rjmp	.+48     	; 0xe314 <update_player+0x334>
    e2e4:	f6 01       	movw	r30, r12
    e2e6:	20 81       	ld	r18, Z
    e2e8:	31 81       	ldd	r19, Z+1	; 0x01
    e2ea:	43 e0       	ldi	r20, 0x03	; 3
    e2ec:	36 95       	lsr	r19
    e2ee:	27 95       	ror	r18
    e2f0:	4a 95       	dec	r20
    e2f2:	e1 f7       	brne	.-8      	; 0xe2ec <update_player+0x30c>
    e2f4:	2e 5f       	subi	r18, 0xFE	; 254
    e2f6:	3f 4f       	sbci	r19, 0xFF	; 255
    e2f8:	40 91 c9 0d 	lds	r20, 0x0DC9
    e2fc:	50 e0       	ldi	r21, 0x00	; 0
    e2fe:	24 17       	cp	r18, r20
    e300:	35 07       	cpc	r19, r21
    e302:	40 f4       	brcc	.+16     	; 0xe314 <update_player+0x334>
		{
			player->shared.vx = RUN_SPEED;
    e304:	2c e3       	ldi	r18, 0x3C	; 60
    e306:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    e308:	21 e0       	ldi	r18, 0x01	; 1
    e30a:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    e30c:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e310:	40 e0       	ldi	r20, 0x00	; 0
    e312:	20 c0       	rjmp	.+64     	; 0xe354 <update_player+0x374>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    e314:	66 ff       	sbrs	r22, 6
    e316:	11 c0       	rjmp	.+34     	; 0xe33a <update_player+0x35a>
    e318:	f6 01       	movw	r30, r12
    e31a:	40 81       	ld	r20, Z
    e31c:	51 81       	ldd	r21, Z+1	; 0x01
    e31e:	20 91 ba 0d 	lds	r18, 0x0DBA
    e322:	30 91 bb 0d 	lds	r19, 0x0DBB
    e326:	24 17       	cp	r18, r20
    e328:	35 07       	cpc	r19, r21
    e32a:	38 f4       	brcc	.+14     	; 0xe33a <update_player+0x35a>
		{
			player->shared.vx = -RUN_SPEED;
    e32c:	24 ec       	ldi	r18, 0xC4	; 196
    e32e:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    e330:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    e332:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e336:	41 e0       	ldi	r20, 0x01	; 1
    e338:	0d c0       	rjmp	.+26     	; 0xe354 <update_player+0x374>
		}
		else
		{
			player->shared.vx = 0;
    e33a:	f6 01       	movw	r30, r12
    e33c:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    e33e:	24 e0       	ldi	r18, 0x04	; 4
    e340:	12 9f       	mul	r17, r18
    e342:	f0 01       	movw	r30, r0
    e344:	11 24       	eor	r1, r1
    e346:	ec 51       	subi	r30, 0x1C	; 28
    e348:	f0 4f       	sbci	r31, 0xF0	; 240
    e34a:	43 81       	ldd	r20, Z+3	; 0x03
    e34c:	49 83       	std	Y+1, r20	; 0x01
    e34e:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e352:	49 81       	ldd	r20, Y+1	; 0x01
    e354:	bc 01       	movw	r22, r24
    e356:	81 2f       	mov	r24, r17
    e358:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    e35c:	f6 01       	movw	r30, r12
    e35e:	86 81       	ldd	r24, Z+6	; 0x06
    e360:	81 11       	cpse	r24, r1
    e362:	63 c0       	rjmp	.+198    	; 0xe42a <update_player+0x44a>
		{
			player->flags = IDLE;
    e364:	88 e0       	ldi	r24, 0x08	; 8
    e366:	80 87       	std	Z+8, r24	; 0x08
    e368:	60 c0       	rjmp	.+192    	; 0xe42a <update_player+0x44a>
		}
	}
	else if (player->flags & PRONE)
    e36a:	92 ff       	sbrs	r25, 2
    e36c:	5e c0       	rjmp	.+188    	; 0xe42a <update_player+0x44a>
	{
		if (player->controls.pressed & BTN_UP)
    e36e:	f7 01       	movw	r30, r14
    e370:	80 81       	ld	r24, Z
    e372:	84 ff       	sbrs	r24, 4
    e374:	16 c0       	rjmp	.+44     	; 0xe3a2 <update_player+0x3c2>
		{
			player->flags = IDLE;	
    e376:	88 e0       	ldi	r24, 0x08	; 8
    e378:	f6 01       	movw	r30, r12
    e37a:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    e37c:	82 81       	ldd	r24, Z+2	; 0x02
    e37e:	93 81       	ldd	r25, Z+3	; 0x03
    e380:	40 97       	sbiw	r24, 0x10	; 16
    e382:	93 83       	std	Z+3, r25	; 0x03
    e384:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    e386:	82 85       	ldd	r24, Z+10	; 0x0a
    e388:	81 30       	cpi	r24, 0x01	; 1
    e38a:	29 f4       	brne	.+10     	; 0xe396 <update_player+0x3b6>
			{
				player->shared.x += 8;
    e38c:	80 81       	ld	r24, Z
    e38e:	91 81       	ldd	r25, Z+1	; 0x01
    e390:	08 96       	adiw	r24, 0x08	; 8
    e392:	91 83       	std	Z+1, r25	; 0x01
    e394:	80 83       	st	Z, r24
			}
			player->width = 2;
    e396:	82 e0       	ldi	r24, 0x02	; 2
    e398:	f6 01       	movw	r30, r12
    e39a:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    e39c:	83 e0       	ldi	r24, 0x03	; 3
    e39e:	84 87       	std	Z+12, r24	; 0x0c
    e3a0:	44 c0       	rjmp	.+136    	; 0xe42a <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_B)
    e3a2:	80 ff       	sbrs	r24, 0
    e3a4:	28 c0       	rjmp	.+80     	; 0xe3f6 <update_player+0x416>
		{
			player->flags = JUMPING;
    e3a6:	81 e0       	ldi	r24, 0x01	; 1
    e3a8:	f6 01       	movw	r30, r12
    e3aa:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    e3ac:	82 81       	ldd	r24, Z+2	; 0x02
    e3ae:	93 81       	ldd	r25, Z+3	; 0x03
    e3b0:	40 97       	sbiw	r24, 0x10	; 16
    e3b2:	93 83       	std	Z+3, r25	; 0x03
    e3b4:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    e3b6:	82 85       	ldd	r24, Z+10	; 0x0a
    e3b8:	81 30       	cpi	r24, 0x01	; 1
    e3ba:	29 f4       	brne	.+10     	; 0xe3c6 <update_player+0x3e6>
			{
				player->shared.x += 8;
    e3bc:	80 81       	ld	r24, Z
    e3be:	91 81       	ldd	r25, Z+1	; 0x01
    e3c0:	08 96       	adiw	r24, 0x08	; 8
    e3c2:	91 83       	std	Z+1, r25	; 0x01
    e3c4:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    e3c6:	81 e8       	ldi	r24, 0x81	; 129
    e3c8:	f6 01       	movw	r30, r12
    e3ca:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    e3cc:	88 ec       	ldi	r24, 0xC8	; 200
    e3ce:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    e3d0:	82 e0       	ldi	r24, 0x02	; 2
    e3d2:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    e3d4:	83 e0       	ldi	r24, 0x03	; 3
    e3d6:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    e3d8:	24 e0       	ldi	r18, 0x04	; 4
    e3da:	12 9f       	mul	r17, r18
    e3dc:	f0 01       	movw	r30, r0
    e3de:	11 24       	eor	r1, r1
    e3e0:	ec 51       	subi	r30, 0x1C	; 28
    e3e2:	f0 4f       	sbci	r31, 0xF0	; 240
    e3e4:	43 81       	ldd	r20, Z+3	; 0x03
    e3e6:	c6 01       	movw	r24, r12
    e3e8:	84 5a       	subi	r24, 0xA4	; 164
    e3ea:	9f 4f       	sbci	r25, 0xFF	; 255
    e3ec:	49 83       	std	Y+1, r20	; 0x01
    e3ee:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e3f2:	49 81       	ldd	r20, Y+1	; 0x01
    e3f4:	16 c0       	rjmp	.+44     	; 0xe422 <update_player+0x442>
		}
		else if (player->controls.pressed & BTN_LEFT)
    e3f6:	86 ff       	sbrs	r24, 6
    e3f8:	09 c0       	rjmp	.+18     	; 0xe40c <update_player+0x42c>
		{
			player->direction = D_LEFT;
    e3fa:	f6 01       	movw	r30, r12
    e3fc:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    e3fe:	c6 01       	movw	r24, r12
    e400:	8c 59       	subi	r24, 0x9C	; 156
    e402:	9f 4f       	sbci	r25, 0xFF	; 255
    e404:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e408:	41 e0       	ldi	r20, 0x01	; 1
    e40a:	0b c0       	rjmp	.+22     	; 0xe422 <update_player+0x442>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    e40c:	87 ff       	sbrs	r24, 7
    e40e:	0d c0       	rjmp	.+26     	; 0xe42a <update_player+0x44a>
		{
			player->direction = D_RIGHT;
    e410:	81 e0       	ldi	r24, 0x01	; 1
    e412:	f6 01       	movw	r30, r12
    e414:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    e416:	c6 01       	movw	r24, r12
    e418:	8c 59       	subi	r24, 0x9C	; 156
    e41a:	9f 4f       	sbci	r25, 0xFF	; 255
    e41c:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e420:	40 e0       	ldi	r20, 0x00	; 0
    e422:	bc 01       	movw	r22, r24
    e424:	81 2f       	mov	r24, r17
    e426:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
		}
	}
	return 1;
}
    e42a:	81 e0       	ldi	r24, 0x01	; 1
    e42c:	0f 90       	pop	r0
    e42e:	df 91       	pop	r29
    e430:	cf 91       	pop	r28
    e432:	1f 91       	pop	r17
    e434:	0f 91       	pop	r16
    e436:	ff 90       	pop	r15
    e438:	ef 90       	pop	r14
    e43a:	df 90       	pop	r13
    e43c:	cf 90       	pop	r12
    e43e:	08 95       	ret

0000e440 <update_level>:
	print_scroll(strCongrats);
	StopSong();
}

u8 update_level()
{
    e440:	cf 92       	push	r12
    e442:	df 92       	push	r13
    e444:	ef 92       	push	r14
    e446:	ff 92       	push	r15
    e448:	0f 93       	push	r16
    e44a:	cf 93       	push	r28
    e44c:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    e44e:	e0 90 d9 0d 	lds	r14, 0x0DD9
    e452:	f0 90 da 0d 	lds	r15, 0x0DDA
    e456:	c0 90 ba 0d 	lds	r12, 0x0DBA
    e45a:	d0 90 bb 0d 	lds	r13, 0x0DBB
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    e45e:	80 91 d4 0d 	lds	r24, 0x0DD4
    e462:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    e464:	8c 33       	cpi	r24, 0x3C	; 60
    e466:	19 f0       	breq	.+6      	; 0xe46e <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    e468:	80 93 d4 0d 	sts	0x0DD4, r24
    e46c:	0f c0       	rjmp	.+30     	; 0xe48c <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    e46e:	10 92 d4 0d 	sts	0x0DD4, r1
		if (game.time != 65535) game.time++;
    e472:	80 91 c0 0d 	lds	r24, 0x0DC0
    e476:	90 91 c1 0d 	lds	r25, 0x0DC1
    e47a:	8f 3f       	cpi	r24, 0xFF	; 255
    e47c:	2f ef       	ldi	r18, 0xFF	; 255
    e47e:	92 07       	cpc	r25, r18
    e480:	29 f0       	breq	.+10     	; 0xe48c <update_level+0x4c>
    e482:	01 96       	adiw	r24, 0x01	; 1
    e484:	90 93 c1 0d 	sts	0x0DC1, r25
    e488:	80 93 c0 0d 	sts	0x0DC0, r24
	}
	
	if (is_space())
    e48c:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    e490:	88 23       	and	r24, r24
    e492:	69 f1       	breq	.+90     	; 0xe4ee <update_level+0xae>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    e494:	c6 01       	movw	r24, r12
    e496:	23 e0       	ldi	r18, 0x03	; 3
    e498:	96 95       	lsr	r25
    e49a:	87 95       	ror	r24
    e49c:	2a 95       	dec	r18
    e49e:	e1 f7       	brne	.-8      	; 0xe498 <update_level+0x58>
    e4a0:	4c 96       	adiw	r24, 0x1c	; 28
    e4a2:	20 91 c9 0d 	lds	r18, 0x0DC9
    e4a6:	30 e0       	ldi	r19, 0x00	; 0
    e4a8:	82 17       	cp	r24, r18
    e4aa:	93 07       	cpc	r25, r19
    e4ac:	70 f4       	brcc	.+28     	; 0xe4ca <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    e4ae:	20 91 cf 0d 	lds	r18, 0x0DCF
    e4b2:	29 30       	cpi	r18, 0x09	; 9
    e4b4:	39 f4       	brne	.+14     	; 0xe4c4 <update_level+0x84>
    e4b6:	82 3d       	cpi	r24, 0xD2	; 210
    e4b8:	91 05       	cpc	r25, r1
    e4ba:	20 f0       	brcs	.+8      	; 0xe4c4 <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    e4bc:	80 91 d4 0d 	lds	r24, 0x0DD4
    e4c0:	80 fd       	sbrc	r24, 0
    e4c2:	2d c0       	rjmp	.+90     	; 0xe51e <update_level+0xde>
    e4c4:	0e 94 f7 5d 	call	0xbbee	; 0xbbee <move_camera_x>
    e4c8:	2a c0       	rjmp	.+84     	; 0xe51e <update_level+0xde>
    e4ca:	80 91 e1 0d 	lds	r24, 0x0DE1
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x >= game.camera_x+CAMERA_WIDTH*8)
    e4ce:	96 01       	movw	r18, r12
    e4d0:	20 52       	subi	r18, 0x20	; 32
    e4d2:	3f 4f       	sbci	r19, 0xFF	; 255
    e4d4:	e2 16       	cp	r14, r18
    e4d6:	f3 06       	cpc	r15, r19
    e4d8:	30 f0       	brcs	.+12     	; 0xe4e6 <update_level+0xa6>
		{
			game.level_ended = 1;
    e4da:	91 e0       	ldi	r25, 0x01	; 1
    e4dc:	90 93 d7 0d 	sts	0x0DD7, r25
			game.player.flags ^= END_OF_SPACE;
    e4e0:	90 e2       	ldi	r25, 0x20	; 32
    e4e2:	89 27       	eor	r24, r25
    e4e4:	01 c0       	rjmp	.+2      	; 0xe4e8 <update_level+0xa8>
		} else {
			game.player.flags |= END_OF_SPACE;
    e4e6:	80 62       	ori	r24, 0x20	; 32
    e4e8:	80 93 e1 0d 	sts	0x0DE1, r24
    e4ec:	18 c0       	rjmp	.+48     	; 0xe51e <update_level+0xde>
		}
	}
	else if (game.player.shared.vx > 0 &&
    e4ee:	80 91 de 0d 	lds	r24, 0x0DDE
    e4f2:	18 16       	cp	r1, r24
    e4f4:	a4 f4       	brge	.+40     	; 0xe51e <update_level+0xde>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    e4f6:	c7 01       	movw	r24, r14
    e4f8:	8c 19       	sub	r24, r12
    e4fa:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    e4fc:	80 37       	cpi	r24, 0x70	; 112
    e4fe:	91 05       	cpc	r25, r1
    e500:	70 f0       	brcs	.+28     	; 0xe51e <update_level+0xde>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    e502:	96 01       	movw	r18, r12
    e504:	83 e0       	ldi	r24, 0x03	; 3
    e506:	36 95       	lsr	r19
    e508:	27 95       	ror	r18
    e50a:	8a 95       	dec	r24
    e50c:	e1 f7       	brne	.-8      	; 0xe506 <update_level+0xc6>
    e50e:	24 5e       	subi	r18, 0xE4	; 228
    e510:	3f 4f       	sbci	r19, 0xFF	; 255
    e512:	80 91 c9 0d 	lds	r24, 0x0DC9
    e516:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    e518:	28 17       	cp	r18, r24
    e51a:	39 07       	cpc	r19, r25
    e51c:	98 f2       	brcs	.-90     	; 0xe4c4 <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    e51e:	21 e0       	ldi	r18, 0x01	; 1
    e520:	40 91 e8 0d 	lds	r20, 0x0DE8
    e524:	6d e1       	ldi	r22, 0x1D	; 29
    e526:	89 e0       	ldi	r24, 0x09	; 9
    e528:	0e 94 ba 51 	call	0xa374	; 0xa374 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    e52c:	40 91 c0 0d 	lds	r20, 0x0DC0
    e530:	50 91 c1 0d 	lds	r21, 0x0DC1
    e534:	21 e0       	ldi	r18, 0x01	; 1
    e536:	6d e1       	ldi	r22, 0x1D	; 29
    e538:	8b e1       	ldi	r24, 0x1B	; 27
    e53a:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    e53e:	21 e0       	ldi	r18, 0x01	; 1
    e540:	40 91 cd 0d 	lds	r20, 0x0DCD
    e544:	6e e1       	ldi	r22, 0x1E	; 30
    e546:	89 e0       	ldi	r24, 0x09	; 9
    e548:	0e 94 ba 51 	call	0xa374	; 0xa374 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    e54c:	40 91 be 0d 	lds	r20, 0x0DBE
    e550:	50 91 bf 0d 	lds	r21, 0x0DBF
    e554:	21 e0       	ldi	r18, 0x01	; 1
    e556:	6e e1       	ldi	r22, 0x1E	; 30
    e558:	8b e1       	ldi	r24, 0x1B	; 27
    e55a:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    e55e:	40 91 bc 0d 	lds	r20, 0x0DBC
    e562:	50 91 bd 0d 	lds	r21, 0x0DBD
    e566:	21 e0       	ldi	r18, 0x01	; 1
    e568:	6f e1       	ldi	r22, 0x1F	; 31
    e56a:	8b e1       	ldi	r24, 0x1B	; 27
    e56c:	0e 94 eb 51 	call	0xa3d6	; 0xa3d6 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    e570:	80 91 d7 0d 	lds	r24, 0x0DD7
    e574:	88 23       	and	r24, r24
    e576:	09 f4       	brne	.+2      	; 0xe57a <update_level+0x13a>
    e578:	8c c0       	rjmp	.+280    	; 0xe692 <update_level+0x252>
    e57a:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    e57e:	81 11       	cpse	r24, r1
    e580:	6c c0       	rjmp	.+216    	; 0xe65a <update_level+0x21a>
    e582:	80 91 e1 0d 	lds	r24, 0x0DE1
    e586:	8e 70       	andi	r24, 0x0E	; 14
    e588:	09 f4       	brne	.+2      	; 0xe58c <update_level+0x14c>
    e58a:	83 c0       	rjmp	.+262    	; 0xe692 <update_level+0x252>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    e58c:	40 e0       	ldi	r20, 0x00	; 0
    e58e:	66 e1       	ldi	r22, 0x16	; 22
    e590:	78 e3       	ldi	r23, 0x38	; 56
    e592:	80 e0       	ldi	r24, 0x00	; 0
    e594:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
		if (game.player.flags & PRONE) {
    e598:	80 91 e1 0d 	lds	r24, 0x0DE1
    e59c:	82 ff       	sbrs	r24, 2
    e59e:	1a c0       	rjmp	.+52     	; 0xe5d4 <update_level+0x194>
			game.player.shared.y -= 16;
    e5a0:	40 91 db 0d 	lds	r20, 0x0DDB
    e5a4:	50 91 dc 0d 	lds	r21, 0x0DDC
    e5a8:	40 51       	subi	r20, 0x10	; 16
    e5aa:	51 09       	sbc	r21, r1
    e5ac:	50 93 dc 0d 	sts	0x0DDC, r21
    e5b0:	40 93 db 0d 	sts	0x0DDB, r20
			game.player.width = 2;
    e5b4:	82 e0       	ldi	r24, 0x02	; 2
    e5b6:	80 93 e4 0d 	sts	0x0DE4, r24
			game.player.height = 3;
    e5ba:	83 e0       	ldi	r24, 0x03	; 3
    e5bc:	80 93 e5 0d 	sts	0x0DE5, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    e5c0:	60 91 d9 0d 	lds	r22, 0x0DD9
    e5c4:	80 91 ba 0d 	lds	r24, 0x0DBA
    e5c8:	68 1b       	sub	r22, r24
    e5ca:	03 e0       	ldi	r16, 0x03	; 3
    e5cc:	22 e0       	ldi	r18, 0x02	; 2
    e5ce:	80 e0       	ldi	r24, 0x00	; 0
    e5d0:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    e5d4:	6b e0       	ldi	r22, 0x0B	; 11
    e5d6:	89 e0       	ldi	r24, 0x09	; 9
    e5d8:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
		LBRotateSprites();
    e5dc:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
		map_ship();
    e5e0:	0e 94 10 5e 	call	0xbc20	; 0xbc20 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    e5e4:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    e5e6:	c0 e0       	ldi	r28, 0x00	; 0
	StopSong();
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    e5e8:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    e5ea:	81 e0       	ldi	r24, 0x01	; 1
    e5ec:	90 e0       	ldi	r25, 0x00	; 0
    e5ee:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    e5f2:	8c 2f       	mov	r24, r28
    e5f4:	90 e0       	ldi	r25, 0x00	; 0
    e5f6:	88 3a       	cpi	r24, 0xA8	; 168
    e5f8:	91 05       	cpc	r25, r1
    e5fa:	3c f0       	brlt	.+14     	; 0xe60a <update_level+0x1ca>
			{
				clear_sprites(0, 6);
    e5fc:	66 e0       	ldi	r22, 0x06	; 6
    e5fe:	80 e0       	ldi	r24, 0x00	; 0
    e600:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
				LBRotateSprites();
    e604:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
				ship_increment = -3;
    e608:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    e60a:	8d e2       	ldi	r24, 0x2D	; 45
    e60c:	9e e0       	ldi	r25, 0x0E	; 14
    e60e:	0e 94 0d 51 	call	0xa21a	; 0xa21a <LBGetNextFrame>
    e612:	40 e0       	ldi	r20, 0x00	; 0
    e614:	bc 01       	movw	r22, r24
    e616:	86 e0       	ldi	r24, 0x06	; 6
    e618:	0e 94 73 52 	call	0xa4e6	; 0xa4e6 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    e61c:	02 e0       	ldi	r16, 0x02	; 2
    e61e:	24 e0       	ldi	r18, 0x04	; 4
    e620:	4c 2f       	mov	r20, r28
    e622:	6e 2d       	mov	r22, r14
    e624:	86 e0       	ldi	r24, 0x06	; 6
    e626:	0e 94 c5 52 	call	0xa58a	; 0xa58a <LBMoveSprite>
			ship_y += ship_increment;
    e62a:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    e62c:	99 f4       	brne	.+38     	; 0xe654 <update_level+0x214>
			{
				clear_sprites(6, 8);
    e62e:	68 e0       	ldi	r22, 0x08	; 8
    e630:	86 e0       	ldi	r24, 0x06	; 6
    e632:	0e 94 d0 68 	call	0xd1a0	; 0xd1a0 <clear_sprites>
				LBRotateSprites();
    e636:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    e63a:	64 e6       	ldi	r22, 0x64	; 100
    e63c:	70 e0       	ldi	r23, 0x00	; 0
    e63e:	8a e7       	ldi	r24, 0x7A	; 122
    e640:	9b e0       	ldi	r25, 0x0B	; 11
    e642:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    e646:	80 91 cf 0d 	lds	r24, 0x0DCF
    e64a:	00 e0       	ldi	r16, 0x00	; 0
    e64c:	23 e0       	ldi	r18, 0x03	; 3
    e64e:	4a e1       	ldi	r20, 0x1A	; 26
    e650:	6f ef       	ldi	r22, 0xFF	; 255
    e652:	1c c0       	rjmp	.+56     	; 0xe68c <update_level+0x24c>
				break;
			}
			LBRotateSprites();
    e654:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
		}
    e658:	c8 cf       	rjmp	.-112    	; 0xe5ea <update_level+0x1aa>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    e65a:	80 91 cf 0d 	lds	r24, 0x0DCF
    e65e:	89 30       	cpi	r24, 0x09	; 9
    e660:	49 f4       	brne	.+18     	; 0xe674 <update_level+0x234>
			tally_score((char*) strLevelClear, 500);
    e662:	64 ef       	ldi	r22, 0xF4	; 244
    e664:	71 e0       	ldi	r23, 0x01	; 1
    e666:	8a e7       	ldi	r24, 0x7A	; 122
    e668:	9b e0       	ldi	r25, 0x0B	; 11
    e66a:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <tally_score>
			congratulations();
    e66e:	0e 94 02 69 	call	0xd204	; 0xd204 <congratulations>
    e672:	2e c0       	rjmp	.+92     	; 0xe6d0 <update_level+0x290>
			exit_game();
			return 1;
		} else {
			tally_score((char*) strLevelClear, 100);
    e674:	64 e6       	ldi	r22, 0x64	; 100
    e676:	70 e0       	ldi	r23, 0x00	; 0
    e678:	8a e7       	ldi	r24, 0x7A	; 122
    e67a:	9b e0       	ldi	r25, 0x0B	; 11
    e67c:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    e680:	80 91 cf 0d 	lds	r24, 0x0DCF
    e684:	07 ec       	ldi	r16, 0xC7	; 199
    e686:	2d ef       	ldi	r18, 0xFD	; 253
    e688:	4c e1       	ldi	r20, 0x1C	; 28
    e68a:	61 e0       	ldi	r22, 0x01	; 1
    e68c:	8f 5f       	subi	r24, 0xFF	; 255
    e68e:	0e 94 f3 6a 	call	0xd5e6	; 0xd5e6 <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    e692:	80 91 d3 0d 	lds	r24, 0x0DD3
    e696:	82 30       	cpi	r24, 0x02	; 2
    e698:	11 f0       	breq	.+4      	; 0xe69e <update_level+0x25e>
			demo_counter = 0;
			exit_game();
			return 1;
		}
	}
	return 0;
    e69a:	80 e0       	ldi	r24, 0x00	; 0
    e69c:	1c c0       	rjmp	.+56     	; 0xe6d6 <update_level+0x296>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    e69e:	80 91 fa 0c 	lds	r24, 0x0CFA
    e6a2:	90 91 fb 0c 	lds	r25, 0x0CFB
    e6a6:	01 96       	adiw	r24, 0x01	; 1
    e6a8:	90 93 fb 0c 	sts	0x0CFB, r25
    e6ac:	80 93 fa 0c 	sts	0x0CFA, r24
		if (ReadJoypad(0) || (demo_counter >= DEMO_LENGTH))
    e6b0:	80 e0       	ldi	r24, 0x00	; 0
    e6b2:	0e 94 cb 41 	call	0x8396	; 0x8396 <ReadJoypad>
    e6b6:	89 2b       	or	r24, r25
    e6b8:	39 f4       	brne	.+14     	; 0xe6c8 <update_level+0x288>
    e6ba:	80 91 fa 0c 	lds	r24, 0x0CFA
    e6be:	90 91 fb 0c 	lds	r25, 0x0CFB
    e6c2:	84 38       	cpi	r24, 0x84	; 132
    e6c4:	93 40       	sbci	r25, 0x03	; 3
    e6c6:	48 f3       	brcs	.-46     	; 0xe69a <update_level+0x25a>
		{
			demo_counter = 0;
    e6c8:	10 92 fb 0c 	sts	0x0CFB, r1
    e6cc:	10 92 fa 0c 	sts	0x0CFA, r1
			exit_game();
    e6d0:	0e 94 06 6d 	call	0xda0c	; 0xda0c <exit_game>
			return 1;
    e6d4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
	
}
    e6d6:	df 91       	pop	r29
    e6d8:	cf 91       	pop	r28
    e6da:	0f 91       	pop	r16
    e6dc:	ff 90       	pop	r15
    e6de:	ef 90       	pop	r14
    e6e0:	df 90       	pop	r13
    e6e2:	cf 90       	pop	r12
    e6e4:	08 95       	ret

0000e6e6 <update_pause>:
	}
	high_score_counter++;
}

void update_pause()
{
    e6e6:	ef 92       	push	r14
    e6e8:	ff 92       	push	r15
    e6ea:	0f 93       	push	r16
    e6ec:	1f 93       	push	r17
    e6ee:	cf 93       	push	r28
    e6f0:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    e6f2:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    e6f6:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    e6fa:	80 91 4d 0e 	lds	r24, 0x0E4D
    e6fe:	83 ff       	sbrs	r24, 3
    e700:	63 c0       	rjmp	.+198    	; 0xe7c8 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e702:	06 95       	lsr	r16
    e704:	06 95       	lsr	r16
    e706:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e708:	10 e0       	ldi	r17, 0x00	; 0
	high_score_counter++;
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    e70a:	c6 95       	lsr	r28
    e70c:	c6 95       	lsr	r28
    e70e:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e710:	d0 e0       	ldi	r29, 0x00	; 0
    e712:	c8 01       	movw	r24, r16
    e714:	06 96       	adiw	r24, 0x06	; 6
    e716:	2e e1       	ldi	r18, 0x1E	; 30
    e718:	e2 2e       	mov	r14, r18
    e71a:	f1 2c       	mov	r15, r1
    e71c:	b7 01       	movw	r22, r14
    e71e:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    e722:	9e 01       	movw	r18, r28
    e724:	28 5f       	subi	r18, 0xF8	; 248
    e726:	3f 4f       	sbci	r19, 0xFF	; 255
    e728:	48 ec       	ldi	r20, 0xC8	; 200
    e72a:	50 e6       	ldi	r21, 0x60	; 96
    e72c:	68 2f       	mov	r22, r24
    e72e:	82 2f       	mov	r24, r18
    e730:	8f 71       	andi	r24, 0x1F	; 31
    e732:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    e736:	c8 01       	movw	r24, r16
    e738:	09 96       	adiw	r24, 0x09	; 9
    e73a:	b7 01       	movw	r22, r14
    e73c:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    e740:	9e 01       	movw	r18, r28
    e742:	23 5f       	subi	r18, 0xF3	; 243
    e744:	3f 4f       	sbci	r19, 0xFF	; 255
    e746:	46 e8       	ldi	r20, 0x86	; 134
    e748:	5b e0       	ldi	r21, 0x0B	; 11
    e74a:	68 2f       	mov	r22, r24
    e74c:	82 2f       	mov	r24, r18
    e74e:	8f 71       	andi	r24, 0x1F	; 31
    e750:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    e754:	c8 01       	movw	r24, r16
    e756:	0c 96       	adiw	r24, 0x0c	; 12
    e758:	b7 01       	movw	r22, r14
    e75a:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    e75e:	2a 96       	adiw	r28, 0x0a	; 10
    e760:	4c e8       	ldi	r20, 0x8C	; 140
    e762:	5b e0       	ldi	r21, 0x0B	; 11
    e764:	68 2f       	mov	r22, r24
    e766:	8c 2f       	mov	r24, r28
    e768:	8f 71       	andi	r24, 0x1F	; 31
    e76a:	0e 94 9e 51 	call	0xa33c	; 0xa33c <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    e76e:	64 e1       	ldi	r22, 0x14	; 20
    e770:	80 e0       	ldi	r24, 0x00	; 0
    e772:	0e 94 26 6a 	call	0xd44c	; 0xd44c <hide_sprites>
		LBRotateSprites();
    e776:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    e77a:	81 e0       	ldi	r24, 0x01	; 1
    e77c:	90 e0       	ldi	r25, 0x00	; 0
    e77e:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    e782:	60 e0       	ldi	r22, 0x00	; 0
    e784:	8d e4       	ldi	r24, 0x4D	; 77
    e786:	9e e0       	ldi	r25, 0x0E	; 14
    e788:	0e 94 33 51 	call	0xa266	; 0xa266 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    e78c:	80 91 4d 0e 	lds	r24, 0x0E4D
    e790:	90 91 4e 0e 	lds	r25, 0x0E4E
    e794:	83 ff       	sbrs	r24, 3
    e796:	08 c0       	rjmp	.+16     	; 0xe7a8 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    e798:	df 91       	pop	r29
    e79a:	cf 91       	pop	r28
    e79c:	1f 91       	pop	r17
    e79e:	0f 91       	pop	r16
    e7a0:	ff 90       	pop	r15
    e7a2:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    e7a4:	0c 94 25 5c 	jmp	0xb84a	; 0xb84a <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    e7a8:	91 ff       	sbrs	r25, 1
    e7aa:	e7 cf       	rjmp	.-50     	; 0xe77a <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    e7ac:	60 e0       	ldi	r22, 0x00	; 0
    e7ae:	70 e0       	ldi	r23, 0x00	; 0
    e7b0:	8a e6       	ldi	r24, 0x6A	; 106
    e7b2:	9b e0       	ldi	r25, 0x0B	; 11
    e7b4:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    e7b8:	df 91       	pop	r29
    e7ba:	cf 91       	pop	r28
    e7bc:	1f 91       	pop	r17
    e7be:	0f 91       	pop	r16
    e7c0:	ff 90       	pop	r15
    e7c2:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    e7c4:	0c 94 06 6d 	jmp	0xda0c	; 0xda0c <exit_game>
				break;
			}
		}
	}
}
    e7c8:	df 91       	pop	r29
    e7ca:	cf 91       	pop	r28
    e7cc:	1f 91       	pop	r17
    e7ce:	0f 91       	pop	r16
    e7d0:	ff 90       	pop	r15
    e7d2:	ef 90       	pop	r14
    e7d4:	08 95       	ret

0000e7d6 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    e7d6:	cf 92       	push	r12
    e7d8:	df 92       	push	r13
    e7da:	ff 92       	push	r15
    e7dc:	0f 93       	push	r16
    e7de:	1f 93       	push	r17
    e7e0:	cf 93       	push	r28
    e7e2:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e7e4:	20 91 cf 0d 	lds	r18, 0x0DCF
    e7e8:	f2 2e       	mov	r15, r18
    e7ea:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e7ec:	ef ea       	ldi	r30, 0xAF	; 175
    e7ee:	fc e0       	ldi	r31, 0x0C	; 12
    e7f0:	84 81       	ldd	r24, Z+4	; 0x04
    e7f2:	86 95       	lsr	r24
    e7f4:	86 95       	lsr	r24
    e7f6:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e7f8:	08 2f       	mov	r16, r24
    e7fa:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e7fc:	c3 81       	ldd	r28, Z+3	; 0x03
    e7fe:	c6 95       	lsr	r28
    e800:	c6 95       	lsr	r28
    e802:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e804:	d0 e0       	ldi	r29, 0x00	; 0
    e806:	c8 01       	movw	r24, r16
    e808:	06 96       	adiw	r24, 0x06	; 6
    e80a:	2e e1       	ldi	r18, 0x1E	; 30
    e80c:	c2 2e       	mov	r12, r18
    e80e:	d1 2c       	mov	r13, r1
    e810:	b6 01       	movw	r22, r12
    e812:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    e816:	9e 01       	movw	r18, r28
    e818:	29 5f       	subi	r18, 0xF9	; 249
    e81a:	3f 4f       	sbci	r19, 0xFF	; 255
    e81c:	46 e6       	ldi	r20, 0x66	; 102
    e81e:	50 e6       	ldi	r21, 0x60	; 96
    e820:	68 2f       	mov	r22, r24
    e822:	82 2f       	mov	r24, r18
    e824:	8f 71       	andi	r24, 0x1F	; 31
    e826:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e82a:	c8 01       	movw	r24, r16
    e82c:	09 96       	adiw	r24, 0x09	; 9
    e82e:	b6 01       	movw	r22, r12
    e830:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <__divmodhi4>
    e834:	be 01       	movw	r22, r28
    e836:	68 5f       	subi	r22, 0xF8	; 248
    e838:	7f 4f       	sbci	r23, 0xFF	; 255
    e83a:	6f 71       	andi	r22, 0x1F	; 31
    e83c:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e83e:	93 e2       	ldi	r25, 0x23	; 35
    e840:	f9 9e       	mul	r15, r25
    e842:	90 01       	movw	r18, r0
    e844:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e846:	48 2f       	mov	r20, r24
    e848:	c9 01       	movw	r24, r18
    e84a:	8b 5a       	subi	r24, 0xAB	; 171
    e84c:	96 4f       	sbci	r25, 0xF6	; 246
    e84e:	0e 94 4c 6a 	call	0xd498	; 0xd498 <stream_text_anywhere>
	LBWaitSeconds(3);
    e852:	83 e0       	ldi	r24, 0x03	; 3
    e854:	0e 94 64 52 	call	0xa4c8	; 0xa4c8 <LBWaitSeconds>
	game.boss.active = 1;
    e858:	81 e0       	ldi	r24, 0x01	; 1
    e85a:	80 93 61 0e 	sts	0x0E61, r24
	render_camera_view();
}
    e85e:	df 91       	pop	r29
    e860:	cf 91       	pop	r28
    e862:	1f 91       	pop	r17
    e864:	0f 91       	pop	r16
    e866:	ff 90       	pop	r15
    e868:	df 90       	pop	r13
    e86a:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e86c:	0c 94 25 5c 	jmp	0xb84a	; 0xb84a <render_camera_view>

0000e870 <update_player_ai>:
}

void update_player_ai(Player* player) 
{
    e870:	cf 93       	push	r28
    e872:	df 93       	push	r29
    e874:	ec 01       	movw	r28, r24
	 static s8 last_shield_value;
	 
	 if (player->ai_flags == AI_NOT_READY)
    e876:	89 85       	ldd	r24, Y+9	; 0x09
    e878:	81 11       	cpse	r24, r1
    e87a:	0a c0       	rjmp	.+20     	; 0xe890 <update_player_ai+0x20>
	 {
		 player->controls.held = BTN_LEFT;
    e87c:	80 e4       	ldi	r24, 0x40	; 64
    e87e:	90 e0       	ldi	r25, 0x00	; 0
    e880:	fe 01       	movw	r30, r28
    e882:	e8 58       	subi	r30, 0x88	; 136
    e884:	ff 4f       	sbci	r31, 0xFF	; 255
    e886:	91 83       	std	Z+1, r25	; 0x01
    e888:	80 83       	st	Z, r24
		 player->ai_flags = AI_READY;
    e88a:	81 e0       	ldi	r24, 0x01	; 1
    e88c:	89 87       	std	Y+9, r24	; 0x09
    e88e:	55 c0       	rjmp	.+170    	; 0xe93a <update_player_ai+0xca>
	 }
	 else if (player->ai_flags & AI_READY)
    e890:	80 ff       	sbrs	r24, 0
    e892:	1f c0       	rjmp	.+62     	; 0xe8d2 <update_player_ai+0x62>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e894:	fe 01       	movw	r30, r28
    e896:	ec 58       	subi	r30, 0x8C	; 140
    e898:	ff 4f       	sbci	r31, 0xFF	; 255
    e89a:	15 82       	std	Z+5, r1	; 0x05
    e89c:	14 82       	std	Z+4, r1	; 0x04
	p->pressed = 0;
    e89e:	11 82       	std	Z+1, r1	; 0x01
    e8a0:	10 82       	st	Z, r1
	p->released = 0;
    e8a2:	13 82       	std	Z+3, r1	; 0x03
    e8a4:	12 82       	std	Z+2, r1	; 0x02
	p->held_cycles = 0;
    e8a6:	16 82       	std	Z+6, r1	; 0x06
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    e8a8:	80 91 ba 0d 	lds	r24, 0x0DBA
    e8ac:	90 91 bb 0d 	lds	r25, 0x0DBB
    e8b0:	23 e0       	ldi	r18, 0x03	; 3
    e8b2:	96 95       	lsr	r25
    e8b4:	87 95       	ror	r24
    e8b6:	2a 95       	dec	r18
    e8b8:	e1 f7       	brne	.-8      	; 0xe8b2 <update_player_ai+0x42>
    e8ba:	4c 96       	adiw	r24, 0x1c	; 28
    e8bc:	20 91 c9 0d 	lds	r18, 0x0DC9
    e8c0:	30 e0       	ldi	r19, 0x00	; 0
    e8c2:	82 17       	cp	r24, r18
    e8c4:	93 07       	cpc	r25, r19
    e8c6:	c8 f1       	brcs	.+114    	; 0xe93a <update_player_ai+0xca>
		 {
			 challenge();
    e8c8:	0e 94 eb 73 	call	0xe7d6	; 0xe7d6 <challenge>
			 player->ai_flags = AI_WALKING;
    e8cc:	82 e0       	ldi	r24, 0x02	; 2
    e8ce:	89 87       	std	Y+9, r24	; 0x09
    e8d0:	2d c0       	rjmp	.+90     	; 0xe92c <update_player_ai+0xbc>
			 player->controls.held = BTN_LEFT;
		 }
	 }
	 else if (player->ai_flags & AI_WALKING) 
    e8d2:	81 ff       	sbrs	r24, 1
    e8d4:	32 c0       	rjmp	.+100    	; 0xe93a <update_player_ai+0xca>
	 {
		 player->controls.pressed = 0;
    e8d6:	fe 01       	movw	r30, r28
    e8d8:	ec 58       	subi	r30, 0x8C	; 140
    e8da:	ff 4f       	sbci	r31, 0xFF	; 255
    e8dc:	11 82       	std	Z+1, r1	; 0x01
    e8de:	10 82       	st	Z, r1
		 if (game.frame_counter % 15 == 0)
    e8e0:	80 91 d4 0d 	lds	r24, 0x0DD4
    e8e4:	6f e0       	ldi	r22, 0x0F	; 15
    e8e6:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    e8ea:	91 11       	cpse	r25, r1
    e8ec:	04 c0       	rjmp	.+8      	; 0xe8f6 <update_player_ai+0x86>
		 {
			 player->controls.pressed = BTN_A;
    e8ee:	80 e0       	ldi	r24, 0x00	; 0
    e8f0:	91 e0       	ldi	r25, 0x01	; 1
    e8f2:	91 83       	std	Z+1, r25	; 0x01
    e8f4:	80 83       	st	Z, r24
		 }
		 if (last_shield_value > player->shield)
    e8f6:	90 91 f4 0c 	lds	r25, 0x0CF4
    e8fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    e8fc:	89 17       	cp	r24, r25
    e8fe:	2c f4       	brge	.+10     	; 0xe90a <update_player_ai+0x9a>
		 {
			 player->controls.pressed |= BTN_B;
    e900:	80 81       	ld	r24, Z
    e902:	91 81       	ldd	r25, Z+1	; 0x01
    e904:	81 60       	ori	r24, 0x01	; 1
    e906:	91 83       	std	Z+1, r25	; 0x01
    e908:	80 83       	st	Z, r24
		 }
		 if (player->shared.x <= game.camera_x)
    e90a:	28 81       	ld	r18, Y
    e90c:	39 81       	ldd	r19, Y+1	; 0x01
    e90e:	80 91 ba 0d 	lds	r24, 0x0DBA
    e912:	90 91 bb 0d 	lds	r25, 0x0DBB
    e916:	82 17       	cp	r24, r18
    e918:	93 07       	cpc	r25, r19
    e91a:	18 f0       	brcs	.+6      	; 0xe922 <update_player_ai+0xb2>
		 {
			 player->controls.held = BTN_RIGHT;
    e91c:	80 e8       	ldi	r24, 0x80	; 128
    e91e:	90 e0       	ldi	r25, 0x00	; 0
    e920:	07 c0       	rjmp	.+14     	; 0xe930 <update_player_ai+0xc0>
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    e922:	80 53       	subi	r24, 0x30	; 48
    e924:	9f 4f       	sbci	r25, 0xFF	; 255
    e926:	28 17       	cp	r18, r24
    e928:	39 07       	cpc	r19, r25
    e92a:	38 f0       	brcs	.+14     	; 0xe93a <update_player_ai+0xca>
		 {
			 player->controls.held = BTN_LEFT;
    e92c:	80 e4       	ldi	r24, 0x40	; 64
    e92e:	90 e0       	ldi	r25, 0x00	; 0
    e930:	fe 01       	movw	r30, r28
    e932:	e8 58       	subi	r30, 0x88	; 136
    e934:	ff 4f       	sbci	r31, 0xFF	; 255
    e936:	91 83       	std	Z+1, r25	; 0x01
    e938:	80 83       	st	Z, r24
		 }
	 }
	 last_shield_value = player->shield;
    e93a:	8f 85       	ldd	r24, Y+15	; 0x0f
    e93c:	80 93 f4 0c 	sts	0x0CF4, r24
}
    e940:	df 91       	pop	r29
    e942:	cf 91       	pop	r28
    e944:	08 95       	ret

0000e946 <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e946:	0e 94 19 42 	call	0x8432	; 0x8432 <GetTrueRandomSeed>
    e94a:	0e 94 99 43 	call	0x8732	; 0x8732 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e94e:	8a e5       	ldi	r24, 0x5A	; 90
    e950:	9d e1       	ldi	r25, 0x1D	; 29
    e952:	0e 94 73 44 	call	0x88e6	; 0x88e6 <InitMusicPlayer>
	ClearVram();
    e956:	0e 94 a1 41 	call	0x8342	; 0x8342 <ClearVram>
	SetMasterVolume(0x05);
    e95a:	85 e0       	ldi	r24, 0x05	; 5
    e95c:	0e 94 2b 48 	call	0x9056	; 0x9056 <SetMasterVolume>
	SetTileTable(tiles_data);
    e960:	85 e4       	ldi	r24, 0x45	; 69
    e962:	98 e3       	ldi	r25, 0x38	; 56
    e964:	0e 94 bc 41 	call	0x8378	; 0x8378 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e968:	89 ed       	ldi	r24, 0xD9	; 217
    e96a:	9e e1       	ldi	r25, 0x1E	; 30
    e96c:	0e 94 9c 41 	call	0x8338	; 0x8338 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e970:	85 e0       	ldi	r24, 0x05	; 5
    e972:	90 e6       	ldi	r25, 0x60	; 96
    e974:	90 93 8d 0d 	sts	0x0D8D, r25
    e978:	80 93 8c 0d 	sts	0x0D8C, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e97c:	0e 94 3b 53 	call	0xa676	; 0xa676 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_splash();
    e980:	0e 94 c1 6b 	call	0xd782	; 0xd782 <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    e984:	81 e0       	ldi	r24, 0x01	; 1
    e986:	90 e0       	ldi	r25, 0x00	; 0
    e988:	0e 94 45 50 	call	0xa08a	; 0xa08a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e98c:	60 e0       	ldi	r22, 0x00	; 0
    e98e:	8d e4       	ldi	r24, 0x4D	; 77
    e990:	9e e0       	ldi	r25, 0x0E	; 14
    e992:	0e 94 33 51 	call	0xa266	; 0xa266 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e996:	80 91 ce 0d 	lds	r24, 0x0DCE
    e99a:	82 30       	cpi	r24, 0x02	; 2
    e99c:	09 f0       	breq	.+2      	; 0xe9a0 <main+0x5a>
    e99e:	52 c0       	rjmp	.+164    	; 0xea44 <main+0xfe>
		{
			if (update_level()) continue;
    e9a0:	0e 94 20 72 	call	0xe440	; 0xe440 <update_level>
    e9a4:	81 11       	cpse	r24, r1
    e9a6:	ee cf       	rjmp	.-36     	; 0xe984 <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    e9a8:	60 e0       	ldi	r22, 0x00	; 0
    e9aa:	89 ed       	ldi	r24, 0xD9	; 217
    e9ac:	9d e0       	ldi	r25, 0x0D	; 13
    e9ae:	0e 94 f0 6f 	call	0xdfe0	; 0xdfe0 <update_player>
    e9b2:	88 23       	and	r24, r24
    e9b4:	e9 f0       	breq	.+58     	; 0xe9f0 <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e9b6:	66 e0       	ldi	r22, 0x06	; 6
    e9b8:	89 ed       	ldi	r24, 0xD9	; 217
    e9ba:	9d e0       	ldi	r25, 0x0D	; 13
    e9bc:	0e 94 bf 5e 	call	0xbd7e	; 0xbd7e <update_shot>
				update_enemies();
    e9c0:	0e 94 8a 65 	call	0xcb14	; 0xcb14 <update_enemies>
				update_enemy_shots();
    e9c4:	0e 94 f7 65 	call	0xcbee	; 0xcbee <update_enemy_shots>
				animate_enemies();
    e9c8:	0e 94 97 66 	call	0xcd2e	; 0xcd2e <animate_enemies>
				animate_enemy_shots();
    e9cc:	0e 94 a3 67 	call	0xcf46	; 0xcf46 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e9d0:	40 e0       	ldi	r20, 0x00	; 0
    e9d2:	64 e5       	ldi	r22, 0x54	; 84
    e9d4:	7e e0       	ldi	r23, 0x0E	; 14
    e9d6:	89 ed       	ldi	r24, 0xD9	; 217
    e9d8:	9d e0       	ldi	r25, 0x0D	; 13
    e9da:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e9de:	46 e0       	ldi	r20, 0x06	; 6
    e9e0:	64 e5       	ldi	r22, 0x54	; 84
    e9e2:	7e e0       	ldi	r23, 0x0E	; 14
    e9e4:	89 ed       	ldi	r24, 0xD9	; 217
    e9e6:	9d e0       	ldi	r25, 0x0D	; 13
    e9e8:	0e 94 32 62 	call	0xc464	; 0xc464 <animate_shot>
				update_pause();
    e9ec:	0e 94 73 73 	call	0xe6e6	; 0xe6e6 <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e9f0:	0e 94 37 53 	call	0xa66e	; 0xa66e <is_space>
    e9f4:	81 11       	cpse	r24, r1
    e9f6:	2f c0       	rjmp	.+94     	; 0xea56 <main+0x110>
    e9f8:	80 91 ba 0d 	lds	r24, 0x0DBA
    e9fc:	90 91 bb 0d 	lds	r25, 0x0DBB
    ea00:	88 3f       	cpi	r24, 0xF8	; 248
    ea02:	96 40       	sbci	r25, 0x06	; 6
    ea04:	40 f1       	brcs	.+80     	; 0xea56 <main+0x110>
    ea06:	69 e0       	ldi	r22, 0x09	; 9
    ea08:	84 e5       	ldi	r24, 0x54	; 84
    ea0a:	9e e0       	ldi	r25, 0x0E	; 14
    ea0c:	0e 94 f0 6f 	call	0xdfe0	; 0xdfe0 <update_player>
    ea10:	88 23       	and	r24, r24
    ea12:	09 f1       	breq	.+66     	; 0xea56 <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    ea14:	6f e0       	ldi	r22, 0x0F	; 15
    ea16:	84 e5       	ldi	r24, 0x54	; 84
    ea18:	9e e0       	ldi	r25, 0x0E	; 14
    ea1a:	0e 94 bf 5e 	call	0xbd7e	; 0xbd7e <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    ea1e:	49 e0       	ldi	r20, 0x09	; 9
    ea20:	69 ed       	ldi	r22, 0xD9	; 217
    ea22:	7d e0       	ldi	r23, 0x0D	; 13
    ea24:	84 e5       	ldi	r24, 0x54	; 84
    ea26:	9e e0       	ldi	r25, 0x0E	; 14
    ea28:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    ea2c:	4f e0       	ldi	r20, 0x0F	; 15
    ea2e:	69 ed       	ldi	r22, 0xD9	; 217
    ea30:	7d e0       	ldi	r23, 0x0D	; 13
    ea32:	84 e5       	ldi	r24, 0x54	; 84
    ea34:	9e e0       	ldi	r25, 0x0E	; 14
    ea36:	0e 94 32 62 	call	0xc464	; 0xc464 <animate_shot>
				update_player_ai(&game.boss);
    ea3a:	84 e5       	ldi	r24, 0x54	; 84
    ea3c:	9e e0       	ldi	r25, 0x0E	; 14
    ea3e:	0e 94 38 74 	call	0xe870	; 0xe870 <update_player_ai>
    ea42:	09 c0       	rjmp	.+18     	; 0xea56 <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    ea44:	81 11       	cpse	r24, r1
    ea46:	03 c0       	rjmp	.+6      	; 0xea4e <main+0x108>
		{
			update_splash();
    ea48:	0e 94 16 6d 	call	0xda2c	; 0xda2c <update_splash>
    ea4c:	04 c0       	rjmp	.+8      	; 0xea56 <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    ea4e:	81 30       	cpi	r24, 0x01	; 1
    ea50:	11 f4       	brne	.+4      	; 0xea56 <main+0x110>
		{
			update_high_scores();
    ea52:	0e 94 8b 6d 	call	0xdb16	; 0xdb16 <update_high_scores>
			
		}
		LBRotateSprites();
    ea56:	0e 94 03 53 	call	0xa606	; 0xa606 <LBRotateSprites>
    ea5a:	94 cf       	rjmp	.-216    	; 0xe984 <main+0x3e>

0000ea5c <__udivmodqi4>:
    ea5c:	99 1b       	sub	r25, r25
    ea5e:	79 e0       	ldi	r23, 0x09	; 9
    ea60:	04 c0       	rjmp	.+8      	; 0xea6a <__udivmodqi4_ep>

0000ea62 <__udivmodqi4_loop>:
    ea62:	99 1f       	adc	r25, r25
    ea64:	96 17       	cp	r25, r22
    ea66:	08 f0       	brcs	.+2      	; 0xea6a <__udivmodqi4_ep>
    ea68:	96 1b       	sub	r25, r22

0000ea6a <__udivmodqi4_ep>:
    ea6a:	88 1f       	adc	r24, r24
    ea6c:	7a 95       	dec	r23
    ea6e:	c9 f7       	brne	.-14     	; 0xea62 <__udivmodqi4_loop>
    ea70:	80 95       	com	r24
    ea72:	08 95       	ret

0000ea74 <__divmodqi4>:
    ea74:	87 fb       	bst	r24, 7
    ea76:	08 2e       	mov	r0, r24
    ea78:	06 26       	eor	r0, r22
    ea7a:	87 fd       	sbrc	r24, 7
    ea7c:	81 95       	neg	r24
    ea7e:	67 fd       	sbrc	r22, 7
    ea80:	61 95       	neg	r22
    ea82:	0e 94 2e 75 	call	0xea5c	; 0xea5c <__udivmodqi4>
    ea86:	0e f4       	brtc	.+2      	; 0xea8a <__divmodqi4_1>
    ea88:	91 95       	neg	r25

0000ea8a <__divmodqi4_1>:
    ea8a:	07 fc       	sbrc	r0, 7
    ea8c:	81 95       	neg	r24

0000ea8e <__divmodqi4_exit>:
    ea8e:	08 95       	ret

0000ea90 <__udivmodhi4>:
    ea90:	aa 1b       	sub	r26, r26
    ea92:	bb 1b       	sub	r27, r27
    ea94:	51 e1       	ldi	r21, 0x11	; 17
    ea96:	07 c0       	rjmp	.+14     	; 0xeaa6 <__udivmodhi4_ep>

0000ea98 <__udivmodhi4_loop>:
    ea98:	aa 1f       	adc	r26, r26
    ea9a:	bb 1f       	adc	r27, r27
    ea9c:	a6 17       	cp	r26, r22
    ea9e:	b7 07       	cpc	r27, r23
    eaa0:	10 f0       	brcs	.+4      	; 0xeaa6 <__udivmodhi4_ep>
    eaa2:	a6 1b       	sub	r26, r22
    eaa4:	b7 0b       	sbc	r27, r23

0000eaa6 <__udivmodhi4_ep>:
    eaa6:	88 1f       	adc	r24, r24
    eaa8:	99 1f       	adc	r25, r25
    eaaa:	5a 95       	dec	r21
    eaac:	a9 f7       	brne	.-22     	; 0xea98 <__udivmodhi4_loop>
    eaae:	80 95       	com	r24
    eab0:	90 95       	com	r25
    eab2:	bc 01       	movw	r22, r24
    eab4:	cd 01       	movw	r24, r26
    eab6:	08 95       	ret

0000eab8 <__divmodhi4>:
    eab8:	97 fb       	bst	r25, 7
    eaba:	07 2e       	mov	r0, r23
    eabc:	16 f4       	brtc	.+4      	; 0xeac2 <__divmodhi4+0xa>
    eabe:	00 94       	com	r0
    eac0:	07 d0       	rcall	.+14     	; 0xead0 <__divmodhi4_neg1>
    eac2:	77 fd       	sbrc	r23, 7
    eac4:	09 d0       	rcall	.+18     	; 0xead8 <__divmodhi4_neg2>
    eac6:	0e 94 48 75 	call	0xea90	; 0xea90 <__udivmodhi4>
    eaca:	07 fc       	sbrc	r0, 7
    eacc:	05 d0       	rcall	.+10     	; 0xead8 <__divmodhi4_neg2>
    eace:	3e f4       	brtc	.+14     	; 0xeade <__divmodhi4_exit>

0000ead0 <__divmodhi4_neg1>:
    ead0:	90 95       	com	r25
    ead2:	81 95       	neg	r24
    ead4:	9f 4f       	sbci	r25, 0xFF	; 255
    ead6:	08 95       	ret

0000ead8 <__divmodhi4_neg2>:
    ead8:	70 95       	com	r23
    eada:	61 95       	neg	r22
    eadc:	7f 4f       	sbci	r23, 0xFF	; 255

0000eade <__divmodhi4_exit>:
    eade:	08 95       	ret

0000eae0 <__tablejump2__>:
    eae0:	ee 0f       	add	r30, r30
    eae2:	ff 1f       	adc	r31, r31
    eae4:	05 90       	lpm	r0, Z+
    eae6:	f4 91       	lpm	r31, Z
    eae8:	e0 2d       	mov	r30, r0
    eaea:	09 94       	ijmp

0000eaec <__subsf3>:
    eaec:	50 58       	subi	r21, 0x80	; 128

0000eaee <__addsf3>:
    eaee:	bb 27       	eor	r27, r27
    eaf0:	aa 27       	eor	r26, r26
    eaf2:	0e d0       	rcall	.+28     	; 0xeb10 <__addsf3x>
    eaf4:	e5 c0       	rjmp	.+458    	; 0xecc0 <__fp_round>
    eaf6:	d6 d0       	rcall	.+428    	; 0xeca4 <__fp_pscA>
    eaf8:	30 f0       	brcs	.+12     	; 0xeb06 <__addsf3+0x18>
    eafa:	db d0       	rcall	.+438    	; 0xecb2 <__fp_pscB>
    eafc:	20 f0       	brcs	.+8      	; 0xeb06 <__addsf3+0x18>
    eafe:	31 f4       	brne	.+12     	; 0xeb0c <__addsf3+0x1e>
    eb00:	9f 3f       	cpi	r25, 0xFF	; 255
    eb02:	11 f4       	brne	.+4      	; 0xeb08 <__addsf3+0x1a>
    eb04:	1e f4       	brtc	.+6      	; 0xeb0c <__addsf3+0x1e>
    eb06:	cb c0       	rjmp	.+406    	; 0xec9e <__fp_nan>
    eb08:	0e f4       	brtc	.+2      	; 0xeb0c <__addsf3+0x1e>
    eb0a:	e0 95       	com	r30
    eb0c:	e7 fb       	bst	r30, 7
    eb0e:	c1 c0       	rjmp	.+386    	; 0xec92 <__fp_inf>

0000eb10 <__addsf3x>:
    eb10:	e9 2f       	mov	r30, r25
    eb12:	e7 d0       	rcall	.+462    	; 0xece2 <__fp_split3>
    eb14:	80 f3       	brcs	.-32     	; 0xeaf6 <__addsf3+0x8>
    eb16:	ba 17       	cp	r27, r26
    eb18:	62 07       	cpc	r22, r18
    eb1a:	73 07       	cpc	r23, r19
    eb1c:	84 07       	cpc	r24, r20
    eb1e:	95 07       	cpc	r25, r21
    eb20:	18 f0       	brcs	.+6      	; 0xeb28 <__addsf3x+0x18>
    eb22:	71 f4       	brne	.+28     	; 0xeb40 <__addsf3x+0x30>
    eb24:	9e f5       	brtc	.+102    	; 0xeb8c <__addsf3x+0x7c>
    eb26:	ff c0       	rjmp	.+510    	; 0xed26 <__fp_zero>
    eb28:	0e f4       	brtc	.+2      	; 0xeb2c <__addsf3x+0x1c>
    eb2a:	e0 95       	com	r30
    eb2c:	0b 2e       	mov	r0, r27
    eb2e:	ba 2f       	mov	r27, r26
    eb30:	a0 2d       	mov	r26, r0
    eb32:	0b 01       	movw	r0, r22
    eb34:	b9 01       	movw	r22, r18
    eb36:	90 01       	movw	r18, r0
    eb38:	0c 01       	movw	r0, r24
    eb3a:	ca 01       	movw	r24, r20
    eb3c:	a0 01       	movw	r20, r0
    eb3e:	11 24       	eor	r1, r1
    eb40:	ff 27       	eor	r31, r31
    eb42:	59 1b       	sub	r21, r25
    eb44:	99 f0       	breq	.+38     	; 0xeb6c <__addsf3x+0x5c>
    eb46:	59 3f       	cpi	r21, 0xF9	; 249
    eb48:	50 f4       	brcc	.+20     	; 0xeb5e <__addsf3x+0x4e>
    eb4a:	50 3e       	cpi	r21, 0xE0	; 224
    eb4c:	68 f1       	brcs	.+90     	; 0xeba8 <__addsf3x+0x98>
    eb4e:	1a 16       	cp	r1, r26
    eb50:	f0 40       	sbci	r31, 0x00	; 0
    eb52:	a2 2f       	mov	r26, r18
    eb54:	23 2f       	mov	r18, r19
    eb56:	34 2f       	mov	r19, r20
    eb58:	44 27       	eor	r20, r20
    eb5a:	58 5f       	subi	r21, 0xF8	; 248
    eb5c:	f3 cf       	rjmp	.-26     	; 0xeb44 <__addsf3x+0x34>
    eb5e:	46 95       	lsr	r20
    eb60:	37 95       	ror	r19
    eb62:	27 95       	ror	r18
    eb64:	a7 95       	ror	r26
    eb66:	f0 40       	sbci	r31, 0x00	; 0
    eb68:	53 95       	inc	r21
    eb6a:	c9 f7       	brne	.-14     	; 0xeb5e <__addsf3x+0x4e>
    eb6c:	7e f4       	brtc	.+30     	; 0xeb8c <__addsf3x+0x7c>
    eb6e:	1f 16       	cp	r1, r31
    eb70:	ba 0b       	sbc	r27, r26
    eb72:	62 0b       	sbc	r22, r18
    eb74:	73 0b       	sbc	r23, r19
    eb76:	84 0b       	sbc	r24, r20
    eb78:	ba f0       	brmi	.+46     	; 0xeba8 <__addsf3x+0x98>
    eb7a:	91 50       	subi	r25, 0x01	; 1
    eb7c:	a1 f0       	breq	.+40     	; 0xeba6 <__addsf3x+0x96>
    eb7e:	ff 0f       	add	r31, r31
    eb80:	bb 1f       	adc	r27, r27
    eb82:	66 1f       	adc	r22, r22
    eb84:	77 1f       	adc	r23, r23
    eb86:	88 1f       	adc	r24, r24
    eb88:	c2 f7       	brpl	.-16     	; 0xeb7a <__addsf3x+0x6a>
    eb8a:	0e c0       	rjmp	.+28     	; 0xeba8 <__addsf3x+0x98>
    eb8c:	ba 0f       	add	r27, r26
    eb8e:	62 1f       	adc	r22, r18
    eb90:	73 1f       	adc	r23, r19
    eb92:	84 1f       	adc	r24, r20
    eb94:	48 f4       	brcc	.+18     	; 0xeba8 <__addsf3x+0x98>
    eb96:	87 95       	ror	r24
    eb98:	77 95       	ror	r23
    eb9a:	67 95       	ror	r22
    eb9c:	b7 95       	ror	r27
    eb9e:	f7 95       	ror	r31
    eba0:	9e 3f       	cpi	r25, 0xFE	; 254
    eba2:	08 f0       	brcs	.+2      	; 0xeba6 <__addsf3x+0x96>
    eba4:	b3 cf       	rjmp	.-154    	; 0xeb0c <__addsf3+0x1e>
    eba6:	93 95       	inc	r25
    eba8:	88 0f       	add	r24, r24
    ebaa:	08 f0       	brcs	.+2      	; 0xebae <__addsf3x+0x9e>
    ebac:	99 27       	eor	r25, r25
    ebae:	ee 0f       	add	r30, r30
    ebb0:	97 95       	ror	r25
    ebb2:	87 95       	ror	r24
    ebb4:	08 95       	ret

0000ebb6 <__fixsfsi>:
    ebb6:	04 d0       	rcall	.+8      	; 0xebc0 <__fixunssfsi>
    ebb8:	68 94       	set
    ebba:	b1 11       	cpse	r27, r1
    ebbc:	b5 c0       	rjmp	.+362    	; 0xed28 <__fp_szero>
    ebbe:	08 95       	ret

0000ebc0 <__fixunssfsi>:
    ebc0:	98 d0       	rcall	.+304    	; 0xecf2 <__fp_splitA>
    ebc2:	88 f0       	brcs	.+34     	; 0xebe6 <__fixunssfsi+0x26>
    ebc4:	9f 57       	subi	r25, 0x7F	; 127
    ebc6:	90 f0       	brcs	.+36     	; 0xebec <__fixunssfsi+0x2c>
    ebc8:	b9 2f       	mov	r27, r25
    ebca:	99 27       	eor	r25, r25
    ebcc:	b7 51       	subi	r27, 0x17	; 23
    ebce:	a0 f0       	brcs	.+40     	; 0xebf8 <__fixunssfsi+0x38>
    ebd0:	d1 f0       	breq	.+52     	; 0xec06 <__fixunssfsi+0x46>
    ebd2:	66 0f       	add	r22, r22
    ebd4:	77 1f       	adc	r23, r23
    ebd6:	88 1f       	adc	r24, r24
    ebd8:	99 1f       	adc	r25, r25
    ebda:	1a f0       	brmi	.+6      	; 0xebe2 <__fixunssfsi+0x22>
    ebdc:	ba 95       	dec	r27
    ebde:	c9 f7       	brne	.-14     	; 0xebd2 <__fixunssfsi+0x12>
    ebe0:	12 c0       	rjmp	.+36     	; 0xec06 <__fixunssfsi+0x46>
    ebe2:	b1 30       	cpi	r27, 0x01	; 1
    ebe4:	81 f0       	breq	.+32     	; 0xec06 <__fixunssfsi+0x46>
    ebe6:	9f d0       	rcall	.+318    	; 0xed26 <__fp_zero>
    ebe8:	b1 e0       	ldi	r27, 0x01	; 1
    ebea:	08 95       	ret
    ebec:	9c c0       	rjmp	.+312    	; 0xed26 <__fp_zero>
    ebee:	67 2f       	mov	r22, r23
    ebf0:	78 2f       	mov	r23, r24
    ebf2:	88 27       	eor	r24, r24
    ebf4:	b8 5f       	subi	r27, 0xF8	; 248
    ebf6:	39 f0       	breq	.+14     	; 0xec06 <__fixunssfsi+0x46>
    ebf8:	b9 3f       	cpi	r27, 0xF9	; 249
    ebfa:	cc f3       	brlt	.-14     	; 0xebee <__fixunssfsi+0x2e>
    ebfc:	86 95       	lsr	r24
    ebfe:	77 95       	ror	r23
    ec00:	67 95       	ror	r22
    ec02:	b3 95       	inc	r27
    ec04:	d9 f7       	brne	.-10     	; 0xebfc <__fixunssfsi+0x3c>
    ec06:	3e f4       	brtc	.+14     	; 0xec16 <__fixunssfsi+0x56>
    ec08:	90 95       	com	r25
    ec0a:	80 95       	com	r24
    ec0c:	70 95       	com	r23
    ec0e:	61 95       	neg	r22
    ec10:	7f 4f       	sbci	r23, 0xFF	; 255
    ec12:	8f 4f       	sbci	r24, 0xFF	; 255
    ec14:	9f 4f       	sbci	r25, 0xFF	; 255
    ec16:	08 95       	ret

0000ec18 <__floatunsisf>:
    ec18:	e8 94       	clt
    ec1a:	09 c0       	rjmp	.+18     	; 0xec2e <__floatsisf+0x12>

0000ec1c <__floatsisf>:
    ec1c:	97 fb       	bst	r25, 7
    ec1e:	3e f4       	brtc	.+14     	; 0xec2e <__floatsisf+0x12>
    ec20:	90 95       	com	r25
    ec22:	80 95       	com	r24
    ec24:	70 95       	com	r23
    ec26:	61 95       	neg	r22
    ec28:	7f 4f       	sbci	r23, 0xFF	; 255
    ec2a:	8f 4f       	sbci	r24, 0xFF	; 255
    ec2c:	9f 4f       	sbci	r25, 0xFF	; 255
    ec2e:	99 23       	and	r25, r25
    ec30:	a9 f0       	breq	.+42     	; 0xec5c <__floatsisf+0x40>
    ec32:	f9 2f       	mov	r31, r25
    ec34:	96 e9       	ldi	r25, 0x96	; 150
    ec36:	bb 27       	eor	r27, r27
    ec38:	93 95       	inc	r25
    ec3a:	f6 95       	lsr	r31
    ec3c:	87 95       	ror	r24
    ec3e:	77 95       	ror	r23
    ec40:	67 95       	ror	r22
    ec42:	b7 95       	ror	r27
    ec44:	f1 11       	cpse	r31, r1
    ec46:	f8 cf       	rjmp	.-16     	; 0xec38 <__floatsisf+0x1c>
    ec48:	fa f4       	brpl	.+62     	; 0xec88 <__floatsisf+0x6c>
    ec4a:	bb 0f       	add	r27, r27
    ec4c:	11 f4       	brne	.+4      	; 0xec52 <__floatsisf+0x36>
    ec4e:	60 ff       	sbrs	r22, 0
    ec50:	1b c0       	rjmp	.+54     	; 0xec88 <__floatsisf+0x6c>
    ec52:	6f 5f       	subi	r22, 0xFF	; 255
    ec54:	7f 4f       	sbci	r23, 0xFF	; 255
    ec56:	8f 4f       	sbci	r24, 0xFF	; 255
    ec58:	9f 4f       	sbci	r25, 0xFF	; 255
    ec5a:	16 c0       	rjmp	.+44     	; 0xec88 <__floatsisf+0x6c>
    ec5c:	88 23       	and	r24, r24
    ec5e:	11 f0       	breq	.+4      	; 0xec64 <__floatsisf+0x48>
    ec60:	96 e9       	ldi	r25, 0x96	; 150
    ec62:	11 c0       	rjmp	.+34     	; 0xec86 <__floatsisf+0x6a>
    ec64:	77 23       	and	r23, r23
    ec66:	21 f0       	breq	.+8      	; 0xec70 <__floatsisf+0x54>
    ec68:	9e e8       	ldi	r25, 0x8E	; 142
    ec6a:	87 2f       	mov	r24, r23
    ec6c:	76 2f       	mov	r23, r22
    ec6e:	05 c0       	rjmp	.+10     	; 0xec7a <__floatsisf+0x5e>
    ec70:	66 23       	and	r22, r22
    ec72:	71 f0       	breq	.+28     	; 0xec90 <__floatsisf+0x74>
    ec74:	96 e8       	ldi	r25, 0x86	; 134
    ec76:	86 2f       	mov	r24, r22
    ec78:	70 e0       	ldi	r23, 0x00	; 0
    ec7a:	60 e0       	ldi	r22, 0x00	; 0
    ec7c:	2a f0       	brmi	.+10     	; 0xec88 <__floatsisf+0x6c>
    ec7e:	9a 95       	dec	r25
    ec80:	66 0f       	add	r22, r22
    ec82:	77 1f       	adc	r23, r23
    ec84:	88 1f       	adc	r24, r24
    ec86:	da f7       	brpl	.-10     	; 0xec7e <__floatsisf+0x62>
    ec88:	88 0f       	add	r24, r24
    ec8a:	96 95       	lsr	r25
    ec8c:	87 95       	ror	r24
    ec8e:	97 f9       	bld	r25, 7
    ec90:	08 95       	ret

0000ec92 <__fp_inf>:
    ec92:	97 f9       	bld	r25, 7
    ec94:	9f 67       	ori	r25, 0x7F	; 127
    ec96:	80 e8       	ldi	r24, 0x80	; 128
    ec98:	70 e0       	ldi	r23, 0x00	; 0
    ec9a:	60 e0       	ldi	r22, 0x00	; 0
    ec9c:	08 95       	ret

0000ec9e <__fp_nan>:
    ec9e:	9f ef       	ldi	r25, 0xFF	; 255
    eca0:	80 ec       	ldi	r24, 0xC0	; 192
    eca2:	08 95       	ret

0000eca4 <__fp_pscA>:
    eca4:	00 24       	eor	r0, r0
    eca6:	0a 94       	dec	r0
    eca8:	16 16       	cp	r1, r22
    ecaa:	17 06       	cpc	r1, r23
    ecac:	18 06       	cpc	r1, r24
    ecae:	09 06       	cpc	r0, r25
    ecb0:	08 95       	ret

0000ecb2 <__fp_pscB>:
    ecb2:	00 24       	eor	r0, r0
    ecb4:	0a 94       	dec	r0
    ecb6:	12 16       	cp	r1, r18
    ecb8:	13 06       	cpc	r1, r19
    ecba:	14 06       	cpc	r1, r20
    ecbc:	05 06       	cpc	r0, r21
    ecbe:	08 95       	ret

0000ecc0 <__fp_round>:
    ecc0:	09 2e       	mov	r0, r25
    ecc2:	03 94       	inc	r0
    ecc4:	00 0c       	add	r0, r0
    ecc6:	11 f4       	brne	.+4      	; 0xeccc <__fp_round+0xc>
    ecc8:	88 23       	and	r24, r24
    ecca:	52 f0       	brmi	.+20     	; 0xece0 <__fp_round+0x20>
    eccc:	bb 0f       	add	r27, r27
    ecce:	40 f4       	brcc	.+16     	; 0xece0 <__fp_round+0x20>
    ecd0:	bf 2b       	or	r27, r31
    ecd2:	11 f4       	brne	.+4      	; 0xecd8 <__fp_round+0x18>
    ecd4:	60 ff       	sbrs	r22, 0
    ecd6:	04 c0       	rjmp	.+8      	; 0xece0 <__fp_round+0x20>
    ecd8:	6f 5f       	subi	r22, 0xFF	; 255
    ecda:	7f 4f       	sbci	r23, 0xFF	; 255
    ecdc:	8f 4f       	sbci	r24, 0xFF	; 255
    ecde:	9f 4f       	sbci	r25, 0xFF	; 255
    ece0:	08 95       	ret

0000ece2 <__fp_split3>:
    ece2:	57 fd       	sbrc	r21, 7
    ece4:	90 58       	subi	r25, 0x80	; 128
    ece6:	44 0f       	add	r20, r20
    ece8:	55 1f       	adc	r21, r21
    ecea:	59 f0       	breq	.+22     	; 0xed02 <__fp_splitA+0x10>
    ecec:	5f 3f       	cpi	r21, 0xFF	; 255
    ecee:	71 f0       	breq	.+28     	; 0xed0c <__fp_splitA+0x1a>
    ecf0:	47 95       	ror	r20

0000ecf2 <__fp_splitA>:
    ecf2:	88 0f       	add	r24, r24
    ecf4:	97 fb       	bst	r25, 7
    ecf6:	99 1f       	adc	r25, r25
    ecf8:	61 f0       	breq	.+24     	; 0xed12 <__fp_splitA+0x20>
    ecfa:	9f 3f       	cpi	r25, 0xFF	; 255
    ecfc:	79 f0       	breq	.+30     	; 0xed1c <__fp_splitA+0x2a>
    ecfe:	87 95       	ror	r24
    ed00:	08 95       	ret
    ed02:	12 16       	cp	r1, r18
    ed04:	13 06       	cpc	r1, r19
    ed06:	14 06       	cpc	r1, r20
    ed08:	55 1f       	adc	r21, r21
    ed0a:	f2 cf       	rjmp	.-28     	; 0xecf0 <__fp_split3+0xe>
    ed0c:	46 95       	lsr	r20
    ed0e:	f1 df       	rcall	.-30     	; 0xecf2 <__fp_splitA>
    ed10:	08 c0       	rjmp	.+16     	; 0xed22 <__fp_splitA+0x30>
    ed12:	16 16       	cp	r1, r22
    ed14:	17 06       	cpc	r1, r23
    ed16:	18 06       	cpc	r1, r24
    ed18:	99 1f       	adc	r25, r25
    ed1a:	f1 cf       	rjmp	.-30     	; 0xecfe <__fp_splitA+0xc>
    ed1c:	86 95       	lsr	r24
    ed1e:	71 05       	cpc	r23, r1
    ed20:	61 05       	cpc	r22, r1
    ed22:	08 94       	sec
    ed24:	08 95       	ret

0000ed26 <__fp_zero>:
    ed26:	e8 94       	clt

0000ed28 <__fp_szero>:
    ed28:	bb 27       	eor	r27, r27
    ed2a:	66 27       	eor	r22, r22
    ed2c:	77 27       	eor	r23, r23
    ed2e:	cb 01       	movw	r24, r22
    ed30:	97 f9       	bld	r25, 7
    ed32:	08 95       	ret

0000ed34 <__mulsf3>:
    ed34:	0b d0       	rcall	.+22     	; 0xed4c <__mulsf3x>
    ed36:	c4 cf       	rjmp	.-120    	; 0xecc0 <__fp_round>
    ed38:	b5 df       	rcall	.-150    	; 0xeca4 <__fp_pscA>
    ed3a:	28 f0       	brcs	.+10     	; 0xed46 <__mulsf3+0x12>
    ed3c:	ba df       	rcall	.-140    	; 0xecb2 <__fp_pscB>
    ed3e:	18 f0       	brcs	.+6      	; 0xed46 <__mulsf3+0x12>
    ed40:	95 23       	and	r25, r21
    ed42:	09 f0       	breq	.+2      	; 0xed46 <__mulsf3+0x12>
    ed44:	a6 cf       	rjmp	.-180    	; 0xec92 <__fp_inf>
    ed46:	ab cf       	rjmp	.-170    	; 0xec9e <__fp_nan>
    ed48:	11 24       	eor	r1, r1
    ed4a:	ee cf       	rjmp	.-36     	; 0xed28 <__fp_szero>

0000ed4c <__mulsf3x>:
    ed4c:	ca df       	rcall	.-108    	; 0xece2 <__fp_split3>
    ed4e:	a0 f3       	brcs	.-24     	; 0xed38 <__mulsf3+0x4>

0000ed50 <__mulsf3_pse>:
    ed50:	95 9f       	mul	r25, r21
    ed52:	d1 f3       	breq	.-12     	; 0xed48 <__mulsf3+0x14>
    ed54:	95 0f       	add	r25, r21
    ed56:	50 e0       	ldi	r21, 0x00	; 0
    ed58:	55 1f       	adc	r21, r21
    ed5a:	62 9f       	mul	r22, r18
    ed5c:	f0 01       	movw	r30, r0
    ed5e:	72 9f       	mul	r23, r18
    ed60:	bb 27       	eor	r27, r27
    ed62:	f0 0d       	add	r31, r0
    ed64:	b1 1d       	adc	r27, r1
    ed66:	63 9f       	mul	r22, r19
    ed68:	aa 27       	eor	r26, r26
    ed6a:	f0 0d       	add	r31, r0
    ed6c:	b1 1d       	adc	r27, r1
    ed6e:	aa 1f       	adc	r26, r26
    ed70:	64 9f       	mul	r22, r20
    ed72:	66 27       	eor	r22, r22
    ed74:	b0 0d       	add	r27, r0
    ed76:	a1 1d       	adc	r26, r1
    ed78:	66 1f       	adc	r22, r22
    ed7a:	82 9f       	mul	r24, r18
    ed7c:	22 27       	eor	r18, r18
    ed7e:	b0 0d       	add	r27, r0
    ed80:	a1 1d       	adc	r26, r1
    ed82:	62 1f       	adc	r22, r18
    ed84:	73 9f       	mul	r23, r19
    ed86:	b0 0d       	add	r27, r0
    ed88:	a1 1d       	adc	r26, r1
    ed8a:	62 1f       	adc	r22, r18
    ed8c:	83 9f       	mul	r24, r19
    ed8e:	a0 0d       	add	r26, r0
    ed90:	61 1d       	adc	r22, r1
    ed92:	22 1f       	adc	r18, r18
    ed94:	74 9f       	mul	r23, r20
    ed96:	33 27       	eor	r19, r19
    ed98:	a0 0d       	add	r26, r0
    ed9a:	61 1d       	adc	r22, r1
    ed9c:	23 1f       	adc	r18, r19
    ed9e:	84 9f       	mul	r24, r20
    eda0:	60 0d       	add	r22, r0
    eda2:	21 1d       	adc	r18, r1
    eda4:	82 2f       	mov	r24, r18
    eda6:	76 2f       	mov	r23, r22
    eda8:	6a 2f       	mov	r22, r26
    edaa:	11 24       	eor	r1, r1
    edac:	9f 57       	subi	r25, 0x7F	; 127
    edae:	50 40       	sbci	r21, 0x00	; 0
    edb0:	8a f0       	brmi	.+34     	; 0xedd4 <__mulsf3_pse+0x84>
    edb2:	e1 f0       	breq	.+56     	; 0xedec <__mulsf3_pse+0x9c>
    edb4:	88 23       	and	r24, r24
    edb6:	4a f0       	brmi	.+18     	; 0xedca <__mulsf3_pse+0x7a>
    edb8:	ee 0f       	add	r30, r30
    edba:	ff 1f       	adc	r31, r31
    edbc:	bb 1f       	adc	r27, r27
    edbe:	66 1f       	adc	r22, r22
    edc0:	77 1f       	adc	r23, r23
    edc2:	88 1f       	adc	r24, r24
    edc4:	91 50       	subi	r25, 0x01	; 1
    edc6:	50 40       	sbci	r21, 0x00	; 0
    edc8:	a9 f7       	brne	.-22     	; 0xedb4 <__mulsf3_pse+0x64>
    edca:	9e 3f       	cpi	r25, 0xFE	; 254
    edcc:	51 05       	cpc	r21, r1
    edce:	70 f0       	brcs	.+28     	; 0xedec <__mulsf3_pse+0x9c>
    edd0:	60 cf       	rjmp	.-320    	; 0xec92 <__fp_inf>
    edd2:	aa cf       	rjmp	.-172    	; 0xed28 <__fp_szero>
    edd4:	5f 3f       	cpi	r21, 0xFF	; 255
    edd6:	ec f3       	brlt	.-6      	; 0xedd2 <__mulsf3_pse+0x82>
    edd8:	98 3e       	cpi	r25, 0xE8	; 232
    edda:	dc f3       	brlt	.-10     	; 0xedd2 <__mulsf3_pse+0x82>
    eddc:	86 95       	lsr	r24
    edde:	77 95       	ror	r23
    ede0:	67 95       	ror	r22
    ede2:	b7 95       	ror	r27
    ede4:	f7 95       	ror	r31
    ede6:	e7 95       	ror	r30
    ede8:	9f 5f       	subi	r25, 0xFF	; 255
    edea:	c1 f7       	brne	.-16     	; 0xeddc <__mulsf3_pse+0x8c>
    edec:	fe 2b       	or	r31, r30
    edee:	88 0f       	add	r24, r24
    edf0:	91 1d       	adc	r25, r1
    edf2:	96 95       	lsr	r25
    edf4:	87 95       	ror	r24
    edf6:	97 f9       	bld	r25, 7
    edf8:	08 95       	ret

0000edfa <strnlen_P>:
    edfa:	fc 01       	movw	r30, r24
    edfc:	05 90       	lpm	r0, Z+
    edfe:	61 50       	subi	r22, 0x01	; 1
    ee00:	70 40       	sbci	r23, 0x00	; 0
    ee02:	01 10       	cpse	r0, r1
    ee04:	d8 f7       	brcc	.-10     	; 0xedfc <strnlen_P+0x2>
    ee06:	80 95       	com	r24
    ee08:	90 95       	com	r25
    ee0a:	8e 0f       	add	r24, r30
    ee0c:	9f 1f       	adc	r25, r31
    ee0e:	08 95       	ret

0000ee10 <_exit>:
    ee10:	f8 94       	cli

0000ee12 <__stop_program>:
    ee12:	ff cf       	rjmp	.-2      	; 0xee12 <__stop_program>
