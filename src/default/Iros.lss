
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e80c  0000e90c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000e920  2**5
                  CONTENTS, READONLY
  2 .text         0000e80c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b41  00800510  00800510  0000e91c  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000ed20  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000f428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000f719  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000728  00000000  00000000  0000f730  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a8a8  00000000  00000000  0000fe58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001654  00000000  00000000  0001a700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000271d  00000000  00000000  0001bd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000016dc  00000000  00000000  0001e474  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001f60  00000000  00000000  0001fb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008dfe  00000000  00000000  00021ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008c0  00000000  00000000  0002a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 3b 	jmp	0x76f8	; 0x76f8 <__ctors_end>
       4:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
       8:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
       c:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      10:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      14:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      18:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      1c:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      20:	0c 94 5d 41 	jmp	0x82ba	; 0x82ba <__vector_8>
      24:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      28:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      2c:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      30:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      34:	0c 94 29 3f 	jmp	0x7e52	; 0x7e52 <__vector_13>
      38:	0c 94 69 3f 	jmp	0x7ed2	; 0x7ed2 <__vector_14>
      3c:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      40:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      44:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      48:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      4c:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      50:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      54:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      58:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      5c:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      60:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      64:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      68:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      6c:	0c 94 e5 3b 	jmp	0x77ca	; 0x77ca <__bad_interrupt>
      70:	34 66       	ori	r19, 0x64	; 100
      72:	40 66       	ori	r20, 0x60	; 96
      74:	37 66       	ori	r19, 0x67	; 103
      76:	40 66       	ori	r20, 0x60	; 96
      78:	3a 66       	ori	r19, 0x6A	; 106
      7a:	40 66       	ori	r20, 0x60	; 96
      7c:	3d 66       	ori	r19, 0x6D	; 109
      7e:	40 66       	ori	r20, 0x60	; 96
      80:	43 66       	ori	r20, 0x63	; 99
      82:	46 66       	ori	r20, 0x66	; 102

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	06 43 09 43 65 43 69 43 70 43 11 43 16 43 1b 43     .C.CeCiCpC.C.C.C
      e2:	78 43 1e 43 21 43 24 43 5f 43 62 43 88 43           xC.C!C$C_CbC.C

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strChallenge>:
     943:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     953:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     963:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     973:	4b 20 49 53 20 53 4f 20 59 4f 55 00 23 20 20 20     K IS SO YOU.#   
     983:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     993:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     9a3:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     9b3:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     9c3:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     9d3:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     9e3:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

000009f3 <strIntro>:
     9f3:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     a03:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     a13:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     a23:	00 41 4e 44 20 46 4c 45 57 20 54 4f 20 54 48 45     .AND FLEW TO THE
     a33:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 00     IR HOMEWORLDS...
     a43:	00 4a 45 52 4b 53 00 00 00 00 44 45 53 54 52 4f     .JERKS....DESTRO
     a53:	59 20 54 48 45 4d 20 41 4e 44 00 54 41 4b 45 20     Y THEM AND.TAKE 
     a63:	42 41 43 4b 20 59 4f 55 52 20 53 57 41 47 00 23     BACK YOUR SWAG.#
	...

00000a74 <default_scores>:
     a74:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     a84:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000a92 <strTally>:
     a92:	54 41 4c 4c 59 20 00                                TALLY .

00000a99 <strGameOver>:
     a99:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000aa3 <strLevelBonus>:
     aa3:	42 4f 4e 55 53 00                                   BONUS.

00000aa9 <strLevelClear>:
     aa9:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000ab5 <strPaused>:
     ab5:	50 41 55 53 45 00                                   PAUSE.

00000abb <strExitGame>:
     abb:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000ac7 <strMainMenu>:
     ac7:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000ad3 <strTime>:
     ad3:	54 49 4d 45 20 00                                   TIME .

00000ad9 <strLives>:
     ad9:	4c 49 56 45 53 20 00                                LIVES .

00000ae0 <strShield>:
     ae0:	53 48 49 45 4c 44 20 00                             SHIELD .

00000ae8 <strScore>:
     ae8:	53 43 4f 52 45 20 00                                SCORE .

00000aef <strSelectHandle>:
	...

00000af0 <strHighScores>:
     af0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000afc <str1Player>:
     afc:	53 54 41 52 54 00                                   START.

00000b02 <strCopyright>:
     b02:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     b12:	4f 4f 4b 53 00                                      OOKS.

00000b17 <spacesong>:
     b17:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b27:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     b37:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     b47:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     b57:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     b67:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     b77:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     b87:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     b97:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     ba7:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     bb7:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     bc7:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     bd7:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     be7:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     bf7:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c07:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c17:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c27:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     c37:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     c47:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     c57:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     c67:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     c77:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     c87:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     c97:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     ca7:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     cb7:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     cc7:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     cd7:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     ce7:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     cf7:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d07:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d17:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d27:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     d37:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     d47:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     d57:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     d67:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     d77:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     d87:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     d97:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     da7:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     db7:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     dc7:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     dd7:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     de7:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     df7:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e07:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e17:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e27:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     e37:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     e47:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     e57:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     e67:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     e77:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     e87:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     e97:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     ea7:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     eb7:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     ec7:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     ed7:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     ee7:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     ef7:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f07:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f17:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f27:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     f37:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     f47:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     f57:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     f67:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     f77:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     f87:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     f97:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     fa7:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     fb7:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     fc7:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     fd7:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     fe7:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     ff7:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    1007:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    1017:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    1027:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    1037:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    1047:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    1057:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    1067:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    1077:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    1087:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    1097:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    10a7:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    10b7:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    10c7:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    10d7:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    10e7:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    10f7:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    1107:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    1117:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    1127:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    1137:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1147:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1157:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1167:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1177:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1187:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1197:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    11a7:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

000011b7 <planetsong>:
    11b7:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    11c7:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    11d7:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    11e7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    11f7:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    1207:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    1217:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1227:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    1237:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1247:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1257:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1267:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1277:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1287:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1297:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    12a7:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    12b7:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    12c7:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    12d7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    12e7:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    12f7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1307:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1317:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1327:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1337:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1347:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1357:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1367:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1377:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1387:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1397:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    13a7:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    13b7:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    13c7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    13d7:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    13e7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    13f7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1407:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1417:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1427:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1437:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1447:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1457:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1467:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1477:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1487:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1497:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    14a7:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    14b7:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    14c7:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    14d7:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    14e7:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    14f7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1507:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1517:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1527:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1537:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1547:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1557:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1567:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1577:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1587:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1597:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    15a7:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    15b7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    15c7:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    15d7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    15e7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    15f7:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    1607:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    1617:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    1627:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1637:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1647:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1657:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1667:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1677:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1687:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1697:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    16a7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    16b7:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    16c7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    16d7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    16e7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    16f7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1707:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1717:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1727:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1737:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1747:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1757:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1767:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1777:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1787:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1797:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    17a7:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    17b7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    17c7:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    17d7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    17e7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    17f7:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1807:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1817:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1827:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1837:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1847:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1857:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1867:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1877:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1887:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1897:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    18a7:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    18b7:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    18c7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    18d7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    18e7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    18f7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1907:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1917:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1927:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1937:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1947:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1957:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1967:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1977:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1987:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1997:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    19a7:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    19b7:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    19c7:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    19d7:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    19e7:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    19f7:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a07:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a17:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a27:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1a37:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1a47:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1a57:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1a67:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1a77:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1a87:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1a97:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1aa7:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1ab7:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1ac7:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1ad7:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1ae7:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1af7:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b07:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b17:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b27:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b37:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1b47:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1b57:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1b67:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1b77:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1b87:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1b97:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1ba7:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1bb7:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1bc7:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1bd7:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1be7:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1bf7:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c07:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c17:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c27:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1c37:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1c47:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1c57:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1c67:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1c77:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1c87:	2f 00                                               /.

00001c89 <my_patches>:
    1c89:	00 00 00 00 1e 00 00 00 00 00 00 00 00 1e 00 00     ................
    1c99:	00 00 00 00 00 ef 1d 00 00 00 00 00 00 00 99 1d     ................
    1ca9:	00 00 00 00 00 00 00 ef 1d 00 00 00 00 00 00 00     ................
    1cb9:	c8 1c 00 00 00 00 00 00 00 c8 1c 00 00 00 00        ...............

00001cc8 <explode>:
    1cc8:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1cd8:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1ce8:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1cf8:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d08:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d18:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d28:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1d38:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d48:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1d58:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d68:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1d78:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1d88:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1d98:	ff                                                  .

00001d99 <pshoot>:
    1d99:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1da9:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1db9:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1dc9:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1dd9:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1de9:	00 01 05 00 00 ff                                   ......

00001def <navigate>:
    1def:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1dff:	ff                                                  .

00001e00 <instrument>:
    1e00:	00 02 04 00 00 dd 00 ff                             ........

00001e08 <sprites_data>:
    1e08:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e18:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e28:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1e38:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1e48:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1e58:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1e68:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1e78:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1e88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1e98:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1ea8:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1eb8:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1ec8:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1ed8:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1ee8:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1ef8:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f18:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f28:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1f38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f48:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1f58:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1f68:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1f78:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1f88:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    1f98:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    1fa8:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    1fb8:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fc8:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    1fd8:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    1fe8:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    1ff8:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2008:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    2018:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    2028:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2038:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2048:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2058:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    2068:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    2078:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2088:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    2098:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    20a8:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    20b8:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    20c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2108:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    2118:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2128:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2138:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2148:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2158:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2168:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2178:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2188:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2198:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21a8:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21b8:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    21c8:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    21d8:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    21e8:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21f8:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    2208:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2218:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2228:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2238:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2248:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2258:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2268:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    2278:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2288:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2298:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22a8:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22b8:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    22c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22d8:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    22e8:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    22f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2308:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    2318:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    2328:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    2338:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    2348:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2358:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    2368:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    2378:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2388:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2398:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    23a8:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    23b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d8:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    23e8:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    23f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2408:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2418:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    2428:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    2438:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2448:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2458:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2468:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2478:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2488:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2498:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24a8:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24b8:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    24c8:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    24d8:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    24e8:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    24f8:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2508:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    2518:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2528:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2538:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2548:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2558:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2568:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2578:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2588:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2598:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    25a8:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    25b8:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    25c8:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25d8:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    25e8:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    25f8:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2608:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2618:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2628:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2638:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2648:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2658:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2668:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2678:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2688:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2698:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    26a8:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    26b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26c8:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    26d8:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    26e8:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    26f8:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2708:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    2718:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    2728:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2738:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2748:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2758:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2768:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2778:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2788:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    2798:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    27a8:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    27b8:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    27c8:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    27d8:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    27e8:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    27f8:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2808:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2818:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2828:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2838:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2848:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2858:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2868:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2878:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2888:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2898:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    28a8:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    28b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28c8:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    28d8:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    28e8:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    28f8:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2908:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2918:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2928:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2938:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2948:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2958:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2968:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2978:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2988:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2998:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    29a8:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    29b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29c8:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    29d8:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    29e8:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    29f8:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2a08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a18:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2a28:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a48:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2a58:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2a68:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2a78:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2a88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aa8:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2ab8:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2ac8:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2ad8:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2ae8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2af8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b08:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2b18:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2b28:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2b38:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2b48:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2b58:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2b68:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2b78:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2b88:	fe fe fe fe a4 fe fe fe fe fe fe fe a4 fe fe fe     ................
    2b98:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    2ba8:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 fe     .GGFF'FF....FFF.
    2bb8:	fe fe fe fe a4 fe fe fe fe fe fe fe a4 fe fe fe     ................
    2bc8:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2bd8:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2be8:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2bf8:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2c08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c18:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2c28:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2c38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c48:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2c58:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2c68:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2c78:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2c98:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2ca8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cc8:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2cd8:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2ce8:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2cf8:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2d08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d18:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2d28:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2d38:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2d48:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d58:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2d68:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2d78:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2d88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d98:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2da8:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2db8:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2dc8:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2dd8:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2de8:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2df8:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2e08:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2e18:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2e28:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2e38:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2e48:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2e58:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2e68:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2e78:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2e88:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2e98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ea8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2eb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ec8:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2ed8:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2ee8:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2ef8:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2f08:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2f18:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2f28:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2f38:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f48:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2f58:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2f68:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2f78:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2f88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fa8:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2fb8:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2fc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2fd8:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2fe8:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2ff8:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    3008:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    3018:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    3028:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    3038:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    3048:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    3058:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    3068:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    3078:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    3088:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    3098:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    30a8:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    30b8:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    30c8:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    30d8:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    30e8:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    30f8:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    3108:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    3118:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    3128:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    3138:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    3148:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    3158:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    3168:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    3178:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    3188:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3198:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    31a8:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    31b8:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    31c8:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    31d8:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    31e8:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    31f8:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    3208:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3218:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3228:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3238:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    3248:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3258:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3268:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3278:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    3288:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    3298:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    32a8:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    32b8:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    32c8:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    32d8:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    32e8:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    32f8:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3308:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3318:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3328:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    3338:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3348:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    3358:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    3368:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    3378:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    3388:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    3398:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    33a8:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    33b8:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    33c8:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    33d8:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    33e8:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    33f8:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    3408:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3418:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    3428:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    3438:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3448:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3458:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3468:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    3478:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3488:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    3498:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    34a8:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    34b8:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34c8:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    34d8:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    34e8:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    34f8:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    3508:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3518:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    3528:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    3538:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3548:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    3558:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3568:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3578:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3588:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    3598:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    35a8:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    35b8:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    35c8:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    35d8:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    35e8:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    35f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3608:	00 00 00 fe fe fe fe fe fe 00 00 00 fe fe fe fe     ................
    3618:	fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe fe     ................
    3628:	fe fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe     ................
    3638:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00003648 <map_hazard_desert>:
    3648:	01 01 28                                            ..(

0000364b <map_hazard_city>:
    364b:	01 01 29                                            ..)

0000364e <map_hazard_jungle>:
    364e:	01 01 27                                            ..'

00003651 <map_hazard_fire>:
    3651:	01 01 26                                            ..&

00003654 <map_hazard_ice>:
    3654:	01 01 25                                            ..%

00003657 <map_enemy_boss_shot>:
    3657:	01 01 39                                            ..9

0000365a <map_enemy_boss_eye>:
    365a:	01 01 37                                            ..7

0000365d <map_enemy_boss_turret>:
    365d:	01 01 36                                            ..6

00003660 <map_enemy_drone>:
    3660:	01 01 35                                            ..5

00003663 <map_enemy_tank>:
    3663:	01 01 24                                            ..$

00003666 <map_enemy_ball>:
    3666:	01 01 14                                            ...

00003669 <map_enemy_spider_1>:
    3669:	01 01 34                                            ..4

0000366c <map_enemy_spider_0>:
    366c:	01 01 23                                            ..#

0000366f <map_enemy_shark>:
    366f:	01 01 05                                            ...

00003672 <map_enemy_shot>:
    3672:	01 01 13                                            ...

00003675 <map_ahero_jump>:
    3675:	02 03 4d 4e 52 55 5e 5f                             ..MNRU^_

0000367d <map_ahero_step_3>:
    367d:	02 03 4d 4e 52 53 5a 60                             ..MNRSZ`

00003685 <map_ahero_step_2>:
    3685:	02 03 4b 4c 4f 54 5c 5d                             ..KLOT\]

0000368d <map_ahero_step_1>:
    368d:	02 03 4d 4e 52 53 5a 5b                             ..MNRSZ[

00003695 <map_ahero_step_0>:
    3695:	02 03 4b 4c 4f 51 58 59                             ..KLOQXY

0000369d <map_ahero_idle>:
    369d:	02 03 4b 4c 4f 50 56 57                             ..KLOPVW

000036a5 <map_hero_rplasma_shot>:
    36a5:	01 01 38                                            ..8

000036a8 <map_hero_space_bomb>:
    36a8:	01 01 18                                            ...

000036ab <map_hero_space_shot>:
    36ab:	01 01 17                                            ...

000036ae <map_hero_ice_shot>:
    36ae:	01 01 16                                            ...

000036b1 <map_hero_ball_shot>:
    36b1:	01 01 15                                            ...

000036b4 <map_hero_gplasma_shot>:
    36b4:	01 01 04                                            ...

000036b7 <map_hero_ship_large_1>:
    36b7:	04 02 3b 3c 3d 3e 49 40 4a 42                       ..;<=>I@JB

000036c1 <map_hero_ship_large_0>:
    36c1:	04 02 3b 3c 3d 3e 3f 40 41 42                       ..;<=>?@AB

000036cb <map_hero_ship_1>:
    36cb:	03 01 3a 2b 2c                                      ..:+,

000036d0 <map_hero_ship_0>:
    36d0:	03 01 2a 2b 2c                                      ..*+,

000036d5 <map_hero_prone>:
    36d5:	03 01 46 47 48                                      ..FGH

000036da <map_hero_jump>:
    36da:	02 03 02 03 0f 12 21 22                             ......!"

000036e2 <map_hero_step_3>:
    36e2:	02 03 02 03 0f 43 44 45                             .....CDE

000036ea <map_hero_step_2>:
    36ea:	02 03 00 01 0c 11 1f 20                             ....... 

000036f2 <map_hero_step_1>:
    36f2:	02 03 02 03 0f 10 1d 1e                             ........

000036fa <map_hero_step_0>:
    36fa:	02 03 00 01 0c 0e 1b 1c                             ........

00003702 <map_hero_idle>:
    3702:	02 03 00 01 0c 0d 19 1a                             ........

0000370a <map_emerald_4>:
    370a:	01 01 0a                                            ...

0000370d <map_emerald_3>:
    370d:	01 01 09                                            ...

00003710 <map_emerald_2>:
    3710:	01 01 08                                            ...

00003713 <map_emerald_1>:
    3713:	01 01 07                                            ...

00003716 <map_emerald_0>:
    3716:	01 01 06                                            ...

00003719 <map_explosion_2>:
    3719:	01 01 2f                                            ../

0000371c <map_explosion_1>:
    371c:	01 01 2e                                            ...

0000371f <map_explosion_0>:
    371f:	01 01 2d                                            ..-

00003722 <map_particle>:
    3722:	01 01 30                                            ..0

00003725 <map_up_arrow>:
    3725:	01 01 33                                            ..3

00003728 <map_down_arrow>:
    3728:	01 01 32                                            ..2

0000372b <map_right_arrow>:
    372b:	01 01 31                                            ..1

0000372e <map_none>:
    372e:	01 01 14                                            ...

00003731 <tiles_data>:
	...
    3771:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3781:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3791:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    37a1:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    37b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    37c1:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37d1:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    37e1:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    37f1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3801:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3811:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3821:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3831:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3841:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3851:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3861:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3871:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3881:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3891:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    38a1:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    38b1:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    38c1:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    38d1:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    38e1:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    38f1:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    3901:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3911:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3921:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3931:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3941:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3951:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3961:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3971:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3981:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3991:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    39a1:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    39b1:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    39c1:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    39d1:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    39e1:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    39f1:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3a01:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3a11:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3a21:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3a31:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3a41:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3a51:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3a61:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3a71:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3a81:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3a91:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3aa1:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3ab1:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3ac1:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3ad1:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3ae1:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3af1:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3b01:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3b11:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3b21:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3b31:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3b41:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3b51:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3b61:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3b71:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3b81:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3b91:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3ba1:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3bb1:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3bc1:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3bd1:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3be1:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3bf1:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3c01:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3c11:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3c21:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3c31:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3c41:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3c51:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3c61:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3c71:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3c81:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3c91:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3ca1:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3cb1:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3cc1:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3cd1:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3ce1:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3cf1:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3d01:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3d11:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3d21:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3d31:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3d41:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3d51:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3d61:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3d71:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3d81:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3d91:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3da1:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3db1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3dc1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    3dd1:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    3de1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3df1:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    3e01:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    3e11:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3e21:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3e31:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e41:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3e51:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e61:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e71:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e81:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3eb1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ec1:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ed1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ee1:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ef1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f01:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    3f11:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    3f21:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3f31:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f41:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3f51:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3f61:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3f89:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3f99:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fc9:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3fd9:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ff1:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4001:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4011:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4021:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4031:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4041:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4051:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4061:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4071:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    4081:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    4091:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    40a1:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    40b1:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    40c1:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    40d1:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    40e1:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    40f1:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    4101:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    4111:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    4121:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    4131:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    4141:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    4151:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    4161:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    4171:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4181:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4191:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    41a1:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    41bd:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    41cd:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    41dd:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    41ed:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    41fd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    420d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    421d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    422d:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    423d:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    424d:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    425d:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    426d:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    427d:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    428d:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    429d:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    42ad:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42bd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42cd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42dd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42ed:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    42fd:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    430d:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    431d:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    432d:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    433d:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    434d:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    435d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    436d:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4399:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43a9:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    43b9:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    43c9:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    43d9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43e9:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    43f9:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    4409:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    4419:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    4429:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    4439:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    4449:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    4459:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    4469:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    4479:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    4489:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    4499:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    44a9:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    44b9:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    44c9:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    44d9:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    44e9:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    44f9:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    4509:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    4519:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    4529:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    4539:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    4549:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4559:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4569:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    4579:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    4589:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    4599:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    45b1:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    45c1:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    45d1:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    45e1:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    45f1:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4601:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4611:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    4639:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4649:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    4659:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4679:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    4689:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    4699:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    46b9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    46c9:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    46d9:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    46f9:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    4709:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    4719:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    473d:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    474d:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    475d:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4779:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4789:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4799:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    47b9:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    47c9:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    47d9:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    47f9:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    4809:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    4819:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4839:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4849:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4859:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4879:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4889:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4899:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    48b9:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    48c9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48d9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    48f9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4909:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4919:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4939:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4949:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4959:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4979:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4989:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4999:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    49b9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    49c9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    49d9:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    49f9:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4a09:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4a19:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4a39:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4a49:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4a59:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4a79:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a89:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a99:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4ab9:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4ac9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4ad9:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4afd:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b0d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4b1d:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4b39:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4b49:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4b59:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4b79:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b89:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b99:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4bb9:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4bc9:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4bd9:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4bf9:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4c09:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4c19:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4c39:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c49:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c59:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4c79:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c89:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4c99:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4cb9:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4cc9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4cd9:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4cf9:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4d09:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4d19:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4d39:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4d49:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4d59:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4d79:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4d89:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4d99:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4db9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4dc9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4dd9:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4df9:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4e09:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4e19:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4e39:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4e49:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4e59:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4e79:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4e89:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4e99:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4eb9:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4ec9:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4ed9:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4ef9:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    4f09:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    4f19:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4f31:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f41:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f51:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f61:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f71:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f81:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4f91:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4fa1:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4fb1:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    4fc1:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4fd1:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4fe1:	af af af af af af af af af af af af af af af af     ................
    4ff1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5001:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5011:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5021:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5031:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    5041:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    5051:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    5061:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    5071:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    5081:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5091:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50a1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50b1:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    50c1:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50d1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50e1:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50f1:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    5101:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    5111:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5121:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5131:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5141:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5151:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5161:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5171:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5181:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5191:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    51a1:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    51b1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51c1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51d1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51e1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51f1:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5201:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5211:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5221:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5231:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5241:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5251:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5261:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5271:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    5281:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    5291:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    52a1:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    52b1:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    52c1:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    52d1:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    52e1:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    52f1:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    5301:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    5311:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5321:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    5331:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    5341:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    5351:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    5361:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5371:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    5381:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    5391:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    53a1:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    53b1:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    53c1:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    53d1:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    53e1:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    53f1:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    5401:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    5411:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5421:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5431:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    5441:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5451:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5461:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5471:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    5481:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    5491:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    54a1:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    54b1:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    54c1:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    54d1:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    54e1:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    54f1:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    5501:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    5511:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    5521:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5531:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5541:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5551:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5561:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5571:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    5581:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    5591:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    55a1:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    55b1:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    55c1:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    55d1:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    55e1:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    55f1:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5601:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5611:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5621:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5631:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5641:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5651:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5661:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5671:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5681:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5691:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56a1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56b1:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56c1:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    56d1:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    56e1:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    56f1:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5701:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5711:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5721:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5731:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5741:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5751:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5761:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5771:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5781:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    5791:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    57a1:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    57b1:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    57c1:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    57d1:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    57e1:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    57f1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5801:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5811:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5821:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5831:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5841:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5851:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5861:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5871:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5881:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5891:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58a1:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58b1:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    58c1:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    58d1:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    58e1:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    58f1:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5901:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5911:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5921:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5931:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5941:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5951:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5961:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5971:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5981:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    5991:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    59a1:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    59b1:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    59c1:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    59d1:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    59e1:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    59f1:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5a01:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5a11:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5a21:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a31:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a41:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a51:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a61:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a71:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5a81:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5a91:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5aa1:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ab1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ac1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ad1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ae1:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5af1:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5b09:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5b19:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5b29:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b39:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b49:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5b59:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b69:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5b79:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b89:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5b99:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5ba9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5bb9:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5bc9:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5bd9:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5be9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5bf9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c09:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c19:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c29:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c39:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c49:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5c59:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5c69:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5c79:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5c89:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5c99:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5ca9:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5cb9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5cc9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5cd9:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5ce9:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5cf9:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5d09:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5d19:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5d29:	3f 3f 3f 3f 3f 2f 2f 2f 77 77 77 77 77 77 77 2f     ?????///wwwwwww/
    5d39:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5d49:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5d59:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5d69:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d79:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d89:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d99:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5da9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5db9:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5dc9:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5dd9:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5de9:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ///////////?????
    5df9:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5e09:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e19:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e29:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5e39:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5e49:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e59:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e69:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5e79:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5e89:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5e99:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5ea9:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    5eb9:	13 13 13 14 13 65 5d 65 5c 65 13 14 65 65 1c 65     .....e]e\e..ee.e
    5ec9:	13 13 5c 13 13 65 13 65 14 14 5c 13 5d 5c 13 13     ..\..e.e..\.]\..
    5ed9:	1c 13 13 5c 5c 5c 5c 5c 1c 14 5c 13 13 13 13 13     ...\\\\\..\.....
    5ee9:	13 5c 65 5c 13 13 5c 13 00 00 00 00 00 00 00 00     .\e\..\.........
    5ef9:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5f09:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5f19:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5f29:	00 00 00 00 00 00 00 a4                             ........

00005f31 <map_font>:
    5f31:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    5f41:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    5f51:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

00005f58 <map_atmosphere>:
    5f58:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5f68:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5f78:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5f88:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005f92 <map_dialog>:
    5f92:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5fa2:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5fb2:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5fc2:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5fd2:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5fe2:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5ff2:	31 32                                               12

00005ff4 <map_canvas>:
    5ff4:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    6004:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    6014:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    6030:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    6040:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    6050:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    606c:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    607c:	32                                                  2

0000607d <map_splash>:
    607d:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    608d:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    609d:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    60ad:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    60bd:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

000060ca <map_tile_none>:
    60ca:	01 01 00                                            ...

000060cd <map_level_mega_tiles>:
    60cd:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    60dd:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    60ed:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    60fd:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    610d:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    611d:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    612d:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    613d:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    614d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    615d:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    616d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    617d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    618d:	63 63 63 02 02 02 02 02 63 63 63 63 63 02 02 02     ccc.....ccccc...
    619d:	02 02 11 11 11 11 11 63 63 63 63 63 63 63 63 63     .......ccccccccc
    61ad:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    61bd:	63 63 64 63 63 63 63 65 66 67 63 63 63 63 63 63     ccdccccefgcccccc
    61cd:	63 02 02 02 63 02 04 04 04 63 04 04 04 04 02 04     c...c....c......
    61dd:	04 04 04 63 63 63 63 63 02 02 02 63 63 04 04 04     ...ccccc...cc...
    61ed:	02 63 04 04 04 04 02 04 04 04 04 04 67 66 68 63     .c..........gfhc
    61fd:	63 63 63 68 67 66 66 67 68 63 63 63 63 69 63 63     ccchgffghccccicc
    620d:	02 02 02 02 02 63 63 63 63 63 63 63 02 02 02 63     .....ccccccc...c
    621d:	02 04 04 04 02 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    622d:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    623d:	63 63 18 18 18 18 18 63 63 63 63 02 63 63 63 02     cc.....cccc.ccc.
    624d:	04 63 63 02 04 04 63 02 04 04 04 02 04 04 04 04     .cc...c.........
    625d:	02 02 02 02 02 04 04 04 04 04 04 04 04 04 04 04     ................
    626d:	04 04 04 04 04 04 04 04 04 18 18 18 18 18 04 04     ................
    627d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    628d:	04 04 02 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    629d:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    62ad:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    62bd:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    62cd:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    62dd:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    62ed:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    62fd:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    630d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    631d:	6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c     lll.....llllllll
    632d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c     llllllllllll.lll
    633d:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    634d:	6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 6c 05 6c     llllllll.lllll.l
    635d:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    636d:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    637d:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    638d:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    639d:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    63ad:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    63bd:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c     lllllllllllll..l
    63cd:	6c 6c 05 05 13 13 13 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    63dd:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 13 13 13 13 13     lllllllllll.....
    63ed:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06     lllllllllllllll.
    63fd:	06 6c 6c 6c 05 05 06 06 06 6c 6c 6c 6c 06 6c 6c     .lll.....llll.ll
    640d:	6c 06 05 6c 6c 06 05 05 6c 06 05 05 05 06 05 05     l..ll...l.......
    641d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    642d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 06     ................
    643d:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    644d:	05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c 05 06     ....lllll.llll..
    645d:	6c 6c 6c 05 05 06 6c 6c 05 05 05 13 13 6c 6c 6c     lll...ll.....lll
    646d:	6c 6c 06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c     ll.llll..lll...l
    647d:	6c 05 05 05 05 05 6c 6c 6c 6c 06 6c 6c 6c 06 05     l.....llll.lll..
    648d:	6c 6c 06 05 05 6c 06 05 05 05 05 05 05 05 05 72     ll...l.........r
    649d:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 74 73     sttststtststtsts
    64ad:	74 74 73 74 73 74 74 73 74 73 74 74 73 74 73 74     ttststtststtstst
    64bd:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    64cd:	73 74 73 74 74 75 74 73 74 74 73 74 73 74 74 73     ststtutsttststts
    64dd:	74 73 74 74 73 74 73 74 74 73 76 73 74 74 73 78     tsttststtsvsttsx
    64ed:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    64fd:	78 78 78 74 73 74 74 73 79 7a 79 79 7a 7b 7c 7b     xxxtsttsyzyyz{|{
    650d:	7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 74 73 74 74     {|yzyyz{|{{|tstt
    651d:	77 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     wxxxxxxxxxxxxxxx
    652d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    653d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 79 7a     xxxxxxxxxxxxxxyz
    654d:	79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b     yyz{|{{|yzyyz{|{
    655d:	7b 7c 79 7a 79 79 7a 78 78 78 78 78 78 78 78 78     {|yzyyzxxxxxxxxx
    656d:	78 78 78 78 78 78 78 78 78 78 78 0d 0e 0e 0d 0e     xxxxxxxxxxx.....
    657d:	7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 79     {|{{|yzyyz{|{{|y
    658d:	7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78 78 78 78 78     zyyz{|{{|xxxxxxx
    659d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 07     xxxxxxxxxxxxxxx.
    65ad:	07 07 78 78 78 78 78 78 78 78 78 78 78 78 78 78     ..xxxxxxxxxxxxxx
    65bd:	78 78 78 78 78 78 07 07 07 78 78 78 78 78 78 78     xxxxxx...xxxxxxx
    65cd:	78 78 78 78 78 78 78 78 78 78 78 78 07 07 07 78     xxxxxxxxxxxx...x
    65dd:	78 05 05 05 78 78 78 78 78 78 78 78 78 78 78 78     x...xxxxxxxxxxxx
    65ed:	78 78 78 07 07 07 78 78 05 05 05 78 78 78 78 12     xxx...xx...xxxx.
    65fd:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    660d:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    661d:	78 78 78 78 78 78 78 78 78 78 07 07 07 07 07 79     xxxxxxxxxx.....y
    662d:	7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     zyyz{|{{|yzyyz{|
    663d:	7b 7b 7c 07 07 07 07 07 78 78 05 05 05 78 07 05     {{|.....xx...x..
    664d:	05 05 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    665d:	05 05 05 05 78 78 05 05 05 07 78 05 05 05 05 78     ....xx....x....x
    666d:	05 05 05 05 07 05 05 05 05 05 78 07 05 05 05 78     ..........x....x
    667d:	05 05 05 05 07 05 05 05 05 05 05 05 05 05 05 05     ................
    668d:	05 05 05 05 05 05 07 78 05 05 05 05 78 05 05 05     .......x....x...
    669d:	05 07 05 05 05 05 05 05 05 05 05 05 78 78 78 78     ............xxxx
    66ad:	78 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     xxxxxxxxxxx.xxxx
    66bd:	05 14 14 14 14 78 78 78 78 78 78 78 78 78 78 78     .....xxxxxxxxxxx
    66cd:	78 78 78 78 78 78 78 78 07 14 14 14 14 05 7d 7d     xxxxxxxx......}}
    66dd:	7d 7d 7d 7d 7d 7d 7d 7d 7d 0f 81 7d 0f 85 85 85     }}}}}}}}}..}....
    66ed:	85 85 85 85 85 85 85 7d 7d 7d 7d 7d 7d 7d 7d 7e     .......}}}}}}}}~
    66fd:	7f 81 7d 0f 82 83 85 85 85 86 87 85 85 85 89 8a     ..}.............
    670d:	7d 7d 7d 7d 7d 80 7d 7d 7d 7d 84 81 7d 0f 81 88     }}}}}.}}}}..}...
    671d:	85 85 85 85 84 85 85 85 85 7d 7d 7d 7d 7d 7d 7d     .........}}}}}}}
    672d:	7d 7d 7d 81 7d 0f 81 7d 85 85 85 85 85 85 85 85     }}}.}..}........
    673d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    674d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 86 87     ................
    675d:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 85     ................
    676d:	85 85 86 87 88 85 85 85 85 84 85 85 85 85 88 85     ................
    677d:	85 85 85 84 85 85 85 85 88 85 85 85 85 85 85 85     ................
    678d:	85 85 85 85 85 85 85 85 85 85 85 8b 85 85 85 8b     ................
    679d:	60 85 85 8b 60 60 85 85 85 89 8a 85 85 85 86 87     `...``..........
    67ad:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 84     ................
    67bd:	85 85 85 85 88 85 85 85 85 84 85 85 85 85 88 85     ................
    67cd:	85 85 85 84 85 85 85 85 85 85 85 89 8a 85 85 85     ................
    67dd:	86 87 85 85 85 89 8a 85 85 85 86 87 85 09 09 09     ................
    67ed:	09 84 85 85 85 85 88 85 85 85 85 84 85 85 85 85     ................
    67fd:	88 85 85 85 85 09 85 85 85 85 85 85 8c 8c 8c 85     ................
    680d:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    681d:	8c 8c 8c 85 85 85 86 87 85 8d 85 89 8a 8d 8e 85     ................
    682d:	85 8f 90 90 90 90 90 90 90 90 90 90 88 85 85 85     ................
    683d:	85 84 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    684d:	85 85 85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85     ................
    685d:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 85     ................
    686d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 90     ................
    687d:	90 90 85 85 90 90 90 85 85 8c 8c 8c 85 85 8c 8c     ................
    688d:	8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 09 09 09 09     ................
    689d:	85 85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 90     ................
    68ad:	90 90 90 90 09 90 90 90 90 88 85 85 85 85 84 85     ................
    68bd:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 09 09     ................
    68cd:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    68dd:	8c 85 8c 8c 8c 8c 09 8c 8c 8c 8c 88 85 85 85 09     ................
    68ed:	84 85 85 09 08 85 85 09 08 08 85 09 08 08 08 09     ................
    68fd:	08 08 08 08 85 85 85 85 85 15 15 15 15 15 08 08     ................
    690d:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 09 85     ................
    691d:	85 85 08 08 15 15 15 08 08 08 08 08 08 08 08 08     ................
    692d:	08 08 08 08 08 08 85 85 09 8c 8c 15 15 08 09 8c     ................
    693d:	08 08 08 08 09 08 08 08 08 08 08 08 08 08 08 85     ................
    694d:	85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 09 90     ................
    695d:	90 90 90 08 09 90 90 90 85 85 8c 8c 8c 85 85 8c     ................
    696d:	8c 8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09     .........```....
    697d:	09 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    698d:	90 90 90 90 90 09 09 09 09 09 85 85 85 85 85 85     ................
    699d:	8c 8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09     ..........``....
    69ad:	09 09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    69bd:	8c 8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90     ...````.........
    69cd:	90 85 85 90 90 90 85 85 90 90 90 85 85 90 90 90     ................
    69dd:	09 09 09 09 09 85 85 90 90 90 85 85 90 90 90 85     ................
    69ed:	85 90 90 90 85 09 90 90 90 09 08 15 15 15 85 85     ................
    69fd:	8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 09     ................
    6a0d:	60 60 15 15 08 09 09 90 90 90 90 90 90 90 90 90     ``..............
    6a1d:	90 90 90 90 90 90 90 90 90 09 90 09 09 09 08 15     ................
    6a2d:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6a3d:	85 85 85 09 15 15 15 15 08 90 90 90 90 09 90 90     ................
    6a4d:	90 09 08 90 90 09 08 08 90 09 08 08 08 09 08 08     ................
    6a5d:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    6a6d:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 90 90     ................
    6a7d:	08 08 08 09 90 08 08 08 08 09 08 08 08 08 08 08     ................
    6a8d:	08 08 08 08 85 85 85 85 85 85 8c 8c 85 85 85 8c     ................
    6a9d:	8c 90 85 09 60 60 90 85 08 09 09 09 09 85 85 85     ....``..........
    6aad:	85 85 85 85 85 85 09 85 85 85 09 08 85 85 09 08     ................
    6abd:	08 09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c     ................
    6acd:	15 15 15 15 15 08 08 08 08 08 08 08 08 08 08 85     ................
    6add:	85 90 90 90 09 09 90 90 90 08 08 15 15 15 08 08     ................
    6aed:	08 08 08 08 08 08 08 08 85 85 8c 8c 8c 85 85 09     ................
    6afd:	8c 8c 15 15 08 09 8c 08 08 08 08 09 08 08 08 08     ................
    6b0d:	08 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6b1d:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6b2d:	91 91 91 91 91 91 91 91 91 92 92 92 92 92 93 93     ................
    6b3d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b4d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b5d:	93 93 93 94 93 93 93 95 96 97 93 98 9b 10 9c 9a     ................
    6b6d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b7d:	93 93 93 93 93 93 93 93 93 93 93 94 93 93 93 93     ................
    6b8d:	93 93 93 93 93 94 93 93 93 98 99 9a 93 98 99 99     ................
    6b9d:	99 9a 93 93 93 93 93 93 98 99 9a 93 98 99 99 99     ................
    6bad:	9a 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bbd:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bcd:	93 93 93 93 0a 0a 0a 0a 0a 93 95 96 97 93 98 9b     ................
    6bdd:	10 9c 9a 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bed:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bfd:	93 93 93 93 93 93 93 93 93 93 0a 93 98 99 9a 93     ................
    6c0d:	98 99 99 99 9a 93 93 93 93 93 93 93 93 93 93 9d     ................
    6c1d:	0a 93 93 93 93 95 96 97 93 98 9b 10 9c 9a 93 93     ................
    6c2d:	93 93 93 0a 0a 0a 9d 0a 16 16 16 16 16 93 93 93     ................
    6c3d:	93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93 93     ................
    6c4d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6c5d:	93 93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93     ................
    6c6d:	93 93 0a 0b 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a 0b     ................
    6c7d:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c8d:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c9d:	0b 0b 0b 0b 0b 9e 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6cad:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 93 93 0b     ................
    6cbd:	0b 0b 0a 93 0b 0b 0b 0b 0a 0b 0b 0b 0b 0b 0b 0b     ................
    6ccd:	0b 0b 0b 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6cdd:	93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 93 93 93 93     ................
    6ced:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6cfd:	0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93 93     ................
    6d0d:	93 93 93 93 93 93 93 93 93 17 17 17 17 17 93 93     ................
    6d1d:	93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a 93     ................
    6d2d:	93 93 0b 0b 17 17 17 93 93 93 93 93 93 93 93 93     ................
    6d3d:	93 93 93 93 93 93 93 93 0a 0a 93 17 17 0b 0b 17     ................
    6d4d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d5d:	93 93 93 0a 17 17 17 17 0b 93 93 93 93 93 93 93     ................
    6d6d:	93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 17 17     ................
    6d7d:	17 17 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d8d:	93 93 0a 93 93 93 17 0b 0a 0a 0a 16 16 16 16 16     ................
    6d9d:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6dad:	0a 0a 0a 0a 00 21 00 00 00 00 00 00 00 00 00 00     .....!..........
    6dbd:	00 00 00 00 21 00 00 00 00 00 00 00 00 00 00 00     ....!...........
    6dcd:	00 00 00 00 00 00 22 00 21 00 00 00 00 00 00 00     ......".!.......
    6ddd:	00 00 00 00 00 21 00 00 00 00 00 00 00 22 00 00     .....!......."..
    6ded:	00 21 00 00 00 00 00 00 00 00 00 00 00 22 00 22     .!..........."."
	...
    6e05:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6e15:	00 21 19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00     .!..............
    6e25:	21 00 00 00 00 00 00 00 00 19 19 19 19 19 19 19     !...............
    6e35:	19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00     ................
    6e45:	00 21 19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a     .!..............
    6e55:	1a 00 21 00 00 00 00 00 00 00 00 19 19 9f 9f 9f     ..!.............
    6e65:	19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00     ................
    6e75:	00 00 00 21 9f 9f 9f 9f 9f 19 19 19 19 19 1a 1a     ...!............
    6e85:	1a 1a 1a 00 21 00 00 00 00 00 00 00 00 9f 9f 19     ....!...........
    6e95:	19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00     ................
    6ea5:	00 00 00 00 00 21 19 19 19 19 19 19 19 19 19 19     .....!..........
    6eb5:	1a 1a 1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00     ................
    6ec5:	00 00 00 00 00 00 22 00 00 00 21 00 00 00 00 00     ......"...!.....
    6ed5:	00 1a 1a 00 00 00 22 00 22 00 00 00 00 00 00 00     ......".".......
    6ee5:	00 00 00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00     ...!............
    6ef5:	1b 19 19 00 00 00 19 19 22 00 00 19 19 00 00 00     ........".......
    6f05:	1a 1a 1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00     ........".......
    6f15:	00 1b 1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00     .....!..........
    6f25:	00 1b 1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b     ................
    6f35:	1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00     ................
    6f45:	00 00 00 22 1a 1a 00 21 00 00 00 00 00 00 00 00     ..."...!........
    6f55:	00 00 00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00     ..."."..........
    6f65:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 1b 1b     !...............
    6f75:	1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00 19 19 00     ................
    6f85:	00 00 19 19 00 22 00 00 21 00 00 00 00 00 00 00     ....."..!.......
    6f95:	00 00 00 1a 1a 1a 00 21 19 19 19 00 00 19 19 19     .......!........
	...
    6fad:	00 22 1a 1a 1a 1a 1a 19 19 19 19 19 19 19 19 19     ."..............
    6fbd:	19 00 21 00 00 00 00 00 00 00 00 1a 1a 1a 1a 1a     ..!.............
    6fcd:	19 19 19 19 19 19 19 19 19 19 19 19 00 00 00 19     ................
    6fdd:	19 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19 19 19     ................
    6fed:	19 19 19                                            ...

00006ff0 <map_level_space_final>:
    6ff0:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    7000:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7010:	84 85 84 85 84 85 84 85 84 85 84 85 88 89 8a 89     ................
    7020:	8a 8b 8c 8d 8e 86 87 86 87 86 87 86 87 86 87 86     ................
    7030:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7040:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7050:	87 86 87 86 87 8f 90 91 84 85 84 85 84 85 84 85     ................
    7060:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7070:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7080:	84 85 84 85 84 85 84 85 84 92 93 86 87 86 87 86     ................
    7090:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    70a0:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    70b0:	87 86 87 86 87 86 87 86 87 86 87 94 95 96 84 85     ................
    70c0:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    70d0:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    70e0:	84 85 84 85 84 85 84 85 97 98 99 98 99 98 99 98     ................
    70f0:	9a                                                  .

000070f1 <map_level_space>:
    70f1:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    7101:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7111:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7121:	84 85 84 85 84 86 87 86 87 86 87 86 87 86 87 86     ................
    7131:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7141:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7151:	87 86 87 86 87 86 87 86 84 85 84 85 84 85 84 85     ................
    7161:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7171:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7181:	84 85 84 85 84 85 84 85 84 85 84 86 87 86 87 86     ................
    7191:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    71a1:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    71b1:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 84 85     ................
    71c1:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    71d1:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    71e1:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    71f1:	84                                                  .

000071f2 <map_level_desert>:
    71f2:	33 05 69 69 69 69 69 69 69 69 69 69 69 69 69 69     3.iiiiiiiiiiiiii
    7202:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7212:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7222:	69 69 69 69 69 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     iiiiijjjjjjjjjjj
    7232:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    7242:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    7252:	6a 6a 6a 6a 6a 6a 6a 6a 6b 6c 6b 6d 6b 6d 6b 6e     jjjjjjjjklkmkmkn
    7262:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    7272:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    7282:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6e 6b 6b 6b 6b 6f 70     klkmkmknknkkkkop
    7292:	71 70 6b 72 70 70 73 6b 74 6b 6b 6b 6b 6b 6f 6b     qpkrppsktkkkkkok
    72a2:	71 6b 6b 70 6b 75 6f 76 71 6b 6b 72 70 70 73 6b     qkkpkuovqkkrppsk
    72b2:	71 6b 6b 6b 6b 6b 6f 6b 6f 6b 6b 6b 6b 6b 70 70     qkkkkkokokkkkkpp
    72c2:	70 70 70 70 70 70 77 78 79 7a 7b 70 70 70 7c 7d     ppppppwxyz{ppp|}
    72d2:	7e 7f 80 81 82 70 70 70 70 70 83 70 70 70 77 78     ~....ppppp.pppwx
    72e2:	79 7a 7b 70 70 70 70 81 82 70 70 70 70 70 70 70     yz{pppp..ppppppp
    72f2:	70                                                  p

000072f3 <map_level_city>:
    72f3:	33 05 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e     3.>?@>A>?@>A>?@>
    7303:	41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41     A>?@>A>?@>A>?@>A
    7313:	3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e     >?@>A>?@>A>?@>A>
    7323:	3f 40 3e 41 3e 42 43 44 42 42 42 43 44 42 42 42     ?@>A>BCDBBBCDBBB
    7333:	43 44 42 42 42 43 44 42 42 42 43 44 42 42 42 43     CDBBBCDBBBCDBBBC
    7343:	44 42 42 42 43 44 42 42 42 43 44 42 42 42 43 44     DBBBCDBBBCDBBBCD
    7353:	42 42 42 43 44 42 42 42 45 46 47 42 42 45 48 49     BBBCDBBBEFGBBEHI
    7363:	42 42 45 46 47 42 42 45 48 49 42 42 45 46 47 42     BBEFGBBEHIBBEFGB
    7373:	42 45 46 47 42 42 45 46 47 42 42 45 46 47 42 42     BEFGBBEFGBBEFGBB
    7383:	45 48 49 42 42 45 46 47 42 42 45 4a 4b 4c 4d 4e     EHIBBEFGBBEJKLMN
    7393:	4f 50 51 52 4e 4a 4b 4c 4d 4e 4f 50 51 52 4e 4a     OPQRNJKLMNOPQRNJ
    73a3:	4b 53 54 55 56 57 4c 4d 4e 4a 4b 4c 4d 4e 4a 4b     KSTUVWLMNJKLMNJK
    73b3:	4c 4d 4e 4f 50 4c 4d 4e 4a 4b 4c 4d 4e 4a 58 59     LMNOPLMNJKLMNJXY
    73c3:	5a 5b 5c 58 59 5a 5b 5d 5e 5f 60 5b 5c 58 59 5a     Z[\XYZ[]^_`[\XYZ
    73d3:	5b 5c 58 61 62 62 62 62 63 64 5b 5c 58 59 65 66     [\Xabbbbcd[\XYef
    73e3:	67 68 59 5a 5b 5c 58 59 5a 5b 5c 58 59 5a 5b 5c     ghYZ[\XYZ[\XYZ[\
    73f3:	58                                                  X

000073f4 <map_level_forest>:
    73f4:	33 05 27 28 29 27 28 29 27 28 29 27 28 29 27 28     3.'()'()'()'()'(
    7404:	29 27 28 29 27 28 29 27 28 29 27 28 29 27 28 29     )'()'()'()'()'()
    7414:	27 28 29 27 28 29 27 28 29 27 28 29 27 28 29 27     '()'()'()'()'()'
    7424:	28 29 27 28 29 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b     ()'()*+,*+,*+,*+
    7434:	2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c     ,*+,*+,*+,*+,*+,
    7444:	2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a     *+,*+,*+,*+,*+,*
    7454:	2b 2c 2a 2b 2c 2a 2b 2c 2d 2e 2d 2d 2e 2d 2d 2e     +,*+,*+,-.--.--.
    7464:	2f 2d 2e 2d 2f 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2d     /-.-/.--.--.--.-
    7474:	2d 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2f 2d 2e 2f 2d     -.--.--.--./-./-
    7484:	2e 2d 2d 2e 2f 2d 2e 2d 2d 2e 2d 2d 30 2d 2d 30     .--./-.--.--0--0
    7494:	2d 2f 30 2d 2f 30 2f 2d 30 2d 2d 30 31 32 30 31     -/0-/0/-0--01201
    74a4:	32 30 33 34 30 2d 2d 30 2d 2d 30 2f 2d 30 35 2d     20340--0--0/-05-
    74b4:	30 35 2d 30 2d 2d 30 35 2d 30 2d 2d 30 2d 36 37     05-0--05-0--0-67
    74c4:	36 36 37 36 36 37 36 36 37 36 36 37 36 36 37 38     6676676676676678
    74d4:	39 37 38 39 37 3a 3b 37 3c 3d 37 3c 3d 37 36 36     97897:;7<=7<=766
    74e4:	37 36 36 37 36 36 37 3c 3d 37 36 36 37 36 36 37     7667667<=7667667
    74f4:	36                                                  6

000074f5 <map_level_fire>:
    74f5:	33 05 13 13 13 13 13 13 13 13 13 13 13 13 13 13     3...............
    7505:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    7515:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    7525:	13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14     ................
    7535:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    7545:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    7555:	14 14 14 14 14 14 14 14 15 16 15 15 15 15 16 15     ................
    7565:	15 15 15 16 15 15 15 15 15 17 15 16 15 15 15 15     ................
    7575:	15 15 15 15 18 19 16 15 15 15 15 16 15 15 15 15     ................
    7585:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    7595:	15 15 15 15 15 15 15 17 15 15 17 15 15 15 17 15     ................
    75a5:	15 15 15 15 15 15 1a 1b 1c 1d 15 15 15 15 15 15     ................
    75b5:	15 18 19 15 15 18 19 15 15 15 15 15 15 15 17 17     ................
    75c5:	17 1e 1f 1e 1f 1e 1f 1e 1f 20 17 17 17 17 17 17     ......... ......
    75d5:	17 17 17 17 1e 1f 1e 1f 21 22 22 22 23 24 1f 1e     ........!"""#$..
    75e5:	1f 20 17 21 1b 1c 25 26 1b 1c 25 17 17 17 17 17     . .!..%&..%.....
    75f5:	17                                                  .

000075f6 <map_level_ice>:
    75f6:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    7606:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    7616:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    7626:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    7636:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    7646:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    7656:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    7666:	06 07 07 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    7676:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    7686:	06 06 06 06 06 06 06 06 06 06 06 06 06 09 06 06     ................
    7696:	06 06 06 0a 02 02 0b 06 06 06 06 09 06 06 06 06     ................
    76a6:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    76b6:	06 06 08 06 09 06 06 06 06 06 06 06 06 06 07 07     ................
    76c6:	0c 07 07 07 07 0d 02 02 02 02 0b 07 07 07 0c 0e     ................
    76d6:	07 0e 07 0e 07 0f 10 10 10 11 10 11 10 11 12 07     ................
    76e6:	07 07 07 07 07 07 07 0c 07 07 07 07 07 07 07 07     ................
    76f6:	07 00                                               ..

000076f8 <__ctors_end>:
    76f8:	11 24       	eor	r1, r1
    76fa:	1f be       	out	0x3f, r1	; 63
    76fc:	cf ef       	ldi	r28, 0xFF	; 255
    76fe:	d0 e1       	ldi	r29, 0x10	; 16
    7700:	de bf       	out	0x3e, r29	; 62
    7702:	cd bf       	out	0x3d, r28	; 61

00007704 <__do_copy_data>:
    7704:	15 e0       	ldi	r17, 0x05	; 5
    7706:	a0 e0       	ldi	r26, 0x00	; 0
    7708:	b5 e0       	ldi	r27, 0x05	; 5
    770a:	ec e0       	ldi	r30, 0x0C	; 12
    770c:	f8 ee       	ldi	r31, 0xE8	; 232
    770e:	02 c0       	rjmp	.+4      	; 0x7714 <__do_copy_data+0x10>
    7710:	05 90       	lpm	r0, Z+
    7712:	0d 92       	st	X+, r0
    7714:	a0 31       	cpi	r26, 0x10	; 16
    7716:	b1 07       	cpc	r27, r17
    7718:	d9 f7       	brne	.-10     	; 0x7710 <__do_copy_data+0xc>

0000771a <__do_clear_bss>:
    771a:	10 e1       	ldi	r17, 0x10	; 16
    771c:	a0 e1       	ldi	r26, 0x10	; 16
    771e:	b5 e0       	ldi	r27, 0x05	; 5
    7720:	01 c0       	rjmp	.+2      	; 0x7724 <.do_clear_bss_start>

00007722 <.do_clear_bss_loop>:
    7722:	1d 92       	st	X+, r1

00007724 <.do_clear_bss_start>:
    7724:	a1 35       	cpi	r26, 0x51	; 81
    7726:	b1 07       	cpc	r27, r17
    7728:	e1 f7       	brne	.-8      	; 0x7722 <.do_clear_bss_loop>

0000772a <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    772a:	0e 94 30 41 	call	0x8260	; 0x8260 <wdt_randomize>
#endif

    MCUSR = 0;
    772e:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7730:	88 e1       	ldi	r24, 0x18	; 24
    7732:	0f b6       	in	r0, 0x3f	; 63
    7734:	f8 94       	cli
    7736:	80 93 60 00 	sts	0x0060, r24
    773a:	10 92 60 00 	sts	0x0060, r1
    773e:	0f be       	out	0x3f, r0	; 63

00007740 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    7740:	0e 94 f2 41 	call	0x83e4	; 0x83e4 <isEepromFormatted>
    7744:	81 11       	cpse	r24, r1
    7746:	02 c0       	rjmp	.+4      	; 0x774c <Initialize+0xc>
    7748:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <FormatEeprom>

	cli();
    774c:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    774e:	81 e0       	ldi	r24, 0x01	; 1
    7750:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    7754:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7758:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    775c:	10 92 d0 0c 	sts	0x0CD0, r1
    7760:	10 92 d6 0c 	sts	0x0CD6, r1
    7764:	10 92 dc 0c 	sts	0x0CDC, r1
    7768:	10 92 e2 0c 	sts	0x0CE2, r1
    776c:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7770:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    7774:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7778:	92 e1       	ldi	r25, 0x12	; 18
    777a:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    777e:	90 ee       	ldi	r25, 0xE0	; 224
    7780:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    7784:	94 e1       	ldi	r25, 0x14	; 20
    7786:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    778a:	10 92 c2 0c 	sts	0x0CC2, r1
    778e:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    7792:	10 92 c6 0c 	sts	0x0CC6, r1
    7796:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    779a:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    779e:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <InitializeVideoMode>
    77a2:	84 e8       	ldi	r24, 0x84	; 132
    77a4:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    77a6:	fc 01       	movw	r30, r24
    77a8:	25 91       	lpm	r18, Z+
    77aa:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    77ac:	f9 01       	movw	r30, r18
    77ae:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    77b0:	30 83       	st	Z, r19
    77b2:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    77b4:	20 e0       	ldi	r18, 0x00	; 0
    77b6:	82 3b       	cpi	r24, 0xB2	; 178
    77b8:	92 07       	cpc	r25, r18
    77ba:	a9 f7       	brne	.-22     	; 0x77a6 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    77bc:	78 94       	sei
	
	DisplayLogo();
    77be:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <DisplayLogo>
    77c2:	0e 94 9f 71 	call	0xe33e	; 0xe33e <main>
    77c6:	0c 94 04 74 	jmp	0xe808	; 0xe808 <_exit>

000077ca <__bad_interrupt>:
    77ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000077ce <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    77ce:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    77d0:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    77d4:	ad e8       	ldi	r26, 0x8D	; 141
    77d6:	aa 95       	dec	r26
    77d8:	f1 f7       	brne	.-4      	; 0x77d6 <sub_video_mode3+0x8>
    77da:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    77dc:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    77e0:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    77e2:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    77e4:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    77e6:	02 9f       	mul	r16, r18
		add ZL,r0
    77e8:	e0 0d       	add	r30, r0
		adc ZH,r1
    77ea:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    77ec:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    77ee:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    77f0:	20 91 80 0d 	lds	r18, 0x0D80
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    77f4:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    77f6:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    77f8:	30 0f       	add	r19, r16

		cp r18,r16
    77fa:	20 17       	cp	r18, r16
		breq no_ramtiles
    77fc:	51 f0       	breq	.+20     	; 0x7812 <no_ramtiles>
		nop
    77fe:	00 00       	nop
	...

00007802 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7802:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7804:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7806:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    7808:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    780a:	0c 93       	st	X, r16

		inc r16
    780c:	03 95       	inc	r16
		cp r16,r18
    780e:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7810:	c0 f3       	brcs	.-16     	; 0x7802 <upd_loop>

00007812 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7812:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7814:	1a 95       	dec	r17
		brne .-4
    7816:	f1 f7       	brne	.-4      	; 0x7814 <no_ramtiles+0x2>
		rjmp .
    7818:	00 c0       	rjmp	.+0      	; 0x781a <no_ramtiles+0x8>
		dec r19
    781a:	3a 95       	dec	r19
		brne 1b
    781c:	d1 f7       	brne	.-12     	; 0x7812 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    781e:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7820:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    7822:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    7826:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    7828:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    782a:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    782c:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    782e:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    7832:	60 2f       	mov	r22, r16
		lsr r16
    7834:	06 95       	lsr	r16
		lsr r16
    7836:	06 95       	lsr	r16
		lsr r16 ;/8
    7838:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    783a:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    783e:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    7840:	f1 2e       	mov	r15, r17

        mov r17,r16
    7842:	10 2f       	mov	r17, r16
        lsr r16
    7844:	06 95       	lsr	r16
        lsr r16
    7846:	06 95       	lsr	r16
        lsr r16 ;/8
    7848:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    784a:	d0 0f       	add	r29, r16
		andi r17,0x7
    784c:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    784e:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    7850:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    7852:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    7856:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    785a:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    785e:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    7862:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    7864:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    7866:	5e 01       	movw	r10, r28
		mov r23,r22
    7868:	76 2f       	mov	r23, r22
		mov r24,r15
    786a:	8f 2d       	mov	r24, r15
		mov r9,r25
    786c:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    786e:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    7872:	20 2f       	mov	r18, r16
		lsr r16
    7874:	06 95       	lsr	r16
		lsr r16
    7876:	06 95       	lsr	r16
		lsr r16			;hi8
    7878:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    787a:	03 95       	inc	r16
		andi r18,7		;lo8
    787c:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    787e:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    7882:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    7884:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    7886:	01 fe       	sbrs	r0, 1
		clr r22
    7888:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    788a:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    788c:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    788e:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    7890:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    7892:	01 fe       	sbrs	r0, 1
		ser r24
    7894:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    7896:	01 fe       	sbrs	r0, 1
		clr r9
    7898:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    789a:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    789c:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    789e:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    78a0:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    78a2:	80 90 be 0c 	lds	r8, 0x0CBE

000078a6 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    78a6:	bc d3       	rcall	.+1912   	; 0x8020 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    78a8:	24 e0       	ldi	r18, 0x04	; 4
    78aa:	2a 95       	dec	r18
    78ac:	f1 f7       	brne	.-4      	; 0x78aa <next_tile_line+0x4>
    78ae:	00 00       	nop
				
		call render_tile_line
    78b0:	0e 94 99 3c 	call	0x7932	; 0x7932 <render_tile_line>

		WAIT r18,58
    78b4:	23 e1       	ldi	r18, 0x13	; 19
    78b6:	2a 95       	dec	r18
    78b8:	f1 f7       	brne	.-4      	; 0x78b6 <next_tile_line+0x10>
    78ba:	00 00       	nop

		inc r22
    78bc:	63 95       	inc	r22
		dec r8
    78be:	8a 94       	dec	r8
		breq text_frame_end
    78c0:	09 f1       	breq	.+66     	; 0x7904 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    78c2:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    78c4:	29 f0       	breq	.+10     	; 0x78d0 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    78c6:	08 e0       	ldi	r16, 0x08	; 8
    78c8:	0a 95       	dec	r16
    78ca:	f1 f7       	brne	.-4      	; 0x78c8 <next_tile_line+0x22>
    78cc:	00 00       	nop
		rjmp next_tile_line
    78ce:	eb cf       	rjmp	.-42     	; 0x78a6 <next_tile_line>

000078d0 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    78d0:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    78d2:	0c 2f       	mov	r16, r28
		andi r16,0x7
    78d4:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    78d6:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    78d8:	11 f0       	breq	.+4      	; 0x78de <next_tile_row+0xe>
		inc YL
    78da:	c3 95       	inc	r28
		rjmp 2f
    78dc:	02 c0       	rjmp	.+4      	; 0x78e2 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    78de:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    78e0:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    78e2:	8a 95       	dec	r24
		brne .+2
    78e4:	09 f4       	brne	.+2      	; 0x78e8 <next_tile_row+0x18>
		movw YL,r12
    78e6:	e6 01       	movw	r28, r12

		dec r19
    78e8:	3a 95       	dec	r19
		brne .+2
    78ea:	09 f4       	brne	.+2      	; 0x78ee <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    78ec:	67 2f       	mov	r22, r23
		brne .+2
    78ee:	09 f4       	brne	.+2      	; 0x78f2 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    78f0:	e5 01       	movw	r28, r10
		brne .+2
    78f2:	09 f4       	brne	.+2      	; 0x78f6 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    78f4:	8f 2d       	mov	r24, r15
		brne .+2
    78f6:	09 f4       	brne	.+2      	; 0x78fa <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    78f8:	99 2e       	mov	r9, r25

		brne .+2
    78fa:	09 f4       	brne	.+2      	; 0x78fe <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    78fc:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    78fe:	09 f4       	brne	.+2      	; 0x7902 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7900:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    7902:	d1 cf       	rjmp	.-94     	; 0x78a6 <next_tile_line>

00007904 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    7904:	29 e0       	ldi	r18, 0x09	; 9
    7906:	2a 95       	dec	r18
    7908:	f1 f7       	brne	.-4      	; 0x7906 <text_frame_end+0x2>
    790a:	00 00       	nop

		rcall hsync_pulse ;145
    790c:	89 d3       	rcall	.+1810   	; 0x8020 <hsync_pulse>
	
		clr r1
    790e:	11 24       	eor	r1, r1
		call RestoreBackground
    7910:	0e 94 00 4e 	call	0x9c00	; 0x9c00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7914:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    7918:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    791a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    791c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    791e:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    7922:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    7924:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7926:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    792a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    792c:	e0 93 36 00 	sts	0x0036, r30

		ret
    7930:	08 95       	ret

00007932 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    7932:	cf 93       	push	r28
		push YH
    7934:	df 93       	push	r29
		push r23
    7936:	7f 93       	push	r23
		push r22
    7938:	6f 93       	push	r22
		push r19
    793a:	3f 93       	push	r19
		push r13
    793c:	df 92       	push	r13
		push r12
    793e:	cf 92       	push	r12
		push r9
    7940:	9f 92       	push	r9
		push r7
    7942:	7f 92       	push	r7
		push r6
    7944:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    7946:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    7948:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    794a:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    794c:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    794e:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7950:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    7952:	00 0d       	add	r16, r0
		adc r17,r1
    7954:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    7956:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7958:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    795a:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    795c:	00 0d       	add	r16, r0
		adc r17,r1
    795e:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    7960:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7962:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    7964:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    7966:	69 2d       	mov	r22, r9
		andi r22,0x7		
    7968:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    796a:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    796c:	f8 94       	cli
		breq .+2
    796e:	09 f0       	breq	.+2      	; 0x7972 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    7970:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    7972:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    7974:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    7976:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    7978:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    797a:	02 0c       	add	r0, r2
	    adc r1,r3
    797c:	13 1c       	adc	r1, r3
		movw ZL,r0
    797e:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    7980:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    7982:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7984:	28 81       	ld	r18, Y
		subi YL,-8
    7986:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7988:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    798a:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    798c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    798e:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    7990:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    7992:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    7994:	04 0e       	add	r0, r20
	    adc r1,r21
    7996:	15 1e       	adc	r1, r21
		movw XL,r0
    7998:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    799a:	28 81       	ld	r18, Y
		subi YL,-8
    799c:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    799e:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    79a0:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    79a2:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    79a4:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    79a6:	a1 01       	movw	r20, r2
		brtc .+2
    79a8:	0e f4       	brtc	.+2      	; 0x79ac <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    79aa:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    79ac:	04 0e       	add	r0, r20
	    adc r1,r21
    79ae:	15 1e       	adc	r1, r21
		movw ZL,r0
    79b0:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    79b2:	3f 01       	movw	r6, r30

000079b4 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    79b4:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    79b6:	a6 0f       	add	r26, r22
		adc XH,r0
    79b8:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    79ba:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    79bc:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    79be:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    79c0:	22 c0       	rjmp	.+68     	; 0x7a06 <rom_fine_scroll>

000079c2 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    79c2:	00 c0       	rjmp	.+0      	; 0x79c4 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    79c4:	69 ee       	ldi	r22, 0xE9	; 233
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    79c6:	7c e3       	ldi	r23, 0x3C	; 60
		add r22,r0
    79c8:	60 0d       	add	r22, r0
		adc r23,r1
    79ca:	71 1d       	adc	r23, r1
		push r22
    79cc:	6f 93       	push	r22
		push r23	
    79ce:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    79d0:	08 95       	ret

000079d2 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    79d2:	0d 91       	ld	r16, X+
    79d4:	c8 95       	lpm
    79d6:	08 b9       	out	0x08, r16	; 8
    79d8:	0d 91       	ld	r16, X+
    79da:	c8 95       	lpm
    79dc:	08 b9       	out	0x08, r16	; 8
    79de:	0d 91       	ld	r16, X+
    79e0:	c8 95       	lpm
    79e2:	08 b9       	out	0x08, r16	; 8
    79e4:	0d 91       	ld	r16, X+
    79e6:	c8 95       	lpm
    79e8:	08 b9       	out	0x08, r16	; 8
    79ea:	0d 91       	ld	r16, X+
    79ec:	c8 95       	lpm
    79ee:	08 b9       	out	0x08, r16	; 8
    79f0:	0d 91       	ld	r16, X+
    79f2:	c8 95       	lpm
    79f4:	08 b9       	out	0x08, r16	; 8
    79f6:	0d 91       	ld	r16, X+
    79f8:	c8 95       	lpm
    79fa:	08 b9       	out	0x08, r16	; 8
    79fc:	0d 91       	ld	r16, X+
    79fe:	c8 95       	lpm
    7a00:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    7a02:	1e f5       	brtc	.+70     	; 0x7a4a <romloop>
		rjmp ramloop
    7a04:	40 c0       	rjmp	.+128    	; 0x7a86 <ramloop>

00007a06 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    7a06:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    7a08:	6b e0       	ldi	r22, 0x0B	; 11
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    7a0a:	7d e3       	ldi	r23, 0x3D	; 61
		add r22,r0
    7a0c:	60 0d       	add	r22, r0
		adc r23,r1
    7a0e:	71 1d       	adc	r23, r1
		push r22
    7a10:	6f 93       	push	r22
		push r23	
    7a12:	7f 93       	push	r23
		ret
    7a14:	08 95       	ret

00007a16 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    7a16:	05 91       	lpm	r16, Z+
    7a18:	00 c0       	rjmp	.+0      	; 0x7a1a <rom_fine_scroll_loop+0x4>
    7a1a:	08 b9       	out	0x08, r16	; 8
    7a1c:	05 91       	lpm	r16, Z+
    7a1e:	00 c0       	rjmp	.+0      	; 0x7a20 <rom_fine_scroll_loop+0xa>
    7a20:	08 b9       	out	0x08, r16	; 8
    7a22:	05 91       	lpm	r16, Z+
    7a24:	00 c0       	rjmp	.+0      	; 0x7a26 <rom_fine_scroll_loop+0x10>
    7a26:	08 b9       	out	0x08, r16	; 8
    7a28:	05 91       	lpm	r16, Z+
    7a2a:	00 c0       	rjmp	.+0      	; 0x7a2c <rom_fine_scroll_loop+0x16>
    7a2c:	08 b9       	out	0x08, r16	; 8
    7a2e:	05 91       	lpm	r16, Z+
    7a30:	00 c0       	rjmp	.+0      	; 0x7a32 <rom_fine_scroll_loop+0x1c>
    7a32:	08 b9       	out	0x08, r16	; 8
    7a34:	05 91       	lpm	r16, Z+
    7a36:	00 c0       	rjmp	.+0      	; 0x7a38 <rom_fine_scroll_loop+0x22>
    7a38:	08 b9       	out	0x08, r16	; 8
    7a3a:	05 91       	lpm	r16, Z+
    7a3c:	00 c0       	rjmp	.+0      	; 0x7a3e <rom_fine_scroll_loop+0x28>
    7a3e:	08 b9       	out	0x08, r16	; 8
    7a40:	05 91       	lpm	r16, Z+
    7a42:	00 c0       	rjmp	.+0      	; 0x7a44 <rom_fine_scroll_loop+0x2e>
    7a44:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    7a46:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    7a48:	f6 f0       	brts	.+60     	; 0x7a86 <ramloop>

00007a4a <romloop>:

	
	romloop:
	    lpm r16,Z+
    7a4a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7a4c:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7a4e:	28 81       	ld	r18, Y

	    lpm r16,Z+
    7a50:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7a52:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7a54:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    7a56:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7a58:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    7a5a:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7a5c:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    7a5e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7a60:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    7a62:	08 f4       	brcc	.+2      	; 0x7a66 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    7a64:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    7a66:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7a68:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    7a6a:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7a6c:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7a6e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7a70:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    7a72:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    7a74:	1a 95       	dec	r17
   
	    lpm r16,Z+
    7a76:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7a78:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7a7a:	05 91       	lpm	r16, Z+

		breq end	
    7a7c:	39 f1       	breq	.+78     	; 0x7acc <end>
	    movw ZL,r0   	;copy next tile adress
    7a7e:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7a80:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7a82:	18 f7       	brcc	.-58     	; 0x7a4a <romloop>
	
		rjmp .
    7a84:	00 c0       	rjmp	.+0      	; 0x7a86 <ramloop>

00007a86 <ramloop>:

	ramloop:

	    ld r16,Z+
    7a86:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7a88:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7a8a:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    7a8c:	01 91       	ld	r16, Z+
		subi YL,-8   		
    7a8e:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7a90:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7a92:	23 9f       	mul	r18, r19

	    ld r16,Z+
    7a94:	01 91       	ld	r16, Z+
		nop
    7a96:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7a98:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7a9a:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    7a9c:	00 c0       	rjmp	.+0      	; 0x7a9e <ramloop+0x18>
   
	    ld r16,Z+
    7a9e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7aa0:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7aa2:	08 f0       	brcs	.+2      	; 0x7aa6 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7aa4:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7aa6:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7aa8:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7aaa:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7aac:	15 1e       	adc	r1, r21
		rjmp .
    7aae:	00 c0       	rjmp	.+0      	; 0x7ab0 <ramloop+0x2a>
    
		ld r16,Z+		
    7ab0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7ab2:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    7ab4:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    7ab6:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    7ab8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7aba:	78 b8       	out	0x08, r7	; 8
		nop
    7abc:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7abe:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7ac0:	1a 95       	dec	r17
	    breq end
    7ac2:	21 f0       	breq	.+8      	; 0x7acc <end>
	
		nop
    7ac4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7ac6:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7ac8:	00 f6       	brcc	.-128    	; 0x7a4a <romloop>
		rjmp ramloop
    7aca:	dd cf       	rjmp	.-70     	; 0x7a86 <ramloop>

00007acc <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7acc:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    7ace:	27 f5       	brid	.+72     	; 0x7b18 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    7ad0:	30 f4       	brcc	.+12     	; 0x7ade <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    7ad2:	f0 01       	movw	r30, r0

00007ad4 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    7ad4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7ad6:	08 b9       	out	0x08, r16	; 8
		dec r14
    7ad8:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    7ada:	e1 f7       	brne	.-8      	; 0x7ad4 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    7adc:	1f c0       	rjmp	.+62     	; 0x7b1c <end_fine_scroll_ram>

00007ade <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    7ade:	f6 01       	movw	r30, r12
		nop
    7ae0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7ae2:	98 b8       	out	0x08, r9	; 8
		dec r14
    7ae4:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    7ae6:	c9 f0       	breq	.+50     	; 0x7b1a <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    7ae8:	05 91       	lpm	r16, Z+
    7aea:	08 b9       	out	0x08, r16	; 8
    7aec:	ea 94       	dec	r14
    7aee:	a9 f0       	breq	.+42     	; 0x7b1a <end_fine_scroll_rom>
    7af0:	05 91       	lpm	r16, Z+
    7af2:	08 b9       	out	0x08, r16	; 8
    7af4:	ea 94       	dec	r14
    7af6:	89 f0       	breq	.+34     	; 0x7b1a <end_fine_scroll_rom>
    7af8:	05 91       	lpm	r16, Z+
    7afa:	08 b9       	out	0x08, r16	; 8
    7afc:	ea 94       	dec	r14
    7afe:	69 f0       	breq	.+26     	; 0x7b1a <end_fine_scroll_rom>
    7b00:	05 91       	lpm	r16, Z+
    7b02:	08 b9       	out	0x08, r16	; 8
    7b04:	ea 94       	dec	r14
    7b06:	49 f0       	breq	.+18     	; 0x7b1a <end_fine_scroll_rom>
    7b08:	05 91       	lpm	r16, Z+
    7b0a:	08 b9       	out	0x08, r16	; 8
    7b0c:	ea 94       	dec	r14
    7b0e:	29 f0       	breq	.+10     	; 0x7b1a <end_fine_scroll_rom>
    7b10:	05 91       	lpm	r16, Z+
    7b12:	08 b9       	out	0x08, r16	; 8
    7b14:	ea 94       	dec	r14
    7b16:	09 f0       	breq	.+2      	; 0x7b1a <end_fine_scroll_rom>

00007b18 <end_fine_scroll>:
	...

00007b1a <end_fine_scroll_rom>:
	...

00007b1c <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    7b1c:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    7b1e:	08 b9       	out	0x08, r16	; 8

		pop r6
    7b20:	6f 90       	pop	r6
		pop r7
    7b22:	7f 90       	pop	r7
		pop r9
    7b24:	9f 90       	pop	r9
		pop r12
    7b26:	cf 90       	pop	r12
		pop r13
    7b28:	df 90       	pop	r13
		pop r19
    7b2a:	3f 91       	pop	r19
		pop r22
    7b2c:	6f 91       	pop	r22
		pop r23
    7b2e:	7f 91       	pop	r23
		pop YH
    7b30:	df 91       	pop	r29
		pop YL
    7b32:	cf 91       	pop	r28

		ret
    7b34:	08 95       	ret

00007b36 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7b36:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7b38:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    7b3c:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    7b40:	82 9f       	mul	r24, r18
	add ZL,r0
    7b42:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b44:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7b46:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7b48:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7b4a:	62 9f       	mul	r22, r18
	add XL,r0
    7b4c:	a0 0d       	add	r26, r0
	adc XH,r1
    7b4e:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    7b50:	15 90       	lpm	r1, Z+
    7b52:	1d 92       	st	X+, r1
    7b54:	15 90       	lpm	r1, Z+
    7b56:	1d 92       	st	X+, r1
    7b58:	15 90       	lpm	r1, Z+
    7b5a:	1d 92       	st	X+, r1
    7b5c:	15 90       	lpm	r1, Z+
    7b5e:	1d 92       	st	X+, r1
    7b60:	15 90       	lpm	r1, Z+
    7b62:	1d 92       	st	X+, r1
    7b64:	15 90       	lpm	r1, Z+
    7b66:	1d 92       	st	X+, r1
    7b68:	15 90       	lpm	r1, Z+
    7b6a:	1d 92       	st	X+, r1
    7b6c:	15 90       	lpm	r1, Z+
    7b6e:	1d 92       	st	X+, r1
    7b70:	15 90       	lpm	r1, Z+
    7b72:	1d 92       	st	X+, r1
    7b74:	15 90       	lpm	r1, Z+
    7b76:	1d 92       	st	X+, r1
    7b78:	15 90       	lpm	r1, Z+
    7b7a:	1d 92       	st	X+, r1
    7b7c:	15 90       	lpm	r1, Z+
    7b7e:	1d 92       	st	X+, r1
    7b80:	15 90       	lpm	r1, Z+
    7b82:	1d 92       	st	X+, r1
    7b84:	15 90       	lpm	r1, Z+
    7b86:	1d 92       	st	X+, r1
    7b88:	15 90       	lpm	r1, Z+
    7b8a:	1d 92       	st	X+, r1
    7b8c:	15 90       	lpm	r1, Z+
    7b8e:	1d 92       	st	X+, r1
    7b90:	15 90       	lpm	r1, Z+
    7b92:	1d 92       	st	X+, r1
    7b94:	15 90       	lpm	r1, Z+
    7b96:	1d 92       	st	X+, r1
    7b98:	15 90       	lpm	r1, Z+
    7b9a:	1d 92       	st	X+, r1
    7b9c:	15 90       	lpm	r1, Z+
    7b9e:	1d 92       	st	X+, r1
    7ba0:	15 90       	lpm	r1, Z+
    7ba2:	1d 92       	st	X+, r1
    7ba4:	15 90       	lpm	r1, Z+
    7ba6:	1d 92       	st	X+, r1
    7ba8:	15 90       	lpm	r1, Z+
    7baa:	1d 92       	st	X+, r1
    7bac:	15 90       	lpm	r1, Z+
    7bae:	1d 92       	st	X+, r1
    7bb0:	15 90       	lpm	r1, Z+
    7bb2:	1d 92       	st	X+, r1
    7bb4:	15 90       	lpm	r1, Z+
    7bb6:	1d 92       	st	X+, r1
    7bb8:	15 90       	lpm	r1, Z+
    7bba:	1d 92       	st	X+, r1
    7bbc:	15 90       	lpm	r1, Z+
    7bbe:	1d 92       	st	X+, r1
    7bc0:	15 90       	lpm	r1, Z+
    7bc2:	1d 92       	st	X+, r1
    7bc4:	15 90       	lpm	r1, Z+
    7bc6:	1d 92       	st	X+, r1
    7bc8:	15 90       	lpm	r1, Z+
    7bca:	1d 92       	st	X+, r1
    7bcc:	15 90       	lpm	r1, Z+
    7bce:	1d 92       	st	X+, r1
    7bd0:	15 90       	lpm	r1, Z+
    7bd2:	1d 92       	st	X+, r1
    7bd4:	15 90       	lpm	r1, Z+
    7bd6:	1d 92       	st	X+, r1
    7bd8:	15 90       	lpm	r1, Z+
    7bda:	1d 92       	st	X+, r1
    7bdc:	15 90       	lpm	r1, Z+
    7bde:	1d 92       	st	X+, r1
    7be0:	15 90       	lpm	r1, Z+
    7be2:	1d 92       	st	X+, r1
    7be4:	15 90       	lpm	r1, Z+
    7be6:	1d 92       	st	X+, r1
    7be8:	15 90       	lpm	r1, Z+
    7bea:	1d 92       	st	X+, r1
    7bec:	15 90       	lpm	r1, Z+
    7bee:	1d 92       	st	X+, r1
    7bf0:	15 90       	lpm	r1, Z+
    7bf2:	1d 92       	st	X+, r1
    7bf4:	15 90       	lpm	r1, Z+
    7bf6:	1d 92       	st	X+, r1
    7bf8:	15 90       	lpm	r1, Z+
    7bfa:	1d 92       	st	X+, r1
    7bfc:	15 90       	lpm	r1, Z+
    7bfe:	1d 92       	st	X+, r1
    7c00:	15 90       	lpm	r1, Z+
    7c02:	1d 92       	st	X+, r1
    7c04:	15 90       	lpm	r1, Z+
    7c06:	1d 92       	st	X+, r1
    7c08:	15 90       	lpm	r1, Z+
    7c0a:	1d 92       	st	X+, r1
    7c0c:	15 90       	lpm	r1, Z+
    7c0e:	1d 92       	st	X+, r1
    7c10:	15 90       	lpm	r1, Z+
    7c12:	1d 92       	st	X+, r1
    7c14:	15 90       	lpm	r1, Z+
    7c16:	1d 92       	st	X+, r1
    7c18:	15 90       	lpm	r1, Z+
    7c1a:	1d 92       	st	X+, r1
    7c1c:	15 90       	lpm	r1, Z+
    7c1e:	1d 92       	st	X+, r1
    7c20:	15 90       	lpm	r1, Z+
    7c22:	1d 92       	st	X+, r1
    7c24:	15 90       	lpm	r1, Z+
    7c26:	1d 92       	st	X+, r1
    7c28:	15 90       	lpm	r1, Z+
    7c2a:	1d 92       	st	X+, r1
    7c2c:	15 90       	lpm	r1, Z+
    7c2e:	1d 92       	st	X+, r1
    7c30:	15 90       	lpm	r1, Z+
    7c32:	1d 92       	st	X+, r1
    7c34:	15 90       	lpm	r1, Z+
    7c36:	1d 92       	st	X+, r1
    7c38:	15 90       	lpm	r1, Z+
    7c3a:	1d 92       	st	X+, r1
    7c3c:	15 90       	lpm	r1, Z+
    7c3e:	1d 92       	st	X+, r1
    7c40:	15 90       	lpm	r1, Z+
    7c42:	1d 92       	st	X+, r1
    7c44:	15 90       	lpm	r1, Z+
    7c46:	1d 92       	st	X+, r1
    7c48:	15 90       	lpm	r1, Z+
    7c4a:	1d 92       	st	X+, r1
    7c4c:	15 90       	lpm	r1, Z+
    7c4e:	1d 92       	st	X+, r1
	clr r1
    7c50:	11 24       	eor	r1, r1
	ret
    7c52:	08 95       	ret

00007c54 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7c54:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7c56:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    7c58:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    7c5a:	82 9f       	mul	r24, r18
	add ZL,r0
    7c5c:	e0 0d       	add	r30, r0
	adc ZH,r1
    7c5e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7c60:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7c62:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7c64:	62 9f       	mul	r22, r18
	add XL,r0
    7c66:	a0 0d       	add	r26, r0
	adc XH,r1
    7c68:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7c6a:	11 90       	ld	r1, Z+
    7c6c:	1d 92       	st	X+, r1
    7c6e:	11 90       	ld	r1, Z+
    7c70:	1d 92       	st	X+, r1
    7c72:	11 90       	ld	r1, Z+
    7c74:	1d 92       	st	X+, r1
    7c76:	11 90       	ld	r1, Z+
    7c78:	1d 92       	st	X+, r1
    7c7a:	11 90       	ld	r1, Z+
    7c7c:	1d 92       	st	X+, r1
    7c7e:	11 90       	ld	r1, Z+
    7c80:	1d 92       	st	X+, r1
    7c82:	11 90       	ld	r1, Z+
    7c84:	1d 92       	st	X+, r1
    7c86:	11 90       	ld	r1, Z+
    7c88:	1d 92       	st	X+, r1
    7c8a:	11 90       	ld	r1, Z+
    7c8c:	1d 92       	st	X+, r1
    7c8e:	11 90       	ld	r1, Z+
    7c90:	1d 92       	st	X+, r1
    7c92:	11 90       	ld	r1, Z+
    7c94:	1d 92       	st	X+, r1
    7c96:	11 90       	ld	r1, Z+
    7c98:	1d 92       	st	X+, r1
    7c9a:	11 90       	ld	r1, Z+
    7c9c:	1d 92       	st	X+, r1
    7c9e:	11 90       	ld	r1, Z+
    7ca0:	1d 92       	st	X+, r1
    7ca2:	11 90       	ld	r1, Z+
    7ca4:	1d 92       	st	X+, r1
    7ca6:	11 90       	ld	r1, Z+
    7ca8:	1d 92       	st	X+, r1
    7caa:	11 90       	ld	r1, Z+
    7cac:	1d 92       	st	X+, r1
    7cae:	11 90       	ld	r1, Z+
    7cb0:	1d 92       	st	X+, r1
    7cb2:	11 90       	ld	r1, Z+
    7cb4:	1d 92       	st	X+, r1
    7cb6:	11 90       	ld	r1, Z+
    7cb8:	1d 92       	st	X+, r1
    7cba:	11 90       	ld	r1, Z+
    7cbc:	1d 92       	st	X+, r1
    7cbe:	11 90       	ld	r1, Z+
    7cc0:	1d 92       	st	X+, r1
    7cc2:	11 90       	ld	r1, Z+
    7cc4:	1d 92       	st	X+, r1
    7cc6:	11 90       	ld	r1, Z+
    7cc8:	1d 92       	st	X+, r1
    7cca:	11 90       	ld	r1, Z+
    7ccc:	1d 92       	st	X+, r1
    7cce:	11 90       	ld	r1, Z+
    7cd0:	1d 92       	st	X+, r1
    7cd2:	11 90       	ld	r1, Z+
    7cd4:	1d 92       	st	X+, r1
    7cd6:	11 90       	ld	r1, Z+
    7cd8:	1d 92       	st	X+, r1
    7cda:	11 90       	ld	r1, Z+
    7cdc:	1d 92       	st	X+, r1
    7cde:	11 90       	ld	r1, Z+
    7ce0:	1d 92       	st	X+, r1
    7ce2:	11 90       	ld	r1, Z+
    7ce4:	1d 92       	st	X+, r1
    7ce6:	11 90       	ld	r1, Z+
    7ce8:	1d 92       	st	X+, r1
    7cea:	11 90       	ld	r1, Z+
    7cec:	1d 92       	st	X+, r1
    7cee:	11 90       	ld	r1, Z+
    7cf0:	1d 92       	st	X+, r1
    7cf2:	11 90       	ld	r1, Z+
    7cf4:	1d 92       	st	X+, r1
    7cf6:	11 90       	ld	r1, Z+
    7cf8:	1d 92       	st	X+, r1
    7cfa:	11 90       	ld	r1, Z+
    7cfc:	1d 92       	st	X+, r1
    7cfe:	11 90       	ld	r1, Z+
    7d00:	1d 92       	st	X+, r1
    7d02:	11 90       	ld	r1, Z+
    7d04:	1d 92       	st	X+, r1
    7d06:	11 90       	ld	r1, Z+
    7d08:	1d 92       	st	X+, r1
    7d0a:	11 90       	ld	r1, Z+
    7d0c:	1d 92       	st	X+, r1
    7d0e:	11 90       	ld	r1, Z+
    7d10:	1d 92       	st	X+, r1
    7d12:	11 90       	ld	r1, Z+
    7d14:	1d 92       	st	X+, r1
    7d16:	11 90       	ld	r1, Z+
    7d18:	1d 92       	st	X+, r1
    7d1a:	11 90       	ld	r1, Z+
    7d1c:	1d 92       	st	X+, r1
    7d1e:	11 90       	ld	r1, Z+
    7d20:	1d 92       	st	X+, r1
    7d22:	11 90       	ld	r1, Z+
    7d24:	1d 92       	st	X+, r1
    7d26:	11 90       	ld	r1, Z+
    7d28:	1d 92       	st	X+, r1
    7d2a:	11 90       	ld	r1, Z+
    7d2c:	1d 92       	st	X+, r1
    7d2e:	11 90       	ld	r1, Z+
    7d30:	1d 92       	st	X+, r1
    7d32:	11 90       	ld	r1, Z+
    7d34:	1d 92       	st	X+, r1
    7d36:	11 90       	ld	r1, Z+
    7d38:	1d 92       	st	X+, r1
    7d3a:	11 90       	ld	r1, Z+
    7d3c:	1d 92       	st	X+, r1
    7d3e:	11 90       	ld	r1, Z+
    7d40:	1d 92       	st	X+, r1
    7d42:	11 90       	ld	r1, Z+
    7d44:	1d 92       	st	X+, r1
    7d46:	11 90       	ld	r1, Z+
    7d48:	1d 92       	st	X+, r1
    7d4a:	11 90       	ld	r1, Z+
    7d4c:	1d 92       	st	X+, r1
    7d4e:	11 90       	ld	r1, Z+
    7d50:	1d 92       	st	X+, r1
    7d52:	11 90       	ld	r1, Z+
    7d54:	1d 92       	st	X+, r1
    7d56:	11 90       	ld	r1, Z+
    7d58:	1d 92       	st	X+, r1
    7d5a:	11 90       	ld	r1, Z+
    7d5c:	1d 92       	st	X+, r1
    7d5e:	11 90       	ld	r1, Z+
    7d60:	1d 92       	st	X+, r1
    7d62:	11 90       	ld	r1, Z+
    7d64:	1d 92       	st	X+, r1
    7d66:	11 90       	ld	r1, Z+
    7d68:	1d 92       	st	X+, r1
	clr r1
    7d6a:	11 24       	eor	r1, r1
	ret
    7d6c:	08 95       	ret

00007d6e <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7d6e:	0f 93       	push	r16
	push r17
    7d70:	1f 93       	push	r17
	push YL
    7d72:	cf 93       	push	r28
	push YH
    7d74:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7d76:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7d78:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7d7a:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    7d7c:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    7d7e:	e0 0d       	add	r30, r0
	adc ZH,r1
    7d80:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7d82:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7d84:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7d86:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7d88:	8e 9f       	mul	r24, r30
	movw r26,r0
    7d8a:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7d8c:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7d8e:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    7d90:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    7d92:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    7d94:	00 24       	eor	r0, r0
	add YL,r1
    7d96:	c1 0d       	add	r28, r1
	adc YH,r0		
    7d98:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7d9a:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7d9c:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7d9e:	ea 0f       	add	r30, r26
	adc ZH,r27
    7da0:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7da2:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7da4:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7da6:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7da8:	69 9f       	mul	r22, r25
	add XL,r0
    7daa:	a0 0d       	add	r26, r0
	adc XH,r1
    7dac:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7dae:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7db0:	dd 27       	eor	r29, r29

	cpi r20,0	
    7db2:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7db4:	51 f4       	brne	.+20     	; 0x7dca <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7db6:	a2 0f       	add	r26, r18
	adc XH,r1
    7db8:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7dba:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7dbc:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7dbe:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7dc0:	11 c0       	rjmp	.+34     	; 0x7de4 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7dc2:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7dc4:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7dc6:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7dc8:	0d c0       	rjmp	.+26     	; 0x7de4 <x_check_end>

00007dca <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7dca:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7dcc:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7dce:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7dd0:	04 c0       	rjmp	.+8      	; 0x7dda <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7dd2:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7dd4:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7dd6:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7dd8:	05 c0       	rjmp	.+10     	; 0x7de4 <x_check_end>

00007dda <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7dda:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7ddc:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7dde:	e2 0f       	add	r30, r18
	adc ZH,r1
    7de0:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7de2:	31 97       	sbiw	r30, 0x01	; 1

00007de4 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7de4:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7de6:	51 f4       	brne	.+20     	; 0x7dfc <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    7de8:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7dea:	93 9f       	mul	r25, r19
	add XL,r0
    7dec:	a0 0d       	add	r26, r0
	adc XH,r1
    7dee:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7df0:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    7df2:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    7df4:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    7df6:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    7df8:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    7dfa:	0a c0       	rjmp	.+20     	; 0x7e10 <y_check_end>

00007dfc <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7dfc:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7dfe:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7e00:	63 2f       	mov	r22, r19
	dec r22
    7e02:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7e04:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7e06:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    7e08:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7e0a:	56 9f       	mul	r21, r22
	add ZL,r0
    7e0c:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7e0e:	f1 1d       	adc	r31, r1

00007e10 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7e10:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7e12:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7e14:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7e16:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    7e18:	00 ff       	sbrs	r16, 0
	clr r23
    7e1a:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7e1c:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7e1e:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7e20:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7e22:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7e24:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7e26:	59 1b       	sub	r21, r25

00007e28 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    7e28:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7e2a:	48 1b       	sub	r20, r24

00007e2c <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7e2c:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7e2e:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7e30:	2c 93       	st	X, r18
	adiw XL,1
    7e32:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7e34:	e6 0f       	add	r30, r22
	adc ZH,r23
    7e36:	f7 1f       	adc	r31, r23
	dec r20
    7e38:	4a 95       	dec	r20
	brne x_loop
    7e3a:	c1 f7       	brne	.-16     	; 0x7e2c <x_loop>

	add ZL,YL		;src+=srcXdiff
    7e3c:	ec 0f       	add	r30, r28
	adc ZH,YH
    7e3e:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7e40:	a8 0f       	add	r26, r24
	adc XH,r1
    7e42:	b1 1d       	adc	r27, r1
	dec r21
    7e44:	5a 95       	dec	r21
	brne y_loop
    7e46:	81 f7       	brne	.-32     	; 0x7e28 <y_loop>


	pop YH
    7e48:	df 91       	pop	r29
	pop YL
    7e4a:	cf 91       	pop	r28
	pop r17
    7e4c:	1f 91       	pop	r17
	pop r16
    7e4e:	0f 91       	pop	r16
	ret
    7e50:	08 95       	ret

00007e52 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7e52:	0f 92       	push	r0
	push r1
    7e54:	1f 92       	push	r1
	push ZL;2
    7e56:	ef 93       	push	r30
	push ZH;2
    7e58:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7e5a:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7e5c:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7e5e:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7e62:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    7e64:	f1 e0       	ldi	r31, 0x01	; 1

00007e66 <latency_loop>:
latency_loop:
	cp ZL,ZH
    7e66:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7e68:	00 f0       	brcs	.+0      	; 0x7e6a <latency_loop+0x4>
	inc ZH
    7e6a:	f3 95       	inc	r31
	cpi ZH,10
    7e6c:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7e6e:	d8 f3       	brcs	.-10     	; 0x7e66 <latency_loop>
	jmp .
    7e70:	0c 94 3a 3f 	jmp	0x7e74	; 0x7e74 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7e74:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7e78:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7e7a:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7e7e:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    7e82:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7e84:	57 c0       	rjmp	.+174    	; 0x7f34 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7e86:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7e88:	98 f0       	brcs	.+38     	; 0x7eb0 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7e8a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7e8c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7e90:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7e92:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7e96:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7e98:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7e9a:	26 f4       	brtc	.+8      	; 0x7ea4 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7e9c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7e9e:	0e 94 21 40 	call	0x8042	; 0x8042 <update_sound>
	rjmp sync_end
    7ea2:	b7 c0       	rjmp	.+366    	; 0x8012 <sync_end>

00007ea4 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7ea4:	e5 e1       	ldi	r30, 0x15	; 21
    7ea6:	ea 95       	dec	r30
    7ea8:	f1 f7       	brne	.-4      	; 0x7ea6 <sync_pre_eq_no_sound_update+0x2>
    7eaa:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7eac:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7eae:	b1 c0       	rjmp	.+354    	; 0x8012 <sync_end>

00007eb0 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7eb0:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7eb2:	38 f1       	brcs	.+78     	; 0x7f02 <sync_post_eq>

	rjmp .
    7eb4:	00 c0       	rjmp	.+0      	; 0x7eb6 <sync_eq+0x6>
	rjmp .
    7eb6:	00 c0       	rjmp	.+0      	; 0x7eb8 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7eb8:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7eba:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7ebc:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7ebe:	16 f4       	brtc	.+4      	; 0x7ec4 <sync_eq_skip>
	
	call update_sound
    7ec0:	0e 94 21 40 	call	0x8042	; 0x8042 <update_sound>

00007ec4 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7ec4:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7ec6:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7eca:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7ecc:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7ed0:	a0 c0       	rjmp	.+320    	; 0x8012 <sync_end>

00007ed2 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7ed2:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7ed4:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7ed6:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7ed8:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7edc:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7ede:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7ee0:	00 f0       	brcs	.+0      	; 0x7ee2 <__vector_14+0x10>

	cpi ZL,2
    7ee2:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7ee4:	00 f0       	brcs	.+0      	; 0x7ee6 <__vector_14+0x14>

	cpi ZL,3
    7ee6:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    7ee8:	00 f0       	brcs	.+0      	; 0x7eea <__vector_14+0x18>

	cpi ZL,4
    7eea:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    7eec:	00 f0       	brcs	.+0      	; 0x7eee <__vector_14+0x1c>

	cpi ZL,5
    7eee:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7ef0:	00 f0       	brcs	.+0      	; 0x7ef2 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7ef2:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7ef4:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7ef6:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7efa:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7efc:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7efe:	ef 91       	pop	r30
	reti
    7f00:	18 95       	reti

00007f02 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7f02:	00 c0       	rjmp	.+0      	; 0x7f04 <sync_post_eq+0x2>

	bst ZL,0
    7f04:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f06:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7f08:	26 f4       	brtc	.+8      	; 0x7f12 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7f0a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7f0c:	0e 94 21 40 	call	0x8042	; 0x8042 <update_sound>
	rjmp sync_pre_eq_cont
    7f10:	05 c0       	rjmp	.+10     	; 0x7f1c <sync_pre_eq_cont>

00007f12 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7f12:	e5 e1       	ldi	r30, 0x15	; 21
    7f14:	ea 95       	dec	r30
    7f16:	f1 f7       	brne	.-4      	; 0x7f14 <sync_post_eq_no_sound_update+0x2>
    7f18:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7f1a:	28 9a       	sbi	0x05, 0	; 5

00007f1c <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7f1c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7f20:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7f22:	09 f0       	breq	.+2      	; 0x7f26 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7f24:	76 c0       	rjmp	.+236    	; 0x8012 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7f26:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7f28:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7f2c:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7f2e:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7f32:	6f c0       	rjmp	.+222    	; 0x8012 <sync_end>

00007f34 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7f34:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7f36:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7f3a:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7f3c:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7f40:	00 c0       	rjmp	.+0      	; 0x7f42 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f42:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7f44:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7f46:	00 c0       	rjmp	.+0      	; 0x7f48 <sync_hsync+0x14>
	call update_sound
    7f48:	0e 94 21 40 	call	0x8042	; 0x8042 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7f4c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7f4e:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7f52:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7f54:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7f58:	ef 17       	cp	r30, r31
	brsh no_render
    7f5a:	d0 f4       	brcc	.+52     	; 0x7f90 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7f5c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7f5e:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7f62:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7f64:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7f68:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7f6a:	ef 17       	cp	r30, r31
	brlo no_render
    7f6c:	88 f0       	brcs	.+34     	; 0x7f90 <no_render>

	;push r1-r29
	ldi ZL,29
    7f6e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7f70:	ff 27       	eor	r31, r31

00007f72 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7f72:	00 80       	ld	r0, Z
	push r0
    7f74:	0f 92       	push	r0
	dec ZL
    7f76:	ea 95       	dec	r30
	brne push_loop	
    7f78:	e1 f7       	brne	.-8      	; 0x7f72 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7f7a:	06 e0       	ldi	r16, 0x06	; 6
    7f7c:	0a 95       	dec	r16
    7f7e:	f1 f7       	brne	.-4      	; 0x7f7c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7f80:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7f84:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7f86:	ff 27       	eor	r31, r31

00007f88 <pop_loop>:
pop_loop:
	pop r0
    7f88:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7f8a:	01 92       	st	Z+, r0
	cpi ZL,30
    7f8c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7f8e:	e0 f3       	brcs	.-8      	; 0x7f88 <pop_loop>

00007f90 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7f90:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7f94:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7f96:	09 f0       	breq	.+2      	; 0x7f9a <no_render+0xa>
	rjmp sync_end
    7f98:	3c c0       	rjmp	.+120    	; 0x8012 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7f9a:	2f 93       	push	r18
	push r19
    7f9c:	3f 93       	push	r19
	push r20
    7f9e:	4f 93       	push	r20
	push r21
    7fa0:	5f 93       	push	r21
	push r22
    7fa2:	6f 93       	push	r22
	push r23
    7fa4:	7f 93       	push	r23
	push r24
    7fa6:	8f 93       	push	r24
	push r25
    7fa8:	9f 93       	push	r25
	push r26
    7faa:	af 93       	push	r26
	push r27
    7fac:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7fae:	78 94       	sei
	clr r1
    7fb0:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7fb2:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7fb4:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7fb8:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7fba:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7fbe:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7fc2:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7fc6:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7fc8:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7fcc:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7fd0:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7fd4:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7fd8:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7fda:	f1 05       	cpc	r31, r1
	breq .+2 
    7fdc:	09 f0       	breq	.+2      	; 0x7fe0 <no_render+0x50>
	icall
    7fde:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7fe0:	0e 94 c0 41 	call	0x8380	; 0x8380 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7fe4:	0e 94 5e 50 	call	0xa0bc	; 0xa0bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7fe8:	0e 94 1b 40 	call	0x8036	; 0x8036 <process_music>
	clr r1
    7fec:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7fee:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    7ff2:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7ff6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7ff8:	f1 05       	cpc	r31, r1
	breq .+2 
    7ffa:	09 f0       	breq	.+2      	; 0x7ffe <no_render+0x6e>
	icall
    7ffc:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7ffe:	bf 91       	pop	r27
	pop r26
    8000:	af 91       	pop	r26
	pop r25
    8002:	9f 91       	pop	r25
	pop r24
    8004:	8f 91       	pop	r24
	pop r23
    8006:	7f 91       	pop	r23
	pop r22
    8008:	6f 91       	pop	r22
	pop r21
    800a:	5f 91       	pop	r21
	pop r20
    800c:	4f 91       	pop	r20
	pop r19
    800e:	3f 91       	pop	r19
	pop r18
    8010:	2f 91       	pop	r18

00008012 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8012:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8014:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8016:	ff 91       	pop	r31
	pop ZL
    8018:	ef 91       	pop	r30
	pop r1
    801a:	1f 90       	pop	r1
	pop r0
    801c:	0f 90       	pop	r0
	reti
    801e:	18 95       	reti

00008020 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8020:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8022:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8024:	00 c0       	rjmp	.+0      	; 0x8026 <hsync_pulse+0x6>
	call update_sound
    8026:	0e 94 21 40 	call	0x8042	; 0x8042 <update_sound>

	lds ZL,sync_pulse
    802a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    802e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8030:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    8034:	08 95       	ret

00008036 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8036:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    803a:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    803c:	0e 94 47 45 	call	0x8a8e	; 0x8a8e <ProcessMusic>
#endif

	ret
    8040:	08 95       	ret

00008042 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    8042:	0f 93       	push	r16
	push r17
    8044:	1f 93       	push	r17
	push r18
    8046:	2f 93       	push	r18
	push r28
    8048:	cf 93       	push	r28
	push r29
    804a:	df 93       	push	r29

	mov r18,ZL
    804c:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    804e:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    8052:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    8056:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8058:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    805c:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    8060:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    8064:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8066:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8068:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    806c:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    8070:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    8074:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8076:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8078:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    807a:	d0 2d       	mov	r29, r0
	nop
    807c:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    807e:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    8082:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    8086:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8088:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    808c:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    8090:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    8094:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8096:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8098:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    809c:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    80a0:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    80a4:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    80a6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    80a8:	20 ff       	sbrs	r18, 0
	rjmp .
    80aa:	00 c0       	rjmp	.+0      	; 0x80ac <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    80ac:	01 03       	mulsu	r16, r17
	clr r0
    80ae:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    80b0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    80b2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    80b4:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    80b6:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    80ba:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    80be:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    80c0:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    80c4:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    80c8:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    80cc:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    80ce:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    80d0:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    80d4:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    80d8:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    80dc:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    80de:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    80e0:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    80e2:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    80e4:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    80e8:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    80ec:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    80f0:	ea 95       	dec	r30
	brpl ch4_no_shift	
    80f2:	92 f4       	brpl	.+36     	; 0x8118 <ch4_no_shift>

	lds ZH,tr4_params
    80f4:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    80f8:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    80fa:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    80fc:	00 2e       	mov	r0, r16
	lsr r0
    80fe:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8100:	00 26       	eor	r0, r16
	bst r0,0
    8102:	00 fa       	bst	r0, 0
	lsr r17
    8104:	16 95       	lsr	r17
	ror r16
    8106:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    8108:	16 f9       	bld	r17, 6
	sbrs ZH,0
    810a:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    810c:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    810e:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    8112:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    8116:	03 c0       	rjmp	.+6      	; 0x811e <ch4_end>

00008118 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8118:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    811a:	1a 95       	dec	r17
	brne .-4
    811c:	f1 f7       	brne	.-4      	; 0x811a <ch4_no_shift+0x2>

0000811e <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    811e:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    8122:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8124:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8126:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8128:	21 ff       	sbrs	r18, 1
	rjmp .
    812a:	00 c0       	rjmp	.+0      	; 0x812c <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    812c:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    812e:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8130:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    8134:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8136:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8138:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    813a:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    813c:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    8140:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    8144:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8146:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    814a:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    814e:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    8152:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8154:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    8158:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    815a:	f0 1f       	adc	r31, r16

	movw r16,ZL
    815c:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    815e:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    8162:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    8166:	00 19       	sub	r16, r0
	sbc r17,r1
    8168:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    816a:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    816e:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    8172:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8174:	f1 05       	cpc	r31, r1
	brlo .+2
    8176:	08 f0       	brcs	.+2      	; 0x817a <ch4_end+0x5c>
	movw ZL,r16
    8178:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    817a:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    817e:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    8182:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8184:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    8188:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    818a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    818c:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    818e:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8190:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8192:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8194:	d0 05       	cpc	r29, r0
	brlt .+2
    8196:	0c f0       	brlt	.+2      	; 0x819a <ch4_end+0x7c>
	ldi r28,127
    8198:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    819a:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    819c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    819e:	d0 05       	cpc	r29, r0
	brge .+2
    81a0:	0c f4       	brge	.+2      	; 0x81a4 <ch4_end+0x86>
	ldi r28,-128
    81a2:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    81a4:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    81a6:	c0 93 b3 00 	sts	0x00B3, r28

000081aa <update_sound_end>:
#endif


update_sound_end:

	pop r29
    81aa:	df 91       	pop	r29
	pop r28
    81ac:	cf 91       	pop	r28
	pop r18
    81ae:	2f 91       	pop	r18
	pop r17
    81b0:	1f 91       	pop	r17
	pop r16
    81b2:	0f 91       	pop	r16
	
	ret
    81b4:	08 95       	ret

000081b6 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    81b6:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    81ba:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    81be:	08 95       	ret

000081c0 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    81c0:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    81c2:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    81c4:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    81c6:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    81c8:	6c e1       	ldi	r22, 0x1C	; 28

000081ca <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    81ca:	6d 93       	st	X+, r22
	sbiw r30,1
    81cc:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    81ce:	e9 f7       	brne	.-6      	; 0x81ca <fill_vram_loop>

	clr r1
    81d0:	11 24       	eor	r1, r1

	ret
    81d2:	08 95       	ret

000081d4 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    81d4:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    81d6:	76 2f       	mov	r23, r22
	lsr r22
    81d8:	66 95       	lsr	r22
	lsr r22
    81da:	66 95       	lsr	r22
	lsr r22			;y>>3
    81dc:	66 95       	lsr	r22
	ldi r18,8		
    81de:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    81e0:	82 9f       	mul	r24, r18
	movw XL,r0
    81e2:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    81e4:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    81e6:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    81e8:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    81ea:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    81ec:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    81ee:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    81f0:	4c 93       	st	X, r20

	clr r1
    81f2:	11 24       	eor	r1, r1

	ret
    81f4:	08 95       	ret

000081f6 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    81f6:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    81fa:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    81fe:	08 95       	ret

00008200 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8200:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    8204:	81 70       	andi	r24, 0x01	; 1
	ret
    8206:	08 95       	ret

00008208 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8208:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    820c:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    820e:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    8212:	08 95       	ret

00008214 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8214:	88 23       	and	r24, r24
	brne rj_p2
    8216:	29 f4       	brne	.+10     	; 0x8222 <rj_p2>
		
	lds r24,joypad1_status_lo
    8218:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    821c:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    8220:	08 95       	ret

00008222 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8222:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    8226:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    822a:	08 95       	ret

0000822c <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    822c:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    822e:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8230:	f1 f7       	brne	.-4      	; 0x822e <WaitUs+0x2>
	nop
    8232:	00 00       	nop
	sbiw r24,1
    8234:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8236:	d1 f7       	brne	.-12     	; 0x822c <WaitUs>

	ret
    8238:	08 95       	ret

0000823a <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    823a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    823c:	fe cf       	rjmp	.-4      	; 0x823a <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    823e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8240:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8242:	60 bd       	out	0x20, r22	; 32
   cli
    8244:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8246:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8248:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    824a:	78 94       	sei
   ret
    824c:	08 95       	ret

0000824e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    824e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8250:	fe cf       	rjmp	.-4      	; 0x824e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8252:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8254:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8256:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8258:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    825a:	80 b5       	in	r24, 0x20	; 32
   sei
    825c:	78 94       	sei
   ret
    825e:	08 95       	ret

00008260 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8260:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8262:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8266:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    826a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    826e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    8272:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8276:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    827a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    827e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8282:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8286:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8288:	80 93 81 00 	sts	0x0081, r24

		cli
    828c:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    828e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8290:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8294:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8296:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    829a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    829c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    82a0:	90 93 60 00 	sts	0x0060, r25
	
		sei
    82a4:	78 94       	sei

000082a6 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    82a6:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    82aa:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    82ac:	e0 f3       	brcs	.-8      	; 0x82a6 <wait>

		ret
    82ae:	08 95       	ret

000082b0 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    82b0:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    82b4:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    82b8:	08 95       	ret

000082ba <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    82ba:	0f 93       	push	r16
		push r17
    82bc:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    82be:	0f b7       	in	r16, 0x3f	; 63
		push r16
    82c0:	0f 93       	push	r16

		lds r16,sync_pulse
    82c2:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    82c6:	03 95       	inc	r16
		sts sync_pulse,r16
    82c8:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    82cc:	00 fd       	sbrc	r16, 0
		rjmp 1f
    82ce:	08 c0       	rjmp	.+16     	; 0x82e0 <__vector_8+0x26>
		lds r17,random_value
    82d0:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    82d4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    82d8:	10 27       	eor	r17, r16
		sts random_value,r17
    82da:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    82de:	07 c0       	rjmp	.+14     	; 0x82ee <__vector_8+0x34>
	1:
		lds r17,random_value+1
    82e0:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    82e4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    82e8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    82ea:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    82ee:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    82f0:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    82f4:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    82f6:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    82f8:	1f 91       	pop	r17
		pop r16
    82fa:	0f 91       	pop	r16
		reti
    82fc:	18 95       	reti

000082fe <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    82fe:	98 e0       	ldi	r25, 0x08	; 8
    8300:	88 e1       	ldi	r24, 0x18	; 24
    8302:	0f b6       	in	r0, 0x3f	; 63
    8304:	f8 94       	cli
    8306:	a8 95       	wdr
    8308:	80 93 60 00 	sts	0x0060, r24
    830c:	0f be       	out	0x3f, r0	; 63
    830e:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8312:	ff cf       	rjmp	.-2      	; 0x8312 <SoftReset+0x14>

00008314 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8314:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8316:	c8 95       	lpm
    8318:	c8 95       	lpm
		Wait200ns();
    831a:	c8 95       	lpm
    831c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    831e:	12 98       	cbi	0x02, 2	; 2
    8320:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8322:	80 e0       	ldi	r24, 0x00	; 0
    8324:	90 e0       	ldi	r25, 0x00	; 0
    8326:	20 e0       	ldi	r18, 0x00	; 0
    8328:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    832a:	36 95       	lsr	r19
    832c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    832e:	96 95       	lsr	r25
    8330:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8332:	c8 95       	lpm
    8334:	c8 95       	lpm
			Wait200ns();
    8336:	c8 95       	lpm
    8338:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    833a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    833c:	00 9b       	sbis	0x00, 0	; 0
    833e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8340:	01 9b       	sbis	0x00, 1	; 0
    8342:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8344:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8346:	c8 95       	lpm
    8348:	c8 95       	lpm
			Wait200ns();
    834a:	c8 95       	lpm
    834c:	c8 95       	lpm
    834e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8350:	61 f7       	brne	.-40     	; 0x832a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8352:	30 93 c0 0c 	sts	0x0CC0, r19
    8356:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    835a:	90 93 c4 0c 	sts	0x0CC4, r25
    835e:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8362:	80 91 bf 0c 	lds	r24, 0x0CBF
    8366:	90 91 c0 0c 	lds	r25, 0x0CC0
    836a:	0f 97       	sbiw	r24, 0x0f	; 15
    836c:	31 f0       	breq	.+12     	; 0x837a <ReadButtons+0x66>
    836e:	80 91 c3 0c 	lds	r24, 0x0CC3
    8372:	90 91 c4 0c 	lds	r25, 0x0CC4
    8376:	0f 97       	sbiw	r24, 0x0f	; 15
    8378:	11 f4       	brne	.+4      	; 0x837e <ReadButtons+0x6a>
		SoftReset();
    837a:	0e 94 7f 41 	call	0x82fe	; 0x82fe <SoftReset>
    837e:	08 95       	ret

00008380 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8380:	10 92 fa 0c 	sts	0x0CFA, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8384:	00 99       	sbic	0x00, 0	; 0
    8386:	03 c0       	rjmp	.+6      	; 0x838e <ReadControllers+0xe>
    8388:	81 e0       	ldi	r24, 0x01	; 1
    838a:	80 93 fa 0c 	sts	0x0CFA, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    838e:	01 99       	sbic	0x00, 1	; 0
    8390:	05 c0       	rjmp	.+10     	; 0x839c <ReadControllers+0x1c>
    8392:	80 91 fa 0c 	lds	r24, 0x0CFA
    8396:	82 60       	ori	r24, 0x02	; 2
    8398:	80 93 fa 0c 	sts	0x0CFA, r24
			
	//read the standard buttons
	ReadButtons();
    839c:	0c 94 8a 41 	jmp	0x8314	; 0x8314 <ReadButtons>

000083a0 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    83a0:	cf 93       	push	r28
    83a2:	df 93       	push	r29
    83a4:	c0 e0       	ldi	r28, 0x00	; 0
    83a6:	d0 e0       	ldi	r29, 0x00	; 0
    83a8:	fe 01       	movw	r30, r28
    83aa:	ee 54       	subi	r30, 0x4E	; 78
    83ac:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    83ae:	64 91       	lpm	r22, Z
    83b0:	ce 01       	movw	r24, r28
    83b2:	0e 94 1d 41 	call	0x823a	; 0x823a <WriteEeprom>
    83b6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    83b8:	c0 32       	cpi	r28, 0x20	; 32
    83ba:	d1 05       	cpc	r29, r1
    83bc:	a9 f7       	brne	.-22     	; 0x83a8 <FormatEeprom+0x8>
    83be:	c0 e2       	ldi	r28, 0x20	; 32
    83c0:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    83c2:	6f ef       	ldi	r22, 0xFF	; 255
    83c4:	ce 01       	movw	r24, r28
    83c6:	0e 94 1d 41 	call	0x823a	; 0x823a <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    83ca:	6f ef       	ldi	r22, 0xFF	; 255
    83cc:	ce 01       	movw	r24, r28
    83ce:	01 96       	adiw	r24, 0x01	; 1
    83d0:	0e 94 1d 41 	call	0x823a	; 0x823a <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    83d4:	a0 96       	adiw	r28, 0x20	; 32
    83d6:	c1 15       	cp	r28, r1
    83d8:	88 e0       	ldi	r24, 0x08	; 8
    83da:	d8 07       	cpc	r29, r24
    83dc:	91 f7       	brne	.-28     	; 0x83c2 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    83de:	df 91       	pop	r29
    83e0:	cf 91       	pop	r28
    83e2:	08 95       	ret

000083e4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    83e4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    83e6:	80 e0       	ldi	r24, 0x00	; 0
    83e8:	90 e0       	ldi	r25, 0x00	; 0
    83ea:	0e 94 27 41 	call	0x824e	; 0x824e <ReadEeprom>
    83ee:	c8 2f       	mov	r28, r24
    83f0:	81 e0       	ldi	r24, 0x01	; 1
    83f2:	90 e0       	ldi	r25, 0x00	; 0
    83f4:	0e 94 27 41 	call	0x824e	; 0x824e <ReadEeprom>
    83f8:	28 2f       	mov	r18, r24
    83fa:	30 e0       	ldi	r19, 0x00	; 0
    83fc:	32 2f       	mov	r19, r18
    83fe:	22 27       	eor	r18, r18
    8400:	2c 0f       	add	r18, r28
    8402:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8404:	81 e0       	ldi	r24, 0x01	; 1
    8406:	2a 35       	cpi	r18, 0x5A	; 90
    8408:	35 45       	sbci	r19, 0x55	; 85
    840a:	09 f0       	breq	.+2      	; 0x840e <isEepromFormatted+0x2a>
    840c:	80 e0       	ldi	r24, 0x00	; 0
}
    840e:	cf 91       	pop	r28
    8410:	08 95       	ret

00008412 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8412:	8f 92       	push	r8
    8414:	9f 92       	push	r9
    8416:	af 92       	push	r10
    8418:	bf 92       	push	r11
    841a:	cf 92       	push	r12
    841c:	df 92       	push	r13
    841e:	ef 92       	push	r14
    8420:	ff 92       	push	r15
    8422:	0f 93       	push	r16
    8424:	1f 93       	push	r17
    8426:	cf 93       	push	r28
    8428:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    842a:	fb 01       	movw	r30, r22
    842c:	11 82       	std	Z+1, r1	; 0x01
    842e:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8430:	8f 3f       	cpi	r24, 0xFF	; 255
    8432:	ff ef       	ldi	r31, 0xFF	; 255
    8434:	9f 07       	cpc	r25, r31
    8436:	89 f1       	breq	.+98     	; 0x849a <EepromBlockExists+0x88>
    8438:	6a 01       	movw	r12, r20
    843a:	8b 01       	movw	r16, r22
    843c:	7c 01       	movw	r14, r24
    843e:	a1 2c       	mov	r10, r1
    8440:	b1 2c       	mov	r11, r1
    8442:	c0 e0       	ldi	r28, 0x00	; 0
    8444:	d3 e0       	ldi	r29, 0x03	; 3
    8446:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8448:	c5 01       	movw	r24, r10
    844a:	0e 94 27 41 	call	0x824e	; 0x824e <ReadEeprom>
    844e:	88 2e       	mov	r8, r24
    8450:	c5 01       	movw	r24, r10
    8452:	01 96       	adiw	r24, 0x01	; 1
    8454:	0e 94 27 41 	call	0x824e	; 0x824e <ReadEeprom>
    8458:	28 2f       	mov	r18, r24
    845a:	30 e0       	ldi	r19, 0x00	; 0
    845c:	32 2f       	mov	r19, r18
    845e:	22 27       	eor	r18, r18
    8460:	28 0d       	add	r18, r8
    8462:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8464:	2e 15       	cp	r18, r14
    8466:	3f 05       	cpc	r19, r15
    8468:	29 f4       	brne	.+10     	; 0x8474 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    846a:	f8 01       	movw	r30, r16
    846c:	b1 82       	std	Z+1, r11	; 0x01
    846e:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8470:	d0 e0       	ldi	r29, 0x00	; 0
    8472:	0b c0       	rjmp	.+22     	; 0x848a <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8474:	2f 3f       	cpi	r18, 0xFF	; 255
    8476:	3f 4f       	sbci	r19, 0xFF	; 255
    8478:	41 f4       	brne	.+16     	; 0x848a <EepromBlockExists+0x78>
    847a:	91 10       	cpse	r9, r1
    847c:	06 c0       	rjmp	.+12     	; 0x848a <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    847e:	c1 14       	cp	r12, r1
    8480:	d1 04       	cpc	r13, r1
    8482:	11 f0       	breq	.+4      	; 0x8488 <EepromBlockExists+0x76>
    8484:	f6 01       	movw	r30, r12
    8486:	c0 83       	st	Z, r28
    8488:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    848a:	cf 5f       	subi	r28, 0xFF	; 255
    848c:	f0 e2       	ldi	r31, 0x20	; 32
    848e:	af 0e       	add	r10, r31
    8490:	b1 1c       	adc	r11, r1
    8492:	c0 34       	cpi	r28, 0x40	; 64
    8494:	c9 f6       	brne	.-78     	; 0x8448 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8496:	8d 2f       	mov	r24, r29
    8498:	01 c0       	rjmp	.+2      	; 0x849c <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    849a:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    849c:	df 91       	pop	r29
    849e:	cf 91       	pop	r28
    84a0:	1f 91       	pop	r17
    84a2:	0f 91       	pop	r16
    84a4:	ff 90       	pop	r15
    84a6:	ef 90       	pop	r14
    84a8:	df 90       	pop	r13
    84aa:	cf 90       	pop	r12
    84ac:	bf 90       	pop	r11
    84ae:	af 90       	pop	r10
    84b0:	9f 90       	pop	r9
    84b2:	8f 90       	pop	r8
    84b4:	08 95       	ret

000084b6 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    84b6:	ef 92       	push	r14
    84b8:	ff 92       	push	r15
    84ba:	0f 93       	push	r16
    84bc:	1f 93       	push	r17
    84be:	cf 93       	push	r28
    84c0:	df 93       	push	r29
    84c2:	00 d0       	rcall	.+0      	; 0x84c4 <EepromWriteBlock+0xe>
    84c4:	1f 92       	push	r1
    84c6:	cd b7       	in	r28, 0x3d	; 61
    84c8:	de b7       	in	r29, 0x3e	; 62
    84ca:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    84cc:	1a 82       	std	Y+2, r1	; 0x02
    84ce:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    84d0:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    84d2:	ae 01       	movw	r20, r28
    84d4:	4d 5f       	subi	r20, 0xFD	; 253
    84d6:	5f 4f       	sbci	r21, 0xFF	; 255
    84d8:	be 01       	movw	r22, r28
    84da:	6f 5f       	subi	r22, 0xFF	; 255
    84dc:	7f 4f       	sbci	r23, 0xFF	; 255
    84de:	fc 01       	movw	r30, r24
    84e0:	80 81       	ld	r24, Z
    84e2:	91 81       	ldd	r25, Z+1	; 0x01
    84e4:	0e 94 09 42 	call	0x8412	; 0x8412 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    84e8:	88 23       	and	r24, r24
    84ea:	11 f0       	breq	.+4      	; 0x84f0 <EepromWriteBlock+0x3a>
    84ec:	83 30       	cpi	r24, 0x03	; 3
    84ee:	19 f5       	brne	.+70     	; 0x8536 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    84f0:	89 81       	ldd	r24, Y+1	; 0x01
    84f2:	9a 81       	ldd	r25, Y+2	; 0x02
    84f4:	89 2b       	or	r24, r25
    84f6:	49 f4       	brne	.+18     	; 0x850a <EepromWriteBlock+0x54>
    84f8:	8b 81       	ldd	r24, Y+3	; 0x03
    84fa:	88 23       	and	r24, r24
    84fc:	d9 f0       	breq	.+54     	; 0x8534 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    84fe:	f0 e2       	ldi	r31, 0x20	; 32
    8500:	8f 9f       	mul	r24, r31
    8502:	c0 01       	movw	r24, r0
    8504:	11 24       	eor	r1, r1
    8506:	9a 83       	std	Y+2, r25	; 0x02
    8508:	89 83       	std	Y+1, r24	; 0x01
    850a:	78 01       	movw	r14, r16
    850c:	20 e2       	ldi	r18, 0x20	; 32
    850e:	e2 0e       	add	r14, r18
    8510:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8512:	f8 01       	movw	r30, r16
    8514:	61 91       	ld	r22, Z+
    8516:	8f 01       	movw	r16, r30
    8518:	89 81       	ldd	r24, Y+1	; 0x01
    851a:	9a 81       	ldd	r25, Y+2	; 0x02
    851c:	9c 01       	movw	r18, r24
    851e:	2f 5f       	subi	r18, 0xFF	; 255
    8520:	3f 4f       	sbci	r19, 0xFF	; 255
    8522:	3a 83       	std	Y+2, r19	; 0x02
    8524:	29 83       	std	Y+1, r18	; 0x01
    8526:	0e 94 1d 41 	call	0x823a	; 0x823a <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    852a:	0e 15       	cp	r16, r14
    852c:	1f 05       	cpc	r17, r15
    852e:	89 f7       	brne	.-30     	; 0x8512 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8530:	80 e0       	ldi	r24, 0x00	; 0
    8532:	01 c0       	rjmp	.+2      	; 0x8536 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8534:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8536:	0f 90       	pop	r0
    8538:	0f 90       	pop	r0
    853a:	0f 90       	pop	r0
    853c:	df 91       	pop	r29
    853e:	cf 91       	pop	r28
    8540:	1f 91       	pop	r17
    8542:	0f 91       	pop	r16
    8544:	ff 90       	pop	r15
    8546:	ef 90       	pop	r14
    8548:	08 95       	ret

0000854a <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    854a:	cf 92       	push	r12
    854c:	df 92       	push	r13
    854e:	ff 92       	push	r15
    8550:	0f 93       	push	r16
    8552:	1f 93       	push	r17
    8554:	cf 93       	push	r28
    8556:	df 93       	push	r29
    8558:	00 d0       	rcall	.+0      	; 0x855a <EepromReadBlock+0x10>
    855a:	cd b7       	in	r28, 0x3d	; 61
    855c:	de b7       	in	r29, 0x3e	; 62
    855e:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8560:	40 e0       	ldi	r20, 0x00	; 0
    8562:	50 e0       	ldi	r21, 0x00	; 0
    8564:	be 01       	movw	r22, r28
    8566:	6f 5f       	subi	r22, 0xFF	; 255
    8568:	7f 4f       	sbci	r23, 0xFF	; 255
    856a:	0e 94 09 42 	call	0x8412	; 0x8412 <EepromBlockExists>
    856e:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8570:	81 11       	cpse	r24, r1
    8572:	13 c0       	rjmp	.+38     	; 0x859a <EepromReadBlock+0x50>
    8574:	68 01       	movw	r12, r16
    8576:	80 e2       	ldi	r24, 0x20	; 32
    8578:	c8 0e       	add	r12, r24
    857a:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    857c:	89 81       	ldd	r24, Y+1	; 0x01
    857e:	9a 81       	ldd	r25, Y+2	; 0x02
    8580:	9c 01       	movw	r18, r24
    8582:	2f 5f       	subi	r18, 0xFF	; 255
    8584:	3f 4f       	sbci	r19, 0xFF	; 255
    8586:	3a 83       	std	Y+2, r19	; 0x02
    8588:	29 83       	std	Y+1, r18	; 0x01
    858a:	0e 94 27 41 	call	0x824e	; 0x824e <ReadEeprom>
    858e:	f8 01       	movw	r30, r16
    8590:	81 93       	st	Z+, r24
    8592:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8594:	ec 15       	cp	r30, r12
    8596:	fd 05       	cpc	r31, r13
    8598:	89 f7       	brne	.-30     	; 0x857c <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    859a:	8f 2d       	mov	r24, r15
    859c:	0f 90       	pop	r0
    859e:	0f 90       	pop	r0
    85a0:	df 91       	pop	r29
    85a2:	cf 91       	pop	r28
    85a4:	1f 91       	pop	r17
    85a6:	0f 91       	pop	r16
    85a8:	ff 90       	pop	r15
    85aa:	df 90       	pop	r13
    85ac:	cf 90       	pop	r12
    85ae:	08 95       	ret

000085b0 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    85b0:	00 97       	sbiw	r24, 0x00	; 0
    85b2:	21 f0       	breq	.+8      	; 0x85bc <GetPrngNumber+0xc>
    85b4:	90 93 cd 0c 	sts	0x0CCD, r25
    85b8:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    85bc:	20 91 cc 0c 	lds	r18, 0x0CCC
    85c0:	30 91 cd 0c 	lds	r19, 0x0CCD
    85c4:	a9 01       	movw	r20, r18
    85c6:	56 95       	lsr	r21
    85c8:	47 95       	ror	r20
    85ca:	56 95       	lsr	r21
    85cc:	47 95       	ror	r20
    85ce:	c9 01       	movw	r24, r18
    85d0:	63 e0       	ldi	r22, 0x03	; 3
    85d2:	96 95       	lsr	r25
    85d4:	87 95       	ror	r24
    85d6:	6a 95       	dec	r22
    85d8:	e1 f7       	brne	.-8      	; 0x85d2 <GetPrngNumber+0x22>
    85da:	84 27       	eor	r24, r20
    85dc:	95 27       	eor	r25, r21
    85de:	82 27       	eor	r24, r18
    85e0:	93 27       	eor	r25, r19
    85e2:	a9 01       	movw	r20, r18
    85e4:	75 e0       	ldi	r23, 0x05	; 5
    85e6:	56 95       	lsr	r21
    85e8:	47 95       	ror	r20
    85ea:	7a 95       	dec	r23
    85ec:	e1 f7       	brne	.-8      	; 0x85e6 <GetPrngNumber+0x36>
    85ee:	84 27       	eor	r24, r20
    85f0:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    85f2:	99 27       	eor	r25, r25
    85f4:	86 95       	lsr	r24
    85f6:	97 95       	ror	r25
    85f8:	88 27       	eor	r24, r24
    85fa:	36 95       	lsr	r19
    85fc:	27 95       	ror	r18
    85fe:	82 2b       	or	r24, r18
    8600:	93 2b       	or	r25, r19
    8602:	90 93 cd 0c 	sts	0x0CCD, r25
    8606:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    860a:	08 95       	ret

0000860c <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    860c:	fc 01       	movw	r30, r24
    860e:	67 87       	std	Z+15, r22	; 0x0f
    8610:	08 95       	ret

00008612 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8612:	e0 ed       	ldi	r30, 0xD0	; 208
    8614:	fc e0       	ldi	r31, 0x0C	; 12
    8616:	81 e0       	ldi	r24, 0x01	; 1
    8618:	91 e0       	ldi	r25, 0x01	; 1
    861a:	95 8b       	std	Z+21, r25	; 0x15
    861c:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    861e:	63 8b       	std	Z+19, r22	; 0x13
    8620:	08 95       	ret

00008622 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8622:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8624:	90 81       	ld	r25, Z
    8626:	9f 75       	andi	r25, 0x5F	; 95
    8628:	90 83       	st	Z, r25
    862a:	08 95       	ret

0000862c <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    862c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    862e:	90 81       	ld	r25, Z
    8630:	90 64       	ori	r25, 0x40	; 64
    8632:	90 83       	st	Z, r25
    8634:	08 95       	ret

00008636 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8636:	fc 01       	movw	r30, r24
    8638:	66 87       	std	Z+14, r22	; 0x0e
    863a:	08 95       	ret

0000863c <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    863c:	fc 01       	movw	r30, r24
    863e:	62 87       	std	Z+10, r22	; 0x0a
    8640:	08 95       	ret

00008642 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8642:	fc 01       	movw	r30, r24
    8644:	63 87       	std	Z+11, r22	; 0x0b
    8646:	08 95       	ret

00008648 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8648:	cf 93       	push	r28
    864a:	df 93       	push	r29
    864c:	ec 01       	movw	r28, r24
    864e:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8650:	29 81       	ldd	r18, Y+1	; 0x01
    8652:	30 e0       	ldi	r19, 0x00	; 0
    8654:	f9 01       	movw	r30, r18
    8656:	ee 0f       	add	r30, r30
    8658:	ff 1f       	adc	r31, r31
    865a:	e8 5f       	subi	r30, 0xF8	; 248
    865c:	ff 46       	sbci	r31, 0x6F	; 111
    865e:	65 91       	lpm	r22, Z+
    8660:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8662:	f9 01       	movw	r30, r18
    8664:	e4 0f       	add	r30, r20
    8666:	f1 1d       	adc	r31, r1
    8668:	47 fd       	sbrc	r20, 7
    866a:	fa 95       	dec	r31
    866c:	ee 0f       	add	r30, r30
    866e:	ff 1f       	adc	r31, r31
    8670:	e8 5f       	subi	r30, 0xF8	; 248
    8672:	ff 46       	sbci	r31, 0x6F	; 111
    8674:	85 91       	lpm	r24, Z+
    8676:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8678:	86 1b       	sub	r24, r22
    867a:	97 0b       	sbc	r25, r23
    867c:	68 85       	ldd	r22, Y+8	; 0x08
    867e:	70 e0       	ldi	r23, 0x00	; 0
    8680:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
	if(delta==0)delta++;
    8684:	61 15       	cp	r22, r1
    8686:	71 05       	cpc	r23, r1
    8688:	11 f4       	brne	.+4      	; 0x868e <PatchCommand11+0x46>
    868a:	61 e0       	ldi	r22, 0x01	; 1
    868c:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    868e:	ea 81       	ldd	r30, Y+2	; 0x02
    8690:	86 e0       	ldi	r24, 0x06	; 6
    8692:	e8 9f       	mul	r30, r24
    8694:	f0 01       	movw	r30, r0
    8696:	11 24       	eor	r1, r1
    8698:	e0 53       	subi	r30, 0x30	; 48
    869a:	f3 4f       	sbci	r31, 0xF3	; 243
    869c:	81 81       	ldd	r24, Z+1	; 0x01
    869e:	92 81       	ldd	r25, Z+2	; 0x02
    86a0:	86 0f       	add	r24, r22
    86a2:	97 1f       	adc	r25, r23
    86a4:	92 83       	std	Z+2, r25	; 0x02
    86a6:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    86a8:	7e 83       	std	Y+6, r23	; 0x06
    86aa:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    86ac:	88 81       	ld	r24, Y
    86ae:	88 60       	ori	r24, 0x08	; 8
    86b0:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    86b2:	89 81       	ldd	r24, Y+1	; 0x01
    86b4:	48 0f       	add	r20, r24
    86b6:	4f 83       	std	Y+7, r20	; 0x07
}
    86b8:	df 91       	pop	r29
    86ba:	cf 91       	pop	r28
    86bc:	08 95       	ret

000086be <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    86be:	fc 01       	movw	r30, r24
    86c0:	60 87       	std	Z+8, r22	; 0x08
    86c2:	08 95       	ret

000086c4 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    86c4:	fc 01       	movw	r30, r24
    86c6:	64 83       	std	Z+4, r22	; 0x04
    86c8:	08 95       	ret

000086ca <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    86ca:	fc 01       	movw	r30, r24
    86cc:	82 81       	ldd	r24, Z+2	; 0x02
    86ce:	0c 94 80 47 	jmp	0x8f00	; 0x8f00 <SetMixerWave>

000086d2 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    86d2:	fc 01       	movw	r30, r24
	track->note+=param;
    86d4:	91 81       	ldd	r25, Z+1	; 0x01
    86d6:	69 0f       	add	r22, r25
    86d8:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    86da:	82 81       	ldd	r24, Z+2	; 0x02
    86dc:	0c 94 69 47 	jmp	0x8ed2	; 0x8ed2 <SetMixerNote>

000086e0 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    86e0:	fc 01       	movw	r30, r24
	track->note-=param;
    86e2:	91 81       	ldd	r25, Z+1	; 0x01
    86e4:	96 1b       	sub	r25, r22
    86e6:	69 2f       	mov	r22, r25
    86e8:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    86ea:	82 81       	ldd	r24, Z+2	; 0x02
    86ec:	0c 94 69 47 	jmp	0x8ed2	; 0x8ed2 <SetMixerNote>

000086f0 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    86f0:	1f 93       	push	r17
    86f2:	cf 93       	push	r28
    86f4:	df 93       	push	r29
    86f6:	ec 01       	movw	r28, r24
    86f8:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    86fa:	8a 81       	ldd	r24, Y+2	; 0x02
    86fc:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <SetMixerNote>
	track->note=param;
    8700:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8702:	88 81       	ld	r24, Y
    8704:	87 7f       	andi	r24, 0xF7	; 247
    8706:	88 83       	st	Y, r24
}
    8708:	df 91       	pop	r29
    870a:	cf 91       	pop	r28
    870c:	1f 91       	pop	r17
    870e:	08 95       	ret

00008710 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8710:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8712:	14 96       	adiw	r26, 0x04	; 4
    8714:	8c 91       	ld	r24, X
    8716:	14 97       	sbiw	r26, 0x04	; 4
    8718:	88 23       	and	r24, r24
    871a:	19 f1       	breq	.+70     	; 0x8762 <PatchCommand14+0x52>
    871c:	55 96       	adiw	r26, 0x15	; 21
    871e:	2d 91       	ld	r18, X+
    8720:	3c 91       	ld	r19, X
    8722:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8724:	66 23       	and	r22, r22
    8726:	79 f0       	breq	.+30     	; 0x8746 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8728:	77 27       	eor	r23, r23
    872a:	67 fd       	sbrc	r22, 7
    872c:	70 95       	com	r23
    872e:	6f 5f       	subi	r22, 0xFF	; 255
    8730:	7f 4f       	sbci	r23, 0xFF	; 255
    8732:	ab 01       	movw	r20, r22
    8734:	44 0f       	add	r20, r20
    8736:	55 1f       	adc	r21, r21
    8738:	64 0f       	add	r22, r20
    873a:	75 1f       	adc	r23, r21
    873c:	26 1b       	sub	r18, r22
    873e:	37 0b       	sbc	r19, r23
    8740:	09 c0       	rjmp	.+18     	; 0x8754 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8742:	ef 3f       	cpi	r30, 0xFF	; 255
    8744:	39 f0       	breq	.+14     	; 0x8754 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8746:	23 50       	subi	r18, 0x03	; 3
    8748:	31 09       	sbc	r19, r1
    874a:	f9 01       	movw	r30, r18
    874c:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    874e:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8750:	ed 30       	cpi	r30, 0x0D	; 13
    8752:	b9 f7       	brne	.-18     	; 0x8742 <PatchCommand14+0x32>
    8754:	56 96       	adiw	r26, 0x16	; 22
    8756:	3c 93       	st	X, r19
    8758:	2e 93       	st	-X, r18
    875a:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    875c:	81 50       	subi	r24, 0x01	; 1
    875e:	14 96       	adiw	r26, 0x04	; 4
    8760:	8c 93       	st	X, r24
    8762:	08 95       	ret

00008764 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8764:	90 93 73 0d 	sts	0x0D73, r25
    8768:	80 93 72 0d 	sts	0x0D72, r24

	masterVolume=DEFAULT_MASTER_VOL;
    876c:	8f e6       	ldi	r24, 0x6F	; 111
    876e:	80 93 75 0d 	sts	0x0D75, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8772:	10 92 ce 0c 	sts	0x0CCE, r1
    8776:	ed e0       	ldi	r30, 0x0D	; 13
    8778:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    877a:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    877c:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    877e:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8780:	28 e1       	ldi	r18, 0x18	; 24
    8782:	df 01       	movw	r26, r30
    8784:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8786:	8c 93       	st	X, r24
    8788:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    878a:	9c 93       	st	X, r25
    878c:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    878e:	1c 92       	st	X, r1
    8790:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8792:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8794:	10 82       	st	Z, r1
    8796:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8798:	2c 93       	st	X, r18
    879a:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    879c:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    879e:	8f 5f       	subi	r24, 0xFF	; 255
    87a0:	77 96       	adiw	r30, 0x17	; 23
    87a2:	85 30       	cpi	r24, 0x05	; 5
    87a4:	71 f7       	brne	.-36     	; 0x8782 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    87a6:	08 95       	ret

000087a8 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    87a8:	ed ef       	ldi	r30, 0xFD	; 253
    87aa:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    87ac:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87ae:	20 81       	ld	r18, Z
    87b0:	2f 77       	andi	r18, 0x7F	; 127
    87b2:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    87b4:	33 83       	std	Z+3, r19	; 0x03
    87b6:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    87b8:	2d e0       	ldi	r18, 0x0D	; 13
    87ba:	e0 37       	cpi	r30, 0x70	; 112
    87bc:	f2 07       	cpc	r31, r18
    87be:	b9 f7       	brne	.-18     	; 0x87ae <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    87c0:	01 96       	adiw	r24, 0x01	; 1
    87c2:	90 93 7a 0d 	sts	0x0D7A, r25
    87c6:	80 93 79 0d 	sts	0x0D79, r24
		songStart=song+1;//skip first delta-time
    87ca:	90 93 fc 0c 	sts	0x0CFC, r25
    87ce:	80 93 fb 0c 	sts	0x0CFB, r24
		loopStart=song+1;
    87d2:	90 93 7c 0d 	sts	0x0D7C, r25
    87d6:	80 93 7b 0d 	sts	0x0D7B, r24
		nextDeltaTime=0;
    87da:	10 92 77 0d 	sts	0x0D77, r1
    87de:	10 92 76 0d 	sts	0x0D76, r1
		currDeltaTime=0;
    87e2:	10 92 71 0d 	sts	0x0D71, r1
    87e6:	10 92 70 0d 	sts	0x0D70, r1
		songSpeed=0;
    87ea:	10 92 78 0d 	sts	0x0D78, r1

		lastStatus=0;
    87ee:	10 92 74 0d 	sts	0x0D74, r1
		playSong=true;
    87f2:	81 e0       	ldi	r24, 0x01	; 1
    87f4:	80 93 ce 0c 	sts	0x0CCE, r24
    87f8:	08 95       	ret

000087fa <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    87fa:	ed ef       	ldi	r30, 0xFD	; 253
    87fc:	fc e0       	ldi	r31, 0x0C	; 12
    87fe:	8a ef       	ldi	r24, 0xFA	; 250
    8800:	87 87       	std	Z+15, r24	; 0x0f
    8802:	86 a3       	std	Z+38, r24	; 0x26
    8804:	80 93 3a 0d 	sts	0x0D3A, r24
    8808:	80 93 51 0d 	sts	0x0D51, r24
    880c:	80 93 68 0d 	sts	0x0D68, r24
	}

	playSong=false;
    8810:	10 92 ce 0c 	sts	0x0CCE, r1
    8814:	08 95       	ret

00008816 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8816:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8818:	ed 91       	ld	r30, X+
    881a:	fc 91       	ld	r31, X
    881c:	11 97       	sbiw	r26, 0x01	; 1
    881e:	9f 01       	movw	r18, r30
    8820:	2f 5f       	subi	r18, 0xFF	; 255
    8822:	3f 4f       	sbci	r19, 0xFF	; 255
    8824:	11 96       	adiw	r26, 0x01	; 1
    8826:	3c 93       	st	X, r19
    8828:	2e 93       	st	-X, r18
    882a:	e4 91       	lpm	r30, Z
    882c:	e7 fd       	sbrc	r30, 7
    882e:	03 c0       	rjmp	.+6      	; 0x8836 <ReadVarLen+0x20>
    8830:	8e 2f       	mov	r24, r30
    8832:	90 e0       	ldi	r25, 0x00	; 0
    8834:	08 95       	ret
    {
       value &= 0x7F;
    8836:	ef 77       	andi	r30, 0x7F	; 127
    8838:	8e 2f       	mov	r24, r30
    883a:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    883c:	96 95       	lsr	r25
    883e:	98 2f       	mov	r25, r24
    8840:	88 27       	eor	r24, r24
    8842:	97 95       	ror	r25
    8844:	87 95       	ror	r24
    8846:	2f 5f       	subi	r18, 0xFF	; 255
    8848:	3f 4f       	sbci	r19, 0xFF	; 255
    884a:	f9 01       	movw	r30, r18
    884c:	31 97       	sbiw	r30, 0x01	; 1
    884e:	e4 91       	lpm	r30, Z
    8850:	4e 2f       	mov	r20, r30
    8852:	4f 77       	andi	r20, 0x7F	; 127
    8854:	84 0f       	add	r24, r20
    8856:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8858:	e7 fd       	sbrc	r30, 7
    885a:	f0 cf       	rjmp	.-32     	; 0x883c <ReadVarLen+0x26>
    885c:	2d 93       	st	X+, r18
    885e:	3c 93       	st	X, r19
    }


    return value;
}
    8860:	08 95       	ret

00008862 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8862:	ef 92       	push	r14
    8864:	ff 92       	push	r15
    8866:	0f 93       	push	r16
    8868:	1f 93       	push	r17
    886a:	cf 93       	push	r28
    886c:	df 93       	push	r29
    886e:	1f 92       	push	r1
    8870:	cd b7       	in	r28, 0x3d	; 61
    8872:	de b7       	in	r29, 0x3e	; 62
    8874:	7c 01       	movw	r14, r24
    8876:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8878:	fc 01       	movw	r30, r24
    887a:	80 81       	ld	r24, Z
    887c:	08 2f       	mov	r16, r24
    887e:	00 1f       	adc	r16, r16
    8880:	00 27       	eor	r16, r16
    8882:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8884:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8886:	9f ef       	ldi	r25, 0xFF	; 255
    8888:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    888a:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    888c:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    888e:	87 7b       	andi	r24, 0xB7	; 183
    8890:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8892:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8894:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8896:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8898:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    889a:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    889c:	82 81       	ldd	r24, Z+2	; 0x02
    889e:	83 30       	cpi	r24, 0x03	; 3
    88a0:	69 f4       	brne	.+26     	; 0x88bc <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    88a2:	01 11       	cpse	r16, r1
    88a4:	01 c0       	rjmp	.+2      	; 0x88a8 <TriggerCommon+0x46>
    88a6:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    88a8:	81 e0       	ldi	r24, 0x01	; 1
    88aa:	91 e0       	ldi	r25, 0x01	; 1
    88ac:	90 93 e5 0c 	sts	0x0CE5, r25
    88b0:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    88b4:	81 e0       	ldi	r24, 0x01	; 1
    88b6:	80 93 e3 0c 	sts	0x0CE3, r24
    88ba:	39 c0       	rjmp	.+114    	; 0x892e <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    88bc:	84 30       	cpi	r24, 0x04	; 4
    88be:	69 f5       	brne	.+90     	; 0x891a <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    88c0:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    88c4:	80 91 72 0d 	lds	r24, 0x0D72
    88c8:	90 91 73 0d 	lds	r25, 0x0D73
    88cc:	f9 e0       	ldi	r31, 0x09	; 9
    88ce:	6f 9f       	mul	r22, r31
    88d0:	80 0d       	add	r24, r0
    88d2:	91 1d       	adc	r25, r1
    88d4:	11 24       	eor	r1, r1
    88d6:	fc 01       	movw	r30, r24
    88d8:	31 96       	adiw	r30, 0x01	; 1
    88da:	a5 91       	lpm	r26, Z+
    88dc:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    88de:	b0 93 ed 0c 	sts	0x0CED, r27
    88e2:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    88e6:	ac 01       	movw	r20, r24
    88e8:	49 5f       	subi	r20, 0xF9	; 249
    88ea:	5f 4f       	sbci	r21, 0xFF	; 255
    88ec:	fa 01       	movw	r30, r20
    88ee:	65 91       	lpm	r22, Z+
    88f0:	74 91       	lpm	r23, Z
    88f2:	05 96       	adiw	r24, 0x05	; 5
    88f4:	fc 01       	movw	r30, r24
    88f6:	85 91       	lpm	r24, Z+
    88f8:	94 91       	lpm	r25, Z
    88fa:	68 1b       	sub	r22, r24
    88fc:	79 0b       	sbc	r23, r25
    88fe:	70 93 ef 0c 	sts	0x0CEF, r23
    8902:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8906:	fa 01       	movw	r30, r20
    8908:	85 91       	lpm	r24, Z+
    890a:	94 91       	lpm	r25, Z
    890c:	a8 0f       	add	r26, r24
    890e:	b9 1f       	adc	r27, r25
    8910:	b0 93 f1 0c 	sts	0x0CF1, r27
    8914:	a0 93 f0 0c 	sts	0x0CF0, r26
    8918:	05 c0       	rjmp	.+10     	; 0x8924 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    891a:	60 e0       	ldi	r22, 0x00	; 0
    891c:	29 83       	std	Y+1, r18	; 0x01
    891e:	0e 94 80 47 	call	0x8f00	; 0x8f00 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8922:	29 81       	ldd	r18, Y+1	; 0x01
    8924:	62 2f       	mov	r22, r18
    8926:	f7 01       	movw	r30, r14
    8928:	82 81       	ldd	r24, Z+2	; 0x02
    892a:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    892e:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8930:	00 23       	and	r16, r16
    8932:	11 f0       	breq	.+4      	; 0x8938 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8934:	11 8b       	std	Z+17, r17	; 0x11
    8936:	01 c0       	rjmp	.+2      	; 0x893a <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8938:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    893a:	e0 91 72 0d 	lds	r30, 0x0D72
    893e:	f0 91 73 0d 	lds	r31, 0x0D73
    8942:	39 e0       	ldi	r19, 0x09	; 9
    8944:	13 9f       	mul	r17, r19
    8946:	e0 0d       	add	r30, r0
    8948:	f1 1d       	adc	r31, r1
    894a:	11 24       	eor	r1, r1
    894c:	33 96       	adiw	r30, 0x03	; 3
    894e:	85 91       	lpm	r24, Z+
    8950:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8952:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8954:	00 97       	sbiw	r24, 0x00	; 0
    8956:	19 f4       	brne	.+6      	; 0x895e <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8958:	16 8a       	std	Z+22, r1	; 0x16
    895a:	15 8a       	std	Z+21, r1	; 0x15
    895c:	08 c0       	rjmp	.+16     	; 0x896e <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    895e:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8960:	fc 01       	movw	r30, r24
    8962:	24 91       	lpm	r18, Z
    8964:	f7 01       	movw	r30, r14
    8966:	22 8b       	std	Z+18, r18	; 0x12
    8968:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    896a:	96 8b       	std	Z+22, r25	; 0x16
    896c:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    896e:	0f 90       	pop	r0
    8970:	df 91       	pop	r29
    8972:	cf 91       	pop	r28
    8974:	1f 91       	pop	r17
    8976:	0f 91       	pop	r16
    8978:	ff 90       	pop	r15
    897a:	ef 90       	pop	r14
    897c:	08 95       	ret

0000897e <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    897e:	cf 93       	push	r28
    8980:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8982:	e0 91 72 0d 	lds	r30, 0x0D72
    8986:	f0 91 73 0d 	lds	r31, 0x0D73
    898a:	99 e0       	ldi	r25, 0x09	; 9
    898c:	89 9f       	mul	r24, r25
    898e:	e0 0d       	add	r30, r0
    8990:	f1 1d       	adc	r31, r1
    8992:	11 24       	eor	r1, r1
    8994:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8996:	e1 30       	cpi	r30, 0x01	; 1
    8998:	e9 f0       	breq	.+58     	; 0x89d4 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    899a:	e2 30       	cpi	r30, 0x02	; 2
    899c:	e9 f0       	breq	.+58     	; 0x89d8 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    899e:	20 91 14 0d 	lds	r18, 0x0D14
    89a2:	27 ff       	sbrs	r18, 7
    89a4:	1d c0       	rjmp	.+58     	; 0x89e0 <TriggerFx+0x62>
    89a6:	20 91 25 0d 	lds	r18, 0x0D25
    89aa:	28 13       	cpse	r18, r24
    89ac:	02 c0       	rjmp	.+4      	; 0x89b2 <TriggerFx+0x34>
    89ae:	41 11       	cpse	r20, r1
    89b0:	17 c0       	rjmp	.+46     	; 0x89e0 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    89b2:	20 91 2b 0d 	lds	r18, 0x0D2B
    89b6:	27 ff       	sbrs	r18, 7
    89b8:	11 c0       	rjmp	.+34     	; 0x89dc <TriggerFx+0x5e>
    89ba:	20 91 3c 0d 	lds	r18, 0x0D3C
    89be:	28 13       	cpse	r18, r24
    89c0:	02 c0       	rjmp	.+4      	; 0x89c6 <TriggerFx+0x48>
    89c2:	41 11       	cpse	r20, r1
    89c4:	0b c0       	rjmp	.+22     	; 0x89dc <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    89c6:	20 91 28 0d 	lds	r18, 0x0D28
    89ca:	90 91 3f 0d 	lds	r25, 0x0D3F
    89ce:	92 17       	cp	r25, r18
    89d0:	28 f4       	brcc	.+10     	; 0x89dc <TriggerFx+0x5e>
    89d2:	06 c0       	rjmp	.+12     	; 0x89e0 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    89d4:	c3 e0       	ldi	r28, 0x03	; 3
    89d6:	05 c0       	rjmp	.+10     	; 0x89e2 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    89d8:	c4 e0       	ldi	r28, 0x04	; 4
    89da:	03 c0       	rjmp	.+6      	; 0x89e2 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    89dc:	c2 e0       	ldi	r28, 0x02	; 2
    89de:	01 c0       	rjmp	.+2      	; 0x89e2 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    89e0:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    89e2:	97 e1       	ldi	r25, 0x17	; 23
    89e4:	c9 9f       	mul	r28, r25
    89e6:	e0 01       	movw	r28, r0
    89e8:	11 24       	eor	r1, r1
    89ea:	c3 50       	subi	r28, 0x03	; 3
    89ec:	d3 4f       	sbci	r29, 0xF3	; 243
    89ee:	90 e8       	ldi	r25, 0x80	; 128
    89f0:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    89f2:	1e 8a       	std	Y+22, r1	; 0x16
    89f4:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    89f6:	20 e5       	ldi	r18, 0x50	; 80
    89f8:	46 2f       	mov	r20, r22
    89fa:	68 2f       	mov	r22, r24
    89fc:	ce 01       	movw	r24, r28
    89fe:	0e 94 31 44 	call	0x8862	; 0x8862 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8a02:	88 81       	ld	r24, Y
    8a04:	80 62       	ori	r24, 0x20	; 32
    8a06:	88 83       	st	Y, r24
}
    8a08:	df 91       	pop	r29
    8a0a:	cf 91       	pop	r28
    8a0c:	08 95       	ret

00008a0e <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8a12:	a8 2f       	mov	r26, r24
    8a14:	b0 e0       	ldi	r27, 0x00	; 0
    8a16:	97 e1       	ldi	r25, 0x17	; 23
    8a18:	89 9f       	mul	r24, r25
    8a1a:	f0 01       	movw	r30, r0
    8a1c:	11 24       	eor	r1, r1
    8a1e:	e3 50       	subi	r30, 0x03	; 3
    8a20:	f3 4f       	sbci	r31, 0xF3	; 243
    8a22:	80 81       	ld	r24, Z
    8a24:	85 ff       	sbrs	r24, 5
    8a26:	02 c0       	rjmp	.+4      	; 0x8a2c <TriggerNote+0x1e>
    8a28:	87 fd       	sbrc	r24, 7
    8a2a:	2e c0       	rjmp	.+92     	; 0x8a88 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8a2c:	21 11       	cpse	r18, r1
    8a2e:	18 c0       	rjmp	.+48     	; 0x8a60 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8a30:	97 e1       	ldi	r25, 0x17	; 23
    8a32:	9a 9f       	mul	r25, r26
    8a34:	f0 01       	movw	r30, r0
    8a36:	9b 9f       	mul	r25, r27
    8a38:	f0 0d       	add	r31, r0
    8a3a:	11 24       	eor	r1, r1
    8a3c:	e3 50       	subi	r30, 0x03	; 3
    8a3e:	f3 4f       	sbci	r31, 0xF3	; 243
    8a40:	97 85       	ldd	r25, Z+15	; 0x0f
    8a42:	91 11       	cpse	r25, r1
    8a44:	02 c0       	rjmp	.+4      	; 0x8a4a <TriggerNote+0x3c>
    8a46:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8a48:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8a4a:	97 e1       	ldi	r25, 0x17	; 23
    8a4c:	9a 9f       	mul	r25, r26
    8a4e:	f0 01       	movw	r30, r0
    8a50:	9b 9f       	mul	r25, r27
    8a52:	f0 0d       	add	r31, r0
    8a54:	11 24       	eor	r1, r1
    8a56:	e3 50       	subi	r30, 0x03	; 3
    8a58:	f3 4f       	sbci	r31, 0xF3	; 243
    8a5a:	8f 7b       	andi	r24, 0xBF	; 191
    8a5c:	80 83       	st	Z, r24
    8a5e:	14 c0       	rjmp	.+40     	; 0x8a88 <TriggerNote+0x7a>
    8a60:	82 2f       	mov	r24, r18
    8a62:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8a64:	97 e1       	ldi	r25, 0x17	; 23
    8a66:	9a 9f       	mul	r25, r26
    8a68:	e0 01       	movw	r28, r0
    8a6a:	9b 9f       	mul	r25, r27
    8a6c:	d0 0d       	add	r29, r0
    8a6e:	11 24       	eor	r1, r1
    8a70:	c3 50       	subi	r28, 0x03	; 3
    8a72:	d3 4f       	sbci	r29, 0xF3	; 243
    8a74:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8a76:	1e 8a       	std	Y+22, r1	; 0x16
    8a78:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8a7a:	48 2f       	mov	r20, r24
    8a7c:	ce 01       	movw	r24, r28
    8a7e:	0e 94 31 44 	call	0x8862	; 0x8862 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8a82:	88 81       	ld	r24, Y
    8a84:	80 62       	ori	r24, 0x20	; 32
    8a86:	88 83       	st	Y, r24
		}

	}
}
    8a88:	df 91       	pop	r29
    8a8a:	cf 91       	pop	r28
    8a8c:	08 95       	ret

00008a8e <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8a8e:	6f 92       	push	r6
    8a90:	7f 92       	push	r7
    8a92:	8f 92       	push	r8
    8a94:	9f 92       	push	r9
    8a96:	af 92       	push	r10
    8a98:	bf 92       	push	r11
    8a9a:	cf 92       	push	r12
    8a9c:	df 92       	push	r13
    8a9e:	ef 92       	push	r14
    8aa0:	ff 92       	push	r15
    8aa2:	0f 93       	push	r16
    8aa4:	1f 93       	push	r17
    8aa6:	cf 93       	push	r28
    8aa8:	df 93       	push	r29
    8aaa:	cd ef       	ldi	r28, 0xFD	; 253
    8aac:	dc e0       	ldi	r29, 0x0C	; 12
    8aae:	00 ed       	ldi	r16, 0xD0	; 208
    8ab0:	1c e0       	ldi	r17, 0x0C	; 12
    8ab2:	d8 01       	movw	r26, r16
    8ab4:	9e 01       	movw	r18, r28
    8ab6:	40 e0       	ldi	r20, 0x00	; 0
    8ab8:	50 e0       	ldi	r21, 0x00	; 0
    8aba:	ca 01       	movw	r24, r20
    8abc:	83 50       	subi	r24, 0x03	; 3
    8abe:	93 4f       	sbci	r25, 0xF3	; 243
    8ac0:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8ac2:	fc 01       	movw	r30, r24
    8ac4:	87 85       	ldd	r24, Z+15	; 0x0f
    8ac6:	88 23       	and	r24, r24
    8ac8:	91 f0       	breq	.+36     	; 0x8aee <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8aca:	66 85       	ldd	r22, Z+14	; 0x0e
    8acc:	99 27       	eor	r25, r25
    8ace:	87 fd       	sbrc	r24, 7
    8ad0:	90 95       	com	r25
    8ad2:	86 0f       	add	r24, r22
    8ad4:	91 1d       	adc	r25, r1
    8ad6:	8f 3f       	cpi	r24, 0xFF	; 255
    8ad8:	91 05       	cpc	r25, r1
    8ada:	19 f0       	breq	.+6      	; 0x8ae2 <ProcessMusic+0x54>
    8adc:	14 f0       	brlt	.+4      	; 0x8ae2 <ProcessMusic+0x54>
    8ade:	8f ef       	ldi	r24, 0xFF	; 255
    8ae0:	90 e0       	ldi	r25, 0x00	; 0
    8ae2:	97 ff       	sbrs	r25, 7
    8ae4:	02 c0       	rjmp	.+4      	; 0x8aea <ProcessMusic+0x5c>
    8ae6:	80 e0       	ldi	r24, 0x00	; 0
    8ae8:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8aea:	f6 01       	movw	r30, r12
    8aec:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8aee:	f9 01       	movw	r30, r18
    8af0:	f0 80       	ld	r15, Z
    8af2:	f3 fe       	sbrs	r15, 3
    8af4:	2a c0       	rjmp	.+84     	; 0x8b4a <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8af6:	65 81       	ldd	r22, Z+5	; 0x05
    8af8:	76 81       	ldd	r23, Z+6	; 0x06
    8afa:	11 96       	adiw	r26, 0x01	; 1
    8afc:	8d 91       	ld	r24, X+
    8afe:	9c 91       	ld	r25, X
    8b00:	12 97       	sbiw	r26, 0x02	; 2
    8b02:	86 0f       	add	r24, r22
    8b04:	97 1f       	adc	r25, r23
    8b06:	12 96       	adiw	r26, 0x02	; 2
    8b08:	9c 93       	st	X, r25
    8b0a:	8e 93       	st	-X, r24
    8b0c:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8b0e:	f6 01       	movw	r30, r12
    8b10:	e7 80       	ldd	r14, Z+7	; 0x07
    8b12:	ee 2d       	mov	r30, r14
    8b14:	f0 e0       	ldi	r31, 0x00	; 0
    8b16:	ee 0f       	add	r30, r30
    8b18:	ff 1f       	adc	r31, r31
    8b1a:	e8 5f       	subi	r30, 0xF8	; 248
    8b1c:	ff 46       	sbci	r31, 0x6F	; 111
    8b1e:	c5 90       	lpm	r12, Z+
    8b20:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8b22:	16 16       	cp	r1, r22
    8b24:	17 06       	cpc	r1, r23
    8b26:	24 f4       	brge	.+8      	; 0x8b30 <ProcessMusic+0xa2>
    8b28:	8c 15       	cp	r24, r12
    8b2a:	9d 05       	cpc	r25, r13
    8b2c:	30 f4       	brcc	.+12     	; 0x8b3a <ProcessMusic+0xac>
    8b2e:	0d c0       	rjmp	.+26     	; 0x8b4a <ProcessMusic+0xbc>
    8b30:	67 2b       	or	r22, r23
    8b32:	59 f0       	breq	.+22     	; 0x8b4a <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8b34:	c8 16       	cp	r12, r24
    8b36:	d9 06       	cpc	r13, r25
    8b38:	40 f0       	brcs	.+16     	; 0x8b4a <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8b3a:	12 96       	adiw	r26, 0x02	; 2
    8b3c:	dc 92       	st	X, r13
    8b3e:	ce 92       	st	-X, r12
    8b40:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8b42:	8f 2d       	mov	r24, r15
    8b44:	87 7f       	andi	r24, 0xF7	; 247
    8b46:	f9 01       	movw	r30, r18
    8b48:	80 83       	st	Z, r24
    8b4a:	49 5e       	subi	r20, 0xE9	; 233
    8b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b4e:	29 5e       	subi	r18, 0xE9	; 233
    8b50:	3f 4f       	sbci	r19, 0xFF	; 255
    8b52:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8b54:	43 37       	cpi	r20, 0x73	; 115
    8b56:	51 05       	cpc	r21, r1
    8b58:	09 f0       	breq	.+2      	; 0x8b5c <ProcessMusic+0xce>
    8b5a:	af cf       	rjmp	.-162    	; 0x8aba <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8b5c:	80 91 ce 0c 	lds	r24, 0x0CCE
    8b60:	88 23       	and	r24, r24
    8b62:	09 f4       	brne	.+2      	; 0x8b66 <ProcessMusic+0xd8>
    8b64:	cc c0       	rjmp	.+408    	; 0x8cfe <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8b66:	57 e1       	ldi	r21, 0x17	; 23
    8b68:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8b6a:	80 91 70 0d 	lds	r24, 0x0D70
    8b6e:	90 91 71 0d 	lds	r25, 0x0D71
    8b72:	20 91 76 0d 	lds	r18, 0x0D76
    8b76:	30 91 77 0d 	lds	r19, 0x0D77
    8b7a:	82 17       	cp	r24, r18
    8b7c:	93 07       	cpc	r25, r19
    8b7e:	09 f0       	breq	.+2      	; 0x8b82 <ProcessMusic+0xf4>
    8b80:	b9 c0       	rjmp	.+370    	; 0x8cf4 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8b82:	20 91 79 0d 	lds	r18, 0x0D79
    8b86:	30 91 7a 0d 	lds	r19, 0x0D7A
    8b8a:	b9 01       	movw	r22, r18
    8b8c:	6f 5f       	subi	r22, 0xFF	; 255
    8b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8b90:	70 93 7a 0d 	sts	0x0D7A, r23
    8b94:	60 93 79 0d 	sts	0x0D79, r22
    8b98:	f9 01       	movw	r30, r18
    8b9a:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8b9c:	4f 3f       	cpi	r20, 0xFF	; 255
    8b9e:	79 f5       	brne	.+94     	; 0x8bfe <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8ba0:	a9 01       	movw	r20, r18
    8ba2:	4e 5f       	subi	r20, 0xFE	; 254
    8ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ba6:	50 93 7a 0d 	sts	0x0D7A, r21
    8baa:	40 93 79 0d 	sts	0x0D79, r20
    8bae:	fb 01       	movw	r30, r22
    8bb0:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8bb2:	6f 32       	cpi	r22, 0x2F	; 47
    8bb4:	19 f4       	brne	.+6      	; 0x8bbc <ProcessMusic+0x12e>
						playSong=false;
    8bb6:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    8bba:	9c c0       	rjmp	.+312    	; 0x8cf4 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8bbc:	66 30       	cpi	r22, 0x06	; 6
    8bbe:	09 f0       	breq	.+2      	; 0x8bc2 <ProcessMusic+0x134>
    8bc0:	8c c0       	rjmp	.+280    	; 0x8cda <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8bc2:	fa 01       	movw	r30, r20
    8bc4:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8bc6:	c9 01       	movw	r24, r18
    8bc8:	04 96       	adiw	r24, 0x04	; 4
    8bca:	90 93 7a 0d 	sts	0x0D7A, r25
    8bce:	80 93 79 0d 	sts	0x0D79, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8bd2:	f9 01       	movw	r30, r18
    8bd4:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8bd6:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8bd8:	e3 35       	cpi	r30, 0x53	; 83
    8bda:	29 f4       	brne	.+10     	; 0x8be6 <ProcessMusic+0x158>
							loopStart=songPos;
    8bdc:	90 93 7c 0d 	sts	0x0D7C, r25
    8be0:	80 93 7b 0d 	sts	0x0D7B, r24
    8be4:	7a c0       	rjmp	.+244    	; 0x8cda <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8be6:	e5 34       	cpi	r30, 0x45	; 69
    8be8:	09 f0       	breq	.+2      	; 0x8bec <ProcessMusic+0x15e>
    8bea:	77 c0       	rjmp	.+238    	; 0x8cda <ProcessMusic+0x24c>
							songPos=loopStart;
    8bec:	80 91 7b 0d 	lds	r24, 0x0D7B
    8bf0:	90 91 7c 0d 	lds	r25, 0x0D7C
    8bf4:	90 93 7a 0d 	sts	0x0D7A, r25
    8bf8:	80 93 79 0d 	sts	0x0D79, r24
    8bfc:	6e c0       	rjmp	.+220    	; 0x8cda <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8bfe:	47 fd       	sbrc	r20, 7
    8c00:	40 93 74 0d 	sts	0x0D74, r20
					channel=lastStatus&0x0f;
    8c04:	90 91 74 0d 	lds	r25, 0x0D74
    8c08:	89 2f       	mov	r24, r25
    8c0a:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8c0c:	47 ff       	sbrs	r20, 7
    8c0e:	08 c0       	rjmp	.+16     	; 0x8c20 <ProcessMusic+0x192>
    8c10:	2e 5f       	subi	r18, 0xFE	; 254
    8c12:	3f 4f       	sbci	r19, 0xFF	; 255
    8c14:	30 93 7a 0d 	sts	0x0D7A, r19
    8c18:	20 93 79 0d 	sts	0x0D79, r18
    8c1c:	fb 01       	movw	r30, r22
    8c1e:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8c20:	90 7f       	andi	r25, 0xF0	; 240
    8c22:	90 3b       	cpi	r25, 0xB0	; 176
    8c24:	e1 f0       	breq	.+56     	; 0x8c5e <ProcessMusic+0x1d0>
    8c26:	90 3c       	cpi	r25, 0xC0	; 192
    8c28:	09 f4       	brne	.+2      	; 0x8c2c <ProcessMusic+0x19e>
    8c2a:	51 c0       	rjmp	.+162    	; 0x8cce <ProcessMusic+0x240>
    8c2c:	90 39       	cpi	r25, 0x90	; 144
    8c2e:	09 f0       	breq	.+2      	; 0x8c32 <ProcessMusic+0x1a4>
    8c30:	54 c0       	rjmp	.+168    	; 0x8cda <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8c32:	e0 91 79 0d 	lds	r30, 0x0D79
    8c36:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8c3a:	9f 01       	movw	r18, r30
    8c3c:	2f 5f       	subi	r18, 0xFF	; 255
    8c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    8c40:	30 93 7a 0d 	sts	0x0D7A, r19
    8c44:	20 93 79 0d 	sts	0x0D79, r18
    8c48:	24 91       	lpm	r18, Z
    8c4a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8c4c:	f8 9e       	mul	r15, r24
    8c4e:	f0 01       	movw	r30, r0
    8c50:	11 24       	eor	r1, r1
    8c52:	e3 50       	subi	r30, 0x03	; 3
    8c54:	f3 4f       	sbci	r31, 0xF3	; 243
    8c56:	60 89       	ldd	r22, Z+16	; 0x10
    8c58:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <TriggerNote>
    8c5c:	3e c0       	rjmp	.+124    	; 0x8cda <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8c5e:	e0 91 79 0d 	lds	r30, 0x0D79
    8c62:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8c66:	9f 01       	movw	r18, r30
    8c68:	2f 5f       	subi	r18, 0xFF	; 255
    8c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c6c:	30 93 7a 0d 	sts	0x0D7A, r19
    8c70:	20 93 79 0d 	sts	0x0D79, r18
    8c74:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8c76:	47 30       	cpi	r20, 0x07	; 7
    8c78:	49 f4       	brne	.+18     	; 0x8c8c <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8c7a:	f8 9e       	mul	r15, r24
    8c7c:	d0 01       	movw	r26, r0
    8c7e:	11 24       	eor	r1, r1
    8c80:	a3 50       	subi	r26, 0x03	; 3
    8c82:	b3 4f       	sbci	r27, 0xF3	; 243
    8c84:	ee 0f       	add	r30, r30
    8c86:	1c 96       	adiw	r26, 0x0c	; 12
    8c88:	ec 93       	st	X, r30
    8c8a:	27 c0       	rjmp	.+78     	; 0x8cda <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8c8c:	4b 30       	cpi	r20, 0x0B	; 11
    8c8e:	49 f4       	brne	.+18     	; 0x8ca2 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8c90:	f8 9e       	mul	r15, r24
    8c92:	d0 01       	movw	r26, r0
    8c94:	11 24       	eor	r1, r1
    8c96:	a3 50       	subi	r26, 0x03	; 3
    8c98:	b3 4f       	sbci	r27, 0xF3	; 243
    8c9a:	ee 0f       	add	r30, r30
    8c9c:	13 96       	adiw	r26, 0x03	; 3
    8c9e:	ec 93       	st	X, r30
    8ca0:	1c c0       	rjmp	.+56     	; 0x8cda <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8ca2:	4c 35       	cpi	r20, 0x5C	; 92
    8ca4:	49 f4       	brne	.+18     	; 0x8cb8 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8ca6:	f8 9e       	mul	r15, r24
    8ca8:	d0 01       	movw	r26, r0
    8caa:	11 24       	eor	r1, r1
    8cac:	a3 50       	subi	r26, 0x03	; 3
    8cae:	b3 4f       	sbci	r27, 0xF3	; 243
    8cb0:	ee 0f       	add	r30, r30
    8cb2:	1a 96       	adiw	r26, 0x0a	; 10
    8cb4:	ec 93       	st	X, r30
    8cb6:	11 c0       	rjmp	.+34     	; 0x8cda <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8cb8:	44 36       	cpi	r20, 0x64	; 100
    8cba:	79 f4       	brne	.+30     	; 0x8cda <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8cbc:	f8 9e       	mul	r15, r24
    8cbe:	d0 01       	movw	r26, r0
    8cc0:	11 24       	eor	r1, r1
    8cc2:	a3 50       	subi	r26, 0x03	; 3
    8cc4:	b3 4f       	sbci	r27, 0xF3	; 243
    8cc6:	ee 0f       	add	r30, r30
    8cc8:	1b 96       	adiw	r26, 0x0b	; 11
    8cca:	ec 93       	st	X, r30
    8ccc:	06 c0       	rjmp	.+12     	; 0x8cda <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8cce:	f8 9e       	mul	r15, r24
    8cd0:	f0 01       	movw	r30, r0
    8cd2:	11 24       	eor	r1, r1
    8cd4:	e3 50       	subi	r30, 0x03	; 3
    8cd6:	f3 4f       	sbci	r31, 0xF3	; 243
    8cd8:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8cda:	89 e7       	ldi	r24, 0x79	; 121
    8cdc:	9d e0       	ldi	r25, 0x0D	; 13
    8cde:	0e 94 0b 44 	call	0x8816	; 0x8816 <ReadVarLen>
    8ce2:	90 93 77 0d 	sts	0x0D77, r25
    8ce6:	80 93 76 0d 	sts	0x0D76, r24
				currDeltaTime=0;
    8cea:	10 92 71 0d 	sts	0x0D71, r1
    8cee:	10 92 70 0d 	sts	0x0D70, r1
    8cf2:	3b cf       	rjmp	.-394    	; 0x8b6a <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8cf4:	01 96       	adiw	r24, 0x01	; 1
    8cf6:	90 93 71 0d 	sts	0x0D71, r25
    8cfa:	80 93 70 0d 	sts	0x0D70, r24
    8cfe:	96 e0       	ldi	r25, 0x06	; 6
    8d00:	a9 2e       	mov	r10, r25
    8d02:	9d e0       	ldi	r25, 0x0D	; 13
    8d04:	b9 2e       	mov	r11, r25
    8d06:	20 e1       	ldi	r18, 0x10	; 16
    8d08:	c2 2e       	mov	r12, r18
    8d0a:	2d e0       	ldi	r18, 0x0D	; 13
    8d0c:	d2 2e       	mov	r13, r18
    8d0e:	31 e1       	ldi	r19, 0x11	; 17
    8d10:	e3 2e       	mov	r14, r19
    8d12:	3d e0       	ldi	r19, 0x0D	; 13
    8d14:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8d16:	66 24       	eor	r6, r6
    8d18:	6a 94       	dec	r6
    8d1a:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8d1c:	88 81       	ld	r24, Y
    8d1e:	85 ff       	sbrs	r24, 5
    8d20:	42 c0       	rjmp	.+132    	; 0x8da6 <ProcessMusic+0x318>
    8d22:	2d 89       	ldd	r18, Y+21	; 0x15
    8d24:	3e 89       	ldd	r19, Y+22	; 0x16
    8d26:	23 2b       	or	r18, r19
    8d28:	09 f4       	brne	.+2      	; 0x8d2c <ProcessMusic+0x29e>
    8d2a:	3d c0       	rjmp	.+122    	; 0x8da6 <ProcessMusic+0x318>
    8d2c:	86 fd       	sbrc	r24, 6
    8d2e:	3b c0       	rjmp	.+118    	; 0x8da6 <ProcessMusic+0x318>
    8d30:	47 01       	movw	r8, r14
    8d32:	f2 e0       	ldi	r31, 0x02	; 2
    8d34:	8f 1a       	sub	r8, r31
    8d36:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8d38:	d6 01       	movw	r26, r12
    8d3a:	9c 91       	ld	r25, X
    8d3c:	f4 01       	movw	r30, r8
    8d3e:	80 81       	ld	r24, Z
    8d40:	98 13       	cpse	r25, r24
    8d42:	2e c0       	rjmp	.+92     	; 0x8da0 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8d44:	ed 89       	ldd	r30, Y+21	; 0x15
    8d46:	fe 89       	ldd	r31, Y+22	; 0x16
    8d48:	bf 01       	movw	r22, r30
    8d4a:	6f 5f       	subi	r22, 0xFF	; 255
    8d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d4e:	7e 8b       	std	Y+22, r23	; 0x16
    8d50:	6d 8b       	std	Y+21, r22	; 0x15
    8d52:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8d54:	8f 3f       	cpi	r24, 0xFF	; 255
    8d56:	31 f4       	brne	.+12     	; 0x8d64 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8d58:	88 81       	ld	r24, Y
    8d5a:	8f 77       	andi	r24, 0x7F	; 127
    8d5c:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8d5e:	1e 8a       	std	Y+22, r1	; 0x16
    8d60:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8d62:	1e c0       	rjmp	.+60     	; 0x8da0 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8d64:	9f 01       	movw	r18, r30
    8d66:	2e 5f       	subi	r18, 0xFE	; 254
    8d68:	3f 4f       	sbci	r19, 0xFF	; 255
    8d6a:	3e 8b       	std	Y+22, r19	; 0x16
    8d6c:	2d 8b       	std	Y+21, r18	; 0x15
    8d6e:	fb 01       	movw	r30, r22
    8d70:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8d72:	e8 2f       	mov	r30, r24
    8d74:	f0 e0       	ldi	r31, 0x00	; 0
    8d76:	ee 0f       	add	r30, r30
    8d78:	ff 1f       	adc	r31, r31
    8d7a:	ee 52       	subi	r30, 0x2E	; 46
    8d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    8d7e:	25 91       	lpm	r18, Z+
    8d80:	34 91       	lpm	r19, Z
    8d82:	ce 01       	movw	r24, r28
    8d84:	f9 01       	movw	r30, r18
    8d86:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8d88:	ed 89       	ldd	r30, Y+21	; 0x15
    8d8a:	fe 89       	ldd	r31, Y+22	; 0x16
    8d8c:	cf 01       	movw	r24, r30
    8d8e:	01 96       	adiw	r24, 0x01	; 1
    8d90:	9e 8b       	std	Y+22, r25	; 0x16
    8d92:	8d 8b       	std	Y+21, r24	; 0x15
    8d94:	e4 91       	lpm	r30, Z
    8d96:	d4 01       	movw	r26, r8
    8d98:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8d9a:	f6 01       	movw	r30, r12
    8d9c:	10 82       	st	Z, r1
    8d9e:	cc cf       	rjmp	.-104    	; 0x8d38 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8da0:	9f 5f       	subi	r25, 0xFF	; 255
    8da2:	d6 01       	movw	r26, r12
    8da4:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8da6:	98 81       	ld	r25, Y
    8da8:	95 ff       	sbrs	r25, 5
    8daa:	6c c0       	rjmp	.+216    	; 0x8e84 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8dac:	f7 01       	movw	r30, r14
    8dae:	80 81       	ld	r24, Z
    8db0:	8f 3f       	cpi	r24, 0xFF	; 255
    8db2:	11 f0       	breq	.+4      	; 0x8db8 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8db4:	8f 5f       	subi	r24, 0xFF	; 255
    8db6:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8db8:	97 fd       	sbrc	r25, 7
    8dba:	04 c0       	rjmp	.+8      	; 0x8dc4 <ProcessMusic+0x336>
    8dbc:	f7 01       	movw	r30, r14
    8dbe:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8dc0:	90 81       	ld	r25, Z
    8dc2:	01 c0       	rjmp	.+2      	; 0x8dc6 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8dc4:	9f ef       	ldi	r25, 0xFF	; 255
    8dc6:	f7 01       	movw	r30, r14
    8dc8:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8dca:	80 81       	ld	r24, Z
    8dcc:	88 23       	and	r24, r24
    8dce:	09 f4       	brne	.+2      	; 0x8dd2 <ProcessMusic+0x344>
    8dd0:	4e c0       	rjmp	.+156    	; 0x8e6e <ProcessMusic+0x3e0>
    8dd2:	31 96       	adiw	r30, 0x01	; 1
    8dd4:	50 81       	ld	r21, Z
    8dd6:	55 23       	and	r21, r21
    8dd8:	09 f4       	brne	.+2      	; 0x8ddc <ProcessMusic+0x34e>
    8dda:	49 c0       	rjmp	.+146    	; 0x8e6e <ProcessMusic+0x3e0>
    8ddc:	99 23       	and	r25, r25
    8dde:	09 f4       	brne	.+2      	; 0x8de2 <ProcessMusic+0x354>
    8de0:	46 c0       	rjmp	.+140    	; 0x8e6e <ProcessMusic+0x3e0>
    8de2:	40 91 75 0d 	lds	r20, 0x0D75
    8de6:	44 23       	and	r20, r20
    8de8:	09 f4       	brne	.+2      	; 0x8dec <ProcessMusic+0x35e>
    8dea:	41 c0       	rjmp	.+130    	; 0x8e6e <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8dec:	89 9f       	mul	r24, r25
    8dee:	c0 01       	movw	r24, r0
    8df0:	11 24       	eor	r1, r1
    8df2:	93 95       	inc	r25
				uVol>>=8;
    8df4:	89 2f       	mov	r24, r25
    8df6:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8df8:	58 9f       	mul	r21, r24
    8dfa:	90 01       	movw	r18, r0
    8dfc:	59 9f       	mul	r21, r25
    8dfe:	30 0d       	add	r19, r0
    8e00:	11 24       	eor	r1, r1
    8e02:	c9 01       	movw	r24, r18
    8e04:	93 95       	inc	r25
				uVol>>=8;
    8e06:	89 2f       	mov	r24, r25
    8e08:	99 27       	eor	r25, r25
    8e0a:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8e0c:	50 81       	ld	r21, Z
    8e0e:	58 9f       	mul	r21, r24
    8e10:	90 01       	movw	r18, r0
    8e12:	59 9f       	mul	r21, r25
    8e14:	30 0d       	add	r19, r0
    8e16:	11 24       	eor	r1, r1
    8e18:	33 95       	inc	r19
					uVol>>=8;
    8e1a:	23 2f       	mov	r18, r19
    8e1c:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8e1e:	42 9f       	mul	r20, r18
    8e20:	c0 01       	movw	r24, r0
    8e22:	43 9f       	mul	r20, r19
    8e24:	90 0d       	add	r25, r0
    8e26:	11 24       	eor	r1, r1
    8e28:	93 95       	inc	r25
				uVol>>=8;
    8e2a:	89 2f       	mov	r24, r25
    8e2c:	99 27       	eor	r25, r25
    8e2e:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8e30:	20 81       	ld	r18, Z
    8e32:	22 23       	and	r18, r18
    8e34:	f1 f0       	breq	.+60     	; 0x8e72 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8e36:	d5 01       	movw	r26, r10
    8e38:	ec 91       	ld	r30, X
    8e3a:	f0 e0       	ldi	r31, 0x00	; 0
    8e3c:	e0 50       	subi	r30, 0x00	; 0
    8e3e:	fe 46       	sbci	r31, 0x6E	; 110
    8e40:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8e42:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8e44:	2e 9f       	mul	r18, r30
    8e46:	f0 01       	movw	r30, r0
    8e48:	11 24       	eor	r1, r1
    8e4a:	f3 95       	inc	r31
					tVol>>=8;
    8e4c:	ef 2f       	mov	r30, r31
    8e4e:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8e50:	a3 01       	movw	r20, r6
    8e52:	4e 1b       	sub	r20, r30
    8e54:	5f 0b       	sbc	r21, r31
    8e56:	48 9f       	mul	r20, r24
    8e58:	90 01       	movw	r18, r0
    8e5a:	49 9f       	mul	r20, r25
    8e5c:	30 0d       	add	r19, r0
    8e5e:	58 9f       	mul	r21, r24
    8e60:	30 0d       	add	r19, r0
    8e62:	11 24       	eor	r1, r1
    8e64:	c9 01       	movw	r24, r18
    8e66:	93 95       	inc	r25
					uVol>>=8;
    8e68:	89 2f       	mov	r24, r25
    8e6a:	99 27       	eor	r25, r25
    8e6c:	02 c0       	rjmp	.+4      	; 0x8e72 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8e6e:	80 e0       	ldi	r24, 0x00	; 0
    8e70:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8e72:	f5 01       	movw	r30, r10
    8e74:	30 81       	ld	r19, Z
    8e76:	f7 01       	movw	r30, r14
    8e78:	39 97       	sbiw	r30, 0x09	; 9
    8e7a:	20 81       	ld	r18, Z
    8e7c:	23 0f       	add	r18, r19
    8e7e:	d5 01       	movw	r26, r10
    8e80:	2c 93       	st	X, r18
    8e82:	02 c0       	rjmp	.+4      	; 0x8e88 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8e84:	80 e0       	ldi	r24, 0x00	; 0
    8e86:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8e88:	f8 01       	movw	r30, r16
    8e8a:	80 83       	st	Z, r24
    8e8c:	67 96       	adiw	r28, 0x17	; 23
    8e8e:	0a 5f       	subi	r16, 0xFA	; 250
    8e90:	1f 4f       	sbci	r17, 0xFF	; 255
    8e92:	f7 e1       	ldi	r31, 0x17	; 23
    8e94:	af 0e       	add	r10, r31
    8e96:	b1 1c       	adc	r11, r1
    8e98:	87 e1       	ldi	r24, 0x17	; 23
    8e9a:	c8 0e       	add	r12, r24
    8e9c:	d1 1c       	adc	r13, r1
    8e9e:	97 e1       	ldi	r25, 0x17	; 23
    8ea0:	e9 0e       	add	r14, r25
    8ea2:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8ea4:	ad e0       	ldi	r26, 0x0D	; 13
    8ea6:	c0 37       	cpi	r28, 0x70	; 112
    8ea8:	da 07       	cpc	r29, r26
    8eaa:	09 f0       	breq	.+2      	; 0x8eae <ProcessMusic+0x420>
    8eac:	37 cf       	rjmp	.-402    	; 0x8d1c <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8eae:	df 91       	pop	r29
    8eb0:	cf 91       	pop	r28
    8eb2:	1f 91       	pop	r17
    8eb4:	0f 91       	pop	r16
    8eb6:	ff 90       	pop	r15
    8eb8:	ef 90       	pop	r14
    8eba:	df 90       	pop	r13
    8ebc:	cf 90       	pop	r12
    8ebe:	bf 90       	pop	r11
    8ec0:	af 90       	pop	r10
    8ec2:	9f 90       	pop	r9
    8ec4:	8f 90       	pop	r8
    8ec6:	7f 90       	pop	r7
    8ec8:	6f 90       	pop	r6
    8eca:	08 95       	ret

00008ecc <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8ecc:	80 93 75 0d 	sts	0x0D75, r24
    8ed0:	08 95       	ret

00008ed2 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8ed2:	99 27       	eor	r25, r25
	clr r23
    8ed4:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8ed6:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8ed8:	09 f4       	brne	.+2      	; 0x8edc <set_note_waves>
		ret
    8eda:	08 95       	ret

00008edc <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8edc:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8ede:	f0 e9       	ldi	r31, 0x90	; 144
	lsl r22
    8ee0:	66 0f       	add	r22, r22
	rol r23
    8ee2:	77 1f       	adc	r23, r23
	add ZL,r22
    8ee4:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8ee6:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8ee8:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8eea:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8eec:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8eee:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8ef0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8ef2:	28 9f       	mul	r18, r24
	add ZL,r0
    8ef4:	e0 0d       	add	r30, r0
	adc ZH,r1
    8ef6:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8ef8:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8efa:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8efc:	11 24       	eor	r1, r1
	

	ret
    8efe:	08 95       	ret

00008f00 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8f00:	99 27       	eor	r25, r25
	clr r23
    8f02:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8f04:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8f06:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8f08:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8f0a:	28 9f       	mul	r18, r24
	add ZL,r0
    8f0c:	e0 0d       	add	r30, r0
	adc ZH,r1
    8f0e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8f10:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8f12:	31 f4       	brne	.+12     	; 0x8f20 <smw1>
	lds r22,tr4_params
    8f14:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8f18:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8f1a:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8f1e:	0b c0       	rjmp	.+22     	; 0x8f36 <esmw>

00008f20 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8f20:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8f22:	31 f4       	brne	.+12     	; 0x8f30 <smw2>
	lds r22,tr4_params
    8f24:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8f28:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8f2a:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8f2e:	03 c0       	rjmp	.+6      	; 0x8f36 <esmw>

00008f30 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8f30:	72 e9       	ldi	r23, 0x92	; 146
	add r23,r22
    8f32:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8f34:	75 83       	std	Z+5, r23	; 0x05

00008f36 <esmw>:

esmw:
	clr r1	
    8f36:	11 24       	eor	r1, r1
	ret
    8f38:	08 95       	ret
	...

00009000 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9000:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9002:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    9006:	08 95       	ret

00009008 <steptable>:
    9008:	22 00       	.word	0x0022	; ????
    900a:	24 00       	.word	0x0024	; ????
    900c:	26 00       	.word	0x0026	; ????
    900e:	28 00       	.word	0x0028	; ????
    9010:	2b 00       	.word	0x002b	; ????
    9012:	2d 00       	.word	0x002d	; ????
    9014:	30 00       	.word	0x0030	; ????
    9016:	33 00       	.word	0x0033	; ????
    9018:	36 00       	.word	0x0036	; ????
    901a:	39 00       	.word	0x0039	; ????
    901c:	3d 00       	.word	0x003d	; ????
    901e:	40 00       	.word	0x0040	; ????
    9020:	44 00       	.word	0x0044	; ????
    9022:	48 00       	.word	0x0048	; ????
    9024:	4c 00       	.word	0x004c	; ????
    9026:	51 00       	.word	0x0051	; ????
    9028:	56 00       	.word	0x0056	; ????
    902a:	5b 00       	.word	0x005b	; ????
    902c:	60 00       	.word	0x0060	; ????
    902e:	66 00       	.word	0x0066	; ????
    9030:	6c 00       	.word	0x006c	; ????
    9032:	73 00       	.word	0x0073	; ????
    9034:	79 00       	.word	0x0079	; ????
    9036:	81 00       	.word	0x0081	; ????
    9038:	88 00       	.word	0x0088	; ????
    903a:	90 00       	.word	0x0090	; ????
    903c:	99 00       	.word	0x0099	; ????
    903e:	a2 00       	.word	0x00a2	; ????
    9040:	ac 00       	.word	0x00ac	; ????
    9042:	b6 00       	.word	0x00b6	; ????
    9044:	c1 00       	.word	0x00c1	; ????
    9046:	cc 00       	.word	0x00cc	; ????
    9048:	d8 00       	.word	0x00d8	; ????
    904a:	e5 00       	.word	0x00e5	; ????
    904c:	f3 00       	.word	0x00f3	; ????
    904e:	01 01       	movw	r0, r2
    9050:	10 01       	movw	r2, r0
    9052:	21 01       	movw	r4, r2
    9054:	32 01       	movw	r6, r4
    9056:	44 01       	movw	r8, r8
    9058:	57 01       	movw	r10, r14
    905a:	6c 01       	movw	r12, r24
    905c:	81 01       	movw	r16, r2
    905e:	98 01       	movw	r18, r16
    9060:	b0 01       	movw	r22, r0
    9062:	ca 01       	movw	r24, r20
    9064:	e5 01       	movw	r28, r10
    9066:	02 02       	muls	r16, r18
    9068:	21 02       	muls	r18, r17
    906a:	41 02       	muls	r20, r17
    906c:	64 02       	muls	r22, r20
    906e:	88 02       	muls	r24, r24
    9070:	ae 02       	muls	r26, r30
    9072:	d7 02       	muls	r29, r23
    9074:	03 03       	mulsu	r16, r19
    9076:	30 03       	mulsu	r19, r16
    9078:	61 03       	mulsu	r22, r17
    907a:	94 03       	fmuls	r17, r20
    907c:	cb 03       	fmulsu	r20, r19
    907e:	05 04       	cpc	r0, r5
    9080:	42 04       	cpc	r4, r2
    9082:	83 04       	cpc	r8, r3
    9084:	c7 04       	cpc	r12, r7
    9086:	10 05       	cpc	r17, r0
    9088:	5d 05       	cpc	r21, r13
    908a:	af 05       	cpc	r26, r15
    908c:	05 06       	cpc	r0, r21
    908e:	61 06       	cpc	r6, r17
    9090:	c2 06       	cpc	r12, r18
    9092:	29 07       	cpc	r18, r25
    9094:	96 07       	cpc	r25, r22
    9096:	09 08       	sbc	r0, r9
    9098:	83 08       	sbc	r8, r3
    909a:	05 09       	sbc	r16, r5
    909c:	8e 09       	sbc	r24, r14
    909e:	20 0a       	sbc	r2, r16
    90a0:	ba 0a       	sbc	r11, r26
    90a2:	5d 0b       	sbc	r21, r29
    90a4:	0a 0c       	add	r0, r10
    90a6:	c1 0c       	add	r12, r1
    90a8:	84 0d       	add	r24, r4
    90aa:	51 0e       	add	r5, r17
    90ac:	2b 0f       	add	r18, r27
    90ae:	12 10       	cpse	r1, r2
    90b0:	07 11       	cpse	r16, r7
    90b2:	0a 12       	cpse	r0, r26
    90b4:	1d 13       	cpse	r17, r29
    90b6:	40 14       	cp	r4, r0
    90b8:	74 15       	cp	r23, r4
    90ba:	ba 16       	cp	r11, r26
    90bc:	14 18       	sub	r1, r4
    90be:	83 19       	sub	r24, r3
    90c0:	07 1b       	sub	r16, r23
    90c2:	a3 1c       	adc	r10, r3
    90c4:	57 1e       	adc	r5, r23
    90c6:	24 20       	and	r2, r4
    90c8:	0e 22       	and	r0, r30
    90ca:	14 24       	eor	r1, r4
    90cc:	39 26       	eor	r3, r25
    90ce:	7f 28       	or	r7, r15
    90d0:	e8 2a       	or	r14, r24
    90d2:	75 2d       	mov	r23, r5
    90d4:	29 30       	cpi	r18, 0x09	; 9
    90d6:	06 33       	cpi	r16, 0x36	; 54
    90d8:	0f 36       	cpi	r16, 0x6F	; 111
    90da:	45 39       	cpi	r20, 0x95	; 149
    90dc:	ad 3c       	cpi	r26, 0xCD	; 205
    90de:	49 40       	sbci	r20, 0x09	; 9
    90e0:	1b 44       	sbci	r17, 0x4B	; 75
    90e2:	28 48       	sbci	r18, 0x88	; 136
    90e4:	73 4c       	sbci	r23, 0xC3	; 195
    90e6:	fe 50       	subi	r31, 0x0E	; 14
    90e8:	cf 55       	subi	r28, 0x5F	; 95
    90ea:	ea 5a       	subi	r30, 0xAA	; 170
    90ec:	51 60       	ori	r21, 0x01	; 1
    90ee:	0c 66       	ori	r16, 0x6C	; 108
    90f0:	1d 6c       	ori	r17, 0xCD	; 205
    90f2:	8b 72       	andi	r24, 0x2B	; 43
    90f4:	5a 79       	andi	r21, 0x9A	; 154
    90f6:	92 80       	ldd	r9, Z+2	; 0x02
    90f8:	37 88       	ldd	r3, Z+23	; 0x17
    90fa:	50 90 e5 98 	lds	r5, 0x98E5
    90fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9100:	9f ab       	std	Y+55, r25	; 0x37
    9102:	d3 b5       	in	r29, 0x23	; 35
    9104:	a3 c0       	rjmp	.+326    	; 0x924c <waves+0x4c>
	...

00009200 <waves>:
    9200:	00 03       	mulsu	r16, r16
    9202:	06 09       	sbc	r16, r6
    9204:	0c 10       	cpse	r0, r12
    9206:	13 16       	cp	r1, r19
    9208:	19 1c       	adc	r1, r9
    920a:	1f 22       	and	r1, r31
    920c:	25 28       	or	r2, r5
    920e:	2b 2e       	mov	r2, r27
    9210:	31 33       	cpi	r19, 0x31	; 49
    9212:	36 39       	cpi	r19, 0x96	; 150
    9214:	3c 3f       	cpi	r19, 0xFC	; 252
    9216:	41 44       	sbci	r20, 0x41	; 65
    9218:	47 49       	sbci	r20, 0x97	; 151
    921a:	4c 4e       	sbci	r20, 0xEC	; 236
    921c:	51 53       	subi	r21, 0x31	; 49
    921e:	55 58       	subi	r21, 0x85	; 133
    9220:	5a 5c       	subi	r21, 0xCA	; 202
    9222:	5e 60       	ori	r21, 0x0E	; 14
    9224:	62 64       	ori	r22, 0x42	; 66
    9226:	66 68       	ori	r22, 0x86	; 134
    9228:	6a 6b       	ori	r22, 0xBA	; 186
    922a:	6d 6f       	ori	r22, 0xFD	; 253
    922c:	70 71       	andi	r23, 0x10	; 16
    922e:	73 74       	andi	r23, 0x43	; 67
    9230:	75 76       	andi	r23, 0x65	; 101
    9232:	78 79       	andi	r23, 0x98	; 152
    9234:	7a 7a       	andi	r23, 0xAA	; 170
    9236:	7b 7c       	andi	r23, 0xCB	; 203
    9238:	7d 7d       	andi	r23, 0xDD	; 221
    923a:	7e 7e       	andi	r23, 0xEE	; 238
    923c:	7e 7f       	andi	r23, 0xFE	; 254
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7e 7e       	andi	r23, 0xEE	; 238
    9246:	7e 7d       	andi	r23, 0xDE	; 222
    9248:	7d 7c       	andi	r23, 0xCD	; 205
    924a:	7b 7a       	andi	r23, 0xAB	; 171
    924c:	7a 79       	andi	r23, 0x9A	; 154
    924e:	78 76       	andi	r23, 0x68	; 104
    9250:	75 74       	andi	r23, 0x45	; 69
    9252:	73 71       	andi	r23, 0x13	; 19
    9254:	70 6f       	ori	r23, 0xF0	; 240
    9256:	6d 6b       	ori	r22, 0xBD	; 189
    9258:	6a 68       	ori	r22, 0x8A	; 138
    925a:	66 64       	ori	r22, 0x46	; 70
    925c:	62 60       	ori	r22, 0x02	; 2
    925e:	5e 5c       	subi	r21, 0xCE	; 206
    9260:	5a 58       	subi	r21, 0x8A	; 138
    9262:	55 53       	subi	r21, 0x35	; 53
    9264:	51 4e       	sbci	r21, 0xE1	; 225
    9266:	4c 49       	sbci	r20, 0x9C	; 156
    9268:	47 44       	sbci	r20, 0x47	; 71
    926a:	41 3f       	cpi	r20, 0xF1	; 241
    926c:	3c 39       	cpi	r19, 0x9C	; 156
    926e:	36 33       	cpi	r19, 0x36	; 54
    9270:	31 2e       	mov	r3, r17
    9272:	2b 28       	or	r2, r11
    9274:	25 22       	and	r2, r21
    9276:	1f 1c       	adc	r1, r15
    9278:	19 16       	cp	r1, r25
    927a:	13 10       	cpse	r1, r3
    927c:	0c 09       	sbc	r16, r12
    927e:	06 03       	mulsu	r16, r22
    9280:	00 fd       	sbrc	r16, 0
    9282:	fa f7       	brpl	.-2      	; 0x9282 <waves+0x82>
    9284:	f4 f0       	brlt	.+60     	; 0x92c2 <waves+0xc2>
    9286:	ed ea       	ldi	r30, 0xAD	; 173
    9288:	e7 e4       	ldi	r30, 0x47	; 71
    928a:	e1 de       	rcall	.-574    	; 0x904e <steptable+0x46>
    928c:	db d8       	rcall	.-3658   	; 0x8444 <EepromBlockExists+0x32>
    928e:	d5 d2       	rcall	.+1450   	; 0x983a <waves+0x63a>
    9290:	cf cd       	rjmp	.-1122   	; 0x8e30 <ProcessMusic+0x3a2>
    9292:	ca c7       	rjmp	.+3988   	; 0xa228 <LBPrintChar+0x2c>
    9294:	c4 c1       	rjmp	.+904    	; 0x961e <waves+0x41e>
    9296:	bf bc       	out	0x2f, r11	; 47
    9298:	b9 b7       	in	r27, 0x39	; 57
    929a:	b4 b2       	in	r11, 0x14	; 20
    929c:	af ad       	ldd	r26, Y+63	; 0x3f
    929e:	ab a8       	ldd	r10, Y+51	; 0x33
    92a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    92a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    92a4:	9e 9c       	mul	r9, r14
    92a6:	9a 98       	cbi	0x13, 2	; 19
    92a8:	96 95       	lsr	r25
    92aa:	93 91       	.word	0x9193	; ????
    92ac:	90 8f       	std	Z+24, r25	; 0x18
    92ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    92b0:	8b 8a       	std	Y+19, r8	; 0x13
    92b2:	88 87       	std	Y+8, r24	; 0x08
    92b4:	86 86       	std	Z+14, r8	; 0x0e
    92b6:	85 84       	ldd	r8, Z+13	; 0x0d
    92b8:	83 83       	std	Z+3, r24	; 0x03
    92ba:	82 82       	std	Z+2, r8	; 0x02
    92bc:	82 81       	ldd	r24, Z+2	; 0x02
    92be:	81 81       	ldd	r24, Z+1	; 0x01
    92c0:	81 81       	ldd	r24, Z+1	; 0x01
    92c2:	81 81       	ldd	r24, Z+1	; 0x01
    92c4:	82 82       	std	Z+2, r8	; 0x02
    92c6:	82 83       	std	Z+2, r24	; 0x02
    92c8:	83 84       	ldd	r8, Z+11	; 0x0b
    92ca:	85 86       	std	Z+13, r8	; 0x0d
    92cc:	86 87       	std	Z+14, r24	; 0x0e
    92ce:	88 8a       	std	Y+16, r8	; 0x10
    92d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    92d2:	8d 8f       	std	Y+29, r24	; 0x1d
    92d4:	90 91 93 95 	lds	r25, 0x9593
    92d8:	96 98       	cbi	0x12, 6	; 18
    92da:	9a 9c       	mul	r9, r10
    92dc:	9e a0       	ldd	r9, Y+38	; 0x26
    92de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    92e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    92e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    92e4:	af b2       	in	r10, 0x1f	; 31
    92e6:	b4 b7       	in	r27, 0x34	; 52
    92e8:	b9 bc       	out	0x29, r11	; 41
    92ea:	bf c1       	rjmp	.+894    	; 0x966a <waves+0x46a>
    92ec:	c4 c7       	rjmp	.+3976   	; 0xa276 <LBPrintByte+0x2>
    92ee:	ca cd       	rjmp	.-1132   	; 0x8e84 <ProcessMusic+0x3f6>
    92f0:	cf d2       	rcall	.+1438   	; 0x9890 <waves+0x690>
    92f2:	d5 d8       	rcall	.-3670   	; 0x849e <EepromBlockExists+0x8c>
    92f4:	db de       	rcall	.-586    	; 0x90ac <steptable+0xa4>
    92f6:	e1 e4       	ldi	r30, 0x41	; 65
    92f8:	e7 ea       	ldi	r30, 0xA7	; 167
    92fa:	ed f0       	brhs	.+58     	; 0x9336 <waves+0x136>
    92fc:	f4 f7       	brge	.-4      	; 0x92fa <waves+0xfa>
    92fe:	fa fd       	.word	0xfdfa	; ????
    9300:	80 81       	ld	r24, Z
    9302:	82 83       	std	Z+2, r24	; 0x02
    9304:	84 85       	ldd	r24, Z+12	; 0x0c
    9306:	86 87       	std	Z+14, r24	; 0x0e
    9308:	88 89       	ldd	r24, Y+16	; 0x10
    930a:	8a 8b       	std	Y+18, r24	; 0x12
    930c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    930e:	8e 8f       	std	Y+30, r24	; 0x1e
    9310:	90 91 92 93 	lds	r25, 0x9392
    9314:	94 95       	.word	0x9594	; ????
    9316:	96 97       	sbiw	r26, 0x26	; 38
    9318:	98 99       	sbic	0x13, 0	; 19
    931a:	9a 9b       	sbis	0x13, 2	; 19
    931c:	9c 9d       	mul	r25, r12
    931e:	9e 9f       	mul	r25, r30
    9320:	a0 a1       	ldd	r26, Z+32	; 0x20
    9322:	a2 a3       	std	Z+34, r26	; 0x22
    9324:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9326:	a6 a7       	std	Z+46, r26	; 0x2e
    9328:	a8 a9       	ldd	r26, Y+48	; 0x30
    932a:	aa ab       	std	Y+50, r26	; 0x32
    932c:	ac ad       	ldd	r26, Y+60	; 0x3c
    932e:	ae af       	std	Y+62, r26	; 0x3e
    9330:	b0 b1       	in	r27, 0x00	; 0
    9332:	b2 b3       	in	r27, 0x12	; 18
    9334:	b4 b5       	in	r27, 0x24	; 36
    9336:	b6 b7       	in	r27, 0x36	; 54
    9338:	b8 b9       	out	0x08, r27	; 8
    933a:	ba bb       	out	0x1a, r27	; 26
    933c:	bc bd       	out	0x2c, r27	; 44
    933e:	be bf       	out	0x3e, r27	; 62
    9340:	c0 c1       	rjmp	.+896    	; 0x96c2 <waves+0x4c2>
    9342:	c2 c3       	rjmp	.+1924   	; 0x9ac8 <waves+0x8c8>
    9344:	c4 c5       	rjmp	.+2952   	; 0x9ece <DrawMap+0x16>
    9346:	c6 c7       	rjmp	.+3980   	; 0xa2d4 <LBPrintByte+0x60>
    9348:	c8 c9       	rjmp	.-3184   	; 0x86da <PatchCommand03+0x8>
    934a:	ca cb       	rjmp	.-2156   	; 0x8ae0 <ProcessMusic+0x52>
    934c:	cc cd       	rjmp	.-1128   	; 0x8ee6 <set_note_waves+0xa>
    934e:	ce cf       	rjmp	.-100    	; 0x92ec <waves+0xec>
    9350:	d0 d1       	rcall	.+928    	; 0x96f2 <waves+0x4f2>
    9352:	d2 d3       	rcall	.+1956   	; 0x9af8 <waves+0x8f8>
    9354:	d4 d5       	rcall	.+2984   	; 0x9efe <DrawMap+0x46>
    9356:	d6 d7       	rcall	.+4012   	; 0xa304 <LBPrintInt+0x2e>
    9358:	d8 d9       	rcall	.-3152   	; 0x870a <PatchCommand08+0x1a>
    935a:	da db       	rcall	.-2124   	; 0x8b10 <ProcessMusic+0x82>
    935c:	dc dd       	rcall	.-1096   	; 0x8f16 <SetMixerWave+0x16>
    935e:	de df       	rcall	.-68     	; 0x931c <waves+0x11c>
    9360:	e0 e1       	ldi	r30, 0x10	; 16
    9362:	e2 e3       	ldi	r30, 0x32	; 50
    9364:	e4 e5       	ldi	r30, 0x54	; 84
    9366:	e6 e7       	ldi	r30, 0x76	; 118
    9368:	e8 e9       	ldi	r30, 0x98	; 152
    936a:	ea eb       	ldi	r30, 0xBA	; 186
    936c:	ec ed       	ldi	r30, 0xDC	; 220
    936e:	ee ef       	ldi	r30, 0xFE	; 254
    9370:	f0 f1       	brcs	.+124    	; 0x93ee <waves+0x1ee>
    9372:	f2 f3       	brmi	.-4      	; 0x9370 <waves+0x170>
    9374:	f4 f5       	brge	.+124    	; 0x93f2 <waves+0x1f2>
    9376:	f6 f7       	brtc	.-4      	; 0x9374 <waves+0x174>
    9378:	f8 f9       	.word	0xf9f8	; ????
    937a:	fa fb       	.word	0xfbfa	; ????
    937c:	fc fd       	.word	0xfdfc	; ????
    937e:	fe ff       	.word	0xfffe	; ????
    9380:	00 01       	movw	r0, r0
    9382:	02 03       	mulsu	r16, r18
    9384:	04 05       	cpc	r16, r4
    9386:	06 07       	cpc	r16, r22
    9388:	08 09       	sbc	r16, r8
    938a:	0a 0b       	sbc	r16, r26
    938c:	0c 0d       	add	r16, r12
    938e:	0e 0f       	add	r16, r30
    9390:	10 11       	cpse	r17, r0
    9392:	12 13       	cpse	r17, r18
    9394:	14 15       	cp	r17, r4
    9396:	16 17       	cp	r17, r22
    9398:	18 19       	sub	r17, r8
    939a:	1a 1b       	sub	r17, r26
    939c:	1c 1d       	adc	r17, r12
    939e:	1e 1f       	adc	r17, r30
    93a0:	20 21       	and	r18, r0
    93a2:	22 23       	and	r18, r18
    93a4:	24 25       	eor	r18, r4
    93a6:	26 27       	eor	r18, r22
    93a8:	28 29       	or	r18, r8
    93aa:	2a 2b       	or	r18, r26
    93ac:	2c 2d       	mov	r18, r12
    93ae:	2e 2f       	mov	r18, r30
    93b0:	30 31       	cpi	r19, 0x10	; 16
    93b2:	32 33       	cpi	r19, 0x32	; 50
    93b4:	34 35       	cpi	r19, 0x54	; 84
    93b6:	36 37       	cpi	r19, 0x76	; 118
    93b8:	38 39       	cpi	r19, 0x98	; 152
    93ba:	3a 3b       	cpi	r19, 0xBA	; 186
    93bc:	3c 3d       	cpi	r19, 0xDC	; 220
    93be:	3e 3f       	cpi	r19, 0xFE	; 254
    93c0:	40 41       	sbci	r20, 0x10	; 16
    93c2:	42 43       	sbci	r20, 0x32	; 50
    93c4:	44 45       	sbci	r20, 0x54	; 84
    93c6:	46 47       	sbci	r20, 0x76	; 118
    93c8:	48 49       	sbci	r20, 0x98	; 152
    93ca:	4a 4b       	sbci	r20, 0xBA	; 186
    93cc:	4c 4d       	sbci	r20, 0xDC	; 220
    93ce:	4e 4f       	sbci	r20, 0xFE	; 254
    93d0:	50 51       	subi	r21, 0x10	; 16
    93d2:	52 53       	subi	r21, 0x32	; 50
    93d4:	54 55       	subi	r21, 0x54	; 84
    93d6:	56 57       	subi	r21, 0x76	; 118
    93d8:	58 59       	subi	r21, 0x98	; 152
    93da:	5a 5b       	subi	r21, 0xBA	; 186
    93dc:	5c 5d       	subi	r21, 0xDC	; 220
    93de:	5e 5f       	subi	r21, 0xFE	; 254
    93e0:	60 61       	ori	r22, 0x10	; 16
    93e2:	62 63       	ori	r22, 0x32	; 50
    93e4:	64 65       	ori	r22, 0x54	; 84
    93e6:	66 67       	ori	r22, 0x76	; 118
    93e8:	68 69       	ori	r22, 0x98	; 152
    93ea:	6a 6b       	ori	r22, 0xBA	; 186
    93ec:	6c 6d       	ori	r22, 0xDC	; 220
    93ee:	6e 6f       	ori	r22, 0xFE	; 254
    93f0:	70 71       	andi	r23, 0x10	; 16
    93f2:	72 73       	andi	r23, 0x32	; 50
    93f4:	74 75       	andi	r23, 0x54	; 84
    93f6:	76 77       	andi	r23, 0x76	; 118
    93f8:	78 79       	andi	r23, 0x98	; 152
    93fa:	7a 7b       	andi	r23, 0xBA	; 186
    93fc:	7c 7d       	andi	r23, 0xDC	; 220
    93fe:	7e 7f       	andi	r23, 0xFE	; 254
    9400:	00 02       	muls	r16, r16
    9402:	04 06       	cpc	r0, r20
    9404:	08 0a       	sbc	r0, r24
    9406:	0c 0e       	add	r0, r28
    9408:	10 12       	cpse	r1, r16
    940a:	14 16       	cp	r1, r20
    940c:	18 1a       	sub	r1, r24
    940e:	1c 1e       	adc	r1, r28
    9410:	20 22       	and	r2, r16
    9412:	24 26       	eor	r2, r20
    9414:	28 2a       	or	r2, r24
    9416:	2c 2e       	mov	r2, r28
    9418:	30 32       	cpi	r19, 0x20	; 32
    941a:	34 36       	cpi	r19, 0x64	; 100
    941c:	38 3a       	cpi	r19, 0xA8	; 168
    941e:	3c 3e       	cpi	r19, 0xEC	; 236
    9420:	40 42       	sbci	r20, 0x20	; 32
    9422:	44 46       	sbci	r20, 0x64	; 100
    9424:	48 4a       	sbci	r20, 0xA8	; 168
    9426:	4c 4e       	sbci	r20, 0xEC	; 236
    9428:	50 52       	subi	r21, 0x20	; 32
    942a:	54 56       	subi	r21, 0x64	; 100
    942c:	58 5a       	subi	r21, 0xA8	; 168
    942e:	5c 5e       	subi	r21, 0xEC	; 236
    9430:	60 62       	ori	r22, 0x20	; 32
    9432:	64 66       	ori	r22, 0x64	; 100
    9434:	68 6a       	ori	r22, 0xA8	; 168
    9436:	6c 6e       	ori	r22, 0xEC	; 236
    9438:	70 72       	andi	r23, 0x20	; 32
    943a:	74 76       	andi	r23, 0x64	; 100
    943c:	78 7a       	andi	r23, 0xA8	; 168
    943e:	7c 7e       	andi	r23, 0xEC	; 236
    9440:	7f 7d       	andi	r23, 0xDF	; 223
    9442:	7b 79       	andi	r23, 0x9B	; 155
    9444:	77 75       	andi	r23, 0x57	; 87
    9446:	73 71       	andi	r23, 0x13	; 19
    9448:	6f 6d       	ori	r22, 0xDF	; 223
    944a:	6b 69       	ori	r22, 0x9B	; 155
    944c:	67 65       	ori	r22, 0x57	; 87
    944e:	63 61       	ori	r22, 0x13	; 19
    9450:	5f 5d       	subi	r21, 0xDF	; 223
    9452:	5b 59       	subi	r21, 0x9B	; 155
    9454:	57 55       	subi	r21, 0x57	; 87
    9456:	53 51       	subi	r21, 0x13	; 19
    9458:	4f 4d       	sbci	r20, 0xDF	; 223
    945a:	4b 49       	sbci	r20, 0x9B	; 155
    945c:	47 45       	sbci	r20, 0x57	; 87
    945e:	43 41       	sbci	r20, 0x13	; 19
    9460:	3f 3d       	cpi	r19, 0xDF	; 223
    9462:	3b 39       	cpi	r19, 0x9B	; 155
    9464:	37 35       	cpi	r19, 0x57	; 87
    9466:	33 31       	cpi	r19, 0x13	; 19
    9468:	2f 2d       	mov	r18, r15
    946a:	2b 29       	or	r18, r11
    946c:	27 25       	eor	r18, r7
    946e:	23 21       	and	r18, r3
    9470:	1f 1d       	adc	r17, r15
    9472:	1b 19       	sub	r17, r11
    9474:	17 15       	cp	r17, r7
    9476:	13 11       	cpse	r17, r3
    9478:	0f 0d       	add	r16, r15
    947a:	0b 09       	sbc	r16, r11
    947c:	07 05       	cpc	r16, r7
    947e:	03 01       	movw	r0, r6
    9480:	ff fd       	.word	0xfdff	; ????
    9482:	fb f9       	.word	0xf9fb	; ????
    9484:	f7 f5       	brid	.+124    	; 0x9502 <waves+0x302>
    9486:	f3 f1       	brvs	.+124    	; 0x9504 <waves+0x304>
    9488:	ef ed       	ldi	r30, 0xDF	; 223
    948a:	eb e9       	ldi	r30, 0x9B	; 155
    948c:	e7 e5       	ldi	r30, 0x57	; 87
    948e:	e3 e1       	ldi	r30, 0x13	; 19
    9490:	df dd       	rcall	.-1090   	; 0x9050 <steptable+0x48>
    9492:	db d9       	rcall	.-3146   	; 0x884a <ReadVarLen+0x34>
    9494:	d7 d5       	rcall	.+2990   	; 0xa044 <FadeIn+0x2>
    9496:	d3 d1       	rcall	.+934    	; 0x983e <waves+0x63e>
    9498:	cf cd       	rjmp	.-1122   	; 0x9038 <steptable+0x30>
    949a:	cb c9       	rjmp	.-3178   	; 0x8832 <ReadVarLen+0x1c>
    949c:	c7 c5       	rjmp	.+2958   	; 0xa02c <doFade+0x6>
    949e:	c3 c1       	rjmp	.+902    	; 0x9826 <waves+0x626>
    94a0:	bf bd       	out	0x2f, r27	; 47
    94a2:	bb b9       	out	0x0b, r27	; 11
    94a4:	b7 b5       	in	r27, 0x27	; 39
    94a6:	b3 b1       	in	r27, 0x03	; 3
    94a8:	af ad       	ldd	r26, Y+63	; 0x3f
    94aa:	ab a9       	ldd	r26, Y+51	; 0x33
    94ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    94ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    94b0:	9f 9d       	mul	r25, r15
    94b2:	9b 99       	sbic	0x13, 3	; 19
    94b4:	97 95       	ror	r25
    94b6:	93 91       	.word	0x9193	; ????
    94b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    94ba:	8b 89       	ldd	r24, Y+19	; 0x13
    94bc:	87 85       	ldd	r24, Z+15	; 0x0f
    94be:	83 81       	ldd	r24, Z+3	; 0x03
    94c0:	80 82       	st	Z, r8
    94c2:	84 86       	std	Z+12, r8	; 0x0c
    94c4:	88 8a       	std	Y+16, r8	; 0x10
    94c6:	8c 8e       	std	Y+28, r8	; 0x1c
    94c8:	90 92 94 96 	sts	0x9694, r9
    94cc:	98 9a       	sbi	0x13, 0	; 19
    94ce:	9c 9e       	mul	r9, r28
    94d0:	a0 a2       	std	Z+32, r10	; 0x20
    94d2:	a4 a6       	std	Z+44, r10	; 0x2c
    94d4:	a8 aa       	std	Y+48, r10	; 0x30
    94d6:	ac ae       	std	Y+60, r10	; 0x3c
    94d8:	b0 b2       	in	r11, 0x10	; 16
    94da:	b4 b6       	in	r11, 0x34	; 52
    94dc:	b8 ba       	out	0x18, r11	; 24
    94de:	bc be       	out	0x3c, r11	; 60
    94e0:	c0 c2       	rjmp	.+1408   	; 0x9a62 <waves+0x862>
    94e2:	c4 c6       	rjmp	.+3464   	; 0xa26c <LBPrint+0x30>
    94e4:	c8 ca       	rjmp	.-2672   	; 0x8a76 <TriggerNote+0x68>
    94e6:	cc ce       	rjmp	.-616    	; 0x9280 <waves+0x80>
    94e8:	d0 d2       	rcall	.+1440   	; 0x9a8a <waves+0x88a>
    94ea:	d4 d6       	rcall	.+3496   	; 0xa294 <LBPrintByte+0x20>
    94ec:	d8 da       	rcall	.-2640   	; 0x8a9e <ProcessMusic+0x10>
    94ee:	dc de       	rcall	.-584    	; 0x92a8 <waves+0xa8>
    94f0:	e0 e2       	ldi	r30, 0x20	; 32
    94f2:	e4 e6       	ldi	r30, 0x64	; 100
    94f4:	e8 ea       	ldi	r30, 0xA8	; 168
    94f6:	ec ee       	ldi	r30, 0xEC	; 236
    94f8:	f0 f2       	brcs	.-68     	; 0x94b6 <waves+0x2b6>
    94fa:	f4 f6       	brge	.-68     	; 0x94b8 <waves+0x2b8>
    94fc:	f8 fa       	.word	0xfaf8	; ????
    94fe:	fc fe       	.word	0xfefc	; ????
    9500:	7f 7f       	andi	r23, 0xFF	; 255
    9502:	7f 7f       	andi	r23, 0xFF	; 255
    9504:	7f 7f       	andi	r23, 0xFF	; 255
    9506:	7f 7f       	andi	r23, 0xFF	; 255
    9508:	7f 7f       	andi	r23, 0xFF	; 255
    950a:	7f 7f       	andi	r23, 0xFF	; 255
    950c:	7f 7f       	andi	r23, 0xFF	; 255
    950e:	7f 7f       	andi	r23, 0xFF	; 255
    9510:	7f 7f       	andi	r23, 0xFF	; 255
    9512:	7f 7f       	andi	r23, 0xFF	; 255
    9514:	7f 7f       	andi	r23, 0xFF	; 255
    9516:	7f 7f       	andi	r23, 0xFF	; 255
    9518:	7f 7f       	andi	r23, 0xFF	; 255
    951a:	7f 7f       	andi	r23, 0xFF	; 255
    951c:	7f 7f       	andi	r23, 0xFF	; 255
    951e:	7f 7f       	andi	r23, 0xFF	; 255
    9520:	7f 7f       	andi	r23, 0xFF	; 255
    9522:	7f 7f       	andi	r23, 0xFF	; 255
    9524:	7f 7f       	andi	r23, 0xFF	; 255
    9526:	7f 7f       	andi	r23, 0xFF	; 255
    9528:	7f 7f       	andi	r23, 0xFF	; 255
    952a:	7f 7f       	andi	r23, 0xFF	; 255
    952c:	7f 7f       	andi	r23, 0xFF	; 255
    952e:	7f 7f       	andi	r23, 0xFF	; 255
    9530:	7f 7f       	andi	r23, 0xFF	; 255
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	80 80       	ld	r8, Z
    9542:	80 80       	ld	r8, Z
    9544:	80 80       	ld	r8, Z
    9546:	80 80       	ld	r8, Z
    9548:	80 80       	ld	r8, Z
    954a:	80 80       	ld	r8, Z
    954c:	80 80       	ld	r8, Z
    954e:	80 80       	ld	r8, Z
    9550:	80 80       	ld	r8, Z
    9552:	80 80       	ld	r8, Z
    9554:	80 80       	ld	r8, Z
    9556:	80 80       	ld	r8, Z
    9558:	80 80       	ld	r8, Z
    955a:	80 80       	ld	r8, Z
    955c:	80 80       	ld	r8, Z
    955e:	80 80       	ld	r8, Z
    9560:	80 80       	ld	r8, Z
    9562:	80 80       	ld	r8, Z
    9564:	80 80       	ld	r8, Z
    9566:	80 80       	ld	r8, Z
    9568:	80 80       	ld	r8, Z
    956a:	80 80       	ld	r8, Z
    956c:	80 80       	ld	r8, Z
    956e:	80 80       	ld	r8, Z
    9570:	80 80       	ld	r8, Z
    9572:	80 80       	ld	r8, Z
    9574:	80 80       	ld	r8, Z
    9576:	80 80       	ld	r8, Z
    9578:	80 80       	ld	r8, Z
    957a:	80 80       	ld	r8, Z
    957c:	80 80       	ld	r8, Z
    957e:	80 80       	ld	r8, Z
    9580:	80 80       	ld	r8, Z
    9582:	80 80       	ld	r8, Z
    9584:	80 80       	ld	r8, Z
    9586:	80 80       	ld	r8, Z
    9588:	80 80       	ld	r8, Z
    958a:	80 80       	ld	r8, Z
    958c:	80 80       	ld	r8, Z
    958e:	80 80       	ld	r8, Z
    9590:	80 80       	ld	r8, Z
    9592:	80 80       	ld	r8, Z
    9594:	80 80       	ld	r8, Z
    9596:	80 80       	ld	r8, Z
    9598:	80 80       	ld	r8, Z
    959a:	80 80       	ld	r8, Z
    959c:	80 80       	ld	r8, Z
    959e:	80 80       	ld	r8, Z
    95a0:	80 80       	ld	r8, Z
    95a2:	80 80       	ld	r8, Z
    95a4:	80 80       	ld	r8, Z
    95a6:	80 80       	ld	r8, Z
    95a8:	80 80       	ld	r8, Z
    95aa:	80 80       	ld	r8, Z
    95ac:	80 80       	ld	r8, Z
    95ae:	80 80       	ld	r8, Z
    95b0:	80 80       	ld	r8, Z
    95b2:	80 80       	ld	r8, Z
    95b4:	80 80       	ld	r8, Z
    95b6:	80 80       	ld	r8, Z
    95b8:	80 80       	ld	r8, Z
    95ba:	80 80       	ld	r8, Z
    95bc:	80 80       	ld	r8, Z
    95be:	80 80       	ld	r8, Z
    95c0:	80 80       	ld	r8, Z
    95c2:	80 80       	ld	r8, Z
    95c4:	80 80       	ld	r8, Z
    95c6:	80 80       	ld	r8, Z
    95c8:	80 80       	ld	r8, Z
    95ca:	80 80       	ld	r8, Z
    95cc:	80 80       	ld	r8, Z
    95ce:	80 80       	ld	r8, Z
    95d0:	80 80       	ld	r8, Z
    95d2:	80 80       	ld	r8, Z
    95d4:	80 80       	ld	r8, Z
    95d6:	80 80       	ld	r8, Z
    95d8:	80 80       	ld	r8, Z
    95da:	80 80       	ld	r8, Z
    95dc:	80 80       	ld	r8, Z
    95de:	80 80       	ld	r8, Z
    95e0:	80 80       	ld	r8, Z
    95e2:	80 80       	ld	r8, Z
    95e4:	80 80       	ld	r8, Z
    95e6:	80 80       	ld	r8, Z
    95e8:	80 80       	ld	r8, Z
    95ea:	80 80       	ld	r8, Z
    95ec:	80 80       	ld	r8, Z
    95ee:	80 80       	ld	r8, Z
    95f0:	80 80       	ld	r8, Z
    95f2:	80 80       	ld	r8, Z
    95f4:	80 80       	ld	r8, Z
    95f6:	80 80       	ld	r8, Z
    95f8:	80 80       	ld	r8, Z
    95fa:	80 80       	ld	r8, Z
    95fc:	80 80       	ld	r8, Z
    95fe:	80 80       	ld	r8, Z
    9600:	7f 7f       	andi	r23, 0xFF	; 255
    9602:	7f 7f       	andi	r23, 0xFF	; 255
    9604:	7f 7f       	andi	r23, 0xFF	; 255
    9606:	7f 7f       	andi	r23, 0xFF	; 255
    9608:	7f 7f       	andi	r23, 0xFF	; 255
    960a:	7f 7f       	andi	r23, 0xFF	; 255
    960c:	7f 7f       	andi	r23, 0xFF	; 255
    960e:	7f 7f       	andi	r23, 0xFF	; 255
    9610:	7f 7f       	andi	r23, 0xFF	; 255
    9612:	7f 7f       	andi	r23, 0xFF	; 255
    9614:	7f 7f       	andi	r23, 0xFF	; 255
    9616:	7f 7f       	andi	r23, 0xFF	; 255
    9618:	7f 7f       	andi	r23, 0xFF	; 255
    961a:	7f 7f       	andi	r23, 0xFF	; 255
    961c:	7f 7f       	andi	r23, 0xFF	; 255
    961e:	7f 7f       	andi	r23, 0xFF	; 255
    9620:	7f 7f       	andi	r23, 0xFF	; 255
    9622:	7f 7f       	andi	r23, 0xFF	; 255
    9624:	7f 7f       	andi	r23, 0xFF	; 255
    9626:	7f 7f       	andi	r23, 0xFF	; 255
    9628:	7f 7f       	andi	r23, 0xFF	; 255
    962a:	7f 7f       	andi	r23, 0xFF	; 255
    962c:	7f 7f       	andi	r23, 0xFF	; 255
    962e:	7f 7f       	andi	r23, 0xFF	; 255
    9630:	7f 7f       	andi	r23, 0xFF	; 255
    9632:	7f 7f       	andi	r23, 0xFF	; 255
    9634:	7f 7f       	andi	r23, 0xFF	; 255
    9636:	7f 7f       	andi	r23, 0xFF	; 255
    9638:	7f 7f       	andi	r23, 0xFF	; 255
    963a:	7f 7f       	andi	r23, 0xFF	; 255
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7f 7f       	andi	r23, 0xFF	; 255
    9648:	7f 7f       	andi	r23, 0xFF	; 255
    964a:	7f 7f       	andi	r23, 0xFF	; 255
    964c:	7f 7f       	andi	r23, 0xFF	; 255
    964e:	7f 7f       	andi	r23, 0xFF	; 255
    9650:	7f 7f       	andi	r23, 0xFF	; 255
    9652:	7f 7f       	andi	r23, 0xFF	; 255
    9654:	7f 7f       	andi	r23, 0xFF	; 255
    9656:	7f 7f       	andi	r23, 0xFF	; 255
    9658:	7f 7f       	andi	r23, 0xFF	; 255
    965a:	7f 7f       	andi	r23, 0xFF	; 255
    965c:	7f 7f       	andi	r23, 0xFF	; 255
    965e:	7f 7f       	andi	r23, 0xFF	; 255
    9660:	7f 7f       	andi	r23, 0xFF	; 255
    9662:	7f 7f       	andi	r23, 0xFF	; 255
    9664:	7f 7f       	andi	r23, 0xFF	; 255
    9666:	7f 7f       	andi	r23, 0xFF	; 255
    9668:	7f 7f       	andi	r23, 0xFF	; 255
    966a:	7f 7f       	andi	r23, 0xFF	; 255
    966c:	7f 7f       	andi	r23, 0xFF	; 255
    966e:	7f 7f       	andi	r23, 0xFF	; 255
    9670:	7f 7f       	andi	r23, 0xFF	; 255
    9672:	7f 7f       	andi	r23, 0xFF	; 255
    9674:	7f 7f       	andi	r23, 0xFF	; 255
    9676:	7f 7f       	andi	r23, 0xFF	; 255
    9678:	7f 7f       	andi	r23, 0xFF	; 255
    967a:	7f 7f       	andi	r23, 0xFF	; 255
    967c:	7f 7f       	andi	r23, 0xFF	; 255
    967e:	7f 7f       	andi	r23, 0xFF	; 255
    9680:	80 80       	ld	r8, Z
    9682:	80 80       	ld	r8, Z
    9684:	80 80       	ld	r8, Z
    9686:	80 80       	ld	r8, Z
    9688:	80 80       	ld	r8, Z
    968a:	80 80       	ld	r8, Z
    968c:	80 80       	ld	r8, Z
    968e:	80 80       	ld	r8, Z
    9690:	80 80       	ld	r8, Z
    9692:	80 80       	ld	r8, Z
    9694:	80 80       	ld	r8, Z
    9696:	80 80       	ld	r8, Z
    9698:	80 80       	ld	r8, Z
    969a:	80 80       	ld	r8, Z
    969c:	80 80       	ld	r8, Z
    969e:	80 80       	ld	r8, Z
    96a0:	80 80       	ld	r8, Z
    96a2:	80 80       	ld	r8, Z
    96a4:	80 80       	ld	r8, Z
    96a6:	80 80       	ld	r8, Z
    96a8:	80 80       	ld	r8, Z
    96aa:	80 80       	ld	r8, Z
    96ac:	80 80       	ld	r8, Z
    96ae:	80 80       	ld	r8, Z
    96b0:	80 80       	ld	r8, Z
    96b2:	80 80       	ld	r8, Z
    96b4:	80 80       	ld	r8, Z
    96b6:	80 80       	ld	r8, Z
    96b8:	80 80       	ld	r8, Z
    96ba:	80 80       	ld	r8, Z
    96bc:	80 80       	ld	r8, Z
    96be:	80 80       	ld	r8, Z
    96c0:	80 80       	ld	r8, Z
    96c2:	80 80       	ld	r8, Z
    96c4:	80 80       	ld	r8, Z
    96c6:	80 80       	ld	r8, Z
    96c8:	80 80       	ld	r8, Z
    96ca:	80 80       	ld	r8, Z
    96cc:	80 80       	ld	r8, Z
    96ce:	80 80       	ld	r8, Z
    96d0:	80 80       	ld	r8, Z
    96d2:	80 80       	ld	r8, Z
    96d4:	80 80       	ld	r8, Z
    96d6:	80 80       	ld	r8, Z
    96d8:	80 80       	ld	r8, Z
    96da:	80 80       	ld	r8, Z
    96dc:	80 80       	ld	r8, Z
    96de:	80 80       	ld	r8, Z
    96e0:	80 80       	ld	r8, Z
    96e2:	80 80       	ld	r8, Z
    96e4:	80 80       	ld	r8, Z
    96e6:	80 80       	ld	r8, Z
    96e8:	80 80       	ld	r8, Z
    96ea:	80 80       	ld	r8, Z
    96ec:	80 80       	ld	r8, Z
    96ee:	80 80       	ld	r8, Z
    96f0:	80 80       	ld	r8, Z
    96f2:	80 80       	ld	r8, Z
    96f4:	80 80       	ld	r8, Z
    96f6:	80 80       	ld	r8, Z
    96f8:	80 80       	ld	r8, Z
    96fa:	80 80       	ld	r8, Z
    96fc:	80 80       	ld	r8, Z
    96fe:	80 80       	ld	r8, Z
    9700:	7f 7f       	andi	r23, 0xFF	; 255
    9702:	7f 7f       	andi	r23, 0xFF	; 255
    9704:	7f 7f       	andi	r23, 0xFF	; 255
    9706:	7f 7f       	andi	r23, 0xFF	; 255
    9708:	7f 7f       	andi	r23, 0xFF	; 255
    970a:	7f 7f       	andi	r23, 0xFF	; 255
    970c:	7f 7f       	andi	r23, 0xFF	; 255
    970e:	7f 7f       	andi	r23, 0xFF	; 255
    9710:	7f 7f       	andi	r23, 0xFF	; 255
    9712:	7f 7f       	andi	r23, 0xFF	; 255
    9714:	7f 7f       	andi	r23, 0xFF	; 255
    9716:	7f 7f       	andi	r23, 0xFF	; 255
    9718:	7f 7f       	andi	r23, 0xFF	; 255
    971a:	7f 7f       	andi	r23, 0xFF	; 255
    971c:	7f 7f       	andi	r23, 0xFF	; 255
    971e:	7f 7f       	andi	r23, 0xFF	; 255
    9720:	7f 7f       	andi	r23, 0xFF	; 255
    9722:	7f 7f       	andi	r23, 0xFF	; 255
    9724:	7f 7f       	andi	r23, 0xFF	; 255
    9726:	7f 7f       	andi	r23, 0xFF	; 255
    9728:	7f 7f       	andi	r23, 0xFF	; 255
    972a:	7f 7f       	andi	r23, 0xFF	; 255
    972c:	7f 7f       	andi	r23, 0xFF	; 255
    972e:	7f 7f       	andi	r23, 0xFF	; 255
    9730:	7f 7f       	andi	r23, 0xFF	; 255
    9732:	7f 7f       	andi	r23, 0xFF	; 255
    9734:	7f 7f       	andi	r23, 0xFF	; 255
    9736:	7f 7f       	andi	r23, 0xFF	; 255
    9738:	7f 7f       	andi	r23, 0xFF	; 255
    973a:	7f 7f       	andi	r23, 0xFF	; 255
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7f 7f       	andi	r23, 0xFF	; 255
    9746:	7f 7f       	andi	r23, 0xFF	; 255
    9748:	7f 7f       	andi	r23, 0xFF	; 255
    974a:	7f 7f       	andi	r23, 0xFF	; 255
    974c:	7f 7f       	andi	r23, 0xFF	; 255
    974e:	7f 7f       	andi	r23, 0xFF	; 255
    9750:	7f 7f       	andi	r23, 0xFF	; 255
    9752:	7f 7f       	andi	r23, 0xFF	; 255
    9754:	7f 7f       	andi	r23, 0xFF	; 255
    9756:	7f 7f       	andi	r23, 0xFF	; 255
    9758:	7f 7f       	andi	r23, 0xFF	; 255
    975a:	7f 7f       	andi	r23, 0xFF	; 255
    975c:	7f 7f       	andi	r23, 0xFF	; 255
    975e:	7f 7f       	andi	r23, 0xFF	; 255
    9760:	7f 7f       	andi	r23, 0xFF	; 255
    9762:	7f 7f       	andi	r23, 0xFF	; 255
    9764:	7f 7f       	andi	r23, 0xFF	; 255
    9766:	7f 7f       	andi	r23, 0xFF	; 255
    9768:	7f 7f       	andi	r23, 0xFF	; 255
    976a:	7f 7f       	andi	r23, 0xFF	; 255
    976c:	7f 7f       	andi	r23, 0xFF	; 255
    976e:	7f 7f       	andi	r23, 0xFF	; 255
    9770:	7f 7f       	andi	r23, 0xFF	; 255
    9772:	7f 7f       	andi	r23, 0xFF	; 255
    9774:	7f 7f       	andi	r23, 0xFF	; 255
    9776:	7f 7f       	andi	r23, 0xFF	; 255
    9778:	7f 7f       	andi	r23, 0xFF	; 255
    977a:	7f 7f       	andi	r23, 0xFF	; 255
    977c:	7f 7f       	andi	r23, 0xFF	; 255
    977e:	7f 7f       	andi	r23, 0xFF	; 255
    9780:	7f 7f       	andi	r23, 0xFF	; 255
    9782:	7f 7f       	andi	r23, 0xFF	; 255
    9784:	7f 7f       	andi	r23, 0xFF	; 255
    9786:	7f 7f       	andi	r23, 0xFF	; 255
    9788:	7f 7f       	andi	r23, 0xFF	; 255
    978a:	7f 7f       	andi	r23, 0xFF	; 255
    978c:	7f 7f       	andi	r23, 0xFF	; 255
    978e:	7f 7f       	andi	r23, 0xFF	; 255
    9790:	7f 7f       	andi	r23, 0xFF	; 255
    9792:	7f 7f       	andi	r23, 0xFF	; 255
    9794:	7f 7f       	andi	r23, 0xFF	; 255
    9796:	7f 7f       	andi	r23, 0xFF	; 255
    9798:	7f 7f       	andi	r23, 0xFF	; 255
    979a:	7f 7f       	andi	r23, 0xFF	; 255
    979c:	7f 7f       	andi	r23, 0xFF	; 255
    979e:	7f 7f       	andi	r23, 0xFF	; 255
    97a0:	7f 7f       	andi	r23, 0xFF	; 255
    97a2:	7f 7f       	andi	r23, 0xFF	; 255
    97a4:	7f 7f       	andi	r23, 0xFF	; 255
    97a6:	7f 7f       	andi	r23, 0xFF	; 255
    97a8:	7f 7f       	andi	r23, 0xFF	; 255
    97aa:	7f 7f       	andi	r23, 0xFF	; 255
    97ac:	7f 7f       	andi	r23, 0xFF	; 255
    97ae:	7f 7f       	andi	r23, 0xFF	; 255
    97b0:	7f 7f       	andi	r23, 0xFF	; 255
    97b2:	7f 7f       	andi	r23, 0xFF	; 255
    97b4:	7f 7f       	andi	r23, 0xFF	; 255
    97b6:	7f 7f       	andi	r23, 0xFF	; 255
    97b8:	7f 7f       	andi	r23, 0xFF	; 255
    97ba:	7f 7f       	andi	r23, 0xFF	; 255
    97bc:	7f 7f       	andi	r23, 0xFF	; 255
    97be:	7f 7f       	andi	r23, 0xFF	; 255
    97c0:	80 80       	ld	r8, Z
    97c2:	80 80       	ld	r8, Z
    97c4:	80 80       	ld	r8, Z
    97c6:	80 80       	ld	r8, Z
    97c8:	80 80       	ld	r8, Z
    97ca:	80 80       	ld	r8, Z
    97cc:	80 80       	ld	r8, Z
    97ce:	80 80       	ld	r8, Z
    97d0:	80 80       	ld	r8, Z
    97d2:	80 80       	ld	r8, Z
    97d4:	80 80       	ld	r8, Z
    97d6:	80 80       	ld	r8, Z
    97d8:	80 80       	ld	r8, Z
    97da:	80 80       	ld	r8, Z
    97dc:	80 80       	ld	r8, Z
    97de:	80 80       	ld	r8, Z
    97e0:	80 80       	ld	r8, Z
    97e2:	80 80       	ld	r8, Z
    97e4:	80 80       	ld	r8, Z
    97e6:	80 80       	ld	r8, Z
    97e8:	80 80       	ld	r8, Z
    97ea:	80 80       	ld	r8, Z
    97ec:	80 80       	ld	r8, Z
    97ee:	80 80       	ld	r8, Z
    97f0:	80 80       	ld	r8, Z
    97f2:	80 80       	ld	r8, Z
    97f4:	80 80       	ld	r8, Z
    97f6:	80 80       	ld	r8, Z
    97f8:	80 80       	ld	r8, Z
    97fa:	80 80       	ld	r8, Z
    97fc:	80 80       	ld	r8, Z
    97fe:	80 80       	ld	r8, Z
    9800:	03 09       	sbc	r16, r3
    9802:	13 1e       	adc	r1, r19
    9804:	28 31       	cpi	r18, 0x18	; 24
    9806:	3a 40       	sbci	r19, 0x0A	; 10
    9808:	46 4c       	sbci	r20, 0xC6	; 198
    980a:	50 54       	subi	r21, 0x40	; 64
    980c:	58 5b       	subi	r21, 0xB8	; 184
    980e:	5e 61       	ori	r21, 0x1E	; 30
    9810:	63 65       	ori	r22, 0x53	; 83
    9812:	67 69       	ori	r22, 0x97	; 151
    9814:	6b 6c       	ori	r22, 0xCB	; 203
    9816:	6e 6f       	ori	r22, 0xFE	; 254
    9818:	70 71       	andi	r23, 0x10	; 16
    981a:	72 73       	andi	r23, 0x32	; 50
    981c:	74 75       	andi	r23, 0x54	; 84
    981e:	76 77       	andi	r23, 0x76	; 118
    9820:	77 78       	andi	r23, 0x87	; 135
    9822:	79 79       	andi	r23, 0x99	; 153
    9824:	7a 7a       	andi	r23, 0xAA	; 170
    9826:	7b 7b       	andi	r23, 0xBB	; 187
    9828:	7c 7c       	andi	r23, 0xCC	; 204
    982a:	7c 7d       	andi	r23, 0xDC	; 220
    982c:	7d 7d       	andi	r23, 0xDD	; 221
    982e:	7e 7e       	andi	r23, 0xEE	; 238
    9830:	7e 7e       	andi	r23, 0xEE	; 238
    9832:	7f 7f       	andi	r23, 0xFF	; 255
    9834:	7f 7f       	andi	r23, 0xFF	; 255
    9836:	7f 7f       	andi	r23, 0xFF	; 255
    9838:	7f 7f       	andi	r23, 0xFF	; 255
    983a:	7f 7f       	andi	r23, 0xFF	; 255
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7f 7f       	andi	r23, 0xFF	; 255
    9848:	7f 7f       	andi	r23, 0xFF	; 255
    984a:	7f 7f       	andi	r23, 0xFF	; 255
    984c:	7f 7e       	andi	r23, 0xEF	; 239
    984e:	7e 7e       	andi	r23, 0xEE	; 238
    9850:	7e 7d       	andi	r23, 0xDE	; 222
    9852:	7d 7d       	andi	r23, 0xDD	; 221
    9854:	7c 7c       	andi	r23, 0xCC	; 204
    9856:	7c 7b       	andi	r23, 0xBC	; 188
    9858:	7b 7a       	andi	r23, 0xAB	; 171
    985a:	7a 79       	andi	r23, 0x9A	; 154
    985c:	79 78       	andi	r23, 0x89	; 137
    985e:	77 77       	andi	r23, 0x77	; 119
    9860:	76 75       	andi	r23, 0x56	; 86
    9862:	74 73       	andi	r23, 0x34	; 52
    9864:	72 71       	andi	r23, 0x12	; 18
    9866:	70 6f       	ori	r23, 0xF0	; 240
    9868:	6e 6c       	ori	r22, 0xCE	; 206
    986a:	6b 69       	ori	r22, 0x9B	; 155
    986c:	67 65       	ori	r22, 0x57	; 87
    986e:	63 61       	ori	r22, 0x13	; 19
    9870:	5e 5b       	subi	r21, 0xBE	; 190
    9872:	58 54       	subi	r21, 0x48	; 72
    9874:	50 4c       	sbci	r21, 0xC0	; 192
    9876:	46 40       	sbci	r20, 0x06	; 6
    9878:	3a 31       	cpi	r19, 0x1A	; 26
    987a:	28 1e       	adc	r2, r24
    987c:	13 09       	sbc	r17, r3
    987e:	03 00       	.word	0x0003	; ????
    9880:	c6 cc       	rjmp	.-1652   	; 0x920e <waves+0xe>
    9882:	d5 db       	rcall	.-2134   	; 0x902e <steptable+0x26>
    9884:	df e3       	ldi	r29, 0x3F	; 63
    9886:	e5 e7       	ldi	r30, 0x75	; 117
    9888:	e9 ea       	ldi	r30, 0xA9	; 169
    988a:	eb ec       	ldi	r30, 0xCB	; 203
    988c:	ed ee       	ldi	r30, 0xED	; 237
    988e:	ef ef       	ldi	r30, 0xFF	; 255
    9890:	f0 f0       	brcs	.+60     	; 0x98ce <waves+0x6ce>
    9892:	f0 f1       	brcs	.+124    	; 0x9910 <waves+0x710>
    9894:	f1 f1       	breq	.+124    	; 0x9912 <waves+0x712>
    9896:	f1 f2       	breq	.-68     	; 0x9854 <waves+0x654>
    9898:	f2 f2       	brmi	.-68     	; 0x9856 <waves+0x656>
    989a:	f2 f2       	brmi	.-68     	; 0x9858 <waves+0x658>
    989c:	f2 f2       	brmi	.-68     	; 0x985a <waves+0x65a>
    989e:	f2 f3       	brmi	.-4      	; 0x989c <waves+0x69c>
    98a0:	f3 f3       	brvs	.-4      	; 0x989e <waves+0x69e>
    98a2:	f3 f3       	brvs	.-4      	; 0x98a0 <waves+0x6a0>
    98a4:	f3 f3       	brvs	.-4      	; 0x98a2 <waves+0x6a2>
    98a6:	f3 f3       	brvs	.-4      	; 0x98a4 <waves+0x6a4>
    98a8:	f3 f3       	brvs	.-4      	; 0x98a6 <waves+0x6a6>
    98aa:	f3 f3       	brvs	.-4      	; 0x98a8 <waves+0x6a8>
    98ac:	f3 f3       	brvs	.-4      	; 0x98aa <waves+0x6aa>
    98ae:	f3 f3       	brvs	.-4      	; 0x98ac <waves+0x6ac>
    98b0:	f3 f3       	brvs	.-4      	; 0x98ae <waves+0x6ae>
    98b2:	f3 f3       	brvs	.-4      	; 0x98b0 <waves+0x6b0>
    98b4:	f3 f3       	brvs	.-4      	; 0x98b2 <waves+0x6b2>
    98b6:	f3 f3       	brvs	.-4      	; 0x98b4 <waves+0x6b4>
    98b8:	f3 f3       	brvs	.-4      	; 0x98b6 <waves+0x6b6>
    98ba:	f3 f3       	brvs	.-4      	; 0x98b8 <waves+0x6b8>
    98bc:	f3 f3       	brvs	.-4      	; 0x98ba <waves+0x6ba>
    98be:	f3 f3       	brvs	.-4      	; 0x98bc <waves+0x6bc>
    98c0:	f3 f3       	brvs	.-4      	; 0x98be <waves+0x6be>
    98c2:	f3 f3       	brvs	.-4      	; 0x98c0 <waves+0x6c0>
    98c4:	f3 f3       	brvs	.-4      	; 0x98c2 <waves+0x6c2>
    98c6:	f3 f3       	brvs	.-4      	; 0x98c4 <waves+0x6c4>
    98c8:	f3 f3       	brvs	.-4      	; 0x98c6 <waves+0x6c6>
    98ca:	f3 f3       	brvs	.-4      	; 0x98c8 <waves+0x6c8>
    98cc:	f3 f3       	brvs	.-4      	; 0x98ca <waves+0x6ca>
    98ce:	f3 f3       	brvs	.-4      	; 0x98cc <waves+0x6cc>
    98d0:	f3 f3       	brvs	.-4      	; 0x98ce <waves+0x6ce>
    98d2:	f3 f3       	brvs	.-4      	; 0x98d0 <waves+0x6d0>
    98d4:	f3 f3       	brvs	.-4      	; 0x98d2 <waves+0x6d2>
    98d6:	f3 f3       	brvs	.-4      	; 0x98d4 <waves+0x6d4>
    98d8:	f3 f3       	brvs	.-4      	; 0x98d6 <waves+0x6d6>
    98da:	f3 f3       	brvs	.-4      	; 0x98d8 <waves+0x6d8>
    98dc:	f3 f3       	brvs	.-4      	; 0x98da <waves+0x6da>
    98de:	f3 f3       	brvs	.-4      	; 0x98dc <waves+0x6dc>
    98e0:	f2 f2       	brmi	.-68     	; 0x989e <waves+0x69e>
    98e2:	f2 f2       	brmi	.-68     	; 0x98a0 <waves+0x6a0>
    98e4:	f2 f2       	brmi	.-68     	; 0x98a2 <waves+0x6a2>
    98e6:	f2 f2       	brmi	.-68     	; 0x98a4 <waves+0x6a4>
    98e8:	f1 f1       	breq	.+124    	; 0x9966 <waves+0x766>
    98ea:	f1 f1       	breq	.+124    	; 0x9968 <waves+0x768>
    98ec:	f0 f0       	brcs	.+60     	; 0x992a <waves+0x72a>
    98ee:	f0 ef       	ldi	r31, 0xF0	; 240
    98f0:	ef ee       	ldi	r30, 0xEF	; 239
    98f2:	ed ec       	ldi	r30, 0xCD	; 205
    98f4:	eb ea       	ldi	r30, 0xAB	; 171
    98f6:	e9 e7       	ldi	r30, 0x79	; 121
    98f8:	e5 e3       	ldi	r30, 0x35	; 53
    98fa:	df db       	rcall	.-2114   	; 0x90ba <steptable+0xb2>
    98fc:	d5 cc       	rjmp	.-1622   	; 0x92a8 <waves+0xa8>
    98fe:	c6 00       	.word	0x00c6	; ????
    9900:	00 28       	or	r0, r0
    9902:	3d 42       	sbci	r19, 0x2D	; 45
    9904:	30 2d       	mov	r19, r0
    9906:	2c 2b       	or	r18, r28
    9908:	2c 2d       	mov	r18, r12
    990a:	2e 2f       	mov	r18, r30
    990c:	30 32       	cpi	r19, 0x20	; 32
    990e:	33 35       	cpi	r19, 0x53	; 83
    9910:	37 39       	cpi	r19, 0x97	; 151
    9912:	3b 3d       	cpi	r19, 0xDB	; 219
    9914:	3f 41       	sbci	r19, 0x1F	; 31
    9916:	43 45       	sbci	r20, 0x53	; 83
    9918:	48 4a       	sbci	r20, 0xA8	; 168
    991a:	4c 4e       	sbci	r20, 0xEC	; 236
    991c:	50 53       	subi	r21, 0x30	; 48
    991e:	55 57       	subi	r21, 0x75	; 117
    9920:	59 5b       	subi	r21, 0xB9	; 185
    9922:	5d 5f       	subi	r21, 0xFD	; 253
    9924:	61 63       	ori	r22, 0x31	; 49
    9926:	65 67       	ori	r22, 0x75	; 117
    9928:	69 6b       	ori	r22, 0xB9	; 185
    992a:	6c 6e       	ori	r22, 0xEC	; 236
    992c:	70 71       	andi	r23, 0x10	; 16
    992e:	73 74       	andi	r23, 0x43	; 67
    9930:	75 77       	andi	r23, 0x75	; 117
    9932:	78 79       	andi	r23, 0x98	; 152
    9934:	7a 7b       	andi	r23, 0xBA	; 186
    9936:	7c 7d       	andi	r23, 0xDC	; 220
    9938:	7d 7e       	andi	r23, 0xED	; 237
    993a:	7e 7f       	andi	r23, 0xFE	; 254
    993c:	7f 7f       	andi	r23, 0xFF	; 255
    993e:	7f 7f       	andi	r23, 0xFF	; 255
    9940:	7f 7f       	andi	r23, 0xFF	; 255
    9942:	7f 7f       	andi	r23, 0xFF	; 255
    9944:	7f 7f       	andi	r23, 0xFF	; 255
    9946:	7e 7e       	andi	r23, 0xEE	; 238
    9948:	7d 7d       	andi	r23, 0xDD	; 221
    994a:	7c 7b       	andi	r23, 0xBC	; 188
    994c:	7a 79       	andi	r23, 0x9A	; 154
    994e:	78 77       	andi	r23, 0x78	; 120
    9950:	75 74       	andi	r23, 0x45	; 69
    9952:	73 71       	andi	r23, 0x13	; 19
    9954:	70 6e       	ori	r23, 0xE0	; 224
    9956:	6c 6b       	ori	r22, 0xBC	; 188
    9958:	69 67       	ori	r22, 0x79	; 121
    995a:	65 63       	ori	r22, 0x35	; 53
    995c:	61 5f       	subi	r22, 0xF1	; 241
    995e:	5d 5b       	subi	r21, 0xBD	; 189
    9960:	59 57       	subi	r21, 0x79	; 121
    9962:	55 53       	subi	r21, 0x35	; 53
    9964:	50 4e       	sbci	r21, 0xE0	; 224
    9966:	4c 4a       	sbci	r20, 0xAC	; 172
    9968:	48 45       	sbci	r20, 0x58	; 88
    996a:	43 41       	sbci	r20, 0x13	; 19
    996c:	3f 3d       	cpi	r19, 0xDF	; 223
    996e:	3b 39       	cpi	r19, 0x9B	; 155
    9970:	37 35       	cpi	r19, 0x57	; 87
    9972:	33 32       	cpi	r19, 0x23	; 35
    9974:	30 2f       	mov	r19, r16
    9976:	2e 2d       	mov	r18, r14
    9978:	2c 2b       	or	r18, r28
    997a:	2c 2d       	mov	r18, r12
    997c:	30 42       	sbci	r19, 0x20	; 32
    997e:	3d 28       	or	r3, r13
    9980:	00 e9       	ldi	r16, 0x90	; 144
    9982:	e5 fe       	sbrs	r14, 5
    9984:	d4 d7       	rcall	.+4008   	; 0xa92e <init_player_shot+0x366>
    9986:	d7 d7       	rcall	.+4014   	; 0xa936 <init_player_shot+0x36e>
    9988:	d6 d4       	rcall	.+2476   	; 0xa336 <LBPrintInt+0x60>
    998a:	d2 d0       	rcall	.+420    	; 0x9b30 <waves+0x930>
    998c:	ce cc       	rjmp	.-1636   	; 0x932a <waves+0x12a>
    998e:	ca c8       	rjmp	.-3692   	; 0x8b24 <ProcessMusic+0x96>
    9990:	c6 c3       	rjmp	.+1932   	; 0xa11e <LBGetNextFrame+0x4>
    9992:	c1 bf       	out	0x31, r28	; 49
    9994:	bd ba       	out	0x1d, r11	; 29
    9996:	b8 b6       	in	r11, 0x38	; 56
    9998:	b4 b1       	in	r27, 0x04	; 4
    999a:	af ad       	ldd	r26, Y+63	; 0x3f
    999c:	ab a9       	ldd	r26, Y+51	; 0x33
    999e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    99a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    99a2:	9f 9e       	mul	r9, r31
    99a4:	9c 9a       	sbi	0x13, 4	; 19
    99a6:	99 97       	sbiw	r26, 0x29	; 41
    99a8:	95 94       	asr	r9
    99aa:	93 91       	.word	0x9193	; ????
    99ac:	90 8f       	std	Z+24, r25	; 0x18
    99ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    99b0:	8b 8a       	std	Y+19, r8	; 0x13
    99b2:	89 88       	ldd	r8, Y+17	; 0x11
    99b4:	88 87       	std	Y+8, r24	; 0x08
    99b6:	86 85       	ldd	r24, Z+14	; 0x0e
    99b8:	85 84       	ldd	r8, Z+13	; 0x0d
    99ba:	84 84       	ldd	r8, Z+12	; 0x0c
    99bc:	83 83       	std	Z+3, r24	; 0x03
    99be:	83 83       	std	Z+3, r24	; 0x03
    99c0:	83 83       	std	Z+3, r24	; 0x03
    99c2:	83 83       	std	Z+3, r24	; 0x03
    99c4:	83 84       	ldd	r8, Z+11	; 0x0b
    99c6:	84 84       	ldd	r8, Z+12	; 0x0c
    99c8:	85 85       	ldd	r24, Z+13	; 0x0d
    99ca:	86 87       	std	Z+14, r24	; 0x0e
    99cc:	88 88       	ldd	r8, Y+16	; 0x10
    99ce:	89 8a       	std	Y+17, r8	; 0x11
    99d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    99d2:	8d 8f       	std	Y+29, r24	; 0x1d
    99d4:	90 91 93 94 	lds	r25, 0x9493
    99d8:	95 97       	sbiw	r26, 0x25	; 37
    99da:	99 9a       	sbi	0x13, 1	; 19
    99dc:	9c 9e       	mul	r9, r28
    99de:	9f a1       	ldd	r25, Y+39	; 0x27
    99e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    99e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    99e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    99e6:	af b1       	in	r26, 0x0f	; 15
    99e8:	b4 b6       	in	r11, 0x34	; 52
    99ea:	b8 ba       	out	0x18, r11	; 24
    99ec:	bd bf       	out	0x3d, r27	; 61
    99ee:	c1 c3       	rjmp	.+1922   	; 0xa172 <LBGetJoyPadState+0xc>
    99f0:	c6 c8       	rjmp	.-3700   	; 0x8b7e <ProcessMusic+0xf0>
    99f2:	ca cc       	rjmp	.-1644   	; 0x9388 <waves+0x188>
    99f4:	ce d0       	rcall	.+412    	; 0x9b92 <waves+0x992>
    99f6:	d2 d4       	rcall	.+2468   	; 0xa39c <LBRandom>
    99f8:	d6 d7       	rcall	.+4012   	; 0xa9a6 <init_player_shot+0x3de>
    99fa:	d7 d7       	rcall	.+4014   	; 0xa9aa <init_player_shot+0x3e2>
    99fc:	d4 fe       	sbrs	r13, 4
    99fe:	e5 e9       	ldi	r30, 0x95	; 149
    9a00:	f9 f8       	.word	0xf8f9	; ????
    9a02:	f9 f5       	brne	.+126    	; 0x9a82 <waves+0x882>
    9a04:	eb e1       	ldi	r30, 0x1B	; 27
    9a06:	dd de       	rcall	.-582    	; 0x97c2 <waves+0x5c2>
    9a08:	e0 e2       	ldi	r30, 0x20	; 32
    9a0a:	e4 e5       	ldi	r30, 0x54	; 84
    9a0c:	e6 e5       	ldi	r30, 0x56	; 86
    9a0e:	e4 e2       	ldi	r30, 0x24	; 36
    9a10:	de d9       	rcall	.-3140   	; 0x8dce <ProcessMusic+0x340>
    9a12:	d2 ca       	rjmp	.-2652   	; 0x8fb8 <esmw+0x82>
    9a14:	c1 b7       	in	r28, 0x31	; 49
    9a16:	ac a2       	std	Y+36, r10	; 0x24
    9a18:	99 91       	ld	r25, Y+
    9a1a:	8a 86       	std	Y+10, r8	; 0x0a
    9a1c:	83 81       	ldd	r24, Z+3	; 0x03
    9a1e:	80 80       	ld	r8, Z
    9a20:	81 82       	std	Z+1, r8	; 0x01
    9a22:	83 85       	ldd	r24, Z+11	; 0x0b
    9a24:	86 88       	ldd	r8, Z+22	; 0x16
    9a26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9a28:	8d 8f       	std	Y+29, r24	; 0x1d
    9a2a:	90 92 93 95 	sts	0x9593, r9
    9a2e:	96 97       	sbiw	r26, 0x26	; 38
    9a30:	98 99       	sbic	0x13, 0	; 19
    9a32:	9a 9b       	sbis	0x13, 2	; 19
    9a34:	9b 9c       	mul	r9, r11
    9a36:	9d 9d       	mul	r25, r13
    9a38:	9d 9e       	mul	r9, r29
    9a3a:	9e 9e       	mul	r9, r30
    9a3c:	9f 9f       	mul	r25, r31
    9a3e:	9f 9f       	mul	r25, r31
    9a40:	9f 9f       	mul	r25, r31
    9a42:	9f 9e       	mul	r9, r31
    9a44:	9e 9e       	mul	r9, r30
    9a46:	9d 9d       	mul	r25, r13
    9a48:	9d 9c       	mul	r9, r13
    9a4a:	9b 9b       	sbis	0x13, 3	; 19
    9a4c:	9a 99       	sbic	0x13, 2	; 19
    9a4e:	98 97       	sbiw	r26, 0x28	; 40
    9a50:	96 95       	lsr	r25
    9a52:	93 92       	.word	0x9293	; ????
    9a54:	90 8f       	std	Z+24, r25	; 0x18
    9a56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9a58:	8a 88       	ldd	r8, Y+18	; 0x12
    9a5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9a5c:	83 82       	std	Z+3, r8	; 0x03
    9a5e:	81 80       	ldd	r8, Z+1	; 0x01
    9a60:	80 81       	ld	r24, Z
    9a62:	83 86       	std	Z+11, r8	; 0x0b
    9a64:	8a 91       	ld	r24, -Y
    9a66:	99 a2       	std	Y+33, r9	; 0x21
    9a68:	ac b7       	in	r26, 0x3c	; 60
    9a6a:	c1 ca       	rjmp	.-2686   	; 0x8fee <esmw+0xb8>
    9a6c:	d2 d9       	rcall	.-3164   	; 0x8e12 <ProcessMusic+0x384>
    9a6e:	de e2       	ldi	r29, 0x2E	; 46
    9a70:	e4 e5       	ldi	r30, 0x54	; 84
    9a72:	e6 e5       	ldi	r30, 0x56	; 86
    9a74:	e4 e2       	ldi	r30, 0x24	; 36
    9a76:	e0 de       	rcall	.-576    	; 0x9838 <waves+0x638>
    9a78:	dd e1       	ldi	r29, 0x1D	; 29
    9a7a:	eb f5       	brvc	.+122    	; 0x9af6 <waves+0x8f6>
    9a7c:	f9 f8       	.word	0xf8f9	; ????
    9a7e:	f9 00       	.word	0x00f9	; ????
    9a80:	07 08       	sbc	r0, r7
    9a82:	07 0b       	sbc	r16, r23
    9a84:	15 1f       	adc	r17, r21
    9a86:	23 22       	and	r2, r19
    9a88:	20 1e       	adc	r2, r16
    9a8a:	1c 1b       	sub	r17, r28
    9a8c:	1a 1b       	sub	r17, r26
    9a8e:	1c 1e       	adc	r1, r28
    9a90:	22 27       	eor	r18, r18
    9a92:	2e 36       	cpi	r18, 0x6E	; 110
    9a94:	3f 49       	sbci	r19, 0x9F	; 159
    9a96:	54 5e       	subi	r21, 0xE4	; 228
    9a98:	67 6f       	ori	r22, 0xF7	; 247
    9a9a:	76 7a       	andi	r23, 0xA6	; 166
    9a9c:	7e 7f       	andi	r23, 0xFE	; 254
    9a9e:	7f 7f       	andi	r23, 0xFF	; 255
    9aa0:	7f 7e       	andi	r23, 0xEF	; 239
    9aa2:	7d 7b       	andi	r23, 0xBD	; 189
    9aa4:	7a 78       	andi	r23, 0x8A	; 138
    9aa6:	76 74       	andi	r23, 0x46	; 70
    9aa8:	73 71       	andi	r23, 0x13	; 19
    9aaa:	70 6e       	ori	r23, 0xE0	; 224
    9aac:	6d 6b       	ori	r22, 0xBD	; 189
    9aae:	6a 69       	ori	r22, 0x9A	; 154
    9ab0:	68 67       	ori	r22, 0x78	; 120
    9ab2:	66 65       	ori	r22, 0x56	; 86
    9ab4:	65 64       	ori	r22, 0x45	; 69
    9ab6:	64 63       	ori	r22, 0x34	; 52
    9ab8:	63 62       	ori	r22, 0x23	; 35
    9aba:	62 62       	ori	r22, 0x22	; 34
    9abc:	61 61       	ori	r22, 0x11	; 17
    9abe:	61 61       	ori	r22, 0x11	; 17
    9ac0:	61 61       	ori	r22, 0x11	; 17
    9ac2:	61 62       	ori	r22, 0x21	; 33
    9ac4:	62 62       	ori	r22, 0x22	; 34
    9ac6:	63 63       	ori	r22, 0x33	; 51
    9ac8:	63 64       	ori	r22, 0x43	; 67
    9aca:	65 65       	ori	r22, 0x55	; 85
    9acc:	66 67       	ori	r22, 0x76	; 118
    9ace:	68 69       	ori	r22, 0x98	; 152
    9ad0:	6a 6b       	ori	r22, 0xBA	; 186
    9ad2:	6d 6e       	ori	r22, 0xED	; 237
    9ad4:	70 71       	andi	r23, 0x10	; 16
    9ad6:	73 74       	andi	r23, 0x43	; 67
    9ad8:	76 78       	andi	r23, 0x86	; 134
    9ada:	7a 7b       	andi	r23, 0xBA	; 186
    9adc:	7d 7e       	andi	r23, 0xED	; 237
    9ade:	7f 7f       	andi	r23, 0xFF	; 255
    9ae0:	7f 7f       	andi	r23, 0xFF	; 255
    9ae2:	7e 7a       	andi	r23, 0xAE	; 174
    9ae4:	76 6f       	ori	r23, 0xF6	; 246
    9ae6:	67 5e       	subi	r22, 0xE7	; 231
    9ae8:	54 49       	sbci	r21, 0x94	; 148
    9aea:	3f 36       	cpi	r19, 0x6F	; 111
    9aec:	2e 27       	eor	r18, r30
    9aee:	22 1e       	adc	r2, r18
    9af0:	1c 1b       	sub	r17, r28
    9af2:	1a 1b       	sub	r17, r26
    9af4:	1c 1e       	adc	r1, r28
    9af6:	20 22       	and	r2, r16
    9af8:	23 1f       	adc	r18, r19
    9afa:	15 0b       	sbc	r17, r21
    9afc:	07 08       	sbc	r0, r7
    9afe:	07 00       	.word	0x0007	; ????
    9b00:	1f 31       	cpi	r17, 0x1F	; 31
    9b02:	3d 44       	sbci	r19, 0x4D	; 77
    9b04:	4e 53       	subi	r20, 0x3E	; 62
    9b06:	54 56       	subi	r21, 0x64	; 100
    9b08:	5a 5f       	subi	r21, 0xFA	; 250
    9b0a:	64 69       	ori	r22, 0x94	; 148
    9b0c:	6e 74       	andi	r22, 0x4E	; 78
    9b0e:	76 79       	andi	r23, 0x96	; 150
    9b10:	7c 7f       	andi	r23, 0xFC	; 252
    9b12:	7f 7f       	andi	r23, 0xFF	; 255
    9b14:	7f 7f       	andi	r23, 0xFF	; 255
    9b16:	7f 7f       	andi	r23, 0xFF	; 255
    9b18:	7f 7f       	andi	r23, 0xFF	; 255
    9b1a:	7f 7f       	andi	r23, 0xFF	; 255
    9b1c:	7f 7f       	andi	r23, 0xFF	; 255
    9b1e:	7f 7f       	andi	r23, 0xFF	; 255
    9b20:	7f 7f       	andi	r23, 0xFF	; 255
    9b22:	7f 7f       	andi	r23, 0xFF	; 255
    9b24:	7f 7f       	andi	r23, 0xFF	; 255
    9b26:	7f 7f       	andi	r23, 0xFF	; 255
    9b28:	7f 7f       	andi	r23, 0xFF	; 255
    9b2a:	7f 7f       	andi	r23, 0xFF	; 255
    9b2c:	7f 7f       	andi	r23, 0xFF	; 255
    9b2e:	7f 7f       	andi	r23, 0xFF	; 255
    9b30:	7f 7f       	andi	r23, 0xFF	; 255
    9b32:	7f 7f       	andi	r23, 0xFF	; 255
    9b34:	7f 7f       	andi	r23, 0xFF	; 255
    9b36:	7f 7f       	andi	r23, 0xFF	; 255
    9b38:	7f 7f       	andi	r23, 0xFF	; 255
    9b3a:	7f 7f       	andi	r23, 0xFF	; 255
    9b3c:	7f 7f       	andi	r23, 0xFF	; 255
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7f 7f       	andi	r23, 0xFF	; 255
    9b46:	7f 7f       	andi	r23, 0xFF	; 255
    9b48:	7f 7f       	andi	r23, 0xFF	; 255
    9b4a:	7f 7f       	andi	r23, 0xFF	; 255
    9b4c:	7f 7f       	andi	r23, 0xFF	; 255
    9b4e:	7f 7f       	andi	r23, 0xFF	; 255
    9b50:	7f 7f       	andi	r23, 0xFF	; 255
    9b52:	7f 7f       	andi	r23, 0xFF	; 255
    9b54:	7f 7f       	andi	r23, 0xFF	; 255
    9b56:	7f 7f       	andi	r23, 0xFF	; 255
    9b58:	7f 7f       	andi	r23, 0xFF	; 255
    9b5a:	7f 7f       	andi	r23, 0xFF	; 255
    9b5c:	7f 7f       	andi	r23, 0xFF	; 255
    9b5e:	7f 7f       	andi	r23, 0xFF	; 255
    9b60:	7f 7f       	andi	r23, 0xFF	; 255
    9b62:	7f 7f       	andi	r23, 0xFF	; 255
    9b64:	7f 7f       	andi	r23, 0xFF	; 255
    9b66:	7f 7f       	andi	r23, 0xFF	; 255
    9b68:	7f 7f       	andi	r23, 0xFF	; 255
    9b6a:	7f 7f       	andi	r23, 0xFF	; 255
    9b6c:	7f 7f       	andi	r23, 0xFF	; 255
    9b6e:	7f 7f       	andi	r23, 0xFF	; 255
    9b70:	7f 7f       	andi	r23, 0xFF	; 255
    9b72:	7f 7f       	andi	r23, 0xFF	; 255
    9b74:	7f 7f       	andi	r23, 0xFF	; 255
    9b76:	7f 7f       	andi	r23, 0xFF	; 255
    9b78:	7f 7f       	andi	r23, 0xFF	; 255
    9b7a:	7f 7c       	andi	r23, 0xCF	; 207
    9b7c:	78 71       	andi	r23, 0x18	; 24
    9b7e:	68 4c       	sbci	r22, 0xC8	; 200
    9b80:	2c 1c       	adc	r2, r12
    9b82:	12 0c       	add	r1, r2
    9b84:	0a 0b       	sbc	r16, r26
    9b86:	0a 05       	cpc	r16, r10
    9b88:	fd f3       	brhs	.-2      	; 0x9b88 <waves+0x988>
    9b8a:	e9 df       	rcall	.-46     	; 0x9b5e <waves+0x95e>
    9b8c:	d4 ca       	rjmp	.-2648   	; 0x9136 <steptable+0x12e>
    9b8e:	c0 b7       	in	r28, 0x30	; 48
    9b90:	ae a6       	std	Y+46, r10	; 0x2e
    9b92:	9e 97       	sbiw	r26, 0x2e	; 46
    9b94:	91 8b       	std	Z+17, r25	; 0x11
    9b96:	86 85       	ldd	r24, Z+14	; 0x0e
    9b98:	82 80       	ldd	r8, Z+2	; 0x02
    9b9a:	80 80       	ld	r8, Z
    9b9c:	80 80       	ld	r8, Z
    9b9e:	80 80       	ld	r8, Z
    9ba0:	80 80       	ld	r8, Z
    9ba2:	80 80       	ld	r8, Z
    9ba4:	80 80       	ld	r8, Z
    9ba6:	80 80       	ld	r8, Z
    9ba8:	80 80       	ld	r8, Z
    9baa:	80 80       	ld	r8, Z
    9bac:	80 80       	ld	r8, Z
    9bae:	80 80       	ld	r8, Z
    9bb0:	80 80       	ld	r8, Z
    9bb2:	80 80       	ld	r8, Z
    9bb4:	80 80       	ld	r8, Z
    9bb6:	80 80       	ld	r8, Z
    9bb8:	80 80       	ld	r8, Z
    9bba:	80 80       	ld	r8, Z
    9bbc:	80 80       	ld	r8, Z
    9bbe:	80 80       	ld	r8, Z
    9bc0:	80 80       	ld	r8, Z
    9bc2:	80 80       	ld	r8, Z
    9bc4:	80 80       	ld	r8, Z
    9bc6:	80 80       	ld	r8, Z
    9bc8:	80 80       	ld	r8, Z
    9bca:	80 80       	ld	r8, Z
    9bcc:	80 80       	ld	r8, Z
    9bce:	80 80       	ld	r8, Z
    9bd0:	80 80       	ld	r8, Z
    9bd2:	80 80       	ld	r8, Z
    9bd4:	80 80       	ld	r8, Z
    9bd6:	80 80       	ld	r8, Z
    9bd8:	80 80       	ld	r8, Z
    9bda:	80 80       	ld	r8, Z
    9bdc:	80 80       	ld	r8, Z
    9bde:	80 80       	ld	r8, Z
    9be0:	80 80       	ld	r8, Z
    9be2:	80 80       	ld	r8, Z
    9be4:	80 80       	ld	r8, Z
    9be6:	80 80       	ld	r8, Z
    9be8:	80 80       	ld	r8, Z
    9bea:	80 80       	ld	r8, Z
    9bec:	80 80       	ld	r8, Z
    9bee:	80 80       	ld	r8, Z
    9bf0:	80 80       	ld	r8, Z
    9bf2:	80 80       	ld	r8, Z
    9bf4:	80 87       	std	Z+8, r24	; 0x08
    9bf6:	91 9d       	mul	r25, r1
    9bf8:	ac c4       	rjmp	.+2392   	; 0xa552 <LBRotateSprites+0x4c>
    9bfa:	cb d4       	rcall	.+2454   	; 0xa592 <init_default_high_scores+0x1c>
    9bfc:	dd f2       	brhs	.-74     	; 0x9bb4 <waves+0x9b4>
    9bfe:	fa fa       	.word	0xfafa	; ????

00009c00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9c00:	80 91 f3 0c 	lds	r24, 0x0CF3
    9c04:	90 91 80 0d 	lds	r25, 0x0D80
    9c08:	89 17       	cp	r24, r25
    9c0a:	78 f4       	brcc	.+30     	; 0x9c2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    9c0c:	e8 2f       	mov	r30, r24
    9c0e:	f0 e0       	ldi	r31, 0x00	; 0
    9c10:	9f 01       	movw	r18, r30
    9c12:	22 0f       	add	r18, r18
    9c14:	33 1f       	adc	r19, r19
    9c16:	e2 0f       	add	r30, r18
    9c18:	f3 1f       	adc	r31, r19
    9c1a:	e0 5b       	subi	r30, 0xB0	; 176
    9c1c:	f3 4f       	sbci	r31, 0xF3	; 243
    9c1e:	a0 81       	ld	r26, Z
    9c20:	b1 81       	ldd	r27, Z+1	; 0x01
    9c22:	92 81       	ldd	r25, Z+2	; 0x02
    9c24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9c26:	8f 5f       	subi	r24, 0xFF	; 255
    9c28:	ed cf       	rjmp	.-38     	; 0x9c04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    9c2a:	08 95       	ret

00009c2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    9c2c:	2f 92       	push	r2
    9c2e:	3f 92       	push	r3
    9c30:	4f 92       	push	r4
    9c32:	5f 92       	push	r5
    9c34:	6f 92       	push	r6
    9c36:	7f 92       	push	r7
    9c38:	8f 92       	push	r8
    9c3a:	9f 92       	push	r9
    9c3c:	af 92       	push	r10
    9c3e:	bf 92       	push	r11
    9c40:	cf 92       	push	r12
    9c42:	df 92       	push	r13
    9c44:	ef 92       	push	r14
    9c46:	ff 92       	push	r15
    9c48:	0f 93       	push	r16
    9c4a:	1f 93       	push	r17
    9c4c:	cf 93       	push	r28
    9c4e:	df 93       	push	r29
    9c50:	00 d0       	rcall	.+0      	; 0x9c52 <ProcessSprites+0x26>
    9c52:	00 d0       	rcall	.+0      	; 0x9c54 <ProcessSprites+0x28>
    9c54:	cd b7       	in	r28, 0x3d	; 61
    9c56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9c58:	80 91 00 05 	lds	r24, 0x0500
    9c5c:	88 23       	and	r24, r24
    9c5e:	09 f4       	brne	.+2      	; 0x9c62 <ProcessSprites+0x36>
    9c60:	e0 c0       	rjmp	.+448    	; 0x9e22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9c62:	80 91 f2 0c 	lds	r24, 0x0CF2
    9c66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    9c6a:	80 93 80 0d 	sts	0x0D80, r24
    9c6e:	e0 e1       	ldi	r30, 0x10	; 16
    9c70:	ce 2e       	mov	r12, r30
    9c72:	e5 e0       	ldi	r30, 0x05	; 5
    9c74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9c76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9c78:	f6 01       	movw	r30, r12
    9c7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    9c7c:	20 3e       	cpi	r18, 0xE0	; 224
    9c7e:	09 f4       	brne	.+2      	; 0x9c82 <ProcessSprites+0x56>
    9c80:	b1 c0       	rjmp	.+354    	; 0x9de4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9c82:	80 91 b2 0c 	lds	r24, 0x0CB2
    9c86:	90 e0       	ldi	r25, 0x00	; 0
    9c88:	82 0f       	add	r24, r18
    9c8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    9c8c:	41 81       	ldd	r20, Z+1	; 0x01
    9c8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9c92:	30 e0       	ldi	r19, 0x00	; 0
    9c94:	24 0f       	add	r18, r20
    9c96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9c98:	ac 01       	movw	r20, r24
    9c9a:	73 e0       	ldi	r23, 0x03	; 3
    9c9c:	56 95       	lsr	r21
    9c9e:	47 95       	ror	r20
    9ca0:	7a 95       	dec	r23
    9ca2:	e1 f7       	brne	.-8      	; 0x9c9c <ProcessSprites+0x70>
    9ca4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    9ca6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    9ca8:	11 f0       	breq	.+4      	; 0x9cae <ProcessSprites+0x82>
    9caa:	92 e0       	ldi	r25, 0x02	; 2
    9cac:	01 c0       	rjmp	.+2      	; 0x9cb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    9cae:	91 e0       	ldi	r25, 0x01	; 1
    9cb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    9cb2:	a9 01       	movw	r20, r18
    9cb4:	63 e0       	ldi	r22, 0x03	; 3
    9cb6:	56 95       	lsr	r21
    9cb8:	47 95       	ror	r20
    9cba:	6a 95       	dec	r22
    9cbc:	e1 f7       	brne	.-8      	; 0x9cb6 <ProcessSprites+0x8a>
    9cbe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    9cc0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    9cc2:	19 f0       	breq	.+6      	; 0x9cca <ProcessSprites+0x9e>
    9cc4:	52 e0       	ldi	r21, 0x02	; 2
    9cc6:	35 2e       	mov	r3, r21
    9cc8:	02 c0       	rjmp	.+4      	; 0x9cce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    9cca:	33 24       	eor	r3, r3
    9ccc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9cce:	30 e0       	ldi	r19, 0x00	; 0
    9cd0:	32 2f       	mov	r19, r18
    9cd2:	22 27       	eor	r18, r18
    9cd4:	f9 01       	movw	r30, r18
    9cd6:	e8 0f       	add	r30, r24
    9cd8:	f1 1d       	adc	r31, r1
    9cda:	fc 83       	std	Y+4, r31	; 0x04
    9cdc:	eb 83       	std	Y+3, r30	; 0x03
    9cde:	e1 2c       	mov	r14, r1
    9ce0:	f1 2c       	mov	r15, r1
    9ce2:	be 2c       	mov	r11, r14
    9ce4:	aa 24       	eor	r10, r10
    9ce6:	26 2c       	mov	r2, r6
    9ce8:	45 2c       	mov	r4, r5
    9cea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    9cec:	84 2c       	mov	r8, r4
    9cee:	91 2c       	mov	r9, r1
    9cf0:	84 2d       	mov	r24, r4
    9cf2:	20 91 b4 0c 	lds	r18, 0x0CB4
    9cf6:	42 2f       	mov	r20, r18
    9cf8:	50 e0       	ldi	r21, 0x00	; 0
    9cfa:	44 0f       	add	r20, r20
    9cfc:	55 1f       	adc	r21, r21
    9cfe:	84 16       	cp	r8, r20
    9d00:	95 06       	cpc	r9, r21
    9d02:	14 f0       	brlt	.+4      	; 0x9d08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9d04:	22 0f       	add	r18, r18
    9d06:	03 c0       	rjmp	.+6      	; 0x9d0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9d08:	42 16       	cp	r4, r18
    9d0a:	10 f0       	brcs	.+4      	; 0x9d10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    9d0c:	84 2d       	mov	r24, r4
    9d0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9d10:	ff e1       	ldi	r31, 0x1F	; 31
    9d12:	f2 15       	cp	r31, r2
    9d14:	18 f4       	brcc	.+6      	; 0x9d1c <ProcessSprites+0xf0>
    9d16:	00 ee       	ldi	r16, 0xE0	; 224
    9d18:	02 0d       	add	r16, r2
    9d1a:	01 c0       	rjmp	.+2      	; 0x9d1e <ProcessSprites+0xf2>
    9d1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    9d1e:	28 2f       	mov	r18, r24
    9d20:	26 95       	lsr	r18
    9d22:	26 95       	lsr	r18
    9d24:	26 95       	lsr	r18
    9d26:	10 e0       	ldi	r17, 0x00	; 0
    9d28:	40 e2       	ldi	r20, 0x20	; 32
    9d2a:	24 9f       	mul	r18, r20
    9d2c:	00 0d       	add	r16, r0
    9d2e:	11 1d       	adc	r17, r1
    9d30:	11 24       	eor	r1, r1
    9d32:	23 e0       	ldi	r18, 0x03	; 3
    9d34:	00 0f       	add	r16, r16
    9d36:	11 1f       	adc	r17, r17
    9d38:	2a 95       	dec	r18
    9d3a:	e1 f7       	brne	.-8      	; 0x9d34 <ProcessSprites+0x108>
    9d3c:	87 70       	andi	r24, 0x07	; 7
    9d3e:	08 0f       	add	r16, r24
    9d40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9d42:	00 50       	subi	r16, 0x00	; 0
    9d44:	1f 4f       	sbci	r17, 0xFF	; 255
    9d46:	f8 01       	movw	r30, r16
    9d48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    9d4a:	81 e0       	ldi	r24, 0x01	; 1
    9d4c:	7c 31       	cpi	r23, 0x1C	; 28
    9d4e:	08 f4       	brcc	.+2      	; 0x9d52 <ProcessSprites+0x126>
    9d50:	80 e0       	ldi	r24, 0x00	; 0
    9d52:	21 e0       	ldi	r18, 0x01	; 1
    9d54:	30 91 f3 0c 	lds	r19, 0x0CF3
    9d58:	73 17       	cp	r23, r19
    9d5a:	18 f0       	brcs	.+6      	; 0x9d62 <ProcessSprites+0x136>
    9d5c:	20 e0       	ldi	r18, 0x00	; 0
    9d5e:	88 23       	and	r24, r24
    9d60:	51 f1       	breq	.+84     	; 0x9db6 <ProcessSprites+0x18a>
    9d62:	60 91 80 0d 	lds	r22, 0x0D80
    9d66:	6c 31       	cpi	r22, 0x1C	; 28
    9d68:	20 f5       	brcc	.+72     	; 0x9db2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    9d6a:	88 23       	and	r24, r24
    9d6c:	31 f0       	breq	.+12     	; 0x9d7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    9d6e:	84 ee       	ldi	r24, 0xE4	; 228
    9d70:	87 0f       	add	r24, r23
    9d72:	7a 83       	std	Y+2, r23	; 0x02
    9d74:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <CopyFlashTile>
    9d78:	06 c0       	rjmp	.+12     	; 0x9d86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    9d7a:	22 23       	and	r18, r18
    9d7c:	29 f0       	breq	.+10     	; 0x9d88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    9d7e:	87 2f       	mov	r24, r23
    9d80:	7a 83       	std	Y+2, r23	; 0x02
    9d82:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <CopyRamTile>
    9d86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9d88:	80 91 80 0d 	lds	r24, 0x0D80
    9d8c:	e8 2f       	mov	r30, r24
    9d8e:	f0 e0       	ldi	r31, 0x00	; 0
    9d90:	9f 01       	movw	r18, r30
    9d92:	22 0f       	add	r18, r18
    9d94:	33 1f       	adc	r19, r19
    9d96:	e2 0f       	add	r30, r18
    9d98:	f3 1f       	adc	r31, r19
    9d9a:	e0 5b       	subi	r30, 0xB0	; 176
    9d9c:	f3 4f       	sbci	r31, 0xF3	; 243
    9d9e:	11 83       	std	Z+1, r17	; 0x01
    9da0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9da2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    9da4:	f8 01       	movw	r30, r16
    9da6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    9da8:	21 e0       	ldi	r18, 0x01	; 1
    9daa:	28 0f       	add	r18, r24
    9dac:	20 93 80 0d 	sts	0x0D80, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    9db0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    9db2:	7c 31       	cpi	r23, 0x1C	; 28
    9db4:	38 f4       	brcc	.+14     	; 0x9dc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9db6:	2b 81       	ldd	r18, Y+3	; 0x03
    9db8:	3c 81       	ldd	r19, Y+4	; 0x04
    9dba:	a5 01       	movw	r20, r10
    9dbc:	67 2f       	mov	r22, r23
    9dbe:	87 2d       	mov	r24, r7
    9dc0:	0e 94 b7 3e 	call	0x7d6e	; 0x7d6e <BlitSprite>
    9dc4:	ff ef       	ldi	r31, 0xFF	; 255
    9dc6:	af 1a       	sub	r10, r31
    9dc8:	bf 0a       	sbc	r11, r31
    9dca:	23 94       	inc	r2
    9dcc:	82 2d       	mov	r24, r2
    9dce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9dd0:	99 81       	ldd	r25, Y+1	; 0x01
    9dd2:	89 17       	cp	r24, r25
    9dd4:	08 f4       	brcc	.+2      	; 0x9dd8 <ProcessSprites+0x1ac>
    9dd6:	8c cf       	rjmp	.-232    	; 0x9cf0 <ProcessSprites+0xc4>
    9dd8:	ef ef       	ldi	r30, 0xFF	; 255
    9dda:	ee 1a       	sub	r14, r30
    9ddc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9dde:	e3 14       	cp	r14, r3
    9de0:	08 f4       	brcc	.+2      	; 0x9de4 <ProcessSprites+0x1b8>
    9de2:	7f cf       	rjmp	.-258    	; 0x9ce2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    9de4:	73 94       	inc	r7
    9de6:	f4 e0       	ldi	r31, 0x04	; 4
    9de8:	cf 0e       	add	r12, r31
    9dea:	d1 1c       	adc	r13, r1
    9dec:	40 e1       	ldi	r20, 0x10	; 16
    9dee:	74 12       	cpse	r7, r20
    9df0:	43 cf       	rjmp	.-378    	; 0x9c78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    9df2:	0f 90       	pop	r0
    9df4:	0f 90       	pop	r0
    9df6:	0f 90       	pop	r0
    9df8:	0f 90       	pop	r0
    9dfa:	df 91       	pop	r29
    9dfc:	cf 91       	pop	r28
    9dfe:	1f 91       	pop	r17
    9e00:	0f 91       	pop	r16
    9e02:	ff 90       	pop	r15
    9e04:	ef 90       	pop	r14
    9e06:	df 90       	pop	r13
    9e08:	cf 90       	pop	r12
    9e0a:	bf 90       	pop	r11
    9e0c:	af 90       	pop	r10
    9e0e:	9f 90       	pop	r9
    9e10:	8f 90       	pop	r8
    9e12:	7f 90       	pop	r7
    9e14:	6f 90       	pop	r6
    9e16:	5f 90       	pop	r5
    9e18:	4f 90       	pop	r4
    9e1a:	3f 90       	pop	r3
    9e1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    9e1e:	0c 94 00 4e 	jmp	0x9c00	; 0x9c00 <RestoreBackground>

	}
    9e22:	0f 90       	pop	r0
    9e24:	0f 90       	pop	r0
    9e26:	0f 90       	pop	r0
    9e28:	0f 90       	pop	r0
    9e2a:	df 91       	pop	r29
    9e2c:	cf 91       	pop	r28
    9e2e:	1f 91       	pop	r17
    9e30:	0f 91       	pop	r16
    9e32:	ff 90       	pop	r15
    9e34:	ef 90       	pop	r14
    9e36:	df 90       	pop	r13
    9e38:	cf 90       	pop	r12
    9e3a:	bf 90       	pop	r11
    9e3c:	af 90       	pop	r10
    9e3e:	9f 90       	pop	r9
    9e40:	8f 90       	pop	r8
    9e42:	7f 90       	pop	r7
    9e44:	6f 90       	pop	r6
    9e46:	5f 90       	pop	r5
    9e48:	4f 90       	pop	r4
    9e4a:	3f 90       	pop	r3
    9e4c:	2f 90       	pop	r2
    9e4e:	08 95       	ret

00009e50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9e50:	90 91 b3 0c 	lds	r25, 0x0CB3
    9e54:	96 0f       	add	r25, r22
    9e56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    9e5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    9e5e:	82 0f       	add	r24, r18
    9e60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9e64:	80 91 b4 0c 	lds	r24, 0x0CB4
    9e68:	80 32       	cpi	r24, 0x20	; 32
    9e6a:	b0 f4       	brcc	.+44     	; 0x9e98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    9e6c:	29 2f       	mov	r18, r25
    9e6e:	30 e0       	ldi	r19, 0x00	; 0
    9e70:	78 e0       	ldi	r23, 0x08	; 8
    9e72:	87 9f       	mul	r24, r23
    9e74:	a0 01       	movw	r20, r0
    9e76:	11 24       	eor	r1, r1
    9e78:	24 17       	cp	r18, r20
    9e7a:	35 07       	cpc	r19, r21
    9e7c:	6c f0       	brlt	.+26     	; 0x9e98 <Scroll+0x48>
				if(dy>=0){	
    9e7e:	67 fd       	sbrc	r22, 7
    9e80:	05 c0       	rjmp	.+10     	; 0x9e8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9e82:	28 ef       	ldi	r18, 0xF8	; 248
    9e84:	82 9f       	mul	r24, r18
    9e86:	90 0d       	add	r25, r0
    9e88:	11 24       	eor	r1, r1
    9e8a:	04 c0       	rjmp	.+8      	; 0x9e94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    9e8c:	78 e0       	ldi	r23, 0x08	; 8
    9e8e:	87 9f       	mul	r24, r23
    9e90:	90 0d       	add	r25, r0
    9e92:	11 24       	eor	r1, r1
    9e94:	90 93 b3 0c 	sts	0x0CB3, r25
    9e98:	08 95       	ret

00009e9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9e9a:	e0 e1       	ldi	r30, 0x10	; 16
    9e9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9e9e:	80 ee       	ldi	r24, 0xE0	; 224
    9ea0:	80 83       	st	Z, r24
    9ea2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9ea4:	95 e0       	ldi	r25, 0x05	; 5
    9ea6:	e0 35       	cpi	r30, 0x50	; 80
    9ea8:	f9 07       	cpc	r31, r25
    9eaa:	d1 f7       	brne	.-12     	; 0x9ea0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    9eac:	80 e2       	ldi	r24, 0x20	; 32
    9eae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    9eb2:	10 92 af 0c 	sts	0x0CAF, r1
    9eb6:	08 95       	ret

00009eb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9eb8:	2f 92       	push	r2
    9eba:	3f 92       	push	r3
    9ebc:	4f 92       	push	r4
    9ebe:	5f 92       	push	r5
    9ec0:	6f 92       	push	r6
    9ec2:	7f 92       	push	r7
    9ec4:	8f 92       	push	r8
    9ec6:	9f 92       	push	r9
    9ec8:	af 92       	push	r10
    9eca:	bf 92       	push	r11
    9ecc:	cf 92       	push	r12
    9ece:	df 92       	push	r13
    9ed0:	ef 92       	push	r14
    9ed2:	ff 92       	push	r15
    9ed4:	0f 93       	push	r16
    9ed6:	1f 93       	push	r17
    9ed8:	cf 93       	push	r28
    9eda:	df 93       	push	r29
    9edc:	00 d0       	rcall	.+0      	; 0x9ede <DrawMap+0x26>
    9ede:	1f 92       	push	r1
    9ee0:	cd b7       	in	r28, 0x3d	; 61
    9ee2:	de b7       	in	r29, 0x3e	; 62
    9ee4:	28 2f       	mov	r18, r24
    9ee6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9ee8:	fa 01       	movw	r30, r20
    9eea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9eec:	31 96       	adiw	r30, 0x01	; 1
    9eee:	34 90       	lpm	r3, Z
    9ef0:	42 2c       	mov	r4, r2
    9ef2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9ef4:	e1 2c       	mov	r14, r1
    9ef6:	f1 2c       	mov	r15, r1
    9ef8:	00 e0       	ldi	r16, 0x00	; 0
    9efa:	10 e0       	ldi	r17, 0x00	; 0
    9efc:	c6 2e       	mov	r12, r22
    9efe:	d1 2c       	mov	r13, r1
    9f00:	03 15       	cp	r16, r3
    9f02:	68 f5       	brcc	.+90     	; 0x9f5e <DrawMap+0xa6>
    9f04:	1b 82       	std	Y+3, r1	; 0x03
    9f06:	1a 82       	std	Y+2, r1	; 0x02
    9f08:	57 01       	movw	r10, r14
    9f0a:	92 e0       	ldi	r25, 0x02	; 2
    9f0c:	a9 0e       	add	r10, r25
    9f0e:	b1 1c       	adc	r11, r1
    9f10:	48 01       	movw	r8, r16
    9f12:	8c 0c       	add	r8, r12
    9f14:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9f16:	ea 81       	ldd	r30, Y+2	; 0x02
    9f18:	e2 15       	cp	r30, r2
    9f1a:	e0 f4       	brcc	.+56     	; 0x9f54 <DrawMap+0x9c>
    9f1c:	ea 81       	ldd	r30, Y+2	; 0x02
    9f1e:	fb 81       	ldd	r31, Y+3	; 0x03
    9f20:	ea 0d       	add	r30, r10
    9f22:	fb 1d       	adc	r31, r11
    9f24:	e6 0d       	add	r30, r6
    9f26:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9f28:	e4 91       	lpm	r30, Z
    9f2a:	f0 e0       	ldi	r31, 0x00	; 0
    9f2c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9f30:	70 e0       	ldi	r23, 0x00	; 0
    9f32:	c4 01       	movw	r24, r8
    9f34:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    9f38:	af 01       	movw	r20, r30
    9f3a:	68 2f       	mov	r22, r24
    9f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9f3e:	82 0f       	add	r24, r18
    9f40:	29 83       	std	Y+1, r18	; 0x01
    9f42:	0e 94 ea 40 	call	0x81d4	; 0x81d4 <SetTile>
    9f46:	8a 81       	ldd	r24, Y+2	; 0x02
    9f48:	9b 81       	ldd	r25, Y+3	; 0x03
    9f4a:	01 96       	adiw	r24, 0x01	; 1
    9f4c:	9b 83       	std	Y+3, r25	; 0x03
    9f4e:	8a 83       	std	Y+2, r24	; 0x02
    9f50:	29 81       	ldd	r18, Y+1	; 0x01
    9f52:	e1 cf       	rjmp	.-62     	; 0x9f16 <DrawMap+0x5e>
    9f54:	0f 5f       	subi	r16, 0xFF	; 255
    9f56:	1f 4f       	sbci	r17, 0xFF	; 255
    9f58:	e4 0c       	add	r14, r4
    9f5a:	f5 1c       	adc	r15, r5
    9f5c:	d1 cf       	rjmp	.-94     	; 0x9f00 <DrawMap+0x48>
			}
		}

	}
    9f5e:	0f 90       	pop	r0
    9f60:	0f 90       	pop	r0
    9f62:	0f 90       	pop	r0
    9f64:	df 91       	pop	r29
    9f66:	cf 91       	pop	r28
    9f68:	1f 91       	pop	r17
    9f6a:	0f 91       	pop	r16
    9f6c:	ff 90       	pop	r15
    9f6e:	ef 90       	pop	r14
    9f70:	df 90       	pop	r13
    9f72:	cf 90       	pop	r12
    9f74:	bf 90       	pop	r11
    9f76:	af 90       	pop	r10
    9f78:	9f 90       	pop	r9
    9f7a:	8f 90       	pop	r8
    9f7c:	7f 90       	pop	r7
    9f7e:	6f 90       	pop	r6
    9f80:	5f 90       	pop	r5
    9f82:	4f 90       	pop	r4
    9f84:	3f 90       	pop	r3
    9f86:	2f 90       	pop	r2
    9f88:	08 95       	ret

00009f8a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9f8a:	0f 93       	push	r16
    9f8c:	1f 93       	push	r17
    9f8e:	cf 93       	push	r28
    9f90:	df 93       	push	r29
    9f92:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9f94:	c0 e0       	ldi	r28, 0x00	; 0
    9f96:	d0 e0       	ldi	r29, 0x00	; 0
    9f98:	c0 17       	cp	r28, r16
    9f9a:	d1 07       	cpc	r29, r17
    9f9c:	44 f4       	brge	.+16     	; 0x9fae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9f9e:	0e 94 00 41 	call	0x8200	; 0x8200 <GetVsyncFlag>
    9fa2:	88 23       	and	r24, r24
    9fa4:	e1 f3       	breq	.-8      	; 0x9f9e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9fa6:	0e 94 04 41 	call	0x8208	; 0x8208 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9faa:	21 96       	adiw	r28, 0x01	; 1
    9fac:	f5 cf       	rjmp	.-22     	; 0x9f98 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9fae:	df 91       	pop	r29
    9fb0:	cf 91       	pop	r28
    9fb2:	1f 91       	pop	r17
    9fb4:	0f 91       	pop	r16
    9fb6:	08 95       	ret

00009fb8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    9fb8:	83 e2       	ldi	r24, 0x23	; 35
    9fba:	99 e0       	ldi	r25, 0x09	; 9
    9fbc:	0e 94 b2 43 	call	0x8764	; 0x8764 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    9fc0:	83 e2       	ldi	r24, 0x23	; 35
    9fc2:	91 e0       	ldi	r25, 0x01	; 1
    9fc4:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <SetTileTable>
			
			//draw logo
			ClearVram();
    9fc8:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <ClearVram>
			WaitVsync(15);		
    9fcc:	8f e0       	ldi	r24, 0x0F	; 15
    9fce:	90 e0       	ldi	r25, 0x00	; 0
    9fd0:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    9fd4:	41 e0       	ldi	r20, 0x01	; 1
    9fd6:	6f ef       	ldi	r22, 0xFF	; 255
    9fd8:	80 e0       	ldi	r24, 0x00	; 0
    9fda:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9fde:	4d e0       	ldi	r20, 0x0D	; 13
    9fe0:	51 e0       	ldi	r21, 0x01	; 1
    9fe2:	6c e0       	ldi	r22, 0x0C	; 12
    9fe4:	8c e0       	ldi	r24, 0x0C	; 12
    9fe6:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
			WaitVsync(3);
    9fea:	83 e0       	ldi	r24, 0x03	; 3
    9fec:	90 e0       	ldi	r25, 0x00	; 0
    9fee:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    9ff2:	4c ef       	ldi	r20, 0xFC	; 252
    9ff4:	50 e0       	ldi	r21, 0x00	; 0
    9ff6:	6c e0       	ldi	r22, 0x0C	; 12
    9ff8:	8c e0       	ldi	r24, 0x0C	; 12
    9ffa:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
			WaitVsync(2);
    9ffe:	82 e0       	ldi	r24, 0x02	; 2
    a000:	90 e0       	ldi	r25, 0x00	; 0
    a002:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a006:	4d e0       	ldi	r20, 0x0D	; 13
    a008:	51 e0       	ldi	r21, 0x01	; 1
    a00a:	6c e0       	ldi	r22, 0x0C	; 12
    a00c:	8c e0       	ldi	r24, 0x0C	; 12
    a00e:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    a012:	81 e4       	ldi	r24, 0x41	; 65
    a014:	90 e0       	ldi	r25, 0x00	; 0
    a016:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			ClearVram();
    a01a:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <ClearVram>
			WaitVsync(20);
    a01e:	84 e1       	ldi	r24, 0x14	; 20
    a020:	90 e0       	ldi	r25, 0x00	; 0
    a022:	0c 94 c5 4f 	jmp	0x9f8a	; 0x9f8a <WaitVsync>

0000a026 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a026:	80 93 7e 0d 	sts	0x0D7E, r24
	currFadeFrame=0;
    a02a:	10 92 82 0d 	sts	0x0D82, r1
	fadeActive=true;
    a02e:	81 e0       	ldi	r24, 0x01	; 1
    a030:	80 93 81 0d 	sts	0x0D81, r24
		
	if(blocking){
    a034:	66 23       	and	r22, r22
    a036:	21 f0       	breq	.+8      	; 0xa040 <doFade+0x1a>
		while(fadeActive==true);
    a038:	80 91 81 0d 	lds	r24, 0x0D81
    a03c:	81 11       	cpse	r24, r1
    a03e:	fc cf       	rjmp	.-8      	; 0xa038 <doFade+0x12>
    a040:	08 95       	ret

0000a042 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a042:	81 11       	cpse	r24, r1
    a044:	03 c0       	rjmp	.+6      	; 0xa04c <FadeIn+0xa>
		DDRC=0xff;
    a046:	8f ef       	ldi	r24, 0xFF	; 255
    a048:	87 b9       	out	0x07, r24	; 7
		return;
    a04a:	08 95       	ret
	}
	fadeStep=1;
    a04c:	91 e0       	ldi	r25, 0x01	; 1
    a04e:	90 93 83 0d 	sts	0x0D83, r25
	fadeDir=1;
    a052:	90 93 7f 0d 	sts	0x0D7F, r25
	doFade(speed,blocking);
    a056:	0c 94 13 50 	jmp	0xa026	; 0xa026 <doFade>

0000a05a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a05a:	81 11       	cpse	r24, r1
    a05c:	02 c0       	rjmp	.+4      	; 0xa062 <FadeOut+0x8>
		DDRC=0;
    a05e:	17 b8       	out	0x07, r1	; 7
		return;
    a060:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a062:	9c e0       	ldi	r25, 0x0C	; 12
    a064:	90 93 83 0d 	sts	0x0D83, r25
	fadeDir=-1;
    a068:	9f ef       	ldi	r25, 0xFF	; 255
    a06a:	90 93 7f 0d 	sts	0x0D7F, r25
	doFade(speed,blocking);
    a06e:	0c 94 13 50 	jmp	0xa026	; 0xa026 <doFade>

0000a072 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a072:	80 91 81 0d 	lds	r24, 0x0D81
    a076:	88 23       	and	r24, r24
    a078:	01 f1       	breq	.+64     	; 0xa0ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    a07a:	80 91 82 0d 	lds	r24, 0x0D82
    a07e:	81 11       	cpse	r24, r1
    a080:	19 c0       	rjmp	.+50     	; 0xa0b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a082:	80 91 7e 0d 	lds	r24, 0x0D7E
    a086:	80 93 82 0d 	sts	0x0D82, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a08a:	e0 91 83 0d 	lds	r30, 0x0D83
    a08e:	f0 e0       	ldi	r31, 0x00	; 0
    a090:	e1 51       	subi	r30, 0x11	; 17
    a092:	ff 4f       	sbci	r31, 0xFF	; 255
    a094:	e4 91       	lpm	r30, Z
    a096:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a098:	90 91 7f 0d 	lds	r25, 0x0D7F
    a09c:	80 91 83 0d 	lds	r24, 0x0D83
    a0a0:	89 0f       	add	r24, r25
    a0a2:	80 93 83 0d 	sts	0x0D83, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a0a6:	88 23       	and	r24, r24
    a0a8:	11 f0       	breq	.+4      	; 0xa0ae <ProcessFading+0x3c>
    a0aa:	8d 30       	cpi	r24, 0x0D	; 13
    a0ac:	31 f4       	brne	.+12     	; 0xa0ba <ProcessFading+0x48>
				fadeActive=false;
    a0ae:	10 92 81 0d 	sts	0x0D81, r1
    a0b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a0b4:	81 50       	subi	r24, 0x01	; 1
    a0b6:	80 93 82 0d 	sts	0x0D82, r24
    a0ba:	08 95       	ret

0000a0bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a0bc:	0e 94 39 50 	call	0xa072	; 0xa072 <ProcessFading>
		ProcessSprites();
    a0c0:	0c 94 16 4e 	jmp	0x9c2c	; 0x9c2c <ProcessSprites>

0000a0c4 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    a0c4:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a0c6:	88 23       	and	r24, r24
    a0c8:	29 f1       	breq	.+74     	; 0xa114 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    a0ca:	87 ff       	sbrs	r24, 7
    a0cc:	03 c0       	rjmp	.+6      	; 0xa0d4 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    a0ce:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    a0d0:	3f ef       	ldi	r19, 0xFF	; 255
    a0d2:	01 c0       	rjmp	.+2      	; 0xa0d6 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    a0d4:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    a0d6:	6c e3       	ldi	r22, 0x3C	; 60
    a0d8:	0e 94 36 72 	call	0xe46c	; 0xe46c <__divmodqi4>
    a0dc:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    a0de:	99 23       	and	r25, r25
    a0e0:	a9 f0       	breq	.+42     	; 0xa10c <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    a0e2:	69 2f       	mov	r22, r25
    a0e4:	70 e0       	ldi	r23, 0x00	; 0
    a0e6:	8c e3       	ldi	r24, 0x3C	; 60
    a0e8:	90 e0       	ldi	r25, 0x00	; 0
    a0ea:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    a0ee:	8e 2f       	mov	r24, r30
    a0f0:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    a0f4:	91 11       	cpse	r25, r1
    a0f6:	0a c0       	rjmp	.+20     	; 0xa10c <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    a0f8:	42 2f       	mov	r20, r18
    a0fa:	50 e0       	ldi	r21, 0x00	; 0
    a0fc:	4f 5f       	subi	r20, 0xFF	; 255
    a0fe:	5f 4f       	sbci	r21, 0xFF	; 255
    a100:	34 03       	mulsu	r19, r20
    a102:	c0 01       	movw	r24, r0
    a104:	35 9f       	mul	r19, r21
    a106:	90 0d       	add	r25, r0
    a108:	11 24       	eor	r1, r1
    a10a:	08 95       	ret
	}
	return direction*base_delta;
    a10c:	32 03       	mulsu	r19, r18
    a10e:	c0 01       	movw	r24, r0
    a110:	11 24       	eor	r1, r1
    a112:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a114:	80 e0       	ldi	r24, 0x00	; 0
    a116:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    a118:	08 95       	ret

0000a11a <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    a11a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a11c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a11e:	93 81       	ldd	r25, Z+3	; 0x03
    a120:	9f 5f       	subi	r25, 0xFF	; 255
    a122:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a124:	42 81       	ldd	r20, Z+2	; 0x02
    a126:	80 81       	ld	r24, Z
    a128:	26 81       	ldd	r18, Z+6	; 0x06
    a12a:	37 81       	ldd	r19, Z+7	; 0x07
    a12c:	94 17       	cp	r25, r20
    a12e:	30 f4       	brcc	.+12     	; 0xa13c <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    a130:	f9 01       	movw	r30, r18
    a132:	e8 0f       	add	r30, r24
    a134:	f1 1d       	adc	r31, r1
    a136:	e8 0f       	add	r30, r24
    a138:	f1 1d       	adc	r31, r1
    a13a:	12 c0       	rjmp	.+36     	; 0xa160 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    a13c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a13e:	90 e0       	ldi	r25, 0x00	; 0
    a140:	01 96       	adiw	r24, 0x01	; 1
    a142:	61 81       	ldd	r22, Z+1	; 0x01
    a144:	70 e0       	ldi	r23, 0x00	; 0
    a146:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    a14a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a14c:	81 11       	cpse	r24, r1
    a14e:	02 c0       	rjmp	.+4      	; 0xa154 <LBGetNextFrame+0x3a>
    a150:	41 e0       	ldi	r20, 0x01	; 1
    a152:	44 83       	std	Z+4, r20	; 0x04
    a154:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    a156:	88 0f       	add	r24, r24
    a158:	99 1f       	adc	r25, r25
    a15a:	f9 01       	movw	r30, r18
    a15c:	e8 0f       	add	r30, r24
    a15e:	f9 1f       	adc	r31, r25
    a160:	80 81       	ld	r24, Z
    a162:	91 81       	ldd	r25, Z+1	; 0x01
}
    a164:	08 95       	ret

0000a166 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a166:	0f 93       	push	r16
    a168:	1f 93       	push	r17
    a16a:	cf 93       	push	r28
    a16c:	df 93       	push	r29
    a16e:	1f 92       	push	r1
    a170:	cd b7       	in	r28, 0x3d	; 61
    a172:	de b7       	in	r29, 0x3e	; 62
    a174:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    a176:	86 2f       	mov	r24, r22
    a178:	69 83       	std	Y+1, r22	; 0x01
    a17a:	0e 94 0a 41 	call	0x8214	; 0x8214 <ReadJoypad>
    a17e:	d8 01       	movw	r26, r16
    a180:	15 96       	adiw	r26, 0x05	; 5
    a182:	9c 93       	st	X, r25
    a184:	8e 93       	st	-X, r24
    a186:	14 97       	sbiw	r26, 0x04	; 4
    a188:	69 81       	ldd	r22, Y+1	; 0x01
    a18a:	e6 2f       	mov	r30, r22
    a18c:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a18e:	00 97       	sbiw	r24, 0x00	; 0
    a190:	51 f0       	breq	.+20     	; 0xa1a6 <LBGetJoyPadState+0x40>
    a192:	df 01       	movw	r26, r30
    a194:	aa 0f       	add	r26, r26
    a196:	bb 1f       	adc	r27, r27
    a198:	aa 50       	subi	r26, 0x0A	; 10
    a19a:	b3 4f       	sbci	r27, 0xF3	; 243
    a19c:	2d 91       	ld	r18, X+
    a19e:	3c 91       	ld	r19, X
    a1a0:	82 17       	cp	r24, r18
    a1a2:	93 07       	cpc	r25, r19
    a1a4:	21 f0       	breq	.+8      	; 0xa1ae <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a1a6:	d8 01       	movw	r26, r16
    a1a8:	16 96       	adiw	r26, 0x06	; 6
    a1aa:	1c 92       	st	X, r1
    a1ac:	07 c0       	rjmp	.+14     	; 0xa1bc <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a1ae:	d8 01       	movw	r26, r16
    a1b0:	16 96       	adiw	r26, 0x06	; 6
    a1b2:	2c 91       	ld	r18, X
    a1b4:	16 97       	sbiw	r26, 0x06	; 6
    a1b6:	2f 5f       	subi	r18, 0xFF	; 255
    a1b8:	16 96       	adiw	r26, 0x06	; 6
    a1ba:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a1bc:	ee 0f       	add	r30, r30
    a1be:	ff 1f       	adc	r31, r31
    a1c0:	ea 50       	subi	r30, 0x0A	; 10
    a1c2:	f3 4f       	sbci	r31, 0xF3	; 243
    a1c4:	20 81       	ld	r18, Z
    a1c6:	31 81       	ldd	r19, Z+1	; 0x01
    a1c8:	a9 01       	movw	r20, r18
    a1ca:	40 95       	com	r20
    a1cc:	50 95       	com	r21
    a1ce:	48 23       	and	r20, r24
    a1d0:	59 23       	and	r21, r25
    a1d2:	d8 01       	movw	r26, r16
    a1d4:	11 96       	adiw	r26, 0x01	; 1
    a1d6:	5c 93       	st	X, r21
    a1d8:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a1da:	ac 01       	movw	r20, r24
    a1dc:	40 95       	com	r20
    a1de:	50 95       	com	r21
    a1e0:	24 23       	and	r18, r20
    a1e2:	35 23       	and	r19, r21
    a1e4:	13 96       	adiw	r26, 0x03	; 3
    a1e6:	3c 93       	st	X, r19
    a1e8:	2e 93       	st	-X, r18
    a1ea:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a1ec:	91 83       	std	Z+1, r25	; 0x01
    a1ee:	80 83       	st	Z, r24
}
    a1f0:	0f 90       	pop	r0
    a1f2:	df 91       	pop	r29
    a1f4:	cf 91       	pop	r28
    a1f6:	1f 91       	pop	r17
    a1f8:	0f 91       	pop	r16
    a1fa:	08 95       	ret

0000a1fc <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    a1fc:	90 ed       	ldi	r25, 0xD0	; 208
    a1fe:	94 0f       	add	r25, r20
    a200:	e0 91 84 0d 	lds	r30, 0x0D84
    a204:	f0 91 85 0d 	lds	r31, 0x0D85
    a208:	9a 30       	cpi	r25, 0x0A	; 10
    a20a:	38 f4       	brcc	.+14     	; 0xa21a <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    a20c:	24 2f       	mov	r18, r20
    a20e:	30 e0       	ldi	r19, 0x00	; 0
    a210:	2d 52       	subi	r18, 0x2D	; 45
    a212:	31 09       	sbc	r19, r1
    a214:	e2 0f       	add	r30, r18
    a216:	f3 1f       	adc	r31, r19
    a218:	0c c0       	rjmp	.+24     	; 0xa232 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    a21a:	9f eb       	ldi	r25, 0xBF	; 191
    a21c:	94 0f       	add	r25, r20
    a21e:	9a 31       	cpi	r25, 0x1A	; 26
    a220:	38 f4       	brcc	.+14     	; 0xa230 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    a222:	50 e0       	ldi	r21, 0x00	; 0
    a224:	44 53       	subi	r20, 0x34	; 52
    a226:	51 09       	sbc	r21, r1
    a228:	e4 0f       	add	r30, r20
    a22a:	f5 1f       	adc	r31, r21
    a22c:	44 91       	lpm	r20, Z
    a22e:	03 c0       	rjmp	.+6      	; 0xa236 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    a230:	32 96       	adiw	r30, 0x02	; 2
    a232:	e4 91       	lpm	r30, Z
    a234:	4e 2f       	mov	r20, r30
    a236:	50 e0       	ldi	r21, 0x00	; 0
    a238:	0c 94 ea 40 	jmp	0x81d4	; 0x81d4 <SetTile>

0000a23c <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    a23c:	ff 92       	push	r15
    a23e:	0f 93       	push	r16
    a240:	1f 93       	push	r17
    a242:	cf 93       	push	r28
    a244:	df 93       	push	r29
    a246:	d8 2f       	mov	r29, r24
    a248:	f6 2e       	mov	r15, r22
    a24a:	8a 01       	movw	r16, r20
	u8 i = 0;
    a24c:	c0 e0       	ldi	r28, 0x00	; 0
    a24e:	8c 2f       	mov	r24, r28
    a250:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    a252:	f8 01       	movw	r30, r16
    a254:	ec 0f       	add	r30, r28
    a256:	f1 1d       	adc	r31, r1
    a258:	44 91       	lpm	r20, Z
    a25a:	44 23       	and	r20, r20
    a25c:	29 f0       	breq	.+10     	; 0xa268 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    a25e:	6f 2d       	mov	r22, r15
    a260:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		i++;
    a264:	cf 5f       	subi	r28, 0xFF	; 255
    a266:	f3 cf       	rjmp	.-26     	; 0xa24e <LBPrint+0x12>
	}
}
    a268:	df 91       	pop	r29
    a26a:	cf 91       	pop	r28
    a26c:	1f 91       	pop	r17
    a26e:	0f 91       	pop	r16
    a270:	ff 90       	pop	r15
    a272:	08 95       	ret

0000a274 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    a274:	df 92       	push	r13
    a276:	ef 92       	push	r14
    a278:	ff 92       	push	r15
    a27a:	0f 93       	push	r16
    a27c:	1f 93       	push	r17
    a27e:	cf 93       	push	r28
    a280:	df 93       	push	r29
    a282:	1f 92       	push	r1
    a284:	cd b7       	in	r28, 0x3d	; 61
    a286:	de b7       	in	r29, 0x3e	; 62
    a288:	38 2f       	mov	r19, r24
    a28a:	06 2f       	mov	r16, r22
    a28c:	84 2f       	mov	r24, r20
    a28e:	9d ef       	ldi	r25, 0xFD	; 253
    a290:	e9 2e       	mov	r14, r25
    a292:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a294:	4a e0       	ldi	r20, 0x0A	; 10
    a296:	f4 2e       	mov	r15, r20
    a298:	1f ef       	ldi	r17, 0xFF	; 255
    a29a:	13 0f       	add	r17, r19
    a29c:	6f 2d       	mov	r22, r15
    a29e:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    a2a2:	d8 2e       	mov	r13, r24
    a2a4:	40 e3       	ldi	r20, 0x30	; 48
    a2a6:	49 0f       	add	r20, r25
    a2a8:	60 2f       	mov	r22, r16
    a2aa:	83 2f       	mov	r24, r19
    a2ac:	29 83       	std	Y+1, r18	; 0x01
    a2ae:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		value /= 10;
    a2b2:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    a2b4:	29 81       	ldd	r18, Y+1	; 0x01
    a2b6:	21 11       	cpse	r18, r1
    a2b8:	02 c0       	rjmp	.+4      	; 0xa2be <LBPrintByte+0x4a>
    a2ba:	dd 20       	and	r13, r13
    a2bc:	19 f0       	breq	.+6      	; 0xa2c4 <LBPrintByte+0x50>
    a2be:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    a2c0:	1e 11       	cpse	r17, r14
    a2c2:	ea cf       	rjmp	.-44     	; 0xa298 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a2c4:	0f 90       	pop	r0
    a2c6:	df 91       	pop	r29
    a2c8:	cf 91       	pop	r28
    a2ca:	1f 91       	pop	r17
    a2cc:	0f 91       	pop	r16
    a2ce:	ff 90       	pop	r15
    a2d0:	ef 90       	pop	r14
    a2d2:	df 90       	pop	r13
    a2d4:	08 95       	ret

0000a2d6 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    a2d6:	cf 92       	push	r12
    a2d8:	df 92       	push	r13
    a2da:	ef 92       	push	r14
    a2dc:	ff 92       	push	r15
    a2de:	0f 93       	push	r16
    a2e0:	1f 93       	push	r17
    a2e2:	cf 93       	push	r28
    a2e4:	df 93       	push	r29
    a2e6:	00 d0       	rcall	.+0      	; 0xa2e8 <LBPrintInt+0x12>
    a2e8:	cd b7       	in	r28, 0x3d	; 61
    a2ea:	de b7       	in	r29, 0x3e	; 62
    a2ec:	38 2f       	mov	r19, r24
    a2ee:	16 2f       	mov	r17, r22
    a2f0:	ca 01       	movw	r24, r20
    a2f2:	4b ef       	ldi	r20, 0xFB	; 251
    a2f4:	d4 2e       	mov	r13, r20
    a2f6:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a2f8:	5a e0       	ldi	r21, 0x0A	; 10
    a2fa:	e5 2e       	mov	r14, r21
    a2fc:	f1 2c       	mov	r15, r1
    a2fe:	cc 24       	eor	r12, r12
    a300:	ca 94       	dec	r12
    a302:	c3 0e       	add	r12, r19
    a304:	b7 01       	movw	r22, r14
    a306:	0e 94 44 72 	call	0xe488	; 0xe488 <__udivmodhi4>
    a30a:	06 2f       	mov	r16, r22
    a30c:	40 e3       	ldi	r20, 0x30	; 48
    a30e:	48 0f       	add	r20, r24
    a310:	61 2f       	mov	r22, r17
    a312:	83 2f       	mov	r24, r19
    a314:	29 83       	std	Y+1, r18	; 0x01
    a316:	7a 83       	std	Y+2, r23	; 0x02
    a318:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		value /= 10;
    a31c:	80 2f       	mov	r24, r16
    a31e:	7a 81       	ldd	r23, Y+2	; 0x02
    a320:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a322:	29 81       	ldd	r18, Y+1	; 0x01
    a324:	21 11       	cpse	r18, r1
    a326:	02 c0       	rjmp	.+4      	; 0xa32c <LBPrintInt+0x56>
    a328:	00 97       	sbiw	r24, 0x00	; 0
    a32a:	19 f0       	breq	.+6      	; 0xa332 <LBPrintInt+0x5c>
    a32c:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a32e:	cd 10       	cpse	r12, r13
    a330:	e6 cf       	rjmp	.-52     	; 0xa2fe <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a332:	0f 90       	pop	r0
    a334:	0f 90       	pop	r0
    a336:	df 91       	pop	r29
    a338:	cf 91       	pop	r28
    a33a:	1f 91       	pop	r17
    a33c:	0f 91       	pop	r16
    a33e:	ff 90       	pop	r15
    a340:	ef 90       	pop	r14
    a342:	df 90       	pop	r13
    a344:	cf 90       	pop	r12
    a346:	08 95       	ret

0000a348 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a348:	af 92       	push	r10
    a34a:	cf 92       	push	r12
    a34c:	ef 92       	push	r14
    a34e:	ff 92       	push	r15
    a350:	0f 93       	push	r16
    a352:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a354:	70 e0       	ldi	r23, 0x00	; 0
    a356:	f1 2c       	mov	r15, r1
    a358:	fb 01       	movw	r30, r22
    a35a:	e2 0f       	add	r30, r18
    a35c:	f1 1d       	adc	r31, r1
    a35e:	ee 16       	cp	r14, r30
    a360:	ff 06       	cpc	r15, r31
    a362:	a4 f4       	brge	.+40     	; 0xa38c <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a364:	ea 0c       	add	r14, r10
    a366:	f1 1c       	adc	r15, r1
    a368:	6e 15       	cp	r22, r14
    a36a:	7f 05       	cpc	r23, r15
    a36c:	7c f4       	brge	.+30     	; 0xa38c <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a36e:	28 2f       	mov	r18, r24
    a370:	30 e0       	ldi	r19, 0x00	; 0
    a372:	10 e0       	ldi	r17, 0x00	; 0
    a374:	c9 01       	movw	r24, r18
    a376:	84 0f       	add	r24, r20
    a378:	91 1d       	adc	r25, r1
    a37a:	08 17       	cp	r16, r24
    a37c:	19 07       	cpc	r17, r25
    a37e:	34 f4       	brge	.+12     	; 0xa38c <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a380:	0c 0d       	add	r16, r12
    a382:	11 1d       	adc	r17, r1
    a384:	81 e0       	ldi	r24, 0x01	; 1
    a386:	20 17       	cp	r18, r16
    a388:	31 07       	cpc	r19, r17
    a38a:	0c f0       	brlt	.+2      	; 0xa38e <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a38c:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a38e:	1f 91       	pop	r17
    a390:	0f 91       	pop	r16
    a392:	ff 90       	pop	r15
    a394:	ef 90       	pop	r14
    a396:	cf 90       	pop	r12
    a398:	af 90       	pop	r10
    a39a:	08 95       	ret

0000a39c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a39c:	cf 93       	push	r28
    a39e:	df 93       	push	r29
    a3a0:	d8 2f       	mov	r29, r24
    a3a2:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a3a4:	80 e0       	ldi	r24, 0x00	; 0
    a3a6:	90 e0       	ldi	r25, 0x00	; 0
    a3a8:	0e 94 d8 42 	call	0x85b0	; 0x85b0 <GetPrngNumber>
    a3ac:	6f ef       	ldi	r22, 0xFF	; 255
    a3ae:	70 e0       	ldi	r23, 0x00	; 0
    a3b0:	0e 94 44 72 	call	0xe488	; 0xe488 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a3b4:	6c 2f       	mov	r22, r28
    a3b6:	70 e0       	ldi	r23, 0x00	; 0
    a3b8:	6d 1b       	sub	r22, r29
    a3ba:	71 09       	sbc	r23, r1
    a3bc:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
}
    a3c0:	8d 0f       	add	r24, r29
    a3c2:	df 91       	pop	r29
    a3c4:	cf 91       	pop	r28
    a3c6:	08 95       	ret

0000a3c8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a3c8:	cf 93       	push	r28
    a3ca:	df 93       	push	r29
    a3cc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a3ce:	c0 e0       	ldi	r28, 0x00	; 0
    a3d0:	cd 17       	cp	r28, r29
    a3d2:	31 f0       	breq	.+12     	; 0xa3e0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a3d4:	8f ef       	ldi	r24, 0xFF	; 255
    a3d6:	9f ef       	ldi	r25, 0xFF	; 255
    a3d8:	0e 94 16 41 	call	0x822c	; 0x822c <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a3dc:	cf 5f       	subi	r28, 0xFF	; 255
    a3de:	f8 cf       	rjmp	.-16     	; 0xa3d0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a3e0:	df 91       	pop	r29
    a3e2:	cf 91       	pop	r28
    a3e4:	08 95       	ret

0000a3e6 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a3e6:	df 92       	push	r13
    a3e8:	ef 92       	push	r14
    a3ea:	ff 92       	push	r15
    a3ec:	0f 93       	push	r16
    a3ee:	1f 93       	push	r17
    a3f0:	cf 93       	push	r28
    a3f2:	df 93       	push	r29
    a3f4:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a3f6:	fb 01       	movw	r30, r22
    a3f8:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a3fa:	31 96       	adiw	r30, 0x01	; 1
    a3fc:	64 91       	lpm	r22, Z
    a3fe:	5f ef       	ldi	r21, 0xFF	; 255
    a400:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a402:	24 2f       	mov	r18, r20
    a404:	21 70       	andi	r18, 0x01	; 1
    a406:	40 ff       	sbrs	r20, 0
    a408:	04 c0       	rjmp	.+8      	; 0xa412 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a40a:	95 2f       	mov	r25, r21
		dx=-1;
    a40c:	ff 24       	eor	r15, r15
    a40e:	fa 94       	dec	r15
    a410:	03 c0       	rjmp	.+6      	; 0xa418 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a412:	ff 24       	eor	r15, r15
    a414:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a416:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a418:	41 ff       	sbrs	r20, 1
    a41a:	05 c0       	rjmp	.+10     	; 0xa426 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a41c:	7f ef       	ldi	r23, 0xFF	; 255
    a41e:	76 0f       	add	r23, r22
		dy=-1;
    a420:	ee 24       	eor	r14, r14
    a422:	ea 94       	dec	r14
    a424:	03 c0       	rjmp	.+6      	; 0xa42c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a426:	ee 24       	eor	r14, r14
    a428:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a42a:	70 e0       	ldi	r23, 0x00	; 0
    a42c:	21 11       	cpse	r18, r1
    a42e:	01 c0       	rjmp	.+2      	; 0xa432 <LBMapSprite+0x4c>
    a430:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a432:	00 e0       	ldi	r16, 0x00	; 0
    a434:	06 17       	cp	r16, r22
    a436:	09 f1       	breq	.+66     	; 0xa47a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a438:	71 03       	mulsu	r23, r17
    a43a:	e0 01       	movw	r28, r0
    a43c:	11 24       	eor	r1, r1
    a43e:	d8 2e       	mov	r13, r24
    a440:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a442:	8d 15       	cp	r24, r13
    a444:	b1 f0       	breq	.+44     	; 0xa472 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a446:	9e 01       	movw	r18, r28
    a448:	29 0f       	add	r18, r25
    a44a:	31 1d       	adc	r19, r1
    a44c:	97 fd       	sbrc	r25, 7
    a44e:	3a 95       	dec	r19
    a450:	2e 5f       	subi	r18, 0xFE	; 254
    a452:	3f 4f       	sbci	r19, 0xFF	; 255
    a454:	fd 01       	movw	r30, r26
    a456:	e2 0f       	add	r30, r18
    a458:	f3 1f       	adc	r31, r19
    a45a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a45c:	34 e0       	ldi	r19, 0x04	; 4
    a45e:	83 9f       	mul	r24, r19
    a460:	f0 01       	movw	r30, r0
    a462:	11 24       	eor	r1, r1
    a464:	e5 52       	subi	r30, 0x25	; 37
    a466:	f0 4f       	sbci	r31, 0xF0	; 240
    a468:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a46a:	8f 5f       	subi	r24, 0xFF	; 255
    a46c:	43 83       	std	Z+3, r20	; 0x03
    a46e:	9f 0d       	add	r25, r15
    a470:	e8 cf       	rjmp	.-48     	; 0xa442 <LBMapSprite+0x5c>
    a472:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a474:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a476:	95 2f       	mov	r25, r21
    a478:	dd cf       	rjmp	.-70     	; 0xa434 <LBMapSprite+0x4e>
	}
}
    a47a:	df 91       	pop	r29
    a47c:	cf 91       	pop	r28
    a47e:	1f 91       	pop	r17
    a480:	0f 91       	pop	r16
    a482:	ff 90       	pop	r15
    a484:	ef 90       	pop	r14
    a486:	df 90       	pop	r13
    a488:	08 95       	ret

0000a48a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a48a:	df 92       	push	r13
    a48c:	ef 92       	push	r14
    a48e:	ff 92       	push	r15
    a490:	0f 93       	push	r16
    a492:	1f 93       	push	r17
    a494:	cf 93       	push	r28
    a496:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a498:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a49c:	98 e0       	ldi	r25, 0x08	; 8
    a49e:	a9 9f       	mul	r26, r25
    a4a0:	70 01       	movw	r14, r0
    a4a2:	11 24       	eor	r1, r1
    a4a4:	50 e0       	ldi	r21, 0x00	; 0
    a4a6:	38 ef       	ldi	r19, 0xF8	; 248
    a4a8:	a3 9f       	mul	r26, r19
    a4aa:	30 2d       	mov	r19, r0
    a4ac:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a4ae:	70 e0       	ldi	r23, 0x00	; 0
    a4b0:	70 17       	cp	r23, r16
    a4b2:	09 f1       	breq	.+66     	; 0xa4f6 <LBMoveSprite+0x6c>
    a4b4:	d4 2e       	mov	r13, r20
    a4b6:	13 2f       	mov	r17, r19
    a4b8:	14 0f       	add	r17, r20
    a4ba:	b8 2f       	mov	r27, r24
    a4bc:	b2 0f       	add	r27, r18
    a4be:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a4c0:	8b 17       	cp	r24, r27
    a4c2:	a9 f0       	breq	.+42     	; 0xa4ee <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a4c4:	c4 e0       	ldi	r28, 0x04	; 4
    a4c6:	8c 9f       	mul	r24, r28
    a4c8:	f0 01       	movw	r30, r0
    a4ca:	11 24       	eor	r1, r1
    a4cc:	ef 01       	movw	r28, r30
    a4ce:	c5 52       	subi	r28, 0x25	; 37
    a4d0:	d0 4f       	sbci	r29, 0xF0	; 240
    a4d2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a4d4:	a0 32       	cpi	r26, 0x20	; 32
    a4d6:	28 f4       	brcc	.+10     	; 0xa4e2 <LBMoveSprite+0x58>
    a4d8:	e4 16       	cp	r14, r20
    a4da:	f5 06       	cpc	r15, r21
    a4dc:	14 f4       	brge	.+4      	; 0xa4e2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a4de:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a4e0:	03 c0       	rjmp	.+6      	; 0xa4e8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a4e2:	e5 52       	subi	r30, 0x25	; 37
    a4e4:	f0 4f       	sbci	r31, 0xF0	; 240
    a4e6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a4e8:	8f 5f       	subi	r24, 0xFF	; 255
    a4ea:	98 5f       	subi	r25, 0xF8	; 248
    a4ec:	e9 cf       	rjmp	.-46     	; 0xa4c0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a4ee:	7f 5f       	subi	r23, 0xFF	; 255
    a4f0:	48 5f       	subi	r20, 0xF8	; 248
    a4f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a4f4:	dd cf       	rjmp	.-70     	; 0xa4b0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a4f6:	df 91       	pop	r29
    a4f8:	cf 91       	pop	r28
    a4fa:	1f 91       	pop	r17
    a4fc:	0f 91       	pop	r16
    a4fe:	ff 90       	pop	r15
    a500:	ef 90       	pop	r14
    a502:	df 90       	pop	r13
    a504:	08 95       	ret

0000a506 <LBRotateSprites>:

void LBRotateSprites()
{
    a506:	80 e0       	ldi	r24, 0x00	; 0
    a508:	90 e0       	ldi	r25, 0x00	; 0
    a50a:	dc 01       	movw	r26, r24
    a50c:	a5 52       	subi	r26, 0x25	; 37
    a50e:	b0 4f       	sbci	r27, 0xF0	; 240
    a510:	fc 01       	movw	r30, r24
    a512:	e0 5f       	subi	r30, 0xF0	; 240
    a514:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a516:	13 96       	adiw	r26, 0x03	; 3
    a518:	2c 91       	ld	r18, X
    a51a:	13 97       	sbiw	r26, 0x03	; 3
    a51c:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a51e:	12 96       	adiw	r26, 0x02	; 2
    a520:	2c 91       	ld	r18, X
    a522:	12 97       	sbiw	r26, 0x02	; 2
    a524:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a526:	2c 91       	ld	r18, X
    a528:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a52a:	11 96       	adiw	r26, 0x01	; 1
    a52c:	2c 91       	ld	r18, X
    a52e:	21 83       	std	Z+1, r18	; 0x01
    a530:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a532:	8c 33       	cpi	r24, 0x3C	; 60
    a534:	91 05       	cpc	r25, r1
    a536:	49 f7       	brne	.-46     	; 0xa50a <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a538:	80 91 01 05 	lds	r24, 0x0501
    a53c:	94 e0       	ldi	r25, 0x04	; 4
    a53e:	89 9f       	mul	r24, r25
    a540:	f0 01       	movw	r30, r0
    a542:	11 24       	eor	r1, r1
    a544:	e5 52       	subi	r30, 0x25	; 37
    a546:	f0 4f       	sbci	r31, 0xF0	; 240
    a548:	93 81       	ldd	r25, Z+3	; 0x03
    a54a:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a54e:	92 81       	ldd	r25, Z+2	; 0x02
    a550:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a554:	90 81       	ld	r25, Z
    a556:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a55a:	91 81       	ldd	r25, Z+1	; 0x01
    a55c:	90 93 4d 05 	sts	0x054D, r25
		rotate_index += 1;
    a560:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a562:	84 31       	cpi	r24, 0x14	; 20
    a564:	08 f0       	brcs	.+2      	; 0xa568 <LBRotateSprites+0x62>
    a566:	8f e0       	ldi	r24, 0x0F	; 15
    a568:	80 93 01 05 	sts	0x0501, r24
    a56c:	08 95       	ret

0000a56e <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a56e:	80 91 c7 0d 	lds	r24, 0x0DC7
}
    a572:	81 70       	andi	r24, 0x01	; 1
    a574:	08 95       	ret

0000a576 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a576:	8c e8       	ldi	r24, 0x8C	; 140
    a578:	90 e0       	ldi	r25, 0x00	; 0
    a57a:	90 93 93 0d 	sts	0x0D93, r25
    a57e:	80 93 92 0d 	sts	0x0D92, r24
    a582:	80 e0       	ldi	r24, 0x00	; 0
    a584:	90 e0       	ldi	r25, 0x00	; 0
    a586:	fc 01       	movw	r30, r24
    a588:	ec 58       	subi	r30, 0x8C	; 140
    a58a:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a58c:	e4 91       	lpm	r30, Z
    a58e:	dc 01       	movw	r26, r24
    a590:	ae 56       	subi	r26, 0x6E	; 110
    a592:	b2 4f       	sbci	r27, 0xF2	; 242
    a594:	12 96       	adiw	r26, 0x02	; 2
    a596:	ec 93       	st	X, r30
    a598:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a59a:	8e 31       	cpi	r24, 0x1E	; 30
    a59c:	91 05       	cpc	r25, r1
    a59e:	99 f7       	brne	.-26     	; 0xa586 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a5a0:	08 95       	ret

0000a5a2 <init_enemy_state>:

void init_enemy_state()
{
    a5a2:	80 e0       	ldi	r24, 0x00	; 0
    a5a4:	90 e0       	ldi	r25, 0x00	; 0
    a5a6:	9c 01       	movw	r18, r24
    a5a8:	2e 54       	subi	r18, 0x4E	; 78
    a5aa:	32 4f       	sbci	r19, 0xF2	; 242
    a5ac:	f9 01       	movw	r30, r18
    a5ae:	e5 5e       	subi	r30, 0xE5	; 229
    a5b0:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a5b2:	10 82       	st	Z, r1
    a5b4:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a5b6:	10 82       	st	Z, r1
    a5b8:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a5ba:	89 30       	cpi	r24, 0x09	; 9
    a5bc:	21 e0       	ldi	r18, 0x01	; 1
    a5be:	92 07       	cpc	r25, r18
    a5c0:	91 f7       	brne	.-28     	; 0xa5a6 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a5c2:	10 92 cd 0d 	sts	0x0DCD, r1
    a5c6:	08 95       	ret

0000a5c8 <init_player_shot>:
	}
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    a5c8:	81 11       	cpse	r24, r1
    a5ca:	53 c0       	rjmp	.+166    	; 0xa672 <init_player_shot+0xaa>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5cc:	10 92 e7 0d 	sts	0x0DE7, r1
	shot->hit_count = damage;
    a5d0:	81 e0       	ldi	r24, 0x01	; 1
    a5d2:	80 93 e8 0d 	sts	0x0DE8, r24
	shot->shot_speed = speed;
    a5d6:	90 e5       	ldi	r25, 0x50	; 80
    a5d8:	90 93 ea 0d 	sts	0x0DEA, r25
	shot->y_delta = y_delta;
    a5dc:	10 92 eb 0d 	sts	0x0DEB, r1
	shot->anim.anim_count = 1;
    a5e0:	80 93 ed 0d 	sts	0x0DED, r24
	shot->anim.frames_per_anim = 1;
    a5e4:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims = anim;
    a5e8:	26 e8       	ldi	r18, 0x86	; 134
    a5ea:	3d e0       	ldi	r19, 0x0D	; 13
    a5ec:	30 93 f3 0d 	sts	0x0DF3, r19
    a5f0:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->anim.anims[0] = (char*) map;
    a5f4:	21 eb       	ldi	r18, 0xB1	; 177
    a5f6:	36 e3       	ldi	r19, 0x36	; 54
    a5f8:	30 93 87 0d 	sts	0x0D87, r19
    a5fc:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a600:	90 93 e5 0d 	sts	0x0DE5, r25
	shot->shared.vy = 0;
    a604:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a608:	10 92 fb 0d 	sts	0x0DFB, r1
	shot->hit_count = damage;
    a60c:	80 93 fc 0d 	sts	0x0DFC, r24
	shot->shot_speed = speed;
    a610:	90 93 fe 0d 	sts	0x0DFE, r25
	shot->y_delta = y_delta;
    a614:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a618:	80 93 01 0e 	sts	0x0E01, r24
	shot->anim.frames_per_anim = 1;
    a61c:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.anims = anim;
    a620:	47 e3       	ldi	r20, 0x37	; 55
    a622:	50 e1       	ldi	r21, 0x10	; 16
    a624:	50 93 07 0e 	sts	0x0E07, r21
    a628:	40 93 06 0e 	sts	0x0E06, r20
	shot->anim.anims[0] = (char*) map;
    a62c:	30 93 38 10 	sts	0x1038, r19
    a630:	20 93 37 10 	sts	0x1037, r18
	shot->shared.vx = speed;
    a634:	90 93 f9 0d 	sts	0x0DF9, r25
	shot->shared.vy = 0;
    a638:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a63c:	10 92 0f 0e 	sts	0x0E0F, r1
	shot->hit_count = damage;
    a640:	80 93 10 0e 	sts	0x0E10, r24
	shot->shot_speed = speed;
    a644:	90 93 12 0e 	sts	0x0E12, r25
	shot->y_delta = y_delta;
    a648:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a64c:	80 93 15 0e 	sts	0x0E15, r24
	shot->anim.frames_per_anim = 1;
    a650:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.anims = anim;
    a654:	47 e4       	ldi	r20, 0x47	; 71
    a656:	50 e1       	ldi	r21, 0x10	; 16
    a658:	50 93 1b 0e 	sts	0x0E1B, r21
    a65c:	40 93 1a 0e 	sts	0x0E1A, r20
	shot->anim.anims[0] = (char*) map;
    a660:	30 93 48 10 	sts	0x1048, r19
    a664:	20 93 47 10 	sts	0x1047, r18
	shot->shared.vx = speed;
    a668:	90 93 0d 0e 	sts	0x0E0D, r25
	shot->shared.vy = 0;
    a66c:	10 92 0c 0e 	sts	0x0E0C, r1
    a670:	c2 c1       	rjmp	.+900    	; 0xa9f6 <init_player_shot+0x42e>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a672:	82 30       	cpi	r24, 0x02	; 2
    a674:	09 f0       	breq	.+2      	; 0xa678 <init_player_shot+0xb0>
    a676:	55 c0       	rjmp	.+170    	; 0xa722 <init_player_shot+0x15a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a678:	91 e0       	ldi	r25, 0x01	; 1
    a67a:	90 93 e7 0d 	sts	0x0DE7, r25
	shot->hit_count = damage;
    a67e:	80 93 e8 0d 	sts	0x0DE8, r24
	shot->shot_speed = speed;
    a682:	24 e6       	ldi	r18, 0x64	; 100
    a684:	20 93 ea 0d 	sts	0x0DEA, r18
	shot->y_delta = y_delta;
    a688:	10 92 eb 0d 	sts	0x0DEB, r1
	shot->anim.anim_count = 1;
    a68c:	90 93 ed 0d 	sts	0x0DED, r25
	shot->anim.frames_per_anim = 1;
    a690:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.anims = anim;
    a694:	46 e8       	ldi	r20, 0x86	; 134
    a696:	5d e0       	ldi	r21, 0x0D	; 13
    a698:	50 93 f3 0d 	sts	0x0DF3, r21
    a69c:	40 93 f2 0d 	sts	0x0DF2, r20
	shot->anim.anims[0] = (char*) map;
    a6a0:	4e ea       	ldi	r20, 0xAE	; 174
    a6a2:	56 e3       	ldi	r21, 0x36	; 54
    a6a4:	50 93 87 0d 	sts	0x0D87, r21
    a6a8:	40 93 86 0d 	sts	0x0D86, r20
	shot->shared.vx = speed;
    a6ac:	20 93 e5 0d 	sts	0x0DE5, r18
	shot->shared.vy = 0;
    a6b0:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6b4:	90 93 fb 0d 	sts	0x0DFB, r25
	shot->hit_count = damage;
    a6b8:	80 93 fc 0d 	sts	0x0DFC, r24
	shot->shot_speed = speed;
    a6bc:	20 93 fe 0d 	sts	0x0DFE, r18
	shot->y_delta = y_delta;
    a6c0:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a6c4:	90 93 01 0e 	sts	0x0E01, r25
	shot->anim.frames_per_anim = 1;
    a6c8:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.anims = anim;
    a6cc:	67 e3       	ldi	r22, 0x37	; 55
    a6ce:	70 e1       	ldi	r23, 0x10	; 16
    a6d0:	70 93 07 0e 	sts	0x0E07, r23
    a6d4:	60 93 06 0e 	sts	0x0E06, r22
	shot->anim.anims[0] = (char*) map;
    a6d8:	50 93 38 10 	sts	0x1038, r21
    a6dc:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a6e0:	20 93 f9 0d 	sts	0x0DF9, r18
	shot->shared.vy = 0;
    a6e4:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6e8:	90 93 0f 0e 	sts	0x0E0F, r25
	shot->hit_count = damage;
    a6ec:	80 93 10 0e 	sts	0x0E10, r24
	shot->shot_speed = speed;
    a6f0:	20 93 12 0e 	sts	0x0E12, r18
	shot->y_delta = y_delta;
    a6f4:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a6f8:	90 93 15 0e 	sts	0x0E15, r25
	shot->anim.frames_per_anim = 1;
    a6fc:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.anims = anim;
    a700:	67 e4       	ldi	r22, 0x47	; 71
    a702:	70 e1       	ldi	r23, 0x10	; 16
    a704:	70 93 1b 0e 	sts	0x0E1B, r23
    a708:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->anim.anims[0] = (char*) map;
    a70c:	50 93 48 10 	sts	0x1048, r21
    a710:	40 93 47 10 	sts	0x1047, r20
	shot->shared.vx = speed;
    a714:	20 93 0d 0e 	sts	0x0E0D, r18
	shot->shared.vy = 0;
    a718:	10 92 0c 0e 	sts	0x0E0C, r1
	else if (level == 2) // Fire
	{
		init_shot(&game.player.shot[0], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a71c:	90 93 de 0d 	sts	0x0DDE, r25
    a720:	08 95       	ret
		
	}
	else if (level == 4) // Jungle
    a722:	84 30       	cpi	r24, 0x04	; 4
    a724:	09 f0       	breq	.+2      	; 0xa728 <init_player_shot+0x160>
    a726:	56 c0       	rjmp	.+172    	; 0xa7d4 <init_player_shot+0x20c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a728:	80 93 e7 0d 	sts	0x0DE7, r24
	shot->hit_count = damage;
    a72c:	81 e0       	ldi	r24, 0x01	; 1
    a72e:	80 93 e8 0d 	sts	0x0DE8, r24
	shot->shot_speed = speed;
    a732:	9f e7       	ldi	r25, 0x7F	; 127
    a734:	90 93 ea 0d 	sts	0x0DEA, r25
	shot->y_delta = y_delta;
    a738:	28 ef       	ldi	r18, 0xF8	; 248
    a73a:	20 93 eb 0d 	sts	0x0DEB, r18
	shot->anim.anim_count = 1;
    a73e:	80 93 ed 0d 	sts	0x0DED, r24
	shot->anim.frames_per_anim = 1;
    a742:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims = anim;
    a746:	26 e8       	ldi	r18, 0x86	; 134
    a748:	3d e0       	ldi	r19, 0x0D	; 13
    a74a:	30 93 f3 0d 	sts	0x0DF3, r19
    a74e:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->anim.anims[0] = (char*) map;
    a752:	21 eb       	ldi	r18, 0xB1	; 177
    a754:	36 e3       	ldi	r19, 0x36	; 54
    a756:	30 93 87 0d 	sts	0x0D87, r19
    a75a:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a75e:	90 93 e5 0d 	sts	0x0DE5, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a762:	21 e8       	ldi	r18, 0x81	; 129
    a764:	20 93 e4 0d 	sts	0x0DE4, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a768:	22 e0       	ldi	r18, 0x02	; 2
    a76a:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->hit_count = damage;
    a76e:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->shot_speed = speed;
    a772:	90 93 fe 0d 	sts	0x0DFE, r25
	shot->y_delta = y_delta;
    a776:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a77a:	80 93 01 0e 	sts	0x0E01, r24
	shot->anim.frames_per_anim = 1;
    a77e:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.anims = anim;
    a782:	47 e3       	ldi	r20, 0x37	; 55
    a784:	50 e1       	ldi	r21, 0x10	; 16
    a786:	50 93 07 0e 	sts	0x0E07, r21
    a78a:	40 93 06 0e 	sts	0x0E06, r20
	shot->anim.anims[0] = (char*) map;
    a78e:	45 ea       	ldi	r20, 0xA5	; 165
    a790:	56 e3       	ldi	r21, 0x36	; 54
    a792:	50 93 38 10 	sts	0x1038, r21
    a796:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a79a:	90 93 f9 0d 	sts	0x0DF9, r25
	shot->shared.vy = 0;
    a79e:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7a2:	20 93 0f 0e 	sts	0x0E0F, r18
	shot->hit_count = damage;
    a7a6:	20 93 10 0e 	sts	0x0E10, r18
	shot->shot_speed = speed;
    a7aa:	90 93 12 0e 	sts	0x0E12, r25
	shot->y_delta = y_delta;
    a7ae:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a7b2:	80 93 15 0e 	sts	0x0E15, r24
	shot->anim.frames_per_anim = 1;
    a7b6:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.anims = anim;
    a7ba:	67 e4       	ldi	r22, 0x47	; 71
    a7bc:	70 e1       	ldi	r23, 0x10	; 16
    a7be:	70 93 1b 0e 	sts	0x0E1B, r23
    a7c2:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->anim.anims[0] = (char*) map;
    a7c6:	50 93 48 10 	sts	0x1048, r21
    a7ca:	40 93 47 10 	sts	0x1047, r20
	shot->shared.vx = speed;
    a7ce:	90 93 0d 0e 	sts	0x0E0D, r25
    a7d2:	56 c0       	rjmp	.+172    	; 0xa880 <init_player_shot+0x2b8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a7d4:	86 30       	cpi	r24, 0x06	; 6
    a7d6:	09 f0       	breq	.+2      	; 0xa7da <init_player_shot+0x212>
    a7d8:	58 c0       	rjmp	.+176    	; 0xa88a <init_player_shot+0x2c2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7da:	33 e0       	ldi	r19, 0x03	; 3
    a7dc:	30 93 e7 0d 	sts	0x0DE7, r19
	shot->hit_count = damage;
    a7e0:	22 e0       	ldi	r18, 0x02	; 2
    a7e2:	20 93 e8 0d 	sts	0x0DE8, r18
	shot->shot_speed = speed;
    a7e6:	8f e7       	ldi	r24, 0x7F	; 127
    a7e8:	80 93 ea 0d 	sts	0x0DEA, r24
	shot->y_delta = y_delta;
    a7ec:	98 ef       	ldi	r25, 0xF8	; 248
    a7ee:	90 93 eb 0d 	sts	0x0DEB, r25
	shot->anim.anim_count = 1;
    a7f2:	91 e0       	ldi	r25, 0x01	; 1
    a7f4:	90 93 ed 0d 	sts	0x0DED, r25
	shot->anim.frames_per_anim = 1;
    a7f8:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.anims = anim;
    a7fc:	46 e8       	ldi	r20, 0x86	; 134
    a7fe:	5d e0       	ldi	r21, 0x0D	; 13
    a800:	50 93 f3 0d 	sts	0x0DF3, r21
    a804:	40 93 f2 0d 	sts	0x0DF2, r20
	shot->anim.anims[0] = (char*) map;
    a808:	44 eb       	ldi	r20, 0xB4	; 180
    a80a:	56 e3       	ldi	r21, 0x36	; 54
    a80c:	50 93 87 0d 	sts	0x0D87, r21
    a810:	40 93 86 0d 	sts	0x0D86, r20
	shot->shared.vx = speed;
    a814:	80 93 e5 0d 	sts	0x0DE5, r24
	shot->shared.vy = 0;
    a818:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a81c:	30 93 fb 0d 	sts	0x0DFB, r19
	shot->hit_count = damage;
    a820:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->shot_speed = speed;
    a824:	80 93 fe 0d 	sts	0x0DFE, r24
	shot->y_delta = y_delta;
    a828:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a82c:	90 93 01 0e 	sts	0x0E01, r25
	shot->anim.frames_per_anim = 1;
    a830:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.anims = anim;
    a834:	67 e3       	ldi	r22, 0x37	; 55
    a836:	70 e1       	ldi	r23, 0x10	; 16
    a838:	70 93 07 0e 	sts	0x0E07, r23
    a83c:	60 93 06 0e 	sts	0x0E06, r22
	shot->anim.anims[0] = (char*) map;
    a840:	50 93 38 10 	sts	0x1038, r21
    a844:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a848:	80 93 f9 0d 	sts	0x0DF9, r24
	shot->shared.vy = 0;
    a84c:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a850:	30 93 0f 0e 	sts	0x0E0F, r19
	shot->hit_count = damage;
    a854:	20 93 10 0e 	sts	0x0E10, r18
	shot->shot_speed = speed;
    a858:	80 93 12 0e 	sts	0x0E12, r24
	shot->y_delta = y_delta;
    a85c:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a860:	90 93 15 0e 	sts	0x0E15, r25
	shot->anim.frames_per_anim = 1;
    a864:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.anims = anim;
    a868:	67 e4       	ldi	r22, 0x47	; 71
    a86a:	70 e1       	ldi	r23, 0x10	; 16
    a86c:	70 93 1b 0e 	sts	0x0E1B, r23
    a870:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->anim.anims[0] = (char*) map;
    a874:	50 93 48 10 	sts	0x1048, r21
    a878:	40 93 47 10 	sts	0x1047, r20
	shot->shared.vx = speed;
    a87c:	80 93 0d 0e 	sts	0x0E0D, r24
	shot->shared.vy = 0;
    a880:	10 92 0c 0e 	sts	0x0E0C, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a884:	20 93 de 0d 	sts	0x0DDE, r18
    a888:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a88a:	88 30       	cpi	r24, 0x08	; 8
    a88c:	09 f0       	breq	.+2      	; 0xa890 <init_player_shot+0x2c8>
    a88e:	5b c0       	rjmp	.+182    	; 0xa946 <init_player_shot+0x37e>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a890:	33 e0       	ldi	r19, 0x03	; 3
    a892:	30 93 e7 0d 	sts	0x0DE7, r19
	shot->hit_count = damage;
    a896:	42 e0       	ldi	r20, 0x02	; 2
    a898:	40 93 e8 0d 	sts	0x0DE8, r20
	shot->shot_speed = speed;
    a89c:	2f e7       	ldi	r18, 0x7F	; 127
    a89e:	20 93 ea 0d 	sts	0x0DEA, r18
	shot->y_delta = y_delta;
    a8a2:	98 ef       	ldi	r25, 0xF8	; 248
    a8a4:	90 93 eb 0d 	sts	0x0DEB, r25
	shot->anim.anim_count = 1;
    a8a8:	91 e0       	ldi	r25, 0x01	; 1
    a8aa:	90 93 ed 0d 	sts	0x0DED, r25
	shot->anim.frames_per_anim = 1;
    a8ae:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.anims = anim;
    a8b2:	66 e8       	ldi	r22, 0x86	; 134
    a8b4:	7d e0       	ldi	r23, 0x0D	; 13
    a8b6:	70 93 f3 0d 	sts	0x0DF3, r23
    a8ba:	60 93 f2 0d 	sts	0x0DF2, r22
	shot->anim.anims[0] = (char*) map;
    a8be:	64 eb       	ldi	r22, 0xB4	; 180
    a8c0:	76 e3       	ldi	r23, 0x36	; 54
    a8c2:	70 93 87 0d 	sts	0x0D87, r23
    a8c6:	60 93 86 0d 	sts	0x0D86, r22
	shot->shared.vx = speed;
    a8ca:	20 93 e5 0d 	sts	0x0DE5, r18
	shot->shared.vy = 0;
    a8ce:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a8d2:	90 93 fb 0d 	sts	0x0DFB, r25
	shot->hit_count = damage;
    a8d6:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->shot_speed = speed;
    a8da:	54 e6       	ldi	r21, 0x64	; 100
    a8dc:	50 93 fe 0d 	sts	0x0DFE, r21
	shot->y_delta = y_delta;
    a8e0:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a8e4:	90 93 01 0e 	sts	0x0E01, r25
	shot->anim.frames_per_anim = 1;
    a8e8:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.anims = anim;
    a8ec:	e7 e3       	ldi	r30, 0x37	; 55
    a8ee:	f0 e1       	ldi	r31, 0x10	; 16
    a8f0:	f0 93 07 0e 	sts	0x0E07, r31
    a8f4:	e0 93 06 0e 	sts	0x0E06, r30
	shot->anim.anims[0] = (char*) map;
    a8f8:	ee ea       	ldi	r30, 0xAE	; 174
    a8fa:	f6 e3       	ldi	r31, 0x36	; 54
    a8fc:	f0 93 38 10 	sts	0x1038, r31
    a900:	e0 93 37 10 	sts	0x1037, r30
	shot->shared.vx = speed;
    a904:	50 93 f9 0d 	sts	0x0DF9, r21
	shot->shared.vy = 0;
    a908:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a90c:	30 93 0f 0e 	sts	0x0E0F, r19
	shot->hit_count = damage;
    a910:	40 93 10 0e 	sts	0x0E10, r20
	shot->shot_speed = speed;
    a914:	20 93 12 0e 	sts	0x0E12, r18
	shot->y_delta = y_delta;
    a918:	80 93 13 0e 	sts	0x0E13, r24
	shot->anim.anim_count = 1;
    a91c:	90 93 15 0e 	sts	0x0E15, r25
	shot->anim.frames_per_anim = 1;
    a920:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.anims = anim;
    a924:	87 e4       	ldi	r24, 0x47	; 71
    a926:	90 e1       	ldi	r25, 0x10	; 16
    a928:	90 93 1b 0e 	sts	0x0E1B, r25
    a92c:	80 93 1a 0e 	sts	0x0E1A, r24
	shot->anim.anims[0] = (char*) map;
    a930:	70 93 48 10 	sts	0x1048, r23
    a934:	60 93 47 10 	sts	0x1047, r22
	shot->shared.vx = speed;
    a938:	20 93 0d 0e 	sts	0x0E0D, r18
	shot->shared.vy = 0;
    a93c:	10 92 0c 0e 	sts	0x0E0C, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a940:	30 93 de 0d 	sts	0x0DDE, r19
    a944:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a946:	55 e0       	ldi	r21, 0x05	; 5
    a948:	50 93 e7 0d 	sts	0x0DE7, r21
	shot->hit_count = damage;
    a94c:	42 e0       	ldi	r20, 0x02	; 2
    a94e:	40 93 e8 0d 	sts	0x0DE8, r20
	shot->shot_speed = speed;
    a952:	9f e7       	ldi	r25, 0x7F	; 127
    a954:	90 93 ea 0d 	sts	0x0DEA, r25
	shot->y_delta = y_delta;
    a958:	10 92 eb 0d 	sts	0x0DEB, r1
	shot->anim.anim_count = 1;
    a95c:	81 e0       	ldi	r24, 0x01	; 1
    a95e:	80 93 ed 0d 	sts	0x0DED, r24
	shot->anim.frames_per_anim = 1;
    a962:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims = anim;
    a966:	26 e8       	ldi	r18, 0x86	; 134
    a968:	3d e0       	ldi	r19, 0x0D	; 13
    a96a:	30 93 f3 0d 	sts	0x0DF3, r19
    a96e:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->anim.anims[0] = (char*) map;
    a972:	2b ea       	ldi	r18, 0xAB	; 171
    a974:	36 e3       	ldi	r19, 0x36	; 54
    a976:	30 93 87 0d 	sts	0x0D87, r19
    a97a:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a97e:	90 93 e5 0d 	sts	0x0DE5, r25
	shot->shared.vy = 0;
    a982:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a986:	50 93 fb 0d 	sts	0x0DFB, r21
	shot->hit_count = damage;
    a98a:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->shot_speed = speed;
    a98e:	90 93 fe 0d 	sts	0x0DFE, r25
	shot->y_delta = y_delta;
    a992:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a996:	80 93 01 0e 	sts	0x0E01, r24
	shot->anim.frames_per_anim = 1;
    a99a:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.anims = anim;
    a99e:	47 e3       	ldi	r20, 0x37	; 55
    a9a0:	50 e1       	ldi	r21, 0x10	; 16
    a9a2:	50 93 07 0e 	sts	0x0E07, r21
    a9a6:	40 93 06 0e 	sts	0x0E06, r20
	shot->anim.anims[0] = (char*) map;
    a9aa:	30 93 38 10 	sts	0x1038, r19
    a9ae:	20 93 37 10 	sts	0x1037, r18
	shot->shared.vx = speed;
    a9b2:	90 93 f9 0d 	sts	0x0DF9, r25
	shot->shared.vy = 0;
    a9b6:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a9ba:	26 e0       	ldi	r18, 0x06	; 6
    a9bc:	20 93 0f 0e 	sts	0x0E0F, r18
	shot->hit_count = damage;
    a9c0:	24 e0       	ldi	r18, 0x04	; 4
    a9c2:	20 93 10 0e 	sts	0x0E10, r18
	shot->shot_speed = speed;
    a9c6:	90 93 12 0e 	sts	0x0E12, r25
	shot->y_delta = y_delta;
    a9ca:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a9ce:	80 93 15 0e 	sts	0x0E15, r24
	shot->anim.frames_per_anim = 1;
    a9d2:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.anims = anim;
    a9d6:	27 e4       	ldi	r18, 0x47	; 71
    a9d8:	30 e1       	ldi	r19, 0x10	; 16
    a9da:	30 93 1b 0e 	sts	0x0E1B, r19
    a9de:	20 93 1a 0e 	sts	0x0E1A, r18
	shot->anim.anims[0] = (char*) map;
    a9e2:	28 ea       	ldi	r18, 0xA8	; 168
    a9e4:	36 e3       	ldi	r19, 0x36	; 54
    a9e6:	30 93 48 10 	sts	0x1048, r19
    a9ea:	20 93 47 10 	sts	0x1047, r18
	shot->shared.vx = speed;
    a9ee:	90 93 0d 0e 	sts	0x0E0D, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a9f2:	90 93 0c 0e 	sts	0x0E0C, r25
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a9f6:	80 93 de 0d 	sts	0x0DDE, r24
    a9fa:	08 95       	ret

0000a9fc <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a9fc:	81 11       	cpse	r24, r1
    a9fe:	52 c0       	rjmp	.+164    	; 0xaaa4 <init_boss_shot+0xa8>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa00:	81 e0       	ldi	r24, 0x01	; 1
    aa02:	80 93 62 0e 	sts	0x0E62, r24
	shot->hit_count = damage;
    aa06:	42 e0       	ldi	r20, 0x02	; 2
    aa08:	40 93 63 0e 	sts	0x0E63, r20
	shot->shot_speed = speed;
    aa0c:	94 e6       	ldi	r25, 0x64	; 100
    aa0e:	90 93 65 0e 	sts	0x0E65, r25
	shot->y_delta = y_delta;
    aa12:	10 92 66 0e 	sts	0x0E66, r1
	shot->anim.anim_count = 1;
    aa16:	80 93 68 0e 	sts	0x0E68, r24
	shot->anim.frames_per_anim = 1;
    aa1a:	80 93 69 0e 	sts	0x0E69, r24
	shot->anim.anims = anim;
    aa1e:	21 ed       	ldi	r18, 0xD1	; 209
    aa20:	3f e0       	ldi	r19, 0x0F	; 15
    aa22:	30 93 6e 0e 	sts	0x0E6E, r19
    aa26:	20 93 6d 0e 	sts	0x0E6D, r18
	shot->anim.anims[0] = (char*) map;
    aa2a:	2e ea       	ldi	r18, 0xAE	; 174
    aa2c:	36 e3       	ldi	r19, 0x36	; 54
    aa2e:	30 93 d2 0f 	sts	0x0FD2, r19
    aa32:	20 93 d1 0f 	sts	0x0FD1, r18
	shot->shared.vx = speed;
    aa36:	90 93 60 0e 	sts	0x0E60, r25
	shot->shared.vy = 0;
    aa3a:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa3e:	80 93 76 0e 	sts	0x0E76, r24
	shot->hit_count = damage;
    aa42:	40 93 77 0e 	sts	0x0E77, r20
	shot->shot_speed = speed;
    aa46:	90 93 79 0e 	sts	0x0E79, r25
	shot->y_delta = y_delta;
    aa4a:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    aa4e:	80 93 7c 0e 	sts	0x0E7C, r24
	shot->anim.frames_per_anim = 1;
    aa52:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->anim.anims = anim;
    aa56:	6b e4       	ldi	r22, 0x4B	; 75
    aa58:	70 e1       	ldi	r23, 0x10	; 16
    aa5a:	70 93 82 0e 	sts	0x0E82, r23
    aa5e:	60 93 81 0e 	sts	0x0E81, r22
	shot->anim.anims[0] = (char*) map;
    aa62:	30 93 4c 10 	sts	0x104C, r19
    aa66:	20 93 4b 10 	sts	0x104B, r18
	shot->shared.vx = speed;
    aa6a:	90 93 74 0e 	sts	0x0E74, r25
	shot->shared.vy = 0;
    aa6e:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa72:	80 93 8a 0e 	sts	0x0E8A, r24
	shot->hit_count = damage;
    aa76:	40 93 8b 0e 	sts	0x0E8B, r20
	shot->shot_speed = speed;
    aa7a:	90 93 8d 0e 	sts	0x0E8D, r25
	shot->y_delta = y_delta;
    aa7e:	10 92 8e 0e 	sts	0x0E8E, r1
	shot->anim.anim_count = 1;
    aa82:	80 93 90 0e 	sts	0x0E90, r24
	shot->anim.frames_per_anim = 1;
    aa86:	80 93 91 0e 	sts	0x0E91, r24
	shot->anim.anims = anim;
    aa8a:	4d e2       	ldi	r20, 0x2D	; 45
    aa8c:	50 e1       	ldi	r21, 0x10	; 16
    aa8e:	50 93 96 0e 	sts	0x0E96, r21
    aa92:	40 93 95 0e 	sts	0x0E95, r20
	shot->anim.anims[0] = (char*) map;
    aa96:	30 93 2e 10 	sts	0x102E, r19
    aa9a:	20 93 2d 10 	sts	0x102D, r18
	shot->shared.vx = speed;
    aa9e:	90 93 88 0e 	sts	0x0E88, r25
    aaa2:	58 c0       	rjmp	.+176    	; 0xab54 <init_boss_shot+0x158>
		init_shot(&game.boss.shot[0], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    aaa4:	82 30       	cpi	r24, 0x02	; 2
    aaa6:	09 f0       	breq	.+2      	; 0xaaaa <init_boss_shot+0xae>
    aaa8:	58 c0       	rjmp	.+176    	; 0xab5a <init_boss_shot+0x15e>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aaaa:	94 e0       	ldi	r25, 0x04	; 4
    aaac:	90 93 62 0e 	sts	0x0E62, r25
	shot->hit_count = damage;
    aab0:	91 e0       	ldi	r25, 0x01	; 1
    aab2:	90 93 63 0e 	sts	0x0E63, r25
	shot->shot_speed = speed;
    aab6:	2f e7       	ldi	r18, 0x7F	; 127
    aab8:	20 93 65 0e 	sts	0x0E65, r18
	shot->y_delta = y_delta;
    aabc:	38 ef       	ldi	r19, 0xF8	; 248
    aabe:	30 93 66 0e 	sts	0x0E66, r19
	shot->anim.anim_count = 1;
    aac2:	90 93 68 0e 	sts	0x0E68, r25
	shot->anim.frames_per_anim = 1;
    aac6:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.anims = anim;
    aaca:	41 ed       	ldi	r20, 0xD1	; 209
    aacc:	5f e0       	ldi	r21, 0x0F	; 15
    aace:	50 93 6e 0e 	sts	0x0E6E, r21
    aad2:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    aad6:	41 eb       	ldi	r20, 0xB1	; 177
    aad8:	56 e3       	ldi	r21, 0x36	; 54
    aada:	50 93 d2 0f 	sts	0x0FD2, r21
    aade:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    aae2:	20 93 60 0e 	sts	0x0E60, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    aae6:	31 e8       	ldi	r19, 0x81	; 129
    aae8:	30 93 5f 0e 	sts	0x0E5F, r19
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aaec:	80 93 76 0e 	sts	0x0E76, r24
	shot->hit_count = damage;
    aaf0:	80 93 77 0e 	sts	0x0E77, r24
	shot->shot_speed = speed;
    aaf4:	20 93 79 0e 	sts	0x0E79, r18
	shot->y_delta = y_delta;
    aaf8:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    aafc:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->anim.frames_per_anim = 1;
    ab00:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.anims = anim;
    ab04:	4b e4       	ldi	r20, 0x4B	; 75
    ab06:	50 e1       	ldi	r21, 0x10	; 16
    ab08:	50 93 82 0e 	sts	0x0E82, r21
    ab0c:	40 93 81 0e 	sts	0x0E81, r20
	shot->anim.anims[0] = (char*) map;
    ab10:	45 ea       	ldi	r20, 0xA5	; 165
    ab12:	56 e3       	ldi	r21, 0x36	; 54
    ab14:	50 93 4c 10 	sts	0x104C, r21
    ab18:	40 93 4b 10 	sts	0x104B, r20
	shot->shared.vx = speed;
    ab1c:	20 93 74 0e 	sts	0x0E74, r18
	shot->shared.vy = 0;
    ab20:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab24:	80 93 8a 0e 	sts	0x0E8A, r24
	shot->hit_count = damage;
    ab28:	80 93 8b 0e 	sts	0x0E8B, r24
	shot->shot_speed = speed;
    ab2c:	20 93 8d 0e 	sts	0x0E8D, r18
	shot->y_delta = y_delta;
    ab30:	10 92 8e 0e 	sts	0x0E8E, r1
	shot->anim.anim_count = 1;
    ab34:	90 93 90 0e 	sts	0x0E90, r25
	shot->anim.frames_per_anim = 1;
    ab38:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.anims = anim;
    ab3c:	6d e2       	ldi	r22, 0x2D	; 45
    ab3e:	70 e1       	ldi	r23, 0x10	; 16
    ab40:	70 93 96 0e 	sts	0x0E96, r23
    ab44:	60 93 95 0e 	sts	0x0E95, r22
	shot->anim.anims[0] = (char*) map;
    ab48:	50 93 2e 10 	sts	0x102E, r21
    ab4c:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    ab50:	20 93 88 0e 	sts	0x0E88, r18
	shot->shared.vy = 0;
    ab54:	10 92 87 0e 	sts	0x0E87, r1
    ab58:	0f c1       	rjmp	.+542    	; 0xad78 <init_boss_shot+0x37c>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    ab5a:	84 30       	cpi	r24, 0x04	; 4
    ab5c:	09 f0       	breq	.+2      	; 0xab60 <init_boss_shot+0x164>
    ab5e:	54 c0       	rjmp	.+168    	; 0xac08 <init_boss_shot+0x20c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab60:	33 e0       	ldi	r19, 0x03	; 3
    ab62:	30 93 62 0e 	sts	0x0E62, r19
	shot->hit_count = damage;
    ab66:	22 e0       	ldi	r18, 0x02	; 2
    ab68:	20 93 63 0e 	sts	0x0E63, r18
	shot->shot_speed = speed;
    ab6c:	8f e7       	ldi	r24, 0x7F	; 127
    ab6e:	80 93 65 0e 	sts	0x0E65, r24
	shot->y_delta = y_delta;
    ab72:	98 ef       	ldi	r25, 0xF8	; 248
    ab74:	90 93 66 0e 	sts	0x0E66, r25
	shot->anim.anim_count = 1;
    ab78:	91 e0       	ldi	r25, 0x01	; 1
    ab7a:	90 93 68 0e 	sts	0x0E68, r25
	shot->anim.frames_per_anim = 1;
    ab7e:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.anims = anim;
    ab82:	41 ed       	ldi	r20, 0xD1	; 209
    ab84:	5f e0       	ldi	r21, 0x0F	; 15
    ab86:	50 93 6e 0e 	sts	0x0E6E, r21
    ab8a:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    ab8e:	44 eb       	ldi	r20, 0xB4	; 180
    ab90:	56 e3       	ldi	r21, 0x36	; 54
    ab92:	50 93 d2 0f 	sts	0x0FD2, r21
    ab96:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    ab9a:	80 93 60 0e 	sts	0x0E60, r24
	shot->shared.vy = 0;
    ab9e:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aba2:	30 93 76 0e 	sts	0x0E76, r19
	shot->hit_count = damage;
    aba6:	20 93 77 0e 	sts	0x0E77, r18
	shot->shot_speed = speed;
    abaa:	80 93 79 0e 	sts	0x0E79, r24
	shot->y_delta = y_delta;
    abae:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    abb2:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->anim.frames_per_anim = 1;
    abb6:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.anims = anim;
    abba:	6b e4       	ldi	r22, 0x4B	; 75
    abbc:	70 e1       	ldi	r23, 0x10	; 16
    abbe:	70 93 82 0e 	sts	0x0E82, r23
    abc2:	60 93 81 0e 	sts	0x0E81, r22
	shot->anim.anims[0] = (char*) map;
    abc6:	50 93 4c 10 	sts	0x104C, r21
    abca:	40 93 4b 10 	sts	0x104B, r20
	shot->shared.vx = speed;
    abce:	80 93 74 0e 	sts	0x0E74, r24
	shot->shared.vy = 0;
    abd2:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    abd6:	30 93 8a 0e 	sts	0x0E8A, r19
	shot->hit_count = damage;
    abda:	20 93 8b 0e 	sts	0x0E8B, r18
	shot->shot_speed = speed;
    abde:	80 93 8d 0e 	sts	0x0E8D, r24
	shot->y_delta = y_delta;
    abe2:	10 92 8e 0e 	sts	0x0E8E, r1
	shot->anim.anim_count = 1;
    abe6:	90 93 90 0e 	sts	0x0E90, r25
	shot->anim.frames_per_anim = 1;
    abea:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.anims = anim;
    abee:	6d e2       	ldi	r22, 0x2D	; 45
    abf0:	70 e1       	ldi	r23, 0x10	; 16
    abf2:	70 93 96 0e 	sts	0x0E96, r23
    abf6:	60 93 95 0e 	sts	0x0E95, r22
	shot->anim.anims[0] = (char*) map;
    abfa:	50 93 2e 10 	sts	0x102E, r21
    abfe:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    ac02:	80 93 88 0e 	sts	0x0E88, r24
    ac06:	5a c0       	rjmp	.+180    	; 0xacbc <init_boss_shot+0x2c0>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    ac08:	86 30       	cpi	r24, 0x06	; 6
    ac0a:	09 f0       	breq	.+2      	; 0xac0e <init_boss_shot+0x212>
    ac0c:	5c c0       	rjmp	.+184    	; 0xacc6 <init_boss_shot+0x2ca>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac0e:	23 e0       	ldi	r18, 0x03	; 3
    ac10:	20 93 62 0e 	sts	0x0E62, r18
	shot->hit_count = damage;
    ac14:	32 e0       	ldi	r19, 0x02	; 2
    ac16:	30 93 63 0e 	sts	0x0E63, r19
	shot->shot_speed = speed;
    ac1a:	9f e7       	ldi	r25, 0x7F	; 127
    ac1c:	90 93 65 0e 	sts	0x0E65, r25
	shot->y_delta = y_delta;
    ac20:	88 ef       	ldi	r24, 0xF8	; 248
    ac22:	80 93 66 0e 	sts	0x0E66, r24
	shot->anim.anim_count = 1;
    ac26:	81 e0       	ldi	r24, 0x01	; 1
    ac28:	80 93 68 0e 	sts	0x0E68, r24
	shot->anim.frames_per_anim = 1;
    ac2c:	80 93 69 0e 	sts	0x0E69, r24
	shot->anim.anims = anim;
    ac30:	41 ed       	ldi	r20, 0xD1	; 209
    ac32:	5f e0       	ldi	r21, 0x0F	; 15
    ac34:	50 93 6e 0e 	sts	0x0E6E, r21
    ac38:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    ac3c:	44 eb       	ldi	r20, 0xB4	; 180
    ac3e:	56 e3       	ldi	r21, 0x36	; 54
    ac40:	50 93 d2 0f 	sts	0x0FD2, r21
    ac44:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    ac48:	90 93 60 0e 	sts	0x0E60, r25
	shot->shared.vy = 0;
    ac4c:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac50:	80 93 76 0e 	sts	0x0E76, r24
	shot->hit_count = damage;
    ac54:	30 93 77 0e 	sts	0x0E77, r19
	shot->shot_speed = speed;
    ac58:	64 e6       	ldi	r22, 0x64	; 100
    ac5a:	60 93 79 0e 	sts	0x0E79, r22
	shot->y_delta = y_delta;
    ac5e:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    ac62:	80 93 7c 0e 	sts	0x0E7C, r24
	shot->anim.frames_per_anim = 1;
    ac66:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->anim.anims = anim;
    ac6a:	eb e4       	ldi	r30, 0x4B	; 75
    ac6c:	f0 e1       	ldi	r31, 0x10	; 16
    ac6e:	f0 93 82 0e 	sts	0x0E82, r31
    ac72:	e0 93 81 0e 	sts	0x0E81, r30
	shot->anim.anims[0] = (char*) map;
    ac76:	ee ea       	ldi	r30, 0xAE	; 174
    ac78:	f6 e3       	ldi	r31, 0x36	; 54
    ac7a:	f0 93 4c 10 	sts	0x104C, r31
    ac7e:	e0 93 4b 10 	sts	0x104B, r30
	shot->shared.vx = speed;
    ac82:	60 93 74 0e 	sts	0x0E74, r22
	shot->shared.vy = 0;
    ac86:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac8a:	20 93 8a 0e 	sts	0x0E8A, r18
	shot->hit_count = damage;
    ac8e:	30 93 8b 0e 	sts	0x0E8B, r19
	shot->shot_speed = speed;
    ac92:	90 93 8d 0e 	sts	0x0E8D, r25
	shot->y_delta = y_delta;
    ac96:	38 e0       	ldi	r19, 0x08	; 8
    ac98:	30 93 8e 0e 	sts	0x0E8E, r19
	shot->anim.anim_count = 1;
    ac9c:	80 93 90 0e 	sts	0x0E90, r24
	shot->anim.frames_per_anim = 1;
    aca0:	80 93 91 0e 	sts	0x0E91, r24
	shot->anim.anims = anim;
    aca4:	6d e2       	ldi	r22, 0x2D	; 45
    aca6:	70 e1       	ldi	r23, 0x10	; 16
    aca8:	70 93 96 0e 	sts	0x0E96, r23
    acac:	60 93 95 0e 	sts	0x0E95, r22
	shot->anim.anims[0] = (char*) map;
    acb0:	50 93 2e 10 	sts	0x102E, r21
    acb4:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    acb8:	90 93 88 0e 	sts	0x0E88, r25
	shot->shared.vy = 0;
    acbc:	10 92 87 0e 	sts	0x0E87, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    acc0:	20 93 59 0e 	sts	0x0E59, r18
    acc4:	08 95       	ret
	}
	else if (level == 8) // Dessert
    acc6:	88 30       	cpi	r24, 0x08	; 8
    acc8:	09 f0       	breq	.+2      	; 0xaccc <init_boss_shot+0x2d0>
    acca:	58 c0       	rjmp	.+176    	; 0xad7c <init_boss_shot+0x380>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    accc:	22 e0       	ldi	r18, 0x02	; 2
    acce:	20 93 62 0e 	sts	0x0E62, r18
	shot->hit_count = damage;
    acd2:	20 93 63 0e 	sts	0x0E63, r18
	shot->shot_speed = speed;
    acd6:	3f e7       	ldi	r19, 0x7F	; 127
    acd8:	30 93 65 0e 	sts	0x0E65, r19
	shot->y_delta = y_delta;
    acdc:	98 ef       	ldi	r25, 0xF8	; 248
    acde:	90 93 66 0e 	sts	0x0E66, r25
	shot->anim.anim_count = 1;
    ace2:	91 e0       	ldi	r25, 0x01	; 1
    ace4:	90 93 68 0e 	sts	0x0E68, r25
	shot->anim.frames_per_anim = 1;
    ace8:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.anims = anim;
    acec:	41 ed       	ldi	r20, 0xD1	; 209
    acee:	5f e0       	ldi	r21, 0x0F	; 15
    acf0:	50 93 6e 0e 	sts	0x0E6E, r21
    acf4:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    acf8:	45 ea       	ldi	r20, 0xA5	; 165
    acfa:	56 e3       	ldi	r21, 0x36	; 54
    acfc:	50 93 d2 0f 	sts	0x0FD2, r21
    ad00:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    ad04:	30 93 60 0e 	sts	0x0E60, r19
	shot->shared.vy = 0;
    ad08:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad0c:	20 93 76 0e 	sts	0x0E76, r18
	shot->hit_count = damage;
    ad10:	20 93 77 0e 	sts	0x0E77, r18
	shot->shot_speed = speed;
    ad14:	64 e6       	ldi	r22, 0x64	; 100
    ad16:	60 93 79 0e 	sts	0x0E79, r22
	shot->y_delta = y_delta;
    ad1a:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    ad1e:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->anim.frames_per_anim = 1;
    ad22:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.anims = anim;
    ad26:	eb e4       	ldi	r30, 0x4B	; 75
    ad28:	f0 e1       	ldi	r31, 0x10	; 16
    ad2a:	f0 93 82 0e 	sts	0x0E82, r31
    ad2e:	e0 93 81 0e 	sts	0x0E81, r30
	shot->anim.anims[0] = (char*) map;
    ad32:	50 93 4c 10 	sts	0x104C, r21
    ad36:	40 93 4b 10 	sts	0x104B, r20
	shot->shared.vx = speed;
    ad3a:	60 93 74 0e 	sts	0x0E74, r22
	shot->shared.vy = 0;
    ad3e:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad42:	20 93 8a 0e 	sts	0x0E8A, r18
	shot->hit_count = damage;
    ad46:	20 93 8b 0e 	sts	0x0E8B, r18
	shot->shot_speed = speed;
    ad4a:	30 93 8d 0e 	sts	0x0E8D, r19
	shot->y_delta = y_delta;
    ad4e:	80 93 8e 0e 	sts	0x0E8E, r24
	shot->anim.anim_count = 1;
    ad52:	90 93 90 0e 	sts	0x0E90, r25
	shot->anim.frames_per_anim = 1;
    ad56:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.anims = anim;
    ad5a:	8d e2       	ldi	r24, 0x2D	; 45
    ad5c:	90 e1       	ldi	r25, 0x10	; 16
    ad5e:	90 93 96 0e 	sts	0x0E96, r25
    ad62:	80 93 95 0e 	sts	0x0E95, r24
	shot->anim.anims[0] = (char*) map;
    ad66:	50 93 2e 10 	sts	0x102E, r21
    ad6a:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    ad6e:	30 93 88 0e 	sts	0x0E88, r19
	shot->shared.vy = 0;
    ad72:	10 92 87 0e 	sts	0x0E87, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    ad76:	83 e0       	ldi	r24, 0x03	; 3
    ad78:	80 93 59 0e 	sts	0x0E59, r24
    ad7c:	08 95       	ret

0000ad7e <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    ad7e:	10 92 c4 0e 	sts	0x0EC4, r1
    ad82:	10 92 c3 0e 	sts	0x0EC3, r1
	p->pressed = 0;
    ad86:	10 92 c0 0e 	sts	0x0EC0, r1
    ad8a:	10 92 bf 0e 	sts	0x0EBF, r1
	p->released = 0;
    ad8e:	10 92 c2 0e 	sts	0x0EC2, r1
    ad92:	10 92 c1 0e 	sts	0x0EC1, r1
	p->held_cycles = 0;
    ad96:	10 92 c5 0e 	sts	0x0EC5, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	if (is_space())
    ad9a:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    ad9e:	88 23       	and	r24, r24
    ada0:	f9 f0       	breq	.+62     	; 0xade0 <init_boss_state+0x62>
	{
		game.boss.width = 3;
    ada2:	83 e0       	ldi	r24, 0x03	; 3
    ada4:	80 93 56 0e 	sts	0x0E56, r24
		game.boss.height = 1;
    ada8:	81 e0       	ldi	r24, 0x01	; 1
    adaa:	80 93 57 0e 	sts	0x0E57, r24
		game.boss.run.anim_count = 2;
    adae:	82 e0       	ldi	r24, 0x02	; 2
    adb0:	80 93 a0 0e 	sts	0x0EA0, r24
		game.boss.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    adb4:	85 e0       	ldi	r24, 0x05	; 5
    adb6:	80 93 a1 0e 	sts	0x0EA1, r24
		game.boss.run.anims = boss_run_anim;
    adba:	88 e8       	ldi	r24, 0x88	; 136
    adbc:	9d e0       	ldi	r25, 0x0D	; 13
    adbe:	90 93 a6 0e 	sts	0x0EA6, r25
    adc2:	80 93 a5 0e 	sts	0x0EA5, r24
		game.boss.run.anims[0] = (char*) map_hero_ship_0;
    adc6:	80 ed       	ldi	r24, 0xD0	; 208
    adc8:	96 e3       	ldi	r25, 0x36	; 54
    adca:	90 93 89 0d 	sts	0x0D89, r25
    adce:	80 93 88 0d 	sts	0x0D88, r24
		game.boss.run.anims[1] = (char*) map_hero_ship_1;
    add2:	8b ec       	ldi	r24, 0xCB	; 203
    add4:	96 e3       	ldi	r25, 0x36	; 54
    add6:	90 93 8b 0d 	sts	0x0D8B, r25
    adda:	80 93 8a 0d 	sts	0x0D8A, r24
    adde:	2a c0       	rjmp	.+84     	; 0xae34 <init_boss_state+0xb6>
	}
	else
	{
		game.boss.width = 2;
    ade0:	82 e0       	ldi	r24, 0x02	; 2
    ade2:	80 93 56 0e 	sts	0x0E56, r24
		game.boss.height = 3;
    ade6:	83 e0       	ldi	r24, 0x03	; 3
    ade8:	80 93 57 0e 	sts	0x0E57, r24
		game.boss.run.anim_count = 4;
    adec:	84 e0       	ldi	r24, 0x04	; 4
    adee:	80 93 a0 0e 	sts	0x0EA0, r24
		game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    adf2:	8c e0       	ldi	r24, 0x0C	; 12
    adf4:	80 93 a1 0e 	sts	0x0EA1, r24
		game.boss.run.anims = boss_run_anim;
    adf8:	88 e8       	ldi	r24, 0x88	; 136
    adfa:	9d e0       	ldi	r25, 0x0D	; 13
    adfc:	90 93 a6 0e 	sts	0x0EA6, r25
    ae00:	80 93 a5 0e 	sts	0x0EA5, r24
		game.boss.run.anims[0] = (char*) map_ahero_step_0;
    ae04:	85 e9       	ldi	r24, 0x95	; 149
    ae06:	96 e3       	ldi	r25, 0x36	; 54
    ae08:	90 93 89 0d 	sts	0x0D89, r25
    ae0c:	80 93 88 0d 	sts	0x0D88, r24
		game.boss.run.anims[1] = (char*) map_ahero_step_1;
    ae10:	8d e8       	ldi	r24, 0x8D	; 141
    ae12:	96 e3       	ldi	r25, 0x36	; 54
    ae14:	90 93 8b 0d 	sts	0x0D8B, r25
    ae18:	80 93 8a 0d 	sts	0x0D8A, r24
		game.boss.run.anims[2] = (char*) map_ahero_step_2;
    ae1c:	85 e8       	ldi	r24, 0x85	; 133
    ae1e:	96 e3       	ldi	r25, 0x36	; 54
    ae20:	90 93 8d 0d 	sts	0x0D8D, r25
    ae24:	80 93 8c 0d 	sts	0x0D8C, r24
		game.boss.run.anims[3] = (char*) map_ahero_step_3;
    ae28:	8d e7       	ldi	r24, 0x7D	; 125
    ae2a:	96 e3       	ldi	r25, 0x36	; 54
    ae2c:	90 93 8f 0d 	sts	0x0D8F, r25
    ae30:	80 93 8e 0d 	sts	0x0D8E, r24
	}
	game.boss.active = 0;
    ae34:	10 92 58 0e 	sts	0x0E58, r1
	game.boss.direction = D_RIGHT;
    ae38:	81 e0       	ldi	r24, 0x01	; 1
    ae3a:	80 93 55 0e 	sts	0x0E55, r24
	game.boss.flags = IDLE;
    ae3e:	98 e0       	ldi	r25, 0x08	; 8
    ae40:	90 93 53 0e 	sts	0x0E53, r25
	game.boss.ai_flags = AI_NOT_READY;
    ae44:	10 92 54 0e 	sts	0x0E54, r1
	game.boss.shield = BOSS_SHIELD;
    ae48:	9a e0       	ldi	r25, 0x0A	; 10
    ae4a:	90 93 5a 0e 	sts	0x0E5A, r25
	game.boss.idle.anim_count = 1;
    ae4e:	80 93 98 0e 	sts	0x0E98, r24
	game.boss.idle.frames_per_anim = 1;
    ae52:	80 93 99 0e 	sts	0x0E99, r24
	game.boss.idle.anims = boss_idle_anim;
    ae56:	29 e4       	ldi	r18, 0x49	; 73
    ae58:	30 e1       	ldi	r19, 0x10	; 16
    ae5a:	30 93 9e 0e 	sts	0x0E9E, r19
    ae5e:	20 93 9d 0e 	sts	0x0E9D, r18
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    ae62:	2d e9       	ldi	r18, 0x9D	; 157
    ae64:	36 e3       	ldi	r19, 0x36	; 54
    ae66:	30 93 4a 10 	sts	0x104A, r19
    ae6a:	20 93 49 10 	sts	0x1049, r18
	
	game.boss.jump.anim_count = 1;
    ae6e:	80 93 a8 0e 	sts	0x0EA8, r24
	game.boss.jump.frames_per_anim = 1;
    ae72:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.jump.anims = boss_jump_anim;
    ae76:	89 e3       	ldi	r24, 0x39	; 57
    ae78:	90 e1       	ldi	r25, 0x10	; 16
    ae7a:	90 93 ae 0e 	sts	0x0EAE, r25
    ae7e:	80 93 ad 0e 	sts	0x0EAD, r24
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    ae82:	85 e7       	ldi	r24, 0x75	; 117
    ae84:	96 e3       	ldi	r25, 0x36	; 54
    ae86:	90 93 3a 10 	sts	0x103A, r25
    ae8a:	80 93 39 10 	sts	0x1039, r24
	
	game.boss.expl.anim_count = 3;
    ae8e:	83 e0       	ldi	r24, 0x03	; 3
    ae90:	80 93 b8 0e 	sts	0x0EB8, r24
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ae94:	85 e0       	ldi	r24, 0x05	; 5
    ae96:	80 93 b9 0e 	sts	0x0EB9, r24
	game.boss.expl.anims = expl_anim;
    ae9a:	81 e4       	ldi	r24, 0x41	; 65
    ae9c:	90 e1       	ldi	r25, 0x10	; 16
    ae9e:	90 93 be 0e 	sts	0x0EBE, r25
    aea2:	80 93 bd 0e 	sts	0x0EBD, r24
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    aea6:	8f e1       	ldi	r24, 0x1F	; 31
    aea8:	97 e3       	ldi	r25, 0x37	; 55
    aeaa:	90 93 42 10 	sts	0x1042, r25
    aeae:	80 93 41 10 	sts	0x1041, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    aeb2:	8c e1       	ldi	r24, 0x1C	; 28
    aeb4:	97 e3       	ldi	r25, 0x37	; 55
    aeb6:	90 93 44 10 	sts	0x1044, r25
    aeba:	80 93 43 10 	sts	0x1043, r24
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    aebe:	89 e1       	ldi	r24, 0x19	; 25
    aec0:	97 e3       	ldi	r25, 0x37	; 55
    aec2:	90 93 46 10 	sts	0x1046, r25
    aec6:	80 93 45 10 	sts	0x1045, r24
	
	init_boss_shot(game.current_level_index);
    aeca:	80 91 c7 0d 	lds	r24, 0x0DC7
    aece:	0c 94 fe 54 	jmp	0xa9fc	; 0xa9fc <init_boss_shot>

0000aed2 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    aed2:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    aed6:	88 23       	and	r24, r24
    aed8:	f9 f0       	breq	.+62     	; 0xaf18 <init_player_state+0x46>
	{
		game.player.width = 3;
    aeda:	83 e0       	ldi	r24, 0x03	; 3
    aedc:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 1;
    aee0:	81 e0       	ldi	r24, 0x01	; 1
    aee2:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 2;
    aee6:	82 e0       	ldi	r24, 0x02	; 2
    aee8:	80 93 25 0e 	sts	0x0E25, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    aeec:	85 e0       	ldi	r24, 0x05	; 5
    aeee:	80 93 26 0e 	sts	0x0E26, r24
		game.player.run.anims = run_anim;
    aef2:	8f e2       	ldi	r24, 0x2F	; 47
    aef4:	90 e1       	ldi	r25, 0x10	; 16
    aef6:	90 93 2b 0e 	sts	0x0E2B, r25
    aefa:	80 93 2a 0e 	sts	0x0E2A, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    aefe:	80 ed       	ldi	r24, 0xD0	; 208
    af00:	96 e3       	ldi	r25, 0x36	; 54
    af02:	90 93 30 10 	sts	0x1030, r25
    af06:	80 93 2f 10 	sts	0x102F, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    af0a:	8b ec       	ldi	r24, 0xCB	; 203
    af0c:	96 e3       	ldi	r25, 0x36	; 54
    af0e:	90 93 32 10 	sts	0x1032, r25
    af12:	80 93 31 10 	sts	0x1031, r24
    af16:	2a c0       	rjmp	.+84     	; 0xaf6c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    af18:	82 e0       	ldi	r24, 0x02	; 2
    af1a:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 3;
    af1e:	83 e0       	ldi	r24, 0x03	; 3
    af20:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 4;
    af24:	84 e0       	ldi	r24, 0x04	; 4
    af26:	80 93 25 0e 	sts	0x0E25, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    af2a:	8c e0       	ldi	r24, 0x0C	; 12
    af2c:	80 93 26 0e 	sts	0x0E26, r24
		game.player.run.anims = run_anim;
    af30:	8f e2       	ldi	r24, 0x2F	; 47
    af32:	90 e1       	ldi	r25, 0x10	; 16
    af34:	90 93 2b 0e 	sts	0x0E2B, r25
    af38:	80 93 2a 0e 	sts	0x0E2A, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    af3c:	8a ef       	ldi	r24, 0xFA	; 250
    af3e:	96 e3       	ldi	r25, 0x36	; 54
    af40:	90 93 30 10 	sts	0x1030, r25
    af44:	80 93 2f 10 	sts	0x102F, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    af48:	82 ef       	ldi	r24, 0xF2	; 242
    af4a:	96 e3       	ldi	r25, 0x36	; 54
    af4c:	90 93 32 10 	sts	0x1032, r25
    af50:	80 93 31 10 	sts	0x1031, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    af54:	8a ee       	ldi	r24, 0xEA	; 234
    af56:	96 e3       	ldi	r25, 0x36	; 54
    af58:	90 93 34 10 	sts	0x1034, r25
    af5c:	80 93 33 10 	sts	0x1033, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    af60:	82 ee       	ldi	r24, 0xE2	; 226
    af62:	96 e3       	ldi	r25, 0x36	; 54
    af64:	90 93 36 10 	sts	0x1036, r25
    af68:	80 93 35 10 	sts	0x1035, r24
	}
	game.player.active = 1;
    af6c:	81 e0       	ldi	r24, 0x01	; 1
    af6e:	80 93 dd 0d 	sts	0x0DDD, r24
	game.player.direction = D_RIGHT;
    af72:	80 93 da 0d 	sts	0x0DDA, r24
	game.player.flags = IDLE;
    af76:	98 e0       	ldi	r25, 0x08	; 8
    af78:	90 93 d8 0d 	sts	0x0DD8, r25
	game.player.ai_flags = AI_NOT_READY;
    af7c:	10 92 d9 0d 	sts	0x0DD9, r1
	game.player.shield = PLAYER_SHIELD;
    af80:	9a e0       	ldi	r25, 0x0A	; 10
    af82:	90 93 df 0d 	sts	0x0DDF, r25
	game.player.idle.anim_count = 1;
    af86:	80 93 1d 0e 	sts	0x0E1D, r24
	game.player.idle.frames_per_anim = 1;
    af8a:	80 93 1e 0e 	sts	0x0E1E, r24
	game.player.idle.anims = idle_anim;
    af8e:	2f e4       	ldi	r18, 0x4F	; 79
    af90:	30 e1       	ldi	r19, 0x10	; 16
    af92:	30 93 23 0e 	sts	0x0E23, r19
    af96:	20 93 22 0e 	sts	0x0E22, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    af9a:	22 e0       	ldi	r18, 0x02	; 2
    af9c:	37 e3       	ldi	r19, 0x37	; 55
    af9e:	30 93 50 10 	sts	0x1050, r19
    afa2:	20 93 4f 10 	sts	0x104F, r18
	
	game.player.jump.anim_count = 1;
    afa6:	80 93 2d 0e 	sts	0x0E2D, r24
	game.player.jump.frames_per_anim = 1;
    afaa:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.jump.anims = jump_anim;
    afae:	20 e9       	ldi	r18, 0x90	; 144
    afb0:	3d e0       	ldi	r19, 0x0D	; 13
    afb2:	30 93 33 0e 	sts	0x0E33, r19
    afb6:	20 93 32 0e 	sts	0x0E32, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    afba:	2a ed       	ldi	r18, 0xDA	; 218
    afbc:	36 e3       	ldi	r19, 0x36	; 54
    afbe:	30 93 91 0d 	sts	0x0D91, r19
    afc2:	20 93 90 0d 	sts	0x0D90, r18
	
	game.player.prone.anim_count = 1;
    afc6:	80 93 35 0e 	sts	0x0E35, r24
	game.player.prone.frames_per_anim = 1;
    afca:	80 93 36 0e 	sts	0x0E36, r24
	game.player.prone.anims = prone_anim;
    afce:	83 ed       	ldi	r24, 0xD3	; 211
    afd0:	9f e0       	ldi	r25, 0x0F	; 15
    afd2:	90 93 3b 0e 	sts	0x0E3B, r25
    afd6:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    afda:	85 ed       	ldi	r24, 0xD5	; 213
    afdc:	96 e3       	ldi	r25, 0x36	; 54
    afde:	90 93 d4 0f 	sts	0x0FD4, r25
    afe2:	80 93 d3 0f 	sts	0x0FD3, r24
	
	game.player.expl.anim_count = 3;
    afe6:	83 e0       	ldi	r24, 0x03	; 3
    afe8:	80 93 3d 0e 	sts	0x0E3D, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    afec:	85 e0       	ldi	r24, 0x05	; 5
    afee:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.expl.anims = expl_anim;
    aff2:	81 e4       	ldi	r24, 0x41	; 65
    aff4:	90 e1       	ldi	r25, 0x10	; 16
    aff6:	90 93 43 0e 	sts	0x0E43, r25
    affa:	80 93 42 0e 	sts	0x0E42, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    affe:	8f e1       	ldi	r24, 0x1F	; 31
    b000:	97 e3       	ldi	r25, 0x37	; 55
    b002:	90 93 42 10 	sts	0x1042, r25
    b006:	80 93 41 10 	sts	0x1041, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    b00a:	8c e1       	ldi	r24, 0x1C	; 28
    b00c:	97 e3       	ldi	r25, 0x37	; 55
    b00e:	90 93 44 10 	sts	0x1044, r25
    b012:	80 93 43 10 	sts	0x1043, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    b016:	89 e1       	ldi	r24, 0x19	; 25
    b018:	97 e3       	ldi	r25, 0x37	; 55
    b01a:	90 93 46 10 	sts	0x1046, r25
    b01e:	80 93 45 10 	sts	0x1045, r24
	
	init_player_shot(game.current_level_index);
    b022:	80 91 c7 0d 	lds	r24, 0x0DC7
    b026:	0c 94 e4 52 	jmp	0xa5c8	; 0xa5c8 <init_player_shot>

0000b02a <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
	game.enemies[i].expl.anim_count = 3;
    b02a:	a8 2f       	mov	r26, r24
    b02c:	b0 e0       	ldi	r27, 0x00	; 0
    b02e:	25 e3       	ldi	r18, 0x35	; 53
    b030:	82 9f       	mul	r24, r18
    b032:	c0 01       	movw	r24, r0
    b034:	11 24       	eor	r1, r1
    b036:	8e 54       	subi	r24, 0x4E	; 78
    b038:	92 4f       	sbci	r25, 0xF2	; 242
    b03a:	fc 01       	movw	r30, r24
    b03c:	ee 5b       	subi	r30, 0xBE	; 190
    b03e:	fe 4f       	sbci	r31, 0xFE	; 254
    b040:	23 e0       	ldi	r18, 0x03	; 3
    b042:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b044:	31 96       	adiw	r30, 0x01	; 1
    b046:	25 e0       	ldi	r18, 0x05	; 5
    b048:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    b04a:	34 96       	adiw	r30, 0x04	; 4
    b04c:	21 e4       	ldi	r18, 0x41	; 65
    b04e:	30 e1       	ldi	r19, 0x10	; 16
    b050:	31 83       	std	Z+1, r19	; 0x01
    b052:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    b054:	2f e1       	ldi	r18, 0x1F	; 31
    b056:	37 e3       	ldi	r19, 0x37	; 55
    b058:	30 93 42 10 	sts	0x1042, r19
    b05c:	20 93 41 10 	sts	0x1041, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    b060:	2c e1       	ldi	r18, 0x1C	; 28
    b062:	37 e3       	ldi	r19, 0x37	; 55
    b064:	30 93 44 10 	sts	0x1044, r19
    b068:	20 93 43 10 	sts	0x1043, r18
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    b06c:	29 e1       	ldi	r18, 0x19	; 25
    b06e:	37 e3       	ldi	r19, 0x37	; 55
    b070:	30 93 46 10 	sts	0x1046, r19
    b074:	20 93 45 10 	sts	0x1045, r18
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    b078:	7a 97       	sbiw	r30, 0x1a	; 26
    b07a:	21 e0       	ldi	r18, 0x01	; 1
    b07c:	20 83       	st	Z, r18
		game.enemies[i].shot[j].active = 0;
    b07e:	31 96       	adiw	r30, 0x01	; 1
    b080:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    b082:	32 97       	sbiw	r30, 0x02	; 2
    b084:	37 e0       	ldi	r19, 0x07	; 7
    b086:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anim_count = 1;
    b088:	36 96       	adiw	r30, 0x06	; 6
    b08a:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    b08c:	31 96       	adiw	r30, 0x01	; 1
    b08e:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    b090:	34 96       	adiw	r30, 0x04	; 4
    b092:	2b e3       	ldi	r18, 0x3B	; 59
    b094:	30 e1       	ldi	r19, 0x10	; 16
    b096:	31 83       	std	Z+1, r19	; 0x01
    b098:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    b09a:	22 e7       	ldi	r18, 0x72	; 114
    b09c:	36 e3       	ldi	r19, 0x36	; 54
    b09e:	30 93 3c 10 	sts	0x103C, r19
    b0a2:	20 93 3b 10 	sts	0x103B, r18
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    b0a6:	38 97       	sbiw	r30, 0x08	; 8
    b0a8:	20 e5       	ldi	r18, 0x50	; 80
    b0aa:	20 83       	st	Z, r18
		if (game.enemies[i].enemy_type == ENEMY_DRONE)
    b0ac:	3f 97       	sbiw	r30, 0x0f	; 15
    b0ae:	30 81       	ld	r19, Z
    b0b0:	3a 96       	adiw	r30, 0x0a	; 10
    b0b2:	34 30       	cpi	r19, 0x04	; 4
    b0b4:	11 f4       	brne	.+4      	; 0xb0ba <init_enemy_shot+0x90>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    b0b6:	82 ee       	ldi	r24, 0xE2	; 226
    b0b8:	03 c0       	rjmp	.+6      	; 0xb0c0 <init_enemy_shot+0x96>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    b0ba:	35 30       	cpi	r19, 0x05	; 5
    b0bc:	19 f4       	brne	.+6      	; 0xb0c4 <init_enemy_shot+0x9a>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    b0be:	8a e0       	ldi	r24, 0x0A	; 10
    b0c0:	80 83       	st	Z, r24
    b0c2:	01 c0       	rjmp	.+2      	; 0xb0c6 <init_enemy_shot+0x9c>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    b0c4:	20 83       	st	Z, r18
		}
		game.enemies[i].shot[j].shared.vy = 0;
    b0c6:	25 e3       	ldi	r18, 0x35	; 53
    b0c8:	2a 9f       	mul	r18, r26
    b0ca:	c0 01       	movw	r24, r0
    b0cc:	2b 9f       	mul	r18, r27
    b0ce:	90 0d       	add	r25, r0
    b0d0:	11 24       	eor	r1, r1
    b0d2:	8e 54       	subi	r24, 0x4E	; 78
    b0d4:	92 4f       	sbci	r25, 0xF2	; 242
    b0d6:	fc 01       	movw	r30, r24
    b0d8:	e7 5d       	subi	r30, 0xD7	; 215
    b0da:	fe 4f       	sbci	r31, 0xFE	; 254
    b0dc:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    b0de:	34 97       	sbiw	r30, 0x04	; 4
    b0e0:	71 83       	std	Z+1, r23	; 0x01
    b0e2:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    b0e4:	32 96       	adiw	r30, 0x02	; 2
    b0e6:	51 83       	std	Z+1, r21	; 0x01
    b0e8:	40 83       	st	Z, r20
    b0ea:	08 95       	ret

0000b0ec <init_enemy_spider>:
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b0ec:	95 e3       	ldi	r25, 0x35	; 53
    b0ee:	89 9f       	mul	r24, r25
    b0f0:	90 01       	movw	r18, r0
    b0f2:	11 24       	eor	r1, r1
    b0f4:	2e 54       	subi	r18, 0x4E	; 78
    b0f6:	32 4f       	sbci	r19, 0xF2	; 242
    b0f8:	f9 01       	movw	r30, r18
    b0fa:	e5 5e       	subi	r30, 0xE5	; 229
    b0fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b0fe:	91 e0       	ldi	r25, 0x01	; 1
    b100:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b102:	32 96       	adiw	r30, 0x02	; 2
    b104:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    b106:	31 97       	sbiw	r30, 0x01	; 1
    b108:	a8 e0       	ldi	r26, 0x08	; 8
    b10a:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    b10c:	32 96       	adiw	r30, 0x02	; 2
    b10e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b110:	31 96       	adiw	r30, 0x01	; 1
    b112:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    b114:	31 96       	adiw	r30, 0x01	; 1
    b116:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    b118:	31 96       	adiw	r30, 0x01	; 1
    b11a:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b11c:	31 96       	adiw	r30, 0x01	; 1
    b11e:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    b120:	32 96       	adiw	r30, 0x02	; 2
    b122:	92 e0       	ldi	r25, 0x02	; 2
    b124:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    b126:	76 96       	adiw	r30, 0x16	; 22
    b128:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    b12a:	31 96       	adiw	r30, 0x01	; 1
    b12c:	9a e0       	ldi	r25, 0x0A	; 10
    b12e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    b130:	d9 01       	movw	r26, r18
    b132:	a1 5c       	subi	r26, 0xC1	; 193
    b134:	be 4f       	sbci	r27, 0xFE	; 254
    b136:	e5 ed       	ldi	r30, 0xD5	; 213
    b138:	ff e0       	ldi	r31, 0x0F	; 15
    b13a:	ed 93       	st	X+, r30
    b13c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    b13e:	ac e6       	ldi	r26, 0x6C	; 108
    b140:	b6 e3       	ldi	r27, 0x36	; 54
    b142:	b1 83       	std	Z+1, r27	; 0x01
    b144:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    b146:	a9 e6       	ldi	r26, 0x69	; 105
    b148:	b6 e3       	ldi	r27, 0x36	; 54
    b14a:	b3 83       	std	Z+3, r27	; 0x03
    b14c:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    b14e:	f9 01       	movw	r30, r18
    b150:	e6 5e       	subi	r30, 0xE6	; 230
    b152:	fe 4f       	sbci	r31, 0xFE	; 254
    b154:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b156:	31 97       	sbiw	r30, 0x01	; 1
    b158:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b15a:	31 97       	sbiw	r30, 0x01	; 1
    b15c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b15e:	34 97       	sbiw	r30, 0x04	; 4
    b160:	71 83       	std	Z+1, r23	; 0x01
    b162:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b164:	32 96       	adiw	r30, 0x02	; 2
    b166:	51 83       	std	Z+1, r21	; 0x01
    b168:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b16a:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <init_enemy_shot>

0000b16e <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b16e:	95 e3       	ldi	r25, 0x35	; 53
    b170:	89 9f       	mul	r24, r25
    b172:	90 01       	movw	r18, r0
    b174:	11 24       	eor	r1, r1
    b176:	2e 54       	subi	r18, 0x4E	; 78
    b178:	32 4f       	sbci	r19, 0xF2	; 242
    b17a:	f9 01       	movw	r30, r18
    b17c:	e5 5e       	subi	r30, 0xE5	; 229
    b17e:	fe 4f       	sbci	r31, 0xFE	; 254
    b180:	91 e0       	ldi	r25, 0x01	; 1
    b182:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b184:	32 96       	adiw	r30, 0x02	; 2
    b186:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b188:	31 96       	adiw	r30, 0x01	; 1
    b18a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b18c:	31 96       	adiw	r30, 0x01	; 1
    b18e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    b190:	31 96       	adiw	r30, 0x01	; 1
    b192:	a3 e0       	ldi	r26, 0x03	; 3
    b194:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b196:	31 96       	adiw	r30, 0x01	; 1
    b198:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b19a:	31 96       	adiw	r30, 0x01	; 1
    b19c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    b19e:	32 96       	adiw	r30, 0x02	; 2
    b1a0:	a2 e0       	ldi	r26, 0x02	; 2
    b1a2:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b1a4:	76 96       	adiw	r30, 0x16	; 22
    b1a6:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b1a8:	31 96       	adiw	r30, 0x01	; 1
    b1aa:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b1ac:	d9 01       	movw	r26, r18
    b1ae:	a1 5c       	subi	r26, 0xC1	; 193
    b1b0:	be 4f       	sbci	r27, 0xFE	; 254
    b1b2:	eb e2       	ldi	r30, 0x2B	; 43
    b1b4:	f0 e1       	ldi	r31, 0x10	; 16
    b1b6:	ed 93       	st	X+, r30
    b1b8:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    b1ba:	a3 e6       	ldi	r26, 0x63	; 99
    b1bc:	b6 e3       	ldi	r27, 0x36	; 54
    b1be:	b1 83       	std	Z+1, r27	; 0x01
    b1c0:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b1c2:	f9 01       	movw	r30, r18
    b1c4:	e6 5e       	subi	r30, 0xE6	; 230
    b1c6:	fe 4f       	sbci	r31, 0xFE	; 254
    b1c8:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b1ca:	31 97       	sbiw	r30, 0x01	; 1
    b1cc:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b1ce:	31 97       	sbiw	r30, 0x01	; 1
    b1d0:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b1d2:	34 97       	sbiw	r30, 0x04	; 4
    b1d4:	71 83       	std	Z+1, r23	; 0x01
    b1d6:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b1d8:	32 96       	adiw	r30, 0x02	; 2
    b1da:	51 83       	std	Z+1, r21	; 0x01
    b1dc:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b1de:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <init_enemy_shot>

0000b1e2 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b1e2:	95 e3       	ldi	r25, 0x35	; 53
    b1e4:	89 9f       	mul	r24, r25
    b1e6:	90 01       	movw	r18, r0
    b1e8:	11 24       	eor	r1, r1
    b1ea:	2e 54       	subi	r18, 0x4E	; 78
    b1ec:	32 4f       	sbci	r19, 0xF2	; 242
    b1ee:	f9 01       	movw	r30, r18
    b1f0:	e5 5e       	subi	r30, 0xE5	; 229
    b1f2:	fe 4f       	sbci	r31, 0xFE	; 254
    b1f4:	91 e0       	ldi	r25, 0x01	; 1
    b1f6:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b1f8:	32 96       	adiw	r30, 0x02	; 2
    b1fa:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b1fc:	31 96       	adiw	r30, 0x01	; 1
    b1fe:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b200:	31 96       	adiw	r30, 0x01	; 1
    b202:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    b204:	31 96       	adiw	r30, 0x01	; 1
    b206:	a4 e0       	ldi	r26, 0x04	; 4
    b208:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b20a:	31 96       	adiw	r30, 0x01	; 1
    b20c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b20e:	31 96       	adiw	r30, 0x01	; 1
    b210:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    b212:	32 96       	adiw	r30, 0x02	; 2
    b214:	a2 e0       	ldi	r26, 0x02	; 2
    b216:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b218:	76 96       	adiw	r30, 0x16	; 22
    b21a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b21c:	31 96       	adiw	r30, 0x01	; 1
    b21e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    b220:	d9 01       	movw	r26, r18
    b222:	a1 5c       	subi	r26, 0xC1	; 193
    b224:	be 4f       	sbci	r27, 0xFE	; 254
    b226:	ef e3       	ldi	r30, 0x3F	; 63
    b228:	f0 e1       	ldi	r31, 0x10	; 16
    b22a:	ed 93       	st	X+, r30
    b22c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    b22e:	a0 e6       	ldi	r26, 0x60	; 96
    b230:	b6 e3       	ldi	r27, 0x36	; 54
    b232:	b1 83       	std	Z+1, r27	; 0x01
    b234:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b236:	f9 01       	movw	r30, r18
    b238:	e6 5e       	subi	r30, 0xE6	; 230
    b23a:	fe 4f       	sbci	r31, 0xFE	; 254
    b23c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    b23e:	31 97       	sbiw	r30, 0x01	; 1
    b240:	92 ee       	ldi	r25, 0xE2	; 226
    b242:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b244:	31 97       	sbiw	r30, 0x01	; 1
    b246:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b248:	34 97       	sbiw	r30, 0x04	; 4
    b24a:	71 83       	std	Z+1, r23	; 0x01
    b24c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b24e:	32 96       	adiw	r30, 0x02	; 2
    b250:	51 83       	std	Z+1, r21	; 0x01
    b252:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b254:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <init_enemy_shot>

0000b258 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b258:	95 e3       	ldi	r25, 0x35	; 53
    b25a:	89 9f       	mul	r24, r25
    b25c:	90 01       	movw	r18, r0
    b25e:	11 24       	eor	r1, r1
    b260:	2e 54       	subi	r18, 0x4E	; 78
    b262:	32 4f       	sbci	r19, 0xF2	; 242
    b264:	f9 01       	movw	r30, r18
    b266:	e5 5e       	subi	r30, 0xE5	; 229
    b268:	fe 4f       	sbci	r31, 0xFE	; 254
    b26a:	91 e0       	ldi	r25, 0x01	; 1
    b26c:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b26e:	33 96       	adiw	r30, 0x03	; 3
    b270:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b272:	31 96       	adiw	r30, 0x01	; 1
    b274:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    b276:	31 96       	adiw	r30, 0x01	; 1
    b278:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    b27a:	31 96       	adiw	r30, 0x01	; 1
    b27c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b27e:	31 96       	adiw	r30, 0x01	; 1
    b280:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    b282:	32 96       	adiw	r30, 0x02	; 2
    b284:	a4 e0       	ldi	r26, 0x04	; 4
    b286:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b288:	76 96       	adiw	r30, 0x16	; 22
    b28a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b28c:	31 96       	adiw	r30, 0x01	; 1
    b28e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    b290:	d9 01       	movw	r26, r18
    b292:	a1 5c       	subi	r26, 0xC1	; 193
    b294:	be 4f       	sbci	r27, 0xFE	; 254
    b296:	e9 ed       	ldi	r30, 0xD9	; 217
    b298:	ff e0       	ldi	r31, 0x0F	; 15
    b29a:	ed 93       	st	X+, r30
    b29c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    b29e:	af e6       	ldi	r26, 0x6F	; 111
    b2a0:	b6 e3       	ldi	r27, 0x36	; 54
    b2a2:	b1 83       	std	Z+1, r27	; 0x01
    b2a4:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b2a6:	f9 01       	movw	r30, r18
    b2a8:	e6 5e       	subi	r30, 0xE6	; 230
    b2aa:	fe 4f       	sbci	r31, 0xFE	; 254
    b2ac:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    b2ae:	31 97       	sbiw	r30, 0x01	; 1
    b2b0:	9e e1       	ldi	r25, 0x1E	; 30
    b2b2:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b2b4:	31 97       	sbiw	r30, 0x01	; 1
    b2b6:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b2b8:	34 97       	sbiw	r30, 0x04	; 4
    b2ba:	71 83       	std	Z+1, r23	; 0x01
    b2bc:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b2be:	32 96       	adiw	r30, 0x02	; 2
    b2c0:	51 83       	std	Z+1, r21	; 0x01
    b2c2:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b2c4:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <init_enemy_shot>

0000b2c8 <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b2c8:	95 e3       	ldi	r25, 0x35	; 53
    b2ca:	89 9f       	mul	r24, r25
    b2cc:	90 01       	movw	r18, r0
    b2ce:	11 24       	eor	r1, r1
    b2d0:	2e 54       	subi	r18, 0x4E	; 78
    b2d2:	32 4f       	sbci	r19, 0xF2	; 242
    b2d4:	f9 01       	movw	r30, r18
    b2d6:	e5 5e       	subi	r30, 0xE5	; 229
    b2d8:	fe 4f       	sbci	r31, 0xFE	; 254
    b2da:	91 e0       	ldi	r25, 0x01	; 1
    b2dc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b2de:	33 96       	adiw	r30, 0x03	; 3
    b2e0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b2e2:	31 96       	adiw	r30, 0x01	; 1
    b2e4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    b2e6:	31 96       	adiw	r30, 0x01	; 1
    b2e8:	a5 e0       	ldi	r26, 0x05	; 5
    b2ea:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b2ec:	31 96       	adiw	r30, 0x01	; 1
    b2ee:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b2f0:	31 96       	adiw	r30, 0x01	; 1
    b2f2:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    b2f4:	32 96       	adiw	r30, 0x02	; 2
    b2f6:	a4 e0       	ldi	r26, 0x04	; 4
    b2f8:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b2fa:	76 96       	adiw	r30, 0x16	; 22
    b2fc:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b2fe:	31 96       	adiw	r30, 0x01	; 1
    b300:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    b302:	d9 01       	movw	r26, r18
    b304:	a1 5c       	subi	r26, 0xC1	; 193
    b306:	be 4f       	sbci	r27, 0xFE	; 254
    b308:	ed e3       	ldi	r30, 0x3D	; 61
    b30a:	f0 e1       	ldi	r31, 0x10	; 16
    b30c:	ed 93       	st	X+, r30
    b30e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    b310:	a6 e6       	ldi	r26, 0x66	; 102
    b312:	b6 e3       	ldi	r27, 0x36	; 54
    b314:	b1 83       	std	Z+1, r27	; 0x01
    b316:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b318:	f9 01       	movw	r30, r18
    b31a:	e6 5e       	subi	r30, 0xE6	; 230
    b31c:	fe 4f       	sbci	r31, 0xFE	; 254
    b31e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    b320:	31 97       	sbiw	r30, 0x01	; 1
    b322:	9a e0       	ldi	r25, 0x0A	; 10
    b324:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b326:	31 97       	sbiw	r30, 0x01	; 1
    b328:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b32a:	34 97       	sbiw	r30, 0x04	; 4
    b32c:	71 83       	std	Z+1, r23	; 0x01
    b32e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b330:	32 96       	adiw	r30, 0x02	; 2
    b332:	51 83       	std	Z+1, r21	; 0x01
    b334:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b336:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <init_enemy_shot>

0000b33a <init_enemy_level_hazard>:
}

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b33a:	a8 2f       	mov	r26, r24
    b33c:	b0 e0       	ldi	r27, 0x00	; 0
    b33e:	25 e3       	ldi	r18, 0x35	; 53
    b340:	82 9f       	mul	r24, r18
    b342:	c0 01       	movw	r24, r0
    b344:	11 24       	eor	r1, r1
    b346:	8e 54       	subi	r24, 0x4E	; 78
    b348:	92 4f       	sbci	r25, 0xF2	; 242
    b34a:	fc 01       	movw	r30, r24
    b34c:	e5 5e       	subi	r30, 0xE5	; 229
    b34e:	fe 4f       	sbci	r31, 0xFE	; 254
    b350:	21 e0       	ldi	r18, 0x01	; 1
    b352:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    b354:	33 96       	adiw	r30, 0x03	; 3
    b356:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    b358:	31 96       	adiw	r30, 0x01	; 1
    b35a:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    b35c:	31 96       	adiw	r30, 0x01	; 1
    b35e:	32 e0       	ldi	r19, 0x02	; 2
    b360:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    b362:	31 96       	adiw	r30, 0x01	; 1
    b364:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b366:	31 96       	adiw	r30, 0x01	; 1
    b368:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    b36a:	78 96       	adiw	r30, 0x18	; 24
    b36c:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    b36e:	31 96       	adiw	r30, 0x01	; 1
    b370:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    b372:	34 96       	adiw	r30, 0x04	; 4
    b374:	8d e4       	ldi	r24, 0x4D	; 77
    b376:	90 e1       	ldi	r25, 0x10	; 16
    b378:	91 83       	std	Z+1, r25	; 0x01
    b37a:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b37c:	80 91 c7 0d 	lds	r24, 0x0DC7
    b380:	84 30       	cpi	r24, 0x04	; 4
    b382:	79 f0       	breq	.+30     	; 0xb3a2 <init_enemy_level_hazard+0x68>
    b384:	38 f4       	brcc	.+14     	; 0xb394 <init_enemy_level_hazard+0x5a>
    b386:	88 23       	and	r24, r24
    b388:	91 f0       	breq	.+36     	; 0xb3ae <init_enemy_level_hazard+0x74>
    b38a:	82 30       	cpi	r24, 0x02	; 2
    b38c:	81 f4       	brne	.+32     	; 0xb3ae <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b38e:	81 e5       	ldi	r24, 0x51	; 81
    b390:	96 e3       	ldi	r25, 0x36	; 54
    b392:	0f c0       	rjmp	.+30     	; 0xb3b2 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b394:	86 30       	cpi	r24, 0x06	; 6
    b396:	41 f0       	breq	.+16     	; 0xb3a8 <init_enemy_level_hazard+0x6e>
    b398:	88 30       	cpi	r24, 0x08	; 8
    b39a:	49 f4       	brne	.+18     	; 0xb3ae <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b39c:	88 e4       	ldi	r24, 0x48	; 72
    b39e:	96 e3       	ldi	r25, 0x36	; 54
    b3a0:	08 c0       	rjmp	.+16     	; 0xb3b2 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b3a2:	8e e4       	ldi	r24, 0x4E	; 78
    b3a4:	96 e3       	ldi	r25, 0x36	; 54
    b3a6:	05 c0       	rjmp	.+10     	; 0xb3b2 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b3a8:	8b e4       	ldi	r24, 0x4B	; 75
    b3aa:	96 e3       	ldi	r25, 0x36	; 54
    b3ac:	02 c0       	rjmp	.+4      	; 0xb3b2 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b3ae:	84 e5       	ldi	r24, 0x54	; 84
    b3b0:	96 e3       	ldi	r25, 0x36	; 54
    b3b2:	90 93 4e 10 	sts	0x104E, r25
    b3b6:	80 93 4d 10 	sts	0x104D, r24
	}
	game.enemies[i].shared.gravity = 0;
    b3ba:	25 e3       	ldi	r18, 0x35	; 53
    b3bc:	2a 9f       	mul	r18, r26
    b3be:	c0 01       	movw	r24, r0
    b3c0:	2b 9f       	mul	r18, r27
    b3c2:	90 0d       	add	r25, r0
    b3c4:	11 24       	eor	r1, r1
    b3c6:	8e 54       	subi	r24, 0x4E	; 78
    b3c8:	92 4f       	sbci	r25, 0xF2	; 242
    b3ca:	fc 01       	movw	r30, r24
    b3cc:	e6 5e       	subi	r30, 0xE6	; 230
    b3ce:	fe 4f       	sbci	r31, 0xFE	; 254
    b3d0:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b3d2:	32 97       	sbiw	r30, 0x02	; 2
    b3d4:	28 e2       	ldi	r18, 0x28	; 40
    b3d6:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b3d8:	31 96       	adiw	r30, 0x01	; 1
    b3da:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b3dc:	35 97       	sbiw	r30, 0x05	; 5
    b3de:	71 83       	std	Z+1, r23	; 0x01
    b3e0:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b3e2:	32 96       	adiw	r30, 0x02	; 2
    b3e4:	51 83       	std	Z+1, r21	; 0x01
    b3e6:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b3e8:	3d 96       	adiw	r30, 0x0d	; 13
    b3ea:	83 e0       	ldi	r24, 0x03	; 3
    b3ec:	56 95       	lsr	r21
    b3ee:	47 95       	ror	r20
    b3f0:	8a 95       	dec	r24
    b3f2:	e1 f7       	brne	.-8      	; 0xb3ec <init_enemy_level_hazard+0xb2>
    b3f4:	40 83       	st	Z, r20
    b3f6:	08 95       	ret

0000b3f8 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b3f8:	cf 93       	push	r28
    b3fa:	df 93       	push	r29
    b3fc:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b3fe:	bc 01       	movw	r22, r24
    b400:	88 81       	ld	r24, Y
    b402:	99 81       	ldd	r25, Y+1	; 0x01
    b404:	0e 94 a5 42 	call	0x854a	; 0x854a <EepromReadBlock>
	if (status == 0x03)
    b408:	83 30       	cpi	r24, 0x03	; 3
    b40a:	29 f4       	brne	.+10     	; 0xb416 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b40c:	ce 01       	movw	r24, r28
	}
}
    b40e:	df 91       	pop	r29
    b410:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b412:	0c 94 5b 42 	jmp	0x84b6	; 0x84b6 <EepromWriteBlock>
	}
}
    b416:	df 91       	pop	r29
    b418:	cf 91       	pop	r28
    b41a:	08 95       	ret

0000b41c <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b41c:	1f 93       	push	r17
    b41e:	cf 93       	push	r28
    b420:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b422:	d0 e0       	ldi	r29, 0x00	; 0
    b424:	10 e2       	ldi	r17, 0x20	; 32
    b426:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b428:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b42a:	c1 17       	cp	r28, r17
    b42c:	41 f0       	breq	.+16     	; 0xb43e <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b42e:	40 e0       	ldi	r20, 0x00	; 0
    b430:	50 e0       	ldi	r21, 0x00	; 0
    b432:	6c 2f       	mov	r22, r28
    b434:	8d 2f       	mov	r24, r29
    b436:	0e 94 ea 40 	call	0x81d4	; 0x81d4 <SetTile>
    b43a:	cf 5f       	subi	r28, 0xFF	; 255
    b43c:	f6 cf       	rjmp	.-20     	; 0xb42a <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b43e:	df 5f       	subi	r29, 0xFF	; 255
    b440:	dc 31       	cpi	r29, 0x1C	; 28
    b442:	91 f7       	brne	.-28     	; 0xb428 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b444:	df 91       	pop	r29
    b446:	cf 91       	pop	r28
    b448:	1f 91       	pop	r17
    b44a:	08 95       	ret

0000b44c <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b44c:	dc 01       	movw	r26, r24
    b44e:	e6 2f       	mov	r30, r22
    b450:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b452:	25 e0       	ldi	r18, 0x05	; 5
    b454:	62 2f       	mov	r22, r18
    b456:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    b45a:	58 2f       	mov	r21, r24
    b45c:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b45e:	40 91 c8 0d 	lds	r20, 0x0DC8
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b462:	8e 2f       	mov	r24, r30
    b464:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b468:	e8 2f       	mov	r30, r24
    b46a:	f0 e0       	ldi	r31, 0x00	; 0
    b46c:	54 9f       	mul	r21, r20
    b46e:	e0 0d       	add	r30, r0
    b470:	f1 1d       	adc	r31, r1
    b472:	11 24       	eor	r1, r1
    b474:	32 96       	adiw	r30, 0x02	; 2
    b476:	ea 0f       	add	r30, r26
    b478:	fb 1f       	adc	r31, r27
    b47a:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b47c:	e9 2f       	mov	r30, r25
    b47e:	f0 e0       	ldi	r31, 0x00	; 0
    b480:	95 e0       	ldi	r25, 0x05	; 5
    b482:	39 9f       	mul	r19, r25
    b484:	e0 0d       	add	r30, r0
    b486:	f1 1d       	adc	r31, r1
    b488:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b48a:	99 e1       	ldi	r25, 0x19	; 25
    b48c:	89 9f       	mul	r24, r25
    b48e:	e0 0d       	add	r30, r0
    b490:	f1 1d       	adc	r31, r1
    b492:	11 24       	eor	r1, r1
    b494:	e3 53       	subi	r30, 0x33	; 51
    b496:	ff 49       	sbci	r31, 0x9F	; 159
    b498:	84 91       	lpm	r24, Z
}
    b49a:	08 95       	ret

0000b49c <render_camera_view>:

void render_camera_view()
{
    b49c:	7f 92       	push	r7
    b49e:	8f 92       	push	r8
    b4a0:	9f 92       	push	r9
    b4a2:	af 92       	push	r10
    b4a4:	bf 92       	push	r11
    b4a6:	cf 92       	push	r12
    b4a8:	df 92       	push	r13
    b4aa:	ef 92       	push	r14
    b4ac:	ff 92       	push	r15
    b4ae:	0f 93       	push	r16
    b4b0:	1f 93       	push	r17
    b4b2:	cf 93       	push	r28
    b4b4:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b4b6:	c0 91 b2 0d 	lds	r28, 0x0DB2
    b4ba:	d0 91 b3 0d 	lds	r29, 0x0DB3
    b4be:	83 e0       	ldi	r24, 0x03	; 3
    b4c0:	d6 95       	lsr	r29
    b4c2:	c7 95       	ror	r28
    b4c4:	8a 95       	dec	r24
    b4c6:	e1 f7       	brne	.-8      	; 0xb4c0 <render_camera_view+0x24>
    b4c8:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b4ca:	00 91 ba 0d 	lds	r16, 0x0DBA
    b4ce:	06 95       	lsr	r16
    b4d0:	06 95       	lsr	r16
    b4d2:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b4d4:	dd 27       	eor	r29, r29
    b4d6:	7e 01       	movw	r14, r28
    b4d8:	4c e1       	ldi	r20, 0x1C	; 28
    b4da:	e4 0e       	add	r14, r20
    b4dc:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b4de:	10 e0       	ldi	r17, 0x00	; 0
    b4e0:	68 01       	movw	r12, r16
    b4e2:	89 e1       	ldi	r24, 0x19	; 25
    b4e4:	c8 0e       	add	r12, r24
    b4e6:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b4e8:	9e e1       	ldi	r25, 0x1E	; 30
    b4ea:	a9 2e       	mov	r10, r25
    b4ec:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b4ee:	ec 16       	cp	r14, r28
    b4f0:	fd 06       	cpc	r15, r29
    b4f2:	70 f1       	brcs	.+92     	; 0xb550 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b4f4:	48 01       	movw	r8, r16
    b4f6:	c8 14       	cp	r12, r8
    b4f8:	d9 04       	cpc	r13, r9
    b4fa:	40 f1       	brcs	.+80     	; 0xb54c <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b4fc:	48 2d       	mov	r20, r8
    b4fe:	6c 2f       	mov	r22, r28
    b500:	80 91 cf 0f 	lds	r24, 0x0FCF
    b504:	90 91 d0 0f 	lds	r25, 0x0FD0
    b508:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b50c:	28 2f       	mov	r18, r24
    b50e:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b510:	80 91 b3 0c 	lds	r24, 0x0CB3
    b514:	86 95       	lsr	r24
    b516:	86 95       	lsr	r24
    b518:	86 95       	lsr	r24
    b51a:	90 e0       	ldi	r25, 0x00	; 0
    b51c:	80 1b       	sub	r24, r16
    b51e:	91 0b       	sbc	r25, r17
    b520:	88 0d       	add	r24, r8
    b522:	99 1d       	adc	r25, r9
    b524:	b5 01       	movw	r22, r10
    b526:	0e 94 44 72 	call	0xe488	; 0xe488 <__udivmodhi4>
    b52a:	90 91 b2 0c 	lds	r25, 0x0CB2
    b52e:	96 95       	lsr	r25
    b530:	96 95       	lsr	r25
    b532:	96 95       	lsr	r25
    b534:	97 19       	sub	r25, r7
    b536:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b538:	a9 01       	movw	r20, r18
    b53a:	68 2f       	mov	r22, r24
    b53c:	89 2f       	mov	r24, r25
    b53e:	8f 71       	andi	r24, 0x1F	; 31
    b540:	0e 94 ea 40 	call	0x81d4	; 0x81d4 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b544:	8f ef       	ldi	r24, 0xFF	; 255
    b546:	88 1a       	sub	r8, r24
    b548:	98 0a       	sbc	r9, r24
    b54a:	d5 cf       	rjmp	.-86     	; 0xb4f6 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b54c:	21 96       	adiw	r28, 0x01	; 1
    b54e:	cf cf       	rjmp	.-98     	; 0xb4ee <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b550:	df 91       	pop	r29
    b552:	cf 91       	pop	r28
    b554:	1f 91       	pop	r17
    b556:	0f 91       	pop	r16
    b558:	ff 90       	pop	r15
    b55a:	ef 90       	pop	r14
    b55c:	df 90       	pop	r13
    b55e:	cf 90       	pop	r12
    b560:	bf 90       	pop	r11
    b562:	af 90       	pop	r10
    b564:	9f 90       	pop	r9
    b566:	8f 90       	pop	r8
    b568:	7f 90       	pop	r7
    b56a:	08 95       	ret

0000b56c <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b56c:	28 2f       	mov	r18, r24
    b56e:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b570:	80 91 c7 0d 	lds	r24, 0x0DC7
    b574:	81 11       	cpse	r24, r1
    b576:	04 c0       	rjmp	.+8      	; 0xb580 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b578:	bf 01       	movw	r22, r30
    b57a:	82 2f       	mov	r24, r18
    b57c:	0c 94 b7 58 	jmp	0xb16e	; 0xb16e <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b580:	82 30       	cpi	r24, 0x02	; 2
    b582:	21 f4       	brne	.+8      	; 0xb58c <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b584:	bf 01       	movw	r22, r30
    b586:	82 2f       	mov	r24, r18
    b588:	0c 94 76 58 	jmp	0xb0ec	; 0xb0ec <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b58c:	84 30       	cpi	r24, 0x04	; 4
    b58e:	31 f4       	brne	.+12     	; 0xb59c <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b590:	48 52       	subi	r20, 0x28	; 40
    b592:	51 09       	sbc	r21, r1
    b594:	bf 01       	movw	r22, r30
    b596:	82 2f       	mov	r24, r18
    b598:	0c 94 f1 58 	jmp	0xb1e2	; 0xb1e2 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b59c:	80 91 cc 0d 	lds	r24, 0x0DCC
    b5a0:	63 e0       	ldi	r22, 0x03	; 3
    b5a2:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    b5a6:	99 23       	and	r25, r25
    b5a8:	39 f3       	breq	.-50     	; 0xb578 <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b5aa:	91 30       	cpi	r25, 0x01	; 1
    b5ac:	89 f7       	brne	.-30     	; 0xb590 <init_level_enemy+0x24>
    b5ae:	ea cf       	rjmp	.-44     	; 0xb584 <init_level_enemy+0x18>

0000b5b0 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b5b0:	28 2f       	mov	r18, r24
    b5b2:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b5b4:	80 91 c7 0d 	lds	r24, 0x0DC7
    b5b8:	81 30       	cpi	r24, 0x01	; 1
    b5ba:	21 f4       	brne	.+8      	; 0xb5c4 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b5bc:	bf 01       	movw	r22, r30
    b5be:	82 2f       	mov	r24, r18
    b5c0:	0c 94 2c 59 	jmp	0xb258	; 0xb258 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b5c4:	83 30       	cpi	r24, 0x03	; 3
    b5c6:	21 f4       	brne	.+8      	; 0xb5d0 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b5c8:	bf 01       	movw	r22, r30
    b5ca:	82 2f       	mov	r24, r18
    b5cc:	0c 94 64 59 	jmp	0xb2c8	; 0xb2c8 <init_enemy_globe>
	}
	else if (game.frame_counter % 3 == 0)
    b5d0:	80 91 cc 0d 	lds	r24, 0x0DCC
    b5d4:	63 e0       	ldi	r22, 0x03	; 3
    b5d6:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    b5da:	91 11       	cpse	r25, r1
    b5dc:	f5 cf       	rjmp	.-22     	; 0xb5c8 <init_space_enemy+0x18>
    b5de:	ee cf       	rjmp	.-36     	; 0xb5bc <init_space_enemy+0xc>

0000b5e0 <spawn_enemy>:
		init_enemy_globe(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b5e0:	0f 93       	push	r16
    b5e2:	1f 93       	push	r17
    b5e4:	cf 93       	push	r28
    b5e6:	df 93       	push	r29
    b5e8:	00 d0       	rcall	.+0      	; 0xb5ea <spawn_enemy+0xa>
    b5ea:	00 d0       	rcall	.+0      	; 0xb5ec <spawn_enemy+0xc>
    b5ec:	cd b7       	in	r28, 0x3d	; 61
    b5ee:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b5f0:	20 91 b2 0d 	lds	r18, 0x0DB2
    b5f4:	30 91 b3 0d 	lds	r19, 0x0DB3
    b5f8:	28 3c       	cpi	r18, 0xC8	; 200
    b5fa:	35 40       	sbci	r19, 0x05	; 5
    b5fc:	98 f5       	brcc	.+102    	; 0xb664 <spawn_enemy+0x84>
    b5fe:	22 eb       	ldi	r18, 0xB2	; 178
    b600:	3d e0       	ldi	r19, 0x0D	; 13
    b602:	10 e0       	ldi	r17, 0x00	; 0
    b604:	f9 01       	movw	r30, r18
    b606:	e5 5e       	subi	r30, 0xE5	; 229
    b608:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b60a:	50 81       	ld	r21, Z
    b60c:	51 11       	cpse	r21, r1
    b60e:	25 c0       	rjmp	.+74     	; 0xb65a <spawn_enemy+0x7a>
    b610:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b612:	50 81       	ld	r21, Z
    b614:	51 11       	cpse	r21, r1
    b616:	21 c0       	rjmp	.+66     	; 0xb65a <spawn_enemy+0x7a>
    b618:	04 2f       	mov	r16, r20
    b61a:	ab 01       	movw	r20, r22
    b61c:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b61e:	4b 83       	std	Y+3, r20	; 0x03
    b620:	5c 83       	std	Y+4, r21	; 0x04
    b622:	89 83       	std	Y+1, r24	; 0x01
    b624:	7a 83       	std	Y+2, r23	; 0x02
    b626:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    b62a:	4b 81       	ldd	r20, Y+3	; 0x03
    b62c:	5c 81       	ldd	r21, Y+4	; 0x04
    b62e:	69 81       	ldd	r22, Y+1	; 0x01
    b630:	7a 81       	ldd	r23, Y+2	; 0x02
    b632:	88 23       	and	r24, r24
    b634:	21 f0       	breq	.+8      	; 0xb63e <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b636:	81 2f       	mov	r24, r17
    b638:	0e 94 d8 5a 	call	0xb5b0	; 0xb5b0 <init_space_enemy>
    b63c:	08 c0       	rjmp	.+16     	; 0xb64e <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b63e:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b640:	01 11       	cpse	r16, r1
    b642:	03 c0       	rjmp	.+6      	; 0xb64a <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b644:	0e 94 b6 5a 	call	0xb56c	; 0xb56c <init_level_enemy>
    b648:	02 c0       	rjmp	.+4      	; 0xb64e <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b64a:	0e 94 9d 59 	call	0xb33a	; 0xb33a <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b64e:	80 91 cd 0d 	lds	r24, 0x0DCD
    b652:	8f 5f       	subi	r24, 0xFF	; 255
    b654:	80 93 cd 0d 	sts	0x0DCD, r24
    b658:	05 c0       	rjmp	.+10     	; 0xb664 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b65a:	1f 5f       	subi	r17, 0xFF	; 255
    b65c:	2b 5c       	subi	r18, 0xCB	; 203
    b65e:	3f 4f       	sbci	r19, 0xFF	; 255
    b660:	15 30       	cpi	r17, 0x05	; 5
    b662:	81 f6       	brne	.-96     	; 0xb604 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b664:	0f 90       	pop	r0
    b666:	0f 90       	pop	r0
    b668:	0f 90       	pop	r0
    b66a:	0f 90       	pop	r0
    b66c:	df 91       	pop	r29
    b66e:	cf 91       	pop	r28
    b670:	1f 91       	pop	r17
    b672:	0f 91       	pop	r16
    b674:	08 95       	ret

0000b676 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b676:	9f ef       	ldi	r25, 0xFF	; 255
    b678:	98 0f       	add	r25, r24
    b67a:	9e 30       	cpi	r25, 0x0E	; 14
    b67c:	28 f0       	brcs	.+10     	; 0xb688 <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 27)
    b67e:	8f 50       	subi	r24, 0x0F	; 15
    b680:	8d 30       	cpi	r24, 0x0D	; 13
    b682:	20 f0       	brcs	.+8      	; 0xb68c <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b684:	80 e0       	ldi	r24, 0x00	; 0
    b686:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b688:	81 e0       	ldi	r24, 0x01	; 1
    b68a:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 27)
	{
		return 2;
    b68c:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b68e:	08 95       	ret

0000b690 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b690:	af 92       	push	r10
    b692:	bf 92       	push	r11
    b694:	cf 92       	push	r12
    b696:	df 92       	push	r13
    b698:	ef 92       	push	r14
    b69a:	ff 92       	push	r15
    b69c:	0f 93       	push	r16
    b69e:	1f 93       	push	r17
    b6a0:	cf 93       	push	r28
    b6a2:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    b6a4:	68 e1       	ldi	r22, 0x18	; 24
    b6a6:	81 e0       	ldi	r24, 0x01	; 1
    b6a8:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    b6ac:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b6ae:	80 91 c3 0d 	lds	r24, 0x0DC3
    b6b2:	8f 5f       	subi	r24, 0xFF	; 255
    b6b4:	80 93 c3 0d 	sts	0x0DC3, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b6b8:	20 91 ce 0d 	lds	r18, 0x0DCE
    b6bc:	62 2f       	mov	r22, r18
    b6be:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    b6c2:	89 2f       	mov	r24, r25
    b6c4:	90 e0       	ldi	r25, 0x00	; 0
    b6c6:	30 e0       	ldi	r19, 0x00	; 0
    b6c8:	21 50       	subi	r18, 0x01	; 1
    b6ca:	31 09       	sbc	r19, r1
    b6cc:	82 17       	cp	r24, r18
    b6ce:	93 07       	cpc	r25, r19
    b6d0:	31 f4       	brne	.+12     	; 0xb6de <append_tile_column+0x4e>
    b6d2:	bb 24       	eor	r11, r11
    b6d4:	b3 94       	inc	r11
    b6d6:	80 91 cd 0d 	lds	r24, 0x0DCD
    b6da:	85 30       	cpi	r24, 0x05	; 5
    b6dc:	08 f0       	brcs	.+2      	; 0xb6e0 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b6de:	b1 2c       	mov	r11, r1
    b6e0:	00 e0       	ldi	r16, 0x00	; 0
    b6e2:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b6e4:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
    b6e6:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b6e8:	2e e1       	ldi	r18, 0x1E	; 30
    b6ea:	c2 2e       	mov	r12, r18
    b6ec:	d1 2c       	mov	r13, r1
    b6ee:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b6f0:	40 91 ba 0d 	lds	r20, 0x0DBA
    b6f4:	46 95       	lsr	r20
    b6f6:	46 95       	lsr	r20
    b6f8:	46 95       	lsr	r20
    b6fa:	40 0f       	add	r20, r16
    b6fc:	60 91 bb 0d 	lds	r22, 0x0DBB
    b700:	80 91 cf 0f 	lds	r24, 0x0FCF
    b704:	90 91 d0 0f 	lds	r25, 0x0FD0
    b708:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    b70c:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b70e:	28 2f       	mov	r18, r24
    b710:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b712:	80 91 b3 0c 	lds	r24, 0x0CB3
    b716:	86 95       	lsr	r24
    b718:	86 95       	lsr	r24
    b71a:	86 95       	lsr	r24
    b71c:	a8 01       	movw	r20, r16
    b71e:	48 0f       	add	r20, r24
    b720:	51 1d       	adc	r21, r1
    b722:	ca 01       	movw	r24, r20
    b724:	b6 01       	movw	r22, r12
    b726:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b72a:	a9 01       	movw	r20, r18
    b72c:	68 2f       	mov	r22, r24
    b72e:	80 91 bf 0d 	lds	r24, 0x0DBF
    b732:	0e 94 ea 40 	call	0x81d4	; 0x81d4 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b736:	bb 20       	and	r11, r11
    b738:	81 f0       	breq	.+32     	; 0xb75a <append_tile_column+0xca>
    b73a:	01 15       	cp	r16, r1
    b73c:	11 05       	cpc	r17, r1
    b73e:	69 f0       	breq	.+26     	; 0xb75a <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b740:	81 ef       	ldi	r24, 0xF1	; 241
    b742:	8e 0d       	add	r24, r14
    b744:	85 30       	cpi	r24, 0x05	; 5
    b746:	30 f0       	brcs	.+12     	; 0xb754 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b748:	8f ef       	ldi	r24, 0xFF	; 255
    b74a:	8e 0d       	add	r24, r14
    b74c:	8e 30       	cpi	r24, 0x0E	; 14
    b74e:	08 f4       	brcc	.+2      	; 0xb752 <append_tile_column+0xc2>
    b750:	60 c0       	rjmp	.+192    	; 0xb812 <append_tile_column+0x182>
    b752:	03 c0       	rjmp	.+6      	; 0xb75a <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b754:	c1 11       	cpse	r28, r1
    b756:	f8 cf       	rjmp	.-16     	; 0xb748 <append_tile_column+0xb8>
    b758:	c0 2f       	mov	r28, r16
    b75a:	0f 5f       	subi	r16, 0xFF	; 255
    b75c:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b75e:	09 31       	cpi	r16, 0x19	; 25
    b760:	11 05       	cpc	r17, r1
    b762:	29 f6       	brne	.-118    	; 0xb6ee <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b764:	bb 20       	and	r11, r11
    b766:	51 f0       	breq	.+20     	; 0xb77c <append_tile_column+0xec>
    b768:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    b76c:	88 23       	and	r24, r24
    b76e:	31 f0       	breq	.+12     	; 0xb77c <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    b770:	ff 0c       	add	r15, r15
    b772:	ff 0c       	add	r15, r15
    b774:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b776:	6f 2d       	mov	r22, r15
    b778:	70 e0       	ldi	r23, 0x00	; 0
    b77a:	32 c0       	rjmp	.+100    	; 0xb7e0 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b77c:	cc 23       	and	r28, r28
    b77e:	f1 f0       	breq	.+60     	; 0xb7bc <append_tile_column+0x12c>
    b780:	80 91 c7 0d 	lds	r24, 0x0DC7
    b784:	90 91 ba 0d 	lds	r25, 0x0DBA
    b788:	20 91 b2 0d 	lds	r18, 0x0DB2
    b78c:	30 91 b3 0d 	lds	r19, 0x0DB3
    b790:	6c 2f       	mov	r22, r28
    b792:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b794:	96 95       	lsr	r25
    b796:	96 95       	lsr	r25
    b798:	96 95       	lsr	r25
    b79a:	69 0f       	add	r22, r25
    b79c:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b79e:	82 30       	cpi	r24, 0x02	; 2
    b7a0:	19 f4       	brne	.+6      	; 0xb7a8 <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b7a2:	61 50       	subi	r22, 0x01	; 1
    b7a4:	71 09       	sbc	r23, r1
    b7a6:	02 c0       	rjmp	.+4      	; 0xb7ac <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b7a8:	6f 5f       	subi	r22, 0xFF	; 255
    b7aa:	7f 4f       	sbci	r23, 0xFF	; 255
    b7ac:	93 e0       	ldi	r25, 0x03	; 3
    b7ae:	66 0f       	add	r22, r22
    b7b0:	77 1f       	adc	r23, r23
    b7b2:	9a 95       	dec	r25
    b7b4:	e1 f7       	brne	.-8      	; 0xb7ae <append_tile_column+0x11e>
    b7b6:	41 e0       	ldi	r20, 0x01	; 1
    b7b8:	c9 01       	movw	r24, r18
    b7ba:	17 c0       	rjmp	.+46     	; 0xb7ea <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b7bc:	dd 23       	and	r29, r29
    b7be:	c9 f0       	breq	.+50     	; 0xb7f2 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b7c0:	80 91 ba 0d 	lds	r24, 0x0DBA
    b7c4:	86 95       	lsr	r24
    b7c6:	86 95       	lsr	r24
    b7c8:	86 95       	lsr	r24
    b7ca:	6d 2f       	mov	r22, r29
    b7cc:	70 e0       	ldi	r23, 0x00	; 0
    b7ce:	68 0f       	add	r22, r24
    b7d0:	71 1d       	adc	r23, r1
    b7d2:	61 50       	subi	r22, 0x01	; 1
    b7d4:	71 09       	sbc	r23, r1
    b7d6:	83 e0       	ldi	r24, 0x03	; 3
    b7d8:	66 0f       	add	r22, r22
    b7da:	77 1f       	adc	r23, r23
    b7dc:	8a 95       	dec	r24
    b7de:	e1 f7       	brne	.-8      	; 0xb7d8 <append_tile_column+0x148>
    b7e0:	80 91 b2 0d 	lds	r24, 0x0DB2
    b7e4:	90 91 b3 0d 	lds	r25, 0x0DB3
    b7e8:	40 e0       	ldi	r20, 0x00	; 0
    b7ea:	80 52       	subi	r24, 0x20	; 32
    b7ec:	9f 4f       	sbci	r25, 0xFF	; 255
    b7ee:	0e 94 f0 5a 	call	0xb5e0	; 0xb5e0 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b7f2:	80 91 bb 0d 	lds	r24, 0x0DBB
    b7f6:	8f 5f       	subi	r24, 0xFF	; 255
    b7f8:	80 93 bb 0d 	sts	0x0DBB, r24
	game.scroll_dest_x++;
    b7fc:	80 91 bf 0d 	lds	r24, 0x0DBF
    b800:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b802:	80 32       	cpi	r24, 0x20	; 32
    b804:	18 f4       	brcc	.+6      	; 0xb80c <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b806:	80 93 bf 0d 	sts	0x0DBF, r24
    b80a:	07 c0       	rjmp	.+14     	; 0xb81a <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b80c:	10 92 bf 0d 	sts	0x0DBF, r1
    b810:	04 c0       	rjmp	.+8      	; 0xb81a <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b812:	d1 11       	cpse	r29, r1
    b814:	a2 cf       	rjmp	.-188    	; 0xb75a <append_tile_column+0xca>
    b816:	da 2d       	mov	r29, r10
    b818:	a0 cf       	rjmp	.-192    	; 0xb75a <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b81a:	df 91       	pop	r29
    b81c:	cf 91       	pop	r28
    b81e:	1f 91       	pop	r17
    b820:	0f 91       	pop	r16
    b822:	ff 90       	pop	r15
    b824:	ef 90       	pop	r14
    b826:	df 90       	pop	r13
    b828:	cf 90       	pop	r12
    b82a:	bf 90       	pop	r11
    b82c:	af 90       	pop	r10
    b82e:	08 95       	ret

0000b830 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b830:	80 91 b2 0d 	lds	r24, 0x0DB2
    b834:	90 91 b3 0d 	lds	r25, 0x0DB3
    b838:	01 96       	adiw	r24, 0x01	; 1
    b83a:	90 93 b3 0d 	sts	0x0DB3, r25
    b83e:	80 93 b2 0d 	sts	0x0DB2, r24
	Scroll(1,0);
    b842:	60 e0       	ldi	r22, 0x00	; 0
    b844:	81 e0       	ldi	r24, 0x01	; 1
    b846:	0e 94 28 4f 	call	0x9e50	; 0x9e50 <Scroll>
	if (++game.scroll_x == 8)
    b84a:	80 91 bd 0d 	lds	r24, 0x0DBD
    b84e:	8f 5f       	subi	r24, 0xFF	; 255
    b850:	88 30       	cpi	r24, 0x08	; 8
    b852:	19 f0       	breq	.+6      	; 0xb85a <move_camera_x+0x2a>
    b854:	80 93 bd 0d 	sts	0x0DBD, r24
    b858:	08 95       	ret
	{
		game.scroll_x = 0;
    b85a:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    b85e:	0c 94 48 5b 	jmp	0xb690	; 0xb690 <append_tile_column>

0000b862 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b862:	82 e0       	ldi	r24, 0x02	; 2
    b864:	80 93 25 0e 	sts	0x0E25, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b868:	85 e0       	ldi	r24, 0x05	; 5
    b86a:	80 93 26 0e 	sts	0x0E26, r24
	game.player.run.anims = run_anim;
    b86e:	ef e2       	ldi	r30, 0x2F	; 47
    b870:	f0 e1       	ldi	r31, 0x10	; 16
    b872:	f0 93 2b 0e 	sts	0x0E2B, r31
    b876:	e0 93 2a 0e 	sts	0x0E2A, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b87a:	81 ec       	ldi	r24, 0xC1	; 193
    b87c:	96 e3       	ldi	r25, 0x36	; 54
    b87e:	91 83       	std	Z+1, r25	; 0x01
    b880:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b882:	87 eb       	ldi	r24, 0xB7	; 183
    b884:	96 e3       	ldi	r25, 0x36	; 54
    b886:	93 83       	std	Z+3, r25	; 0x03
    b888:	82 83       	std	Z+2, r24	; 0x02
    b88a:	08 95       	ret

0000b88c <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b88c:	a2 eb       	ldi	r26, 0xB2	; 178
    b88e:	bd e0       	ldi	r27, 0x0D	; 13
    b890:	90 93 d0 0f 	sts	0x0FD0, r25
    b894:	80 93 cf 0f 	sts	0x0FCF, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b898:	fc 01       	movw	r30, r24
    b89a:	24 91       	lpm	r18, Z
    b89c:	56 96       	adiw	r26, 0x16	; 22
    b89e:	2c 93       	st	X, r18
    b8a0:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b8a2:	9c 01       	movw	r18, r24
    b8a4:	2f 5f       	subi	r18, 0xFF	; 255
    b8a6:	3f 4f       	sbci	r19, 0xFF	; 255
    b8a8:	f9 01       	movw	r30, r18
    b8aa:	44 91       	lpm	r20, Z
    b8ac:	57 96       	adiw	r26, 0x17	; 23
    b8ae:	4c 93       	st	X, r20
    b8b0:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b8b2:	fc 01       	movw	r30, r24
    b8b4:	84 91       	lpm	r24, Z
    b8b6:	98 2f       	mov	r25, r24
    b8b8:	99 0f       	add	r25, r25
    b8ba:	99 0f       	add	r25, r25
    b8bc:	89 0f       	add	r24, r25
    b8be:	1f 96       	adiw	r26, 0x0f	; 15
    b8c0:	8c 93       	st	X, r24
    b8c2:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b8c4:	f9 01       	movw	r30, r18
    b8c6:	24 91       	lpm	r18, Z
    b8c8:	82 2f       	mov	r24, r18
    b8ca:	88 0f       	add	r24, r24
    b8cc:	88 0f       	add	r24, r24
    b8ce:	28 0f       	add	r18, r24
    b8d0:	50 96       	adiw	r26, 0x10	; 16
    b8d2:	2c 93       	st	X, r18
    b8d4:	08 95       	ret

0000b8d6 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b8d6:	cf 92       	push	r12
    b8d8:	df 92       	push	r13
    b8da:	ef 92       	push	r14
    b8dc:	ff 92       	push	r15
    b8de:	0f 93       	push	r16
    b8e0:	1f 93       	push	r17
    b8e2:	cf 93       	push	r28
    b8e4:	df 93       	push	r29
    b8e6:	7c 01       	movw	r14, r24
    b8e8:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b8ea:	88 e0       	ldi	r24, 0x08	; 8
    b8ec:	48 9f       	mul	r20, r24
    b8ee:	80 01       	movw	r16, r0
    b8f0:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b8f2:	c0 e0       	ldi	r28, 0x00	; 0
    b8f4:	cd 17       	cp	r28, r29
    b8f6:	09 f4       	brne	.+2      	; 0xb8fa <on_solid_ground+0x24>
    b8f8:	41 c0       	rjmp	.+130    	; 0xb97c <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b8fa:	f7 01       	movw	r30, r14
    b8fc:	42 81       	ldd	r20, Z+2	; 0x02
    b8fe:	53 81       	ldd	r21, Z+3	; 0x03
    b900:	40 0f       	add	r20, r16
    b902:	51 1f       	adc	r21, r17
    b904:	83 e0       	ldi	r24, 0x03	; 3
    b906:	56 95       	lsr	r21
    b908:	47 95       	ror	r20
    b90a:	8a 95       	dec	r24
    b90c:	e1 f7       	brne	.-8      	; 0xb906 <on_solid_ground+0x30>
    b90e:	60 81       	ld	r22, Z
    b910:	71 81       	ldd	r23, Z+1	; 0x01
    b912:	93 e0       	ldi	r25, 0x03	; 3
    b914:	76 95       	lsr	r23
    b916:	67 95       	ror	r22
    b918:	9a 95       	dec	r25
    b91a:	e1 f7       	brne	.-8      	; 0xb914 <on_solid_ground+0x3e>
    b91c:	6c 0f       	add	r22, r28
    b91e:	80 91 cf 0f 	lds	r24, 0x0FCF
    b922:	90 91 d0 0f 	lds	r25, 0x0FD0
    b926:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    b92a:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b92c:	f7 01       	movw	r30, r14
    b92e:	42 81       	ldd	r20, Z+2	; 0x02
    b930:	53 81       	ldd	r21, Z+3	; 0x03
    b932:	40 0f       	add	r20, r16
    b934:	51 1f       	adc	r21, r17
    b936:	23 e0       	ldi	r18, 0x03	; 3
    b938:	56 95       	lsr	r21
    b93a:	47 95       	ror	r20
    b93c:	2a 95       	dec	r18
    b93e:	e1 f7       	brne	.-8      	; 0xb938 <on_solid_ground+0x62>
    b940:	20 81       	ld	r18, Z
    b942:	31 81       	ldd	r19, Z+1	; 0x01
    b944:	29 5f       	subi	r18, 0xF9	; 249
    b946:	3f 4f       	sbci	r19, 0xFF	; 255
    b948:	53 e0       	ldi	r21, 0x03	; 3
    b94a:	36 95       	lsr	r19
    b94c:	27 95       	ror	r18
    b94e:	5a 95       	dec	r21
    b950:	e1 f7       	brne	.-8      	; 0xb94a <on_solid_ground+0x74>
    b952:	6c 2f       	mov	r22, r28
    b954:	62 0f       	add	r22, r18
    b956:	80 91 cf 0f 	lds	r24, 0x0FCF
    b95a:	90 91 d0 0f 	lds	r25, 0x0FD0
    b95e:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    b962:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b964:	8c 2d       	mov	r24, r12
    b966:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    b96a:	81 11       	cpse	r24, r1
    b96c:	09 c0       	rjmp	.+18     	; 0xb980 <on_solid_ground+0xaa>
    b96e:	8d 2d       	mov	r24, r13
    b970:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    b974:	81 11       	cpse	r24, r1
    b976:	04 c0       	rjmp	.+8      	; 0xb980 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b978:	cf 5f       	subi	r28, 0xFF	; 255
    b97a:	bc cf       	rjmp	.-136    	; 0xb8f4 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b97c:	80 e0       	ldi	r24, 0x00	; 0
    b97e:	01 c0       	rjmp	.+2      	; 0xb982 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b980:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b982:	df 91       	pop	r29
    b984:	cf 91       	pop	r28
    b986:	1f 91       	pop	r17
    b988:	0f 91       	pop	r16
    b98a:	ff 90       	pop	r15
    b98c:	ef 90       	pop	r14
    b98e:	df 90       	pop	r13
    b990:	cf 90       	pop	r12
    b992:	08 95       	ret

0000b994 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b994:	9c 01       	movw	r18, r24
    b996:	80 91 f5 0c 	lds	r24, 0x0CF5
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b99a:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b99c:	83 30       	cpi	r24, 0x03	; 3
    b99e:	08 f0       	brcs	.+2      	; 0xb9a2 <find_shot_slot+0xe>
    b9a0:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b9a2:	f9 01       	movw	r30, r18
    b9a4:	48 9f       	mul	r20, r24
    b9a6:	e0 0d       	add	r30, r0
    b9a8:	f1 1d       	adc	r31, r1
    b9aa:	11 24       	eor	r1, r1
    b9ac:	51 8d       	ldd	r21, Z+25	; 0x19
    b9ae:	91 e0       	ldi	r25, 0x01	; 1
    b9b0:	98 0f       	add	r25, r24
    b9b2:	51 11       	cpse	r21, r1
    b9b4:	03 c0       	rjmp	.+6      	; 0xb9bc <find_shot_slot+0x28>
		{
			return i++;
    b9b6:	90 93 f5 0c 	sts	0x0CF5, r25
    b9ba:	08 95       	ret
		}
		i++;
    b9bc:	89 2f       	mov	r24, r25
	}
    b9be:	ee cf       	rjmp	.-36     	; 0xb99c <find_shot_slot+0x8>

0000b9c0 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b9c0:	bf 92       	push	r11
    b9c2:	cf 92       	push	r12
    b9c4:	df 92       	push	r13
    b9c6:	ef 92       	push	r14
    b9c8:	ff 92       	push	r15
    b9ca:	0f 93       	push	r16
    b9cc:	1f 93       	push	r17
    b9ce:	cf 93       	push	r28
    b9d0:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_A && player->active_shots < MAX_PLAYER_SHOTS)
    b9d2:	fc 01       	movw	r30, r24
    b9d4:	ec 58       	subi	r30, 0x8C	; 140
    b9d6:	ff 4f       	sbci	r31, 0xFF	; 255
    b9d8:	20 81       	ld	r18, Z
    b9da:	31 81       	ldd	r19, Z+1	; 0x01
    b9dc:	30 ff       	sbrs	r19, 0
    b9de:	90 c0       	rjmp	.+288    	; 0xbb00 <update_shot+0x140>
    b9e0:	fc 01       	movw	r30, r24
    b9e2:	27 81       	ldd	r18, Z+7	; 0x07
    b9e4:	23 30       	cpi	r18, 0x03	; 3
    b9e6:	08 f0       	brcs	.+2      	; 0xb9ea <update_shot+0x2a>
    b9e8:	8b c0       	rjmp	.+278    	; 0xbb00 <update_shot+0x140>
    b9ea:	16 2f       	mov	r17, r22
    b9ec:	ec 01       	movw	r28, r24
	{
		SFX_PLAYER_SHOOT;
    b9ee:	2f ef       	ldi	r18, 0xFF	; 255
    b9f0:	43 e2       	ldi	r20, 0x23	; 35
    b9f2:	63 e0       	ldi	r22, 0x03	; 3
    b9f4:	82 e0       	ldi	r24, 0x02	; 2
    b9f6:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <TriggerNote>
		idx = find_shot_slot(player);
    b9fa:	ce 01       	movw	r24, r28
    b9fc:	0e 94 ca 5c 	call	0xb994	; 0xb994 <find_shot_slot>
    ba00:	b8 2e       	mov	r11, r24
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    ba02:	e8 2e       	mov	r14, r24
    ba04:	f1 2c       	mov	r15, r1
    ba06:	f4 e1       	ldi	r31, 0x14	; 20
    ba08:	8f 9f       	mul	r24, r31
    ba0a:	60 01       	movw	r12, r0
    ba0c:	11 24       	eor	r1, r1
    ba0e:	c6 01       	movw	r24, r12
    ba10:	4c 96       	adiw	r24, 0x1c	; 28
    ba12:	8c 0f       	add	r24, r28
    ba14:	9d 1f       	adc	r25, r29
    ba16:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    ba1a:	40 e0       	ldi	r20, 0x00	; 0
    ba1c:	bc 01       	movw	r22, r24
    ba1e:	8b 2d       	mov	r24, r11
    ba20:	81 0f       	add	r24, r17
    ba22:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		player->shot[idx].active = 1;
    ba26:	8e 01       	movw	r16, r28
    ba28:	0c 0d       	add	r16, r12
    ba2a:	1d 1d       	adc	r17, r13
    ba2c:	81 e0       	ldi	r24, 0x01	; 1
    ba2e:	f8 01       	movw	r30, r16
    ba30:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    ba32:	ca 80       	ldd	r12, Y+2	; 0x02
    ba34:	db 80       	ldd	r13, Y+3	; 0x03
    ba36:	f8 ef       	ldi	r31, 0xF8	; 248
    ba38:	cf 22       	and	r12, r31
    ba3a:	f8 01       	movw	r30, r16
    ba3c:	83 8d       	ldd	r24, Z+27	; 0x1b
    ba3e:	c8 0e       	add	r12, r24
    ba40:	d1 1c       	adc	r13, r1
    ba42:	87 fd       	sbrc	r24, 7
    ba44:	da 94       	dec	r13
    ba46:	d3 8a       	std	Z+19, r13	; 0x13
    ba48:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    ba4a:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    ba4e:	28 81       	ld	r18, Y
    ba50:	39 81       	ldd	r19, Y+1	; 0x01
    ba52:	88 23       	and	r24, r24
    ba54:	a1 f0       	breq	.+40     	; 0xba7e <update_shot+0xbe>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    ba56:	8b 85       	ldd	r24, Y+11	; 0x0b
    ba58:	f8 e0       	ldi	r31, 0x08	; 8
    ba5a:	8f 9f       	mul	r24, r31
    ba5c:	20 0d       	add	r18, r0
    ba5e:	31 1d       	adc	r19, r1
    ba60:	11 24       	eor	r1, r1
    ba62:	f8 01       	movw	r30, r16
    ba64:	31 8b       	std	Z+17, r19	; 0x11
    ba66:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    ba68:	82 8d       	ldd	r24, Z+26	; 0x1a
    ba6a:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    ba6c:	87 89       	ldd	r24, Z+23	; 0x17
    ba6e:	86 30       	cpi	r24, 0x06	; 6
    ba70:	09 f0       	breq	.+2      	; 0xba74 <update_shot+0xb4>
    ba72:	43 c0       	rjmp	.+134    	; 0xbafa <update_shot+0x13a>
    ba74:	f8 01       	movw	r30, r16
			{
				player->shot[idx].shared.vy *= -1;
    ba76:	84 89       	ldd	r24, Z+20	; 0x14
    ba78:	81 95       	neg	r24
    ba7a:	84 8b       	std	Z+20, r24	; 0x14
    ba7c:	3e c0       	rjmp	.+124    	; 0xbafa <update_shot+0x13a>
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    ba7e:	88 85       	ldd	r24, Y+8	; 0x08
    ba80:	82 fd       	sbrc	r24, 2
    ba82:	06 c0       	rjmp	.+12     	; 0xba90 <update_shot+0xd0>
			{
				player->shot[idx].shared.y += 8;
    ba84:	88 e0       	ldi	r24, 0x08	; 8
    ba86:	c8 0e       	add	r12, r24
    ba88:	d1 1c       	adc	r13, r1
    ba8a:	f8 01       	movw	r30, r16
    ba8c:	d3 8a       	std	Z+19, r13	; 0x13
    ba8e:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    ba90:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    ba92:	94 e1       	ldi	r25, 0x14	; 20
    ba94:	9e 9d       	mul	r25, r14
    ba96:	f0 01       	movw	r30, r0
    ba98:	9f 9d       	mul	r25, r15
    ba9a:	f0 0d       	add	r31, r0
    ba9c:	11 24       	eor	r1, r1
    ba9e:	ec 0f       	add	r30, r28
    baa0:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    baa2:	81 30       	cpi	r24, 0x01	; 1
    baa4:	a9 f4       	brne	.+42     	; 0xbad0 <update_shot+0x110>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    baa6:	20 5f       	subi	r18, 0xF0	; 240
    baa8:	3f 4f       	sbci	r19, 0xFF	; 255
    baaa:	31 8b       	std	Z+17, r19	; 0x11
    baac:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    baae:	82 8d       	ldd	r24, Z+26	; 0x1a
    bab0:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    bab2:	27 89       	ldd	r18, Z+23	; 0x17
    bab4:	24 30       	cpi	r18, 0x04	; 4
    bab6:	09 f5       	brne	.+66     	; 0xbafa <update_shot+0x13a>
    bab8:	ff ef       	ldi	r31, 0xFF	; 255
    baba:	ef 1a       	sub	r14, r31
    babc:	ff 0a       	sbc	r15, r31
    babe:	9e 9d       	mul	r25, r14
    bac0:	f0 01       	movw	r30, r0
    bac2:	9f 9d       	mul	r25, r15
    bac4:	f0 0d       	add	r31, r0
    bac6:	11 24       	eor	r1, r1
    bac8:	ec 0f       	add	r30, r28
    baca:	fd 1f       	adc	r31, r29
    bacc:	81 95       	neg	r24
    bace:	14 c0       	rjmp	.+40     	; 0xbaf8 <update_shot+0x138>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    bad0:	28 50       	subi	r18, 0x08	; 8
    bad2:	31 09       	sbc	r19, r1
    bad4:	31 8b       	std	Z+17, r19	; 0x11
    bad6:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    bad8:	82 8d       	ldd	r24, Z+26	; 0x1a
    bada:	81 95       	neg	r24
    badc:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    bade:	27 89       	ldd	r18, Z+23	; 0x17
    bae0:	24 30       	cpi	r18, 0x04	; 4
    bae2:	59 f4       	brne	.+22     	; 0xbafa <update_shot+0x13a>
    bae4:	2f ef       	ldi	r18, 0xFF	; 255
    bae6:	e2 1a       	sub	r14, r18
    bae8:	f2 0a       	sbc	r15, r18
    baea:	9e 9d       	mul	r25, r14
    baec:	f0 01       	movw	r30, r0
    baee:	9f 9d       	mul	r25, r15
    baf0:	f0 0d       	add	r31, r0
    baf2:	11 24       	eor	r1, r1
    baf4:	ec 0f       	add	r30, r28
    baf6:	fd 1f       	adc	r31, r29
    baf8:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    bafa:	8f 81       	ldd	r24, Y+7	; 0x07
    bafc:	8f 5f       	subi	r24, 0xFF	; 255
    bafe:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    bb00:	df 91       	pop	r29
    bb02:	cf 91       	pop	r28
    bb04:	1f 91       	pop	r17
    bb06:	0f 91       	pop	r16
    bb08:	ff 90       	pop	r15
    bb0a:	ef 90       	pop	r14
    bb0c:	df 90       	pop	r13
    bb0e:	cf 90       	pop	r12
    bb10:	bf 90       	pop	r11
    bb12:	08 95       	ret

0000bb14 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    bb14:	fc 01       	movw	r30, r24
    bb16:	40 81       	ld	r20, Z
    bb18:	51 81       	ldd	r21, Z+1	; 0x01
    bb1a:	20 91 b2 0d 	lds	r18, 0x0DB2
    bb1e:	30 91 b3 0d 	lds	r19, 0x0DB3
    bb22:	42 17       	cp	r20, r18
    bb24:	53 07       	cpc	r21, r19
    bb26:	f0 f0       	brcs	.+60     	; 0xbb64 <out_of_bounds+0x50>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    bb28:	48 5f       	subi	r20, 0xF8	; 248
    bb2a:	5f 4f       	sbci	r21, 0xFF	; 255
    bb2c:	20 52       	subi	r18, 0x20	; 32
    bb2e:	3f 4f       	sbci	r19, 0xFF	; 255
    bb30:	24 17       	cp	r18, r20
    bb32:	35 07       	cpc	r19, r21
    bb34:	b8 f0       	brcs	.+46     	; 0xbb64 <out_of_bounds+0x50>
	if (s->y < game.camera_y) return 1;
    bb36:	22 81       	ldd	r18, Z+2	; 0x02
    bb38:	33 81       	ldd	r19, Z+3	; 0x03
    bb3a:	80 91 ba 0d 	lds	r24, 0x0DBA
    bb3e:	90 e0       	ldi	r25, 0x00	; 0
    bb40:	28 17       	cp	r18, r24
    bb42:	39 07       	cpc	r19, r25
    bb44:	78 f0       	brcs	.+30     	; 0xbb64 <out_of_bounds+0x50>
	if (s->y < 4) return 1;
    bb46:	24 30       	cpi	r18, 0x04	; 4
    bb48:	31 05       	cpc	r19, r1
    bb4a:	60 f0       	brcs	.+24     	; 0xbb64 <out_of_bounds+0x50>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    bb4c:	a9 01       	movw	r20, r18
    bb4e:	48 5f       	subi	r20, 0xF8	; 248
    bb50:	5f 4f       	sbci	r21, 0xFF	; 255
    bb52:	9c 01       	movw	r18, r24
    bb54:	28 53       	subi	r18, 0x38	; 56
    bb56:	3f 4f       	sbci	r19, 0xFF	; 255
    bb58:	81 e0       	ldi	r24, 0x01	; 1
    bb5a:	24 17       	cp	r18, r20
    bb5c:	35 07       	cpc	r19, r21
    bb5e:	18 f0       	brcs	.+6      	; 0xbb66 <out_of_bounds+0x52>
    bb60:	80 e0       	ldi	r24, 0x00	; 0
    bb62:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    bb64:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < 4) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    bb66:	08 95       	ret

0000bb68 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    bb68:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    bb6a:	86 17       	cp	r24, r22
    bb6c:	10 f4       	brcc	.+4      	; 0xbb72 <pixel_overlap+0xa>
    bb6e:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    bb70:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    bb72:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    bb74:	26 0f       	add	r18, r22
	if (s2 < s1)
    bb76:	28 17       	cp	r18, r24
    bb78:	10 f4       	brcc	.+4      	; 0xbb7e <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    bb7a:	28 1b       	sub	r18, r24
    bb7c:	92 0f       	add	r25, r18
	}
	return result;
}
    bb7e:	89 2f       	mov	r24, r25
    bb80:	08 95       	ret

0000bb82 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    bb82:	2f 92       	push	r2
    bb84:	3f 92       	push	r3
    bb86:	4f 92       	push	r4
    bb88:	5f 92       	push	r5
    bb8a:	6f 92       	push	r6
    bb8c:	7f 92       	push	r7
    bb8e:	8f 92       	push	r8
    bb90:	9f 92       	push	r9
    bb92:	af 92       	push	r10
    bb94:	bf 92       	push	r11
    bb96:	cf 92       	push	r12
    bb98:	df 92       	push	r13
    bb9a:	ef 92       	push	r14
    bb9c:	ff 92       	push	r15
    bb9e:	0f 93       	push	r16
    bba0:	1f 93       	push	r17
    bba2:	cf 93       	push	r28
    bba4:	df 93       	push	r29
    bba6:	00 d0       	rcall	.+0      	; 0xbba8 <collision_detect_level+0x26>
    bba8:	00 d0       	rcall	.+0      	; 0xbbaa <collision_detect_level+0x28>
    bbaa:	00 d0       	rcall	.+0      	; 0xbbac <collision_detect_level+0x2a>
    bbac:	cd b7       	in	r28, 0x3d	; 61
    bbae:	de b7       	in	r29, 0x3e	; 62
    bbb0:	9e 83       	std	Y+6, r25	; 0x06
    bbb2:	8d 83       	std	Y+5, r24	; 0x05
    bbb4:	56 2e       	mov	r5, r22
    bbb6:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    bbb8:	fc 01       	movw	r30, r24
    bbba:	a0 80       	ld	r10, Z
    bbbc:	b1 80       	ldd	r11, Z+1	; 0x01
    bbbe:	75 01       	movw	r14, r10
    bbc0:	13 e0       	ldi	r17, 0x03	; 3
    bbc2:	f6 94       	lsr	r15
    bbc4:	e7 94       	ror	r14
    bbc6:	1a 95       	dec	r17
    bbc8:	e1 f7       	brne	.-8      	; 0xbbc2 <collision_detect_level+0x40>
    bbca:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    bbcc:	c2 80       	ldd	r12, Z+2	; 0x02
    bbce:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    bbd0:	84 81       	ldd	r24, Z+4	; 0x04
    bbd2:	88 23       	and	r24, r24
    bbd4:	09 f4       	brne	.+2      	; 0xbbd8 <collision_detect_level+0x56>
    bbd6:	e1 c0       	rjmp	.+450    	; 0xbd9a <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    bbd8:	e3 e0       	ldi	r30, 0x03	; 3
    bbda:	d6 94       	lsr	r13
    bbdc:	c7 94       	ror	r12
    bbde:	ea 95       	dec	r30
    bbe0:	e1 f7       	brne	.-8      	; 0xbbda <collision_detect_level+0x58>
    bbe2:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    bbe4:	f7 e0       	ldi	r31, 0x07	; 7
    bbe6:	af 0e       	add	r10, r31
    bbe8:	b1 1c       	adc	r11, r1
    bbea:	f3 e0       	ldi	r31, 0x03	; 3
    bbec:	b6 94       	lsr	r11
    bbee:	a7 94       	ror	r10
    bbf0:	fa 95       	dec	r31
    bbf2:	e1 f7       	brne	.-8      	; 0xbbec <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    bbf4:	8e 2d       	mov	r24, r14
    bbf6:	88 0f       	add	r24, r24
    bbf8:	88 0f       	add	r24, r24
    bbfa:	88 0f       	add	r24, r24
    bbfc:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bbfe:	2a 2c       	mov	r2, r10
    bc00:	22 0c       	add	r2, r2
    bc02:	22 0c       	add	r2, r2
    bc04:	22 0c       	add	r2, r2
    bc06:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    bc08:	46 01       	movw	r8, r12
    bc0a:	9f ef       	ldi	r25, 0xFF	; 255
    bc0c:	89 1a       	sub	r8, r25
    bc0e:	99 0a       	sbc	r9, r25
    bc10:	a3 e0       	ldi	r26, 0x03	; 3
    bc12:	88 0c       	add	r8, r8
    bc14:	99 1c       	adc	r9, r9
    bc16:	aa 95       	dec	r26
    bc18:	e1 f7       	brne	.-8      	; 0xbc12 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    bc1a:	e8 e0       	ldi	r30, 0x08	; 8
    bc1c:	4e 9f       	mul	r20, r30
    bc1e:	30 01       	movw	r6, r0
    bc20:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    bc22:	b3 e0       	ldi	r27, 0x03	; 3
    bc24:	cc 0c       	add	r12, r12
    bc26:	dd 1c       	adc	r13, r13
    bc28:	ba 95       	dec	r27
    bc2a:	e1 f7       	brne	.-8      	; 0xbc24 <collision_detect_level+0xa2>
    bc2c:	41 2c       	mov	r4, r1
    bc2e:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bc30:	45 14       	cp	r4, r5
    bc32:	09 f4       	brne	.+2      	; 0xbc36 <collision_detect_level+0xb4>
    bc34:	b3 c0       	rjmp	.+358    	; 0xbd9c <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    bc36:	ed 81       	ldd	r30, Y+5	; 0x05
    bc38:	fe 81       	ldd	r31, Y+6	; 0x06
    bc3a:	84 81       	ldd	r24, Z+4	; 0x04
    bc3c:	87 ff       	sbrs	r24, 7
    bc3e:	47 c0       	rjmp	.+142    	; 0xbcce <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    bc40:	49 81       	ldd	r20, Y+1	; 0x01
    bc42:	64 2d       	mov	r22, r4
    bc44:	6e 0d       	add	r22, r14
    bc46:	80 91 cf 0f 	lds	r24, 0x0FCF
    bc4a:	90 91 d0 0f 	lds	r25, 0x0FD0
    bc4e:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    bc52:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    bc54:	49 81       	ldd	r20, Y+1	; 0x01
    bc56:	64 2d       	mov	r22, r4
    bc58:	6a 0d       	add	r22, r10
    bc5a:	80 91 cf 0f 	lds	r24, 0x0FCF
    bc5e:	90 91 d0 0f 	lds	r25, 0x0FD0
    bc62:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    bc66:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bc68:	83 2d       	mov	r24, r3
    bc6a:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    bc6e:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bc70:	80 2f       	mov	r24, r16
    bc72:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    bc76:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    bc78:	33 20       	and	r3, r3
    bc7a:	71 f0       	breq	.+28     	; 0xbc98 <collision_detect_level+0x116>
    bc7c:	30 91 b2 0d 	lds	r19, 0x0DB2
    bc80:	6b 81       	ldd	r22, Y+3	; 0x03
    bc82:	63 1b       	sub	r22, r19
    bc84:	ed 81       	ldd	r30, Y+5	; 0x05
    bc86:	fe 81       	ldd	r31, Y+6	; 0x06
    bc88:	80 81       	ld	r24, Z
    bc8a:	28 e0       	ldi	r18, 0x08	; 8
    bc8c:	48 e0       	ldi	r20, 0x08	; 8
    bc8e:	83 1b       	sub	r24, r19
    bc90:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    bc94:	84 30       	cpi	r24, 0x04	; 4
    bc96:	80 f4       	brcc	.+32     	; 0xbcb8 <collision_detect_level+0x136>
    bc98:	00 23       	and	r16, r16
    bc9a:	c9 f0       	breq	.+50     	; 0xbcce <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bc9c:	30 91 b2 0d 	lds	r19, 0x0DB2
    bca0:	62 2d       	mov	r22, r2
    bca2:	63 1b       	sub	r22, r19
    bca4:	ed 81       	ldd	r30, Y+5	; 0x05
    bca6:	fe 81       	ldd	r31, Y+6	; 0x06
    bca8:	80 81       	ld	r24, Z
    bcaa:	28 e0       	ldi	r18, 0x08	; 8
    bcac:	48 e0       	ldi	r20, 0x08	; 8
    bcae:	83 1b       	sub	r24, r19
    bcb0:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    bcb4:	84 30       	cpi	r24, 0x04	; 4
    bcb6:	58 f0       	brcs	.+22     	; 0xbcce <collision_detect_level+0x14c>
				{
					s->vy =  0;
    bcb8:	ed 81       	ldd	r30, Y+5	; 0x05
    bcba:	fe 81       	ldd	r31, Y+6	; 0x06
    bcbc:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    bcbe:	93 82       	std	Z+3, r9	; 0x03
    bcc0:	82 82       	std	Z+2, r8	; 0x02
    bcc2:	30 16       	cp	r3, r16
    bcc4:	08 f4       	brcc	.+2      	; 0xbcc8 <collision_detect_level+0x146>
    bcc6:	30 2e       	mov	r3, r16
    bcc8:	13 15       	cp	r17, r3
    bcca:	08 f4       	brcc	.+2      	; 0xbcce <collision_detect_level+0x14c>
    bccc:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    bcce:	ed 81       	ldd	r30, Y+5	; 0x05
    bcd0:	fe 81       	ldd	r31, Y+6	; 0x06
    bcd2:	84 81       	ldd	r24, Z+4	; 0x04
    bcd4:	18 16       	cp	r1, r24
    bcd6:	0c f0       	brlt	.+2      	; 0xbcda <collision_detect_level+0x158>
    bcd8:	5e c0       	rjmp	.+188    	; 0xbd96 <collision_detect_level+0x214>
    bcda:	42 81       	ldd	r20, Z+2	; 0x02
    bcdc:	53 81       	ldd	r21, Z+3	; 0x03
    bcde:	41 50       	subi	r20, 0x01	; 1
    bce0:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    bce2:	46 0d       	add	r20, r6
    bce4:	57 1d       	adc	r21, r7
    bce6:	63 e0       	ldi	r22, 0x03	; 3
    bce8:	56 95       	lsr	r21
    bcea:	47 95       	ror	r20
    bcec:	6a 95       	dec	r22
    bcee:	e1 f7       	brne	.-8      	; 0xbce8 <collision_detect_level+0x166>
    bcf0:	64 2d       	mov	r22, r4
    bcf2:	6e 0d       	add	r22, r14
    bcf4:	80 91 cf 0f 	lds	r24, 0x0FCF
    bcf8:	90 91 d0 0f 	lds	r25, 0x0FD0
    bcfc:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    bd00:	38 2e       	mov	r3, r24
    bd02:	ed 81       	ldd	r30, Y+5	; 0x05
    bd04:	fe 81       	ldd	r31, Y+6	; 0x06
    bd06:	42 81       	ldd	r20, Z+2	; 0x02
    bd08:	53 81       	ldd	r21, Z+3	; 0x03
    bd0a:	41 50       	subi	r20, 0x01	; 1
    bd0c:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    bd0e:	46 0d       	add	r20, r6
    bd10:	57 1d       	adc	r21, r7
    bd12:	73 e0       	ldi	r23, 0x03	; 3
    bd14:	56 95       	lsr	r21
    bd16:	47 95       	ror	r20
    bd18:	7a 95       	dec	r23
    bd1a:	e1 f7       	brne	.-8      	; 0xbd14 <collision_detect_level+0x192>
    bd1c:	64 2d       	mov	r22, r4
    bd1e:	6a 0d       	add	r22, r10
    bd20:	80 91 cf 0f 	lds	r24, 0x0FCF
    bd24:	90 91 d0 0f 	lds	r25, 0x0FD0
    bd28:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    bd2c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bd2e:	83 2d       	mov	r24, r3
    bd30:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    bd34:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bd36:	80 2f       	mov	r24, r16
    bd38:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    bd3c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    bd3e:	33 20       	and	r3, r3
    bd40:	71 f0       	breq	.+28     	; 0xbd5e <collision_detect_level+0x1dc>
    bd42:	30 91 b2 0d 	lds	r19, 0x0DB2
    bd46:	6b 81       	ldd	r22, Y+3	; 0x03
    bd48:	63 1b       	sub	r22, r19
    bd4a:	ed 81       	ldd	r30, Y+5	; 0x05
    bd4c:	fe 81       	ldd	r31, Y+6	; 0x06
    bd4e:	80 81       	ld	r24, Z
    bd50:	28 e0       	ldi	r18, 0x08	; 8
    bd52:	48 e0       	ldi	r20, 0x08	; 8
    bd54:	83 1b       	sub	r24, r19
    bd56:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    bd5a:	84 30       	cpi	r24, 0x04	; 4
    bd5c:	80 f4       	brcc	.+32     	; 0xbd7e <collision_detect_level+0x1fc>
    bd5e:	00 23       	and	r16, r16
    bd60:	d1 f0       	breq	.+52     	; 0xbd96 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bd62:	30 91 b2 0d 	lds	r19, 0x0DB2
    bd66:	62 2d       	mov	r22, r2
    bd68:	63 1b       	sub	r22, r19
    bd6a:	ed 81       	ldd	r30, Y+5	; 0x05
    bd6c:	fe 81       	ldd	r31, Y+6	; 0x06
    bd6e:	80 81       	ld	r24, Z
    bd70:	28 e0       	ldi	r18, 0x08	; 8
    bd72:	48 e0       	ldi	r20, 0x08	; 8
    bd74:	83 1b       	sub	r24, r19
    bd76:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    bd7a:	84 30       	cpi	r24, 0x04	; 4
    bd7c:	60 f0       	brcs	.+24     	; 0xbd96 <collision_detect_level+0x214>
				{
					s->vy =  0;
    bd7e:	ed 81       	ldd	r30, Y+5	; 0x05
    bd80:	fe 81       	ldd	r31, Y+6	; 0x06
    bd82:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    bd84:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    bd86:	d3 82       	std	Z+3, r13	; 0x03
    bd88:	c2 82       	std	Z+2, r12	; 0x02
    bd8a:	30 16       	cp	r3, r16
    bd8c:	08 f4       	brcc	.+2      	; 0xbd90 <collision_detect_level+0x20e>
    bd8e:	30 2e       	mov	r3, r16
    bd90:	13 15       	cp	r17, r3
    bd92:	08 f4       	brcc	.+2      	; 0xbd96 <collision_detect_level+0x214>
    bd94:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bd96:	43 94       	inc	r4
    bd98:	4b cf       	rjmp	.-362    	; 0xbc30 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    bd9a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    bd9c:	ed 81       	ldd	r30, Y+5	; 0x05
    bd9e:	fe 81       	ldd	r31, Y+6	; 0x06
    bda0:	85 81       	ldd	r24, Z+5	; 0x05
    bda2:	88 23       	and	r24, r24
    bda4:	09 f4       	brne	.+2      	; 0xbda8 <collision_detect_level+0x226>
    bda6:	e1 c0       	rjmp	.+450    	; 0xbf6a <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    bda8:	c2 80       	ldd	r12, Z+2	; 0x02
    bdaa:	d3 80       	ldd	r13, Z+3	; 0x03
    bdac:	56 01       	movw	r10, r12
    bdae:	23 e0       	ldi	r18, 0x03	; 3
    bdb0:	b6 94       	lsr	r11
    bdb2:	a7 94       	ror	r10
    bdb4:	2a 95       	dec	r18
    bdb6:	e1 f7       	brne	.-8      	; 0xbdb0 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    bdb8:	f7 e0       	ldi	r31, 0x07	; 7
    bdba:	cf 0e       	add	r12, r31
    bdbc:	d1 1c       	adc	r13, r1
    bdbe:	33 e0       	ldi	r19, 0x03	; 3
    bdc0:	d6 94       	lsr	r13
    bdc2:	c7 94       	ror	r12
    bdc4:	3a 95       	dec	r19
    bdc6:	e1 f7       	brne	.-8      	; 0xbdc0 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bdc8:	3a 2c       	mov	r3, r10
    bdca:	33 0c       	add	r3, r3
    bdcc:	33 0c       	add	r3, r3
    bdce:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bdd0:	4c 2c       	mov	r4, r12
    bdd2:	44 0c       	add	r4, r4
    bdd4:	44 0c       	add	r4, r4
    bdd6:	44 0c       	add	r4, r4
    bdd8:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    bdda:	37 01       	movw	r6, r14
    bddc:	8f ef       	ldi	r24, 0xFF	; 255
    bdde:	68 1a       	sub	r6, r24
    bde0:	78 0a       	sbc	r7, r24
    bde2:	43 e0       	ldi	r20, 0x03	; 3
    bde4:	66 0c       	add	r6, r6
    bde6:	77 1c       	adc	r7, r7
    bde8:	4a 95       	dec	r20
    bdea:	e1 f7       	brne	.-8      	; 0xbde4 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bdec:	98 e0       	ldi	r25, 0x08	; 8
    bdee:	59 9e       	mul	r5, r25
    bdf0:	40 01       	movw	r8, r0
    bdf2:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    bdf4:	53 e0       	ldi	r21, 0x03	; 3
    bdf6:	ee 0c       	add	r14, r14
    bdf8:	ff 1c       	adc	r15, r15
    bdfa:	5a 95       	dec	r21
    bdfc:	e1 f7       	brne	.-8      	; 0xbdf6 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bdfe:	51 2c       	mov	r5, r1
    be00:	fc 81       	ldd	r31, Y+4	; 0x04
    be02:	5f 16       	cp	r5, r31
    be04:	09 f4       	brne	.+2      	; 0xbe08 <collision_detect_level+0x286>
    be06:	b1 c0       	rjmp	.+354    	; 0xbf6a <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    be08:	ed 81       	ldd	r30, Y+5	; 0x05
    be0a:	fe 81       	ldd	r31, Y+6	; 0x06
    be0c:	85 81       	ldd	r24, Z+5	; 0x05
    be0e:	87 ff       	sbrs	r24, 7
    be10:	47 c0       	rjmp	.+142    	; 0xbea0 <collision_detect_level+0x31e>
    be12:	45 2d       	mov	r20, r5
    be14:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    be16:	6a 81       	ldd	r22, Y+2	; 0x02
    be18:	80 91 cf 0f 	lds	r24, 0x0FCF
    be1c:	90 91 d0 0f 	lds	r25, 0x0FD0
    be20:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    be24:	28 2e       	mov	r2, r24
    be26:	45 2d       	mov	r20, r5
    be28:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    be2a:	6a 81       	ldd	r22, Y+2	; 0x02
    be2c:	80 91 cf 0f 	lds	r24, 0x0FCF
    be30:	90 91 d0 0f 	lds	r25, 0x0FD0
    be34:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    be38:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    be3a:	82 2d       	mov	r24, r2
    be3c:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    be40:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    be42:	80 2f       	mov	r24, r16
    be44:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    be48:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    be4a:	22 20       	and	r2, r2
    be4c:	71 f0       	breq	.+28     	; 0xbe6a <collision_detect_level+0x2e8>
    be4e:	30 91 ba 0d 	lds	r19, 0x0DBA
    be52:	63 2d       	mov	r22, r3
    be54:	63 1b       	sub	r22, r19
    be56:	ed 81       	ldd	r30, Y+5	; 0x05
    be58:	fe 81       	ldd	r31, Y+6	; 0x06
    be5a:	82 81       	ldd	r24, Z+2	; 0x02
    be5c:	28 e0       	ldi	r18, 0x08	; 8
    be5e:	48 e0       	ldi	r20, 0x08	; 8
    be60:	83 1b       	sub	r24, r19
    be62:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    be66:	84 30       	cpi	r24, 0x04	; 4
    be68:	80 f4       	brcc	.+32     	; 0xbe8a <collision_detect_level+0x308>
    be6a:	00 23       	and	r16, r16
    be6c:	c9 f0       	breq	.+50     	; 0xbea0 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    be6e:	30 91 ba 0d 	lds	r19, 0x0DBA
    be72:	64 2d       	mov	r22, r4
    be74:	63 1b       	sub	r22, r19
    be76:	ed 81       	ldd	r30, Y+5	; 0x05
    be78:	fe 81       	ldd	r31, Y+6	; 0x06
    be7a:	82 81       	ldd	r24, Z+2	; 0x02
    be7c:	28 e0       	ldi	r18, 0x08	; 8
    be7e:	48 e0       	ldi	r20, 0x08	; 8
    be80:	83 1b       	sub	r24, r19
    be82:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    be86:	84 30       	cpi	r24, 0x04	; 4
    be88:	58 f0       	brcs	.+22     	; 0xbea0 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    be8a:	ed 81       	ldd	r30, Y+5	; 0x05
    be8c:	fe 81       	ldd	r31, Y+6	; 0x06
    be8e:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    be90:	71 82       	std	Z+1, r7	; 0x01
    be92:	60 82       	st	Z, r6
    be94:	20 16       	cp	r2, r16
    be96:	08 f4       	brcc	.+2      	; 0xbe9a <collision_detect_level+0x318>
    be98:	20 2e       	mov	r2, r16
    be9a:	12 15       	cp	r17, r2
    be9c:	08 f4       	brcc	.+2      	; 0xbea0 <collision_detect_level+0x31e>
    be9e:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    bea0:	ed 81       	ldd	r30, Y+5	; 0x05
    bea2:	fe 81       	ldd	r31, Y+6	; 0x06
    bea4:	85 81       	ldd	r24, Z+5	; 0x05
    bea6:	18 16       	cp	r1, r24
    bea8:	0c f0       	brlt	.+2      	; 0xbeac <collision_detect_level+0x32a>
    beaa:	5d c0       	rjmp	.+186    	; 0xbf66 <collision_detect_level+0x3e4>
    beac:	60 81       	ld	r22, Z
    beae:	71 81       	ldd	r23, Z+1	; 0x01
    beb0:	61 50       	subi	r22, 0x01	; 1
    beb2:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    beb4:	68 0d       	add	r22, r8
    beb6:	79 1d       	adc	r23, r9
    beb8:	83 e0       	ldi	r24, 0x03	; 3
    beba:	76 95       	lsr	r23
    bebc:	67 95       	ror	r22
    bebe:	8a 95       	dec	r24
    bec0:	e1 f7       	brne	.-8      	; 0xbeba <collision_detect_level+0x338>
    bec2:	45 2d       	mov	r20, r5
    bec4:	4a 0d       	add	r20, r10
    bec6:	80 91 cf 0f 	lds	r24, 0x0FCF
    beca:	90 91 d0 0f 	lds	r25, 0x0FD0
    bece:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    bed2:	28 2e       	mov	r2, r24
    bed4:	ed 81       	ldd	r30, Y+5	; 0x05
    bed6:	fe 81       	ldd	r31, Y+6	; 0x06
    bed8:	60 81       	ld	r22, Z
    beda:	71 81       	ldd	r23, Z+1	; 0x01
    bedc:	61 50       	subi	r22, 0x01	; 1
    bede:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bee0:	68 0d       	add	r22, r8
    bee2:	79 1d       	adc	r23, r9
    bee4:	93 e0       	ldi	r25, 0x03	; 3
    bee6:	76 95       	lsr	r23
    bee8:	67 95       	ror	r22
    beea:	9a 95       	dec	r25
    beec:	e1 f7       	brne	.-8      	; 0xbee6 <collision_detect_level+0x364>
    beee:	45 2d       	mov	r20, r5
    bef0:	4c 0d       	add	r20, r12
    bef2:	80 91 cf 0f 	lds	r24, 0x0FCF
    bef6:	90 91 d0 0f 	lds	r25, 0x0FD0
    befa:	0e 94 26 5a 	call	0xb44c	; 0xb44c <get_level_tile>
    befe:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bf00:	82 2d       	mov	r24, r2
    bf02:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    bf06:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bf08:	80 2f       	mov	r24, r16
    bf0a:	0e 94 3b 5b 	call	0xb676	; 0xb676 <solid_or_hazard_tile>
    bf0e:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bf10:	22 20       	and	r2, r2
    bf12:	71 f0       	breq	.+28     	; 0xbf30 <collision_detect_level+0x3ae>
    bf14:	30 91 ba 0d 	lds	r19, 0x0DBA
    bf18:	63 2d       	mov	r22, r3
    bf1a:	63 1b       	sub	r22, r19
    bf1c:	ed 81       	ldd	r30, Y+5	; 0x05
    bf1e:	fe 81       	ldd	r31, Y+6	; 0x06
    bf20:	82 81       	ldd	r24, Z+2	; 0x02
    bf22:	28 e0       	ldi	r18, 0x08	; 8
    bf24:	48 e0       	ldi	r20, 0x08	; 8
    bf26:	83 1b       	sub	r24, r19
    bf28:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    bf2c:	84 30       	cpi	r24, 0x04	; 4
    bf2e:	80 f4       	brcc	.+32     	; 0xbf50 <collision_detect_level+0x3ce>
    bf30:	00 23       	and	r16, r16
    bf32:	c9 f0       	breq	.+50     	; 0xbf66 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bf34:	30 91 ba 0d 	lds	r19, 0x0DBA
    bf38:	64 2d       	mov	r22, r4
    bf3a:	63 1b       	sub	r22, r19
    bf3c:	ed 81       	ldd	r30, Y+5	; 0x05
    bf3e:	fe 81       	ldd	r31, Y+6	; 0x06
    bf40:	82 81       	ldd	r24, Z+2	; 0x02
    bf42:	28 e0       	ldi	r18, 0x08	; 8
    bf44:	48 e0       	ldi	r20, 0x08	; 8
    bf46:	83 1b       	sub	r24, r19
    bf48:	0e 94 b4 5d 	call	0xbb68	; 0xbb68 <pixel_overlap>
    bf4c:	84 30       	cpi	r24, 0x04	; 4
    bf4e:	58 f0       	brcs	.+22     	; 0xbf66 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    bf50:	ed 81       	ldd	r30, Y+5	; 0x05
    bf52:	fe 81       	ldd	r31, Y+6	; 0x06
    bf54:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    bf56:	f1 82       	std	Z+1, r15	; 0x01
    bf58:	e0 82       	st	Z, r14
    bf5a:	20 16       	cp	r2, r16
    bf5c:	08 f4       	brcc	.+2      	; 0xbf60 <collision_detect_level+0x3de>
    bf5e:	20 2e       	mov	r2, r16
    bf60:	12 15       	cp	r17, r2
    bf62:	08 f4       	brcc	.+2      	; 0xbf66 <collision_detect_level+0x3e4>
    bf64:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bf66:	53 94       	inc	r5
    bf68:	4b cf       	rjmp	.-362    	; 0xbe00 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    bf6a:	81 2f       	mov	r24, r17
    bf6c:	26 96       	adiw	r28, 0x06	; 6
    bf6e:	0f b6       	in	r0, 0x3f	; 63
    bf70:	f8 94       	cli
    bf72:	de bf       	out	0x3e, r29	; 62
    bf74:	0f be       	out	0x3f, r0	; 63
    bf76:	cd bf       	out	0x3d, r28	; 61
    bf78:	df 91       	pop	r29
    bf7a:	cf 91       	pop	r28
    bf7c:	1f 91       	pop	r17
    bf7e:	0f 91       	pop	r16
    bf80:	ff 90       	pop	r15
    bf82:	ef 90       	pop	r14
    bf84:	df 90       	pop	r13
    bf86:	cf 90       	pop	r12
    bf88:	bf 90       	pop	r11
    bf8a:	af 90       	pop	r10
    bf8c:	9f 90       	pop	r9
    bf8e:	8f 90       	pop	r8
    bf90:	7f 90       	pop	r7
    bf92:	6f 90       	pop	r6
    bf94:	5f 90       	pop	r5
    bf96:	4f 90       	pop	r4
    bf98:	3f 90       	pop	r3
    bf9a:	2f 90       	pop	r2
    bf9c:	08 95       	ret

0000bf9e <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    bf9e:	2f 92       	push	r2
    bfa0:	3f 92       	push	r3
    bfa2:	4f 92       	push	r4
    bfa4:	5f 92       	push	r5
    bfa6:	6f 92       	push	r6
    bfa8:	7f 92       	push	r7
    bfaa:	8f 92       	push	r8
    bfac:	9f 92       	push	r9
    bfae:	af 92       	push	r10
    bfb0:	bf 92       	push	r11
    bfb2:	cf 92       	push	r12
    bfb4:	df 92       	push	r13
    bfb6:	ef 92       	push	r14
    bfb8:	ff 92       	push	r15
    bfba:	0f 93       	push	r16
    bfbc:	1f 93       	push	r17
    bfbe:	cf 93       	push	r28
    bfc0:	df 93       	push	r29
    bfc2:	00 d0       	rcall	.+0      	; 0xbfc4 <animate_shot+0x26>
    bfc4:	00 d0       	rcall	.+0      	; 0xbfc6 <animate_shot+0x28>
    bfc6:	00 d0       	rcall	.+0      	; 0xbfc8 <animate_shot+0x2a>
    bfc8:	cd b7       	in	r28, 0x3d	; 61
    bfca:	de b7       	in	r29, 0x3e	; 62
    bfcc:	2c 01       	movw	r4, r24
    bfce:	3b 01       	movw	r6, r22
    bfd0:	d4 2e       	mov	r13, r20
    bfd2:	4c 01       	movw	r8, r24
    bfd4:	29 e1       	ldi	r18, 0x19	; 25
    bfd6:	82 0e       	add	r8, r18
    bfd8:	91 1c       	adc	r9, r1
    bfda:	40 96       	adiw	r24, 0x10	; 16
    bfdc:	9e 83       	std	Y+6, r25	; 0x06
    bfde:	8d 83       	std	Y+5, r24	; 0x05
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bfe0:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    bfe2:	30 e1       	ldi	r19, 0x10	; 16
    bfe4:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bfe6:	f4 01       	movw	r30, r8
    bfe8:	80 81       	ld	r24, Z
    bfea:	88 23       	and	r24, r24
    bfec:	09 f4       	brne	.+2      	; 0xbff0 <animate_shot+0x52>
    bfee:	13 c1       	rjmp	.+550    	; 0xc216 <animate_shot+0x278>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bff0:	60 91 cc 0d 	lds	r22, 0x0DCC
    bff4:	34 97       	sbiw	r30, 0x04	; 4
    bff6:	80 81       	ld	r24, Z
    bff8:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    bffc:	88 0f       	add	r24, r24
    bffe:	99 1f       	adc	r25, r25
    c000:	ed 81       	ldd	r30, Y+5	; 0x05
    c002:	fe 81       	ldd	r31, Y+6	; 0x06
    c004:	20 81       	ld	r18, Z
    c006:	31 81       	ldd	r19, Z+1	; 0x01
    c008:	82 0f       	add	r24, r18
    c00a:	93 1f       	adc	r25, r19
    c00c:	91 83       	std	Z+1, r25	; 0x01
    c00e:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    c010:	60 91 cc 0d 	lds	r22, 0x0DCC
    c014:	f4 01       	movw	r30, r8
    c016:	35 97       	sbiw	r30, 0x05	; 5
    c018:	80 81       	ld	r24, Z
    c01a:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    c01e:	ed 81       	ldd	r30, Y+5	; 0x05
    c020:	fe 81       	ldd	r31, Y+6	; 0x06
    c022:	42 81       	ldd	r20, Z+2	; 0x02
    c024:	53 81       	ldd	r21, Z+3	; 0x03
    c026:	84 0f       	add	r24, r20
    c028:	95 1f       	adc	r25, r21
    c02a:	93 83       	std	Z+3, r25	; 0x03
    c02c:	82 83       	std	Z+2, r24	; 0x02
    c02e:	f1 2e       	mov	r15, r17
    c030:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    c032:	90 91 ba 0d 	lds	r25, 0x0DBA
    c036:	48 2f       	mov	r20, r24
    c038:	49 1b       	sub	r20, r25
    c03a:	60 81       	ld	r22, Z
    c03c:	80 91 b2 0d 	lds	r24, 0x0DB2
    c040:	68 1b       	sub	r22, r24
    c042:	01 e0       	ldi	r16, 0x01	; 1
    c044:	21 e0       	ldi	r18, 0x01	; 1
    c046:	8f 2d       	mov	r24, r15
    c048:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    c04c:	8d 81       	ldd	r24, Y+5	; 0x05
    c04e:	9e 81       	ldd	r25, Y+6	; 0x06
    c050:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <out_of_bounds>
    c054:	81 11       	cpse	r24, r1
    c056:	d2 c0       	rjmp	.+420    	; 0xc1fc <animate_shot+0x25e>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    c058:	41 e0       	ldi	r20, 0x01	; 1
    c05a:	61 e0       	ldi	r22, 0x01	; 1
    c05c:	8d 81       	ldd	r24, Y+5	; 0x05
    c05e:	9e 81       	ldd	r25, Y+6	; 0x06
    c060:	0e 94 c1 5d 	call	0xbb82	; 0xbb82 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    c064:	81 11       	cpse	r24, r1
    c066:	ca c0       	rjmp	.+404    	; 0xc1fc <animate_shot+0x25e>
    c068:	86 ed       	ldi	r24, 0xD6	; 214
    c06a:	28 2e       	mov	r2, r24
    c06c:	8e e0       	ldi	r24, 0x0E	; 14
    c06e:	38 2e       	mov	r3, r24
    c070:	1a 82       	std	Y+2, r1	; 0x02
    c072:	19 82       	std	Y+1, r1	; 0x01
    c074:	94 01       	movw	r18, r8
    c076:	21 50       	subi	r18, 0x01	; 1
    c078:	31 09       	sbc	r19, r1
    c07a:	3c 83       	std	Y+4, r19	; 0x04
    c07c:	2b 83       	std	Y+3, r18	; 0x03
    c07e:	f1 01       	movw	r30, r2
    c080:	34 97       	sbiw	r30, 0x04	; 4
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c082:	80 81       	ld	r24, Z
    c084:	82 30       	cpi	r24, 0x02	; 2
    c086:	09 f4       	brne	.+2      	; 0xc08a <animate_shot+0xec>
    c088:	65 c0       	rjmp	.+202    	; 0xc154 <animate_shot+0x1b6>
    c08a:	35 97       	sbiw	r30, 0x05	; 5
    c08c:	80 81       	ld	r24, Z
    c08e:	88 23       	and	r24, r24
    c090:	09 f4       	brne	.+2      	; 0xc094 <animate_shot+0xf6>
    c092:	60 c0       	rjmp	.+192    	; 0xc154 <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c094:	90 91 b2 0d 	lds	r25, 0x0DB2
    c098:	34 96       	adiw	r30, 0x04	; 4
    c09a:	a0 80       	ld	r10, Z
    c09c:	aa 0c       	add	r10, r10
    c09e:	aa 0c       	add	r10, r10
    c0a0:	aa 0c       	add	r10, r10
    c0a2:	31 97       	sbiw	r30, 0x01	; 1
    c0a4:	c0 80       	ld	r12, Z
    c0a6:	cc 0c       	add	r12, r12
    c0a8:	cc 0c       	add	r12, r12
    c0aa:	cc 0c       	add	r12, r12
    c0ac:	3a 97       	sbiw	r30, 0x0a	; 10
    c0ae:	00 81       	ld	r16, Z
    c0b0:	09 1b       	sub	r16, r25
    c0b2:	ed 81       	ldd	r30, Y+5	; 0x05
    c0b4:	fe 81       	ldd	r31, Y+6	; 0x06
    c0b6:	80 81       	ld	r24, Z
    c0b8:	f1 01       	movw	r30, r2
    c0ba:	3e 97       	sbiw	r30, 0x0e	; 14
    c0bc:	e0 80       	ld	r14, Z
    c0be:	28 e0       	ldi	r18, 0x08	; 8
    c0c0:	48 e0       	ldi	r20, 0x08	; 8
    c0c2:	ed 81       	ldd	r30, Y+5	; 0x05
    c0c4:	fe 81       	ldd	r31, Y+6	; 0x06
    c0c6:	62 81       	ldd	r22, Z+2	; 0x02
    c0c8:	89 1b       	sub	r24, r25
    c0ca:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c0ce:	88 23       	and	r24, r24
    c0d0:	09 f4       	brne	.+2      	; 0xc0d4 <animate_shot+0x136>
    c0d2:	40 c0       	rjmp	.+128    	; 0xc154 <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    c0d4:	41 e0       	ldi	r20, 0x01	; 1
    c0d6:	6f ef       	ldi	r22, 0xFF	; 255
    c0d8:	84 e0       	ldi	r24, 0x04	; 4
    c0da:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    c0de:	f1 01       	movw	r30, r2
    c0e0:	80 81       	ld	r24, Z
    c0e2:	eb 81       	ldd	r30, Y+3	; 0x03
    c0e4:	fc 81       	ldd	r31, Y+4	; 0x04
    c0e6:	90 81       	ld	r25, Z
    c0e8:	89 1b       	sub	r24, r25
    c0ea:	f1 01       	movw	r30, r2
    c0ec:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    c0ee:	18 16       	cp	r1, r24
    c0f0:	24 f1       	brlt	.+72     	; 0xc13a <animate_shot+0x19c>
						{
							SFX_ENEMY_EXPLODE;
    c0f2:	41 e0       	ldi	r20, 0x01	; 1
    c0f4:	6f ef       	ldi	r22, 0xFF	; 255
    c0f6:	86 e0       	ldi	r24, 0x06	; 6
    c0f8:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    c0fc:	45 e3       	ldi	r20, 0x35	; 53
    c0fe:	29 81       	ldd	r18, Y+1	; 0x01
    c100:	3a 81       	ldd	r19, Y+2	; 0x02
    c102:	42 9f       	mul	r20, r18
    c104:	c0 01       	movw	r24, r0
    c106:	43 9f       	mul	r20, r19
    c108:	90 0d       	add	r25, r0
    c10a:	11 24       	eor	r1, r1
    c10c:	8e 54       	subi	r24, 0x4E	; 78
    c10e:	92 4f       	sbci	r25, 0xF2	; 242
    c110:	fc 01       	movw	r30, r24
    c112:	e4 5e       	subi	r30, 0xE4	; 228
    c114:	fe 4f       	sbci	r31, 0xFE	; 254
    c116:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    c118:	31 97       	sbiw	r30, 0x01	; 1
    c11a:	10 82       	st	Z, r1
							game.active_enemies--;
    c11c:	80 91 cd 0d 	lds	r24, 0x0DCD
    c120:	81 50       	subi	r24, 0x01	; 1
    c122:	80 93 cd 0d 	sts	0x0DCD, r24
							game.level_score += KILL_SCORE;
    c126:	80 91 b6 0d 	lds	r24, 0x0DB6
    c12a:	90 91 b7 0d 	lds	r25, 0x0DB7
    c12e:	0a 96       	adiw	r24, 0x0a	; 10
    c130:	90 93 b7 0d 	sts	0x0DB7, r25
    c134:	80 93 b6 0d 	sts	0x0DB6, r24
							break;
    c138:	1b c0       	rjmp	.+54     	; 0xc170 <animate_shot+0x1d2>
						}
						player->shot[i].active = 0;
    c13a:	f4 01       	movw	r30, r8
    c13c:	10 82       	st	Z, r1
						player->active_shots--;
    c13e:	f2 01       	movw	r30, r4
    c140:	87 81       	ldd	r24, Z+7	; 0x07
    c142:	81 50       	subi	r24, 0x01	; 1
    c144:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c146:	01 e0       	ldi	r16, 0x01	; 1
    c148:	21 e0       	ldi	r18, 0x01	; 1
    c14a:	40 e0       	ldi	r20, 0x00	; 0
    c14c:	60 ee       	ldi	r22, 0xE0	; 224
    c14e:	8f 2d       	mov	r24, r15
    c150:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    c154:	29 81       	ldd	r18, Y+1	; 0x01
    c156:	3a 81       	ldd	r19, Y+2	; 0x02
    c158:	2f 5f       	subi	r18, 0xFF	; 255
    c15a:	3f 4f       	sbci	r19, 0xFF	; 255
    c15c:	3a 83       	std	Y+2, r19	; 0x02
    c15e:	29 83       	std	Y+1, r18	; 0x01
    c160:	35 e3       	ldi	r19, 0x35	; 53
    c162:	23 0e       	add	r2, r19
    c164:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    c166:	89 81       	ldd	r24, Y+1	; 0x01
    c168:	9a 81       	ldd	r25, Y+2	; 0x02
    c16a:	05 97       	sbiw	r24, 0x05	; 5
    c16c:	09 f0       	breq	.+2      	; 0xc170 <animate_shot+0x1d2>
    c16e:	87 cf       	rjmp	.-242    	; 0xc07e <animate_shot+0xe0>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    c170:	f3 01       	movw	r30, r6
    c172:	85 85       	ldd	r24, Z+13	; 0x0d
    c174:	88 23       	and	r24, r24
    c176:	09 f4       	brne	.+2      	; 0xc17a <animate_shot+0x1dc>
    c178:	4e c0       	rjmp	.+156    	; 0xc216 <animate_shot+0x278>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c17a:	90 91 b2 0d 	lds	r25, 0x0DB2
    c17e:	a4 84       	ldd	r10, Z+12	; 0x0c
    c180:	aa 0c       	add	r10, r10
    c182:	aa 0c       	add	r10, r10
    c184:	aa 0c       	add	r10, r10
    c186:	c3 84       	ldd	r12, Z+11	; 0x0b
    c188:	cc 0c       	add	r12, r12
    c18a:	cc 0c       	add	r12, r12
    c18c:	cc 0c       	add	r12, r12
    c18e:	00 81       	ld	r16, Z
    c190:	09 1b       	sub	r16, r25
    c192:	ed 81       	ldd	r30, Y+5	; 0x05
    c194:	fe 81       	ldd	r31, Y+6	; 0x06
    c196:	80 81       	ld	r24, Z
    c198:	f3 01       	movw	r30, r6
    c19a:	e2 80       	ldd	r14, Z+2	; 0x02
    c19c:	28 e0       	ldi	r18, 0x08	; 8
    c19e:	48 e0       	ldi	r20, 0x08	; 8
    c1a0:	ed 81       	ldd	r30, Y+5	; 0x05
    c1a2:	fe 81       	ldd	r31, Y+6	; 0x06
    c1a4:	62 81       	ldd	r22, Z+2	; 0x02
    c1a6:	89 1b       	sub	r24, r25
    c1a8:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
    c1ac:	88 23       	and	r24, r24
    c1ae:	99 f1       	breq	.+102    	; 0xc216 <animate_shot+0x278>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    c1b0:	41 e0       	ldi	r20, 0x01	; 1
    c1b2:	6f ef       	ldi	r22, 0xFF	; 255
    c1b4:	84 e0       	ldi	r24, 0x04	; 4
    c1b6:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    c1ba:	f3 01       	movw	r30, r6
    c1bc:	87 85       	ldd	r24, Z+15	; 0x0f
    c1be:	f4 01       	movw	r30, r8
    c1c0:	31 97       	sbiw	r30, 0x01	; 1
    c1c2:	90 81       	ld	r25, Z
    c1c4:	89 1b       	sub	r24, r25
    c1c6:	f3 01       	movw	r30, r6
    c1c8:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    c1ca:	18 16       	cp	r1, r24
    c1cc:	bc f0       	brlt	.+46     	; 0xc1fc <animate_shot+0x25e>
							{
								SFX_PLAYER_EXPLODE;
    c1ce:	41 e0       	ldi	r20, 0x01	; 1
    c1d0:	6f ef       	ldi	r22, 0xFF	; 255
    c1d2:	85 e0       	ldi	r24, 0x05	; 5
    c1d4:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
								other_player->shield = 0;
    c1d8:	f3 01       	movw	r30, r6
    c1da:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    c1dc:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    c1de:	fb e4       	ldi	r31, 0x4B	; 75
    c1e0:	6f 16       	cp	r6, r31
    c1e2:	fe e0       	ldi	r31, 0x0E	; 14
    c1e4:	7f 06       	cpc	r7, r31
    c1e6:	51 f4       	brne	.+20     	; 0xc1fc <animate_shot+0x25e>
    c1e8:	80 91 b6 0d 	lds	r24, 0x0DB6
    c1ec:	90 91 b7 0d 	lds	r25, 0x0DB7
    c1f0:	8c 59       	subi	r24, 0x9C	; 156
    c1f2:	9f 4f       	sbci	r25, 0xFF	; 255
    c1f4:	90 93 b7 0d 	sts	0x0DB7, r25
    c1f8:	80 93 b6 0d 	sts	0x0DB6, r24
							}
							player->shot[i].active = 0;
    c1fc:	f4 01       	movw	r30, r8
    c1fe:	10 82       	st	Z, r1
							player->active_shots--;
    c200:	f2 01       	movw	r30, r4
    c202:	87 81       	ldd	r24, Z+7	; 0x07
    c204:	81 50       	subi	r24, 0x01	; 1
    c206:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c208:	01 e0       	ldi	r16, 0x01	; 1
    c20a:	21 e0       	ldi	r18, 0x01	; 1
    c20c:	40 e0       	ldi	r20, 0x00	; 0
    c20e:	60 ee       	ldi	r22, 0xE0	; 224
    c210:	8f 2d       	mov	r24, r15
    c212:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c216:	1f 5f       	subi	r17, 0xFF	; 255
    c218:	f4 e1       	ldi	r31, 0x14	; 20
    c21a:	8f 0e       	add	r8, r31
    c21c:	91 1c       	adc	r9, r1
    c21e:	2d 81       	ldd	r18, Y+5	; 0x05
    c220:	3e 81       	ldd	r19, Y+6	; 0x06
    c222:	2c 5e       	subi	r18, 0xEC	; 236
    c224:	3f 4f       	sbci	r19, 0xFF	; 255
    c226:	3e 83       	std	Y+6, r19	; 0x06
    c228:	2d 83       	std	Y+5, r18	; 0x05
    c22a:	13 30       	cpi	r17, 0x03	; 3
    c22c:	09 f0       	breq	.+2      	; 0xc230 <animate_shot+0x292>
    c22e:	db ce       	rjmp	.-586    	; 0xbfe6 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    c230:	26 96       	adiw	r28, 0x06	; 6
    c232:	0f b6       	in	r0, 0x3f	; 63
    c234:	f8 94       	cli
    c236:	de bf       	out	0x3e, r29	; 62
    c238:	0f be       	out	0x3f, r0	; 63
    c23a:	cd bf       	out	0x3d, r28	; 61
    c23c:	df 91       	pop	r29
    c23e:	cf 91       	pop	r28
    c240:	1f 91       	pop	r17
    c242:	0f 91       	pop	r16
    c244:	ff 90       	pop	r15
    c246:	ef 90       	pop	r14
    c248:	df 90       	pop	r13
    c24a:	cf 90       	pop	r12
    c24c:	bf 90       	pop	r11
    c24e:	af 90       	pop	r10
    c250:	9f 90       	pop	r9
    c252:	8f 90       	pop	r8
    c254:	7f 90       	pop	r7
    c256:	6f 90       	pop	r6
    c258:	5f 90       	pop	r5
    c25a:	4f 90       	pop	r4
    c25c:	3f 90       	pop	r3
    c25e:	2f 90       	pop	r2
    c260:	08 95       	ret

0000c262 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c262:	7f 92       	push	r7
    c264:	8f 92       	push	r8
    c266:	9f 92       	push	r9
    c268:	af 92       	push	r10
    c26a:	bf 92       	push	r11
    c26c:	cf 92       	push	r12
    c26e:	df 92       	push	r13
    c270:	ef 92       	push	r14
    c272:	ff 92       	push	r15
    c274:	0f 93       	push	r16
    c276:	1f 93       	push	r17
    c278:	cf 93       	push	r28
    c27a:	df 93       	push	r29
    c27c:	1f 92       	push	r1
    c27e:	cd b7       	in	r28, 0x3d	; 61
    c280:	de b7       	in	r29, 0x3e	; 62
    c282:	6c 01       	movw	r12, r24
    c284:	7b 01       	movw	r14, r22
    c286:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c288:	cb 01       	movw	r24, r22
    c28a:	29 83       	std	Y+1, r18	; 0x01
    c28c:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c290:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c292:	29 81       	ldd	r18, Y+1	; 0x01
    c294:	20 9f       	mul	r18, r16
    c296:	50 01       	movw	r10, r0
    c298:	11 24       	eor	r1, r1
    c29a:	10 e0       	ldi	r17, 0x00	; 0
    c29c:	81 2f       	mov	r24, r17
    c29e:	90 e0       	ldi	r25, 0x00	; 0
    c2a0:	8a 15       	cp	r24, r10
    c2a2:	9b 05       	cpc	r25, r11
    c2a4:	54 f4       	brge	.+20     	; 0xc2ba <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c2a6:	40 e0       	ldi	r20, 0x00	; 0
    c2a8:	b4 01       	movw	r22, r8
    c2aa:	81 2f       	mov	r24, r17
    c2ac:	87 0d       	add	r24, r7
    c2ae:	29 83       	std	Y+1, r18	; 0x01
    c2b0:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c2b4:	1f 5f       	subi	r17, 0xFF	; 255
    c2b6:	29 81       	ldd	r18, Y+1	; 0x01
    c2b8:	f1 cf       	rjmp	.-30     	; 0xc29c <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c2ba:	f7 01       	movw	r30, r14
    c2bc:	84 81       	ldd	r24, Z+4	; 0x04
    c2be:	88 23       	and	r24, r24
    c2c0:	51 f0       	breq	.+20     	; 0xc2d6 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c2c2:	f6 01       	movw	r30, r12
    c2c4:	80 81       	ld	r24, Z
    c2c6:	90 e1       	ldi	r25, 0x10	; 16
    c2c8:	98 27       	eor	r25, r24
    c2ca:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c2cc:	40 e0       	ldi	r20, 0x00	; 0
    c2ce:	60 ee       	ldi	r22, 0xE0	; 224
    c2d0:	87 2d       	mov	r24, r7
    c2d2:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
	return anim->looped;
}
    c2d6:	f7 01       	movw	r30, r14
    c2d8:	84 81       	ldd	r24, Z+4	; 0x04
    c2da:	0f 90       	pop	r0
    c2dc:	df 91       	pop	r29
    c2de:	cf 91       	pop	r28
    c2e0:	1f 91       	pop	r17
    c2e2:	0f 91       	pop	r16
    c2e4:	ff 90       	pop	r15
    c2e6:	ef 90       	pop	r14
    c2e8:	df 90       	pop	r13
    c2ea:	cf 90       	pop	r12
    c2ec:	bf 90       	pop	r11
    c2ee:	af 90       	pop	r10
    c2f0:	9f 90       	pop	r9
    c2f2:	8f 90       	pop	r8
    c2f4:	7f 90       	pop	r7
    c2f6:	08 95       	ret

0000c2f8 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c2f8:	8f 92       	push	r8
    c2fa:	9f 92       	push	r9
    c2fc:	af 92       	push	r10
    c2fe:	bf 92       	push	r11
    c300:	cf 92       	push	r12
    c302:	df 92       	push	r13
    c304:	ef 92       	push	r14
    c306:	ff 92       	push	r15
    c308:	0f 93       	push	r16
    c30a:	1f 93       	push	r17
    c30c:	cf 93       	push	r28
    c30e:	df 93       	push	r29
    c310:	ec 01       	movw	r28, r24
    c312:	c6 2e       	mov	r12, r22
    c314:	14 2f       	mov	r17, r20
    c316:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c318:	6c 81       	ldd	r22, Y+4	; 0x04
    c31a:	77 27       	eor	r23, r23
    c31c:	67 fd       	sbrc	r22, 7
    c31e:	70 95       	com	r23
    c320:	87 2f       	mov	r24, r23
    c322:	97 2f       	mov	r25, r23
    c324:	0e 94 0a 73 	call	0xe614	; 0xe614 <__floatsisf>
    c328:	4b 01       	movw	r8, r22
    c32a:	5c 01       	movw	r10, r24
    c32c:	8e 81       	ldd	r24, Y+6	; 0x06
    c32e:	68 2f       	mov	r22, r24
    c330:	70 e0       	ldi	r23, 0x00	; 0
    c332:	80 e0       	ldi	r24, 0x00	; 0
    c334:	90 e0       	ldi	r25, 0x00	; 0
    c336:	0e 94 0a 73 	call	0xe614	; 0xe614 <__floatsisf>
    c33a:	29 e8       	ldi	r18, 0x89	; 137
    c33c:	38 e8       	ldi	r19, 0x88	; 136
    c33e:	48 e8       	ldi	r20, 0x88	; 136
    c340:	5c e3       	ldi	r21, 0x3C	; 60
    c342:	0e 94 96 73 	call	0xe72c	; 0xe72c <__mulsf3>
    c346:	9b 01       	movw	r18, r22
    c348:	ac 01       	movw	r20, r24
    c34a:	c5 01       	movw	r24, r10
    c34c:	b4 01       	movw	r22, r8
    c34e:	0e 94 73 72 	call	0xe4e6	; 0xe4e6 <__addsf3>
    c352:	0e 94 d7 72 	call	0xe5ae	; 0xe5ae <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c356:	69 37       	cpi	r22, 0x79	; 121
    c358:	14 f4       	brge	.+4      	; 0xc35e <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c35a:	6c 83       	std	Y+4, r22	; 0x04
    c35c:	02 c0       	rjmp	.+4      	; 0xc362 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c35e:	88 e7       	ldi	r24, 0x78	; 120
    c360:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c362:	60 91 cc 0d 	lds	r22, 0x0DCC
    c366:	8d 81       	ldd	r24, Y+5	; 0x05
    c368:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    c36c:	28 81       	ld	r18, Y
    c36e:	39 81       	ldd	r19, Y+1	; 0x01
    c370:	82 0f       	add	r24, r18
    c372:	93 1f       	adc	r25, r19
    c374:	99 83       	std	Y+1, r25	; 0x01
    c376:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c378:	60 91 cc 0d 	lds	r22, 0x0DCC
    c37c:	8c 81       	ldd	r24, Y+4	; 0x04
    c37e:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    c382:	ea 81       	ldd	r30, Y+2	; 0x02
    c384:	fb 81       	ldd	r31, Y+3	; 0x03
    c386:	8e 0f       	add	r24, r30
    c388:	9f 1f       	adc	r25, r31
    c38a:	9b 83       	std	Y+3, r25	; 0x03
    c38c:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c38e:	4d 2d       	mov	r20, r13
    c390:	61 2f       	mov	r22, r17
    c392:	ce 01       	movw	r24, r28
    c394:	0e 94 c1 5d 	call	0xbb82	; 0xbb82 <collision_detect_level>
    c398:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c39a:	88 23       	and	r24, r24
    c39c:	41 f0       	breq	.+16     	; 0xc3ae <animate_sprite+0xb6>
    c39e:	00 23       	and	r16, r16
    c3a0:	31 f0       	breq	.+12     	; 0xc3ae <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c3a2:	88 e0       	ldi	r24, 0x08	; 8
    c3a4:	e8 9e       	mul	r14, r24
    c3a6:	70 01       	movw	r14, r0
    c3a8:	11 24       	eor	r1, r1
    c3aa:	fb 82       	std	Y+3, r15	; 0x03
    c3ac:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c3ae:	3a 81       	ldd	r19, Y+2	; 0x02
    c3b0:	80 91 ba 0d 	lds	r24, 0x0DBA
    c3b4:	43 2f       	mov	r20, r19
    c3b6:	48 1b       	sub	r20, r24
    c3b8:	98 81       	ld	r25, Y
    c3ba:	80 91 b2 0d 	lds	r24, 0x0DB2
    c3be:	69 2f       	mov	r22, r25
    c3c0:	68 1b       	sub	r22, r24
    c3c2:	0d 2d       	mov	r16, r13
    c3c4:	21 2f       	mov	r18, r17
    c3c6:	8c 2d       	mov	r24, r12
    c3c8:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	return result;
}
    c3cc:	8b 2d       	mov	r24, r11
    c3ce:	df 91       	pop	r29
    c3d0:	cf 91       	pop	r28
    c3d2:	1f 91       	pop	r17
    c3d4:	0f 91       	pop	r16
    c3d6:	ff 90       	pop	r15
    c3d8:	ef 90       	pop	r14
    c3da:	df 90       	pop	r13
    c3dc:	cf 90       	pop	r12
    c3de:	bf 90       	pop	r11
    c3e0:	af 90       	pop	r10
    c3e2:	9f 90       	pop	r9
    c3e4:	8f 90       	pop	r8
    c3e6:	08 95       	ret

0000c3e8 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c3e8:	af 92       	push	r10
    c3ea:	cf 92       	push	r12
    c3ec:	ef 92       	push	r14
    c3ee:	0f 93       	push	r16
    c3f0:	1f 93       	push	r17
    c3f2:	cf 93       	push	r28
    c3f4:	df 93       	push	r29
    c3f6:	ec 01       	movw	r28, r24
    c3f8:	14 2f       	mov	r17, r20
	if (player->flags & EXPLODING)
    c3fa:	88 85       	ldd	r24, Y+8	; 0x08
    c3fc:	84 ff       	sbrs	r24, 4
    c3fe:	10 c0       	rjmp	.+32     	; 0xc420 <animate_player+0x38>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c400:	9a 81       	ldd	r25, Y+2	; 0x02
    c402:	80 91 ba 0d 	lds	r24, 0x0DBA
    c406:	49 2f       	mov	r20, r25
    c408:	48 1b       	sub	r20, r24
    c40a:	98 81       	ld	r25, Y
    c40c:	80 91 b2 0d 	lds	r24, 0x0DB2
    c410:	69 2f       	mov	r22, r25
    c412:	68 1b       	sub	r22, r24
    c414:	0c 85       	ldd	r16, Y+12	; 0x0c
    c416:	2b 85       	ldd	r18, Y+11	; 0x0b
    c418:	81 2f       	mov	r24, r17
    c41a:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    c41e:	38 c0       	rjmp	.+112    	; 0xc490 <animate_player+0xa8>
	}
	else if (!DEBUG_GODMODE && other_player == &game.player && LBCollides(player->shared.x-game.camera_x,player->shared.y, player->width*8, player->height*8,
    c420:	60 5d       	subi	r22, 0xD0	; 208
    c422:	7d 40       	sbci	r23, 0x0D	; 13
    c424:	09 f5       	brne	.+66     	; 0xc468 <animate_player+0x80>
    c426:	30 91 b2 0d 	lds	r19, 0x0DB2
    c42a:	a0 90 dc 0d 	lds	r10, 0x0DDC
    c42e:	aa 0c       	add	r10, r10
    c430:	aa 0c       	add	r10, r10
    c432:	aa 0c       	add	r10, r10
    c434:	c0 90 db 0d 	lds	r12, 0x0DDB
    c438:	cc 0c       	add	r12, r12
    c43a:	cc 0c       	add	r12, r12
    c43c:	cc 0c       	add	r12, r12
    c43e:	00 91 d0 0d 	lds	r16, 0x0DD0
    c442:	03 1b       	sub	r16, r19
    c444:	2c 85       	ldd	r18, Y+12	; 0x0c
    c446:	22 0f       	add	r18, r18
    c448:	22 0f       	add	r18, r18
    c44a:	22 0f       	add	r18, r18
    c44c:	9b 85       	ldd	r25, Y+11	; 0x0b
    c44e:	49 2f       	mov	r20, r25
    c450:	44 0f       	add	r20, r20
    c452:	44 0f       	add	r20, r20
    c454:	44 0f       	add	r20, r20
    c456:	88 81       	ld	r24, Y
    c458:	e0 90 d2 0d 	lds	r14, 0x0DD2
    c45c:	6a 81       	ldd	r22, Y+2	; 0x02
    c45e:	83 1b       	sub	r24, r19
    c460:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
    c464:	81 11       	cpse	r24, r1
    c466:	0a c0       	rjmp	.+20     	; 0xc47c <animate_player+0x94>
	{
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
	}
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c468:	e1 2c       	mov	r14, r1
    c46a:	00 e0       	ldi	r16, 0x00	; 0
    c46c:	2c 85       	ldd	r18, Y+12	; 0x0c
    c46e:	4b 85       	ldd	r20, Y+11	; 0x0b
    c470:	61 2f       	mov	r22, r17
    c472:	ce 01       	movw	r24, r28
    c474:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <animate_sprite>
    c478:	82 30       	cpi	r24, 0x02	; 2
    c47a:	50 f0       	brcs	.+20     	; 0xc490 <animate_player+0xa8>
	{
		SFX_PLAYER_EXPLODE;
    c47c:	41 e0       	ldi	r20, 0x01	; 1
    c47e:	6f ef       	ldi	r22, 0xFF	; 255
    c480:	85 e0       	ldi	r24, 0x05	; 5
    c482:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
		game.player.shield = 0;
    c486:	10 92 df 0d 	sts	0x0DDF, r1
		game.player.flags = EXPLODING;
    c48a:	80 e1       	ldi	r24, 0x10	; 16
    c48c:	80 93 d8 0d 	sts	0x0DD8, r24
	}
}
    c490:	df 91       	pop	r29
    c492:	cf 91       	pop	r28
    c494:	1f 91       	pop	r17
    c496:	0f 91       	pop	r16
    c498:	ef 90       	pop	r14
    c49a:	cf 90       	pop	r12
    c49c:	af 90       	pop	r10
    c49e:	08 95       	ret

0000c4a0 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c4a0:	1f 93       	push	r17
    c4a2:	cf 93       	push	r28
    c4a4:	df 93       	push	r29
    c4a6:	ec 01       	movw	r28, r24
    c4a8:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c4aa:	98 85       	ldd	r25, Y+8	; 0x08
    c4ac:	89 2f       	mov	r24, r25
    c4ae:	88 70       	andi	r24, 0x08	; 8
    c4b0:	93 ff       	sbrs	r25, 3
    c4b2:	14 c0       	rjmp	.+40     	; 0xc4dc <update_spider_enemy+0x3c>
    c4b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    c4b6:	20 38       	cpi	r18, 0x80	; 128
    c4b8:	89 f4       	brne	.+34     	; 0xc4dc <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c4ba:	81 e0       	ldi	r24, 0x01	; 1
    c4bc:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c4be:	8c e9       	ldi	r24, 0x9C	; 156
    c4c0:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c4c2:	88 ec       	ldi	r24, 0xC8	; 200
    c4c4:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c4c6:	8c e3       	ldi	r24, 0x3C	; 60
    c4c8:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c4ca:	89 85       	ldd	r24, Y+9	; 0x09
    c4cc:	81 11       	cpse	r24, r1
    c4ce:	02 c0       	rjmp	.+4      	; 0xc4d4 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c4d0:	84 ec       	ldi	r24, 0xC4	; 196
    c4d2:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c4d4:	40 e0       	ldi	r20, 0x00	; 0
    c4d6:	69 e6       	ldi	r22, 0x69	; 105
    c4d8:	76 e3       	ldi	r23, 0x36	; 54
    c4da:	19 c0       	rjmp	.+50     	; 0xc50e <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c4dc:	90 ff       	sbrs	r25, 0
    c4de:	0f c0       	rjmp	.+30     	; 0xc4fe <update_spider_enemy+0x5e>
    c4e0:	9e 81       	ldd	r25, Y+6	; 0x06
    c4e2:	91 11       	cpse	r25, r1
    c4e4:	0c c0       	rjmp	.+24     	; 0xc4fe <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c4e6:	88 e0       	ldi	r24, 0x08	; 8
    c4e8:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c4ea:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c4ec:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c4ee:	89 85       	ldd	r24, Y+9	; 0x09
    c4f0:	81 11       	cpse	r24, r1
    c4f2:	03 c0       	rjmp	.+6      	; 0xc4fa <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c4f4:	81 e0       	ldi	r24, 0x01	; 1
    c4f6:	89 87       	std	Y+9, r24	; 0x09
    c4f8:	0d c0       	rjmp	.+26     	; 0xc514 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c4fa:	19 86       	std	Y+9, r1	; 0x09
    c4fc:	0b c0       	rjmp	.+22     	; 0xc514 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c4fe:	88 23       	and	r24, r24
    c500:	49 f0       	breq	.+18     	; 0xc514 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c502:	ce 01       	movw	r24, r28
    c504:	85 96       	adiw	r24, 0x25	; 37
    c506:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c50a:	40 e0       	ldi	r20, 0x00	; 0
    c50c:	bc 01       	movw	r22, r24
    c50e:	81 2f       	mov	r24, r17
    c510:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	}
	e->frame_count++;
    c514:	8d 85       	ldd	r24, Y+13	; 0x0d
    c516:	8f 5f       	subi	r24, 0xFF	; 255
    c518:	8d 87       	std	Y+13, r24	; 0x0d
}
    c51a:	df 91       	pop	r29
    c51c:	cf 91       	pop	r28
    c51e:	1f 91       	pop	r17
    c520:	08 95       	ret

0000c522 <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c522:	cf 93       	push	r28
    c524:	fc 01       	movw	r30, r24
    c526:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c528:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c52a:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x)
    c52c:	20 91 d0 0d 	lds	r18, 0x0DD0
    c530:	30 91 d1 0d 	lds	r19, 0x0DD1
    c534:	80 81       	ld	r24, Z
    c536:	91 81       	ldd	r25, Z+1	; 0x01
    c538:	b5 96       	adiw	r30, 0x25	; 37
    c53a:	82 17       	cp	r24, r18
    c53c:	93 07       	cpc	r25, r19
    c53e:	28 f4       	brcc	.+10     	; 0xc54a <update_turret_enemy+0x28>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c540:	cf 01       	movw	r24, r30
    c542:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c546:	41 e0       	ldi	r20, 0x01	; 1
    c548:	04 c0       	rjmp	.+8      	; 0xc552 <update_turret_enemy+0x30>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c54a:	cf 01       	movw	r24, r30
    c54c:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c550:	40 e0       	ldi	r20, 0x00	; 0
    c552:	bc 01       	movw	r22, r24
    c554:	8c 2f       	mov	r24, r28
	}
}
    c556:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c558:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c55c <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c55c:	cf 93       	push	r28
    c55e:	fc 01       	movw	r30, r24
    c560:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c562:	82 ee       	ldi	r24, 0xE2	; 226
    c564:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c566:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c568:	cf 01       	movw	r24, r30
    c56a:	85 96       	adiw	r24, 0x25	; 37
    c56c:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c570:	40 e0       	ldi	r20, 0x00	; 0
    c572:	bc 01       	movw	r22, r24
    c574:	8c 2f       	mov	r24, r28
}
    c576:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c578:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c57c <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c57c:	cf 93       	push	r28
    c57e:	fc 01       	movw	r30, r24
    c580:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c582:	8a e0       	ldi	r24, 0x0A	; 10
    c584:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c586:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c588:	cf 01       	movw	r24, r30
    c58a:	85 96       	adiw	r24, 0x25	; 37
    c58c:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c590:	40 e0       	ldi	r20, 0x00	; 0
    c592:	bc 01       	movw	r22, r24
    c594:	8c 2f       	mov	r24, r28
}
    c596:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c598:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c59c <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c59c:	cf 93       	push	r28
    c59e:	fc 01       	movw	r30, r24
    c5a0:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c5a2:	8e e1       	ldi	r24, 0x1E	; 30
    c5a4:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c5a6:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c5a8:	cf 01       	movw	r24, r30
    c5aa:	85 96       	adiw	r24, 0x25	; 37
    c5ac:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c5b0:	40 e0       	ldi	r20, 0x00	; 0
    c5b2:	bc 01       	movw	r22, r24
    c5b4:	8c 2f       	mov	r24, r28
}
    c5b6:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c5b8:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c5bc <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c5bc:	cf 93       	push	r28
    c5be:	fc 01       	movw	r30, r24
    c5c0:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c5c2:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c5c4:	88 e2       	ldi	r24, 0x28	; 40
    c5c6:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c5c8:	80 91 c7 0d 	lds	r24, 0x0DC7
    c5cc:	82 30       	cpi	r24, 0x02	; 2
    c5ce:	11 f4       	brne	.+4      	; 0xc5d4 <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c5d0:	88 ed       	ldi	r24, 0xD8	; 216
    c5d2:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c5d4:	22 81       	ldd	r18, Z+2	; 0x02
    c5d6:	33 81       	ldd	r19, Z+3	; 0x03
    c5d8:	24 50       	subi	r18, 0x04	; 4
    c5da:	31 09       	sbc	r19, r1
    c5dc:	2d 3b       	cpi	r18, 0xBD	; 189
    c5de:	31 05       	cpc	r19, r1
    c5e0:	38 f0       	brcs	.+14     	; 0xc5f0 <update_level_hazard+0x34>
    c5e2:	27 85       	ldd	r18, Z+15	; 0x0f
    c5e4:	88 e0       	ldi	r24, 0x08	; 8
    c5e6:	28 9f       	mul	r18, r24
    c5e8:	90 01       	movw	r18, r0
    c5ea:	11 24       	eor	r1, r1
    c5ec:	33 83       	std	Z+3, r19	; 0x03
    c5ee:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c5f0:	cf 01       	movw	r24, r30
    c5f2:	85 96       	adiw	r24, 0x25	; 37
    c5f4:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c5f8:	40 e0       	ldi	r20, 0x00	; 0
    c5fa:	bc 01       	movw	r22, r24
    c5fc:	8c 2f       	mov	r24, r28
}
    c5fe:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c600:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c604 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c604:	cf 93       	push	r28
    c606:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c608:	0c 96       	adiw	r24, 0x0c	; 12
    c60a:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    c60e:	40 e0       	ldi	r20, 0x00	; 0
    c610:	bc 01       	movw	r22, r24
    c612:	8c 2f       	mov	r24, r28
}
    c614:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c616:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000c61a <update_enemies>:
}

void update_enemies()
{
    c61a:	cf 92       	push	r12
    c61c:	df 92       	push	r13
    c61e:	ef 92       	push	r14
    c620:	ff 92       	push	r15
    c622:	0f 93       	push	r16
    c624:	1f 93       	push	r17
    c626:	cf 93       	push	r28
    c628:	df 93       	push	r29
    c62a:	81 ed       	ldi	r24, 0xD1	; 209
    c62c:	e8 2e       	mov	r14, r24
    c62e:	8e e0       	ldi	r24, 0x0E	; 14
    c630:	f8 2e       	mov	r15, r24
    c632:	c6 ec       	ldi	r28, 0xC6	; 198
    c634:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c636:	19 e0       	ldi	r17, 0x09	; 9
    c638:	f7 01       	movw	r30, r14
    c63a:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c63c:	80 81       	ld	r24, Z
    c63e:	97 01       	movw	r18, r14
    c640:	21 50       	subi	r18, 0x01	; 1
    c642:	31 09       	sbc	r19, r1
    c644:	69 01       	movw	r12, r18
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c646:	f7 01       	movw	r30, r14
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c648:	84 ff       	sbrs	r24, 4
    c64a:	0c c0       	rjmp	.+24     	; 0xc664 <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c64c:	00 81       	ld	r16, Z
    c64e:	f9 01       	movw	r30, r18
    c650:	20 81       	ld	r18, Z
    c652:	41 2f       	mov	r20, r17
    c654:	be 01       	movw	r22, r28
    c656:	63 5d       	subi	r22, 0xD3	; 211
    c658:	7f 4f       	sbci	r23, 0xFF	; 255
    c65a:	ce 01       	movw	r24, r28
    c65c:	08 96       	adiw	r24, 0x08	; 8
    c65e:	0e 94 31 61 	call	0xc262	; 0xc262 <map_explosion>
    c662:	2e c0       	rjmp	.+92     	; 0xc6c0 <update_enemies+0xa6>
    c664:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c666:	80 81       	ld	r24, Z
    c668:	88 23       	and	r24, r24
    c66a:	51 f1       	breq	.+84     	; 0xc6c0 <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c66c:	f7 01       	movw	r30, r14
    c66e:	81 81       	ldd	r24, Z+1	; 0x01
    c670:	83 30       	cpi	r24, 0x03	; 3
    c672:	c1 f0       	breq	.+48     	; 0xc6a4 <update_enemies+0x8a>
    c674:	48 f4       	brcc	.+18     	; 0xc688 <update_enemies+0x6e>
    c676:	88 23       	and	r24, r24
    c678:	81 f0       	breq	.+32     	; 0xc69a <update_enemies+0x80>
    c67a:	81 30       	cpi	r24, 0x01	; 1
    c67c:	e9 f4       	brne	.+58     	; 0xc6b8 <update_enemies+0x9e>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c67e:	61 2f       	mov	r22, r17
    c680:	ce 01       	movw	r24, r28
    c682:	0e 94 ce 62 	call	0xc59c	; 0xc59c <update_shark_enemy>
    c686:	1c c0       	rjmp	.+56     	; 0xc6c0 <update_enemies+0xa6>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c688:	84 30       	cpi	r24, 0x04	; 4
    c68a:	89 f0       	breq	.+34     	; 0xc6ae <update_enemies+0x94>
    c68c:	85 30       	cpi	r24, 0x05	; 5
    c68e:	a1 f4       	brne	.+40     	; 0xc6b8 <update_enemies+0x9e>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c690:	61 2f       	mov	r22, r17
    c692:	ce 01       	movw	r24, r28
    c694:	0e 94 be 62 	call	0xc57c	; 0xc57c <update_globe_enemy>
    c698:	13 c0       	rjmp	.+38     	; 0xc6c0 <update_enemies+0xa6>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c69a:	61 2f       	mov	r22, r17
    c69c:	ce 01       	movw	r24, r28
    c69e:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <update_spider_enemy>
    c6a2:	0e c0       	rjmp	.+28     	; 0xc6c0 <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
    c6a4:	61 2f       	mov	r22, r17
    c6a6:	ce 01       	movw	r24, r28
    c6a8:	0e 94 91 62 	call	0xc522	; 0xc522 <update_turret_enemy>
    c6ac:	09 c0       	rjmp	.+18     	; 0xc6c0 <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c6ae:	61 2f       	mov	r22, r17
    c6b0:	ce 01       	movw	r24, r28
    c6b2:	0e 94 ae 62 	call	0xc55c	; 0xc55c <update_drone_enemy>
    c6b6:	04 c0       	rjmp	.+8      	; 0xc6c0 <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c6b8:	61 2f       	mov	r22, r17
    c6ba:	ce 01       	movw	r24, r28
    c6bc:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c6c0:	f6 01       	movw	r30, r12
    c6c2:	90 81       	ld	r25, Z
    c6c4:	f7 01       	movw	r30, r14
    c6c6:	80 81       	ld	r24, Z
    c6c8:	98 9f       	mul	r25, r24
    c6ca:	10 0d       	add	r17, r0
    c6cc:	11 24       	eor	r1, r1
    c6ce:	f5 e3       	ldi	r31, 0x35	; 53
    c6d0:	ef 0e       	add	r14, r31
    c6d2:	f1 1c       	adc	r15, r1
    c6d4:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c6d6:	2a ed       	ldi	r18, 0xDA	; 218
    c6d8:	e2 16       	cp	r14, r18
    c6da:	2f e0       	ldi	r18, 0x0F	; 15
    c6dc:	f2 06       	cpc	r15, r18
    c6de:	09 f0       	breq	.+2      	; 0xc6e2 <update_enemies+0xc8>
    c6e0:	ab cf       	rjmp	.-170    	; 0xc638 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c6e2:	df 91       	pop	r29
    c6e4:	cf 91       	pop	r28
    c6e6:	1f 91       	pop	r17
    c6e8:	0f 91       	pop	r16
    c6ea:	ff 90       	pop	r15
    c6ec:	ef 90       	pop	r14
    c6ee:	df 90       	pop	r13
    c6f0:	cf 90       	pop	r12
    c6f2:	08 95       	ret

0000c6f4 <update_enemy_shots>:

void update_enemy_shots()
{
    c6f4:	8f 92       	push	r8
    c6f6:	9f 92       	push	r9
    c6f8:	af 92       	push	r10
    c6fa:	bf 92       	push	r11
    c6fc:	df 92       	push	r13
    c6fe:	ef 92       	push	r14
    c700:	ff 92       	push	r15
    c702:	0f 93       	push	r16
    c704:	1f 93       	push	r17
    c706:	cf 93       	push	r28
    c708:	df 93       	push	r29
    c70a:	1f 92       	push	r1
    c70c:	cd b7       	in	r28, 0x3d	; 61
    c70e:	de b7       	in	r29, 0x3e	; 62
    c710:	84 ed       	ldi	r24, 0xD4	; 212
    c712:	a8 2e       	mov	r10, r24
    c714:	8e e0       	ldi	r24, 0x0E	; 14
    c716:	b8 2e       	mov	r11, r24
    c718:	01 ee       	ldi	r16, 0xE1	; 225
    c71a:	1e e0       	ldi	r17, 0x0E	; 14
    c71c:	9b ed       	ldi	r25, 0xDB	; 219
    c71e:	e9 2e       	mov	r14, r25
    c720:	9e e0       	ldi	r25, 0x0E	; 14
    c722:	f9 2e       	mov	r15, r25
    c724:	20 e1       	ldi	r18, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c726:	dd 24       	eor	r13, r13
    c728:	d3 94       	inc	r13
    c72a:	6f ef       	ldi	r22, 0xFF	; 255
    c72c:	62 0f       	add	r22, r18
    c72e:	f5 01       	movw	r30, r10
    c730:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c732:	90 81       	ld	r25, Z
    c734:	35 97       	sbiw	r30, 0x05	; 5
    c736:	92 30       	cpi	r25, 0x02	; 2
    c738:	09 f4       	brne	.+2      	; 0xc73c <update_enemy_shots+0x48>
    c73a:	4e c0       	rjmp	.+156    	; 0xc7d8 <update_enemy_shots+0xe4>
    c73c:	80 81       	ld	r24, Z
    c73e:	88 23       	and	r24, r24
    c740:	09 f4       	brne	.+2      	; 0xc744 <update_enemy_shots+0x50>
    c742:	4a c0       	rjmp	.+148    	; 0xc7d8 <update_enemy_shots+0xe4>
    c744:	d5 01       	movw	r26, r10
    c746:	8c 91       	ld	r24, X
    c748:	8c 33       	cpi	r24, 0x3C	; 60
    c74a:	08 f4       	brcc	.+2      	; 0xc74e <update_enemy_shots+0x5a>
    c74c:	45 c0       	rjmp	.+138    	; 0xc7d8 <update_enemy_shots+0xe4>
		{
			game.enemies[i].shot_frame_count = 0;	
    c74e:	1c 92       	st	X, r1
    c750:	f8 01       	movw	r30, r16
    c752:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c754:	80 81       	ld	r24, Z
    c756:	87 30       	cpi	r24, 0x07	; 7
    c758:	09 f0       	breq	.+2      	; 0xc75c <update_enemy_shots+0x68>
    c75a:	45 c0       	rjmp	.+138    	; 0xc7e6 <update_enemy_shots+0xf2>
    c75c:	f8 01       	movw	r30, r16
				{
					if (!game.enemies[i].shot[j].active)
    c75e:	82 91       	ld	r24, -Z
    c760:	81 11       	cpse	r24, r1
    c762:	33 c0       	rjmp	.+102    	; 0xc7ca <update_enemy_shots+0xd6>
					{
						game.enemies[i].shot[j].active = 1;
    c764:	d0 82       	st	Z, r13
    c766:	f5 01       	movw	r30, r10
    c768:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c76a:	40 81       	ld	r20, Z
    c76c:	51 81       	ldd	r21, Z+1	; 0x01
    c76e:	f5 01       	movw	r30, r10
    c770:	54 83       	std	Z+4, r21	; 0x04
    c772:	43 83       	std	Z+3, r20	; 0x03
    c774:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c776:	01 90       	ld	r0, Z+
    c778:	f0 81       	ld	r31, Z
    c77a:	e0 2d       	mov	r30, r0
    c77c:	4f 01       	movw	r8, r30
    c77e:	88 ef       	ldi	r24, 0xF8	; 248
    c780:	88 22       	and	r8, r24
    c782:	16 96       	adiw	r26, 0x06	; 6
    c784:	9c 92       	st	X, r9
    c786:	8e 92       	st	-X, r8
    c788:	15 97       	sbiw	r26, 0x05	; 5
    c78a:	d8 01       	movw	r26, r16
    c78c:	8c 91       	ld	r24, X
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c78e:	94 30       	cpi	r25, 0x04	; 4
    c790:	11 f4       	brne	.+4      	; 0xc796 <update_enemy_shots+0xa2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c792:	f7 01       	movw	r30, r14
    c794:	19 c0       	rjmp	.+50     	; 0xc7c8 <update_enemy_shots+0xd4>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c796:	95 30       	cpi	r25, 0x05	; 5
    c798:	61 f4       	brne	.+24     	; 0xc7b2 <update_enemy_shots+0xbe>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c79a:	d7 01       	movw	r26, r14
    c79c:	8c 93       	st	X, r24
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c79e:	40 91 d2 0d 	lds	r20, 0x0DD2
    c7a2:	50 91 d3 0d 	lds	r21, 0x0DD3
    c7a6:	e4 17       	cp	r30, r20
    c7a8:	f5 07       	cpc	r31, r21
    c7aa:	78 f0       	brcs	.+30     	; 0xc7ca <update_enemy_shots+0xd6>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c7ac:	81 95       	neg	r24
    c7ae:	8c 93       	st	X, r24
    c7b0:	0c c0       	rjmp	.+24     	; 0xc7ca <update_enemy_shots+0xd6>
    c7b2:	f8 01       	movw	r30, r16
    c7b4:	35 97       	sbiw	r30, 0x05	; 5
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c7b6:	80 83       	st	Z, r24
							if (game.player.shared.x <= game.enemies[i].shared.x)
    c7b8:	a0 91 d0 0d 	lds	r26, 0x0DD0
    c7bc:	b0 91 d1 0d 	lds	r27, 0x0DD1
    c7c0:	4a 17       	cp	r20, r26
    c7c2:	5b 07       	cpc	r21, r27
    c7c4:	10 f0       	brcs	.+4      	; 0xc7ca <update_enemy_shots+0xd6>
							{
								game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c7c6:	81 95       	neg	r24
    c7c8:	80 83       	st	Z, r24
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c7ca:	c5 01       	movw	r24, r10
    c7cc:	03 96       	adiw	r24, 0x03	; 3
    c7ce:	29 83       	std	Y+1, r18	; 0x01
    c7d0:	0e 94 02 63 	call	0xc604	; 0xc604 <update_basic_shot>
    c7d4:	29 81       	ldd	r18, Y+1	; 0x01
    c7d6:	07 c0       	rjmp	.+14     	; 0xc7e6 <update_enemy_shots+0xf2>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c7d8:	80 81       	ld	r24, Z
    c7da:	88 23       	and	r24, r24
    c7dc:	21 f0       	breq	.+8      	; 0xc7e6 <update_enemy_shots+0xf2>
		{
			game.enemies[i].shot_frame_count++;
    c7de:	f5 01       	movw	r30, r10
    c7e0:	80 81       	ld	r24, Z
    c7e2:	8f 5f       	subi	r24, 0xFF	; 255
    c7e4:	80 83       	st	Z, r24
    c7e6:	2f 5f       	subi	r18, 0xFF	; 255
    c7e8:	f5 e3       	ldi	r31, 0x35	; 53
    c7ea:	af 0e       	add	r10, r31
    c7ec:	b1 1c       	adc	r11, r1
    c7ee:	0b 5c       	subi	r16, 0xCB	; 203
    c7f0:	1f 4f       	sbci	r17, 0xFF	; 255
    c7f2:	85 e3       	ldi	r24, 0x35	; 53
    c7f4:	e8 0e       	add	r14, r24
    c7f6:	f1 1c       	adc	r15, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c7f8:	25 31       	cpi	r18, 0x15	; 21
    c7fa:	09 f0       	breq	.+2      	; 0xc7fe <update_enemy_shots+0x10a>
    c7fc:	96 cf       	rjmp	.-212    	; 0xc72a <update_enemy_shots+0x36>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c7fe:	0f 90       	pop	r0
    c800:	df 91       	pop	r29
    c802:	cf 91       	pop	r28
    c804:	1f 91       	pop	r17
    c806:	0f 91       	pop	r16
    c808:	ff 90       	pop	r15
    c80a:	ef 90       	pop	r14
    c80c:	df 90       	pop	r13
    c80e:	bf 90       	pop	r11
    c810:	af 90       	pop	r10
    c812:	9f 90       	pop	r9
    c814:	8f 90       	pop	r8
    c816:	08 95       	ret

0000c818 <animate_enemies>:

void animate_enemies()
{
    c818:	2f 92       	push	r2
    c81a:	3f 92       	push	r3
    c81c:	4f 92       	push	r4
    c81e:	5f 92       	push	r5
    c820:	6f 92       	push	r6
    c822:	7f 92       	push	r7
    c824:	8f 92       	push	r8
    c826:	9f 92       	push	r9
    c828:	af 92       	push	r10
    c82a:	cf 92       	push	r12
    c82c:	df 92       	push	r13
    c82e:	ef 92       	push	r14
    c830:	ff 92       	push	r15
    c832:	0f 93       	push	r16
    c834:	1f 93       	push	r17
    c836:	cf 93       	push	r28
    c838:	df 93       	push	r29
    c83a:	00 d0       	rcall	.+0      	; 0xc83c <animate_enemies+0x24>
    c83c:	00 d0       	rcall	.+0      	; 0xc83e <animate_enemies+0x26>
    c83e:	cd b7       	in	r28, 0x3d	; 61
    c840:	de b7       	in	r29, 0x3e	; 62
    c842:	4d ec       	ldi	r20, 0xCD	; 205
    c844:	24 2e       	mov	r2, r20
    c846:	4e e0       	ldi	r20, 0x0E	; 14
    c848:	34 2e       	mov	r3, r20
    c84a:	50 ed       	ldi	r21, 0xD0	; 208
    c84c:	65 2e       	mov	r6, r21
    c84e:	5e e0       	ldi	r21, 0x0E	; 14
    c850:	75 2e       	mov	r7, r21
    c852:	61 ed       	ldi	r22, 0xD1	; 209
    c854:	86 2e       	mov	r8, r22
    c856:	6e e0       	ldi	r22, 0x0E	; 14
    c858:	96 2e       	mov	r9, r22
    c85a:	86 ec       	ldi	r24, 0xC6	; 198
    c85c:	9e e0       	ldi	r25, 0x0E	; 14
    c85e:	9c 83       	std	Y+4, r25	; 0x04
    c860:	8b 83       	std	Y+3, r24	; 0x03
    c862:	ae ec       	ldi	r26, 0xCE	; 206
    c864:	be e0       	ldi	r27, 0x0E	; 14
    c866:	ba 83       	std	Y+2, r27	; 0x02
    c868:	a9 83       	std	Y+1, r26	; 0x01
    c86a:	41 2c       	mov	r4, r1
    c86c:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    c86e:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c870:	70 e1       	ldi	r23, 0x10	; 16
    c872:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c874:	f1 01       	movw	r30, r2
    c876:	80 81       	ld	r24, Z
    c878:	88 23       	and	r24, r24
    c87a:	09 f4       	brne	.+2      	; 0xc87e <animate_enemies+0x66>
    c87c:	8a c0       	rjmp	.+276    	; 0xc992 <animate_enemies+0x17a>
    c87e:	a9 81       	ldd	r26, Y+1	; 0x01
    c880:	ba 81       	ldd	r27, Y+2	; 0x02
    c882:	8c 91       	ld	r24, X
    c884:	84 fd       	sbrc	r24, 4
    c886:	85 c0       	rjmp	.+266    	; 0xc992 <animate_enemies+0x17a>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    c888:	eb 81       	ldd	r30, Y+3	; 0x03
    c88a:	fc 81       	ldd	r31, Y+4	; 0x04
    c88c:	20 81       	ld	r18, Z
    c88e:	31 81       	ldd	r19, Z+1	; 0x01
    c890:	e0 91 b2 0d 	lds	r30, 0x0DB2
    c894:	f0 91 b3 0d 	lds	r31, 0x0DB3
    c898:	2e 17       	cp	r18, r30
    c89a:	3f 07       	cpc	r19, r31
    c89c:	88 f0       	brcs	.+34     	; 0xc8c0 <animate_enemies+0xa8>
    c89e:	ab 81       	ldd	r26, Y+3	; 0x03
    c8a0:	bc 81       	ldd	r27, Y+4	; 0x04
    c8a2:	12 96       	adiw	r26, 0x02	; 2
    c8a4:	ed 90       	ld	r14, X+
    c8a6:	fc 90       	ld	r15, X
    c8a8:	13 97       	sbiw	r26, 0x03	; 3
    c8aa:	80 91 ba 0d 	lds	r24, 0x0DBA
    c8ae:	90 e0       	ldi	r25, 0x00	; 0
    c8b0:	e8 16       	cp	r14, r24
    c8b2:	f9 06       	cpc	r15, r25
    c8b4:	28 f0       	brcs	.+10     	; 0xc8c0 <animate_enemies+0xa8>
    c8b6:	88 53       	subi	r24, 0x38	; 56
    c8b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c8ba:	8e 15       	cp	r24, r14
    c8bc:	9f 05       	cpc	r25, r15
    c8be:	70 f4       	brcc	.+28     	; 0xc8dc <animate_enemies+0xc4>
			{
				game.enemies[i].active = 0;
    c8c0:	f1 01       	movw	r30, r2
    c8c2:	10 82       	st	Z, r1
				game.active_enemies--;
    c8c4:	80 91 cd 0d 	lds	r24, 0x0DCD
    c8c8:	81 50       	subi	r24, 0x01	; 1
    c8ca:	80 93 cd 0d 	sts	0x0DCD, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c8ce:	d4 01       	movw	r26, r8
    c8d0:	0c 91       	ld	r16, X
    c8d2:	f3 01       	movw	r30, r6
    c8d4:	20 81       	ld	r18, Z
    c8d6:	40 e0       	ldi	r20, 0x00	; 0
    c8d8:	60 ee       	ldi	r22, 0xE0	; 224
    c8da:	6e c0       	rjmp	.+220    	; 0xc9b8 <animate_enemies+0x1a0>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c8dc:	02 2f       	mov	r16, r18
    c8de:	0e 1b       	sub	r16, r30
    c8e0:	20 91 dc 0d 	lds	r18, 0x0DDC
    c8e4:	22 0f       	add	r18, r18
    c8e6:	22 0f       	add	r18, r18
    c8e8:	22 0f       	add	r18, r18
    c8ea:	40 91 db 0d 	lds	r20, 0x0DDB
    c8ee:	44 0f       	add	r20, r20
    c8f0:	44 0f       	add	r20, r20
    c8f2:	44 0f       	add	r20, r20
    c8f4:	80 91 d0 0d 	lds	r24, 0x0DD0
    c8f8:	98 e0       	ldi	r25, 0x08	; 8
    c8fa:	a9 2e       	mov	r10, r25
    c8fc:	38 e0       	ldi	r19, 0x08	; 8
    c8fe:	c3 2e       	mov	r12, r19
    c900:	60 91 d2 0d 	lds	r22, 0x0DD2
    c904:	8e 1b       	sub	r24, r30
    c906:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
    c90a:	88 23       	and	r24, r24
    c90c:	79 f0       	breq	.+30     	; 0xc92c <animate_enemies+0x114>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c90e:	80 91 d8 0d 	lds	r24, 0x0DD8
    c912:	84 fd       	sbrc	r24, 4
    c914:	0b c0       	rjmp	.+22     	; 0xc92c <animate_enemies+0x114>
			)
			{
				SFX_PLAYER_EXPLODE;
    c916:	41 e0       	ldi	r20, 0x01	; 1
    c918:	6f ef       	ldi	r22, 0xFF	; 255
    c91a:	85 e0       	ldi	r24, 0x05	; 5
    c91c:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
				game.player.shield = 0;
    c920:	10 92 df 0d 	sts	0x0DDF, r1
				game.player.flags = EXPLODING;
    c924:	80 e1       	ldi	r24, 0x10	; 16
    c926:	80 93 d8 0d 	sts	0x0DD8, r24
				return;
    c92a:	6c c0       	rjmp	.+216    	; 0xca04 <animate_enemies+0x1ec>
    c92c:	c2 01       	movw	r24, r4
    c92e:	8e 54       	subi	r24, 0x4E	; 78
    c930:	92 4f       	sbci	r25, 0xF2	; 242
    c932:	fc 01       	movw	r30, r24
    c934:	e0 5e       	subi	r30, 0xE0	; 224
    c936:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c938:	20 81       	ld	r18, Z
    c93a:	22 30       	cpi	r18, 0x02	; 2
    c93c:	69 f4       	brne	.+26     	; 0xc958 <animate_enemies+0x140>
    c93e:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c940:	e0 80       	ld	r14, Z
    c942:	01 e0       	ldi	r16, 0x01	; 1
    c944:	d4 01       	movw	r26, r8
    c946:	2c 91       	ld	r18, X
    c948:	f3 01       	movw	r30, r6
    c94a:	40 81       	ld	r20, Z
    c94c:	61 2f       	mov	r22, r17
    c94e:	8b 81       	ldd	r24, Y+3	; 0x03
    c950:	9c 81       	ldd	r25, Y+4	; 0x04
    c952:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <animate_sprite>
    c956:	33 c0       	rjmp	.+102    	; 0xc9be <animate_enemies+0x1a6>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c958:	e1 2c       	mov	r14, r1
    c95a:	00 e0       	ldi	r16, 0x00	; 0
    c95c:	d4 01       	movw	r26, r8
    c95e:	2c 91       	ld	r18, X
    c960:	f3 01       	movw	r30, r6
    c962:	40 81       	ld	r20, Z
    c964:	61 2f       	mov	r22, r17
    c966:	8b 81       	ldd	r24, Y+3	; 0x03
    c968:	9c 81       	ldd	r25, Y+4	; 0x04
    c96a:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <animate_sprite>
    c96e:	82 30       	cpi	r24, 0x02	; 2
    c970:	30 f1       	brcs	.+76     	; 0xc9be <animate_enemies+0x1a6>
			{
				SFX_ENEMY_EXPLODE;
    c972:	41 e0       	ldi	r20, 0x01	; 1
    c974:	6f ef       	ldi	r22, 0xFF	; 255
    c976:	86 e0       	ldi	r24, 0x06	; 6
    c978:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c97c:	a9 81       	ldd	r26, Y+1	; 0x01
    c97e:	ba 81       	ldd	r27, Y+2	; 0x02
    c980:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    c982:	f1 01       	movw	r30, r2
    c984:	10 82       	st	Z, r1
				game.active_enemies--;
    c986:	80 91 cd 0d 	lds	r24, 0x0DCD
    c98a:	81 50       	subi	r24, 0x01	; 1
    c98c:	80 93 cd 0d 	sts	0x0DCD, r24
    c990:	16 c0       	rjmp	.+44     	; 0xc9be <animate_enemies+0x1a6>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c992:	a9 81       	ldd	r26, Y+1	; 0x01
    c994:	ba 81       	ldd	r27, Y+2	; 0x02
    c996:	8c 91       	ld	r24, X
    c998:	84 ff       	sbrs	r24, 4
    c99a:	11 c0       	rjmp	.+34     	; 0xc9be <animate_enemies+0x1a6>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c99c:	eb 81       	ldd	r30, Y+3	; 0x03
    c99e:	fc 81       	ldd	r31, Y+4	; 0x04
    c9a0:	42 81       	ldd	r20, Z+2	; 0x02
    c9a2:	80 91 ba 0d 	lds	r24, 0x0DBA
    c9a6:	48 1b       	sub	r20, r24
    c9a8:	60 81       	ld	r22, Z
    c9aa:	80 91 b2 0d 	lds	r24, 0x0DB2
    c9ae:	68 1b       	sub	r22, r24
    c9b0:	d4 01       	movw	r26, r8
    c9b2:	0c 91       	ld	r16, X
    c9b4:	f3 01       	movw	r30, r6
    c9b6:	20 81       	ld	r18, Z
    c9b8:	81 2f       	mov	r24, r17
    c9ba:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c9be:	d4 01       	movw	r26, r8
    c9c0:	9c 91       	ld	r25, X
    c9c2:	f3 01       	movw	r30, r6
    c9c4:	80 81       	ld	r24, Z
    c9c6:	98 9f       	mul	r25, r24
    c9c8:	10 0d       	add	r17, r0
    c9ca:	11 24       	eor	r1, r1
    c9cc:	f5 e3       	ldi	r31, 0x35	; 53
    c9ce:	2f 0e       	add	r2, r31
    c9d0:	31 1c       	adc	r3, r1
    c9d2:	85 e3       	ldi	r24, 0x35	; 53
    c9d4:	48 0e       	add	r4, r24
    c9d6:	51 1c       	adc	r5, r1
    c9d8:	95 e3       	ldi	r25, 0x35	; 53
    c9da:	69 0e       	add	r6, r25
    c9dc:	71 1c       	adc	r7, r1
    c9de:	a5 e3       	ldi	r26, 0x35	; 53
    c9e0:	8a 0e       	add	r8, r26
    c9e2:	91 1c       	adc	r9, r1
    c9e4:	eb 81       	ldd	r30, Y+3	; 0x03
    c9e6:	fc 81       	ldd	r31, Y+4	; 0x04
    c9e8:	f5 96       	adiw	r30, 0x35	; 53
    c9ea:	fc 83       	std	Y+4, r31	; 0x04
    c9ec:	eb 83       	std	Y+3, r30	; 0x03
    c9ee:	89 81       	ldd	r24, Y+1	; 0x01
    c9f0:	9a 81       	ldd	r25, Y+2	; 0x02
    c9f2:	c5 96       	adiw	r24, 0x35	; 53
    c9f4:	9a 83       	std	Y+2, r25	; 0x02
    c9f6:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c9f8:	99 e0       	ldi	r25, 0x09	; 9
    c9fa:	49 16       	cp	r4, r25
    c9fc:	91 e0       	ldi	r25, 0x01	; 1
    c9fe:	59 06       	cpc	r5, r25
    ca00:	09 f0       	breq	.+2      	; 0xca04 <animate_enemies+0x1ec>
    ca02:	38 cf       	rjmp	.-400    	; 0xc874 <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    ca04:	0f 90       	pop	r0
    ca06:	0f 90       	pop	r0
    ca08:	0f 90       	pop	r0
    ca0a:	0f 90       	pop	r0
    ca0c:	df 91       	pop	r29
    ca0e:	cf 91       	pop	r28
    ca10:	1f 91       	pop	r17
    ca12:	0f 91       	pop	r16
    ca14:	ff 90       	pop	r15
    ca16:	ef 90       	pop	r14
    ca18:	df 90       	pop	r13
    ca1a:	cf 90       	pop	r12
    ca1c:	af 90       	pop	r10
    ca1e:	9f 90       	pop	r9
    ca20:	8f 90       	pop	r8
    ca22:	7f 90       	pop	r7
    ca24:	6f 90       	pop	r6
    ca26:	5f 90       	pop	r5
    ca28:	4f 90       	pop	r4
    ca2a:	3f 90       	pop	r3
    ca2c:	2f 90       	pop	r2
    ca2e:	08 95       	ret

0000ca30 <animate_enemy_shots>:

void animate_enemy_shots()
{
    ca30:	4f 92       	push	r4
    ca32:	5f 92       	push	r5
    ca34:	6f 92       	push	r6
    ca36:	7f 92       	push	r7
    ca38:	8f 92       	push	r8
    ca3a:	9f 92       	push	r9
    ca3c:	af 92       	push	r10
    ca3e:	cf 92       	push	r12
    ca40:	df 92       	push	r13
    ca42:	ef 92       	push	r14
    ca44:	ff 92       	push	r15
    ca46:	0f 93       	push	r16
    ca48:	1f 93       	push	r17
    ca4a:	cf 93       	push	r28
    ca4c:	df 93       	push	r29
    ca4e:	47 ed       	ldi	r20, 0xD7	; 215
    ca50:	84 2e       	mov	r8, r20
    ca52:	4e e0       	ldi	r20, 0x0E	; 14
    ca54:	94 2e       	mov	r9, r20
    ca56:	c0 ee       	ldi	r28, 0xE0	; 224
    ca58:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
    ca5a:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    ca5c:	50 e1       	ldi	r21, 0x10	; 16
    ca5e:	f5 2e       	mov	r15, r21
    ca60:	fe 01       	movw	r30, r28
    ca62:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    ca64:	80 81       	ld	r24, Z
    ca66:	87 30       	cpi	r24, 0x07	; 7
    ca68:	09 f0       	breq	.+2      	; 0xca6c <animate_enemy_shots+0x3c>
    ca6a:	72 c0       	rjmp	.+228    	; 0xcb50 <animate_enemy_shots+0x120>
			{
				if (game.enemies[i].shot[j].active)
    ca6c:	88 81       	ld	r24, Y
    ca6e:	88 23       	and	r24, r24
    ca70:	09 f4       	brne	.+2      	; 0xca74 <animate_enemy_shots+0x44>
    ca72:	6e c0       	rjmp	.+220    	; 0xcb50 <animate_enemy_shots+0x120>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    ca74:	c4 01       	movw	r24, r8
    ca76:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <out_of_bounds>
    ca7a:	81 11       	cpse	r24, r1
    ca7c:	40 c0       	rjmp	.+128    	; 0xcafe <animate_enemy_shots+0xce>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    ca7e:	41 e0       	ldi	r20, 0x01	; 1
    ca80:	61 e0       	ldi	r22, 0x01	; 1
    ca82:	c4 01       	movw	r24, r8
    ca84:	0e 94 c1 5d 	call	0xbb82	; 0xbb82 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    ca88:	81 11       	cpse	r24, r1
    ca8a:	39 c0       	rjmp	.+114    	; 0xcafe <animate_enemy_shots+0xce>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    ca8c:	f4 01       	movw	r30, r8
    ca8e:	42 80       	ldd	r4, Z+2	; 0x02
    ca90:	53 80       	ldd	r5, Z+3	; 0x03
    ca92:	60 80       	ld	r6, Z
    ca94:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    ca96:	d0 90 b2 0d 	lds	r13, 0x0DB2
    ca9a:	06 2d       	mov	r16, r6
    ca9c:	0d 19       	sub	r16, r13
    ca9e:	20 91 dc 0d 	lds	r18, 0x0DDC
    caa2:	22 0f       	add	r18, r18
    caa4:	22 0f       	add	r18, r18
    caa6:	22 0f       	add	r18, r18
    caa8:	40 91 db 0d 	lds	r20, 0x0DDB
    caac:	44 0f       	add	r20, r20
    caae:	44 0f       	add	r20, r20
    cab0:	44 0f       	add	r20, r20
    cab2:	80 91 d0 0d 	lds	r24, 0x0DD0
    cab6:	98 e0       	ldi	r25, 0x08	; 8
    cab8:	a9 2e       	mov	r10, r25
    caba:	38 e0       	ldi	r19, 0x08	; 8
    cabc:	c3 2e       	mov	r12, r19
    cabe:	e4 2c       	mov	r14, r4
    cac0:	60 91 d2 0d 	lds	r22, 0x0DD2
    cac4:	8d 19       	sub	r24, r13
    cac6:	0e 94 a4 51 	call	0xa348	; 0xa348 <LBCollides>
    caca:	88 23       	and	r24, r24
    cacc:	f1 f0       	breq	.+60     	; 0xcb0a <animate_enemy_shots+0xda>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    cace:	41 e0       	ldi	r20, 0x01	; 1
    cad0:	6f ef       	ldi	r22, 0xFF	; 255
    cad2:	84 e0       	ldi	r24, 0x04	; 4
    cad4:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    cad8:	80 91 df 0d 	lds	r24, 0x0DDF
    cadc:	fe 01       	movw	r30, r28
    cade:	31 97       	sbiw	r30, 0x01	; 1
    cae0:	90 81       	ld	r25, Z
    cae2:	89 1b       	sub	r24, r25
    cae4:	80 93 df 0d 	sts	0x0DDF, r24
#endif
						if (game.player.shield <= 0)
    cae8:	18 16       	cp	r1, r24
    caea:	4c f0       	brlt	.+18     	; 0xcafe <animate_enemy_shots+0xce>
						{
							SFX_PLAYER_EXPLODE;
    caec:	41 e0       	ldi	r20, 0x01	; 1
    caee:	6f ef       	ldi	r22, 0xFF	; 255
    caf0:	85 e0       	ldi	r24, 0x05	; 5
    caf2:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
							game.player.shield = 0;
    caf6:	10 92 df 0d 	sts	0x0DDF, r1
							game.player.flags = EXPLODING;
    cafa:	f0 92 d8 0d 	sts	0x0DD8, r15
						}
						game.enemies[i].shot[j].active = 0;
    cafe:	18 82       	st	Y, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    cb00:	01 e0       	ldi	r16, 0x01	; 1
    cb02:	21 e0       	ldi	r18, 0x01	; 1
    cb04:	40 e0       	ldi	r20, 0x00	; 0
    cb06:	60 ee       	ldi	r22, 0xE0	; 224
    cb08:	20 c0       	rjmp	.+64     	; 0xcb4a <animate_enemy_shots+0x11a>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    cb0a:	00 91 cc 0d 	lds	r16, 0x0DCC
    cb0e:	60 2f       	mov	r22, r16
    cb10:	fe 01       	movw	r30, r28
    cb12:	34 97       	sbiw	r30, 0x04	; 4
    cb14:	80 81       	ld	r24, Z
    cb16:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    cb1a:	68 0e       	add	r6, r24
    cb1c:	79 1e       	adc	r7, r25
    cb1e:	f4 01       	movw	r30, r8
    cb20:	71 82       	std	Z+1, r7	; 0x01
    cb22:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    cb24:	60 2f       	mov	r22, r16
    cb26:	fe 01       	movw	r30, r28
    cb28:	35 97       	sbiw	r30, 0x05	; 5
    cb2a:	80 81       	ld	r24, Z
    cb2c:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBMoveDelta>
    cb30:	48 0e       	add	r4, r24
    cb32:	59 1e       	adc	r5, r25
    cb34:	f4 01       	movw	r30, r8
    cb36:	53 82       	std	Z+3, r5	; 0x03
    cb38:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    cb3a:	80 91 ba 0d 	lds	r24, 0x0DBA
    cb3e:	44 2d       	mov	r20, r4
    cb40:	48 1b       	sub	r20, r24
    cb42:	66 2d       	mov	r22, r6
    cb44:	6d 19       	sub	r22, r13
    cb46:	01 e0       	ldi	r16, 0x01	; 1
    cb48:	21 e0       	ldi	r18, 0x01	; 1
    cb4a:	81 2f       	mov	r24, r17
    cb4c:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
					}
				}
			}
			slot += 1;
    cb50:	1f 5f       	subi	r17, 0xFF	; 255
    cb52:	f5 e3       	ldi	r31, 0x35	; 53
    cb54:	8f 0e       	add	r8, r31
    cb56:	91 1c       	adc	r9, r1
    cb58:	e5 96       	adiw	r28, 0x35	; 53

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cb5a:	14 31       	cpi	r17, 0x14	; 20
    cb5c:	09 f0       	breq	.+2      	; 0xcb60 <animate_enemy_shots+0x130>
    cb5e:	80 cf       	rjmp	.-256    	; 0xca60 <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    cb60:	df 91       	pop	r29
    cb62:	cf 91       	pop	r28
    cb64:	1f 91       	pop	r17
    cb66:	0f 91       	pop	r16
    cb68:	ff 90       	pop	r15
    cb6a:	ef 90       	pop	r14
    cb6c:	df 90       	pop	r13
    cb6e:	cf 90       	pop	r12
    cb70:	af 90       	pop	r10
    cb72:	9f 90       	pop	r9
    cb74:	8f 90       	pop	r8
    cb76:	7f 90       	pop	r7
    cb78:	6f 90       	pop	r6
    cb7a:	5f 90       	pop	r5
    cb7c:	4f 90       	pop	r4
    cb7e:	08 95       	ret

0000cb80 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    cb80:	ef 92       	push	r14
    cb82:	ff 92       	push	r15
    cb84:	0f 93       	push	r16
    cb86:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    cb88:	c8 2f       	mov	r28, r24
    cb8a:	e6 2e       	mov	r14, r22
    cb8c:	f1 2c       	mov	r15, r1
    cb8e:	e8 0e       	add	r14, r24
    cb90:	f1 1c       	adc	r15, r1
    cb92:	8c 2f       	mov	r24, r28
    cb94:	90 e0       	ldi	r25, 0x00	; 0
    cb96:	8e 15       	cp	r24, r14
    cb98:	9f 05       	cpc	r25, r15
    cb9a:	7c f4       	brge	.+30     	; 0xcbba <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    cb9c:	40 e0       	ldi	r20, 0x00	; 0
    cb9e:	6e e2       	ldi	r22, 0x2E	; 46
    cba0:	77 e3       	ldi	r23, 0x37	; 55
    cba2:	8c 2f       	mov	r24, r28
    cba4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cba8:	01 e0       	ldi	r16, 0x01	; 1
    cbaa:	21 e0       	ldi	r18, 0x01	; 1
    cbac:	40 e0       	ldi	r20, 0x00	; 0
    cbae:	60 ee       	ldi	r22, 0xE0	; 224
    cbb0:	8c 2f       	mov	r24, r28
    cbb2:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cbb6:	cf 5f       	subi	r28, 0xFF	; 255
    cbb8:	ec cf       	rjmp	.-40     	; 0xcb92 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cbba:	cf 91       	pop	r28
    cbbc:	0f 91       	pop	r16
    cbbe:	ff 90       	pop	r15
    cbc0:	ef 90       	pop	r14
    cbc2:	08 95       	ret

0000cbc4 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    cbc4:	61 e0       	ldi	r22, 0x01	; 1
    cbc6:	81 e0       	ldi	r24, 0x01	; 1
    cbc8:	0e 94 2d 50 	call	0xa05a	; 0xa05a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cbcc:	64 e1       	ldi	r22, 0x14	; 20
    cbce:	80 e0       	ldi	r24, 0x00	; 0
    cbd0:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
	LBRotateSprites();
    cbd4:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	ClearVram();
    cbd8:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cbdc:	60 e0       	ldi	r22, 0x00	; 0
    cbde:	81 e0       	ldi	r24, 0x01	; 1
    cbe0:	0c 94 21 50 	jmp	0xa042	; 0xa042 <FadeIn>

0000cbe4 <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    cbe4:	0f 93       	push	r16
    cbe6:	cf 93       	push	r28
    cbe8:	df 93       	push	r29
    cbea:	c8 2f       	mov	r28, r24
    cbec:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    cbee:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    cbf2:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    cbf6:	8d e1       	ldi	r24, 0x1D	; 29
    cbf8:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    cbfc:	81 e3       	ldi	r24, 0x31	; 49
    cbfe:	97 e3       	ldi	r25, 0x37	; 55
    cc00:	90 93 b1 0c 	sts	0x0CB1, r25
    cc04:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    cc08:	83 e0       	ldi	r24, 0x03	; 3
    cc0a:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    cc0e:	82 e0       	ldi	r24, 0x02	; 2
    cc10:	0e 94 0e 5a 	call	0xb41c	; 0xb41c <clear_overlay>
	game.current_level_index = index;
    cc14:	c0 93 c7 0d 	sts	0x0DC7, r28
	game.level_ended = 0;
    cc18:	10 92 cf 0d 	sts	0x0DCF, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cc1c:	10 92 49 0e 	sts	0x0E49, r1
    cc20:	10 92 48 0e 	sts	0x0E48, r1
	p->pressed = 0;
    cc24:	10 92 45 0e 	sts	0x0E45, r1
    cc28:	10 92 44 0e 	sts	0x0E44, r1
	p->released = 0;
    cc2c:	10 92 47 0e 	sts	0x0E47, r1
    cc30:	10 92 46 0e 	sts	0x0E46, r1
	p->held_cycles = 0;
    cc34:	10 92 4a 0e 	sts	0x0E4A, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cc38:	10 92 c4 0e 	sts	0x0EC4, r1
    cc3c:	10 92 c3 0e 	sts	0x0EC3, r1
	p->pressed = 0;
    cc40:	10 92 c0 0e 	sts	0x0EC0, r1
    cc44:	10 92 bf 0e 	sts	0x0EBF, r1
	p->released = 0;
    cc48:	10 92 c2 0e 	sts	0x0EC2, r1
    cc4c:	10 92 c1 0e 	sts	0x0EC1, r1
	p->held_cycles = 0;
    cc50:	10 92 c5 0e 	sts	0x0EC5, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    cc54:	8c 2f       	mov	r24, r28
    cc56:	90 e0       	ldi	r25, 0x00	; 0
    cc58:	8a 30       	cpi	r24, 0x0A	; 10
    cc5a:	91 05       	cpc	r25, r1
    cc5c:	d8 f4       	brcc	.+54     	; 0xcc94 <load_level+0xb0>
    cc5e:	fc 01       	movw	r30, r24
    cc60:	e8 5c       	subi	r30, 0xC8	; 200
    cc62:	ff 4f       	sbci	r31, 0xFF	; 255
    cc64:	0c 94 6c 72 	jmp	0xe4d8	; 0xe4d8 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    cc68:	86 ef       	ldi	r24, 0xF6	; 246
    cc6a:	95 e7       	ldi	r25, 0x75	; 117
    cc6c:	11 c0       	rjmp	.+34     	; 0xcc90 <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    cc6e:	85 ef       	ldi	r24, 0xF5	; 245
    cc70:	94 e7       	ldi	r25, 0x74	; 116
    cc72:	0e c0       	rjmp	.+28     	; 0xcc90 <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    cc74:	84 ef       	ldi	r24, 0xF4	; 244
    cc76:	93 e7       	ldi	r25, 0x73	; 115
    cc78:	0b c0       	rjmp	.+22     	; 0xcc90 <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    cc7a:	83 ef       	ldi	r24, 0xF3	; 243
    cc7c:	92 e7       	ldi	r25, 0x72	; 114
    cc7e:	08 c0       	rjmp	.+16     	; 0xcc90 <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    cc80:	81 ef       	ldi	r24, 0xF1	; 241
    cc82:	90 e7       	ldi	r25, 0x70	; 112
    cc84:	05 c0       	rjmp	.+10     	; 0xcc90 <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    cc86:	82 ef       	ldi	r24, 0xF2	; 242
    cc88:	91 e7       	ldi	r25, 0x71	; 113
    cc8a:	02 c0       	rjmp	.+4      	; 0xcc90 <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    cc8c:	80 ef       	ldi	r24, 0xF0	; 240
    cc8e:	9f e6       	ldi	r25, 0x6F	; 111
    cc90:	0e 94 46 5c 	call	0xb88c	; 0xb88c <map_level_info>
	}
	game.column_count = 0;
    cc94:	10 92 c3 0d 	sts	0x0DC3, r1
	game.camera_x = get_camera_x(index);
    cc98:	10 92 b3 0d 	sts	0x0DB3, r1
    cc9c:	10 92 b2 0d 	sts	0x0DB2, r1
	game.camera_y = get_camera_y(index);
    cca0:	10 92 ba 0d 	sts	0x0DBA, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    cca4:	88 e1       	ldi	r24, 0x18	; 24
    cca6:	90 e0       	ldi	r25, 0x00	; 0
    cca8:	90 93 d1 0d 	sts	0x0DD1, r25
    ccac:	80 93 d0 0d 	sts	0x0DD0, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    ccb0:	88 ea       	ldi	r24, 0xA8	; 168
    ccb2:	90 e0       	ldi	r25, 0x00	; 0
    ccb4:	90 93 d3 0d 	sts	0x0DD3, r25
    ccb8:	80 93 d2 0d 	sts	0x0DD2, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    ccbc:	28 ed       	ldi	r18, 0xD8	; 216
    ccbe:	37 e0       	ldi	r19, 0x07	; 7
    ccc0:	30 93 4c 0e 	sts	0x0E4C, r19
    ccc4:	20 93 4b 0e 	sts	0x0E4B, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    ccc8:	90 93 4e 0e 	sts	0x0E4E, r25
    cccc:	80 93 4d 0e 	sts	0x0E4D, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    ccd0:	8d e1       	ldi	r24, 0x1D	; 29
    ccd2:	80 93 bb 0d 	sts	0x0DBB, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    ccd6:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    ccda:	8a e1       	ldi	r24, 0x1A	; 26
    ccdc:	80 93 bc 0d 	sts	0x0DBC, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cce0:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    cce4:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    cce8:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    ccec:	8a e0       	ldi	r24, 0x0A	; 10
    ccee:	80 93 ce 0d 	sts	0x0DCE, r24
	render_camera_view();
    ccf2:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    ccf6:	40 ee       	ldi	r20, 0xE0	; 224
    ccf8:	5a e0       	ldi	r21, 0x0A	; 10
    ccfa:	6d e1       	ldi	r22, 0x1D	; 29
    ccfc:	80 e0       	ldi	r24, 0x00	; 0
    ccfe:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    cd02:	43 ed       	ldi	r20, 0xD3	; 211
    cd04:	5a e0       	ldi	r21, 0x0A	; 10
    cd06:	6d e1       	ldi	r22, 0x1D	; 29
    cd08:	82 e1       	ldi	r24, 0x12	; 18
    cd0a:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    cd0e:	49 ed       	ldi	r20, 0xD9	; 217
    cd10:	5a e0       	ldi	r21, 0x0A	; 10
    cd12:	6e e1       	ldi	r22, 0x1E	; 30
    cd14:	80 e0       	ldi	r24, 0x00	; 0
    cd16:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    cd1a:	48 ee       	ldi	r20, 0xE8	; 232
    cd1c:	5a e0       	ldi	r21, 0x0A	; 10
    cd1e:	6e e1       	ldi	r22, 0x1E	; 30
    cd20:	81 e1       	ldi	r24, 0x11	; 17
    cd22:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    cd26:	42 e9       	ldi	r20, 0x92	; 146
    cd28:	5a e0       	ldi	r21, 0x0A	; 10
    cd2a:	6f e1       	ldi	r22, 0x1F	; 31
    cd2c:	81 e1       	ldi	r24, 0x11	; 17
    cd2e:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cd32:	21 e0       	ldi	r18, 0x01	; 1
    cd34:	40 91 df 0d 	lds	r20, 0x0DDF
    cd38:	6d e1       	ldi	r22, 0x1D	; 29
    cd3a:	89 e0       	ldi	r24, 0x09	; 9
    cd3c:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cd40:	40 91 b8 0d 	lds	r20, 0x0DB8
    cd44:	50 91 b9 0d 	lds	r21, 0x0DB9
    cd48:	21 e0       	ldi	r18, 0x01	; 1
    cd4a:	6d e1       	ldi	r22, 0x1D	; 29
    cd4c:	8b e1       	ldi	r24, 0x1B	; 27
    cd4e:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cd52:	21 e0       	ldi	r18, 0x01	; 1
    cd54:	40 91 c5 0d 	lds	r20, 0x0DC5
    cd58:	6e e1       	ldi	r22, 0x1E	; 30
    cd5a:	89 e0       	ldi	r24, 0x09	; 9
    cd5c:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cd60:	40 91 b6 0d 	lds	r20, 0x0DB6
    cd64:	50 91 b7 0d 	lds	r21, 0x0DB7
    cd68:	21 e0       	ldi	r18, 0x01	; 1
    cd6a:	6e e1       	ldi	r22, 0x1E	; 30
    cd6c:	8b e1       	ldi	r24, 0x1B	; 27
    cd6e:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cd72:	40 91 b4 0d 	lds	r20, 0x0DB4
    cd76:	50 91 b5 0d 	lds	r21, 0x0DB5
    cd7a:	21 e0       	ldi	r18, 0x01	; 1
    cd7c:	6f e1       	ldi	r22, 0x1F	; 31
    cd7e:	8b e1       	ldi	r24, 0x1B	; 27
    cd80:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cd84:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    cd88:	81 11       	cpse	r24, r1
    cd8a:	39 c0       	rjmp	.+114    	; 0xcdfe <load_level+0x21a>
    cd8c:	dd 23       	and	r29, r29
    cd8e:	b9 f1       	breq	.+110    	; 0xcdfe <load_level+0x21a>
	{
		map_ship();
    cd90:	0e 94 31 5c 	call	0xb862	; 0xb862 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cd94:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cd96:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cd98:	81 e0       	ldi	r24, 0x01	; 1
    cd9a:	90 e0       	ldi	r25, 0x00	; 0
    cd9c:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cda0:	8c 2f       	mov	r24, r28
    cda2:	90 e0       	ldi	r25, 0x00	; 0
    cda4:	88 3a       	cpi	r24, 0xA8	; 168
    cda6:	91 05       	cpc	r25, r1
    cda8:	74 f0       	brlt	.+28     	; 0xcdc6 <load_level+0x1e2>
			{
				LBMapSprite(0, map_hero_idle, 0);
    cdaa:	40 e0       	ldi	r20, 0x00	; 0
    cdac:	62 e0       	ldi	r22, 0x02	; 2
    cdae:	77 e3       	ldi	r23, 0x37	; 55
    cdb0:	80 e0       	ldi	r24, 0x00	; 0
    cdb2:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cdb6:	03 e0       	ldi	r16, 0x03	; 3
    cdb8:	22 e0       	ldi	r18, 0x02	; 2
    cdba:	48 ea       	ldi	r20, 0xA8	; 168
    cdbc:	68 e1       	ldi	r22, 0x18	; 24
    cdbe:	80 e0       	ldi	r24, 0x00	; 0
    cdc0:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
				ship_increment = -3;
    cdc4:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cdc6:	84 e2       	ldi	r24, 0x24	; 36
    cdc8:	9e e0       	ldi	r25, 0x0E	; 14
    cdca:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    cdce:	40 e0       	ldi	r20, 0x00	; 0
    cdd0:	bc 01       	movw	r22, r24
    cdd2:	86 e0       	ldi	r24, 0x06	; 6
    cdd4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cdd8:	02 e0       	ldi	r16, 0x02	; 2
    cdda:	24 e0       	ldi	r18, 0x04	; 4
    cddc:	4c 2f       	mov	r20, r28
    cdde:	68 e0       	ldi	r22, 0x08	; 8
    cde0:	86 e0       	ldi	r24, 0x06	; 6
    cde2:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			ship_y += ship_increment;
    cde6:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cde8:	39 f4       	brne	.+14     	; 0xcdf8 <load_level+0x214>
			{
				clear_sprites(6, 8);
    cdea:	68 e0       	ldi	r22, 0x08	; 8
    cdec:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    cdee:	df 91       	pop	r29
    cdf0:	cf 91       	pop	r28
    cdf2:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    cdf4:	0c 94 c0 65 	jmp	0xcb80	; 0xcb80 <clear_sprites>
				break;
			}
			LBRotateSprites();
    cdf8:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		}
    cdfc:	cd cf       	rjmp	.-102    	; 0xcd98 <load_level+0x1b4>
	}
}
    cdfe:	df 91       	pop	r29
    ce00:	cf 91       	pop	r28
    ce02:	0f 91       	pop	r16
    ce04:	08 95       	ret

0000ce06 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    ce06:	0f 93       	push	r16
    ce08:	1f 93       	push	r17
    ce0a:	cf 93       	push	r28
    ce0c:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    ce0e:	18 2f       	mov	r17, r24
    ce10:	c6 2f       	mov	r28, r22
    ce12:	d0 e0       	ldi	r29, 0x00	; 0
    ce14:	c8 0f       	add	r28, r24
    ce16:	d1 1d       	adc	r29, r1
    ce18:	81 2f       	mov	r24, r17
    ce1a:	90 e0       	ldi	r25, 0x00	; 0
    ce1c:	8c 17       	cp	r24, r28
    ce1e:	9d 07       	cpc	r25, r29
    ce20:	4c f4       	brge	.+18     	; 0xce34 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    ce22:	01 e0       	ldi	r16, 0x01	; 1
    ce24:	21 e0       	ldi	r18, 0x01	; 1
    ce26:	40 e0       	ldi	r20, 0x00	; 0
    ce28:	60 ee       	ldi	r22, 0xE0	; 224
    ce2a:	81 2f       	mov	r24, r17
    ce2c:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    ce30:	1f 5f       	subi	r17, 0xFF	; 255
    ce32:	f2 cf       	rjmp	.-28     	; 0xce18 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    ce34:	df 91       	pop	r29
    ce36:	cf 91       	pop	r28
    ce38:	1f 91       	pop	r17
    ce3a:	0f 91       	pop	r16
    ce3c:	08 95       	ret

0000ce3e <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    ce3e:	fc 01       	movw	r30, r24
    ce40:	20 81       	ld	r18, Z
    ce42:	31 81       	ldd	r19, Z+1	; 0x01
    ce44:	28 70       	andi	r18, 0x08	; 8
    ce46:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    ce48:	81 e0       	ldi	r24, 0x01	; 1
    ce4a:	23 2b       	or	r18, r19
    ce4c:	09 f4       	brne	.+2      	; 0xce50 <select_pressed+0x12>
    ce4e:	80 e0       	ldi	r24, 0x00	; 0
}
    ce50:	08 95       	ret

0000ce52 <stream_text_middle>:


void stream_text_middle(const char* dialogue, u8 y)
{
    ce52:	ff 92       	push	r15
    ce54:	0f 93       	push	r16
    ce56:	1f 93       	push	r17
    ce58:	cf 93       	push	r28
    ce5a:	df 93       	push	r29
    ce5c:	ec 01       	movw	r28, r24
    ce5e:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    ce60:	8e e0       	ldi	r24, 0x0E	; 14
    ce62:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    ce64:	fe 01       	movw	r30, r28
    ce66:	84 91       	lpm	r24, Z
    ce68:	83 32       	cpi	r24, 0x23	; 35
    ce6a:	21 f1       	breq	.+72     	; 0xceb4 <stream_text_middle+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    ce6c:	6f ef       	ldi	r22, 0xFF	; 255
    ce6e:	70 e0       	ldi	r23, 0x00	; 0
    ce70:	ce 01       	movw	r24, r28
    ce72:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <strnlen_P>
		x = 14 - ln / 2;
    ce76:	86 95       	lsr	r24
    ce78:	0f 2d       	mov	r16, r15
    ce7a:	08 1b       	sub	r16, r24
    ce7c:	0c 1b       	sub	r16, r28
    ce7e:	8c 2f       	mov	r24, r28
    ce80:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    ce82:	21 96       	adiw	r28, 0x01	; 1
    ce84:	fe 01       	movw	r30, r28
    ce86:	31 97       	sbiw	r30, 0x01	; 1
    ce88:	44 91       	lpm	r20, Z
    ce8a:	44 23       	and	r20, r20
    ce8c:	89 f0       	breq	.+34     	; 0xceb0 <stream_text_middle+0x5e>
		{
			LBPrintChar(x++, y, c);
    ce8e:	61 2f       	mov	r22, r17
    ce90:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    ce94:	60 e0       	ldi	r22, 0x00	; 0
    ce96:	84 e4       	ldi	r24, 0x44	; 68
    ce98:	9e e0       	ldi	r25, 0x0E	; 14
    ce9a:	0e 94 b3 50 	call	0xa166	; 0xa166 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    ce9e:	80 91 48 0e 	lds	r24, 0x0E48
    cea2:	80 fd       	sbrc	r24, 0
    cea4:	ec cf       	rjmp	.-40     	; 0xce7e <stream_text_middle+0x2c>
    cea6:	80 e7       	ldi	r24, 0x70	; 112
    cea8:	97 e1       	ldi	r25, 0x17	; 23
    ceaa:	0e 94 16 41 	call	0x822c	; 0x822c <WaitUs>
    ceae:	e7 cf       	rjmp	.-50     	; 0xce7e <stream_text_middle+0x2c>
		}
		y++;
    ceb0:	1f 5f       	subi	r17, 0xFF	; 255
    ceb2:	d8 cf       	rjmp	.-80     	; 0xce64 <stream_text_middle+0x12>
	}
}
    ceb4:	df 91       	pop	r29
    ceb6:	cf 91       	pop	r28
    ceb8:	1f 91       	pop	r17
    ceba:	0f 91       	pop	r16
    cebc:	ff 90       	pop	r15
    cebe:	08 95       	ret

0000cec0 <stream_text_anywhere>:

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    cec0:	ff 92       	push	r15
    cec2:	0f 93       	push	r16
    cec4:	1f 93       	push	r17
    cec6:	cf 93       	push	r28
    cec8:	df 93       	push	r29
    ceca:	f6 2e       	mov	r15, r22
    cecc:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    cece:	fc 01       	movw	r30, r24
    ced0:	24 91       	lpm	r18, Z
    ced2:	23 32       	cpi	r18, 0x23	; 35
    ced4:	b1 f0       	breq	.+44     	; 0xcf02 <stream_text_anywhere+0x42>
    ced6:	ec 01       	movw	r28, r24
    ced8:	0f 2d       	mov	r16, r15
    ceda:	08 1b       	sub	r16, r24
    cedc:	8c 2f       	mov	r24, r28
    cede:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cee0:	21 96       	adiw	r28, 0x01	; 1
    cee2:	fe 01       	movw	r30, r28
    cee4:	31 97       	sbiw	r30, 0x01	; 1
    cee6:	44 91       	lpm	r20, Z
    cee8:	44 23       	and	r20, r20
    ceea:	41 f0       	breq	.+16     	; 0xcefc <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    ceec:	61 2f       	mov	r22, r17
    ceee:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    cef2:	80 e7       	ldi	r24, 0x70	; 112
    cef4:	97 e1       	ldi	r25, 0x17	; 23
    cef6:	0e 94 16 41 	call	0x822c	; 0x822c <WaitUs>
    cefa:	f0 cf       	rjmp	.-32     	; 0xcedc <stream_text_anywhere+0x1c>
		}
		y++;
    cefc:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cefe:	ce 01       	movw	r24, r28
    cf00:	e6 cf       	rjmp	.-52     	; 0xcece <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cf02:	df 91       	pop	r29
    cf04:	cf 91       	pop	r28
    cf06:	1f 91       	pop	r17
    cf08:	0f 91       	pop	r16
    cf0a:	ff 90       	pop	r15
    cf0c:	08 95       	ret

0000cf0e <map_particles>:

void map_particles()
{
    cf0e:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    cf10:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    cf12:	40 e0       	ldi	r20, 0x00	; 0
    cf14:	62 e2       	ldi	r22, 0x22	; 34
    cf16:	77 e3       	ldi	r23, 0x37	; 55
    cf18:	8c 2f       	mov	r24, r28
    cf1a:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    cf1e:	cf 5f       	subi	r28, 0xFF	; 255
    cf20:	c4 31       	cpi	r28, 0x14	; 20
    cf22:	b9 f7       	brne	.-18     	; 0xcf12 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    cf24:	cf 91       	pop	r28
    cf26:	08 95       	ret

0000cf28 <place_particles>:

void place_particles()
{
    cf28:	0f 93       	push	r16
    cf2a:	1f 93       	push	r17
    cf2c:	cf 93       	push	r28
    cf2e:	df 93       	push	r29
    cf30:	1f 92       	push	r1
    cf32:	cd b7       	in	r28, 0x3d	; 61
    cf34:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    cf36:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    cf38:	68 ec       	ldi	r22, 0xC8	; 200
    cf3a:	80 e0       	ldi	r24, 0x00	; 0
    cf3c:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    cf40:	48 2f       	mov	r20, r24
    cf42:	60 ee       	ldi	r22, 0xE0	; 224
    cf44:	80 e0       	ldi	r24, 0x00	; 0
    cf46:	49 83       	std	Y+1, r20	; 0x01
    cf48:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    cf4c:	68 2f       	mov	r22, r24
    cf4e:	01 e0       	ldi	r16, 0x01	; 1
    cf50:	21 e0       	ldi	r18, 0x01	; 1
    cf52:	49 81       	ldd	r20, Y+1	; 0x01
    cf54:	81 2f       	mov	r24, r17
    cf56:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    cf5a:	1f 5f       	subi	r17, 0xFF	; 255
    cf5c:	14 31       	cpi	r17, 0x14	; 20
    cf5e:	61 f7       	brne	.-40     	; 0xcf38 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    cf60:	0f 90       	pop	r0
    cf62:	df 91       	pop	r29
    cf64:	cf 91       	pop	r28
    cf66:	1f 91       	pop	r17
    cf68:	0f 91       	pop	r16
    cf6a:	08 95       	ret

0000cf6c <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    cf6c:	ef 92       	push	r14
    cf6e:	ff 92       	push	r15
    cf70:	0f 93       	push	r16
    cf72:	1f 93       	push	r17
    cf74:	cf 93       	push	r28
    cf76:	df 93       	push	r29
    cf78:	d8 2f       	mov	r29, r24
    cf7a:	16 2f       	mov	r17, r22
    cf7c:	80 e0       	ldi	r24, 0x00	; 0
    cf7e:	e8 2e       	mov	r14, r24
    cf80:	80 e1       	ldi	r24, 0x10	; 16
    cf82:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    cf84:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    cf86:	f7 01       	movw	r30, r14
    cf88:	40 81       	ld	r20, Z
    cf8a:	4d 0f       	add	r20, r29
    cf8c:	01 e0       	ldi	r16, 0x01	; 1
    cf8e:	21 e0       	ldi	r18, 0x01	; 1
    cf90:	31 97       	sbiw	r30, 0x01	; 1
    cf92:	60 81       	ld	r22, Z
    cf94:	8c 2f       	mov	r24, r28
    cf96:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    cf9a:	f7 01       	movw	r30, r14
    cf9c:	80 81       	ld	r24, Z
    cf9e:	89 3c       	cpi	r24, 0xC9	; 201
    cfa0:	50 f0       	brcs	.+20     	; 0xcfb6 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    cfa2:	60 ee       	ldi	r22, 0xE0	; 224
    cfa4:	80 e0       	ldi	r24, 0x00	; 0
    cfa6:	0e 94 ce 51 	call	0xa39c	; 0xa39c <LBRandom>
    cfaa:	21 e0       	ldi	r18, 0x01	; 1
    cfac:	41 2f       	mov	r20, r17
    cfae:	68 2f       	mov	r22, r24
    cfb0:	8c 2f       	mov	r24, r28
    cfb2:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    cfb6:	cf 5f       	subi	r28, 0xFF	; 255
    cfb8:	f4 e0       	ldi	r31, 0x04	; 4
    cfba:	ef 0e       	add	r14, r31
    cfbc:	f1 1c       	adc	r15, r1
    cfbe:	c4 31       	cpi	r28, 0x14	; 20
    cfc0:	11 f7       	brne	.-60     	; 0xcf86 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    cfc2:	df 91       	pop	r29
    cfc4:	cf 91       	pop	r28
    cfc6:	1f 91       	pop	r17
    cfc8:	0f 91       	pop	r16
    cfca:	ff 90       	pop	r15
    cfcc:	ef 90       	pop	r14
    cfce:	08 95       	ret

0000cfd0 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    cfd0:	82 50       	subi	r24, 0x02	; 2
    cfd2:	87 30       	cpi	r24, 0x07	; 7
    cfd4:	48 f4       	brcc	.+18     	; 0xcfe8 <get_emarald_map+0x18>
    cfd6:	e8 2f       	mov	r30, r24
    cfd8:	f0 e0       	ldi	r31, 0x00	; 0
    cfda:	ee 0f       	add	r30, r30
    cfdc:	ff 1f       	adc	r31, r31
    cfde:	ee 5f       	subi	r30, 0xFE	; 254
    cfe0:	fa 4f       	sbci	r31, 0xFA	; 250
    cfe2:	80 81       	ld	r24, Z
    cfe4:	91 81       	ldd	r25, Z+1	; 0x01
    cfe6:	08 95       	ret
    cfe8:	86 e1       	ldi	r24, 0x16	; 22
    cfea:	97 e3       	ldi	r25, 0x37	; 55
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    cfec:	08 95       	ret

0000cfee <music_transition>:

void music_transition()
{
	if (is_space())
    cfee:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    cff2:	88 23       	and	r24, r24
    cff4:	19 f0       	breq	.+6      	; 0xcffc <music_transition+0xe>
	{
		StartSong(spacesong);
    cff6:	87 e1       	ldi	r24, 0x17	; 23
    cff8:	9b e0       	ldi	r25, 0x0B	; 11
    cffa:	06 c0       	rjmp	.+12     	; 0xd008 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    cffc:	80 91 c7 0d 	lds	r24, 0x0DC7
    d000:	88 23       	and	r24, r24
    d002:	21 f0       	breq	.+8      	; 0xd00c <music_transition+0x1e>
	{
		StartSong(planetsong);
    d004:	87 eb       	ldi	r24, 0xB7	; 183
    d006:	91 e1       	ldi	r25, 0x11	; 17
    d008:	0c 94 d4 43 	jmp	0x87a8	; 0x87a8 <StartSong>
    d00c:	08 95       	ret

0000d00e <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d00e:	cf 92       	push	r12
    d010:	df 92       	push	r13
    d012:	ef 92       	push	r14
    d014:	ff 92       	push	r15
    d016:	0f 93       	push	r16
    d018:	1f 93       	push	r17
    d01a:	cf 93       	push	r28
    d01c:	df 93       	push	r29
    d01e:	1f 92       	push	r1
    d020:	cd b7       	in	r28, 0x3d	; 61
    d022:	de b7       	in	r29, 0x3e	; 62
    d024:	c8 2e       	mov	r12, r24
    d026:	e6 2e       	mov	r14, r22
    d028:	12 2f       	mov	r17, r18
    d02a:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    d02c:	49 83       	std	Y+1, r20	; 0x01
    d02e:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <fade_through>
	Screen.scrollX = 0;
    d032:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d036:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d03a:	80 e2       	ldi	r24, 0x20	; 32
    d03c:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d040:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    d044:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    d048:	10 92 be 0d 	sts	0x0DBE, r1
	map_particles();
    d04c:	0e 94 87 67 	call	0xcf0e	; 0xcf0e <map_particles>
	map_ship();
    d050:	0e 94 31 5c 	call	0xb862	; 0xb862 <map_ship>
	place_particles();
    d054:	0e 94 94 67 	call	0xcf28	; 0xcf28 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    d058:	48 e5       	ldi	r20, 0x58	; 88
    d05a:	5f e5       	ldi	r21, 0x5F	; 95
    d05c:	69 81       	ldd	r22, Y+1	; 0x01
    d05e:	80 e0       	ldi	r24, 0x00	; 0
    d060:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	game.current_level_index = index;
    d064:	c0 92 c7 0d 	sts	0x0DC7, r12
	music_transition();
    d068:	0e 94 f7 67 	call	0xcfee	; 0xcfee <music_transition>
	if (!is_space())
    d06c:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    d070:	81 11       	cpse	r24, r1
    d072:	0f c0       	rjmp	.+30     	; 0xd092 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    d074:	8c 2d       	mov	r24, r12
    d076:	0e 94 e8 67 	call	0xcfd0	; 0xcfd0 <get_emarald_map>
    d07a:	40 e0       	ldi	r20, 0x00	; 0
    d07c:	bc 01       	movw	r22, r24
    d07e:	88 e0       	ldi	r24, 0x08	; 8
    d080:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    d084:	01 e0       	ldi	r16, 0x01	; 1
    d086:	21 e0       	ldi	r18, 0x01	; 1
    d088:	40 e3       	ldi	r20, 0x30	; 48
    d08a:	60 e7       	ldi	r22, 0x70	; 112
    d08c:	88 e0       	ldi	r24, 0x08	; 8
    d08e:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d092:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    d094:	81 e0       	ldi	r24, 0x01	; 1
    d096:	90 e0       	ldi	r25, 0x00	; 0
    d098:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    d09c:	84 e2       	ldi	r24, 0x24	; 36
    d09e:	9e e0       	ldi	r25, 0x0E	; 14
    d0a0:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    d0a4:	40 e0       	ldi	r20, 0x00	; 0
    d0a6:	bc 01       	movw	r22, r24
    d0a8:	80 e0       	ldi	r24, 0x00	; 0
    d0aa:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    d0ae:	02 e0       	ldi	r16, 0x02	; 2
    d0b0:	24 e0       	ldi	r18, 0x04	; 4
    d0b2:	48 e6       	ldi	r20, 0x68	; 104
    d0b4:	68 e6       	ldi	r22, 0x68	; 104
    d0b6:	80 e0       	ldi	r24, 0x00	; 0
    d0b8:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		frame_counter++;
    d0bc:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    d0be:	8d 2d       	mov	r24, r13
    d0c0:	8f 70       	andi	r24, 0x0F	; 15
    d0c2:	29 f4       	brne	.+10     	; 0xd0ce <planet_transition+0xc0>
    d0c4:	90 91 b3 0c 	lds	r25, 0x0CB3
    d0c8:	9e 0d       	add	r25, r14
    d0ca:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    d0ce:	6f 2d       	mov	r22, r15
    d0d0:	81 2f       	mov	r24, r17
    d0d2:	0e 94 b6 67 	call	0xcf6c	; 0xcf6c <animate_particles>
		LBRotateSprites();
    d0d6:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    d0da:	8f ef       	ldi	r24, 0xFF	; 255
    d0dc:	d8 12       	cpse	r13, r24
    d0de:	da cf       	rjmp	.-76     	; 0xd094 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    d0e0:	82 e0       	ldi	r24, 0x02	; 2
    d0e2:	80 93 c6 0d 	sts	0x0DC6, r24
	ClearVram();
    d0e6:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d0ea:	64 e1       	ldi	r22, 0x14	; 20
    d0ec:	80 e0       	ldi	r24, 0x00	; 0
    d0ee:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
	LBRotateSprites();
    d0f2:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	fade_through();
    d0f6:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <fade_through>
	game.level_score = 0;
    d0fa:	10 92 b7 0d 	sts	0x0DB7, r1
    d0fe:	10 92 b6 0d 	sts	0x0DB6, r1
	load_level(index, true);
    d102:	61 e0       	ldi	r22, 0x01	; 1
    d104:	8c 2d       	mov	r24, r12
    d106:	0e 94 f2 65 	call	0xcbe4	; 0xcbe4 <load_level>
	init_player_state();
    d10a:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    d10e:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
}
    d112:	0f 90       	pop	r0
    d114:	df 91       	pop	r29
    d116:	cf 91       	pop	r28
    d118:	1f 91       	pop	r17
    d11a:	0f 91       	pop	r16
    d11c:	ff 90       	pop	r15
    d11e:	ef 90       	pop	r14
    d120:	df 90       	pop	r13
    d122:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d124:	0c 94 d1 52 	jmp	0xa5a2	; 0xa5a2 <init_enemy_state>

0000d128 <intro>:
}


void intro()
{
    d128:	0f 93       	push	r16
	fade_through();
    d12a:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <fade_through>
	game.lives = LIVES;
    d12e:	e2 eb       	ldi	r30, 0xB2	; 178
    d130:	fd e0       	ldi	r31, 0x0D	; 13
    d132:	85 e0       	ldi	r24, 0x05	; 5
    d134:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d136:	13 82       	std	Z+3, r1	; 0x03
    d138:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d13a:	15 82       	std	Z+5, r1	; 0x05
    d13c:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d13e:	17 82       	std	Z+7, r1	; 0x07
    d140:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    d142:	87 eb       	ldi	r24, 0xB7	; 183
    d144:	91 e1       	ldi	r25, 0x11	; 17
    d146:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    d14a:	40 e0       	ldi	r20, 0x00	; 0
    d14c:	66 e1       	ldi	r22, 0x16	; 22
    d14e:	77 e3       	ldi	r23, 0x37	; 55
    d150:	80 e0       	ldi	r24, 0x00	; 0
    d152:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    d156:	01 e0       	ldi	r16, 0x01	; 1
    d158:	21 e0       	ldi	r18, 0x01	; 1
    d15a:	40 e3       	ldi	r20, 0x30	; 48
    d15c:	60 e5       	ldi	r22, 0x50	; 80
    d15e:	80 e0       	ldi	r24, 0x00	; 0
    d160:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d164:	40 e0       	ldi	r20, 0x00	; 0
    d166:	63 e1       	ldi	r22, 0x13	; 19
    d168:	77 e3       	ldi	r23, 0x37	; 55
    d16a:	81 e0       	ldi	r24, 0x01	; 1
    d16c:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    d170:	21 e0       	ldi	r18, 0x01	; 1
    d172:	40 e3       	ldi	r20, 0x30	; 48
    d174:	60 e6       	ldi	r22, 0x60	; 96
    d176:	81 e0       	ldi	r24, 0x01	; 1
    d178:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    d17c:	40 e0       	ldi	r20, 0x00	; 0
    d17e:	60 e1       	ldi	r22, 0x10	; 16
    d180:	77 e3       	ldi	r23, 0x37	; 55
    d182:	82 e0       	ldi	r24, 0x02	; 2
    d184:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    d188:	21 e0       	ldi	r18, 0x01	; 1
    d18a:	40 e3       	ldi	r20, 0x30	; 48
    d18c:	60 e7       	ldi	r22, 0x70	; 112
    d18e:	82 e0       	ldi	r24, 0x02	; 2
    d190:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    d194:	40 e0       	ldi	r20, 0x00	; 0
    d196:	6d e0       	ldi	r22, 0x0D	; 13
    d198:	77 e3       	ldi	r23, 0x37	; 55
    d19a:	83 e0       	ldi	r24, 0x03	; 3
    d19c:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    d1a0:	21 e0       	ldi	r18, 0x01	; 1
    d1a2:	40 e3       	ldi	r20, 0x30	; 48
    d1a4:	60 e8       	ldi	r22, 0x80	; 128
    d1a6:	83 e0       	ldi	r24, 0x03	; 3
    d1a8:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    d1ac:	40 e0       	ldi	r20, 0x00	; 0
    d1ae:	6a e0       	ldi	r22, 0x0A	; 10
    d1b0:	77 e3       	ldi	r23, 0x37	; 55
    d1b2:	84 e0       	ldi	r24, 0x04	; 4
    d1b4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    d1b8:	21 e0       	ldi	r18, 0x01	; 1
    d1ba:	40 e3       	ldi	r20, 0x30	; 48
    d1bc:	60 e9       	ldi	r22, 0x90	; 144
    d1be:	84 e0       	ldi	r24, 0x04	; 4
    d1c0:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBRotateSprites();
    d1c4:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	stream_text_middle((const char*) strIntro, 12);
    d1c8:	6c e0       	ldi	r22, 0x0C	; 12
    d1ca:	83 ef       	ldi	r24, 0xF3	; 243
    d1cc:	99 e0       	ldi	r25, 0x09	; 9
    d1ce:	0e 94 29 67 	call	0xce52	; 0xce52 <stream_text_middle>
	LBWaitSeconds(1);
    d1d2:	81 e0       	ldi	r24, 0x01	; 1
    d1d4:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    d1d8:	07 ec       	ldi	r16, 0xC7	; 199
    d1da:	2d ef       	ldi	r18, 0xFD	; 253
    d1dc:	4c e1       	ldi	r20, 0x1C	; 28
    d1de:	61 e0       	ldi	r22, 0x01	; 1
    d1e0:	80 e0       	ldi	r24, 0x00	; 0
    d1e2:	0e 94 07 68 	call	0xd00e	; 0xd00e <planet_transition>
}
    d1e6:	0f 91       	pop	r16
    d1e8:	08 95       	ret

0000d1ea <load_splash>:

void load_splash()
{
	fade_through();
    d1ea:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <fade_through>
	Screen.scrollX = 0;
    d1ee:	ef ea       	ldi	r30, 0xAF	; 175
    d1f0:	fc e0       	ldi	r31, 0x0C	; 12
    d1f2:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d1f4:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d1f6:	80 e2       	ldi	r24, 0x20	; 32
    d1f8:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d1fa:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d1fc:	e2 eb       	ldi	r30, 0xB2	; 178
    d1fe:	fd e0       	ldi	r31, 0x0D	; 13
    d200:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    d202:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d204:	64 e1       	ldi	r22, 0x14	; 20
    d206:	80 e0       	ldi	r24, 0x00	; 0
    d208:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
	LBRotateSprites();
    d20c:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d210:	4c ef       	ldi	r20, 0xFC	; 252
    d212:	5a e0       	ldi	r21, 0x0A	; 10
    d214:	6f e0       	ldi	r22, 0x0F	; 15
    d216:	88 e0       	ldi	r24, 0x08	; 8
    d218:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d21c:	40 ef       	ldi	r20, 0xF0	; 240
    d21e:	5a e0       	ldi	r21, 0x0A	; 10
    d220:	60 e1       	ldi	r22, 0x10	; 16
    d222:	88 e0       	ldi	r24, 0x08	; 8
    d224:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d228:	42 e0       	ldi	r20, 0x02	; 2
    d22a:	5b e0       	ldi	r21, 0x0B	; 11
    d22c:	65 e1       	ldi	r22, 0x15	; 21
    d22e:	84 e0       	ldi	r24, 0x04	; 4
    d230:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	DrawMap2(6, 5, map_splash);
    d234:	4d e7       	ldi	r20, 0x7D	; 125
    d236:	50 e6       	ldi	r21, 0x60	; 96
    d238:	65 e0       	ldi	r22, 0x05	; 5
    d23a:	86 e0       	ldi	r24, 0x06	; 6
    d23c:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d240:	40 e0       	ldi	r20, 0x00	; 0
    d242:	6b e2       	ldi	r22, 0x2B	; 43
    d244:	77 e3       	ldi	r23, 0x37	; 55
    d246:	80 e0       	ldi	r24, 0x00	; 0
    d248:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <LBMapSprite>

0000d24c <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d24c:	2f 92       	push	r2
    d24e:	3f 92       	push	r3
    d250:	5f 92       	push	r5
    d252:	6f 92       	push	r6
    d254:	7f 92       	push	r7
    d256:	8f 92       	push	r8
    d258:	9f 92       	push	r9
    d25a:	af 92       	push	r10
    d25c:	bf 92       	push	r11
    d25e:	cf 92       	push	r12
    d260:	df 92       	push	r13
    d262:	ef 92       	push	r14
    d264:	ff 92       	push	r15
    d266:	0f 93       	push	r16
    d268:	1f 93       	push	r17
    d26a:	cf 93       	push	r28
    d26c:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d26e:	81 e0       	ldi	r24, 0x01	; 1
    d270:	80 93 c6 0d 	sts	0x0DC6, r24
	game.high_score_index = -1;
    d274:	8f ef       	ldi	r24, 0xFF	; 255
    d276:	80 93 c4 0d 	sts	0x0DC4, r24
	fade_through();
    d27a:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <fade_through>
	Screen.scrollX = 0;
    d27e:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d282:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d286:	80 e2       	ldi	r24, 0x20	; 32
    d288:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d28c:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    d290:	82 e9       	ldi	r24, 0x92	; 146
    d292:	9d e0       	ldi	r25, 0x0D	; 13
    d294:	0e 94 fc 59 	call	0xb3f8	; 0xb3f8 <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d298:	40 ef       	ldi	r20, 0xF0	; 240
    d29a:	5a e0       	ldi	r21, 0x0A	; 10
    d29c:	63 e0       	ldi	r22, 0x03	; 3
    d29e:	89 e0       	ldi	r24, 0x09	; 9
    d2a0:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d2a4:	40 e0       	ldi	r20, 0x00	; 0
    d2a6:	66 e1       	ldi	r22, 0x16	; 22
    d2a8:	77 e3       	ldi	r23, 0x37	; 55
    d2aa:	80 e0       	ldi	r24, 0x00	; 0
    d2ac:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d2b0:	40 e0       	ldi	r20, 0x00	; 0
    d2b2:	63 e1       	ldi	r22, 0x13	; 19
    d2b4:	77 e3       	ldi	r23, 0x37	; 55
    d2b6:	81 e0       	ldi	r24, 0x01	; 1
    d2b8:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d2bc:	01 e0       	ldi	r16, 0x01	; 1
    d2be:	21 e0       	ldi	r18, 0x01	; 1
    d2c0:	48 e1       	ldi	r20, 0x18	; 24
    d2c2:	68 e3       	ldi	r22, 0x38	; 56
    d2c4:	80 e0       	ldi	r24, 0x00	; 0
    d2c6:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d2ca:	21 e0       	ldi	r18, 0x01	; 1
    d2cc:	48 e1       	ldi	r20, 0x18	; 24
    d2ce:	68 ea       	ldi	r22, 0xA8	; 168
    d2d0:	81 e0       	ldi	r24, 0x01	; 1
    d2d2:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    d2d6:	84 e9       	ldi	r24, 0x94	; 148
    d2d8:	a8 2e       	mov	r10, r24
    d2da:	8d e0       	ldi	r24, 0x0D	; 13
    d2dc:	b8 2e       	mov	r11, r24
    d2de:	95 e9       	ldi	r25, 0x95	; 149
    d2e0:	c9 2e       	mov	r12, r25
    d2e2:	9d e0       	ldi	r25, 0x0D	; 13
    d2e4:	d9 2e       	mov	r13, r25
    d2e6:	26 e9       	ldi	r18, 0x96	; 150
    d2e8:	82 2e       	mov	r8, r18
    d2ea:	2d e0       	ldi	r18, 0x0D	; 13
    d2ec:	92 2e       	mov	r9, r18
    d2ee:	74 01       	movw	r14, r8
    d2f0:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d2f2:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d2f4:	35 e0       	ldi	r19, 0x05	; 5
    d2f6:	53 2e       	mov	r5, r19
    d2f8:	4d ea       	ldi	r20, 0xAD	; 173
    d2fa:	64 2e       	mov	r6, r20
    d2fc:	4d e0       	ldi	r20, 0x0D	; 13
    d2fe:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d300:	11 e4       	ldi	r17, 0x41	; 65
    d302:	0e 2d       	mov	r16, r14
    d304:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d306:	80 2f       	mov	r24, r16
    d308:	65 2d       	mov	r22, r5
    d30a:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    d30e:	41 e0       	ldi	r20, 0x01	; 1
    d310:	48 0f       	add	r20, r24
    d312:	20 e0       	ldi	r18, 0x00	; 0
    d314:	6c 2f       	mov	r22, r28
    d316:	89 e0       	ldi	r24, 0x09	; 9
    d318:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d31c:	40 e2       	ldi	r20, 0x20	; 32
    d31e:	6c 2f       	mov	r22, r28
    d320:	8a e0       	ldi	r24, 0x0A	; 10
    d322:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d326:	f5 01       	movw	r30, r10
    d328:	40 81       	ld	r20, Z
    d32a:	6c 2f       	mov	r22, r28
    d32c:	8b e0       	ldi	r24, 0x0B	; 11
    d32e:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d332:	f6 01       	movw	r30, r12
    d334:	40 81       	ld	r20, Z
    d336:	6c 2f       	mov	r22, r28
    d338:	8c e0       	ldi	r24, 0x0C	; 12
    d33a:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d33e:	f7 01       	movw	r30, r14
    d340:	40 81       	ld	r20, Z
    d342:	6c 2f       	mov	r22, r28
    d344:	8d e0       	ldi	r24, 0x0D	; 13
    d346:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d34a:	40 e2       	ldi	r20, 0x20	; 32
    d34c:	6c 2f       	mov	r22, r28
    d34e:	8e e0       	ldi	r24, 0x0E	; 14
    d350:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d354:	f7 01       	movw	r30, r14
    d356:	21 80       	ldd	r2, Z+1	; 0x01
    d358:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d35a:	21 e0       	ldi	r18, 0x01	; 1
    d35c:	a1 01       	movw	r20, r2
    d35e:	6c 2f       	mov	r22, r28
    d360:	83 e1       	ldi	r24, 0x13	; 19
    d362:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    d366:	20 91 b4 0d 	lds	r18, 0x0DB4
    d36a:	30 91 b5 0d 	lds	r19, 0x0DB5
    d36e:	22 16       	cp	r2, r18
    d370:	33 06       	cpc	r3, r19
    d372:	08 f0       	brcs	.+2      	; 0xd376 <load_high_scores+0x12a>
    d374:	55 c0       	rjmp	.+170    	; 0xd420 <load_high_scores+0x1d4>
    d376:	80 91 c4 0d 	lds	r24, 0x0DC4
    d37a:	8f 3f       	cpi	r24, 0xFF	; 255
    d37c:	09 f0       	breq	.+2      	; 0xd380 <load_high_scores+0x134>
    d37e:	50 c0       	rjmp	.+160    	; 0xd420 <load_high_scores+0x1d4>
    d380:	ad ea       	ldi	r26, 0xAD	; 173
    d382:	bd e0       	ldi	r27, 0x0D	; 13
    d384:	cd 01       	movw	r24, r26
    d386:	05 97       	sbiw	r24, 0x05	; 5
    d388:	4e e1       	ldi	r20, 0x1E	; 30
    d38a:	48 0f       	add	r20, r24
    d38c:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d38e:	04 17       	cp	r16, r20
    d390:	40 f4       	brcc	.+16     	; 0xd3a2 <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d392:	fc 01       	movw	r30, r24
    d394:	45 2d       	mov	r20, r5
    d396:	01 90       	ld	r0, Z+
    d398:	0d 92       	st	X+, r0
    d39a:	4a 95       	dec	r20
    d39c:	e1 f7       	brne	.-8      	; 0xd396 <load_high_scores+0x14a>
    d39e:	dc 01       	movw	r26, r24
    d3a0:	f1 cf       	rjmp	.-30     	; 0xd384 <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    d3a2:	f5 01       	movw	r30, r10
    d3a4:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d3a6:	f6 01       	movw	r30, r12
    d3a8:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d3aa:	f7 01       	movw	r30, r14
    d3ac:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d3ae:	32 83       	std	Z+2, r19	; 0x02
    d3b0:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d3b2:	f5 01       	movw	r30, r10
    d3b4:	40 81       	ld	r20, Z
    d3b6:	6c 2f       	mov	r22, r28
    d3b8:	8b e0       	ldi	r24, 0x0B	; 11
    d3ba:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d3be:	f6 01       	movw	r30, r12
    d3c0:	40 81       	ld	r20, Z
    d3c2:	6c 2f       	mov	r22, r28
    d3c4:	8c e0       	ldi	r24, 0x0C	; 12
    d3c6:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d3ca:	f7 01       	movw	r30, r14
    d3cc:	40 81       	ld	r20, Z
    d3ce:	6c 2f       	mov	r22, r28
    d3d0:	8d e0       	ldi	r24, 0x0D	; 13
    d3d2:	0e 94 fe 50 	call	0xa1fc	; 0xa1fc <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d3d6:	40 91 b4 0d 	lds	r20, 0x0DB4
    d3da:	50 91 b5 0d 	lds	r21, 0x0DB5
    d3de:	21 e0       	ldi	r18, 0x01	; 1
    d3e0:	6c 2f       	mov	r22, r28
    d3e2:	83 e1       	ldi	r24, 0x13	; 19
    d3e4:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
			game.high_score_index = i;
    d3e8:	00 93 c4 0d 	sts	0x0DC4, r16
			LBMapSprite(2, map_down_arrow, 0);
    d3ec:	40 e0       	ldi	r20, 0x00	; 0
    d3ee:	68 e2       	ldi	r22, 0x28	; 40
    d3f0:	77 e3       	ldi	r23, 0x37	; 55
    d3f2:	82 e0       	ldi	r24, 0x02	; 2
    d3f4:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d3f8:	40 e0       	ldi	r20, 0x00	; 0
    d3fa:	65 e2       	ldi	r22, 0x25	; 37
    d3fc:	77 e3       	ldi	r23, 0x37	; 55
    d3fe:	83 e0       	ldi	r24, 0x03	; 3
    d400:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d404:	01 e0       	ldi	r16, 0x01	; 1
    d406:	21 e0       	ldi	r18, 0x01	; 1
    d408:	4d 2f       	mov	r20, r29
    d40a:	68 e5       	ldi	r22, 0x58	; 88
    d40c:	82 e0       	ldi	r24, 0x02	; 2
    d40e:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d412:	21 e0       	ldi	r18, 0x01	; 1
    d414:	40 e1       	ldi	r20, 0x10	; 16
    d416:	4d 0f       	add	r20, r29
    d418:	68 e5       	ldi	r22, 0x58	; 88
    d41a:	83 e0       	ldi	r24, 0x03	; 3
    d41c:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		}
		
		ypos += 2;
    d420:	ce 5f       	subi	r28, 0xFE	; 254
    d422:	f5 e0       	ldi	r31, 0x05	; 5
    d424:	af 0e       	add	r10, r31
    d426:	b1 1c       	adc	r11, r1
    d428:	85 e0       	ldi	r24, 0x05	; 5
    d42a:	c8 0e       	add	r12, r24
    d42c:	d1 1c       	adc	r13, r1
    d42e:	e5 e0       	ldi	r30, 0x05	; 5
    d430:	ee 0e       	add	r14, r30
    d432:	f1 1c       	adc	r15, r1
    d434:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d436:	c3 31       	cpi	r28, 0x13	; 19
    d438:	09 f0       	breq	.+2      	; 0xd43c <load_high_scores+0x1f0>
    d43a:	63 cf       	rjmp	.-314    	; 0xd302 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d43c:	47 ec       	ldi	r20, 0xC7	; 199
    d43e:	5a e0       	ldi	r21, 0x0A	; 10
    d440:	66 e1       	ldi	r22, 0x16	; 22
    d442:	89 e0       	ldi	r24, 0x09	; 9
}
    d444:	df 91       	pop	r29
    d446:	cf 91       	pop	r28
    d448:	1f 91       	pop	r17
    d44a:	0f 91       	pop	r16
    d44c:	ff 90       	pop	r15
    d44e:	ef 90       	pop	r14
    d450:	df 90       	pop	r13
    d452:	cf 90       	pop	r12
    d454:	bf 90       	pop	r11
    d456:	af 90       	pop	r10
    d458:	9f 90       	pop	r9
    d45a:	8f 90       	pop	r8
    d45c:	7f 90       	pop	r7
    d45e:	6f 90       	pop	r6
    d460:	5f 90       	pop	r5
    d462:	3f 90       	pop	r3
    d464:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d466:	0c 94 1e 51 	jmp	0xa23c	; 0xa23c <LBPrint>

0000d46a <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d46a:	64 e1       	ldi	r22, 0x14	; 20
    d46c:	80 e0       	ldi	r24, 0x00	; 0
    d46e:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
	LBRotateSprites();
    d472:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	init_player_state();
    d476:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    d47a:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
    d47e:	0e 94 d1 52 	call	0xa5a2	; 0xa5a2 <init_enemy_state>
	StopSong();
    d482:	0e 94 fd 43 	call	0x87fa	; 0x87fa <StopSong>
	load_high_scores();
    d486:	0c 94 26 69 	jmp	0xd24c	; 0xd24c <load_high_scores>

0000d48a <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d48a:	0f 93       	push	r16
    d48c:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d48e:	80 91 44 0e 	lds	r24, 0x0E44
    d492:	c0 91 cb 0d 	lds	r28, 0x0DCB
    d496:	85 ff       	sbrs	r24, 5
    d498:	06 c0       	rjmp	.+12     	; 0xd4a6 <update_splash+0x1c>
    d49a:	c1 11       	cpse	r28, r1
    d49c:	04 c0       	rjmp	.+8      	; 0xd4a6 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d49e:	81 e0       	ldi	r24, 0x01	; 1
    d4a0:	80 93 cb 0d 	sts	0x0DCB, r24
    d4a4:	06 c0       	rjmp	.+12     	; 0xd4b2 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d4a6:	84 ff       	sbrs	r24, 4
    d4a8:	0a c0       	rjmp	.+20     	; 0xd4be <update_splash+0x34>
    d4aa:	c1 30       	cpi	r28, 0x01	; 1
    d4ac:	41 f4       	brne	.+16     	; 0xd4be <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    d4ae:	10 92 cb 0d 	sts	0x0DCB, r1
		SFX_NAVIGATE;
    d4b2:	41 e0       	ldi	r20, 0x01	; 1
    d4b4:	6f ef       	ldi	r22, 0xFF	; 255
    d4b6:	82 e0       	ldi	r24, 0x02	; 2
    d4b8:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
    d4bc:	1c c0       	rjmp	.+56     	; 0xd4f6 <update_splash+0x6c>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d4be:	84 e4       	ldi	r24, 0x44	; 68
    d4c0:	9e e0       	ldi	r25, 0x0E	; 14
    d4c2:	0e 94 1f 67 	call	0xce3e	; 0xce3e <select_pressed>
    d4c6:	88 23       	and	r24, r24
    d4c8:	b1 f0       	breq	.+44     	; 0xd4f6 <update_splash+0x6c>
    d4ca:	c1 11       	cpse	r28, r1
    d4cc:	09 c0       	rjmp	.+18     	; 0xd4e0 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    d4ce:	41 e0       	ldi	r20, 0x01	; 1
    d4d0:	6f ef       	ldi	r22, 0xFF	; 255
    d4d2:	82 e0       	ldi	r24, 0x02	; 2
    d4d4:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d4d8:	cf 91       	pop	r28
    d4da:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d4dc:	0c 94 94 68 	jmp	0xd128	; 0xd128 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d4e0:	c1 30       	cpi	r28, 0x01	; 1
    d4e2:	49 f4       	brne	.+18     	; 0xd4f6 <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    d4e4:	41 e0       	ldi	r20, 0x01	; 1
    d4e6:	6f ef       	ldi	r22, 0xFF	; 255
    d4e8:	82 e0       	ldi	r24, 0x02	; 2
    d4ea:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d4ee:	cf 91       	pop	r28
    d4f0:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d4f2:	0c 94 26 69 	jmp	0xd24c	; 0xd24c <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    d4f6:	80 91 cb 0d 	lds	r24, 0x0DCB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d4fa:	01 e0       	ldi	r16, 0x01	; 1
    d4fc:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    d4fe:	81 11       	cpse	r24, r1
    d500:	03 c0       	rjmp	.+6      	; 0xd508 <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d502:	48 e7       	ldi	r20, 0x78	; 120
    d504:	68 e3       	ldi	r22, 0x38	; 56
    d506:	03 c0       	rjmp	.+6      	; 0xd50e <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d508:	40 e8       	ldi	r20, 0x80	; 128
    d50a:	68 e3       	ldi	r22, 0x38	; 56
    d50c:	80 e0       	ldi	r24, 0x00	; 0
    d50e:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
	}
}
    d512:	cf 91       	pop	r28
    d514:	0f 91       	pop	r16
    d516:	08 95       	ret

0000d518 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    d518:	0f 93       	push	r16
	if (game.player.controls.pressed & BTN_X)
    d51a:	80 91 44 0e 	lds	r24, 0x0E44
    d51e:	90 91 45 0e 	lds	r25, 0x0E45
    d522:	91 ff       	sbrs	r25, 1
    d524:	12 c0       	rjmp	.+36     	; 0xd54a <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    d526:	41 e0       	ldi	r20, 0x01	; 1
    d528:	6f ef       	ldi	r22, 0xFF	; 255
    d52a:	82 e0       	ldi	r24, 0x02	; 2
    d52c:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
		game.high_score_index = -1;
    d530:	8f ef       	ldi	r24, 0xFF	; 255
    d532:	80 93 c4 0d 	sts	0x0DC4, r24
		game.score = 0;
    d536:	10 92 b5 0d 	sts	0x0DB5, r1
    d53a:	10 92 b4 0d 	sts	0x0DB4, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d53e:	82 e9       	ldi	r24, 0x92	; 146
    d540:	9d e0       	ldi	r25, 0x0D	; 13
    d542:	0e 94 5b 42 	call	0x84b6	; 0x84b6 <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    d546:	0e 94 f5 68 	call	0xd1ea	; 0xd1ea <load_splash>
	}
	
	if (game.high_score_index != -1)
    d54a:	30 91 c4 0d 	lds	r19, 0x0DC4
    d54e:	3f 3f       	cpi	r19, 0xFF	; 255
    d550:	09 f4       	brne	.+2      	; 0xd554 <update_high_scores+0x3c>
    d552:	7e c0       	rjmp	.+252    	; 0xd650 <update_high_scores+0x138>
	{
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d554:	20 91 44 0e 	lds	r18, 0x0E44
    d558:	27 ff       	sbrs	r18, 7
    d55a:	1e c0       	rjmp	.+60     	; 0xd598 <update_high_scores+0x80>
    d55c:	83 2f       	mov	r24, r19
    d55e:	65 e0       	ldi	r22, 0x05	; 5
    d560:	0e 94 36 72 	call	0xe46c	; 0xe46c <__divmodqi4>
    d564:	92 30       	cpi	r25, 0x02	; 2
    d566:	c1 f0       	breq	.+48     	; 0xd598 <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    d568:	41 e0       	ldi	r20, 0x01	; 1
    d56a:	6f ef       	ldi	r22, 0xFF	; 255
    d56c:	82 e0       	ldi	r24, 0x02	; 2
    d56e:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
			game.high_score_index++;
    d572:	80 91 c4 0d 	lds	r24, 0x0DC4
    d576:	8f 5f       	subi	r24, 0xFF	; 255
    d578:	80 93 c4 0d 	sts	0x0DC4, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d57c:	60 91 e3 0f 	lds	r22, 0x0FE3
    d580:	68 5f       	subi	r22, 0xF8	; 248
    d582:	01 e0       	ldi	r16, 0x01	; 1
    d584:	21 e0       	ldi	r18, 0x01	; 1
    d586:	40 91 e4 0f 	lds	r20, 0x0FE4
    d58a:	82 e0       	ldi	r24, 0x02	; 2
    d58c:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d590:	60 91 e7 0f 	lds	r22, 0x0FE7
    d594:	68 5f       	subi	r22, 0xF8	; 248
    d596:	1f c0       	rjmp	.+62     	; 0xd5d6 <update_high_scores+0xbe>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d598:	26 ff       	sbrs	r18, 6
    d59a:	24 c0       	rjmp	.+72     	; 0xd5e4 <update_high_scores+0xcc>
    d59c:	83 2f       	mov	r24, r19
    d59e:	65 e0       	ldi	r22, 0x05	; 5
    d5a0:	0e 94 36 72 	call	0xe46c	; 0xe46c <__divmodqi4>
    d5a4:	99 23       	and	r25, r25
    d5a6:	f1 f0       	breq	.+60     	; 0xd5e4 <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    d5a8:	41 e0       	ldi	r20, 0x01	; 1
    d5aa:	6f ef       	ldi	r22, 0xFF	; 255
    d5ac:	82 e0       	ldi	r24, 0x02	; 2
    d5ae:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
			game.high_score_index--;
    d5b2:	80 91 c4 0d 	lds	r24, 0x0DC4
    d5b6:	81 50       	subi	r24, 0x01	; 1
    d5b8:	80 93 c4 0d 	sts	0x0DC4, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d5bc:	60 91 e3 0f 	lds	r22, 0x0FE3
    d5c0:	68 50       	subi	r22, 0x08	; 8
    d5c2:	01 e0       	ldi	r16, 0x01	; 1
    d5c4:	21 e0       	ldi	r18, 0x01	; 1
    d5c6:	40 91 e4 0f 	lds	r20, 0x0FE4
    d5ca:	82 e0       	ldi	r24, 0x02	; 2
    d5cc:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d5d0:	60 91 e7 0f 	lds	r22, 0x0FE7
    d5d4:	68 50       	subi	r22, 0x08	; 8
    d5d6:	21 e0       	ldi	r18, 0x01	; 1
    d5d8:	40 91 e8 0f 	lds	r20, 0x0FE8
    d5dc:	83 e0       	ldi	r24, 0x03	; 3
    d5de:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
    d5e2:	36 c0       	rjmp	.+108    	; 0xd650 <update_high_scores+0x138>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d5e4:	24 ff       	sbrs	r18, 4
    d5e6:	13 c0       	rjmp	.+38     	; 0xd60e <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    d5e8:	41 e0       	ldi	r20, 0x01	; 1
    d5ea:	6f ef       	ldi	r22, 0xFF	; 255
    d5ec:	82 e0       	ldi	r24, 0x02	; 2
    d5ee:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d5f2:	80 91 c4 0d 	lds	r24, 0x0DC4
    d5f6:	e8 2f       	mov	r30, r24
    d5f8:	ff 27       	eor	r31, r31
    d5fa:	e7 fd       	sbrc	r30, 7
    d5fc:	f0 95       	com	r31
    d5fe:	ee 56       	subi	r30, 0x6E	; 110
    d600:	f2 4f       	sbci	r31, 0xF2	; 242
    d602:	92 81       	ldd	r25, Z+2	; 0x02
    d604:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d606:	91 34       	cpi	r25, 0x41	; 65
    d608:	b0 f4       	brcc	.+44     	; 0xd636 <update_high_scores+0x11e>
    d60a:	91 e4       	ldi	r25, 0x41	; 65
    d60c:	14 c0       	rjmp	.+40     	; 0xd636 <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d60e:	25 ff       	sbrs	r18, 5
    d610:	1f c0       	rjmp	.+62     	; 0xd650 <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    d612:	41 e0       	ldi	r20, 0x01	; 1
    d614:	6f ef       	ldi	r22, 0xFF	; 255
    d616:	82 e0       	ldi	r24, 0x02	; 2
    d618:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d61c:	80 91 c4 0d 	lds	r24, 0x0DC4
    d620:	e8 2f       	mov	r30, r24
    d622:	ff 27       	eor	r31, r31
    d624:	e7 fd       	sbrc	r30, 7
    d626:	f0 95       	com	r31
    d628:	ee 56       	subi	r30, 0x6E	; 110
    d62a:	f2 4f       	sbci	r31, 0xF2	; 242
    d62c:	92 81       	ldd	r25, Z+2	; 0x02
    d62e:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d630:	9b 35       	cpi	r25, 0x5B	; 91
    d632:	08 f0       	brcs	.+2      	; 0xd636 <update_high_scores+0x11e>
    d634:	9a e5       	ldi	r25, 0x5A	; 90
    d636:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d638:	65 e0       	ldi	r22, 0x05	; 5
    d63a:	0e 94 36 72 	call	0xe46c	; 0xe46c <__divmodqi4>
    d63e:	68 2f       	mov	r22, r24
    d640:	66 0f       	add	r22, r22
    d642:	69 5f       	subi	r22, 0xF9	; 249
    d644:	42 81       	ldd	r20, Z+2	; 0x02
    d646:	8b e0       	ldi	r24, 0x0B	; 11
    d648:	89 0f       	add	r24, r25
		}
	}
}
    d64a:	0f 91       	pop	r16
		else if (game.player.controls.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d64c:	0c 94 fe 50 	jmp	0xa1fc	; 0xa1fc <LBPrintChar>
		}
	}
}
    d650:	0f 91       	pop	r16
    d652:	08 95       	ret

0000d654 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d654:	2f 92       	push	r2
    d656:	3f 92       	push	r3
    d658:	4f 92       	push	r4
    d65a:	5f 92       	push	r5
    d65c:	6f 92       	push	r6
    d65e:	7f 92       	push	r7
    d660:	8f 92       	push	r8
    d662:	9f 92       	push	r9
    d664:	af 92       	push	r10
    d666:	bf 92       	push	r11
    d668:	cf 92       	push	r12
    d66a:	df 92       	push	r13
    d66c:	ef 92       	push	r14
    d66e:	ff 92       	push	r15
    d670:	0f 93       	push	r16
    d672:	1f 93       	push	r17
    d674:	cf 93       	push	r28
    d676:	df 93       	push	r29
    d678:	7c 01       	movw	r14, r24
    d67a:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d67c:	c0 91 b2 0c 	lds	r28, 0x0CB2
    d680:	c6 95       	lsr	r28
    d682:	c6 95       	lsr	r28
    d684:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d686:	00 91 b3 0c 	lds	r16, 0x0CB3
    d68a:	06 95       	lsr	r16
    d68c:	06 95       	lsr	r16
    d68e:	06 95       	lsr	r16
	u16 tally = game.score;
    d690:	a0 90 b4 0d 	lds	r10, 0x0DB4
    d694:	b0 90 b5 0d 	lds	r11, 0x0DB5
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d698:	64 e1       	ldi	r22, 0x14	; 20
    d69a:	80 e0       	ldi	r24, 0x00	; 0
    d69c:	0e 94 03 67 	call	0xce06	; 0xce06 <hide_sprites>
	LBRotateSprites();
    d6a0:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	
	StopSong();
    d6a4:	0e 94 fd 43 	call	0x87fa	; 0x87fa <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d6a8:	10 e0       	ldi	r17, 0x00	; 0
    d6aa:	d0 e0       	ldi	r29, 0x00	; 0
    d6ac:	c8 01       	movw	r24, r16
    d6ae:	06 96       	adiw	r24, 0x06	; 6
    d6b0:	2e e1       	ldi	r18, 0x1E	; 30
    d6b2:	82 2e       	mov	r8, r18
    d6b4:	91 2c       	mov	r9, r1
    d6b6:	b4 01       	movw	r22, r8
    d6b8:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    d6bc:	9e 01       	movw	r18, r28
    d6be:	28 5f       	subi	r18, 0xF8	; 248
    d6c0:	3f 4f       	sbci	r19, 0xFF	; 255
    d6c2:	44 ef       	ldi	r20, 0xF4	; 244
    d6c4:	5f e5       	ldi	r21, 0x5F	; 95
    d6c6:	68 2f       	mov	r22, r24
    d6c8:	82 2f       	mov	r24, r18
    d6ca:	8f 71       	andi	r24, 0x1F	; 31
    d6cc:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d6d0:	c8 01       	movw	r24, r16
    d6d2:	07 96       	adiw	r24, 0x07	; 7
    d6d4:	b4 01       	movw	r22, r8
    d6d6:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    d6da:	9e 01       	movw	r18, r28
    d6dc:	26 5f       	subi	r18, 0xF6	; 246
    d6de:	3f 4f       	sbci	r19, 0xFF	; 255
    d6e0:	a7 01       	movw	r20, r14
    d6e2:	68 2f       	mov	r22, r24
    d6e4:	82 2f       	mov	r24, r18
    d6e6:	8f 71       	andi	r24, 0x1F	; 31
    d6e8:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d6ec:	c8 01       	movw	r24, r16
    d6ee:	09 96       	adiw	r24, 0x09	; 9
    d6f0:	b4 01       	movw	r22, r8
    d6f2:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    d6f6:	48 2e       	mov	r4, r24
    d6f8:	78 2e       	mov	r7, r24
    d6fa:	7e 01       	movw	r14, r28
    d6fc:	29 e0       	ldi	r18, 0x09	; 9
    d6fe:	e2 0e       	add	r14, r18
    d700:	f1 1c       	adc	r15, r1
    d702:	8f e1       	ldi	r24, 0x1F	; 31
    d704:	e8 22       	and	r14, r24
    d706:	ff 24       	eor	r15, r15
    d708:	42 e9       	ldi	r20, 0x92	; 146
    d70a:	5a e0       	ldi	r21, 0x0A	; 10
    d70c:	64 2d       	mov	r22, r4
    d70e:	8e 2d       	mov	r24, r14
    d710:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d714:	c8 01       	movw	r24, r16
    d716:	0b 96       	adiw	r24, 0x0b	; 11
    d718:	b4 01       	movw	r22, r8
    d71a:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    d71e:	38 2e       	mov	r3, r24
    d720:	68 2e       	mov	r6, r24
    d722:	48 ee       	ldi	r20, 0xE8	; 232
    d724:	5a e0       	ldi	r21, 0x0A	; 10
    d726:	68 2f       	mov	r22, r24
    d728:	8e 2d       	mov	r24, r14
    d72a:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d72e:	c8 01       	movw	r24, r16
    d730:	0c 96       	adiw	r24, 0x0c	; 12
    d732:	b4 01       	movw	r22, r8
    d734:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    d738:	58 2e       	mov	r5, r24
    d73a:	f8 2e       	mov	r15, r24
    d73c:	43 ed       	ldi	r20, 0xD3	; 211
    d73e:	5a e0       	ldi	r21, 0x0A	; 10
    d740:	68 2f       	mov	r22, r24
    d742:	8e 2d       	mov	r24, r14
    d744:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d748:	c8 01       	movw	r24, r16
    d74a:	0d 96       	adiw	r24, 0x0d	; 13
    d74c:	b4 01       	movw	r22, r8
    d74e:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    d752:	18 2f       	mov	r17, r24
    d754:	28 2e       	mov	r2, r24
    d756:	43 ea       	ldi	r20, 0xA3	; 163
    d758:	5a e0       	ldi	r21, 0x0A	; 10
    d75a:	68 2f       	mov	r22, r24
    d75c:	8e 2d       	mov	r24, r14
    d75e:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d762:	64 96       	adiw	r28, 0x14	; 20
    d764:	cf 71       	andi	r28, 0x1F	; 31
    d766:	dd 27       	eor	r29, r29
    d768:	ec 2e       	mov	r14, r28
    d76a:	21 e0       	ldi	r18, 0x01	; 1
    d76c:	a5 01       	movw	r20, r10
    d76e:	64 2d       	mov	r22, r4
    d770:	8c 2f       	mov	r24, r28
    d772:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d776:	40 91 b6 0d 	lds	r20, 0x0DB6
    d77a:	50 91 b7 0d 	lds	r21, 0x0DB7
    d77e:	21 e0       	ldi	r18, 0x01	; 1
    d780:	63 2d       	mov	r22, r3
    d782:	8c 2f       	mov	r24, r28
    d784:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d788:	40 91 b8 0d 	lds	r20, 0x0DB8
    d78c:	50 91 b9 0d 	lds	r21, 0x0DB9
    d790:	21 e0       	ldi	r18, 0x01	; 1
    d792:	65 2d       	mov	r22, r5
    d794:	8c 2f       	mov	r24, r28
    d796:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d79a:	21 e0       	ldi	r18, 0x01	; 1
    d79c:	a6 01       	movw	r20, r12
    d79e:	61 2f       	mov	r22, r17
    d7a0:	8c 2f       	mov	r24, r28
    d7a2:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	LBWaitSeconds(2);
    d7a6:	82 e0       	ldi	r24, 0x02	; 2
    d7a8:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d7ac:	80 90 b6 0d 	lds	r8, 0x0DB6
    d7b0:	90 90 b7 0d 	lds	r9, 0x0DB7
    d7b4:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d7b6:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d7b8:	20 97       	sbiw	r28, 0x00	; 0
    d7ba:	e9 f0       	breq	.+58     	; 0xd7f6 <tally_score+0x1a2>
	{
		WaitVsync(1);
    d7bc:	81 e0       	ldi	r24, 0x01	; 1
    d7be:	90 e0       	ldi	r25, 0x00	; 0
    d7c0:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		SFX_HIT;
    d7c4:	41 e0       	ldi	r20, 0x01	; 1
    d7c6:	6f ef       	ldi	r22, 0xFF	; 255
    d7c8:	84 e0       	ldi	r24, 0x04	; 4
    d7ca:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
		tally += 1;
    d7ce:	0f 5f       	subi	r16, 0xFF	; 255
    d7d0:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d7d2:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d7d4:	21 e0       	ldi	r18, 0x01	; 1
    d7d6:	a8 01       	movw	r20, r16
    d7d8:	67 2d       	mov	r22, r7
    d7da:	8e 2d       	mov	r24, r14
    d7dc:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d7e0:	21 e0       	ldi	r18, 0x01	; 1
    d7e2:	ae 01       	movw	r20, r28
    d7e4:	66 2d       	mov	r22, r6
    d7e6:	8e 2d       	mov	r24, r14
    d7e8:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d7ec:	8c ed       	ldi	r24, 0xDC	; 220
    d7ee:	95 e0       	ldi	r25, 0x05	; 5
    d7f0:	0e 94 16 41 	call	0x822c	; 0x822c <WaitUs>
    d7f4:	e1 cf       	rjmp	.-62     	; 0xd7b8 <tally_score+0x164>
    d7f6:	a8 0c       	add	r10, r8
    d7f8:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d7fa:	c0 91 b8 0d 	lds	r28, 0x0DB8
    d7fe:	d0 91 b9 0d 	lds	r29, 0x0DB9
	while (counter > 0)
    d802:	20 97       	sbiw	r28, 0x00	; 0
    d804:	31 f1       	breq	.+76     	; 0xd852 <tally_score+0x1fe>
	{
		WaitVsync(1);
    d806:	81 e0       	ldi	r24, 0x01	; 1
    d808:	90 e0       	ldi	r25, 0x00	; 0
    d80a:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		SFX_HIT;
    d80e:	41 e0       	ldi	r20, 0x01	; 1
    d810:	6f ef       	ldi	r22, 0xFF	; 255
    d812:	84 e0       	ldi	r24, 0x04	; 4
    d814:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d818:	c5 01       	movw	r24, r10
    d81a:	02 97       	sbiw	r24, 0x02	; 2
    d81c:	8e 3f       	cpi	r24, 0xFE	; 254
    d81e:	9f 4f       	sbci	r25, 0xFF	; 255
    d820:	20 f4       	brcc	.+8      	; 0xd82a <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d822:	81 e0       	ldi	r24, 0x01	; 1
    d824:	a8 1a       	sub	r10, r24
    d826:	b1 08       	sbc	r11, r1
    d828:	02 c0       	rjmp	.+4      	; 0xd82e <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d82a:	a1 2c       	mov	r10, r1
    d82c:	b1 2c       	mov	r11, r1
		counter -= 1;
    d82e:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d830:	21 e0       	ldi	r18, 0x01	; 1
    d832:	a5 01       	movw	r20, r10
    d834:	67 2d       	mov	r22, r7
    d836:	8e 2d       	mov	r24, r14
    d838:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d83c:	21 e0       	ldi	r18, 0x01	; 1
    d83e:	ae 01       	movw	r20, r28
    d840:	6f 2d       	mov	r22, r15
    d842:	8e 2d       	mov	r24, r14
    d844:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d848:	8c ed       	ldi	r24, 0xDC	; 220
    d84a:	95 e0       	ldi	r25, 0x05	; 5
    d84c:	0e 94 16 41 	call	0x822c	; 0x822c <WaitUs>
    d850:	d8 cf       	rjmp	.-80     	; 0xd802 <tally_score+0x1ae>
    d852:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d854:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d856:	20 97       	sbiw	r28, 0x00	; 0
    d858:	e9 f0       	breq	.+58     	; 0xd894 <tally_score+0x240>
	{
		WaitVsync(1);
    d85a:	81 e0       	ldi	r24, 0x01	; 1
    d85c:	90 e0       	ldi	r25, 0x00	; 0
    d85e:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		SFX_HIT;
    d862:	41 e0       	ldi	r20, 0x01	; 1
    d864:	6f ef       	ldi	r22, 0xFF	; 255
    d866:	84 e0       	ldi	r24, 0x04	; 4
    d868:	0e 94 bf 44 	call	0x897e	; 0x897e <TriggerFx>
		tally += 1;
    d86c:	0f 5f       	subi	r16, 0xFF	; 255
    d86e:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d870:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d872:	21 e0       	ldi	r18, 0x01	; 1
    d874:	a8 01       	movw	r20, r16
    d876:	67 2d       	mov	r22, r7
    d878:	8e 2d       	mov	r24, r14
    d87a:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d87e:	21 e0       	ldi	r18, 0x01	; 1
    d880:	ae 01       	movw	r20, r28
    d882:	62 2d       	mov	r22, r2
    d884:	8e 2d       	mov	r24, r14
    d886:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d88a:	8c ed       	ldi	r24, 0xDC	; 220
    d88c:	95 e0       	ldi	r25, 0x05	; 5
    d88e:	0e 94 16 41 	call	0x822c	; 0x822c <WaitUs>
    d892:	e1 cf       	rjmp	.-62     	; 0xd856 <tally_score+0x202>
    d894:	ac 0c       	add	r10, r12
    d896:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d898:	b0 92 b5 0d 	sts	0x0DB5, r11
    d89c:	a0 92 b4 0d 	sts	0x0DB4, r10
	game.time = 0;
    d8a0:	10 92 b9 0d 	sts	0x0DB9, r1
    d8a4:	10 92 b8 0d 	sts	0x0DB8, r1
	LBWaitSeconds(2);
    d8a8:	82 e0       	ldi	r24, 0x02	; 2
}
    d8aa:	df 91       	pop	r29
    d8ac:	cf 91       	pop	r28
    d8ae:	1f 91       	pop	r17
    d8b0:	0f 91       	pop	r16
    d8b2:	ff 90       	pop	r15
    d8b4:	ef 90       	pop	r14
    d8b6:	df 90       	pop	r13
    d8b8:	cf 90       	pop	r12
    d8ba:	bf 90       	pop	r11
    d8bc:	af 90       	pop	r10
    d8be:	9f 90       	pop	r9
    d8c0:	8f 90       	pop	r8
    d8c2:	7f 90       	pop	r7
    d8c4:	6f 90       	pop	r6
    d8c6:	5f 90       	pop	r5
    d8c8:	4f 90       	pop	r4
    d8ca:	3f 90       	pop	r3
    d8cc:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    d8ce:	0c 94 e4 51 	jmp	0xa3c8	; 0xa3c8 <LBWaitSeconds>

0000d8d2 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    d8d2:	cf 93       	push	r28
	if (player == &game.boss) {
    d8d4:	8b 54       	subi	r24, 0x4B	; 75
    d8d6:	9e 40       	sbci	r25, 0x0E	; 14
    d8d8:	29 f4       	brne	.+10     	; 0xd8e4 <handle_player_death+0x12>
		game.level_ended = 1;
    d8da:	81 e0       	ldi	r24, 0x01	; 1
    d8dc:	80 93 cf 0d 	sts	0x0DCF, r24
		return 1;
    d8e0:	c1 e0       	ldi	r28, 0x01	; 1
    d8e2:	34 c0       	rjmp	.+104    	; 0xd94c <handle_player_death+0x7a>
	}
	game.lives--;
    d8e4:	80 91 c5 0d 	lds	r24, 0x0DC5
    d8e8:	81 50       	subi	r24, 0x01	; 1
    d8ea:	80 93 c5 0d 	sts	0x0DC5, r24
	clear_sprites(0, 6);
    d8ee:	66 e0       	ldi	r22, 0x06	; 6
    d8f0:	80 e0       	ldi	r24, 0x00	; 0
    d8f2:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
	LBRotateSprites();
    d8f6:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	if (game.lives == 0)
    d8fa:	c0 91 c5 0d 	lds	r28, 0x0DC5
    d8fe:	c1 11       	cpse	r28, r1
    d900:	09 c0       	rjmp	.+18     	; 0xd914 <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    d902:	60 e0       	ldi	r22, 0x00	; 0
    d904:	70 e0       	ldi	r23, 0x00	; 0
    d906:	89 e9       	ldi	r24, 0x99	; 153
    d908:	9a e0       	ldi	r25, 0x0A	; 10
    d90a:	0e 94 2a 6b 	call	0xd654	; 0xd654 <tally_score>
		exit_game();
    d90e:	0e 94 35 6a 	call	0xd46a	; 0xd46a <exit_game>
    d912:	1c c0       	rjmp	.+56     	; 0xd94c <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d914:	61 e0       	ldi	r22, 0x01	; 1
    d916:	81 e0       	ldi	r24, 0x01	; 1
    d918:	0e 94 2d 50 	call	0xa05a	; 0xa05a <FadeOut>
	ClearVram();
    d91c:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d920:	64 e1       	ldi	r22, 0x14	; 20
    d922:	80 e0       	ldi	r24, 0x00	; 0
    d924:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
	LBRotateSprites();
    d928:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d92c:	60 e0       	ldi	r22, 0x00	; 0
    d92e:	81 e0       	ldi	r24, 0x01	; 1
    d930:	0e 94 21 50 	call	0xa042	; 0xa042 <FadeIn>
	init_player_state();
    d934:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    d938:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
    d93c:	0e 94 d1 52 	call	0xa5a2	; 0xa5a2 <init_enemy_state>
	load_level(game.current_level_index, false);
    d940:	60 e0       	ldi	r22, 0x00	; 0
    d942:	80 91 c7 0d 	lds	r24, 0x0DC7
    d946:	0e 94 f2 65 	call	0xcbe4	; 0xcbe4 <load_level>
	return 0;
    d94a:	c0 e0       	ldi	r28, 0x00	; 0
}
    d94c:	8c 2f       	mov	r24, r28
    d94e:	cf 91       	pop	r28
    d950:	08 95       	ret

0000d952 <update_player>:

u8 update_player(Player* player, u8 slot)
{
    d952:	ef 92       	push	r14
    d954:	ff 92       	push	r15
    d956:	0f 93       	push	r16
    d958:	1f 93       	push	r17
    d95a:	cf 93       	push	r28
    d95c:	df 93       	push	r29
    d95e:	1f 92       	push	r1
    d960:	cd b7       	in	r28, 0x3d	; 61
    d962:	de b7       	in	r29, 0x3e	; 62
    d964:	7c 01       	movw	r14, r24
    d966:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	if (player->flags & EXPLODING)
    d968:	fc 01       	movw	r30, r24
    d96a:	00 85       	ldd	r16, Z+8	; 0x08
    d96c:	04 ff       	sbrs	r16, 4
    d96e:	16 c0       	rjmp	.+44     	; 0xd99c <update_player+0x4a>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    d970:	04 85       	ldd	r16, Z+12	; 0x0c
    d972:	23 85       	ldd	r18, Z+11	; 0x0b
    d974:	46 2f       	mov	r20, r22
    d976:	bc 01       	movw	r22, r24
    d978:	64 59       	subi	r22, 0x94	; 148
    d97a:	7f 4f       	sbci	r23, 0xFF	; 255
    d97c:	08 96       	adiw	r24, 0x08	; 8
    d97e:	0e 94 31 61 	call	0xc262	; 0xc262 <map_explosion>
    d982:	88 23       	and	r24, r24
    d984:	09 f4       	brne	.+2      	; 0xd988 <update_player+0x36>
    d986:	c6 c1       	rjmp	.+908    	; 0xdd14 <update_player+0x3c2>
		{
			return handle_player_death(player);
    d988:	c7 01       	movw	r24, r14
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    d98a:	0f 90       	pop	r0
    d98c:	df 91       	pop	r29
    d98e:	cf 91       	pop	r28
    d990:	1f 91       	pop	r17
    d992:	0f 91       	pop	r16
    d994:	ff 90       	pop	r15
    d996:	ef 90       	pop	r14
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    d998:	0c 94 69 6c 	jmp	0xd8d2	; 0xd8d2 <handle_player_death>
		}
	}
	else if (is_space())
    d99c:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    d9a0:	88 23       	and	r24, r24
    d9a2:	09 f4       	brne	.+2      	; 0xd9a6 <update_player+0x54>
    d9a4:	6d c0       	rjmp	.+218    	; 0xda80 <update_player+0x12e>
	{
		if (game.current_level_index == 9)
    d9a6:	90 91 c7 0d 	lds	r25, 0x0DC7
    d9aa:	00 72       	andi	r16, 0x20	; 32
    d9ac:	99 30       	cpi	r25, 0x09	; 9
    d9ae:	89 f4       	brne	.+34     	; 0xd9d2 <update_player+0x80>
		{
			if (player->flags & END_OF_SPACE)
    d9b0:	01 11       	cpse	r16, r1
    d9b2:	11 c0       	rjmp	.+34     	; 0xd9d6 <update_player+0x84>
			{
				space_ship_speed = 0;
				
			}
			else if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    d9b4:	80 91 b2 0d 	lds	r24, 0x0DB2
    d9b8:	90 91 b3 0d 	lds	r25, 0x0DB3
    d9bc:	73 e0       	ldi	r23, 0x03	; 3
    d9be:	96 95       	lsr	r25
    d9c0:	87 95       	ror	r24
    d9c2:	7a 95       	dec	r23
    d9c4:	e1 f7       	brne	.-8      	; 0xd9be <update_player+0x6c>
    d9c6:	4c 96       	adiw	r24, 0x1c	; 28
    d9c8:	82 3d       	cpi	r24, 0xD2	; 210
    d9ca:	91 05       	cpc	r25, r1
    d9cc:	30 f0       	brcs	.+12     	; 0xd9da <update_player+0x88>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    d9ce:	8e e1       	ldi	r24, 0x1E	; 30
    d9d0:	0f c0       	rjmp	.+30     	; 0xd9f0 <update_player+0x9e>
	return 0;
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    d9d2:	8c e3       	ldi	r24, 0x3C	; 60
    d9d4:	04 c0       	rjmp	.+8      	; 0xd9de <update_player+0x8c>
	{
		if (game.current_level_index == 9)
		{
			if (player->flags & END_OF_SPACE)
			{
				space_ship_speed = 0;
    d9d6:	80 e0       	ldi	r24, 0x00	; 0
    d9d8:	02 c0       	rjmp	.+4      	; 0xd9de <update_player+0x8c>
	return 0;
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    d9da:	8c e3       	ldi	r24, 0x3C	; 60
    d9dc:	09 c0       	rjmp	.+18     	; 0xd9f0 <update_player+0x9e>
			else if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    d9de:	00 23       	and	r16, r16
    d9e0:	39 f0       	breq	.+14     	; 0xd9f0 <update_player+0x9e>
    d9e2:	99 30       	cpi	r25, 0x09	; 9
    d9e4:	29 f0       	breq	.+10     	; 0xd9f0 <update_player+0x9e>
			player->shared.vx = space_ship_speed*2;
    d9e6:	88 0f       	add	r24, r24
    d9e8:	f7 01       	movw	r30, r14
    d9ea:	85 83       	std	Z+5, r24	; 0x05
			player->shared.vy = 0;
    d9ec:	14 82       	std	Z+4, r1	; 0x04
    d9ee:	44 c0       	rjmp	.+136    	; 0xda78 <update_player+0x126>
		} else {
			player->shared.vy = 0;
    d9f0:	f7 01       	movw	r30, r14
    d9f2:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    d9f4:	85 83       	std	Z+5, r24	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    d9f6:	e8 58       	subi	r30, 0x88	; 136
    d9f8:	ff 4f       	sbci	r31, 0xFF	; 255
    d9fa:	90 81       	ld	r25, Z
    d9fc:	95 ff       	sbrs	r25, 5
    d9fe:	12 c0       	rjmp	.+36     	; 0xda24 <update_player+0xd2>
    da00:	f7 01       	movw	r30, r14
    da02:	22 81       	ldd	r18, Z+2	; 0x02
    da04:	33 81       	ldd	r19, Z+3	; 0x03
    da06:	63 e0       	ldi	r22, 0x03	; 3
    da08:	36 95       	lsr	r19
    da0a:	27 95       	ror	r18
    da0c:	6a 95       	dec	r22
    da0e:	e1 f7       	brne	.-8      	; 0xda08 <update_player+0xb6>
    da10:	2f 5f       	subi	r18, 0xFF	; 255
    da12:	3f 4f       	sbci	r19, 0xFF	; 255
    da14:	40 91 c2 0d 	lds	r20, 0x0DC2
    da18:	50 e0       	ldi	r21, 0x00	; 0
    da1a:	24 17       	cp	r18, r20
    da1c:	35 07       	cpc	r19, r21
    da1e:	10 f4       	brcc	.+4      	; 0xda24 <update_player+0xd2>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    da20:	2c e3       	ldi	r18, 0x3C	; 60
    da22:	24 83       	std	Z+4, r18	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    da24:	97 ff       	sbrs	r25, 7
    da26:	11 c0       	rjmp	.+34     	; 0xda4a <update_player+0xf8>
    da28:	f7 01       	movw	r30, r14
    da2a:	40 81       	ld	r20, Z
    da2c:	51 81       	ldd	r21, Z+1	; 0x01
    da2e:	48 5e       	subi	r20, 0xE8	; 232
    da30:	5f 4f       	sbci	r21, 0xFF	; 255
    da32:	20 91 b2 0d 	lds	r18, 0x0DB2
    da36:	30 91 b3 0d 	lds	r19, 0x0DB3
    da3a:	20 52       	subi	r18, 0x20	; 32
    da3c:	3f 4f       	sbci	r19, 0xFF	; 255
    da3e:	42 17       	cp	r20, r18
    da40:	53 07       	cpc	r21, r19
    da42:	18 f4       	brcc	.+6      	; 0xda4a <update_player+0xf8>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    da44:	2c e3       	ldi	r18, 0x3C	; 60
    da46:	28 0f       	add	r18, r24
    da48:	25 83       	std	Z+5, r18	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    da4a:	96 ff       	sbrs	r25, 6
    da4c:	0c c0       	rjmp	.+24     	; 0xda66 <update_player+0x114>
    da4e:	f7 01       	movw	r30, r14
    da50:	40 81       	ld	r20, Z
    da52:	51 81       	ldd	r21, Z+1	; 0x01
    da54:	20 91 b2 0d 	lds	r18, 0x0DB2
    da58:	30 91 b3 0d 	lds	r19, 0x0DB3
    da5c:	24 17       	cp	r18, r20
    da5e:	35 07       	cpc	r19, r21
    da60:	10 f4       	brcc	.+4      	; 0xda66 <update_player+0x114>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    da62:	8c 53       	subi	r24, 0x3C	; 60
    da64:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    da66:	94 ff       	sbrs	r25, 4
    da68:	07 c0       	rjmp	.+14     	; 0xda78 <update_player+0x126>
    da6a:	f7 01       	movw	r30, r14
    da6c:	82 81       	ldd	r24, Z+2	; 0x02
    da6e:	93 81       	ldd	r25, Z+3	; 0x03
    da70:	89 2b       	or	r24, r25
    da72:	11 f0       	breq	.+4      	; 0xda78 <update_player+0x126>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    da74:	84 ec       	ldi	r24, 0xC4	; 196
    da76:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    da78:	c7 01       	movw	r24, r14
    da7a:	8c 5a       	subi	r24, 0xAC	; 172
    da7c:	9f 4f       	sbci	r25, 0xFF	; 255
    da7e:	43 c1       	rjmp	.+646    	; 0xdd06 <update_player+0x3b4>
	}
	else if (player->flags & (IDLE|RUNNING))
    da80:	80 2f       	mov	r24, r16
    da82:	8a 70       	andi	r24, 0x0A	; 10
    da84:	09 f4       	brne	.+2      	; 0xda88 <update_player+0x136>
    da86:	96 c0       	rjmp	.+300    	; 0xdbb4 <update_player+0x262>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    da88:	f7 01       	movw	r30, r14
    da8a:	44 85       	ldd	r20, Z+12	; 0x0c
    da8c:	63 85       	ldd	r22, Z+11	; 0x0b
    da8e:	c7 01       	movw	r24, r14
    da90:	0e 94 6b 5c 	call	0xb8d6	; 0xb8d6 <on_solid_ground>
    da94:	81 11       	cpse	r24, r1
    da96:	06 c0       	rjmp	.+12     	; 0xdaa4 <update_player+0x152>
		{
			player->shared.gravity = GRAVITY;
    da98:	88 ec       	ldi	r24, 0xC8	; 200
    da9a:	f7 01       	movw	r30, r14
    da9c:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    da9e:	81 e0       	ldi	r24, 0x01	; 1
    daa0:	80 87       	std	Z+8, r24	; 0x08
    daa2:	0f c1       	rjmp	.+542    	; 0xdcc2 <update_player+0x370>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    daa4:	f7 01       	movw	r30, r14
    daa6:	e8 58       	subi	r30, 0x88	; 136
    daa8:	ff 4f       	sbci	r31, 0xFF	; 255
    daaa:	20 81       	ld	r18, Z
    daac:	25 ff       	sbrs	r18, 5
    daae:	25 c0       	rjmp	.+74     	; 0xdafa <update_player+0x1a8>
			{
				player->shared.y += 16;
    dab0:	f7 01       	movw	r30, r14
    dab2:	82 81       	ldd	r24, Z+2	; 0x02
    dab4:	93 81       	ldd	r25, Z+3	; 0x03
    dab6:	40 96       	adiw	r24, 0x10	; 16
    dab8:	93 83       	std	Z+3, r25	; 0x03
    daba:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    dabc:	82 85       	ldd	r24, Z+10	; 0x0a
    dabe:	81 30       	cpi	r24, 0x01	; 1
    dac0:	29 f4       	brne	.+10     	; 0xdacc <update_player+0x17a>
				{
					player->shared.x -= 8;
    dac2:	80 81       	ld	r24, Z
    dac4:	91 81       	ldd	r25, Z+1	; 0x01
    dac6:	08 97       	sbiw	r24, 0x08	; 8
    dac8:	91 83       	std	Z+1, r25	; 0x01
    daca:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    dacc:	f7 01       	movw	r30, r14
    dace:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    dad0:	84 e0       	ldi	r24, 0x04	; 4
    dad2:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    dad4:	83 e0       	ldi	r24, 0x03	; 3
    dad6:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    dad8:	81 e0       	ldi	r24, 0x01	; 1
    dada:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    dadc:	63 e0       	ldi	r22, 0x03	; 3
    dade:	83 e0       	ldi	r24, 0x03	; 3
    dae0:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    dae4:	24 e0       	ldi	r18, 0x04	; 4
    dae6:	12 9f       	mul	r17, r18
    dae8:	f0 01       	movw	r30, r0
    daea:	11 24       	eor	r1, r1
    daec:	e5 52       	subi	r30, 0x25	; 37
    daee:	f0 4f       	sbci	r31, 0xF0	; 240
    daf0:	43 81       	ldd	r20, Z+3	; 0x03
    daf2:	c7 01       	movw	r24, r14
    daf4:	8c 59       	subi	r24, 0x9C	; 156
    daf6:	9f 4f       	sbci	r25, 0xFF	; 255
    daf8:	44 c0       	rjmp	.+136    	; 0xdb82 <update_player+0x230>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    dafa:	27 ff       	sbrs	r18, 7
    dafc:	1c c0       	rjmp	.+56     	; 0xdb36 <update_player+0x1e4>
    dafe:	f7 01       	movw	r30, r14
    db00:	80 81       	ld	r24, Z
    db02:	91 81       	ldd	r25, Z+1	; 0x01
    db04:	53 e0       	ldi	r21, 0x03	; 3
    db06:	96 95       	lsr	r25
    db08:	87 95       	ror	r24
    db0a:	5a 95       	dec	r21
    db0c:	e1 f7       	brne	.-8      	; 0xdb06 <update_player+0x1b4>
    db0e:	02 96       	adiw	r24, 0x02	; 2
    db10:	40 91 c1 0d 	lds	r20, 0x0DC1
    db14:	50 e0       	ldi	r21, 0x00	; 0
    db16:	84 17       	cp	r24, r20
    db18:	95 07       	cpc	r25, r21
    db1a:	68 f4       	brcc	.+26     	; 0xdb36 <update_player+0x1e4>
			{
				player->shared.vx = RUN_SPEED;
    db1c:	8c e3       	ldi	r24, 0x3C	; 60
    db1e:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    db20:	82 e0       	ldi	r24, 0x02	; 2
    db22:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    db24:	81 e0       	ldi	r24, 0x01	; 1
    db26:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    db28:	c7 01       	movw	r24, r14
    db2a:	8c 5a       	subi	r24, 0xAC	; 172
    db2c:	9f 4f       	sbci	r25, 0xFF	; 255
    db2e:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    db32:	40 e0       	ldi	r20, 0x00	; 0
    db34:	2a c0       	rjmp	.+84     	; 0xdb8a <update_player+0x238>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    db36:	26 ff       	sbrs	r18, 6
    db38:	16 c0       	rjmp	.+44     	; 0xdb66 <update_player+0x214>
    db3a:	f7 01       	movw	r30, r14
    db3c:	20 81       	ld	r18, Z
    db3e:	31 81       	ldd	r19, Z+1	; 0x01
    db40:	80 91 b2 0d 	lds	r24, 0x0DB2
    db44:	90 91 b3 0d 	lds	r25, 0x0DB3
    db48:	82 17       	cp	r24, r18
    db4a:	93 07       	cpc	r25, r19
    db4c:	60 f4       	brcc	.+24     	; 0xdb66 <update_player+0x214>
			{
				player->shared.vx = -RUN_SPEED;
    db4e:	84 ec       	ldi	r24, 0xC4	; 196
    db50:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    db52:	82 e0       	ldi	r24, 0x02	; 2
    db54:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    db56:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    db58:	c7 01       	movw	r24, r14
    db5a:	8c 5a       	subi	r24, 0xAC	; 172
    db5c:	9f 4f       	sbci	r25, 0xFF	; 255
    db5e:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    db62:	41 e0       	ldi	r20, 0x01	; 1
    db64:	12 c0       	rjmp	.+36     	; 0xdb8a <update_player+0x238>
			}
			else
			{
				player->flags = IDLE;
    db66:	88 e0       	ldi	r24, 0x08	; 8
    db68:	f7 01       	movw	r30, r14
    db6a:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    db6c:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    db6e:	24 e0       	ldi	r18, 0x04	; 4
    db70:	12 9f       	mul	r17, r18
    db72:	f0 01       	movw	r30, r0
    db74:	11 24       	eor	r1, r1
    db76:	e5 52       	subi	r30, 0x25	; 37
    db78:	f0 4f       	sbci	r31, 0xF0	; 240
    db7a:	43 81       	ldd	r20, Z+3	; 0x03
    db7c:	c7 01       	movw	r24, r14
    db7e:	84 5b       	subi	r24, 0xB4	; 180
    db80:	9f 4f       	sbci	r25, 0xFF	; 255
    db82:	49 83       	std	Y+1, r20	; 0x01
    db84:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    db88:	49 81       	ldd	r20, Y+1	; 0x01
    db8a:	bc 01       	movw	r22, r24
    db8c:	81 2f       	mov	r24, r17
    db8e:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_B && !(player->flags & PRONE))
    db92:	f7 01       	movw	r30, r14
    db94:	ec 58       	subi	r30, 0x8C	; 140
    db96:	ff 4f       	sbci	r31, 0xFF	; 255
    db98:	80 81       	ld	r24, Z
    db9a:	80 ff       	sbrs	r24, 0
    db9c:	bb c0       	rjmp	.+374    	; 0xdd14 <update_player+0x3c2>
    db9e:	f7 01       	movw	r30, r14
    dba0:	80 85       	ldd	r24, Z+8	; 0x08
    dba2:	82 fd       	sbrc	r24, 2
    dba4:	b7 c0       	rjmp	.+366    	; 0xdd14 <update_player+0x3c2>
			{
				player->shared.vy = -JUMP_SPEED;
    dba6:	81 e8       	ldi	r24, 0x81	; 129
    dba8:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    dbaa:	88 ec       	ldi	r24, 0xC8	; 200
    dbac:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    dbae:	81 e0       	ldi	r24, 0x01	; 1
    dbb0:	80 87       	std	Z+8, r24	; 0x08
    dbb2:	83 c0       	rjmp	.+262    	; 0xdcba <update_player+0x368>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    dbb4:	00 ff       	sbrs	r16, 0
    dbb6:	4c c0       	rjmp	.+152    	; 0xdc50 <update_player+0x2fe>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    dbb8:	f7 01       	movw	r30, r14
    dbba:	e8 58       	subi	r30, 0x88	; 136
    dbbc:	ff 4f       	sbci	r31, 0xFF	; 255
    dbbe:	60 81       	ld	r22, Z
    dbc0:	c7 01       	movw	r24, r14
    dbc2:	84 5a       	subi	r24, 0xA4	; 164
    dbc4:	9f 4f       	sbci	r25, 0xFF	; 255
    dbc6:	67 ff       	sbrs	r22, 7
    dbc8:	18 c0       	rjmp	.+48     	; 0xdbfa <update_player+0x2a8>
    dbca:	f7 01       	movw	r30, r14
    dbcc:	20 81       	ld	r18, Z
    dbce:	31 81       	ldd	r19, Z+1	; 0x01
    dbd0:	43 e0       	ldi	r20, 0x03	; 3
    dbd2:	36 95       	lsr	r19
    dbd4:	27 95       	ror	r18
    dbd6:	4a 95       	dec	r20
    dbd8:	e1 f7       	brne	.-8      	; 0xdbd2 <update_player+0x280>
    dbda:	2e 5f       	subi	r18, 0xFE	; 254
    dbdc:	3f 4f       	sbci	r19, 0xFF	; 255
    dbde:	40 91 c1 0d 	lds	r20, 0x0DC1
    dbe2:	50 e0       	ldi	r21, 0x00	; 0
    dbe4:	24 17       	cp	r18, r20
    dbe6:	35 07       	cpc	r19, r21
    dbe8:	40 f4       	brcc	.+16     	; 0xdbfa <update_player+0x2a8>
		{
			player->shared.vx = RUN_SPEED;
    dbea:	2c e3       	ldi	r18, 0x3C	; 60
    dbec:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    dbee:	21 e0       	ldi	r18, 0x01	; 1
    dbf0:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    dbf2:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dbf6:	40 e0       	ldi	r20, 0x00	; 0
    dbf8:	20 c0       	rjmp	.+64     	; 0xdc3a <update_player+0x2e8>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dbfa:	66 ff       	sbrs	r22, 6
    dbfc:	11 c0       	rjmp	.+34     	; 0xdc20 <update_player+0x2ce>
    dbfe:	f7 01       	movw	r30, r14
    dc00:	40 81       	ld	r20, Z
    dc02:	51 81       	ldd	r21, Z+1	; 0x01
    dc04:	20 91 b2 0d 	lds	r18, 0x0DB2
    dc08:	30 91 b3 0d 	lds	r19, 0x0DB3
    dc0c:	24 17       	cp	r18, r20
    dc0e:	35 07       	cpc	r19, r21
    dc10:	38 f4       	brcc	.+14     	; 0xdc20 <update_player+0x2ce>
		{
			player->shared.vx = -RUN_SPEED;
    dc12:	24 ec       	ldi	r18, 0xC4	; 196
    dc14:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    dc16:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    dc18:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dc1c:	41 e0       	ldi	r20, 0x01	; 1
    dc1e:	0d c0       	rjmp	.+26     	; 0xdc3a <update_player+0x2e8>
		}
		else
		{
			player->shared.vx = 0;
    dc20:	f7 01       	movw	r30, r14
    dc22:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dc24:	24 e0       	ldi	r18, 0x04	; 4
    dc26:	12 9f       	mul	r17, r18
    dc28:	f0 01       	movw	r30, r0
    dc2a:	11 24       	eor	r1, r1
    dc2c:	e5 52       	subi	r30, 0x25	; 37
    dc2e:	f0 4f       	sbci	r31, 0xF0	; 240
    dc30:	43 81       	ldd	r20, Z+3	; 0x03
    dc32:	49 83       	std	Y+1, r20	; 0x01
    dc34:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dc38:	49 81       	ldd	r20, Y+1	; 0x01
    dc3a:	bc 01       	movw	r22, r24
    dc3c:	81 2f       	mov	r24, r17
    dc3e:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    dc42:	f7 01       	movw	r30, r14
    dc44:	86 81       	ldd	r24, Z+6	; 0x06
    dc46:	81 11       	cpse	r24, r1
    dc48:	65 c0       	rjmp	.+202    	; 0xdd14 <update_player+0x3c2>
		{
			player->flags = IDLE;
    dc4a:	88 e0       	ldi	r24, 0x08	; 8
    dc4c:	80 87       	std	Z+8, r24	; 0x08
    dc4e:	62 c0       	rjmp	.+196    	; 0xdd14 <update_player+0x3c2>
		}
	}
	else if (player->flags & PRONE)
    dc50:	02 ff       	sbrs	r16, 2
    dc52:	60 c0       	rjmp	.+192    	; 0xdd14 <update_player+0x3c2>
	{
		if (player->controls.pressed & BTN_UP)
    dc54:	f7 01       	movw	r30, r14
    dc56:	ec 58       	subi	r30, 0x8C	; 140
    dc58:	ff 4f       	sbci	r31, 0xFF	; 255
    dc5a:	80 81       	ld	r24, Z
    dc5c:	84 ff       	sbrs	r24, 4
    dc5e:	16 c0       	rjmp	.+44     	; 0xdc8c <update_player+0x33a>
		{
			player->flags = IDLE;	
    dc60:	88 e0       	ldi	r24, 0x08	; 8
    dc62:	f7 01       	movw	r30, r14
    dc64:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dc66:	82 81       	ldd	r24, Z+2	; 0x02
    dc68:	93 81       	ldd	r25, Z+3	; 0x03
    dc6a:	40 97       	sbiw	r24, 0x10	; 16
    dc6c:	93 83       	std	Z+3, r25	; 0x03
    dc6e:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    dc70:	82 85       	ldd	r24, Z+10	; 0x0a
    dc72:	81 30       	cpi	r24, 0x01	; 1
    dc74:	29 f4       	brne	.+10     	; 0xdc80 <update_player+0x32e>
			{
				player->shared.x += 8;
    dc76:	80 81       	ld	r24, Z
    dc78:	91 81       	ldd	r25, Z+1	; 0x01
    dc7a:	08 96       	adiw	r24, 0x08	; 8
    dc7c:	91 83       	std	Z+1, r25	; 0x01
    dc7e:	80 83       	st	Z, r24
			}
			player->width = 2;
    dc80:	82 e0       	ldi	r24, 0x02	; 2
    dc82:	f7 01       	movw	r30, r14
    dc84:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    dc86:	83 e0       	ldi	r24, 0x03	; 3
    dc88:	84 87       	std	Z+12, r24	; 0x0c
    dc8a:	44 c0       	rjmp	.+136    	; 0xdd14 <update_player+0x3c2>
		}
		else if (player->controls.pressed & BTN_B)
    dc8c:	80 ff       	sbrs	r24, 0
    dc8e:	28 c0       	rjmp	.+80     	; 0xdce0 <update_player+0x38e>
		{
			player->flags = JUMPING;
    dc90:	81 e0       	ldi	r24, 0x01	; 1
    dc92:	f7 01       	movw	r30, r14
    dc94:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dc96:	82 81       	ldd	r24, Z+2	; 0x02
    dc98:	93 81       	ldd	r25, Z+3	; 0x03
    dc9a:	40 97       	sbiw	r24, 0x10	; 16
    dc9c:	93 83       	std	Z+3, r25	; 0x03
    dc9e:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    dca0:	82 85       	ldd	r24, Z+10	; 0x0a
    dca2:	81 30       	cpi	r24, 0x01	; 1
    dca4:	29 f4       	brne	.+10     	; 0xdcb0 <update_player+0x35e>
			{
				player->shared.x += 8;
    dca6:	80 81       	ld	r24, Z
    dca8:	91 81       	ldd	r25, Z+1	; 0x01
    dcaa:	08 96       	adiw	r24, 0x08	; 8
    dcac:	91 83       	std	Z+1, r25	; 0x01
    dcae:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    dcb0:	81 e8       	ldi	r24, 0x81	; 129
    dcb2:	f7 01       	movw	r30, r14
    dcb4:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    dcb6:	88 ec       	ldi	r24, 0xC8	; 200
    dcb8:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    dcba:	82 e0       	ldi	r24, 0x02	; 2
    dcbc:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    dcbe:	83 e0       	ldi	r24, 0x03	; 3
    dcc0:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dcc2:	24 e0       	ldi	r18, 0x04	; 4
    dcc4:	12 9f       	mul	r17, r18
    dcc6:	f0 01       	movw	r30, r0
    dcc8:	11 24       	eor	r1, r1
    dcca:	e5 52       	subi	r30, 0x25	; 37
    dccc:	f0 4f       	sbci	r31, 0xF0	; 240
    dcce:	43 81       	ldd	r20, Z+3	; 0x03
    dcd0:	c7 01       	movw	r24, r14
    dcd2:	84 5a       	subi	r24, 0xA4	; 164
    dcd4:	9f 4f       	sbci	r25, 0xFF	; 255
    dcd6:	49 83       	std	Y+1, r20	; 0x01
    dcd8:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dcdc:	49 81       	ldd	r20, Y+1	; 0x01
    dcde:	16 c0       	rjmp	.+44     	; 0xdd0c <update_player+0x3ba>
		}
		else if (player->controls.pressed & BTN_LEFT)
    dce0:	86 ff       	sbrs	r24, 6
    dce2:	09 c0       	rjmp	.+18     	; 0xdcf6 <update_player+0x3a4>
		{
			player->direction = D_LEFT;
    dce4:	f7 01       	movw	r30, r14
    dce6:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    dce8:	c7 01       	movw	r24, r14
    dcea:	8c 59       	subi	r24, 0x9C	; 156
    dcec:	9f 4f       	sbci	r25, 0xFF	; 255
    dcee:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dcf2:	41 e0       	ldi	r20, 0x01	; 1
    dcf4:	0b c0       	rjmp	.+22     	; 0xdd0c <update_player+0x3ba>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    dcf6:	87 ff       	sbrs	r24, 7
    dcf8:	0d c0       	rjmp	.+26     	; 0xdd14 <update_player+0x3c2>
		{
			player->direction = D_RIGHT;
    dcfa:	81 e0       	ldi	r24, 0x01	; 1
    dcfc:	f7 01       	movw	r30, r14
    dcfe:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    dd00:	c7 01       	movw	r24, r14
    dd02:	8c 59       	subi	r24, 0x9C	; 156
    dd04:	9f 4f       	sbci	r25, 0xFF	; 255
    dd06:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    dd0a:	40 e0       	ldi	r20, 0x00	; 0
    dd0c:	bc 01       	movw	r22, r24
    dd0e:	81 2f       	mov	r24, r17
    dd10:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		}
	}
	return 1;
}
    dd14:	81 e0       	ldi	r24, 0x01	; 1
    dd16:	0f 90       	pop	r0
    dd18:	df 91       	pop	r29
    dd1a:	cf 91       	pop	r28
    dd1c:	1f 91       	pop	r17
    dd1e:	0f 91       	pop	r16
    dd20:	ff 90       	pop	r15
    dd22:	ef 90       	pop	r14
    dd24:	08 95       	ret

0000dd26 <update_level>:
		}
	}
}

u8 update_level()
{
    dd26:	cf 92       	push	r12
    dd28:	df 92       	push	r13
    dd2a:	ef 92       	push	r14
    dd2c:	ff 92       	push	r15
    dd2e:	0f 93       	push	r16
    dd30:	cf 93       	push	r28
    dd32:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    dd34:	e0 90 d0 0d 	lds	r14, 0x0DD0
    dd38:	f0 90 d1 0d 	lds	r15, 0x0DD1
    dd3c:	c0 90 b2 0d 	lds	r12, 0x0DB2
    dd40:	d0 90 b3 0d 	lds	r13, 0x0DB3
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    dd44:	80 91 cc 0d 	lds	r24, 0x0DCC
    dd48:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    dd4a:	8c 33       	cpi	r24, 0x3C	; 60
    dd4c:	19 f0       	breq	.+6      	; 0xdd54 <update_level+0x2e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    dd4e:	80 93 cc 0d 	sts	0x0DCC, r24
    dd52:	0f c0       	rjmp	.+30     	; 0xdd72 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    dd54:	10 92 cc 0d 	sts	0x0DCC, r1
		if (game.time != 65535) game.time++;
    dd58:	80 91 b8 0d 	lds	r24, 0x0DB8
    dd5c:	90 91 b9 0d 	lds	r25, 0x0DB9
    dd60:	8f 3f       	cpi	r24, 0xFF	; 255
    dd62:	2f ef       	ldi	r18, 0xFF	; 255
    dd64:	92 07       	cpc	r25, r18
    dd66:	29 f0       	breq	.+10     	; 0xdd72 <update_level+0x4c>
    dd68:	01 96       	adiw	r24, 0x01	; 1
    dd6a:	90 93 b9 0d 	sts	0x0DB9, r25
    dd6e:	80 93 b8 0d 	sts	0x0DB8, r24
	}
	
	if (is_space())
    dd72:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    dd76:	88 23       	and	r24, r24
    dd78:	69 f1       	breq	.+90     	; 0xddd4 <update_level+0xae>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    dd7a:	c6 01       	movw	r24, r12
    dd7c:	23 e0       	ldi	r18, 0x03	; 3
    dd7e:	96 95       	lsr	r25
    dd80:	87 95       	ror	r24
    dd82:	2a 95       	dec	r18
    dd84:	e1 f7       	brne	.-8      	; 0xdd7e <update_level+0x58>
    dd86:	4c 96       	adiw	r24, 0x1c	; 28
    dd88:	20 91 c1 0d 	lds	r18, 0x0DC1
    dd8c:	30 e0       	ldi	r19, 0x00	; 0
    dd8e:	82 17       	cp	r24, r18
    dd90:	93 07       	cpc	r25, r19
    dd92:	70 f4       	brcc	.+28     	; 0xddb0 <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    dd94:	20 91 c7 0d 	lds	r18, 0x0DC7
    dd98:	29 30       	cpi	r18, 0x09	; 9
    dd9a:	39 f4       	brne	.+14     	; 0xddaa <update_level+0x84>
    dd9c:	82 3d       	cpi	r24, 0xD2	; 210
    dd9e:	91 05       	cpc	r25, r1
    dda0:	20 f0       	brcs	.+8      	; 0xddaa <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    dda2:	80 91 cc 0d 	lds	r24, 0x0DCC
    dda6:	80 fd       	sbrc	r24, 0
    dda8:	2d c0       	rjmp	.+90     	; 0xde04 <update_level+0xde>
    ddaa:	0e 94 18 5c 	call	0xb830	; 0xb830 <move_camera_x>
    ddae:	2a c0       	rjmp	.+84     	; 0xde04 <update_level+0xde>
    ddb0:	80 91 d8 0d 	lds	r24, 0x0DD8
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x >= game.camera_x+CAMERA_WIDTH*8)
    ddb4:	96 01       	movw	r18, r12
    ddb6:	20 52       	subi	r18, 0x20	; 32
    ddb8:	3f 4f       	sbci	r19, 0xFF	; 255
    ddba:	e2 16       	cp	r14, r18
    ddbc:	f3 06       	cpc	r15, r19
    ddbe:	30 f0       	brcs	.+12     	; 0xddcc <update_level+0xa6>
		{
			game.level_ended = 1;
    ddc0:	91 e0       	ldi	r25, 0x01	; 1
    ddc2:	90 93 cf 0d 	sts	0x0DCF, r25
			game.player.flags ^= END_OF_SPACE;
    ddc6:	90 e2       	ldi	r25, 0x20	; 32
    ddc8:	89 27       	eor	r24, r25
    ddca:	01 c0       	rjmp	.+2      	; 0xddce <update_level+0xa8>
		} else {
			game.player.flags |= END_OF_SPACE;
    ddcc:	80 62       	ori	r24, 0x20	; 32
    ddce:	80 93 d8 0d 	sts	0x0DD8, r24
    ddd2:	18 c0       	rjmp	.+48     	; 0xde04 <update_level+0xde>
		}
	}
	else if (game.player.shared.vx > 0 &&
    ddd4:	80 91 d5 0d 	lds	r24, 0x0DD5
    ddd8:	18 16       	cp	r1, r24
    ddda:	a4 f4       	brge	.+40     	; 0xde04 <update_level+0xde>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dddc:	c7 01       	movw	r24, r14
    ddde:	8c 19       	sub	r24, r12
    dde0:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    dde2:	80 37       	cpi	r24, 0x70	; 112
    dde4:	91 05       	cpc	r25, r1
    dde6:	70 f0       	brcs	.+28     	; 0xde04 <update_level+0xde>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    dde8:	96 01       	movw	r18, r12
    ddea:	83 e0       	ldi	r24, 0x03	; 3
    ddec:	36 95       	lsr	r19
    ddee:	27 95       	ror	r18
    ddf0:	8a 95       	dec	r24
    ddf2:	e1 f7       	brne	.-8      	; 0xddec <update_level+0xc6>
    ddf4:	24 5e       	subi	r18, 0xE4	; 228
    ddf6:	3f 4f       	sbci	r19, 0xFF	; 255
    ddf8:	80 91 c1 0d 	lds	r24, 0x0DC1
    ddfc:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    ddfe:	28 17       	cp	r18, r24
    de00:	39 07       	cpc	r19, r25
    de02:	98 f2       	brcs	.-90     	; 0xddaa <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    de04:	21 e0       	ldi	r18, 0x01	; 1
    de06:	40 91 df 0d 	lds	r20, 0x0DDF
    de0a:	6d e1       	ldi	r22, 0x1D	; 29
    de0c:	89 e0       	ldi	r24, 0x09	; 9
    de0e:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    de12:	40 91 b8 0d 	lds	r20, 0x0DB8
    de16:	50 91 b9 0d 	lds	r21, 0x0DB9
    de1a:	21 e0       	ldi	r18, 0x01	; 1
    de1c:	6d e1       	ldi	r22, 0x1D	; 29
    de1e:	8b e1       	ldi	r24, 0x1B	; 27
    de20:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    de24:	21 e0       	ldi	r18, 0x01	; 1
    de26:	40 91 c5 0d 	lds	r20, 0x0DC5
    de2a:	6e e1       	ldi	r22, 0x1E	; 30
    de2c:	89 e0       	ldi	r24, 0x09	; 9
    de2e:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    de32:	40 91 b6 0d 	lds	r20, 0x0DB6
    de36:	50 91 b7 0d 	lds	r21, 0x0DB7
    de3a:	21 e0       	ldi	r18, 0x01	; 1
    de3c:	6e e1       	ldi	r22, 0x1E	; 30
    de3e:	8b e1       	ldi	r24, 0x1B	; 27
    de40:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    de44:	40 91 b4 0d 	lds	r20, 0x0DB4
    de48:	50 91 b5 0d 	lds	r21, 0x0DB5
    de4c:	21 e0       	ldi	r18, 0x01	; 1
    de4e:	6f e1       	ldi	r22, 0x1F	; 31
    de50:	8b e1       	ldi	r24, 0x1B	; 27
    de52:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    de56:	80 91 cf 0d 	lds	r24, 0x0DCF
    de5a:	88 23       	and	r24, r24
    de5c:	09 f4       	brne	.+2      	; 0xde60 <update_level+0x13a>
    de5e:	86 c0       	rjmp	.+268    	; 0xdf6c <update_level+0x246>
    de60:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    de64:	81 11       	cpse	r24, r1
    de66:	6c c0       	rjmp	.+216    	; 0xdf40 <update_level+0x21a>
    de68:	80 91 d8 0d 	lds	r24, 0x0DD8
    de6c:	8e 70       	andi	r24, 0x0E	; 14
    de6e:	09 f4       	brne	.+2      	; 0xde72 <update_level+0x14c>
    de70:	7d c0       	rjmp	.+250    	; 0xdf6c <update_level+0x246>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    de72:	40 e0       	ldi	r20, 0x00	; 0
    de74:	62 e0       	ldi	r22, 0x02	; 2
    de76:	77 e3       	ldi	r23, 0x37	; 55
    de78:	80 e0       	ldi	r24, 0x00	; 0
    de7a:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
		if (game.player.flags & PRONE) {
    de7e:	80 91 d8 0d 	lds	r24, 0x0DD8
    de82:	82 ff       	sbrs	r24, 2
    de84:	1a c0       	rjmp	.+52     	; 0xdeba <update_level+0x194>
			game.player.shared.y -= 16;
    de86:	40 91 d2 0d 	lds	r20, 0x0DD2
    de8a:	50 91 d3 0d 	lds	r21, 0x0DD3
    de8e:	40 51       	subi	r20, 0x10	; 16
    de90:	51 09       	sbc	r21, r1
    de92:	50 93 d3 0d 	sts	0x0DD3, r21
    de96:	40 93 d2 0d 	sts	0x0DD2, r20
			game.player.width = 2;
    de9a:	82 e0       	ldi	r24, 0x02	; 2
    de9c:	80 93 db 0d 	sts	0x0DDB, r24
			game.player.height = 3;
    dea0:	83 e0       	ldi	r24, 0x03	; 3
    dea2:	80 93 dc 0d 	sts	0x0DDC, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    dea6:	60 91 d0 0d 	lds	r22, 0x0DD0
    deaa:	80 91 b2 0d 	lds	r24, 0x0DB2
    deae:	68 1b       	sub	r22, r24
    deb0:	03 e0       	ldi	r16, 0x03	; 3
    deb2:	22 e0       	ldi	r18, 0x02	; 2
    deb4:	80 e0       	ldi	r24, 0x00	; 0
    deb6:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    deba:	6b e0       	ldi	r22, 0x0B	; 11
    debc:	89 e0       	ldi	r24, 0x09	; 9
    debe:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
		LBRotateSprites();
    dec2:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		map_ship();
    dec6:	0e 94 31 5c 	call	0xb862	; 0xb862 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    deca:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    decc:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    dece:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    ded0:	81 e0       	ldi	r24, 0x01	; 1
    ded2:	90 e0       	ldi	r25, 0x00	; 0
    ded4:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    ded8:	8c 2f       	mov	r24, r28
    deda:	90 e0       	ldi	r25, 0x00	; 0
    dedc:	88 3a       	cpi	r24, 0xA8	; 168
    dede:	91 05       	cpc	r25, r1
    dee0:	3c f0       	brlt	.+14     	; 0xdef0 <update_level+0x1ca>
			{
				clear_sprites(0, 6);
    dee2:	66 e0       	ldi	r22, 0x06	; 6
    dee4:	80 e0       	ldi	r24, 0x00	; 0
    dee6:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
				LBRotateSprites();
    deea:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
				ship_increment = -3;
    deee:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    def0:	84 e2       	ldi	r24, 0x24	; 36
    def2:	9e e0       	ldi	r25, 0x0E	; 14
    def4:	0e 94 8d 50 	call	0xa11a	; 0xa11a <LBGetNextFrame>
    def8:	40 e0       	ldi	r20, 0x00	; 0
    defa:	bc 01       	movw	r22, r24
    defc:	86 e0       	ldi	r24, 0x06	; 6
    defe:	0e 94 f3 51 	call	0xa3e6	; 0xa3e6 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    df02:	02 e0       	ldi	r16, 0x02	; 2
    df04:	24 e0       	ldi	r18, 0x04	; 4
    df06:	4c 2f       	mov	r20, r28
    df08:	6e 2d       	mov	r22, r14
    df0a:	86 e0       	ldi	r24, 0x06	; 6
    df0c:	0e 94 45 52 	call	0xa48a	; 0xa48a <LBMoveSprite>
			ship_y += ship_increment;
    df10:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    df12:	99 f4       	brne	.+38     	; 0xdf3a <update_level+0x214>
			{
				clear_sprites(6, 8);
    df14:	68 e0       	ldi	r22, 0x08	; 8
    df16:	86 e0       	ldi	r24, 0x06	; 6
    df18:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
				LBRotateSprites();
    df1c:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    df20:	64 e6       	ldi	r22, 0x64	; 100
    df22:	70 e0       	ldi	r23, 0x00	; 0
    df24:	89 ea       	ldi	r24, 0xA9	; 169
    df26:	9a e0       	ldi	r25, 0x0A	; 10
    df28:	0e 94 2a 6b 	call	0xd654	; 0xd654 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    df2c:	80 91 c7 0d 	lds	r24, 0x0DC7
    df30:	00 e0       	ldi	r16, 0x00	; 0
    df32:	23 e0       	ldi	r18, 0x03	; 3
    df34:	4a e1       	ldi	r20, 0x1A	; 26
    df36:	6f ef       	ldi	r22, 0xFF	; 255
    df38:	15 c0       	rjmp	.+42     	; 0xdf64 <update_level+0x23e>
				break;
			}
			LBRotateSprites();
    df3a:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		}
    df3e:	c8 cf       	rjmp	.-112    	; 0xded0 <update_level+0x1aa>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    df40:	64 e6       	ldi	r22, 0x64	; 100
    df42:	70 e0       	ldi	r23, 0x00	; 0
    df44:	89 ea       	ldi	r24, 0xA9	; 169
    df46:	9a e0       	ldi	r25, 0x0A	; 10
    df48:	0e 94 2a 6b 	call	0xd654	; 0xd654 <tally_score>
		if (game.current_level_index == 9) {
    df4c:	80 91 c7 0d 	lds	r24, 0x0DC7
    df50:	89 30       	cpi	r24, 0x09	; 9
    df52:	21 f4       	brne	.+8      	; 0xdf5c <update_level+0x236>
			exit_game();
    df54:	0e 94 35 6a 	call	0xd46a	; 0xd46a <exit_game>
			return 1;
    df58:	81 e0       	ldi	r24, 0x01	; 1
    df5a:	08 c0       	rjmp	.+16     	; 0xdf6c <update_level+0x246>
		} else {
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    df5c:	07 ec       	ldi	r16, 0xC7	; 199
    df5e:	2d ef       	ldi	r18, 0xFD	; 253
    df60:	4c e1       	ldi	r20, 0x1C	; 28
    df62:	61 e0       	ldi	r22, 0x01	; 1
    df64:	8f 5f       	subi	r24, 0xFF	; 255
    df66:	0e 94 07 68 	call	0xd00e	; 0xd00e <planet_transition>
		}
	}
	return 0;
    df6a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    df6c:	df 91       	pop	r29
    df6e:	cf 91       	pop	r28
    df70:	0f 91       	pop	r16
    df72:	ff 90       	pop	r15
    df74:	ef 90       	pop	r14
    df76:	df 90       	pop	r13
    df78:	cf 90       	pop	r12
    df7a:	08 95       	ret

0000df7c <update_pause>:
		}
	}
}

void update_pause()
{
    df7c:	ef 92       	push	r14
    df7e:	ff 92       	push	r15
    df80:	0f 93       	push	r16
    df82:	1f 93       	push	r17
    df84:	cf 93       	push	r28
    df86:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    df88:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    df8c:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    df90:	80 91 44 0e 	lds	r24, 0x0E44
    df94:	83 ff       	sbrs	r24, 3
    df96:	63 c0       	rjmp	.+198    	; 0xe05e <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    df98:	06 95       	lsr	r16
    df9a:	06 95       	lsr	r16
    df9c:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    df9e:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    dfa0:	c6 95       	lsr	r28
    dfa2:	c6 95       	lsr	r28
    dfa4:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    dfa6:	d0 e0       	ldi	r29, 0x00	; 0
    dfa8:	c8 01       	movw	r24, r16
    dfaa:	06 96       	adiw	r24, 0x06	; 6
    dfac:	2e e1       	ldi	r18, 0x1E	; 30
    dfae:	e2 2e       	mov	r14, r18
    dfb0:	f1 2c       	mov	r15, r1
    dfb2:	b7 01       	movw	r22, r14
    dfb4:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    dfb8:	9e 01       	movw	r18, r28
    dfba:	28 5f       	subi	r18, 0xF8	; 248
    dfbc:	3f 4f       	sbci	r19, 0xFF	; 255
    dfbe:	44 ef       	ldi	r20, 0xF4	; 244
    dfc0:	5f e5       	ldi	r21, 0x5F	; 95
    dfc2:	68 2f       	mov	r22, r24
    dfc4:	82 2f       	mov	r24, r18
    dfc6:	8f 71       	andi	r24, 0x1F	; 31
    dfc8:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    dfcc:	c8 01       	movw	r24, r16
    dfce:	09 96       	adiw	r24, 0x09	; 9
    dfd0:	b7 01       	movw	r22, r14
    dfd2:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    dfd6:	9e 01       	movw	r18, r28
    dfd8:	23 5f       	subi	r18, 0xF3	; 243
    dfda:	3f 4f       	sbci	r19, 0xFF	; 255
    dfdc:	45 eb       	ldi	r20, 0xB5	; 181
    dfde:	5a e0       	ldi	r21, 0x0A	; 10
    dfe0:	68 2f       	mov	r22, r24
    dfe2:	82 2f       	mov	r24, r18
    dfe4:	8f 71       	andi	r24, 0x1F	; 31
    dfe6:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    dfea:	c8 01       	movw	r24, r16
    dfec:	0c 96       	adiw	r24, 0x0c	; 12
    dfee:	b7 01       	movw	r22, r14
    dff0:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    dff4:	2a 96       	adiw	r28, 0x0a	; 10
    dff6:	4b eb       	ldi	r20, 0xBB	; 187
    dff8:	5a e0       	ldi	r21, 0x0A	; 10
    dffa:	68 2f       	mov	r22, r24
    dffc:	8c 2f       	mov	r24, r28
    dffe:	8f 71       	andi	r24, 0x1F	; 31
    e000:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    e004:	64 e1       	ldi	r22, 0x14	; 20
    e006:	80 e0       	ldi	r24, 0x00	; 0
    e008:	0e 94 03 67 	call	0xce06	; 0xce06 <hide_sprites>
		LBRotateSprites();
    e00c:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    e010:	81 e0       	ldi	r24, 0x01	; 1
    e012:	90 e0       	ldi	r25, 0x00	; 0
    e014:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    e018:	60 e0       	ldi	r22, 0x00	; 0
    e01a:	84 e4       	ldi	r24, 0x44	; 68
    e01c:	9e e0       	ldi	r25, 0x0E	; 14
    e01e:	0e 94 b3 50 	call	0xa166	; 0xa166 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    e022:	80 91 44 0e 	lds	r24, 0x0E44
    e026:	90 91 45 0e 	lds	r25, 0x0E45
    e02a:	83 ff       	sbrs	r24, 3
    e02c:	08 c0       	rjmp	.+16     	; 0xe03e <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    e02e:	df 91       	pop	r29
    e030:	cf 91       	pop	r28
    e032:	1f 91       	pop	r17
    e034:	0f 91       	pop	r16
    e036:	ff 90       	pop	r15
    e038:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    e03a:	0c 94 4e 5a 	jmp	0xb49c	; 0xb49c <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    e03e:	91 ff       	sbrs	r25, 1
    e040:	e7 cf       	rjmp	.-50     	; 0xe010 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    e042:	60 e0       	ldi	r22, 0x00	; 0
    e044:	70 e0       	ldi	r23, 0x00	; 0
    e046:	89 e9       	ldi	r24, 0x99	; 153
    e048:	9a e0       	ldi	r25, 0x0A	; 10
    e04a:	0e 94 2a 6b 	call	0xd654	; 0xd654 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    e04e:	df 91       	pop	r29
    e050:	cf 91       	pop	r28
    e052:	1f 91       	pop	r17
    e054:	0f 91       	pop	r16
    e056:	ff 90       	pop	r15
    e058:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    e05a:	0c 94 35 6a 	jmp	0xd46a	; 0xd46a <exit_game>
				break;
			}
		}
	}
}
    e05e:	df 91       	pop	r29
    e060:	cf 91       	pop	r28
    e062:	1f 91       	pop	r17
    e064:	0f 91       	pop	r16
    e066:	ff 90       	pop	r15
    e068:	ef 90       	pop	r14
    e06a:	08 95       	ret

0000e06c <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    e06c:	cf 92       	push	r12
    e06e:	df 92       	push	r13
    e070:	ff 92       	push	r15
    e072:	0f 93       	push	r16
    e074:	1f 93       	push	r17
    e076:	cf 93       	push	r28
    e078:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e07a:	20 91 c7 0d 	lds	r18, 0x0DC7
    e07e:	f2 2e       	mov	r15, r18
    e080:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e082:	ef ea       	ldi	r30, 0xAF	; 175
    e084:	fc e0       	ldi	r31, 0x0C	; 12
    e086:	84 81       	ldd	r24, Z+4	; 0x04
    e088:	86 95       	lsr	r24
    e08a:	86 95       	lsr	r24
    e08c:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e08e:	08 2f       	mov	r16, r24
    e090:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e092:	c3 81       	ldd	r28, Z+3	; 0x03
    e094:	c6 95       	lsr	r28
    e096:	c6 95       	lsr	r28
    e098:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e09a:	d0 e0       	ldi	r29, 0x00	; 0
    e09c:	c8 01       	movw	r24, r16
    e09e:	06 96       	adiw	r24, 0x06	; 6
    e0a0:	2e e1       	ldi	r18, 0x1E	; 30
    e0a2:	c2 2e       	mov	r12, r18
    e0a4:	d1 2c       	mov	r13, r1
    e0a6:	b6 01       	movw	r22, r12
    e0a8:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    e0ac:	9e 01       	movw	r18, r28
    e0ae:	29 5f       	subi	r18, 0xF9	; 249
    e0b0:	3f 4f       	sbci	r19, 0xFF	; 255
    e0b2:	42 e9       	ldi	r20, 0x92	; 146
    e0b4:	5f e5       	ldi	r21, 0x5F	; 95
    e0b6:	68 2f       	mov	r22, r24
    e0b8:	82 2f       	mov	r24, r18
    e0ba:	8f 71       	andi	r24, 0x1F	; 31
    e0bc:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e0c0:	c8 01       	movw	r24, r16
    e0c2:	09 96       	adiw	r24, 0x09	; 9
    e0c4:	b6 01       	movw	r22, r12
    e0c6:	0e 94 58 72 	call	0xe4b0	; 0xe4b0 <__divmodhi4>
    e0ca:	be 01       	movw	r22, r28
    e0cc:	68 5f       	subi	r22, 0xF8	; 248
    e0ce:	7f 4f       	sbci	r23, 0xFF	; 255
    e0d0:	6f 71       	andi	r22, 0x1F	; 31
    e0d2:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e0d4:	93 e2       	ldi	r25, 0x23	; 35
    e0d6:	f9 9e       	mul	r15, r25
    e0d8:	90 01       	movw	r18, r0
    e0da:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e0dc:	48 2f       	mov	r20, r24
    e0de:	c9 01       	movw	r24, r18
    e0e0:	8d 5b       	subi	r24, 0xBD	; 189
    e0e2:	96 4f       	sbci	r25, 0xF6	; 246
    e0e4:	0e 94 60 67 	call	0xcec0	; 0xcec0 <stream_text_anywhere>
	LBWaitSeconds(3);
    e0e8:	83 e0       	ldi	r24, 0x03	; 3
    e0ea:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <LBWaitSeconds>
	game.boss.active = 1;
    e0ee:	81 e0       	ldi	r24, 0x01	; 1
    e0f0:	80 93 58 0e 	sts	0x0E58, r24
	render_camera_view();
}
    e0f4:	df 91       	pop	r29
    e0f6:	cf 91       	pop	r28
    e0f8:	1f 91       	pop	r17
    e0fa:	0f 91       	pop	r16
    e0fc:	ff 90       	pop	r15
    e0fe:	df 90       	pop	r13
    e100:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e102:	0c 94 4e 5a 	jmp	0xb49c	; 0xb49c <render_camera_view>

0000e106 <update_player_ai>:
}

void update_player_ai(Player* player) 
{
    e106:	cf 93       	push	r28
    e108:	df 93       	push	r29
    e10a:	ec 01       	movw	r28, r24
	 static s8 last_shield_value;
	 
	 if (player->ai_flags == AI_NOT_READY) {
    e10c:	89 85       	ldd	r24, Y+9	; 0x09
    e10e:	81 11       	cpse	r24, r1
    e110:	0a c0       	rjmp	.+20     	; 0xe126 <update_player_ai+0x20>
		 player->controls.held = BTN_LEFT;
    e112:	80 e4       	ldi	r24, 0x40	; 64
    e114:	90 e0       	ldi	r25, 0x00	; 0
    e116:	fe 01       	movw	r30, r28
    e118:	e8 58       	subi	r30, 0x88	; 136
    e11a:	ff 4f       	sbci	r31, 0xFF	; 255
    e11c:	91 83       	std	Z+1, r25	; 0x01
    e11e:	80 83       	st	Z, r24
		 player->ai_flags = AI_READY;
    e120:	81 e0       	ldi	r24, 0x01	; 1
    e122:	89 87       	std	Y+9, r24	; 0x09
    e124:	55 c0       	rjmp	.+170    	; 0xe1d0 <update_player_ai+0xca>
	 }
	 else if (player->ai_flags & AI_READY) {
    e126:	80 ff       	sbrs	r24, 0
    e128:	1f c0       	rjmp	.+62     	; 0xe168 <update_player_ai+0x62>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e12a:	fe 01       	movw	r30, r28
    e12c:	ec 58       	subi	r30, 0x8C	; 140
    e12e:	ff 4f       	sbci	r31, 0xFF	; 255
    e130:	15 82       	std	Z+5, r1	; 0x05
    e132:	14 82       	std	Z+4, r1	; 0x04
	p->pressed = 0;
    e134:	11 82       	std	Z+1, r1	; 0x01
    e136:	10 82       	st	Z, r1
	p->released = 0;
    e138:	13 82       	std	Z+3, r1	; 0x03
    e13a:	12 82       	std	Z+2, r1	; 0x02
	p->held_cycles = 0;
    e13c:	16 82       	std	Z+6, r1	; 0x06
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width) {
    e13e:	80 91 b2 0d 	lds	r24, 0x0DB2
    e142:	90 91 b3 0d 	lds	r25, 0x0DB3
    e146:	23 e0       	ldi	r18, 0x03	; 3
    e148:	96 95       	lsr	r25
    e14a:	87 95       	ror	r24
    e14c:	2a 95       	dec	r18
    e14e:	e1 f7       	brne	.-8      	; 0xe148 <update_player_ai+0x42>
    e150:	4c 96       	adiw	r24, 0x1c	; 28
    e152:	20 91 c1 0d 	lds	r18, 0x0DC1
    e156:	30 e0       	ldi	r19, 0x00	; 0
    e158:	82 17       	cp	r24, r18
    e15a:	93 07       	cpc	r25, r19
    e15c:	c8 f1       	brcs	.+114    	; 0xe1d0 <update_player_ai+0xca>
			 challenge();
    e15e:	0e 94 36 70 	call	0xe06c	; 0xe06c <challenge>
			 player->ai_flags = AI_WALKING;
    e162:	82 e0       	ldi	r24, 0x02	; 2
    e164:	89 87       	std	Y+9, r24	; 0x09
    e166:	2d c0       	rjmp	.+90     	; 0xe1c2 <update_player_ai+0xbc>
			 player->controls.held = BTN_LEFT;
		 }
	 } else if (player->ai_flags & AI_WALKING) {
    e168:	81 ff       	sbrs	r24, 1
    e16a:	32 c0       	rjmp	.+100    	; 0xe1d0 <update_player_ai+0xca>
		 player->controls.pressed = 0;
    e16c:	fe 01       	movw	r30, r28
    e16e:	ec 58       	subi	r30, 0x8C	; 140
    e170:	ff 4f       	sbci	r31, 0xFF	; 255
    e172:	11 82       	std	Z+1, r1	; 0x01
    e174:	10 82       	st	Z, r1
		 if (game.frame_counter % 15 == 0) {
    e176:	80 91 cc 0d 	lds	r24, 0x0DCC
    e17a:	6f e0       	ldi	r22, 0x0F	; 15
    e17c:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    e180:	91 11       	cpse	r25, r1
    e182:	04 c0       	rjmp	.+8      	; 0xe18c <update_player_ai+0x86>
			 player->controls.pressed = BTN_A;
    e184:	80 e0       	ldi	r24, 0x00	; 0
    e186:	91 e0       	ldi	r25, 0x01	; 1
    e188:	91 83       	std	Z+1, r25	; 0x01
    e18a:	80 83       	st	Z, r24
		 }
		 if (last_shield_value > player->shield) {
    e18c:	90 91 f4 0c 	lds	r25, 0x0CF4
    e190:	8f 85       	ldd	r24, Y+15	; 0x0f
    e192:	89 17       	cp	r24, r25
    e194:	2c f4       	brge	.+10     	; 0xe1a0 <update_player_ai+0x9a>
			 player->controls.pressed |= BTN_B;
    e196:	80 81       	ld	r24, Z
    e198:	91 81       	ldd	r25, Z+1	; 0x01
    e19a:	81 60       	ori	r24, 0x01	; 1
    e19c:	91 83       	std	Z+1, r25	; 0x01
    e19e:	80 83       	st	Z, r24
		 }
		 if (player->shared.x <= game.camera_x) {
    e1a0:	28 81       	ld	r18, Y
    e1a2:	39 81       	ldd	r19, Y+1	; 0x01
    e1a4:	80 91 b2 0d 	lds	r24, 0x0DB2
    e1a8:	90 91 b3 0d 	lds	r25, 0x0DB3
    e1ac:	82 17       	cp	r24, r18
    e1ae:	93 07       	cpc	r25, r19
    e1b0:	18 f0       	brcs	.+6      	; 0xe1b8 <update_player_ai+0xb2>
			 player->controls.held = BTN_RIGHT;
    e1b2:	80 e8       	ldi	r24, 0x80	; 128
    e1b4:	90 e0       	ldi	r25, 0x00	; 0
    e1b6:	07 c0       	rjmp	.+14     	; 0xe1c6 <update_player_ai+0xc0>
		 } else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8) {
    e1b8:	80 53       	subi	r24, 0x30	; 48
    e1ba:	9f 4f       	sbci	r25, 0xFF	; 255
    e1bc:	28 17       	cp	r18, r24
    e1be:	39 07       	cpc	r19, r25
    e1c0:	38 f0       	brcs	.+14     	; 0xe1d0 <update_player_ai+0xca>
			 player->controls.held = BTN_LEFT;
    e1c2:	80 e4       	ldi	r24, 0x40	; 64
    e1c4:	90 e0       	ldi	r25, 0x00	; 0
    e1c6:	fe 01       	movw	r30, r28
    e1c8:	e8 58       	subi	r30, 0x88	; 136
    e1ca:	ff 4f       	sbci	r31, 0xFF	; 255
    e1cc:	91 83       	std	Z+1, r25	; 0x01
    e1ce:	80 83       	st	Z, r24
		 }
	 }
	 last_shield_value = player->shield;
    e1d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    e1d2:	80 93 f4 0c 	sts	0x0CF4, r24
}
    e1d6:	df 91       	pop	r29
    e1d8:	cf 91       	pop	r28
    e1da:	08 95       	ret

0000e1dc <prepare_debugging>:

#if DEBUG_MODE
void prepare_debugging() {
    e1dc:	1f 93       	push	r17
    e1de:	cf 93       	push	r28
    e1e0:	df 93       	push	r29
	fade_through();
    e1e2:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <fade_through>
	Screen.scrollX = 0;
    e1e6:	ef ea       	ldi	r30, 0xAF	; 175
    e1e8:	fc e0       	ldi	r31, 0x0C	; 12
    e1ea:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    e1ec:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 29;
    e1ee:	1d e1       	ldi	r17, 0x1D	; 29
    e1f0:	15 83       	std	Z+5, r17	; 0x05
	Screen.overlayHeight = 3;
    e1f2:	83 e0       	ldi	r24, 0x03	; 3
    e1f4:	80 83       	st	Z, r24
	Screen.overlayTileTable = tiles_data;
    e1f6:	81 e3       	ldi	r24, 0x31	; 49
    e1f8:	97 e3       	ldi	r25, 0x37	; 55
    e1fa:	92 83       	std	Z+2, r25	; 0x02
    e1fc:	81 83       	std	Z+1, r24	; 0x01
	clear_overlay(2);
    e1fe:	82 e0       	ldi	r24, 0x02	; 2
    e200:	0e 94 0e 5a 	call	0xb41c	; 0xb41c <clear_overlay>
	game.current_screen = LEVEL;
    e204:	c2 eb       	ldi	r28, 0xB2	; 178
    e206:	dd e0       	ldi	r29, 0x0D	; 13
    e208:	82 e0       	ldi	r24, 0x02	; 2
    e20a:	8c 8b       	std	Y+20, r24	; 0x14
	game.selection = START_SELECTED;
    e20c:	19 8e       	std	Y+25, r1	; 0x19
	game.lives = LIVES;
    e20e:	85 e0       	ldi	r24, 0x05	; 5
    e210:	8b 8b       	std	Y+19, r24	; 0x13
	game.score = 0;
    e212:	1b 82       	std	Y+3, r1	; 0x03
    e214:	1a 82       	std	Y+2, r1	; 0x02
	game.level_score = 0;
    e216:	1d 82       	std	Y+5, r1	; 0x05
    e218:	1c 82       	std	Y+4, r1	; 0x04
	game.time = 0;
    e21a:	1f 82       	std	Y+7, r1	; 0x07
    e21c:	1e 82       	std	Y+6, r1	; 0x06
	game.current_level_index = DEBUG_LEVEL;
    e21e:	89 e0       	ldi	r24, 0x09	; 9
    e220:	8d 8b       	std	Y+21, r24	; 0x15
	game.level_ended = 0;
    e222:	1d 8e       	std	Y+29, r1	; 0x1d
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    e224:	64 e1       	ldi	r22, 0x14	; 20
    e226:	80 e0       	ldi	r24, 0x00	; 0
    e228:	0e 94 c0 65 	call	0xcb80	; 0xcb80 <clear_sprites>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e22c:	10 92 49 0e 	sts	0x0E49, r1
    e230:	10 92 48 0e 	sts	0x0E48, r1
	p->pressed = 0;
    e234:	10 92 45 0e 	sts	0x0E45, r1
    e238:	10 92 44 0e 	sts	0x0E44, r1
	p->released = 0;
    e23c:	10 92 47 0e 	sts	0x0E47, r1
    e240:	10 92 46 0e 	sts	0x0E46, r1
	p->held_cycles = 0;
    e244:	10 92 4a 0e 	sts	0x0E4A, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e248:	10 92 c4 0e 	sts	0x0EC4, r1
    e24c:	10 92 c3 0e 	sts	0x0EC3, r1
	p->pressed = 0;
    e250:	10 92 c0 0e 	sts	0x0EC0, r1
    e254:	10 92 bf 0e 	sts	0x0EBF, r1
	p->released = 0;
    e258:	10 92 c2 0e 	sts	0x0EC2, r1
    e25c:	10 92 c1 0e 	sts	0x0EC1, r1
	p->held_cycles = 0;
    e260:	10 92 c5 0e 	sts	0x0EC5, r1
		case 4: map_level_info((char*) map_level_forest); break;
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
		case 9: map_level_info((char*) map_level_space_final); break;
    e264:	80 ef       	ldi	r24, 0xF0	; 240
    e266:	9f e6       	ldi	r25, 0x6F	; 111
    e268:	0e 94 46 5c 	call	0xb88c	; 0xb88c <map_level_info>
	}
	game.column_count = 0;
    e26c:	19 8a       	std	Y+17, r1	; 0x11
#if DEBUG_LEVEL_LOCATION == DEBUG_BEGGINING
	game.camera_x = get_camera_x(DEBUG_LEVEL)*8;
    e26e:	19 82       	std	Y+1, r1	; 0x01
    e270:	18 82       	st	Y, r1
	game.camera_y = get_camera_y(DEBUG_LEVEL)*8;
    e272:	18 86       	std	Y+8, r1	; 0x08
	game.player.shared.x = get_hero_spawn_x(DEBUG_LEVEL)*8;
    e274:	88 e1       	ldi	r24, 0x18	; 24
    e276:	90 e0       	ldi	r25, 0x00	; 0
    e278:	9f 8f       	std	Y+31, r25	; 0x1f
    e27a:	8e 8f       	std	Y+30, r24	; 0x1e
	game.player.shared.y = get_hero_spawn_y(DEBUG_LEVEL)*8;
    e27c:	88 ea       	ldi	r24, 0xA8	; 168
    e27e:	90 e0       	ldi	r25, 0x00	; 0
    e280:	99 a3       	std	Y+33, r25	; 0x21
    e282:	88 a3       	std	Y+32, r24	; 0x20
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    e284:	19 87       	std	Y+9, r17	; 0x09
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    e286:	1d 87       	std	Y+13, r17	; 0x0d
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    e288:	2a e1       	ldi	r18, 0x1A	; 26
    e28a:	2a 87       	std	Y+10, r18	; 0x0a
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    e28c:	2e 87       	std	Y+14, r18	; 0x0e
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    game.scroll_dest_x = 29;
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    game.scroll_dest_y =  26;
#endif
	game.boss.shared.x = get_boss_spawn_x(DEBUG_LEVEL)*8;
    e28e:	28 ed       	ldi	r18, 0xD8	; 216
    e290:	37 e0       	ldi	r19, 0x07	; 7
    e292:	30 93 4c 0e 	sts	0x0E4C, r19
    e296:	20 93 4b 0e 	sts	0x0E4B, r18
	game.boss.shared.y = get_boss_spawn_y(DEBUG_LEVEL)*8;
    e29a:	90 93 4e 0e 	sts	0x0E4E, r25
    e29e:	80 93 4d 0e 	sts	0x0E4D, r24
	game.scroll_x = 0;
    e2a2:	1b 86       	std	Y+11, r1	; 0x0b
	game.scroll_y = 0;
    e2a4:	1c 86       	std	Y+12, r1	; 0x0c
	game.spawn_rate = BASE_SPAWN_RATE;
    e2a6:	8a e0       	ldi	r24, 0x0A	; 10
    e2a8:	8c 8f       	std	Y+28, r24	; 0x1c
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    e2aa:	40 ee       	ldi	r20, 0xE0	; 224
    e2ac:	5a e0       	ldi	r21, 0x0A	; 10
    e2ae:	6d e1       	ldi	r22, 0x1D	; 29
    e2b0:	80 e0       	ldi	r24, 0x00	; 0
    e2b2:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    e2b6:	43 ed       	ldi	r20, 0xD3	; 211
    e2b8:	5a e0       	ldi	r21, 0x0A	; 10
    e2ba:	6d e1       	ldi	r22, 0x1D	; 29
    e2bc:	82 e1       	ldi	r24, 0x12	; 18
    e2be:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    e2c2:	49 ed       	ldi	r20, 0xD9	; 217
    e2c4:	5a e0       	ldi	r21, 0x0A	; 10
    e2c6:	6e e1       	ldi	r22, 0x1E	; 30
    e2c8:	80 e0       	ldi	r24, 0x00	; 0
    e2ca:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    e2ce:	48 ee       	ldi	r20, 0xE8	; 232
    e2d0:	5a e0       	ldi	r21, 0x0A	; 10
    e2d2:	6e e1       	ldi	r22, 0x1E	; 30
    e2d4:	81 e1       	ldi	r24, 0x11	; 17
    e2d6:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    e2da:	42 e9       	ldi	r20, 0x92	; 146
    e2dc:	5a e0       	ldi	r21, 0x0A	; 10
    e2de:	6f e1       	ldi	r22, 0x1F	; 31
    e2e0:	81 e1       	ldi	r24, 0x11	; 17
    e2e2:	0e 94 1e 51 	call	0xa23c	; 0xa23c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    e2e6:	21 e0       	ldi	r18, 0x01	; 1
    e2e8:	4d a5       	ldd	r20, Y+45	; 0x2d
    e2ea:	6d e1       	ldi	r22, 0x1D	; 29
    e2ec:	89 e0       	ldi	r24, 0x09	; 9
    e2ee:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    e2f2:	4e 81       	ldd	r20, Y+6	; 0x06
    e2f4:	5f 81       	ldd	r21, Y+7	; 0x07
    e2f6:	21 e0       	ldi	r18, 0x01	; 1
    e2f8:	6d e1       	ldi	r22, 0x1D	; 29
    e2fa:	8b e1       	ldi	r24, 0x1B	; 27
    e2fc:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    e300:	21 e0       	ldi	r18, 0x01	; 1
    e302:	4b 89       	ldd	r20, Y+19	; 0x13
    e304:	6e e1       	ldi	r22, 0x1E	; 30
    e306:	89 e0       	ldi	r24, 0x09	; 9
    e308:	0e 94 3a 51 	call	0xa274	; 0xa274 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    e30c:	4c 81       	ldd	r20, Y+4	; 0x04
    e30e:	5d 81       	ldd	r21, Y+5	; 0x05
    e310:	21 e0       	ldi	r18, 0x01	; 1
    e312:	6e e1       	ldi	r22, 0x1E	; 30
    e314:	8b e1       	ldi	r24, 0x1B	; 27
    e316:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    e31a:	4a 81       	ldd	r20, Y+2	; 0x02
    e31c:	5b 81       	ldd	r21, Y+3	; 0x03
    e31e:	21 e0       	ldi	r18, 0x01	; 1
    e320:	6f e1       	ldi	r22, 0x1F	; 31
    e322:	8b e1       	ldi	r24, 0x1B	; 27
    e324:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <LBPrintInt>
	
	init_player_state();
    e328:	0e 94 69 57 	call	0xaed2	; 0xaed2 <init_player_state>
	init_boss_state();
    e32c:	0e 94 bf 56 	call	0xad7e	; 0xad7e <init_boss_state>
	init_enemy_state();
    e330:	0e 94 d1 52 	call	0xa5a2	; 0xa5a2 <init_enemy_state>
	
	render_camera_view();
}
    e334:	df 91       	pop	r29
    e336:	cf 91       	pop	r28
    e338:	1f 91       	pop	r17
	
	init_player_state();
	init_boss_state();
	init_enemy_state();
	
	render_camera_view();
    e33a:	0c 94 4e 5a 	jmp	0xb49c	; 0xb49c <render_camera_view>

0000e33e <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e33e:	0e 94 58 41 	call	0x82b0	; 0x82b0 <GetTrueRandomSeed>
    e342:	0e 94 d8 42 	call	0x85b0	; 0x85b0 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e346:	89 e8       	ldi	r24, 0x89	; 137
    e348:	9c e1       	ldi	r25, 0x1C	; 28
    e34a:	0e 94 b2 43 	call	0x8764	; 0x8764 <InitMusicPlayer>
	ClearVram();
    e34e:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <ClearVram>
	SetMasterVolume(0x05);
    e352:	85 e0       	ldi	r24, 0x05	; 5
    e354:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <SetMasterVolume>
	SetTileTable(tiles_data);
    e358:	81 e3       	ldi	r24, 0x31	; 49
    e35a:	97 e3       	ldi	r25, 0x37	; 55
    e35c:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e360:	88 e0       	ldi	r24, 0x08	; 8
    e362:	9e e1       	ldi	r25, 0x1E	; 30
    e364:	0e 94 db 40 	call	0x81b6	; 0x81b6 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e368:	81 e3       	ldi	r24, 0x31	; 49
    e36a:	9f e5       	ldi	r25, 0x5F	; 95
    e36c:	90 93 85 0d 	sts	0x0D85, r25
    e370:	80 93 84 0d 	sts	0x0D84, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e374:	0e 94 bb 52 	call	0xa576	; 0xa576 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
    e378:	0e 94 ee 70 	call	0xe1dc	; 0xe1dc <prepare_debugging>
#else
	load_splash();
#endif
	while (1)
	{
		WaitVsync(1);
    e37c:	81 e0       	ldi	r24, 0x01	; 1
    e37e:	90 e0       	ldi	r25, 0x00	; 0
    e380:	0e 94 c5 4f 	call	0x9f8a	; 0x9f8a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e384:	60 e0       	ldi	r22, 0x00	; 0
    e386:	84 e4       	ldi	r24, 0x44	; 68
    e388:	9e e0       	ldi	r25, 0x0E	; 14
    e38a:	0e 94 b3 50 	call	0xa166	; 0xa166 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e38e:	80 91 c6 0d 	lds	r24, 0x0DC6
    e392:	82 30       	cpi	r24, 0x02	; 2
    e394:	09 f0       	breq	.+2      	; 0xe398 <main+0x5a>
    e396:	52 c0       	rjmp	.+164    	; 0xe43c <main+0xfe>
		{
			if (update_level()) continue;
    e398:	0e 94 93 6e 	call	0xdd26	; 0xdd26 <update_level>
    e39c:	81 11       	cpse	r24, r1
    e39e:	ee cf       	rjmp	.-36     	; 0xe37c <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    e3a0:	60 e0       	ldi	r22, 0x00	; 0
    e3a2:	80 ed       	ldi	r24, 0xD0	; 208
    e3a4:	9d e0       	ldi	r25, 0x0D	; 13
    e3a6:	0e 94 a9 6c 	call	0xd952	; 0xd952 <update_player>
    e3aa:	88 23       	and	r24, r24
    e3ac:	e9 f0       	breq	.+58     	; 0xe3e8 <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e3ae:	66 e0       	ldi	r22, 0x06	; 6
    e3b0:	80 ed       	ldi	r24, 0xD0	; 208
    e3b2:	9d e0       	ldi	r25, 0x0D	; 13
    e3b4:	0e 94 e0 5c 	call	0xb9c0	; 0xb9c0 <update_shot>
				update_enemies();
    e3b8:	0e 94 0d 63 	call	0xc61a	; 0xc61a <update_enemies>
				update_enemy_shots();
    e3bc:	0e 94 7a 63 	call	0xc6f4	; 0xc6f4 <update_enemy_shots>
				animate_enemies();
    e3c0:	0e 94 0c 64 	call	0xc818	; 0xc818 <animate_enemies>
				animate_enemy_shots();
    e3c4:	0e 94 18 65 	call	0xca30	; 0xca30 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e3c8:	40 e0       	ldi	r20, 0x00	; 0
    e3ca:	6b e4       	ldi	r22, 0x4B	; 75
    e3cc:	7e e0       	ldi	r23, 0x0E	; 14
    e3ce:	80 ed       	ldi	r24, 0xD0	; 208
    e3d0:	9d e0       	ldi	r25, 0x0D	; 13
    e3d2:	0e 94 f4 61 	call	0xc3e8	; 0xc3e8 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e3d6:	46 e0       	ldi	r20, 0x06	; 6
    e3d8:	6b e4       	ldi	r22, 0x4B	; 75
    e3da:	7e e0       	ldi	r23, 0x0E	; 14
    e3dc:	80 ed       	ldi	r24, 0xD0	; 208
    e3de:	9d e0       	ldi	r25, 0x0D	; 13
    e3e0:	0e 94 cf 5f 	call	0xbf9e	; 0xbf9e <animate_shot>
				update_pause();
    e3e4:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e3e8:	0e 94 b7 52 	call	0xa56e	; 0xa56e <is_space>
    e3ec:	81 11       	cpse	r24, r1
    e3ee:	2f c0       	rjmp	.+94     	; 0xe44e <main+0x110>
    e3f0:	80 91 b2 0d 	lds	r24, 0x0DB2
    e3f4:	90 91 b3 0d 	lds	r25, 0x0DB3
    e3f8:	88 3f       	cpi	r24, 0xF8	; 248
    e3fa:	96 40       	sbci	r25, 0x06	; 6
    e3fc:	40 f1       	brcs	.+80     	; 0xe44e <main+0x110>
    e3fe:	69 e0       	ldi	r22, 0x09	; 9
    e400:	8b e4       	ldi	r24, 0x4B	; 75
    e402:	9e e0       	ldi	r25, 0x0E	; 14
    e404:	0e 94 a9 6c 	call	0xd952	; 0xd952 <update_player>
    e408:	88 23       	and	r24, r24
    e40a:	09 f1       	breq	.+66     	; 0xe44e <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e40c:	6f e0       	ldi	r22, 0x0F	; 15
    e40e:	8b e4       	ldi	r24, 0x4B	; 75
    e410:	9e e0       	ldi	r25, 0x0E	; 14
    e412:	0e 94 e0 5c 	call	0xb9c0	; 0xb9c0 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e416:	49 e0       	ldi	r20, 0x09	; 9
    e418:	60 ed       	ldi	r22, 0xD0	; 208
    e41a:	7d e0       	ldi	r23, 0x0D	; 13
    e41c:	8b e4       	ldi	r24, 0x4B	; 75
    e41e:	9e e0       	ldi	r25, 0x0E	; 14
    e420:	0e 94 f4 61 	call	0xc3e8	; 0xc3e8 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e424:	4f e0       	ldi	r20, 0x0F	; 15
    e426:	60 ed       	ldi	r22, 0xD0	; 208
    e428:	7d e0       	ldi	r23, 0x0D	; 13
    e42a:	8b e4       	ldi	r24, 0x4B	; 75
    e42c:	9e e0       	ldi	r25, 0x0E	; 14
    e42e:	0e 94 cf 5f 	call	0xbf9e	; 0xbf9e <animate_shot>
				update_player_ai(&game.boss);
    e432:	8b e4       	ldi	r24, 0x4B	; 75
    e434:	9e e0       	ldi	r25, 0x0E	; 14
    e436:	0e 94 83 70 	call	0xe106	; 0xe106 <update_player_ai>
    e43a:	09 c0       	rjmp	.+18     	; 0xe44e <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    e43c:	81 11       	cpse	r24, r1
    e43e:	03 c0       	rjmp	.+6      	; 0xe446 <main+0x108>
		{
			update_splash();
    e440:	0e 94 45 6a 	call	0xd48a	; 0xd48a <update_splash>
    e444:	04 c0       	rjmp	.+8      	; 0xe44e <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e446:	81 30       	cpi	r24, 0x01	; 1
    e448:	11 f4       	brne	.+4      	; 0xe44e <main+0x110>
		{
			update_high_scores();
    e44a:	0e 94 8c 6a 	call	0xd518	; 0xd518 <update_high_scores>
			
		}
		LBRotateSprites();
    e44e:	0e 94 83 52 	call	0xa506	; 0xa506 <LBRotateSprites>
    e452:	94 cf       	rjmp	.-216    	; 0xe37c <main+0x3e>

0000e454 <__udivmodqi4>:
    e454:	99 1b       	sub	r25, r25
    e456:	79 e0       	ldi	r23, 0x09	; 9
    e458:	04 c0       	rjmp	.+8      	; 0xe462 <__udivmodqi4_ep>

0000e45a <__udivmodqi4_loop>:
    e45a:	99 1f       	adc	r25, r25
    e45c:	96 17       	cp	r25, r22
    e45e:	08 f0       	brcs	.+2      	; 0xe462 <__udivmodqi4_ep>
    e460:	96 1b       	sub	r25, r22

0000e462 <__udivmodqi4_ep>:
    e462:	88 1f       	adc	r24, r24
    e464:	7a 95       	dec	r23
    e466:	c9 f7       	brne	.-14     	; 0xe45a <__udivmodqi4_loop>
    e468:	80 95       	com	r24
    e46a:	08 95       	ret

0000e46c <__divmodqi4>:
    e46c:	87 fb       	bst	r24, 7
    e46e:	08 2e       	mov	r0, r24
    e470:	06 26       	eor	r0, r22
    e472:	87 fd       	sbrc	r24, 7
    e474:	81 95       	neg	r24
    e476:	67 fd       	sbrc	r22, 7
    e478:	61 95       	neg	r22
    e47a:	0e 94 2a 72 	call	0xe454	; 0xe454 <__udivmodqi4>
    e47e:	0e f4       	brtc	.+2      	; 0xe482 <__divmodqi4_1>
    e480:	91 95       	neg	r25

0000e482 <__divmodqi4_1>:
    e482:	07 fc       	sbrc	r0, 7
    e484:	81 95       	neg	r24

0000e486 <__divmodqi4_exit>:
    e486:	08 95       	ret

0000e488 <__udivmodhi4>:
    e488:	aa 1b       	sub	r26, r26
    e48a:	bb 1b       	sub	r27, r27
    e48c:	51 e1       	ldi	r21, 0x11	; 17
    e48e:	07 c0       	rjmp	.+14     	; 0xe49e <__udivmodhi4_ep>

0000e490 <__udivmodhi4_loop>:
    e490:	aa 1f       	adc	r26, r26
    e492:	bb 1f       	adc	r27, r27
    e494:	a6 17       	cp	r26, r22
    e496:	b7 07       	cpc	r27, r23
    e498:	10 f0       	brcs	.+4      	; 0xe49e <__udivmodhi4_ep>
    e49a:	a6 1b       	sub	r26, r22
    e49c:	b7 0b       	sbc	r27, r23

0000e49e <__udivmodhi4_ep>:
    e49e:	88 1f       	adc	r24, r24
    e4a0:	99 1f       	adc	r25, r25
    e4a2:	5a 95       	dec	r21
    e4a4:	a9 f7       	brne	.-22     	; 0xe490 <__udivmodhi4_loop>
    e4a6:	80 95       	com	r24
    e4a8:	90 95       	com	r25
    e4aa:	bc 01       	movw	r22, r24
    e4ac:	cd 01       	movw	r24, r26
    e4ae:	08 95       	ret

0000e4b0 <__divmodhi4>:
    e4b0:	97 fb       	bst	r25, 7
    e4b2:	07 2e       	mov	r0, r23
    e4b4:	16 f4       	brtc	.+4      	; 0xe4ba <__divmodhi4+0xa>
    e4b6:	00 94       	com	r0
    e4b8:	07 d0       	rcall	.+14     	; 0xe4c8 <__divmodhi4_neg1>
    e4ba:	77 fd       	sbrc	r23, 7
    e4bc:	09 d0       	rcall	.+18     	; 0xe4d0 <__divmodhi4_neg2>
    e4be:	0e 94 44 72 	call	0xe488	; 0xe488 <__udivmodhi4>
    e4c2:	07 fc       	sbrc	r0, 7
    e4c4:	05 d0       	rcall	.+10     	; 0xe4d0 <__divmodhi4_neg2>
    e4c6:	3e f4       	brtc	.+14     	; 0xe4d6 <__divmodhi4_exit>

0000e4c8 <__divmodhi4_neg1>:
    e4c8:	90 95       	com	r25
    e4ca:	81 95       	neg	r24
    e4cc:	9f 4f       	sbci	r25, 0xFF	; 255
    e4ce:	08 95       	ret

0000e4d0 <__divmodhi4_neg2>:
    e4d0:	70 95       	com	r23
    e4d2:	61 95       	neg	r22
    e4d4:	7f 4f       	sbci	r23, 0xFF	; 255

0000e4d6 <__divmodhi4_exit>:
    e4d6:	08 95       	ret

0000e4d8 <__tablejump2__>:
    e4d8:	ee 0f       	add	r30, r30
    e4da:	ff 1f       	adc	r31, r31
    e4dc:	05 90       	lpm	r0, Z+
    e4de:	f4 91       	lpm	r31, Z
    e4e0:	e0 2d       	mov	r30, r0
    e4e2:	09 94       	ijmp

0000e4e4 <__subsf3>:
    e4e4:	50 58       	subi	r21, 0x80	; 128

0000e4e6 <__addsf3>:
    e4e6:	bb 27       	eor	r27, r27
    e4e8:	aa 27       	eor	r26, r26
    e4ea:	0e d0       	rcall	.+28     	; 0xe508 <__addsf3x>
    e4ec:	e5 c0       	rjmp	.+458    	; 0xe6b8 <__fp_round>
    e4ee:	d6 d0       	rcall	.+428    	; 0xe69c <__fp_pscA>
    e4f0:	30 f0       	brcs	.+12     	; 0xe4fe <__addsf3+0x18>
    e4f2:	db d0       	rcall	.+438    	; 0xe6aa <__fp_pscB>
    e4f4:	20 f0       	brcs	.+8      	; 0xe4fe <__addsf3+0x18>
    e4f6:	31 f4       	brne	.+12     	; 0xe504 <__addsf3+0x1e>
    e4f8:	9f 3f       	cpi	r25, 0xFF	; 255
    e4fa:	11 f4       	brne	.+4      	; 0xe500 <__addsf3+0x1a>
    e4fc:	1e f4       	brtc	.+6      	; 0xe504 <__addsf3+0x1e>
    e4fe:	cb c0       	rjmp	.+406    	; 0xe696 <__fp_nan>
    e500:	0e f4       	brtc	.+2      	; 0xe504 <__addsf3+0x1e>
    e502:	e0 95       	com	r30
    e504:	e7 fb       	bst	r30, 7
    e506:	c1 c0       	rjmp	.+386    	; 0xe68a <__fp_inf>

0000e508 <__addsf3x>:
    e508:	e9 2f       	mov	r30, r25
    e50a:	e7 d0       	rcall	.+462    	; 0xe6da <__fp_split3>
    e50c:	80 f3       	brcs	.-32     	; 0xe4ee <__addsf3+0x8>
    e50e:	ba 17       	cp	r27, r26
    e510:	62 07       	cpc	r22, r18
    e512:	73 07       	cpc	r23, r19
    e514:	84 07       	cpc	r24, r20
    e516:	95 07       	cpc	r25, r21
    e518:	18 f0       	brcs	.+6      	; 0xe520 <__addsf3x+0x18>
    e51a:	71 f4       	brne	.+28     	; 0xe538 <__addsf3x+0x30>
    e51c:	9e f5       	brtc	.+102    	; 0xe584 <__addsf3x+0x7c>
    e51e:	ff c0       	rjmp	.+510    	; 0xe71e <__fp_zero>
    e520:	0e f4       	brtc	.+2      	; 0xe524 <__addsf3x+0x1c>
    e522:	e0 95       	com	r30
    e524:	0b 2e       	mov	r0, r27
    e526:	ba 2f       	mov	r27, r26
    e528:	a0 2d       	mov	r26, r0
    e52a:	0b 01       	movw	r0, r22
    e52c:	b9 01       	movw	r22, r18
    e52e:	90 01       	movw	r18, r0
    e530:	0c 01       	movw	r0, r24
    e532:	ca 01       	movw	r24, r20
    e534:	a0 01       	movw	r20, r0
    e536:	11 24       	eor	r1, r1
    e538:	ff 27       	eor	r31, r31
    e53a:	59 1b       	sub	r21, r25
    e53c:	99 f0       	breq	.+38     	; 0xe564 <__addsf3x+0x5c>
    e53e:	59 3f       	cpi	r21, 0xF9	; 249
    e540:	50 f4       	brcc	.+20     	; 0xe556 <__addsf3x+0x4e>
    e542:	50 3e       	cpi	r21, 0xE0	; 224
    e544:	68 f1       	brcs	.+90     	; 0xe5a0 <__addsf3x+0x98>
    e546:	1a 16       	cp	r1, r26
    e548:	f0 40       	sbci	r31, 0x00	; 0
    e54a:	a2 2f       	mov	r26, r18
    e54c:	23 2f       	mov	r18, r19
    e54e:	34 2f       	mov	r19, r20
    e550:	44 27       	eor	r20, r20
    e552:	58 5f       	subi	r21, 0xF8	; 248
    e554:	f3 cf       	rjmp	.-26     	; 0xe53c <__addsf3x+0x34>
    e556:	46 95       	lsr	r20
    e558:	37 95       	ror	r19
    e55a:	27 95       	ror	r18
    e55c:	a7 95       	ror	r26
    e55e:	f0 40       	sbci	r31, 0x00	; 0
    e560:	53 95       	inc	r21
    e562:	c9 f7       	brne	.-14     	; 0xe556 <__addsf3x+0x4e>
    e564:	7e f4       	brtc	.+30     	; 0xe584 <__addsf3x+0x7c>
    e566:	1f 16       	cp	r1, r31
    e568:	ba 0b       	sbc	r27, r26
    e56a:	62 0b       	sbc	r22, r18
    e56c:	73 0b       	sbc	r23, r19
    e56e:	84 0b       	sbc	r24, r20
    e570:	ba f0       	brmi	.+46     	; 0xe5a0 <__addsf3x+0x98>
    e572:	91 50       	subi	r25, 0x01	; 1
    e574:	a1 f0       	breq	.+40     	; 0xe59e <__addsf3x+0x96>
    e576:	ff 0f       	add	r31, r31
    e578:	bb 1f       	adc	r27, r27
    e57a:	66 1f       	adc	r22, r22
    e57c:	77 1f       	adc	r23, r23
    e57e:	88 1f       	adc	r24, r24
    e580:	c2 f7       	brpl	.-16     	; 0xe572 <__addsf3x+0x6a>
    e582:	0e c0       	rjmp	.+28     	; 0xe5a0 <__addsf3x+0x98>
    e584:	ba 0f       	add	r27, r26
    e586:	62 1f       	adc	r22, r18
    e588:	73 1f       	adc	r23, r19
    e58a:	84 1f       	adc	r24, r20
    e58c:	48 f4       	brcc	.+18     	; 0xe5a0 <__addsf3x+0x98>
    e58e:	87 95       	ror	r24
    e590:	77 95       	ror	r23
    e592:	67 95       	ror	r22
    e594:	b7 95       	ror	r27
    e596:	f7 95       	ror	r31
    e598:	9e 3f       	cpi	r25, 0xFE	; 254
    e59a:	08 f0       	brcs	.+2      	; 0xe59e <__addsf3x+0x96>
    e59c:	b3 cf       	rjmp	.-154    	; 0xe504 <__addsf3+0x1e>
    e59e:	93 95       	inc	r25
    e5a0:	88 0f       	add	r24, r24
    e5a2:	08 f0       	brcs	.+2      	; 0xe5a6 <__addsf3x+0x9e>
    e5a4:	99 27       	eor	r25, r25
    e5a6:	ee 0f       	add	r30, r30
    e5a8:	97 95       	ror	r25
    e5aa:	87 95       	ror	r24
    e5ac:	08 95       	ret

0000e5ae <__fixsfsi>:
    e5ae:	04 d0       	rcall	.+8      	; 0xe5b8 <__fixunssfsi>
    e5b0:	68 94       	set
    e5b2:	b1 11       	cpse	r27, r1
    e5b4:	b5 c0       	rjmp	.+362    	; 0xe720 <__fp_szero>
    e5b6:	08 95       	ret

0000e5b8 <__fixunssfsi>:
    e5b8:	98 d0       	rcall	.+304    	; 0xe6ea <__fp_splitA>
    e5ba:	88 f0       	brcs	.+34     	; 0xe5de <__fixunssfsi+0x26>
    e5bc:	9f 57       	subi	r25, 0x7F	; 127
    e5be:	90 f0       	brcs	.+36     	; 0xe5e4 <__fixunssfsi+0x2c>
    e5c0:	b9 2f       	mov	r27, r25
    e5c2:	99 27       	eor	r25, r25
    e5c4:	b7 51       	subi	r27, 0x17	; 23
    e5c6:	a0 f0       	brcs	.+40     	; 0xe5f0 <__fixunssfsi+0x38>
    e5c8:	d1 f0       	breq	.+52     	; 0xe5fe <__fixunssfsi+0x46>
    e5ca:	66 0f       	add	r22, r22
    e5cc:	77 1f       	adc	r23, r23
    e5ce:	88 1f       	adc	r24, r24
    e5d0:	99 1f       	adc	r25, r25
    e5d2:	1a f0       	brmi	.+6      	; 0xe5da <__fixunssfsi+0x22>
    e5d4:	ba 95       	dec	r27
    e5d6:	c9 f7       	brne	.-14     	; 0xe5ca <__fixunssfsi+0x12>
    e5d8:	12 c0       	rjmp	.+36     	; 0xe5fe <__fixunssfsi+0x46>
    e5da:	b1 30       	cpi	r27, 0x01	; 1
    e5dc:	81 f0       	breq	.+32     	; 0xe5fe <__fixunssfsi+0x46>
    e5de:	9f d0       	rcall	.+318    	; 0xe71e <__fp_zero>
    e5e0:	b1 e0       	ldi	r27, 0x01	; 1
    e5e2:	08 95       	ret
    e5e4:	9c c0       	rjmp	.+312    	; 0xe71e <__fp_zero>
    e5e6:	67 2f       	mov	r22, r23
    e5e8:	78 2f       	mov	r23, r24
    e5ea:	88 27       	eor	r24, r24
    e5ec:	b8 5f       	subi	r27, 0xF8	; 248
    e5ee:	39 f0       	breq	.+14     	; 0xe5fe <__fixunssfsi+0x46>
    e5f0:	b9 3f       	cpi	r27, 0xF9	; 249
    e5f2:	cc f3       	brlt	.-14     	; 0xe5e6 <__fixunssfsi+0x2e>
    e5f4:	86 95       	lsr	r24
    e5f6:	77 95       	ror	r23
    e5f8:	67 95       	ror	r22
    e5fa:	b3 95       	inc	r27
    e5fc:	d9 f7       	brne	.-10     	; 0xe5f4 <__fixunssfsi+0x3c>
    e5fe:	3e f4       	brtc	.+14     	; 0xe60e <__fixunssfsi+0x56>
    e600:	90 95       	com	r25
    e602:	80 95       	com	r24
    e604:	70 95       	com	r23
    e606:	61 95       	neg	r22
    e608:	7f 4f       	sbci	r23, 0xFF	; 255
    e60a:	8f 4f       	sbci	r24, 0xFF	; 255
    e60c:	9f 4f       	sbci	r25, 0xFF	; 255
    e60e:	08 95       	ret

0000e610 <__floatunsisf>:
    e610:	e8 94       	clt
    e612:	09 c0       	rjmp	.+18     	; 0xe626 <__floatsisf+0x12>

0000e614 <__floatsisf>:
    e614:	97 fb       	bst	r25, 7
    e616:	3e f4       	brtc	.+14     	; 0xe626 <__floatsisf+0x12>
    e618:	90 95       	com	r25
    e61a:	80 95       	com	r24
    e61c:	70 95       	com	r23
    e61e:	61 95       	neg	r22
    e620:	7f 4f       	sbci	r23, 0xFF	; 255
    e622:	8f 4f       	sbci	r24, 0xFF	; 255
    e624:	9f 4f       	sbci	r25, 0xFF	; 255
    e626:	99 23       	and	r25, r25
    e628:	a9 f0       	breq	.+42     	; 0xe654 <__floatsisf+0x40>
    e62a:	f9 2f       	mov	r31, r25
    e62c:	96 e9       	ldi	r25, 0x96	; 150
    e62e:	bb 27       	eor	r27, r27
    e630:	93 95       	inc	r25
    e632:	f6 95       	lsr	r31
    e634:	87 95       	ror	r24
    e636:	77 95       	ror	r23
    e638:	67 95       	ror	r22
    e63a:	b7 95       	ror	r27
    e63c:	f1 11       	cpse	r31, r1
    e63e:	f8 cf       	rjmp	.-16     	; 0xe630 <__floatsisf+0x1c>
    e640:	fa f4       	brpl	.+62     	; 0xe680 <__floatsisf+0x6c>
    e642:	bb 0f       	add	r27, r27
    e644:	11 f4       	brne	.+4      	; 0xe64a <__floatsisf+0x36>
    e646:	60 ff       	sbrs	r22, 0
    e648:	1b c0       	rjmp	.+54     	; 0xe680 <__floatsisf+0x6c>
    e64a:	6f 5f       	subi	r22, 0xFF	; 255
    e64c:	7f 4f       	sbci	r23, 0xFF	; 255
    e64e:	8f 4f       	sbci	r24, 0xFF	; 255
    e650:	9f 4f       	sbci	r25, 0xFF	; 255
    e652:	16 c0       	rjmp	.+44     	; 0xe680 <__floatsisf+0x6c>
    e654:	88 23       	and	r24, r24
    e656:	11 f0       	breq	.+4      	; 0xe65c <__floatsisf+0x48>
    e658:	96 e9       	ldi	r25, 0x96	; 150
    e65a:	11 c0       	rjmp	.+34     	; 0xe67e <__floatsisf+0x6a>
    e65c:	77 23       	and	r23, r23
    e65e:	21 f0       	breq	.+8      	; 0xe668 <__floatsisf+0x54>
    e660:	9e e8       	ldi	r25, 0x8E	; 142
    e662:	87 2f       	mov	r24, r23
    e664:	76 2f       	mov	r23, r22
    e666:	05 c0       	rjmp	.+10     	; 0xe672 <__floatsisf+0x5e>
    e668:	66 23       	and	r22, r22
    e66a:	71 f0       	breq	.+28     	; 0xe688 <__floatsisf+0x74>
    e66c:	96 e8       	ldi	r25, 0x86	; 134
    e66e:	86 2f       	mov	r24, r22
    e670:	70 e0       	ldi	r23, 0x00	; 0
    e672:	60 e0       	ldi	r22, 0x00	; 0
    e674:	2a f0       	brmi	.+10     	; 0xe680 <__floatsisf+0x6c>
    e676:	9a 95       	dec	r25
    e678:	66 0f       	add	r22, r22
    e67a:	77 1f       	adc	r23, r23
    e67c:	88 1f       	adc	r24, r24
    e67e:	da f7       	brpl	.-10     	; 0xe676 <__floatsisf+0x62>
    e680:	88 0f       	add	r24, r24
    e682:	96 95       	lsr	r25
    e684:	87 95       	ror	r24
    e686:	97 f9       	bld	r25, 7
    e688:	08 95       	ret

0000e68a <__fp_inf>:
    e68a:	97 f9       	bld	r25, 7
    e68c:	9f 67       	ori	r25, 0x7F	; 127
    e68e:	80 e8       	ldi	r24, 0x80	; 128
    e690:	70 e0       	ldi	r23, 0x00	; 0
    e692:	60 e0       	ldi	r22, 0x00	; 0
    e694:	08 95       	ret

0000e696 <__fp_nan>:
    e696:	9f ef       	ldi	r25, 0xFF	; 255
    e698:	80 ec       	ldi	r24, 0xC0	; 192
    e69a:	08 95       	ret

0000e69c <__fp_pscA>:
    e69c:	00 24       	eor	r0, r0
    e69e:	0a 94       	dec	r0
    e6a0:	16 16       	cp	r1, r22
    e6a2:	17 06       	cpc	r1, r23
    e6a4:	18 06       	cpc	r1, r24
    e6a6:	09 06       	cpc	r0, r25
    e6a8:	08 95       	ret

0000e6aa <__fp_pscB>:
    e6aa:	00 24       	eor	r0, r0
    e6ac:	0a 94       	dec	r0
    e6ae:	12 16       	cp	r1, r18
    e6b0:	13 06       	cpc	r1, r19
    e6b2:	14 06       	cpc	r1, r20
    e6b4:	05 06       	cpc	r0, r21
    e6b6:	08 95       	ret

0000e6b8 <__fp_round>:
    e6b8:	09 2e       	mov	r0, r25
    e6ba:	03 94       	inc	r0
    e6bc:	00 0c       	add	r0, r0
    e6be:	11 f4       	brne	.+4      	; 0xe6c4 <__fp_round+0xc>
    e6c0:	88 23       	and	r24, r24
    e6c2:	52 f0       	brmi	.+20     	; 0xe6d8 <__fp_round+0x20>
    e6c4:	bb 0f       	add	r27, r27
    e6c6:	40 f4       	brcc	.+16     	; 0xe6d8 <__fp_round+0x20>
    e6c8:	bf 2b       	or	r27, r31
    e6ca:	11 f4       	brne	.+4      	; 0xe6d0 <__fp_round+0x18>
    e6cc:	60 ff       	sbrs	r22, 0
    e6ce:	04 c0       	rjmp	.+8      	; 0xe6d8 <__fp_round+0x20>
    e6d0:	6f 5f       	subi	r22, 0xFF	; 255
    e6d2:	7f 4f       	sbci	r23, 0xFF	; 255
    e6d4:	8f 4f       	sbci	r24, 0xFF	; 255
    e6d6:	9f 4f       	sbci	r25, 0xFF	; 255
    e6d8:	08 95       	ret

0000e6da <__fp_split3>:
    e6da:	57 fd       	sbrc	r21, 7
    e6dc:	90 58       	subi	r25, 0x80	; 128
    e6de:	44 0f       	add	r20, r20
    e6e0:	55 1f       	adc	r21, r21
    e6e2:	59 f0       	breq	.+22     	; 0xe6fa <__fp_splitA+0x10>
    e6e4:	5f 3f       	cpi	r21, 0xFF	; 255
    e6e6:	71 f0       	breq	.+28     	; 0xe704 <__fp_splitA+0x1a>
    e6e8:	47 95       	ror	r20

0000e6ea <__fp_splitA>:
    e6ea:	88 0f       	add	r24, r24
    e6ec:	97 fb       	bst	r25, 7
    e6ee:	99 1f       	adc	r25, r25
    e6f0:	61 f0       	breq	.+24     	; 0xe70a <__fp_splitA+0x20>
    e6f2:	9f 3f       	cpi	r25, 0xFF	; 255
    e6f4:	79 f0       	breq	.+30     	; 0xe714 <__fp_splitA+0x2a>
    e6f6:	87 95       	ror	r24
    e6f8:	08 95       	ret
    e6fa:	12 16       	cp	r1, r18
    e6fc:	13 06       	cpc	r1, r19
    e6fe:	14 06       	cpc	r1, r20
    e700:	55 1f       	adc	r21, r21
    e702:	f2 cf       	rjmp	.-28     	; 0xe6e8 <__fp_split3+0xe>
    e704:	46 95       	lsr	r20
    e706:	f1 df       	rcall	.-30     	; 0xe6ea <__fp_splitA>
    e708:	08 c0       	rjmp	.+16     	; 0xe71a <__fp_splitA+0x30>
    e70a:	16 16       	cp	r1, r22
    e70c:	17 06       	cpc	r1, r23
    e70e:	18 06       	cpc	r1, r24
    e710:	99 1f       	adc	r25, r25
    e712:	f1 cf       	rjmp	.-30     	; 0xe6f6 <__fp_splitA+0xc>
    e714:	86 95       	lsr	r24
    e716:	71 05       	cpc	r23, r1
    e718:	61 05       	cpc	r22, r1
    e71a:	08 94       	sec
    e71c:	08 95       	ret

0000e71e <__fp_zero>:
    e71e:	e8 94       	clt

0000e720 <__fp_szero>:
    e720:	bb 27       	eor	r27, r27
    e722:	66 27       	eor	r22, r22
    e724:	77 27       	eor	r23, r23
    e726:	cb 01       	movw	r24, r22
    e728:	97 f9       	bld	r25, 7
    e72a:	08 95       	ret

0000e72c <__mulsf3>:
    e72c:	0b d0       	rcall	.+22     	; 0xe744 <__mulsf3x>
    e72e:	c4 cf       	rjmp	.-120    	; 0xe6b8 <__fp_round>
    e730:	b5 df       	rcall	.-150    	; 0xe69c <__fp_pscA>
    e732:	28 f0       	brcs	.+10     	; 0xe73e <__mulsf3+0x12>
    e734:	ba df       	rcall	.-140    	; 0xe6aa <__fp_pscB>
    e736:	18 f0       	brcs	.+6      	; 0xe73e <__mulsf3+0x12>
    e738:	95 23       	and	r25, r21
    e73a:	09 f0       	breq	.+2      	; 0xe73e <__mulsf3+0x12>
    e73c:	a6 cf       	rjmp	.-180    	; 0xe68a <__fp_inf>
    e73e:	ab cf       	rjmp	.-170    	; 0xe696 <__fp_nan>
    e740:	11 24       	eor	r1, r1
    e742:	ee cf       	rjmp	.-36     	; 0xe720 <__fp_szero>

0000e744 <__mulsf3x>:
    e744:	ca df       	rcall	.-108    	; 0xe6da <__fp_split3>
    e746:	a0 f3       	brcs	.-24     	; 0xe730 <__mulsf3+0x4>

0000e748 <__mulsf3_pse>:
    e748:	95 9f       	mul	r25, r21
    e74a:	d1 f3       	breq	.-12     	; 0xe740 <__mulsf3+0x14>
    e74c:	95 0f       	add	r25, r21
    e74e:	50 e0       	ldi	r21, 0x00	; 0
    e750:	55 1f       	adc	r21, r21
    e752:	62 9f       	mul	r22, r18
    e754:	f0 01       	movw	r30, r0
    e756:	72 9f       	mul	r23, r18
    e758:	bb 27       	eor	r27, r27
    e75a:	f0 0d       	add	r31, r0
    e75c:	b1 1d       	adc	r27, r1
    e75e:	63 9f       	mul	r22, r19
    e760:	aa 27       	eor	r26, r26
    e762:	f0 0d       	add	r31, r0
    e764:	b1 1d       	adc	r27, r1
    e766:	aa 1f       	adc	r26, r26
    e768:	64 9f       	mul	r22, r20
    e76a:	66 27       	eor	r22, r22
    e76c:	b0 0d       	add	r27, r0
    e76e:	a1 1d       	adc	r26, r1
    e770:	66 1f       	adc	r22, r22
    e772:	82 9f       	mul	r24, r18
    e774:	22 27       	eor	r18, r18
    e776:	b0 0d       	add	r27, r0
    e778:	a1 1d       	adc	r26, r1
    e77a:	62 1f       	adc	r22, r18
    e77c:	73 9f       	mul	r23, r19
    e77e:	b0 0d       	add	r27, r0
    e780:	a1 1d       	adc	r26, r1
    e782:	62 1f       	adc	r22, r18
    e784:	83 9f       	mul	r24, r19
    e786:	a0 0d       	add	r26, r0
    e788:	61 1d       	adc	r22, r1
    e78a:	22 1f       	adc	r18, r18
    e78c:	74 9f       	mul	r23, r20
    e78e:	33 27       	eor	r19, r19
    e790:	a0 0d       	add	r26, r0
    e792:	61 1d       	adc	r22, r1
    e794:	23 1f       	adc	r18, r19
    e796:	84 9f       	mul	r24, r20
    e798:	60 0d       	add	r22, r0
    e79a:	21 1d       	adc	r18, r1
    e79c:	82 2f       	mov	r24, r18
    e79e:	76 2f       	mov	r23, r22
    e7a0:	6a 2f       	mov	r22, r26
    e7a2:	11 24       	eor	r1, r1
    e7a4:	9f 57       	subi	r25, 0x7F	; 127
    e7a6:	50 40       	sbci	r21, 0x00	; 0
    e7a8:	8a f0       	brmi	.+34     	; 0xe7cc <__mulsf3_pse+0x84>
    e7aa:	e1 f0       	breq	.+56     	; 0xe7e4 <__mulsf3_pse+0x9c>
    e7ac:	88 23       	and	r24, r24
    e7ae:	4a f0       	brmi	.+18     	; 0xe7c2 <__mulsf3_pse+0x7a>
    e7b0:	ee 0f       	add	r30, r30
    e7b2:	ff 1f       	adc	r31, r31
    e7b4:	bb 1f       	adc	r27, r27
    e7b6:	66 1f       	adc	r22, r22
    e7b8:	77 1f       	adc	r23, r23
    e7ba:	88 1f       	adc	r24, r24
    e7bc:	91 50       	subi	r25, 0x01	; 1
    e7be:	50 40       	sbci	r21, 0x00	; 0
    e7c0:	a9 f7       	brne	.-22     	; 0xe7ac <__mulsf3_pse+0x64>
    e7c2:	9e 3f       	cpi	r25, 0xFE	; 254
    e7c4:	51 05       	cpc	r21, r1
    e7c6:	70 f0       	brcs	.+28     	; 0xe7e4 <__mulsf3_pse+0x9c>
    e7c8:	60 cf       	rjmp	.-320    	; 0xe68a <__fp_inf>
    e7ca:	aa cf       	rjmp	.-172    	; 0xe720 <__fp_szero>
    e7cc:	5f 3f       	cpi	r21, 0xFF	; 255
    e7ce:	ec f3       	brlt	.-6      	; 0xe7ca <__mulsf3_pse+0x82>
    e7d0:	98 3e       	cpi	r25, 0xE8	; 232
    e7d2:	dc f3       	brlt	.-10     	; 0xe7ca <__mulsf3_pse+0x82>
    e7d4:	86 95       	lsr	r24
    e7d6:	77 95       	ror	r23
    e7d8:	67 95       	ror	r22
    e7da:	b7 95       	ror	r27
    e7dc:	f7 95       	ror	r31
    e7de:	e7 95       	ror	r30
    e7e0:	9f 5f       	subi	r25, 0xFF	; 255
    e7e2:	c1 f7       	brne	.-16     	; 0xe7d4 <__mulsf3_pse+0x8c>
    e7e4:	fe 2b       	or	r31, r30
    e7e6:	88 0f       	add	r24, r24
    e7e8:	91 1d       	adc	r25, r1
    e7ea:	96 95       	lsr	r25
    e7ec:	87 95       	ror	r24
    e7ee:	97 f9       	bld	r25, 7
    e7f0:	08 95       	ret

0000e7f2 <strnlen_P>:
    e7f2:	fc 01       	movw	r30, r24
    e7f4:	05 90       	lpm	r0, Z+
    e7f6:	61 50       	subi	r22, 0x01	; 1
    e7f8:	70 40       	sbci	r23, 0x00	; 0
    e7fa:	01 10       	cpse	r0, r1
    e7fc:	d8 f7       	brcc	.-10     	; 0xe7f4 <strnlen_P+0x2>
    e7fe:	80 95       	com	r24
    e800:	90 95       	com	r25
    e802:	8e 0f       	add	r24, r30
    e804:	9f 1f       	adc	r25, r31
    e806:	08 95       	ret

0000e808 <_exit>:
    e808:	f8 94       	cli

0000e80a <__stop_program>:
    e80a:	ff cf       	rjmp	.-2      	; 0xe80a <__stop_program>
