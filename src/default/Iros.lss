
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000ea5c  0000eb5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000eb80  2**5
                  CONTENTS, READONLY
  2 .text         0000ea5c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b4f  00800510  00800510  0000eb6c  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000ef80  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000f688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000f979  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000007c0  00000000  00000000  0000f990  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000b039  00000000  00000000  00010150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001684  00000000  00000000  0001b189  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000029d8  00000000  00000000  0001c80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000018a4  00000000  00000000  0001f1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000214a  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000098c2  00000000  00000000  00022bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000988  00000000  00000000  0002c498  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 3a 	jmp	0x7412	; 0x7412 <__ctors_end>
       4:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
       8:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
       c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      10:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      14:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      18:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      1c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      20:	0c 94 ed 3f 	jmp	0x7fda	; 0x7fda <__vector_8>
      24:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      28:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      2c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      30:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      34:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__vector_13>
      38:	0c 94 fb 3d 	jmp	0x7bf6	; 0x7bf6 <__vector_14>
      3c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      40:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      44:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      48:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      4c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      50:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      54:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      58:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      5c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      60:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      64:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      68:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      6c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__bad_interrupt>
      70:	08 63       	ori	r16, 0x38	; 56
      72:	14 63       	ori	r17, 0x34	; 52
      74:	20 63       	ori	r18, 0x30	; 48
      76:	0c 63       	ori	r16, 0x3C	; 60
      78:	10 63       	ori	r17, 0x30	; 48
      7a:	18 63       	ori	r17, 0x38	; 56
      7c:	0c 63       	ori	r16, 0x3C	; 60
      7e:	0c 63       	ori	r16, 0x3C	; 60
      80:	1c 63       	ori	r17, 0x3C	; 60
      82:	61 66       	ori	r22, 0x61	; 97
      84:	6d 66       	ori	r22, 0x6D	; 109
      86:	64 66       	ori	r22, 0x64	; 100
      88:	6d 66       	ori	r22, 0x6D	; 109
      8a:	67 66       	ori	r22, 0x67	; 103
      8c:	6d 66       	ori	r22, 0x6D	; 109
      8e:	6a 66       	ori	r22, 0x6A	; 106
      90:	6d 66       	ori	r22, 0x6D	; 109
      92:	70 66       	ori	r23, 0x60	; 96
      94:	73 66       	ori	r23, 0x63	; 99

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	27 ff       	sbrs	r18, 7
      9c:	24 ff       	sbrs	r18, 4
      9e:	2a 90       	ld	r2, -Y
      a0:	2b 1c       	adc	r2, r11
      a2:	21 0c       	add	r2, r1
      a4:	22 fb       	bst	r18, 2
      a6:	85 00       	.word	0x0085	; ????
      a8:	84 00       	.word	0x0084	; ????
      aa:	89 03       	fmulsu	r16, r17
      ac:	88 8d       	ldd	r24, Y+24	; 0x18
      ae:	81 09       	sbc	r24, r1
      b0:	6f 02       	muls	r22, r31
      b2:	44 42       	sbci	r20, 0x24	; 36
      b4:	47 00       	.word	0x0047	; ????
      b6:	45 01       	movw	r8, r10
      b8:	b0 83       	st	Z, r27
      ba:	b3 00       	.word	0x00b3	; ????
      bc:	b1 01       	movw	r22, r2
      be:	25 11       	cpse	r18, r5
      c0:	8a 1c       	adc	r8, r10
      c2:	8b 03       	fmulsu	r16, r19

000000c4 <eeprom_format_table>:
      c4:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e4 <patchCommands>:
      e4:	c7 40 ca 40 26 41 2a 41 31 41 d2 40 d7 40 dc 40     .@.@&A*A1A.@.@.@
      f4:	39 41 df 40 e2 40 e5 40 20 41 23 41 49 41           9A.@.@.@ A#AIA

00000102 <fader>:
     102:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000010e <strChallenge>:
     10e:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     11e:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     12e:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     13e:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     14e:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     15e:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     16e:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     17e:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     18e:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     19e:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     1ae:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

000001be <strCongrats>:
     1be:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     1ce:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     1de:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     1ee:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     1fe:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     20e:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     21e:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     22e:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     23e:	49 4e 45 52 53 00 00 50 41 54 20 59 4f 55 52 53     INERS..PAT YOURS
     24e:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     25e:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     26e:	4f 4e 45 00 23 00                                   ONE.#.

00000274 <strIntro>:
     274:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     284:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     294:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     2a4:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     2b4:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     2c4:	45 43 41 55 53 45 20 54 48 45 59 20 53 55 43 4b     ECAUSE THEY SUCK
     2d4:	00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20 41     ..DESTROY THEM A
     2e4:	4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f 55     ND.TAKE BACK YOU
     2f4:	52 20 53 57 41 47 00 23 00                          R SWAG.#.

000002fd <default_scores>:
     2fd:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     30d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000031b <strTally>:
     31b:	54 41 4c 4c 59 20 00                                TALLY .

00000322 <strGameOver>:
     322:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000032c <strLevelBonus>:
     32c:	42 4f 4e 55 53 00                                   BONUS.

00000332 <strLevelClear>:
     332:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

0000033e <strPaused>:
     33e:	50 41 55 53 45 00                                   PAUSE.

00000344 <strExitGame>:
     344:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000350 <strMainMenu>:
     350:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

0000035c <strTime>:
     35c:	54 49 4d 45 20 00                                   TIME .

00000362 <strLives>:
     362:	4c 49 56 45 53 20 00                                LIVES .

00000369 <strShield>:
     369:	53 48 49 45 4c 44 20 00                             SHIELD .

00000371 <strScore>:
     371:	53 43 4f 52 45 20 00                                SCORE .

00000378 <strSelectHandle>:
	...

00000379 <strHighScores>:
     379:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000385 <str1Player>:
     385:	53 54 41 52 54 00                                   START.

0000038b <strCopyright>:
     38b:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     39b:	4f 4f 4b 53 00                                      OOKS.

000003a0 <observation_matrix>:
	...

000006b0 <spacesong>:
     6b0:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     6c0:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     6d0:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     6e0:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     6f0:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     700:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     710:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     720:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     730:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     740:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     750:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     760:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     770:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     780:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     790:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     7a0:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     7b0:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     7c0:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     7d0:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     7e0:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     7f0:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     800:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     810:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     820:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     830:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     840:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     850:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     860:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     870:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     880:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     890:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     8a0:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     8b0:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     8c0:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     8d0:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     8e0:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     8f0:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     900:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     910:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     920:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     930:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     940:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     950:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     960:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     970:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     980:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     990:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     9a0:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     9b0:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     9c0:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     9d0:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     9e0:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     9f0:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     a00:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     a10:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     a20:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     a30:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     a40:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     a50:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     a60:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     a70:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     a80:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     a90:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     aa0:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     ab0:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     ac0:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     ad0:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     ae0:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     af0:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     b00:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     b10:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     b20:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     b30:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     b40:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     b50:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     b60:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     b70:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     b80:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     b90:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     ba0:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     bb0:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     bc0:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     bd0:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     be0:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     bf0:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     c00:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     c10:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     c20:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     c30:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     c40:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     c50:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     c60:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     c70:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     c80:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     c90:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     ca0:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     cb0:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     cc0:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     cd0:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     ce0:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
     cf0:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
     d00:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
     d10:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
     d20:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
     d30:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
     d40:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00000d50 <planetsong>:
     d50:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
     d60:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
     d70:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
     d80:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     d90:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
     da0:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
     db0:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     dc0:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
     dd0:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
     de0:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
     df0:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
     e00:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     e10:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
     e20:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
     e30:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
     e40:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
     e50:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
     e60:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     e70:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     e80:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     e90:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     ea0:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     eb0:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
     ec0:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
     ed0:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
     ee0:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
     ef0:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
     f00:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
     f10:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
     f20:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
     f30:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
     f40:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
     f50:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
     f60:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     f70:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
     f80:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
     f90:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     fa0:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
     fb0:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
     fc0:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
     fd0:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
     fe0:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
     ff0:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1000:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1010:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1020:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1030:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1040:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1050:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1060:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1070:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1080:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1090:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    10a0:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    10b0:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    10c0:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    10d0:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    10e0:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    10f0:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1100:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1110:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1120:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1130:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1140:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1150:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1160:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1170:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1180:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1190:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    11a0:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    11b0:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    11c0:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    11d0:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    11e0:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    11f0:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1200:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1210:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1220:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1230:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1240:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1250:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1260:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1270:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1280:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1290:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    12a0:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    12b0:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    12c0:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    12d0:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    12e0:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    12f0:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1300:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1310:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1320:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1330:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1340:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1350:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1360:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1370:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1380:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1390:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    13a0:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    13b0:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    13c0:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    13d0:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    13e0:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    13f0:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1400:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1410:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1420:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1430:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1440:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1450:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1460:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1470:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1480:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1490:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    14a0:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    14b0:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    14c0:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    14d0:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    14e0:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    14f0:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1500:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1510:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1520:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1530:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1540:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1550:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1560:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1570:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1580:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1590:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    15a0:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    15b0:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    15c0:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    15d0:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    15e0:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    15f0:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1600:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1610:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1620:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1630:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1640:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1650:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1660:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1670:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1680:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1690:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    16a0:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    16b0:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    16c0:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    16d0:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    16e0:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    16f0:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1700:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1710:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1720:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1730:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1740:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1750:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1760:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1770:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1780:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1790:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    17a0:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    17b0:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    17c0:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    17d0:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    17e0:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    17f0:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1800:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1810:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1820:	2f 00                                               /.

00001822 <my_patches>:
    1822:	00 00 00 99 19 00 00 00 00 00 00 00 99 19 00 00     ................
    1832:	00 00 00 00 00 88 19 00 00 00 00 00 00 00 32 19     ..............2.
    1842:	00 00 00 00 00 00 00 88 19 00 00 00 00 00 00 00     ................
    1852:	61 18 00 00 00 00 00 00 00 61 18 00 00 00 00        a........a.....

00001861 <explode>:
    1861:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1871:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1881:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1891:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    18a1:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    18b1:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    18c1:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    18d1:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    18e1:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    18f1:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1901:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1911:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1921:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1931:	ff                                                  .

00001932 <pshoot>:
    1932:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1942:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1952:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1962:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1972:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1982:	00 01 05 00 00 ff                                   ......

00001988 <navigate>:
    1988:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1998:	ff                                                  .

00001999 <instrument>:
    1999:	00 02 04 00 00 dd 00 ff                             ........

000019a1 <sprites_data>:
    19a1:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    19b1:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    19c1:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    19d1:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    19e1:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    19f1:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1a01:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1a11:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1a21:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1a31:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1a41:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1a51:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1a61:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1a71:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1a81:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1a91:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1aa1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ab1:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1ac1:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1ad1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ae1:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1af1:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1b01:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1b11:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1b21:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    1b31:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    1b41:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    1b51:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b61:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    1b71:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    1b81:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    1b91:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ba1:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    1bb1:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    1bc1:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    1bd1:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    1be1:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    1bf1:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    1c01:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    1c11:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c21:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    1c31:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    1c41:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    1c51:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    1c61:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c71:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c81:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c91:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ca1:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    1cb1:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1cc1:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    1cd1:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1ce1:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1cf1:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1d01:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1d11:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1d21:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1d31:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1d41:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1d51:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    1d61:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1d71:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1d81:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1d91:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    1da1:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1db1:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1dc1:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1dd1:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1de1:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1df1:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1e01:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    1e11:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1e21:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1e31:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1e41:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1e51:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    1e61:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e71:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    1e81:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    1e91:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ea1:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    1eb1:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    1ec1:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    1ed1:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    1ee1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ef1:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    1f01:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    1f11:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f21:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f31:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    1f41:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    1f51:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f61:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f71:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    1f81:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    1f91:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fa1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fb1:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    1fc1:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    1fd1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fe1:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    1ff1:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2001:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2011:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2021:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2031:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2041:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2051:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2061:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2071:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2081:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    2091:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    20a1:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    20b1:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    20c1:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    20d1:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    20e1:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    20f1:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2101:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2111:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2121:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2131:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    2141:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    2151:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2161:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2171:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    2181:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2191:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    21a1:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    21b1:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    21c1:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    21d1:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    21e1:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    21f1:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2201:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2211:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2221:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2231:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    2241:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    2251:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2261:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    2271:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    2281:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2291:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    22a1:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    22b1:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    22c1:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    22d1:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    22e1:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    22f1:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2301:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2311:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2321:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    2331:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    2341:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2351:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    2361:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    2371:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    2381:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2391:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23a1:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    23b1:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    23c1:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    23d1:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23e1:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    23f1:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2401:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2411:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2421:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2431:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    2441:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    2451:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2461:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    2471:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2481:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2491:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    24a1:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    24b1:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    24c1:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    24d1:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24e1:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    24f1:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2501:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2511:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2521:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2531:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2541:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2551:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2561:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2571:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2581:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2591:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    25a1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25b1:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    25c1:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25d1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25e1:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    25f1:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2601:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2611:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2621:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2631:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2641:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2651:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2661:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2671:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2681:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2691:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26a1:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    26b1:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    26c1:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    26d1:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    26e1:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    26f1:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2701:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2711:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2721:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2731:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    2741:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    2751:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2761:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2771:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2781:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2791:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    27a1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27b1:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    27c1:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    27d1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27e1:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    27f1:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2801:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2811:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2821:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    2831:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    2841:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    2851:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    2861:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2871:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2881:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2891:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28a1:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    28b1:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    28c1:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    28d1:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    28e1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28f1:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2901:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2911:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2921:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2931:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2941:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2951:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2961:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2971:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2981:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2991:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    29a1:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    29b1:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    29c1:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    29d1:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    29e1:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    29f1:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2a01:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2a11:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2a21:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2a31:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2a41:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2a51:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2a61:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2a71:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a81:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a91:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aa1:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2ab1:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2ac1:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2ad1:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2ae1:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2af1:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2b01:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2b11:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b21:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2b31:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2b41:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2b51:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2b61:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b71:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b81:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2b91:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2ba1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2bb1:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2bc1:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2bd1:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2be1:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2bf1:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2c01:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2c11:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2c21:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2c31:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2c41:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2c51:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2c61:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2c71:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2c81:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2c91:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2ca1:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    2cb1:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    2cc1:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    2cd1:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    2ce1:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    2cf1:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    2d01:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    2d11:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    2d21:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2d31:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    2d41:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2d51:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    2d61:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2d71:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    2d81:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    2d91:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    2da1:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    2db1:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2dc1:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    2dd1:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    2de1:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2df1:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2e01:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2e11:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    2e21:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2e31:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2e41:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2e51:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    2e61:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    2e71:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    2e81:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2e91:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    2ea1:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2eb1:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2ec1:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2ed1:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2ee1:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2ef1:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2f01:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    2f11:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2f21:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2f31:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2f41:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2f51:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    2f61:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    2f71:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    2f81:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    2f91:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    2fa1:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    2fb1:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2fc1:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2fd1:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2fe1:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2ff1:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    3001:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    3011:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3021:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3031:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3041:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    3051:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3061:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    3071:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    3081:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    3091:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30a1:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    30b1:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    30c1:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    30d1:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    30e1:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    30f1:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    3101:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    3111:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3121:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    3131:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3141:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3151:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3161:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    3171:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    3181:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    3191:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    31a1:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    31b1:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    31c1:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    31d1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    31e1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    31f1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3201:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    3211:	fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3221:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    3231:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    3241:	fe fe 02 02 00 00 00 00 02 02 02 02 02 00 00 05     ................
    3251:	00 00 00 00 05 02 00 00 00 00 00 00 05 05 00 00     ................
    3261:	00 00 00 00 fe fe fe fe 00 07 07 27 07 fe fe fe     ...........'....
    3271:	00 00 07 77 27 fe fe fe 00 00 00 27 07 fe fe fe     ...w'......'....
    3281:	02 02 00 00 07 fe fe fe 05 05 05 05 05 00 02 fe     ................
    3291:	05 05 05 05 05 05 00 05 00 05 05 05 05 00 00 00     ................

000032a1 <map_hazard_desert>:
    32a1:	01 01 28                                            ..(

000032a4 <map_hazard_city>:
    32a4:	01 01 29                                            ..)

000032a7 <map_hazard_jungle>:
    32a7:	01 01 27                                            ..'

000032aa <map_hazard_fire>:
    32aa:	01 01 26                                            ..&

000032ad <map_hazard_ice>:
    32ad:	01 01 25                                            ..%

000032b0 <map_enemy_boss_shot>:
    32b0:	01 01 39                                            ..9

000032b3 <map_enemy_boss_eye>:
    32b3:	01 01 37                                            ..7

000032b6 <map_enemy_boss_turret>:
    32b6:	01 01 36                                            ..6

000032b9 <map_enemy_drone>:
    32b9:	01 01 35                                            ..5

000032bc <map_enemy_tank>:
    32bc:	01 01 24                                            ..$

000032bf <map_enemy_ball>:
    32bf:	01 01 14                                            ...

000032c2 <map_enemy_spider_1>:
    32c2:	01 01 34                                            ..4

000032c5 <map_enemy_spider_0>:
    32c5:	01 01 23                                            ..#

000032c8 <map_enemy_xwing>:
    32c8:	01 01 3a                                            ..:

000032cb <map_enemy_shark>:
    32cb:	01 01 05                                            ...

000032ce <map_enemy_shot>:
    32ce:	01 01 13                                            ...

000032d1 <map_ahero_jump>:
    32d1:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

000032d9 <map_ahero_prone>:
    32d9:	03 01 61 62 63                                      ..abc

000032de <map_ahero_step_3>:
    32de:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

000032e6 <map_ahero_step_2>:
    32e6:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

000032ee <map_ahero_step_1>:
    32ee:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

000032f6 <map_ahero_step_0>:
    32f6:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

000032fe <map_ahero_idle>:
    32fe:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

00003306 <map_hero_rplasma_shot>:
    3306:	01 01 38                                            ..8

00003309 <map_hero_space_bomb>:
    3309:	01 01 18                                            ...

0000330c <map_hero_space_shot>:
    330c:	01 01 17                                            ...

0000330f <map_hero_ice_shot>:
    330f:	01 01 16                                            ...

00003312 <map_hero_ball_shot>:
    3312:	01 01 15                                            ...

00003315 <map_hero_gplasma_shot>:
    3315:	01 01 04                                            ...

00003318 <map_hero_ship_large_1>:
    3318:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

00003322 <map_hero_ship_large_0>:
    3322:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

0000332c <map_hero_ship_1>:
    332c:	03 01 3b 2b 2c                                      ..;+,

00003331 <map_hero_ship_0>:
    3331:	03 01 2a 2b 2c                                      ..*+,

00003336 <map_hero_prone>:
    3336:	03 01 47 48 49                                      ..GHI

0000333b <map_hero_jump>:
    333b:	02 03 02 03 0f 12 21 22                             ......!"

00003343 <map_hero_step_3>:
    3343:	02 03 02 03 0f 44 45 46                             .....DEF

0000334b <map_hero_step_2>:
    334b:	02 03 00 01 0c 11 1f 20                             ....... 

00003353 <map_hero_step_1>:
    3353:	02 03 02 03 0f 10 1d 1e                             ........

0000335b <map_hero_step_0>:
    335b:	02 03 00 01 0c 0e 1b 1c                             ........

00003363 <map_hero_idle>:
    3363:	02 03 00 01 0c 0d 19 1a                             ........

0000336b <map_emerald_4>:
    336b:	01 01 0a                                            ...

0000336e <map_emerald_3>:
    336e:	01 01 09                                            ...

00003371 <map_emerald_2>:
    3371:	01 01 08                                            ...

00003374 <map_emerald_1>:
    3374:	01 01 07                                            ...

00003377 <map_emerald_0>:
    3377:	01 01 06                                            ...

0000337a <map_explosion_2>:
    337a:	01 01 2f                                            ../

0000337d <map_explosion_1>:
    337d:	01 01 2e                                            ...

00003380 <map_explosion_0>:
    3380:	01 01 2d                                            ..-

00003383 <map_particle>:
    3383:	01 01 30                                            ..0

00003386 <map_up_arrow>:
    3386:	01 01 33                                            ..3

00003389 <map_down_arrow>:
    3389:	01 01 32                                            ..2

0000338c <map_right_arrow>:
    338c:	01 01 31                                            ..1

0000338f <map_none>:
    338f:	01 01 14                                            ...

00003392 <tiles_data>:
	...
    33d2:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    33e2:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    33f2:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3402:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3412:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3422:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3432:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    3442:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3452:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3462:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3472:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3482:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3492:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    34a2:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    34b2:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    34c2:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    34d2:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    34e2:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    34f2:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3502:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3512:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3522:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3532:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3542:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3552:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    3562:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3572:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3582:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3592:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    35a2:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    35b2:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    35c2:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    35d2:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    35e2:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    35f2:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3602:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3612:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3622:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3632:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3642:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    3652:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3662:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3672:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3682:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3692:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    36a2:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    36b2:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    36c2:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    36d2:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    36e2:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    36f2:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3702:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3712:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3722:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3732:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3742:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3752:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3762:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3772:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3782:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3792:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    37a2:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    37b2:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    37c2:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    37d2:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    37e2:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    37f2:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3802:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3812:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3822:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3832:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3842:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3852:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3862:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3872:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3882:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3892:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    38a2:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    38b2:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    38c2:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    38d2:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    38e2:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    38f2:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3902:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3912:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3922:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3932:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3942:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3952:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3962:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3972:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3982:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3992:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    39a2:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    39b2:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    39c2:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    39d2:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    39e2:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    39f2:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3a02:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3a12:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a22:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    3a32:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    3a42:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a52:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    3a62:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    3a72:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3a82:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3a92:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3aa2:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3ab2:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3ac2:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3ad2:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ae2:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3b12:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b22:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3b32:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3b42:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3b52:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b62:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    3b72:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    3b82:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3b92:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ba2:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3bb2:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3bc2:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3bea:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3bfa:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c2a:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3c3a:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c52:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3c62:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3c72:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3c82:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3c92:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ca2:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3cb2:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3cc2:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3cd2:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3ce2:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    3cf2:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    3d02:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    3d12:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    3d22:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    3d32:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    3d42:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    3d52:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    3d62:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    3d72:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    3d82:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    3d92:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    3da2:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    3db2:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    3dc2:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    3dd2:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3de2:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3df2:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e02:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3e1e:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3e2e:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3e3e:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3e4e:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3e5e:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e6e:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e7e:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e8e:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3e9e:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3eae:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3ebe:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3ece:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3ede:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3eee:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3efe:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3f0e:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f1e:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f2e:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f3e:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f4e:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3f5e:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3f6e:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3f7e:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    3f8e:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3f9e:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3fae:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    3fbe:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3fce:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ffa:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    400a:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    401a:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    402a:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    403a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    404a:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    405a:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    406a:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    407a:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    408a:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    409a:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    40aa:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    40ba:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    40ca:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    40da:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    40ea:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    40fa:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    410a:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    411a:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    412a:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    413a:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    414a:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    415a:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    416a:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    417a:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    418a:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    419a:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    41aa:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    41ba:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    41ca:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    41da:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    41ea:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    41fa:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4212:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    4222:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    4232:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    4242:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    4252:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4262:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4272:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    429a:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    42aa:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    42ba:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    42da:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    42ea:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    42fa:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    431a:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    432a:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    433a:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    435a:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    436a:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    437a:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    439e:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    43ae:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    43be:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    43da:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    43ea:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    43fa:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    441a:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    442a:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    443a:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    445a:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    446a:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    447a:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    449a:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    44aa:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    44ba:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    44da:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    44ea:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    44fa:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    451a:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    452a:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    453a:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    455a:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    456a:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    457a:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    459a:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    45aa:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    45ba:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    45da:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    45ea:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    45fa:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    461a:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    462a:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    463a:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    465a:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    466a:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    467a:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    469a:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    46aa:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    46ba:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    46da:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    46ea:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    46fa:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    471a:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    472a:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    473a:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    475e:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    476e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    477e:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    479a:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    47aa:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    47ba:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    47da:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    47ea:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    47fa:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    481a:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    482a:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    483a:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    485a:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    486a:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    487a:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    489a:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    48aa:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48ba:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    48da:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    48ea:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    48fa:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    491a:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    492a:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    493a:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    495a:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    496a:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    497a:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    499a:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    49aa:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    49ba:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    49da:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    49ea:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    49fa:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4a1a:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a2a:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4a3a:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4a5a:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4a6a:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4a7a:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4a9a:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4aaa:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4aba:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4ada:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4aea:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4afa:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4b1a:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4b2a:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4b3a:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4b5a:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    4b6a:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    4b7a:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4b92:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ba2:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4bb2:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4bc2:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4bd2:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4be2:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4bf2:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4c02:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4c12:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    4c22:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4c32:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4c42:	af af af af af af af af af af af af af af af af     ................
    4c52:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4c62:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4c72:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4c82:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4c92:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4ca2:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4cb2:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4cc2:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4cd2:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4ce2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4cf2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4d02:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4d12:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4d22:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4d32:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4d42:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4d52:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    4d62:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    4d72:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4d82:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4d92:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4da2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4db2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4dc2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4dd2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4de2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4df2:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4e02:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4e12:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4e22:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4e32:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4e42:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4e52:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4e62:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    4e72:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4e82:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4e92:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4ea2:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4eb2:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4ec2:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4ed2:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    4ee2:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4ef2:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4f02:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4f12:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4f22:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4f32:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4f42:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4f52:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4f62:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4f72:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4f82:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    4f92:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    4fa2:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    4fb2:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    4fc2:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4fd2:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    4fe2:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4ff2:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5002:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    5012:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    5022:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5032:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5042:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5052:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    5062:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    5072:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5082:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5092:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    50a2:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    50b2:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    50c2:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    50d2:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    50e2:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    50f2:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5102:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5112:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    5122:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    5132:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    5142:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    5152:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    5162:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    5172:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    5182:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5192:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    51a2:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    51b2:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    51c2:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    51d2:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    51e2:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    51f2:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    5202:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    5212:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    5222:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    5232:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    5242:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5252:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5262:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5272:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5282:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5292:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    52a2:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    52b2:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    52c2:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    52d2:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    52e2:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    52f2:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5302:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5312:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5322:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    5332:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    5342:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5352:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5362:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5372:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5382:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5392:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    53a2:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    53b2:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    53c2:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    53d2:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    53e2:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    53f2:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    5402:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    5412:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5422:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    5432:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    5442:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5452:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5462:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5472:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5482:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5492:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    54a2:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    54b2:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    54c2:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    54d2:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    54e2:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    54f2:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5502:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5512:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    5522:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    5532:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    5542:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5552:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5562:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5572:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5582:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5592:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    55a2:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    55b2:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    55c2:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    55d2:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    55e2:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    55f2:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    5602:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5612:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5622:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    5632:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5642:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5652:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5662:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5672:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5682:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5692:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    56a2:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    56b2:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    56c2:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    56d2:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    56e2:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    56f2:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5702:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5712:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5722:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5732:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5742:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5752:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    576a:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    577a:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    578a:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    579a:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    57aa:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    57ba:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    57ca:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    57da:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    57ea:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    57fa:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    580a:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    581a:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    582a:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    583a:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    584a:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    585a:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    586a:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    587a:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    588a:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    589a:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    58aa:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    58ba:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    58ca:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    58da:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    58ea:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    58fa:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    590a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    591a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    592a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    593a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    594a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    595a:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    596a:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    597a:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    598a:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    599a:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    59aa:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    59ba:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    59ca:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    59da:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    59ea:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    59fa:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5a0a:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5a1a:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5a2a:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5a3a:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5a4a:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    5a5a:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5a6a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5a7a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5a8a:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5a9a:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5aaa:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5aba:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5aca:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5ada:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5aea:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5afa:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5b0a:	5c 5c 5c 5c 5c 5c 5c 5c 00 00 00 00 00 00 00 00     \\\\\\\\........
    5b1a:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5b2a:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5b3a:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5b4a:	00 00 00 00 00 00 00 a4                             ........

00005b52 <map_font>:
    5b52:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    5b62:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    5b72:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

00005b79 <map_atmosphere>:
    5b79:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5b89:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5b99:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5ba9:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005bb3 <map_dialog>:
    5bb3:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5bc3:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5bd3:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5be3:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5bf3:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5c03:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5c13:	31 32                                               12

00005c15 <map_canvas>:
    5c15:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    5c25:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    5c35:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5c51:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5c61:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    5c71:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5c8d:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5c9d:	32                                                  2

00005c9e <map_splash>:
    5c9e:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    5cae:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    5cbe:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    5cce:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    5cde:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

00005ceb <map_tile_none>:
    5ceb:	01 01 00                                            ...

00005cee <map_level_mega_tiles>:
    5cee:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5cfe:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    5d0e:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5d1e:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    5d2e:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    5d3e:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    5d4e:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    5d5e:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    5d6e:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5d7e:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    5d8e:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5d9e:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5dae:	02 02 02 63 63 04 11 11 63 63 63 63 63 63 63 63     ...cc...cccccccc
    5dbe:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5dce:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5dde:	02 02 63 63 63 11 04 63 63 63 63 63 63 63 63 63     ..ccc..ccccccccc
    5dee:	63 63 63 63 63 63 63 63 63 63 63 64 63 63 63 63     cccccccccccdcccc
    5dfe:	65 66 67 63 63 63 63 63 63 63 63 63 63 63 02 02     efgccccccccccc..
    5e0e:	02 02 63 04 04 04 04 02 04 04 04 04 63 63 63 63     ..c.........cccc
    5e1e:	63 63 63 02 63 63 02 02 04 02 02 04 04 04 04 04     ccc.cc..........
    5e2e:	04 04 04 04 04 63 63 63 63 63 63 63 63 63 63 02     .....cccccccccc.
    5e3e:	02 02 02 02 04 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    5e4e:	63 63 63 63 63 02 63 63 02 02 04 02 63 04 04 04     ccccc.cc....c...
    5e5e:	04 02 04 04 04 04 04 63 63 63 63 63 63 63 63 63     .......ccccccccc
    5e6e:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 02     ccccccccccccccc.
    5e7e:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5e8e:	63 63 63 63 02 63 63 63 02 63 63 63 63 63 63 63     cccc.ccc.ccccccc
    5e9e:	63 63 02 63 63 63 63 04 63 63 63 63 63 02 63 63     cc.cccc.ccccc.cc
    5eae:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5ebe:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5ece:	02 02 02 02 63 11 11 11 04 63 63 63 63 63 63 63     ....c....ccccccc
    5ede:	63 63 63 63 63 63 63 63 63 02 02 02 02 02 04 11     ccccccccc.......
    5eee:	11 11 04 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5efe:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5f0e:	63 02 02 02 02 02 67 66 68 63 63 63 63 68 67 66     c.....gfhcccchgf
    5f1e:	66 67 68 63 63 63 63 69 63 63 02 02 02 02 02 63     fghccccicc.....c
    5f2e:	63 63 63 63 63 63 63 02 02 63 63 63 04 04 02 02     ccccccc..ccc....
    5f3e:	02 04 04 04 04 04 04 04 63 63 63 63 63 02 02 02     ........ccccc...
    5f4e:	63 63 04 04 04 02 63 04 04 04 04 02 04 04 04 04     cc....c.........
    5f5e:	04 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5f6e:	63 63 63 63 02 02 02 02 02 04 63 63 63 63 63 63     cccc......cccccc
    5f7e:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 18 18     cccccccccccccc..
    5f8e:	18 18 18 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5f9e:	63 63 02 63 63 63 02 04 02 02 02 04 63 63 63 63     cc.ccc......cccc
    5fae:	63 63 63 63 63 63 63 63 63 63 63 02 63 63 63 63     ccccccccccc.cccc
    5fbe:	04 02 02 02 02 63 63 63 63 02 63 63 63 02 04 63     .....cccc.ccc..c
    5fce:	63 02 04 04 63 02 04 04 04 02 04 04 04 04 02 02     c...c...........
    5fde:	02 02 02 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5fee:	04 04 04 04 04 04 04 02 02 02 02 04 04 04 04 04     ................
    5ffe:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    600e:	18 18 18 18 18 04 04 04 04 04 04 04 04 04 04 04     ................
    601e:	04 04 04 04 04 04 04 04 04 04 02 02 02 04 04 04     ................
    602e:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    603e:	04 04 04 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    604e:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    605e:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    606e:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    607e:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    608e:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    609e:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    60ae:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    60be:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    60ce:	6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lll.llllllllllll
    60de:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05     lllllllllllllll.
    60ee:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    60fe:	06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c     .....lllllllll.l
    610e:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    611e:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    612e:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    613e:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    614e:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    615e:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    616e:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    617e:	6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    618e:	6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 13 13 13     llllll..lll.....
    619e:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    61ae:	6c 6c 6c 6c 13 13 13 13 13 6c 6c 6c 6c 6c 6c 6c     llll.....lllllll
    61be:	6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 06     llllllll..lll...
    61ce:	06 06 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     .......lllllllll
    61de:	6c 6c 6c 6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 06     llllll.....llll.
    61ee:	6c 6c 6c 06 05 6c 6c 06 05 05 06 06 05 05 05 05     lll..ll.........
    61fe:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    620e:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    621e:	05 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    622e:	05 05 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c     ......lllll.llll
    623e:	05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 13 13 6c     ..lll...ll.....l
    624e:	6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 6c 06     lll.lll..ll...l.
    625e:	05 05 05 06 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c     ........lllll.ll
    626e:	6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 05     ll..lll...ll....
    627e:	05 6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05     .llll.lll..ll...
    628e:	6c 06 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c 06     l.........lllll.
    629e:	6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05     llll..lll...ll..
    62ae:	05 06 06 72 73 74 74 73 74 73 74 74 73 74 73 74     ...rsttststtstst
    62be:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    62ce:	73 74 73 74 74 73 74 73 74 74 73 74 73 74 74 73     ststtststtststts
    62de:	74 73 74 74 73 74 73 74 74 75 74 73 74 74 73 74     tsttststtutsttst
    62ee:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 76 73     sttststtststtsvs
    62fe:	74 74 73 78 78 78 78 78 78 78 78 78 78 78 78 78     ttsxxxxxxxxxxxxx
    630e:	78 78 78 78 78 78 78 74 73 74 74 73 79 7a 79 79     xxxxxxxtsttsyzyy
    631e:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c     z{|{{|yzyyz{|{{|
    632e:	74 73 74 74 77 78 78 78 78 78 78 78 78 78 78 78     tsttwxxxxxxxxxxx
    633e:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    634e:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    635e:	78 78 79 7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79     xxyzyyz{|{{|yzyy
    636e:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 0d 0e 0e 0d 0e     z{|{{|yzyyz.....
    637e:	78 78 12 78 78 78 78 78 78 78 78 78 78 78 78 78     xx.xxxxxxxxxxxxx
    638e:	78 78 78 78 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     xxxx{|{{|yzyyz{|
    639e:	7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78     {{|yzyyz{|{{|xxx
    63ae:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    63be:	78 07 07 07 07 07 79 7a 79 79 7a 7b 7c 7b 7b 7c     x.....yzyyz{|{{|
    63ce:	79 7a 79 79 7a 7b 7c 7b 7b 7c 07 07 07 07 07 0d     yzyyz{|{{|......
    63de:	0e 0e 0d 0e 78 78 78 78 78 78 78 78 78 78 78 78     ....xxxxxxxxxxxx
    63ee:	78 78 78 07 07 07 07 07 78 78 78 78 78 78 07 07     xxx.....xxxxxx..
    63fe:	07 07 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    640e:	05 78 78 78 78 78 07 07 07 07 78 05 05 05 05 78     .xxxxx....x....x
    641e:	05 05 05 05 07 05 05 05 05 05 78 78 78 78 78 78     ..........xxxxxx
    642e:	78 78 78 78 78 78 78 78 78 07 78 78 78 78 05 14     xxxxxxxxx.xxxx..
    643e:	14 14 14 78 78 78 78 78 78 78 78 78 78 78 78 78     ...xxxxxxxxxxxxx
    644e:	78 78 78 78 78 78 07 14 14 14 14 05 0d 0e 0e 0d     xxxxxx..........
    645e:	0e 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     .xxxxxxxxxx.xxxx
    646e:	05 14 14 14 14 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d     .....}}}}}}}}}}}
    647e:	0f 81 7d 0f 85 85 85 85 85 85 85 85 85 85 7d 7d     ..}...........}}
    648e:	7d 7d 7d 7d 7d 7d 7e 7f 81 7d 0f 82 83 85 85 85     }}}}}}~..}......
    649e:	86 87 85 85 85 89 8a 7d 7d 7d 7d 7d 80 7d 7d 7d     .......}}}}}.}}}
    64ae:	7d 84 81 7d 0f 81 88 85 85 85 85 84 85 85 85 85     }..}............
    64be:	7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 81 7d 0f 81 7d 85     }}}}}}}}}}.}..}.
    64ce:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    64de:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    64ee:	85 85 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    64fe:	87 85 85 85 89 8a 85 85 85 86 87 88 85 85 85 85     ................
    650e:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 88     ................
    651e:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    652e:	85 85 8b 85 85 85 8b 60 85 85 8b 60 60 85 85 85     .......`...``...
    653e:	89 8a 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    654e:	87 85 85 85 89 8a 84 85 85 85 85 88 85 85 85 85     ................
    655e:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 85     ................
    656e:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    657e:	8c 8c 8c 85 85 8c 8c 8c 85 85 85 86 87 85 8d 85     ................
    658e:	89 8a 8d 8e 85 85 8f 90 90 90 90 90 90 90 90 90     ................
    659e:	90 88 85 85 85 85 84 85 85 85 85 85 85 85 85 85     ................
    65ae:	85 85 85 85 85 85 85 85 85 85 85 8c 8c 8c 8c 85     ................
    65be:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c     ................
    65ce:	8c 8c 8c 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    65de:	85 85 85 85 90 90 90 85 85 90 90 90 85 09 09 09     ................
    65ee:	09 85 8d 85 89 8a 8d 8e 85 85 8f 90 90 90 90 90     ................
    65fe:	90 90 90 90 90 09 85 85 85 85 84 85 85 85 85 85     ................
    660e:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    661e:	85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    662e:	8c 8c 85 8c 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c     ................
    663e:	8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09 09     ........```.....
    664e:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    665e:	90 90 90 90 09 09 09 09 09 85 85 85 85 85 85 8c     ................
    666e:	8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09 09     .........``.....
    667e:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    668e:	8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90 90     ..````..........
    669e:	85 85 90 90 90 85 85 90 90 90 85 85 90 90 90 09     ................
    66ae:	09 09 09 09 85 09 09 09 09 85 85 8c 8c 8c 85 85     ................
    66be:	8c 8c 8c 85 85 60 60 60 09 09 09 09 09 09 90 90     .....```........
    66ce:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    66de:	90 09 09 09 09 09 85 09 09 09 09 85 8c 8c 85 85     ................
    66ee:	85 8c 8c 90 85 85 60 60 90 85 09 09 09 09 09 09     ......``........
    66fe:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 60     ...............`
    670e:	60 60 60 09 09 09 09 09 85 85 90 90 90 85 85 90     ```.............
    671e:	90 90 85 85 90 90 90 85 09 90 90 90 09 08 15 15     ................
    672e:	15 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c     ................
    673e:	85 85 09 60 60 15 15 08 09 09 90 90 90 90 90 90     ...``...........
    674e:	90 90 90 90 90 90 90 90 90 90 90 90 09 90 09 09     ................
    675e:	09 08 15 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    676e:	85 85 85 85 85 85 09 15 15 15 15 08 90 90 90 90     ................
    677e:	90 90 90 90 90 09 90 90 90 09 08 90 90 09 08 08     ................
    678e:	09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c 15     ................
    679e:	15 15 15 15 08 08 08 08 08 08 08 08 08 08 85 8c     ................
    67ae:	8c 8c 8c 85 09 09 8c 8c 15 08 08 15 15 08 08 08     ................
    67be:	08 08 08 08 08 08 08 85 85 90 90 90 85 85 09 09     ................
    67ce:	90 15 15 08 08 15 08 08 08 08 08 08 08 08 08 08     ................
    67de:	85 85 8c 8c 8c 85 85 09 09 09 15 15 08 08 08 08     ................
    67ee:	08 08 08 08 08 08 08 08 08 90 90 90 90 90 90 90     ................
    67fe:	90 90 90 09 90 90 90 90 08 09 90 90 90 08 08 09     ................
    680e:	09 09 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    681e:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    682e:	91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 93     ................
    683e:	93 93 93 93 91 91 91 91 91 91 91 91 91 91 91 91     ................
    684e:	91 91 91 92 92 92 92 92 93 93 94 93 93 93 93 93     ................
    685e:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    686e:	93 93 93 93 93 93 93 95 96 97 93 95 96 96 96 97     ................
    687e:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    688e:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    689e:	93 93 93 93 93 94 93 93 93 93 93 93 93 93 93 94     ................
    68ae:	93 93 93 95 96 97 93 95 96 96 96 97 93 93 93 93     ................
    68be:	93 93 98 99 9a 93 95 9b 10 9c 97 93 93 93 93 93     ................
    68ce:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    68de:	93 94 93 93 93 98 99 9a 93 95 9b 10 9c 97 93 93     ................
    68ee:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    68fe:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    690e:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    691e:	93 93 93 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    692e:	93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93 93     ................
    693e:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    694e:	93 93 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 93 93 93 93     ................
    695e:	93 93 93 93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a     ................
    696e:	93 93 93 0a 0a 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a     ................
    697e:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a 0a 0a 0a 0b 0b     ................
    698e:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    699e:	0b 0b 9d 0a 0a 93 93 0b 0b 0b 0a 93 0b 0b 0b 0b     ................
    69ae:	0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 93 93 93 0a 16     ................
    69be:	93 93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b     ................
    69ce:	0a 0a 0a 0a 16 16 16 16 0a 93 93 93 93 93 93 93     ................
    69de:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    69ee:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    69fe:	0a 0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93     ................
    6a0e:	93 93 93 93 93 93 93 93 93 93 17 17 17 17 17 93     ................
    6a1e:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    6a2e:	93 93 93 0b 0b 17 17 17 93 93 93 93 93 93 93 93     ................
    6a3e:	93 93 93 93 93 93 93 93 93 0a 0a 93 17 17 0b 0b     ................
    6a4e:	17 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6a5e:	93 93 93 93 0a 17 17 17 17 0b 93 93 93 93 93 93     ................
    6a6e:	93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 17     ................
    6a7e:	17 17 17 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6a8e:	93 93 93 0a 93 93 93 17 0b 0a 0a 0a 0a 0a 0a 9d     ................
    6a9e:	0a 0a 16 16 16 0a 93 93 93 93 93 93 93 93 93 93     ................
    6aae:	0a 0a 0a 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    6abe:	93 93 93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 00 21     ...............!
	...
    6ada:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6aea:	00 00 00 00 22 00 21 00 00 00 00 00 00 00 00 00     ....".!.........
    6afa:	00 00 00 21 00 00 00 00 00 00 00 22 00 00 00 21     ...!......."...!
	...
    6b12:	00 00 00 22 00 22 00 00 00 00 00 00 00 00 00 00     ..."."..........
    6b22:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 21     !..............!
    6b32:	19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21 00     ..............!.
    6b42:	00 00 00 00 00 00 00 19 19 19 19 19 19 19 19 19     ................
    6b52:	19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00 00 21     ...............!
    6b62:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
    6b72:	21 00 00 00 00 00 00 00 00 19 19 9e 9e 9e 19 19     !...............
    6b82:	19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00     ................
    6b92:	00 21 9e 9e 9e 9e 9e 19 19 19 19 19 1a 1a 1a 1a     .!..............
    6ba2:	1a 00 21 00 00 00 00 00 00 00 00 9e 9e 19 19 19     ..!.............
    6bb2:	19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00     ................
    6bc2:	00 00 00 21 19 19 19 19 19 19 19 19 19 19 1a 1a     ...!............
    6bd2:	1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00 00 00     ................
    6be2:	00 00 00 00 22 00 00 00 21 00 00 00 00 00 00 1a     ...."...!.......
    6bf2:	1a 00 00 00 22 00 22 00 00 00 00 00 00 00 00 00     ....".".........
    6c02:	00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00 1b 19     .!..............
    6c12:	19 00 00 00 19 19 22 00 00 19 19 00 00 00 1a 1a     ......".........
    6c22:	1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00 00 1b     ......".........
    6c32:	1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00 00 1b     ...!............
    6c42:	1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    6c52:	1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00 00 00     ................
    6c62:	00 22 1a 1a 00 21 00 00 00 00 00 00 00 00 00 00     ."...!..........
    6c72:	00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00 21 00     ."."..........!.
	...
    6c8e:	1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00 19     ................
    6c9e:	19 00 00 00 19 19 00 22 00 00 21 00 00 00 00 00     ......."..!.....
    6cae:	00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00 19     .........!......
    6cbe:	19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a 1a     ..........."....
    6cce:	1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00 00     ............!...
    6cde:	00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19 19     ................
    6cee:	19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a 1a     ................
    6cfe:	1a 1a 1a 19 19 19 19 19 19 19 19 19 19              .............

00006d0b <map_level_space_final>:
    6d0b:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6d1b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d2b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 92 93 94 93     ................
    6d3b:	94 95 96 97 98 90 91 90 91 90 91 90 91 90 91 90     ................
    6d4b:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6d5b:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6d6b:	91 90 91 90 91 99 9a 9b 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d7b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d8b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d9b:	8e 8f 8e 8f 8e 8f 8e 8f 8e 9c 9d 90 91 90 91 90     ................
    6dab:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6dbb:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6dcb:	91 90 91 90 91 90 91 90 91 90 91 9e 9f a0 8e 8f     ................
    6ddb:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6deb:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6dfb:	8e 8f 8e 8f 8e 8f 8e 8f a1 a2 a3 a2 a3 a2 a3 a2     ................
    6e0b:	a4                                                  .

00006e0c <map_level_space>:
    6e0c:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6e1c:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6e2c:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6e3c:	8e 8f 8e 8f 8e 90 91 90 91 90 91 90 91 90 91 90     ................
    6e4c:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6e5c:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6e6c:	91 90 91 90 91 90 91 90 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6e7c:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6e8c:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6e9c:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 90 91 90 91 90     ................
    6eac:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ebc:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ecc:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 8e 8f     ................
    6edc:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6eec:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6efc:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6f0c:	8e                                                  .

00006f0d <map_level_desert>:
    6f0d:	33 05 72 72 72 72 72 72 72 72 72 72 72 72 72 72     3.rrrrrrrrrrrrrr
    6f1d:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6f2d:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6f3d:	72 72 72 72 72 73 74 73 73 73 74 73 73 73 74 73     rrrrrstssstsssts
    6f4d:	73 73 74 73 73 73 73 73 73 73 74 73 73 73 74 73     sstssssssstsssts
    6f5d:	73 73 74 73 73 73 74 73 73 73 73 73 73 73 73 73     sstssstsssssssss
    6f6d:	73 73 73 73 73 73 73 73 75 76 75 77 75 76 75 78     ssssssssuvuwuvux
    6f7d:	75 79 75 77 75 79 75 78 75 7a 75 77 75 79 75 78     uyuwuyuxuzuwuyux
    6f8d:	75 79 75 77 75 79 75 78 75 79 75 77 75 77 75 78     uyuwuyuxuyuwuwux
    6f9d:	75 7a 75 77 75 77 75 78 75 78 75 75 75 75 76 75     uzuwuwuxuxuuuuvu
    6fad:	7b 75 75 75 75 75 76 7c 7d 75 75 75 75 75 76 75     {uuuuuv|}uuuuuvu
    6fbd:	75 75 75 75 75 75 76 75 75 75 75 75 75 75 76 75     uuuuuuvuuuuuuuvu
    6fcd:	79 75 75 75 75 75 76 75 76 75 75 75 75 75 7e 7e     yuuuuuvuvuuuuu~~
    6fdd:	7e 7e 7f 7e 7f 7e 80 81 81 82 83 84 7e 7e 85 86     ~~.~.~......~~..
    6fed:	87 88 89 8a 8b 7e 7f 7e 7f 7e 8c 7e 7e 7e 80 81     .....~.~.~.~~~..
    6ffd:	81 82 8d 7e 7e 7e 7e 8a 8b 7e 7e 7e 7e 7e 7e 7e     ...~~~~..~~~~~~~
    700d:	7e                                                  ~

0000700e <map_level_city>:
    700e:	33 05 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d     3.MNOMPMNOMPMNOM
    701e:	50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50     PMNOMPMNOMPMNOMP
    702e:	4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d     MNOMPMNOMPMNOMPM
    703e:	4e 4f 4d 50 4d 51 52 53 51 51 51 52 53 51 51 51     NOMPMQRSQQQRSQQQ
    704e:	52 53 51 51 51 52 53 51 51 51 52 53 51 51 51 52     RSQQQRSQQQRSQQQR
    705e:	53 51 51 51 52 53 51 51 51 52 53 51 51 51 52 53     SQQQRSQQQRSQQQRS
    706e:	51 51 51 52 53 51 51 51 54 55 56 51 51 54 55 56     QQQRSQQQTUVQQTUV
    707e:	51 51 54 55 56 51 51 54 55 56 51 51 54 55 56 51     QQTUVQQTUVQQTUVQ
    708e:	51 54 55 56 51 51 54 55 56 51 51 54 55 56 51 51     QTUVQQTUVQQTUVQQ
    709e:	54 55 56 51 51 54 55 56 51 51 54 57 58 59 5a 5b     TUVQQTUVQQTWXYZ[
    70ae:	57 5c 5d 5a 5b 57 58 59 5a 5b 57 5c 5d 5a 5b 57     W\]Z[WXYZ[W\]Z[W
    70be:	58 59 5e 5b 57 58 59 5a 5b 57 58 59 5a 5b 57 58     XY^[WXYZ[WXYZ[WX
    70ce:	59 5a 5b 57 5c 5d 5a 5b 57 58 59 5a 5b 57 5f 60     YZ[W\]Z[WXYZ[W_`
    70de:	61 62 63 64 65 66 67 68 69 6a 6b 62 63 64 65 66     abcdefghijkbcdef
    70ee:	67 63 5f 6c 6d 6e 6f 70 71 61 62 63 5f 6c 6d 6e     gc_lmnopqabc_lmn
    70fe:	6f 70 71 61 62 63 64 65 66 67 63 5f 60 61 62 63     opqabcdefgc_`abc
    710e:	5f                                                  _

0000710f <map_level_forest>:
    710f:	33 05 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     3.;<=;<=;<=;<=;<
    711f:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    712f:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    713f:	3c 3d 3b 3c 3d 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f     <=;<=>?@>?@>?@>?
    714f:	40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40     @>?@>?@>?@>?@>?@
    715f:	3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e     >?@>?@>?@>?@>?@>
    716f:	3f 40 3e 3f 40 3e 3f 40 41 42 41 41 42 41 41 42     ?@>?@>?@ABAABAAB
    717f:	41 41 42 41 41 42 41 41 42 43 41 42 41 41 42 41     AABAABAABCABAABA
    718f:	41 42 41 41 42 41 41 42 41 41 42 43 41 42 43 41     ABAABAABAABCABCA
    719f:	42 41 41 42 41 41 42 41 41 42 41 41 44 41 41 44     BAABAABAABAADAAD
    71af:	41 41 44 43 41 44 43 41 44 41 43 44 41 41 44 41     AADCADCADACDAADA
    71bf:	41 44 41 41 44 41 41 44 41 41 44 41 41 44 41 41     ADAADAADAADAADAA
    71cf:	44 41 41 44 41 41 44 43 41 44 41 41 44 41 45 46     DAADAADCADAADAEF
    71df:	45 45 46 45 47 46 45 47 46 45 47 46 45 45 46 48     EEFEGFEGFEGFEEFH
    71ef:	49 46 48 49 46 48 49 46 4a 4b 46 4c 4b 46 47 45     IFHIFHIFJKFLKFGE
    71ff:	46 4a 4b 46 4a 4b 46 4a 4b 46 45 45 46 45 45 46     FJKFJKFJKFEEFEEF
    720f:	45                                                  E

00007210 <map_level_fire>:
    7210:	33 05 23 23 23 23 23 23 23 23 23 23 23 23 23 23     3.##############
    7220:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    7230:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    7240:	23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24     #####$$$$$$$$$$$
    7250:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    7260:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    7270:	24 24 24 24 24 24 24 24 25 26 25 25 25 25 26 25     $$$$$$$$%&%%%%&%
    7280:	25 25 25 26 25 25 25 25 25 25 25 26 25 25 25 25     %%%&%%%%%%%&%%%%
    7290:	25 25 25 25 25 27 28 26 25 25 25 25 26 25 25 25     %%%%%'(&%%%%&%%%
    72a0:	25 25 25 25 25 25 25 26 25 25 25 25 25 25 25 25     %%%%%%%&%%%%%%%%
    72b0:	25 25 25 25 25 25 25 25 25 25 25 25 29 25 25 25     %%%%%%%%%%%%)%%%
    72c0:	25 25 25 25 25 25 25 2a 2b 2c 2d 25 25 25 25 25     %%%%%%%*+,-%%%%%
    72d0:	25 27 28 25 25 27 28 25 25 25 25 25 25 25 2e 2e     %'(%%'(%%%%%%%..
    72e0:	2f 30 2f 30 2f 30 2f 30 31 2e 32 2e 2e 32 2e 2e     /0/0/0/01.2..2..
    72f0:	2e 32 2e 2e 2e 2f 30 2f 30 33 34 34 34 35 36 30     .2.../0/03444560
    7300:	2f 30 31 37 2b 2c 38 39 2b 2c 3a 2e 2e 2e 2e 2e     /017+,89+,:.....
    7310:	2e                                                  .

00007311 <map_level_ice>:
    7311:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    7321:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    7331:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    7341:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    7351:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    7361:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    7371:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    7381:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    7391:	06 06 06 06 06 06 06 06 06 06 06 07 08 09 06 06     ................
    73a1:	06 06 06 06 06 06 06 06 06 06 06 06 06 0a 06 06     ................
    73b1:	06 06 06 0b 0c 0d 0e 06 06 06 0a 06 06 06 06 06     ................
    73c1:	06 06 06 06 06 0f 06 10 06 10 06 11 12 13 06 06     ................
    73d1:	06 14 06 06 0a 06 06 06 06 06 06 06 06 06 15 15     ................
    73e1:	16 15 15 15 15 17 02 02 02 02 18 15 15 16 19 1a     ................
    73f1:	1b 1a 1b 1a 1c 1d 1e 1e 1f 20 21 20 21 20 22 15     ......... ! ! ".
    7401:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    7411:	15                                                  .

00007412 <__ctors_end>:
    7412:	11 24       	eor	r1, r1
    7414:	1f be       	out	0x3f, r1	; 63
    7416:	cf ef       	ldi	r28, 0xFF	; 255
    7418:	d0 e1       	ldi	r29, 0x10	; 16
    741a:	de bf       	out	0x3e, r29	; 62
    741c:	cd bf       	out	0x3d, r28	; 61

0000741e <__do_copy_data>:
    741e:	15 e0       	ldi	r17, 0x05	; 5
    7420:	a0 e0       	ldi	r26, 0x00	; 0
    7422:	b5 e0       	ldi	r27, 0x05	; 5
    7424:	ec e5       	ldi	r30, 0x5C	; 92
    7426:	fa ee       	ldi	r31, 0xEA	; 234
    7428:	02 c0       	rjmp	.+4      	; 0x742e <__do_copy_data+0x10>
    742a:	05 90       	lpm	r0, Z+
    742c:	0d 92       	st	X+, r0
    742e:	a0 31       	cpi	r26, 0x10	; 16
    7430:	b1 07       	cpc	r27, r17
    7432:	d9 f7       	brne	.-10     	; 0x742a <__do_copy_data+0xc>

00007434 <__do_clear_bss>:
    7434:	10 e1       	ldi	r17, 0x10	; 16
    7436:	a0 e1       	ldi	r26, 0x10	; 16
    7438:	b5 e0       	ldi	r27, 0x05	; 5
    743a:	01 c0       	rjmp	.+2      	; 0x743e <.do_clear_bss_start>

0000743c <.do_clear_bss_loop>:
    743c:	1d 92       	st	X+, r1

0000743e <.do_clear_bss_start>:
    743e:	af 35       	cpi	r26, 0x5F	; 95
    7440:	b1 07       	cpc	r27, r17
    7442:	e1 f7       	brne	.-8      	; 0x743c <.do_clear_bss_loop>

00007444 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7444:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <wdt_randomize>
#endif

    MCUSR = 0;
    7448:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    744a:	88 e1       	ldi	r24, 0x18	; 24
    744c:	0f b6       	in	r0, 0x3f	; 63
    744e:	f8 94       	cli
    7450:	80 93 60 00 	sts	0x0060, r24
    7454:	10 92 60 00 	sts	0x0060, r1
    7458:	0f be       	out	0x3f, r0	; 63

0000745a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    745a:	0e 94 82 40 	call	0x8104	; 0x8104 <isEepromFormatted>
    745e:	81 11       	cpse	r24, r1
    7460:	02 c0       	rjmp	.+4      	; 0x7466 <Initialize+0xc>
    7462:	0e 94 60 40 	call	0x80c0	; 0x80c0 <FormatEeprom>

	cli();
    7466:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7468:	81 e0       	ldi	r24, 0x01	; 1
    746a:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    746e:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7472:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7476:	10 92 d0 0c 	sts	0x0CD0, r1
    747a:	10 92 d6 0c 	sts	0x0CD6, r1
    747e:	10 92 dc 0c 	sts	0x0CDC, r1
    7482:	10 92 e2 0c 	sts	0x0CE2, r1
    7486:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    748a:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    748e:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7492:	92 e1       	ldi	r25, 0x12	; 18
    7494:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7498:	90 ee       	ldi	r25, 0xE0	; 224
    749a:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    749e:	94 e1       	ldi	r25, 0x14	; 20
    74a0:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    74a4:	10 92 c2 0c 	sts	0x0CC2, r1
    74a8:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    74ac:	10 92 c6 0c 	sts	0x0CC6, r1
    74b0:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    74b4:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    74b8:	0e 94 ce 4c 	call	0x999c	; 0x999c <InitializeVideoMode>
    74bc:	86 e9       	ldi	r24, 0x96	; 150
    74be:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    74c0:	fc 01       	movw	r30, r24
    74c2:	25 91       	lpm	r18, Z+
    74c4:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    74c6:	f9 01       	movw	r30, r18
    74c8:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    74ca:	30 83       	st	Z, r19
    74cc:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    74ce:	20 e0       	ldi	r18, 0x00	; 0
    74d0:	84 3c       	cpi	r24, 0xC4	; 196
    74d2:	92 07       	cpc	r25, r18
    74d4:	a9 f7       	brne	.-22     	; 0x74c0 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    74d6:	78 94       	sei
	
	DisplayLogo();
    74d8:	0e 94 cd 4c 	call	0x999a	; 0x999a <DisplayLogo>
    74dc:	0e 94 c3 72 	call	0xe586	; 0xe586 <main>
    74e0:	0c 94 2c 75 	jmp	0xea58	; 0xea58 <_exit>

000074e4 <__bad_interrupt>:
    74e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000074e8 <sub_video_mode3>:
    ;***************************************************

    sub_video_mode3:
        ;de-activate sync timer interrupts
        ;we will need to use the I flag to branch in a critical loop
        ldi ZL,(0<<OCIE1A)
    74e8:	e0 e0       	ldi	r30, 0x00	; 0
        sts _SFR_MEM_ADDR(TIMSK1),ZL
    74ea:	e0 93 6f 00 	sts	0x006F, r30

        ;wait cycles to align with next hsync
        WAIT r26,183+241
    74ee:	ad e8       	ldi	r26, 0x8D	; 141
    74f0:	aa 95       	dec	r26
    74f2:	f1 f7       	brne	.-4      	; 0x74f0 <sub_video_mode3+0x8>
    74f4:	00 00       	nop

        ;Refresh ramtiles indexes in VRAM
        ;This has to be done because the main
        ;program may have altered the VRAM
        ;after vsync and the rendering interrupt.
        lds r16,userRamTilesCount
    74f6:	00 91 f3 0c 	lds	r16, 0x0CF3

        ldi ZL,lo8(ram_tiles_restore);
    74fa:	e0 e5       	ldi	r30, 0x50	; 80
        ldi ZH,hi8(ram_tiles_restore);
    74fc:	fc e0       	ldi	r31, 0x0C	; 12
        ldi r18,3
    74fe:	23 e0       	ldi	r18, 0x03	; 3
        mul r16,r18
    7500:	02 9f       	mul	r16, r18
        add ZL,r0
    7502:	e0 0d       	add	r30, r0
        adc ZH,r1
    7504:	f1 1d       	adc	r31, r1

        ldi YL,lo8(vram)
    7506:	c0 e0       	ldi	r28, 0x00	; 0
        ldi YH,hi8(vram)
    7508:	d1 e0       	ldi	r29, 0x01	; 1

        lds r18,free_tile_index
    750a:	20 91 85 0d 	lds	r18, 0x0D85
        ldi r19,MAX_RAMTILES        ;maximum possible ramtiles
    750e:	3c e3       	ldi	r19, 0x3C	; 60
        sub r19,r18                 ;sub free tile
    7510:	32 1b       	sub	r19, r18
        add r19,r16                 ;add user tiles
    7512:	30 0f       	add	r19, r16

        cp r18,r16
    7514:	20 17       	cp	r18, r16
        breq no_ramtiles
    7516:	51 f0       	breq	.+20     	; 0x752c <no_ramtiles>
        nop
    7518:	00 00       	nop
	...

0000751c <upd_loop>:
        nop
upd_loop:
        ld XL,Z+    ;load vram offset of ramtile
    751c:	a1 91       	ld	r26, Z+
        ld XH,Z+
    751e:	b1 91       	ld	r27, Z+

        ld r17,X    ;get latest VRAM tile that may have been modified my
    7520:	1c 91       	ld	r17, X
        st Z+,r17   ;the main program and store it in the restore buffer
    7522:	11 93       	st	Z+, r17
        st X,r16    ;write the ramtile index back to vram
    7524:	0c 93       	st	X, r16

        inc r16
    7526:	03 95       	inc	r16
        cp r16,r18
    7528:	02 17       	cp	r16, r18
        brlo upd_loop ;loop is 14 cycles
    752a:	c0 f3       	brcs	.-16     	; 0x751c <upd_loop>

0000752c <no_ramtiles>:

no_ramtiles:
        ;wait for remaining maximum possible ramtiles
1:
        ldi r17,3
    752c:	13 e0       	ldi	r17, 0x03	; 3
        dec r17
    752e:	1a 95       	dec	r17
        brne .-4
    7530:	f1 f7       	brne	.-4      	; 0x752e <no_ramtiles+0x2>
        rjmp .
    7532:	00 c0       	rjmp	.+0      	; 0x7534 <no_ramtiles+0x8>
        dec r19
    7534:	3a 95       	dec	r19
        brne 1b
    7536:	d1 f7       	brne	.-12     	; 0x752c <no_ramtiles>

        ;**********************
        ; setup scroll stuff
        ;**********************
    
        ldi YL,lo8(vram)
    7538:	c0 e0       	ldi	r28, 0x00	; 0
        ldi YH,hi8(vram)
    753a:	d1 e0       	ldi	r29, 0x01	; 1

        //add X scroll (coarse)
        lds r18,screen_scrollX ;ScreenScrollX
    753c:	20 91 b2 0c 	lds	r18, 0x0CB2
        mov r25,r18
    7540:	92 2f       	mov	r25, r18
        andi r18,0xf8   ;(x>>3) * 8 interleave
    7542:	28 7f       	andi	r18, 0xF8	; 248
        add YL,r18
    7544:	c2 0f       	add	r28, r18

        ;save Y wrap adress 
        movw r12,YL
    7546:	6e 01       	movw	r12, r28
    

        //add Y scroll (coarse)
        lds r16,screen_scrollY ;ScreenScrollY
    7548:	00 91 b3 0c 	lds	r16, 0x0CB3
        mov r22,r16
    754c:	60 2f       	mov	r22, r16
        lsr r16
    754e:	06 95       	lsr	r16
        lsr r16
    7550:	06 95       	lsr	r16
        lsr r16 ;/8
    7552:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    7554:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    7558:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    755a:	f1 2e       	mov	r15, r17

        mov r17,r16
    755c:	10 2f       	mov	r17, r16
        lsr r16
    755e:	06 95       	lsr	r16
        lsr r16
    7560:	06 95       	lsr	r16
        lsr r16 ;/8
    7562:	06 95       	lsr	r16
        add YH,r16      ; (bits 6-7)
    7564:	d0 0f       	add	r29, r16
        andi r17,0x7
    7566:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    7568:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    756a:	67 70       	andi	r22, 0x07	; 7
        ;lds r20,tile_table_lo
        ;lds r21,tile_table_hi
        ;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
        ;out _SFR_IO_ADDR(GPIOR2),r21

        lds r20,overlay_tile_table
    756c:	40 91 b0 0c 	lds	r20, 0x0CB0
        lds r21,overlay_tile_table+1
    7570:	50 91 b1 0c 	lds	r21, 0x0CB1
        lds r6,tile_table_lo
    7574:	60 90 ac 0c 	lds	r6, 0x0CAC
        lds r7,tile_table_hi
    7578:	70 90 ad 0c 	lds	r7, 0x0CAD
        out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    757c:	6a bc       	out	0x2a, r6	; 42
        out _SFR_IO_ADDR(GPIOR2),r7
    757e:	7b bc       	out	0x2b, r7	; 43


        ;save main section value    
        movw r10,YL
    7580:	5e 01       	movw	r10, r28
        mov r23,r22
    7582:	76 2f       	mov	r23, r22
        mov r24,r15
    7584:	8f 2d       	mov	r24, r15
        mov r9,r25
    7586:	99 2e       	mov	r9, r25

        ;load values for overlay if it's activated (overlay_height>0)
        
        ;compute beginning of overlay in vram 
        lds r16,screen_scrollHeight
    7588:	00 91 b4 0c 	lds	r16, 0x0CB4
        mov r18,r16
    758c:	20 2f       	mov	r18, r16
        lsr r16
    758e:	06 95       	lsr	r16
        lsr r16
    7590:	06 95       	lsr	r16
        lsr r16         ;hi8
    7592:	06 95       	lsr	r16
        inc r16         ;add 0x100 ram offset
    7594:	03 95       	inc	r16
        andi r18,7      ;lo8
    7596:	27 70       	andi	r18, 0x07	; 7
        
        lds r19,overlay_height  
    7598:	30 91 af 0c 	lds	r19, 0x0CAF
        cpi r19,0
    759c:	30 30       	cpi	r19, 0x00	; 0
        in r0, _SFR_IO_ADDR(SREG)
    759e:	0f b6       	in	r0, 0x3f	; 63

        sbrs r0,SREG_Z
    75a0:	01 fe       	sbrs	r0, 1
        clr r22
    75a2:	66 27       	eor	r22, r22
        sbrs r0,SREG_Z
    75a4:	01 fe       	sbrs	r0, 1
        mov YL,r18      ;lo8(overlay_vram)
    75a6:	c2 2f       	mov	r28, r18
        sbrs r0,SREG_Z
    75a8:	01 fe       	sbrs	r0, 1
        mov YH,r16      ;hi8(overlay_vram)
    75aa:	d0 2f       	mov	r29, r16
        sbrs r0,SREG_Z
    75ac:	01 fe       	sbrs	r0, 1
        ser r24
    75ae:	8f ef       	ldi	r24, 0xFF	; 255
        sbrs r0,SREG_Z
    75b0:	01 fe       	sbrs	r0, 1
        clr r9
    75b2:	99 24       	eor	r9, r9

        sbrs r0,SREG_Z
    75b4:	01 fe       	sbrs	r0, 1
        out _SFR_IO_ADDR(GPIOR1),r20
    75b6:	4a bd       	out	0x2a, r20	; 42
        sbrs r0,SREG_Z
    75b8:	01 fe       	sbrs	r0, 1
        out _SFR_IO_ADDR(GPIOR2),r21
    75ba:	5b bd       	out	0x2b, r21	; 43


        //ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
        //mov r8,r16
        lds r8,render_lines_count ;total scanlines to draw
    75bc:	80 90 be 0c 	lds	r8, 0x0CBE

000075c0 <next_tile_line>:
    ;r23 = Main section tile row
    ;r24 = Current Y tiles to draw before wrapping
    ;r25 = Main section scrollX

    next_tile_line:
        rcall hsync_pulse
    75c0:	bf d3       	rcall	.+1918   	; 0x7d40 <hsync_pulse>

        WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    75c2:	24 e0       	ldi	r18, 0x04	; 4
    75c4:	2a 95       	dec	r18
    75c6:	f1 f7       	brne	.-4      	; 0x75c4 <next_tile_line+0x4>
    75c8:	00 00       	nop
                
        call render_tile_line
    75ca:	0e 94 26 3b 	call	0x764c	; 0x764c <render_tile_line>

        WAIT r18,58
    75ce:	23 e1       	ldi	r18, 0x13	; 19
    75d0:	2a 95       	dec	r18
    75d2:	f1 f7       	brne	.-4      	; 0x75d0 <next_tile_line+0x10>
    75d4:	00 00       	nop

        inc r22
    75d6:	63 95       	inc	r22
        dec r8
    75d8:	8a 94       	dec	r8
        breq text_frame_end
    75da:	09 f1       	breq	.+66     	; 0x761e <text_frame_end>

        cpi r22,TILE_HEIGHT ;last char line? 1
    75dc:	68 30       	cpi	r22, 0x08	; 8
        breq next_tile_row
    75de:	29 f0       	breq	.+10     	; 0x75ea <next_tile_row>

        ;wait to align with next_tile_row instructions (+1 cycle for the breq)
        WAIT r16,25
    75e0:	08 e0       	ldi	r16, 0x08	; 8
    75e2:	0a 95       	dec	r16
    75e4:	f1 f7       	brne	.-4      	; 0x75e2 <next_tile_line+0x22>
    75e6:	00 00       	nop
        rjmp next_tile_line
    75e8:	eb cf       	rjmp	.-42     	; 0x75c0 <next_tile_line>

000075ea <next_tile_row>:

    next_tile_row:

        clr r22     ;clear current char line
    75ea:	66 27       	eor	r22, r22

        ;increment vram pointer next row
        mov r16,YL
    75ec:	0c 2f       	mov	r16, r28
        andi r16,0x7
    75ee:	07 70       	andi	r16, 0x07	; 7
        cpi r16,7
    75f0:	07 30       	cpi	r16, 0x07	; 7
        breq 1f
    75f2:	11 f0       	breq	.+4      	; 0x75f8 <next_tile_row+0xe>
        inc YL
    75f4:	c3 95       	inc	r28
        rjmp 2f
    75f6:	02 c0       	rjmp	.+4      	; 0x75fc <next_tile_row+0x12>
    1:
        andi YL,0xf8
    75f8:	c8 7f       	andi	r28, 0xF8	; 248
        inc YH
    75fa:	d3 95       	inc	r29
    2:

        dec r24     ;wrap section?
    75fc:	8a 95       	dec	r24
        brne .+2
    75fe:	09 f4       	brne	.+2      	; 0x7602 <next_tile_row+0x18>
        movw YL,r12
    7600:	e6 01       	movw	r28, r12

        dec r19
    7602:	3a 95       	dec	r19
        brne .+2
    7604:	09 f4       	brne	.+2      	; 0x7608 <next_tile_row+0x1e>
        mov r22,r23 ;section tile row
    7606:	67 2f       	mov	r22, r23
        brne .+2
    7608:	09 f4       	brne	.+2      	; 0x760c <next_tile_row+0x22>
        movw YL,r10 ;vram adress
    760a:	e5 01       	movw	r28, r10
        brne .+2
    760c:	09 f4       	brne	.+2      	; 0x7610 <next_tile_row+0x26>
        mov r24,r15 ;Y wrapping
    760e:	8f 2d       	mov	r24, r15
        brne .+2
    7610:	09 f4       	brne	.+2      	; 0x7614 <next_tile_row+0x2a>
        mov r9,r25  ;scrollX
    7612:	99 2e       	mov	r9, r25

        brne .+2
    7614:	09 f4       	brne	.+2      	; 0x7618 <next_tile_row+0x2e>
        out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7616:	6a bc       	out	0x2a, r6	; 42
        brne .+2
    7618:	09 f4       	brne	.+2      	; 0x761c <next_tile_row+0x32>
        out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    761a:	7b bc       	out	0x2b, r7	; 43

        rjmp next_tile_line
    761c:	d1 cf       	rjmp	.-94     	; 0x75c0 <next_tile_line>

0000761e <text_frame_end>:

    text_frame_end:

        WAIT r18,28
    761e:	29 e0       	ldi	r18, 0x09	; 9
    7620:	2a 95       	dec	r18
    7622:	f1 f7       	brne	.-4      	; 0x7620 <text_frame_end+0x2>
    7624:	00 00       	nop

        rcall hsync_pulse ;145
    7626:	8c d3       	rcall	.+1816   	; 0x7d40 <hsync_pulse>
    
        clr r1
    7628:	11 24       	eor	r1, r1
        call RestoreBackground
    762a:	0e 94 80 4b 	call	0x9700	; 0x9700 <RestoreBackground>

        ;set vsync flag & flip field
        lds ZL,sync_flags
    762e:	e0 91 b8 0c 	lds	r30, 0x0CB8
        ldi r20,SYNC_FLAG_FIELD
    7632:	42 e0       	ldi	r20, 0x02	; 2
        ori ZL,SYNC_FLAG_VSYNC
    7634:	e1 60       	ori	r30, 0x01	; 1
        eor ZL,r20
    7636:	e4 27       	eor	r30, r20
        sts sync_flags,ZL
    7638:	e0 93 b8 0c 	sts	0x0CB8, r30
    
        cli 
    763c:	f8 94       	cli

        ;re-activate sync timer interrupts
        ldi ZL,(1<<OCIE1A)
    763e:	e2 e0       	ldi	r30, 0x02	; 2
        sts _SFR_MEM_ADDR(TIMSK1),ZL
    7640:	e0 93 6f 00 	sts	0x006F, r30
            
        ;clear any pending timer int
        ldi ZL,(1<<OCF1A)
    7644:	e2 e0       	ldi	r30, 0x02	; 2
        sts _SFR_MEM_ADDR(TIFR1),ZL
    7646:	e0 93 36 00 	sts	0x0036, r30

        ret
    764a:	08 95       	ret

0000764c <render_tile_line>:
    ; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
    ; 
    ; cycles  = 1495
    ;*************************************************
    render_tile_line:
        push YL
    764c:	cf 93       	push	r28
        push YH
    764e:	df 93       	push	r29
        push r23
    7650:	7f 93       	push	r23
        push r22
    7652:	6f 93       	push	r22
        push r19
    7654:	3f 93       	push	r19
        push r13
    7656:	df 92       	push	r13
        push r12
    7658:	cf 92       	push	r12
        push r9
    765a:	9f 92       	push	r9
        push r7
    765c:	7f 92       	push	r7
        push r6
    765e:	6f 92       	push	r6
        ;--------------------------
        ; Rendering 
        ;---------------------------

        ;get tile row offset
        ldi r23,TILE_WIDTH ;tile width in pixels
    7660:	78 e0       	ldi	r23, 0x08	; 8
        mul r22,r23
    7662:	67 9f       	mul	r22, r23

        ;compute base adresses for ROM and RAM tiles
        in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    7664:	0a b5       	in	r16, 0x2a	; 42
        in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    7666:	1b b5       	in	r17, 0x2b	; 43
        subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7668:	00 50       	subi	r16, 0x00	; 0
        sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    766a:	17 40       	sbci	r17, 0x07	; 7

        add r16,r0
    766c:	00 0d       	add	r16, r0
        adc r17,r1
    766e:	11 1d       	adc	r17, r1
        movw r2,r16         ;rom tiles adress
    7670:	18 01       	movw	r2, r16

        ldi r16,lo8(ram_tiles)
    7672:	00 e5       	ldi	r16, 0x50	; 80
        ldi r17,hi8(ram_tiles)
    7674:	15 e0       	ldi	r17, 0x05	; 5
        add r16,r0
    7676:	00 0d       	add	r16, r0
        adc r17,r1
    7678:	11 1d       	adc	r17, r1
        movw r4,r16         ;ram tiles adress
    767a:	28 01       	movw	r4, r16

        ldi r19,TILE_HEIGHT*TILE_WIDTH
    767c:	30 e4       	ldi	r19, 0x40	; 64
        ldi r17,SCREEN_TILES_H-1    ;main loop counter
    767e:	1b e1       	ldi	r17, 0x1B	; 27


        ;handle fine scroll offset
        ;lds r22,screenSections+scrollX
        mov r22,r9
    7680:	69 2d       	mov	r22, r9
        andi r22,0x7        
    7682:	67 70       	andi	r22, 0x07	; 7
        mov r14,r22 ;pixels to draw on last tile    
    7684:	e6 2e       	mov	r14, r22
        cli         ;no trailing pixel to draw (hack, see end: )
    7686:	f8 94       	cli
        breq .+2
    7688:	09 f0       	breq	.+2      	; 0x768c <render_tile_line+0x40>
        sei         ;some trailing pixel to draw (hack, see end: )
    768a:	78 94       	sei

        ;get first pixel of last tile in ROM (for ROM tiles fine scroll)
        ;and adress of next pixel
        movw ZL,YL
    768c:	fe 01       	movw	r30, r28
        subi ZL,-(SCREEN_TILES_H*8)
    768e:	e0 52       	subi	r30, 0x20	; 32
        ld r18,Z
    7690:	20 81       	ld	r18, Z
        mul r18,r19     ;tile*width*height
    7692:	23 9f       	mul	r18, r19
        add r0,r2    ;add ROM title table address +row offset
    7694:	02 0c       	add	r0, r2
        adc r1,r3
    7696:	13 1c       	adc	r1, r3
        movw ZL,r0
    7698:	f0 01       	movw	r30, r0
        lpm r9,Z+   ;hold first pixel until end 
    769a:	95 90       	lpm	r9, Z+
        movw r12,ZL ;hold second pixel adress until end
    769c:	6f 01       	movw	r12, r30


        ;compute first tile adress
        ld r18,Y        ;load next tile # from VRAM
    769e:	28 81       	ld	r18, Y
        subi YL,-8
    76a0:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT
    76a2:	2c 31       	cpi	r18, 0x1C	; 28
        in r16,_SFR_IO_ADDR(SREG)   ;save the carry flag for later  
    76a4:	0f b7       	in	r16, 0x3f	; 63
        mul r18,r19     ;tile*width*height
    76a6:	23 9f       	mul	r18, r19
        movw r20,r2     ;rom tiles  
    76a8:	a1 01       	movw	r20, r2
        sbrc r16,SREG_C
    76aa:	00 fd       	sbrc	r16, 0
        movw r20,r4     ;ram tiles
    76ac:	a2 01       	movw	r20, r4
        add r0,r20    ;add title table address +row offset
    76ae:	04 0e       	add	r0, r20
        adc r1,r21
    76b0:	15 1e       	adc	r1, r21
        movw XL,r0
    76b2:	d0 01       	movw	r26, r0


        ;compute second tile adress
        ld r18,Y        ;load next tile # from VRAM
    76b4:	28 81       	ld	r18, Y
        subi YL,-8
    76b6:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT
    76b8:	2c 31       	cpi	r18, 0x1C	; 28
        in r7,_SFR_IO_ADDR(SREG)    ;save the carry flag for later
    76ba:	7f b6       	in	r7, 0x3f	; 63
        bst r7,SREG_C
    76bc:	70 fa       	bst	r7, 0
        mul r18,r19     ;tile*width*height
    76be:	23 9f       	mul	r18, r19
        movw r20,r2     ;rom tiles
    76c0:	a1 01       	movw	r20, r2
        brtc .+2
    76c2:	0e f4       	brtc	.+2      	; 0x76c6 <render_tile_line+0x7a>
        movw r20,r4     ;ram tiles
    76c4:	a2 01       	movw	r20, r4
        add r0,r20      ;add title table address +row offset
    76c6:	04 0e       	add	r0, r20
        adc r1,r21
    76c8:	15 1e       	adc	r1, r21
        movw ZL,r0
    76ca:	f0 01       	movw	r30, r0
        movw r6,ZL      ;push Z
    76cc:	3f 01       	movw	r6, r30

000076ce <do_fine_scroll>:


    do_fine_scroll:
        ;output 1st tile with fine scroll offset 
        clr r0
    76ce:	00 24       	eor	r0, r0
        add XL,r22  ;add fine offset
    76d0:	a6 0f       	add	r26, r22
        adc XH,r0
    76d2:	b0 1d       	adc	r27, r0

        ;compute jump offset
        ldi r23,3
    76d4:	73 e0       	ldi	r23, 0x03	; 3
        mul r22,r23 ;3 instructions
    76d6:	67 9f       	mul	r22, r23
    
        sbrs r16,SREG_C
    76d8:	00 ff       	sbrs	r16, 0
        rjmp rom_fine_scroll
    76da:	22 c0       	rjmp	.+68     	; 0x7720 <rom_fine_scroll>

000076dc <ram_fine_scroll>:

    /***FINE SCROLL RAM LOOP***/
    ram_fine_scroll:
        rjmp .
    76dc:	00 c0       	rjmp	.+0      	; 0x76de <ram_fine_scroll+0x2>
        ldi r22,lo8(pm(ram_fine_scroll_loop))
    76de:	66 e7       	ldi	r22, 0x76	; 118
        ldi r23,hi8(pm(ram_fine_scroll_loop))
    76e0:	7b e3       	ldi	r23, 0x3B	; 59
        add r22,r0
    76e2:	60 0d       	add	r22, r0
        adc r23,r1
    76e4:	71 1d       	adc	r23, r1
        push r22
    76e6:	6f 93       	push	r22
        push r23    
    76e8:	7f 93       	push	r23
        ret ;jump into ram_fine_scroll_loop
    76ea:	08 95       	ret

000076ec <ram_fine_scroll_loop>:
    ram_fine_scroll_loop:
        .rept 8
            ld r16,X+
            lpm
            out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        .endr
    76ec:	0d 91       	ld	r16, X+
    76ee:	c8 95       	lpm
    76f0:	08 b9       	out	0x08, r16	; 8
    76f2:	0d 91       	ld	r16, X+
    76f4:	c8 95       	lpm
    76f6:	08 b9       	out	0x08, r16	; 8
    76f8:	0d 91       	ld	r16, X+
    76fa:	c8 95       	lpm
    76fc:	08 b9       	out	0x08, r16	; 8
    76fe:	0d 91       	ld	r16, X+
    7700:	c8 95       	lpm
    7702:	08 b9       	out	0x08, r16	; 8
    7704:	0d 91       	ld	r16, X+
    7706:	c8 95       	lpm
    7708:	08 b9       	out	0x08, r16	; 8
    770a:	0d 91       	ld	r16, X+
    770c:	c8 95       	lpm
    770e:	08 b9       	out	0x08, r16	; 8
    7710:	0d 91       	ld	r16, X+
    7712:	c8 95       	lpm
    7714:	08 b9       	out	0x08, r16	; 8
    7716:	0d 91       	ld	r16, X+
    7718:	c8 95       	lpm
    771a:	08 b9       	out	0x08, r16	; 8

        ;branch to tile #2
        brtc romloop
    771c:	1e f5       	brtc	.+70     	; 0x7764 <romloop>
        rjmp ramloop
    771e:	40 c0       	rjmp	.+128    	; 0x77a0 <ramloop>

00007720 <rom_fine_scroll>:

    /***FINE SCROLL ROM LOOP***/
    rom_fine_scroll:
        movw ZL,XL
    7720:	fd 01       	movw	r30, r26
        ldi r22,lo8(pm(rom_fine_scroll_loop))   
    7722:	68 e9       	ldi	r22, 0x98	; 152
        ldi r23,hi8(pm(rom_fine_scroll_loop))
    7724:	7b e3       	ldi	r23, 0x3B	; 59
        add r22,r0
    7726:	60 0d       	add	r22, r0
        adc r23,r1
    7728:	71 1d       	adc	r23, r1
        push r22
    772a:	6f 93       	push	r22
        push r23    
    772c:	7f 93       	push	r23
        ret
    772e:	08 95       	ret

00007730 <rom_fine_scroll_loop>:
    rom_fine_scroll_loop:
        .rept 8
            lpm r16,Z+
            rjmp .
            out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        .endr 
    7730:	05 91       	lpm	r16, Z+
    7732:	00 c0       	rjmp	.+0      	; 0x7734 <rom_fine_scroll_loop+0x4>
    7734:	08 b9       	out	0x08, r16	; 8
    7736:	05 91       	lpm	r16, Z+
    7738:	00 c0       	rjmp	.+0      	; 0x773a <rom_fine_scroll_loop+0xa>
    773a:	08 b9       	out	0x08, r16	; 8
    773c:	05 91       	lpm	r16, Z+
    773e:	00 c0       	rjmp	.+0      	; 0x7740 <rom_fine_scroll_loop+0x10>
    7740:	08 b9       	out	0x08, r16	; 8
    7742:	05 91       	lpm	r16, Z+
    7744:	00 c0       	rjmp	.+0      	; 0x7746 <rom_fine_scroll_loop+0x16>
    7746:	08 b9       	out	0x08, r16	; 8
    7748:	05 91       	lpm	r16, Z+
    774a:	00 c0       	rjmp	.+0      	; 0x774c <rom_fine_scroll_loop+0x1c>
    774c:	08 b9       	out	0x08, r16	; 8
    774e:	05 91       	lpm	r16, Z+
    7750:	00 c0       	rjmp	.+0      	; 0x7752 <rom_fine_scroll_loop+0x22>
    7752:	08 b9       	out	0x08, r16	; 8
    7754:	05 91       	lpm	r16, Z+
    7756:	00 c0       	rjmp	.+0      	; 0x7758 <rom_fine_scroll_loop+0x28>
    7758:	08 b9       	out	0x08, r16	; 8
    775a:	05 91       	lpm	r16, Z+
    775c:	00 c0       	rjmp	.+0      	; 0x775e <rom_fine_scroll_loop+0x2e>
    775e:	08 b9       	out	0x08, r16	; 8
    
        movw ZL,r6      ;restore Z for tile #2
    7760:	f3 01       	movw	r30, r6

        ;branch to tile #2
        brts ramloop
    7762:	f6 f0       	brts	.+60     	; 0x77a0 <ramloop>

00007764 <romloop>:

    
    romloop:
        lpm r16,Z+
    7764:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7766:	08 b9       	out	0x08, r16	; 8
        ld r18,Y     ;load next tile # from VRAM
    7768:	28 81       	ld	r18, Y

        lpm r16,Z+
    776a:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    776c:	08 b9       	out	0x08, r16	; 8
        mul r18,r19 ;tile*width*height
    776e:	23 9f       	mul	r18, r19

        lpm r16,Z+
    7770:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7772:	08 b9       	out	0x08, r16	; 8
        subi YL,-8
    7774:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT     ;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7776:	2c 31       	cpi	r18, 0x1C	; 28
        
        lpm r16,Z+
    7778:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    777a:	08 b9       	out	0x08, r16	; 8
        brsh .+2        ;skip if next tile is in ROM    
    777c:	08 f4       	brcc	.+2      	; 0x7780 <romloop+0x1c>
        movw r20,r4     ;load RAM title table address +row offset   
    777e:	a2 01       	movw	r20, r4
   
        lpm r16,Z+
    7780:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7782:	08 b9       	out	0x08, r16	; 8
        add r0,r20      ;add tile table address +row offset lsb
    7784:	04 0e       	add	r0, r20
        adc r1,r21      ;add title table address +row offset msb
    7786:	15 1e       	adc	r1, r21

        lpm r16,Z+
    7788:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    778a:	08 b9       	out	0x08, r16	; 8
        cpi r18,RAM_TILES_COUNT 
    778c:	2c 31       	cpi	r18, 0x1C	; 28
        dec r17         ;decrement tiles to draw on line (does not affect carry)
    778e:	1a 95       	dec	r17
   
        lpm r16,Z+
    7790:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7792:	08 b9       	out	0x08, r16	; 8
        lpm r16,Z+
    7794:	05 91       	lpm	r16, Z+

        breq end    
    7796:	39 f1       	breq	.+78     	; 0x77e6 <end>
        movw ZL,r0      ;copy next tile adress
    7798:	f0 01       	movw	r30, r0

        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    779a:	08 b9       	out	0x08, r16	; 8
        brcc romloop
    779c:	18 f7       	brcc	.-58     	; 0x7764 <romloop>
    
        rjmp .
    779e:	00 c0       	rjmp	.+0      	; 0x77a0 <ramloop>

000077a0 <ramloop>:

    ramloop:

        ld r16,Z+
    77a0:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    77a2:	08 b9       	out	0x08, r16	; 8
        ld r18,Y     ;load next tile # from VRAM
    77a4:	28 81       	ld	r18, Y

        ld r16,Z+ 
    77a6:	01 91       	ld	r16, Z+
        subi YL,-8          
    77a8:	c8 5f       	subi	r28, 0xF8	; 248
        out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 2
    77aa:	08 b9       	out	0x08, r16	; 8
        mul r18,r19 ;tile*width*height
    77ac:	23 9f       	mul	r18, r19

        ld r16,Z+
    77ae:	01 91       	ld	r16, Z+
        nop
    77b0:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    77b2:	08 b9       	out	0x08, r16	; 8
        cpi r18,RAM_TILES_COUNT
    77b4:	2c 31       	cpi	r18, 0x1C	; 28
        rjmp .
    77b6:	00 c0       	rjmp	.+0      	; 0x77b8 <ramloop+0x18>
   
        ld r16,Z+
    77b8:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    77ba:	08 b9       	out	0x08, r16	; 8
        brcs .+2 
    77bc:	08 f0       	brcs	.+2      	; 0x77c0 <ramloop+0x20>
        movw r20,r2     ;ROM title table address +row offset    
    77be:	a1 01       	movw	r20, r2
   
   
        ld r16,Z+
    77c0:	01 91       	ld	r16, Z+
        add r0,r20    ;add title table address +row offset
    77c2:	04 0e       	add	r0, r20
        out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    77c4:	08 b9       	out	0x08, r16	; 8
        adc r1,r21
    77c6:	15 1e       	adc	r1, r21
        rjmp .
    77c8:	00 c0       	rjmp	.+0      	; 0x77ca <ramloop+0x2a>
    
        ld r16,Z+       
    77ca:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    77cc:	08 b9       	out	0x08, r16	; 8
        ld r7,Z+
    77ce:	71 90       	ld	r7, Z+
        ld r16,Z+   
    77d0:	01 91       	ld	r16, Z+
    
        movw ZL,r0
    77d2:	f0 01       	movw	r30, r0
        out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    77d4:	78 b8       	out	0x08, r7	; 8
        nop
    77d6:	00 00       	nop
        cpi r18,RAM_TILES_COUNT 
    77d8:	2c 31       	cpi	r18, 0x1C	; 28
        dec r17
    77da:	1a 95       	dec	r17
        breq end
    77dc:	21 f0       	breq	.+8      	; 0x77e6 <end>
    
        nop
    77de:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    77e0:	08 b9       	out	0x08, r16	; 8
    
        brcc romloop
    77e2:	00 f6       	brcc	.-128    	; 0x7764 <romloop>
        rjmp ramloop
    77e4:	dd cf       	rjmp	.-70     	; 0x77a0 <ramloop>

000077e6 <end>:
    
    end:
        out _SFR_IO_ADDR(DATA_PORT),r16     ;pixel 8
    77e6:	08 b9       	out	0x08, r16	; 8
        brid end_fine_scroll                ;hack: interrupt flag=0 => no fine offset pixel to draw
    77e8:	27 f5       	brid	.+72     	; 0x7832 <end_fine_scroll>
        brcc end_rom_fine_scroll_loop
    77ea:	30 f4       	brcc	.+12     	; 0x77f8 <end_rom_fine_scroll_loop>

    /***END RAM LOOP***/
        movw ZL,r0
    77ec:	f0 01       	movw	r30, r0

000077ee <end_ram_fine_scroll_loop>:
    end_ram_fine_scroll_loop:
        ld r16,Z+
    77ee:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    77f0:	08 b9       	out	0x08, r16	; 8
        dec r14
    77f2:	ea 94       	dec	r14
        brne end_ram_fine_scroll_loop
    77f4:	e1 f7       	brne	.-8      	; 0x77ee <end_ram_fine_scroll_loop>
        rjmp end_fine_scroll_ram
    77f6:	1f c0       	rjmp	.+62     	; 0x7836 <end_fine_scroll_ram>

000077f8 <end_rom_fine_scroll_loop>:

    /***END ROM LOOP***/
    end_rom_fine_scroll_loop:
        movw ZL,r12
    77f8:	f6 01       	movw	r30, r12
        nop
    77fa:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    77fc:	98 b8       	out	0x08, r9	; 8
        dec r14
    77fe:	ea 94       	dec	r14
        breq end_fine_scroll_rom
    7800:	c9 f0       	breq	.+50     	; 0x7834 <end_fine_scroll_rom>
    .rept 6
        lpm r16,Z+      
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        dec r14
        breq end_fine_scroll_rom
    .endr
    7802:	05 91       	lpm	r16, Z+
    7804:	08 b9       	out	0x08, r16	; 8
    7806:	ea 94       	dec	r14
    7808:	a9 f0       	breq	.+42     	; 0x7834 <end_fine_scroll_rom>
    780a:	05 91       	lpm	r16, Z+
    780c:	08 b9       	out	0x08, r16	; 8
    780e:	ea 94       	dec	r14
    7810:	89 f0       	breq	.+34     	; 0x7834 <end_fine_scroll_rom>
    7812:	05 91       	lpm	r16, Z+
    7814:	08 b9       	out	0x08, r16	; 8
    7816:	ea 94       	dec	r14
    7818:	69 f0       	breq	.+26     	; 0x7834 <end_fine_scroll_rom>
    781a:	05 91       	lpm	r16, Z+
    781c:	08 b9       	out	0x08, r16	; 8
    781e:	ea 94       	dec	r14
    7820:	49 f0       	breq	.+18     	; 0x7834 <end_fine_scroll_rom>
    7822:	05 91       	lpm	r16, Z+
    7824:	08 b9       	out	0x08, r16	; 8
    7826:	ea 94       	dec	r14
    7828:	29 f0       	breq	.+10     	; 0x7834 <end_fine_scroll_rom>
    782a:	05 91       	lpm	r16, Z+
    782c:	08 b9       	out	0x08, r16	; 8
    782e:	ea 94       	dec	r14
    7830:	09 f0       	breq	.+2      	; 0x7834 <end_fine_scroll_rom>

00007832 <end_fine_scroll>:
	...

00007834 <end_fine_scroll_rom>:
	...

00007836 <end_fine_scroll_ram>:
    end_fine_scroll:    
        nop
    end_fine_scroll_rom:
        nop
    end_fine_scroll_ram:
        clr r16 
    7836:	00 27       	eor	r16, r16
        out _SFR_IO_ADDR(DATA_PORT),r16   
    7838:	08 b9       	out	0x08, r16	; 8

        pop r6
    783a:	6f 90       	pop	r6
        pop r7
    783c:	7f 90       	pop	r7
        pop r9
    783e:	9f 90       	pop	r9
        pop r12
    7840:	cf 90       	pop	r12
        pop r13
    7842:	df 90       	pop	r13
        pop r19
    7844:	3f 91       	pop	r19
        pop r22
    7846:	6f 91       	pop	r22
        pop r23
    7848:	7f 91       	pop	r23
        pop YH
    784a:	df 91       	pop	r29
        pop YL
    784c:	cf 91       	pop	r28

        ret
    784e:	08 95       	ret

00007850 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
    ldi r18,TILE_HEIGHT*TILE_WIDTH
    7850:	20 e4       	ldi	r18, 0x40	; 64

    ;compute source adress
    lds ZL,tile_table_lo
    7852:	e0 91 ac 0c 	lds	r30, 0x0CAC
    lds ZH,tile_table_hi
    7856:	f0 91 ad 0c 	lds	r31, 0x0CAD
    mul r24,r18
    785a:	82 9f       	mul	r24, r18
    add ZL,r0
    785c:	e0 0d       	add	r30, r0
    adc ZH,r1
    785e:	f1 1d       	adc	r31, r1

    ;compute destination adress
    ldi XL,lo8(ram_tiles)
    7860:	a0 e5       	ldi	r26, 0x50	; 80
    ldi XH,hi8(ram_tiles)
    7862:	b5 e0       	ldi	r27, 0x05	; 5
    mul r22,r18
    7864:	62 9f       	mul	r22, r18
    add XL,r0
    7866:	a0 0d       	add	r26, r0
    adc XH,r1
    7868:	b1 1d       	adc	r27, r1

    ;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
    lpm r1,Z+
    st X+,r1
.endr
    786a:	15 90       	lpm	r1, Z+
    786c:	1d 92       	st	X+, r1
    786e:	15 90       	lpm	r1, Z+
    7870:	1d 92       	st	X+, r1
    7872:	15 90       	lpm	r1, Z+
    7874:	1d 92       	st	X+, r1
    7876:	15 90       	lpm	r1, Z+
    7878:	1d 92       	st	X+, r1
    787a:	15 90       	lpm	r1, Z+
    787c:	1d 92       	st	X+, r1
    787e:	15 90       	lpm	r1, Z+
    7880:	1d 92       	st	X+, r1
    7882:	15 90       	lpm	r1, Z+
    7884:	1d 92       	st	X+, r1
    7886:	15 90       	lpm	r1, Z+
    7888:	1d 92       	st	X+, r1
    788a:	15 90       	lpm	r1, Z+
    788c:	1d 92       	st	X+, r1
    788e:	15 90       	lpm	r1, Z+
    7890:	1d 92       	st	X+, r1
    7892:	15 90       	lpm	r1, Z+
    7894:	1d 92       	st	X+, r1
    7896:	15 90       	lpm	r1, Z+
    7898:	1d 92       	st	X+, r1
    789a:	15 90       	lpm	r1, Z+
    789c:	1d 92       	st	X+, r1
    789e:	15 90       	lpm	r1, Z+
    78a0:	1d 92       	st	X+, r1
    78a2:	15 90       	lpm	r1, Z+
    78a4:	1d 92       	st	X+, r1
    78a6:	15 90       	lpm	r1, Z+
    78a8:	1d 92       	st	X+, r1
    78aa:	15 90       	lpm	r1, Z+
    78ac:	1d 92       	st	X+, r1
    78ae:	15 90       	lpm	r1, Z+
    78b0:	1d 92       	st	X+, r1
    78b2:	15 90       	lpm	r1, Z+
    78b4:	1d 92       	st	X+, r1
    78b6:	15 90       	lpm	r1, Z+
    78b8:	1d 92       	st	X+, r1
    78ba:	15 90       	lpm	r1, Z+
    78bc:	1d 92       	st	X+, r1
    78be:	15 90       	lpm	r1, Z+
    78c0:	1d 92       	st	X+, r1
    78c2:	15 90       	lpm	r1, Z+
    78c4:	1d 92       	st	X+, r1
    78c6:	15 90       	lpm	r1, Z+
    78c8:	1d 92       	st	X+, r1
    78ca:	15 90       	lpm	r1, Z+
    78cc:	1d 92       	st	X+, r1
    78ce:	15 90       	lpm	r1, Z+
    78d0:	1d 92       	st	X+, r1
    78d2:	15 90       	lpm	r1, Z+
    78d4:	1d 92       	st	X+, r1
    78d6:	15 90       	lpm	r1, Z+
    78d8:	1d 92       	st	X+, r1
    78da:	15 90       	lpm	r1, Z+
    78dc:	1d 92       	st	X+, r1
    78de:	15 90       	lpm	r1, Z+
    78e0:	1d 92       	st	X+, r1
    78e2:	15 90       	lpm	r1, Z+
    78e4:	1d 92       	st	X+, r1
    78e6:	15 90       	lpm	r1, Z+
    78e8:	1d 92       	st	X+, r1
    78ea:	15 90       	lpm	r1, Z+
    78ec:	1d 92       	st	X+, r1
    78ee:	15 90       	lpm	r1, Z+
    78f0:	1d 92       	st	X+, r1
    78f2:	15 90       	lpm	r1, Z+
    78f4:	1d 92       	st	X+, r1
    78f6:	15 90       	lpm	r1, Z+
    78f8:	1d 92       	st	X+, r1
    78fa:	15 90       	lpm	r1, Z+
    78fc:	1d 92       	st	X+, r1
    78fe:	15 90       	lpm	r1, Z+
    7900:	1d 92       	st	X+, r1
    7902:	15 90       	lpm	r1, Z+
    7904:	1d 92       	st	X+, r1
    7906:	15 90       	lpm	r1, Z+
    7908:	1d 92       	st	X+, r1
    790a:	15 90       	lpm	r1, Z+
    790c:	1d 92       	st	X+, r1
    790e:	15 90       	lpm	r1, Z+
    7910:	1d 92       	st	X+, r1
    7912:	15 90       	lpm	r1, Z+
    7914:	1d 92       	st	X+, r1
    7916:	15 90       	lpm	r1, Z+
    7918:	1d 92       	st	X+, r1
    791a:	15 90       	lpm	r1, Z+
    791c:	1d 92       	st	X+, r1
    791e:	15 90       	lpm	r1, Z+
    7920:	1d 92       	st	X+, r1
    7922:	15 90       	lpm	r1, Z+
    7924:	1d 92       	st	X+, r1
    7926:	15 90       	lpm	r1, Z+
    7928:	1d 92       	st	X+, r1
    792a:	15 90       	lpm	r1, Z+
    792c:	1d 92       	st	X+, r1
    792e:	15 90       	lpm	r1, Z+
    7930:	1d 92       	st	X+, r1
    7932:	15 90       	lpm	r1, Z+
    7934:	1d 92       	st	X+, r1
    7936:	15 90       	lpm	r1, Z+
    7938:	1d 92       	st	X+, r1
    793a:	15 90       	lpm	r1, Z+
    793c:	1d 92       	st	X+, r1
    793e:	15 90       	lpm	r1, Z+
    7940:	1d 92       	st	X+, r1
    7942:	15 90       	lpm	r1, Z+
    7944:	1d 92       	st	X+, r1
    7946:	15 90       	lpm	r1, Z+
    7948:	1d 92       	st	X+, r1
    794a:	15 90       	lpm	r1, Z+
    794c:	1d 92       	st	X+, r1
    794e:	15 90       	lpm	r1, Z+
    7950:	1d 92       	st	X+, r1
    7952:	15 90       	lpm	r1, Z+
    7954:	1d 92       	st	X+, r1
    7956:	15 90       	lpm	r1, Z+
    7958:	1d 92       	st	X+, r1
    795a:	15 90       	lpm	r1, Z+
    795c:	1d 92       	st	X+, r1
    795e:	15 90       	lpm	r1, Z+
    7960:	1d 92       	st	X+, r1
    7962:	15 90       	lpm	r1, Z+
    7964:	1d 92       	st	X+, r1
    7966:	15 90       	lpm	r1, Z+
    7968:	1d 92       	st	X+, r1
    clr r1
    796a:	11 24       	eor	r1, r1
    ret
    796c:	08 95       	ret

0000796e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

    ldi r18,TILE_HEIGHT*TILE_WIDTH
    796e:	20 e4       	ldi	r18, 0x40	; 64

    ;compute source adress
    ldi ZL,lo8(ram_tiles)
    7970:	e0 e5       	ldi	r30, 0x50	; 80
    ldi ZH,hi8(ram_tiles)
    7972:	f5 e0       	ldi	r31, 0x05	; 5
    mul r24,r18
    7974:	82 9f       	mul	r24, r18
    add ZL,r0
    7976:	e0 0d       	add	r30, r0
    adc ZH,r1
    7978:	f1 1d       	adc	r31, r1

    ;compute destination adress
    ldi XL,lo8(ram_tiles)
    797a:	a0 e5       	ldi	r26, 0x50	; 80
    ldi XH,hi8(ram_tiles)
    797c:	b5 e0       	ldi	r27, 0x05	; 5
    mul r22,r18
    797e:	62 9f       	mul	r22, r18
    add XL,r0
    7980:	a0 0d       	add	r26, r0
    adc XH,r1
    7982:	b1 1d       	adc	r27, r1

    ;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
    ld r1,Z+
    st X+,r1
.endr
    7984:	11 90       	ld	r1, Z+
    7986:	1d 92       	st	X+, r1
    7988:	11 90       	ld	r1, Z+
    798a:	1d 92       	st	X+, r1
    798c:	11 90       	ld	r1, Z+
    798e:	1d 92       	st	X+, r1
    7990:	11 90       	ld	r1, Z+
    7992:	1d 92       	st	X+, r1
    7994:	11 90       	ld	r1, Z+
    7996:	1d 92       	st	X+, r1
    7998:	11 90       	ld	r1, Z+
    799a:	1d 92       	st	X+, r1
    799c:	11 90       	ld	r1, Z+
    799e:	1d 92       	st	X+, r1
    79a0:	11 90       	ld	r1, Z+
    79a2:	1d 92       	st	X+, r1
    79a4:	11 90       	ld	r1, Z+
    79a6:	1d 92       	st	X+, r1
    79a8:	11 90       	ld	r1, Z+
    79aa:	1d 92       	st	X+, r1
    79ac:	11 90       	ld	r1, Z+
    79ae:	1d 92       	st	X+, r1
    79b0:	11 90       	ld	r1, Z+
    79b2:	1d 92       	st	X+, r1
    79b4:	11 90       	ld	r1, Z+
    79b6:	1d 92       	st	X+, r1
    79b8:	11 90       	ld	r1, Z+
    79ba:	1d 92       	st	X+, r1
    79bc:	11 90       	ld	r1, Z+
    79be:	1d 92       	st	X+, r1
    79c0:	11 90       	ld	r1, Z+
    79c2:	1d 92       	st	X+, r1
    79c4:	11 90       	ld	r1, Z+
    79c6:	1d 92       	st	X+, r1
    79c8:	11 90       	ld	r1, Z+
    79ca:	1d 92       	st	X+, r1
    79cc:	11 90       	ld	r1, Z+
    79ce:	1d 92       	st	X+, r1
    79d0:	11 90       	ld	r1, Z+
    79d2:	1d 92       	st	X+, r1
    79d4:	11 90       	ld	r1, Z+
    79d6:	1d 92       	st	X+, r1
    79d8:	11 90       	ld	r1, Z+
    79da:	1d 92       	st	X+, r1
    79dc:	11 90       	ld	r1, Z+
    79de:	1d 92       	st	X+, r1
    79e0:	11 90       	ld	r1, Z+
    79e2:	1d 92       	st	X+, r1
    79e4:	11 90       	ld	r1, Z+
    79e6:	1d 92       	st	X+, r1
    79e8:	11 90       	ld	r1, Z+
    79ea:	1d 92       	st	X+, r1
    79ec:	11 90       	ld	r1, Z+
    79ee:	1d 92       	st	X+, r1
    79f0:	11 90       	ld	r1, Z+
    79f2:	1d 92       	st	X+, r1
    79f4:	11 90       	ld	r1, Z+
    79f6:	1d 92       	st	X+, r1
    79f8:	11 90       	ld	r1, Z+
    79fa:	1d 92       	st	X+, r1
    79fc:	11 90       	ld	r1, Z+
    79fe:	1d 92       	st	X+, r1
    7a00:	11 90       	ld	r1, Z+
    7a02:	1d 92       	st	X+, r1
    7a04:	11 90       	ld	r1, Z+
    7a06:	1d 92       	st	X+, r1
    7a08:	11 90       	ld	r1, Z+
    7a0a:	1d 92       	st	X+, r1
    7a0c:	11 90       	ld	r1, Z+
    7a0e:	1d 92       	st	X+, r1
    7a10:	11 90       	ld	r1, Z+
    7a12:	1d 92       	st	X+, r1
    7a14:	11 90       	ld	r1, Z+
    7a16:	1d 92       	st	X+, r1
    7a18:	11 90       	ld	r1, Z+
    7a1a:	1d 92       	st	X+, r1
    7a1c:	11 90       	ld	r1, Z+
    7a1e:	1d 92       	st	X+, r1
    7a20:	11 90       	ld	r1, Z+
    7a22:	1d 92       	st	X+, r1
    7a24:	11 90       	ld	r1, Z+
    7a26:	1d 92       	st	X+, r1
    7a28:	11 90       	ld	r1, Z+
    7a2a:	1d 92       	st	X+, r1
    7a2c:	11 90       	ld	r1, Z+
    7a2e:	1d 92       	st	X+, r1
    7a30:	11 90       	ld	r1, Z+
    7a32:	1d 92       	st	X+, r1
    7a34:	11 90       	ld	r1, Z+
    7a36:	1d 92       	st	X+, r1
    7a38:	11 90       	ld	r1, Z+
    7a3a:	1d 92       	st	X+, r1
    7a3c:	11 90       	ld	r1, Z+
    7a3e:	1d 92       	st	X+, r1
    7a40:	11 90       	ld	r1, Z+
    7a42:	1d 92       	st	X+, r1
    7a44:	11 90       	ld	r1, Z+
    7a46:	1d 92       	st	X+, r1
    7a48:	11 90       	ld	r1, Z+
    7a4a:	1d 92       	st	X+, r1
    7a4c:	11 90       	ld	r1, Z+
    7a4e:	1d 92       	st	X+, r1
    7a50:	11 90       	ld	r1, Z+
    7a52:	1d 92       	st	X+, r1
    7a54:	11 90       	ld	r1, Z+
    7a56:	1d 92       	st	X+, r1
    7a58:	11 90       	ld	r1, Z+
    7a5a:	1d 92       	st	X+, r1
    7a5c:	11 90       	ld	r1, Z+
    7a5e:	1d 92       	st	X+, r1
    7a60:	11 90       	ld	r1, Z+
    7a62:	1d 92       	st	X+, r1
    7a64:	11 90       	ld	r1, Z+
    7a66:	1d 92       	st	X+, r1
    7a68:	11 90       	ld	r1, Z+
    7a6a:	1d 92       	st	X+, r1
    7a6c:	11 90       	ld	r1, Z+
    7a6e:	1d 92       	st	X+, r1
    7a70:	11 90       	ld	r1, Z+
    7a72:	1d 92       	st	X+, r1
    7a74:	11 90       	ld	r1, Z+
    7a76:	1d 92       	st	X+, r1
    7a78:	11 90       	ld	r1, Z+
    7a7a:	1d 92       	st	X+, r1
    7a7c:	11 90       	ld	r1, Z+
    7a7e:	1d 92       	st	X+, r1
    7a80:	11 90       	ld	r1, Z+
    7a82:	1d 92       	st	X+, r1
    clr r1
    7a84:	11 24       	eor	r1, r1
    ret
    7a86:	08 95       	ret

00007a88 <BlitSprite>:
; r21:r20: Y:X (0 or 1, location of 8x8 sprite fragment on 2x2 tile container)
; r19:r18: DY:DX (0 to 7, offset of sprite relative to 0:0 of container)
;************************************
BlitSprite:

    push  YL
    7a88:	cf 93       	push	r28
    push  YH
    7a8a:	df 93       	push	r29

    ; src = sprites_tiletable_lo + (sprites[i].tileIndex * TILE_HEIGHT * TILE_WIDTH)

    ldi   r25,     SPRITE_STRUCT_SIZE
    7a8c:	94 e0       	ldi	r25, 0x04	; 4
    mul   r24,     r25
    7a8e:	89 9f       	mul	r24, r25

    movw  ZL,      r0
    7a90:	f0 01       	movw	r30, r0
    subi  ZL,      lo8(-(sprites))
    7a92:	e0 5f       	subi	r30, 0xF0	; 240
    sbci  ZH,      hi8(-(sprites))
    7a94:	fa 4f       	sbci	r31, 0xFA	; 250

    ldd   r23,     Z + sprFlags
    7a96:	73 81       	ldd	r23, Z+3	; 0x03

    ; 8x16 multiply

    ldd   r24,     Z + sprTileIndex
    7a98:	82 81       	ldd	r24, Z+2	; 0x02
    ldi   ZL,      TILE_WIDTH * TILE_HEIGHT
    7a9a:	e0 e4       	ldi	r30, 0x40	; 64
    mul   r24,     ZL
    7a9c:	8e 9f       	mul	r24, r30
    movw  XL,      r0
    7a9e:	d0 01       	movw	r26, r0

    ; Get tile bank addr

    ldi   r25,     4 * 2
    7aa0:	98 e0       	ldi	r25, 0x08	; 8
    mul   r23,     r25
    7aa2:	79 9f       	mul	r23, r25
    mov   YL,      r1
    7aa4:	c1 2d       	mov	r28, r1
    clr   YH
    7aa6:	dd 27       	eor	r29, r29
    subi  YL,      lo8(-(sprites_tile_banks))
    7aa8:	cc 55       	subi	r28, 0x5C	; 92
    sbci  YH,      hi8(-(sprites_tile_banks))
    7aaa:	d3 4f       	sbci	r29, 0xF3	; 243
    ldd   ZL,      Y + 0
    7aac:	e8 81       	ld	r30, Y
    ldd   ZH,      Y + 1
    7aae:	f9 81       	ldd	r31, Y+1	; 0x01
    add   ZL,      XL      ; Tile data src
    7ab0:	ea 0f       	add	r30, r26
    adc   ZH,      XH
    7ab2:	fb 1f       	adc	r31, r27

    ; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

    ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7ab4:	90 e4       	ldi	r25, 0x40	; 64
    mul   r22,     r25
    7ab6:	69 9f       	mul	r22, r25
    movw  XL,      r0
    7ab8:	d0 01       	movw	r26, r0
    subi  XL,      lo8(-(ram_tiles))
    7aba:	a0 5b       	subi	r26, 0xB0	; 176
    sbci  XH,      hi8(-(ram_tiles))
    7abc:	ba 4f       	sbci	r27, 0xFA	; 250
            dest += (xspan - 1U);
        }
    }
    */

    clr   r1
    7abe:	11 24       	eor	r1, r1
    clr   YH               ; srcXdiff high byte
    7ac0:	dd 27       	eor	r29, r29
    sbrc  r20,     0
    7ac2:	40 fd       	sbrc	r20, 0
    rjmp  x_2nd_tile
    7ac4:	0d c0       	rjmp	.+26     	; 0x7ae0 <x_2nd_tile>

    mov   YL,      r18     ; srcXdiff = dx
    7ac6:	c2 2f       	mov	r28, r18
    ldi   r20,     TILE_WIDTH
    7ac8:	48 e0       	ldi	r20, 0x08	; 8
    sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7aca:	42 1b       	sub	r20, r18
    sbrc  r23,     SPRITE_FLIP_X_BIT
    7acc:	70 fd       	sbrc	r23, 0
    rjmp  x_1st_tile_xf
    7ace:	03 c0       	rjmp	.+6      	; 0x7ad6 <x_1st_tile_xf>

    add   XL,      r18
    7ad0:	a2 0f       	add	r26, r18
    adc   XH,      r1      ; dest += dx
    7ad2:	b1 1d       	adc	r27, r1
    rjmp  x_check_end
    7ad4:	10 c0       	rjmp	.+32     	; 0x7af6 <x_check_end>

00007ad6 <x_1st_tile_xf>:

x_1st_tile_xf:

    adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1U)
    7ad6:	17 96       	adiw	r26, 0x07	; 7
    adiw  ZL,      TILE_WIDTH
    7ad8:	38 96       	adiw	r30, 0x08	; 8
    sub   ZL,      r20
    7ada:	e4 1b       	sub	r30, r20
    sbc   ZH,      r1      ; src += (TILE_WIDTH - xspan)
    7adc:	f1 09       	sbc	r31, r1
    rjmp  x_check_end
    7ade:	0b c0       	rjmp	.+22     	; 0x7af6 <x_check_end>

00007ae0 <x_2nd_tile>:

x_2nd_tile:

    ldi   YL,      TILE_WIDTH
    7ae0:	c8 e0       	ldi	r28, 0x08	; 8
    sub   YL,      r18     ; srcXdiff = TILE_WIDTH - dx
    7ae2:	c2 1b       	sub	r28, r18
    mov   r20,     r18     ; xspan = dx;
    7ae4:	42 2f       	mov	r20, r18
    sbrc  r23,     SPRITE_FLIP_X_BIT
    7ae6:	70 fd       	sbrc	r23, 0
    rjmp  x_2nd_tile_xf
    7ae8:	03 c0       	rjmp	.+6      	; 0x7af0 <x_2nd_tile_xf>

    add   ZL,      YL
    7aea:	ec 0f       	add	r30, r28
    adc   ZH,      r1      ; src += srcXdiff
    7aec:	f1 1d       	adc	r31, r1
    rjmp  x_check_end
    7aee:	03 c0       	rjmp	.+6      	; 0x7af6 <x_check_end>

00007af0 <x_2nd_tile_xf>:

x_2nd_tile_xf:

    add   XL,      r20
    7af0:	a4 0f       	add	r26, r20
    adc   XH,      r1
    7af2:	b1 1d       	adc	r27, r1
    sbiw  XL,      1       ; dest += (xspan - 1U)
    7af4:	11 97       	sbiw	r26, 0x01	; 1

00007af6 <x_check_end>:
            src += (ydiff * TILE_WIDTH);
        }
    }
    */

    cpi   r21,     0
    7af6:	50 30       	cpi	r21, 0x00	; 0
    brne  y_2nd_tile
    7af8:	51 f4       	brne	.+20     	; 0x7b0e <y_2nd_tile>

    ldi   r25,     TILE_WIDTH ; dest += (dy * TILE_WIDTH)
    7afa:	98 e0       	ldi	r25, 0x08	; 8
    mul   r25,     r19
    7afc:	93 9f       	mul	r25, r19
    add   XL,      r0
    7afe:	a0 0d       	add	r26, r0
    adc   XH,      r1
    7b00:	b1 1d       	adc	r27, r1

    mov   r25,     r19        ; ydiff = dy
    7b02:	93 2f       	mov	r25, r19

    sbrc  r23,     SPRITE_FLIP_Y_BIT
    7b04:	71 fd       	sbrc	r23, 1
    subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7b06:	e8 5c       	subi	r30, 0xC8	; 200
    sbrc  r23,     SPRITE_FLIP_Y_BIT
    7b08:	71 fd       	sbrc	r23, 1
    sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7b0a:	ff 4f       	sbci	r31, 0xFF	; 255

    rjmp y_check_end
    7b0c:	0a c0       	rjmp	.+20     	; 0x7b22 <y_check_end>

00007b0e <y_2nd_tile>:

y_2nd_tile:

    ldi   r25,     TILE_HEIGHT ; ydiff = (TILE_HEIGHT - dy)
    7b0e:	98 e0       	ldi	r25, 0x08	; 8
    sub   r25,     r19
    7b10:	93 1b       	sub	r25, r19

    mov   r1,      r19         ; temp = dy - 1
    7b12:	13 2e       	mov	r1, r19
    dec   r1
    7b14:	1a 94       	dec	r1
    sbrs  r23,     SPRITE_FLIP_Y_BIT
    7b16:	71 ff       	sbrs	r23, 1
    mov   r1,      r25         ; temp = ydiff
    7b18:	19 2e       	mov	r1, r25

    ldi   r21,     TILE_WIDTH  ; src += (temp * TILE_WIDTH)
    7b1a:	58 e0       	ldi	r21, 0x08	; 8
    mul   r21,     r1
    7b1c:	51 9d       	mul	r21, r1
    add   ZL,      r0
    7b1e:	e0 0d       	add	r30, r0
    adc   ZH,      r1
    7b20:	f1 1d       	adc	r31, r1

00007b22 <y_check_end>:
    if ((flags & SPRITE_FLIP_Y) != 0U){
        srcXdiff -= (TILE_WIDTH * 2);
    }
    */

    sbrc  r23,     SPRITE_FLIP_Y_BIT
    7b22:	71 fd       	sbrc	r23, 1
    sbiw  YL,      (TILE_WIDTH * 2)
    7b24:	60 97       	sbiw	r28, 0x10	; 16
        destXdiff = TILE_WIDTH + xspan;
        step = -1;
    }
    */

    ldi   r24,     TILE_WIDTH ; destXdiff = TILE_WIDTH
    7b26:	88 e0       	ldi	r24, 0x08	; 8
    sbrc  r23,     SPRITE_FLIP_X_BIT
    7b28:	70 fd       	sbrc	r23, 0
    rjmp  x_diff_xf
    7b2a:	04 c0       	rjmp	.+8      	; 0x7b34 <x_diff_xf>

    sub   r24,     r20     ; destXdiff -= xspan
    7b2c:	84 1b       	sub	r24, r20
    ldi   r23,     0x00
    7b2e:	70 e0       	ldi	r23, 0x00	; 0
    ldi   r22,     0x01    ; step = 1
    7b30:	61 e0       	ldi	r22, 0x01	; 1
    rjmp  x_diff_end
    7b32:	03 c0       	rjmp	.+6      	; 0x7b3a <x_diff_end>

00007b34 <x_diff_xf>:

x_diff_xf:

    add   r24,     r20     ; destXdiff += xspan
    7b34:	84 0f       	add	r24, r20
    ldi   r23,     0xFF
    7b36:	7f ef       	ldi	r23, 0xFF	; 255
    ldi   r22,     0xFF    ; step = -1
    7b38:	6f ef       	ldi	r22, 0xFF	; 255

00007b3a <x_diff_end>:
    ;     r25 = ydiff
    ;       X = dest
    ;       Y = srcXdiff
    ;       Z = src

    clr   r1
    7b3a:	11 24       	eor	r1, r1
    ldi   r19,     TRANSLUCENT_COLOR
    7b3c:	3e ef       	ldi	r19, 0xFE	; 254

    ldi   r21,     TILE_HEIGHT
    7b3e:	58 e0       	ldi	r21, 0x08	; 8
    sub   r21,     r25     ; yspan = (TILE_HEIGHT - ydiff)
    7b40:	59 1b       	sub	r21, r25
    mov   r0,      r20     ; xspan
    7b42:	04 2e       	mov	r0, r20
    inc   r0
    7b44:	03 94       	inc	r0

00007b46 <y_loop>:

y_loop:
    mov   r20,     r0      ; xspan
    7b46:	40 2d       	mov	r20, r0
    lsr   r20
    7b48:	46 95       	lsr	r20
    brcc  x_loop1
    7b4a:	28 f4       	brcc	.+10     	; 0x7b56 <x_loop1>

00007b4c <x_loop0>:

x_loop0:
    lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7b4c:	25 91       	lpm	r18, Z+
    cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7b4e:	23 13       	cpse	r18, r19
    st    X,       r18     ; *dest = px
    7b50:	2c 93       	st	X, r18
    add   XL,      r22     ; dest += step;
    7b52:	a6 0f       	add	r26, r22
    adc   XH,      r23
    7b54:	b7 1f       	adc	r27, r23

00007b56 <x_loop1>:
x_loop1:
    lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7b56:	25 91       	lpm	r18, Z+
    cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7b58:	23 13       	cpse	r18, r19
    st    X,       r18     ; *dest = px
    7b5a:	2c 93       	st	X, r18
    add   XL,      r22     ; dest += step;
    7b5c:	a6 0f       	add	r26, r22
    adc   XH,      r23
    7b5e:	b7 1f       	adc	r27, r23
    subi  r20,     1
    7b60:	41 50       	subi	r20, 0x01	; 1
    brne  x_loop0
    7b62:	a1 f7       	brne	.-24     	; 0x7b4c <x_loop0>

    add   ZL,      YL      ; src += srcXdiff
    7b64:	ec 0f       	add	r30, r28
    adc   ZH,      YH
    7b66:	fd 1f       	adc	r31, r29
    add   XL,      r24     ; dest += destXdiff
    7b68:	a8 0f       	add	r26, r24
    adc   XH,      r1
    7b6a:	b1 1d       	adc	r27, r1
    dec   r21
    7b6c:	5a 95       	dec	r21
    brne  y_loop
    7b6e:	59 f7       	brne	.-42     	; 0x7b46 <y_loop>

    pop   YH
    7b70:	df 91       	pop	r29
    pop   YL
    7b72:	cf 91       	pop	r28
    ret
    7b74:	08 95       	ret

00007b76 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7b76:	0f 92       	push	r0
	push r1
    7b78:	1f 92       	push	r1
	push ZL;2
    7b7a:	ef 93       	push	r30
	push ZH;2
    7b7c:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7b7e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7b80:	ef 93       	push	r30
   ; Use an alternate way to shave off 5 cycles jitter faster. It shifts
   ; all timing 57 cycles "down", so every Timer related comment and code
   ; should subtract 57 to align with this (Notes: Everything works as
   ; normal except video modes using the Timer to terminate the line).

   lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x12 - 0x17 (5 cy jitter)
    7b82:	e0 91 84 00 	lds	r30, 0x0084

   cpi   ZL,      0x16    ; ( 1)
    7b86:	e6 31       	cpi	r30, 0x16	; 22
   breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    7b88:	01 f0       	breq	.+0      	; 0x7b8a <__vector_13+0x14>
   brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    7b8a:	28 f4       	brcc	.+10     	; 0x7b96 <__vector_13+0x20>
   cpi   ZL,      0x14    ; ()
    7b8c:	e4 31       	cpi	r30, 0x14	; 20
   breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    7b8e:	01 f0       	breq	.+0      	; 0x7b90 <__vector_13+0x1a>
   brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    7b90:	18 f4       	brcc	.+6      	; 0x7b98 <__vector_13+0x22>
   cpi   ZL,      0x12    ; ()
    7b92:	e2 31       	cpi	r30, 0x12	; 18
   breq  .                ; ()   +5 / +4 (10 / 9)
    7b94:	01 f0       	breq	.+0      	; 0x7b96 <__vector_13+0x20>
   nop                    ; ( 5) Timer at 0x1C
    7b96:	00 00       	nop

;  WAIT  ZL,      57      ; Realigns with original kernel

	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7b98:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7b9c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7b9e:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7ba2:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    7ba6:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7ba8:	55 c0       	rjmp	.+170    	; 0x7c54 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7baa:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7bac:	98 f0       	brcs	.+38     	; 0x7bd4 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7bae:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7bb0:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7bb4:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7bb6:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7bba:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7bbc:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7bbe:	26 f4       	brtc	.+8      	; 0x7bc8 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7bc0:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7bc2:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <update_sound>
	rjmp sync_end
    7bc6:	b5 c0       	rjmp	.+362    	; 0x7d32 <sync_end>

00007bc8 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7bc8:	e5 e1       	ldi	r30, 0x15	; 21
    7bca:	ea 95       	dec	r30
    7bcc:	f1 f7       	brne	.-4      	; 0x7bca <sync_pre_eq_no_sound_update+0x2>
    7bce:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7bd0:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7bd2:	af c0       	rjmp	.+350    	; 0x7d32 <sync_end>

00007bd4 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7bd4:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7bd6:	28 f1       	brcs	.+74     	; 0x7c22 <sync_post_eq>

	rjmp .
    7bd8:	00 c0       	rjmp	.+0      	; 0x7bda <sync_eq+0x6>
	rjmp .
    7bda:	00 c0       	rjmp	.+0      	; 0x7bdc <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7bdc:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7bde:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7be0:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7be2:	16 f4       	brtc	.+4      	; 0x7be8 <sync_eq_skip>
	
	call update_sound
    7be4:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <update_sound>

00007be8 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7be8:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7bea:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7bee:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7bf0:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7bf4:	9e c0       	rjmp	.+316    	; 0x7d32 <sync_end>

00007bf6 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7bf6:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7bf8:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7bfa:	ef 93       	push	r30
;  breq  .                ; ()   +5 / +4 (10 / 9)
;  nop                    ; ( 5) Timer at 0x67 

;  WAIT  ZL,      6       ; Realigns with original kernel

    lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x2A - 0x2F (5 cy jitter)
    7bfc:	e0 91 84 00 	lds	r30, 0x0084

    cpi   ZL,      0x2E    ; ( 1)
    7c00:	ee 32       	cpi	r30, 0x2E	; 46
    breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    7c02:	01 f0       	breq	.+0      	; 0x7c04 <__vector_14+0xe>
    brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    7c04:	28 f4       	brcc	.+10     	; 0x7c10 <__vector_14+0x1a>
    cpi   ZL,      0x2C    ; ()
    7c06:	ec 32       	cpi	r30, 0x2C	; 44
    breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    7c08:	01 f0       	breq	.+0      	; 0x7c0a <__vector_14+0x14>
    brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    7c0a:	18 f4       	brcc	.+6      	; 0x7c12 <__vector_14+0x1c>
    cpi   ZL,      0x2A    ; ()
    7c0c:	ea 32       	cpi	r30, 0x2A	; 42
    breq  .                ; ()   +5 / +4 (10 / 9)
    7c0e:	01 f0       	breq	.+0      	; 0x7c10 <__vector_14+0x1a>
    nop                    ; ( 5) Timer at 0x34
    7c10:	00 00       	nop

;   WAIT  ZL,      57      ; Realigns with original kernel

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7c12:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7c14:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7c16:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7c1a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7c1c:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7c1e:	ef 91       	pop	r30
	reti
    7c20:	18 95       	reti

00007c22 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7c22:	00 c0       	rjmp	.+0      	; 0x7c24 <sync_post_eq+0x2>

	bst ZL,0
    7c24:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7c26:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7c28:	26 f4       	brtc	.+8      	; 0x7c32 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7c2a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7c2c:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <update_sound>
	rjmp sync_pre_eq_cont
    7c30:	05 c0       	rjmp	.+10     	; 0x7c3c <sync_pre_eq_cont>

00007c32 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7c32:	e5 e1       	ldi	r30, 0x15	; 21
    7c34:	ea 95       	dec	r30
    7c36:	f1 f7       	brne	.-4      	; 0x7c34 <sync_post_eq_no_sound_update+0x2>
    7c38:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7c3a:	28 9a       	sbi	0x05, 0	; 5

00007c3c <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7c3c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7c40:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7c42:	09 f0       	breq	.+2      	; 0x7c46 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7c44:	76 c0       	rjmp	.+236    	; 0x7d32 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7c46:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7c48:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7c4c:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7c4e:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7c52:	6f c0       	rjmp	.+222    	; 0x7d32 <sync_end>

00007c54 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7c54:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7c56:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7c5a:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7c5c:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7c60:	00 c0       	rjmp	.+0      	; 0x7c62 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7c62:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7c64:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7c66:	00 c0       	rjmp	.+0      	; 0x7c68 <sync_hsync+0x14>
	call update_sound
    7c68:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7c6c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7c6e:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7c72:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7c74:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7c78:	ef 17       	cp	r30, r31
	brsh no_render
    7c7a:	d0 f4       	brcc	.+52     	; 0x7cb0 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7c7c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7c7e:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7c82:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7c84:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7c88:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7c8a:	ef 17       	cp	r30, r31
	brlo no_render
    7c8c:	88 f0       	brcs	.+34     	; 0x7cb0 <no_render>

	;push r1-r29
	ldi ZL,29
    7c8e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7c90:	ff 27       	eor	r31, r31

00007c92 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7c92:	00 80       	ld	r0, Z
	push r0
    7c94:	0f 92       	push	r0
	dec ZL
    7c96:	ea 95       	dec	r30
	brne push_loop	
    7c98:	e1 f7       	brne	.-8      	; 0x7c92 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7c9a:	06 e0       	ldi	r16, 0x06	; 6
    7c9c:	0a 95       	dec	r16
    7c9e:	f1 f7       	brne	.-4      	; 0x7c9c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7ca0:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7ca4:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7ca6:	ff 27       	eor	r31, r31

00007ca8 <pop_loop>:
pop_loop:
	pop r0
    7ca8:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7caa:	01 92       	st	Z+, r0
	cpi ZL,30
    7cac:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7cae:	e0 f3       	brcs	.-8      	; 0x7ca8 <pop_loop>

00007cb0 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7cb0:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7cb4:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7cb6:	09 f0       	breq	.+2      	; 0x7cba <no_render+0xa>
	rjmp sync_end
    7cb8:	3c c0       	rjmp	.+120    	; 0x7d32 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7cba:	2f 93       	push	r18
	push r19
    7cbc:	3f 93       	push	r19
	push r20
    7cbe:	4f 93       	push	r20
	push r21
    7cc0:	5f 93       	push	r21
	push r22
    7cc2:	6f 93       	push	r22
	push r23
    7cc4:	7f 93       	push	r23
	push r24
    7cc6:	8f 93       	push	r24
	push r25
    7cc8:	9f 93       	push	r25
	push r26
    7cca:	af 93       	push	r26
	push r27
    7ccc:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7cce:	78 94       	sei
	clr r1
    7cd0:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7cd2:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7cd4:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7cd8:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7cda:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7cde:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7ce2:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7ce6:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7ce8:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7cec:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7cf0:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7cf4:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7cf8:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7cfa:	f1 05       	cpc	r31, r1
	breq .+2 
    7cfc:	09 f0       	breq	.+2      	; 0x7d00 <no_render+0x50>
	icall
    7cfe:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7d00:	0e 94 50 40 	call	0x80a0	; 0x80a0 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7d04:	0e 94 a8 4d 	call	0x9b50	; 0x9b50 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7d08:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <process_music>
	clr r1
    7d0c:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7d0e:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    7d12:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7d16:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7d18:	f1 05       	cpc	r31, r1
	breq .+2 
    7d1a:	09 f0       	breq	.+2      	; 0x7d1e <no_render+0x6e>
	icall
    7d1c:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7d1e:	bf 91       	pop	r27
	pop r26
    7d20:	af 91       	pop	r26
	pop r25
    7d22:	9f 91       	pop	r25
	pop r24
    7d24:	8f 91       	pop	r24
	pop r23
    7d26:	7f 91       	pop	r23
	pop r22
    7d28:	6f 91       	pop	r22
	pop r21
    7d2a:	5f 91       	pop	r21
	pop r20
    7d2c:	4f 91       	pop	r20
	pop r19
    7d2e:	3f 91       	pop	r19
	pop r18
    7d30:	2f 91       	pop	r18

00007d32 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7d32:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7d34:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7d36:	ff 91       	pop	r31
	pop ZL
    7d38:	ef 91       	pop	r30
	pop r1
    7d3a:	1f 90       	pop	r1
	pop r0
    7d3c:	0f 90       	pop	r0
	reti
    7d3e:	18 95       	reti

00007d40 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7d40:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7d42:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7d44:	00 c0       	rjmp	.+0      	; 0x7d46 <hsync_pulse+0x6>
	call update_sound
    7d46:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <update_sound>

	lds ZL,sync_pulse
    7d4a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7d4e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7d50:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    7d54:	08 95       	ret

00007d56 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7d56:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7d5a:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7d5c:	0e 94 0c 43 	call	0x8618	; 0x8618 <ProcessMusic>
#endif

	ret
    7d60:	08 95       	ret

00007d62 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7d62:	0f 93       	push	r16
	push r17
    7d64:	1f 93       	push	r17
	push r18
    7d66:	2f 93       	push	r18
	push r28
    7d68:	cf 93       	push	r28
	push r29
    7d6a:	df 93       	push	r29

	mov r18,ZL
    7d6c:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7d6e:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    7d72:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7d76:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7d78:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7d7c:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    7d80:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    7d84:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7d86:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7d88:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7d8c:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    7d90:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    7d94:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7d96:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7d98:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7d9a:	d0 2d       	mov	r29, r0
	nop
    7d9c:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7d9e:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    7da2:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7da6:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7da8:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7dac:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    7db0:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    7db4:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7db6:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7db8:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    7dbc:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    7dc0:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7dc4:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7dc6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7dc8:	20 ff       	sbrs	r18, 0
	rjmp .
    7dca:	00 c0       	rjmp	.+0      	; 0x7dcc <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7dcc:	01 03       	mulsu	r16, r17
	clr r0
    7dce:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7dd0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7dd2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7dd4:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7dd6:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7dda:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7dde:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7de0:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    7de4:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7de8:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7dec:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7dee:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7df0:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    7df4:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    7df8:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    7dfc:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7dfe:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7e00:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7e02:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7e04:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    7e08:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    7e0c:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    7e10:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7e12:	92 f4       	brpl	.+36     	; 0x7e38 <ch4_no_shift>

	lds ZH,tr4_params
    7e14:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    7e18:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7e1a:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7e1c:	00 2e       	mov	r0, r16
	lsr r0
    7e1e:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7e20:	00 26       	eor	r0, r16
	bst r0,0
    7e22:	00 fa       	bst	r0, 0
	lsr r17
    7e24:	16 95       	lsr	r17
	ror r16
    7e26:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7e28:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7e2a:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7e2c:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7e2e:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    7e32:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    7e36:	03 c0       	rjmp	.+6      	; 0x7e3e <ch4_end>

00007e38 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7e38:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7e3a:	1a 95       	dec	r17
	brne .-4
    7e3c:	f1 f7       	brne	.-4      	; 0x7e3a <ch4_no_shift+0x2>

00007e3e <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7e3e:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    7e42:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7e44:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7e46:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7e48:	21 ff       	sbrs	r18, 1
	rjmp .
    7e4a:	00 c0       	rjmp	.+0      	; 0x7e4c <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7e4c:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7e4e:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7e50:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    7e54:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7e56:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7e58:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7e5a:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7e5c:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    7e60:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    7e64:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7e66:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7e6a:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7e6e:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    7e72:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7e74:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    7e78:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7e7a:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7e7c:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7e7e:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    7e82:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    7e86:	00 19       	sub	r16, r0
	sbc r17,r1
    7e88:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7e8a:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    7e8e:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    7e92:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7e94:	f1 05       	cpc	r31, r1
	brlo .+2
    7e96:	08 f0       	brcs	.+2      	; 0x7e9a <ch4_end+0x5c>
	movw ZL,r16
    7e98:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7e9a:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    7e9e:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    7ea2:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7ea4:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    7ea8:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7eaa:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7eac:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7eae:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7eb0:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7eb2:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7eb4:	d0 05       	cpc	r29, r0
	brlt .+2
    7eb6:	0c f0       	brlt	.+2      	; 0x7eba <ch4_end+0x7c>
	ldi r28,127
    7eb8:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7eba:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7ebc:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7ebe:	d0 05       	cpc	r29, r0
	brge .+2
    7ec0:	0c f4       	brge	.+2      	; 0x7ec4 <ch4_end+0x86>
	ldi r28,-128
    7ec2:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7ec4:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7ec6:	c0 93 b3 00 	sts	0x00B3, r28

00007eca <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7eca:	df 91       	pop	r29
	pop r28
    7ecc:	cf 91       	pop	r28
	pop r18
    7ece:	2f 91       	pop	r18
	pop r17
    7ed0:	1f 91       	pop	r17
	pop r16
    7ed2:	0f 91       	pop	r16
	
	ret
    7ed4:	08 95       	ret

00007ed6 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
    sts sprites_tile_banks,r24
    7ed6:	80 93 a4 0c 	sts	0x0CA4, r24
    sts sprites_tile_banks+1,r25
    7eda:	90 93 a5 0c 	sts	0x0CA5, r25
    ret
    7ede:	08 95       	ret

00007ee0 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
    //init vram     
    ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7ee0:	e0 e0       	ldi	r30, 0x00	; 0
    ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7ee2:	f4 e0       	ldi	r31, 0x04	; 4

    ldi XL,lo8(vram)
    7ee4:	a0 e0       	ldi	r26, 0x00	; 0
    ldi XH,hi8(vram)
    7ee6:	b1 e0       	ldi	r27, 0x01	; 1

    ldi r22,RAM_TILES_COUNT
    7ee8:	6c e1       	ldi	r22, 0x1C	; 28

00007eea <fill_vram_loop>:

fill_vram_loop:
    st X+,r22
    7eea:	6d 93       	st	X+, r22
    sbiw r30,1
    7eec:	31 97       	sbiw	r30, 0x01	; 1
    brne fill_vram_loop
    7eee:	e9 f7       	brne	.-6      	; 0x7eea <fill_vram_loop>

    clr r1
    7ef0:	11 24       	eor	r1, r1

    ret
    7ef2:	08 95       	ret

00007ef4 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
    ;index formula is vram[((y>>3)*256)+8x+(y&7)]
    
    andi r24,0x1f
    7ef4:	8f 71       	andi	r24, 0x1F	; 31
    mov r23,r22
    7ef6:	76 2f       	mov	r23, r22
    lsr r22
    7ef8:	66 95       	lsr	r22
    lsr r22
    7efa:	66 95       	lsr	r22
    lsr r22         ;y>>3
    7efc:	66 95       	lsr	r22
    ldi r18,8       
    7efe:	28 e0       	ldi	r18, 0x08	; 8
    mul r24,r18     ;x*8
    7f00:	82 9f       	mul	r24, r18
    movw XL,r0
    7f02:	d0 01       	movw	r26, r0
    subi XL,lo8(-(vram))
    7f04:	a0 50       	subi	r26, 0x00	; 0
    sbci XH,hi8(-(vram))
    7f06:	bf 4f       	sbci	r27, 0xFF	; 255
    add XH,r22      ;vram+((y>>3)*256)
    7f08:	b6 0f       	add	r27, r22
    andi r23,7      ;y&7    
    7f0a:	77 70       	andi	r23, 0x07	; 7
    add XL,r23
    7f0c:	a7 0f       	add	r26, r23
                        
    subi r20,~(RAM_TILES_COUNT-1)   
    7f0e:	44 5e       	subi	r20, 0xE4	; 228
    st X,r20
    7f10:	4c 93       	st	X, r20

    clr r1
    7f12:	11 24       	eor	r1, r1

    ret
    7f14:	08 95       	ret

00007f16 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
    sts tile_table_lo,r24
    7f16:	80 93 ac 0c 	sts	0x0CAC, r24
    sts tile_table_hi,r25   
    7f1a:	90 93 ad 0c 	sts	0x0CAD, r25
    ret
    7f1e:	08 95       	ret

00007f20 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7f20:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    7f24:	81 70       	andi	r24, 0x01	; 1
	ret
    7f26:	08 95       	ret

00007f28 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7f28:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    7f2c:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7f2e:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    7f32:	08 95       	ret

00007f34 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7f34:	88 23       	and	r24, r24
	brne rj_p2
    7f36:	29 f4       	brne	.+10     	; 0x7f42 <rj_p2>
		
	lds r24,joypad1_status_lo
    7f38:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    7f3c:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    7f40:	08 95       	ret

00007f42 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7f42:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7f46:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7f4a:	08 95       	ret

00007f4c <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7f4c:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7f4e:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7f50:	f1 f7       	brne	.-4      	; 0x7f4e <WaitUs+0x2>
	nop
    7f52:	00 00       	nop
	sbiw r24,1
    7f54:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7f56:	d1 f7       	brne	.-12     	; 0x7f4c <WaitUs>

	ret
    7f58:	08 95       	ret

00007f5a <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7f5a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7f5c:	fe cf       	rjmp	.-4      	; 0x7f5a <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7f5e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7f60:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7f62:	60 bd       	out	0x20, r22	; 32
   cli
    7f64:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7f66:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7f68:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7f6a:	78 94       	sei
   ret
    7f6c:	08 95       	ret

00007f6e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7f6e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7f70:	fe cf       	rjmp	.-4      	; 0x7f6e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7f72:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7f74:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7f76:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7f78:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7f7a:	80 b5       	in	r24, 0x20	; 32
   sei
    7f7c:	78 94       	sei
   ret
    7f7e:	08 95       	ret

00007f80 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7f80:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7f82:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7f86:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7f8a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7f8e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7f92:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7f96:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7f9a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7f9e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7fa2:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7fa6:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7fa8:	80 93 81 00 	sts	0x0081, r24

		cli
    7fac:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7fae:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7fb0:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7fb4:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7fb6:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7fba:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7fbc:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7fc0:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7fc4:	78 94       	sei

00007fc6 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7fc6:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    7fca:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7fcc:	e0 f3       	brcs	.-8      	; 0x7fc6 <wait>

		ret
    7fce:	08 95       	ret

00007fd0 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7fd0:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    7fd4:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7fd8:	08 95       	ret

00007fda <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7fda:	0f 93       	push	r16
		push r17
    7fdc:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7fde:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7fe0:	0f 93       	push	r16

		lds r16,sync_pulse
    7fe2:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7fe6:	03 95       	inc	r16
		sts sync_pulse,r16
    7fe8:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7fec:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7fee:	08 c0       	rjmp	.+16     	; 0x8000 <__vector_8+0x26>
		lds r17,random_value
    7ff0:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7ff4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7ff8:	10 27       	eor	r17, r16
		sts random_value,r17
    7ffa:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    7ffe:	07 c0       	rjmp	.+14     	; 0x800e <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8000:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8004:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8008:	10 27       	eor	r17, r16
		sts random_value+1,r17
    800a:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    800e:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8010:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8014:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8016:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8018:	1f 91       	pop	r17
		pop r16
    801a:	0f 91       	pop	r16
		reti
    801c:	18 95       	reti

0000801e <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    801e:	98 e0       	ldi	r25, 0x08	; 8
    8020:	88 e1       	ldi	r24, 0x18	; 24
    8022:	0f b6       	in	r0, 0x3f	; 63
    8024:	f8 94       	cli
    8026:	a8 95       	wdr
    8028:	80 93 60 00 	sts	0x0060, r24
    802c:	0f be       	out	0x3f, r0	; 63
    802e:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8032:	ff cf       	rjmp	.-2      	; 0x8032 <SoftReset+0x14>

00008034 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8034:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8036:	c8 95       	lpm
    8038:	c8 95       	lpm
		Wait200ns();
    803a:	c8 95       	lpm
    803c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    803e:	12 98       	cbi	0x02, 2	; 2
    8040:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8042:	80 e0       	ldi	r24, 0x00	; 0
    8044:	90 e0       	ldi	r25, 0x00	; 0
    8046:	20 e0       	ldi	r18, 0x00	; 0
    8048:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    804a:	36 95       	lsr	r19
    804c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    804e:	96 95       	lsr	r25
    8050:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8052:	c8 95       	lpm
    8054:	c8 95       	lpm
			Wait200ns();
    8056:	c8 95       	lpm
    8058:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    805a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    805c:	00 9b       	sbis	0x00, 0	; 0
    805e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8060:	01 9b       	sbis	0x00, 1	; 0
    8062:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8064:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8066:	c8 95       	lpm
    8068:	c8 95       	lpm
			Wait200ns();
    806a:	c8 95       	lpm
    806c:	c8 95       	lpm
    806e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8070:	61 f7       	brne	.-40     	; 0x804a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8072:	30 93 c0 0c 	sts	0x0CC0, r19
    8076:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    807a:	90 93 c4 0c 	sts	0x0CC4, r25
    807e:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8082:	80 91 bf 0c 	lds	r24, 0x0CBF
    8086:	90 91 c0 0c 	lds	r25, 0x0CC0
    808a:	0f 97       	sbiw	r24, 0x0f	; 15
    808c:	31 f0       	breq	.+12     	; 0x809a <ReadButtons+0x66>
    808e:	80 91 c3 0c 	lds	r24, 0x0CC3
    8092:	90 91 c4 0c 	lds	r25, 0x0CC4
    8096:	0f 97       	sbiw	r24, 0x0f	; 15
    8098:	11 f4       	brne	.+4      	; 0x809e <ReadButtons+0x6a>
		SoftReset();
    809a:	0e 94 0f 40 	call	0x801e	; 0x801e <SoftReset>
    809e:	08 95       	ret

000080a0 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    80a0:	10 92 ff 0c 	sts	0x0CFF, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    80a4:	00 99       	sbic	0x00, 0	; 0
    80a6:	03 c0       	rjmp	.+6      	; 0x80ae <ReadControllers+0xe>
    80a8:	81 e0       	ldi	r24, 0x01	; 1
    80aa:	80 93 ff 0c 	sts	0x0CFF, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    80ae:	01 99       	sbic	0x00, 1	; 0
    80b0:	05 c0       	rjmp	.+10     	; 0x80bc <ReadControllers+0x1c>
    80b2:	80 91 ff 0c 	lds	r24, 0x0CFF
    80b6:	82 60       	ori	r24, 0x02	; 2
    80b8:	80 93 ff 0c 	sts	0x0CFF, r24
			
	//read the standard buttons
	ReadButtons();
    80bc:	0c 94 1a 40 	jmp	0x8034	; 0x8034 <ReadButtons>

000080c0 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    80c0:	cf 93       	push	r28
    80c2:	df 93       	push	r29
    80c4:	c0 e0       	ldi	r28, 0x00	; 0
    80c6:	d0 e0       	ldi	r29, 0x00	; 0
    80c8:	fe 01       	movw	r30, r28
    80ca:	ec 53       	subi	r30, 0x3C	; 60
    80cc:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    80ce:	64 91       	lpm	r22, Z
    80d0:	ce 01       	movw	r24, r28
    80d2:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <WriteEeprom>
    80d6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    80d8:	c0 32       	cpi	r28, 0x20	; 32
    80da:	d1 05       	cpc	r29, r1
    80dc:	a9 f7       	brne	.-22     	; 0x80c8 <FormatEeprom+0x8>
    80de:	c0 e2       	ldi	r28, 0x20	; 32
    80e0:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    80e2:	6f ef       	ldi	r22, 0xFF	; 255
    80e4:	ce 01       	movw	r24, r28
    80e6:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    80ea:	6f ef       	ldi	r22, 0xFF	; 255
    80ec:	ce 01       	movw	r24, r28
    80ee:	01 96       	adiw	r24, 0x01	; 1
    80f0:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    80f4:	a0 96       	adiw	r28, 0x20	; 32
    80f6:	c1 15       	cp	r28, r1
    80f8:	88 e0       	ldi	r24, 0x08	; 8
    80fa:	d8 07       	cpc	r29, r24
    80fc:	91 f7       	brne	.-28     	; 0x80e2 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    80fe:	df 91       	pop	r29
    8100:	cf 91       	pop	r28
    8102:	08 95       	ret

00008104 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8104:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8106:	80 e0       	ldi	r24, 0x00	; 0
    8108:	90 e0       	ldi	r25, 0x00	; 0
    810a:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <ReadEeprom>
    810e:	c8 2f       	mov	r28, r24
    8110:	81 e0       	ldi	r24, 0x01	; 1
    8112:	90 e0       	ldi	r25, 0x00	; 0
    8114:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <ReadEeprom>
    8118:	28 2f       	mov	r18, r24
    811a:	30 e0       	ldi	r19, 0x00	; 0
    811c:	32 2f       	mov	r19, r18
    811e:	22 27       	eor	r18, r18
    8120:	2c 0f       	add	r18, r28
    8122:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8124:	81 e0       	ldi	r24, 0x01	; 1
    8126:	2a 35       	cpi	r18, 0x5A	; 90
    8128:	35 45       	sbci	r19, 0x55	; 85
    812a:	09 f0       	breq	.+2      	; 0x812e <isEepromFormatted+0x2a>
    812c:	80 e0       	ldi	r24, 0x00	; 0
}
    812e:	cf 91       	pop	r28
    8130:	08 95       	ret

00008132 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8132:	00 97       	sbiw	r24, 0x00	; 0
    8134:	21 f0       	breq	.+8      	; 0x813e <GetPrngNumber+0xc>
    8136:	90 93 cd 0c 	sts	0x0CCD, r25
    813a:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    813e:	20 91 cc 0c 	lds	r18, 0x0CCC
    8142:	30 91 cd 0c 	lds	r19, 0x0CCD
    8146:	a9 01       	movw	r20, r18
    8148:	56 95       	lsr	r21
    814a:	47 95       	ror	r20
    814c:	56 95       	lsr	r21
    814e:	47 95       	ror	r20
    8150:	c9 01       	movw	r24, r18
    8152:	63 e0       	ldi	r22, 0x03	; 3
    8154:	96 95       	lsr	r25
    8156:	87 95       	ror	r24
    8158:	6a 95       	dec	r22
    815a:	e1 f7       	brne	.-8      	; 0x8154 <GetPrngNumber+0x22>
    815c:	84 27       	eor	r24, r20
    815e:	95 27       	eor	r25, r21
    8160:	82 27       	eor	r24, r18
    8162:	93 27       	eor	r25, r19
    8164:	a9 01       	movw	r20, r18
    8166:	75 e0       	ldi	r23, 0x05	; 5
    8168:	56 95       	lsr	r21
    816a:	47 95       	ror	r20
    816c:	7a 95       	dec	r23
    816e:	e1 f7       	brne	.-8      	; 0x8168 <GetPrngNumber+0x36>
    8170:	84 27       	eor	r24, r20
    8172:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8174:	99 27       	eor	r25, r25
    8176:	86 95       	lsr	r24
    8178:	97 95       	ror	r25
    817a:	88 27       	eor	r24, r24
    817c:	36 95       	lsr	r19
    817e:	27 95       	ror	r18
    8180:	82 2b       	or	r24, r18
    8182:	93 2b       	or	r25, r19
    8184:	90 93 cd 0c 	sts	0x0CCD, r25
    8188:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    818c:	08 95       	ret

0000818e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    818e:	fc 01       	movw	r30, r24
    8190:	67 87       	std	Z+15, r22	; 0x0f
    8192:	08 95       	ret

00008194 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8194:	e0 ed       	ldi	r30, 0xD0	; 208
    8196:	fc e0       	ldi	r31, 0x0C	; 12
    8198:	81 e0       	ldi	r24, 0x01	; 1
    819a:	91 e0       	ldi	r25, 0x01	; 1
    819c:	95 8b       	std	Z+21, r25	; 0x15
    819e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    81a0:	63 8b       	std	Z+19, r22	; 0x13
    81a2:	08 95       	ret

000081a4 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    81a4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    81a6:	90 81       	ld	r25, Z
    81a8:	9f 75       	andi	r25, 0x5F	; 95
    81aa:	90 83       	st	Z, r25
    81ac:	08 95       	ret

000081ae <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    81ae:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    81b0:	90 81       	ld	r25, Z
    81b2:	90 64       	ori	r25, 0x40	; 64
    81b4:	90 83       	st	Z, r25
    81b6:	08 95       	ret

000081b8 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    81b8:	fc 01       	movw	r30, r24
    81ba:	66 87       	std	Z+14, r22	; 0x0e
    81bc:	08 95       	ret

000081be <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    81be:	fc 01       	movw	r30, r24
    81c0:	62 87       	std	Z+10, r22	; 0x0a
    81c2:	08 95       	ret

000081c4 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    81c4:	fc 01       	movw	r30, r24
    81c6:	63 87       	std	Z+11, r22	; 0x0b
    81c8:	08 95       	ret

000081ca <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    81ca:	cf 93       	push	r28
    81cc:	df 93       	push	r29
    81ce:	ec 01       	movw	r28, r24
    81d0:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    81d2:	29 81       	ldd	r18, Y+1	; 0x01
    81d4:	30 e0       	ldi	r19, 0x00	; 0
    81d6:	f9 01       	movw	r30, r18
    81d8:	ee 0f       	add	r30, r30
    81da:	ff 1f       	adc	r31, r31
    81dc:	e8 5f       	subi	r30, 0xF8	; 248
    81de:	f4 47       	sbci	r31, 0x74	; 116
    81e0:	65 91       	lpm	r22, Z+
    81e2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    81e4:	f9 01       	movw	r30, r18
    81e6:	e4 0f       	add	r30, r20
    81e8:	f1 1d       	adc	r31, r1
    81ea:	47 fd       	sbrc	r20, 7
    81ec:	fa 95       	dec	r31
    81ee:	ee 0f       	add	r30, r30
    81f0:	ff 1f       	adc	r31, r31
    81f2:	e8 5f       	subi	r30, 0xF8	; 248
    81f4:	f4 47       	sbci	r31, 0x74	; 116
    81f6:	85 91       	lpm	r24, Z+
    81f8:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    81fa:	86 1b       	sub	r24, r22
    81fc:	97 0b       	sbc	r25, r23
    81fe:	68 85       	ldd	r22, Y+8	; 0x08
    8200:	70 e0       	ldi	r23, 0x00	; 0
    8202:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
	if(delta==0)delta++;
    8206:	61 15       	cp	r22, r1
    8208:	71 05       	cpc	r23, r1
    820a:	11 f4       	brne	.+4      	; 0x8210 <PatchCommand11+0x46>
    820c:	61 e0       	ldi	r22, 0x01	; 1
    820e:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8210:	ea 81       	ldd	r30, Y+2	; 0x02
    8212:	86 e0       	ldi	r24, 0x06	; 6
    8214:	e8 9f       	mul	r30, r24
    8216:	f0 01       	movw	r30, r0
    8218:	11 24       	eor	r1, r1
    821a:	e0 53       	subi	r30, 0x30	; 48
    821c:	f3 4f       	sbci	r31, 0xF3	; 243
    821e:	81 81       	ldd	r24, Z+1	; 0x01
    8220:	92 81       	ldd	r25, Z+2	; 0x02
    8222:	86 0f       	add	r24, r22
    8224:	97 1f       	adc	r25, r23
    8226:	92 83       	std	Z+2, r25	; 0x02
    8228:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    822a:	7e 83       	std	Y+6, r23	; 0x06
    822c:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    822e:	88 81       	ld	r24, Y
    8230:	88 60       	ori	r24, 0x08	; 8
    8232:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8234:	89 81       	ldd	r24, Y+1	; 0x01
    8236:	48 0f       	add	r20, r24
    8238:	4f 83       	std	Y+7, r20	; 0x07
}
    823a:	df 91       	pop	r29
    823c:	cf 91       	pop	r28
    823e:	08 95       	ret

00008240 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8240:	fc 01       	movw	r30, r24
    8242:	60 87       	std	Z+8, r22	; 0x08
    8244:	08 95       	ret

00008246 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8246:	fc 01       	movw	r30, r24
    8248:	64 83       	std	Z+4, r22	; 0x04
    824a:	08 95       	ret

0000824c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    824c:	fc 01       	movw	r30, r24
    824e:	82 81       	ldd	r24, Z+2	; 0x02
    8250:	0c 94 48 45 	jmp	0x8a90	; 0x8a90 <SetMixerWave>

00008254 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8254:	fc 01       	movw	r30, r24
	track->note+=param;
    8256:	91 81       	ldd	r25, Z+1	; 0x01
    8258:	69 0f       	add	r22, r25
    825a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    825c:	82 81       	ldd	r24, Z+2	; 0x02
    825e:	0c 94 31 45 	jmp	0x8a62	; 0x8a62 <SetMixerNote>

00008262 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8262:	fc 01       	movw	r30, r24
	track->note-=param;
    8264:	91 81       	ldd	r25, Z+1	; 0x01
    8266:	96 1b       	sub	r25, r22
    8268:	69 2f       	mov	r22, r25
    826a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    826c:	82 81       	ldd	r24, Z+2	; 0x02
    826e:	0c 94 31 45 	jmp	0x8a62	; 0x8a62 <SetMixerNote>

00008272 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8272:	1f 93       	push	r17
    8274:	cf 93       	push	r28
    8276:	df 93       	push	r29
    8278:	ec 01       	movw	r28, r24
    827a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    827c:	8a 81       	ldd	r24, Y+2	; 0x02
    827e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <SetMixerNote>
	track->note=param;
    8282:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8284:	88 81       	ld	r24, Y
    8286:	87 7f       	andi	r24, 0xF7	; 247
    8288:	88 83       	st	Y, r24
}
    828a:	df 91       	pop	r29
    828c:	cf 91       	pop	r28
    828e:	1f 91       	pop	r17
    8290:	08 95       	ret

00008292 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8292:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8294:	14 96       	adiw	r26, 0x04	; 4
    8296:	8c 91       	ld	r24, X
    8298:	14 97       	sbiw	r26, 0x04	; 4
    829a:	88 23       	and	r24, r24
    829c:	19 f1       	breq	.+70     	; 0x82e4 <PatchCommand14+0x52>
    829e:	55 96       	adiw	r26, 0x15	; 21
    82a0:	2d 91       	ld	r18, X+
    82a2:	3c 91       	ld	r19, X
    82a4:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    82a6:	66 23       	and	r22, r22
    82a8:	79 f0       	breq	.+30     	; 0x82c8 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    82aa:	77 27       	eor	r23, r23
    82ac:	67 fd       	sbrc	r22, 7
    82ae:	70 95       	com	r23
    82b0:	6f 5f       	subi	r22, 0xFF	; 255
    82b2:	7f 4f       	sbci	r23, 0xFF	; 255
    82b4:	ab 01       	movw	r20, r22
    82b6:	44 0f       	add	r20, r20
    82b8:	55 1f       	adc	r21, r21
    82ba:	64 0f       	add	r22, r20
    82bc:	75 1f       	adc	r23, r21
    82be:	26 1b       	sub	r18, r22
    82c0:	37 0b       	sbc	r19, r23
    82c2:	09 c0       	rjmp	.+18     	; 0x82d6 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    82c4:	ef 3f       	cpi	r30, 0xFF	; 255
    82c6:	39 f0       	breq	.+14     	; 0x82d6 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    82c8:	23 50       	subi	r18, 0x03	; 3
    82ca:	31 09       	sbc	r19, r1
    82cc:	f9 01       	movw	r30, r18
    82ce:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    82d0:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    82d2:	ed 30       	cpi	r30, 0x0D	; 13
    82d4:	b9 f7       	brne	.-18     	; 0x82c4 <PatchCommand14+0x32>
    82d6:	56 96       	adiw	r26, 0x16	; 22
    82d8:	3c 93       	st	X, r19
    82da:	2e 93       	st	-X, r18
    82dc:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    82de:	81 50       	subi	r24, 0x01	; 1
    82e0:	14 96       	adiw	r26, 0x04	; 4
    82e2:	8c 93       	st	X, r24
    82e4:	08 95       	ret

000082e6 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    82e6:	90 93 78 0d 	sts	0x0D78, r25
    82ea:	80 93 77 0d 	sts	0x0D77, r24

	masterVolume=DEFAULT_MASTER_VOL;
    82ee:	8f e6       	ldi	r24, 0x6F	; 111
    82f0:	80 93 7a 0d 	sts	0x0D7A, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    82f4:	10 92 ce 0c 	sts	0x0CCE, r1
    82f8:	e2 e1       	ldi	r30, 0x12	; 18
    82fa:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    82fc:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    82fe:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8300:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8302:	28 e1       	ldi	r18, 0x18	; 24
    8304:	df 01       	movw	r26, r30
    8306:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8308:	8c 93       	st	X, r24
    830a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    830c:	9c 93       	st	X, r25
    830e:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8310:	1c 92       	st	X, r1
    8312:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8314:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8316:	10 82       	st	Z, r1
    8318:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    831a:	2c 93       	st	X, r18
    831c:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    831e:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8320:	8f 5f       	subi	r24, 0xFF	; 255
    8322:	77 96       	adiw	r30, 0x17	; 23
    8324:	85 30       	cpi	r24, 0x05	; 5
    8326:	71 f7       	brne	.-36     	; 0x8304 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8328:	08 95       	ret

0000832a <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    832a:	e2 e0       	ldi	r30, 0x02	; 2
    832c:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    832e:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8330:	20 81       	ld	r18, Z
    8332:	2f 77       	andi	r18, 0x7F	; 127
    8334:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8336:	33 83       	std	Z+3, r19	; 0x03
    8338:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    833a:	2d e0       	ldi	r18, 0x0D	; 13
    833c:	e5 37       	cpi	r30, 0x75	; 117
    833e:	f2 07       	cpc	r31, r18
    8340:	b9 f7       	brne	.-18     	; 0x8330 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8342:	01 96       	adiw	r24, 0x01	; 1
    8344:	90 93 7f 0d 	sts	0x0D7F, r25
    8348:	80 93 7e 0d 	sts	0x0D7E, r24
		songStart=song+1;//skip first delta-time
    834c:	90 93 01 0d 	sts	0x0D01, r25
    8350:	80 93 00 0d 	sts	0x0D00, r24
		loopStart=song+1;
    8354:	90 93 81 0d 	sts	0x0D81, r25
    8358:	80 93 80 0d 	sts	0x0D80, r24
		nextDeltaTime=0;
    835c:	10 92 7c 0d 	sts	0x0D7C, r1
    8360:	10 92 7b 0d 	sts	0x0D7B, r1
		currDeltaTime=0;
    8364:	10 92 76 0d 	sts	0x0D76, r1
    8368:	10 92 75 0d 	sts	0x0D75, r1
		songSpeed=0;
    836c:	10 92 7d 0d 	sts	0x0D7D, r1

		lastStatus=0;
    8370:	10 92 79 0d 	sts	0x0D79, r1
		playSong=true;
    8374:	81 e0       	ldi	r24, 0x01	; 1
    8376:	80 93 ce 0c 	sts	0x0CCE, r24
    837a:	08 95       	ret

0000837c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    837c:	e2 e0       	ldi	r30, 0x02	; 2
    837e:	fd e0       	ldi	r31, 0x0D	; 13
    8380:	8a ef       	ldi	r24, 0xFA	; 250
    8382:	87 87       	std	Z+15, r24	; 0x0f
    8384:	86 a3       	std	Z+38, r24	; 0x26
    8386:	80 93 3f 0d 	sts	0x0D3F, r24
    838a:	80 93 56 0d 	sts	0x0D56, r24
    838e:	80 93 6d 0d 	sts	0x0D6D, r24
	}

	playSong=false;
    8392:	10 92 ce 0c 	sts	0x0CCE, r1
    8396:	08 95       	ret

00008398 <ResumeSong>:
}


void ResumeSong(){
	playSong=true;
    8398:	81 e0       	ldi	r24, 0x01	; 1
    839a:	80 93 ce 0c 	sts	0x0CCE, r24
    839e:	08 95       	ret

000083a0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    83a0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    83a2:	ed 91       	ld	r30, X+
    83a4:	fc 91       	ld	r31, X
    83a6:	11 97       	sbiw	r26, 0x01	; 1
    83a8:	9f 01       	movw	r18, r30
    83aa:	2f 5f       	subi	r18, 0xFF	; 255
    83ac:	3f 4f       	sbci	r19, 0xFF	; 255
    83ae:	11 96       	adiw	r26, 0x01	; 1
    83b0:	3c 93       	st	X, r19
    83b2:	2e 93       	st	-X, r18
    83b4:	e4 91       	lpm	r30, Z
    83b6:	e7 fd       	sbrc	r30, 7
    83b8:	03 c0       	rjmp	.+6      	; 0x83c0 <ReadVarLen+0x20>
    83ba:	8e 2f       	mov	r24, r30
    83bc:	90 e0       	ldi	r25, 0x00	; 0
    83be:	08 95       	ret
    {
       value &= 0x7F;
    83c0:	ef 77       	andi	r30, 0x7F	; 127
    83c2:	8e 2f       	mov	r24, r30
    83c4:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    83c6:	96 95       	lsr	r25
    83c8:	98 2f       	mov	r25, r24
    83ca:	88 27       	eor	r24, r24
    83cc:	97 95       	ror	r25
    83ce:	87 95       	ror	r24
    83d0:	2f 5f       	subi	r18, 0xFF	; 255
    83d2:	3f 4f       	sbci	r19, 0xFF	; 255
    83d4:	f9 01       	movw	r30, r18
    83d6:	31 97       	sbiw	r30, 0x01	; 1
    83d8:	e4 91       	lpm	r30, Z
    83da:	4e 2f       	mov	r20, r30
    83dc:	4f 77       	andi	r20, 0x7F	; 127
    83de:	84 0f       	add	r24, r20
    83e0:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    83e2:	e7 fd       	sbrc	r30, 7
    83e4:	f0 cf       	rjmp	.-32     	; 0x83c6 <ReadVarLen+0x26>
    83e6:	2d 93       	st	X+, r18
    83e8:	3c 93       	st	X, r19
    }


    return value;
}
    83ea:	08 95       	ret

000083ec <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    83ec:	ef 92       	push	r14
    83ee:	ff 92       	push	r15
    83f0:	0f 93       	push	r16
    83f2:	1f 93       	push	r17
    83f4:	cf 93       	push	r28
    83f6:	df 93       	push	r29
    83f8:	1f 92       	push	r1
    83fa:	cd b7       	in	r28, 0x3d	; 61
    83fc:	de b7       	in	r29, 0x3e	; 62
    83fe:	7c 01       	movw	r14, r24
    8400:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8402:	fc 01       	movw	r30, r24
    8404:	80 81       	ld	r24, Z
    8406:	08 2f       	mov	r16, r24
    8408:	00 1f       	adc	r16, r16
    840a:	00 27       	eor	r16, r16
    840c:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    840e:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8410:	9f ef       	ldi	r25, 0xFF	; 255
    8412:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8414:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8416:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8418:	87 7b       	andi	r24, 0xB7	; 183
    841a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    841c:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    841e:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8420:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8422:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8424:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8426:	82 81       	ldd	r24, Z+2	; 0x02
    8428:	83 30       	cpi	r24, 0x03	; 3
    842a:	69 f4       	brne	.+26     	; 0x8446 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    842c:	01 11       	cpse	r16, r1
    842e:	01 c0       	rjmp	.+2      	; 0x8432 <TriggerCommon+0x46>
    8430:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8432:	81 e0       	ldi	r24, 0x01	; 1
    8434:	91 e0       	ldi	r25, 0x01	; 1
    8436:	90 93 e5 0c 	sts	0x0CE5, r25
    843a:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    843e:	81 e0       	ldi	r24, 0x01	; 1
    8440:	80 93 e3 0c 	sts	0x0CE3, r24
    8444:	39 c0       	rjmp	.+114    	; 0x84b8 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8446:	84 30       	cpi	r24, 0x04	; 4
    8448:	69 f5       	brne	.+90     	; 0x84a4 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    844a:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    844e:	80 91 77 0d 	lds	r24, 0x0D77
    8452:	90 91 78 0d 	lds	r25, 0x0D78
    8456:	f9 e0       	ldi	r31, 0x09	; 9
    8458:	6f 9f       	mul	r22, r31
    845a:	80 0d       	add	r24, r0
    845c:	91 1d       	adc	r25, r1
    845e:	11 24       	eor	r1, r1
    8460:	fc 01       	movw	r30, r24
    8462:	31 96       	adiw	r30, 0x01	; 1
    8464:	a5 91       	lpm	r26, Z+
    8466:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8468:	b0 93 ed 0c 	sts	0x0CED, r27
    846c:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8470:	ac 01       	movw	r20, r24
    8472:	49 5f       	subi	r20, 0xF9	; 249
    8474:	5f 4f       	sbci	r21, 0xFF	; 255
    8476:	fa 01       	movw	r30, r20
    8478:	65 91       	lpm	r22, Z+
    847a:	74 91       	lpm	r23, Z
    847c:	05 96       	adiw	r24, 0x05	; 5
    847e:	fc 01       	movw	r30, r24
    8480:	85 91       	lpm	r24, Z+
    8482:	94 91       	lpm	r25, Z
    8484:	68 1b       	sub	r22, r24
    8486:	79 0b       	sbc	r23, r25
    8488:	70 93 ef 0c 	sts	0x0CEF, r23
    848c:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8490:	fa 01       	movw	r30, r20
    8492:	85 91       	lpm	r24, Z+
    8494:	94 91       	lpm	r25, Z
    8496:	a8 0f       	add	r26, r24
    8498:	b9 1f       	adc	r27, r25
    849a:	b0 93 f1 0c 	sts	0x0CF1, r27
    849e:	a0 93 f0 0c 	sts	0x0CF0, r26
    84a2:	05 c0       	rjmp	.+10     	; 0x84ae <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    84a4:	60 e0       	ldi	r22, 0x00	; 0
    84a6:	29 83       	std	Y+1, r18	; 0x01
    84a8:	0e 94 48 45 	call	0x8a90	; 0x8a90 <SetMixerWave>
			SetMixerNote(track->channel,note);
    84ac:	29 81       	ldd	r18, Y+1	; 0x01
    84ae:	62 2f       	mov	r22, r18
    84b0:	f7 01       	movw	r30, r14
    84b2:	82 81       	ldd	r24, Z+2	; 0x02
    84b4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    84b8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    84ba:	00 23       	and	r16, r16
    84bc:	11 f0       	breq	.+4      	; 0x84c2 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    84be:	11 8b       	std	Z+17, r17	; 0x11
    84c0:	01 c0       	rjmp	.+2      	; 0x84c4 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    84c2:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    84c4:	e0 91 77 0d 	lds	r30, 0x0D77
    84c8:	f0 91 78 0d 	lds	r31, 0x0D78
    84cc:	39 e0       	ldi	r19, 0x09	; 9
    84ce:	13 9f       	mul	r17, r19
    84d0:	e0 0d       	add	r30, r0
    84d2:	f1 1d       	adc	r31, r1
    84d4:	11 24       	eor	r1, r1
    84d6:	33 96       	adiw	r30, 0x03	; 3
    84d8:	85 91       	lpm	r24, Z+
    84da:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    84dc:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    84de:	00 97       	sbiw	r24, 0x00	; 0
    84e0:	19 f4       	brne	.+6      	; 0x84e8 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    84e2:	16 8a       	std	Z+22, r1	; 0x16
    84e4:	15 8a       	std	Z+21, r1	; 0x15
    84e6:	08 c0       	rjmp	.+16     	; 0x84f8 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    84e8:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    84ea:	fc 01       	movw	r30, r24
    84ec:	24 91       	lpm	r18, Z
    84ee:	f7 01       	movw	r30, r14
    84f0:	22 8b       	std	Z+18, r18	; 0x12
    84f2:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    84f4:	96 8b       	std	Z+22, r25	; 0x16
    84f6:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    84f8:	0f 90       	pop	r0
    84fa:	df 91       	pop	r29
    84fc:	cf 91       	pop	r28
    84fe:	1f 91       	pop	r17
    8500:	0f 91       	pop	r16
    8502:	ff 90       	pop	r15
    8504:	ef 90       	pop	r14
    8506:	08 95       	ret

00008508 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8508:	cf 93       	push	r28
    850a:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    850c:	e0 91 77 0d 	lds	r30, 0x0D77
    8510:	f0 91 78 0d 	lds	r31, 0x0D78
    8514:	99 e0       	ldi	r25, 0x09	; 9
    8516:	89 9f       	mul	r24, r25
    8518:	e0 0d       	add	r30, r0
    851a:	f1 1d       	adc	r31, r1
    851c:	11 24       	eor	r1, r1
    851e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8520:	e1 30       	cpi	r30, 0x01	; 1
    8522:	e9 f0       	breq	.+58     	; 0x855e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8524:	e2 30       	cpi	r30, 0x02	; 2
    8526:	e9 f0       	breq	.+58     	; 0x8562 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8528:	20 91 19 0d 	lds	r18, 0x0D19
    852c:	27 ff       	sbrs	r18, 7
    852e:	1d c0       	rjmp	.+58     	; 0x856a <TriggerFx+0x62>
    8530:	20 91 2a 0d 	lds	r18, 0x0D2A
    8534:	28 13       	cpse	r18, r24
    8536:	02 c0       	rjmp	.+4      	; 0x853c <TriggerFx+0x34>
    8538:	41 11       	cpse	r20, r1
    853a:	17 c0       	rjmp	.+46     	; 0x856a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    853c:	20 91 30 0d 	lds	r18, 0x0D30
    8540:	27 ff       	sbrs	r18, 7
    8542:	11 c0       	rjmp	.+34     	; 0x8566 <TriggerFx+0x5e>
    8544:	20 91 41 0d 	lds	r18, 0x0D41
    8548:	28 13       	cpse	r18, r24
    854a:	02 c0       	rjmp	.+4      	; 0x8550 <TriggerFx+0x48>
    854c:	41 11       	cpse	r20, r1
    854e:	0b c0       	rjmp	.+22     	; 0x8566 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8550:	20 91 2d 0d 	lds	r18, 0x0D2D
    8554:	90 91 44 0d 	lds	r25, 0x0D44
    8558:	92 17       	cp	r25, r18
    855a:	28 f4       	brcc	.+10     	; 0x8566 <TriggerFx+0x5e>
    855c:	06 c0       	rjmp	.+12     	; 0x856a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    855e:	c3 e0       	ldi	r28, 0x03	; 3
    8560:	05 c0       	rjmp	.+10     	; 0x856c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8562:	c4 e0       	ldi	r28, 0x04	; 4
    8564:	03 c0       	rjmp	.+6      	; 0x856c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8566:	c2 e0       	ldi	r28, 0x02	; 2
    8568:	01 c0       	rjmp	.+2      	; 0x856c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    856a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    856c:	97 e1       	ldi	r25, 0x17	; 23
    856e:	c9 9f       	mul	r28, r25
    8570:	e0 01       	movw	r28, r0
    8572:	11 24       	eor	r1, r1
    8574:	ce 5f       	subi	r28, 0xFE	; 254
    8576:	d2 4f       	sbci	r29, 0xF2	; 242
    8578:	90 e8       	ldi	r25, 0x80	; 128
    857a:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    857c:	1e 8a       	std	Y+22, r1	; 0x16
    857e:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8580:	20 e5       	ldi	r18, 0x50	; 80
    8582:	46 2f       	mov	r20, r22
    8584:	68 2f       	mov	r22, r24
    8586:	ce 01       	movw	r24, r28
    8588:	0e 94 f6 41 	call	0x83ec	; 0x83ec <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    858c:	88 81       	ld	r24, Y
    858e:	80 62       	ori	r24, 0x20	; 32
    8590:	88 83       	st	Y, r24
}
    8592:	df 91       	pop	r29
    8594:	cf 91       	pop	r28
    8596:	08 95       	ret

00008598 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8598:	cf 93       	push	r28
    859a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    859c:	a8 2f       	mov	r26, r24
    859e:	b0 e0       	ldi	r27, 0x00	; 0
    85a0:	97 e1       	ldi	r25, 0x17	; 23
    85a2:	89 9f       	mul	r24, r25
    85a4:	f0 01       	movw	r30, r0
    85a6:	11 24       	eor	r1, r1
    85a8:	ee 5f       	subi	r30, 0xFE	; 254
    85aa:	f2 4f       	sbci	r31, 0xF2	; 242
    85ac:	80 81       	ld	r24, Z
    85ae:	85 ff       	sbrs	r24, 5
    85b0:	02 c0       	rjmp	.+4      	; 0x85b6 <TriggerNote+0x1e>
    85b2:	87 fd       	sbrc	r24, 7
    85b4:	2e c0       	rjmp	.+92     	; 0x8612 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    85b6:	21 11       	cpse	r18, r1
    85b8:	18 c0       	rjmp	.+48     	; 0x85ea <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    85ba:	97 e1       	ldi	r25, 0x17	; 23
    85bc:	9a 9f       	mul	r25, r26
    85be:	f0 01       	movw	r30, r0
    85c0:	9b 9f       	mul	r25, r27
    85c2:	f0 0d       	add	r31, r0
    85c4:	11 24       	eor	r1, r1
    85c6:	ee 5f       	subi	r30, 0xFE	; 254
    85c8:	f2 4f       	sbci	r31, 0xF2	; 242
    85ca:	97 85       	ldd	r25, Z+15	; 0x0f
    85cc:	91 11       	cpse	r25, r1
    85ce:	02 c0       	rjmp	.+4      	; 0x85d4 <TriggerNote+0x3c>
    85d0:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    85d2:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    85d4:	97 e1       	ldi	r25, 0x17	; 23
    85d6:	9a 9f       	mul	r25, r26
    85d8:	f0 01       	movw	r30, r0
    85da:	9b 9f       	mul	r25, r27
    85dc:	f0 0d       	add	r31, r0
    85de:	11 24       	eor	r1, r1
    85e0:	ee 5f       	subi	r30, 0xFE	; 254
    85e2:	f2 4f       	sbci	r31, 0xF2	; 242
    85e4:	8f 7b       	andi	r24, 0xBF	; 191
    85e6:	80 83       	st	Z, r24
    85e8:	14 c0       	rjmp	.+40     	; 0x8612 <TriggerNote+0x7a>
    85ea:	82 2f       	mov	r24, r18
    85ec:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    85ee:	97 e1       	ldi	r25, 0x17	; 23
    85f0:	9a 9f       	mul	r25, r26
    85f2:	e0 01       	movw	r28, r0
    85f4:	9b 9f       	mul	r25, r27
    85f6:	d0 0d       	add	r29, r0
    85f8:	11 24       	eor	r1, r1
    85fa:	ce 5f       	subi	r28, 0xFE	; 254
    85fc:	d2 4f       	sbci	r29, 0xF2	; 242
    85fe:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8600:	1e 8a       	std	Y+22, r1	; 0x16
    8602:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8604:	48 2f       	mov	r20, r24
    8606:	ce 01       	movw	r24, r28
    8608:	0e 94 f6 41 	call	0x83ec	; 0x83ec <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    860c:	88 81       	ld	r24, Y
    860e:	80 62       	ori	r24, 0x20	; 32
    8610:	88 83       	st	Y, r24
		}

	}
}
    8612:	df 91       	pop	r29
    8614:	cf 91       	pop	r28
    8616:	08 95       	ret

00008618 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8618:	6f 92       	push	r6
    861a:	7f 92       	push	r7
    861c:	8f 92       	push	r8
    861e:	9f 92       	push	r9
    8620:	af 92       	push	r10
    8622:	bf 92       	push	r11
    8624:	cf 92       	push	r12
    8626:	df 92       	push	r13
    8628:	ef 92       	push	r14
    862a:	ff 92       	push	r15
    862c:	0f 93       	push	r16
    862e:	1f 93       	push	r17
    8630:	cf 93       	push	r28
    8632:	df 93       	push	r29
    8634:	c2 e0       	ldi	r28, 0x02	; 2
    8636:	dd e0       	ldi	r29, 0x0D	; 13
    8638:	00 ed       	ldi	r16, 0xD0	; 208
    863a:	1c e0       	ldi	r17, 0x0C	; 12
    863c:	d8 01       	movw	r26, r16
    863e:	9e 01       	movw	r18, r28
    8640:	40 e0       	ldi	r20, 0x00	; 0
    8642:	50 e0       	ldi	r21, 0x00	; 0
    8644:	ca 01       	movw	r24, r20
    8646:	8e 5f       	subi	r24, 0xFE	; 254
    8648:	92 4f       	sbci	r25, 0xF2	; 242
    864a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    864c:	fc 01       	movw	r30, r24
    864e:	87 85       	ldd	r24, Z+15	; 0x0f
    8650:	88 23       	and	r24, r24
    8652:	91 f0       	breq	.+36     	; 0x8678 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8654:	66 85       	ldd	r22, Z+14	; 0x0e
    8656:	99 27       	eor	r25, r25
    8658:	87 fd       	sbrc	r24, 7
    865a:	90 95       	com	r25
    865c:	86 0f       	add	r24, r22
    865e:	91 1d       	adc	r25, r1
    8660:	8f 3f       	cpi	r24, 0xFF	; 255
    8662:	91 05       	cpc	r25, r1
    8664:	19 f0       	breq	.+6      	; 0x866c <ProcessMusic+0x54>
    8666:	14 f0       	brlt	.+4      	; 0x866c <ProcessMusic+0x54>
    8668:	8f ef       	ldi	r24, 0xFF	; 255
    866a:	90 e0       	ldi	r25, 0x00	; 0
    866c:	97 ff       	sbrs	r25, 7
    866e:	02 c0       	rjmp	.+4      	; 0x8674 <ProcessMusic+0x5c>
    8670:	80 e0       	ldi	r24, 0x00	; 0
    8672:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8674:	f6 01       	movw	r30, r12
    8676:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8678:	f9 01       	movw	r30, r18
    867a:	f0 80       	ld	r15, Z
    867c:	f3 fe       	sbrs	r15, 3
    867e:	2a c0       	rjmp	.+84     	; 0x86d4 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8680:	65 81       	ldd	r22, Z+5	; 0x05
    8682:	76 81       	ldd	r23, Z+6	; 0x06
    8684:	11 96       	adiw	r26, 0x01	; 1
    8686:	8d 91       	ld	r24, X+
    8688:	9c 91       	ld	r25, X
    868a:	12 97       	sbiw	r26, 0x02	; 2
    868c:	86 0f       	add	r24, r22
    868e:	97 1f       	adc	r25, r23
    8690:	12 96       	adiw	r26, 0x02	; 2
    8692:	9c 93       	st	X, r25
    8694:	8e 93       	st	-X, r24
    8696:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8698:	f6 01       	movw	r30, r12
    869a:	e7 80       	ldd	r14, Z+7	; 0x07
    869c:	ee 2d       	mov	r30, r14
    869e:	f0 e0       	ldi	r31, 0x00	; 0
    86a0:	ee 0f       	add	r30, r30
    86a2:	ff 1f       	adc	r31, r31
    86a4:	e8 5f       	subi	r30, 0xF8	; 248
    86a6:	f4 47       	sbci	r31, 0x74	; 116
    86a8:	c5 90       	lpm	r12, Z+
    86aa:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    86ac:	16 16       	cp	r1, r22
    86ae:	17 06       	cpc	r1, r23
    86b0:	24 f4       	brge	.+8      	; 0x86ba <ProcessMusic+0xa2>
    86b2:	8c 15       	cp	r24, r12
    86b4:	9d 05       	cpc	r25, r13
    86b6:	30 f4       	brcc	.+12     	; 0x86c4 <ProcessMusic+0xac>
    86b8:	0d c0       	rjmp	.+26     	; 0x86d4 <ProcessMusic+0xbc>
    86ba:	67 2b       	or	r22, r23
    86bc:	59 f0       	breq	.+22     	; 0x86d4 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    86be:	c8 16       	cp	r12, r24
    86c0:	d9 06       	cpc	r13, r25
    86c2:	40 f0       	brcs	.+16     	; 0x86d4 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    86c4:	12 96       	adiw	r26, 0x02	; 2
    86c6:	dc 92       	st	X, r13
    86c8:	ce 92       	st	-X, r12
    86ca:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    86cc:	8f 2d       	mov	r24, r15
    86ce:	87 7f       	andi	r24, 0xF7	; 247
    86d0:	f9 01       	movw	r30, r18
    86d2:	80 83       	st	Z, r24
    86d4:	49 5e       	subi	r20, 0xE9	; 233
    86d6:	5f 4f       	sbci	r21, 0xFF	; 255
    86d8:	29 5e       	subi	r18, 0xE9	; 233
    86da:	3f 4f       	sbci	r19, 0xFF	; 255
    86dc:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    86de:	43 37       	cpi	r20, 0x73	; 115
    86e0:	51 05       	cpc	r21, r1
    86e2:	09 f0       	breq	.+2      	; 0x86e6 <ProcessMusic+0xce>
    86e4:	af cf       	rjmp	.-162    	; 0x8644 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    86e6:	80 91 ce 0c 	lds	r24, 0x0CCE
    86ea:	88 23       	and	r24, r24
    86ec:	09 f4       	brne	.+2      	; 0x86f0 <ProcessMusic+0xd8>
    86ee:	cc c0       	rjmp	.+408    	; 0x8888 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    86f0:	57 e1       	ldi	r21, 0x17	; 23
    86f2:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    86f4:	80 91 75 0d 	lds	r24, 0x0D75
    86f8:	90 91 76 0d 	lds	r25, 0x0D76
    86fc:	20 91 7b 0d 	lds	r18, 0x0D7B
    8700:	30 91 7c 0d 	lds	r19, 0x0D7C
    8704:	82 17       	cp	r24, r18
    8706:	93 07       	cpc	r25, r19
    8708:	09 f0       	breq	.+2      	; 0x870c <ProcessMusic+0xf4>
    870a:	b9 c0       	rjmp	.+370    	; 0x887e <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    870c:	20 91 7e 0d 	lds	r18, 0x0D7E
    8710:	30 91 7f 0d 	lds	r19, 0x0D7F
    8714:	b9 01       	movw	r22, r18
    8716:	6f 5f       	subi	r22, 0xFF	; 255
    8718:	7f 4f       	sbci	r23, 0xFF	; 255
    871a:	70 93 7f 0d 	sts	0x0D7F, r23
    871e:	60 93 7e 0d 	sts	0x0D7E, r22
    8722:	f9 01       	movw	r30, r18
    8724:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8726:	4f 3f       	cpi	r20, 0xFF	; 255
    8728:	79 f5       	brne	.+94     	; 0x8788 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    872a:	a9 01       	movw	r20, r18
    872c:	4e 5f       	subi	r20, 0xFE	; 254
    872e:	5f 4f       	sbci	r21, 0xFF	; 255
    8730:	50 93 7f 0d 	sts	0x0D7F, r21
    8734:	40 93 7e 0d 	sts	0x0D7E, r20
    8738:	fb 01       	movw	r30, r22
    873a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    873c:	6f 32       	cpi	r22, 0x2F	; 47
    873e:	19 f4       	brne	.+6      	; 0x8746 <ProcessMusic+0x12e>
						playSong=false;
    8740:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    8744:	9c c0       	rjmp	.+312    	; 0x887e <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8746:	66 30       	cpi	r22, 0x06	; 6
    8748:	09 f0       	breq	.+2      	; 0x874c <ProcessMusic+0x134>
    874a:	8c c0       	rjmp	.+280    	; 0x8864 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    874c:	fa 01       	movw	r30, r20
    874e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8750:	c9 01       	movw	r24, r18
    8752:	04 96       	adiw	r24, 0x04	; 4
    8754:	90 93 7f 0d 	sts	0x0D7F, r25
    8758:	80 93 7e 0d 	sts	0x0D7E, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    875c:	f9 01       	movw	r30, r18
    875e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8760:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8762:	e3 35       	cpi	r30, 0x53	; 83
    8764:	29 f4       	brne	.+10     	; 0x8770 <ProcessMusic+0x158>
							loopStart=songPos;
    8766:	90 93 81 0d 	sts	0x0D81, r25
    876a:	80 93 80 0d 	sts	0x0D80, r24
    876e:	7a c0       	rjmp	.+244    	; 0x8864 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8770:	e5 34       	cpi	r30, 0x45	; 69
    8772:	09 f0       	breq	.+2      	; 0x8776 <ProcessMusic+0x15e>
    8774:	77 c0       	rjmp	.+238    	; 0x8864 <ProcessMusic+0x24c>
							songPos=loopStart;
    8776:	80 91 80 0d 	lds	r24, 0x0D80
    877a:	90 91 81 0d 	lds	r25, 0x0D81
    877e:	90 93 7f 0d 	sts	0x0D7F, r25
    8782:	80 93 7e 0d 	sts	0x0D7E, r24
    8786:	6e c0       	rjmp	.+220    	; 0x8864 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8788:	47 fd       	sbrc	r20, 7
    878a:	40 93 79 0d 	sts	0x0D79, r20
					channel=lastStatus&0x0f;
    878e:	90 91 79 0d 	lds	r25, 0x0D79
    8792:	89 2f       	mov	r24, r25
    8794:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8796:	47 ff       	sbrs	r20, 7
    8798:	08 c0       	rjmp	.+16     	; 0x87aa <ProcessMusic+0x192>
    879a:	2e 5f       	subi	r18, 0xFE	; 254
    879c:	3f 4f       	sbci	r19, 0xFF	; 255
    879e:	30 93 7f 0d 	sts	0x0D7F, r19
    87a2:	20 93 7e 0d 	sts	0x0D7E, r18
    87a6:	fb 01       	movw	r30, r22
    87a8:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    87aa:	90 7f       	andi	r25, 0xF0	; 240
    87ac:	90 3b       	cpi	r25, 0xB0	; 176
    87ae:	e1 f0       	breq	.+56     	; 0x87e8 <ProcessMusic+0x1d0>
    87b0:	90 3c       	cpi	r25, 0xC0	; 192
    87b2:	09 f4       	brne	.+2      	; 0x87b6 <ProcessMusic+0x19e>
    87b4:	51 c0       	rjmp	.+162    	; 0x8858 <ProcessMusic+0x240>
    87b6:	90 39       	cpi	r25, 0x90	; 144
    87b8:	09 f0       	breq	.+2      	; 0x87bc <ProcessMusic+0x1a4>
    87ba:	54 c0       	rjmp	.+168    	; 0x8864 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    87bc:	e0 91 7e 0d 	lds	r30, 0x0D7E
    87c0:	f0 91 7f 0d 	lds	r31, 0x0D7F
    87c4:	9f 01       	movw	r18, r30
    87c6:	2f 5f       	subi	r18, 0xFF	; 255
    87c8:	3f 4f       	sbci	r19, 0xFF	; 255
    87ca:	30 93 7f 0d 	sts	0x0D7F, r19
    87ce:	20 93 7e 0d 	sts	0x0D7E, r18
    87d2:	24 91       	lpm	r18, Z
    87d4:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    87d6:	f8 9e       	mul	r15, r24
    87d8:	f0 01       	movw	r30, r0
    87da:	11 24       	eor	r1, r1
    87dc:	ee 5f       	subi	r30, 0xFE	; 254
    87de:	f2 4f       	sbci	r31, 0xF2	; 242
    87e0:	60 89       	ldd	r22, Z+16	; 0x10
    87e2:	0e 94 cc 42 	call	0x8598	; 0x8598 <TriggerNote>
    87e6:	3e c0       	rjmp	.+124    	; 0x8864 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    87e8:	e0 91 7e 0d 	lds	r30, 0x0D7E
    87ec:	f0 91 7f 0d 	lds	r31, 0x0D7F
    87f0:	9f 01       	movw	r18, r30
    87f2:	2f 5f       	subi	r18, 0xFF	; 255
    87f4:	3f 4f       	sbci	r19, 0xFF	; 255
    87f6:	30 93 7f 0d 	sts	0x0D7F, r19
    87fa:	20 93 7e 0d 	sts	0x0D7E, r18
    87fe:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8800:	47 30       	cpi	r20, 0x07	; 7
    8802:	49 f4       	brne	.+18     	; 0x8816 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8804:	f8 9e       	mul	r15, r24
    8806:	d0 01       	movw	r26, r0
    8808:	11 24       	eor	r1, r1
    880a:	ae 5f       	subi	r26, 0xFE	; 254
    880c:	b2 4f       	sbci	r27, 0xF2	; 242
    880e:	ee 0f       	add	r30, r30
    8810:	1c 96       	adiw	r26, 0x0c	; 12
    8812:	ec 93       	st	X, r30
    8814:	27 c0       	rjmp	.+78     	; 0x8864 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8816:	4b 30       	cpi	r20, 0x0B	; 11
    8818:	49 f4       	brne	.+18     	; 0x882c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    881a:	f8 9e       	mul	r15, r24
    881c:	d0 01       	movw	r26, r0
    881e:	11 24       	eor	r1, r1
    8820:	ae 5f       	subi	r26, 0xFE	; 254
    8822:	b2 4f       	sbci	r27, 0xF2	; 242
    8824:	ee 0f       	add	r30, r30
    8826:	13 96       	adiw	r26, 0x03	; 3
    8828:	ec 93       	st	X, r30
    882a:	1c c0       	rjmp	.+56     	; 0x8864 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    882c:	4c 35       	cpi	r20, 0x5C	; 92
    882e:	49 f4       	brne	.+18     	; 0x8842 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8830:	f8 9e       	mul	r15, r24
    8832:	d0 01       	movw	r26, r0
    8834:	11 24       	eor	r1, r1
    8836:	ae 5f       	subi	r26, 0xFE	; 254
    8838:	b2 4f       	sbci	r27, 0xF2	; 242
    883a:	ee 0f       	add	r30, r30
    883c:	1a 96       	adiw	r26, 0x0a	; 10
    883e:	ec 93       	st	X, r30
    8840:	11 c0       	rjmp	.+34     	; 0x8864 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8842:	44 36       	cpi	r20, 0x64	; 100
    8844:	79 f4       	brne	.+30     	; 0x8864 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8846:	f8 9e       	mul	r15, r24
    8848:	d0 01       	movw	r26, r0
    884a:	11 24       	eor	r1, r1
    884c:	ae 5f       	subi	r26, 0xFE	; 254
    884e:	b2 4f       	sbci	r27, 0xF2	; 242
    8850:	ee 0f       	add	r30, r30
    8852:	1b 96       	adiw	r26, 0x0b	; 11
    8854:	ec 93       	st	X, r30
    8856:	06 c0       	rjmp	.+12     	; 0x8864 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8858:	f8 9e       	mul	r15, r24
    885a:	f0 01       	movw	r30, r0
    885c:	11 24       	eor	r1, r1
    885e:	ee 5f       	subi	r30, 0xFE	; 254
    8860:	f2 4f       	sbci	r31, 0xF2	; 242
    8862:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8864:	8e e7       	ldi	r24, 0x7E	; 126
    8866:	9d e0       	ldi	r25, 0x0D	; 13
    8868:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <ReadVarLen>
    886c:	90 93 7c 0d 	sts	0x0D7C, r25
    8870:	80 93 7b 0d 	sts	0x0D7B, r24
				currDeltaTime=0;
    8874:	10 92 76 0d 	sts	0x0D76, r1
    8878:	10 92 75 0d 	sts	0x0D75, r1
    887c:	3b cf       	rjmp	.-394    	; 0x86f4 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    887e:	01 96       	adiw	r24, 0x01	; 1
    8880:	90 93 76 0d 	sts	0x0D76, r25
    8884:	80 93 75 0d 	sts	0x0D75, r24
    8888:	9b e0       	ldi	r25, 0x0B	; 11
    888a:	a9 2e       	mov	r10, r25
    888c:	9d e0       	ldi	r25, 0x0D	; 13
    888e:	b9 2e       	mov	r11, r25
    8890:	25 e1       	ldi	r18, 0x15	; 21
    8892:	c2 2e       	mov	r12, r18
    8894:	2d e0       	ldi	r18, 0x0D	; 13
    8896:	d2 2e       	mov	r13, r18
    8898:	36 e1       	ldi	r19, 0x16	; 22
    889a:	e3 2e       	mov	r14, r19
    889c:	3d e0       	ldi	r19, 0x0D	; 13
    889e:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    88a0:	66 24       	eor	r6, r6
    88a2:	6a 94       	dec	r6
    88a4:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    88a6:	88 81       	ld	r24, Y
    88a8:	85 ff       	sbrs	r24, 5
    88aa:	42 c0       	rjmp	.+132    	; 0x8930 <ProcessMusic+0x318>
    88ac:	2d 89       	ldd	r18, Y+21	; 0x15
    88ae:	3e 89       	ldd	r19, Y+22	; 0x16
    88b0:	23 2b       	or	r18, r19
    88b2:	09 f4       	brne	.+2      	; 0x88b6 <ProcessMusic+0x29e>
    88b4:	3d c0       	rjmp	.+122    	; 0x8930 <ProcessMusic+0x318>
    88b6:	86 fd       	sbrc	r24, 6
    88b8:	3b c0       	rjmp	.+118    	; 0x8930 <ProcessMusic+0x318>
    88ba:	47 01       	movw	r8, r14
    88bc:	f2 e0       	ldi	r31, 0x02	; 2
    88be:	8f 1a       	sub	r8, r31
    88c0:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    88c2:	d6 01       	movw	r26, r12
    88c4:	9c 91       	ld	r25, X
    88c6:	f4 01       	movw	r30, r8
    88c8:	80 81       	ld	r24, Z
    88ca:	98 13       	cpse	r25, r24
    88cc:	2e c0       	rjmp	.+92     	; 0x892a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    88ce:	ed 89       	ldd	r30, Y+21	; 0x15
    88d0:	fe 89       	ldd	r31, Y+22	; 0x16
    88d2:	bf 01       	movw	r22, r30
    88d4:	6f 5f       	subi	r22, 0xFF	; 255
    88d6:	7f 4f       	sbci	r23, 0xFF	; 255
    88d8:	7e 8b       	std	Y+22, r23	; 0x16
    88da:	6d 8b       	std	Y+21, r22	; 0x15
    88dc:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    88de:	8f 3f       	cpi	r24, 0xFF	; 255
    88e0:	31 f4       	brne	.+12     	; 0x88ee <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    88e2:	88 81       	ld	r24, Y
    88e4:	8f 77       	andi	r24, 0x7F	; 127
    88e6:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    88e8:	1e 8a       	std	Y+22, r1	; 0x16
    88ea:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    88ec:	1e c0       	rjmp	.+60     	; 0x892a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    88ee:	9f 01       	movw	r18, r30
    88f0:	2e 5f       	subi	r18, 0xFE	; 254
    88f2:	3f 4f       	sbci	r19, 0xFF	; 255
    88f4:	3e 8b       	std	Y+22, r19	; 0x16
    88f6:	2d 8b       	std	Y+21, r18	; 0x15
    88f8:	fb 01       	movw	r30, r22
    88fa:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    88fc:	e8 2f       	mov	r30, r24
    88fe:	f0 e0       	ldi	r31, 0x00	; 0
    8900:	ee 0f       	add	r30, r30
    8902:	ff 1f       	adc	r31, r31
    8904:	ec 51       	subi	r30, 0x1C	; 28
    8906:	ff 4f       	sbci	r31, 0xFF	; 255
    8908:	25 91       	lpm	r18, Z+
    890a:	34 91       	lpm	r19, Z
    890c:	ce 01       	movw	r24, r28
    890e:	f9 01       	movw	r30, r18
    8910:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8912:	ed 89       	ldd	r30, Y+21	; 0x15
    8914:	fe 89       	ldd	r31, Y+22	; 0x16
    8916:	cf 01       	movw	r24, r30
    8918:	01 96       	adiw	r24, 0x01	; 1
    891a:	9e 8b       	std	Y+22, r25	; 0x16
    891c:	8d 8b       	std	Y+21, r24	; 0x15
    891e:	e4 91       	lpm	r30, Z
    8920:	d4 01       	movw	r26, r8
    8922:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8924:	f6 01       	movw	r30, r12
    8926:	10 82       	st	Z, r1
    8928:	cc cf       	rjmp	.-104    	; 0x88c2 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    892a:	9f 5f       	subi	r25, 0xFF	; 255
    892c:	d6 01       	movw	r26, r12
    892e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8930:	98 81       	ld	r25, Y
    8932:	95 ff       	sbrs	r25, 5
    8934:	6c c0       	rjmp	.+216    	; 0x8a0e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8936:	f7 01       	movw	r30, r14
    8938:	80 81       	ld	r24, Z
    893a:	8f 3f       	cpi	r24, 0xFF	; 255
    893c:	11 f0       	breq	.+4      	; 0x8942 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    893e:	8f 5f       	subi	r24, 0xFF	; 255
    8940:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8942:	97 fd       	sbrc	r25, 7
    8944:	04 c0       	rjmp	.+8      	; 0x894e <ProcessMusic+0x336>
    8946:	f7 01       	movw	r30, r14
    8948:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    894a:	90 81       	ld	r25, Z
    894c:	01 c0       	rjmp	.+2      	; 0x8950 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    894e:	9f ef       	ldi	r25, 0xFF	; 255
    8950:	f7 01       	movw	r30, r14
    8952:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8954:	80 81       	ld	r24, Z
    8956:	88 23       	and	r24, r24
    8958:	09 f4       	brne	.+2      	; 0x895c <ProcessMusic+0x344>
    895a:	4e c0       	rjmp	.+156    	; 0x89f8 <ProcessMusic+0x3e0>
    895c:	31 96       	adiw	r30, 0x01	; 1
    895e:	50 81       	ld	r21, Z
    8960:	55 23       	and	r21, r21
    8962:	09 f4       	brne	.+2      	; 0x8966 <ProcessMusic+0x34e>
    8964:	49 c0       	rjmp	.+146    	; 0x89f8 <ProcessMusic+0x3e0>
    8966:	99 23       	and	r25, r25
    8968:	09 f4       	brne	.+2      	; 0x896c <ProcessMusic+0x354>
    896a:	46 c0       	rjmp	.+140    	; 0x89f8 <ProcessMusic+0x3e0>
    896c:	40 91 7a 0d 	lds	r20, 0x0D7A
    8970:	44 23       	and	r20, r20
    8972:	09 f4       	brne	.+2      	; 0x8976 <ProcessMusic+0x35e>
    8974:	41 c0       	rjmp	.+130    	; 0x89f8 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8976:	89 9f       	mul	r24, r25
    8978:	c0 01       	movw	r24, r0
    897a:	11 24       	eor	r1, r1
    897c:	93 95       	inc	r25
				uVol>>=8;
    897e:	89 2f       	mov	r24, r25
    8980:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8982:	58 9f       	mul	r21, r24
    8984:	90 01       	movw	r18, r0
    8986:	59 9f       	mul	r21, r25
    8988:	30 0d       	add	r19, r0
    898a:	11 24       	eor	r1, r1
    898c:	c9 01       	movw	r24, r18
    898e:	93 95       	inc	r25
				uVol>>=8;
    8990:	89 2f       	mov	r24, r25
    8992:	99 27       	eor	r25, r25
    8994:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8996:	50 81       	ld	r21, Z
    8998:	58 9f       	mul	r21, r24
    899a:	90 01       	movw	r18, r0
    899c:	59 9f       	mul	r21, r25
    899e:	30 0d       	add	r19, r0
    89a0:	11 24       	eor	r1, r1
    89a2:	33 95       	inc	r19
					uVol>>=8;
    89a4:	23 2f       	mov	r18, r19
    89a6:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    89a8:	42 9f       	mul	r20, r18
    89aa:	c0 01       	movw	r24, r0
    89ac:	43 9f       	mul	r20, r19
    89ae:	90 0d       	add	r25, r0
    89b0:	11 24       	eor	r1, r1
    89b2:	93 95       	inc	r25
				uVol>>=8;
    89b4:	89 2f       	mov	r24, r25
    89b6:	99 27       	eor	r25, r25
    89b8:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    89ba:	20 81       	ld	r18, Z
    89bc:	22 23       	and	r18, r18
    89be:	f1 f0       	breq	.+60     	; 0x89fc <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    89c0:	d5 01       	movw	r26, r10
    89c2:	ec 91       	ld	r30, X
    89c4:	f0 e0       	ldi	r31, 0x00	; 0
    89c6:	e0 50       	subi	r30, 0x00	; 0
    89c8:	f3 47       	sbci	r31, 0x73	; 115
    89ca:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    89cc:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    89ce:	2e 9f       	mul	r18, r30
    89d0:	f0 01       	movw	r30, r0
    89d2:	11 24       	eor	r1, r1
    89d4:	f3 95       	inc	r31
					tVol>>=8;
    89d6:	ef 2f       	mov	r30, r31
    89d8:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    89da:	a3 01       	movw	r20, r6
    89dc:	4e 1b       	sub	r20, r30
    89de:	5f 0b       	sbc	r21, r31
    89e0:	48 9f       	mul	r20, r24
    89e2:	90 01       	movw	r18, r0
    89e4:	49 9f       	mul	r20, r25
    89e6:	30 0d       	add	r19, r0
    89e8:	58 9f       	mul	r21, r24
    89ea:	30 0d       	add	r19, r0
    89ec:	11 24       	eor	r1, r1
    89ee:	c9 01       	movw	r24, r18
    89f0:	93 95       	inc	r25
					uVol>>=8;
    89f2:	89 2f       	mov	r24, r25
    89f4:	99 27       	eor	r25, r25
    89f6:	02 c0       	rjmp	.+4      	; 0x89fc <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    89f8:	80 e0       	ldi	r24, 0x00	; 0
    89fa:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    89fc:	f5 01       	movw	r30, r10
    89fe:	30 81       	ld	r19, Z
    8a00:	f7 01       	movw	r30, r14
    8a02:	39 97       	sbiw	r30, 0x09	; 9
    8a04:	20 81       	ld	r18, Z
    8a06:	23 0f       	add	r18, r19
    8a08:	d5 01       	movw	r26, r10
    8a0a:	2c 93       	st	X, r18
    8a0c:	02 c0       	rjmp	.+4      	; 0x8a12 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8a0e:	80 e0       	ldi	r24, 0x00	; 0
    8a10:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8a12:	f8 01       	movw	r30, r16
    8a14:	80 83       	st	Z, r24
    8a16:	67 96       	adiw	r28, 0x17	; 23
    8a18:	0a 5f       	subi	r16, 0xFA	; 250
    8a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    8a1c:	f7 e1       	ldi	r31, 0x17	; 23
    8a1e:	af 0e       	add	r10, r31
    8a20:	b1 1c       	adc	r11, r1
    8a22:	87 e1       	ldi	r24, 0x17	; 23
    8a24:	c8 0e       	add	r12, r24
    8a26:	d1 1c       	adc	r13, r1
    8a28:	97 e1       	ldi	r25, 0x17	; 23
    8a2a:	e9 0e       	add	r14, r25
    8a2c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8a2e:	ad e0       	ldi	r26, 0x0D	; 13
    8a30:	c5 37       	cpi	r28, 0x75	; 117
    8a32:	da 07       	cpc	r29, r26
    8a34:	09 f0       	breq	.+2      	; 0x8a38 <ProcessMusic+0x420>
    8a36:	37 cf       	rjmp	.-402    	; 0x88a6 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8a38:	df 91       	pop	r29
    8a3a:	cf 91       	pop	r28
    8a3c:	1f 91       	pop	r17
    8a3e:	0f 91       	pop	r16
    8a40:	ff 90       	pop	r15
    8a42:	ef 90       	pop	r14
    8a44:	df 90       	pop	r13
    8a46:	cf 90       	pop	r12
    8a48:	bf 90       	pop	r11
    8a4a:	af 90       	pop	r10
    8a4c:	9f 90       	pop	r9
    8a4e:	8f 90       	pop	r8
    8a50:	7f 90       	pop	r7
    8a52:	6f 90       	pop	r6
    8a54:	08 95       	ret

00008a56 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8a56:	80 93 7a 0d 	sts	0x0D7A, r24
    8a5a:	08 95       	ret

00008a5c <IsSongPlaying>:
	return masterVolume;
}

bool IsSongPlaying(){
    return playSong;
}
    8a5c:	80 91 ce 0c 	lds	r24, 0x0CCE
    8a60:	08 95       	ret

00008a62 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8a62:	99 27       	eor	r25, r25
	clr r23
    8a64:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8a66:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8a68:	09 f4       	brne	.+2      	; 0x8a6c <set_note_waves>
		ret
    8a6a:	08 95       	ret

00008a6c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8a6c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8a6e:	fb e8       	ldi	r31, 0x8B	; 139
	lsl r22
    8a70:	66 0f       	add	r22, r22
	rol r23
    8a72:	77 1f       	adc	r23, r23
	add ZL,r22
    8a74:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8a76:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8a78:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8a7a:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8a7c:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8a7e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8a80:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8a82:	28 9f       	mul	r18, r24
	add ZL,r0
    8a84:	e0 0d       	add	r30, r0
	adc ZH,r1
    8a86:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8a88:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8a8a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8a8c:	11 24       	eor	r1, r1
	

	ret
    8a8e:	08 95       	ret

00008a90 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8a90:	99 27       	eor	r25, r25
	clr r23
    8a92:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8a94:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8a96:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8a98:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8a9a:	28 9f       	mul	r18, r24
	add ZL,r0
    8a9c:	e0 0d       	add	r30, r0
	adc ZH,r1
    8a9e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8aa0:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8aa2:	31 f4       	brne	.+12     	; 0x8ab0 <smw1>
	lds r22,tr4_params
    8aa4:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8aa8:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8aaa:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8aae:	0b c0       	rjmp	.+22     	; 0x8ac6 <esmw>

00008ab0 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8ab0:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8ab2:	31 f4       	brne	.+12     	; 0x8ac0 <smw2>
	lds r22,tr4_params
    8ab4:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8ab8:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8aba:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8abe:	03 c0       	rjmp	.+6      	; 0x8ac6 <esmw>

00008ac0 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8ac0:	7d e8       	ldi	r23, 0x8D	; 141
	add r23,r22
    8ac2:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8ac4:	75 83       	std	Z+5, r23	; 0x05

00008ac6 <esmw>:

esmw:
	clr r1	
    8ac6:	11 24       	eor	r1, r1
	ret
    8ac8:	08 95       	ret
	...

00008b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8b02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8b06:	08 95       	ret

00008b08 <steptable>:
    8b08:	22 00       	.word	0x0022	; ????
    8b0a:	24 00       	.word	0x0024	; ????
    8b0c:	26 00       	.word	0x0026	; ????
    8b0e:	28 00       	.word	0x0028	; ????
    8b10:	2b 00       	.word	0x002b	; ????
    8b12:	2d 00       	.word	0x002d	; ????
    8b14:	30 00       	.word	0x0030	; ????
    8b16:	33 00       	.word	0x0033	; ????
    8b18:	36 00       	.word	0x0036	; ????
    8b1a:	39 00       	.word	0x0039	; ????
    8b1c:	3d 00       	.word	0x003d	; ????
    8b1e:	40 00       	.word	0x0040	; ????
    8b20:	44 00       	.word	0x0044	; ????
    8b22:	48 00       	.word	0x0048	; ????
    8b24:	4c 00       	.word	0x004c	; ????
    8b26:	51 00       	.word	0x0051	; ????
    8b28:	56 00       	.word	0x0056	; ????
    8b2a:	5b 00       	.word	0x005b	; ????
    8b2c:	60 00       	.word	0x0060	; ????
    8b2e:	66 00       	.word	0x0066	; ????
    8b30:	6c 00       	.word	0x006c	; ????
    8b32:	73 00       	.word	0x0073	; ????
    8b34:	79 00       	.word	0x0079	; ????
    8b36:	81 00       	.word	0x0081	; ????
    8b38:	88 00       	.word	0x0088	; ????
    8b3a:	90 00       	.word	0x0090	; ????
    8b3c:	99 00       	.word	0x0099	; ????
    8b3e:	a2 00       	.word	0x00a2	; ????
    8b40:	ac 00       	.word	0x00ac	; ????
    8b42:	b6 00       	.word	0x00b6	; ????
    8b44:	c1 00       	.word	0x00c1	; ????
    8b46:	cc 00       	.word	0x00cc	; ????
    8b48:	d8 00       	.word	0x00d8	; ????
    8b4a:	e5 00       	.word	0x00e5	; ????
    8b4c:	f3 00       	.word	0x00f3	; ????
    8b4e:	01 01       	movw	r0, r2
    8b50:	10 01       	movw	r2, r0
    8b52:	21 01       	movw	r4, r2
    8b54:	32 01       	movw	r6, r4
    8b56:	44 01       	movw	r8, r8
    8b58:	57 01       	movw	r10, r14
    8b5a:	6c 01       	movw	r12, r24
    8b5c:	81 01       	movw	r16, r2
    8b5e:	98 01       	movw	r18, r16
    8b60:	b0 01       	movw	r22, r0
    8b62:	ca 01       	movw	r24, r20
    8b64:	e5 01       	movw	r28, r10
    8b66:	02 02       	muls	r16, r18
    8b68:	21 02       	muls	r18, r17
    8b6a:	41 02       	muls	r20, r17
    8b6c:	64 02       	muls	r22, r20
    8b6e:	88 02       	muls	r24, r24
    8b70:	ae 02       	muls	r26, r30
    8b72:	d7 02       	muls	r29, r23
    8b74:	03 03       	mulsu	r16, r19
    8b76:	30 03       	mulsu	r19, r16
    8b78:	61 03       	mulsu	r22, r17
    8b7a:	94 03       	fmuls	r17, r20
    8b7c:	cb 03       	fmulsu	r20, r19
    8b7e:	05 04       	cpc	r0, r5
    8b80:	42 04       	cpc	r4, r2
    8b82:	83 04       	cpc	r8, r3
    8b84:	c7 04       	cpc	r12, r7
    8b86:	10 05       	cpc	r17, r0
    8b88:	5d 05       	cpc	r21, r13
    8b8a:	af 05       	cpc	r26, r15
    8b8c:	05 06       	cpc	r0, r21
    8b8e:	61 06       	cpc	r6, r17
    8b90:	c2 06       	cpc	r12, r18
    8b92:	29 07       	cpc	r18, r25
    8b94:	96 07       	cpc	r25, r22
    8b96:	09 08       	sbc	r0, r9
    8b98:	83 08       	sbc	r8, r3
    8b9a:	05 09       	sbc	r16, r5
    8b9c:	8e 09       	sbc	r24, r14
    8b9e:	20 0a       	sbc	r2, r16
    8ba0:	ba 0a       	sbc	r11, r26
    8ba2:	5d 0b       	sbc	r21, r29
    8ba4:	0a 0c       	add	r0, r10
    8ba6:	c1 0c       	add	r12, r1
    8ba8:	84 0d       	add	r24, r4
    8baa:	51 0e       	add	r5, r17
    8bac:	2b 0f       	add	r18, r27
    8bae:	12 10       	cpse	r1, r2
    8bb0:	07 11       	cpse	r16, r7
    8bb2:	0a 12       	cpse	r0, r26
    8bb4:	1d 13       	cpse	r17, r29
    8bb6:	40 14       	cp	r4, r0
    8bb8:	74 15       	cp	r23, r4
    8bba:	ba 16       	cp	r11, r26
    8bbc:	14 18       	sub	r1, r4
    8bbe:	83 19       	sub	r24, r3
    8bc0:	07 1b       	sub	r16, r23
    8bc2:	a3 1c       	adc	r10, r3
    8bc4:	57 1e       	adc	r5, r23
    8bc6:	24 20       	and	r2, r4
    8bc8:	0e 22       	and	r0, r30
    8bca:	14 24       	eor	r1, r4
    8bcc:	39 26       	eor	r3, r25
    8bce:	7f 28       	or	r7, r15
    8bd0:	e8 2a       	or	r14, r24
    8bd2:	75 2d       	mov	r23, r5
    8bd4:	29 30       	cpi	r18, 0x09	; 9
    8bd6:	06 33       	cpi	r16, 0x36	; 54
    8bd8:	0f 36       	cpi	r16, 0x6F	; 111
    8bda:	45 39       	cpi	r20, 0x95	; 149
    8bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    8bde:	49 40       	sbci	r20, 0x09	; 9
    8be0:	1b 44       	sbci	r17, 0x4B	; 75
    8be2:	28 48       	sbci	r18, 0x88	; 136
    8be4:	73 4c       	sbci	r23, 0xC3	; 195
    8be6:	fe 50       	subi	r31, 0x0E	; 14
    8be8:	cf 55       	subi	r28, 0x5F	; 95
    8bea:	ea 5a       	subi	r30, 0xAA	; 170
    8bec:	51 60       	ori	r21, 0x01	; 1
    8bee:	0c 66       	ori	r16, 0x6C	; 108
    8bf0:	1d 6c       	ori	r17, 0xCD	; 205
    8bf2:	8b 72       	andi	r24, 0x2B	; 43
    8bf4:	5a 79       	andi	r21, 0x9A	; 154
    8bf6:	92 80       	ldd	r9, Z+2	; 0x02
    8bf8:	37 88       	ldd	r3, Z+23	; 0x17
    8bfa:	50 90 e5 98 	lds	r5, 0x98E5
    8bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    8c00:	9f ab       	std	Y+55, r25	; 0x37
    8c02:	d3 b5       	in	r29, 0x23	; 35
    8c04:	a3 c0       	rjmp	.+326    	; 0x8d4c <waves+0x4c>
	...

00008d00 <waves>:
    8d00:	00 03       	mulsu	r16, r16
    8d02:	06 09       	sbc	r16, r6
    8d04:	0c 10       	cpse	r0, r12
    8d06:	13 16       	cp	r1, r19
    8d08:	19 1c       	adc	r1, r9
    8d0a:	1f 22       	and	r1, r31
    8d0c:	25 28       	or	r2, r5
    8d0e:	2b 2e       	mov	r2, r27
    8d10:	31 33       	cpi	r19, 0x31	; 49
    8d12:	36 39       	cpi	r19, 0x96	; 150
    8d14:	3c 3f       	cpi	r19, 0xFC	; 252
    8d16:	41 44       	sbci	r20, 0x41	; 65
    8d18:	47 49       	sbci	r20, 0x97	; 151
    8d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8d1c:	51 53       	subi	r21, 0x31	; 49
    8d1e:	55 58       	subi	r21, 0x85	; 133
    8d20:	5a 5c       	subi	r21, 0xCA	; 202
    8d22:	5e 60       	ori	r21, 0x0E	; 14
    8d24:	62 64       	ori	r22, 0x42	; 66
    8d26:	66 68       	ori	r22, 0x86	; 134
    8d28:	6a 6b       	ori	r22, 0xBA	; 186
    8d2a:	6d 6f       	ori	r22, 0xFD	; 253
    8d2c:	70 71       	andi	r23, 0x10	; 16
    8d2e:	73 74       	andi	r23, 0x43	; 67
    8d30:	75 76       	andi	r23, 0x65	; 101
    8d32:	78 79       	andi	r23, 0x98	; 152
    8d34:	7a 7a       	andi	r23, 0xAA	; 170
    8d36:	7b 7c       	andi	r23, 0xCB	; 203
    8d38:	7d 7d       	andi	r23, 0xDD	; 221
    8d3a:	7e 7e       	andi	r23, 0xEE	; 238
    8d3c:	7e 7f       	andi	r23, 0xFE	; 254
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	7f 7f       	andi	r23, 0xFF	; 255
    8d42:	7f 7f       	andi	r23, 0xFF	; 255
    8d44:	7e 7e       	andi	r23, 0xEE	; 238
    8d46:	7e 7d       	andi	r23, 0xDE	; 222
    8d48:	7d 7c       	andi	r23, 0xCD	; 205
    8d4a:	7b 7a       	andi	r23, 0xAB	; 171
    8d4c:	7a 79       	andi	r23, 0x9A	; 154
    8d4e:	78 76       	andi	r23, 0x68	; 104
    8d50:	75 74       	andi	r23, 0x45	; 69
    8d52:	73 71       	andi	r23, 0x13	; 19
    8d54:	70 6f       	ori	r23, 0xF0	; 240
    8d56:	6d 6b       	ori	r22, 0xBD	; 189
    8d58:	6a 68       	ori	r22, 0x8A	; 138
    8d5a:	66 64       	ori	r22, 0x46	; 70
    8d5c:	62 60       	ori	r22, 0x02	; 2
    8d5e:	5e 5c       	subi	r21, 0xCE	; 206
    8d60:	5a 58       	subi	r21, 0x8A	; 138
    8d62:	55 53       	subi	r21, 0x35	; 53
    8d64:	51 4e       	sbci	r21, 0xE1	; 225
    8d66:	4c 49       	sbci	r20, 0x9C	; 156
    8d68:	47 44       	sbci	r20, 0x47	; 71
    8d6a:	41 3f       	cpi	r20, 0xF1	; 241
    8d6c:	3c 39       	cpi	r19, 0x9C	; 156
    8d6e:	36 33       	cpi	r19, 0x36	; 54
    8d70:	31 2e       	mov	r3, r17
    8d72:	2b 28       	or	r2, r11
    8d74:	25 22       	and	r2, r21
    8d76:	1f 1c       	adc	r1, r15
    8d78:	19 16       	cp	r1, r25
    8d7a:	13 10       	cpse	r1, r3
    8d7c:	0c 09       	sbc	r16, r12
    8d7e:	06 03       	mulsu	r16, r22
    8d80:	00 fd       	sbrc	r16, 0
    8d82:	fa f7       	brpl	.-2      	; 0x8d82 <waves+0x82>
    8d84:	f4 f0       	brlt	.+60     	; 0x8dc2 <waves+0xc2>
    8d86:	ed ea       	ldi	r30, 0xAD	; 173
    8d88:	e7 e4       	ldi	r30, 0x47	; 71
    8d8a:	e1 de       	rcall	.-574    	; 0x8b4e <steptable+0x46>
    8d8c:	db d8       	rcall	.-3658   	; 0x7f44 <rj_p2+0x2>
    8d8e:	d5 d2       	rcall	.+1450   	; 0x933a <waves+0x63a>
    8d90:	cf cd       	rjmp	.-1122   	; 0x8930 <ProcessMusic+0x318>
    8d92:	ca c7       	rjmp	.+3988   	; 0x9d28 <LBGetJoyPadState+0x8c>
    8d94:	c4 c1       	rjmp	.+904    	; 0x911e <waves+0x41e>
    8d96:	bf bc       	out	0x2f, r11	; 47
    8d98:	b9 b7       	in	r27, 0x39	; 57
    8d9a:	b4 b2       	in	r11, 0x14	; 20
    8d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8da4:	9e 9c       	mul	r9, r14
    8da6:	9a 98       	cbi	0x13, 2	; 19
    8da8:	96 95       	lsr	r25
    8daa:	93 91       	.word	0x9193	; ????
    8dac:	90 8f       	std	Z+24, r25	; 0x18
    8dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8db0:	8b 8a       	std	Y+19, r8	; 0x13
    8db2:	88 87       	std	Y+8, r24	; 0x08
    8db4:	86 86       	std	Z+14, r8	; 0x0e
    8db6:	85 84       	ldd	r8, Z+13	; 0x0d
    8db8:	83 83       	std	Z+3, r24	; 0x03
    8dba:	82 82       	std	Z+2, r8	; 0x02
    8dbc:	82 81       	ldd	r24, Z+2	; 0x02
    8dbe:	81 81       	ldd	r24, Z+1	; 0x01
    8dc0:	81 81       	ldd	r24, Z+1	; 0x01
    8dc2:	81 81       	ldd	r24, Z+1	; 0x01
    8dc4:	82 82       	std	Z+2, r8	; 0x02
    8dc6:	82 83       	std	Z+2, r24	; 0x02
    8dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8dca:	85 86       	std	Z+13, r8	; 0x0d
    8dcc:	86 87       	std	Z+14, r24	; 0x0e
    8dce:	88 8a       	std	Y+16, r8	; 0x10
    8dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8dd4:	90 91 93 95 	lds	r25, 0x9593
    8dd8:	96 98       	cbi	0x12, 6	; 18
    8dda:	9a 9c       	mul	r9, r10
    8ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    8dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8de4:	af b2       	in	r10, 0x1f	; 31
    8de6:	b4 b7       	in	r27, 0x34	; 52
    8de8:	b9 bc       	out	0x29, r11	; 41
    8dea:	bf c1       	rjmp	.+894    	; 0x916a <waves+0x46a>
    8dec:	c4 c7       	rjmp	.+3976   	; 0x9d76 <LBPrint+0x4>
    8dee:	ca cd       	rjmp	.-1132   	; 0x8984 <ProcessMusic+0x36c>
    8df0:	cf d2       	rcall	.+1438   	; 0x9390 <waves+0x690>
    8df2:	d5 d8       	rcall	.-3670   	; 0x7f9e <wdt_randomize+0x1e>
    8df4:	db de       	rcall	.-586    	; 0x8bac <steptable+0xa4>
    8df6:	e1 e4       	ldi	r30, 0x41	; 65
    8df8:	e7 ea       	ldi	r30, 0xA7	; 167
    8dfa:	ed f0       	brhs	.+58     	; 0x8e36 <waves+0x136>
    8dfc:	f4 f7       	brge	.-4      	; 0x8dfa <waves+0xfa>
    8dfe:	fa fd       	.word	0xfdfa	; ????
    8e00:	80 81       	ld	r24, Z
    8e02:	82 83       	std	Z+2, r24	; 0x02
    8e04:	84 85       	ldd	r24, Z+12	; 0x0c
    8e06:	86 87       	std	Z+14, r24	; 0x0e
    8e08:	88 89       	ldd	r24, Y+16	; 0x10
    8e0a:	8a 8b       	std	Y+18, r24	; 0x12
    8e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8e10:	90 91 92 93 	lds	r25, 0x9392
    8e14:	94 95       	.word	0x9594	; ????
    8e16:	96 97       	sbiw	r26, 0x26	; 38
    8e18:	98 99       	sbic	0x13, 0	; 19
    8e1a:	9a 9b       	sbis	0x13, 2	; 19
    8e1c:	9c 9d       	mul	r25, r12
    8e1e:	9e 9f       	mul	r25, r30
    8e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8e22:	a2 a3       	std	Z+34, r26	; 0x22
    8e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8e26:	a6 a7       	std	Z+46, r26	; 0x2e
    8e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8e2a:	aa ab       	std	Y+50, r26	; 0x32
    8e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8e2e:	ae af       	std	Y+62, r26	; 0x3e
    8e30:	b0 b1       	in	r27, 0x00	; 0
    8e32:	b2 b3       	in	r27, 0x12	; 18
    8e34:	b4 b5       	in	r27, 0x24	; 36
    8e36:	b6 b7       	in	r27, 0x36	; 54
    8e38:	b8 b9       	out	0x08, r27	; 8
    8e3a:	ba bb       	out	0x1a, r27	; 26
    8e3c:	bc bd       	out	0x2c, r27	; 44
    8e3e:	be bf       	out	0x3e, r27	; 62
    8e40:	c0 c1       	rjmp	.+896    	; 0x91c2 <waves+0x4c2>
    8e42:	c2 c3       	rjmp	.+1924   	; 0x95c8 <waves+0x8c8>
    8e44:	c4 c5       	rjmp	.+2952   	; 0x99ce <DrawMap+0x14>
    8e46:	c6 c7       	rjmp	.+3980   	; 0x9dd4 <LBPrintByte+0x2a>
    8e48:	c8 c9       	rjmp	.-3184   	; 0x81da <PatchCommand11+0x10>
    8e4a:	ca cb       	rjmp	.-2156   	; 0x85e0 <TriggerNote+0x48>
    8e4c:	cc cd       	rjmp	.-1128   	; 0x89e6 <ProcessMusic+0x3ce>
    8e4e:	ce cf       	rjmp	.-100    	; 0x8dec <waves+0xec>
    8e50:	d0 d1       	rcall	.+928    	; 0x91f2 <waves+0x4f2>
    8e52:	d2 d3       	rcall	.+1956   	; 0x95f8 <waves+0x8f8>
    8e54:	d4 d5       	rcall	.+2984   	; 0x99fe <DrawMap+0x44>
    8e56:	d6 d7       	rcall	.+4012   	; 0x9e04 <LBPrintByte+0x5a>
    8e58:	d8 d9       	rcall	.-3152   	; 0x820a <PatchCommand11+0x40>
    8e5a:	da db       	rcall	.-2124   	; 0x8610 <TriggerNote+0x78>
    8e5c:	dc dd       	rcall	.-1096   	; 0x8a16 <ProcessMusic+0x3fe>
    8e5e:	de df       	rcall	.-68     	; 0x8e1c <waves+0x11c>
    8e60:	e0 e1       	ldi	r30, 0x10	; 16
    8e62:	e2 e3       	ldi	r30, 0x32	; 50
    8e64:	e4 e5       	ldi	r30, 0x54	; 84
    8e66:	e6 e7       	ldi	r30, 0x76	; 118
    8e68:	e8 e9       	ldi	r30, 0x98	; 152
    8e6a:	ea eb       	ldi	r30, 0xBA	; 186
    8e6c:	ec ed       	ldi	r30, 0xDC	; 220
    8e6e:	ee ef       	ldi	r30, 0xFE	; 254
    8e70:	f0 f1       	brcs	.+124    	; 0x8eee <waves+0x1ee>
    8e72:	f2 f3       	brmi	.-4      	; 0x8e70 <waves+0x170>
    8e74:	f4 f5       	brge	.+124    	; 0x8ef2 <waves+0x1f2>
    8e76:	f6 f7       	brtc	.-4      	; 0x8e74 <waves+0x174>
    8e78:	f8 f9       	.word	0xf9f8	; ????
    8e7a:	fa fb       	.word	0xfbfa	; ????
    8e7c:	fc fd       	.word	0xfdfc	; ????
    8e7e:	fe ff       	.word	0xfffe	; ????
    8e80:	00 01       	movw	r0, r0
    8e82:	02 03       	mulsu	r16, r18
    8e84:	04 05       	cpc	r16, r4
    8e86:	06 07       	cpc	r16, r22
    8e88:	08 09       	sbc	r16, r8
    8e8a:	0a 0b       	sbc	r16, r26
    8e8c:	0c 0d       	add	r16, r12
    8e8e:	0e 0f       	add	r16, r30
    8e90:	10 11       	cpse	r17, r0
    8e92:	12 13       	cpse	r17, r18
    8e94:	14 15       	cp	r17, r4
    8e96:	16 17       	cp	r17, r22
    8e98:	18 19       	sub	r17, r8
    8e9a:	1a 1b       	sub	r17, r26
    8e9c:	1c 1d       	adc	r17, r12
    8e9e:	1e 1f       	adc	r17, r30
    8ea0:	20 21       	and	r18, r0
    8ea2:	22 23       	and	r18, r18
    8ea4:	24 25       	eor	r18, r4
    8ea6:	26 27       	eor	r18, r22
    8ea8:	28 29       	or	r18, r8
    8eaa:	2a 2b       	or	r18, r26
    8eac:	2c 2d       	mov	r18, r12
    8eae:	2e 2f       	mov	r18, r30
    8eb0:	30 31       	cpi	r19, 0x10	; 16
    8eb2:	32 33       	cpi	r19, 0x32	; 50
    8eb4:	34 35       	cpi	r19, 0x54	; 84
    8eb6:	36 37       	cpi	r19, 0x76	; 118
    8eb8:	38 39       	cpi	r19, 0x98	; 152
    8eba:	3a 3b       	cpi	r19, 0xBA	; 186
    8ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    8ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    8ec0:	40 41       	sbci	r20, 0x10	; 16
    8ec2:	42 43       	sbci	r20, 0x32	; 50
    8ec4:	44 45       	sbci	r20, 0x54	; 84
    8ec6:	46 47       	sbci	r20, 0x76	; 118
    8ec8:	48 49       	sbci	r20, 0x98	; 152
    8eca:	4a 4b       	sbci	r20, 0xBA	; 186
    8ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    8ece:	4e 4f       	sbci	r20, 0xFE	; 254
    8ed0:	50 51       	subi	r21, 0x10	; 16
    8ed2:	52 53       	subi	r21, 0x32	; 50
    8ed4:	54 55       	subi	r21, 0x54	; 84
    8ed6:	56 57       	subi	r21, 0x76	; 118
    8ed8:	58 59       	subi	r21, 0x98	; 152
    8eda:	5a 5b       	subi	r21, 0xBA	; 186
    8edc:	5c 5d       	subi	r21, 0xDC	; 220
    8ede:	5e 5f       	subi	r21, 0xFE	; 254
    8ee0:	60 61       	ori	r22, 0x10	; 16
    8ee2:	62 63       	ori	r22, 0x32	; 50
    8ee4:	64 65       	ori	r22, 0x54	; 84
    8ee6:	66 67       	ori	r22, 0x76	; 118
    8ee8:	68 69       	ori	r22, 0x98	; 152
    8eea:	6a 6b       	ori	r22, 0xBA	; 186
    8eec:	6c 6d       	ori	r22, 0xDC	; 220
    8eee:	6e 6f       	ori	r22, 0xFE	; 254
    8ef0:	70 71       	andi	r23, 0x10	; 16
    8ef2:	72 73       	andi	r23, 0x32	; 50
    8ef4:	74 75       	andi	r23, 0x54	; 84
    8ef6:	76 77       	andi	r23, 0x76	; 118
    8ef8:	78 79       	andi	r23, 0x98	; 152
    8efa:	7a 7b       	andi	r23, 0xBA	; 186
    8efc:	7c 7d       	andi	r23, 0xDC	; 220
    8efe:	7e 7f       	andi	r23, 0xFE	; 254
    8f00:	00 02       	muls	r16, r16
    8f02:	04 06       	cpc	r0, r20
    8f04:	08 0a       	sbc	r0, r24
    8f06:	0c 0e       	add	r0, r28
    8f08:	10 12       	cpse	r1, r16
    8f0a:	14 16       	cp	r1, r20
    8f0c:	18 1a       	sub	r1, r24
    8f0e:	1c 1e       	adc	r1, r28
    8f10:	20 22       	and	r2, r16
    8f12:	24 26       	eor	r2, r20
    8f14:	28 2a       	or	r2, r24
    8f16:	2c 2e       	mov	r2, r28
    8f18:	30 32       	cpi	r19, 0x20	; 32
    8f1a:	34 36       	cpi	r19, 0x64	; 100
    8f1c:	38 3a       	cpi	r19, 0xA8	; 168
    8f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8f20:	40 42       	sbci	r20, 0x20	; 32
    8f22:	44 46       	sbci	r20, 0x64	; 100
    8f24:	48 4a       	sbci	r20, 0xA8	; 168
    8f26:	4c 4e       	sbci	r20, 0xEC	; 236
    8f28:	50 52       	subi	r21, 0x20	; 32
    8f2a:	54 56       	subi	r21, 0x64	; 100
    8f2c:	58 5a       	subi	r21, 0xA8	; 168
    8f2e:	5c 5e       	subi	r21, 0xEC	; 236
    8f30:	60 62       	ori	r22, 0x20	; 32
    8f32:	64 66       	ori	r22, 0x64	; 100
    8f34:	68 6a       	ori	r22, 0xA8	; 168
    8f36:	6c 6e       	ori	r22, 0xEC	; 236
    8f38:	70 72       	andi	r23, 0x20	; 32
    8f3a:	74 76       	andi	r23, 0x64	; 100
    8f3c:	78 7a       	andi	r23, 0xA8	; 168
    8f3e:	7c 7e       	andi	r23, 0xEC	; 236
    8f40:	7f 7d       	andi	r23, 0xDF	; 223
    8f42:	7b 79       	andi	r23, 0x9B	; 155
    8f44:	77 75       	andi	r23, 0x57	; 87
    8f46:	73 71       	andi	r23, 0x13	; 19
    8f48:	6f 6d       	ori	r22, 0xDF	; 223
    8f4a:	6b 69       	ori	r22, 0x9B	; 155
    8f4c:	67 65       	ori	r22, 0x57	; 87
    8f4e:	63 61       	ori	r22, 0x13	; 19
    8f50:	5f 5d       	subi	r21, 0xDF	; 223
    8f52:	5b 59       	subi	r21, 0x9B	; 155
    8f54:	57 55       	subi	r21, 0x57	; 87
    8f56:	53 51       	subi	r21, 0x13	; 19
    8f58:	4f 4d       	sbci	r20, 0xDF	; 223
    8f5a:	4b 49       	sbci	r20, 0x9B	; 155
    8f5c:	47 45       	sbci	r20, 0x57	; 87
    8f5e:	43 41       	sbci	r20, 0x13	; 19
    8f60:	3f 3d       	cpi	r19, 0xDF	; 223
    8f62:	3b 39       	cpi	r19, 0x9B	; 155
    8f64:	37 35       	cpi	r19, 0x57	; 87
    8f66:	33 31       	cpi	r19, 0x13	; 19
    8f68:	2f 2d       	mov	r18, r15
    8f6a:	2b 29       	or	r18, r11
    8f6c:	27 25       	eor	r18, r7
    8f6e:	23 21       	and	r18, r3
    8f70:	1f 1d       	adc	r17, r15
    8f72:	1b 19       	sub	r17, r11
    8f74:	17 15       	cp	r17, r7
    8f76:	13 11       	cpse	r17, r3
    8f78:	0f 0d       	add	r16, r15
    8f7a:	0b 09       	sbc	r16, r11
    8f7c:	07 05       	cpc	r16, r7
    8f7e:	03 01       	movw	r0, r6
    8f80:	ff fd       	.word	0xfdff	; ????
    8f82:	fb f9       	.word	0xf9fb	; ????
    8f84:	f7 f5       	brid	.+124    	; 0x9002 <waves+0x302>
    8f86:	f3 f1       	brvs	.+124    	; 0x9004 <waves+0x304>
    8f88:	ef ed       	ldi	r30, 0xDF	; 223
    8f8a:	eb e9       	ldi	r30, 0x9B	; 155
    8f8c:	e7 e5       	ldi	r30, 0x57	; 87
    8f8e:	e3 e1       	ldi	r30, 0x13	; 19
    8f90:	df dd       	rcall	.-1090   	; 0x8b50 <steptable+0x48>
    8f92:	db d9       	rcall	.-3146   	; 0x834a <StartSong+0x20>
    8f94:	d7 d5       	rcall	.+2990   	; 0x9b44 <ProcessFading+0x3e>
    8f96:	d3 d1       	rcall	.+934    	; 0x933e <waves+0x63e>
    8f98:	cf cd       	rjmp	.-1122   	; 0x8b38 <steptable+0x30>
    8f9a:	cb c9       	rjmp	.-3178   	; 0x8332 <StartSong+0x8>
    8f9c:	c7 c5       	rjmp	.+2958   	; 0x9b2c <ProcessFading+0x26>
    8f9e:	c3 c1       	rjmp	.+902    	; 0x9326 <waves+0x626>
    8fa0:	bf bd       	out	0x2f, r27	; 47
    8fa2:	bb b9       	out	0x0b, r27	; 11
    8fa4:	b7 b5       	in	r27, 0x27	; 39
    8fa6:	b3 b1       	in	r27, 0x03	; 3
    8fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    8faa:	ab a9       	ldd	r26, Y+51	; 0x33
    8fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8fb0:	9f 9d       	mul	r25, r15
    8fb2:	9b 99       	sbic	0x13, 3	; 19
    8fb4:	97 95       	ror	r25
    8fb6:	93 91       	.word	0x9193	; ????
    8fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8fba:	8b 89       	ldd	r24, Y+19	; 0x13
    8fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    8fbe:	83 81       	ldd	r24, Z+3	; 0x03
    8fc0:	80 82       	st	Z, r8
    8fc2:	84 86       	std	Z+12, r8	; 0x0c
    8fc4:	88 8a       	std	Y+16, r8	; 0x10
    8fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    8fc8:	90 92 94 96 	sts	0x9694, r9
    8fcc:	98 9a       	sbi	0x13, 0	; 19
    8fce:	9c 9e       	mul	r9, r28
    8fd0:	a0 a2       	std	Z+32, r10	; 0x20
    8fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    8fd4:	a8 aa       	std	Y+48, r10	; 0x30
    8fd6:	ac ae       	std	Y+60, r10	; 0x3c
    8fd8:	b0 b2       	in	r11, 0x10	; 16
    8fda:	b4 b6       	in	r11, 0x34	; 52
    8fdc:	b8 ba       	out	0x18, r11	; 24
    8fde:	bc be       	out	0x3c, r11	; 60
    8fe0:	c0 c2       	rjmp	.+1408   	; 0x9562 <waves+0x862>
    8fe2:	c4 c6       	rjmp	.+3464   	; 0x9d6c <LBPrintChar+0x3a>
    8fe4:	c8 ca       	rjmp	.-2672   	; 0x8576 <TriggerFx+0x6e>
    8fe6:	cc ce       	rjmp	.-616    	; 0x8d80 <waves+0x80>
    8fe8:	d0 d2       	rcall	.+1440   	; 0x958a <waves+0x88a>
    8fea:	d4 d6       	rcall	.+3496   	; 0x9d94 <LBPrint+0x22>
    8fec:	d8 da       	rcall	.-2640   	; 0x859e <TriggerNote+0x6>
    8fee:	dc de       	rcall	.-584    	; 0x8da8 <waves+0xa8>
    8ff0:	e0 e2       	ldi	r30, 0x20	; 32
    8ff2:	e4 e6       	ldi	r30, 0x64	; 100
    8ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    8ff6:	ec ee       	ldi	r30, 0xEC	; 236
    8ff8:	f0 f2       	brcs	.-68     	; 0x8fb6 <waves+0x2b6>
    8ffa:	f4 f6       	brge	.-68     	; 0x8fb8 <waves+0x2b8>
    8ffc:	f8 fa       	.word	0xfaf8	; ????
    8ffe:	fc fe       	.word	0xfefc	; ????
    9000:	7f 7f       	andi	r23, 0xFF	; 255
    9002:	7f 7f       	andi	r23, 0xFF	; 255
    9004:	7f 7f       	andi	r23, 0xFF	; 255
    9006:	7f 7f       	andi	r23, 0xFF	; 255
    9008:	7f 7f       	andi	r23, 0xFF	; 255
    900a:	7f 7f       	andi	r23, 0xFF	; 255
    900c:	7f 7f       	andi	r23, 0xFF	; 255
    900e:	7f 7f       	andi	r23, 0xFF	; 255
    9010:	7f 7f       	andi	r23, 0xFF	; 255
    9012:	7f 7f       	andi	r23, 0xFF	; 255
    9014:	7f 7f       	andi	r23, 0xFF	; 255
    9016:	7f 7f       	andi	r23, 0xFF	; 255
    9018:	7f 7f       	andi	r23, 0xFF	; 255
    901a:	7f 7f       	andi	r23, 0xFF	; 255
    901c:	7f 7f       	andi	r23, 0xFF	; 255
    901e:	7f 7f       	andi	r23, 0xFF	; 255
    9020:	7f 7f       	andi	r23, 0xFF	; 255
    9022:	7f 7f       	andi	r23, 0xFF	; 255
    9024:	7f 7f       	andi	r23, 0xFF	; 255
    9026:	7f 7f       	andi	r23, 0xFF	; 255
    9028:	7f 7f       	andi	r23, 0xFF	; 255
    902a:	7f 7f       	andi	r23, 0xFF	; 255
    902c:	7f 7f       	andi	r23, 0xFF	; 255
    902e:	7f 7f       	andi	r23, 0xFF	; 255
    9030:	7f 7f       	andi	r23, 0xFF	; 255
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	80 80       	ld	r8, Z
    9042:	80 80       	ld	r8, Z
    9044:	80 80       	ld	r8, Z
    9046:	80 80       	ld	r8, Z
    9048:	80 80       	ld	r8, Z
    904a:	80 80       	ld	r8, Z
    904c:	80 80       	ld	r8, Z
    904e:	80 80       	ld	r8, Z
    9050:	80 80       	ld	r8, Z
    9052:	80 80       	ld	r8, Z
    9054:	80 80       	ld	r8, Z
    9056:	80 80       	ld	r8, Z
    9058:	80 80       	ld	r8, Z
    905a:	80 80       	ld	r8, Z
    905c:	80 80       	ld	r8, Z
    905e:	80 80       	ld	r8, Z
    9060:	80 80       	ld	r8, Z
    9062:	80 80       	ld	r8, Z
    9064:	80 80       	ld	r8, Z
    9066:	80 80       	ld	r8, Z
    9068:	80 80       	ld	r8, Z
    906a:	80 80       	ld	r8, Z
    906c:	80 80       	ld	r8, Z
    906e:	80 80       	ld	r8, Z
    9070:	80 80       	ld	r8, Z
    9072:	80 80       	ld	r8, Z
    9074:	80 80       	ld	r8, Z
    9076:	80 80       	ld	r8, Z
    9078:	80 80       	ld	r8, Z
    907a:	80 80       	ld	r8, Z
    907c:	80 80       	ld	r8, Z
    907e:	80 80       	ld	r8, Z
    9080:	80 80       	ld	r8, Z
    9082:	80 80       	ld	r8, Z
    9084:	80 80       	ld	r8, Z
    9086:	80 80       	ld	r8, Z
    9088:	80 80       	ld	r8, Z
    908a:	80 80       	ld	r8, Z
    908c:	80 80       	ld	r8, Z
    908e:	80 80       	ld	r8, Z
    9090:	80 80       	ld	r8, Z
    9092:	80 80       	ld	r8, Z
    9094:	80 80       	ld	r8, Z
    9096:	80 80       	ld	r8, Z
    9098:	80 80       	ld	r8, Z
    909a:	80 80       	ld	r8, Z
    909c:	80 80       	ld	r8, Z
    909e:	80 80       	ld	r8, Z
    90a0:	80 80       	ld	r8, Z
    90a2:	80 80       	ld	r8, Z
    90a4:	80 80       	ld	r8, Z
    90a6:	80 80       	ld	r8, Z
    90a8:	80 80       	ld	r8, Z
    90aa:	80 80       	ld	r8, Z
    90ac:	80 80       	ld	r8, Z
    90ae:	80 80       	ld	r8, Z
    90b0:	80 80       	ld	r8, Z
    90b2:	80 80       	ld	r8, Z
    90b4:	80 80       	ld	r8, Z
    90b6:	80 80       	ld	r8, Z
    90b8:	80 80       	ld	r8, Z
    90ba:	80 80       	ld	r8, Z
    90bc:	80 80       	ld	r8, Z
    90be:	80 80       	ld	r8, Z
    90c0:	80 80       	ld	r8, Z
    90c2:	80 80       	ld	r8, Z
    90c4:	80 80       	ld	r8, Z
    90c6:	80 80       	ld	r8, Z
    90c8:	80 80       	ld	r8, Z
    90ca:	80 80       	ld	r8, Z
    90cc:	80 80       	ld	r8, Z
    90ce:	80 80       	ld	r8, Z
    90d0:	80 80       	ld	r8, Z
    90d2:	80 80       	ld	r8, Z
    90d4:	80 80       	ld	r8, Z
    90d6:	80 80       	ld	r8, Z
    90d8:	80 80       	ld	r8, Z
    90da:	80 80       	ld	r8, Z
    90dc:	80 80       	ld	r8, Z
    90de:	80 80       	ld	r8, Z
    90e0:	80 80       	ld	r8, Z
    90e2:	80 80       	ld	r8, Z
    90e4:	80 80       	ld	r8, Z
    90e6:	80 80       	ld	r8, Z
    90e8:	80 80       	ld	r8, Z
    90ea:	80 80       	ld	r8, Z
    90ec:	80 80       	ld	r8, Z
    90ee:	80 80       	ld	r8, Z
    90f0:	80 80       	ld	r8, Z
    90f2:	80 80       	ld	r8, Z
    90f4:	80 80       	ld	r8, Z
    90f6:	80 80       	ld	r8, Z
    90f8:	80 80       	ld	r8, Z
    90fa:	80 80       	ld	r8, Z
    90fc:	80 80       	ld	r8, Z
    90fe:	80 80       	ld	r8, Z
    9100:	7f 7f       	andi	r23, 0xFF	; 255
    9102:	7f 7f       	andi	r23, 0xFF	; 255
    9104:	7f 7f       	andi	r23, 0xFF	; 255
    9106:	7f 7f       	andi	r23, 0xFF	; 255
    9108:	7f 7f       	andi	r23, 0xFF	; 255
    910a:	7f 7f       	andi	r23, 0xFF	; 255
    910c:	7f 7f       	andi	r23, 0xFF	; 255
    910e:	7f 7f       	andi	r23, 0xFF	; 255
    9110:	7f 7f       	andi	r23, 0xFF	; 255
    9112:	7f 7f       	andi	r23, 0xFF	; 255
    9114:	7f 7f       	andi	r23, 0xFF	; 255
    9116:	7f 7f       	andi	r23, 0xFF	; 255
    9118:	7f 7f       	andi	r23, 0xFF	; 255
    911a:	7f 7f       	andi	r23, 0xFF	; 255
    911c:	7f 7f       	andi	r23, 0xFF	; 255
    911e:	7f 7f       	andi	r23, 0xFF	; 255
    9120:	7f 7f       	andi	r23, 0xFF	; 255
    9122:	7f 7f       	andi	r23, 0xFF	; 255
    9124:	7f 7f       	andi	r23, 0xFF	; 255
    9126:	7f 7f       	andi	r23, 0xFF	; 255
    9128:	7f 7f       	andi	r23, 0xFF	; 255
    912a:	7f 7f       	andi	r23, 0xFF	; 255
    912c:	7f 7f       	andi	r23, 0xFF	; 255
    912e:	7f 7f       	andi	r23, 0xFF	; 255
    9130:	7f 7f       	andi	r23, 0xFF	; 255
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7f 7f       	andi	r23, 0xFF	; 255
    9148:	7f 7f       	andi	r23, 0xFF	; 255
    914a:	7f 7f       	andi	r23, 0xFF	; 255
    914c:	7f 7f       	andi	r23, 0xFF	; 255
    914e:	7f 7f       	andi	r23, 0xFF	; 255
    9150:	7f 7f       	andi	r23, 0xFF	; 255
    9152:	7f 7f       	andi	r23, 0xFF	; 255
    9154:	7f 7f       	andi	r23, 0xFF	; 255
    9156:	7f 7f       	andi	r23, 0xFF	; 255
    9158:	7f 7f       	andi	r23, 0xFF	; 255
    915a:	7f 7f       	andi	r23, 0xFF	; 255
    915c:	7f 7f       	andi	r23, 0xFF	; 255
    915e:	7f 7f       	andi	r23, 0xFF	; 255
    9160:	7f 7f       	andi	r23, 0xFF	; 255
    9162:	7f 7f       	andi	r23, 0xFF	; 255
    9164:	7f 7f       	andi	r23, 0xFF	; 255
    9166:	7f 7f       	andi	r23, 0xFF	; 255
    9168:	7f 7f       	andi	r23, 0xFF	; 255
    916a:	7f 7f       	andi	r23, 0xFF	; 255
    916c:	7f 7f       	andi	r23, 0xFF	; 255
    916e:	7f 7f       	andi	r23, 0xFF	; 255
    9170:	7f 7f       	andi	r23, 0xFF	; 255
    9172:	7f 7f       	andi	r23, 0xFF	; 255
    9174:	7f 7f       	andi	r23, 0xFF	; 255
    9176:	7f 7f       	andi	r23, 0xFF	; 255
    9178:	7f 7f       	andi	r23, 0xFF	; 255
    917a:	7f 7f       	andi	r23, 0xFF	; 255
    917c:	7f 7f       	andi	r23, 0xFF	; 255
    917e:	7f 7f       	andi	r23, 0xFF	; 255
    9180:	80 80       	ld	r8, Z
    9182:	80 80       	ld	r8, Z
    9184:	80 80       	ld	r8, Z
    9186:	80 80       	ld	r8, Z
    9188:	80 80       	ld	r8, Z
    918a:	80 80       	ld	r8, Z
    918c:	80 80       	ld	r8, Z
    918e:	80 80       	ld	r8, Z
    9190:	80 80       	ld	r8, Z
    9192:	80 80       	ld	r8, Z
    9194:	80 80       	ld	r8, Z
    9196:	80 80       	ld	r8, Z
    9198:	80 80       	ld	r8, Z
    919a:	80 80       	ld	r8, Z
    919c:	80 80       	ld	r8, Z
    919e:	80 80       	ld	r8, Z
    91a0:	80 80       	ld	r8, Z
    91a2:	80 80       	ld	r8, Z
    91a4:	80 80       	ld	r8, Z
    91a6:	80 80       	ld	r8, Z
    91a8:	80 80       	ld	r8, Z
    91aa:	80 80       	ld	r8, Z
    91ac:	80 80       	ld	r8, Z
    91ae:	80 80       	ld	r8, Z
    91b0:	80 80       	ld	r8, Z
    91b2:	80 80       	ld	r8, Z
    91b4:	80 80       	ld	r8, Z
    91b6:	80 80       	ld	r8, Z
    91b8:	80 80       	ld	r8, Z
    91ba:	80 80       	ld	r8, Z
    91bc:	80 80       	ld	r8, Z
    91be:	80 80       	ld	r8, Z
    91c0:	80 80       	ld	r8, Z
    91c2:	80 80       	ld	r8, Z
    91c4:	80 80       	ld	r8, Z
    91c6:	80 80       	ld	r8, Z
    91c8:	80 80       	ld	r8, Z
    91ca:	80 80       	ld	r8, Z
    91cc:	80 80       	ld	r8, Z
    91ce:	80 80       	ld	r8, Z
    91d0:	80 80       	ld	r8, Z
    91d2:	80 80       	ld	r8, Z
    91d4:	80 80       	ld	r8, Z
    91d6:	80 80       	ld	r8, Z
    91d8:	80 80       	ld	r8, Z
    91da:	80 80       	ld	r8, Z
    91dc:	80 80       	ld	r8, Z
    91de:	80 80       	ld	r8, Z
    91e0:	80 80       	ld	r8, Z
    91e2:	80 80       	ld	r8, Z
    91e4:	80 80       	ld	r8, Z
    91e6:	80 80       	ld	r8, Z
    91e8:	80 80       	ld	r8, Z
    91ea:	80 80       	ld	r8, Z
    91ec:	80 80       	ld	r8, Z
    91ee:	80 80       	ld	r8, Z
    91f0:	80 80       	ld	r8, Z
    91f2:	80 80       	ld	r8, Z
    91f4:	80 80       	ld	r8, Z
    91f6:	80 80       	ld	r8, Z
    91f8:	80 80       	ld	r8, Z
    91fa:	80 80       	ld	r8, Z
    91fc:	80 80       	ld	r8, Z
    91fe:	80 80       	ld	r8, Z
    9200:	7f 7f       	andi	r23, 0xFF	; 255
    9202:	7f 7f       	andi	r23, 0xFF	; 255
    9204:	7f 7f       	andi	r23, 0xFF	; 255
    9206:	7f 7f       	andi	r23, 0xFF	; 255
    9208:	7f 7f       	andi	r23, 0xFF	; 255
    920a:	7f 7f       	andi	r23, 0xFF	; 255
    920c:	7f 7f       	andi	r23, 0xFF	; 255
    920e:	7f 7f       	andi	r23, 0xFF	; 255
    9210:	7f 7f       	andi	r23, 0xFF	; 255
    9212:	7f 7f       	andi	r23, 0xFF	; 255
    9214:	7f 7f       	andi	r23, 0xFF	; 255
    9216:	7f 7f       	andi	r23, 0xFF	; 255
    9218:	7f 7f       	andi	r23, 0xFF	; 255
    921a:	7f 7f       	andi	r23, 0xFF	; 255
    921c:	7f 7f       	andi	r23, 0xFF	; 255
    921e:	7f 7f       	andi	r23, 0xFF	; 255
    9220:	7f 7f       	andi	r23, 0xFF	; 255
    9222:	7f 7f       	andi	r23, 0xFF	; 255
    9224:	7f 7f       	andi	r23, 0xFF	; 255
    9226:	7f 7f       	andi	r23, 0xFF	; 255
    9228:	7f 7f       	andi	r23, 0xFF	; 255
    922a:	7f 7f       	andi	r23, 0xFF	; 255
    922c:	7f 7f       	andi	r23, 0xFF	; 255
    922e:	7f 7f       	andi	r23, 0xFF	; 255
    9230:	7f 7f       	andi	r23, 0xFF	; 255
    9232:	7f 7f       	andi	r23, 0xFF	; 255
    9234:	7f 7f       	andi	r23, 0xFF	; 255
    9236:	7f 7f       	andi	r23, 0xFF	; 255
    9238:	7f 7f       	andi	r23, 0xFF	; 255
    923a:	7f 7f       	andi	r23, 0xFF	; 255
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7f 7f       	andi	r23, 0xFF	; 255
    9248:	7f 7f       	andi	r23, 0xFF	; 255
    924a:	7f 7f       	andi	r23, 0xFF	; 255
    924c:	7f 7f       	andi	r23, 0xFF	; 255
    924e:	7f 7f       	andi	r23, 0xFF	; 255
    9250:	7f 7f       	andi	r23, 0xFF	; 255
    9252:	7f 7f       	andi	r23, 0xFF	; 255
    9254:	7f 7f       	andi	r23, 0xFF	; 255
    9256:	7f 7f       	andi	r23, 0xFF	; 255
    9258:	7f 7f       	andi	r23, 0xFF	; 255
    925a:	7f 7f       	andi	r23, 0xFF	; 255
    925c:	7f 7f       	andi	r23, 0xFF	; 255
    925e:	7f 7f       	andi	r23, 0xFF	; 255
    9260:	7f 7f       	andi	r23, 0xFF	; 255
    9262:	7f 7f       	andi	r23, 0xFF	; 255
    9264:	7f 7f       	andi	r23, 0xFF	; 255
    9266:	7f 7f       	andi	r23, 0xFF	; 255
    9268:	7f 7f       	andi	r23, 0xFF	; 255
    926a:	7f 7f       	andi	r23, 0xFF	; 255
    926c:	7f 7f       	andi	r23, 0xFF	; 255
    926e:	7f 7f       	andi	r23, 0xFF	; 255
    9270:	7f 7f       	andi	r23, 0xFF	; 255
    9272:	7f 7f       	andi	r23, 0xFF	; 255
    9274:	7f 7f       	andi	r23, 0xFF	; 255
    9276:	7f 7f       	andi	r23, 0xFF	; 255
    9278:	7f 7f       	andi	r23, 0xFF	; 255
    927a:	7f 7f       	andi	r23, 0xFF	; 255
    927c:	7f 7f       	andi	r23, 0xFF	; 255
    927e:	7f 7f       	andi	r23, 0xFF	; 255
    9280:	7f 7f       	andi	r23, 0xFF	; 255
    9282:	7f 7f       	andi	r23, 0xFF	; 255
    9284:	7f 7f       	andi	r23, 0xFF	; 255
    9286:	7f 7f       	andi	r23, 0xFF	; 255
    9288:	7f 7f       	andi	r23, 0xFF	; 255
    928a:	7f 7f       	andi	r23, 0xFF	; 255
    928c:	7f 7f       	andi	r23, 0xFF	; 255
    928e:	7f 7f       	andi	r23, 0xFF	; 255
    9290:	7f 7f       	andi	r23, 0xFF	; 255
    9292:	7f 7f       	andi	r23, 0xFF	; 255
    9294:	7f 7f       	andi	r23, 0xFF	; 255
    9296:	7f 7f       	andi	r23, 0xFF	; 255
    9298:	7f 7f       	andi	r23, 0xFF	; 255
    929a:	7f 7f       	andi	r23, 0xFF	; 255
    929c:	7f 7f       	andi	r23, 0xFF	; 255
    929e:	7f 7f       	andi	r23, 0xFF	; 255
    92a0:	7f 7f       	andi	r23, 0xFF	; 255
    92a2:	7f 7f       	andi	r23, 0xFF	; 255
    92a4:	7f 7f       	andi	r23, 0xFF	; 255
    92a6:	7f 7f       	andi	r23, 0xFF	; 255
    92a8:	7f 7f       	andi	r23, 0xFF	; 255
    92aa:	7f 7f       	andi	r23, 0xFF	; 255
    92ac:	7f 7f       	andi	r23, 0xFF	; 255
    92ae:	7f 7f       	andi	r23, 0xFF	; 255
    92b0:	7f 7f       	andi	r23, 0xFF	; 255
    92b2:	7f 7f       	andi	r23, 0xFF	; 255
    92b4:	7f 7f       	andi	r23, 0xFF	; 255
    92b6:	7f 7f       	andi	r23, 0xFF	; 255
    92b8:	7f 7f       	andi	r23, 0xFF	; 255
    92ba:	7f 7f       	andi	r23, 0xFF	; 255
    92bc:	7f 7f       	andi	r23, 0xFF	; 255
    92be:	7f 7f       	andi	r23, 0xFF	; 255
    92c0:	80 80       	ld	r8, Z
    92c2:	80 80       	ld	r8, Z
    92c4:	80 80       	ld	r8, Z
    92c6:	80 80       	ld	r8, Z
    92c8:	80 80       	ld	r8, Z
    92ca:	80 80       	ld	r8, Z
    92cc:	80 80       	ld	r8, Z
    92ce:	80 80       	ld	r8, Z
    92d0:	80 80       	ld	r8, Z
    92d2:	80 80       	ld	r8, Z
    92d4:	80 80       	ld	r8, Z
    92d6:	80 80       	ld	r8, Z
    92d8:	80 80       	ld	r8, Z
    92da:	80 80       	ld	r8, Z
    92dc:	80 80       	ld	r8, Z
    92de:	80 80       	ld	r8, Z
    92e0:	80 80       	ld	r8, Z
    92e2:	80 80       	ld	r8, Z
    92e4:	80 80       	ld	r8, Z
    92e6:	80 80       	ld	r8, Z
    92e8:	80 80       	ld	r8, Z
    92ea:	80 80       	ld	r8, Z
    92ec:	80 80       	ld	r8, Z
    92ee:	80 80       	ld	r8, Z
    92f0:	80 80       	ld	r8, Z
    92f2:	80 80       	ld	r8, Z
    92f4:	80 80       	ld	r8, Z
    92f6:	80 80       	ld	r8, Z
    92f8:	80 80       	ld	r8, Z
    92fa:	80 80       	ld	r8, Z
    92fc:	80 80       	ld	r8, Z
    92fe:	80 80       	ld	r8, Z
    9300:	03 09       	sbc	r16, r3
    9302:	13 1e       	adc	r1, r19
    9304:	28 31       	cpi	r18, 0x18	; 24
    9306:	3a 40       	sbci	r19, 0x0A	; 10
    9308:	46 4c       	sbci	r20, 0xC6	; 198
    930a:	50 54       	subi	r21, 0x40	; 64
    930c:	58 5b       	subi	r21, 0xB8	; 184
    930e:	5e 61       	ori	r21, 0x1E	; 30
    9310:	63 65       	ori	r22, 0x53	; 83
    9312:	67 69       	ori	r22, 0x97	; 151
    9314:	6b 6c       	ori	r22, 0xCB	; 203
    9316:	6e 6f       	ori	r22, 0xFE	; 254
    9318:	70 71       	andi	r23, 0x10	; 16
    931a:	72 73       	andi	r23, 0x32	; 50
    931c:	74 75       	andi	r23, 0x54	; 84
    931e:	76 77       	andi	r23, 0x76	; 118
    9320:	77 78       	andi	r23, 0x87	; 135
    9322:	79 79       	andi	r23, 0x99	; 153
    9324:	7a 7a       	andi	r23, 0xAA	; 170
    9326:	7b 7b       	andi	r23, 0xBB	; 187
    9328:	7c 7c       	andi	r23, 0xCC	; 204
    932a:	7c 7d       	andi	r23, 0xDC	; 220
    932c:	7d 7d       	andi	r23, 0xDD	; 221
    932e:	7e 7e       	andi	r23, 0xEE	; 238
    9330:	7e 7e       	andi	r23, 0xEE	; 238
    9332:	7f 7f       	andi	r23, 0xFF	; 255
    9334:	7f 7f       	andi	r23, 0xFF	; 255
    9336:	7f 7f       	andi	r23, 0xFF	; 255
    9338:	7f 7f       	andi	r23, 0xFF	; 255
    933a:	7f 7f       	andi	r23, 0xFF	; 255
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7f 7f       	andi	r23, 0xFF	; 255
    9348:	7f 7f       	andi	r23, 0xFF	; 255
    934a:	7f 7f       	andi	r23, 0xFF	; 255
    934c:	7f 7e       	andi	r23, 0xEF	; 239
    934e:	7e 7e       	andi	r23, 0xEE	; 238
    9350:	7e 7d       	andi	r23, 0xDE	; 222
    9352:	7d 7d       	andi	r23, 0xDD	; 221
    9354:	7c 7c       	andi	r23, 0xCC	; 204
    9356:	7c 7b       	andi	r23, 0xBC	; 188
    9358:	7b 7a       	andi	r23, 0xAB	; 171
    935a:	7a 79       	andi	r23, 0x9A	; 154
    935c:	79 78       	andi	r23, 0x89	; 137
    935e:	77 77       	andi	r23, 0x77	; 119
    9360:	76 75       	andi	r23, 0x56	; 86
    9362:	74 73       	andi	r23, 0x34	; 52
    9364:	72 71       	andi	r23, 0x12	; 18
    9366:	70 6f       	ori	r23, 0xF0	; 240
    9368:	6e 6c       	ori	r22, 0xCE	; 206
    936a:	6b 69       	ori	r22, 0x9B	; 155
    936c:	67 65       	ori	r22, 0x57	; 87
    936e:	63 61       	ori	r22, 0x13	; 19
    9370:	5e 5b       	subi	r21, 0xBE	; 190
    9372:	58 54       	subi	r21, 0x48	; 72
    9374:	50 4c       	sbci	r21, 0xC0	; 192
    9376:	46 40       	sbci	r20, 0x06	; 6
    9378:	3a 31       	cpi	r19, 0x1A	; 26
    937a:	28 1e       	adc	r2, r24
    937c:	13 09       	sbc	r17, r3
    937e:	03 00       	.word	0x0003	; ????
    9380:	c6 cc       	rjmp	.-1652   	; 0x8d0e <waves+0xe>
    9382:	d5 db       	rcall	.-2134   	; 0x8b2e <steptable+0x26>
    9384:	df e3       	ldi	r29, 0x3F	; 63
    9386:	e5 e7       	ldi	r30, 0x75	; 117
    9388:	e9 ea       	ldi	r30, 0xA9	; 169
    938a:	eb ec       	ldi	r30, 0xCB	; 203
    938c:	ed ee       	ldi	r30, 0xED	; 237
    938e:	ef ef       	ldi	r30, 0xFF	; 255
    9390:	f0 f0       	brcs	.+60     	; 0x93ce <waves+0x6ce>
    9392:	f0 f1       	brcs	.+124    	; 0x9410 <waves+0x710>
    9394:	f1 f1       	breq	.+124    	; 0x9412 <waves+0x712>
    9396:	f1 f2       	breq	.-68     	; 0x9354 <waves+0x654>
    9398:	f2 f2       	brmi	.-68     	; 0x9356 <waves+0x656>
    939a:	f2 f2       	brmi	.-68     	; 0x9358 <waves+0x658>
    939c:	f2 f2       	brmi	.-68     	; 0x935a <waves+0x65a>
    939e:	f2 f3       	brmi	.-4      	; 0x939c <waves+0x69c>
    93a0:	f3 f3       	brvs	.-4      	; 0x939e <waves+0x69e>
    93a2:	f3 f3       	brvs	.-4      	; 0x93a0 <waves+0x6a0>
    93a4:	f3 f3       	brvs	.-4      	; 0x93a2 <waves+0x6a2>
    93a6:	f3 f3       	brvs	.-4      	; 0x93a4 <waves+0x6a4>
    93a8:	f3 f3       	brvs	.-4      	; 0x93a6 <waves+0x6a6>
    93aa:	f3 f3       	brvs	.-4      	; 0x93a8 <waves+0x6a8>
    93ac:	f3 f3       	brvs	.-4      	; 0x93aa <waves+0x6aa>
    93ae:	f3 f3       	brvs	.-4      	; 0x93ac <waves+0x6ac>
    93b0:	f3 f3       	brvs	.-4      	; 0x93ae <waves+0x6ae>
    93b2:	f3 f3       	brvs	.-4      	; 0x93b0 <waves+0x6b0>
    93b4:	f3 f3       	brvs	.-4      	; 0x93b2 <waves+0x6b2>
    93b6:	f3 f3       	brvs	.-4      	; 0x93b4 <waves+0x6b4>
    93b8:	f3 f3       	brvs	.-4      	; 0x93b6 <waves+0x6b6>
    93ba:	f3 f3       	brvs	.-4      	; 0x93b8 <waves+0x6b8>
    93bc:	f3 f3       	brvs	.-4      	; 0x93ba <waves+0x6ba>
    93be:	f3 f3       	brvs	.-4      	; 0x93bc <waves+0x6bc>
    93c0:	f3 f3       	brvs	.-4      	; 0x93be <waves+0x6be>
    93c2:	f3 f3       	brvs	.-4      	; 0x93c0 <waves+0x6c0>
    93c4:	f3 f3       	brvs	.-4      	; 0x93c2 <waves+0x6c2>
    93c6:	f3 f3       	brvs	.-4      	; 0x93c4 <waves+0x6c4>
    93c8:	f3 f3       	brvs	.-4      	; 0x93c6 <waves+0x6c6>
    93ca:	f3 f3       	brvs	.-4      	; 0x93c8 <waves+0x6c8>
    93cc:	f3 f3       	brvs	.-4      	; 0x93ca <waves+0x6ca>
    93ce:	f3 f3       	brvs	.-4      	; 0x93cc <waves+0x6cc>
    93d0:	f3 f3       	brvs	.-4      	; 0x93ce <waves+0x6ce>
    93d2:	f3 f3       	brvs	.-4      	; 0x93d0 <waves+0x6d0>
    93d4:	f3 f3       	brvs	.-4      	; 0x93d2 <waves+0x6d2>
    93d6:	f3 f3       	brvs	.-4      	; 0x93d4 <waves+0x6d4>
    93d8:	f3 f3       	brvs	.-4      	; 0x93d6 <waves+0x6d6>
    93da:	f3 f3       	brvs	.-4      	; 0x93d8 <waves+0x6d8>
    93dc:	f3 f3       	brvs	.-4      	; 0x93da <waves+0x6da>
    93de:	f3 f3       	brvs	.-4      	; 0x93dc <waves+0x6dc>
    93e0:	f2 f2       	brmi	.-68     	; 0x939e <waves+0x69e>
    93e2:	f2 f2       	brmi	.-68     	; 0x93a0 <waves+0x6a0>
    93e4:	f2 f2       	brmi	.-68     	; 0x93a2 <waves+0x6a2>
    93e6:	f2 f2       	brmi	.-68     	; 0x93a4 <waves+0x6a4>
    93e8:	f1 f1       	breq	.+124    	; 0x9466 <waves+0x766>
    93ea:	f1 f1       	breq	.+124    	; 0x9468 <waves+0x768>
    93ec:	f0 f0       	brcs	.+60     	; 0x942a <waves+0x72a>
    93ee:	f0 ef       	ldi	r31, 0xF0	; 240
    93f0:	ef ee       	ldi	r30, 0xEF	; 239
    93f2:	ed ec       	ldi	r30, 0xCD	; 205
    93f4:	eb ea       	ldi	r30, 0xAB	; 171
    93f6:	e9 e7       	ldi	r30, 0x79	; 121
    93f8:	e5 e3       	ldi	r30, 0x35	; 53
    93fa:	df db       	rcall	.-2114   	; 0x8bba <steptable+0xb2>
    93fc:	d5 cc       	rjmp	.-1622   	; 0x8da8 <waves+0xa8>
    93fe:	c6 00       	.word	0x00c6	; ????
    9400:	00 28       	or	r0, r0
    9402:	3d 42       	sbci	r19, 0x2D	; 45
    9404:	30 2d       	mov	r19, r0
    9406:	2c 2b       	or	r18, r28
    9408:	2c 2d       	mov	r18, r12
    940a:	2e 2f       	mov	r18, r30
    940c:	30 32       	cpi	r19, 0x20	; 32
    940e:	33 35       	cpi	r19, 0x53	; 83
    9410:	37 39       	cpi	r19, 0x97	; 151
    9412:	3b 3d       	cpi	r19, 0xDB	; 219
    9414:	3f 41       	sbci	r19, 0x1F	; 31
    9416:	43 45       	sbci	r20, 0x53	; 83
    9418:	48 4a       	sbci	r20, 0xA8	; 168
    941a:	4c 4e       	sbci	r20, 0xEC	; 236
    941c:	50 53       	subi	r21, 0x30	; 48
    941e:	55 57       	subi	r21, 0x75	; 117
    9420:	59 5b       	subi	r21, 0xB9	; 185
    9422:	5d 5f       	subi	r21, 0xFD	; 253
    9424:	61 63       	ori	r22, 0x31	; 49
    9426:	65 67       	ori	r22, 0x75	; 117
    9428:	69 6b       	ori	r22, 0xB9	; 185
    942a:	6c 6e       	ori	r22, 0xEC	; 236
    942c:	70 71       	andi	r23, 0x10	; 16
    942e:	73 74       	andi	r23, 0x43	; 67
    9430:	75 77       	andi	r23, 0x75	; 117
    9432:	78 79       	andi	r23, 0x98	; 152
    9434:	7a 7b       	andi	r23, 0xBA	; 186
    9436:	7c 7d       	andi	r23, 0xDC	; 220
    9438:	7d 7e       	andi	r23, 0xED	; 237
    943a:	7e 7f       	andi	r23, 0xFE	; 254
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7e 7e       	andi	r23, 0xEE	; 238
    9448:	7d 7d       	andi	r23, 0xDD	; 221
    944a:	7c 7b       	andi	r23, 0xBC	; 188
    944c:	7a 79       	andi	r23, 0x9A	; 154
    944e:	78 77       	andi	r23, 0x78	; 120
    9450:	75 74       	andi	r23, 0x45	; 69
    9452:	73 71       	andi	r23, 0x13	; 19
    9454:	70 6e       	ori	r23, 0xE0	; 224
    9456:	6c 6b       	ori	r22, 0xBC	; 188
    9458:	69 67       	ori	r22, 0x79	; 121
    945a:	65 63       	ori	r22, 0x35	; 53
    945c:	61 5f       	subi	r22, 0xF1	; 241
    945e:	5d 5b       	subi	r21, 0xBD	; 189
    9460:	59 57       	subi	r21, 0x79	; 121
    9462:	55 53       	subi	r21, 0x35	; 53
    9464:	50 4e       	sbci	r21, 0xE0	; 224
    9466:	4c 4a       	sbci	r20, 0xAC	; 172
    9468:	48 45       	sbci	r20, 0x58	; 88
    946a:	43 41       	sbci	r20, 0x13	; 19
    946c:	3f 3d       	cpi	r19, 0xDF	; 223
    946e:	3b 39       	cpi	r19, 0x9B	; 155
    9470:	37 35       	cpi	r19, 0x57	; 87
    9472:	33 32       	cpi	r19, 0x23	; 35
    9474:	30 2f       	mov	r19, r16
    9476:	2e 2d       	mov	r18, r14
    9478:	2c 2b       	or	r18, r28
    947a:	2c 2d       	mov	r18, r12
    947c:	30 42       	sbci	r19, 0x20	; 32
    947e:	3d 28       	or	r3, r13
    9480:	00 e9       	ldi	r16, 0x90	; 144
    9482:	e5 fe       	sbrs	r14, 5
    9484:	d4 d7       	rcall	.+4008   	; 0xa42e <init_player_shot+0x330>
    9486:	d7 d7       	rcall	.+4014   	; 0xa436 <init_player_shot+0x338>
    9488:	d6 d4       	rcall	.+2476   	; 0x9e36 <LBPrintInt+0x2a>
    948a:	d2 d0       	rcall	.+420    	; 0x9630 <waves+0x930>
    948c:	ce cc       	rjmp	.-1636   	; 0x8e2a <waves+0x12a>
    948e:	ca c8       	rjmp	.-3692   	; 0x8624 <ProcessMusic+0xc>
    9490:	c6 c3       	rjmp	.+1932   	; 0x9c1e <LBMoveDelta+0x24>
    9492:	c1 bf       	out	0x31, r28	; 49
    9494:	bd ba       	out	0x1d, r11	; 29
    9496:	b8 b6       	in	r11, 0x38	; 56
    9498:	b4 b1       	in	r27, 0x04	; 4
    949a:	af ad       	ldd	r26, Y+63	; 0x3f
    949c:	ab a9       	ldd	r26, Y+51	; 0x33
    949e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    94a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    94a2:	9f 9e       	mul	r9, r31
    94a4:	9c 9a       	sbi	0x13, 4	; 19
    94a6:	99 97       	sbiw	r26, 0x29	; 41
    94a8:	95 94       	asr	r9
    94aa:	93 91       	.word	0x9193	; ????
    94ac:	90 8f       	std	Z+24, r25	; 0x18
    94ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    94b0:	8b 8a       	std	Y+19, r8	; 0x13
    94b2:	89 88       	ldd	r8, Y+17	; 0x11
    94b4:	88 87       	std	Y+8, r24	; 0x08
    94b6:	86 85       	ldd	r24, Z+14	; 0x0e
    94b8:	85 84       	ldd	r8, Z+13	; 0x0d
    94ba:	84 84       	ldd	r8, Z+12	; 0x0c
    94bc:	83 83       	std	Z+3, r24	; 0x03
    94be:	83 83       	std	Z+3, r24	; 0x03
    94c0:	83 83       	std	Z+3, r24	; 0x03
    94c2:	83 83       	std	Z+3, r24	; 0x03
    94c4:	83 84       	ldd	r8, Z+11	; 0x0b
    94c6:	84 84       	ldd	r8, Z+12	; 0x0c
    94c8:	85 85       	ldd	r24, Z+13	; 0x0d
    94ca:	86 87       	std	Z+14, r24	; 0x0e
    94cc:	88 88       	ldd	r8, Y+16	; 0x10
    94ce:	89 8a       	std	Y+17, r8	; 0x11
    94d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    94d2:	8d 8f       	std	Y+29, r24	; 0x1d
    94d4:	90 91 93 94 	lds	r25, 0x9493
    94d8:	95 97       	sbiw	r26, 0x25	; 37
    94da:	99 9a       	sbi	0x13, 1	; 19
    94dc:	9c 9e       	mul	r9, r28
    94de:	9f a1       	ldd	r25, Y+39	; 0x27
    94e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    94e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    94e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    94e6:	af b1       	in	r26, 0x0f	; 15
    94e8:	b4 b6       	in	r11, 0x34	; 52
    94ea:	b8 ba       	out	0x18, r11	; 24
    94ec:	bd bf       	out	0x3d, r27	; 61
    94ee:	c1 c3       	rjmp	.+1922   	; 0x9c72 <LBGetNextFrame+0x22>
    94f0:	c6 c8       	rjmp	.-3700   	; 0x867e <ProcessMusic+0x66>
    94f2:	ca cc       	rjmp	.-1644   	; 0x8e88 <waves+0x188>
    94f4:	ce d0       	rcall	.+412    	; 0x9692 <waves+0x992>
    94f6:	d2 d4       	rcall	.+2468   	; 0x9e9c <LBCollides+0x1e>
    94f8:	d6 d7       	rcall	.+4012   	; 0xa4a6 <init_player_shot+0x3a8>
    94fa:	d7 d7       	rcall	.+4014   	; 0xa4aa <init_player_shot+0x3ac>
    94fc:	d4 fe       	sbrs	r13, 4
    94fe:	e5 e9       	ldi	r30, 0x95	; 149
    9500:	f9 f8       	.word	0xf8f9	; ????
    9502:	f9 f5       	brne	.+126    	; 0x9582 <waves+0x882>
    9504:	eb e1       	ldi	r30, 0x1B	; 27
    9506:	dd de       	rcall	.-582    	; 0x92c2 <waves+0x5c2>
    9508:	e0 e2       	ldi	r30, 0x20	; 32
    950a:	e4 e5       	ldi	r30, 0x54	; 84
    950c:	e6 e5       	ldi	r30, 0x56	; 86
    950e:	e4 e2       	ldi	r30, 0x24	; 36
    9510:	de d9       	rcall	.-3140   	; 0x88ce <ProcessMusic+0x2b6>
    9512:	d2 ca       	rjmp	.-2652   	; 0x8ab8 <smw1+0x8>
    9514:	c1 b7       	in	r28, 0x31	; 49
    9516:	ac a2       	std	Y+36, r10	; 0x24
    9518:	99 91       	ld	r25, Y+
    951a:	8a 86       	std	Y+10, r8	; 0x0a
    951c:	83 81       	ldd	r24, Z+3	; 0x03
    951e:	80 80       	ld	r8, Z
    9520:	81 82       	std	Z+1, r8	; 0x01
    9522:	83 85       	ldd	r24, Z+11	; 0x0b
    9524:	86 88       	ldd	r8, Z+22	; 0x16
    9526:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9528:	8d 8f       	std	Y+29, r24	; 0x1d
    952a:	90 92 93 95 	sts	0x9593, r9
    952e:	96 97       	sbiw	r26, 0x26	; 38
    9530:	98 99       	sbic	0x13, 0	; 19
    9532:	9a 9b       	sbis	0x13, 2	; 19
    9534:	9b 9c       	mul	r9, r11
    9536:	9d 9d       	mul	r25, r13
    9538:	9d 9e       	mul	r9, r29
    953a:	9e 9e       	mul	r9, r30
    953c:	9f 9f       	mul	r25, r31
    953e:	9f 9f       	mul	r25, r31
    9540:	9f 9f       	mul	r25, r31
    9542:	9f 9e       	mul	r9, r31
    9544:	9e 9e       	mul	r9, r30
    9546:	9d 9d       	mul	r25, r13
    9548:	9d 9c       	mul	r9, r13
    954a:	9b 9b       	sbis	0x13, 3	; 19
    954c:	9a 99       	sbic	0x13, 2	; 19
    954e:	98 97       	sbiw	r26, 0x28	; 40
    9550:	96 95       	lsr	r25
    9552:	93 92       	.word	0x9293	; ????
    9554:	90 8f       	std	Z+24, r25	; 0x18
    9556:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9558:	8a 88       	ldd	r8, Y+18	; 0x12
    955a:	86 85       	ldd	r24, Z+14	; 0x0e
    955c:	83 82       	std	Z+3, r8	; 0x03
    955e:	81 80       	ldd	r8, Z+1	; 0x01
    9560:	80 81       	ld	r24, Z
    9562:	83 86       	std	Z+11, r8	; 0x0b
    9564:	8a 91       	ld	r24, -Y
    9566:	99 a2       	std	Y+33, r9	; 0x21
    9568:	ac b7       	in	r26, 0x3c	; 60
    956a:	c1 ca       	rjmp	.-2686   	; 0x8aee <esmw+0x28>
    956c:	d2 d9       	rcall	.-3164   	; 0x8912 <ProcessMusic+0x2fa>
    956e:	de e2       	ldi	r29, 0x2E	; 46
    9570:	e4 e5       	ldi	r30, 0x54	; 84
    9572:	e6 e5       	ldi	r30, 0x56	; 86
    9574:	e4 e2       	ldi	r30, 0x24	; 36
    9576:	e0 de       	rcall	.-576    	; 0x9338 <waves+0x638>
    9578:	dd e1       	ldi	r29, 0x1D	; 29
    957a:	eb f5       	brvc	.+122    	; 0x95f6 <waves+0x8f6>
    957c:	f9 f8       	.word	0xf8f9	; ????
    957e:	f9 00       	.word	0x00f9	; ????
    9580:	07 08       	sbc	r0, r7
    9582:	07 0b       	sbc	r16, r23
    9584:	15 1f       	adc	r17, r21
    9586:	23 22       	and	r2, r19
    9588:	20 1e       	adc	r2, r16
    958a:	1c 1b       	sub	r17, r28
    958c:	1a 1b       	sub	r17, r26
    958e:	1c 1e       	adc	r1, r28
    9590:	22 27       	eor	r18, r18
    9592:	2e 36       	cpi	r18, 0x6E	; 110
    9594:	3f 49       	sbci	r19, 0x9F	; 159
    9596:	54 5e       	subi	r21, 0xE4	; 228
    9598:	67 6f       	ori	r22, 0xF7	; 247
    959a:	76 7a       	andi	r23, 0xA6	; 166
    959c:	7e 7f       	andi	r23, 0xFE	; 254
    959e:	7f 7f       	andi	r23, 0xFF	; 255
    95a0:	7f 7e       	andi	r23, 0xEF	; 239
    95a2:	7d 7b       	andi	r23, 0xBD	; 189
    95a4:	7a 78       	andi	r23, 0x8A	; 138
    95a6:	76 74       	andi	r23, 0x46	; 70
    95a8:	73 71       	andi	r23, 0x13	; 19
    95aa:	70 6e       	ori	r23, 0xE0	; 224
    95ac:	6d 6b       	ori	r22, 0xBD	; 189
    95ae:	6a 69       	ori	r22, 0x9A	; 154
    95b0:	68 67       	ori	r22, 0x78	; 120
    95b2:	66 65       	ori	r22, 0x56	; 86
    95b4:	65 64       	ori	r22, 0x45	; 69
    95b6:	64 63       	ori	r22, 0x34	; 52
    95b8:	63 62       	ori	r22, 0x23	; 35
    95ba:	62 62       	ori	r22, 0x22	; 34
    95bc:	61 61       	ori	r22, 0x11	; 17
    95be:	61 61       	ori	r22, 0x11	; 17
    95c0:	61 61       	ori	r22, 0x11	; 17
    95c2:	61 62       	ori	r22, 0x21	; 33
    95c4:	62 62       	ori	r22, 0x22	; 34
    95c6:	63 63       	ori	r22, 0x33	; 51
    95c8:	63 64       	ori	r22, 0x43	; 67
    95ca:	65 65       	ori	r22, 0x55	; 85
    95cc:	66 67       	ori	r22, 0x76	; 118
    95ce:	68 69       	ori	r22, 0x98	; 152
    95d0:	6a 6b       	ori	r22, 0xBA	; 186
    95d2:	6d 6e       	ori	r22, 0xED	; 237
    95d4:	70 71       	andi	r23, 0x10	; 16
    95d6:	73 74       	andi	r23, 0x43	; 67
    95d8:	76 78       	andi	r23, 0x86	; 134
    95da:	7a 7b       	andi	r23, 0xBA	; 186
    95dc:	7d 7e       	andi	r23, 0xED	; 237
    95de:	7f 7f       	andi	r23, 0xFF	; 255
    95e0:	7f 7f       	andi	r23, 0xFF	; 255
    95e2:	7e 7a       	andi	r23, 0xAE	; 174
    95e4:	76 6f       	ori	r23, 0xF6	; 246
    95e6:	67 5e       	subi	r22, 0xE7	; 231
    95e8:	54 49       	sbci	r21, 0x94	; 148
    95ea:	3f 36       	cpi	r19, 0x6F	; 111
    95ec:	2e 27       	eor	r18, r30
    95ee:	22 1e       	adc	r2, r18
    95f0:	1c 1b       	sub	r17, r28
    95f2:	1a 1b       	sub	r17, r26
    95f4:	1c 1e       	adc	r1, r28
    95f6:	20 22       	and	r2, r16
    95f8:	23 1f       	adc	r18, r19
    95fa:	15 0b       	sbc	r17, r21
    95fc:	07 08       	sbc	r0, r7
    95fe:	07 00       	.word	0x0007	; ????
    9600:	1f 31       	cpi	r17, 0x1F	; 31
    9602:	3d 44       	sbci	r19, 0x4D	; 77
    9604:	4e 53       	subi	r20, 0x3E	; 62
    9606:	54 56       	subi	r21, 0x64	; 100
    9608:	5a 5f       	subi	r21, 0xFA	; 250
    960a:	64 69       	ori	r22, 0x94	; 148
    960c:	6e 74       	andi	r22, 0x4E	; 78
    960e:	76 79       	andi	r23, 0x96	; 150
    9610:	7c 7f       	andi	r23, 0xFC	; 252
    9612:	7f 7f       	andi	r23, 0xFF	; 255
    9614:	7f 7f       	andi	r23, 0xFF	; 255
    9616:	7f 7f       	andi	r23, 0xFF	; 255
    9618:	7f 7f       	andi	r23, 0xFF	; 255
    961a:	7f 7f       	andi	r23, 0xFF	; 255
    961c:	7f 7f       	andi	r23, 0xFF	; 255
    961e:	7f 7f       	andi	r23, 0xFF	; 255
    9620:	7f 7f       	andi	r23, 0xFF	; 255
    9622:	7f 7f       	andi	r23, 0xFF	; 255
    9624:	7f 7f       	andi	r23, 0xFF	; 255
    9626:	7f 7f       	andi	r23, 0xFF	; 255
    9628:	7f 7f       	andi	r23, 0xFF	; 255
    962a:	7f 7f       	andi	r23, 0xFF	; 255
    962c:	7f 7f       	andi	r23, 0xFF	; 255
    962e:	7f 7f       	andi	r23, 0xFF	; 255
    9630:	7f 7f       	andi	r23, 0xFF	; 255
    9632:	7f 7f       	andi	r23, 0xFF	; 255
    9634:	7f 7f       	andi	r23, 0xFF	; 255
    9636:	7f 7f       	andi	r23, 0xFF	; 255
    9638:	7f 7f       	andi	r23, 0xFF	; 255
    963a:	7f 7f       	andi	r23, 0xFF	; 255
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7f 7f       	andi	r23, 0xFF	; 255
    9648:	7f 7f       	andi	r23, 0xFF	; 255
    964a:	7f 7f       	andi	r23, 0xFF	; 255
    964c:	7f 7f       	andi	r23, 0xFF	; 255
    964e:	7f 7f       	andi	r23, 0xFF	; 255
    9650:	7f 7f       	andi	r23, 0xFF	; 255
    9652:	7f 7f       	andi	r23, 0xFF	; 255
    9654:	7f 7f       	andi	r23, 0xFF	; 255
    9656:	7f 7f       	andi	r23, 0xFF	; 255
    9658:	7f 7f       	andi	r23, 0xFF	; 255
    965a:	7f 7f       	andi	r23, 0xFF	; 255
    965c:	7f 7f       	andi	r23, 0xFF	; 255
    965e:	7f 7f       	andi	r23, 0xFF	; 255
    9660:	7f 7f       	andi	r23, 0xFF	; 255
    9662:	7f 7f       	andi	r23, 0xFF	; 255
    9664:	7f 7f       	andi	r23, 0xFF	; 255
    9666:	7f 7f       	andi	r23, 0xFF	; 255
    9668:	7f 7f       	andi	r23, 0xFF	; 255
    966a:	7f 7f       	andi	r23, 0xFF	; 255
    966c:	7f 7f       	andi	r23, 0xFF	; 255
    966e:	7f 7f       	andi	r23, 0xFF	; 255
    9670:	7f 7f       	andi	r23, 0xFF	; 255
    9672:	7f 7f       	andi	r23, 0xFF	; 255
    9674:	7f 7f       	andi	r23, 0xFF	; 255
    9676:	7f 7f       	andi	r23, 0xFF	; 255
    9678:	7f 7f       	andi	r23, 0xFF	; 255
    967a:	7f 7c       	andi	r23, 0xCF	; 207
    967c:	78 71       	andi	r23, 0x18	; 24
    967e:	68 4c       	sbci	r22, 0xC8	; 200
    9680:	2c 1c       	adc	r2, r12
    9682:	12 0c       	add	r1, r2
    9684:	0a 0b       	sbc	r16, r26
    9686:	0a 05       	cpc	r16, r10
    9688:	fd f3       	brhs	.-2      	; 0x9688 <waves+0x988>
    968a:	e9 df       	rcall	.-46     	; 0x965e <waves+0x95e>
    968c:	d4 ca       	rjmp	.-2648   	; 0x8c36 <steptable+0x12e>
    968e:	c0 b7       	in	r28, 0x30	; 48
    9690:	ae a6       	std	Y+46, r10	; 0x2e
    9692:	9e 97       	sbiw	r26, 0x2e	; 46
    9694:	91 8b       	std	Z+17, r25	; 0x11
    9696:	86 85       	ldd	r24, Z+14	; 0x0e
    9698:	82 80       	ldd	r8, Z+2	; 0x02
    969a:	80 80       	ld	r8, Z
    969c:	80 80       	ld	r8, Z
    969e:	80 80       	ld	r8, Z
    96a0:	80 80       	ld	r8, Z
    96a2:	80 80       	ld	r8, Z
    96a4:	80 80       	ld	r8, Z
    96a6:	80 80       	ld	r8, Z
    96a8:	80 80       	ld	r8, Z
    96aa:	80 80       	ld	r8, Z
    96ac:	80 80       	ld	r8, Z
    96ae:	80 80       	ld	r8, Z
    96b0:	80 80       	ld	r8, Z
    96b2:	80 80       	ld	r8, Z
    96b4:	80 80       	ld	r8, Z
    96b6:	80 80       	ld	r8, Z
    96b8:	80 80       	ld	r8, Z
    96ba:	80 80       	ld	r8, Z
    96bc:	80 80       	ld	r8, Z
    96be:	80 80       	ld	r8, Z
    96c0:	80 80       	ld	r8, Z
    96c2:	80 80       	ld	r8, Z
    96c4:	80 80       	ld	r8, Z
    96c6:	80 80       	ld	r8, Z
    96c8:	80 80       	ld	r8, Z
    96ca:	80 80       	ld	r8, Z
    96cc:	80 80       	ld	r8, Z
    96ce:	80 80       	ld	r8, Z
    96d0:	80 80       	ld	r8, Z
    96d2:	80 80       	ld	r8, Z
    96d4:	80 80       	ld	r8, Z
    96d6:	80 80       	ld	r8, Z
    96d8:	80 80       	ld	r8, Z
    96da:	80 80       	ld	r8, Z
    96dc:	80 80       	ld	r8, Z
    96de:	80 80       	ld	r8, Z
    96e0:	80 80       	ld	r8, Z
    96e2:	80 80       	ld	r8, Z
    96e4:	80 80       	ld	r8, Z
    96e6:	80 80       	ld	r8, Z
    96e8:	80 80       	ld	r8, Z
    96ea:	80 80       	ld	r8, Z
    96ec:	80 80       	ld	r8, Z
    96ee:	80 80       	ld	r8, Z
    96f0:	80 80       	ld	r8, Z
    96f2:	80 80       	ld	r8, Z
    96f4:	80 87       	std	Z+8, r24	; 0x08
    96f6:	91 9d       	mul	r25, r1
    96f8:	ac c4       	rjmp	.+2392   	; 0xa052 <LBRotateSprites+0x16>
    96fa:	cb d4       	rcall	.+2454   	; 0xa092 <LBRotateSprites+0x56>
    96fc:	dd f2       	brhs	.-74     	; 0x96b4 <waves+0x9b4>
    96fe:	fa fa       	.word	0xfafa	; ????

00009700 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9700:	80 91 f3 0c 	lds	r24, 0x0CF3
    9704:	90 91 85 0d 	lds	r25, 0x0D85
    9708:	89 17       	cp	r24, r25
    970a:	78 f4       	brcc	.+30     	; 0x972a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    970c:	e8 2f       	mov	r30, r24
    970e:	f0 e0       	ldi	r31, 0x00	; 0
    9710:	9f 01       	movw	r18, r30
    9712:	22 0f       	add	r18, r18
    9714:	33 1f       	adc	r19, r19
    9716:	e2 0f       	add	r30, r18
    9718:	f3 1f       	adc	r31, r19
    971a:	e0 5b       	subi	r30, 0xB0	; 176
    971c:	f3 4f       	sbci	r31, 0xF3	; 243
    971e:	a0 81       	ld	r26, Z
    9720:	b1 81       	ldd	r27, Z+1	; 0x01
    9722:	92 81       	ldd	r25, Z+2	; 0x02
    9724:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9726:	8f 5f       	subi	r24, 0xFF	; 255
    9728:	ed cf       	rjmp	.-38     	; 0x9704 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    972a:	08 95       	ret

0000972c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    972c:	2f 92       	push	r2
    972e:	3f 92       	push	r3
    9730:	4f 92       	push	r4
    9732:	5f 92       	push	r5
    9734:	6f 92       	push	r6
    9736:	7f 92       	push	r7
    9738:	8f 92       	push	r8
    973a:	9f 92       	push	r9
    973c:	af 92       	push	r10
    973e:	bf 92       	push	r11
    9740:	cf 92       	push	r12
    9742:	df 92       	push	r13
    9744:	ef 92       	push	r14
    9746:	ff 92       	push	r15
    9748:	0f 93       	push	r16
    974a:	1f 93       	push	r17
    974c:	cf 93       	push	r28
    974e:	df 93       	push	r29
    9750:	00 d0       	rcall	.+0      	; 0x9752 <ProcessSprites+0x26>
    9752:	00 d0       	rcall	.+0      	; 0x9754 <ProcessSprites+0x28>
    9754:	cd b7       	in	r28, 0x3d	; 61
    9756:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9758:	80 91 00 05 	lds	r24, 0x0500
    975c:	88 23       	and	r24, r24
    975e:	09 f4       	brne	.+2      	; 0x9762 <ProcessSprites+0x36>
    9760:	e0 c0       	rjmp	.+448    	; 0x9922 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9762:	80 91 f2 0c 	lds	r24, 0x0CF2
    9766:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    976a:	80 93 85 0d 	sts	0x0D85, r24
    976e:	e0 e1       	ldi	r30, 0x10	; 16
    9770:	ce 2e       	mov	r12, r30
    9772:	e5 e0       	ldi	r30, 0x05	; 5
    9774:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9776:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9778:	f6 01       	movw	r30, r12
    977a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    977c:	20 3e       	cpi	r18, 0xE0	; 224
    977e:	09 f4       	brne	.+2      	; 0x9782 <ProcessSprites+0x56>
    9780:	b1 c0       	rjmp	.+354    	; 0x98e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9782:	80 91 b2 0c 	lds	r24, 0x0CB2
    9786:	90 e0       	ldi	r25, 0x00	; 0
    9788:	82 0f       	add	r24, r18
    978a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    978c:	41 81       	ldd	r20, Z+1	; 0x01
    978e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9792:	30 e0       	ldi	r19, 0x00	; 0
    9794:	24 0f       	add	r18, r20
    9796:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9798:	ac 01       	movw	r20, r24
    979a:	73 e0       	ldi	r23, 0x03	; 3
    979c:	56 95       	lsr	r21
    979e:	47 95       	ror	r20
    97a0:	7a 95       	dec	r23
    97a2:	e1 f7       	brne	.-8      	; 0x979c <ProcessSprites+0x70>
    97a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    97a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    97a8:	11 f0       	breq	.+4      	; 0x97ae <ProcessSprites+0x82>
    97aa:	92 e0       	ldi	r25, 0x02	; 2
    97ac:	01 c0       	rjmp	.+2      	; 0x97b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    97ae:	91 e0       	ldi	r25, 0x01	; 1
    97b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    97b2:	a9 01       	movw	r20, r18
    97b4:	63 e0       	ldi	r22, 0x03	; 3
    97b6:	56 95       	lsr	r21
    97b8:	47 95       	ror	r20
    97ba:	6a 95       	dec	r22
    97bc:	e1 f7       	brne	.-8      	; 0x97b6 <ProcessSprites+0x8a>
    97be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    97c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    97c2:	19 f0       	breq	.+6      	; 0x97ca <ProcessSprites+0x9e>
    97c4:	52 e0       	ldi	r21, 0x02	; 2
    97c6:	35 2e       	mov	r3, r21
    97c8:	02 c0       	rjmp	.+4      	; 0x97ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    97ca:	33 24       	eor	r3, r3
    97cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    97ce:	30 e0       	ldi	r19, 0x00	; 0
    97d0:	32 2f       	mov	r19, r18
    97d2:	22 27       	eor	r18, r18
    97d4:	f9 01       	movw	r30, r18
    97d6:	e8 0f       	add	r30, r24
    97d8:	f1 1d       	adc	r31, r1
    97da:	fc 83       	std	Y+4, r31	; 0x04
    97dc:	eb 83       	std	Y+3, r30	; 0x03
    97de:	e1 2c       	mov	r14, r1
    97e0:	f1 2c       	mov	r15, r1
    97e2:	be 2c       	mov	r11, r14
    97e4:	aa 24       	eor	r10, r10
    97e6:	26 2c       	mov	r2, r6
    97e8:	45 2c       	mov	r4, r5
    97ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    97ec:	84 2c       	mov	r8, r4
    97ee:	91 2c       	mov	r9, r1
    97f0:	84 2d       	mov	r24, r4
    97f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    97f6:	42 2f       	mov	r20, r18
    97f8:	50 e0       	ldi	r21, 0x00	; 0
    97fa:	44 0f       	add	r20, r20
    97fc:	55 1f       	adc	r21, r21
    97fe:	84 16       	cp	r8, r20
    9800:	95 06       	cpc	r9, r21
    9802:	14 f0       	brlt	.+4      	; 0x9808 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9804:	22 0f       	add	r18, r18
    9806:	03 c0       	rjmp	.+6      	; 0x980e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9808:	42 16       	cp	r4, r18
    980a:	10 f0       	brcs	.+4      	; 0x9810 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    980c:	84 2d       	mov	r24, r4
    980e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9810:	ff e1       	ldi	r31, 0x1F	; 31
    9812:	f2 15       	cp	r31, r2
    9814:	18 f4       	brcc	.+6      	; 0x981c <ProcessSprites+0xf0>
    9816:	00 ee       	ldi	r16, 0xE0	; 224
    9818:	02 0d       	add	r16, r2
    981a:	01 c0       	rjmp	.+2      	; 0x981e <ProcessSprites+0xf2>
    981c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    981e:	28 2f       	mov	r18, r24
    9820:	26 95       	lsr	r18
    9822:	26 95       	lsr	r18
    9824:	26 95       	lsr	r18
    9826:	10 e0       	ldi	r17, 0x00	; 0
    9828:	40 e2       	ldi	r20, 0x20	; 32
    982a:	24 9f       	mul	r18, r20
    982c:	00 0d       	add	r16, r0
    982e:	11 1d       	adc	r17, r1
    9830:	11 24       	eor	r1, r1
    9832:	23 e0       	ldi	r18, 0x03	; 3
    9834:	00 0f       	add	r16, r16
    9836:	11 1f       	adc	r17, r17
    9838:	2a 95       	dec	r18
    983a:	e1 f7       	brne	.-8      	; 0x9834 <ProcessSprites+0x108>
    983c:	87 70       	andi	r24, 0x07	; 7
    983e:	08 0f       	add	r16, r24
    9840:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9842:	00 50       	subi	r16, 0x00	; 0
    9844:	1f 4f       	sbci	r17, 0xFF	; 255
    9846:	f8 01       	movw	r30, r16
    9848:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    984a:	81 e0       	ldi	r24, 0x01	; 1
    984c:	7c 31       	cpi	r23, 0x1C	; 28
    984e:	08 f4       	brcc	.+2      	; 0x9852 <ProcessSprites+0x126>
    9850:	80 e0       	ldi	r24, 0x00	; 0
    9852:	21 e0       	ldi	r18, 0x01	; 1
    9854:	30 91 f3 0c 	lds	r19, 0x0CF3
    9858:	73 17       	cp	r23, r19
    985a:	18 f0       	brcs	.+6      	; 0x9862 <ProcessSprites+0x136>
    985c:	20 e0       	ldi	r18, 0x00	; 0
    985e:	88 23       	and	r24, r24
    9860:	51 f1       	breq	.+84     	; 0x98b6 <ProcessSprites+0x18a>
    9862:	60 91 85 0d 	lds	r22, 0x0D85
    9866:	6c 31       	cpi	r22, 0x1C	; 28
    9868:	20 f5       	brcc	.+72     	; 0x98b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    986a:	88 23       	and	r24, r24
    986c:	31 f0       	breq	.+12     	; 0x987a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    986e:	84 ee       	ldi	r24, 0xE4	; 228
    9870:	87 0f       	add	r24, r23
    9872:	7a 83       	std	Y+2, r23	; 0x02
    9874:	0e 94 28 3c 	call	0x7850	; 0x7850 <CopyFlashTile>
    9878:	06 c0       	rjmp	.+12     	; 0x9886 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    987a:	22 23       	and	r18, r18
    987c:	29 f0       	breq	.+10     	; 0x9888 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    987e:	87 2f       	mov	r24, r23
    9880:	7a 83       	std	Y+2, r23	; 0x02
    9882:	0e 94 b7 3c 	call	0x796e	; 0x796e <CopyRamTile>
    9886:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9888:	80 91 85 0d 	lds	r24, 0x0D85
    988c:	e8 2f       	mov	r30, r24
    988e:	f0 e0       	ldi	r31, 0x00	; 0
    9890:	9f 01       	movw	r18, r30
    9892:	22 0f       	add	r18, r18
    9894:	33 1f       	adc	r19, r19
    9896:	e2 0f       	add	r30, r18
    9898:	f3 1f       	adc	r31, r19
    989a:	e0 5b       	subi	r30, 0xB0	; 176
    989c:	f3 4f       	sbci	r31, 0xF3	; 243
    989e:	11 83       	std	Z+1, r17	; 0x01
    98a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    98a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    98a4:	f8 01       	movw	r30, r16
    98a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    98a8:	21 e0       	ldi	r18, 0x01	; 1
    98aa:	28 0f       	add	r18, r24
    98ac:	20 93 85 0d 	sts	0x0D85, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    98b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    98b2:	7c 31       	cpi	r23, 0x1C	; 28
    98b4:	38 f4       	brcc	.+14     	; 0x98c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    98b6:	2b 81       	ldd	r18, Y+3	; 0x03
    98b8:	3c 81       	ldd	r19, Y+4	; 0x04
    98ba:	a5 01       	movw	r20, r10
    98bc:	67 2f       	mov	r22, r23
    98be:	87 2d       	mov	r24, r7
    98c0:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <BlitSprite>
    98c4:	ff ef       	ldi	r31, 0xFF	; 255
    98c6:	af 1a       	sub	r10, r31
    98c8:	bf 0a       	sbc	r11, r31
    98ca:	23 94       	inc	r2
    98cc:	82 2d       	mov	r24, r2
    98ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    98d0:	99 81       	ldd	r25, Y+1	; 0x01
    98d2:	89 17       	cp	r24, r25
    98d4:	08 f4       	brcc	.+2      	; 0x98d8 <ProcessSprites+0x1ac>
    98d6:	8c cf       	rjmp	.-232    	; 0x97f0 <ProcessSprites+0xc4>
    98d8:	ef ef       	ldi	r30, 0xFF	; 255
    98da:	ee 1a       	sub	r14, r30
    98dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    98de:	e3 14       	cp	r14, r3
    98e0:	08 f4       	brcc	.+2      	; 0x98e4 <ProcessSprites+0x1b8>
    98e2:	7f cf       	rjmp	.-258    	; 0x97e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    98e4:	73 94       	inc	r7
    98e6:	f4 e0       	ldi	r31, 0x04	; 4
    98e8:	cf 0e       	add	r12, r31
    98ea:	d1 1c       	adc	r13, r1
    98ec:	40 e1       	ldi	r20, 0x10	; 16
    98ee:	74 12       	cpse	r7, r20
    98f0:	43 cf       	rjmp	.-378    	; 0x9778 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    98f2:	0f 90       	pop	r0
    98f4:	0f 90       	pop	r0
    98f6:	0f 90       	pop	r0
    98f8:	0f 90       	pop	r0
    98fa:	df 91       	pop	r29
    98fc:	cf 91       	pop	r28
    98fe:	1f 91       	pop	r17
    9900:	0f 91       	pop	r16
    9902:	ff 90       	pop	r15
    9904:	ef 90       	pop	r14
    9906:	df 90       	pop	r13
    9908:	cf 90       	pop	r12
    990a:	bf 90       	pop	r11
    990c:	af 90       	pop	r10
    990e:	9f 90       	pop	r9
    9910:	8f 90       	pop	r8
    9912:	7f 90       	pop	r7
    9914:	6f 90       	pop	r6
    9916:	5f 90       	pop	r5
    9918:	4f 90       	pop	r4
    991a:	3f 90       	pop	r3
    991c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    991e:	0c 94 80 4b 	jmp	0x9700	; 0x9700 <RestoreBackground>

	}
    9922:	0f 90       	pop	r0
    9924:	0f 90       	pop	r0
    9926:	0f 90       	pop	r0
    9928:	0f 90       	pop	r0
    992a:	df 91       	pop	r29
    992c:	cf 91       	pop	r28
    992e:	1f 91       	pop	r17
    9930:	0f 91       	pop	r16
    9932:	ff 90       	pop	r15
    9934:	ef 90       	pop	r14
    9936:	df 90       	pop	r13
    9938:	cf 90       	pop	r12
    993a:	bf 90       	pop	r11
    993c:	af 90       	pop	r10
    993e:	9f 90       	pop	r9
    9940:	8f 90       	pop	r8
    9942:	7f 90       	pop	r7
    9944:	6f 90       	pop	r6
    9946:	5f 90       	pop	r5
    9948:	4f 90       	pop	r4
    994a:	3f 90       	pop	r3
    994c:	2f 90       	pop	r2
    994e:	08 95       	ret

00009950 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9950:	90 91 b3 0c 	lds	r25, 0x0CB3
    9954:	96 0f       	add	r25, r22
    9956:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    995a:	20 91 b2 0c 	lds	r18, 0x0CB2
    995e:	82 0f       	add	r24, r18
    9960:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9964:	80 91 b4 0c 	lds	r24, 0x0CB4
    9968:	80 32       	cpi	r24, 0x20	; 32
    996a:	b0 f4       	brcc	.+44     	; 0x9998 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    996c:	29 2f       	mov	r18, r25
    996e:	30 e0       	ldi	r19, 0x00	; 0
    9970:	78 e0       	ldi	r23, 0x08	; 8
    9972:	87 9f       	mul	r24, r23
    9974:	a0 01       	movw	r20, r0
    9976:	11 24       	eor	r1, r1
    9978:	24 17       	cp	r18, r20
    997a:	35 07       	cpc	r19, r21
    997c:	6c f0       	brlt	.+26     	; 0x9998 <Scroll+0x48>
				if(dy>=0){	
    997e:	67 fd       	sbrc	r22, 7
    9980:	05 c0       	rjmp	.+10     	; 0x998c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9982:	28 ef       	ldi	r18, 0xF8	; 248
    9984:	82 9f       	mul	r24, r18
    9986:	90 0d       	add	r25, r0
    9988:	11 24       	eor	r1, r1
    998a:	04 c0       	rjmp	.+8      	; 0x9994 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    998c:	78 e0       	ldi	r23, 0x08	; 8
    998e:	87 9f       	mul	r24, r23
    9990:	90 0d       	add	r25, r0
    9992:	11 24       	eor	r1, r1
    9994:	90 93 b3 0c 	sts	0x0CB3, r25
    9998:	08 95       	ret

0000999a <DisplayLogo>:
		}	

	}

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    999a:	08 95       	ret

0000999c <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    999c:	e0 e1       	ldi	r30, 0x10	; 16
    999e:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    99a0:	80 ee       	ldi	r24, 0xE0	; 224
    99a2:	80 83       	st	Z, r24
    99a4:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    99a6:	95 e0       	ldi	r25, 0x05	; 5
    99a8:	e0 35       	cpi	r30, 0x50	; 80
    99aa:	f9 07       	cpc	r31, r25
    99ac:	d1 f7       	brne	.-12     	; 0x99a2 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    99ae:	80 e2       	ldi	r24, 0x20	; 32
    99b0:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    99b4:	10 92 af 0c 	sts	0x0CAF, r1
    99b8:	08 95       	ret

000099ba <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    99ba:	2f 92       	push	r2
    99bc:	3f 92       	push	r3
    99be:	4f 92       	push	r4
    99c0:	5f 92       	push	r5
    99c2:	6f 92       	push	r6
    99c4:	7f 92       	push	r7
    99c6:	8f 92       	push	r8
    99c8:	9f 92       	push	r9
    99ca:	af 92       	push	r10
    99cc:	bf 92       	push	r11
    99ce:	cf 92       	push	r12
    99d0:	df 92       	push	r13
    99d2:	ef 92       	push	r14
    99d4:	ff 92       	push	r15
    99d6:	0f 93       	push	r16
    99d8:	1f 93       	push	r17
    99da:	cf 93       	push	r28
    99dc:	df 93       	push	r29
    99de:	00 d0       	rcall	.+0      	; 0x99e0 <DrawMap+0x26>
    99e0:	1f 92       	push	r1
    99e2:	cd b7       	in	r28, 0x3d	; 61
    99e4:	de b7       	in	r29, 0x3e	; 62
    99e6:	28 2f       	mov	r18, r24
    99e8:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    99ea:	fa 01       	movw	r30, r20
    99ec:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    99ee:	31 96       	adiw	r30, 0x01	; 1
    99f0:	34 90       	lpm	r3, Z
    99f2:	42 2c       	mov	r4, r2
    99f4:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    99f6:	e1 2c       	mov	r14, r1
    99f8:	f1 2c       	mov	r15, r1
    99fa:	00 e0       	ldi	r16, 0x00	; 0
    99fc:	10 e0       	ldi	r17, 0x00	; 0
    99fe:	c6 2e       	mov	r12, r22
    9a00:	d1 2c       	mov	r13, r1
    9a02:	03 15       	cp	r16, r3
    9a04:	68 f5       	brcc	.+90     	; 0x9a60 <DrawMap+0xa6>
    9a06:	1b 82       	std	Y+3, r1	; 0x03
    9a08:	1a 82       	std	Y+2, r1	; 0x02
    9a0a:	57 01       	movw	r10, r14
    9a0c:	92 e0       	ldi	r25, 0x02	; 2
    9a0e:	a9 0e       	add	r10, r25
    9a10:	b1 1c       	adc	r11, r1
    9a12:	48 01       	movw	r8, r16
    9a14:	8c 0c       	add	r8, r12
    9a16:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9a18:	ea 81       	ldd	r30, Y+2	; 0x02
    9a1a:	e2 15       	cp	r30, r2
    9a1c:	e0 f4       	brcc	.+56     	; 0x9a56 <DrawMap+0x9c>
    9a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    9a20:	fb 81       	ldd	r31, Y+3	; 0x03
    9a22:	ea 0d       	add	r30, r10
    9a24:	fb 1d       	adc	r31, r11
    9a26:	e6 0d       	add	r30, r6
    9a28:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9a2a:	e4 91       	lpm	r30, Z
    9a2c:	f0 e0       	ldi	r31, 0x00	; 0
    9a2e:	60 91 b4 0c 	lds	r22, 0x0CB4
    9a32:	70 e0       	ldi	r23, 0x00	; 0
    9a34:	c4 01       	movw	r24, r8
    9a36:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    9a3a:	af 01       	movw	r20, r30
    9a3c:	68 2f       	mov	r22, r24
    9a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    9a40:	82 0f       	add	r24, r18
    9a42:	29 83       	std	Y+1, r18	; 0x01
    9a44:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <SetTile>
    9a48:	8a 81       	ldd	r24, Y+2	; 0x02
    9a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    9a4c:	01 96       	adiw	r24, 0x01	; 1
    9a4e:	9b 83       	std	Y+3, r25	; 0x03
    9a50:	8a 83       	std	Y+2, r24	; 0x02
    9a52:	29 81       	ldd	r18, Y+1	; 0x01
    9a54:	e1 cf       	rjmp	.-62     	; 0x9a18 <DrawMap+0x5e>
    9a56:	0f 5f       	subi	r16, 0xFF	; 255
    9a58:	1f 4f       	sbci	r17, 0xFF	; 255
    9a5a:	e4 0c       	add	r14, r4
    9a5c:	f5 1c       	adc	r15, r5
    9a5e:	d1 cf       	rjmp	.-94     	; 0x9a02 <DrawMap+0x48>
			}
		}

	}
    9a60:	0f 90       	pop	r0
    9a62:	0f 90       	pop	r0
    9a64:	0f 90       	pop	r0
    9a66:	df 91       	pop	r29
    9a68:	cf 91       	pop	r28
    9a6a:	1f 91       	pop	r17
    9a6c:	0f 91       	pop	r16
    9a6e:	ff 90       	pop	r15
    9a70:	ef 90       	pop	r14
    9a72:	df 90       	pop	r13
    9a74:	cf 90       	pop	r12
    9a76:	bf 90       	pop	r11
    9a78:	af 90       	pop	r10
    9a7a:	9f 90       	pop	r9
    9a7c:	8f 90       	pop	r8
    9a7e:	7f 90       	pop	r7
    9a80:	6f 90       	pop	r6
    9a82:	5f 90       	pop	r5
    9a84:	4f 90       	pop	r4
    9a86:	3f 90       	pop	r3
    9a88:	2f 90       	pop	r2
    9a8a:	08 95       	ret

00009a8c <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9a8c:	0f 93       	push	r16
    9a8e:	1f 93       	push	r17
    9a90:	cf 93       	push	r28
    9a92:	df 93       	push	r29
    9a94:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9a96:	c0 e0       	ldi	r28, 0x00	; 0
    9a98:	d0 e0       	ldi	r29, 0x00	; 0
    9a9a:	c0 17       	cp	r28, r16
    9a9c:	d1 07       	cpc	r29, r17
    9a9e:	44 f4       	brge	.+16     	; 0x9ab0 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9aa0:	0e 94 90 3f 	call	0x7f20	; 0x7f20 <GetVsyncFlag>
    9aa4:	88 23       	and	r24, r24
    9aa6:	e1 f3       	breq	.-8      	; 0x9aa0 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9aa8:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9aac:	21 96       	adiw	r28, 0x01	; 1
    9aae:	f5 cf       	rjmp	.-22     	; 0x9a9a <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9ab0:	df 91       	pop	r29
    9ab2:	cf 91       	pop	r28
    9ab4:	1f 91       	pop	r17
    9ab6:	0f 91       	pop	r16
    9ab8:	08 95       	ret

00009aba <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9aba:	80 93 83 0d 	sts	0x0D83, r24
	currFadeFrame=0;
    9abe:	10 92 87 0d 	sts	0x0D87, r1
	fadeActive=true;
    9ac2:	81 e0       	ldi	r24, 0x01	; 1
    9ac4:	80 93 86 0d 	sts	0x0D86, r24
		
	if(blocking){
    9ac8:	66 23       	and	r22, r22
    9aca:	21 f0       	breq	.+8      	; 0x9ad4 <doFade+0x1a>
		while(fadeActive==true);
    9acc:	80 91 86 0d 	lds	r24, 0x0D86
    9ad0:	81 11       	cpse	r24, r1
    9ad2:	fc cf       	rjmp	.-8      	; 0x9acc <doFade+0x12>
    9ad4:	08 95       	ret

00009ad6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9ad6:	81 11       	cpse	r24, r1
    9ad8:	03 c0       	rjmp	.+6      	; 0x9ae0 <FadeIn+0xa>
		DDRC=0xff;
    9ada:	8f ef       	ldi	r24, 0xFF	; 255
    9adc:	87 b9       	out	0x07, r24	; 7
		return;
    9ade:	08 95       	ret
	}
	fadeStep=1;
    9ae0:	91 e0       	ldi	r25, 0x01	; 1
    9ae2:	90 93 88 0d 	sts	0x0D88, r25
	fadeDir=1;
    9ae6:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    9aea:	0c 94 5d 4d 	jmp	0x9aba	; 0x9aba <doFade>

00009aee <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9aee:	81 11       	cpse	r24, r1
    9af0:	02 c0       	rjmp	.+4      	; 0x9af6 <FadeOut+0x8>
		DDRC=0;
    9af2:	17 b8       	out	0x07, r1	; 7
		return;
    9af4:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9af6:	9c e0       	ldi	r25, 0x0C	; 12
    9af8:	90 93 88 0d 	sts	0x0D88, r25
	fadeDir=-1;
    9afc:	9f ef       	ldi	r25, 0xFF	; 255
    9afe:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    9b02:	0c 94 5d 4d 	jmp	0x9aba	; 0x9aba <doFade>

00009b06 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9b06:	80 91 86 0d 	lds	r24, 0x0D86
    9b0a:	88 23       	and	r24, r24
    9b0c:	01 f1       	breq	.+64     	; 0x9b4e <ProcessFading+0x48>
		if(currFadeFrame==0){
    9b0e:	80 91 87 0d 	lds	r24, 0x0D87
    9b12:	81 11       	cpse	r24, r1
    9b14:	19 c0       	rjmp	.+50     	; 0x9b48 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9b16:	80 91 83 0d 	lds	r24, 0x0D83
    9b1a:	80 93 87 0d 	sts	0x0D87, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9b1e:	e0 91 88 0d 	lds	r30, 0x0D88
    9b22:	f0 e0       	ldi	r31, 0x00	; 0
    9b24:	ef 5f       	subi	r30, 0xFF	; 255
    9b26:	fe 4f       	sbci	r31, 0xFE	; 254
    9b28:	e4 91       	lpm	r30, Z
    9b2a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9b2c:	90 91 84 0d 	lds	r25, 0x0D84
    9b30:	80 91 88 0d 	lds	r24, 0x0D88
    9b34:	89 0f       	add	r24, r25
    9b36:	80 93 88 0d 	sts	0x0D88, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9b3a:	88 23       	and	r24, r24
    9b3c:	11 f0       	breq	.+4      	; 0x9b42 <ProcessFading+0x3c>
    9b3e:	8d 30       	cpi	r24, 0x0D	; 13
    9b40:	31 f4       	brne	.+12     	; 0x9b4e <ProcessFading+0x48>
				fadeActive=false;
    9b42:	10 92 86 0d 	sts	0x0D86, r1
    9b46:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9b48:	81 50       	subi	r24, 0x01	; 1
    9b4a:	80 93 87 0d 	sts	0x0D87, r24
    9b4e:	08 95       	ret

00009b50 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    9b50:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <ProcessFading>
		ProcessSprites();
    9b54:	0c 94 96 4b 	jmp	0x972c	; 0x972c <ProcessSprites>

00009b58 <record_observation>:
	return ai_action;
}

#if DEBUG_OBSERVE_PLAYER
void record_observation(u8 state, u8 action)
{
    9b58:	cf 92       	push	r12
    9b5a:	df 92       	push	r13
    9b5c:	ef 92       	push	r14
    9b5e:	ff 92       	push	r15
    9b60:	0f 93       	push	r16
    9b62:	1f 93       	push	r17
    9b64:	cf 93       	push	r28
    9b66:	df 93       	push	r29
    9b68:	1f 92       	push	r1
    9b6a:	cd b7       	in	r28, 0x3d	; 61
    9b6c:	de b7       	in	r29, 0x3e	; 62
	u16 row = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE)+(state*OBSERVATION_MATRIX_WIDTH);
    9b6e:	27 e0       	ldi	r18, 0x07	; 7
    9b70:	82 9f       	mul	r24, r18
    9b72:	c0 01       	movw	r24, r0
    9b74:	11 24       	eor	r1, r1
    9b76:	6c 01       	movw	r12, r24
    9b78:	20 e2       	ldi	r18, 0x20	; 32
    9b7a:	c2 0e       	add	r12, r18
    9b7c:	d1 1c       	adc	r13, r1
    9b7e:	8c 01       	movw	r16, r24
    9b80:	09 5d       	subi	r16, 0xD9	; 217
    9b82:	1f 4f       	sbci	r17, 0xFF	; 255
    9b84:	76 01       	movw	r14, r12
	for (u8 i = 0; i < OBSERVATION_MATRIX_WIDTH; i++)
	{
		if (ReadEeprom(row+i) == 255) return;
    9b86:	c7 01       	movw	r24, r14
    9b88:	69 83       	std	Y+1, r22	; 0x01
    9b8a:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <ReadEeprom>
    9b8e:	69 81       	ldd	r22, Y+1	; 0x01
    9b90:	8f 3f       	cpi	r24, 0xFF	; 255
    9b92:	c9 f0       	breq	.+50     	; 0x9bc6 <record_observation+0x6e>
    9b94:	8f ef       	ldi	r24, 0xFF	; 255
    9b96:	e8 1a       	sub	r14, r24
    9b98:	f8 0a       	sbc	r15, r24

#if DEBUG_OBSERVE_PLAYER
void record_observation(u8 state, u8 action)
{
	u16 row = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE)+(state*OBSERVATION_MATRIX_WIDTH);
	for (u8 i = 0; i < OBSERVATION_MATRIX_WIDTH; i++)
    9b9a:	e0 16       	cp	r14, r16
    9b9c:	f1 06       	cpc	r15, r17
    9b9e:	99 f7       	brne	.-26     	; 0x9b86 <record_observation+0x2e>
	{
		if (ReadEeprom(row+i) == 255) return;
	}
	WriteEeprom(row+action, ReadEeprom(row+action)+1);
    9ba0:	c6 0e       	add	r12, r22
    9ba2:	d1 1c       	adc	r13, r1
    9ba4:	c6 01       	movw	r24, r12
    9ba6:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <ReadEeprom>
    9baa:	61 e0       	ldi	r22, 0x01	; 1
    9bac:	68 0f       	add	r22, r24
    9bae:	c6 01       	movw	r24, r12
}
    9bb0:	0f 90       	pop	r0
    9bb2:	df 91       	pop	r29
    9bb4:	cf 91       	pop	r28
    9bb6:	1f 91       	pop	r17
    9bb8:	0f 91       	pop	r16
    9bba:	ff 90       	pop	r15
    9bbc:	ef 90       	pop	r14
    9bbe:	df 90       	pop	r13
    9bc0:	cf 90       	pop	r12
	u16 row = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE)+(state*OBSERVATION_MATRIX_WIDTH);
	for (u8 i = 0; i < OBSERVATION_MATRIX_WIDTH; i++)
	{
		if (ReadEeprom(row+i) == 255) return;
	}
	WriteEeprom(row+action, ReadEeprom(row+action)+1);
    9bc2:	0c 94 ad 3f 	jmp	0x7f5a	; 0x7f5a <WriteEeprom>
}
    9bc6:	0f 90       	pop	r0
    9bc8:	df 91       	pop	r29
    9bca:	cf 91       	pop	r28
    9bcc:	1f 91       	pop	r17
    9bce:	0f 91       	pop	r16
    9bd0:	ff 90       	pop	r15
    9bd2:	ef 90       	pop	r14
    9bd4:	df 90       	pop	r13
    9bd6:	cf 90       	pop	r12
    9bd8:	08 95       	ret

00009bda <clear_eeprom>:

void clear_eeprom()
{
    9bda:	cf 93       	push	r28
    9bdc:	df 93       	push	r29
	for (u16 i = EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE; i < EEPROM_BLOCK_SIZE*EEPROM_MAX_BLOCKS; i++)
    9bde:	c0 e2       	ldi	r28, 0x20	; 32
    9be0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		WriteEeprom(i, 0x00);
    9be2:	60 e0       	ldi	r22, 0x00	; 0
    9be4:	ce 01       	movw	r24, r28
    9be6:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <WriteEeprom>
	WriteEeprom(row+action, ReadEeprom(row+action)+1);
}

void clear_eeprom()
{
	for (u16 i = EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE; i < EEPROM_BLOCK_SIZE*EEPROM_MAX_BLOCKS; i++)
    9bea:	21 96       	adiw	r28, 0x01	; 1
    9bec:	c1 15       	cp	r28, r1
    9bee:	88 e0       	ldi	r24, 0x08	; 8
    9bf0:	d8 07       	cpc	r29, r24
    9bf2:	b9 f7       	brne	.-18     	; 0x9be2 <clear_eeprom+0x8>
	{
		WriteEeprom(i, 0x00);
	}
}
    9bf4:	df 91       	pop	r29
    9bf6:	cf 91       	pop	r28
    9bf8:	08 95       	ret

00009bfa <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9bfa:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9bfc:	88 23       	and	r24, r24
    9bfe:	29 f1       	breq	.+74     	; 0x9c4a <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    9c00:	87 ff       	sbrs	r24, 7
    9c02:	03 c0       	rjmp	.+6      	; 0x9c0a <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9c04:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9c06:	3f ef       	ldi	r19, 0xFF	; 255
    9c08:	01 c0       	rjmp	.+2      	; 0x9c0c <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9c0a:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9c0c:	6c e3       	ldi	r22, 0x3C	; 60
    9c0e:	0e 94 5e 73 	call	0xe6bc	; 0xe6bc <__divmodqi4>
    9c12:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9c14:	99 23       	and	r25, r25
    9c16:	a9 f0       	breq	.+42     	; 0x9c42 <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9c18:	69 2f       	mov	r22, r25
    9c1a:	70 e0       	ldi	r23, 0x00	; 0
    9c1c:	8c e3       	ldi	r24, 0x3C	; 60
    9c1e:	90 e0       	ldi	r25, 0x00	; 0
    9c20:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9c24:	8e 2f       	mov	r24, r30
    9c26:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    9c2a:	91 11       	cpse	r25, r1
    9c2c:	0a c0       	rjmp	.+20     	; 0x9c42 <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    9c2e:	42 2f       	mov	r20, r18
    9c30:	50 e0       	ldi	r21, 0x00	; 0
    9c32:	4f 5f       	subi	r20, 0xFF	; 255
    9c34:	5f 4f       	sbci	r21, 0xFF	; 255
    9c36:	34 03       	mulsu	r19, r20
    9c38:	c0 01       	movw	r24, r0
    9c3a:	35 9f       	mul	r19, r21
    9c3c:	90 0d       	add	r25, r0
    9c3e:	11 24       	eor	r1, r1
    9c40:	08 95       	ret
	}
	return direction*base_delta;
    9c42:	32 03       	mulsu	r19, r18
    9c44:	c0 01       	movw	r24, r0
    9c46:	11 24       	eor	r1, r1
    9c48:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9c4a:	80 e0       	ldi	r24, 0x00	; 0
    9c4c:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    9c4e:	08 95       	ret

00009c50 <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    9c50:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9c52:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9c54:	93 81       	ldd	r25, Z+3	; 0x03
    9c56:	9f 5f       	subi	r25, 0xFF	; 255
    9c58:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9c5a:	42 81       	ldd	r20, Z+2	; 0x02
    9c5c:	80 81       	ld	r24, Z
    9c5e:	26 81       	ldd	r18, Z+6	; 0x06
    9c60:	37 81       	ldd	r19, Z+7	; 0x07
    9c62:	94 17       	cp	r25, r20
    9c64:	30 f4       	brcc	.+12     	; 0x9c72 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    9c66:	f9 01       	movw	r30, r18
    9c68:	e8 0f       	add	r30, r24
    9c6a:	f1 1d       	adc	r31, r1
    9c6c:	e8 0f       	add	r30, r24
    9c6e:	f1 1d       	adc	r31, r1
    9c70:	12 c0       	rjmp	.+36     	; 0x9c96 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    9c72:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9c74:	90 e0       	ldi	r25, 0x00	; 0
    9c76:	01 96       	adiw	r24, 0x01	; 1
    9c78:	61 81       	ldd	r22, Z+1	; 0x01
    9c7a:	70 e0       	ldi	r23, 0x00	; 0
    9c7c:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    9c80:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9c82:	81 11       	cpse	r24, r1
    9c84:	02 c0       	rjmp	.+4      	; 0x9c8a <LBGetNextFrame+0x3a>
    9c86:	41 e0       	ldi	r20, 0x01	; 1
    9c88:	44 83       	std	Z+4, r20	; 0x04
    9c8a:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9c8c:	88 0f       	add	r24, r24
    9c8e:	99 1f       	adc	r25, r25
    9c90:	f9 01       	movw	r30, r18
    9c92:	e8 0f       	add	r30, r24
    9c94:	f9 1f       	adc	r31, r25
    9c96:	80 81       	ld	r24, Z
    9c98:	91 81       	ldd	r25, Z+1	; 0x01
}
    9c9a:	08 95       	ret

00009c9c <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9c9c:	0f 93       	push	r16
    9c9e:	1f 93       	push	r17
    9ca0:	cf 93       	push	r28
    9ca2:	df 93       	push	r29
    9ca4:	1f 92       	push	r1
    9ca6:	cd b7       	in	r28, 0x3d	; 61
    9ca8:	de b7       	in	r29, 0x3e	; 62
    9caa:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9cac:	86 2f       	mov	r24, r22
    9cae:	69 83       	std	Y+1, r22	; 0x01
    9cb0:	0e 94 9a 3f 	call	0x7f34	; 0x7f34 <ReadJoypad>
    9cb4:	d8 01       	movw	r26, r16
    9cb6:	15 96       	adiw	r26, 0x05	; 5
    9cb8:	9c 93       	st	X, r25
    9cba:	8e 93       	st	-X, r24
    9cbc:	14 97       	sbiw	r26, 0x04	; 4
    9cbe:	69 81       	ldd	r22, Y+1	; 0x01
    9cc0:	e6 2f       	mov	r30, r22
    9cc2:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9cc4:	00 97       	sbiw	r24, 0x00	; 0
    9cc6:	51 f0       	breq	.+20     	; 0x9cdc <LBGetJoyPadState+0x40>
    9cc8:	df 01       	movw	r26, r30
    9cca:	aa 0f       	add	r26, r26
    9ccc:	bb 1f       	adc	r27, r27
    9cce:	a5 50       	subi	r26, 0x05	; 5
    9cd0:	b3 4f       	sbci	r27, 0xF3	; 243
    9cd2:	2d 91       	ld	r18, X+
    9cd4:	3c 91       	ld	r19, X
    9cd6:	82 17       	cp	r24, r18
    9cd8:	93 07       	cpc	r25, r19
    9cda:	21 f0       	breq	.+8      	; 0x9ce4 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9cdc:	d8 01       	movw	r26, r16
    9cde:	16 96       	adiw	r26, 0x06	; 6
    9ce0:	1c 92       	st	X, r1
    9ce2:	07 c0       	rjmp	.+14     	; 0x9cf2 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9ce4:	d8 01       	movw	r26, r16
    9ce6:	16 96       	adiw	r26, 0x06	; 6
    9ce8:	2c 91       	ld	r18, X
    9cea:	16 97       	sbiw	r26, 0x06	; 6
    9cec:	2f 5f       	subi	r18, 0xFF	; 255
    9cee:	16 96       	adiw	r26, 0x06	; 6
    9cf0:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9cf2:	ee 0f       	add	r30, r30
    9cf4:	ff 1f       	adc	r31, r31
    9cf6:	e5 50       	subi	r30, 0x05	; 5
    9cf8:	f3 4f       	sbci	r31, 0xF3	; 243
    9cfa:	20 81       	ld	r18, Z
    9cfc:	31 81       	ldd	r19, Z+1	; 0x01
    9cfe:	a9 01       	movw	r20, r18
    9d00:	40 95       	com	r20
    9d02:	50 95       	com	r21
    9d04:	48 23       	and	r20, r24
    9d06:	59 23       	and	r21, r25
    9d08:	d8 01       	movw	r26, r16
    9d0a:	11 96       	adiw	r26, 0x01	; 1
    9d0c:	5c 93       	st	X, r21
    9d0e:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9d10:	ac 01       	movw	r20, r24
    9d12:	40 95       	com	r20
    9d14:	50 95       	com	r21
    9d16:	24 23       	and	r18, r20
    9d18:	35 23       	and	r19, r21
    9d1a:	13 96       	adiw	r26, 0x03	; 3
    9d1c:	3c 93       	st	X, r19
    9d1e:	2e 93       	st	-X, r18
    9d20:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9d22:	91 83       	std	Z+1, r25	; 0x01
    9d24:	80 83       	st	Z, r24
}
    9d26:	0f 90       	pop	r0
    9d28:	df 91       	pop	r29
    9d2a:	cf 91       	pop	r28
    9d2c:	1f 91       	pop	r17
    9d2e:	0f 91       	pop	r16
    9d30:	08 95       	ret

00009d32 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9d32:	90 ed       	ldi	r25, 0xD0	; 208
    9d34:	94 0f       	add	r25, r20
    9d36:	e0 91 89 0d 	lds	r30, 0x0D89
    9d3a:	f0 91 8a 0d 	lds	r31, 0x0D8A
    9d3e:	9a 30       	cpi	r25, 0x0A	; 10
    9d40:	38 f4       	brcc	.+14     	; 0x9d50 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9d42:	24 2f       	mov	r18, r20
    9d44:	30 e0       	ldi	r19, 0x00	; 0
    9d46:	2d 52       	subi	r18, 0x2D	; 45
    9d48:	31 09       	sbc	r19, r1
    9d4a:	e2 0f       	add	r30, r18
    9d4c:	f3 1f       	adc	r31, r19
    9d4e:	0c c0       	rjmp	.+24     	; 0x9d68 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    9d50:	9f eb       	ldi	r25, 0xBF	; 191
    9d52:	94 0f       	add	r25, r20
    9d54:	9a 31       	cpi	r25, 0x1A	; 26
    9d56:	38 f4       	brcc	.+14     	; 0x9d66 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9d58:	50 e0       	ldi	r21, 0x00	; 0
    9d5a:	44 53       	subi	r20, 0x34	; 52
    9d5c:	51 09       	sbc	r21, r1
    9d5e:	e4 0f       	add	r30, r20
    9d60:	f5 1f       	adc	r31, r21
    9d62:	44 91       	lpm	r20, Z
    9d64:	03 c0       	rjmp	.+6      	; 0x9d6c <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9d66:	32 96       	adiw	r30, 0x02	; 2
    9d68:	e4 91       	lpm	r30, Z
    9d6a:	4e 2f       	mov	r20, r30
    9d6c:	50 e0       	ldi	r21, 0x00	; 0
    9d6e:	0c 94 7a 3f 	jmp	0x7ef4	; 0x7ef4 <SetTile>

00009d72 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9d72:	ff 92       	push	r15
    9d74:	0f 93       	push	r16
    9d76:	1f 93       	push	r17
    9d78:	cf 93       	push	r28
    9d7a:	df 93       	push	r29
    9d7c:	d8 2f       	mov	r29, r24
    9d7e:	f6 2e       	mov	r15, r22
    9d80:	8a 01       	movw	r16, r20
	u8 i = 0;
    9d82:	c0 e0       	ldi	r28, 0x00	; 0
    9d84:	8c 2f       	mov	r24, r28
    9d86:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9d88:	f8 01       	movw	r30, r16
    9d8a:	ec 0f       	add	r30, r28
    9d8c:	f1 1d       	adc	r31, r1
    9d8e:	44 91       	lpm	r20, Z
    9d90:	44 23       	and	r20, r20
    9d92:	29 f0       	breq	.+10     	; 0x9d9e <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9d94:	6f 2d       	mov	r22, r15
    9d96:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		i++;
    9d9a:	cf 5f       	subi	r28, 0xFF	; 255
    9d9c:	f3 cf       	rjmp	.-26     	; 0x9d84 <LBPrint+0x12>
	}
}
    9d9e:	df 91       	pop	r29
    9da0:	cf 91       	pop	r28
    9da2:	1f 91       	pop	r17
    9da4:	0f 91       	pop	r16
    9da6:	ff 90       	pop	r15
    9da8:	08 95       	ret

00009daa <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9daa:	df 92       	push	r13
    9dac:	ef 92       	push	r14
    9dae:	ff 92       	push	r15
    9db0:	0f 93       	push	r16
    9db2:	1f 93       	push	r17
    9db4:	cf 93       	push	r28
    9db6:	df 93       	push	r29
    9db8:	1f 92       	push	r1
    9dba:	cd b7       	in	r28, 0x3d	; 61
    9dbc:	de b7       	in	r29, 0x3e	; 62
    9dbe:	38 2f       	mov	r19, r24
    9dc0:	06 2f       	mov	r16, r22
    9dc2:	84 2f       	mov	r24, r20
    9dc4:	9d ef       	ldi	r25, 0xFD	; 253
    9dc6:	e9 2e       	mov	r14, r25
    9dc8:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9dca:	4a e0       	ldi	r20, 0x0A	; 10
    9dcc:	f4 2e       	mov	r15, r20
    9dce:	1f ef       	ldi	r17, 0xFF	; 255
    9dd0:	13 0f       	add	r17, r19
    9dd2:	6f 2d       	mov	r22, r15
    9dd4:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    9dd8:	d8 2e       	mov	r13, r24
    9dda:	40 e3       	ldi	r20, 0x30	; 48
    9ddc:	49 0f       	add	r20, r25
    9dde:	60 2f       	mov	r22, r16
    9de0:	83 2f       	mov	r24, r19
    9de2:	29 83       	std	Y+1, r18	; 0x01
    9de4:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		value /= 10;
    9de8:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9dea:	29 81       	ldd	r18, Y+1	; 0x01
    9dec:	21 11       	cpse	r18, r1
    9dee:	02 c0       	rjmp	.+4      	; 0x9df4 <LBPrintByte+0x4a>
    9df0:	dd 20       	and	r13, r13
    9df2:	19 f0       	breq	.+6      	; 0x9dfa <LBPrintByte+0x50>
    9df4:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9df6:	1e 11       	cpse	r17, r14
    9df8:	ea cf       	rjmp	.-44     	; 0x9dce <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9dfa:	0f 90       	pop	r0
    9dfc:	df 91       	pop	r29
    9dfe:	cf 91       	pop	r28
    9e00:	1f 91       	pop	r17
    9e02:	0f 91       	pop	r16
    9e04:	ff 90       	pop	r15
    9e06:	ef 90       	pop	r14
    9e08:	df 90       	pop	r13
    9e0a:	08 95       	ret

00009e0c <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9e0c:	cf 92       	push	r12
    9e0e:	df 92       	push	r13
    9e10:	ef 92       	push	r14
    9e12:	ff 92       	push	r15
    9e14:	0f 93       	push	r16
    9e16:	1f 93       	push	r17
    9e18:	cf 93       	push	r28
    9e1a:	df 93       	push	r29
    9e1c:	00 d0       	rcall	.+0      	; 0x9e1e <LBPrintInt+0x12>
    9e1e:	cd b7       	in	r28, 0x3d	; 61
    9e20:	de b7       	in	r29, 0x3e	; 62
    9e22:	38 2f       	mov	r19, r24
    9e24:	16 2f       	mov	r17, r22
    9e26:	ca 01       	movw	r24, r20
    9e28:	4b ef       	ldi	r20, 0xFB	; 251
    9e2a:	d4 2e       	mov	r13, r20
    9e2c:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9e2e:	5a e0       	ldi	r21, 0x0A	; 10
    9e30:	e5 2e       	mov	r14, r21
    9e32:	f1 2c       	mov	r15, r1
    9e34:	cc 24       	eor	r12, r12
    9e36:	ca 94       	dec	r12
    9e38:	c3 0e       	add	r12, r19
    9e3a:	b7 01       	movw	r22, r14
    9e3c:	0e 94 6c 73 	call	0xe6d8	; 0xe6d8 <__udivmodhi4>
    9e40:	06 2f       	mov	r16, r22
    9e42:	40 e3       	ldi	r20, 0x30	; 48
    9e44:	48 0f       	add	r20, r24
    9e46:	61 2f       	mov	r22, r17
    9e48:	83 2f       	mov	r24, r19
    9e4a:	29 83       	std	Y+1, r18	; 0x01
    9e4c:	7a 83       	std	Y+2, r23	; 0x02
    9e4e:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		value /= 10;
    9e52:	80 2f       	mov	r24, r16
    9e54:	7a 81       	ldd	r23, Y+2	; 0x02
    9e56:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    9e58:	29 81       	ldd	r18, Y+1	; 0x01
    9e5a:	21 11       	cpse	r18, r1
    9e5c:	02 c0       	rjmp	.+4      	; 0x9e62 <LBPrintInt+0x56>
    9e5e:	00 97       	sbiw	r24, 0x00	; 0
    9e60:	19 f0       	breq	.+6      	; 0x9e68 <LBPrintInt+0x5c>
    9e62:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    9e64:	cd 10       	cpse	r12, r13
    9e66:	e6 cf       	rjmp	.-52     	; 0x9e34 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9e68:	0f 90       	pop	r0
    9e6a:	0f 90       	pop	r0
    9e6c:	df 91       	pop	r29
    9e6e:	cf 91       	pop	r28
    9e70:	1f 91       	pop	r17
    9e72:	0f 91       	pop	r16
    9e74:	ff 90       	pop	r15
    9e76:	ef 90       	pop	r14
    9e78:	df 90       	pop	r13
    9e7a:	cf 90       	pop	r12
    9e7c:	08 95       	ret

00009e7e <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9e7e:	af 92       	push	r10
    9e80:	cf 92       	push	r12
    9e82:	ef 92       	push	r14
    9e84:	ff 92       	push	r15
    9e86:	0f 93       	push	r16
    9e88:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9e8a:	70 e0       	ldi	r23, 0x00	; 0
    9e8c:	f1 2c       	mov	r15, r1
    9e8e:	fb 01       	movw	r30, r22
    9e90:	e2 0f       	add	r30, r18
    9e92:	f1 1d       	adc	r31, r1
    9e94:	ee 16       	cp	r14, r30
    9e96:	ff 06       	cpc	r15, r31
    9e98:	a4 f4       	brge	.+40     	; 0x9ec2 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9e9a:	ea 0c       	add	r14, r10
    9e9c:	f1 1c       	adc	r15, r1
    9e9e:	6e 15       	cp	r22, r14
    9ea0:	7f 05       	cpc	r23, r15
    9ea2:	7c f4       	brge	.+30     	; 0x9ec2 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9ea4:	28 2f       	mov	r18, r24
    9ea6:	30 e0       	ldi	r19, 0x00	; 0
    9ea8:	10 e0       	ldi	r17, 0x00	; 0
    9eaa:	c9 01       	movw	r24, r18
    9eac:	84 0f       	add	r24, r20
    9eae:	91 1d       	adc	r25, r1
    9eb0:	08 17       	cp	r16, r24
    9eb2:	19 07       	cpc	r17, r25
    9eb4:	34 f4       	brge	.+12     	; 0x9ec2 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9eb6:	0c 0d       	add	r16, r12
    9eb8:	11 1d       	adc	r17, r1
    9eba:	81 e0       	ldi	r24, 0x01	; 1
    9ebc:	20 17       	cp	r18, r16
    9ebe:	31 07       	cpc	r19, r17
    9ec0:	0c f0       	brlt	.+2      	; 0x9ec4 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9ec2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9ec4:	1f 91       	pop	r17
    9ec6:	0f 91       	pop	r16
    9ec8:	ff 90       	pop	r15
    9eca:	ef 90       	pop	r14
    9ecc:	cf 90       	pop	r12
    9ece:	af 90       	pop	r10
    9ed0:	08 95       	ret

00009ed2 <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9ed2:	cf 93       	push	r28
    9ed4:	df 93       	push	r29
    9ed6:	d8 2f       	mov	r29, r24
    9ed8:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9eda:	80 e0       	ldi	r24, 0x00	; 0
    9edc:	90 e0       	ldi	r25, 0x00	; 0
    9ede:	0e 94 99 40 	call	0x8132	; 0x8132 <GetPrngNumber>
    9ee2:	6f ef       	ldi	r22, 0xFF	; 255
    9ee4:	70 e0       	ldi	r23, 0x00	; 0
    9ee6:	0e 94 6c 73 	call	0xe6d8	; 0xe6d8 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9eea:	6c 2f       	mov	r22, r28
    9eec:	70 e0       	ldi	r23, 0x00	; 0
    9eee:	6d 1b       	sub	r22, r29
    9ef0:	71 09       	sbc	r23, r1
    9ef2:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
}
    9ef6:	8d 0f       	add	r24, r29
    9ef8:	df 91       	pop	r29
    9efa:	cf 91       	pop	r28
    9efc:	08 95       	ret

00009efe <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9efe:	cf 93       	push	r28
    9f00:	df 93       	push	r29
    9f02:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9f04:	c0 e0       	ldi	r28, 0x00	; 0
    9f06:	cd 17       	cp	r28, r29
    9f08:	31 f0       	breq	.+12     	; 0x9f16 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9f0a:	8f ef       	ldi	r24, 0xFF	; 255
    9f0c:	9f ef       	ldi	r25, 0xFF	; 255
    9f0e:	0e 94 a6 3f 	call	0x7f4c	; 0x7f4c <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9f12:	cf 5f       	subi	r28, 0xFF	; 255
    9f14:	f8 cf       	rjmp	.-16     	; 0x9f06 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9f16:	df 91       	pop	r29
    9f18:	cf 91       	pop	r28
    9f1a:	08 95       	ret

00009f1c <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9f1c:	df 92       	push	r13
    9f1e:	ef 92       	push	r14
    9f20:	ff 92       	push	r15
    9f22:	0f 93       	push	r16
    9f24:	1f 93       	push	r17
    9f26:	cf 93       	push	r28
    9f28:	df 93       	push	r29
    9f2a:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9f2c:	fb 01       	movw	r30, r22
    9f2e:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9f30:	31 96       	adiw	r30, 0x01	; 1
    9f32:	64 91       	lpm	r22, Z
    9f34:	5f ef       	ldi	r21, 0xFF	; 255
    9f36:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9f38:	24 2f       	mov	r18, r20
    9f3a:	21 70       	andi	r18, 0x01	; 1
    9f3c:	40 ff       	sbrs	r20, 0
    9f3e:	04 c0       	rjmp	.+8      	; 0x9f48 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    9f40:	95 2f       	mov	r25, r21
		dx=-1;
    9f42:	ff 24       	eor	r15, r15
    9f44:	fa 94       	dec	r15
    9f46:	03 c0       	rjmp	.+6      	; 0x9f4e <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9f48:	ff 24       	eor	r15, r15
    9f4a:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    9f4c:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    9f4e:	41 ff       	sbrs	r20, 1
    9f50:	05 c0       	rjmp	.+10     	; 0x9f5c <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9f52:	7f ef       	ldi	r23, 0xFF	; 255
    9f54:	76 0f       	add	r23, r22
		dy=-1;
    9f56:	ee 24       	eor	r14, r14
    9f58:	ea 94       	dec	r14
    9f5a:	03 c0       	rjmp	.+6      	; 0x9f62 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    9f5c:	ee 24       	eor	r14, r14
    9f5e:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    9f60:	70 e0       	ldi	r23, 0x00	; 0
    9f62:	21 11       	cpse	r18, r1
    9f64:	01 c0       	rjmp	.+2      	; 0x9f68 <LBMapSprite+0x4c>
    9f66:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9f68:	00 e0       	ldi	r16, 0x00	; 0
    9f6a:	06 17       	cp	r16, r22
    9f6c:	09 f1       	breq	.+66     	; 0x9fb0 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9f6e:	71 03       	mulsu	r23, r17
    9f70:	e0 01       	movw	r28, r0
    9f72:	11 24       	eor	r1, r1
    9f74:	d8 2e       	mov	r13, r24
    9f76:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    9f78:	8d 15       	cp	r24, r13
    9f7a:	b1 f0       	breq	.+44     	; 0x9fa8 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9f7c:	9e 01       	movw	r18, r28
    9f7e:	29 0f       	add	r18, r25
    9f80:	31 1d       	adc	r19, r1
    9f82:	97 fd       	sbrc	r25, 7
    9f84:	3a 95       	dec	r19
    9f86:	2e 5f       	subi	r18, 0xFE	; 254
    9f88:	3f 4f       	sbci	r19, 0xFF	; 255
    9f8a:	fd 01       	movw	r30, r26
    9f8c:	e2 0f       	add	r30, r18
    9f8e:	f3 1f       	adc	r31, r19
    9f90:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    9f92:	34 e0       	ldi	r19, 0x04	; 4
    9f94:	83 9f       	mul	r24, r19
    9f96:	f0 01       	movw	r30, r0
    9f98:	11 24       	eor	r1, r1
    9f9a:	eb 51       	subi	r30, 0x1B	; 27
    9f9c:	f0 4f       	sbci	r31, 0xF0	; 240
    9f9e:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    9fa0:	8f 5f       	subi	r24, 0xFF	; 255
    9fa2:	43 83       	std	Z+3, r20	; 0x03
    9fa4:	9f 0d       	add	r25, r15
    9fa6:	e8 cf       	rjmp	.-48     	; 0x9f78 <LBMapSprite+0x5c>
    9fa8:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9faa:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9fac:	95 2f       	mov	r25, r21
    9fae:	dd cf       	rjmp	.-70     	; 0x9f6a <LBMapSprite+0x4e>
	}
}
    9fb0:	df 91       	pop	r29
    9fb2:	cf 91       	pop	r28
    9fb4:	1f 91       	pop	r17
    9fb6:	0f 91       	pop	r16
    9fb8:	ff 90       	pop	r15
    9fba:	ef 90       	pop	r14
    9fbc:	df 90       	pop	r13
    9fbe:	08 95       	ret

00009fc0 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    9fc0:	df 92       	push	r13
    9fc2:	ef 92       	push	r14
    9fc4:	ff 92       	push	r15
    9fc6:	0f 93       	push	r16
    9fc8:	1f 93       	push	r17
    9fca:	cf 93       	push	r28
    9fcc:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9fce:	a0 91 b4 0c 	lds	r26, 0x0CB4
    9fd2:	98 e0       	ldi	r25, 0x08	; 8
    9fd4:	a9 9f       	mul	r26, r25
    9fd6:	70 01       	movw	r14, r0
    9fd8:	11 24       	eor	r1, r1
    9fda:	50 e0       	ldi	r21, 0x00	; 0
    9fdc:	38 ef       	ldi	r19, 0xF8	; 248
    9fde:	a3 9f       	mul	r26, r19
    9fe0:	30 2d       	mov	r19, r0
    9fe2:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9fe4:	70 e0       	ldi	r23, 0x00	; 0
    9fe6:	70 17       	cp	r23, r16
    9fe8:	09 f1       	breq	.+66     	; 0xa02c <LBMoveSprite+0x6c>
    9fea:	d4 2e       	mov	r13, r20
    9fec:	13 2f       	mov	r17, r19
    9fee:	14 0f       	add	r17, r20
    9ff0:	b8 2f       	mov	r27, r24
    9ff2:	b2 0f       	add	r27, r18
    9ff4:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9ff6:	8b 17       	cp	r24, r27
    9ff8:	a9 f0       	breq	.+42     	; 0xa024 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9ffa:	c4 e0       	ldi	r28, 0x04	; 4
    9ffc:	8c 9f       	mul	r24, r28
    9ffe:	f0 01       	movw	r30, r0
    a000:	11 24       	eor	r1, r1
    a002:	ef 01       	movw	r28, r30
    a004:	cb 51       	subi	r28, 0x1B	; 27
    a006:	d0 4f       	sbci	r29, 0xF0	; 240
    a008:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a00a:	a0 32       	cpi	r26, 0x20	; 32
    a00c:	28 f4       	brcc	.+10     	; 0xa018 <LBMoveSprite+0x58>
    a00e:	e4 16       	cp	r14, r20
    a010:	f5 06       	cpc	r15, r21
    a012:	14 f4       	brge	.+4      	; 0xa018 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a014:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a016:	03 c0       	rjmp	.+6      	; 0xa01e <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a018:	eb 51       	subi	r30, 0x1B	; 27
    a01a:	f0 4f       	sbci	r31, 0xF0	; 240
    a01c:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a01e:	8f 5f       	subi	r24, 0xFF	; 255
    a020:	98 5f       	subi	r25, 0xF8	; 248
    a022:	e9 cf       	rjmp	.-46     	; 0x9ff6 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a024:	7f 5f       	subi	r23, 0xFF	; 255
    a026:	48 5f       	subi	r20, 0xF8	; 248
    a028:	5f 4f       	sbci	r21, 0xFF	; 255
    a02a:	dd cf       	rjmp	.-70     	; 0x9fe6 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a02c:	df 91       	pop	r29
    a02e:	cf 91       	pop	r28
    a030:	1f 91       	pop	r17
    a032:	0f 91       	pop	r16
    a034:	ff 90       	pop	r15
    a036:	ef 90       	pop	r14
    a038:	df 90       	pop	r13
    a03a:	08 95       	ret

0000a03c <LBRotateSprites>:

void LBRotateSprites()
{
    a03c:	80 e0       	ldi	r24, 0x00	; 0
    a03e:	90 e0       	ldi	r25, 0x00	; 0
    a040:	dc 01       	movw	r26, r24
    a042:	ab 51       	subi	r26, 0x1B	; 27
    a044:	b0 4f       	sbci	r27, 0xF0	; 240
    a046:	fc 01       	movw	r30, r24
    a048:	e0 5f       	subi	r30, 0xF0	; 240
    a04a:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a04c:	13 96       	adiw	r26, 0x03	; 3
    a04e:	2c 91       	ld	r18, X
    a050:	13 97       	sbiw	r26, 0x03	; 3
    a052:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a054:	12 96       	adiw	r26, 0x02	; 2
    a056:	2c 91       	ld	r18, X
    a058:	12 97       	sbiw	r26, 0x02	; 2
    a05a:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a05c:	2c 91       	ld	r18, X
    a05e:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a060:	11 96       	adiw	r26, 0x01	; 1
    a062:	2c 91       	ld	r18, X
    a064:	21 83       	std	Z+1, r18	; 0x01
    a066:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a068:	8c 33       	cpi	r24, 0x3C	; 60
    a06a:	91 05       	cpc	r25, r1
    a06c:	49 f7       	brne	.-46     	; 0xa040 <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a06e:	80 91 01 05 	lds	r24, 0x0501
    a072:	94 e0       	ldi	r25, 0x04	; 4
    a074:	89 9f       	mul	r24, r25
    a076:	f0 01       	movw	r30, r0
    a078:	11 24       	eor	r1, r1
    a07a:	eb 51       	subi	r30, 0x1B	; 27
    a07c:	f0 4f       	sbci	r31, 0xF0	; 240
    a07e:	93 81       	ldd	r25, Z+3	; 0x03
    a080:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a084:	92 81       	ldd	r25, Z+2	; 0x02
    a086:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a08a:	90 81       	ld	r25, Z
    a08c:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a090:	91 81       	ldd	r25, Z+1	; 0x01
    a092:	90 93 4d 05 	sts	0x054D, r25
		if (++rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a096:	8f 5f       	subi	r24, 0xFF	; 255
    a098:	84 31       	cpi	r24, 0x14	; 20
    a09a:	08 f0       	brcs	.+2      	; 0xa09e <LBRotateSprites+0x62>
    a09c:	8f e0       	ldi	r24, 0x0F	; 15
    a09e:	80 93 01 05 	sts	0x0501, r24
    a0a2:	08 95       	ret

0000a0a4 <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a0a4:	80 91 cc 0d 	lds	r24, 0x0DCC
}
    a0a8:	81 70       	andi	r24, 0x01	; 1
    a0aa:	08 95       	ret

0000a0ac <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a0ac:	8e e8       	ldi	r24, 0x8E	; 142
    a0ae:	90 e0       	ldi	r25, 0x00	; 0
    a0b0:	90 93 98 0d 	sts	0x0D98, r25
    a0b4:	80 93 97 0d 	sts	0x0D97, r24
    a0b8:	80 e0       	ldi	r24, 0x00	; 0
    a0ba:	90 e0       	ldi	r25, 0x00	; 0
    a0bc:	fc 01       	movw	r30, r24
    a0be:	e3 50       	subi	r30, 0x03	; 3
    a0c0:	fd 4f       	sbci	r31, 0xFD	; 253
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a0c2:	e4 91       	lpm	r30, Z
    a0c4:	dc 01       	movw	r26, r24
    a0c6:	a9 56       	subi	r26, 0x69	; 105
    a0c8:	b2 4f       	sbci	r27, 0xF2	; 242
    a0ca:	12 96       	adiw	r26, 0x02	; 2
    a0cc:	ec 93       	st	X, r30
    a0ce:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a0d0:	8e 31       	cpi	r24, 0x1E	; 30
    a0d2:	91 05       	cpc	r25, r1
    a0d4:	99 f7       	brne	.-26     	; 0xa0bc <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a0d6:	08 95       	ret

0000a0d8 <init_enemy_state>:

void init_enemy_state()
{
    a0d8:	80 e0       	ldi	r24, 0x00	; 0
    a0da:	90 e0       	ldi	r25, 0x00	; 0
    a0dc:	9c 01       	movw	r18, r24
    a0de:	29 54       	subi	r18, 0x49	; 73
    a0e0:	32 4f       	sbci	r19, 0xF2	; 242
    a0e2:	f9 01       	movw	r30, r18
    a0e4:	e0 5e       	subi	r30, 0xE0	; 224
    a0e6:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a0e8:	10 82       	st	Z, r1
    a0ea:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a0ec:	10 82       	st	Z, r1
    a0ee:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a0f0:	89 30       	cpi	r24, 0x09	; 9
    a0f2:	21 e0       	ldi	r18, 0x01	; 1
    a0f4:	92 07       	cpc	r25, r18
    a0f6:	91 f7       	brne	.-28     	; 0xa0dc <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a0f8:	10 92 d2 0d 	sts	0x0DD2, r1
    a0fc:	08 95       	ret

0000a0fe <init_player_shot>:
	shot->active = 0;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    a0fe:	81 11       	cpse	r24, r1
    a100:	3f c0       	rjmp	.+126    	; 0xa180 <init_player_shot+0x82>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a102:	10 92 f1 0d 	sts	0x0DF1, r1
	shot->hit_count = damage;
    a106:	81 e0       	ldi	r24, 0x01	; 1
    a108:	80 93 f2 0d 	sts	0x0DF2, r24
	shot->shot_speed = speed;
    a10c:	90 e5       	ldi	r25, 0x50	; 80
    a10e:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    a112:	10 92 f5 0d 	sts	0x0DF5, r1
	shot->anim.anim_count = 1;
    a116:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    a11a:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    a11e:	2b e8       	ldi	r18, 0x8B	; 139
    a120:	3d e0       	ldi	r19, 0x0D	; 13
    a122:	30 93 fd 0d 	sts	0x0DFD, r19
    a126:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    a12a:	22 e1       	ldi	r18, 0x12	; 18
    a12c:	33 e3       	ldi	r19, 0x33	; 51
    a12e:	30 93 8c 0d 	sts	0x0D8C, r19
    a132:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    a136:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
    a13a:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a13e:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a142:	10 92 05 0e 	sts	0x0E05, r1
	shot->hit_count = damage;
    a146:	80 93 06 0e 	sts	0x0E06, r24
	shot->shot_speed = speed;
    a14a:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    a14e:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a152:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    a156:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    a15a:	41 e4       	ldi	r20, 0x41	; 65
    a15c:	50 e1       	ldi	r21, 0x10	; 16
    a15e:	50 93 11 0e 	sts	0x0E11, r21
    a162:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    a166:	30 93 42 10 	sts	0x1042, r19
    a16a:	20 93 41 10 	sts	0x1041, r18
	shot->shared.vx = speed;
    a16e:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    a172:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a176:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a17a:	10 92 19 0e 	sts	0x0E19, r1
    a17e:	41 c0       	rjmp	.+130    	; 0xa202 <init_player_shot+0x104>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a180:	82 30       	cpi	r24, 0x02	; 2
    a182:	09 f0       	breq	.+2      	; 0xa186 <init_player_shot+0x88>
    a184:	57 c0       	rjmp	.+174    	; 0xa234 <init_player_shot+0x136>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a186:	81 e0       	ldi	r24, 0x01	; 1
    a188:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->hit_count = damage;
    a18c:	80 93 f2 0d 	sts	0x0DF2, r24
	shot->shot_speed = speed;
    a190:	94 e6       	ldi	r25, 0x64	; 100
    a192:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    a196:	10 92 f5 0d 	sts	0x0DF5, r1
	shot->anim.anim_count = 1;
    a19a:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    a19e:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    a1a2:	2b e8       	ldi	r18, 0x8B	; 139
    a1a4:	3d e0       	ldi	r19, 0x0D	; 13
    a1a6:	30 93 fd 0d 	sts	0x0DFD, r19
    a1aa:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    a1ae:	2f e0       	ldi	r18, 0x0F	; 15
    a1b0:	33 e3       	ldi	r19, 0x33	; 51
    a1b2:	30 93 8c 0d 	sts	0x0D8C, r19
    a1b6:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    a1ba:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
    a1be:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1c2:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1c6:	80 93 05 0e 	sts	0x0E05, r24
	shot->hit_count = damage;
    a1ca:	80 93 06 0e 	sts	0x0E06, r24
	shot->shot_speed = speed;
    a1ce:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    a1d2:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a1d6:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    a1da:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    a1de:	41 e4       	ldi	r20, 0x41	; 65
    a1e0:	50 e1       	ldi	r21, 0x10	; 16
    a1e2:	50 93 11 0e 	sts	0x0E11, r21
    a1e6:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    a1ea:	30 93 42 10 	sts	0x1042, r19
    a1ee:	20 93 41 10 	sts	0x1041, r18
	shot->shared.vx = speed;
    a1f2:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    a1f6:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1fa:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1fe:	80 93 19 0e 	sts	0x0E19, r24
	shot->hit_count = damage;
    a202:	80 93 1a 0e 	sts	0x0E1A, r24
	shot->shot_speed = speed;
    a206:	90 93 1c 0e 	sts	0x0E1C, r25
	shot->y_delta = y_delta;
    a20a:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a20e:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.frames_per_anim = 1;
    a212:	80 93 20 0e 	sts	0x0E20, r24
	shot->anim.anims = anim;
    a216:	43 e5       	ldi	r20, 0x53	; 83
    a218:	50 e1       	ldi	r21, 0x10	; 16
    a21a:	50 93 25 0e 	sts	0x0E25, r21
    a21e:	40 93 24 0e 	sts	0x0E24, r20
	shot->anim.anims[0] = (char*) map;
    a222:	30 93 54 10 	sts	0x1054, r19
    a226:	20 93 53 10 	sts	0x1053, r18
	shot->shared.vx = speed;
    a22a:	90 93 17 0e 	sts	0x0E17, r25
	shot->shared.vy = 0;
    a22e:	10 92 16 0e 	sts	0x0E16, r1
    a232:	7f c1       	rjmp	.+766    	; 0xa532 <init_player_shot+0x434>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    a234:	84 30       	cpi	r24, 0x04	; 4
    a236:	09 f0       	breq	.+2      	; 0xa23a <init_player_shot+0x13c>
    a238:	5a c0       	rjmp	.+180    	; 0xa2ee <init_player_shot+0x1f0>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a23a:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->hit_count = damage;
    a23e:	81 e0       	ldi	r24, 0x01	; 1
    a240:	80 93 f2 0d 	sts	0x0DF2, r24
	shot->shot_speed = speed;
    a244:	9f e7       	ldi	r25, 0x7F	; 127
    a246:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    a24a:	28 ef       	ldi	r18, 0xF8	; 248
    a24c:	20 93 f5 0d 	sts	0x0DF5, r18
	shot->anim.anim_count = 1;
    a250:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    a254:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    a258:	2b e8       	ldi	r18, 0x8B	; 139
    a25a:	3d e0       	ldi	r19, 0x0D	; 13
    a25c:	30 93 fd 0d 	sts	0x0DFD, r19
    a260:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    a264:	22 e1       	ldi	r18, 0x12	; 18
    a266:	33 e3       	ldi	r19, 0x33	; 51
    a268:	30 93 8c 0d 	sts	0x0D8C, r19
    a26c:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    a270:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a274:	21 e8       	ldi	r18, 0x81	; 129
    a276:	20 93 ee 0d 	sts	0x0DEE, r18
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a27a:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a27e:	22 e0       	ldi	r18, 0x02	; 2
    a280:	20 93 05 0e 	sts	0x0E05, r18
	shot->hit_count = damage;
    a284:	80 93 06 0e 	sts	0x0E06, r24
	shot->shot_speed = speed;
    a288:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    a28c:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a290:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    a294:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    a298:	41 e4       	ldi	r20, 0x41	; 65
    a29a:	50 e1       	ldi	r21, 0x10	; 16
    a29c:	50 93 11 0e 	sts	0x0E11, r21
    a2a0:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    a2a4:	46 e0       	ldi	r20, 0x06	; 6
    a2a6:	53 e3       	ldi	r21, 0x33	; 51
    a2a8:	50 93 42 10 	sts	0x1042, r21
    a2ac:	40 93 41 10 	sts	0x1041, r20
	shot->shared.vx = speed;
    a2b0:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    a2b4:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a2b8:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2bc:	20 93 19 0e 	sts	0x0E19, r18
	shot->hit_count = damage;
    a2c0:	80 93 1a 0e 	sts	0x0E1A, r24
	shot->shot_speed = speed;
    a2c4:	90 93 1c 0e 	sts	0x0E1C, r25
	shot->y_delta = y_delta;
    a2c8:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a2cc:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.frames_per_anim = 1;
    a2d0:	80 93 20 0e 	sts	0x0E20, r24
	shot->anim.anims = anim;
    a2d4:	63 e5       	ldi	r22, 0x53	; 83
    a2d6:	70 e1       	ldi	r23, 0x10	; 16
    a2d8:	70 93 25 0e 	sts	0x0E25, r23
    a2dc:	60 93 24 0e 	sts	0x0E24, r22
	shot->anim.anims[0] = (char*) map;
    a2e0:	50 93 54 10 	sts	0x1054, r21
    a2e4:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a2e8:	90 93 17 0e 	sts	0x0E17, r25
    a2ec:	5c c0       	rjmp	.+184    	; 0xa3a6 <init_player_shot+0x2a8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a2ee:	86 30       	cpi	r24, 0x06	; 6
    a2f0:	09 f0       	breq	.+2      	; 0xa2f4 <init_player_shot+0x1f6>
    a2f2:	60 c0       	rjmp	.+192    	; 0xa3b4 <init_player_shot+0x2b6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2f4:	33 e0       	ldi	r19, 0x03	; 3
    a2f6:	30 93 f1 0d 	sts	0x0DF1, r19
	shot->hit_count = damage;
    a2fa:	22 e0       	ldi	r18, 0x02	; 2
    a2fc:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->shot_speed = speed;
    a300:	8f e7       	ldi	r24, 0x7F	; 127
    a302:	80 93 f4 0d 	sts	0x0DF4, r24
	shot->y_delta = y_delta;
    a306:	98 ef       	ldi	r25, 0xF8	; 248
    a308:	90 93 f5 0d 	sts	0x0DF5, r25
	shot->anim.anim_count = 1;
    a30c:	91 e0       	ldi	r25, 0x01	; 1
    a30e:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.frames_per_anim = 1;
    a312:	90 93 f8 0d 	sts	0x0DF8, r25
	shot->anim.anims = anim;
    a316:	4b e8       	ldi	r20, 0x8B	; 139
    a318:	5d e0       	ldi	r21, 0x0D	; 13
    a31a:	50 93 fd 0d 	sts	0x0DFD, r21
    a31e:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->anim.anims[0] = (char*) map;
    a322:	45 e1       	ldi	r20, 0x15	; 21
    a324:	53 e3       	ldi	r21, 0x33	; 51
    a326:	50 93 8c 0d 	sts	0x0D8C, r21
    a32a:	40 93 8b 0d 	sts	0x0D8B, r20
	shot->shared.vx = speed;
    a32e:	80 93 ef 0d 	sts	0x0DEF, r24
	shot->shared.vy = 0;
    a332:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a336:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a33a:	20 93 05 0e 	sts	0x0E05, r18
	shot->hit_count = damage;
    a33e:	20 93 06 0e 	sts	0x0E06, r18
	shot->shot_speed = speed;
    a342:	80 93 08 0e 	sts	0x0E08, r24
	shot->y_delta = y_delta;
    a346:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a34a:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.frames_per_anim = 1;
    a34e:	90 93 0c 0e 	sts	0x0E0C, r25
	shot->anim.anims = anim;
    a352:	61 e4       	ldi	r22, 0x41	; 65
    a354:	70 e1       	ldi	r23, 0x10	; 16
    a356:	70 93 11 0e 	sts	0x0E11, r23
    a35a:	60 93 10 0e 	sts	0x0E10, r22
	shot->anim.anims[0] = (char*) map;
    a35e:	66 e0       	ldi	r22, 0x06	; 6
    a360:	73 e3       	ldi	r23, 0x33	; 51
    a362:	70 93 42 10 	sts	0x1042, r23
    a366:	60 93 41 10 	sts	0x1041, r22
	shot->shared.vx = speed;
    a36a:	80 93 03 0e 	sts	0x0E03, r24
	shot->shared.vy = 0;
    a36e:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a372:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a376:	30 93 19 0e 	sts	0x0E19, r19
	shot->hit_count = damage;
    a37a:	20 93 1a 0e 	sts	0x0E1A, r18
	shot->shot_speed = speed;
    a37e:	80 93 1c 0e 	sts	0x0E1C, r24
	shot->y_delta = y_delta;
    a382:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a386:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.frames_per_anim = 1;
    a38a:	90 93 20 0e 	sts	0x0E20, r25
	shot->anim.anims = anim;
    a38e:	63 e5       	ldi	r22, 0x53	; 83
    a390:	70 e1       	ldi	r23, 0x10	; 16
    a392:	70 93 25 0e 	sts	0x0E25, r23
    a396:	60 93 24 0e 	sts	0x0E24, r22
	shot->anim.anims[0] = (char*) map;
    a39a:	50 93 54 10 	sts	0x1054, r21
    a39e:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a3a2:	80 93 17 0e 	sts	0x0E17, r24
	shot->shared.vy = 0;
    a3a6:	10 92 16 0e 	sts	0x0E16, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3aa:	10 92 1b 0e 	sts	0x0E1B, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a3ae:	20 93 e8 0d 	sts	0x0DE8, r18
    a3b2:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a3b4:	88 30       	cpi	r24, 0x08	; 8
    a3b6:	09 f0       	breq	.+2      	; 0xa3ba <init_player_shot+0x2bc>
    a3b8:	60 c0       	rjmp	.+192    	; 0xa47a <init_player_shot+0x37c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3ba:	33 e0       	ldi	r19, 0x03	; 3
    a3bc:	30 93 f1 0d 	sts	0x0DF1, r19
	shot->hit_count = damage;
    a3c0:	62 e0       	ldi	r22, 0x02	; 2
    a3c2:	60 93 f2 0d 	sts	0x0DF2, r22
	shot->shot_speed = speed;
    a3c6:	2f e7       	ldi	r18, 0x7F	; 127
    a3c8:	20 93 f4 0d 	sts	0x0DF4, r18
	shot->y_delta = y_delta;
    a3cc:	98 ef       	ldi	r25, 0xF8	; 248
    a3ce:	90 93 f5 0d 	sts	0x0DF5, r25
	shot->anim.anim_count = 1;
    a3d2:	91 e0       	ldi	r25, 0x01	; 1
    a3d4:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.frames_per_anim = 1;
    a3d8:	90 93 f8 0d 	sts	0x0DF8, r25
	shot->anim.anims = anim;
    a3dc:	4b e8       	ldi	r20, 0x8B	; 139
    a3de:	5d e0       	ldi	r21, 0x0D	; 13
    a3e0:	50 93 fd 0d 	sts	0x0DFD, r21
    a3e4:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->anim.anims[0] = (char*) map;
    a3e8:	45 e1       	ldi	r20, 0x15	; 21
    a3ea:	53 e3       	ldi	r21, 0x33	; 51
    a3ec:	50 93 8c 0d 	sts	0x0D8C, r21
    a3f0:	40 93 8b 0d 	sts	0x0D8B, r20
	shot->shared.vx = speed;
    a3f4:	20 93 ef 0d 	sts	0x0DEF, r18
	shot->shared.vy = 0;
    a3f8:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3fc:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a400:	90 93 05 0e 	sts	0x0E05, r25
	shot->hit_count = damage;
    a404:	90 93 06 0e 	sts	0x0E06, r25
	shot->shot_speed = speed;
    a408:	20 93 08 0e 	sts	0x0E08, r18
	shot->y_delta = y_delta;
    a40c:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a410:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.frames_per_anim = 1;
    a414:	90 93 0c 0e 	sts	0x0E0C, r25
	shot->anim.anims = anim;
    a418:	e1 e4       	ldi	r30, 0x41	; 65
    a41a:	f0 e1       	ldi	r31, 0x10	; 16
    a41c:	f0 93 11 0e 	sts	0x0E11, r31
    a420:	e0 93 10 0e 	sts	0x0E10, r30
	shot->anim.anims[0] = (char*) map;
    a424:	ef e0       	ldi	r30, 0x0F	; 15
    a426:	f3 e3       	ldi	r31, 0x33	; 51
    a428:	f0 93 42 10 	sts	0x1042, r31
    a42c:	e0 93 41 10 	sts	0x1041, r30
	shot->shared.vx = speed;
    a430:	20 93 03 0e 	sts	0x0E03, r18
	shot->shared.vy = 0;
    a434:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a438:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a43c:	30 93 19 0e 	sts	0x0E19, r19
	shot->hit_count = damage;
    a440:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->shot_speed = speed;
    a444:	20 93 1c 0e 	sts	0x0E1C, r18
	shot->y_delta = y_delta;
    a448:	80 93 1d 0e 	sts	0x0E1D, r24
	shot->anim.anim_count = 1;
    a44c:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.frames_per_anim = 1;
    a450:	90 93 20 0e 	sts	0x0E20, r25
	shot->anim.anims = anim;
    a454:	83 e5       	ldi	r24, 0x53	; 83
    a456:	90 e1       	ldi	r25, 0x10	; 16
    a458:	90 93 25 0e 	sts	0x0E25, r25
    a45c:	80 93 24 0e 	sts	0x0E24, r24
	shot->anim.anims[0] = (char*) map;
    a460:	50 93 54 10 	sts	0x1054, r21
    a464:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a468:	20 93 17 0e 	sts	0x0E17, r18
	shot->shared.vy = 0;
    a46c:	10 92 16 0e 	sts	0x0E16, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a470:	10 92 1b 0e 	sts	0x0E1B, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a474:	30 93 e8 0d 	sts	0x0DE8, r19
    a478:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a47a:	55 e0       	ldi	r21, 0x05	; 5
    a47c:	50 93 f1 0d 	sts	0x0DF1, r21
	shot->hit_count = damage;
    a480:	42 e0       	ldi	r20, 0x02	; 2
    a482:	40 93 f2 0d 	sts	0x0DF2, r20
	shot->shot_speed = speed;
    a486:	9f e7       	ldi	r25, 0x7F	; 127
    a488:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    a48c:	10 92 f5 0d 	sts	0x0DF5, r1
	shot->anim.anim_count = 1;
    a490:	81 e0       	ldi	r24, 0x01	; 1
    a492:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    a496:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    a49a:	2b e8       	ldi	r18, 0x8B	; 139
    a49c:	3d e0       	ldi	r19, 0x0D	; 13
    a49e:	30 93 fd 0d 	sts	0x0DFD, r19
    a4a2:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    a4a6:	2c e0       	ldi	r18, 0x0C	; 12
    a4a8:	33 e3       	ldi	r19, 0x33	; 51
    a4aa:	30 93 8c 0d 	sts	0x0D8C, r19
    a4ae:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    a4b2:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
    a4b6:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a4ba:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4be:	50 93 05 0e 	sts	0x0E05, r21
	shot->hit_count = damage;
    a4c2:	40 93 06 0e 	sts	0x0E06, r20
	shot->shot_speed = speed;
    a4c6:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    a4ca:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a4ce:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    a4d2:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    a4d6:	41 e4       	ldi	r20, 0x41	; 65
    a4d8:	50 e1       	ldi	r21, 0x10	; 16
    a4da:	50 93 11 0e 	sts	0x0E11, r21
    a4de:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    a4e2:	30 93 42 10 	sts	0x1042, r19
    a4e6:	20 93 41 10 	sts	0x1041, r18
	shot->shared.vx = speed;
    a4ea:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    a4ee:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a4f2:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4f6:	26 e0       	ldi	r18, 0x06	; 6
    a4f8:	20 93 19 0e 	sts	0x0E19, r18
	shot->hit_count = damage;
    a4fc:	24 e0       	ldi	r18, 0x04	; 4
    a4fe:	20 93 1a 0e 	sts	0x0E1A, r18
	shot->shot_speed = speed;
    a502:	90 93 1c 0e 	sts	0x0E1C, r25
	shot->y_delta = y_delta;
    a506:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a50a:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.frames_per_anim = 1;
    a50e:	80 93 20 0e 	sts	0x0E20, r24
	shot->anim.anims = anim;
    a512:	23 e5       	ldi	r18, 0x53	; 83
    a514:	30 e1       	ldi	r19, 0x10	; 16
    a516:	30 93 25 0e 	sts	0x0E25, r19
    a51a:	20 93 24 0e 	sts	0x0E24, r18
	shot->anim.anims[0] = (char*) map;
    a51e:	29 e0       	ldi	r18, 0x09	; 9
    a520:	33 e3       	ldi	r19, 0x33	; 51
    a522:	30 93 54 10 	sts	0x1054, r19
    a526:	20 93 53 10 	sts	0x1053, r18
	shot->shared.vx = speed;
    a52a:	90 93 17 0e 	sts	0x0E17, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a52e:	90 93 16 0e 	sts	0x0E16, r25
	}
	shot->active = 0;
    a532:	10 92 1b 0e 	sts	0x0E1B, r1
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a536:	80 93 e8 0d 	sts	0x0DE8, r24
    a53a:	08 95       	ret

0000a53c <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a53c:	81 11       	cpse	r24, r1
    a53e:	55 c0       	rjmp	.+170    	; 0xa5ea <init_boss_shot+0xae>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a540:	81 e0       	ldi	r24, 0x01	; 1
    a542:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->hit_count = damage;
    a546:	80 93 6d 0e 	sts	0x0E6D, r24
	shot->shot_speed = speed;
    a54a:	94 e6       	ldi	r25, 0x64	; 100
    a54c:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->y_delta = y_delta;
    a550:	10 92 70 0e 	sts	0x0E70, r1
	shot->anim.anim_count = 1;
    a554:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.frames_per_anim = 1;
    a558:	80 93 73 0e 	sts	0x0E73, r24
	shot->anim.anims = anim;
    a55c:	2b ed       	ldi	r18, 0xDB	; 219
    a55e:	3f e0       	ldi	r19, 0x0F	; 15
    a560:	30 93 78 0e 	sts	0x0E78, r19
    a564:	20 93 77 0e 	sts	0x0E77, r18
	shot->anim.anims[0] = (char*) map;
    a568:	2f e0       	ldi	r18, 0x0F	; 15
    a56a:	33 e3       	ldi	r19, 0x33	; 51
    a56c:	30 93 dc 0f 	sts	0x0FDC, r19
    a570:	20 93 db 0f 	sts	0x0FDB, r18
	shot->shared.vx = speed;
    a574:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->shared.vy = 0;
    a578:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a57c:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a580:	80 93 80 0e 	sts	0x0E80, r24
	shot->hit_count = damage;
    a584:	80 93 81 0e 	sts	0x0E81, r24
	shot->shot_speed = speed;
    a588:	90 93 83 0e 	sts	0x0E83, r25
	shot->y_delta = y_delta;
    a58c:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a590:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.frames_per_anim = 1;
    a594:	80 93 87 0e 	sts	0x0E87, r24
	shot->anim.anims = anim;
    a598:	47 e5       	ldi	r20, 0x57	; 87
    a59a:	50 e1       	ldi	r21, 0x10	; 16
    a59c:	50 93 8c 0e 	sts	0x0E8C, r21
    a5a0:	40 93 8b 0e 	sts	0x0E8B, r20
	shot->anim.anims[0] = (char*) map;
    a5a4:	30 93 58 10 	sts	0x1058, r19
    a5a8:	20 93 57 10 	sts	0x1057, r18
	shot->shared.vx = speed;
    a5ac:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->shared.vy = 0;
    a5b0:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a5b4:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5b8:	80 93 94 0e 	sts	0x0E94, r24
	shot->hit_count = damage;
    a5bc:	80 93 95 0e 	sts	0x0E95, r24
	shot->shot_speed = speed;
    a5c0:	90 93 97 0e 	sts	0x0E97, r25
	shot->y_delta = y_delta;
    a5c4:	10 92 98 0e 	sts	0x0E98, r1
	shot->anim.anim_count = 1;
    a5c8:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.frames_per_anim = 1;
    a5cc:	80 93 9b 0e 	sts	0x0E9B, r24
	shot->anim.anims = anim;
    a5d0:	47 e3       	ldi	r20, 0x37	; 55
    a5d2:	50 e1       	ldi	r21, 0x10	; 16
    a5d4:	50 93 a0 0e 	sts	0x0EA0, r21
    a5d8:	40 93 9f 0e 	sts	0x0E9F, r20
	shot->anim.anims[0] = (char*) map;
    a5dc:	30 93 38 10 	sts	0x1038, r19
    a5e0:	20 93 37 10 	sts	0x1037, r18
	shot->shared.vx = speed;
    a5e4:	90 93 92 0e 	sts	0x0E92, r25
    a5e8:	5c c0       	rjmp	.+184    	; 0xa6a2 <init_boss_shot+0x166>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a5ea:	82 30       	cpi	r24, 0x02	; 2
    a5ec:	09 f0       	breq	.+2      	; 0xa5f0 <init_boss_shot+0xb4>
    a5ee:	5e c0       	rjmp	.+188    	; 0xa6ac <init_boss_shot+0x170>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5f0:	94 e0       	ldi	r25, 0x04	; 4
    a5f2:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->hit_count = damage;
    a5f6:	91 e0       	ldi	r25, 0x01	; 1
    a5f8:	90 93 6d 0e 	sts	0x0E6D, r25
	shot->shot_speed = speed;
    a5fc:	2f e7       	ldi	r18, 0x7F	; 127
    a5fe:	20 93 6f 0e 	sts	0x0E6F, r18
	shot->y_delta = y_delta;
    a602:	38 ef       	ldi	r19, 0xF8	; 248
    a604:	30 93 70 0e 	sts	0x0E70, r19
	shot->anim.anim_count = 1;
    a608:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.frames_per_anim = 1;
    a60c:	90 93 73 0e 	sts	0x0E73, r25
	shot->anim.anims = anim;
    a610:	4b ed       	ldi	r20, 0xDB	; 219
    a612:	5f e0       	ldi	r21, 0x0F	; 15
    a614:	50 93 78 0e 	sts	0x0E78, r21
    a618:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a61c:	42 e1       	ldi	r20, 0x12	; 18
    a61e:	53 e3       	ldi	r21, 0x33	; 51
    a620:	50 93 dc 0f 	sts	0x0FDC, r21
    a624:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a628:	20 93 6a 0e 	sts	0x0E6A, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a62c:	31 e8       	ldi	r19, 0x81	; 129
    a62e:	30 93 69 0e 	sts	0x0E69, r19
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a632:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a636:	80 93 80 0e 	sts	0x0E80, r24
	shot->hit_count = damage;
    a63a:	90 93 81 0e 	sts	0x0E81, r25
	shot->shot_speed = speed;
    a63e:	20 93 83 0e 	sts	0x0E83, r18
	shot->y_delta = y_delta;
    a642:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a646:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.frames_per_anim = 1;
    a64a:	90 93 87 0e 	sts	0x0E87, r25
	shot->anim.anims = anim;
    a64e:	47 e5       	ldi	r20, 0x57	; 87
    a650:	50 e1       	ldi	r21, 0x10	; 16
    a652:	50 93 8c 0e 	sts	0x0E8C, r21
    a656:	40 93 8b 0e 	sts	0x0E8B, r20
	shot->anim.anims[0] = (char*) map;
    a65a:	46 e0       	ldi	r20, 0x06	; 6
    a65c:	53 e3       	ldi	r21, 0x33	; 51
    a65e:	50 93 58 10 	sts	0x1058, r21
    a662:	40 93 57 10 	sts	0x1057, r20
	shot->shared.vx = speed;
    a666:	20 93 7e 0e 	sts	0x0E7E, r18
	shot->shared.vy = 0;
    a66a:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a66e:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a672:	80 93 94 0e 	sts	0x0E94, r24
	shot->hit_count = damage;
    a676:	90 93 95 0e 	sts	0x0E95, r25
	shot->shot_speed = speed;
    a67a:	20 93 97 0e 	sts	0x0E97, r18
	shot->y_delta = y_delta;
    a67e:	10 92 98 0e 	sts	0x0E98, r1
	shot->anim.anim_count = 1;
    a682:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.frames_per_anim = 1;
    a686:	90 93 9b 0e 	sts	0x0E9B, r25
	shot->anim.anims = anim;
    a68a:	67 e3       	ldi	r22, 0x37	; 55
    a68c:	70 e1       	ldi	r23, 0x10	; 16
    a68e:	70 93 a0 0e 	sts	0x0EA0, r23
    a692:	60 93 9f 0e 	sts	0x0E9F, r22
	shot->anim.anims[0] = (char*) map;
    a696:	50 93 38 10 	sts	0x1038, r21
    a69a:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a69e:	20 93 92 0e 	sts	0x0E92, r18
	shot->shared.vy = 0;
    a6a2:	10 92 91 0e 	sts	0x0E91, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a6a6:	10 92 96 0e 	sts	0x0E96, r1
    a6aa:	20 c1       	rjmp	.+576    	; 0xa8ec <init_boss_shot+0x3b0>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    a6ac:	84 30       	cpi	r24, 0x04	; 4
    a6ae:	09 f0       	breq	.+2      	; 0xa6b2 <init_boss_shot+0x176>
    a6b0:	5a c0       	rjmp	.+180    	; 0xa766 <init_boss_shot+0x22a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6b2:	33 e0       	ldi	r19, 0x03	; 3
    a6b4:	30 93 6c 0e 	sts	0x0E6C, r19
	shot->hit_count = damage;
    a6b8:	22 e0       	ldi	r18, 0x02	; 2
    a6ba:	20 93 6d 0e 	sts	0x0E6D, r18
	shot->shot_speed = speed;
    a6be:	8f e7       	ldi	r24, 0x7F	; 127
    a6c0:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->y_delta = y_delta;
    a6c4:	98 ef       	ldi	r25, 0xF8	; 248
    a6c6:	90 93 70 0e 	sts	0x0E70, r25
	shot->anim.anim_count = 1;
    a6ca:	91 e0       	ldi	r25, 0x01	; 1
    a6cc:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.frames_per_anim = 1;
    a6d0:	90 93 73 0e 	sts	0x0E73, r25
	shot->anim.anims = anim;
    a6d4:	4b ed       	ldi	r20, 0xDB	; 219
    a6d6:	5f e0       	ldi	r21, 0x0F	; 15
    a6d8:	50 93 78 0e 	sts	0x0E78, r21
    a6dc:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a6e0:	45 e1       	ldi	r20, 0x15	; 21
    a6e2:	53 e3       	ldi	r21, 0x33	; 51
    a6e4:	50 93 dc 0f 	sts	0x0FDC, r21
    a6e8:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a6ec:	80 93 6a 0e 	sts	0x0E6A, r24
	shot->shared.vy = 0;
    a6f0:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a6f4:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6f8:	20 93 80 0e 	sts	0x0E80, r18
	shot->hit_count = damage;
    a6fc:	20 93 81 0e 	sts	0x0E81, r18
	shot->shot_speed = speed;
    a700:	80 93 83 0e 	sts	0x0E83, r24
	shot->y_delta = y_delta;
    a704:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a708:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.frames_per_anim = 1;
    a70c:	90 93 87 0e 	sts	0x0E87, r25
	shot->anim.anims = anim;
    a710:	67 e5       	ldi	r22, 0x57	; 87
    a712:	70 e1       	ldi	r23, 0x10	; 16
    a714:	70 93 8c 0e 	sts	0x0E8C, r23
    a718:	60 93 8b 0e 	sts	0x0E8B, r22
	shot->anim.anims[0] = (char*) map;
    a71c:	66 e0       	ldi	r22, 0x06	; 6
    a71e:	73 e3       	ldi	r23, 0x33	; 51
    a720:	70 93 58 10 	sts	0x1058, r23
    a724:	60 93 57 10 	sts	0x1057, r22
	shot->shared.vx = speed;
    a728:	80 93 7e 0e 	sts	0x0E7E, r24
	shot->shared.vy = 0;
    a72c:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a730:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a734:	30 93 94 0e 	sts	0x0E94, r19
	shot->hit_count = damage;
    a738:	20 93 95 0e 	sts	0x0E95, r18
	shot->shot_speed = speed;
    a73c:	80 93 97 0e 	sts	0x0E97, r24
	shot->y_delta = y_delta;
    a740:	10 92 98 0e 	sts	0x0E98, r1
	shot->anim.anim_count = 1;
    a744:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.frames_per_anim = 1;
    a748:	90 93 9b 0e 	sts	0x0E9B, r25
	shot->anim.anims = anim;
    a74c:	67 e3       	ldi	r22, 0x37	; 55
    a74e:	70 e1       	ldi	r23, 0x10	; 16
    a750:	70 93 a0 0e 	sts	0x0EA0, r23
    a754:	60 93 9f 0e 	sts	0x0E9F, r22
	shot->anim.anims[0] = (char*) map;
    a758:	50 93 38 10 	sts	0x1038, r21
    a75c:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a760:	80 93 92 0e 	sts	0x0E92, r24
    a764:	5d c0       	rjmp	.+186    	; 0xa820 <init_boss_shot+0x2e4>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    a766:	86 30       	cpi	r24, 0x06	; 6
    a768:	09 f0       	breq	.+2      	; 0xa76c <init_boss_shot+0x230>
    a76a:	61 c0       	rjmp	.+194    	; 0xa82e <init_boss_shot+0x2f2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a76c:	23 e0       	ldi	r18, 0x03	; 3
    a76e:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->hit_count = damage;
    a772:	32 e0       	ldi	r19, 0x02	; 2
    a774:	30 93 6d 0e 	sts	0x0E6D, r19
	shot->shot_speed = speed;
    a778:	9f e7       	ldi	r25, 0x7F	; 127
    a77a:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->y_delta = y_delta;
    a77e:	88 ef       	ldi	r24, 0xF8	; 248
    a780:	80 93 70 0e 	sts	0x0E70, r24
	shot->anim.anim_count = 1;
    a784:	81 e0       	ldi	r24, 0x01	; 1
    a786:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.frames_per_anim = 1;
    a78a:	80 93 73 0e 	sts	0x0E73, r24
	shot->anim.anims = anim;
    a78e:	4b ed       	ldi	r20, 0xDB	; 219
    a790:	5f e0       	ldi	r21, 0x0F	; 15
    a792:	50 93 78 0e 	sts	0x0E78, r21
    a796:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a79a:	45 e1       	ldi	r20, 0x15	; 21
    a79c:	53 e3       	ldi	r21, 0x33	; 51
    a79e:	50 93 dc 0f 	sts	0x0FDC, r21
    a7a2:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a7a6:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->shared.vy = 0;
    a7aa:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a7ae:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7b2:	80 93 80 0e 	sts	0x0E80, r24
	shot->hit_count = damage;
    a7b6:	80 93 81 0e 	sts	0x0E81, r24
	shot->shot_speed = speed;
    a7ba:	90 93 83 0e 	sts	0x0E83, r25
	shot->y_delta = y_delta;
    a7be:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a7c2:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.frames_per_anim = 1;
    a7c6:	80 93 87 0e 	sts	0x0E87, r24
	shot->anim.anims = anim;
    a7ca:	67 e5       	ldi	r22, 0x57	; 87
    a7cc:	70 e1       	ldi	r23, 0x10	; 16
    a7ce:	70 93 8c 0e 	sts	0x0E8C, r23
    a7d2:	60 93 8b 0e 	sts	0x0E8B, r22
	shot->anim.anims[0] = (char*) map;
    a7d6:	6f e0       	ldi	r22, 0x0F	; 15
    a7d8:	73 e3       	ldi	r23, 0x33	; 51
    a7da:	70 93 58 10 	sts	0x1058, r23
    a7de:	60 93 57 10 	sts	0x1057, r22
	shot->shared.vx = speed;
    a7e2:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->shared.vy = 0;
    a7e6:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a7ea:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7ee:	20 93 94 0e 	sts	0x0E94, r18
	shot->hit_count = damage;
    a7f2:	30 93 95 0e 	sts	0x0E95, r19
	shot->shot_speed = speed;
    a7f6:	90 93 97 0e 	sts	0x0E97, r25
	shot->y_delta = y_delta;
    a7fa:	38 e0       	ldi	r19, 0x08	; 8
    a7fc:	30 93 98 0e 	sts	0x0E98, r19
	shot->anim.anim_count = 1;
    a800:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.frames_per_anim = 1;
    a804:	80 93 9b 0e 	sts	0x0E9B, r24
	shot->anim.anims = anim;
    a808:	67 e3       	ldi	r22, 0x37	; 55
    a80a:	70 e1       	ldi	r23, 0x10	; 16
    a80c:	70 93 a0 0e 	sts	0x0EA0, r23
    a810:	60 93 9f 0e 	sts	0x0E9F, r22
	shot->anim.anims[0] = (char*) map;
    a814:	50 93 38 10 	sts	0x1038, r21
    a818:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a81c:	90 93 92 0e 	sts	0x0E92, r25
	shot->shared.vy = 0;
    a820:	10 92 91 0e 	sts	0x0E91, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a824:	10 92 96 0e 	sts	0x0E96, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a828:	20 93 63 0e 	sts	0x0E63, r18
    a82c:	08 95       	ret
	}
	else if (level == 8) // Dessert
    a82e:	88 30       	cpi	r24, 0x08	; 8
    a830:	09 f0       	breq	.+2      	; 0xa834 <init_boss_shot+0x2f8>
    a832:	5e c0       	rjmp	.+188    	; 0xa8f0 <init_boss_shot+0x3b4>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a834:	22 e0       	ldi	r18, 0x02	; 2
    a836:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->hit_count = damage;
    a83a:	20 93 6d 0e 	sts	0x0E6D, r18
	shot->shot_speed = speed;
    a83e:	3f e7       	ldi	r19, 0x7F	; 127
    a840:	30 93 6f 0e 	sts	0x0E6F, r19
	shot->y_delta = y_delta;
    a844:	98 ef       	ldi	r25, 0xF8	; 248
    a846:	90 93 70 0e 	sts	0x0E70, r25
	shot->anim.anim_count = 1;
    a84a:	91 e0       	ldi	r25, 0x01	; 1
    a84c:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.frames_per_anim = 1;
    a850:	90 93 73 0e 	sts	0x0E73, r25
	shot->anim.anims = anim;
    a854:	4b ed       	ldi	r20, 0xDB	; 219
    a856:	5f e0       	ldi	r21, 0x0F	; 15
    a858:	50 93 78 0e 	sts	0x0E78, r21
    a85c:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a860:	46 e0       	ldi	r20, 0x06	; 6
    a862:	53 e3       	ldi	r21, 0x33	; 51
    a864:	50 93 dc 0f 	sts	0x0FDC, r21
    a868:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a86c:	30 93 6a 0e 	sts	0x0E6A, r19
	shot->shared.vy = 0;
    a870:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a874:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a878:	20 93 80 0e 	sts	0x0E80, r18
	shot->hit_count = damage;
    a87c:	90 93 81 0e 	sts	0x0E81, r25
	shot->shot_speed = speed;
    a880:	64 e6       	ldi	r22, 0x64	; 100
    a882:	60 93 83 0e 	sts	0x0E83, r22
	shot->y_delta = y_delta;
    a886:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a88a:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.frames_per_anim = 1;
    a88e:	90 93 87 0e 	sts	0x0E87, r25
	shot->anim.anims = anim;
    a892:	e7 e5       	ldi	r30, 0x57	; 87
    a894:	f0 e1       	ldi	r31, 0x10	; 16
    a896:	f0 93 8c 0e 	sts	0x0E8C, r31
    a89a:	e0 93 8b 0e 	sts	0x0E8B, r30
	shot->anim.anims[0] = (char*) map;
    a89e:	50 93 58 10 	sts	0x1058, r21
    a8a2:	40 93 57 10 	sts	0x1057, r20
	shot->shared.vx = speed;
    a8a6:	60 93 7e 0e 	sts	0x0E7E, r22
	shot->shared.vy = 0;
    a8aa:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a8ae:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a8b2:	20 93 94 0e 	sts	0x0E94, r18
	shot->hit_count = damage;
    a8b6:	20 93 95 0e 	sts	0x0E95, r18
	shot->shot_speed = speed;
    a8ba:	30 93 97 0e 	sts	0x0E97, r19
	shot->y_delta = y_delta;
    a8be:	80 93 98 0e 	sts	0x0E98, r24
	shot->anim.anim_count = 1;
    a8c2:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.frames_per_anim = 1;
    a8c6:	90 93 9b 0e 	sts	0x0E9B, r25
	shot->anim.anims = anim;
    a8ca:	87 e3       	ldi	r24, 0x37	; 55
    a8cc:	90 e1       	ldi	r25, 0x10	; 16
    a8ce:	90 93 a0 0e 	sts	0x0EA0, r25
    a8d2:	80 93 9f 0e 	sts	0x0E9F, r24
	shot->anim.anims[0] = (char*) map;
    a8d6:	50 93 38 10 	sts	0x1038, r21
    a8da:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a8de:	30 93 92 0e 	sts	0x0E92, r19
	shot->shared.vy = 0;
    a8e2:	10 92 91 0e 	sts	0x0E91, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a8e6:	10 92 96 0e 	sts	0x0E96, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a8ea:	83 e0       	ldi	r24, 0x03	; 3
    a8ec:	80 93 63 0e 	sts	0x0E63, r24
    a8f0:	08 95       	ret

0000a8f2 <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a8f2:	10 92 ce 0e 	sts	0x0ECE, r1
    a8f6:	10 92 cd 0e 	sts	0x0ECD, r1
	p->pressed = 0;
    a8fa:	10 92 ca 0e 	sts	0x0ECA, r1
    a8fe:	10 92 c9 0e 	sts	0x0EC9, r1
	p->released = 0;
    a902:	10 92 cc 0e 	sts	0x0ECC, r1
    a906:	10 92 cb 0e 	sts	0x0ECB, r1
	p->held_cycles = 0;
    a90a:	10 92 cf 0e 	sts	0x0ECF, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	game.boss.width = 2;
    a90e:	82 e0       	ldi	r24, 0x02	; 2
    a910:	80 93 60 0e 	sts	0x0E60, r24
	game.boss.height = 3;
    a914:	93 e0       	ldi	r25, 0x03	; 3
    a916:	90 93 61 0e 	sts	0x0E61, r25
	game.boss.run.anim_count = 4;
    a91a:	84 e0       	ldi	r24, 0x04	; 4
    a91c:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a920:	8c e0       	ldi	r24, 0x0C	; 12
    a922:	80 93 ab 0e 	sts	0x0EAB, r24
	game.boss.run.anims = boss_run_anim;
    a926:	ed e8       	ldi	r30, 0x8D	; 141
    a928:	fd e0       	ldi	r31, 0x0D	; 13
    a92a:	f0 93 b0 0e 	sts	0x0EB0, r31
    a92e:	e0 93 af 0e 	sts	0x0EAF, r30
	game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a932:	26 ef       	ldi	r18, 0xF6	; 246
    a934:	32 e3       	ldi	r19, 0x32	; 50
    a936:	31 83       	std	Z+1, r19	; 0x01
    a938:	20 83       	st	Z, r18
	game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a93a:	2e ee       	ldi	r18, 0xEE	; 238
    a93c:	32 e3       	ldi	r19, 0x32	; 50
    a93e:	33 83       	std	Z+3, r19	; 0x03
    a940:	22 83       	std	Z+2, r18	; 0x02
	game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a942:	26 ee       	ldi	r18, 0xE6	; 230
    a944:	32 e3       	ldi	r19, 0x32	; 50
    a946:	35 83       	std	Z+5, r19	; 0x05
    a948:	24 83       	std	Z+4, r18	; 0x04
	game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a94a:	2e ed       	ldi	r18, 0xDE	; 222
    a94c:	32 e3       	ldi	r19, 0x32	; 50
    a94e:	37 83       	std	Z+7, r19	; 0x07
    a950:	26 83       	std	Z+6, r18	; 0x06
	game.boss.active_shots = 0;
    a952:	10 92 5c 0e 	sts	0x0E5C, r1
	game.boss.shared.vx = 0;
    a956:	10 92 5a 0e 	sts	0x0E5A, r1
	game.boss.shared.vy = 0;
    a95a:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.shared.gravity = 0;
    a95e:	10 92 5b 0e 	sts	0x0E5B, r1
	game.boss.active = 0;
    a962:	10 92 62 0e 	sts	0x0E62, r1
	game.boss.direction = D_LEFT;
    a966:	10 92 5f 0e 	sts	0x0E5F, r1
	game.boss.flags = IDLE;
    a96a:	88 e0       	ldi	r24, 0x08	; 8
    a96c:	80 93 5d 0e 	sts	0x0E5D, r24
	game.boss.ai_flags = AI_NOT_READY;
    a970:	10 92 5e 0e 	sts	0x0E5E, r1
	game.boss.shield = BOSS_SHIELD;
    a974:	8e e1       	ldi	r24, 0x1E	; 30
    a976:	80 93 64 0e 	sts	0x0E64, r24
	game.boss.idle.anim_count = 1;
    a97a:	81 e0       	ldi	r24, 0x01	; 1
    a97c:	80 93 a2 0e 	sts	0x0EA2, r24
	game.boss.idle.frames_per_anim = 1;
    a980:	80 93 a3 0e 	sts	0x0EA3, r24
	game.boss.idle.anims = boss_idle_anim;
    a984:	e5 e5       	ldi	r30, 0x55	; 85
    a986:	f0 e1       	ldi	r31, 0x10	; 16
    a988:	f0 93 a8 0e 	sts	0x0EA8, r31
    a98c:	e0 93 a7 0e 	sts	0x0EA7, r30
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a990:	2e ef       	ldi	r18, 0xFE	; 254
    a992:	32 e3       	ldi	r19, 0x32	; 50
    a994:	31 83       	std	Z+1, r19	; 0x01
    a996:	20 83       	st	Z, r18
	
	game.boss.jump.anim_count = 1;
    a998:	80 93 b2 0e 	sts	0x0EB2, r24
	game.boss.jump.frames_per_anim = 1;
    a99c:	80 93 b3 0e 	sts	0x0EB3, r24
	game.boss.jump.anims = boss_jump_anim;
    a9a0:	e3 e4       	ldi	r30, 0x43	; 67
    a9a2:	f0 e1       	ldi	r31, 0x10	; 16
    a9a4:	f0 93 b8 0e 	sts	0x0EB8, r31
    a9a8:	e0 93 b7 0e 	sts	0x0EB7, r30
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a9ac:	21 ed       	ldi	r18, 0xD1	; 209
    a9ae:	32 e3       	ldi	r19, 0x32	; 50
    a9b0:	31 83       	std	Z+1, r19	; 0x01
    a9b2:	20 83       	st	Z, r18
	
	game.boss.prone.anim_count = 1;
    a9b4:	80 93 ba 0e 	sts	0x0EBA, r24
	game.boss.prone.frames_per_anim = 1;
    a9b8:	80 93 bb 0e 	sts	0x0EBB, r24
	game.boss.prone.anims = boss_prone_anim;
    a9bc:	e1 e5       	ldi	r30, 0x51	; 81
    a9be:	f0 e1       	ldi	r31, 0x10	; 16
    a9c0:	f0 93 c0 0e 	sts	0x0EC0, r31
    a9c4:	e0 93 bf 0e 	sts	0x0EBF, r30
	game.boss.prone.anims[0] = (char*) map_ahero_prone;
    a9c8:	29 ed       	ldi	r18, 0xD9	; 217
    a9ca:	32 e3       	ldi	r19, 0x32	; 50
    a9cc:	31 83       	std	Z+1, r19	; 0x01
    a9ce:	20 83       	st	Z, r18
	
	game.boss.expl.anim_count = 3;
    a9d0:	90 93 c2 0e 	sts	0x0EC2, r25
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a9d4:	85 e0       	ldi	r24, 0x05	; 5
    a9d6:	80 93 c3 0e 	sts	0x0EC3, r24
	game.boss.expl.anims = expl_anim;
    a9da:	eb e4       	ldi	r30, 0x4B	; 75
    a9dc:	f0 e1       	ldi	r31, 0x10	; 16
    a9de:	f0 93 c8 0e 	sts	0x0EC8, r31
    a9e2:	e0 93 c7 0e 	sts	0x0EC7, r30
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a9e6:	80 e8       	ldi	r24, 0x80	; 128
    a9e8:	93 e3       	ldi	r25, 0x33	; 51
    a9ea:	91 83       	std	Z+1, r25	; 0x01
    a9ec:	80 83       	st	Z, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a9ee:	8d e7       	ldi	r24, 0x7D	; 125
    a9f0:	93 e3       	ldi	r25, 0x33	; 51
    a9f2:	93 83       	std	Z+3, r25	; 0x03
    a9f4:	82 83       	std	Z+2, r24	; 0x02
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a9f6:	8a e7       	ldi	r24, 0x7A	; 122
    a9f8:	93 e3       	ldi	r25, 0x33	; 51
    a9fa:	95 83       	std	Z+5, r25	; 0x05
    a9fc:	84 83       	std	Z+4, r24	; 0x04
	
	init_boss_shot(game.current_level_index);
    a9fe:	80 91 cc 0d 	lds	r24, 0x0DCC
    aa02:	0c 94 9e 52 	jmp	0xa53c	; 0xa53c <init_boss_shot>

0000aa06 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    aa06:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    aa0a:	88 23       	and	r24, r24
    aa0c:	f9 f0       	breq	.+62     	; 0xaa4c <init_player_state+0x46>
	{
		game.player.width = 3;
    aa0e:	83 e0       	ldi	r24, 0x03	; 3
    aa10:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.height = 1;
    aa14:	81 e0       	ldi	r24, 0x01	; 1
    aa16:	80 93 e6 0d 	sts	0x0DE6, r24
		game.player.run.anim_count = 2;
    aa1a:	82 e0       	ldi	r24, 0x02	; 2
    aa1c:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    aa20:	85 e0       	ldi	r24, 0x05	; 5
    aa22:	80 93 30 0e 	sts	0x0E30, r24
		game.player.run.anims = run_anim;
    aa26:	89 e3       	ldi	r24, 0x39	; 57
    aa28:	90 e1       	ldi	r25, 0x10	; 16
    aa2a:	90 93 35 0e 	sts	0x0E35, r25
    aa2e:	80 93 34 0e 	sts	0x0E34, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    aa32:	81 e3       	ldi	r24, 0x31	; 49
    aa34:	93 e3       	ldi	r25, 0x33	; 51
    aa36:	90 93 3a 10 	sts	0x103A, r25
    aa3a:	80 93 39 10 	sts	0x1039, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    aa3e:	8c e2       	ldi	r24, 0x2C	; 44
    aa40:	93 e3       	ldi	r25, 0x33	; 51
    aa42:	90 93 3c 10 	sts	0x103C, r25
    aa46:	80 93 3b 10 	sts	0x103B, r24
    aa4a:	2a c0       	rjmp	.+84     	; 0xaaa0 <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    aa4c:	82 e0       	ldi	r24, 0x02	; 2
    aa4e:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.height = 3;
    aa52:	83 e0       	ldi	r24, 0x03	; 3
    aa54:	80 93 e6 0d 	sts	0x0DE6, r24
		game.player.run.anim_count = 4;
    aa58:	84 e0       	ldi	r24, 0x04	; 4
    aa5a:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    aa5e:	8c e0       	ldi	r24, 0x0C	; 12
    aa60:	80 93 30 0e 	sts	0x0E30, r24
		game.player.run.anims = run_anim;
    aa64:	89 e3       	ldi	r24, 0x39	; 57
    aa66:	90 e1       	ldi	r25, 0x10	; 16
    aa68:	90 93 35 0e 	sts	0x0E35, r25
    aa6c:	80 93 34 0e 	sts	0x0E34, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    aa70:	8b e5       	ldi	r24, 0x5B	; 91
    aa72:	93 e3       	ldi	r25, 0x33	; 51
    aa74:	90 93 3a 10 	sts	0x103A, r25
    aa78:	80 93 39 10 	sts	0x1039, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    aa7c:	83 e5       	ldi	r24, 0x53	; 83
    aa7e:	93 e3       	ldi	r25, 0x33	; 51
    aa80:	90 93 3c 10 	sts	0x103C, r25
    aa84:	80 93 3b 10 	sts	0x103B, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    aa88:	8b e4       	ldi	r24, 0x4B	; 75
    aa8a:	93 e3       	ldi	r25, 0x33	; 51
    aa8c:	90 93 3e 10 	sts	0x103E, r25
    aa90:	80 93 3d 10 	sts	0x103D, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    aa94:	83 e4       	ldi	r24, 0x43	; 67
    aa96:	93 e3       	ldi	r25, 0x33	; 51
    aa98:	90 93 40 10 	sts	0x1040, r25
    aa9c:	80 93 3f 10 	sts	0x103F, r24
	}
	game.player.shared.vx = 0;
    aaa0:	10 92 df 0d 	sts	0x0DDF, r1
	game.player.shared.vy = 0;
    aaa4:	10 92 de 0d 	sts	0x0DDE, r1
	game.player.shared.gravity = 0;
    aaa8:	10 92 e0 0d 	sts	0x0DE0, r1
	game.player.active_shots = 0;
    aaac:	10 92 e1 0d 	sts	0x0DE1, r1
	game.player.active = 1;
    aab0:	81 e0       	ldi	r24, 0x01	; 1
    aab2:	80 93 e7 0d 	sts	0x0DE7, r24
	game.player.direction = D_RIGHT;
    aab6:	80 93 e4 0d 	sts	0x0DE4, r24
	game.player.flags = IDLE;
    aaba:	98 e0       	ldi	r25, 0x08	; 8
    aabc:	90 93 e2 0d 	sts	0x0DE2, r25
	game.player.ai_flags = AI_NOT_READY;
    aac0:	10 92 e3 0d 	sts	0x0DE3, r1
	game.player.shield = PLAYER_SHIELD;
    aac4:	9f e0       	ldi	r25, 0x0F	; 15
    aac6:	90 93 e9 0d 	sts	0x0DE9, r25
	game.player.idle.anim_count = 1;
    aaca:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.frames_per_anim = 1;
    aace:	80 93 28 0e 	sts	0x0E28, r24
	game.player.idle.anims = idle_anim;
    aad2:	2d e5       	ldi	r18, 0x5D	; 93
    aad4:	30 e1       	ldi	r19, 0x10	; 16
    aad6:	30 93 2d 0e 	sts	0x0E2D, r19
    aada:	20 93 2c 0e 	sts	0x0E2C, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    aade:	23 e6       	ldi	r18, 0x63	; 99
    aae0:	33 e3       	ldi	r19, 0x33	; 51
    aae2:	30 93 5e 10 	sts	0x105E, r19
    aae6:	20 93 5d 10 	sts	0x105D, r18
	
	game.player.jump.anim_count = 1;
    aaea:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.frames_per_anim = 1;
    aaee:	80 93 38 0e 	sts	0x0E38, r24
	game.player.jump.anims = jump_anim;
    aaf2:	25 e9       	ldi	r18, 0x95	; 149
    aaf4:	3d e0       	ldi	r19, 0x0D	; 13
    aaf6:	30 93 3d 0e 	sts	0x0E3D, r19
    aafa:	20 93 3c 0e 	sts	0x0E3C, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    aafe:	2b e3       	ldi	r18, 0x3B	; 59
    ab00:	33 e3       	ldi	r19, 0x33	; 51
    ab02:	30 93 96 0d 	sts	0x0D96, r19
    ab06:	20 93 95 0d 	sts	0x0D95, r18
	
	game.player.prone.anim_count = 1;
    ab0a:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.frames_per_anim = 1;
    ab0e:	80 93 40 0e 	sts	0x0E40, r24
	game.player.prone.anims = prone_anim;
    ab12:	8d ed       	ldi	r24, 0xDD	; 221
    ab14:	9f e0       	ldi	r25, 0x0F	; 15
    ab16:	90 93 45 0e 	sts	0x0E45, r25
    ab1a:	80 93 44 0e 	sts	0x0E44, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    ab1e:	86 e3       	ldi	r24, 0x36	; 54
    ab20:	93 e3       	ldi	r25, 0x33	; 51
    ab22:	90 93 de 0f 	sts	0x0FDE, r25
    ab26:	80 93 dd 0f 	sts	0x0FDD, r24
	
	game.player.expl.anim_count = 3;
    ab2a:	83 e0       	ldi	r24, 0x03	; 3
    ab2c:	80 93 47 0e 	sts	0x0E47, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ab30:	85 e0       	ldi	r24, 0x05	; 5
    ab32:	80 93 48 0e 	sts	0x0E48, r24
	game.player.expl.anims = expl_anim;
    ab36:	8b e4       	ldi	r24, 0x4B	; 75
    ab38:	90 e1       	ldi	r25, 0x10	; 16
    ab3a:	90 93 4d 0e 	sts	0x0E4D, r25
    ab3e:	80 93 4c 0e 	sts	0x0E4C, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    ab42:	80 e8       	ldi	r24, 0x80	; 128
    ab44:	93 e3       	ldi	r25, 0x33	; 51
    ab46:	90 93 4c 10 	sts	0x104C, r25
    ab4a:	80 93 4b 10 	sts	0x104B, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    ab4e:	8d e7       	ldi	r24, 0x7D	; 125
    ab50:	93 e3       	ldi	r25, 0x33	; 51
    ab52:	90 93 4e 10 	sts	0x104E, r25
    ab56:	80 93 4d 10 	sts	0x104D, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    ab5a:	8a e7       	ldi	r24, 0x7A	; 122
    ab5c:	93 e3       	ldi	r25, 0x33	; 51
    ab5e:	90 93 50 10 	sts	0x1050, r25
    ab62:	80 93 4f 10 	sts	0x104F, r24
	game.eye_clusters = 9;
    ab66:	89 e0       	ldi	r24, 0x09	; 9
    ab68:	80 93 d5 0d 	sts	0x0DD5, r24
	init_player_shot(game.current_level_index);
    ab6c:	80 91 cc 0d 	lds	r24, 0x0DCC
    ab70:	0c 94 7f 50 	jmp	0xa0fe	; 0xa0fe <init_player_shot>

0000ab74 <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    ab74:	0f 93       	push	r16
    ab76:	1f 93       	push	r17
    ab78:	cf 93       	push	r28
    ab7a:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    ab7c:	a8 2f       	mov	r26, r24
    ab7e:	b0 e0       	ldi	r27, 0x00	; 0
    ab80:	35 e3       	ldi	r19, 0x35	; 53
    ab82:	83 9f       	mul	r24, r19
    ab84:	c0 01       	movw	r24, r0
    ab86:	11 24       	eor	r1, r1
    ab88:	89 54       	subi	r24, 0x49	; 73
    ab8a:	92 4f       	sbci	r25, 0xF2	; 242
    ab8c:	fc 01       	movw	r30, r24
    ab8e:	e9 5b       	subi	r30, 0xB9	; 185
    ab90:	fe 4f       	sbci	r31, 0xFE	; 254
    ab92:	33 e0       	ldi	r19, 0x03	; 3
    ab94:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ab96:	31 96       	adiw	r30, 0x01	; 1
    ab98:	35 e0       	ldi	r19, 0x05	; 5
    ab9a:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    ab9c:	34 96       	adiw	r30, 0x04	; 4
    ab9e:	cb e4       	ldi	r28, 0x4B	; 75
    aba0:	d0 e1       	ldi	r29, 0x10	; 16
    aba2:	d1 83       	std	Z+1, r29	; 0x01
    aba4:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    aba6:	e0 e8       	ldi	r30, 0x80	; 128
    aba8:	f3 e3       	ldi	r31, 0x33	; 51
    abaa:	f0 93 4c 10 	sts	0x104C, r31
    abae:	e0 93 4b 10 	sts	0x104B, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    abb2:	ed e7       	ldi	r30, 0x7D	; 125
    abb4:	f3 e3       	ldi	r31, 0x33	; 51
    abb6:	f0 93 4e 10 	sts	0x104E, r31
    abba:	e0 93 4d 10 	sts	0x104D, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    abbe:	ea e7       	ldi	r30, 0x7A	; 122
    abc0:	f3 e3       	ldi	r31, 0x33	; 51
    abc2:	f0 93 50 10 	sts	0x1050, r31
    abc6:	e0 93 4f 10 	sts	0x104F, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    abca:	ec 01       	movw	r28, r24
    abcc:	ce 5c       	subi	r28, 0xCE	; 206
    abce:	de 4f       	sbci	r29, 0xFE	; 254
    abd0:	31 e0       	ldi	r19, 0x01	; 1
    abd2:	38 83       	st	Y, r19
		game.enemies[i].shot[j].active = 0;
    abd4:	fc 01       	movw	r30, r24
    abd6:	ed 5c       	subi	r30, 0xCD	; 205
    abd8:	fe 4f       	sbci	r31, 0xFE	; 254
    abda:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    abdc:	32 97       	sbiw	r30, 0x02	; 2
    abde:	17 e0       	ldi	r17, 0x07	; 7
    abe0:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    abe2:	36 96       	adiw	r30, 0x06	; 6
    abe4:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    abe6:	31 96       	adiw	r30, 0x01	; 1
    abe8:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    abea:	34 96       	adiw	r30, 0x04	; 4
    abec:	05 e4       	ldi	r16, 0x45	; 69
    abee:	10 e1       	ldi	r17, 0x10	; 16
    abf0:	11 83       	std	Z+1, r17	; 0x01
    abf2:	00 83       	st	Z, r16
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    abf4:	ee ec       	ldi	r30, 0xCE	; 206
    abf6:	f2 e3       	ldi	r31, 0x32	; 50
    abf8:	f0 93 46 10 	sts	0x1046, r31
    abfc:	e0 93 45 10 	sts	0x1045, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    ac00:	fc 01       	movw	r30, r24
    ac02:	ec 5c       	subi	r30, 0xCC	; 204
    ac04:	fe 4f       	sbci	r31, 0xFE	; 254
    ac06:	30 e5       	ldi	r19, 0x50	; 80
    ac08:	30 83       	st	Z, r19
		if (is_boss)
    ac0a:	22 23       	and	r18, r18
    ac0c:	51 f0       	breq	.+20     	; 0xac22 <init_enemy_shot+0xae>
		{
			game.enemies[i].shot[j].hit_count = CRITICAL_SHOT_DAMAGE;
    ac0e:	8a e0       	ldi	r24, 0x0A	; 10
    ac10:	88 83       	st	Y, r24
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    ac12:	80 eb       	ldi	r24, 0xB0	; 176
    ac14:	92 e3       	ldi	r25, 0x32	; 50
    ac16:	90 93 46 10 	sts	0x1046, r25
    ac1a:	80 93 45 10 	sts	0x1045, r24
			game.enemies[i].shot[j].shot_speed = MEDIUM_SHOT_SPEED;
    ac1e:	84 e6       	ldi	r24, 0x64	; 100
    ac20:	08 c0       	rjmp	.+16     	; 0xac32 <init_enemy_shot+0xbe>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    ac22:	fc 01       	movw	r30, r24
    ac24:	eb 5d       	subi	r30, 0xDB	; 219
    ac26:	fe 4f       	sbci	r31, 0xFE	; 254
    ac28:	20 81       	ld	r18, Z
    ac2a:	3a 96       	adiw	r30, 0x0a	; 10
    ac2c:	24 30       	cpi	r18, 0x04	; 4
    ac2e:	19 f4       	brne	.+6      	; 0xac36 <init_enemy_shot+0xc2>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    ac30:	82 ee       	ldi	r24, 0xE2	; 226
    ac32:	80 83       	st	Z, r24
    ac34:	05 c0       	rjmp	.+10     	; 0xac40 <init_enemy_shot+0xcc>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    ac36:	25 30       	cpi	r18, 0x05	; 5
    ac38:	11 f4       	brne	.+4      	; 0xac3e <init_enemy_shot+0xca>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    ac3a:	8a e0       	ldi	r24, 0x0A	; 10
    ac3c:	fa cf       	rjmp	.-12     	; 0xac32 <init_enemy_shot+0xbe>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    ac3e:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    ac40:	25 e3       	ldi	r18, 0x35	; 53
    ac42:	2a 9f       	mul	r18, r26
    ac44:	c0 01       	movw	r24, r0
    ac46:	2b 9f       	mul	r18, r27
    ac48:	90 0d       	add	r25, r0
    ac4a:	11 24       	eor	r1, r1
    ac4c:	89 54       	subi	r24, 0x49	; 73
    ac4e:	92 4f       	sbci	r25, 0xF2	; 242
    ac50:	fc 01       	movw	r30, r24
    ac52:	e2 5d       	subi	r30, 0xD2	; 210
    ac54:	fe 4f       	sbci	r31, 0xFE	; 254
    ac56:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    ac58:	34 97       	sbiw	r30, 0x04	; 4
    ac5a:	71 83       	std	Z+1, r23	; 0x01
    ac5c:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    ac5e:	32 96       	adiw	r30, 0x02	; 2
    ac60:	51 83       	std	Z+1, r21	; 0x01
    ac62:	40 83       	st	Z, r20
	}
}
    ac64:	df 91       	pop	r29
    ac66:	cf 91       	pop	r28
    ac68:	1f 91       	pop	r17
    ac6a:	0f 91       	pop	r16
    ac6c:	08 95       	ret

0000ac6e <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    ac6e:	95 e3       	ldi	r25, 0x35	; 53
    ac70:	89 9f       	mul	r24, r25
    ac72:	90 01       	movw	r18, r0
    ac74:	11 24       	eor	r1, r1
    ac76:	29 54       	subi	r18, 0x49	; 73
    ac78:	32 4f       	sbci	r19, 0xF2	; 242
    ac7a:	f9 01       	movw	r30, r18
    ac7c:	e0 5e       	subi	r30, 0xE0	; 224
    ac7e:	fe 4f       	sbci	r31, 0xFE	; 254
    ac80:	91 e0       	ldi	r25, 0x01	; 1
    ac82:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ac84:	32 96       	adiw	r30, 0x02	; 2
    ac86:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    ac88:	31 97       	sbiw	r30, 0x01	; 1
    ac8a:	a8 e0       	ldi	r26, 0x08	; 8
    ac8c:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    ac8e:	32 96       	adiw	r30, 0x02	; 2
    ac90:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ac92:	31 96       	adiw	r30, 0x01	; 1
    ac94:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    ac96:	31 96       	adiw	r30, 0x01	; 1
    ac98:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    ac9a:	31 96       	adiw	r30, 0x01	; 1
    ac9c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ac9e:	31 96       	adiw	r30, 0x01	; 1
    aca0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    aca2:	32 96       	adiw	r30, 0x02	; 2
    aca4:	92 e0       	ldi	r25, 0x02	; 2
    aca6:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    aca8:	76 96       	adiw	r30, 0x16	; 22
    acaa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    acac:	31 96       	adiw	r30, 0x01	; 1
    acae:	9a e0       	ldi	r25, 0x0A	; 10
    acb0:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    acb2:	d9 01       	movw	r26, r18
    acb4:	ac 5b       	subi	r26, 0xBC	; 188
    acb6:	be 4f       	sbci	r27, 0xFE	; 254
    acb8:	ef ed       	ldi	r30, 0xDF	; 223
    acba:	ff e0       	ldi	r31, 0x0F	; 15
    acbc:	ed 93       	st	X+, r30
    acbe:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    acc0:	a5 ec       	ldi	r26, 0xC5	; 197
    acc2:	b2 e3       	ldi	r27, 0x32	; 50
    acc4:	b1 83       	std	Z+1, r27	; 0x01
    acc6:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    acc8:	a2 ec       	ldi	r26, 0xC2	; 194
    acca:	b2 e3       	ldi	r27, 0x32	; 50
    accc:	b3 83       	std	Z+3, r27	; 0x03
    acce:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    acd0:	f9 01       	movw	r30, r18
    acd2:	e1 5e       	subi	r30, 0xE1	; 225
    acd4:	fe 4f       	sbci	r31, 0xFE	; 254
    acd6:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    acd8:	31 97       	sbiw	r30, 0x01	; 1
    acda:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    acdc:	31 97       	sbiw	r30, 0x01	; 1
    acde:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ace0:	34 97       	sbiw	r30, 0x04	; 4
    ace2:	71 83       	std	Z+1, r23	; 0x01
    ace4:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ace6:	32 96       	adiw	r30, 0x02	; 2
    ace8:	51 83       	std	Z+1, r21	; 0x01
    acea:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    acec:	20 e0       	ldi	r18, 0x00	; 0
    acee:	0c 94 ba 55 	jmp	0xab74	; 0xab74 <init_enemy_shot>

0000acf2 <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    acf2:	95 e3       	ldi	r25, 0x35	; 53
    acf4:	89 9f       	mul	r24, r25
    acf6:	90 01       	movw	r18, r0
    acf8:	11 24       	eor	r1, r1
    acfa:	29 54       	subi	r18, 0x49	; 73
    acfc:	32 4f       	sbci	r19, 0xF2	; 242
    acfe:	f9 01       	movw	r30, r18
    ad00:	ef 5d       	subi	r30, 0xDF	; 223
    ad02:	fe 4f       	sbci	r31, 0xFE	; 254
    ad04:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ad06:	31 97       	sbiw	r30, 0x01	; 1
    ad08:	91 e0       	ldi	r25, 0x01	; 1
    ad0a:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ad0c:	32 96       	adiw	r30, 0x02	; 2
    ad0e:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ad10:	31 96       	adiw	r30, 0x01	; 1
    ad12:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ad14:	31 96       	adiw	r30, 0x01	; 1
    ad16:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    ad18:	31 96       	adiw	r30, 0x01	; 1
    ad1a:	a3 e0       	ldi	r26, 0x03	; 3
    ad1c:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ad1e:	31 96       	adiw	r30, 0x01	; 1
    ad20:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ad22:	31 96       	adiw	r30, 0x01	; 1
    ad24:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    ad26:	32 96       	adiw	r30, 0x02	; 2
    ad28:	a2 e0       	ldi	r26, 0x02	; 2
    ad2a:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ad2c:	76 96       	adiw	r30, 0x16	; 22
    ad2e:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ad30:	31 96       	adiw	r30, 0x01	; 1
    ad32:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ad34:	d9 01       	movw	r26, r18
    ad36:	ac 5b       	subi	r26, 0xBC	; 188
    ad38:	be 4f       	sbci	r27, 0xFE	; 254
    ad3a:	e5 e3       	ldi	r30, 0x35	; 53
    ad3c:	f0 e1       	ldi	r31, 0x10	; 16
    ad3e:	ed 93       	st	X+, r30
    ad40:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    ad42:	ac eb       	ldi	r26, 0xBC	; 188
    ad44:	b2 e3       	ldi	r27, 0x32	; 50
    ad46:	b1 83       	std	Z+1, r27	; 0x01
    ad48:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ad4a:	f9 01       	movw	r30, r18
    ad4c:	e1 5e       	subi	r30, 0xE1	; 225
    ad4e:	fe 4f       	sbci	r31, 0xFE	; 254
    ad50:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ad52:	31 97       	sbiw	r30, 0x01	; 1
    ad54:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ad56:	31 97       	sbiw	r30, 0x01	; 1
    ad58:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ad5a:	34 97       	sbiw	r30, 0x04	; 4
    ad5c:	71 83       	std	Z+1, r23	; 0x01
    ad5e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad60:	32 96       	adiw	r30, 0x02	; 2
    ad62:	51 83       	std	Z+1, r21	; 0x01
    ad64:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ad66:	20 e0       	ldi	r18, 0x00	; 0
    ad68:	0c 94 ba 55 	jmp	0xab74	; 0xab74 <init_enemy_shot>

0000ad6c <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ad6c:	95 e3       	ldi	r25, 0x35	; 53
    ad6e:	89 9f       	mul	r24, r25
    ad70:	90 01       	movw	r18, r0
    ad72:	11 24       	eor	r1, r1
    ad74:	29 54       	subi	r18, 0x49	; 73
    ad76:	32 4f       	sbci	r19, 0xF2	; 242
    ad78:	f9 01       	movw	r30, r18
    ad7a:	ef 5d       	subi	r30, 0xDF	; 223
    ad7c:	fe 4f       	sbci	r31, 0xFE	; 254
    ad7e:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ad80:	31 97       	sbiw	r30, 0x01	; 1
    ad82:	91 e0       	ldi	r25, 0x01	; 1
    ad84:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ad86:	32 96       	adiw	r30, 0x02	; 2
    ad88:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ad8a:	31 96       	adiw	r30, 0x01	; 1
    ad8c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ad8e:	31 96       	adiw	r30, 0x01	; 1
    ad90:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    ad92:	31 96       	adiw	r30, 0x01	; 1
    ad94:	a4 e0       	ldi	r26, 0x04	; 4
    ad96:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ad98:	31 96       	adiw	r30, 0x01	; 1
    ad9a:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ad9c:	31 96       	adiw	r30, 0x01	; 1
    ad9e:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    ada0:	32 96       	adiw	r30, 0x02	; 2
    ada2:	a2 e0       	ldi	r26, 0x02	; 2
    ada4:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ada6:	76 96       	adiw	r30, 0x16	; 22
    ada8:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    adaa:	31 96       	adiw	r30, 0x01	; 1
    adac:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    adae:	d9 01       	movw	r26, r18
    adb0:	ac 5b       	subi	r26, 0xBC	; 188
    adb2:	be 4f       	sbci	r27, 0xFE	; 254
    adb4:	e9 e4       	ldi	r30, 0x49	; 73
    adb6:	f0 e1       	ldi	r31, 0x10	; 16
    adb8:	ed 93       	st	X+, r30
    adba:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    adbc:	a9 eb       	ldi	r26, 0xB9	; 185
    adbe:	b2 e3       	ldi	r27, 0x32	; 50
    adc0:	b1 83       	std	Z+1, r27	; 0x01
    adc2:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    adc4:	f9 01       	movw	r30, r18
    adc6:	e1 5e       	subi	r30, 0xE1	; 225
    adc8:	fe 4f       	sbci	r31, 0xFE	; 254
    adca:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    adcc:	31 97       	sbiw	r30, 0x01	; 1
    adce:	92 ee       	ldi	r25, 0xE2	; 226
    add0:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    add2:	31 97       	sbiw	r30, 0x01	; 1
    add4:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    add6:	34 97       	sbiw	r30, 0x04	; 4
    add8:	71 83       	std	Z+1, r23	; 0x01
    adda:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    addc:	32 96       	adiw	r30, 0x02	; 2
    adde:	51 83       	std	Z+1, r21	; 0x01
    ade0:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ade2:	20 e0       	ldi	r18, 0x00	; 0
    ade4:	0c 94 ba 55 	jmp	0xab74	; 0xab74 <init_enemy_shot>

0000ade8 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ade8:	95 e3       	ldi	r25, 0x35	; 53
    adea:	89 9f       	mul	r24, r25
    adec:	90 01       	movw	r18, r0
    adee:	11 24       	eor	r1, r1
    adf0:	29 54       	subi	r18, 0x49	; 73
    adf2:	32 4f       	sbci	r19, 0xF2	; 242
    adf4:	f9 01       	movw	r30, r18
    adf6:	ef 5d       	subi	r30, 0xDF	; 223
    adf8:	fe 4f       	sbci	r31, 0xFE	; 254
    adfa:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    adfc:	31 97       	sbiw	r30, 0x01	; 1
    adfe:	91 e0       	ldi	r25, 0x01	; 1
    ae00:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ae02:	33 96       	adiw	r30, 0x03	; 3
    ae04:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ae06:	31 96       	adiw	r30, 0x01	; 1
    ae08:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    ae0a:	31 96       	adiw	r30, 0x01	; 1
    ae0c:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    ae0e:	31 96       	adiw	r30, 0x01	; 1
    ae10:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ae12:	31 96       	adiw	r30, 0x01	; 1
    ae14:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    ae16:	32 96       	adiw	r30, 0x02	; 2
    ae18:	a4 e0       	ldi	r26, 0x04	; 4
    ae1a:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ae1c:	76 96       	adiw	r30, 0x16	; 22
    ae1e:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ae20:	31 96       	adiw	r30, 0x01	; 1
    ae22:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    ae24:	d9 01       	movw	r26, r18
    ae26:	ac 5b       	subi	r26, 0xBC	; 188
    ae28:	be 4f       	sbci	r27, 0xFE	; 254
    ae2a:	e3 ee       	ldi	r30, 0xE3	; 227
    ae2c:	ff e0       	ldi	r31, 0x0F	; 15
    ae2e:	ed 93       	st	X+, r30
    ae30:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    ae32:	ab ec       	ldi	r26, 0xCB	; 203
    ae34:	b2 e3       	ldi	r27, 0x32	; 50
    ae36:	b1 83       	std	Z+1, r27	; 0x01
    ae38:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ae3a:	f9 01       	movw	r30, r18
    ae3c:	e1 5e       	subi	r30, 0xE1	; 225
    ae3e:	fe 4f       	sbci	r31, 0xFE	; 254
    ae40:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    ae42:	31 97       	sbiw	r30, 0x01	; 1
    ae44:	9e e1       	ldi	r25, 0x1E	; 30
    ae46:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ae48:	31 97       	sbiw	r30, 0x01	; 1
    ae4a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ae4c:	34 97       	sbiw	r30, 0x04	; 4
    ae4e:	71 83       	std	Z+1, r23	; 0x01
    ae50:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ae52:	32 96       	adiw	r30, 0x02	; 2
    ae54:	51 83       	std	Z+1, r21	; 0x01
    ae56:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ae58:	20 e0       	ldi	r18, 0x00	; 0
    ae5a:	0c 94 ba 55 	jmp	0xab74	; 0xab74 <init_enemy_shot>

0000ae5e <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ae5e:	95 e3       	ldi	r25, 0x35	; 53
    ae60:	89 9f       	mul	r24, r25
    ae62:	90 01       	movw	r18, r0
    ae64:	11 24       	eor	r1, r1
    ae66:	29 54       	subi	r18, 0x49	; 73
    ae68:	32 4f       	sbci	r19, 0xF2	; 242
    ae6a:	f9 01       	movw	r30, r18
    ae6c:	ef 5d       	subi	r30, 0xDF	; 223
    ae6e:	fe 4f       	sbci	r31, 0xFE	; 254
    ae70:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ae72:	31 97       	sbiw	r30, 0x01	; 1
    ae74:	91 e0       	ldi	r25, 0x01	; 1
    ae76:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ae78:	33 96       	adiw	r30, 0x03	; 3
    ae7a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ae7c:	31 96       	adiw	r30, 0x01	; 1
    ae7e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    ae80:	31 96       	adiw	r30, 0x01	; 1
    ae82:	a5 e0       	ldi	r26, 0x05	; 5
    ae84:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ae86:	31 96       	adiw	r30, 0x01	; 1
    ae88:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ae8a:	31 96       	adiw	r30, 0x01	; 1
    ae8c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    ae8e:	32 96       	adiw	r30, 0x02	; 2
    ae90:	a4 e0       	ldi	r26, 0x04	; 4
    ae92:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ae94:	76 96       	adiw	r30, 0x16	; 22
    ae96:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ae98:	31 96       	adiw	r30, 0x01	; 1
    ae9a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    ae9c:	d9 01       	movw	r26, r18
    ae9e:	ac 5b       	subi	r26, 0xBC	; 188
    aea0:	be 4f       	sbci	r27, 0xFE	; 254
    aea2:	e7 e4       	ldi	r30, 0x47	; 71
    aea4:	f0 e1       	ldi	r31, 0x10	; 16
    aea6:	ed 93       	st	X+, r30
    aea8:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    aeaa:	af eb       	ldi	r26, 0xBF	; 191
    aeac:	b2 e3       	ldi	r27, 0x32	; 50
    aeae:	b1 83       	std	Z+1, r27	; 0x01
    aeb0:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aeb2:	f9 01       	movw	r30, r18
    aeb4:	e1 5e       	subi	r30, 0xE1	; 225
    aeb6:	fe 4f       	sbci	r31, 0xFE	; 254
    aeb8:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    aeba:	31 97       	sbiw	r30, 0x01	; 1
    aebc:	9a e0       	ldi	r25, 0x0A	; 10
    aebe:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    aec0:	31 97       	sbiw	r30, 0x01	; 1
    aec2:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aec4:	34 97       	sbiw	r30, 0x04	; 4
    aec6:	71 83       	std	Z+1, r23	; 0x01
    aec8:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aeca:	32 96       	adiw	r30, 0x02	; 2
    aecc:	51 83       	std	Z+1, r21	; 0x01
    aece:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aed0:	20 e0       	ldi	r18, 0x00	; 0
    aed2:	0c 94 ba 55 	jmp	0xab74	; 0xab74 <init_enemy_shot>

0000aed6 <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aed6:	95 e3       	ldi	r25, 0x35	; 53
    aed8:	89 9f       	mul	r24, r25
    aeda:	90 01       	movw	r18, r0
    aedc:	11 24       	eor	r1, r1
    aede:	29 54       	subi	r18, 0x49	; 73
    aee0:	32 4f       	sbci	r19, 0xF2	; 242
    aee2:	f9 01       	movw	r30, r18
    aee4:	ef 5d       	subi	r30, 0xDF	; 223
    aee6:	fe 4f       	sbci	r31, 0xFE	; 254
    aee8:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aeea:	31 97       	sbiw	r30, 0x01	; 1
    aeec:	91 e0       	ldi	r25, 0x01	; 1
    aeee:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    aef0:	33 96       	adiw	r30, 0x03	; 3
    aef2:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aef4:	31 96       	adiw	r30, 0x01	; 1
    aef6:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    aef8:	31 96       	adiw	r30, 0x01	; 1
    aefa:	a8 e0       	ldi	r26, 0x08	; 8
    aefc:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    aefe:	31 96       	adiw	r30, 0x01	; 1
    af00:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    af02:	31 96       	adiw	r30, 0x01	; 1
    af04:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    af06:	32 96       	adiw	r30, 0x02	; 2
    af08:	a4 e0       	ldi	r26, 0x04	; 4
    af0a:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    af0c:	76 96       	adiw	r30, 0x16	; 22
    af0e:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    af10:	31 96       	adiw	r30, 0x01	; 1
    af12:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    af14:	d9 01       	movw	r26, r18
    af16:	ac 5b       	subi	r26, 0xBC	; 188
    af18:	be 4f       	sbci	r27, 0xFE	; 254
    af1a:	e9 e5       	ldi	r30, 0x59	; 89
    af1c:	f0 e1       	ldi	r31, 0x10	; 16
    af1e:	ed 93       	st	X+, r30
    af20:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    af22:	a8 ec       	ldi	r26, 0xC8	; 200
    af24:	b2 e3       	ldi	r27, 0x32	; 50
    af26:	b1 83       	std	Z+1, r27	; 0x01
    af28:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    af2a:	f9 01       	movw	r30, r18
    af2c:	e1 5e       	subi	r30, 0xE1	; 225
    af2e:	fe 4f       	sbci	r31, 0xFE	; 254
    af30:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    af32:	31 97       	sbiw	r30, 0x01	; 1
    af34:	94 e1       	ldi	r25, 0x14	; 20
    af36:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    af38:	31 97       	sbiw	r30, 0x01	; 1
    af3a:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    af3c:	34 97       	sbiw	r30, 0x04	; 4
    af3e:	71 83       	std	Z+1, r23	; 0x01
    af40:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    af42:	32 96       	adiw	r30, 0x02	; 2
    af44:	51 83       	std	Z+1, r21	; 0x01
    af46:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    af48:	20 e0       	ldi	r18, 0x00	; 0
    af4a:	0c 94 ba 55 	jmp	0xab74	; 0xab74 <init_enemy_shot>

0000af4e <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    af4e:	95 e3       	ldi	r25, 0x35	; 53
    af50:	89 9f       	mul	r24, r25
    af52:	90 01       	movw	r18, r0
    af54:	11 24       	eor	r1, r1
    af56:	29 54       	subi	r18, 0x49	; 73
    af58:	32 4f       	sbci	r19, 0xF2	; 242
    af5a:	f9 01       	movw	r30, r18
    af5c:	ef 5d       	subi	r30, 0xDF	; 223
    af5e:	fe 4f       	sbci	r31, 0xFE	; 254
    af60:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    af62:	31 97       	sbiw	r30, 0x01	; 1
    af64:	91 e0       	ldi	r25, 0x01	; 1
    af66:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    af68:	32 96       	adiw	r30, 0x02	; 2
    af6a:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    af6c:	31 96       	adiw	r30, 0x01	; 1
    af6e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    af70:	31 96       	adiw	r30, 0x01	; 1
    af72:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    af74:	31 96       	adiw	r30, 0x01	; 1
    af76:	a6 e0       	ldi	r26, 0x06	; 6
    af78:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    af7a:	31 96       	adiw	r30, 0x01	; 1
    af7c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    af7e:	31 96       	adiw	r30, 0x01	; 1
    af80:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    af82:	32 96       	adiw	r30, 0x02	; 2
    af84:	a8 e0       	ldi	r26, 0x08	; 8
    af86:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    af88:	76 96       	adiw	r30, 0x16	; 22
    af8a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    af8c:	31 96       	adiw	r30, 0x01	; 1
    af8e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    af90:	d9 01       	movw	r26, r18
    af92:	ac 5b       	subi	r26, 0xBC	; 188
    af94:	be 4f       	sbci	r27, 0xFE	; 254
    af96:	e5 e3       	ldi	r30, 0x35	; 53
    af98:	f0 e1       	ldi	r31, 0x10	; 16
    af9a:	ed 93       	st	X+, r30
    af9c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    af9e:	a6 eb       	ldi	r26, 0xB6	; 182
    afa0:	b2 e3       	ldi	r27, 0x32	; 50
    afa2:	b1 83       	std	Z+1, r27	; 0x01
    afa4:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    afa6:	f9 01       	movw	r30, r18
    afa8:	e1 5e       	subi	r30, 0xE1	; 225
    afaa:	fe 4f       	sbci	r31, 0xFE	; 254
    afac:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    afae:	31 97       	sbiw	r30, 0x01	; 1
    afb0:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    afb2:	31 97       	sbiw	r30, 0x01	; 1
    afb4:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    afb6:	34 97       	sbiw	r30, 0x04	; 4
    afb8:	71 83       	std	Z+1, r23	; 0x01
    afba:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    afbc:	32 96       	adiw	r30, 0x02	; 2
    afbe:	51 83       	std	Z+1, r21	; 0x01
    afc0:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    afc2:	21 e0       	ldi	r18, 0x01	; 1
    afc4:	0c 94 ba 55 	jmp	0xab74	; 0xab74 <init_enemy_shot>

0000afc8 <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    afc8:	cf 93       	push	r28
    afca:	df 93       	push	r29
    afcc:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    afce:	95 e3       	ldi	r25, 0x35	; 53
    afd0:	89 9f       	mul	r24, r25
    afd2:	90 01       	movw	r18, r0
    afd4:	11 24       	eor	r1, r1
    afd6:	29 54       	subi	r18, 0x49	; 73
    afd8:	32 4f       	sbci	r19, 0xF2	; 242
    afda:	f9 01       	movw	r30, r18
    afdc:	ef 5d       	subi	r30, 0xDF	; 223
    afde:	fe 4f       	sbci	r31, 0xFE	; 254
    afe0:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    afe2:	31 97       	sbiw	r30, 0x01	; 1
    afe4:	91 e0       	ldi	r25, 0x01	; 1
    afe6:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    afe8:	32 96       	adiw	r30, 0x02	; 2
    afea:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    afec:	31 96       	adiw	r30, 0x01	; 1
    afee:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aff0:	31 96       	adiw	r30, 0x01	; 1
    aff2:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    aff4:	31 96       	adiw	r30, 0x01	; 1
    aff6:	47 e0       	ldi	r20, 0x07	; 7
    aff8:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    affa:	31 96       	adiw	r30, 0x01	; 1
    affc:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    affe:	31 96       	adiw	r30, 0x01	; 1
    b000:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    b002:	32 96       	adiw	r30, 0x02	; 2
    b004:	48 e0       	ldi	r20, 0x08	; 8
    b006:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    b008:	76 96       	adiw	r30, 0x16	; 22
    b00a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b00c:	31 96       	adiw	r30, 0x01	; 1
    b00e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b010:	d9 01       	movw	r26, r18
    b012:	ac 5b       	subi	r26, 0xBC	; 188
    b014:	be 4f       	sbci	r27, 0xFE	; 254
    b016:	e5 e3       	ldi	r30, 0x35	; 53
    b018:	f0 e1       	ldi	r31, 0x10	; 16
    b01a:	ed 93       	st	X+, r30
    b01c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    b01e:	43 eb       	ldi	r20, 0xB3	; 179
    b020:	52 e3       	ldi	r21, 0x32	; 50
    b022:	51 83       	std	Z+1, r21	; 0x01
    b024:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    b026:	f9 01       	movw	r30, r18
    b028:	e1 5e       	subi	r30, 0xE1	; 225
    b02a:	fe 4f       	sbci	r31, 0xFE	; 254
    b02c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b02e:	31 97       	sbiw	r30, 0x01	; 1
    b030:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b032:	31 97       	sbiw	r30, 0x01	; 1
    b034:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b036:	34 97       	sbiw	r30, 0x04	; 4
    b038:	71 83       	std	Z+1, r23	; 0x01
    b03a:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b03c:	32 96       	adiw	r30, 0x02	; 2
    b03e:	d1 83       	std	Z+1, r29	; 0x01
    b040:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    b042:	21 e0       	ldi	r18, 0x01	; 1
    b044:	ae 01       	movw	r20, r28
    b046:	0e 94 ba 55 	call	0xab74	; 0xab74 <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    b04a:	be 01       	movw	r22, r28
    b04c:	83 e0       	ldi	r24, 0x03	; 3
    b04e:	76 95       	lsr	r23
    b050:	67 95       	ror	r22
    b052:	8a 95       	dec	r24
    b054:	e1 f7       	brne	.-8      	; 0xb04e <init_enemy_boss_eye+0x86>
    b056:	90 91 d5 0d 	lds	r25, 0x0DD5
    b05a:	40 e0       	ldi	r20, 0x00	; 0
    b05c:	50 e0       	ldi	r21, 0x00	; 0
    b05e:	80 e2       	ldi	r24, 0x20	; 32
    b060:	89 1b       	sub	r24, r25
}
    b062:	df 91       	pop	r29
    b064:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    b066:	0c 94 7a 3f 	jmp	0x7ef4	; 0x7ef4 <SetTile>

0000b06a <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    b06a:	40 e2       	ldi	r20, 0x20	; 32
    b06c:	50 e0       	ldi	r21, 0x00	; 0
    b06e:	68 ec       	ldi	r22, 0xC8	; 200
    b070:	77 e0       	ldi	r23, 0x07	; 7
    b072:	80 e0       	ldi	r24, 0x00	; 0
    b074:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    b078:	40 e3       	ldi	r20, 0x30	; 48
    b07a:	50 e0       	ldi	r21, 0x00	; 0
    b07c:	68 ec       	ldi	r22, 0xC8	; 200
    b07e:	77 e0       	ldi	r23, 0x07	; 7
    b080:	81 e0       	ldi	r24, 0x01	; 1
    b082:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    b086:	40 e9       	ldi	r20, 0x90	; 144
    b088:	50 e0       	ldi	r21, 0x00	; 0
    b08a:	68 ec       	ldi	r22, 0xC8	; 200
    b08c:	77 e0       	ldi	r23, 0x07	; 7
    b08e:	82 e0       	ldi	r24, 0x02	; 2
    b090:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    b094:	40 ea       	ldi	r20, 0xA0	; 160
    b096:	50 e0       	ldi	r21, 0x00	; 0
    b098:	68 ec       	ldi	r22, 0xC8	; 200
    b09a:	77 e0       	ldi	r23, 0x07	; 7
    b09c:	83 e0       	ldi	r24, 0x03	; 3
    b09e:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <init_enemy_boss_turret>
	game.active_enemies = 4;
    b0a2:	84 e0       	ldi	r24, 0x04	; 4
    b0a4:	80 93 d2 0d 	sts	0x0DD2, r24
    b0a8:	08 95       	ret

0000b0aa <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    b0aa:	ef 92       	push	r14
    b0ac:	ff 92       	push	r15
    b0ae:	0f 93       	push	r16
    b0b0:	1f 93       	push	r17
    b0b2:	cf 93       	push	r28
    b0b4:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    b0b6:	07 eb       	ldi	r16, 0xB7	; 183
    b0b8:	1d e0       	ldi	r17, 0x0D	; 13
    b0ba:	f8 01       	movw	r30, r16
    b0bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    b0be:	c0 e0       	ldi	r28, 0x00	; 0
    b0c0:	d1 e0       	ldi	r29, 0x01	; 1
    b0c2:	9e 01       	movw	r18, r28
    b0c4:	28 1b       	sub	r18, r24
    b0c6:	31 09       	sbc	r19, r1
    b0c8:	83 e0       	ldi	r24, 0x03	; 3
    b0ca:	22 0f       	add	r18, r18
    b0cc:	33 1f       	adc	r19, r19
    b0ce:	8a 95       	dec	r24
    b0d0:	e1 f7       	brne	.-8      	; 0xb0ca <init_enemy_boss_eyes+0x20>
    b0d2:	80 91 fa 0c 	lds	r24, 0x0CFA
    b0d6:	65 e0       	ldi	r22, 0x05	; 5
    b0d8:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    b0dc:	89 2f       	mov	r24, r25
    b0de:	48 e5       	ldi	r20, 0x58	; 88
    b0e0:	50 e0       	ldi	r21, 0x00	; 0
    b0e2:	b9 01       	movw	r22, r18
    b0e4:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    b0e8:	f8 01       	movw	r30, r16
    b0ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    b0ec:	9e 01       	movw	r18, r28
    b0ee:	28 1b       	sub	r18, r24
    b0f0:	31 09       	sbc	r19, r1
    b0f2:	93 e0       	ldi	r25, 0x03	; 3
    b0f4:	22 0f       	add	r18, r18
    b0f6:	33 1f       	adc	r19, r19
    b0f8:	9a 95       	dec	r25
    b0fa:	e1 f7       	brne	.-8      	; 0xb0f4 <init_enemy_boss_eyes+0x4a>
    b0fc:	80 91 fa 0c 	lds	r24, 0x0CFA
    b100:	90 e0       	ldi	r25, 0x00	; 0
    b102:	01 96       	adiw	r24, 0x01	; 1
    b104:	45 e0       	ldi	r20, 0x05	; 5
    b106:	e4 2e       	mov	r14, r20
    b108:	f1 2c       	mov	r15, r1
    b10a:	b7 01       	movw	r22, r14
    b10c:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    b110:	40 e6       	ldi	r20, 0x60	; 96
    b112:	50 e0       	ldi	r21, 0x00	; 0
    b114:	b9 01       	movw	r22, r18
    b116:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    b11a:	f8 01       	movw	r30, r16
    b11c:	86 8d       	ldd	r24, Z+30	; 0x1e
    b11e:	c8 1b       	sub	r28, r24
    b120:	d1 09       	sbc	r29, r1
    b122:	53 e0       	ldi	r21, 0x03	; 3
    b124:	cc 0f       	add	r28, r28
    b126:	dd 1f       	adc	r29, r29
    b128:	5a 95       	dec	r21
    b12a:	e1 f7       	brne	.-8      	; 0xb124 <init_enemy_boss_eyes+0x7a>
    b12c:	80 91 fa 0c 	lds	r24, 0x0CFA
    b130:	90 e0       	ldi	r25, 0x00	; 0
    b132:	02 96       	adiw	r24, 0x02	; 2
    b134:	b7 01       	movw	r22, r14
    b136:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    b13a:	48 e6       	ldi	r20, 0x68	; 104
    b13c:	50 e0       	ldi	r21, 0x00	; 0
    b13e:	be 01       	movw	r22, r28
    b140:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <init_enemy_boss_eye>
	game.active_enemies = 3;
    b144:	83 e0       	ldi	r24, 0x03	; 3
    b146:	f8 01       	movw	r30, r16
    b148:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    b14a:	80 91 fa 0c 	lds	r24, 0x0CFA
    b14e:	8d 5f       	subi	r24, 0xFD	; 253
    b150:	80 93 fa 0c 	sts	0x0CFA, r24
}
    b154:	df 91       	pop	r29
    b156:	cf 91       	pop	r28
    b158:	1f 91       	pop	r17
    b15a:	0f 91       	pop	r16
    b15c:	ff 90       	pop	r15
    b15e:	ef 90       	pop	r14
    b160:	08 95       	ret

0000b162 <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b162:	a8 2f       	mov	r26, r24
    b164:	b0 e0       	ldi	r27, 0x00	; 0
    b166:	25 e3       	ldi	r18, 0x35	; 53
    b168:	82 9f       	mul	r24, r18
    b16a:	c0 01       	movw	r24, r0
    b16c:	11 24       	eor	r1, r1
    b16e:	89 54       	subi	r24, 0x49	; 73
    b170:	92 4f       	sbci	r25, 0xF2	; 242
    b172:	fc 01       	movw	r30, r24
    b174:	e0 5e       	subi	r30, 0xE0	; 224
    b176:	fe 4f       	sbci	r31, 0xFE	; 254
    b178:	21 e0       	ldi	r18, 0x01	; 1
    b17a:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    b17c:	33 96       	adiw	r30, 0x03	; 3
    b17e:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    b180:	31 96       	adiw	r30, 0x01	; 1
    b182:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    b184:	31 96       	adiw	r30, 0x01	; 1
    b186:	32 e0       	ldi	r19, 0x02	; 2
    b188:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    b18a:	31 96       	adiw	r30, 0x01	; 1
    b18c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b18e:	31 96       	adiw	r30, 0x01	; 1
    b190:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    b192:	78 96       	adiw	r30, 0x18	; 24
    b194:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    b196:	31 96       	adiw	r30, 0x01	; 1
    b198:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    b19a:	34 96       	adiw	r30, 0x04	; 4
    b19c:	8b e5       	ldi	r24, 0x5B	; 91
    b19e:	90 e1       	ldi	r25, 0x10	; 16
    b1a0:	91 83       	std	Z+1, r25	; 0x01
    b1a2:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b1a4:	80 91 cc 0d 	lds	r24, 0x0DCC
    b1a8:	84 30       	cpi	r24, 0x04	; 4
    b1aa:	79 f0       	breq	.+30     	; 0xb1ca <init_enemy_level_hazard+0x68>
    b1ac:	38 f4       	brcc	.+14     	; 0xb1bc <init_enemy_level_hazard+0x5a>
    b1ae:	88 23       	and	r24, r24
    b1b0:	91 f0       	breq	.+36     	; 0xb1d6 <init_enemy_level_hazard+0x74>
    b1b2:	82 30       	cpi	r24, 0x02	; 2
    b1b4:	81 f4       	brne	.+32     	; 0xb1d6 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b1b6:	8a ea       	ldi	r24, 0xAA	; 170
    b1b8:	92 e3       	ldi	r25, 0x32	; 50
    b1ba:	0f c0       	rjmp	.+30     	; 0xb1da <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b1bc:	86 30       	cpi	r24, 0x06	; 6
    b1be:	41 f0       	breq	.+16     	; 0xb1d0 <init_enemy_level_hazard+0x6e>
    b1c0:	88 30       	cpi	r24, 0x08	; 8
    b1c2:	49 f4       	brne	.+18     	; 0xb1d6 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b1c4:	81 ea       	ldi	r24, 0xA1	; 161
    b1c6:	92 e3       	ldi	r25, 0x32	; 50
    b1c8:	08 c0       	rjmp	.+16     	; 0xb1da <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b1ca:	87 ea       	ldi	r24, 0xA7	; 167
    b1cc:	92 e3       	ldi	r25, 0x32	; 50
    b1ce:	05 c0       	rjmp	.+10     	; 0xb1da <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b1d0:	84 ea       	ldi	r24, 0xA4	; 164
    b1d2:	92 e3       	ldi	r25, 0x32	; 50
    b1d4:	02 c0       	rjmp	.+4      	; 0xb1da <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b1d6:	8d ea       	ldi	r24, 0xAD	; 173
    b1d8:	92 e3       	ldi	r25, 0x32	; 50
    b1da:	90 93 5c 10 	sts	0x105C, r25
    b1de:	80 93 5b 10 	sts	0x105B, r24
	}
	game.enemies[i].shared.gravity = 0;
    b1e2:	25 e3       	ldi	r18, 0x35	; 53
    b1e4:	2a 9f       	mul	r18, r26
    b1e6:	c0 01       	movw	r24, r0
    b1e8:	2b 9f       	mul	r18, r27
    b1ea:	90 0d       	add	r25, r0
    b1ec:	11 24       	eor	r1, r1
    b1ee:	89 54       	subi	r24, 0x49	; 73
    b1f0:	92 4f       	sbci	r25, 0xF2	; 242
    b1f2:	fc 01       	movw	r30, r24
    b1f4:	e1 5e       	subi	r30, 0xE1	; 225
    b1f6:	fe 4f       	sbci	r31, 0xFE	; 254
    b1f8:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b1fa:	32 97       	sbiw	r30, 0x02	; 2
    b1fc:	2e e1       	ldi	r18, 0x1E	; 30
    b1fe:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b200:	31 96       	adiw	r30, 0x01	; 1
    b202:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b204:	35 97       	sbiw	r30, 0x05	; 5
    b206:	71 83       	std	Z+1, r23	; 0x01
    b208:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b20a:	32 96       	adiw	r30, 0x02	; 2
    b20c:	51 83       	std	Z+1, r21	; 0x01
    b20e:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b210:	3d 96       	adiw	r30, 0x0d	; 13
    b212:	83 e0       	ldi	r24, 0x03	; 3
    b214:	56 95       	lsr	r21
    b216:	47 95       	ror	r20
    b218:	8a 95       	dec	r24
    b21a:	e1 f7       	brne	.-8      	; 0xb214 <init_enemy_level_hazard+0xb2>
    b21c:	40 83       	st	Z, r20
    b21e:	08 95       	ret

0000b220 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b220:	1f 93       	push	r17
    b222:	cf 93       	push	r28
    b224:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b226:	d0 e0       	ldi	r29, 0x00	; 0
    b228:	10 e2       	ldi	r17, 0x20	; 32
    b22a:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b22c:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b22e:	c1 17       	cp	r28, r17
    b230:	41 f0       	breq	.+16     	; 0xb242 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b232:	40 e0       	ldi	r20, 0x00	; 0
    b234:	50 e0       	ldi	r21, 0x00	; 0
    b236:	6c 2f       	mov	r22, r28
    b238:	8d 2f       	mov	r24, r29
    b23a:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <SetTile>
    b23e:	cf 5f       	subi	r28, 0xFF	; 255
    b240:	f6 cf       	rjmp	.-20     	; 0xb22e <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b242:	df 5f       	subi	r29, 0xFF	; 255
    b244:	dc 31       	cpi	r29, 0x1C	; 28
    b246:	91 f7       	brne	.-28     	; 0xb22c <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b248:	df 91       	pop	r29
    b24a:	cf 91       	pop	r28
    b24c:	1f 91       	pop	r17
    b24e:	08 95       	ret

0000b250 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b250:	dc 01       	movw	r26, r24
    b252:	e6 2f       	mov	r30, r22
    b254:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b256:	25 e0       	ldi	r18, 0x05	; 5
    b258:	62 2f       	mov	r22, r18
    b25a:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    b25e:	58 2f       	mov	r21, r24
    b260:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b262:	40 91 cd 0d 	lds	r20, 0x0DCD
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b266:	8e 2f       	mov	r24, r30
    b268:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b26c:	e8 2f       	mov	r30, r24
    b26e:	f0 e0       	ldi	r31, 0x00	; 0
    b270:	54 9f       	mul	r21, r20
    b272:	e0 0d       	add	r30, r0
    b274:	f1 1d       	adc	r31, r1
    b276:	11 24       	eor	r1, r1
    b278:	32 96       	adiw	r30, 0x02	; 2
    b27a:	ea 0f       	add	r30, r26
    b27c:	fb 1f       	adc	r31, r27
    b27e:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b280:	e9 2f       	mov	r30, r25
    b282:	f0 e0       	ldi	r31, 0x00	; 0
    b284:	95 e0       	ldi	r25, 0x05	; 5
    b286:	39 9f       	mul	r19, r25
    b288:	e0 0d       	add	r30, r0
    b28a:	f1 1d       	adc	r31, r1
    b28c:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b28e:	99 e1       	ldi	r25, 0x19	; 25
    b290:	89 9f       	mul	r24, r25
    b292:	e0 0d       	add	r30, r0
    b294:	f1 1d       	adc	r31, r1
    b296:	11 24       	eor	r1, r1
    b298:	e2 51       	subi	r30, 0x12	; 18
    b29a:	f3 4a       	sbci	r31, 0xA3	; 163
    b29c:	84 91       	lpm	r24, Z
}
    b29e:	08 95       	ret

0000b2a0 <render_camera_view>:

void render_camera_view()
{
    b2a0:	7f 92       	push	r7
    b2a2:	8f 92       	push	r8
    b2a4:	9f 92       	push	r9
    b2a6:	af 92       	push	r10
    b2a8:	bf 92       	push	r11
    b2aa:	cf 92       	push	r12
    b2ac:	df 92       	push	r13
    b2ae:	ef 92       	push	r14
    b2b0:	ff 92       	push	r15
    b2b2:	0f 93       	push	r16
    b2b4:	1f 93       	push	r17
    b2b6:	cf 93       	push	r28
    b2b8:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b2ba:	c0 91 b7 0d 	lds	r28, 0x0DB7
    b2be:	d0 91 b8 0d 	lds	r29, 0x0DB8
    b2c2:	83 e0       	ldi	r24, 0x03	; 3
    b2c4:	d6 95       	lsr	r29
    b2c6:	c7 95       	ror	r28
    b2c8:	8a 95       	dec	r24
    b2ca:	e1 f7       	brne	.-8      	; 0xb2c4 <render_camera_view+0x24>
    b2cc:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b2ce:	00 91 bf 0d 	lds	r16, 0x0DBF
    b2d2:	06 95       	lsr	r16
    b2d4:	06 95       	lsr	r16
    b2d6:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b2d8:	dd 27       	eor	r29, r29
    b2da:	7e 01       	movw	r14, r28
    b2dc:	4c e1       	ldi	r20, 0x1C	; 28
    b2de:	e4 0e       	add	r14, r20
    b2e0:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b2e2:	10 e0       	ldi	r17, 0x00	; 0
    b2e4:	68 01       	movw	r12, r16
    b2e6:	89 e1       	ldi	r24, 0x19	; 25
    b2e8:	c8 0e       	add	r12, r24
    b2ea:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b2ec:	9e e1       	ldi	r25, 0x1E	; 30
    b2ee:	a9 2e       	mov	r10, r25
    b2f0:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b2f2:	ec 16       	cp	r14, r28
    b2f4:	fd 06       	cpc	r15, r29
    b2f6:	70 f1       	brcs	.+92     	; 0xb354 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b2f8:	48 01       	movw	r8, r16
    b2fa:	c8 14       	cp	r12, r8
    b2fc:	d9 04       	cpc	r13, r9
    b2fe:	40 f1       	brcs	.+80     	; 0xb350 <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b300:	48 2d       	mov	r20, r8
    b302:	6c 2f       	mov	r22, r28
    b304:	80 91 d9 0f 	lds	r24, 0x0FD9
    b308:	90 91 da 0f 	lds	r25, 0x0FDA
    b30c:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b310:	28 2f       	mov	r18, r24
    b312:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b314:	80 91 b3 0c 	lds	r24, 0x0CB3
    b318:	86 95       	lsr	r24
    b31a:	86 95       	lsr	r24
    b31c:	86 95       	lsr	r24
    b31e:	90 e0       	ldi	r25, 0x00	; 0
    b320:	80 1b       	sub	r24, r16
    b322:	91 0b       	sbc	r25, r17
    b324:	88 0d       	add	r24, r8
    b326:	99 1d       	adc	r25, r9
    b328:	b5 01       	movw	r22, r10
    b32a:	0e 94 6c 73 	call	0xe6d8	; 0xe6d8 <__udivmodhi4>
    b32e:	90 91 b2 0c 	lds	r25, 0x0CB2
    b332:	96 95       	lsr	r25
    b334:	96 95       	lsr	r25
    b336:	96 95       	lsr	r25
    b338:	97 19       	sub	r25, r7
    b33a:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b33c:	a9 01       	movw	r20, r18
    b33e:	68 2f       	mov	r22, r24
    b340:	89 2f       	mov	r24, r25
    b342:	8f 71       	andi	r24, 0x1F	; 31
    b344:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b348:	8f ef       	ldi	r24, 0xFF	; 255
    b34a:	88 1a       	sub	r8, r24
    b34c:	98 0a       	sbc	r9, r24
    b34e:	d5 cf       	rjmp	.-86     	; 0xb2fa <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b350:	21 96       	adiw	r28, 0x01	; 1
    b352:	cf cf       	rjmp	.-98     	; 0xb2f2 <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b354:	df 91       	pop	r29
    b356:	cf 91       	pop	r28
    b358:	1f 91       	pop	r17
    b35a:	0f 91       	pop	r16
    b35c:	ff 90       	pop	r15
    b35e:	ef 90       	pop	r14
    b360:	df 90       	pop	r13
    b362:	cf 90       	pop	r12
    b364:	bf 90       	pop	r11
    b366:	af 90       	pop	r10
    b368:	9f 90       	pop	r9
    b36a:	8f 90       	pop	r8
    b36c:	7f 90       	pop	r7
    b36e:	08 95       	ret

0000b370 <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b370:	28 2f       	mov	r18, r24
    b372:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b374:	80 91 cc 0d 	lds	r24, 0x0DCC
    b378:	81 11       	cpse	r24, r1
    b37a:	04 c0       	rjmp	.+8      	; 0xb384 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b37c:	bf 01       	movw	r22, r30
    b37e:	82 2f       	mov	r24, r18
    b380:	0c 94 79 56 	jmp	0xacf2	; 0xacf2 <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b384:	82 30       	cpi	r24, 0x02	; 2
    b386:	21 f4       	brne	.+8      	; 0xb390 <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b388:	bf 01       	movw	r22, r30
    b38a:	82 2f       	mov	r24, r18
    b38c:	0c 94 37 56 	jmp	0xac6e	; 0xac6e <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b390:	84 30       	cpi	r24, 0x04	; 4
    b392:	31 f4       	brne	.+12     	; 0xb3a0 <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b394:	48 52       	subi	r20, 0x28	; 40
    b396:	51 09       	sbc	r21, r1
    b398:	bf 01       	movw	r22, r30
    b39a:	82 2f       	mov	r24, r18
    b39c:	0c 94 b6 56 	jmp	0xad6c	; 0xad6c <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b3a0:	80 91 d1 0d 	lds	r24, 0x0DD1
    b3a4:	63 e0       	ldi	r22, 0x03	; 3
    b3a6:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    b3aa:	99 23       	and	r25, r25
    b3ac:	39 f3       	breq	.-50     	; 0xb37c <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b3ae:	91 30       	cpi	r25, 0x01	; 1
    b3b0:	89 f7       	brne	.-30     	; 0xb394 <init_level_enemy+0x24>
    b3b2:	ea cf       	rjmp	.-44     	; 0xb388 <init_level_enemy+0x18>

0000b3b4 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b3b4:	28 2f       	mov	r18, r24
    b3b6:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b3b8:	80 91 cc 0d 	lds	r24, 0x0DCC
    b3bc:	81 30       	cpi	r24, 0x01	; 1
    b3be:	21 f4       	brne	.+8      	; 0xb3c8 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b3c0:	bf 01       	movw	r22, r30
    b3c2:	82 2f       	mov	r24, r18
    b3c4:	0c 94 f4 56 	jmp	0xade8	; 0xade8 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b3c8:	83 30       	cpi	r24, 0x03	; 3
    b3ca:	21 f4       	brne	.+8      	; 0xb3d4 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b3cc:	bf 01       	movw	r22, r30
    b3ce:	82 2f       	mov	r24, r18
    b3d0:	0c 94 2f 57 	jmp	0xae5e	; 0xae5e <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    b3d4:	85 30       	cpi	r24, 0x05	; 5
    b3d6:	21 f4       	brne	.+8      	; 0xb3e0 <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    b3d8:	bf 01       	movw	r22, r30
    b3da:	82 2f       	mov	r24, r18
    b3dc:	0c 94 6b 57 	jmp	0xaed6	; 0xaed6 <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    b3e0:	80 91 d1 0d 	lds	r24, 0x0DD1
    b3e4:	63 e0       	ldi	r22, 0x03	; 3
    b3e6:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    b3ea:	99 23       	and	r25, r25
    b3ec:	49 f3       	breq	.-46     	; 0xb3c0 <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b3ee:	91 30       	cpi	r25, 0x01	; 1
    b3f0:	99 f7       	brne	.-26     	; 0xb3d8 <init_space_enemy+0x24>
    b3f2:	ec cf       	rjmp	.-40     	; 0xb3cc <init_space_enemy+0x18>

0000b3f4 <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b3f4:	0f 93       	push	r16
    b3f6:	1f 93       	push	r17
    b3f8:	cf 93       	push	r28
    b3fa:	df 93       	push	r29
    b3fc:	00 d0       	rcall	.+0      	; 0xb3fe <spawn_enemy+0xa>
    b3fe:	00 d0       	rcall	.+0      	; 0xb400 <spawn_enemy+0xc>
    b400:	cd b7       	in	r28, 0x3d	; 61
    b402:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b404:	20 91 b7 0d 	lds	r18, 0x0DB7
    b408:	30 91 b8 0d 	lds	r19, 0x0DB8
    b40c:	28 3c       	cpi	r18, 0xC8	; 200
    b40e:	35 40       	sbci	r19, 0x05	; 5
    b410:	98 f5       	brcc	.+102    	; 0xb478 <spawn_enemy+0x84>
    b412:	27 eb       	ldi	r18, 0xB7	; 183
    b414:	3d e0       	ldi	r19, 0x0D	; 13
    b416:	10 e0       	ldi	r17, 0x00	; 0
    b418:	f9 01       	movw	r30, r18
    b41a:	e0 5e       	subi	r30, 0xE0	; 224
    b41c:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b41e:	50 81       	ld	r21, Z
    b420:	51 11       	cpse	r21, r1
    b422:	25 c0       	rjmp	.+74     	; 0xb46e <spawn_enemy+0x7a>
    b424:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b426:	50 81       	ld	r21, Z
    b428:	51 11       	cpse	r21, r1
    b42a:	21 c0       	rjmp	.+66     	; 0xb46e <spawn_enemy+0x7a>
    b42c:	04 2f       	mov	r16, r20
    b42e:	ab 01       	movw	r20, r22
    b430:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b432:	4b 83       	std	Y+3, r20	; 0x03
    b434:	5c 83       	std	Y+4, r21	; 0x04
    b436:	89 83       	std	Y+1, r24	; 0x01
    b438:	7a 83       	std	Y+2, r23	; 0x02
    b43a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    b43e:	4b 81       	ldd	r20, Y+3	; 0x03
    b440:	5c 81       	ldd	r21, Y+4	; 0x04
    b442:	69 81       	ldd	r22, Y+1	; 0x01
    b444:	7a 81       	ldd	r23, Y+2	; 0x02
    b446:	88 23       	and	r24, r24
    b448:	21 f0       	breq	.+8      	; 0xb452 <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b44a:	81 2f       	mov	r24, r17
    b44c:	0e 94 da 59 	call	0xb3b4	; 0xb3b4 <init_space_enemy>
    b450:	08 c0       	rjmp	.+16     	; 0xb462 <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b452:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b454:	01 11       	cpse	r16, r1
    b456:	03 c0       	rjmp	.+6      	; 0xb45e <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b458:	0e 94 b8 59 	call	0xb370	; 0xb370 <init_level_enemy>
    b45c:	02 c0       	rjmp	.+4      	; 0xb462 <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b45e:	0e 94 b1 58 	call	0xb162	; 0xb162 <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b462:	80 91 d2 0d 	lds	r24, 0x0DD2
    b466:	8f 5f       	subi	r24, 0xFF	; 255
    b468:	80 93 d2 0d 	sts	0x0DD2, r24
    b46c:	05 c0       	rjmp	.+10     	; 0xb478 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b46e:	1f 5f       	subi	r17, 0xFF	; 255
    b470:	2b 5c       	subi	r18, 0xCB	; 203
    b472:	3f 4f       	sbci	r19, 0xFF	; 255
    b474:	15 30       	cpi	r17, 0x05	; 5
    b476:	81 f6       	brne	.-96     	; 0xb418 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b478:	0f 90       	pop	r0
    b47a:	0f 90       	pop	r0
    b47c:	0f 90       	pop	r0
    b47e:	0f 90       	pop	r0
    b480:	df 91       	pop	r29
    b482:	cf 91       	pop	r28
    b484:	1f 91       	pop	r17
    b486:	0f 91       	pop	r16
    b488:	08 95       	ret

0000b48a <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b48a:	9f ef       	ldi	r25, 0xFF	; 255
    b48c:	98 0f       	add	r25, r24
    b48e:	9e 30       	cpi	r25, 0x0E	; 14
    b490:	28 f0       	brcs	.+10     	; 0xb49c <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    b492:	8f 50       	subi	r24, 0x0F	; 15
    b494:	8c 30       	cpi	r24, 0x0C	; 12
    b496:	20 f0       	brcs	.+8      	; 0xb4a0 <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b498:	80 e0       	ldi	r24, 0x00	; 0
    b49a:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b49c:	81 e0       	ldi	r24, 0x01	; 1
    b49e:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    b4a0:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b4a2:	08 95       	ret

0000b4a4 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b4a4:	af 92       	push	r10
    b4a6:	bf 92       	push	r11
    b4a8:	cf 92       	push	r12
    b4aa:	df 92       	push	r13
    b4ac:	ef 92       	push	r14
    b4ae:	ff 92       	push	r15
    b4b0:	0f 93       	push	r16
    b4b2:	1f 93       	push	r17
    b4b4:	cf 93       	push	r28
    b4b6:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b4b8:	66 e1       	ldi	r22, 0x16	; 22
    b4ba:	82 e0       	ldi	r24, 0x02	; 2
    b4bc:	0e 94 69 4f 	call	0x9ed2	; 0x9ed2 <LBRandom>
    b4c0:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b4c2:	80 91 c8 0d 	lds	r24, 0x0DC8
    b4c6:	8f 5f       	subi	r24, 0xFF	; 255
    b4c8:	80 93 c8 0d 	sts	0x0DC8, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b4cc:	20 91 d3 0d 	lds	r18, 0x0DD3
    b4d0:	62 2f       	mov	r22, r18
    b4d2:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    b4d6:	89 2f       	mov	r24, r25
    b4d8:	90 e0       	ldi	r25, 0x00	; 0
    b4da:	30 e0       	ldi	r19, 0x00	; 0
    b4dc:	21 50       	subi	r18, 0x01	; 1
    b4de:	31 09       	sbc	r19, r1
    b4e0:	82 17       	cp	r24, r18
    b4e2:	93 07       	cpc	r25, r19
    b4e4:	31 f4       	brne	.+12     	; 0xb4f2 <append_tile_column+0x4e>
    b4e6:	bb 24       	eor	r11, r11
    b4e8:	b3 94       	inc	r11
    b4ea:	80 91 d2 0d 	lds	r24, 0x0DD2
    b4ee:	85 30       	cpi	r24, 0x05	; 5
    b4f0:	08 f0       	brcs	.+2      	; 0xb4f4 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b4f2:	b1 2c       	mov	r11, r1
    b4f4:	00 e0       	ldi	r16, 0x00	; 0
    b4f6:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b4f8:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    b4fa:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b4fc:	2e e1       	ldi	r18, 0x1E	; 30
    b4fe:	c2 2e       	mov	r12, r18
    b500:	d1 2c       	mov	r13, r1
    b502:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b504:	40 91 bf 0d 	lds	r20, 0x0DBF
    b508:	46 95       	lsr	r20
    b50a:	46 95       	lsr	r20
    b50c:	46 95       	lsr	r20
    b50e:	40 0f       	add	r20, r16
    b510:	60 91 c0 0d 	lds	r22, 0x0DC0
    b514:	80 91 d9 0f 	lds	r24, 0x0FD9
    b518:	90 91 da 0f 	lds	r25, 0x0FDA
    b51c:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    b520:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b522:	28 2f       	mov	r18, r24
    b524:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b526:	80 91 b3 0c 	lds	r24, 0x0CB3
    b52a:	86 95       	lsr	r24
    b52c:	86 95       	lsr	r24
    b52e:	86 95       	lsr	r24
    b530:	a8 01       	movw	r20, r16
    b532:	48 0f       	add	r20, r24
    b534:	51 1d       	adc	r21, r1
    b536:	ca 01       	movw	r24, r20
    b538:	b6 01       	movw	r22, r12
    b53a:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b53e:	a9 01       	movw	r20, r18
    b540:	68 2f       	mov	r22, r24
    b542:	80 91 c4 0d 	lds	r24, 0x0DC4
    b546:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b54a:	bb 20       	and	r11, r11
    b54c:	81 f0       	breq	.+32     	; 0xb56e <append_tile_column+0xca>
    b54e:	01 15       	cp	r16, r1
    b550:	11 05       	cpc	r17, r1
    b552:	69 f0       	breq	.+26     	; 0xb56e <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b554:	81 ef       	ldi	r24, 0xF1	; 241
    b556:	8e 0d       	add	r24, r14
    b558:	85 30       	cpi	r24, 0x05	; 5
    b55a:	30 f0       	brcs	.+12     	; 0xb568 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b55c:	8f ef       	ldi	r24, 0xFF	; 255
    b55e:	8e 0d       	add	r24, r14
    b560:	8e 30       	cpi	r24, 0x0E	; 14
    b562:	08 f4       	brcc	.+2      	; 0xb566 <append_tile_column+0xc2>
    b564:	60 c0       	rjmp	.+192    	; 0xb626 <append_tile_column+0x182>
    b566:	03 c0       	rjmp	.+6      	; 0xb56e <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b568:	c1 11       	cpse	r28, r1
    b56a:	f8 cf       	rjmp	.-16     	; 0xb55c <append_tile_column+0xb8>
    b56c:	c0 2f       	mov	r28, r16
    b56e:	0f 5f       	subi	r16, 0xFF	; 255
    b570:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b572:	09 31       	cpi	r16, 0x19	; 25
    b574:	11 05       	cpc	r17, r1
    b576:	29 f6       	brne	.-118    	; 0xb502 <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b578:	bb 20       	and	r11, r11
    b57a:	51 f0       	breq	.+20     	; 0xb590 <append_tile_column+0xec>
    b57c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    b580:	88 23       	and	r24, r24
    b582:	31 f0       	breq	.+12     	; 0xb590 <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b584:	ff 0c       	add	r15, r15
    b586:	ff 0c       	add	r15, r15
    b588:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b58a:	6f 2d       	mov	r22, r15
    b58c:	70 e0       	ldi	r23, 0x00	; 0
    b58e:	32 c0       	rjmp	.+100    	; 0xb5f4 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b590:	cc 23       	and	r28, r28
    b592:	f1 f0       	breq	.+60     	; 0xb5d0 <append_tile_column+0x12c>
    b594:	80 91 cc 0d 	lds	r24, 0x0DCC
    b598:	90 91 bf 0d 	lds	r25, 0x0DBF
    b59c:	20 91 b7 0d 	lds	r18, 0x0DB7
    b5a0:	30 91 b8 0d 	lds	r19, 0x0DB8
    b5a4:	6c 2f       	mov	r22, r28
    b5a6:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b5a8:	96 95       	lsr	r25
    b5aa:	96 95       	lsr	r25
    b5ac:	96 95       	lsr	r25
    b5ae:	69 0f       	add	r22, r25
    b5b0:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b5b2:	82 30       	cpi	r24, 0x02	; 2
    b5b4:	19 f4       	brne	.+6      	; 0xb5bc <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b5b6:	61 50       	subi	r22, 0x01	; 1
    b5b8:	71 09       	sbc	r23, r1
    b5ba:	02 c0       	rjmp	.+4      	; 0xb5c0 <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b5bc:	6f 5f       	subi	r22, 0xFF	; 255
    b5be:	7f 4f       	sbci	r23, 0xFF	; 255
    b5c0:	93 e0       	ldi	r25, 0x03	; 3
    b5c2:	66 0f       	add	r22, r22
    b5c4:	77 1f       	adc	r23, r23
    b5c6:	9a 95       	dec	r25
    b5c8:	e1 f7       	brne	.-8      	; 0xb5c2 <append_tile_column+0x11e>
    b5ca:	41 e0       	ldi	r20, 0x01	; 1
    b5cc:	c9 01       	movw	r24, r18
    b5ce:	17 c0       	rjmp	.+46     	; 0xb5fe <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b5d0:	dd 23       	and	r29, r29
    b5d2:	c9 f0       	breq	.+50     	; 0xb606 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b5d4:	80 91 bf 0d 	lds	r24, 0x0DBF
    b5d8:	86 95       	lsr	r24
    b5da:	86 95       	lsr	r24
    b5dc:	86 95       	lsr	r24
    b5de:	6d 2f       	mov	r22, r29
    b5e0:	70 e0       	ldi	r23, 0x00	; 0
    b5e2:	68 0f       	add	r22, r24
    b5e4:	71 1d       	adc	r23, r1
    b5e6:	61 50       	subi	r22, 0x01	; 1
    b5e8:	71 09       	sbc	r23, r1
    b5ea:	83 e0       	ldi	r24, 0x03	; 3
    b5ec:	66 0f       	add	r22, r22
    b5ee:	77 1f       	adc	r23, r23
    b5f0:	8a 95       	dec	r24
    b5f2:	e1 f7       	brne	.-8      	; 0xb5ec <append_tile_column+0x148>
    b5f4:	80 91 b7 0d 	lds	r24, 0x0DB7
    b5f8:	90 91 b8 0d 	lds	r25, 0x0DB8
    b5fc:	40 e0       	ldi	r20, 0x00	; 0
    b5fe:	80 52       	subi	r24, 0x20	; 32
    b600:	9f 4f       	sbci	r25, 0xFF	; 255
    b602:	0e 94 fa 59 	call	0xb3f4	; 0xb3f4 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b606:	80 91 c0 0d 	lds	r24, 0x0DC0
    b60a:	8f 5f       	subi	r24, 0xFF	; 255
    b60c:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_dest_x++;
    b610:	80 91 c4 0d 	lds	r24, 0x0DC4
    b614:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b616:	80 32       	cpi	r24, 0x20	; 32
    b618:	18 f4       	brcc	.+6      	; 0xb620 <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b61a:	80 93 c4 0d 	sts	0x0DC4, r24
    b61e:	07 c0       	rjmp	.+14     	; 0xb62e <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b620:	10 92 c4 0d 	sts	0x0DC4, r1
    b624:	04 c0       	rjmp	.+8      	; 0xb62e <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b626:	d1 11       	cpse	r29, r1
    b628:	a2 cf       	rjmp	.-188    	; 0xb56e <append_tile_column+0xca>
    b62a:	da 2d       	mov	r29, r10
    b62c:	a0 cf       	rjmp	.-192    	; 0xb56e <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b62e:	df 91       	pop	r29
    b630:	cf 91       	pop	r28
    b632:	1f 91       	pop	r17
    b634:	0f 91       	pop	r16
    b636:	ff 90       	pop	r15
    b638:	ef 90       	pop	r14
    b63a:	df 90       	pop	r13
    b63c:	cf 90       	pop	r12
    b63e:	bf 90       	pop	r11
    b640:	af 90       	pop	r10
    b642:	08 95       	ret

0000b644 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b644:	80 91 b7 0d 	lds	r24, 0x0DB7
    b648:	90 91 b8 0d 	lds	r25, 0x0DB8
    b64c:	01 96       	adiw	r24, 0x01	; 1
    b64e:	90 93 b8 0d 	sts	0x0DB8, r25
    b652:	80 93 b7 0d 	sts	0x0DB7, r24
	Scroll(1,0);
    b656:	60 e0       	ldi	r22, 0x00	; 0
    b658:	81 e0       	ldi	r24, 0x01	; 1
    b65a:	0e 94 a8 4c 	call	0x9950	; 0x9950 <Scroll>
	if (++game.scroll_x == 8)
    b65e:	80 91 c2 0d 	lds	r24, 0x0DC2
    b662:	8f 5f       	subi	r24, 0xFF	; 255
    b664:	88 30       	cpi	r24, 0x08	; 8
    b666:	19 f0       	breq	.+6      	; 0xb66e <move_camera_x+0x2a>
    b668:	80 93 c2 0d 	sts	0x0DC2, r24
    b66c:	08 95       	ret
	{
		game.scroll_x = 0;
    b66e:	10 92 c2 0d 	sts	0x0DC2, r1
		append_tile_column();
    b672:	0c 94 52 5a 	jmp	0xb4a4	; 0xb4a4 <append_tile_column>

0000b676 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b676:	82 e0       	ldi	r24, 0x02	; 2
    b678:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b67c:	85 e0       	ldi	r24, 0x05	; 5
    b67e:	80 93 30 0e 	sts	0x0E30, r24
	game.player.run.anims = run_anim;
    b682:	e9 e3       	ldi	r30, 0x39	; 57
    b684:	f0 e1       	ldi	r31, 0x10	; 16
    b686:	f0 93 35 0e 	sts	0x0E35, r31
    b68a:	e0 93 34 0e 	sts	0x0E34, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b68e:	82 e2       	ldi	r24, 0x22	; 34
    b690:	93 e3       	ldi	r25, 0x33	; 51
    b692:	91 83       	std	Z+1, r25	; 0x01
    b694:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b696:	88 e1       	ldi	r24, 0x18	; 24
    b698:	93 e3       	ldi	r25, 0x33	; 51
    b69a:	93 83       	std	Z+3, r25	; 0x03
    b69c:	82 83       	std	Z+2, r24	; 0x02
    b69e:	08 95       	ret

0000b6a0 <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b6a0:	a7 eb       	ldi	r26, 0xB7	; 183
    b6a2:	bd e0       	ldi	r27, 0x0D	; 13
    b6a4:	90 93 da 0f 	sts	0x0FDA, r25
    b6a8:	80 93 d9 0f 	sts	0x0FD9, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b6ac:	fc 01       	movw	r30, r24
    b6ae:	24 91       	lpm	r18, Z
    b6b0:	56 96       	adiw	r26, 0x16	; 22
    b6b2:	2c 93       	st	X, r18
    b6b4:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b6b6:	9c 01       	movw	r18, r24
    b6b8:	2f 5f       	subi	r18, 0xFF	; 255
    b6ba:	3f 4f       	sbci	r19, 0xFF	; 255
    b6bc:	f9 01       	movw	r30, r18
    b6be:	44 91       	lpm	r20, Z
    b6c0:	57 96       	adiw	r26, 0x17	; 23
    b6c2:	4c 93       	st	X, r20
    b6c4:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b6c6:	fc 01       	movw	r30, r24
    b6c8:	84 91       	lpm	r24, Z
    b6ca:	98 2f       	mov	r25, r24
    b6cc:	99 0f       	add	r25, r25
    b6ce:	99 0f       	add	r25, r25
    b6d0:	89 0f       	add	r24, r25
    b6d2:	1f 96       	adiw	r26, 0x0f	; 15
    b6d4:	8c 93       	st	X, r24
    b6d6:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b6d8:	f9 01       	movw	r30, r18
    b6da:	24 91       	lpm	r18, Z
    b6dc:	82 2f       	mov	r24, r18
    b6de:	88 0f       	add	r24, r24
    b6e0:	88 0f       	add	r24, r24
    b6e2:	28 0f       	add	r18, r24
    b6e4:	50 96       	adiw	r26, 0x10	; 16
    b6e6:	2c 93       	st	X, r18
    b6e8:	08 95       	ret

0000b6ea <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b6ea:	cf 92       	push	r12
    b6ec:	df 92       	push	r13
    b6ee:	ef 92       	push	r14
    b6f0:	ff 92       	push	r15
    b6f2:	0f 93       	push	r16
    b6f4:	1f 93       	push	r17
    b6f6:	cf 93       	push	r28
    b6f8:	df 93       	push	r29
    b6fa:	7c 01       	movw	r14, r24
    b6fc:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b6fe:	88 e0       	ldi	r24, 0x08	; 8
    b700:	48 9f       	mul	r20, r24
    b702:	80 01       	movw	r16, r0
    b704:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b706:	c0 e0       	ldi	r28, 0x00	; 0
    b708:	cd 17       	cp	r28, r29
    b70a:	09 f4       	brne	.+2      	; 0xb70e <on_solid_ground+0x24>
    b70c:	41 c0       	rjmp	.+130    	; 0xb790 <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b70e:	f7 01       	movw	r30, r14
    b710:	42 81       	ldd	r20, Z+2	; 0x02
    b712:	53 81       	ldd	r21, Z+3	; 0x03
    b714:	40 0f       	add	r20, r16
    b716:	51 1f       	adc	r21, r17
    b718:	83 e0       	ldi	r24, 0x03	; 3
    b71a:	56 95       	lsr	r21
    b71c:	47 95       	ror	r20
    b71e:	8a 95       	dec	r24
    b720:	e1 f7       	brne	.-8      	; 0xb71a <on_solid_ground+0x30>
    b722:	60 81       	ld	r22, Z
    b724:	71 81       	ldd	r23, Z+1	; 0x01
    b726:	93 e0       	ldi	r25, 0x03	; 3
    b728:	76 95       	lsr	r23
    b72a:	67 95       	ror	r22
    b72c:	9a 95       	dec	r25
    b72e:	e1 f7       	brne	.-8      	; 0xb728 <on_solid_ground+0x3e>
    b730:	6c 0f       	add	r22, r28
    b732:	80 91 d9 0f 	lds	r24, 0x0FD9
    b736:	90 91 da 0f 	lds	r25, 0x0FDA
    b73a:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    b73e:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b740:	f7 01       	movw	r30, r14
    b742:	42 81       	ldd	r20, Z+2	; 0x02
    b744:	53 81       	ldd	r21, Z+3	; 0x03
    b746:	40 0f       	add	r20, r16
    b748:	51 1f       	adc	r21, r17
    b74a:	23 e0       	ldi	r18, 0x03	; 3
    b74c:	56 95       	lsr	r21
    b74e:	47 95       	ror	r20
    b750:	2a 95       	dec	r18
    b752:	e1 f7       	brne	.-8      	; 0xb74c <on_solid_ground+0x62>
    b754:	20 81       	ld	r18, Z
    b756:	31 81       	ldd	r19, Z+1	; 0x01
    b758:	29 5f       	subi	r18, 0xF9	; 249
    b75a:	3f 4f       	sbci	r19, 0xFF	; 255
    b75c:	53 e0       	ldi	r21, 0x03	; 3
    b75e:	36 95       	lsr	r19
    b760:	27 95       	ror	r18
    b762:	5a 95       	dec	r21
    b764:	e1 f7       	brne	.-8      	; 0xb75e <on_solid_ground+0x74>
    b766:	6c 2f       	mov	r22, r28
    b768:	62 0f       	add	r22, r18
    b76a:	80 91 d9 0f 	lds	r24, 0x0FD9
    b76e:	90 91 da 0f 	lds	r25, 0x0FDA
    b772:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    b776:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b778:	8c 2d       	mov	r24, r12
    b77a:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    b77e:	81 11       	cpse	r24, r1
    b780:	09 c0       	rjmp	.+18     	; 0xb794 <on_solid_ground+0xaa>
    b782:	8d 2d       	mov	r24, r13
    b784:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    b788:	81 11       	cpse	r24, r1
    b78a:	04 c0       	rjmp	.+8      	; 0xb794 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b78c:	cf 5f       	subi	r28, 0xFF	; 255
    b78e:	bc cf       	rjmp	.-136    	; 0xb708 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b790:	80 e0       	ldi	r24, 0x00	; 0
    b792:	01 c0       	rjmp	.+2      	; 0xb796 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b794:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b796:	df 91       	pop	r29
    b798:	cf 91       	pop	r28
    b79a:	1f 91       	pop	r17
    b79c:	0f 91       	pop	r16
    b79e:	ff 90       	pop	r15
    b7a0:	ef 90       	pop	r14
    b7a2:	df 90       	pop	r13
    b7a4:	cf 90       	pop	r12
    b7a6:	08 95       	ret

0000b7a8 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b7a8:	9c 01       	movw	r18, r24
    b7aa:	80 91 f9 0c 	lds	r24, 0x0CF9
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b7ae:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b7b0:	83 30       	cpi	r24, 0x03	; 3
    b7b2:	08 f0       	brcs	.+2      	; 0xb7b6 <find_shot_slot+0xe>
    b7b4:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b7b6:	f9 01       	movw	r30, r18
    b7b8:	48 9f       	mul	r20, r24
    b7ba:	e0 0d       	add	r30, r0
    b7bc:	f1 1d       	adc	r31, r1
    b7be:	11 24       	eor	r1, r1
    b7c0:	51 8d       	ldd	r21, Z+25	; 0x19
    b7c2:	91 e0       	ldi	r25, 0x01	; 1
    b7c4:	98 0f       	add	r25, r24
    b7c6:	51 11       	cpse	r21, r1
    b7c8:	03 c0       	rjmp	.+6      	; 0xb7d0 <find_shot_slot+0x28>
		{
			return i++;
    b7ca:	90 93 f9 0c 	sts	0x0CF9, r25
    b7ce:	08 95       	ret
		}
		i++;
    b7d0:	89 2f       	mov	r24, r25
	}
    b7d2:	ee cf       	rjmp	.-36     	; 0xb7b0 <find_shot_slot+0x8>

0000b7d4 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b7d4:	bf 92       	push	r11
    b7d6:	cf 92       	push	r12
    b7d8:	df 92       	push	r13
    b7da:	ef 92       	push	r14
    b7dc:	ff 92       	push	r15
    b7de:	0f 93       	push	r16
    b7e0:	1f 93       	push	r17
    b7e2:	cf 93       	push	r28
    b7e4:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_B && player->active_shots < MAX_PLAYER_SHOTS)
    b7e6:	fc 01       	movw	r30, r24
    b7e8:	ec 58       	subi	r30, 0x8C	; 140
    b7ea:	ff 4f       	sbci	r31, 0xFF	; 255
    b7ec:	20 81       	ld	r18, Z
    b7ee:	20 ff       	sbrs	r18, 0
    b7f0:	a7 c0       	rjmp	.+334    	; 0xb940 <update_shot+0x16c>
    b7f2:	fc 01       	movw	r30, r24
    b7f4:	27 81       	ldd	r18, Z+7	; 0x07
    b7f6:	23 30       	cpi	r18, 0x03	; 3
    b7f8:	08 f0       	brcs	.+2      	; 0xb7fc <update_shot+0x28>
    b7fa:	a2 c0       	rjmp	.+324    	; 0xb940 <update_shot+0x16c>
    b7fc:	16 2f       	mov	r17, r22
    b7fe:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    b800:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <find_shot_slot>
    b804:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    b806:	e8 2e       	mov	r14, r24
    b808:	f1 2c       	mov	r15, r1
    b80a:	fe 01       	movw	r30, r28
    b80c:	24 e1       	ldi	r18, 0x14	; 20
    b80e:	82 9f       	mul	r24, r18
    b810:	e0 0d       	add	r30, r0
    b812:	f1 1d       	adc	r31, r1
    b814:	11 24       	eor	r1, r1
    b816:	87 89       	ldd	r24, Z+23	; 0x17
    b818:	86 30       	cpi	r24, 0x06	; 6
    b81a:	29 f4       	brne	.+10     	; 0xb826 <update_shot+0x52>
    b81c:	8a 81       	ldd	r24, Y+2	; 0x02
    b81e:	9b 81       	ldd	r25, Y+3	; 0x03
    b820:	04 97       	sbiw	r24, 0x04	; 4
    b822:	08 f4       	brcc	.+2      	; 0xb826 <update_shot+0x52>
    b824:	8d c0       	rjmp	.+282    	; 0xb940 <update_shot+0x16c>
		SFX_PLAYER_SHOOT;
    b826:	2f ef       	ldi	r18, 0xFF	; 255
    b828:	43 e2       	ldi	r20, 0x23	; 35
    b82a:	63 e0       	ldi	r22, 0x03	; 3
    b82c:	82 e0       	ldi	r24, 0x02	; 2
    b82e:	0e 94 cc 42 	call	0x8598	; 0x8598 <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b832:	84 e1       	ldi	r24, 0x14	; 20
    b834:	8e 9d       	mul	r24, r14
    b836:	60 01       	movw	r12, r0
    b838:	8f 9d       	mul	r24, r15
    b83a:	d0 0c       	add	r13, r0
    b83c:	11 24       	eor	r1, r1
    b83e:	c6 01       	movw	r24, r12
    b840:	4c 96       	adiw	r24, 0x1c	; 28
    b842:	8c 0f       	add	r24, r28
    b844:	9d 1f       	adc	r25, r29
    b846:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    b84a:	40 e0       	ldi	r20, 0x00	; 0
    b84c:	bc 01       	movw	r22, r24
    b84e:	8b 2d       	mov	r24, r11
    b850:	81 0f       	add	r24, r17
    b852:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
		player->shot[idx].active = 1;
    b856:	8e 01       	movw	r16, r28
    b858:	0c 0d       	add	r16, r12
    b85a:	1d 1d       	adc	r17, r13
    b85c:	81 e0       	ldi	r24, 0x01	; 1
    b85e:	f8 01       	movw	r30, r16
    b860:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    b862:	ca 80       	ldd	r12, Y+2	; 0x02
    b864:	db 80       	ldd	r13, Y+3	; 0x03
    b866:	f8 ef       	ldi	r31, 0xF8	; 248
    b868:	cf 22       	and	r12, r31
    b86a:	f8 01       	movw	r30, r16
    b86c:	83 8d       	ldd	r24, Z+27	; 0x1b
    b86e:	c8 0e       	add	r12, r24
    b870:	d1 1c       	adc	r13, r1
    b872:	87 fd       	sbrc	r24, 7
    b874:	da 94       	dec	r13
    b876:	d3 8a       	std	Z+19, r13	; 0x13
    b878:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    b87a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    b87e:	28 81       	ld	r18, Y
    b880:	39 81       	ldd	r19, Y+1	; 0x01
    b882:	88 23       	and	r24, r24
    b884:	e1 f0       	breq	.+56     	; 0xb8be <update_shot+0xea>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b886:	8b 85       	ldd	r24, Y+11	; 0x0b
    b888:	f8 e0       	ldi	r31, 0x08	; 8
    b88a:	8f 9f       	mul	r24, r31
    b88c:	20 0d       	add	r18, r0
    b88e:	31 1d       	adc	r19, r1
    b890:	11 24       	eor	r1, r1
    b892:	f8 01       	movw	r30, r16
    b894:	31 8b       	std	Z+17, r19	; 0x11
    b896:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b898:	82 8d       	ldd	r24, Z+26	; 0x1a
    b89a:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    b89c:	87 89       	ldd	r24, Z+23	; 0x17
    b89e:	86 30       	cpi	r24, 0x06	; 6
    b8a0:	09 f0       	breq	.+2      	; 0xb8a4 <update_shot+0xd0>
    b8a2:	4b c0       	rjmp	.+150    	; 0xb93a <update_shot+0x166>
    b8a4:	fe 01       	movw	r30, r28
    b8a6:	24 e1       	ldi	r18, 0x14	; 20
    b8a8:	b2 9e       	mul	r11, r18
    b8aa:	e0 0d       	add	r30, r0
    b8ac:	f1 1d       	adc	r31, r1
    b8ae:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    b8b0:	84 89       	ldd	r24, Z+20	; 0x14
    b8b2:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    b8b4:	81 11       	cpse	r24, r1
    b8b6:	01 c0       	rjmp	.+2      	; 0xb8ba <update_shot+0xe6>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    b8b8:	8f e7       	ldi	r24, 0x7F	; 127
    b8ba:	84 8b       	std	Z+20, r24	; 0x14
    b8bc:	3e c0       	rjmp	.+124    	; 0xb93a <update_shot+0x166>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    b8be:	88 85       	ldd	r24, Y+8	; 0x08
    b8c0:	82 fd       	sbrc	r24, 2
    b8c2:	06 c0       	rjmp	.+12     	; 0xb8d0 <update_shot+0xfc>
			{
				player->shot[idx].shared.y += 8;
    b8c4:	88 e0       	ldi	r24, 0x08	; 8
    b8c6:	c8 0e       	add	r12, r24
    b8c8:	d1 1c       	adc	r13, r1
    b8ca:	f8 01       	movw	r30, r16
    b8cc:	d3 8a       	std	Z+19, r13	; 0x13
    b8ce:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    b8d0:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b8d2:	94 e1       	ldi	r25, 0x14	; 20
    b8d4:	9e 9d       	mul	r25, r14
    b8d6:	f0 01       	movw	r30, r0
    b8d8:	9f 9d       	mul	r25, r15
    b8da:	f0 0d       	add	r31, r0
    b8dc:	11 24       	eor	r1, r1
    b8de:	ec 0f       	add	r30, r28
    b8e0:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    b8e2:	81 30       	cpi	r24, 0x01	; 1
    b8e4:	a9 f4       	brne	.+42     	; 0xb910 <update_shot+0x13c>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b8e6:	20 5f       	subi	r18, 0xF0	; 240
    b8e8:	3f 4f       	sbci	r19, 0xFF	; 255
    b8ea:	31 8b       	std	Z+17, r19	; 0x11
    b8ec:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b8ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    b8f0:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b8f2:	27 89       	ldd	r18, Z+23	; 0x17
    b8f4:	24 30       	cpi	r18, 0x04	; 4
    b8f6:	09 f5       	brne	.+66     	; 0xb93a <update_shot+0x166>
    b8f8:	ff ef       	ldi	r31, 0xFF	; 255
    b8fa:	ef 1a       	sub	r14, r31
    b8fc:	ff 0a       	sbc	r15, r31
    b8fe:	9e 9d       	mul	r25, r14
    b900:	f0 01       	movw	r30, r0
    b902:	9f 9d       	mul	r25, r15
    b904:	f0 0d       	add	r31, r0
    b906:	11 24       	eor	r1, r1
    b908:	ec 0f       	add	r30, r28
    b90a:	fd 1f       	adc	r31, r29
    b90c:	81 95       	neg	r24
    b90e:	14 c0       	rjmp	.+40     	; 0xb938 <update_shot+0x164>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    b910:	28 50       	subi	r18, 0x08	; 8
    b912:	31 09       	sbc	r19, r1
    b914:	31 8b       	std	Z+17, r19	; 0x11
    b916:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    b918:	82 8d       	ldd	r24, Z+26	; 0x1a
    b91a:	81 95       	neg	r24
    b91c:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b91e:	27 89       	ldd	r18, Z+23	; 0x17
    b920:	24 30       	cpi	r18, 0x04	; 4
    b922:	59 f4       	brne	.+22     	; 0xb93a <update_shot+0x166>
    b924:	2f ef       	ldi	r18, 0xFF	; 255
    b926:	e2 1a       	sub	r14, r18
    b928:	f2 0a       	sbc	r15, r18
    b92a:	9e 9d       	mul	r25, r14
    b92c:	f0 01       	movw	r30, r0
    b92e:	9f 9d       	mul	r25, r15
    b930:	f0 0d       	add	r31, r0
    b932:	11 24       	eor	r1, r1
    b934:	ec 0f       	add	r30, r28
    b936:	fd 1f       	adc	r31, r29
    b938:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    b93a:	8f 81       	ldd	r24, Y+7	; 0x07
    b93c:	8f 5f       	subi	r24, 0xFF	; 255
    b93e:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    b940:	df 91       	pop	r29
    b942:	cf 91       	pop	r28
    b944:	1f 91       	pop	r17
    b946:	0f 91       	pop	r16
    b948:	ff 90       	pop	r15
    b94a:	ef 90       	pop	r14
    b94c:	df 90       	pop	r13
    b94e:	cf 90       	pop	r12
    b950:	bf 90       	pop	r11
    b952:	08 95       	ret

0000b954 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    b954:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    b956:	40 81       	ld	r20, Z
    b958:	51 81       	ldd	r21, Z+1	; 0x01
    b95a:	20 91 b7 0d 	lds	r18, 0x0DB7
    b95e:	30 91 b8 0d 	lds	r19, 0x0DB8
    b962:	42 17       	cp	r20, r18
    b964:	53 07       	cpc	r21, r19
    b966:	08 f1       	brcs	.+66     	; 0xb9aa <out_of_bounds+0x56>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    b968:	48 5f       	subi	r20, 0xF8	; 248
    b96a:	5f 4f       	sbci	r21, 0xFF	; 255
    b96c:	20 52       	subi	r18, 0x20	; 32
    b96e:	3f 4f       	sbci	r19, 0xFF	; 255
    b970:	24 17       	cp	r18, r20
    b972:	35 07       	cpc	r19, r21
    b974:	d0 f0       	brcs	.+52     	; 0xb9aa <out_of_bounds+0x56>
	if (s->y < game.camera_y) return 1;
    b976:	42 81       	ldd	r20, Z+2	; 0x02
    b978:	53 81       	ldd	r21, Z+3	; 0x03
    b97a:	20 91 bf 0d 	lds	r18, 0x0DBF
    b97e:	30 e0       	ldi	r19, 0x00	; 0
    b980:	42 17       	cp	r20, r18
    b982:	53 07       	cpc	r21, r19
    b984:	90 f0       	brcs	.+36     	; 0xb9aa <out_of_bounds+0x56>
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
    b986:	c9 01       	movw	r24, r18
    b988:	01 96       	adiw	r24, 0x01	; 1
    b98a:	48 17       	cp	r20, r24
    b98c:	59 07       	cpc	r21, r25
    b98e:	18 f4       	brcc	.+6      	; 0xb996 <out_of_bounds+0x42>
    b990:	84 81       	ldd	r24, Z+4	; 0x04
    b992:	81 11       	cpse	r24, r1
    b994:	0a c0       	rjmp	.+20     	; 0xb9aa <out_of_bounds+0x56>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    b996:	48 5f       	subi	r20, 0xF8	; 248
    b998:	5f 4f       	sbci	r21, 0xFF	; 255
    b99a:	28 53       	subi	r18, 0x38	; 56
    b99c:	3f 4f       	sbci	r19, 0xFF	; 255
    b99e:	81 e0       	ldi	r24, 0x01	; 1
    b9a0:	24 17       	cp	r18, r20
    b9a2:	35 07       	cpc	r19, r21
    b9a4:	18 f0       	brcs	.+6      	; 0xb9ac <out_of_bounds+0x58>
    b9a6:	80 e0       	ldi	r24, 0x00	; 0
    b9a8:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    b9aa:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    b9ac:	08 95       	ret

0000b9ae <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    b9ae:	40 91 d2 0d 	lds	r20, 0x0DD2
    b9b2:	80 e0       	ldi	r24, 0x00	; 0
    b9b4:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    b9b6:	50 e1       	ldi	r21, 0x10	; 16
    b9b8:	9c 01       	movw	r18, r24
    b9ba:	29 54       	subi	r18, 0x49	; 73
    b9bc:	32 4f       	sbci	r19, 0xF2	; 242
    b9be:	d9 01       	movw	r26, r18
    b9c0:	a0 5e       	subi	r26, 0xE0	; 224
    b9c2:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    b9c4:	6c 91       	ld	r22, X
    b9c6:	66 23       	and	r22, r22
    b9c8:	31 f0       	breq	.+12     	; 0xb9d6 <explode_all_enemies+0x28>
    b9ca:	f9 01       	movw	r30, r18
    b9cc:	ef 5d       	subi	r30, 0xDF	; 223
    b9ce:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    b9d0:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    b9d2:	1c 92       	st	X, r1
			game.active_enemies--;
    b9d4:	41 50       	subi	r20, 0x01	; 1
    b9d6:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b9d8:	89 30       	cpi	r24, 0x09	; 9
    b9da:	21 e0       	ldi	r18, 0x01	; 1
    b9dc:	92 07       	cpc	r25, r18
    b9de:	61 f7       	brne	.-40     	; 0xb9b8 <explode_all_enemies+0xa>
    b9e0:	40 93 d2 0d 	sts	0x0DD2, r20
    b9e4:	08 95       	ret

0000b9e6 <handle_music_toggle>:
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
}

char music_toggle_pressed(JoyPadState* p)
{
	return (p->pressed & BTN_SELECT);
    b9e6:	fc 01       	movw	r30, r24
    b9e8:	80 81       	ld	r24, Z
	}
}

void handle_music_toggle(JoyPadState* p)
{
	if (music_toggle_pressed(p))
    b9ea:	82 ff       	sbrs	r24, 2
    b9ec:	07 c0       	rjmp	.+14     	; 0xb9fc <handle_music_toggle+0x16>
	{
		if (IsSongPlaying())
    b9ee:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <IsSongPlaying>
    b9f2:	81 11       	cpse	r24, r1
		{
			StopSong();
    b9f4:	0c 94 be 41 	jmp	0x837c	; 0x837c <StopSong>
		}
		else
		{
			ResumeSong();
    b9f8:	0c 94 cc 41 	jmp	0x8398	; 0x8398 <ResumeSong>
    b9fc:	08 95       	ret

0000b9fe <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    b9fe:	0f 93       	push	r16
    ba00:	1f 93       	push	r17
    ba02:	cf 93       	push	r28
    ba04:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    ba06:	20 91 d0 0d 	lds	r18, 0x0DD0
    ba0a:	22 30       	cpi	r18, 0x02	; 2
    ba0c:	b9 f5       	brne	.+110    	; 0xba7c <handle_demo_play+0x7e>
    ba0e:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    ba10:	8c 01       	movw	r16, r24
    ba12:	0c 58       	subi	r16, 0x8C	; 140
    ba14:	1f 4f       	sbci	r17, 0xFF	; 255
    ba16:	f8 01       	movw	r30, r16
    ba18:	11 82       	std	Z+1, r1	; 0x01
    ba1a:	10 82       	st	Z, r1
		if (is_space())
    ba1c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    ba20:	88 23       	and	r24, r24
    ba22:	69 f0       	breq	.+26     	; 0xba3e <handle_demo_play+0x40>
		{
			if (game.time < 2)
    ba24:	80 91 bd 0d 	lds	r24, 0x0DBD
    ba28:	90 91 be 0d 	lds	r25, 0x0DBE
    ba2c:	02 97       	sbiw	r24, 0x02	; 2
    ba2e:	d0 f4       	brcc	.+52     	; 0xba64 <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    ba30:	c8 58       	subi	r28, 0x88	; 136
    ba32:	df 4f       	sbci	r29, 0xFF	; 255
    ba34:	80 e1       	ldi	r24, 0x10	; 16
    ba36:	90 e0       	ldi	r25, 0x00	; 0
    ba38:	99 83       	std	Y+1, r25	; 0x01
    ba3a:	88 83       	st	Y, r24
    ba3c:	13 c0       	rjmp	.+38     	; 0xba64 <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    ba3e:	80 e8       	ldi	r24, 0x80	; 128
    ba40:	90 e0       	ldi	r25, 0x00	; 0
    ba42:	fe 01       	movw	r30, r28
    ba44:	e8 58       	subi	r30, 0x88	; 136
    ba46:	ff 4f       	sbci	r31, 0xFF	; 255
    ba48:	91 83       	std	Z+1, r25	; 0x01
    ba4a:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    ba4c:	8d 81       	ldd	r24, Y+5	; 0x05
    ba4e:	81 11       	cpse	r24, r1
    ba50:	09 c0       	rjmp	.+18     	; 0xba64 <handle_demo_play+0x66>
    ba52:	88 81       	ld	r24, Y
    ba54:	99 81       	ldd	r25, Y+1	; 0x01
    ba56:	89 97       	sbiw	r24, 0x29	; 41
    ba58:	28 f0       	brcs	.+10     	; 0xba64 <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_A;
    ba5a:	80 e0       	ldi	r24, 0x00	; 0
    ba5c:	91 e0       	ldi	r25, 0x01	; 1
    ba5e:	f8 01       	movw	r30, r16
    ba60:	91 83       	std	Z+1, r25	; 0x01
    ba62:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    ba64:	80 91 d1 0d 	lds	r24, 0x0DD1
    ba68:	6f e0       	ldi	r22, 0x0F	; 15
    ba6a:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    ba6e:	91 11       	cpse	r25, r1
    ba70:	05 c0       	rjmp	.+10     	; 0xba7c <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_B;
    ba72:	81 e0       	ldi	r24, 0x01	; 1
    ba74:	90 e0       	ldi	r25, 0x00	; 0
    ba76:	f8 01       	movw	r30, r16
    ba78:	91 83       	std	Z+1, r25	; 0x01
    ba7a:	80 83       	st	Z, r24
		}
	}
}
    ba7c:	df 91       	pop	r29
    ba7e:	cf 91       	pop	r28
    ba80:	1f 91       	pop	r17
    ba82:	0f 91       	pop	r16
    ba84:	08 95       	ret

0000ba86 <observe_player>:
	if (!(game.boss.ai_flags & AI_NOT_READY))
	{
		orientation = ORIENTATION_TOWARD;
		//if (player->controls.held & BTN_DOWN) action = ACTION_PRONE_TOWARD;
		
		if (game.boss.shared.x < game.player.shared.x)
    ba86:	80 91 55 0e 	lds	r24, 0x0E55
    ba8a:	90 91 56 0e 	lds	r25, 0x0E56
    ba8e:	40 91 da 0d 	lds	r20, 0x0DDA
    ba92:	50 91 db 0d 	lds	r21, 0x0DDB
    ba96:	84 17       	cp	r24, r20
    ba98:	95 07       	cpc	r25, r21
    ba9a:	58 f4       	brcc	.+22     	; 0xbab2 <observe_player+0x2c>
		{
			if (game.player.direction == D_RIGHT)
    ba9c:	21 e0       	ldi	r18, 0x01	; 1
    ba9e:	30 91 e4 0d 	lds	r19, 0x0DE4
    baa2:	31 30       	cpi	r19, 0x01	; 1
    baa4:	09 f4       	brne	.+2      	; 0xbaa8 <observe_player+0x22>
    baa6:	20 e0       	ldi	r18, 0x00	; 0
			{
				orientation = ORIENTATION_AWAY;
				//if (player->controls.held & BTN_DOWN) action = ACTION_PRONE_AWAY;
			}
			distance_sevenths = (game.player.shared.x - game.boss.shared.x) / 8 / 7;
    baa8:	ba 01       	movw	r22, r20
    baaa:	68 1b       	sub	r22, r24
    baac:	79 0b       	sbc	r23, r25
    baae:	cb 01       	movw	r24, r22
    bab0:	0b c0       	rjmp	.+22     	; 0xbac8 <observe_player+0x42>
		}
		else if (game.boss.shared.x > game.player.shared.x)
    bab2:	48 17       	cp	r20, r24
    bab4:	59 07       	cpc	r21, r25
    bab6:	68 f4       	brcc	.+26     	; 0xbad2 <observe_player+0x4c>
		{
			if (game.player.direction == D_LEFT)
    bab8:	21 e0       	ldi	r18, 0x01	; 1
    baba:	30 91 e4 0d 	lds	r19, 0x0DE4
    babe:	31 11       	cpse	r19, r1
    bac0:	01 c0       	rjmp	.+2      	; 0xbac4 <observe_player+0x3e>
    bac2:	20 e0       	ldi	r18, 0x00	; 0
			{
				orientation = ORIENTATION_AWAY;
			}
			distance_sevenths = (game.boss.shared.x - game.player.shared.x) / 8 / 7;
    bac4:	84 1b       	sub	r24, r20
    bac6:	95 0b       	sbc	r25, r21
    bac8:	68 e3       	ldi	r22, 0x38	; 56
    baca:	70 e0       	ldi	r23, 0x00	; 0
    bacc:	0e 94 6c 73 	call	0xe6d8	; 0xe6d8 <__udivmodhi4>
    bad0:	02 c0       	rjmp	.+4      	; 0xbad6 <observe_player+0x50>

#if DEBUG_OBSERVE_PLAYER
void observe_player()
{
	u8 orientation = 0;
	u8 distance_sevenths = 0;
    bad2:	60 e0       	ldi	r22, 0x00	; 0
	u8 vy_direction = 0;
	u8 action = 0;
	
	if (!(game.boss.ai_flags & AI_NOT_READY))
	{
		orientation = ORIENTATION_TOWARD;
    bad4:	21 e0       	ldi	r18, 0x01	; 1
			}
			distance_sevenths = (game.boss.shared.x - game.player.shared.x) / 8 / 7;
		}
		vy_direction = VY_UP;
		posture = POSTURE_IDLE;
		if (game.player.shared.vy >= 0)
    bad6:	80 91 de 0d 	lds	r24, 0x0DDE
    bada:	87 fd       	sbrc	r24, 7
    badc:	0d c0       	rjmp	.+26     	; 0xbaf8 <observe_player+0x72>
		{
			vy_direction = VY_DOWN;
		}
		if (game.player.shared.vy > 0 || game.player.shared.vy < 0)
    bade:	81 11       	cpse	r24, r1
    bae0:	0d c0       	rjmp	.+26     	; 0xbafc <observe_player+0x76>
		{
			posture = POSTURE_JUMPING;
		}
		else if (game.player.shared.vx > 0 || game.player.shared.vx < 0)
    bae2:	80 91 df 0d 	lds	r24, 0x0DDF
    bae6:	81 11       	cpse	r24, r1
    bae8:	0c c0       	rjmp	.+24     	; 0xbb02 <observe_player+0x7c>
		{
			posture = POSTURE_WALKING;
		}
		else if (game.player.flags & PRONE)
    baea:	80 91 e2 0d 	lds	r24, 0x0DE2
		}
		vy_direction = VY_UP;
		posture = POSTURE_IDLE;
		if (game.player.shared.vy >= 0)
		{
			vy_direction = VY_DOWN;
    baee:	91 e0       	ldi	r25, 0x01	; 1
		}
		else if (game.player.shared.vx > 0 || game.player.shared.vx < 0)
		{
			posture = POSTURE_WALKING;
		}
		else if (game.player.flags & PRONE)
    baf0:	82 ff       	sbrs	r24, 2
    baf2:	0a c0       	rjmp	.+20     	; 0xbb08 <observe_player+0x82>
		{
			posture = POSTURE_PRONE;
    baf4:	82 e0       	ldi	r24, 0x02	; 2
    baf6:	09 c0       	rjmp	.+18     	; 0xbb0a <observe_player+0x84>
			{
				orientation = ORIENTATION_AWAY;
			}
			distance_sevenths = (game.boss.shared.x - game.player.shared.x) / 8 / 7;
		}
		vy_direction = VY_UP;
    baf8:	90 e0       	ldi	r25, 0x00	; 0
    bafa:	01 c0       	rjmp	.+2      	; 0xbafe <observe_player+0x78>
		posture = POSTURE_IDLE;
		if (game.player.shared.vy >= 0)
		{
			vy_direction = VY_DOWN;
    bafc:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (game.player.shared.vy > 0 || game.player.shared.vy < 0)
		{
			posture = POSTURE_JUMPING;
    bafe:	80 e0       	ldi	r24, 0x00	; 0
    bb00:	04 c0       	rjmp	.+8      	; 0xbb0a <observe_player+0x84>
		}
		vy_direction = VY_UP;
		posture = POSTURE_IDLE;
		if (game.player.shared.vy >= 0)
		{
			vy_direction = VY_DOWN;
    bb02:	91 e0       	ldi	r25, 0x01	; 1
		{
			posture = POSTURE_JUMPING;
		}
		else if (game.player.shared.vx > 0 || game.player.shared.vx < 0)
		{
			posture = POSTURE_WALKING;
    bb04:	81 e0       	ldi	r24, 0x01	; 1
    bb06:	01 c0       	rjmp	.+2      	; 0xbb0a <observe_player+0x84>
				orientation = ORIENTATION_AWAY;
			}
			distance_sevenths = (game.boss.shared.x - game.player.shared.x) / 8 / 7;
		}
		vy_direction = VY_UP;
		posture = POSTURE_IDLE;
    bb08:	83 e0       	ldi	r24, 0x03	; 3
	0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

u8 build_state(u8 orientation, u8 distance_sevenths, u8 posture, u8 vy_direction)
{
	return (orientation << 6) | (distance_sevenths << 3) | (posture << 1) | vy_direction;
    bb0a:	38 e0       	ldi	r19, 0x08	; 8
    bb0c:	63 9f       	mul	r22, r19
    bb0e:	b0 01       	movw	r22, r0
    bb10:	11 24       	eor	r1, r1
    bb12:	22 95       	swap	r18
    bb14:	22 0f       	add	r18, r18
    bb16:	22 0f       	add	r18, r18
    bb18:	20 7c       	andi	r18, 0xC0	; 192
    bb1a:	62 2b       	or	r22, r18
    bb1c:	96 2b       	or	r25, r22
    bb1e:	88 0f       	add	r24, r24
		}
		else if (game.player.flags & PRONE)
		{
			posture = POSTURE_PRONE;
		}
		record_observation(build_state(orientation, distance_sevenths, posture, vy_direction), action);
    bb20:	60 e0       	ldi	r22, 0x00	; 0
    bb22:	89 2b       	or	r24, r25
    bb24:	0c 94 ac 4d 	jmp	0x9b58	; 0x9b58 <record_observation>

0000bb28 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    bb28:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    bb2a:	86 17       	cp	r24, r22
    bb2c:	10 f4       	brcc	.+4      	; 0xbb32 <pixel_overlap+0xa>
    bb2e:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    bb30:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    bb32:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    bb34:	26 0f       	add	r18, r22
	if (s2 < s1)
    bb36:	28 17       	cp	r18, r24
    bb38:	10 f4       	brcc	.+4      	; 0xbb3e <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    bb3a:	28 1b       	sub	r18, r24
    bb3c:	92 0f       	add	r25, r18
	}
	return result;
}
    bb3e:	89 2f       	mov	r24, r25
    bb40:	08 95       	ret

0000bb42 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    bb42:	2f 92       	push	r2
    bb44:	3f 92       	push	r3
    bb46:	4f 92       	push	r4
    bb48:	5f 92       	push	r5
    bb4a:	6f 92       	push	r6
    bb4c:	7f 92       	push	r7
    bb4e:	8f 92       	push	r8
    bb50:	9f 92       	push	r9
    bb52:	af 92       	push	r10
    bb54:	bf 92       	push	r11
    bb56:	cf 92       	push	r12
    bb58:	df 92       	push	r13
    bb5a:	ef 92       	push	r14
    bb5c:	ff 92       	push	r15
    bb5e:	0f 93       	push	r16
    bb60:	1f 93       	push	r17
    bb62:	cf 93       	push	r28
    bb64:	df 93       	push	r29
    bb66:	00 d0       	rcall	.+0      	; 0xbb68 <collision_detect_level+0x26>
    bb68:	00 d0       	rcall	.+0      	; 0xbb6a <collision_detect_level+0x28>
    bb6a:	00 d0       	rcall	.+0      	; 0xbb6c <collision_detect_level+0x2a>
    bb6c:	cd b7       	in	r28, 0x3d	; 61
    bb6e:	de b7       	in	r29, 0x3e	; 62
    bb70:	9e 83       	std	Y+6, r25	; 0x06
    bb72:	8d 83       	std	Y+5, r24	; 0x05
    bb74:	56 2e       	mov	r5, r22
    bb76:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    bb78:	fc 01       	movw	r30, r24
    bb7a:	a0 80       	ld	r10, Z
    bb7c:	b1 80       	ldd	r11, Z+1	; 0x01
    bb7e:	75 01       	movw	r14, r10
    bb80:	13 e0       	ldi	r17, 0x03	; 3
    bb82:	f6 94       	lsr	r15
    bb84:	e7 94       	ror	r14
    bb86:	1a 95       	dec	r17
    bb88:	e1 f7       	brne	.-8      	; 0xbb82 <collision_detect_level+0x40>
    bb8a:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    bb8c:	c2 80       	ldd	r12, Z+2	; 0x02
    bb8e:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    bb90:	84 81       	ldd	r24, Z+4	; 0x04
    bb92:	88 23       	and	r24, r24
    bb94:	09 f4       	brne	.+2      	; 0xbb98 <collision_detect_level+0x56>
    bb96:	e1 c0       	rjmp	.+450    	; 0xbd5a <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    bb98:	e3 e0       	ldi	r30, 0x03	; 3
    bb9a:	d6 94       	lsr	r13
    bb9c:	c7 94       	ror	r12
    bb9e:	ea 95       	dec	r30
    bba0:	e1 f7       	brne	.-8      	; 0xbb9a <collision_detect_level+0x58>
    bba2:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    bba4:	f7 e0       	ldi	r31, 0x07	; 7
    bba6:	af 0e       	add	r10, r31
    bba8:	b1 1c       	adc	r11, r1
    bbaa:	f3 e0       	ldi	r31, 0x03	; 3
    bbac:	b6 94       	lsr	r11
    bbae:	a7 94       	ror	r10
    bbb0:	fa 95       	dec	r31
    bbb2:	e1 f7       	brne	.-8      	; 0xbbac <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    bbb4:	8e 2d       	mov	r24, r14
    bbb6:	88 0f       	add	r24, r24
    bbb8:	88 0f       	add	r24, r24
    bbba:	88 0f       	add	r24, r24
    bbbc:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bbbe:	2a 2c       	mov	r2, r10
    bbc0:	22 0c       	add	r2, r2
    bbc2:	22 0c       	add	r2, r2
    bbc4:	22 0c       	add	r2, r2
    bbc6:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    bbc8:	46 01       	movw	r8, r12
    bbca:	9f ef       	ldi	r25, 0xFF	; 255
    bbcc:	89 1a       	sub	r8, r25
    bbce:	99 0a       	sbc	r9, r25
    bbd0:	a3 e0       	ldi	r26, 0x03	; 3
    bbd2:	88 0c       	add	r8, r8
    bbd4:	99 1c       	adc	r9, r9
    bbd6:	aa 95       	dec	r26
    bbd8:	e1 f7       	brne	.-8      	; 0xbbd2 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    bbda:	e8 e0       	ldi	r30, 0x08	; 8
    bbdc:	4e 9f       	mul	r20, r30
    bbde:	30 01       	movw	r6, r0
    bbe0:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    bbe2:	b3 e0       	ldi	r27, 0x03	; 3
    bbe4:	cc 0c       	add	r12, r12
    bbe6:	dd 1c       	adc	r13, r13
    bbe8:	ba 95       	dec	r27
    bbea:	e1 f7       	brne	.-8      	; 0xbbe4 <collision_detect_level+0xa2>
    bbec:	41 2c       	mov	r4, r1
    bbee:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bbf0:	45 14       	cp	r4, r5
    bbf2:	09 f4       	brne	.+2      	; 0xbbf6 <collision_detect_level+0xb4>
    bbf4:	b3 c0       	rjmp	.+358    	; 0xbd5c <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    bbf6:	ed 81       	ldd	r30, Y+5	; 0x05
    bbf8:	fe 81       	ldd	r31, Y+6	; 0x06
    bbfa:	84 81       	ldd	r24, Z+4	; 0x04
    bbfc:	87 ff       	sbrs	r24, 7
    bbfe:	47 c0       	rjmp	.+142    	; 0xbc8e <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    bc00:	49 81       	ldd	r20, Y+1	; 0x01
    bc02:	64 2d       	mov	r22, r4
    bc04:	6e 0d       	add	r22, r14
    bc06:	80 91 d9 0f 	lds	r24, 0x0FD9
    bc0a:	90 91 da 0f 	lds	r25, 0x0FDA
    bc0e:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    bc12:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    bc14:	49 81       	ldd	r20, Y+1	; 0x01
    bc16:	64 2d       	mov	r22, r4
    bc18:	6a 0d       	add	r22, r10
    bc1a:	80 91 d9 0f 	lds	r24, 0x0FD9
    bc1e:	90 91 da 0f 	lds	r25, 0x0FDA
    bc22:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    bc26:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bc28:	83 2d       	mov	r24, r3
    bc2a:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    bc2e:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bc30:	80 2f       	mov	r24, r16
    bc32:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    bc36:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    bc38:	33 20       	and	r3, r3
    bc3a:	71 f0       	breq	.+28     	; 0xbc58 <collision_detect_level+0x116>
    bc3c:	30 91 b7 0d 	lds	r19, 0x0DB7
    bc40:	6b 81       	ldd	r22, Y+3	; 0x03
    bc42:	63 1b       	sub	r22, r19
    bc44:	ed 81       	ldd	r30, Y+5	; 0x05
    bc46:	fe 81       	ldd	r31, Y+6	; 0x06
    bc48:	80 81       	ld	r24, Z
    bc4a:	28 e0       	ldi	r18, 0x08	; 8
    bc4c:	48 e0       	ldi	r20, 0x08	; 8
    bc4e:	83 1b       	sub	r24, r19
    bc50:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    bc54:	84 30       	cpi	r24, 0x04	; 4
    bc56:	80 f4       	brcc	.+32     	; 0xbc78 <collision_detect_level+0x136>
    bc58:	00 23       	and	r16, r16
    bc5a:	c9 f0       	breq	.+50     	; 0xbc8e <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bc5c:	30 91 b7 0d 	lds	r19, 0x0DB7
    bc60:	62 2d       	mov	r22, r2
    bc62:	63 1b       	sub	r22, r19
    bc64:	ed 81       	ldd	r30, Y+5	; 0x05
    bc66:	fe 81       	ldd	r31, Y+6	; 0x06
    bc68:	80 81       	ld	r24, Z
    bc6a:	28 e0       	ldi	r18, 0x08	; 8
    bc6c:	48 e0       	ldi	r20, 0x08	; 8
    bc6e:	83 1b       	sub	r24, r19
    bc70:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    bc74:	84 30       	cpi	r24, 0x04	; 4
    bc76:	58 f0       	brcs	.+22     	; 0xbc8e <collision_detect_level+0x14c>
				{
					s->vy =  0;
    bc78:	ed 81       	ldd	r30, Y+5	; 0x05
    bc7a:	fe 81       	ldd	r31, Y+6	; 0x06
    bc7c:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    bc7e:	93 82       	std	Z+3, r9	; 0x03
    bc80:	82 82       	std	Z+2, r8	; 0x02
    bc82:	30 16       	cp	r3, r16
    bc84:	08 f4       	brcc	.+2      	; 0xbc88 <collision_detect_level+0x146>
    bc86:	30 2e       	mov	r3, r16
    bc88:	13 15       	cp	r17, r3
    bc8a:	08 f4       	brcc	.+2      	; 0xbc8e <collision_detect_level+0x14c>
    bc8c:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    bc8e:	ed 81       	ldd	r30, Y+5	; 0x05
    bc90:	fe 81       	ldd	r31, Y+6	; 0x06
    bc92:	84 81       	ldd	r24, Z+4	; 0x04
    bc94:	18 16       	cp	r1, r24
    bc96:	0c f0       	brlt	.+2      	; 0xbc9a <collision_detect_level+0x158>
    bc98:	5e c0       	rjmp	.+188    	; 0xbd56 <collision_detect_level+0x214>
    bc9a:	42 81       	ldd	r20, Z+2	; 0x02
    bc9c:	53 81       	ldd	r21, Z+3	; 0x03
    bc9e:	41 50       	subi	r20, 0x01	; 1
    bca0:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    bca2:	46 0d       	add	r20, r6
    bca4:	57 1d       	adc	r21, r7
    bca6:	63 e0       	ldi	r22, 0x03	; 3
    bca8:	56 95       	lsr	r21
    bcaa:	47 95       	ror	r20
    bcac:	6a 95       	dec	r22
    bcae:	e1 f7       	brne	.-8      	; 0xbca8 <collision_detect_level+0x166>
    bcb0:	64 2d       	mov	r22, r4
    bcb2:	6e 0d       	add	r22, r14
    bcb4:	80 91 d9 0f 	lds	r24, 0x0FD9
    bcb8:	90 91 da 0f 	lds	r25, 0x0FDA
    bcbc:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    bcc0:	38 2e       	mov	r3, r24
    bcc2:	ed 81       	ldd	r30, Y+5	; 0x05
    bcc4:	fe 81       	ldd	r31, Y+6	; 0x06
    bcc6:	42 81       	ldd	r20, Z+2	; 0x02
    bcc8:	53 81       	ldd	r21, Z+3	; 0x03
    bcca:	41 50       	subi	r20, 0x01	; 1
    bccc:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    bcce:	46 0d       	add	r20, r6
    bcd0:	57 1d       	adc	r21, r7
    bcd2:	73 e0       	ldi	r23, 0x03	; 3
    bcd4:	56 95       	lsr	r21
    bcd6:	47 95       	ror	r20
    bcd8:	7a 95       	dec	r23
    bcda:	e1 f7       	brne	.-8      	; 0xbcd4 <collision_detect_level+0x192>
    bcdc:	64 2d       	mov	r22, r4
    bcde:	6a 0d       	add	r22, r10
    bce0:	80 91 d9 0f 	lds	r24, 0x0FD9
    bce4:	90 91 da 0f 	lds	r25, 0x0FDA
    bce8:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    bcec:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bcee:	83 2d       	mov	r24, r3
    bcf0:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    bcf4:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bcf6:	80 2f       	mov	r24, r16
    bcf8:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    bcfc:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    bcfe:	33 20       	and	r3, r3
    bd00:	71 f0       	breq	.+28     	; 0xbd1e <collision_detect_level+0x1dc>
    bd02:	30 91 b7 0d 	lds	r19, 0x0DB7
    bd06:	6b 81       	ldd	r22, Y+3	; 0x03
    bd08:	63 1b       	sub	r22, r19
    bd0a:	ed 81       	ldd	r30, Y+5	; 0x05
    bd0c:	fe 81       	ldd	r31, Y+6	; 0x06
    bd0e:	80 81       	ld	r24, Z
    bd10:	28 e0       	ldi	r18, 0x08	; 8
    bd12:	48 e0       	ldi	r20, 0x08	; 8
    bd14:	83 1b       	sub	r24, r19
    bd16:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    bd1a:	84 30       	cpi	r24, 0x04	; 4
    bd1c:	80 f4       	brcc	.+32     	; 0xbd3e <collision_detect_level+0x1fc>
    bd1e:	00 23       	and	r16, r16
    bd20:	d1 f0       	breq	.+52     	; 0xbd56 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bd22:	30 91 b7 0d 	lds	r19, 0x0DB7
    bd26:	62 2d       	mov	r22, r2
    bd28:	63 1b       	sub	r22, r19
    bd2a:	ed 81       	ldd	r30, Y+5	; 0x05
    bd2c:	fe 81       	ldd	r31, Y+6	; 0x06
    bd2e:	80 81       	ld	r24, Z
    bd30:	28 e0       	ldi	r18, 0x08	; 8
    bd32:	48 e0       	ldi	r20, 0x08	; 8
    bd34:	83 1b       	sub	r24, r19
    bd36:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    bd3a:	84 30       	cpi	r24, 0x04	; 4
    bd3c:	60 f0       	brcs	.+24     	; 0xbd56 <collision_detect_level+0x214>
				{
					s->vy =  0;
    bd3e:	ed 81       	ldd	r30, Y+5	; 0x05
    bd40:	fe 81       	ldd	r31, Y+6	; 0x06
    bd42:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    bd44:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    bd46:	d3 82       	std	Z+3, r13	; 0x03
    bd48:	c2 82       	std	Z+2, r12	; 0x02
    bd4a:	30 16       	cp	r3, r16
    bd4c:	08 f4       	brcc	.+2      	; 0xbd50 <collision_detect_level+0x20e>
    bd4e:	30 2e       	mov	r3, r16
    bd50:	13 15       	cp	r17, r3
    bd52:	08 f4       	brcc	.+2      	; 0xbd56 <collision_detect_level+0x214>
    bd54:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bd56:	43 94       	inc	r4
    bd58:	4b cf       	rjmp	.-362    	; 0xbbf0 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    bd5a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    bd5c:	ed 81       	ldd	r30, Y+5	; 0x05
    bd5e:	fe 81       	ldd	r31, Y+6	; 0x06
    bd60:	85 81       	ldd	r24, Z+5	; 0x05
    bd62:	88 23       	and	r24, r24
    bd64:	09 f4       	brne	.+2      	; 0xbd68 <collision_detect_level+0x226>
    bd66:	e1 c0       	rjmp	.+450    	; 0xbf2a <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    bd68:	c2 80       	ldd	r12, Z+2	; 0x02
    bd6a:	d3 80       	ldd	r13, Z+3	; 0x03
    bd6c:	56 01       	movw	r10, r12
    bd6e:	23 e0       	ldi	r18, 0x03	; 3
    bd70:	b6 94       	lsr	r11
    bd72:	a7 94       	ror	r10
    bd74:	2a 95       	dec	r18
    bd76:	e1 f7       	brne	.-8      	; 0xbd70 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    bd78:	f7 e0       	ldi	r31, 0x07	; 7
    bd7a:	cf 0e       	add	r12, r31
    bd7c:	d1 1c       	adc	r13, r1
    bd7e:	33 e0       	ldi	r19, 0x03	; 3
    bd80:	d6 94       	lsr	r13
    bd82:	c7 94       	ror	r12
    bd84:	3a 95       	dec	r19
    bd86:	e1 f7       	brne	.-8      	; 0xbd80 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bd88:	3a 2c       	mov	r3, r10
    bd8a:	33 0c       	add	r3, r3
    bd8c:	33 0c       	add	r3, r3
    bd8e:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bd90:	4c 2c       	mov	r4, r12
    bd92:	44 0c       	add	r4, r4
    bd94:	44 0c       	add	r4, r4
    bd96:	44 0c       	add	r4, r4
    bd98:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    bd9a:	37 01       	movw	r6, r14
    bd9c:	8f ef       	ldi	r24, 0xFF	; 255
    bd9e:	68 1a       	sub	r6, r24
    bda0:	78 0a       	sbc	r7, r24
    bda2:	43 e0       	ldi	r20, 0x03	; 3
    bda4:	66 0c       	add	r6, r6
    bda6:	77 1c       	adc	r7, r7
    bda8:	4a 95       	dec	r20
    bdaa:	e1 f7       	brne	.-8      	; 0xbda4 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bdac:	98 e0       	ldi	r25, 0x08	; 8
    bdae:	59 9e       	mul	r5, r25
    bdb0:	40 01       	movw	r8, r0
    bdb2:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    bdb4:	53 e0       	ldi	r21, 0x03	; 3
    bdb6:	ee 0c       	add	r14, r14
    bdb8:	ff 1c       	adc	r15, r15
    bdba:	5a 95       	dec	r21
    bdbc:	e1 f7       	brne	.-8      	; 0xbdb6 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bdbe:	51 2c       	mov	r5, r1
    bdc0:	fc 81       	ldd	r31, Y+4	; 0x04
    bdc2:	5f 16       	cp	r5, r31
    bdc4:	09 f4       	brne	.+2      	; 0xbdc8 <collision_detect_level+0x286>
    bdc6:	b1 c0       	rjmp	.+354    	; 0xbf2a <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    bdc8:	ed 81       	ldd	r30, Y+5	; 0x05
    bdca:	fe 81       	ldd	r31, Y+6	; 0x06
    bdcc:	85 81       	ldd	r24, Z+5	; 0x05
    bdce:	87 ff       	sbrs	r24, 7
    bdd0:	47 c0       	rjmp	.+142    	; 0xbe60 <collision_detect_level+0x31e>
    bdd2:	45 2d       	mov	r20, r5
    bdd4:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    bdd6:	6a 81       	ldd	r22, Y+2	; 0x02
    bdd8:	80 91 d9 0f 	lds	r24, 0x0FD9
    bddc:	90 91 da 0f 	lds	r25, 0x0FDA
    bde0:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    bde4:	28 2e       	mov	r2, r24
    bde6:	45 2d       	mov	r20, r5
    bde8:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    bdea:	6a 81       	ldd	r22, Y+2	; 0x02
    bdec:	80 91 d9 0f 	lds	r24, 0x0FD9
    bdf0:	90 91 da 0f 	lds	r25, 0x0FDA
    bdf4:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    bdf8:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bdfa:	82 2d       	mov	r24, r2
    bdfc:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    be00:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    be02:	80 2f       	mov	r24, r16
    be04:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    be08:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    be0a:	22 20       	and	r2, r2
    be0c:	71 f0       	breq	.+28     	; 0xbe2a <collision_detect_level+0x2e8>
    be0e:	30 91 bf 0d 	lds	r19, 0x0DBF
    be12:	63 2d       	mov	r22, r3
    be14:	63 1b       	sub	r22, r19
    be16:	ed 81       	ldd	r30, Y+5	; 0x05
    be18:	fe 81       	ldd	r31, Y+6	; 0x06
    be1a:	82 81       	ldd	r24, Z+2	; 0x02
    be1c:	28 e0       	ldi	r18, 0x08	; 8
    be1e:	48 e0       	ldi	r20, 0x08	; 8
    be20:	83 1b       	sub	r24, r19
    be22:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    be26:	84 30       	cpi	r24, 0x04	; 4
    be28:	80 f4       	brcc	.+32     	; 0xbe4a <collision_detect_level+0x308>
    be2a:	00 23       	and	r16, r16
    be2c:	c9 f0       	breq	.+50     	; 0xbe60 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    be2e:	30 91 bf 0d 	lds	r19, 0x0DBF
    be32:	64 2d       	mov	r22, r4
    be34:	63 1b       	sub	r22, r19
    be36:	ed 81       	ldd	r30, Y+5	; 0x05
    be38:	fe 81       	ldd	r31, Y+6	; 0x06
    be3a:	82 81       	ldd	r24, Z+2	; 0x02
    be3c:	28 e0       	ldi	r18, 0x08	; 8
    be3e:	48 e0       	ldi	r20, 0x08	; 8
    be40:	83 1b       	sub	r24, r19
    be42:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    be46:	84 30       	cpi	r24, 0x04	; 4
    be48:	58 f0       	brcs	.+22     	; 0xbe60 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    be4a:	ed 81       	ldd	r30, Y+5	; 0x05
    be4c:	fe 81       	ldd	r31, Y+6	; 0x06
    be4e:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    be50:	71 82       	std	Z+1, r7	; 0x01
    be52:	60 82       	st	Z, r6
    be54:	20 16       	cp	r2, r16
    be56:	08 f4       	brcc	.+2      	; 0xbe5a <collision_detect_level+0x318>
    be58:	20 2e       	mov	r2, r16
    be5a:	12 15       	cp	r17, r2
    be5c:	08 f4       	brcc	.+2      	; 0xbe60 <collision_detect_level+0x31e>
    be5e:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    be60:	ed 81       	ldd	r30, Y+5	; 0x05
    be62:	fe 81       	ldd	r31, Y+6	; 0x06
    be64:	85 81       	ldd	r24, Z+5	; 0x05
    be66:	18 16       	cp	r1, r24
    be68:	0c f0       	brlt	.+2      	; 0xbe6c <collision_detect_level+0x32a>
    be6a:	5d c0       	rjmp	.+186    	; 0xbf26 <collision_detect_level+0x3e4>
    be6c:	60 81       	ld	r22, Z
    be6e:	71 81       	ldd	r23, Z+1	; 0x01
    be70:	61 50       	subi	r22, 0x01	; 1
    be72:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    be74:	68 0d       	add	r22, r8
    be76:	79 1d       	adc	r23, r9
    be78:	83 e0       	ldi	r24, 0x03	; 3
    be7a:	76 95       	lsr	r23
    be7c:	67 95       	ror	r22
    be7e:	8a 95       	dec	r24
    be80:	e1 f7       	brne	.-8      	; 0xbe7a <collision_detect_level+0x338>
    be82:	45 2d       	mov	r20, r5
    be84:	4a 0d       	add	r20, r10
    be86:	80 91 d9 0f 	lds	r24, 0x0FD9
    be8a:	90 91 da 0f 	lds	r25, 0x0FDA
    be8e:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    be92:	28 2e       	mov	r2, r24
    be94:	ed 81       	ldd	r30, Y+5	; 0x05
    be96:	fe 81       	ldd	r31, Y+6	; 0x06
    be98:	60 81       	ld	r22, Z
    be9a:	71 81       	ldd	r23, Z+1	; 0x01
    be9c:	61 50       	subi	r22, 0x01	; 1
    be9e:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bea0:	68 0d       	add	r22, r8
    bea2:	79 1d       	adc	r23, r9
    bea4:	93 e0       	ldi	r25, 0x03	; 3
    bea6:	76 95       	lsr	r23
    bea8:	67 95       	ror	r22
    beaa:	9a 95       	dec	r25
    beac:	e1 f7       	brne	.-8      	; 0xbea6 <collision_detect_level+0x364>
    beae:	45 2d       	mov	r20, r5
    beb0:	4c 0d       	add	r20, r12
    beb2:	80 91 d9 0f 	lds	r24, 0x0FD9
    beb6:	90 91 da 0f 	lds	r25, 0x0FDA
    beba:	0e 94 28 59 	call	0xb250	; 0xb250 <get_level_tile>
    bebe:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bec0:	82 2d       	mov	r24, r2
    bec2:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    bec6:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bec8:	80 2f       	mov	r24, r16
    beca:	0e 94 45 5a 	call	0xb48a	; 0xb48a <solid_or_hazard_tile>
    bece:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bed0:	22 20       	and	r2, r2
    bed2:	71 f0       	breq	.+28     	; 0xbef0 <collision_detect_level+0x3ae>
    bed4:	30 91 bf 0d 	lds	r19, 0x0DBF
    bed8:	63 2d       	mov	r22, r3
    beda:	63 1b       	sub	r22, r19
    bedc:	ed 81       	ldd	r30, Y+5	; 0x05
    bede:	fe 81       	ldd	r31, Y+6	; 0x06
    bee0:	82 81       	ldd	r24, Z+2	; 0x02
    bee2:	28 e0       	ldi	r18, 0x08	; 8
    bee4:	48 e0       	ldi	r20, 0x08	; 8
    bee6:	83 1b       	sub	r24, r19
    bee8:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    beec:	84 30       	cpi	r24, 0x04	; 4
    beee:	80 f4       	brcc	.+32     	; 0xbf10 <collision_detect_level+0x3ce>
    bef0:	00 23       	and	r16, r16
    bef2:	c9 f0       	breq	.+50     	; 0xbf26 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bef4:	30 91 bf 0d 	lds	r19, 0x0DBF
    bef8:	64 2d       	mov	r22, r4
    befa:	63 1b       	sub	r22, r19
    befc:	ed 81       	ldd	r30, Y+5	; 0x05
    befe:	fe 81       	ldd	r31, Y+6	; 0x06
    bf00:	82 81       	ldd	r24, Z+2	; 0x02
    bf02:	28 e0       	ldi	r18, 0x08	; 8
    bf04:	48 e0       	ldi	r20, 0x08	; 8
    bf06:	83 1b       	sub	r24, r19
    bf08:	0e 94 94 5d 	call	0xbb28	; 0xbb28 <pixel_overlap>
    bf0c:	84 30       	cpi	r24, 0x04	; 4
    bf0e:	58 f0       	brcs	.+22     	; 0xbf26 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    bf10:	ed 81       	ldd	r30, Y+5	; 0x05
    bf12:	fe 81       	ldd	r31, Y+6	; 0x06
    bf14:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    bf16:	f1 82       	std	Z+1, r15	; 0x01
    bf18:	e0 82       	st	Z, r14
    bf1a:	20 16       	cp	r2, r16
    bf1c:	08 f4       	brcc	.+2      	; 0xbf20 <collision_detect_level+0x3de>
    bf1e:	20 2e       	mov	r2, r16
    bf20:	12 15       	cp	r17, r2
    bf22:	08 f4       	brcc	.+2      	; 0xbf26 <collision_detect_level+0x3e4>
    bf24:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bf26:	53 94       	inc	r5
    bf28:	4b cf       	rjmp	.-362    	; 0xbdc0 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    bf2a:	81 2f       	mov	r24, r17
    bf2c:	26 96       	adiw	r28, 0x06	; 6
    bf2e:	0f b6       	in	r0, 0x3f	; 63
    bf30:	f8 94       	cli
    bf32:	de bf       	out	0x3e, r29	; 62
    bf34:	0f be       	out	0x3f, r0	; 63
    bf36:	cd bf       	out	0x3d, r28	; 61
    bf38:	df 91       	pop	r29
    bf3a:	cf 91       	pop	r28
    bf3c:	1f 91       	pop	r17
    bf3e:	0f 91       	pop	r16
    bf40:	ff 90       	pop	r15
    bf42:	ef 90       	pop	r14
    bf44:	df 90       	pop	r13
    bf46:	cf 90       	pop	r12
    bf48:	bf 90       	pop	r11
    bf4a:	af 90       	pop	r10
    bf4c:	9f 90       	pop	r9
    bf4e:	8f 90       	pop	r8
    bf50:	7f 90       	pop	r7
    bf52:	6f 90       	pop	r6
    bf54:	5f 90       	pop	r5
    bf56:	4f 90       	pop	r4
    bf58:	3f 90       	pop	r3
    bf5a:	2f 90       	pop	r2
    bf5c:	08 95       	ret

0000bf5e <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    bf5e:	2f 92       	push	r2
    bf60:	3f 92       	push	r3
    bf62:	4f 92       	push	r4
    bf64:	5f 92       	push	r5
    bf66:	6f 92       	push	r6
    bf68:	7f 92       	push	r7
    bf6a:	8f 92       	push	r8
    bf6c:	9f 92       	push	r9
    bf6e:	af 92       	push	r10
    bf70:	bf 92       	push	r11
    bf72:	cf 92       	push	r12
    bf74:	df 92       	push	r13
    bf76:	ef 92       	push	r14
    bf78:	ff 92       	push	r15
    bf7a:	0f 93       	push	r16
    bf7c:	1f 93       	push	r17
    bf7e:	cf 93       	push	r28
    bf80:	df 93       	push	r29
    bf82:	00 d0       	rcall	.+0      	; 0xbf84 <animate_shot+0x26>
    bf84:	00 d0       	rcall	.+0      	; 0xbf86 <animate_shot+0x28>
    bf86:	1f 92       	push	r1
    bf88:	cd b7       	in	r28, 0x3d	; 61
    bf8a:	de b7       	in	r29, 0x3e	; 62
    bf8c:	2c 01       	movw	r4, r24
    bf8e:	4b 01       	movw	r8, r22
    bf90:	d4 2e       	mov	r13, r20
    bf92:	3c 01       	movw	r6, r24
    bf94:	29 e1       	ldi	r18, 0x19	; 25
    bf96:	62 0e       	add	r6, r18
    bf98:	71 1c       	adc	r7, r1
    bf9a:	40 96       	adiw	r24, 0x10	; 16
    bf9c:	9d 83       	std	Y+5, r25	; 0x05
    bf9e:	8c 83       	std	Y+4, r24	; 0x04
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bfa0:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    bfa2:	30 e1       	ldi	r19, 0x10	; 16
    bfa4:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bfa6:	f3 01       	movw	r30, r6
    bfa8:	80 81       	ld	r24, Z
    bfaa:	88 23       	and	r24, r24
    bfac:	09 f4       	brne	.+2      	; 0xbfb0 <animate_shot+0x52>
    bfae:	18 c1       	rjmp	.+560    	; 0xc1e0 <animate_shot+0x282>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bfb0:	60 91 d1 0d 	lds	r22, 0x0DD1
    bfb4:	34 97       	sbiw	r30, 0x04	; 4
    bfb6:	80 81       	ld	r24, Z
    bfb8:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <LBMoveDelta>
    bfbc:	88 0f       	add	r24, r24
    bfbe:	99 1f       	adc	r25, r25
    bfc0:	ec 81       	ldd	r30, Y+4	; 0x04
    bfc2:	fd 81       	ldd	r31, Y+5	; 0x05
    bfc4:	20 81       	ld	r18, Z
    bfc6:	31 81       	ldd	r19, Z+1	; 0x01
    bfc8:	82 0f       	add	r24, r18
    bfca:	93 1f       	adc	r25, r19
    bfcc:	91 83       	std	Z+1, r25	; 0x01
    bfce:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    bfd0:	60 91 d1 0d 	lds	r22, 0x0DD1
    bfd4:	f3 01       	movw	r30, r6
    bfd6:	35 97       	sbiw	r30, 0x05	; 5
    bfd8:	80 81       	ld	r24, Z
    bfda:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <LBMoveDelta>
    bfde:	ec 81       	ldd	r30, Y+4	; 0x04
    bfe0:	fd 81       	ldd	r31, Y+5	; 0x05
    bfe2:	42 81       	ldd	r20, Z+2	; 0x02
    bfe4:	53 81       	ldd	r21, Z+3	; 0x03
    bfe6:	84 0f       	add	r24, r20
    bfe8:	95 1f       	adc	r25, r21
    bfea:	93 83       	std	Z+3, r25	; 0x03
    bfec:	82 83       	std	Z+2, r24	; 0x02
    bfee:	f1 2e       	mov	r15, r17
    bff0:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    bff2:	90 91 bf 0d 	lds	r25, 0x0DBF
    bff6:	48 2f       	mov	r20, r24
    bff8:	49 1b       	sub	r20, r25
    bffa:	60 81       	ld	r22, Z
    bffc:	80 91 b7 0d 	lds	r24, 0x0DB7
    c000:	68 1b       	sub	r22, r24
    c002:	01 e0       	ldi	r16, 0x01	; 1
    c004:	21 e0       	ldi	r18, 0x01	; 1
    c006:	8f 2d       	mov	r24, r15
    c008:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    c00c:	8c 81       	ldd	r24, Y+4	; 0x04
    c00e:	9d 81       	ldd	r25, Y+5	; 0x05
    c010:	0e 94 aa 5c 	call	0xb954	; 0xb954 <out_of_bounds>
    c014:	81 11       	cpse	r24, r1
    c016:	d7 c0       	rjmp	.+430    	; 0xc1c6 <animate_shot+0x268>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    c018:	41 e0       	ldi	r20, 0x01	; 1
    c01a:	61 e0       	ldi	r22, 0x01	; 1
    c01c:	8c 81       	ldd	r24, Y+4	; 0x04
    c01e:	9d 81       	ldd	r25, Y+5	; 0x05
    c020:	0e 94 a1 5d 	call	0xbb42	; 0xbb42 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    c024:	81 11       	cpse	r24, r1
    c026:	cf c0       	rjmp	.+414    	; 0xc1c6 <animate_shot+0x268>
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c028:	90 91 b7 0d 	lds	r25, 0x0DB7
    c02c:	8c ed       	ldi	r24, 0xDC	; 220
    c02e:	28 2e       	mov	r2, r24
    c030:	8e e0       	ldi	r24, 0x0E	; 14
    c032:	38 2e       	mov	r3, r24
    c034:	1a 82       	std	Y+2, r1	; 0x02
    c036:	19 82       	std	Y+1, r1	; 0x01
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c038:	f1 01       	movw	r30, r2
    c03a:	80 81       	ld	r24, Z
    c03c:	82 30       	cpi	r24, 0x02	; 2
    c03e:	09 f4       	brne	.+2      	; 0xc042 <animate_shot+0xe4>
    c040:	68 c0       	rjmp	.+208    	; 0xc112 <animate_shot+0x1b4>
    c042:	35 97       	sbiw	r30, 0x05	; 5
    c044:	80 81       	ld	r24, Z
    c046:	88 23       	and	r24, r24
    c048:	09 f4       	brne	.+2      	; 0xc04c <animate_shot+0xee>
    c04a:	63 c0       	rjmp	.+198    	; 0xc112 <animate_shot+0x1b4>
    c04c:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c04e:	a0 80       	ld	r10, Z
    c050:	aa 0c       	add	r10, r10
    c052:	aa 0c       	add	r10, r10
    c054:	aa 0c       	add	r10, r10
    c056:	31 97       	sbiw	r30, 0x01	; 1
    c058:	c0 80       	ld	r12, Z
    c05a:	cc 0c       	add	r12, r12
    c05c:	cc 0c       	add	r12, r12
    c05e:	cc 0c       	add	r12, r12
    c060:	3a 97       	sbiw	r30, 0x0a	; 10
    c062:	00 81       	ld	r16, Z
    c064:	09 1b       	sub	r16, r25
    c066:	ec 81       	ldd	r30, Y+4	; 0x04
    c068:	fd 81       	ldd	r31, Y+5	; 0x05
    c06a:	80 81       	ld	r24, Z
    c06c:	f1 01       	movw	r30, r2
    c06e:	3a 97       	sbiw	r30, 0x0a	; 10
    c070:	e0 80       	ld	r14, Z
    c072:	28 e0       	ldi	r18, 0x08	; 8
    c074:	48 e0       	ldi	r20, 0x08	; 8
    c076:	ec 81       	ldd	r30, Y+4	; 0x04
    c078:	fd 81       	ldd	r31, Y+5	; 0x05
    c07a:	62 81       	ldd	r22, Z+2	; 0x02
    c07c:	89 1b       	sub	r24, r25
    c07e:	9b 83       	std	Y+3, r25	; 0x03
    c080:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c084:	9b 81       	ldd	r25, Y+3	; 0x03
    c086:	88 23       	and	r24, r24
    c088:	09 f4       	brne	.+2      	; 0xc08c <animate_shot+0x12e>
    c08a:	43 c0       	rjmp	.+134    	; 0xc112 <animate_shot+0x1b4>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    c08c:	41 e0       	ldi	r20, 0x01	; 1
    c08e:	6f ef       	ldi	r22, 0xFF	; 255
    c090:	84 e0       	ldi	r24, 0x04	; 4
    c092:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    c096:	45 e3       	ldi	r20, 0x35	; 53
    c098:	29 81       	ldd	r18, Y+1	; 0x01
    c09a:	3a 81       	ldd	r19, Y+2	; 0x02
    c09c:	42 9f       	mul	r20, r18
    c09e:	c0 01       	movw	r24, r0
    c0a0:	43 9f       	mul	r20, r19
    c0a2:	90 0d       	add	r25, r0
    c0a4:	11 24       	eor	r1, r1
    c0a6:	fc 01       	movw	r30, r24
    c0a8:	e9 54       	subi	r30, 0x49	; 73
    c0aa:	f2 4f       	sbci	r31, 0xF2	; 242
    c0ac:	1f 01       	movw	r2, r30
    c0ae:	df 01       	movw	r26, r30
    c0b0:	a7 5d       	subi	r26, 0xD7	; 215
    c0b2:	be 4f       	sbci	r27, 0xFE	; 254
    c0b4:	8c 91       	ld	r24, X
    c0b6:	f3 01       	movw	r30, r6
    c0b8:	31 97       	sbiw	r30, 0x01	; 1
    c0ba:	90 81       	ld	r25, Z
    c0bc:	89 1b       	sub	r24, r25
    c0be:	8c 93       	st	X, r24
						if (game.enemies[j].shield <= 0)
    c0c0:	18 16       	cp	r1, r24
    c0c2:	cc f0       	brlt	.+50     	; 0xc0f6 <animate_shot+0x198>
						{
							SFX_ENEMY_EXPLODE;
    c0c4:	41 e0       	ldi	r20, 0x01	; 1
    c0c6:	6f ef       	ldi	r22, 0xFF	; 255
    c0c8:	86 e0       	ldi	r24, 0x06	; 6
    c0ca:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    c0ce:	f1 01       	movw	r30, r2
    c0d0:	ef 5d       	subi	r30, 0xDF	; 223
    c0d2:	fe 4f       	sbci	r31, 0xFE	; 254
    c0d4:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    c0d6:	31 97       	sbiw	r30, 0x01	; 1
    c0d8:	10 82       	st	Z, r1
							game.active_enemies--;
    c0da:	80 91 d2 0d 	lds	r24, 0x0DD2
    c0de:	81 50       	subi	r24, 0x01	; 1
    c0e0:	80 93 d2 0d 	sts	0x0DD2, r24
							game.level_score += KILL_SCORE;
    c0e4:	80 91 bb 0d 	lds	r24, 0x0DBB
    c0e8:	90 91 bc 0d 	lds	r25, 0x0DBC
    c0ec:	0a 96       	adiw	r24, 0x0a	; 10
    c0ee:	90 93 bc 0d 	sts	0x0DBC, r25
    c0f2:	80 93 bb 0d 	sts	0x0DBB, r24
						}
						player->shot[i].active = 0;
    c0f6:	f3 01       	movw	r30, r6
    c0f8:	10 82       	st	Z, r1
						player->active_shots--;
    c0fa:	f2 01       	movw	r30, r4
    c0fc:	87 81       	ldd	r24, Z+7	; 0x07
    c0fe:	81 50       	subi	r24, 0x01	; 1
    c100:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c102:	01 e0       	ldi	r16, 0x01	; 1
    c104:	21 e0       	ldi	r18, 0x01	; 1
    c106:	40 e0       	ldi	r20, 0x00	; 0
    c108:	60 ee       	ldi	r22, 0xE0	; 224
    c10a:	8f 2d       	mov	r24, r15
    c10c:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
						break;
    c110:	0e c0       	rjmp	.+28     	; 0xc12e <animate_shot+0x1d0>
    c112:	29 81       	ldd	r18, Y+1	; 0x01
    c114:	3a 81       	ldd	r19, Y+2	; 0x02
    c116:	2f 5f       	subi	r18, 0xFF	; 255
    c118:	3f 4f       	sbci	r19, 0xFF	; 255
    c11a:	3a 83       	std	Y+2, r19	; 0x02
    c11c:	29 83       	std	Y+1, r18	; 0x01
    c11e:	35 e3       	ldi	r19, 0x35	; 53
    c120:	23 0e       	add	r2, r19
    c122:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    c124:	e9 81       	ldd	r30, Y+1	; 0x01
    c126:	fa 81       	ldd	r31, Y+2	; 0x02
    c128:	35 97       	sbiw	r30, 0x05	; 5
    c12a:	09 f0       	breq	.+2      	; 0xc12e <animate_shot+0x1d0>
    c12c:	85 cf       	rjmp	.-246    	; 0xc038 <animate_shot+0xda>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    c12e:	fa ed       	ldi	r31, 0xDA	; 218
    c130:	8f 16       	cp	r8, r31
    c132:	fd e0       	ldi	r31, 0x0D	; 13
    c134:	9f 06       	cpc	r9, r31
    c136:	09 f4       	brne	.+2      	; 0xc13a <animate_shot+0x1dc>
    c138:	53 c0       	rjmp	.+166    	; 0xc1e0 <animate_shot+0x282>
    c13a:	f4 01       	movw	r30, r8
    c13c:	85 85       	ldd	r24, Z+13	; 0x0d
    c13e:	88 23       	and	r24, r24
    c140:	09 f4       	brne	.+2      	; 0xc144 <animate_shot+0x1e6>
    c142:	4e c0       	rjmp	.+156    	; 0xc1e0 <animate_shot+0x282>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c144:	90 91 b7 0d 	lds	r25, 0x0DB7
    c148:	a4 84       	ldd	r10, Z+12	; 0x0c
    c14a:	aa 0c       	add	r10, r10
    c14c:	aa 0c       	add	r10, r10
    c14e:	aa 0c       	add	r10, r10
    c150:	c3 84       	ldd	r12, Z+11	; 0x0b
    c152:	cc 0c       	add	r12, r12
    c154:	cc 0c       	add	r12, r12
    c156:	cc 0c       	add	r12, r12
    c158:	00 81       	ld	r16, Z
    c15a:	09 1b       	sub	r16, r25
    c15c:	ec 81       	ldd	r30, Y+4	; 0x04
    c15e:	fd 81       	ldd	r31, Y+5	; 0x05
    c160:	80 81       	ld	r24, Z
    c162:	f4 01       	movw	r30, r8
    c164:	e2 80       	ldd	r14, Z+2	; 0x02
    c166:	28 e0       	ldi	r18, 0x08	; 8
    c168:	48 e0       	ldi	r20, 0x08	; 8
    c16a:	ec 81       	ldd	r30, Y+4	; 0x04
    c16c:	fd 81       	ldd	r31, Y+5	; 0x05
    c16e:	62 81       	ldd	r22, Z+2	; 0x02
    c170:	89 1b       	sub	r24, r25
    c172:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBCollides>
    c176:	88 23       	and	r24, r24
    c178:	99 f1       	breq	.+102    	; 0xc1e0 <animate_shot+0x282>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    c17a:	41 e0       	ldi	r20, 0x01	; 1
    c17c:	6f ef       	ldi	r22, 0xFF	; 255
    c17e:	84 e0       	ldi	r24, 0x04	; 4
    c180:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    c184:	f4 01       	movw	r30, r8
    c186:	87 85       	ldd	r24, Z+15	; 0x0f
    c188:	f3 01       	movw	r30, r6
    c18a:	31 97       	sbiw	r30, 0x01	; 1
    c18c:	90 81       	ld	r25, Z
    c18e:	89 1b       	sub	r24, r25
    c190:	f4 01       	movw	r30, r8
    c192:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    c194:	18 16       	cp	r1, r24
    c196:	bc f0       	brlt	.+46     	; 0xc1c6 <animate_shot+0x268>
							{
								SFX_PLAYER_EXPLODE;
    c198:	41 e0       	ldi	r20, 0x01	; 1
    c19a:	6f ef       	ldi	r22, 0xFF	; 255
    c19c:	85 e0       	ldi	r24, 0x05	; 5
    c19e:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
								other_player->shield = 0;
    c1a2:	f4 01       	movw	r30, r8
    c1a4:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    c1a6:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    c1a8:	f5 e5       	ldi	r31, 0x55	; 85
    c1aa:	8f 16       	cp	r8, r31
    c1ac:	fe e0       	ldi	r31, 0x0E	; 14
    c1ae:	9f 06       	cpc	r9, r31
    c1b0:	51 f4       	brne	.+20     	; 0xc1c6 <animate_shot+0x268>
    c1b2:	80 91 bb 0d 	lds	r24, 0x0DBB
    c1b6:	90 91 bc 0d 	lds	r25, 0x0DBC
    c1ba:	8c 59       	subi	r24, 0x9C	; 156
    c1bc:	9f 4f       	sbci	r25, 0xFF	; 255
    c1be:	90 93 bc 0d 	sts	0x0DBC, r25
    c1c2:	80 93 bb 0d 	sts	0x0DBB, r24
							}
							player->shot[i].active = 0;
    c1c6:	f3 01       	movw	r30, r6
    c1c8:	10 82       	st	Z, r1
							player->active_shots--;
    c1ca:	f2 01       	movw	r30, r4
    c1cc:	87 81       	ldd	r24, Z+7	; 0x07
    c1ce:	81 50       	subi	r24, 0x01	; 1
    c1d0:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c1d2:	01 e0       	ldi	r16, 0x01	; 1
    c1d4:	21 e0       	ldi	r18, 0x01	; 1
    c1d6:	40 e0       	ldi	r20, 0x00	; 0
    c1d8:	60 ee       	ldi	r22, 0xE0	; 224
    c1da:	8f 2d       	mov	r24, r15
    c1dc:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c1e0:	1f 5f       	subi	r17, 0xFF	; 255
    c1e2:	f4 e1       	ldi	r31, 0x14	; 20
    c1e4:	6f 0e       	add	r6, r31
    c1e6:	71 1c       	adc	r7, r1
    c1e8:	2c 81       	ldd	r18, Y+4	; 0x04
    c1ea:	3d 81       	ldd	r19, Y+5	; 0x05
    c1ec:	2c 5e       	subi	r18, 0xEC	; 236
    c1ee:	3f 4f       	sbci	r19, 0xFF	; 255
    c1f0:	3d 83       	std	Y+5, r19	; 0x05
    c1f2:	2c 83       	std	Y+4, r18	; 0x04
    c1f4:	13 30       	cpi	r17, 0x03	; 3
    c1f6:	09 f0       	breq	.+2      	; 0xc1fa <animate_shot+0x29c>
    c1f8:	d6 ce       	rjmp	.-596    	; 0xbfa6 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    c1fa:	0f 90       	pop	r0
    c1fc:	0f 90       	pop	r0
    c1fe:	0f 90       	pop	r0
    c200:	0f 90       	pop	r0
    c202:	0f 90       	pop	r0
    c204:	df 91       	pop	r29
    c206:	cf 91       	pop	r28
    c208:	1f 91       	pop	r17
    c20a:	0f 91       	pop	r16
    c20c:	ff 90       	pop	r15
    c20e:	ef 90       	pop	r14
    c210:	df 90       	pop	r13
    c212:	cf 90       	pop	r12
    c214:	bf 90       	pop	r11
    c216:	af 90       	pop	r10
    c218:	9f 90       	pop	r9
    c21a:	8f 90       	pop	r8
    c21c:	7f 90       	pop	r7
    c21e:	6f 90       	pop	r6
    c220:	5f 90       	pop	r5
    c222:	4f 90       	pop	r4
    c224:	3f 90       	pop	r3
    c226:	2f 90       	pop	r2
    c228:	08 95       	ret

0000c22a <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c22a:	7f 92       	push	r7
    c22c:	8f 92       	push	r8
    c22e:	9f 92       	push	r9
    c230:	af 92       	push	r10
    c232:	bf 92       	push	r11
    c234:	cf 92       	push	r12
    c236:	df 92       	push	r13
    c238:	ef 92       	push	r14
    c23a:	ff 92       	push	r15
    c23c:	0f 93       	push	r16
    c23e:	1f 93       	push	r17
    c240:	cf 93       	push	r28
    c242:	df 93       	push	r29
    c244:	1f 92       	push	r1
    c246:	cd b7       	in	r28, 0x3d	; 61
    c248:	de b7       	in	r29, 0x3e	; 62
    c24a:	6c 01       	movw	r12, r24
    c24c:	7b 01       	movw	r14, r22
    c24e:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c250:	cb 01       	movw	r24, r22
    c252:	29 83       	std	Y+1, r18	; 0x01
    c254:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c258:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c25a:	29 81       	ldd	r18, Y+1	; 0x01
    c25c:	20 9f       	mul	r18, r16
    c25e:	50 01       	movw	r10, r0
    c260:	11 24       	eor	r1, r1
    c262:	10 e0       	ldi	r17, 0x00	; 0
    c264:	81 2f       	mov	r24, r17
    c266:	90 e0       	ldi	r25, 0x00	; 0
    c268:	8a 15       	cp	r24, r10
    c26a:	9b 05       	cpc	r25, r11
    c26c:	54 f4       	brge	.+20     	; 0xc282 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c26e:	40 e0       	ldi	r20, 0x00	; 0
    c270:	b4 01       	movw	r22, r8
    c272:	81 2f       	mov	r24, r17
    c274:	87 0d       	add	r24, r7
    c276:	29 83       	std	Y+1, r18	; 0x01
    c278:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c27c:	1f 5f       	subi	r17, 0xFF	; 255
    c27e:	29 81       	ldd	r18, Y+1	; 0x01
    c280:	f1 cf       	rjmp	.-30     	; 0xc264 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c282:	f7 01       	movw	r30, r14
    c284:	84 81       	ldd	r24, Z+4	; 0x04
    c286:	88 23       	and	r24, r24
    c288:	51 f0       	breq	.+20     	; 0xc29e <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c28a:	f6 01       	movw	r30, r12
    c28c:	80 81       	ld	r24, Z
    c28e:	90 e1       	ldi	r25, 0x10	; 16
    c290:	98 27       	eor	r25, r24
    c292:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c294:	40 e0       	ldi	r20, 0x00	; 0
    c296:	60 ee       	ldi	r22, 0xE0	; 224
    c298:	87 2d       	mov	r24, r7
    c29a:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	}
	return anim->looped;
}
    c29e:	f7 01       	movw	r30, r14
    c2a0:	84 81       	ldd	r24, Z+4	; 0x04
    c2a2:	0f 90       	pop	r0
    c2a4:	df 91       	pop	r29
    c2a6:	cf 91       	pop	r28
    c2a8:	1f 91       	pop	r17
    c2aa:	0f 91       	pop	r16
    c2ac:	ff 90       	pop	r15
    c2ae:	ef 90       	pop	r14
    c2b0:	df 90       	pop	r13
    c2b2:	cf 90       	pop	r12
    c2b4:	bf 90       	pop	r11
    c2b6:	af 90       	pop	r10
    c2b8:	9f 90       	pop	r9
    c2ba:	8f 90       	pop	r8
    c2bc:	7f 90       	pop	r7
    c2be:	08 95       	ret

0000c2c0 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c2c0:	8f 92       	push	r8
    c2c2:	9f 92       	push	r9
    c2c4:	af 92       	push	r10
    c2c6:	bf 92       	push	r11
    c2c8:	cf 92       	push	r12
    c2ca:	df 92       	push	r13
    c2cc:	ef 92       	push	r14
    c2ce:	ff 92       	push	r15
    c2d0:	0f 93       	push	r16
    c2d2:	1f 93       	push	r17
    c2d4:	cf 93       	push	r28
    c2d6:	df 93       	push	r29
    c2d8:	ec 01       	movw	r28, r24
    c2da:	c6 2e       	mov	r12, r22
    c2dc:	14 2f       	mov	r17, r20
    c2de:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c2e0:	6c 81       	ldd	r22, Y+4	; 0x04
    c2e2:	77 27       	eor	r23, r23
    c2e4:	67 fd       	sbrc	r22, 7
    c2e6:	70 95       	com	r23
    c2e8:	87 2f       	mov	r24, r23
    c2ea:	97 2f       	mov	r25, r23
    c2ec:	0e 94 32 74 	call	0xe864	; 0xe864 <__floatsisf>
    c2f0:	4b 01       	movw	r8, r22
    c2f2:	5c 01       	movw	r10, r24
    c2f4:	8e 81       	ldd	r24, Y+6	; 0x06
    c2f6:	68 2f       	mov	r22, r24
    c2f8:	70 e0       	ldi	r23, 0x00	; 0
    c2fa:	80 e0       	ldi	r24, 0x00	; 0
    c2fc:	90 e0       	ldi	r25, 0x00	; 0
    c2fe:	0e 94 32 74 	call	0xe864	; 0xe864 <__floatsisf>
    c302:	29 e8       	ldi	r18, 0x89	; 137
    c304:	38 e8       	ldi	r19, 0x88	; 136
    c306:	48 e8       	ldi	r20, 0x88	; 136
    c308:	5c e3       	ldi	r21, 0x3C	; 60
    c30a:	0e 94 be 74 	call	0xe97c	; 0xe97c <__mulsf3>
    c30e:	9b 01       	movw	r18, r22
    c310:	ac 01       	movw	r20, r24
    c312:	c5 01       	movw	r24, r10
    c314:	b4 01       	movw	r22, r8
    c316:	0e 94 9b 73 	call	0xe736	; 0xe736 <__addsf3>
    c31a:	0e 94 ff 73 	call	0xe7fe	; 0xe7fe <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c31e:	69 37       	cpi	r22, 0x79	; 121
    c320:	14 f4       	brge	.+4      	; 0xc326 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c322:	6c 83       	std	Y+4, r22	; 0x04
    c324:	02 c0       	rjmp	.+4      	; 0xc32a <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c326:	88 e7       	ldi	r24, 0x78	; 120
    c328:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c32a:	60 91 d1 0d 	lds	r22, 0x0DD1
    c32e:	8d 81       	ldd	r24, Y+5	; 0x05
    c330:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <LBMoveDelta>
    c334:	28 81       	ld	r18, Y
    c336:	39 81       	ldd	r19, Y+1	; 0x01
    c338:	82 0f       	add	r24, r18
    c33a:	93 1f       	adc	r25, r19
    c33c:	99 83       	std	Y+1, r25	; 0x01
    c33e:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c340:	60 91 d1 0d 	lds	r22, 0x0DD1
    c344:	8c 81       	ldd	r24, Y+4	; 0x04
    c346:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <LBMoveDelta>
    c34a:	ea 81       	ldd	r30, Y+2	; 0x02
    c34c:	fb 81       	ldd	r31, Y+3	; 0x03
    c34e:	8e 0f       	add	r24, r30
    c350:	9f 1f       	adc	r25, r31
    c352:	9b 83       	std	Y+3, r25	; 0x03
    c354:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c356:	4d 2d       	mov	r20, r13
    c358:	61 2f       	mov	r22, r17
    c35a:	ce 01       	movw	r24, r28
    c35c:	0e 94 a1 5d 	call	0xbb42	; 0xbb42 <collision_detect_level>
    c360:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c362:	88 23       	and	r24, r24
    c364:	41 f0       	breq	.+16     	; 0xc376 <animate_sprite+0xb6>
    c366:	00 23       	and	r16, r16
    c368:	31 f0       	breq	.+12     	; 0xc376 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c36a:	88 e0       	ldi	r24, 0x08	; 8
    c36c:	e8 9e       	mul	r14, r24
    c36e:	70 01       	movw	r14, r0
    c370:	11 24       	eor	r1, r1
    c372:	fb 82       	std	Y+3, r15	; 0x03
    c374:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c376:	3a 81       	ldd	r19, Y+2	; 0x02
    c378:	80 91 bf 0d 	lds	r24, 0x0DBF
    c37c:	43 2f       	mov	r20, r19
    c37e:	48 1b       	sub	r20, r24
    c380:	98 81       	ld	r25, Y
    c382:	80 91 b7 0d 	lds	r24, 0x0DB7
    c386:	69 2f       	mov	r22, r25
    c388:	68 1b       	sub	r22, r24
    c38a:	0d 2d       	mov	r16, r13
    c38c:	21 2f       	mov	r18, r17
    c38e:	8c 2d       	mov	r24, r12
    c390:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	return result;
}
    c394:	8b 2d       	mov	r24, r11
    c396:	df 91       	pop	r29
    c398:	cf 91       	pop	r28
    c39a:	1f 91       	pop	r17
    c39c:	0f 91       	pop	r16
    c39e:	ff 90       	pop	r15
    c3a0:	ef 90       	pop	r14
    c3a2:	df 90       	pop	r13
    c3a4:	cf 90       	pop	r12
    c3a6:	bf 90       	pop	r11
    c3a8:	af 90       	pop	r10
    c3aa:	9f 90       	pop	r9
    c3ac:	8f 90       	pop	r8
    c3ae:	08 95       	ret

0000c3b0 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c3b0:	ef 92       	push	r14
    c3b2:	0f 93       	push	r16
    c3b4:	fc 01       	movw	r30, r24
    c3b6:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    c3b8:	90 85       	ldd	r25, Z+8	; 0x08
    c3ba:	94 ff       	sbrs	r25, 4
    c3bc:	0f c0       	rjmp	.+30     	; 0xc3dc <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c3be:	92 81       	ldd	r25, Z+2	; 0x02
    c3c0:	20 91 bf 0d 	lds	r18, 0x0DBF
    c3c4:	49 2f       	mov	r20, r25
    c3c6:	42 1b       	sub	r20, r18
    c3c8:	90 81       	ld	r25, Z
    c3ca:	20 91 b7 0d 	lds	r18, 0x0DB7
    c3ce:	69 2f       	mov	r22, r25
    c3d0:	62 1b       	sub	r22, r18
    c3d2:	04 85       	ldd	r16, Z+12	; 0x0c
    c3d4:	23 85       	ldd	r18, Z+11	; 0x0b
    c3d6:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
    c3da:	08 c0       	rjmp	.+16     	; 0xc3ec <animate_player+0x3c>
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c3dc:	e1 2c       	mov	r14, r1
    c3de:	00 e0       	ldi	r16, 0x00	; 0
    c3e0:	24 85       	ldd	r18, Z+12	; 0x0c
    c3e2:	43 85       	ldd	r20, Z+11	; 0x0b
    c3e4:	68 2f       	mov	r22, r24
    c3e6:	cf 01       	movw	r24, r30
    c3e8:	0e 94 60 61 	call	0xc2c0	; 0xc2c0 <animate_sprite>
	{
		SFX_PLAYER_EXPLODE;
		game.player.shield = 0;
		game.player.flags = EXPLODING;
	}
}
    c3ec:	0f 91       	pop	r16
    c3ee:	ef 90       	pop	r14
    c3f0:	08 95       	ret

0000c3f2 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c3f2:	1f 93       	push	r17
    c3f4:	cf 93       	push	r28
    c3f6:	df 93       	push	r29
    c3f8:	ec 01       	movw	r28, r24
    c3fa:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c3fc:	98 85       	ldd	r25, Y+8	; 0x08
    c3fe:	89 2f       	mov	r24, r25
    c400:	88 70       	andi	r24, 0x08	; 8
    c402:	93 ff       	sbrs	r25, 3
    c404:	14 c0       	rjmp	.+40     	; 0xc42e <update_spider_enemy+0x3c>
    c406:	2d 85       	ldd	r18, Y+13	; 0x0d
    c408:	20 38       	cpi	r18, 0x80	; 128
    c40a:	89 f4       	brne	.+34     	; 0xc42e <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c40c:	81 e0       	ldi	r24, 0x01	; 1
    c40e:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c410:	8c e9       	ldi	r24, 0x9C	; 156
    c412:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c414:	88 ec       	ldi	r24, 0xC8	; 200
    c416:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c418:	8c e3       	ldi	r24, 0x3C	; 60
    c41a:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c41c:	89 85       	ldd	r24, Y+9	; 0x09
    c41e:	81 11       	cpse	r24, r1
    c420:	02 c0       	rjmp	.+4      	; 0xc426 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c422:	84 ec       	ldi	r24, 0xC4	; 196
    c424:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c426:	40 e0       	ldi	r20, 0x00	; 0
    c428:	62 ec       	ldi	r22, 0xC2	; 194
    c42a:	72 e3       	ldi	r23, 0x32	; 50
    c42c:	19 c0       	rjmp	.+50     	; 0xc460 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c42e:	90 ff       	sbrs	r25, 0
    c430:	0f c0       	rjmp	.+30     	; 0xc450 <update_spider_enemy+0x5e>
    c432:	9e 81       	ldd	r25, Y+6	; 0x06
    c434:	91 11       	cpse	r25, r1
    c436:	0c c0       	rjmp	.+24     	; 0xc450 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c438:	88 e0       	ldi	r24, 0x08	; 8
    c43a:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c43c:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c43e:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c440:	89 85       	ldd	r24, Y+9	; 0x09
    c442:	81 11       	cpse	r24, r1
    c444:	03 c0       	rjmp	.+6      	; 0xc44c <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c446:	81 e0       	ldi	r24, 0x01	; 1
    c448:	89 87       	std	Y+9, r24	; 0x09
    c44a:	0d c0       	rjmp	.+26     	; 0xc466 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c44c:	19 86       	std	Y+9, r1	; 0x09
    c44e:	0b c0       	rjmp	.+22     	; 0xc466 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c450:	88 23       	and	r24, r24
    c452:	49 f0       	breq	.+18     	; 0xc466 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c454:	ce 01       	movw	r24, r28
    c456:	85 96       	adiw	r24, 0x25	; 37
    c458:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c45c:	40 e0       	ldi	r20, 0x00	; 0
    c45e:	bc 01       	movw	r22, r24
    c460:	81 2f       	mov	r24, r17
    c462:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	}
	e->frame_count++;
    c466:	8d 85       	ldd	r24, Y+13	; 0x0d
    c468:	8f 5f       	subi	r24, 0xFF	; 255
    c46a:	8d 87       	std	Y+13, r24	; 0x0d
}
    c46c:	df 91       	pop	r29
    c46e:	cf 91       	pop	r28
    c470:	1f 91       	pop	r17
    c472:	08 95       	ret

0000c474 <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c474:	cf 93       	push	r28
    c476:	fc 01       	movw	r30, r24
    c478:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c47a:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c47c:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    c47e:	40 91 da 0d 	lds	r20, 0x0DDA
    c482:	50 91 db 0d 	lds	r21, 0x0DDB
    c486:	20 81       	ld	r18, Z
    c488:	31 81       	ldd	r19, Z+1	; 0x01
    c48a:	85 96       	adiw	r24, 0x25	; 37
    c48c:	24 17       	cp	r18, r20
    c48e:	35 07       	cpc	r19, r21
    c490:	38 f4       	brcc	.+14     	; 0xc4a0 <update_turret_enemy+0x2c>
    c492:	24 85       	ldd	r18, Z+12	; 0x0c
    c494:	26 30       	cpi	r18, 0x06	; 6
    c496:	21 f0       	breq	.+8      	; 0xc4a0 <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c498:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c49c:	41 e0       	ldi	r20, 0x01	; 1
    c49e:	03 c0       	rjmp	.+6      	; 0xc4a6 <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4a0:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c4a4:	40 e0       	ldi	r20, 0x00	; 0
    c4a6:	bc 01       	movw	r22, r24
    c4a8:	8c 2f       	mov	r24, r28
	}
}
    c4aa:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4ac:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000c4b0 <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c4b0:	cf 93       	push	r28
    c4b2:	fc 01       	movw	r30, r24
    c4b4:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c4b6:	82 ee       	ldi	r24, 0xE2	; 226
    c4b8:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c4ba:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4bc:	cf 01       	movw	r24, r30
    c4be:	85 96       	adiw	r24, 0x25	; 37
    c4c0:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c4c4:	40 e0       	ldi	r20, 0x00	; 0
    c4c6:	bc 01       	movw	r22, r24
    c4c8:	8c 2f       	mov	r24, r28
}
    c4ca:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4cc:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000c4d0 <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c4d0:	cf 93       	push	r28
    c4d2:	fc 01       	movw	r30, r24
    c4d4:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c4d6:	8a e0       	ldi	r24, 0x0A	; 10
    c4d8:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c4da:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4dc:	cf 01       	movw	r24, r30
    c4de:	85 96       	adiw	r24, 0x25	; 37
    c4e0:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c4e4:	40 e0       	ldi	r20, 0x00	; 0
    c4e6:	bc 01       	movw	r22, r24
    c4e8:	8c 2f       	mov	r24, r28
}
    c4ea:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4ec:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000c4f0 <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    c4f0:	cf 93       	push	r28
    c4f2:	fc 01       	movw	r30, r24
    c4f4:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    c4f6:	84 e1       	ldi	r24, 0x14	; 20
    c4f8:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    c4fa:	80 91 d1 0d 	lds	r24, 0x0DD1
    c4fe:	6c e3       	ldi	r22, 0x3C	; 60
    c500:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    c504:	91 11       	cpse	r25, r1
    c506:	03 c0       	rjmp	.+6      	; 0xc50e <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    c508:	94 81       	ldd	r25, Z+4	; 0x04
    c50a:	91 95       	neg	r25
    c50c:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c50e:	cf 01       	movw	r24, r30
    c510:	85 96       	adiw	r24, 0x25	; 37
    c512:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c516:	40 e0       	ldi	r20, 0x00	; 0
    c518:	bc 01       	movw	r22, r24
    c51a:	8c 2f       	mov	r24, r28
}
    c51c:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c51e:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000c522 <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c522:	cf 93       	push	r28
    c524:	fc 01       	movw	r30, r24
    c526:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c528:	8e e1       	ldi	r24, 0x1E	; 30
    c52a:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c52c:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c52e:	cf 01       	movw	r24, r30
    c530:	85 96       	adiw	r24, 0x25	; 37
    c532:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c536:	40 e0       	ldi	r20, 0x00	; 0
    c538:	bc 01       	movw	r22, r24
    c53a:	8c 2f       	mov	r24, r28
}
    c53c:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c53e:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000c542 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c542:	cf 93       	push	r28
    c544:	fc 01       	movw	r30, r24
    c546:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c548:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c54a:	8e e1       	ldi	r24, 0x1E	; 30
    c54c:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c54e:	80 91 cc 0d 	lds	r24, 0x0DCC
    c552:	82 30       	cpi	r24, 0x02	; 2
    c554:	11 f4       	brne	.+4      	; 0xc55a <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c556:	82 ee       	ldi	r24, 0xE2	; 226
    c558:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c55a:	22 81       	ldd	r18, Z+2	; 0x02
    c55c:	33 81       	ldd	r19, Z+3	; 0x03
    c55e:	24 50       	subi	r18, 0x04	; 4
    c560:	31 09       	sbc	r19, r1
    c562:	2d 3b       	cpi	r18, 0xBD	; 189
    c564:	31 05       	cpc	r19, r1
    c566:	38 f0       	brcs	.+14     	; 0xc576 <update_level_hazard+0x34>
    c568:	27 85       	ldd	r18, Z+15	; 0x0f
    c56a:	88 e0       	ldi	r24, 0x08	; 8
    c56c:	28 9f       	mul	r18, r24
    c56e:	90 01       	movw	r18, r0
    c570:	11 24       	eor	r1, r1
    c572:	33 83       	std	Z+3, r19	; 0x03
    c574:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c576:	cf 01       	movw	r24, r30
    c578:	85 96       	adiw	r24, 0x25	; 37
    c57a:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c57e:	40 e0       	ldi	r20, 0x00	; 0
    c580:	bc 01       	movw	r22, r24
    c582:	8c 2f       	mov	r24, r28
}
    c584:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c586:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000c58a <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c58a:	cf 93       	push	r28
    c58c:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c58e:	0c 96       	adiw	r24, 0x0c	; 12
    c590:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    c594:	40 e0       	ldi	r20, 0x00	; 0
    c596:	bc 01       	movw	r22, r24
    c598:	8c 2f       	mov	r24, r28
}
    c59a:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c59c:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000c5a0 <update_enemies>:
}

void update_enemies()
{
    c5a0:	cf 92       	push	r12
    c5a2:	df 92       	push	r13
    c5a4:	ef 92       	push	r14
    c5a6:	ff 92       	push	r15
    c5a8:	0f 93       	push	r16
    c5aa:	1f 93       	push	r17
    c5ac:	cf 93       	push	r28
    c5ae:	df 93       	push	r29
    c5b0:	8b ed       	ldi	r24, 0xDB	; 219
    c5b2:	e8 2e       	mov	r14, r24
    c5b4:	8e e0       	ldi	r24, 0x0E	; 14
    c5b6:	f8 2e       	mov	r15, r24
    c5b8:	c0 ed       	ldi	r28, 0xD0	; 208
    c5ba:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c5bc:	19 e0       	ldi	r17, 0x09	; 9
    c5be:	f7 01       	movw	r30, r14
    c5c0:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c5c2:	80 81       	ld	r24, Z
    c5c4:	97 01       	movw	r18, r14
    c5c6:	21 50       	subi	r18, 0x01	; 1
    c5c8:	31 09       	sbc	r19, r1
    c5ca:	69 01       	movw	r12, r18
    c5cc:	84 ff       	sbrs	r24, 4
    c5ce:	0d c0       	rjmp	.+26     	; 0xc5ea <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c5d0:	d7 01       	movw	r26, r14
    c5d2:	0c 91       	ld	r16, X
    c5d4:	f9 01       	movw	r30, r18
    c5d6:	20 81       	ld	r18, Z
    c5d8:	41 2f       	mov	r20, r17
    c5da:	be 01       	movw	r22, r28
    c5dc:	63 5d       	subi	r22, 0xD3	; 211
    c5de:	7f 4f       	sbci	r23, 0xFF	; 255
    c5e0:	ce 01       	movw	r24, r28
    c5e2:	08 96       	adiw	r24, 0x08	; 8
    c5e4:	0e 94 15 61 	call	0xc22a	; 0xc22a <map_explosion>
    c5e8:	2e c0       	rjmp	.+92     	; 0xc646 <update_enemies+0xa6>
    c5ea:	f7 01       	movw	r30, r14
    c5ec:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c5ee:	80 81       	ld	r24, Z
    c5f0:	88 23       	and	r24, r24
    c5f2:	49 f1       	breq	.+82     	; 0xc646 <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c5f4:	d7 01       	movw	r26, r14
    c5f6:	11 96       	adiw	r26, 0x01	; 1
    c5f8:	ec 91       	ld	r30, X
    c5fa:	8e 2f       	mov	r24, r30
    c5fc:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c5fe:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c600:	89 30       	cpi	r24, 0x09	; 9
    c602:	91 05       	cpc	r25, r1
    c604:	e8 f4       	brcc	.+58     	; 0xc640 <update_enemies+0xa0>
    c606:	fc 01       	movw	r30, r24
    c608:	e8 5c       	subi	r30, 0xC8	; 200
    c60a:	ff 4f       	sbci	r31, 0xFF	; 255
    c60c:	0c 94 94 73 	jmp	0xe728	; 0xe728 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c610:	ce 01       	movw	r24, r28
    c612:	0e 94 f9 61 	call	0xc3f2	; 0xc3f2 <update_spider_enemy>
    c616:	17 c0       	rjmp	.+46     	; 0xc646 <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    c618:	ce 01       	movw	r24, r28
    c61a:	0e 94 3a 62 	call	0xc474	; 0xc474 <update_turret_enemy>
    c61e:	13 c0       	rjmp	.+38     	; 0xc646 <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c620:	ce 01       	movw	r24, r28
    c622:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <update_drone_enemy>
    c626:	0f c0       	rjmp	.+30     	; 0xc646 <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c628:	ce 01       	movw	r24, r28
    c62a:	0e 94 91 62 	call	0xc522	; 0xc522 <update_shark_enemy>
    c62e:	0b c0       	rjmp	.+22     	; 0xc646 <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c630:	ce 01       	movw	r24, r28
    c632:	0e 94 68 62 	call	0xc4d0	; 0xc4d0 <update_globe_enemy>
    c636:	07 c0       	rjmp	.+14     	; 0xc646 <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    c638:	ce 01       	movw	r24, r28
    c63a:	0e 94 78 62 	call	0xc4f0	; 0xc4f0 <update_xwing_enemy>
    c63e:	03 c0       	rjmp	.+6      	; 0xc646 <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    c640:	ce 01       	movw	r24, r28
    c642:	0e 94 a1 62 	call	0xc542	; 0xc542 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c646:	f6 01       	movw	r30, r12
    c648:	90 81       	ld	r25, Z
    c64a:	d7 01       	movw	r26, r14
    c64c:	8c 91       	ld	r24, X
    c64e:	98 9f       	mul	r25, r24
    c650:	10 0d       	add	r17, r0
    c652:	11 24       	eor	r1, r1
    c654:	b5 e3       	ldi	r27, 0x35	; 53
    c656:	eb 0e       	add	r14, r27
    c658:	f1 1c       	adc	r15, r1
    c65a:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c65c:	e4 ee       	ldi	r30, 0xE4	; 228
    c65e:	ee 16       	cp	r14, r30
    c660:	ef e0       	ldi	r30, 0x0F	; 15
    c662:	fe 06       	cpc	r15, r30
    c664:	09 f0       	breq	.+2      	; 0xc668 <update_enemies+0xc8>
    c666:	ab cf       	rjmp	.-170    	; 0xc5be <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c668:	df 91       	pop	r29
    c66a:	cf 91       	pop	r28
    c66c:	1f 91       	pop	r17
    c66e:	0f 91       	pop	r16
    c670:	ff 90       	pop	r15
    c672:	ef 90       	pop	r14
    c674:	df 90       	pop	r13
    c676:	cf 90       	pop	r12
    c678:	08 95       	ret

0000c67a <update_enemy_shots>:

void update_enemy_shots()
{
    c67a:	6f 92       	push	r6
    c67c:	7f 92       	push	r7
    c67e:	8f 92       	push	r8
    c680:	9f 92       	push	r9
    c682:	bf 92       	push	r11
    c684:	cf 92       	push	r12
    c686:	df 92       	push	r13
    c688:	ef 92       	push	r14
    c68a:	ff 92       	push	r15
    c68c:	0f 93       	push	r16
    c68e:	1f 93       	push	r17
    c690:	cf 93       	push	r28
    c692:	df 93       	push	r29
    c694:	1f 92       	push	r1
    c696:	cd b7       	in	r28, 0x3d	; 61
    c698:	de b7       	in	r29, 0x3e	; 62
    c69a:	8e ed       	ldi	r24, 0xDE	; 222
    c69c:	68 2e       	mov	r6, r24
    c69e:	8e e0       	ldi	r24, 0x0E	; 14
    c6a0:	78 2e       	mov	r7, r24
    c6a2:	9b ee       	ldi	r25, 0xEB	; 235
    c6a4:	e9 2e       	mov	r14, r25
    c6a6:	9e e0       	ldi	r25, 0x0E	; 14
    c6a8:	f9 2e       	mov	r15, r25
    c6aa:	25 ee       	ldi	r18, 0xE5	; 229
    c6ac:	c2 2e       	mov	r12, r18
    c6ae:	2e e0       	ldi	r18, 0x0E	; 14
    c6b0:	d2 2e       	mov	r13, r18
    c6b2:	00 e1       	ldi	r16, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c6b4:	bb 24       	eor	r11, r11
    c6b6:	b3 94       	inc	r11
    c6b8:	6f ef       	ldi	r22, 0xFF	; 255
    c6ba:	60 0f       	add	r22, r16
    c6bc:	f3 01       	movw	r30, r6
    c6be:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c6c0:	80 81       	ld	r24, Z
    c6c2:	35 97       	sbiw	r30, 0x05	; 5
    c6c4:	82 30       	cpi	r24, 0x02	; 2
    c6c6:	09 f4       	brne	.+2      	; 0xc6ca <update_enemy_shots+0x50>
    c6c8:	55 c0       	rjmp	.+170    	; 0xc774 <update_enemy_shots+0xfa>
    c6ca:	90 81       	ld	r25, Z
    c6cc:	99 23       	and	r25, r25
    c6ce:	09 f4       	brne	.+2      	; 0xc6d2 <update_enemy_shots+0x58>
    c6d0:	51 c0       	rjmp	.+162    	; 0xc774 <update_enemy_shots+0xfa>
    c6d2:	d3 01       	movw	r26, r6
    c6d4:	9c 91       	ld	r25, X
    c6d6:	9c 33       	cpi	r25, 0x3C	; 60
    c6d8:	08 f4       	brcc	.+2      	; 0xc6dc <update_enemy_shots+0x62>
    c6da:	4c c0       	rjmp	.+152    	; 0xc774 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    c6dc:	1c 92       	st	X, r1
    c6de:	f7 01       	movw	r30, r14
    c6e0:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c6e2:	90 81       	ld	r25, Z
    c6e4:	97 30       	cpi	r25, 0x07	; 7
    c6e6:	09 f0       	breq	.+2      	; 0xc6ea <update_enemy_shots+0x70>
    c6e8:	4c c0       	rjmp	.+152    	; 0xc782 <update_enemy_shots+0x108>
    c6ea:	f7 01       	movw	r30, r14
				{
					if (!game.enemies[i].shot[j].active)
    c6ec:	92 91       	ld	r25, -Z
    c6ee:	91 11       	cpse	r25, r1
    c6f0:	3c c0       	rjmp	.+120    	; 0xc76a <update_enemy_shots+0xf0>
					{
						game.enemies[i].shot[j].active = 1;
    c6f2:	b0 82       	st	Z, r11
    c6f4:	f3 01       	movw	r30, r6
    c6f6:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c6f8:	20 81       	ld	r18, Z
    c6fa:	31 81       	ldd	r19, Z+1	; 0x01
    c6fc:	f3 01       	movw	r30, r6
    c6fe:	34 83       	std	Z+4, r19	; 0x04
    c700:	23 83       	std	Z+3, r18	; 0x03
    c702:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c704:	40 81       	ld	r20, Z
    c706:	51 81       	ldd	r21, Z+1	; 0x01
    c708:	fa 01       	movw	r30, r20
    c70a:	e8 7f       	andi	r30, 0xF8	; 248
    c70c:	16 96       	adiw	r26, 0x06	; 6
    c70e:	fc 93       	st	X, r31
    c710:	ee 93       	st	-X, r30
    c712:	15 97       	sbiw	r26, 0x05	; 5
    c714:	f7 01       	movw	r30, r14
    c716:	10 81       	ld	r17, Z
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c718:	84 30       	cpi	r24, 0x04	; 4
    c71a:	19 f4       	brne	.+6      	; 0xc722 <update_enemy_shots+0xa8>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c71c:	d6 01       	movw	r26, r12
    c71e:	1c 93       	st	X, r17
    c720:	24 c0       	rjmp	.+72     	; 0xc76a <update_enemy_shots+0xf0>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c722:	85 30       	cpi	r24, 0x05	; 5
    c724:	59 f4       	brne	.+22     	; 0xc73c <update_enemy_shots+0xc2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c726:	f6 01       	movw	r30, r12
    c728:	10 83       	st	Z, r17
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c72a:	80 91 dc 0d 	lds	r24, 0x0DDC
    c72e:	90 91 dd 0d 	lds	r25, 0x0DDD
    c732:	48 17       	cp	r20, r24
    c734:	59 07       	cpc	r21, r25
    c736:	c8 f0       	brcs	.+50     	; 0xc76a <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c738:	11 95       	neg	r17
    c73a:	16 c0       	rjmp	.+44     	; 0xc768 <update_enemy_shots+0xee>
    c73c:	47 01       	movw	r8, r14
    c73e:	f5 e0       	ldi	r31, 0x05	; 5
    c740:	8f 1a       	sub	r8, r31
    c742:	91 08       	sbc	r9, r1
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c744:	81 2f       	mov	r24, r17
    c746:	81 95       	neg	r24
    c748:	d4 01       	movw	r26, r8
    c74a:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    c74c:	80 91 da 0d 	lds	r24, 0x0DDA
    c750:	90 91 db 0d 	lds	r25, 0x0DDB
    c754:	82 17       	cp	r24, r18
    c756:	93 07       	cpc	r25, r19
    c758:	40 f0       	brcs	.+16     	; 0xc76a <update_enemy_shots+0xf0>
    c75a:	69 83       	std	Y+1, r22	; 0x01
    c75c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    c760:	69 81       	ldd	r22, Y+1	; 0x01
    c762:	81 11       	cpse	r24, r1
    c764:	02 c0       	rjmp	.+4      	; 0xc76a <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c766:	f4 01       	movw	r30, r8
    c768:	10 83       	st	Z, r17
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c76a:	c3 01       	movw	r24, r6
    c76c:	03 96       	adiw	r24, 0x03	; 3
    c76e:	0e 94 c5 62 	call	0xc58a	; 0xc58a <update_basic_shot>
    c772:	07 c0       	rjmp	.+14     	; 0xc782 <update_enemy_shots+0x108>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c774:	80 81       	ld	r24, Z
    c776:	88 23       	and	r24, r24
    c778:	21 f0       	breq	.+8      	; 0xc782 <update_enemy_shots+0x108>
		{
			game.enemies[i].shot_frame_count++;
    c77a:	d3 01       	movw	r26, r6
    c77c:	8c 91       	ld	r24, X
    c77e:	8f 5f       	subi	r24, 0xFF	; 255
    c780:	8c 93       	st	X, r24
    c782:	0f 5f       	subi	r16, 0xFF	; 255
    c784:	b5 e3       	ldi	r27, 0x35	; 53
    c786:	6b 0e       	add	r6, r27
    c788:	71 1c       	adc	r7, r1
    c78a:	e5 e3       	ldi	r30, 0x35	; 53
    c78c:	ee 0e       	add	r14, r30
    c78e:	f1 1c       	adc	r15, r1
    c790:	f5 e3       	ldi	r31, 0x35	; 53
    c792:	cf 0e       	add	r12, r31
    c794:	d1 1c       	adc	r13, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c796:	05 31       	cpi	r16, 0x15	; 21
    c798:	09 f0       	breq	.+2      	; 0xc79c <update_enemy_shots+0x122>
    c79a:	8e cf       	rjmp	.-228    	; 0xc6b8 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c79c:	0f 90       	pop	r0
    c79e:	df 91       	pop	r29
    c7a0:	cf 91       	pop	r28
    c7a2:	1f 91       	pop	r17
    c7a4:	0f 91       	pop	r16
    c7a6:	ff 90       	pop	r15
    c7a8:	ef 90       	pop	r14
    c7aa:	df 90       	pop	r13
    c7ac:	cf 90       	pop	r12
    c7ae:	bf 90       	pop	r11
    c7b0:	9f 90       	pop	r9
    c7b2:	8f 90       	pop	r8
    c7b4:	7f 90       	pop	r7
    c7b6:	6f 90       	pop	r6
    c7b8:	08 95       	ret

0000c7ba <animate_enemies>:

void animate_enemies()
{
    c7ba:	4f 92       	push	r4
    c7bc:	5f 92       	push	r5
    c7be:	6f 92       	push	r6
    c7c0:	7f 92       	push	r7
    c7c2:	8f 92       	push	r8
    c7c4:	9f 92       	push	r9
    c7c6:	af 92       	push	r10
    c7c8:	bf 92       	push	r11
    c7ca:	cf 92       	push	r12
    c7cc:	df 92       	push	r13
    c7ce:	ef 92       	push	r14
    c7d0:	ff 92       	push	r15
    c7d2:	0f 93       	push	r16
    c7d4:	1f 93       	push	r17
    c7d6:	cf 93       	push	r28
    c7d8:	df 93       	push	r29
    c7da:	87 ed       	ldi	r24, 0xD7	; 215
    c7dc:	48 2e       	mov	r4, r24
    c7de:	8e e0       	ldi	r24, 0x0E	; 14
    c7e0:	58 2e       	mov	r5, r24
    c7e2:	9a ed       	ldi	r25, 0xDA	; 218
    c7e4:	a9 2e       	mov	r10, r25
    c7e6:	9e e0       	ldi	r25, 0x0E	; 14
    c7e8:	b9 2e       	mov	r11, r25
    c7ea:	2b ed       	ldi	r18, 0xDB	; 219
    c7ec:	c2 2e       	mov	r12, r18
    c7ee:	2e e0       	ldi	r18, 0x0E	; 14
    c7f0:	d2 2e       	mov	r13, r18
    c7f2:	c0 ed       	ldi	r28, 0xD0	; 208
    c7f4:	de e0       	ldi	r29, 0x0E	; 14
    c7f6:	38 ed       	ldi	r19, 0xD8	; 216
    c7f8:	63 2e       	mov	r6, r19
    c7fa:	3e e0       	ldi	r19, 0x0E	; 14
    c7fc:	73 2e       	mov	r7, r19
    c7fe:	81 2c       	mov	r8, r1
    c800:	91 2c       	mov	r9, r1
	u8 slot = ENEMY_SLOT;
    c802:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c804:	40 e1       	ldi	r20, 0x10	; 16
    c806:	f4 2e       	mov	r15, r20
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c808:	f2 01       	movw	r30, r4
    c80a:	80 81       	ld	r24, Z
    c80c:	88 23       	and	r24, r24
    c80e:	09 f4       	brne	.+2      	; 0xc812 <animate_enemies+0x58>
    c810:	68 c0       	rjmp	.+208    	; 0xc8e2 <animate_enemies+0x128>
    c812:	f3 01       	movw	r30, r6
    c814:	80 81       	ld	r24, Z
    c816:	84 fd       	sbrc	r24, 4
    c818:	64 c0       	rjmp	.+200    	; 0xc8e2 <animate_enemies+0x128>
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c81a:	68 81       	ld	r22, Y
    c81c:	79 81       	ldd	r23, Y+1	; 0x01
    c81e:	20 91 b7 0d 	lds	r18, 0x0DB7
    c822:	30 91 b8 0d 	lds	r19, 0x0DB8
    c826:	62 17       	cp	r22, r18
    c828:	73 07       	cpc	r23, r19
    c82a:	e8 f0       	brcs	.+58     	; 0xc866 <animate_enemies+0xac>
			    game.enemies[i].shared.y < game.camera_y ||
    c82c:	4a 81       	ldd	r20, Y+2	; 0x02
    c82e:	5b 81       	ldd	r21, Y+3	; 0x03
    c830:	80 91 bf 0d 	lds	r24, 0x0DBF
    c834:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c836:	48 17       	cp	r20, r24
    c838:	59 07       	cpc	r21, r25
    c83a:	a8 f0       	brcs	.+42     	; 0xc866 <animate_enemies+0xac>
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c83c:	88 53       	subi	r24, 0x38	; 56
    c83e:	9f 4f       	sbci	r25, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
    c840:	84 17       	cp	r24, r20
    c842:	95 07       	cpc	r25, r21
    c844:	80 f0       	brcs	.+32     	; 0xc866 <animate_enemies+0xac>
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c846:	20 52       	subi	r18, 0x20	; 32
    c848:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c84a:	26 17       	cp	r18, r22
    c84c:	37 07       	cpc	r19, r23
    c84e:	c8 f4       	brcc	.+50     	; 0xc882 <animate_enemies+0xc8>
    c850:	f4 01       	movw	r30, r8
    c852:	e4 52       	subi	r30, 0x24	; 36
    c854:	f1 4f       	sbci	r31, 0xF1	; 241
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c856:	80 81       	ld	r24, Z
    c858:	81 11       	cpse	r24, r1
    c85a:	13 c0       	rjmp	.+38     	; 0xc882 <animate_enemies+0xc8>
    c85c:	f6 01       	movw	r30, r12
    c85e:	32 97       	sbiw	r30, 0x02	; 2
				 game.enemies[i].enemy_type == ENEMY_SPIDER &&
    c860:	80 81       	ld	r24, Z
    c862:	81 30       	cpi	r24, 0x01	; 1
    c864:	71 f4       	brne	.+28     	; 0xc882 <animate_enemies+0xc8>
				 game.enemies[i].direction == D_RIGHT))
			{
				game.enemies[i].active = 0;
    c866:	f2 01       	movw	r30, r4
    c868:	10 82       	st	Z, r1
				game.active_enemies--;
    c86a:	80 91 d2 0d 	lds	r24, 0x0DD2
    c86e:	81 50       	subi	r24, 0x01	; 1
    c870:	80 93 d2 0d 	sts	0x0DD2, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c874:	f6 01       	movw	r30, r12
    c876:	00 81       	ld	r16, Z
    c878:	f5 01       	movw	r30, r10
    c87a:	20 81       	ld	r18, Z
    c87c:	40 e0       	ldi	r20, 0x00	; 0
    c87e:	60 ee       	ldi	r22, 0xE0	; 224
    c880:	40 c0       	rjmp	.+128    	; 0xc902 <animate_enemies+0x148>
    c882:	c4 01       	movw	r24, r8
    c884:	89 54       	subi	r24, 0x49	; 73
    c886:	92 4f       	sbci	r25, 0xF2	; 242
    c888:	fc 01       	movw	r30, r24
    c88a:	eb 5d       	subi	r30, 0xDB	; 219
    c88c:	fe 4f       	sbci	r31, 0xFE	; 254
				game.player.shield = 0;
				game.player.flags = EXPLODING;
				return;
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c88e:	20 81       	ld	r18, Z
    c890:	22 30       	cpi	r18, 0x02	; 2
    c892:	61 f4       	brne	.+24     	; 0xc8ac <animate_enemies+0xf2>
    c894:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c896:	e0 80       	ld	r14, Z
    c898:	01 e0       	ldi	r16, 0x01	; 1
    c89a:	f6 01       	movw	r30, r12
    c89c:	20 81       	ld	r18, Z
    c89e:	f5 01       	movw	r30, r10
    c8a0:	40 81       	ld	r20, Z
    c8a2:	61 2f       	mov	r22, r17
    c8a4:	ce 01       	movw	r24, r28
    c8a6:	0e 94 60 61 	call	0xc2c0	; 0xc2c0 <animate_sprite>
    c8aa:	2e c0       	rjmp	.+92     	; 0xc908 <animate_enemies+0x14e>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c8ac:	e1 2c       	mov	r14, r1
    c8ae:	00 e0       	ldi	r16, 0x00	; 0
    c8b0:	f6 01       	movw	r30, r12
    c8b2:	20 81       	ld	r18, Z
    c8b4:	f5 01       	movw	r30, r10
    c8b6:	40 81       	ld	r20, Z
    c8b8:	61 2f       	mov	r22, r17
    c8ba:	ce 01       	movw	r24, r28
    c8bc:	0e 94 60 61 	call	0xc2c0	; 0xc2c0 <animate_sprite>
    c8c0:	82 30       	cpi	r24, 0x02	; 2
    c8c2:	10 f1       	brcs	.+68     	; 0xc908 <animate_enemies+0x14e>
			{
				SFX_ENEMY_EXPLODE;
    c8c4:	41 e0       	ldi	r20, 0x01	; 1
    c8c6:	6f ef       	ldi	r22, 0xFF	; 255
    c8c8:	86 e0       	ldi	r24, 0x06	; 6
    c8ca:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c8ce:	f3 01       	movw	r30, r6
    c8d0:	f0 82       	st	Z, r15
				game.enemies[i].active = 0;
    c8d2:	f2 01       	movw	r30, r4
    c8d4:	10 82       	st	Z, r1
				game.active_enemies--;
    c8d6:	80 91 d2 0d 	lds	r24, 0x0DD2
    c8da:	81 50       	subi	r24, 0x01	; 1
    c8dc:	80 93 d2 0d 	sts	0x0DD2, r24
    c8e0:	13 c0       	rjmp	.+38     	; 0xc908 <animate_enemies+0x14e>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c8e2:	f3 01       	movw	r30, r6
    c8e4:	80 81       	ld	r24, Z
    c8e6:	84 ff       	sbrs	r24, 4
    c8e8:	0f c0       	rjmp	.+30     	; 0xc908 <animate_enemies+0x14e>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c8ea:	4a 81       	ldd	r20, Y+2	; 0x02
    c8ec:	80 91 bf 0d 	lds	r24, 0x0DBF
    c8f0:	48 1b       	sub	r20, r24
    c8f2:	68 81       	ld	r22, Y
    c8f4:	80 91 b7 0d 	lds	r24, 0x0DB7
    c8f8:	68 1b       	sub	r22, r24
    c8fa:	f6 01       	movw	r30, r12
    c8fc:	00 81       	ld	r16, Z
    c8fe:	f5 01       	movw	r30, r10
    c900:	20 81       	ld	r18, Z
    c902:	81 2f       	mov	r24, r17
    c904:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c908:	f6 01       	movw	r30, r12
    c90a:	90 81       	ld	r25, Z
    c90c:	f5 01       	movw	r30, r10
    c90e:	80 81       	ld	r24, Z
    c910:	98 9f       	mul	r25, r24
    c912:	10 0d       	add	r17, r0
    c914:	11 24       	eor	r1, r1
    c916:	f5 e3       	ldi	r31, 0x35	; 53
    c918:	4f 0e       	add	r4, r31
    c91a:	51 1c       	adc	r5, r1
    c91c:	85 e3       	ldi	r24, 0x35	; 53
    c91e:	88 0e       	add	r8, r24
    c920:	91 1c       	adc	r9, r1
    c922:	e5 e3       	ldi	r30, 0x35	; 53
    c924:	ae 0e       	add	r10, r30
    c926:	b1 1c       	adc	r11, r1
    c928:	f5 e3       	ldi	r31, 0x35	; 53
    c92a:	cf 0e       	add	r12, r31
    c92c:	d1 1c       	adc	r13, r1
    c92e:	e5 96       	adiw	r28, 0x35	; 53
    c930:	85 e3       	ldi	r24, 0x35	; 53
    c932:	68 0e       	add	r6, r24
    c934:	71 1c       	adc	r7, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c936:	e9 e0       	ldi	r30, 0x09	; 9
    c938:	8e 16       	cp	r8, r30
    c93a:	e1 e0       	ldi	r30, 0x01	; 1
    c93c:	9e 06       	cpc	r9, r30
    c93e:	09 f0       	breq	.+2      	; 0xc942 <animate_enemies+0x188>
    c940:	63 cf       	rjmp	.-314    	; 0xc808 <animate_enemies+0x4e>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c942:	df 91       	pop	r29
    c944:	cf 91       	pop	r28
    c946:	1f 91       	pop	r17
    c948:	0f 91       	pop	r16
    c94a:	ff 90       	pop	r15
    c94c:	ef 90       	pop	r14
    c94e:	df 90       	pop	r13
    c950:	cf 90       	pop	r12
    c952:	bf 90       	pop	r11
    c954:	af 90       	pop	r10
    c956:	9f 90       	pop	r9
    c958:	8f 90       	pop	r8
    c95a:	7f 90       	pop	r7
    c95c:	6f 90       	pop	r6
    c95e:	5f 90       	pop	r5
    c960:	4f 90       	pop	r4
    c962:	08 95       	ret

0000c964 <animate_enemy_shots>:

void animate_enemy_shots()
{
    c964:	4f 92       	push	r4
    c966:	5f 92       	push	r5
    c968:	6f 92       	push	r6
    c96a:	7f 92       	push	r7
    c96c:	8f 92       	push	r8
    c96e:	9f 92       	push	r9
    c970:	af 92       	push	r10
    c972:	cf 92       	push	r12
    c974:	df 92       	push	r13
    c976:	ef 92       	push	r14
    c978:	ff 92       	push	r15
    c97a:	0f 93       	push	r16
    c97c:	1f 93       	push	r17
    c97e:	cf 93       	push	r28
    c980:	df 93       	push	r29
    c982:	4a ee       	ldi	r20, 0xEA	; 234
    c984:	84 2e       	mov	r8, r20
    c986:	4e e0       	ldi	r20, 0x0E	; 14
    c988:	94 2e       	mov	r9, r20
    c98a:	c1 ee       	ldi	r28, 0xE1	; 225
    c98c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
    c98e:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    c990:	50 e1       	ldi	r21, 0x10	; 16
    c992:	f5 2e       	mov	r15, r21
    c994:	f4 01       	movw	r30, r8
    c996:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c998:	80 81       	ld	r24, Z
    c99a:	87 30       	cpi	r24, 0x07	; 7
    c99c:	09 f0       	breq	.+2      	; 0xc9a0 <animate_enemy_shots+0x3c>
    c99e:	6c c0       	rjmp	.+216    	; 0xca78 <animate_enemy_shots+0x114>
			{
				if (game.enemies[i].shot[j].active)
    c9a0:	f4 01       	movw	r30, r8
    c9a2:	80 81       	ld	r24, Z
    c9a4:	88 23       	and	r24, r24
    c9a6:	09 f4       	brne	.+2      	; 0xc9aa <animate_enemy_shots+0x46>
    c9a8:	60 c0       	rjmp	.+192    	; 0xca6a <animate_enemy_shots+0x106>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c9aa:	ce 01       	movw	r24, r28
    c9ac:	0e 94 aa 5c 	call	0xb954	; 0xb954 <out_of_bounds>
    c9b0:	81 11       	cpse	r24, r1
    c9b2:	39 c0       	rjmp	.+114    	; 0xca26 <animate_enemy_shots+0xc2>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c9b4:	41 e0       	ldi	r20, 0x01	; 1
    c9b6:	61 e0       	ldi	r22, 0x01	; 1
    c9b8:	ce 01       	movw	r24, r28
    c9ba:	0e 94 a1 5d 	call	0xbb42	; 0xbb42 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c9be:	81 11       	cpse	r24, r1
    c9c0:	32 c0       	rjmp	.+100    	; 0xca26 <animate_enemy_shots+0xc2>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    c9c2:	4a 80       	ldd	r4, Y+2	; 0x02
    c9c4:	5b 80       	ldd	r5, Y+3	; 0x03
    c9c6:	68 80       	ld	r6, Y
    c9c8:	79 80       	ldd	r7, Y+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c9ca:	d0 90 b7 0d 	lds	r13, 0x0DB7
    c9ce:	06 2d       	mov	r16, r6
    c9d0:	0d 19       	sub	r16, r13
    c9d2:	20 91 e6 0d 	lds	r18, 0x0DE6
    c9d6:	22 0f       	add	r18, r18
    c9d8:	22 0f       	add	r18, r18
    c9da:	22 0f       	add	r18, r18
    c9dc:	40 91 e5 0d 	lds	r20, 0x0DE5
    c9e0:	44 0f       	add	r20, r20
    c9e2:	44 0f       	add	r20, r20
    c9e4:	44 0f       	add	r20, r20
    c9e6:	80 91 da 0d 	lds	r24, 0x0DDA
    c9ea:	98 e0       	ldi	r25, 0x08	; 8
    c9ec:	a9 2e       	mov	r10, r25
    c9ee:	38 e0       	ldi	r19, 0x08	; 8
    c9f0:	c3 2e       	mov	r12, r19
    c9f2:	e4 2c       	mov	r14, r4
    c9f4:	60 91 dc 0d 	lds	r22, 0x0DDC
    c9f8:	8d 19       	sub	r24, r13
    c9fa:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBCollides>
    c9fe:	88 23       	and	r24, r24
    ca00:	a9 f0       	breq	.+42     	; 0xca2c <animate_enemy_shots+0xc8>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    ca02:	41 e0       	ldi	r20, 0x01	; 1
    ca04:	6f ef       	ldi	r22, 0xFF	; 255
    ca06:	84 e0       	ldi	r24, 0x04	; 4
    ca08:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
#endif
						if (game.player.shield <= 0)
    ca0c:	80 91 e9 0d 	lds	r24, 0x0DE9
    ca10:	18 16       	cp	r1, r24
    ca12:	4c f0       	brlt	.+18     	; 0xca26 <animate_enemy_shots+0xc2>
						{
							SFX_PLAYER_EXPLODE;
    ca14:	41 e0       	ldi	r20, 0x01	; 1
    ca16:	6f ef       	ldi	r22, 0xFF	; 255
    ca18:	85 e0       	ldi	r24, 0x05	; 5
    ca1a:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
							game.player.shield = 0;
    ca1e:	10 92 e9 0d 	sts	0x0DE9, r1
							game.player.flags = EXPLODING;
    ca22:	f0 92 e2 0d 	sts	0x0DE2, r15
						}
						game.enemies[i].shot[j].active = 0;
    ca26:	f4 01       	movw	r30, r8
    ca28:	10 82       	st	Z, r1
    ca2a:	1f c0       	rjmp	.+62     	; 0xca6a <animate_enemy_shots+0x106>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    ca2c:	00 91 d1 0d 	lds	r16, 0x0DD1
    ca30:	60 2f       	mov	r22, r16
    ca32:	f4 01       	movw	r30, r8
    ca34:	34 97       	sbiw	r30, 0x04	; 4
    ca36:	80 81       	ld	r24, Z
    ca38:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <LBMoveDelta>
    ca3c:	68 0e       	add	r6, r24
    ca3e:	79 1e       	adc	r7, r25
    ca40:	79 82       	std	Y+1, r7	; 0x01
    ca42:	68 82       	st	Y, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    ca44:	60 2f       	mov	r22, r16
    ca46:	f4 01       	movw	r30, r8
    ca48:	35 97       	sbiw	r30, 0x05	; 5
    ca4a:	80 81       	ld	r24, Z
    ca4c:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <LBMoveDelta>
    ca50:	48 0e       	add	r4, r24
    ca52:	59 1e       	adc	r5, r25
    ca54:	5b 82       	std	Y+3, r5	; 0x03
    ca56:	4a 82       	std	Y+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    ca58:	80 91 bf 0d 	lds	r24, 0x0DBF
    ca5c:	44 2d       	mov	r20, r4
    ca5e:	48 1b       	sub	r20, r24
    ca60:	66 2d       	mov	r22, r6
    ca62:	6d 19       	sub	r22, r13
    ca64:	01 e0       	ldi	r16, 0x01	; 1
    ca66:	21 e0       	ldi	r18, 0x01	; 1
    ca68:	04 c0       	rjmp	.+8      	; 0xca72 <animate_enemy_shots+0x10e>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    ca6a:	01 e0       	ldi	r16, 0x01	; 1
    ca6c:	21 e0       	ldi	r18, 0x01	; 1
    ca6e:	40 e0       	ldi	r20, 0x00	; 0
    ca70:	60 ee       	ldi	r22, 0xE0	; 224
    ca72:	81 2f       	mov	r24, r17
    ca74:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
				}
			}
			slot += 1;
    ca78:	1f 5f       	subi	r17, 0xFF	; 255
    ca7a:	f5 e3       	ldi	r31, 0x35	; 53
    ca7c:	8f 0e       	add	r8, r31
    ca7e:	91 1c       	adc	r9, r1
    ca80:	e5 96       	adiw	r28, 0x35	; 53

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ca82:	14 31       	cpi	r17, 0x14	; 20
    ca84:	09 f0       	breq	.+2      	; 0xca88 <animate_enemy_shots+0x124>
    ca86:	86 cf       	rjmp	.-244    	; 0xc994 <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    ca88:	df 91       	pop	r29
    ca8a:	cf 91       	pop	r28
    ca8c:	1f 91       	pop	r17
    ca8e:	0f 91       	pop	r16
    ca90:	ff 90       	pop	r15
    ca92:	ef 90       	pop	r14
    ca94:	df 90       	pop	r13
    ca96:	cf 90       	pop	r12
    ca98:	af 90       	pop	r10
    ca9a:	9f 90       	pop	r9
    ca9c:	8f 90       	pop	r8
    ca9e:	7f 90       	pop	r7
    caa0:	6f 90       	pop	r6
    caa2:	5f 90       	pop	r5
    caa4:	4f 90       	pop	r4
    caa6:	08 95       	ret

0000caa8 <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y)
{
    caa8:	ff 92       	push	r15
    caaa:	0f 93       	push	r16
    caac:	1f 93       	push	r17
    caae:	cf 93       	push	r28
    cab0:	df 93       	push	r29
    cab2:	ec 01       	movw	r28, r24
    cab4:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    cab6:	8e e0       	ldi	r24, 0x0E	; 14
    cab8:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    caba:	fe 01       	movw	r30, r28
    cabc:	84 91       	lpm	r24, Z
    cabe:	83 32       	cpi	r24, 0x23	; 35
    cac0:	31 f1       	breq	.+76     	; 0xcb0e <stream_text_middle+0x66>
	{
		ln = strnlen_P(dialogue, 255);
    cac2:	6f ef       	ldi	r22, 0xFF	; 255
    cac4:	70 e0       	ldi	r23, 0x00	; 0
    cac6:	ce 01       	movw	r24, r28
    cac8:	0e 94 21 75 	call	0xea42	; 0xea42 <strnlen_P>
		x = 14 - ln / 2;
    cacc:	86 95       	lsr	r24
    cace:	0f 2d       	mov	r16, r15
    cad0:	08 1b       	sub	r16, r24
    cad2:	0c 1b       	sub	r16, r28
    cad4:	8c 2f       	mov	r24, r28
    cad6:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    cad8:	21 96       	adiw	r28, 0x01	; 1
    cada:	fe 01       	movw	r30, r28
    cadc:	31 97       	sbiw	r30, 0x01	; 1
    cade:	44 91       	lpm	r20, Z
    cae0:	44 23       	and	r20, r20
    cae2:	99 f0       	breq	.+38     	; 0xcb0a <stream_text_middle+0x62>
		{
			LBPrintChar(x++, y, c);
    cae4:	61 2f       	mov	r22, r17
    cae6:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    caea:	60 e0       	ldi	r22, 0x00	; 0
    caec:	8e e4       	ldi	r24, 0x4E	; 78
    caee:	9e e0       	ldi	r25, 0x0E	; 14
    caf0:	0e 94 4e 4e 	call	0x9c9c	; 0x9c9c <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_A)) WaitUs(CHARACTER_DELAY_US);
    caf4:	80 91 52 0e 	lds	r24, 0x0E52
    caf8:	90 91 53 0e 	lds	r25, 0x0E53
    cafc:	90 fd       	sbrc	r25, 0
    cafe:	ea cf       	rjmp	.-44     	; 0xcad4 <stream_text_middle+0x2c>
    cb00:	80 e7       	ldi	r24, 0x70	; 112
    cb02:	97 e1       	ldi	r25, 0x17	; 23
    cb04:	0e 94 a6 3f 	call	0x7f4c	; 0x7f4c <WaitUs>
    cb08:	e5 cf       	rjmp	.-54     	; 0xcad4 <stream_text_middle+0x2c>
		}
		y++;
    cb0a:	1f 5f       	subi	r17, 0xFF	; 255
    cb0c:	d6 cf       	rjmp	.-84     	; 0xcaba <stream_text_middle+0x12>
	}
}
    cb0e:	df 91       	pop	r29
    cb10:	cf 91       	pop	r28
    cb12:	1f 91       	pop	r17
    cb14:	0f 91       	pop	r16
    cb16:	ff 90       	pop	r15
    cb18:	08 95       	ret

0000cb1a <print_scroll>:

void print_scroll(const unsigned char text[])
{
    cb1a:	0f 93       	push	r16
    cb1c:	cf 93       	push	r28
    cb1e:	df 93       	push	r29
    cb20:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    cb22:	40 e0       	ldi	r20, 0x00	; 0
    cb24:	67 e7       	ldi	r22, 0x77	; 119
    cb26:	73 e3       	ldi	r23, 0x33	; 51
    cb28:	80 e0       	ldi	r24, 0x00	; 0
    cb2a:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    cb2e:	01 e0       	ldi	r16, 0x01	; 1
    cb30:	21 e0       	ldi	r18, 0x01	; 1
    cb32:	40 e3       	ldi	r20, 0x30	; 48
    cb34:	60 e5       	ldi	r22, 0x50	; 80
    cb36:	80 e0       	ldi	r24, 0x00	; 0
    cb38:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    cb3c:	40 e0       	ldi	r20, 0x00	; 0
    cb3e:	64 e7       	ldi	r22, 0x74	; 116
    cb40:	73 e3       	ldi	r23, 0x33	; 51
    cb42:	81 e0       	ldi	r24, 0x01	; 1
    cb44:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    cb48:	21 e0       	ldi	r18, 0x01	; 1
    cb4a:	40 e3       	ldi	r20, 0x30	; 48
    cb4c:	60 e6       	ldi	r22, 0x60	; 96
    cb4e:	81 e0       	ldi	r24, 0x01	; 1
    cb50:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    cb54:	40 e0       	ldi	r20, 0x00	; 0
    cb56:	61 e7       	ldi	r22, 0x71	; 113
    cb58:	73 e3       	ldi	r23, 0x33	; 51
    cb5a:	82 e0       	ldi	r24, 0x02	; 2
    cb5c:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    cb60:	21 e0       	ldi	r18, 0x01	; 1
    cb62:	40 e3       	ldi	r20, 0x30	; 48
    cb64:	60 e7       	ldi	r22, 0x70	; 112
    cb66:	82 e0       	ldi	r24, 0x02	; 2
    cb68:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    cb6c:	40 e0       	ldi	r20, 0x00	; 0
    cb6e:	6e e6       	ldi	r22, 0x6E	; 110
    cb70:	73 e3       	ldi	r23, 0x33	; 51
    cb72:	83 e0       	ldi	r24, 0x03	; 3
    cb74:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    cb78:	21 e0       	ldi	r18, 0x01	; 1
    cb7a:	40 e3       	ldi	r20, 0x30	; 48
    cb7c:	60 e8       	ldi	r22, 0x80	; 128
    cb7e:	83 e0       	ldi	r24, 0x03	; 3
    cb80:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    cb84:	40 e0       	ldi	r20, 0x00	; 0
    cb86:	6b e6       	ldi	r22, 0x6B	; 107
    cb88:	73 e3       	ldi	r23, 0x33	; 51
    cb8a:	84 e0       	ldi	r24, 0x04	; 4
    cb8c:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    cb90:	21 e0       	ldi	r18, 0x01	; 1
    cb92:	40 e3       	ldi	r20, 0x30	; 48
    cb94:	60 e9       	ldi	r22, 0x90	; 144
    cb96:	84 e0       	ldi	r24, 0x04	; 4
    cb98:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	LBRotateSprites();
    cb9c:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	stream_text_middle((const char*) text, 12);
    cba0:	6c e0       	ldi	r22, 0x0C	; 12
    cba2:	ce 01       	movw	r24, r28
    cba4:	0e 94 54 65 	call	0xcaa8	; 0xcaa8 <stream_text_middle>
	LBWaitSeconds(2);
    cba8:	82 e0       	ldi	r24, 0x02	; 2
}
    cbaa:	df 91       	pop	r29
    cbac:	cf 91       	pop	r28
    cbae:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12);
	LBWaitSeconds(2);
    cbb0:	0c 94 7f 4f 	jmp	0x9efe	; 0x9efe <LBWaitSeconds>

0000cbb4 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    cbb4:	ef 92       	push	r14
    cbb6:	ff 92       	push	r15
    cbb8:	0f 93       	push	r16
    cbba:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    cbbc:	c8 2f       	mov	r28, r24
    cbbe:	e6 2e       	mov	r14, r22
    cbc0:	f1 2c       	mov	r15, r1
    cbc2:	e8 0e       	add	r14, r24
    cbc4:	f1 1c       	adc	r15, r1
    cbc6:	8c 2f       	mov	r24, r28
    cbc8:	90 e0       	ldi	r25, 0x00	; 0
    cbca:	8e 15       	cp	r24, r14
    cbcc:	9f 05       	cpc	r25, r15
    cbce:	7c f4       	brge	.+30     	; 0xcbee <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    cbd0:	40 e0       	ldi	r20, 0x00	; 0
    cbd2:	6f e8       	ldi	r22, 0x8F	; 143
    cbd4:	73 e3       	ldi	r23, 0x33	; 51
    cbd6:	8c 2f       	mov	r24, r28
    cbd8:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cbdc:	01 e0       	ldi	r16, 0x01	; 1
    cbde:	21 e0       	ldi	r18, 0x01	; 1
    cbe0:	40 e0       	ldi	r20, 0x00	; 0
    cbe2:	60 ee       	ldi	r22, 0xE0	; 224
    cbe4:	8c 2f       	mov	r24, r28
    cbe6:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cbea:	cf 5f       	subi	r28, 0xFF	; 255
    cbec:	ec cf       	rjmp	.-40     	; 0xcbc6 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cbee:	cf 91       	pop	r28
    cbf0:	0f 91       	pop	r16
    cbf2:	ff 90       	pop	r15
    cbf4:	ef 90       	pop	r14
    cbf6:	08 95       	ret

0000cbf8 <fade_through>:
#endif
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    cbf8:	61 e0       	ldi	r22, 0x01	; 1
    cbfa:	81 e0       	ldi	r24, 0x01	; 1
    cbfc:	0e 94 77 4d 	call	0x9aee	; 0x9aee <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cc00:	64 e1       	ldi	r22, 0x14	; 20
    cc02:	80 e0       	ldi	r24, 0x00	; 0
    cc04:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
	LBRotateSprites();
    cc08:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	ClearVram();
    cc0c:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cc10:	60 e0       	ldi	r22, 0x00	; 0
    cc12:	81 e0       	ldi	r24, 0x01	; 1
    cc14:	0c 94 6b 4d 	jmp	0x9ad6	; 0x9ad6 <FadeIn>

0000cc18 <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    cc18:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	StartSong(spacesong);
    cc1c:	80 eb       	ldi	r24, 0xB0	; 176
    cc1e:	96 e0       	ldi	r25, 0x06	; 6
    cc20:	0e 94 95 41 	call	0x832a	; 0x832a <StartSong>
	Screen.scrollX = 0;
    cc24:	ef ea       	ldi	r30, 0xAF	; 175
    cc26:	fc e0       	ldi	r31, 0x0C	; 12
    cc28:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    cc2a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    cc2c:	80 e2       	ldi	r24, 0x20	; 32
    cc2e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    cc30:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    cc32:	8e eb       	ldi	r24, 0xBE	; 190
    cc34:	91 e0       	ldi	r25, 0x01	; 1
    cc36:	0e 94 8d 65 	call	0xcb1a	; 0xcb1a <print_scroll>
	StopSong();
    cc3a:	0c 94 be 41 	jmp	0x837c	; 0x837c <StopSong>

0000cc3e <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    cc3e:	0f 93       	push	r16
    cc40:	cf 93       	push	r28
    cc42:	df 93       	push	r29
    cc44:	c8 2f       	mov	r28, r24
    cc46:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    cc48:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    cc4c:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    cc50:	8d e1       	ldi	r24, 0x1D	; 29
    cc52:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    cc56:	82 e9       	ldi	r24, 0x92	; 146
    cc58:	93 e3       	ldi	r25, 0x33	; 51
    cc5a:	90 93 b1 0c 	sts	0x0CB1, r25
    cc5e:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    cc62:	83 e0       	ldi	r24, 0x03	; 3
    cc64:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    cc68:	82 e0       	ldi	r24, 0x02	; 2
    cc6a:	0e 94 10 59 	call	0xb220	; 0xb220 <clear_overlay>
	game.current_level_index = index;
    cc6e:	c0 93 cc 0d 	sts	0x0DCC, r28
	game.level_ended = 0;
    cc72:	10 92 d4 0d 	sts	0x0DD4, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cc76:	10 92 53 0e 	sts	0x0E53, r1
    cc7a:	10 92 52 0e 	sts	0x0E52, r1
	p->pressed = 0;
    cc7e:	10 92 4f 0e 	sts	0x0E4F, r1
    cc82:	10 92 4e 0e 	sts	0x0E4E, r1
	p->released = 0;
    cc86:	10 92 51 0e 	sts	0x0E51, r1
    cc8a:	10 92 50 0e 	sts	0x0E50, r1
	p->held_cycles = 0;
    cc8e:	10 92 54 0e 	sts	0x0E54, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cc92:	10 92 ce 0e 	sts	0x0ECE, r1
    cc96:	10 92 cd 0e 	sts	0x0ECD, r1
	p->pressed = 0;
    cc9a:	10 92 ca 0e 	sts	0x0ECA, r1
    cc9e:	10 92 c9 0e 	sts	0x0EC9, r1
	p->released = 0;
    cca2:	10 92 cc 0e 	sts	0x0ECC, r1
    cca6:	10 92 cb 0e 	sts	0x0ECB, r1
	p->held_cycles = 0;
    ccaa:	10 92 cf 0e 	sts	0x0ECF, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    ccae:	8c 2f       	mov	r24, r28
    ccb0:	90 e0       	ldi	r25, 0x00	; 0
    ccb2:	8a 30       	cpi	r24, 0x0A	; 10
    ccb4:	91 05       	cpc	r25, r1
    ccb6:	d8 f4       	brcc	.+54     	; 0xccee <load_level+0xb0>
    ccb8:	fc 01       	movw	r30, r24
    ccba:	ef 5b       	subi	r30, 0xBF	; 191
    ccbc:	ff 4f       	sbci	r31, 0xFF	; 255
    ccbe:	0c 94 94 73 	jmp	0xe728	; 0xe728 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    ccc2:	81 e1       	ldi	r24, 0x11	; 17
    ccc4:	93 e7       	ldi	r25, 0x73	; 115
    ccc6:	11 c0       	rjmp	.+34     	; 0xccea <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    ccc8:	80 e1       	ldi	r24, 0x10	; 16
    ccca:	92 e7       	ldi	r25, 0x72	; 114
    cccc:	0e c0       	rjmp	.+28     	; 0xccea <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    ccce:	8f e0       	ldi	r24, 0x0F	; 15
    ccd0:	91 e7       	ldi	r25, 0x71	; 113
    ccd2:	0b c0       	rjmp	.+22     	; 0xccea <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    ccd4:	8e e0       	ldi	r24, 0x0E	; 14
    ccd6:	90 e7       	ldi	r25, 0x70	; 112
    ccd8:	08 c0       	rjmp	.+16     	; 0xccea <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    ccda:	8c e0       	ldi	r24, 0x0C	; 12
    ccdc:	9e e6       	ldi	r25, 0x6E	; 110
    ccde:	05 c0       	rjmp	.+10     	; 0xccea <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    cce0:	8d e0       	ldi	r24, 0x0D	; 13
    cce2:	9f e6       	ldi	r25, 0x6F	; 111
    cce4:	02 c0       	rjmp	.+4      	; 0xccea <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    cce6:	8b e0       	ldi	r24, 0x0B	; 11
    cce8:	9d e6       	ldi	r25, 0x6D	; 109
    ccea:	0e 94 50 5b 	call	0xb6a0	; 0xb6a0 <map_level_info>
	}
	game.column_count = 0;
    ccee:	10 92 c8 0d 	sts	0x0DC8, r1
	game.camera_x = get_camera_x(index);
    ccf2:	10 92 b8 0d 	sts	0x0DB8, r1
    ccf6:	10 92 b7 0d 	sts	0x0DB7, r1
	game.camera_y = get_camera_y(index);
    ccfa:	10 92 bf 0d 	sts	0x0DBF, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    ccfe:	88 e1       	ldi	r24, 0x18	; 24
    cd00:	90 e0       	ldi	r25, 0x00	; 0
    cd02:	90 93 db 0d 	sts	0x0DDB, r25
    cd06:	80 93 da 0d 	sts	0x0DDA, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    cd0a:	88 ea       	ldi	r24, 0xA8	; 168
    cd0c:	90 e0       	ldi	r25, 0x00	; 0
    cd0e:	90 93 dd 0d 	sts	0x0DDD, r25
    cd12:	80 93 dc 0d 	sts	0x0DDC, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    cd16:	28 ed       	ldi	r18, 0xD8	; 216
    cd18:	37 e0       	ldi	r19, 0x07	; 7
    cd1a:	30 93 56 0e 	sts	0x0E56, r19
    cd1e:	20 93 55 0e 	sts	0x0E55, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    cd22:	90 93 58 0e 	sts	0x0E58, r25
    cd26:	80 93 57 0e 	sts	0x0E57, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cd2a:	8d e1       	ldi	r24, 0x1D	; 29
    cd2c:	80 93 c0 0d 	sts	0x0DC0, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cd30:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cd34:	8a e1       	ldi	r24, 0x1A	; 26
    cd36:	80 93 c1 0d 	sts	0x0DC1, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cd3a:	80 93 c5 0d 	sts	0x0DC5, r24
	game.scroll_x = 0;
    cd3e:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    cd42:	10 92 c3 0d 	sts	0x0DC3, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    cd46:	8a e0       	ldi	r24, 0x0A	; 10
    cd48:	80 93 d3 0d 	sts	0x0DD3, r24
	game.flags = 0;
    cd4c:	10 92 d6 0d 	sts	0x0DD6, r1
	render_camera_view();
    cd50:	0e 94 50 59 	call	0xb2a0	; 0xb2a0 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    cd54:	49 e6       	ldi	r20, 0x69	; 105
    cd56:	53 e0       	ldi	r21, 0x03	; 3
    cd58:	6d e1       	ldi	r22, 0x1D	; 29
    cd5a:	80 e0       	ldi	r24, 0x00	; 0
    cd5c:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    cd60:	4c e5       	ldi	r20, 0x5C	; 92
    cd62:	53 e0       	ldi	r21, 0x03	; 3
    cd64:	6d e1       	ldi	r22, 0x1D	; 29
    cd66:	82 e1       	ldi	r24, 0x12	; 18
    cd68:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    cd6c:	42 e6       	ldi	r20, 0x62	; 98
    cd6e:	53 e0       	ldi	r21, 0x03	; 3
    cd70:	6e e1       	ldi	r22, 0x1E	; 30
    cd72:	80 e0       	ldi	r24, 0x00	; 0
    cd74:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    cd78:	41 e7       	ldi	r20, 0x71	; 113
    cd7a:	53 e0       	ldi	r21, 0x03	; 3
    cd7c:	6e e1       	ldi	r22, 0x1E	; 30
    cd7e:	81 e1       	ldi	r24, 0x11	; 17
    cd80:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    cd84:	4b e1       	ldi	r20, 0x1B	; 27
    cd86:	53 e0       	ldi	r21, 0x03	; 3
    cd88:	6f e1       	ldi	r22, 0x1F	; 31
    cd8a:	81 e1       	ldi	r24, 0x11	; 17
    cd8c:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cd90:	21 e0       	ldi	r18, 0x01	; 1
    cd92:	40 91 e9 0d 	lds	r20, 0x0DE9
    cd96:	6d e1       	ldi	r22, 0x1D	; 29
    cd98:	89 e0       	ldi	r24, 0x09	; 9
    cd9a:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cd9e:	40 91 bd 0d 	lds	r20, 0x0DBD
    cda2:	50 91 be 0d 	lds	r21, 0x0DBE
    cda6:	21 e0       	ldi	r18, 0x01	; 1
    cda8:	6d e1       	ldi	r22, 0x1D	; 29
    cdaa:	8b e1       	ldi	r24, 0x1B	; 27
    cdac:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cdb0:	21 e0       	ldi	r18, 0x01	; 1
    cdb2:	40 91 ca 0d 	lds	r20, 0x0DCA
    cdb6:	6e e1       	ldi	r22, 0x1E	; 30
    cdb8:	89 e0       	ldi	r24, 0x09	; 9
    cdba:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cdbe:	40 91 bb 0d 	lds	r20, 0x0DBB
    cdc2:	50 91 bc 0d 	lds	r21, 0x0DBC
    cdc6:	21 e0       	ldi	r18, 0x01	; 1
    cdc8:	6e e1       	ldi	r22, 0x1E	; 30
    cdca:	8b e1       	ldi	r24, 0x1B	; 27
    cdcc:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cdd0:	40 91 b9 0d 	lds	r20, 0x0DB9
    cdd4:	50 91 ba 0d 	lds	r21, 0x0DBA
    cdd8:	21 e0       	ldi	r18, 0x01	; 1
    cdda:	6f e1       	ldi	r22, 0x1F	; 31
    cddc:	8b e1       	ldi	r24, 0x1B	; 27
    cdde:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cde2:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    cde6:	81 11       	cpse	r24, r1
    cde8:	39 c0       	rjmp	.+114    	; 0xce5c <load_level+0x21e>
    cdea:	dd 23       	and	r29, r29
    cdec:	b9 f1       	breq	.+110    	; 0xce5c <load_level+0x21e>
	{
		map_ship();
    cdee:	0e 94 3b 5b 	call	0xb676	; 0xb676 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cdf2:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cdf4:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cdf6:	81 e0       	ldi	r24, 0x01	; 1
    cdf8:	90 e0       	ldi	r25, 0x00	; 0
    cdfa:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cdfe:	8c 2f       	mov	r24, r28
    ce00:	90 e0       	ldi	r25, 0x00	; 0
    ce02:	88 3a       	cpi	r24, 0xA8	; 168
    ce04:	91 05       	cpc	r25, r1
    ce06:	74 f0       	brlt	.+28     	; 0xce24 <load_level+0x1e6>
			{
				LBMapSprite(0, map_hero_idle, 0);
    ce08:	40 e0       	ldi	r20, 0x00	; 0
    ce0a:	63 e6       	ldi	r22, 0x63	; 99
    ce0c:	73 e3       	ldi	r23, 0x33	; 51
    ce0e:	80 e0       	ldi	r24, 0x00	; 0
    ce10:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    ce14:	03 e0       	ldi	r16, 0x03	; 3
    ce16:	22 e0       	ldi	r18, 0x02	; 2
    ce18:	48 ea       	ldi	r20, 0xA8	; 168
    ce1a:	68 e1       	ldi	r22, 0x18	; 24
    ce1c:	80 e0       	ldi	r24, 0x00	; 0
    ce1e:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
				ship_increment = -3;
    ce22:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    ce24:	8e e2       	ldi	r24, 0x2E	; 46
    ce26:	9e e0       	ldi	r25, 0x0E	; 14
    ce28:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    ce2c:	40 e0       	ldi	r20, 0x00	; 0
    ce2e:	bc 01       	movw	r22, r24
    ce30:	86 e0       	ldi	r24, 0x06	; 6
    ce32:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    ce36:	02 e0       	ldi	r16, 0x02	; 2
    ce38:	24 e0       	ldi	r18, 0x04	; 4
    ce3a:	4c 2f       	mov	r20, r28
    ce3c:	68 e0       	ldi	r22, 0x08	; 8
    ce3e:	86 e0       	ldi	r24, 0x06	; 6
    ce40:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
			ship_y += ship_increment;
    ce44:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    ce46:	39 f4       	brne	.+14     	; 0xce56 <load_level+0x218>
			{
				clear_sprites(6, 8);
    ce48:	68 e0       	ldi	r22, 0x08	; 8
    ce4a:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    ce4c:	df 91       	pop	r29
    ce4e:	cf 91       	pop	r28
    ce50:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    ce52:	0c 94 da 65 	jmp	0xcbb4	; 0xcbb4 <clear_sprites>
				break;
			}
			LBRotateSprites();
    ce56:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
		}
    ce5a:	cd cf       	rjmp	.-102    	; 0xcdf6 <load_level+0x1b8>
	}
}
    ce5c:	df 91       	pop	r29
    ce5e:	cf 91       	pop	r28
    ce60:	0f 91       	pop	r16
    ce62:	08 95       	ret

0000ce64 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    ce64:	0f 93       	push	r16
    ce66:	1f 93       	push	r17
    ce68:	cf 93       	push	r28
    ce6a:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    ce6c:	18 2f       	mov	r17, r24
    ce6e:	c6 2f       	mov	r28, r22
    ce70:	d0 e0       	ldi	r29, 0x00	; 0
    ce72:	c8 0f       	add	r28, r24
    ce74:	d1 1d       	adc	r29, r1
    ce76:	81 2f       	mov	r24, r17
    ce78:	90 e0       	ldi	r25, 0x00	; 0
    ce7a:	8c 17       	cp	r24, r28
    ce7c:	9d 07       	cpc	r25, r29
    ce7e:	4c f4       	brge	.+18     	; 0xce92 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    ce80:	01 e0       	ldi	r16, 0x01	; 1
    ce82:	21 e0       	ldi	r18, 0x01	; 1
    ce84:	40 e0       	ldi	r20, 0x00	; 0
    ce86:	60 ee       	ldi	r22, 0xE0	; 224
    ce88:	81 2f       	mov	r24, r17
    ce8a:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    ce8e:	1f 5f       	subi	r17, 0xFF	; 255
    ce90:	f2 cf       	rjmp	.-28     	; 0xce76 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    ce92:	df 91       	pop	r29
    ce94:	cf 91       	pop	r28
    ce96:	1f 91       	pop	r17
    ce98:	0f 91       	pop	r16
    ce9a:	08 95       	ret

0000ce9c <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    ce9c:	fc 01       	movw	r30, r24
    ce9e:	20 81       	ld	r18, Z
    cea0:	31 81       	ldd	r19, Z+1	; 0x01
    cea2:	29 70       	andi	r18, 0x09	; 9
    cea4:	33 27       	eor	r19, r19
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
    cea6:	81 e0       	ldi	r24, 0x01	; 1
    cea8:	23 2b       	or	r18, r19
    ceaa:	09 f4       	brne	.+2      	; 0xceae <select_pressed+0x12>
    ceac:	80 e0       	ldi	r24, 0x00	; 0
}
    ceae:	08 95       	ret

0000ceb0 <stream_text_anywhere>:
{
	return (p->pressed & BTN_SELECT);
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    ceb0:	ff 92       	push	r15
    ceb2:	0f 93       	push	r16
    ceb4:	1f 93       	push	r17
    ceb6:	cf 93       	push	r28
    ceb8:	df 93       	push	r29
    ceba:	f6 2e       	mov	r15, r22
    cebc:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    cebe:	fc 01       	movw	r30, r24
    cec0:	24 91       	lpm	r18, Z
    cec2:	23 32       	cpi	r18, 0x23	; 35
    cec4:	b1 f0       	breq	.+44     	; 0xcef2 <stream_text_anywhere+0x42>
    cec6:	ec 01       	movw	r28, r24
    cec8:	0f 2d       	mov	r16, r15
    ceca:	08 1b       	sub	r16, r24
    cecc:	8c 2f       	mov	r24, r28
    cece:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    ced0:	21 96       	adiw	r28, 0x01	; 1
    ced2:	fe 01       	movw	r30, r28
    ced4:	31 97       	sbiw	r30, 0x01	; 1
    ced6:	44 91       	lpm	r20, Z
    ced8:	44 23       	and	r20, r20
    ceda:	41 f0       	breq	.+16     	; 0xceec <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    cedc:	61 2f       	mov	r22, r17
    cede:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    cee2:	80 e7       	ldi	r24, 0x70	; 112
    cee4:	97 e1       	ldi	r25, 0x17	; 23
    cee6:	0e 94 a6 3f 	call	0x7f4c	; 0x7f4c <WaitUs>
    ceea:	f0 cf       	rjmp	.-32     	; 0xcecc <stream_text_anywhere+0x1c>
		}
		y++;
    ceec:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    ceee:	ce 01       	movw	r24, r28
    cef0:	e6 cf       	rjmp	.-52     	; 0xcebe <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cef2:	df 91       	pop	r29
    cef4:	cf 91       	pop	r28
    cef6:	1f 91       	pop	r17
    cef8:	0f 91       	pop	r16
    cefa:	ff 90       	pop	r15
    cefc:	08 95       	ret

0000cefe <map_particles>:

void map_particles()
{
    cefe:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    cf00:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    cf02:	40 e0       	ldi	r20, 0x00	; 0
    cf04:	63 e8       	ldi	r22, 0x83	; 131
    cf06:	73 e3       	ldi	r23, 0x33	; 51
    cf08:	8c 2f       	mov	r24, r28
    cf0a:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    cf0e:	cf 5f       	subi	r28, 0xFF	; 255
    cf10:	c4 31       	cpi	r28, 0x14	; 20
    cf12:	b9 f7       	brne	.-18     	; 0xcf02 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    cf14:	cf 91       	pop	r28
    cf16:	08 95       	ret

0000cf18 <place_particles>:

void place_particles()
{
    cf18:	0f 93       	push	r16
    cf1a:	1f 93       	push	r17
    cf1c:	cf 93       	push	r28
    cf1e:	df 93       	push	r29
    cf20:	1f 92       	push	r1
    cf22:	cd b7       	in	r28, 0x3d	; 61
    cf24:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    cf26:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    cf28:	68 ec       	ldi	r22, 0xC8	; 200
    cf2a:	80 e0       	ldi	r24, 0x00	; 0
    cf2c:	0e 94 69 4f 	call	0x9ed2	; 0x9ed2 <LBRandom>
    cf30:	48 2f       	mov	r20, r24
    cf32:	60 ee       	ldi	r22, 0xE0	; 224
    cf34:	80 e0       	ldi	r24, 0x00	; 0
    cf36:	49 83       	std	Y+1, r20	; 0x01
    cf38:	0e 94 69 4f 	call	0x9ed2	; 0x9ed2 <LBRandom>
    cf3c:	68 2f       	mov	r22, r24
    cf3e:	01 e0       	ldi	r16, 0x01	; 1
    cf40:	21 e0       	ldi	r18, 0x01	; 1
    cf42:	49 81       	ldd	r20, Y+1	; 0x01
    cf44:	81 2f       	mov	r24, r17
    cf46:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    cf4a:	1f 5f       	subi	r17, 0xFF	; 255
    cf4c:	14 31       	cpi	r17, 0x14	; 20
    cf4e:	61 f7       	brne	.-40     	; 0xcf28 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    cf50:	0f 90       	pop	r0
    cf52:	df 91       	pop	r29
    cf54:	cf 91       	pop	r28
    cf56:	1f 91       	pop	r17
    cf58:	0f 91       	pop	r16
    cf5a:	08 95       	ret

0000cf5c <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    cf5c:	ef 92       	push	r14
    cf5e:	ff 92       	push	r15
    cf60:	0f 93       	push	r16
    cf62:	1f 93       	push	r17
    cf64:	cf 93       	push	r28
    cf66:	df 93       	push	r29
    cf68:	d8 2f       	mov	r29, r24
    cf6a:	16 2f       	mov	r17, r22
    cf6c:	8a e0       	ldi	r24, 0x0A	; 10
    cf6e:	e8 2e       	mov	r14, r24
    cf70:	80 e1       	ldi	r24, 0x10	; 16
    cf72:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    cf74:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    cf76:	f7 01       	movw	r30, r14
    cf78:	40 81       	ld	r20, Z
    cf7a:	4d 0f       	add	r20, r29
    cf7c:	01 e0       	ldi	r16, 0x01	; 1
    cf7e:	21 e0       	ldi	r18, 0x01	; 1
    cf80:	31 97       	sbiw	r30, 0x01	; 1
    cf82:	60 81       	ld	r22, Z
    cf84:	8c 2f       	mov	r24, r28
    cf86:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    cf8a:	f7 01       	movw	r30, r14
    cf8c:	80 81       	ld	r24, Z
    cf8e:	89 3c       	cpi	r24, 0xC9	; 201
    cf90:	50 f0       	brcs	.+20     	; 0xcfa6 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    cf92:	60 ee       	ldi	r22, 0xE0	; 224
    cf94:	80 e0       	ldi	r24, 0x00	; 0
    cf96:	0e 94 69 4f 	call	0x9ed2	; 0x9ed2 <LBRandom>
    cf9a:	21 e0       	ldi	r18, 0x01	; 1
    cf9c:	41 2f       	mov	r20, r17
    cf9e:	68 2f       	mov	r22, r24
    cfa0:	8c 2f       	mov	r24, r28
    cfa2:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    cfa6:	cf 5f       	subi	r28, 0xFF	; 255
    cfa8:	f4 e0       	ldi	r31, 0x04	; 4
    cfaa:	ef 0e       	add	r14, r31
    cfac:	f1 1c       	adc	r15, r1
    cfae:	c4 31       	cpi	r28, 0x14	; 20
    cfb0:	11 f7       	brne	.-60     	; 0xcf76 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    cfb2:	df 91       	pop	r29
    cfb4:	cf 91       	pop	r28
    cfb6:	1f 91       	pop	r17
    cfb8:	0f 91       	pop	r16
    cfba:	ff 90       	pop	r15
    cfbc:	ef 90       	pop	r14
    cfbe:	08 95       	ret

0000cfc0 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    cfc0:	82 50       	subi	r24, 0x02	; 2
    cfc2:	87 30       	cpi	r24, 0x07	; 7
    cfc4:	48 f4       	brcc	.+18     	; 0xcfd8 <get_emarald_map+0x18>
    cfc6:	e8 2f       	mov	r30, r24
    cfc8:	f0 e0       	ldi	r31, 0x00	; 0
    cfca:	ee 0f       	add	r30, r30
    cfcc:	ff 1f       	adc	r31, r31
    cfce:	ee 5f       	subi	r30, 0xFE	; 254
    cfd0:	fa 4f       	sbci	r31, 0xFA	; 250
    cfd2:	80 81       	ld	r24, Z
    cfd4:	91 81       	ldd	r25, Z+1	; 0x01
    cfd6:	08 95       	ret
    cfd8:	87 e7       	ldi	r24, 0x77	; 119
    cfda:	93 e3       	ldi	r25, 0x33	; 51
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    cfdc:	08 95       	ret

0000cfde <music_transition>:

void music_transition()
{
	if (is_space())
    cfde:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    cfe2:	88 23       	and	r24, r24
    cfe4:	19 f0       	breq	.+6      	; 0xcfec <music_transition+0xe>
	{
		StartSong(spacesong);
    cfe6:	80 eb       	ldi	r24, 0xB0	; 176
    cfe8:	96 e0       	ldi	r25, 0x06	; 6
    cfea:	06 c0       	rjmp	.+12     	; 0xcff8 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    cfec:	80 91 cc 0d 	lds	r24, 0x0DCC
    cff0:	88 23       	and	r24, r24
    cff2:	21 f0       	breq	.+8      	; 0xcffc <music_transition+0x1e>
	{
		StartSong(planetsong);
    cff4:	80 e5       	ldi	r24, 0x50	; 80
    cff6:	9d e0       	ldi	r25, 0x0D	; 13
    cff8:	0c 94 95 41 	jmp	0x832a	; 0x832a <StartSong>
    cffc:	08 95       	ret

0000cffe <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cffe:	cf 92       	push	r12
    d000:	df 92       	push	r13
    d002:	ef 92       	push	r14
    d004:	ff 92       	push	r15
    d006:	0f 93       	push	r16
    d008:	1f 93       	push	r17
    d00a:	cf 93       	push	r28
    d00c:	df 93       	push	r29
    d00e:	1f 92       	push	r1
    d010:	cd b7       	in	r28, 0x3d	; 61
    d012:	de b7       	in	r29, 0x3e	; 62
    d014:	c8 2e       	mov	r12, r24
    d016:	e6 2e       	mov	r14, r22
    d018:	12 2f       	mov	r17, r18
    d01a:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    d01c:	49 83       	std	Y+1, r20	; 0x01
    d01e:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	Screen.scrollX = 0;
    d022:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d026:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d02a:	80 e2       	ldi	r24, 0x20	; 32
    d02c:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d030:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    d034:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    d038:	10 92 c3 0d 	sts	0x0DC3, r1
	map_particles();
    d03c:	0e 94 7f 67 	call	0xcefe	; 0xcefe <map_particles>
	map_ship();
    d040:	0e 94 3b 5b 	call	0xb676	; 0xb676 <map_ship>
	place_particles();
    d044:	0e 94 8c 67 	call	0xcf18	; 0xcf18 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    d048:	49 e7       	ldi	r20, 0x79	; 121
    d04a:	5b e5       	ldi	r21, 0x5B	; 91
    d04c:	69 81       	ldd	r22, Y+1	; 0x01
    d04e:	80 e0       	ldi	r24, 0x00	; 0
    d050:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <DrawMap>
	game.current_level_index = index;
    d054:	c0 92 cc 0d 	sts	0x0DCC, r12
	music_transition();
    d058:	0e 94 ef 67 	call	0xcfde	; 0xcfde <music_transition>
	if (!is_space())
    d05c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    d060:	81 11       	cpse	r24, r1
    d062:	0f c0       	rjmp	.+30     	; 0xd082 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    d064:	8c 2d       	mov	r24, r12
    d066:	0e 94 e0 67 	call	0xcfc0	; 0xcfc0 <get_emarald_map>
    d06a:	40 e0       	ldi	r20, 0x00	; 0
    d06c:	bc 01       	movw	r22, r24
    d06e:	88 e0       	ldi	r24, 0x08	; 8
    d070:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    d074:	01 e0       	ldi	r16, 0x01	; 1
    d076:	21 e0       	ldi	r18, 0x01	; 1
    d078:	40 e3       	ldi	r20, 0x30	; 48
    d07a:	60 e7       	ldi	r22, 0x70	; 112
    d07c:	88 e0       	ldi	r24, 0x08	; 8
    d07e:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d082:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    d084:	81 e0       	ldi	r24, 0x01	; 1
    d086:	90 e0       	ldi	r25, 0x00	; 0
    d088:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    d08c:	8e e2       	ldi	r24, 0x2E	; 46
    d08e:	9e e0       	ldi	r25, 0x0E	; 14
    d090:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    d094:	40 e0       	ldi	r20, 0x00	; 0
    d096:	bc 01       	movw	r22, r24
    d098:	80 e0       	ldi	r24, 0x00	; 0
    d09a:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    d09e:	02 e0       	ldi	r16, 0x02	; 2
    d0a0:	24 e0       	ldi	r18, 0x04	; 4
    d0a2:	48 e6       	ldi	r20, 0x68	; 104
    d0a4:	68 e6       	ldi	r22, 0x68	; 104
    d0a6:	80 e0       	ldi	r24, 0x00	; 0
    d0a8:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
		frame_counter++;
    d0ac:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    d0ae:	8d 2d       	mov	r24, r13
    d0b0:	8f 70       	andi	r24, 0x0F	; 15
    d0b2:	29 f4       	brne	.+10     	; 0xd0be <planet_transition+0xc0>
    d0b4:	90 91 b3 0c 	lds	r25, 0x0CB3
    d0b8:	9e 0d       	add	r25, r14
    d0ba:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    d0be:	6f 2d       	mov	r22, r15
    d0c0:	81 2f       	mov	r24, r17
    d0c2:	0e 94 ae 67 	call	0xcf5c	; 0xcf5c <animate_particles>
		LBRotateSprites();
    d0c6:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    d0ca:	8f ef       	ldi	r24, 0xFF	; 255
    d0cc:	d8 12       	cpse	r13, r24
    d0ce:	da cf       	rjmp	.-76     	; 0xd084 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    d0d0:	82 e0       	ldi	r24, 0x02	; 2
    d0d2:	80 93 cb 0d 	sts	0x0DCB, r24
	ClearVram();
    d0d6:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d0da:	64 e1       	ldi	r22, 0x14	; 20
    d0dc:	80 e0       	ldi	r24, 0x00	; 0
    d0de:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
	LBRotateSprites();
    d0e2:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	fade_through();
    d0e6:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	game.level_score = 0;
    d0ea:	10 92 bc 0d 	sts	0x0DBC, r1
    d0ee:	10 92 bb 0d 	sts	0x0DBB, r1
	load_level(index, true);
    d0f2:	61 e0       	ldi	r22, 0x01	; 1
    d0f4:	8c 2d       	mov	r24, r12
    d0f6:	0e 94 1f 66 	call	0xcc3e	; 0xcc3e <load_level>
	init_player_state();
    d0fa:	0e 94 03 55 	call	0xaa06	; 0xaa06 <init_player_state>
	init_boss_state();
    d0fe:	0e 94 79 54 	call	0xa8f2	; 0xa8f2 <init_boss_state>
	init_enemy_state();
}
    d102:	0f 90       	pop	r0
    d104:	df 91       	pop	r29
    d106:	cf 91       	pop	r28
    d108:	1f 91       	pop	r17
    d10a:	0f 91       	pop	r16
    d10c:	ff 90       	pop	r15
    d10e:	ef 90       	pop	r14
    d110:	df 90       	pop	r13
    d112:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d114:	0c 94 6c 50 	jmp	0xa0d8	; 0xa0d8 <init_enemy_state>

0000d118 <intro>:
}


void intro()
{
    d118:	0f 93       	push	r16
	fade_through();
    d11a:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	game.lives = LIVES;
    d11e:	e7 eb       	ldi	r30, 0xB7	; 183
    d120:	fd e0       	ldi	r31, 0x0D	; 13
    d122:	8a e0       	ldi	r24, 0x0A	; 10
    d124:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d126:	13 82       	std	Z+3, r1	; 0x03
    d128:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d12a:	15 82       	std	Z+5, r1	; 0x05
    d12c:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d12e:	17 82       	std	Z+7, r1	; 0x07
    d130:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    d132:	80 e5       	ldi	r24, 0x50	; 80
    d134:	9d e0       	ldi	r25, 0x0D	; 13
    d136:	0e 94 95 41 	call	0x832a	; 0x832a <StartSong>
	print_scroll(strIntro);
    d13a:	84 e7       	ldi	r24, 0x74	; 116
    d13c:	92 e0       	ldi	r25, 0x02	; 2
    d13e:	0e 94 8d 65 	call	0xcb1a	; 0xcb1a <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    d142:	07 ec       	ldi	r16, 0xC7	; 199
    d144:	2d ef       	ldi	r18, 0xFD	; 253
    d146:	4c e1       	ldi	r20, 0x1C	; 28
    d148:	61 e0       	ldi	r22, 0x01	; 1
    d14a:	80 e0       	ldi	r24, 0x00	; 0
    d14c:	0e 94 ff 67 	call	0xcffe	; 0xcffe <planet_transition>
}
    d150:	0f 91       	pop	r16
    d152:	08 95       	ret

0000d154 <demo_load>:

void demo_load(u8 idx)
{
    d154:	cf 93       	push	r28
    d156:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    d158:	e7 eb       	ldi	r30, 0xB7	; 183
    d15a:	fd e0       	ldi	r31, 0x0D	; 13
    d15c:	8a e0       	ldi	r24, 0x0A	; 10
    d15e:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d160:	13 82       	std	Z+3, r1	; 0x03
    d162:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d164:	15 82       	std	Z+5, r1	; 0x05
    d166:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d168:	17 82       	std	Z+7, r1	; 0x07
    d16a:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    d16c:	82 e0       	ldi	r24, 0x02	; 2
    d16e:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    d170:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d174:	64 e1       	ldi	r22, 0x14	; 20
    d176:	80 e0       	ldi	r24, 0x00	; 0
    d178:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
	LBRotateSprites();
    d17c:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	fade_through();
    d180:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	load_level(idx, true);
    d184:	61 e0       	ldi	r22, 0x01	; 1
    d186:	8c 2f       	mov	r24, r28
    d188:	0e 94 1f 66 	call	0xcc3e	; 0xcc3e <load_level>
	init_player_state();
    d18c:	0e 94 03 55 	call	0xaa06	; 0xaa06 <init_player_state>
	init_boss_state();
    d190:	0e 94 79 54 	call	0xa8f2	; 0xa8f2 <init_boss_state>
	init_enemy_state();
}
    d194:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d196:	0c 94 6c 50 	jmp	0xa0d8	; 0xa0d8 <init_enemy_state>

0000d19a <load_splash>:
}

void load_splash()
{
	fade_through();
    d19a:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	Screen.scrollX = 0;
    d19e:	ef ea       	ldi	r30, 0xAF	; 175
    d1a0:	fc e0       	ldi	r31, 0x0C	; 12
    d1a2:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d1a4:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d1a6:	80 e2       	ldi	r24, 0x20	; 32
    d1a8:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d1aa:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d1ac:	e7 eb       	ldi	r30, 0xB7	; 183
    d1ae:	fd e0       	ldi	r31, 0x0D	; 13
    d1b0:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    d1b2:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d1b4:	64 e1       	ldi	r22, 0x14	; 20
    d1b6:	80 e0       	ldi	r24, 0x00	; 0
    d1b8:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
	LBRotateSprites();
    d1bc:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d1c0:	45 e8       	ldi	r20, 0x85	; 133
    d1c2:	53 e0       	ldi	r21, 0x03	; 3
    d1c4:	6f e0       	ldi	r22, 0x0F	; 15
    d1c6:	88 e0       	ldi	r24, 0x08	; 8
    d1c8:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d1cc:	49 e7       	ldi	r20, 0x79	; 121
    d1ce:	53 e0       	ldi	r21, 0x03	; 3
    d1d0:	60 e1       	ldi	r22, 0x10	; 16
    d1d2:	88 e0       	ldi	r24, 0x08	; 8
    d1d4:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d1d8:	4b e8       	ldi	r20, 0x8B	; 139
    d1da:	53 e0       	ldi	r21, 0x03	; 3
    d1dc:	65 e1       	ldi	r22, 0x15	; 21
    d1de:	84 e0       	ldi	r24, 0x04	; 4
    d1e0:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	DrawMap2(6, 5, map_splash);
    d1e4:	4e e9       	ldi	r20, 0x9E	; 158
    d1e6:	5c e5       	ldi	r21, 0x5C	; 92
    d1e8:	65 e0       	ldi	r22, 0x05	; 5
    d1ea:	86 e0       	ldi	r24, 0x06	; 6
    d1ec:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d1f0:	40 e0       	ldi	r20, 0x00	; 0
    d1f2:	6c e8       	ldi	r22, 0x8C	; 140
    d1f4:	73 e3       	ldi	r23, 0x33	; 51
    d1f6:	80 e0       	ldi	r24, 0x00	; 0
    d1f8:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <LBMapSprite>

0000d1fc <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d1fc:	2f 92       	push	r2
    d1fe:	3f 92       	push	r3
    d200:	5f 92       	push	r5
    d202:	6f 92       	push	r6
    d204:	7f 92       	push	r7
    d206:	8f 92       	push	r8
    d208:	9f 92       	push	r9
    d20a:	af 92       	push	r10
    d20c:	bf 92       	push	r11
    d20e:	cf 92       	push	r12
    d210:	df 92       	push	r13
    d212:	ef 92       	push	r14
    d214:	ff 92       	push	r15
    d216:	0f 93       	push	r16
    d218:	1f 93       	push	r17
    d21a:	cf 93       	push	r28
    d21c:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d21e:	81 e0       	ldi	r24, 0x01	; 1
    d220:	80 93 cb 0d 	sts	0x0DCB, r24
	game.high_score_index = -1;
    d224:	8f ef       	ldi	r24, 0xFF	; 255
    d226:	80 93 c9 0d 	sts	0x0DC9, r24
	fade_through();
    d22a:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	Screen.scrollX = 0;
    d22e:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d232:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d236:	80 e2       	ldi	r24, 0x20	; 32
    d238:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d23c:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
	
	LBPrint(9, 3, (char*) strHighScores);
    d240:	49 e7       	ldi	r20, 0x79	; 121
    d242:	53 e0       	ldi	r21, 0x03	; 3
    d244:	63 e0       	ldi	r22, 0x03	; 3
    d246:	89 e0       	ldi	r24, 0x09	; 9
    d248:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d24c:	40 e0       	ldi	r20, 0x00	; 0
    d24e:	67 e7       	ldi	r22, 0x77	; 119
    d250:	73 e3       	ldi	r23, 0x33	; 51
    d252:	80 e0       	ldi	r24, 0x00	; 0
    d254:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d258:	40 e0       	ldi	r20, 0x00	; 0
    d25a:	64 e7       	ldi	r22, 0x74	; 116
    d25c:	73 e3       	ldi	r23, 0x33	; 51
    d25e:	81 e0       	ldi	r24, 0x01	; 1
    d260:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d264:	01 e0       	ldi	r16, 0x01	; 1
    d266:	21 e0       	ldi	r18, 0x01	; 1
    d268:	48 e1       	ldi	r20, 0x18	; 24
    d26a:	68 e3       	ldi	r22, 0x38	; 56
    d26c:	80 e0       	ldi	r24, 0x00	; 0
    d26e:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d272:	21 e0       	ldi	r18, 0x01	; 1
    d274:	48 e1       	ldi	r20, 0x18	; 24
    d276:	68 ea       	ldi	r22, 0xA8	; 168
    d278:	81 e0       	ldi	r24, 0x01	; 1
    d27a:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
    d27e:	89 e9       	ldi	r24, 0x99	; 153
    d280:	a8 2e       	mov	r10, r24
    d282:	8d e0       	ldi	r24, 0x0D	; 13
    d284:	b8 2e       	mov	r11, r24
    d286:	9a e9       	ldi	r25, 0x9A	; 154
    d288:	c9 2e       	mov	r12, r25
    d28a:	9d e0       	ldi	r25, 0x0D	; 13
    d28c:	d9 2e       	mov	r13, r25
    d28e:	2b e9       	ldi	r18, 0x9B	; 155
    d290:	82 2e       	mov	r8, r18
    d292:	2d e0       	ldi	r18, 0x0D	; 13
    d294:	92 2e       	mov	r9, r18
    d296:	74 01       	movw	r14, r8
    d298:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d29a:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d29c:	35 e0       	ldi	r19, 0x05	; 5
    d29e:	53 2e       	mov	r5, r19
    d2a0:	42 eb       	ldi	r20, 0xB2	; 178
    d2a2:	64 2e       	mov	r6, r20
    d2a4:	4d e0       	ldi	r20, 0x0D	; 13
    d2a6:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d2a8:	11 e4       	ldi	r17, 0x41	; 65
    d2aa:	0e 2d       	mov	r16, r14
    d2ac:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d2ae:	80 2f       	mov	r24, r16
    d2b0:	65 2d       	mov	r22, r5
    d2b2:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    d2b6:	41 e0       	ldi	r20, 0x01	; 1
    d2b8:	48 0f       	add	r20, r24
    d2ba:	20 e0       	ldi	r18, 0x00	; 0
    d2bc:	6c 2f       	mov	r22, r28
    d2be:	89 e0       	ldi	r24, 0x09	; 9
    d2c0:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d2c4:	40 e2       	ldi	r20, 0x20	; 32
    d2c6:	6c 2f       	mov	r22, r28
    d2c8:	8a e0       	ldi	r24, 0x0A	; 10
    d2ca:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d2ce:	f5 01       	movw	r30, r10
    d2d0:	40 81       	ld	r20, Z
    d2d2:	6c 2f       	mov	r22, r28
    d2d4:	8b e0       	ldi	r24, 0x0B	; 11
    d2d6:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d2da:	f6 01       	movw	r30, r12
    d2dc:	40 81       	ld	r20, Z
    d2de:	6c 2f       	mov	r22, r28
    d2e0:	8c e0       	ldi	r24, 0x0C	; 12
    d2e2:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d2e6:	f7 01       	movw	r30, r14
    d2e8:	40 81       	ld	r20, Z
    d2ea:	6c 2f       	mov	r22, r28
    d2ec:	8d e0       	ldi	r24, 0x0D	; 13
    d2ee:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d2f2:	40 e2       	ldi	r20, 0x20	; 32
    d2f4:	6c 2f       	mov	r22, r28
    d2f6:	8e e0       	ldi	r24, 0x0E	; 14
    d2f8:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d2fc:	f7 01       	movw	r30, r14
    d2fe:	21 80       	ldd	r2, Z+1	; 0x01
    d300:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d302:	21 e0       	ldi	r18, 0x01	; 1
    d304:	a1 01       	movw	r20, r2
    d306:	6c 2f       	mov	r22, r28
    d308:	83 e1       	ldi	r24, 0x13	; 19
    d30a:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d30e:	20 91 b9 0d 	lds	r18, 0x0DB9
    d312:	30 91 ba 0d 	lds	r19, 0x0DBA
    d316:	22 16       	cp	r2, r18
    d318:	33 06       	cpc	r3, r19
    d31a:	08 f0       	brcs	.+2      	; 0xd31e <load_high_scores+0x122>
    d31c:	5a c0       	rjmp	.+180    	; 0xd3d2 <load_high_scores+0x1d6>
    d31e:	80 91 c9 0d 	lds	r24, 0x0DC9
    d322:	8f 3f       	cpi	r24, 0xFF	; 255
    d324:	09 f0       	breq	.+2      	; 0xd328 <load_high_scores+0x12c>
    d326:	55 c0       	rjmp	.+170    	; 0xd3d2 <load_high_scores+0x1d6>
    d328:	80 91 d0 0d 	lds	r24, 0x0DD0
    d32c:	82 30       	cpi	r24, 0x02	; 2
    d32e:	09 f4       	brne	.+2      	; 0xd332 <load_high_scores+0x136>
    d330:	50 c0       	rjmp	.+160    	; 0xd3d2 <load_high_scores+0x1d6>
    d332:	a2 eb       	ldi	r26, 0xB2	; 178
    d334:	bd e0       	ldi	r27, 0x0D	; 13
    d336:	cd 01       	movw	r24, r26
    d338:	05 97       	sbiw	r24, 0x05	; 5
    d33a:	4e e1       	ldi	r20, 0x1E	; 30
    d33c:	48 0f       	add	r20, r24
    d33e:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d340:	04 17       	cp	r16, r20
    d342:	40 f4       	brcc	.+16     	; 0xd354 <load_high_scores+0x158>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d344:	fc 01       	movw	r30, r24
    d346:	45 2d       	mov	r20, r5
    d348:	01 90       	ld	r0, Z+
    d34a:	0d 92       	st	X+, r0
    d34c:	4a 95       	dec	r20
    d34e:	e1 f7       	brne	.-8      	; 0xd348 <load_high_scores+0x14c>
    d350:	dc 01       	movw	r26, r24
    d352:	f1 cf       	rjmp	.-30     	; 0xd336 <load_high_scores+0x13a>
			}
			scores.data[i] = 'A';
    d354:	f5 01       	movw	r30, r10
    d356:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d358:	f6 01       	movw	r30, r12
    d35a:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d35c:	f7 01       	movw	r30, r14
    d35e:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d360:	32 83       	std	Z+2, r19	; 0x02
    d362:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d364:	f5 01       	movw	r30, r10
    d366:	40 81       	ld	r20, Z
    d368:	6c 2f       	mov	r22, r28
    d36a:	8b e0       	ldi	r24, 0x0B	; 11
    d36c:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d370:	f6 01       	movw	r30, r12
    d372:	40 81       	ld	r20, Z
    d374:	6c 2f       	mov	r22, r28
    d376:	8c e0       	ldi	r24, 0x0C	; 12
    d378:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d37c:	f7 01       	movw	r30, r14
    d37e:	40 81       	ld	r20, Z
    d380:	6c 2f       	mov	r22, r28
    d382:	8d e0       	ldi	r24, 0x0D	; 13
    d384:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d388:	40 91 b9 0d 	lds	r20, 0x0DB9
    d38c:	50 91 ba 0d 	lds	r21, 0x0DBA
    d390:	21 e0       	ldi	r18, 0x01	; 1
    d392:	6c 2f       	mov	r22, r28
    d394:	83 e1       	ldi	r24, 0x13	; 19
    d396:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
			game.high_score_index = i;
    d39a:	00 93 c9 0d 	sts	0x0DC9, r16
			LBMapSprite(2, map_down_arrow, 0);
    d39e:	40 e0       	ldi	r20, 0x00	; 0
    d3a0:	69 e8       	ldi	r22, 0x89	; 137
    d3a2:	73 e3       	ldi	r23, 0x33	; 51
    d3a4:	82 e0       	ldi	r24, 0x02	; 2
    d3a6:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d3aa:	40 e0       	ldi	r20, 0x00	; 0
    d3ac:	66 e8       	ldi	r22, 0x86	; 134
    d3ae:	73 e3       	ldi	r23, 0x33	; 51
    d3b0:	83 e0       	ldi	r24, 0x03	; 3
    d3b2:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d3b6:	01 e0       	ldi	r16, 0x01	; 1
    d3b8:	21 e0       	ldi	r18, 0x01	; 1
    d3ba:	4d 2f       	mov	r20, r29
    d3bc:	68 e5       	ldi	r22, 0x58	; 88
    d3be:	82 e0       	ldi	r24, 0x02	; 2
    d3c0:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d3c4:	21 e0       	ldi	r18, 0x01	; 1
    d3c6:	40 e1       	ldi	r20, 0x10	; 16
    d3c8:	4d 0f       	add	r20, r29
    d3ca:	68 e5       	ldi	r22, 0x58	; 88
    d3cc:	83 e0       	ldi	r24, 0x03	; 3
    d3ce:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
		}
		
		ypos += 2;
    d3d2:	ce 5f       	subi	r28, 0xFE	; 254
    d3d4:	f5 e0       	ldi	r31, 0x05	; 5
    d3d6:	af 0e       	add	r10, r31
    d3d8:	b1 1c       	adc	r11, r1
    d3da:	85 e0       	ldi	r24, 0x05	; 5
    d3dc:	c8 0e       	add	r12, r24
    d3de:	d1 1c       	adc	r13, r1
    d3e0:	e5 e0       	ldi	r30, 0x05	; 5
    d3e2:	ee 0e       	add	r14, r30
    d3e4:	f1 1c       	adc	r15, r1
    d3e6:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d3e8:	c3 31       	cpi	r28, 0x13	; 19
    d3ea:	09 f0       	breq	.+2      	; 0xd3ee <load_high_scores+0x1f2>
    d3ec:	5e cf       	rjmp	.-324    	; 0xd2aa <load_high_scores+0xae>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d3ee:	40 e5       	ldi	r20, 0x50	; 80
    d3f0:	53 e0       	ldi	r21, 0x03	; 3
    d3f2:	66 e1       	ldi	r22, 0x16	; 22
    d3f4:	89 e0       	ldi	r24, 0x09	; 9
}
    d3f6:	df 91       	pop	r29
    d3f8:	cf 91       	pop	r28
    d3fa:	1f 91       	pop	r17
    d3fc:	0f 91       	pop	r16
    d3fe:	ff 90       	pop	r15
    d400:	ef 90       	pop	r14
    d402:	df 90       	pop	r13
    d404:	cf 90       	pop	r12
    d406:	bf 90       	pop	r11
    d408:	af 90       	pop	r10
    d40a:	9f 90       	pop	r9
    d40c:	8f 90       	pop	r8
    d40e:	7f 90       	pop	r7
    d410:	6f 90       	pop	r6
    d412:	5f 90       	pop	r5
    d414:	3f 90       	pop	r3
    d416:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d418:	0c 94 b9 4e 	jmp	0x9d72	; 0x9d72 <LBPrint>

0000d41c <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d41c:	64 e1       	ldi	r22, 0x14	; 20
    d41e:	80 e0       	ldi	r24, 0x00	; 0
    d420:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
	LBRotateSprites();
    d424:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	init_player_state();
    d428:	0e 94 03 55 	call	0xaa06	; 0xaa06 <init_player_state>
	init_boss_state();
    d42c:	0e 94 79 54 	call	0xa8f2	; 0xa8f2 <init_boss_state>
	init_enemy_state();
    d430:	0e 94 6c 50 	call	0xa0d8	; 0xa0d8 <init_enemy_state>
	StopSong();
    d434:	0e 94 be 41 	call	0x837c	; 0x837c <StopSong>
	load_high_scores();
    d438:	0c 94 fe 68 	jmp	0xd1fc	; 0xd1fc <load_high_scores>

0000d43c <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d43c:	0f 93       	push	r16
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	if (game.player.controls.pressed) demo_counter = 0;
    d43e:	80 91 4e 0e 	lds	r24, 0x0E4E
    d442:	90 91 4f 0e 	lds	r25, 0x0E4F
    d446:	00 97       	sbiw	r24, 0x00	; 0
    d448:	21 f0       	breq	.+8      	; 0xd452 <update_splash+0x16>
    d44a:	10 92 f6 0c 	sts	0x0CF6, r1
    d44e:	10 92 f5 0c 	sts	0x0CF5, r1
	
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d452:	85 ff       	sbrs	r24, 5
    d454:	08 c0       	rjmp	.+16     	; 0xd466 <update_splash+0x2a>
    d456:	20 91 d0 0d 	lds	r18, 0x0DD0
    d45a:	21 11       	cpse	r18, r1
    d45c:	04 c0       	rjmp	.+8      	; 0xd466 <update_splash+0x2a>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d45e:	81 e0       	ldi	r24, 0x01	; 1
    d460:	80 93 d0 0d 	sts	0x0DD0, r24
    d464:	08 c0       	rjmp	.+16     	; 0xd476 <update_splash+0x3a>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d466:	84 ff       	sbrs	r24, 4
    d468:	0c c0       	rjmp	.+24     	; 0xd482 <update_splash+0x46>
    d46a:	80 91 d0 0d 	lds	r24, 0x0DD0
    d46e:	81 30       	cpi	r24, 0x01	; 1
    d470:	41 f4       	brne	.+16     	; 0xd482 <update_splash+0x46>
	{
		game.selection = START_SELECTED;
    d472:	10 92 d0 0d 	sts	0x0DD0, r1
		SFX_NAVIGATE;
    d476:	41 e0       	ldi	r20, 0x01	; 1
    d478:	6f ef       	ldi	r22, 0xFF	; 255
    d47a:	82 e0       	ldi	r24, 0x02	; 2
    d47c:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
    d480:	40 c0       	rjmp	.+128    	; 0xd502 <update_splash+0xc6>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d482:	8e e4       	ldi	r24, 0x4E	; 78
    d484:	9e e0       	ldi	r25, 0x0E	; 14
    d486:	0e 94 4e 67 	call	0xce9c	; 0xce9c <select_pressed>
    d48a:	88 23       	and	r24, r24
    d48c:	b1 f0       	breq	.+44     	; 0xd4ba <update_splash+0x7e>
    d48e:	80 91 d0 0d 	lds	r24, 0x0DD0
    d492:	81 11       	cpse	r24, r1
    d494:	08 c0       	rjmp	.+16     	; 0xd4a6 <update_splash+0x6a>
	{
		SFX_NAVIGATE;
    d496:	41 e0       	ldi	r20, 0x01	; 1
    d498:	6f ef       	ldi	r22, 0xFF	; 255
    d49a:	82 e0       	ldi	r24, 0x02	; 2
    d49c:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d4a0:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d4a2:	0c 94 8c 68 	jmp	0xd118	; 0xd118 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d4a6:	81 30       	cpi	r24, 0x01	; 1
    d4a8:	41 f4       	brne	.+16     	; 0xd4ba <update_splash+0x7e>
	{
		SFX_NAVIGATE;
    d4aa:	41 e0       	ldi	r20, 0x01	; 1
    d4ac:	6f ef       	ldi	r22, 0xFF	; 255
    d4ae:	82 e0       	ldi	r24, 0x02	; 2
    d4b0:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d4b4:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d4b6:	0c 94 fe 68 	jmp	0xd1fc	; 0xd1fc <load_high_scores>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    d4ba:	80 91 f5 0c 	lds	r24, 0x0CF5
    d4be:	90 91 f6 0c 	lds	r25, 0x0CF6
    d4c2:	88 35       	cpi	r24, 0x58	; 88
    d4c4:	92 40       	sbci	r25, 0x02	; 2
    d4c6:	e8 f0       	brcs	.+58     	; 0xd502 <update_splash+0xc6>
	{
		demo_counter = 0;
    d4c8:	10 92 f6 0c 	sts	0x0CF6, r1
    d4cc:	10 92 f5 0c 	sts	0x0CF5, r1
		game.selection = DEMO_SELECTED;
    d4d0:	82 e0       	ldi	r24, 0x02	; 2
    d4d2:	80 93 d0 0d 	sts	0x0DD0, r24
		demo_load(demo_choice++);
    d4d6:	80 91 f4 0c 	lds	r24, 0x0CF4
    d4da:	91 e0       	ldi	r25, 0x01	; 1
    d4dc:	98 0f       	add	r25, r24
    d4de:	90 93 f4 0c 	sts	0x0CF4, r25
    d4e2:	0e 94 aa 68 	call	0xd154	; 0xd154 <demo_load>
		if (demo_choice == 2) demo_choice = 3;
    d4e6:	80 91 f4 0c 	lds	r24, 0x0CF4
    d4ea:	82 30       	cpi	r24, 0x02	; 2
    d4ec:	19 f4       	brne	.+6      	; 0xd4f4 <update_splash+0xb8>
    d4ee:	83 e0       	ldi	r24, 0x03	; 3
    d4f0:	80 93 f4 0c 	sts	0x0CF4, r24
		if (demo_choice == 5) demo_choice = 0;
    d4f4:	80 91 f4 0c 	lds	r24, 0x0CF4
    d4f8:	85 30       	cpi	r24, 0x05	; 5
    d4fa:	d1 f4       	brne	.+52     	; 0xd530 <update_splash+0xf4>
    d4fc:	10 92 f4 0c 	sts	0x0CF4, r1
    d500:	17 c0       	rjmp	.+46     	; 0xd530 <update_splash+0xf4>
		return;
		
	}
	demo_counter++;
    d502:	80 91 f5 0c 	lds	r24, 0x0CF5
    d506:	90 91 f6 0c 	lds	r25, 0x0CF6
    d50a:	01 96       	adiw	r24, 0x01	; 1
    d50c:	90 93 f6 0c 	sts	0x0CF6, r25
    d510:	80 93 f5 0c 	sts	0x0CF5, r24
	
	if (game.selection == START_SELECTED)
    d514:	80 91 d0 0d 	lds	r24, 0x0DD0
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d518:	01 e0       	ldi	r16, 0x01	; 1
    d51a:	21 e0       	ldi	r18, 0x01	; 1
		return;
		
	}
	demo_counter++;
	
	if (game.selection == START_SELECTED)
    d51c:	81 11       	cpse	r24, r1
    d51e:	03 c0       	rjmp	.+6      	; 0xd526 <update_splash+0xea>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d520:	48 e7       	ldi	r20, 0x78	; 120
    d522:	68 e3       	ldi	r22, 0x38	; 56
    d524:	03 c0       	rjmp	.+6      	; 0xd52c <update_splash+0xf0>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d526:	40 e8       	ldi	r20, 0x80	; 128
    d528:	68 e3       	ldi	r22, 0x38	; 56
    d52a:	80 e0       	ldi	r24, 0x00	; 0
    d52c:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
	}
}
    d530:	0f 91       	pop	r16
    d532:	08 95       	ret

0000d534 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{	
    d534:	0f 93       	push	r16
    d536:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_X)
    d538:	80 91 4e 0e 	lds	r24, 0x0E4E
    d53c:	90 91 4f 0e 	lds	r25, 0x0E4F
    d540:	91 ff       	sbrs	r25, 1
    d542:	10 c0       	rjmp	.+32     	; 0xd564 <update_high_scores+0x30>
	{
		game.high_score_counter = 0;
    d544:	10 92 d9 0d 	sts	0x0DD9, r1
		SFX_NAVIGATE;
    d548:	41 e0       	ldi	r20, 0x01	; 1
    d54a:	6f ef       	ldi	r22, 0xFF	; 255
    d54c:	82 e0       	ldi	r24, 0x02	; 2
    d54e:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
		game.high_score_index = -1;
    d552:	8f ef       	ldi	r24, 0xFF	; 255
    d554:	80 93 c9 0d 	sts	0x0DC9, r24
		game.score = 0;
    d558:	10 92 ba 0d 	sts	0x0DBA, r1
    d55c:	10 92 b9 0d 	sts	0x0DB9, r1
		save_eeprom(&scores);
		load_splash();
    d560:	0e 94 cd 68 	call	0xd19a	; 0xd19a <load_splash>
	}
	if ((game.player.controls.held & BTN_SL) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    d564:	80 91 52 0e 	lds	r24, 0x0E52
    d568:	90 91 53 0e 	lds	r25, 0x0E53
    d56c:	92 ff       	sbrs	r25, 2
    d56e:	13 c0       	rjmp	.+38     	; 0xd596 <update_high_scores+0x62>
    d570:	80 91 54 0e 	lds	r24, 0x0E54
    d574:	8f 3f       	cpi	r24, 0xFF	; 255
    d576:	79 f4       	brne	.+30     	; 0xd596 <update_high_scores+0x62>
    d578:	80 91 c9 0d 	lds	r24, 0x0DC9
    d57c:	8f 3f       	cpi	r24, 0xFF	; 255
    d57e:	59 f4       	brne	.+22     	; 0xd596 <update_high_scores+0x62>
	{
		game.high_score_counter = 0;
    d580:	10 92 d9 0d 	sts	0x0DD9, r1
	    SFX_NAVIGATE;
    d584:	41 e0       	ldi	r20, 0x01	; 1
    d586:	6f ef       	ldi	r22, 0xFF	; 255
    d588:	82 e0       	ldi	r24, 0x02	; 2
    d58a:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
		init_default_high_scores();
    d58e:	0e 94 56 50 	call	0xa0ac	; 0xa0ac <init_default_high_scores>
	    save_eeprom(&scores);
		load_high_scores();
    d592:	0e 94 fe 68 	call	0xd1fc	; 0xd1fc <load_high_scores>
	}
	
	if (game.high_score_index != -1)
    d596:	30 91 c9 0d 	lds	r19, 0x0DC9
    d59a:	3f 3f       	cpi	r19, 0xFF	; 255
    d59c:	09 f4       	brne	.+2      	; 0xd5a0 <update_high_scores+0x6c>
    d59e:	7f c0       	rjmp	.+254    	; 0xd69e <update_high_scores+0x16a>
	{
		game.high_score_counter = 0;
    d5a0:	10 92 d9 0d 	sts	0x0DD9, r1
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d5a4:	20 91 4e 0e 	lds	r18, 0x0E4E
    d5a8:	27 ff       	sbrs	r18, 7
    d5aa:	1e c0       	rjmp	.+60     	; 0xd5e8 <update_high_scores+0xb4>
    d5ac:	83 2f       	mov	r24, r19
    d5ae:	65 e0       	ldi	r22, 0x05	; 5
    d5b0:	0e 94 5e 73 	call	0xe6bc	; 0xe6bc <__divmodqi4>
    d5b4:	92 30       	cpi	r25, 0x02	; 2
    d5b6:	c1 f0       	breq	.+48     	; 0xd5e8 <update_high_scores+0xb4>
		{
			SFX_NAVIGATE;
    d5b8:	41 e0       	ldi	r20, 0x01	; 1
    d5ba:	6f ef       	ldi	r22, 0xFF	; 255
    d5bc:	82 e0       	ldi	r24, 0x02	; 2
    d5be:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
			game.high_score_index++;
    d5c2:	80 91 c9 0d 	lds	r24, 0x0DC9
    d5c6:	8f 5f       	subi	r24, 0xFF	; 255
    d5c8:	80 93 c9 0d 	sts	0x0DC9, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d5cc:	60 91 ed 0f 	lds	r22, 0x0FED
    d5d0:	68 5f       	subi	r22, 0xF8	; 248
    d5d2:	01 e0       	ldi	r16, 0x01	; 1
    d5d4:	21 e0       	ldi	r18, 0x01	; 1
    d5d6:	40 91 ee 0f 	lds	r20, 0x0FEE
    d5da:	82 e0       	ldi	r24, 0x02	; 2
    d5dc:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d5e0:	60 91 f1 0f 	lds	r22, 0x0FF1
    d5e4:	68 5f       	subi	r22, 0xF8	; 248
    d5e6:	1f c0       	rjmp	.+62     	; 0xd626 <update_high_scores+0xf2>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d5e8:	26 ff       	sbrs	r18, 6
    d5ea:	24 c0       	rjmp	.+72     	; 0xd634 <update_high_scores+0x100>
    d5ec:	83 2f       	mov	r24, r19
    d5ee:	65 e0       	ldi	r22, 0x05	; 5
    d5f0:	0e 94 5e 73 	call	0xe6bc	; 0xe6bc <__divmodqi4>
    d5f4:	99 23       	and	r25, r25
    d5f6:	f1 f0       	breq	.+60     	; 0xd634 <update_high_scores+0x100>
		{
			SFX_NAVIGATE;
    d5f8:	41 e0       	ldi	r20, 0x01	; 1
    d5fa:	6f ef       	ldi	r22, 0xFF	; 255
    d5fc:	82 e0       	ldi	r24, 0x02	; 2
    d5fe:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
			game.high_score_index--;
    d602:	80 91 c9 0d 	lds	r24, 0x0DC9
    d606:	81 50       	subi	r24, 0x01	; 1
    d608:	80 93 c9 0d 	sts	0x0DC9, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d60c:	60 91 ed 0f 	lds	r22, 0x0FED
    d610:	68 50       	subi	r22, 0x08	; 8
    d612:	01 e0       	ldi	r16, 0x01	; 1
    d614:	21 e0       	ldi	r18, 0x01	; 1
    d616:	40 91 ee 0f 	lds	r20, 0x0FEE
    d61a:	82 e0       	ldi	r24, 0x02	; 2
    d61c:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d620:	60 91 f1 0f 	lds	r22, 0x0FF1
    d624:	68 50       	subi	r22, 0x08	; 8
    d626:	21 e0       	ldi	r18, 0x01	; 1
    d628:	40 91 f2 0f 	lds	r20, 0x0FF2
    d62c:	83 e0       	ldi	r24, 0x03	; 3
    d62e:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
    d632:	35 c0       	rjmp	.+106    	; 0xd69e <update_high_scores+0x16a>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d634:	24 ff       	sbrs	r18, 4
    d636:	13 c0       	rjmp	.+38     	; 0xd65e <update_high_scores+0x12a>
		{
			SFX_NAVIGATE;
    d638:	41 e0       	ldi	r20, 0x01	; 1
    d63a:	6f ef       	ldi	r22, 0xFF	; 255
    d63c:	82 e0       	ldi	r24, 0x02	; 2
    d63e:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d642:	80 91 c9 0d 	lds	r24, 0x0DC9
    d646:	e8 2f       	mov	r30, r24
    d648:	ff 27       	eor	r31, r31
    d64a:	e7 fd       	sbrc	r30, 7
    d64c:	f0 95       	com	r31
    d64e:	e9 56       	subi	r30, 0x69	; 105
    d650:	f2 4f       	sbci	r31, 0xF2	; 242
    d652:	92 81       	ldd	r25, Z+2	; 0x02
    d654:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d656:	91 34       	cpi	r25, 0x41	; 65
    d658:	b0 f4       	brcc	.+44     	; 0xd686 <update_high_scores+0x152>
    d65a:	91 e4       	ldi	r25, 0x41	; 65
    d65c:	14 c0       	rjmp	.+40     	; 0xd686 <update_high_scores+0x152>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d65e:	25 ff       	sbrs	r18, 5
    d660:	1e c0       	rjmp	.+60     	; 0xd69e <update_high_scores+0x16a>
		{
			SFX_NAVIGATE;
    d662:	41 e0       	ldi	r20, 0x01	; 1
    d664:	6f ef       	ldi	r22, 0xFF	; 255
    d666:	82 e0       	ldi	r24, 0x02	; 2
    d668:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d66c:	80 91 c9 0d 	lds	r24, 0x0DC9
    d670:	e8 2f       	mov	r30, r24
    d672:	ff 27       	eor	r31, r31
    d674:	e7 fd       	sbrc	r30, 7
    d676:	f0 95       	com	r31
    d678:	e9 56       	subi	r30, 0x69	; 105
    d67a:	f2 4f       	sbci	r31, 0xF2	; 242
    d67c:	92 81       	ldd	r25, Z+2	; 0x02
    d67e:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d680:	9b 35       	cpi	r25, 0x5B	; 91
    d682:	08 f0       	brcs	.+2      	; 0xd686 <update_high_scores+0x152>
    d684:	9a e5       	ldi	r25, 0x5A	; 90
    d686:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d688:	65 e0       	ldi	r22, 0x05	; 5
    d68a:	0e 94 5e 73 	call	0xe6bc	; 0xe6bc <__divmodqi4>
    d68e:	68 2f       	mov	r22, r24
    d690:	66 0f       	add	r22, r22
    d692:	69 5f       	subi	r22, 0xF9	; 249
    d694:	42 81       	ldd	r20, Z+2	; 0x02
    d696:	8b e0       	ldi	r24, 0x0B	; 11
    d698:	89 0f       	add	r24, r25
    d69a:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <LBPrintChar>
		}
	}
	if (game.high_score_counter >= HIGH_SCORES_LENGTH)
    d69e:	c0 91 d9 0d 	lds	r28, 0x0DD9
    d6a2:	cf 3f       	cpi	r28, 0xFF	; 255
    d6a4:	79 f4       	brne	.+30     	; 0xd6c4 <update_high_scores+0x190>
	{
		game.high_score_counter = 0;
    d6a6:	10 92 d9 0d 	sts	0x0DD9, r1
		SFX_NAVIGATE;
    d6aa:	41 e0       	ldi	r20, 0x01	; 1
    d6ac:	6f ef       	ldi	r22, 0xFF	; 255
    d6ae:	82 e0       	ldi	r24, 0x02	; 2
    d6b0:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
		game.high_score_index = -1;
    d6b4:	c0 93 c9 0d 	sts	0x0DC9, r28
		game.score = 0;
    d6b8:	10 92 ba 0d 	sts	0x0DBA, r1
    d6bc:	10 92 b9 0d 	sts	0x0DB9, r1
		load_splash();
    d6c0:	0e 94 cd 68 	call	0xd19a	; 0xd19a <load_splash>
	}
	game.high_score_counter++;
    d6c4:	80 91 d9 0d 	lds	r24, 0x0DD9
    d6c8:	8f 5f       	subi	r24, 0xFF	; 255
    d6ca:	80 93 d9 0d 	sts	0x0DD9, r24
}
    d6ce:	cf 91       	pop	r28
    d6d0:	0f 91       	pop	r16
    d6d2:	08 95       	ret

0000d6d4 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d6d4:	2f 92       	push	r2
    d6d6:	3f 92       	push	r3
    d6d8:	4f 92       	push	r4
    d6da:	5f 92       	push	r5
    d6dc:	6f 92       	push	r6
    d6de:	7f 92       	push	r7
    d6e0:	8f 92       	push	r8
    d6e2:	9f 92       	push	r9
    d6e4:	af 92       	push	r10
    d6e6:	bf 92       	push	r11
    d6e8:	cf 92       	push	r12
    d6ea:	df 92       	push	r13
    d6ec:	ef 92       	push	r14
    d6ee:	ff 92       	push	r15
    d6f0:	0f 93       	push	r16
    d6f2:	1f 93       	push	r17
    d6f4:	cf 93       	push	r28
    d6f6:	df 93       	push	r29
    d6f8:	7c 01       	movw	r14, r24
    d6fa:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d6fc:	c0 91 b2 0c 	lds	r28, 0x0CB2
    d700:	c6 95       	lsr	r28
    d702:	c6 95       	lsr	r28
    d704:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d706:	00 91 b3 0c 	lds	r16, 0x0CB3
    d70a:	06 95       	lsr	r16
    d70c:	06 95       	lsr	r16
    d70e:	06 95       	lsr	r16
	u16 tally = game.score;
    d710:	a0 90 b9 0d 	lds	r10, 0x0DB9
    d714:	b0 90 ba 0d 	lds	r11, 0x0DBA
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d718:	64 e1       	ldi	r22, 0x14	; 20
    d71a:	80 e0       	ldi	r24, 0x00	; 0
    d71c:	0e 94 32 67 	call	0xce64	; 0xce64 <hide_sprites>
	LBRotateSprites();
    d720:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	
	StopSong();
    d724:	0e 94 be 41 	call	0x837c	; 0x837c <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d728:	10 e0       	ldi	r17, 0x00	; 0
    d72a:	d0 e0       	ldi	r29, 0x00	; 0
    d72c:	c8 01       	movw	r24, r16
    d72e:	06 96       	adiw	r24, 0x06	; 6
    d730:	2e e1       	ldi	r18, 0x1E	; 30
    d732:	82 2e       	mov	r8, r18
    d734:	91 2c       	mov	r9, r1
    d736:	b4 01       	movw	r22, r8
    d738:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    d73c:	9e 01       	movw	r18, r28
    d73e:	28 5f       	subi	r18, 0xF8	; 248
    d740:	3f 4f       	sbci	r19, 0xFF	; 255
    d742:	45 e1       	ldi	r20, 0x15	; 21
    d744:	5c e5       	ldi	r21, 0x5C	; 92
    d746:	68 2f       	mov	r22, r24
    d748:	82 2f       	mov	r24, r18
    d74a:	8f 71       	andi	r24, 0x1F	; 31
    d74c:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d750:	c8 01       	movw	r24, r16
    d752:	07 96       	adiw	r24, 0x07	; 7
    d754:	b4 01       	movw	r22, r8
    d756:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    d75a:	9e 01       	movw	r18, r28
    d75c:	26 5f       	subi	r18, 0xF6	; 246
    d75e:	3f 4f       	sbci	r19, 0xFF	; 255
    d760:	a7 01       	movw	r20, r14
    d762:	68 2f       	mov	r22, r24
    d764:	82 2f       	mov	r24, r18
    d766:	8f 71       	andi	r24, 0x1F	; 31
    d768:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d76c:	c8 01       	movw	r24, r16
    d76e:	09 96       	adiw	r24, 0x09	; 9
    d770:	b4 01       	movw	r22, r8
    d772:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    d776:	48 2e       	mov	r4, r24
    d778:	78 2e       	mov	r7, r24
    d77a:	7e 01       	movw	r14, r28
    d77c:	29 e0       	ldi	r18, 0x09	; 9
    d77e:	e2 0e       	add	r14, r18
    d780:	f1 1c       	adc	r15, r1
    d782:	8f e1       	ldi	r24, 0x1F	; 31
    d784:	e8 22       	and	r14, r24
    d786:	ff 24       	eor	r15, r15
    d788:	4b e1       	ldi	r20, 0x1B	; 27
    d78a:	53 e0       	ldi	r21, 0x03	; 3
    d78c:	64 2d       	mov	r22, r4
    d78e:	8e 2d       	mov	r24, r14
    d790:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d794:	c8 01       	movw	r24, r16
    d796:	0b 96       	adiw	r24, 0x0b	; 11
    d798:	b4 01       	movw	r22, r8
    d79a:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    d79e:	38 2e       	mov	r3, r24
    d7a0:	68 2e       	mov	r6, r24
    d7a2:	41 e7       	ldi	r20, 0x71	; 113
    d7a4:	53 e0       	ldi	r21, 0x03	; 3
    d7a6:	68 2f       	mov	r22, r24
    d7a8:	8e 2d       	mov	r24, r14
    d7aa:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d7ae:	c8 01       	movw	r24, r16
    d7b0:	0c 96       	adiw	r24, 0x0c	; 12
    d7b2:	b4 01       	movw	r22, r8
    d7b4:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    d7b8:	58 2e       	mov	r5, r24
    d7ba:	f8 2e       	mov	r15, r24
    d7bc:	4c e5       	ldi	r20, 0x5C	; 92
    d7be:	53 e0       	ldi	r21, 0x03	; 3
    d7c0:	68 2f       	mov	r22, r24
    d7c2:	8e 2d       	mov	r24, r14
    d7c4:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d7c8:	c8 01       	movw	r24, r16
    d7ca:	0d 96       	adiw	r24, 0x0d	; 13
    d7cc:	b4 01       	movw	r22, r8
    d7ce:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    d7d2:	18 2f       	mov	r17, r24
    d7d4:	28 2e       	mov	r2, r24
    d7d6:	4c e2       	ldi	r20, 0x2C	; 44
    d7d8:	53 e0       	ldi	r21, 0x03	; 3
    d7da:	68 2f       	mov	r22, r24
    d7dc:	8e 2d       	mov	r24, r14
    d7de:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d7e2:	64 96       	adiw	r28, 0x14	; 20
    d7e4:	cf 71       	andi	r28, 0x1F	; 31
    d7e6:	dd 27       	eor	r29, r29
    d7e8:	ec 2e       	mov	r14, r28
    d7ea:	21 e0       	ldi	r18, 0x01	; 1
    d7ec:	a5 01       	movw	r20, r10
    d7ee:	64 2d       	mov	r22, r4
    d7f0:	8c 2f       	mov	r24, r28
    d7f2:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d7f6:	40 91 bb 0d 	lds	r20, 0x0DBB
    d7fa:	50 91 bc 0d 	lds	r21, 0x0DBC
    d7fe:	21 e0       	ldi	r18, 0x01	; 1
    d800:	63 2d       	mov	r22, r3
    d802:	8c 2f       	mov	r24, r28
    d804:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d808:	40 91 bd 0d 	lds	r20, 0x0DBD
    d80c:	50 91 be 0d 	lds	r21, 0x0DBE
    d810:	21 e0       	ldi	r18, 0x01	; 1
    d812:	65 2d       	mov	r22, r5
    d814:	8c 2f       	mov	r24, r28
    d816:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d81a:	21 e0       	ldi	r18, 0x01	; 1
    d81c:	a6 01       	movw	r20, r12
    d81e:	61 2f       	mov	r22, r17
    d820:	8c 2f       	mov	r24, r28
    d822:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	
	LBWaitSeconds(2);
    d826:	82 e0       	ldi	r24, 0x02	; 2
    d828:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d82c:	80 90 bb 0d 	lds	r8, 0x0DBB
    d830:	90 90 bc 0d 	lds	r9, 0x0DBC
    d834:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d836:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d838:	20 97       	sbiw	r28, 0x00	; 0
    d83a:	e9 f0       	breq	.+58     	; 0xd876 <tally_score+0x1a2>
	{
		WaitVsync(1);
    d83c:	81 e0       	ldi	r24, 0x01	; 1
    d83e:	90 e0       	ldi	r25, 0x00	; 0
    d840:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
		SFX_HIT;
    d844:	41 e0       	ldi	r20, 0x01	; 1
    d846:	6f ef       	ldi	r22, 0xFF	; 255
    d848:	84 e0       	ldi	r24, 0x04	; 4
    d84a:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
		tally += 1;
    d84e:	0f 5f       	subi	r16, 0xFF	; 255
    d850:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d852:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d854:	21 e0       	ldi	r18, 0x01	; 1
    d856:	a8 01       	movw	r20, r16
    d858:	67 2d       	mov	r22, r7
    d85a:	8e 2d       	mov	r24, r14
    d85c:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d860:	21 e0       	ldi	r18, 0x01	; 1
    d862:	ae 01       	movw	r20, r28
    d864:	66 2d       	mov	r22, r6
    d866:	8e 2d       	mov	r24, r14
    d868:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d86c:	8c ed       	ldi	r24, 0xDC	; 220
    d86e:	95 e0       	ldi	r25, 0x05	; 5
    d870:	0e 94 a6 3f 	call	0x7f4c	; 0x7f4c <WaitUs>
    d874:	e1 cf       	rjmp	.-62     	; 0xd838 <tally_score+0x164>
    d876:	a8 0c       	add	r10, r8
    d878:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d87a:	c0 91 bd 0d 	lds	r28, 0x0DBD
    d87e:	d0 91 be 0d 	lds	r29, 0x0DBE
	while (counter > 0)
    d882:	20 97       	sbiw	r28, 0x00	; 0
    d884:	31 f1       	breq	.+76     	; 0xd8d2 <tally_score+0x1fe>
	{
		WaitVsync(1);
    d886:	81 e0       	ldi	r24, 0x01	; 1
    d888:	90 e0       	ldi	r25, 0x00	; 0
    d88a:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
		SFX_HIT;
    d88e:	41 e0       	ldi	r20, 0x01	; 1
    d890:	6f ef       	ldi	r22, 0xFF	; 255
    d892:	84 e0       	ldi	r24, 0x04	; 4
    d894:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d898:	c5 01       	movw	r24, r10
    d89a:	02 97       	sbiw	r24, 0x02	; 2
    d89c:	8e 3f       	cpi	r24, 0xFE	; 254
    d89e:	9f 4f       	sbci	r25, 0xFF	; 255
    d8a0:	20 f4       	brcc	.+8      	; 0xd8aa <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d8a2:	81 e0       	ldi	r24, 0x01	; 1
    d8a4:	a8 1a       	sub	r10, r24
    d8a6:	b1 08       	sbc	r11, r1
    d8a8:	02 c0       	rjmp	.+4      	; 0xd8ae <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d8aa:	a1 2c       	mov	r10, r1
    d8ac:	b1 2c       	mov	r11, r1
		counter -= 1;
    d8ae:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d8b0:	21 e0       	ldi	r18, 0x01	; 1
    d8b2:	a5 01       	movw	r20, r10
    d8b4:	67 2d       	mov	r22, r7
    d8b6:	8e 2d       	mov	r24, r14
    d8b8:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d8bc:	21 e0       	ldi	r18, 0x01	; 1
    d8be:	ae 01       	movw	r20, r28
    d8c0:	6f 2d       	mov	r22, r15
    d8c2:	8e 2d       	mov	r24, r14
    d8c4:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d8c8:	8c ed       	ldi	r24, 0xDC	; 220
    d8ca:	95 e0       	ldi	r25, 0x05	; 5
    d8cc:	0e 94 a6 3f 	call	0x7f4c	; 0x7f4c <WaitUs>
    d8d0:	d8 cf       	rjmp	.-80     	; 0xd882 <tally_score+0x1ae>
    d8d2:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d8d4:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d8d6:	20 97       	sbiw	r28, 0x00	; 0
    d8d8:	e9 f0       	breq	.+58     	; 0xd914 <tally_score+0x240>
	{
		WaitVsync(1);
    d8da:	81 e0       	ldi	r24, 0x01	; 1
    d8dc:	90 e0       	ldi	r25, 0x00	; 0
    d8de:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
		SFX_HIT;
    d8e2:	41 e0       	ldi	r20, 0x01	; 1
    d8e4:	6f ef       	ldi	r22, 0xFF	; 255
    d8e6:	84 e0       	ldi	r24, 0x04	; 4
    d8e8:	0e 94 84 42 	call	0x8508	; 0x8508 <TriggerFx>
		tally += 1;
    d8ec:	0f 5f       	subi	r16, 0xFF	; 255
    d8ee:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d8f0:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d8f2:	21 e0       	ldi	r18, 0x01	; 1
    d8f4:	a8 01       	movw	r20, r16
    d8f6:	67 2d       	mov	r22, r7
    d8f8:	8e 2d       	mov	r24, r14
    d8fa:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d8fe:	21 e0       	ldi	r18, 0x01	; 1
    d900:	ae 01       	movw	r20, r28
    d902:	62 2d       	mov	r22, r2
    d904:	8e 2d       	mov	r24, r14
    d906:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d90a:	8c ed       	ldi	r24, 0xDC	; 220
    d90c:	95 e0       	ldi	r25, 0x05	; 5
    d90e:	0e 94 a6 3f 	call	0x7f4c	; 0x7f4c <WaitUs>
    d912:	e1 cf       	rjmp	.-62     	; 0xd8d6 <tally_score+0x202>
    d914:	ac 0c       	add	r10, r12
    d916:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d918:	b0 92 ba 0d 	sts	0x0DBA, r11
    d91c:	a0 92 b9 0d 	sts	0x0DB9, r10
	game.time = 0;
    d920:	10 92 be 0d 	sts	0x0DBE, r1
    d924:	10 92 bd 0d 	sts	0x0DBD, r1
	LBWaitSeconds(2);
    d928:	82 e0       	ldi	r24, 0x02	; 2
}
    d92a:	df 91       	pop	r29
    d92c:	cf 91       	pop	r28
    d92e:	1f 91       	pop	r17
    d930:	0f 91       	pop	r16
    d932:	ff 90       	pop	r15
    d934:	ef 90       	pop	r14
    d936:	df 90       	pop	r13
    d938:	cf 90       	pop	r12
    d93a:	bf 90       	pop	r11
    d93c:	af 90       	pop	r10
    d93e:	9f 90       	pop	r9
    d940:	8f 90       	pop	r8
    d942:	7f 90       	pop	r7
    d944:	6f 90       	pop	r6
    d946:	5f 90       	pop	r5
    d948:	4f 90       	pop	r4
    d94a:	3f 90       	pop	r3
    d94c:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    d94e:	0c 94 7f 4f 	jmp	0x9efe	; 0x9efe <LBWaitSeconds>

0000d952 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    d952:	cf 93       	push	r28
	if (player == &game.boss) {
    d954:	85 55       	subi	r24, 0x55	; 85
    d956:	9e 40       	sbci	r25, 0x0E	; 14
    d958:	29 f4       	brne	.+10     	; 0xd964 <handle_player_death+0x12>
		game.level_ended = 1;
    d95a:	81 e0       	ldi	r24, 0x01	; 1
    d95c:	80 93 d4 0d 	sts	0x0DD4, r24
		return 1;
    d960:	c1 e0       	ldi	r28, 0x01	; 1
    d962:	34 c0       	rjmp	.+104    	; 0xd9cc <handle_player_death+0x7a>
	}
	game.lives--;
    d964:	80 91 ca 0d 	lds	r24, 0x0DCA
    d968:	81 50       	subi	r24, 0x01	; 1
    d96a:	80 93 ca 0d 	sts	0x0DCA, r24
	clear_sprites(0, 6);
    d96e:	66 e0       	ldi	r22, 0x06	; 6
    d970:	80 e0       	ldi	r24, 0x00	; 0
    d972:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
	LBRotateSprites();
    d976:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	if (game.lives == 0)
    d97a:	c0 91 ca 0d 	lds	r28, 0x0DCA
    d97e:	c1 11       	cpse	r28, r1
    d980:	09 c0       	rjmp	.+18     	; 0xd994 <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    d982:	60 e0       	ldi	r22, 0x00	; 0
    d984:	70 e0       	ldi	r23, 0x00	; 0
    d986:	82 e2       	ldi	r24, 0x22	; 34
    d988:	93 e0       	ldi	r25, 0x03	; 3
    d98a:	0e 94 6a 6b 	call	0xd6d4	; 0xd6d4 <tally_score>
		exit_game();
    d98e:	0e 94 0e 6a 	call	0xd41c	; 0xd41c <exit_game>
    d992:	1c c0       	rjmp	.+56     	; 0xd9cc <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d994:	61 e0       	ldi	r22, 0x01	; 1
    d996:	81 e0       	ldi	r24, 0x01	; 1
    d998:	0e 94 77 4d 	call	0x9aee	; 0x9aee <FadeOut>
	ClearVram();
    d99c:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d9a0:	64 e1       	ldi	r22, 0x14	; 20
    d9a2:	80 e0       	ldi	r24, 0x00	; 0
    d9a4:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
	LBRotateSprites();
    d9a8:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d9ac:	60 e0       	ldi	r22, 0x00	; 0
    d9ae:	81 e0       	ldi	r24, 0x01	; 1
    d9b0:	0e 94 6b 4d 	call	0x9ad6	; 0x9ad6 <FadeIn>
	init_player_state();
    d9b4:	0e 94 03 55 	call	0xaa06	; 0xaa06 <init_player_state>
	init_boss_state();
    d9b8:	0e 94 79 54 	call	0xa8f2	; 0xa8f2 <init_boss_state>
	init_enemy_state();
    d9bc:	0e 94 6c 50 	call	0xa0d8	; 0xa0d8 <init_enemy_state>
	load_level(game.current_level_index, false);
    d9c0:	60 e0       	ldi	r22, 0x00	; 0
    d9c2:	80 91 cc 0d 	lds	r24, 0x0DCC
    d9c6:	0e 94 1f 66 	call	0xcc3e	; 0xcc3e <load_level>
	return 0;
    d9ca:	c0 e0       	ldi	r28, 0x00	; 0
}
    d9cc:	8c 2f       	mov	r24, r28
    d9ce:	cf 91       	pop	r28
    d9d0:	08 95       	ret

0000d9d2 <update_player>:
	}
}
#endif	

u8 update_player(Player* player, u8 slot)
{
    d9d2:	cf 92       	push	r12
    d9d4:	df 92       	push	r13
    d9d6:	ef 92       	push	r14
    d9d8:	ff 92       	push	r15
    d9da:	0f 93       	push	r16
    d9dc:	1f 93       	push	r17
    d9de:	cf 93       	push	r28
    d9e0:	df 93       	push	r29
    d9e2:	1f 92       	push	r1
    d9e4:	cd b7       	in	r28, 0x3d	; 61
    d9e6:	de b7       	in	r29, 0x3e	; 62
    d9e8:	6c 01       	movw	r12, r24
    d9ea:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	handle_music_toggle(&player->controls);
    d9ec:	7c 01       	movw	r14, r24
    d9ee:	24 e7       	ldi	r18, 0x74	; 116
    d9f0:	e2 0e       	add	r14, r18
    d9f2:	f1 1c       	adc	r15, r1
    d9f4:	c7 01       	movw	r24, r14
    d9f6:	0e 94 f3 5c 	call	0xb9e6	; 0xb9e6 <handle_music_toggle>
	handle_demo_play(player);	
    d9fa:	c6 01       	movw	r24, r12
    d9fc:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <handle_demo_play>
	if (player->flags & EXPLODING)
    da00:	f6 01       	movw	r30, r12
    da02:	00 85       	ldd	r16, Z+8	; 0x08
    da04:	04 ff       	sbrs	r16, 4
    da06:	19 c0       	rjmp	.+50     	; 0xda3a <update_player+0x68>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    da08:	04 85       	ldd	r16, Z+12	; 0x0c
    da0a:	23 85       	ldd	r18, Z+11	; 0x0b
    da0c:	41 2f       	mov	r20, r17
    da0e:	b6 01       	movw	r22, r12
    da10:	64 59       	subi	r22, 0x94	; 148
    da12:	7f 4f       	sbci	r23, 0xFF	; 255
    da14:	c6 01       	movw	r24, r12
    da16:	08 96       	adiw	r24, 0x08	; 8
    da18:	0e 94 15 61 	call	0xc22a	; 0xc22a <map_explosion>
    da1c:	88 23       	and	r24, r24
    da1e:	09 f4       	brne	.+2      	; 0xda22 <update_player+0x50>
    da20:	01 c2       	rjmp	.+1026   	; 0xde24 <update_player+0x452>
		{
			return handle_player_death(player);
    da22:	c6 01       	movw	r24, r12
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    da24:	0f 90       	pop	r0
    da26:	df 91       	pop	r29
    da28:	cf 91       	pop	r28
    da2a:	1f 91       	pop	r17
    da2c:	0f 91       	pop	r16
    da2e:	ff 90       	pop	r15
    da30:	ef 90       	pop	r14
    da32:	df 90       	pop	r13
    da34:	cf 90       	pop	r12
	handle_demo_play(player);	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    da36:	0c 94 a9 6c 	jmp	0xd952	; 0xd952 <handle_player_death>
		}
	}
	else if (is_space())
    da3a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    da3e:	88 23       	and	r24, r24
    da40:	09 f4       	brne	.+2      	; 0xda44 <update_player+0x72>
    da42:	a6 c0       	rjmp	.+332    	; 0xdb90 <update_player+0x1be>
	{
		if (game.current_level_index == 9)
    da44:	80 91 cc 0d 	lds	r24, 0x0DCC
    da48:	89 30       	cpi	r24, 0x09	; 9
    da4a:	09 f0       	breq	.+2      	; 0xda4e <update_player+0x7c>
    da4c:	4d c0       	rjmp	.+154    	; 0xdae8 <update_player+0x116>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    da4e:	80 91 b7 0d 	lds	r24, 0x0DB7
    da52:	90 91 b8 0d 	lds	r25, 0x0DB8
    da56:	e3 e0       	ldi	r30, 0x03	; 3
    da58:	96 95       	lsr	r25
    da5a:	87 95       	ror	r24
    da5c:	ea 95       	dec	r30
    da5e:	e1 f7       	brne	.-8      	; 0xda58 <update_player+0x86>
    da60:	4c 96       	adiw	r24, 0x1c	; 28
    da62:	82 3d       	cpi	r24, 0xD2	; 210
    da64:	91 05       	cpc	r25, r1
    da66:	08 f4       	brcc	.+2      	; 0xda6a <update_player+0x98>
    da68:	3f c0       	rjmp	.+126    	; 0xdae8 <update_player+0x116>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    da6a:	05 ff       	sbrs	r16, 5
    da6c:	02 c0       	rjmp	.+4      	; 0xda72 <update_player+0xa0>
				{
					space_ship_speed = 0;
    da6e:	00 e0       	ldi	r16, 0x00	; 0
    da70:	01 c0       	rjmp	.+2      	; 0xda74 <update_player+0xa2>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    da72:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(game.flags & BOSS_APROACHING))
    da74:	80 91 d6 0d 	lds	r24, 0x0DD6
    da78:	86 fd       	sbrc	r24, 6
    da7a:	07 c0       	rjmp	.+14     	; 0xda8a <update_player+0xb8>
				{
					game.flags |= BOSS_APROACHING;
    da7c:	80 64       	ori	r24, 0x40	; 64
    da7e:	80 93 d6 0d 	sts	0x0DD6, r24
					explode_all_enemies();
    da82:	0e 94 d7 5c 	call	0xb9ae	; 0xb9ae <explode_all_enemies>
					StopSong();
    da86:	0e 94 be 41 	call	0x837c	; 0x837c <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(game.flags & BOSS_REACHED))
    da8a:	80 91 b7 0d 	lds	r24, 0x0DB7
    da8e:	90 91 b8 0d 	lds	r25, 0x0DB8
    da92:	73 e0       	ldi	r23, 0x03	; 3
    da94:	96 95       	lsr	r25
    da96:	87 95       	ror	r24
    da98:	7a 95       	dec	r23
    da9a:	e1 f7       	brne	.-8      	; 0xda94 <update_player+0xc2>
    da9c:	4c 96       	adiw	r24, 0x1c	; 28
    da9e:	8a 3f       	cpi	r24, 0xFA	; 250
    daa0:	91 05       	cpc	r25, r1
    daa2:	68 f0       	brcs	.+26     	; 0xdabe <update_player+0xec>
    daa4:	80 91 d6 0d 	lds	r24, 0x0DD6
    daa8:	87 fd       	sbrc	r24, 7
    daaa:	09 c0       	rjmp	.+18     	; 0xdabe <update_player+0xec>
				{
					game.flags |= BOSS_REACHED;
    daac:	80 68       	ori	r24, 0x80	; 128
    daae:	80 93 d6 0d 	sts	0x0DD6, r24
					init_enemy_boss_turrets();
    dab2:	0e 94 35 58 	call	0xb06a	; 0xb06a <init_enemy_boss_turrets>
					StartSong(planetsong);
    dab6:	80 e5       	ldi	r24, 0x50	; 80
    dab8:	9d e0       	ldi	r25, 0x0D	; 13
    daba:	0e 94 95 41 	call	0x832a	; 0x832a <StartSong>
				}
				if ((game.flags & BOSS_REACHED) && (game.active_enemies == 0))
    dabe:	80 91 d6 0d 	lds	r24, 0x0DD6
    dac2:	87 ff       	sbrs	r24, 7
    dac4:	12 c0       	rjmp	.+36     	; 0xdaea <update_player+0x118>
    dac6:	80 91 d2 0d 	lds	r24, 0x0DD2
    daca:	81 11       	cpse	r24, r1
    dacc:	0e c0       	rjmp	.+28     	; 0xdaea <update_player+0x118>
				{
					init_enemy_boss_eyes();
    dace:	0e 94 55 58 	call	0xb0aa	; 0xb0aa <init_enemy_boss_eyes>
					game.eye_clusters--;
    dad2:	80 91 d5 0d 	lds	r24, 0x0DD5
    dad6:	81 50       	subi	r24, 0x01	; 1
    dad8:	80 93 d5 0d 	sts	0x0DD5, r24
					if (game.eye_clusters == 0)
    dadc:	81 11       	cpse	r24, r1
    dade:	05 c0       	rjmp	.+10     	; 0xdaea <update_player+0x118>
					{
						game.level_ended = 1;
    dae0:	81 e0       	ldi	r24, 0x01	; 1
    dae2:	80 93 d4 0d 	sts	0x0DD4, r24
    dae6:	01 c0       	rjmp	.+2      	; 0xdaea <update_player+0x118>
}
#endif	

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    dae8:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    daea:	f6 01       	movw	r30, r12
    daec:	80 85       	ldd	r24, Z+8	; 0x08
    daee:	85 ff       	sbrs	r24, 5
    daf0:	08 c0       	rjmp	.+16     	; 0xdb02 <update_player+0x130>
    daf2:	80 91 cc 0d 	lds	r24, 0x0DCC
    daf6:	89 30       	cpi	r24, 0x09	; 9
    daf8:	21 f0       	breq	.+8      	; 0xdb02 <update_player+0x130>
			player->shared.vx = space_ship_speed*2;
    dafa:	00 0f       	add	r16, r16
    dafc:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    dafe:	14 82       	std	Z+4, r1	; 0x04
    db00:	43 c0       	rjmp	.+134    	; 0xdb88 <update_player+0x1b6>
		} else {
			player->shared.vy = 0;
    db02:	f6 01       	movw	r30, r12
    db04:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    db06:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    db08:	e8 58       	subi	r30, 0x88	; 136
    db0a:	ff 4f       	sbci	r31, 0xFF	; 255
    db0c:	20 81       	ld	r18, Z
    db0e:	25 ff       	sbrs	r18, 5
    db10:	11 c0       	rjmp	.+34     	; 0xdb34 <update_player+0x162>
    db12:	f6 01       	movw	r30, r12
    db14:	82 81       	ldd	r24, Z+2	; 0x02
    db16:	93 81       	ldd	r25, Z+3	; 0x03
    db18:	63 e0       	ldi	r22, 0x03	; 3
    db1a:	96 95       	lsr	r25
    db1c:	87 95       	ror	r24
    db1e:	6a 95       	dec	r22
    db20:	e1 f7       	brne	.-8      	; 0xdb1a <update_player+0x148>
    db22:	01 96       	adiw	r24, 0x01	; 1
    db24:	40 91 c7 0d 	lds	r20, 0x0DC7
    db28:	50 e0       	ldi	r21, 0x00	; 0
    db2a:	84 17       	cp	r24, r20
    db2c:	95 07       	cpc	r25, r21
    db2e:	10 f4       	brcc	.+4      	; 0xdb34 <update_player+0x162>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    db30:	8c e3       	ldi	r24, 0x3C	; 60
    db32:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    db34:	27 ff       	sbrs	r18, 7
    db36:	11 c0       	rjmp	.+34     	; 0xdb5a <update_player+0x188>
    db38:	f6 01       	movw	r30, r12
    db3a:	40 81       	ld	r20, Z
    db3c:	51 81       	ldd	r21, Z+1	; 0x01
    db3e:	48 5e       	subi	r20, 0xE8	; 232
    db40:	5f 4f       	sbci	r21, 0xFF	; 255
    db42:	80 91 b7 0d 	lds	r24, 0x0DB7
    db46:	90 91 b8 0d 	lds	r25, 0x0DB8
    db4a:	80 52       	subi	r24, 0x20	; 32
    db4c:	9f 4f       	sbci	r25, 0xFF	; 255
    db4e:	48 17       	cp	r20, r24
    db50:	59 07       	cpc	r21, r25
    db52:	18 f4       	brcc	.+6      	; 0xdb5a <update_player+0x188>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    db54:	8c e3       	ldi	r24, 0x3C	; 60
    db56:	80 0f       	add	r24, r16
    db58:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    db5a:	26 ff       	sbrs	r18, 6
    db5c:	0c c0       	rjmp	.+24     	; 0xdb76 <update_player+0x1a4>
    db5e:	f6 01       	movw	r30, r12
    db60:	40 81       	ld	r20, Z
    db62:	51 81       	ldd	r21, Z+1	; 0x01
    db64:	80 91 b7 0d 	lds	r24, 0x0DB7
    db68:	90 91 b8 0d 	lds	r25, 0x0DB8
    db6c:	84 17       	cp	r24, r20
    db6e:	95 07       	cpc	r25, r21
    db70:	10 f4       	brcc	.+4      	; 0xdb76 <update_player+0x1a4>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    db72:	0c 53       	subi	r16, 0x3C	; 60
    db74:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    db76:	24 ff       	sbrs	r18, 4
    db78:	07 c0       	rjmp	.+14     	; 0xdb88 <update_player+0x1b6>
    db7a:	f6 01       	movw	r30, r12
    db7c:	82 81       	ldd	r24, Z+2	; 0x02
    db7e:	93 81       	ldd	r25, Z+3	; 0x03
    db80:	89 2b       	or	r24, r25
    db82:	11 f0       	breq	.+4      	; 0xdb88 <update_player+0x1b6>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    db84:	84 ec       	ldi	r24, 0xC4	; 196
    db86:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    db88:	c6 01       	movw	r24, r12
    db8a:	8c 5a       	subi	r24, 0xAC	; 172
    db8c:	9f 4f       	sbci	r25, 0xFF	; 255
    db8e:	43 c1       	rjmp	.+646    	; 0xde16 <update_player+0x444>
	}
	else if (player->flags & (IDLE|RUNNING))
    db90:	80 2f       	mov	r24, r16
    db92:	8a 70       	andi	r24, 0x0A	; 10
    db94:	09 f4       	brne	.+2      	; 0xdb98 <update_player+0x1c6>
    db96:	97 c0       	rjmp	.+302    	; 0xdcc6 <update_player+0x2f4>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    db98:	f6 01       	movw	r30, r12
    db9a:	44 85       	ldd	r20, Z+12	; 0x0c
    db9c:	63 85       	ldd	r22, Z+11	; 0x0b
    db9e:	c6 01       	movw	r24, r12
    dba0:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <on_solid_ground>
    dba4:	81 11       	cpse	r24, r1
    dba6:	06 c0       	rjmp	.+12     	; 0xdbb4 <update_player+0x1e2>
		{
			player->shared.gravity = GRAVITY;
    dba8:	88 ec       	ldi	r24, 0xC8	; 200
    dbaa:	f6 01       	movw	r30, r12
    dbac:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    dbae:	81 e0       	ldi	r24, 0x01	; 1
    dbb0:	80 87       	std	Z+8, r24	; 0x08
    dbb2:	0f c1       	rjmp	.+542    	; 0xddd2 <update_player+0x400>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    dbb4:	f6 01       	movw	r30, r12
    dbb6:	e8 58       	subi	r30, 0x88	; 136
    dbb8:	ff 4f       	sbci	r31, 0xFF	; 255
    dbba:	80 81       	ld	r24, Z
    dbbc:	85 ff       	sbrs	r24, 5
    dbbe:	26 c0       	rjmp	.+76     	; 0xdc0c <update_player+0x23a>
			{
				player->shared.y += 16;
    dbc0:	f6 01       	movw	r30, r12
    dbc2:	82 81       	ldd	r24, Z+2	; 0x02
    dbc4:	93 81       	ldd	r25, Z+3	; 0x03
    dbc6:	40 96       	adiw	r24, 0x10	; 16
    dbc8:	93 83       	std	Z+3, r25	; 0x03
    dbca:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    dbcc:	82 85       	ldd	r24, Z+10	; 0x0a
    dbce:	81 30       	cpi	r24, 0x01	; 1
    dbd0:	29 f4       	brne	.+10     	; 0xdbdc <update_player+0x20a>
				{
					player->shared.x -= 8;
    dbd2:	80 81       	ld	r24, Z
    dbd4:	91 81       	ldd	r25, Z+1	; 0x01
    dbd6:	08 97       	sbiw	r24, 0x08	; 8
    dbd8:	91 83       	std	Z+1, r25	; 0x01
    dbda:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    dbdc:	f6 01       	movw	r30, r12
    dbde:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    dbe0:	84 e0       	ldi	r24, 0x04	; 4
    dbe2:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    dbe4:	83 e0       	ldi	r24, 0x03	; 3
    dbe6:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    dbe8:	81 e0       	ldi	r24, 0x01	; 1
    dbea:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(slot+3, 3);
    dbec:	63 e0       	ldi	r22, 0x03	; 3
    dbee:	83 e0       	ldi	r24, 0x03	; 3
    dbf0:	81 0f       	add	r24, r17
    dbf2:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    dbf6:	24 e0       	ldi	r18, 0x04	; 4
    dbf8:	12 9f       	mul	r17, r18
    dbfa:	f0 01       	movw	r30, r0
    dbfc:	11 24       	eor	r1, r1
    dbfe:	eb 51       	subi	r30, 0x1B	; 27
    dc00:	f0 4f       	sbci	r31, 0xF0	; 240
    dc02:	43 81       	ldd	r20, Z+3	; 0x03
    dc04:	c6 01       	movw	r24, r12
    dc06:	8c 59       	subi	r24, 0x9C	; 156
    dc08:	9f 4f       	sbci	r25, 0xFF	; 255
    dc0a:	45 c0       	rjmp	.+138    	; 0xdc96 <update_player+0x2c4>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    dc0c:	87 ff       	sbrs	r24, 7
    dc0e:	1d c0       	rjmp	.+58     	; 0xdc4a <update_player+0x278>
    dc10:	f6 01       	movw	r30, r12
    dc12:	20 81       	ld	r18, Z
    dc14:	31 81       	ldd	r19, Z+1	; 0x01
    dc16:	53 e0       	ldi	r21, 0x03	; 3
    dc18:	36 95       	lsr	r19
    dc1a:	27 95       	ror	r18
    dc1c:	5a 95       	dec	r21
    dc1e:	e1 f7       	brne	.-8      	; 0xdc18 <update_player+0x246>
    dc20:	2e 5f       	subi	r18, 0xFE	; 254
    dc22:	3f 4f       	sbci	r19, 0xFF	; 255
    dc24:	40 91 c6 0d 	lds	r20, 0x0DC6
    dc28:	50 e0       	ldi	r21, 0x00	; 0
    dc2a:	24 17       	cp	r18, r20
    dc2c:	35 07       	cpc	r19, r21
    dc2e:	68 f4       	brcc	.+26     	; 0xdc4a <update_player+0x278>
			{
				player->shared.vx = RUN_SPEED;
    dc30:	8c e3       	ldi	r24, 0x3C	; 60
    dc32:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    dc34:	82 e0       	ldi	r24, 0x02	; 2
    dc36:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    dc38:	81 e0       	ldi	r24, 0x01	; 1
    dc3a:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    dc3c:	c6 01       	movw	r24, r12
    dc3e:	8c 5a       	subi	r24, 0xAC	; 172
    dc40:	9f 4f       	sbci	r25, 0xFF	; 255
    dc42:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    dc46:	40 e0       	ldi	r20, 0x00	; 0
    dc48:	2a c0       	rjmp	.+84     	; 0xdc9e <update_player+0x2cc>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dc4a:	86 ff       	sbrs	r24, 6
    dc4c:	16 c0       	rjmp	.+44     	; 0xdc7a <update_player+0x2a8>
    dc4e:	f6 01       	movw	r30, r12
    dc50:	20 81       	ld	r18, Z
    dc52:	31 81       	ldd	r19, Z+1	; 0x01
    dc54:	80 91 b7 0d 	lds	r24, 0x0DB7
    dc58:	90 91 b8 0d 	lds	r25, 0x0DB8
    dc5c:	82 17       	cp	r24, r18
    dc5e:	93 07       	cpc	r25, r19
    dc60:	60 f4       	brcc	.+24     	; 0xdc7a <update_player+0x2a8>
			{
				player->shared.vx = -RUN_SPEED;
    dc62:	84 ec       	ldi	r24, 0xC4	; 196
    dc64:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    dc66:	82 e0       	ldi	r24, 0x02	; 2
    dc68:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    dc6a:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    dc6c:	c6 01       	movw	r24, r12
    dc6e:	8c 5a       	subi	r24, 0xAC	; 172
    dc70:	9f 4f       	sbci	r25, 0xFF	; 255
    dc72:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    dc76:	41 e0       	ldi	r20, 0x01	; 1
    dc78:	12 c0       	rjmp	.+36     	; 0xdc9e <update_player+0x2cc>
			}
			else
			{
				player->flags = IDLE;
    dc7a:	88 e0       	ldi	r24, 0x08	; 8
    dc7c:	f6 01       	movw	r30, r12
    dc7e:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    dc80:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    dc82:	24 e0       	ldi	r18, 0x04	; 4
    dc84:	12 9f       	mul	r17, r18
    dc86:	f0 01       	movw	r30, r0
    dc88:	11 24       	eor	r1, r1
    dc8a:	eb 51       	subi	r30, 0x1B	; 27
    dc8c:	f0 4f       	sbci	r31, 0xF0	; 240
    dc8e:	43 81       	ldd	r20, Z+3	; 0x03
    dc90:	c6 01       	movw	r24, r12
    dc92:	84 5b       	subi	r24, 0xB4	; 180
    dc94:	9f 4f       	sbci	r25, 0xFF	; 255
    dc96:	49 83       	std	Y+1, r20	; 0x01
    dc98:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    dc9c:	49 81       	ldd	r20, Y+1	; 0x01
    dc9e:	bc 01       	movw	r22, r24
    dca0:	81 2f       	mov	r24, r17
    dca2:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
			}
			if (player->controls.pressed & BTN_A && !(player->flags & PRONE))
    dca6:	f7 01       	movw	r30, r14
    dca8:	80 81       	ld	r24, Z
    dcaa:	91 81       	ldd	r25, Z+1	; 0x01
    dcac:	90 ff       	sbrs	r25, 0
    dcae:	ba c0       	rjmp	.+372    	; 0xde24 <update_player+0x452>
    dcb0:	f6 01       	movw	r30, r12
    dcb2:	80 85       	ldd	r24, Z+8	; 0x08
    dcb4:	82 fd       	sbrc	r24, 2
    dcb6:	b6 c0       	rjmp	.+364    	; 0xde24 <update_player+0x452>
			{
				player->shared.vy = -JUMP_SPEED;
    dcb8:	81 e8       	ldi	r24, 0x81	; 129
    dcba:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    dcbc:	88 ec       	ldi	r24, 0xC8	; 200
    dcbe:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    dcc0:	81 e0       	ldi	r24, 0x01	; 1
    dcc2:	80 87       	std	Z+8, r24	; 0x08
    dcc4:	82 c0       	rjmp	.+260    	; 0xddca <update_player+0x3f8>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    dcc6:	00 ff       	sbrs	r16, 0
    dcc8:	4c c0       	rjmp	.+152    	; 0xdd62 <update_player+0x390>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    dcca:	f6 01       	movw	r30, r12
    dccc:	e8 58       	subi	r30, 0x88	; 136
    dcce:	ff 4f       	sbci	r31, 0xFF	; 255
    dcd0:	60 81       	ld	r22, Z
    dcd2:	c6 01       	movw	r24, r12
    dcd4:	84 5a       	subi	r24, 0xA4	; 164
    dcd6:	9f 4f       	sbci	r25, 0xFF	; 255
    dcd8:	67 ff       	sbrs	r22, 7
    dcda:	18 c0       	rjmp	.+48     	; 0xdd0c <update_player+0x33a>
    dcdc:	f6 01       	movw	r30, r12
    dcde:	20 81       	ld	r18, Z
    dce0:	31 81       	ldd	r19, Z+1	; 0x01
    dce2:	43 e0       	ldi	r20, 0x03	; 3
    dce4:	36 95       	lsr	r19
    dce6:	27 95       	ror	r18
    dce8:	4a 95       	dec	r20
    dcea:	e1 f7       	brne	.-8      	; 0xdce4 <update_player+0x312>
    dcec:	2e 5f       	subi	r18, 0xFE	; 254
    dcee:	3f 4f       	sbci	r19, 0xFF	; 255
    dcf0:	40 91 c6 0d 	lds	r20, 0x0DC6
    dcf4:	50 e0       	ldi	r21, 0x00	; 0
    dcf6:	24 17       	cp	r18, r20
    dcf8:	35 07       	cpc	r19, r21
    dcfa:	40 f4       	brcc	.+16     	; 0xdd0c <update_player+0x33a>
		{
			player->shared.vx = RUN_SPEED;
    dcfc:	2c e3       	ldi	r18, 0x3C	; 60
    dcfe:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    dd00:	21 e0       	ldi	r18, 0x01	; 1
    dd02:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    dd04:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    dd08:	40 e0       	ldi	r20, 0x00	; 0
    dd0a:	20 c0       	rjmp	.+64     	; 0xdd4c <update_player+0x37a>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dd0c:	66 ff       	sbrs	r22, 6
    dd0e:	11 c0       	rjmp	.+34     	; 0xdd32 <update_player+0x360>
    dd10:	f6 01       	movw	r30, r12
    dd12:	40 81       	ld	r20, Z
    dd14:	51 81       	ldd	r21, Z+1	; 0x01
    dd16:	20 91 b7 0d 	lds	r18, 0x0DB7
    dd1a:	30 91 b8 0d 	lds	r19, 0x0DB8
    dd1e:	24 17       	cp	r18, r20
    dd20:	35 07       	cpc	r19, r21
    dd22:	38 f4       	brcc	.+14     	; 0xdd32 <update_player+0x360>
		{
			player->shared.vx = -RUN_SPEED;
    dd24:	24 ec       	ldi	r18, 0xC4	; 196
    dd26:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    dd28:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    dd2a:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    dd2e:	41 e0       	ldi	r20, 0x01	; 1
    dd30:	0d c0       	rjmp	.+26     	; 0xdd4c <update_player+0x37a>
		}
		else
		{
			player->shared.vx = 0;
    dd32:	f6 01       	movw	r30, r12
    dd34:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dd36:	24 e0       	ldi	r18, 0x04	; 4
    dd38:	12 9f       	mul	r17, r18
    dd3a:	f0 01       	movw	r30, r0
    dd3c:	11 24       	eor	r1, r1
    dd3e:	eb 51       	subi	r30, 0x1B	; 27
    dd40:	f0 4f       	sbci	r31, 0xF0	; 240
    dd42:	43 81       	ldd	r20, Z+3	; 0x03
    dd44:	49 83       	std	Y+1, r20	; 0x01
    dd46:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    dd4a:	49 81       	ldd	r20, Y+1	; 0x01
    dd4c:	bc 01       	movw	r22, r24
    dd4e:	81 2f       	mov	r24, r17
    dd50:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    dd54:	f6 01       	movw	r30, r12
    dd56:	86 81       	ldd	r24, Z+6	; 0x06
    dd58:	81 11       	cpse	r24, r1
    dd5a:	64 c0       	rjmp	.+200    	; 0xde24 <update_player+0x452>
		{
			player->flags = IDLE;
    dd5c:	88 e0       	ldi	r24, 0x08	; 8
    dd5e:	80 87       	std	Z+8, r24	; 0x08
    dd60:	61 c0       	rjmp	.+194    	; 0xde24 <update_player+0x452>
		}
	}
	else if (player->flags & PRONE)
    dd62:	02 ff       	sbrs	r16, 2
    dd64:	5f c0       	rjmp	.+190    	; 0xde24 <update_player+0x452>
	{
		if (player->controls.pressed & BTN_UP)
    dd66:	f7 01       	movw	r30, r14
    dd68:	80 81       	ld	r24, Z
    dd6a:	91 81       	ldd	r25, Z+1	; 0x01
    dd6c:	84 ff       	sbrs	r24, 4
    dd6e:	16 c0       	rjmp	.+44     	; 0xdd9c <update_player+0x3ca>
		{
			player->flags = IDLE;	
    dd70:	88 e0       	ldi	r24, 0x08	; 8
    dd72:	f6 01       	movw	r30, r12
    dd74:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dd76:	82 81       	ldd	r24, Z+2	; 0x02
    dd78:	93 81       	ldd	r25, Z+3	; 0x03
    dd7a:	40 97       	sbiw	r24, 0x10	; 16
    dd7c:	93 83       	std	Z+3, r25	; 0x03
    dd7e:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    dd80:	82 85       	ldd	r24, Z+10	; 0x0a
    dd82:	81 30       	cpi	r24, 0x01	; 1
    dd84:	29 f4       	brne	.+10     	; 0xdd90 <update_player+0x3be>
			{
				player->shared.x += 8;
    dd86:	80 81       	ld	r24, Z
    dd88:	91 81       	ldd	r25, Z+1	; 0x01
    dd8a:	08 96       	adiw	r24, 0x08	; 8
    dd8c:	91 83       	std	Z+1, r25	; 0x01
    dd8e:	80 83       	st	Z, r24
			}
			player->width = 2;
    dd90:	82 e0       	ldi	r24, 0x02	; 2
    dd92:	f6 01       	movw	r30, r12
    dd94:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    dd96:	83 e0       	ldi	r24, 0x03	; 3
    dd98:	84 87       	std	Z+12, r24	; 0x0c
    dd9a:	44 c0       	rjmp	.+136    	; 0xde24 <update_player+0x452>
		}
		else if (player->controls.pressed & BTN_A)
    dd9c:	90 ff       	sbrs	r25, 0
    dd9e:	28 c0       	rjmp	.+80     	; 0xddf0 <update_player+0x41e>
		{
			player->flags = JUMPING;
    dda0:	81 e0       	ldi	r24, 0x01	; 1
    dda2:	f6 01       	movw	r30, r12
    dda4:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dda6:	82 81       	ldd	r24, Z+2	; 0x02
    dda8:	93 81       	ldd	r25, Z+3	; 0x03
    ddaa:	40 97       	sbiw	r24, 0x10	; 16
    ddac:	93 83       	std	Z+3, r25	; 0x03
    ddae:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    ddb0:	82 85       	ldd	r24, Z+10	; 0x0a
    ddb2:	81 30       	cpi	r24, 0x01	; 1
    ddb4:	29 f4       	brne	.+10     	; 0xddc0 <update_player+0x3ee>
			{
				player->shared.x += 8;
    ddb6:	80 81       	ld	r24, Z
    ddb8:	91 81       	ldd	r25, Z+1	; 0x01
    ddba:	08 96       	adiw	r24, 0x08	; 8
    ddbc:	91 83       	std	Z+1, r25	; 0x01
    ddbe:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    ddc0:	81 e8       	ldi	r24, 0x81	; 129
    ddc2:	f6 01       	movw	r30, r12
    ddc4:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    ddc6:	88 ec       	ldi	r24, 0xC8	; 200
    ddc8:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    ddca:	82 e0       	ldi	r24, 0x02	; 2
    ddcc:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    ddce:	83 e0       	ldi	r24, 0x03	; 3
    ddd0:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    ddd2:	24 e0       	ldi	r18, 0x04	; 4
    ddd4:	12 9f       	mul	r17, r18
    ddd6:	f0 01       	movw	r30, r0
    ddd8:	11 24       	eor	r1, r1
    ddda:	eb 51       	subi	r30, 0x1B	; 27
    dddc:	f0 4f       	sbci	r31, 0xF0	; 240
    ddde:	43 81       	ldd	r20, Z+3	; 0x03
    dde0:	c6 01       	movw	r24, r12
    dde2:	84 5a       	subi	r24, 0xA4	; 164
    dde4:	9f 4f       	sbci	r25, 0xFF	; 255
    dde6:	49 83       	std	Y+1, r20	; 0x01
    dde8:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    ddec:	49 81       	ldd	r20, Y+1	; 0x01
    ddee:	16 c0       	rjmp	.+44     	; 0xde1c <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_LEFT)
    ddf0:	86 ff       	sbrs	r24, 6
    ddf2:	09 c0       	rjmp	.+18     	; 0xde06 <update_player+0x434>
		{
			player->direction = D_LEFT;
    ddf4:	f6 01       	movw	r30, r12
    ddf6:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    ddf8:	c6 01       	movw	r24, r12
    ddfa:	8c 59       	subi	r24, 0x9C	; 156
    ddfc:	9f 4f       	sbci	r25, 0xFF	; 255
    ddfe:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    de02:	41 e0       	ldi	r20, 0x01	; 1
    de04:	0b c0       	rjmp	.+22     	; 0xde1c <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    de06:	87 ff       	sbrs	r24, 7
    de08:	0d c0       	rjmp	.+26     	; 0xde24 <update_player+0x452>
		{
			player->direction = D_RIGHT;
    de0a:	81 e0       	ldi	r24, 0x01	; 1
    de0c:	f6 01       	movw	r30, r12
    de0e:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    de10:	c6 01       	movw	r24, r12
    de12:	8c 59       	subi	r24, 0x9C	; 156
    de14:	9f 4f       	sbci	r25, 0xFF	; 255
    de16:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    de1a:	40 e0       	ldi	r20, 0x00	; 0
    de1c:	bc 01       	movw	r22, r24
    de1e:	81 2f       	mov	r24, r17
    de20:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
		}
	}
	return 1;
}
    de24:	81 e0       	ldi	r24, 0x01	; 1
    de26:	0f 90       	pop	r0
    de28:	df 91       	pop	r29
    de2a:	cf 91       	pop	r28
    de2c:	1f 91       	pop	r17
    de2e:	0f 91       	pop	r16
    de30:	ff 90       	pop	r15
    de32:	ef 90       	pop	r14
    de34:	df 90       	pop	r13
    de36:	cf 90       	pop	r12
    de38:	08 95       	ret

0000de3a <update_level>:
	print_scroll(strCongrats);
	StopSong();
}

u8 update_level()
{
    de3a:	cf 92       	push	r12
    de3c:	df 92       	push	r13
    de3e:	ef 92       	push	r14
    de40:	ff 92       	push	r15
    de42:	0f 93       	push	r16
    de44:	cf 93       	push	r28
    de46:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    de48:	e0 90 da 0d 	lds	r14, 0x0DDA
    de4c:	f0 90 db 0d 	lds	r15, 0x0DDB
    de50:	c0 90 b7 0d 	lds	r12, 0x0DB7
    de54:	d0 90 b8 0d 	lds	r13, 0x0DB8
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    de58:	80 91 d1 0d 	lds	r24, 0x0DD1
    de5c:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    de5e:	8c 33       	cpi	r24, 0x3C	; 60
    de60:	19 f0       	breq	.+6      	; 0xde68 <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    de62:	80 93 d1 0d 	sts	0x0DD1, r24
    de66:	0f c0       	rjmp	.+30     	; 0xde86 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    de68:	10 92 d1 0d 	sts	0x0DD1, r1
		if (game.time != 65535) game.time++;
    de6c:	80 91 bd 0d 	lds	r24, 0x0DBD
    de70:	90 91 be 0d 	lds	r25, 0x0DBE
    de74:	8f 3f       	cpi	r24, 0xFF	; 255
    de76:	2f ef       	ldi	r18, 0xFF	; 255
    de78:	92 07       	cpc	r25, r18
    de7a:	29 f0       	breq	.+10     	; 0xde86 <update_level+0x4c>
    de7c:	01 96       	adiw	r24, 0x01	; 1
    de7e:	90 93 be 0d 	sts	0x0DBE, r25
    de82:	80 93 bd 0d 	sts	0x0DBD, r24
	}
	
	if (is_space())
    de86:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    de8a:	88 23       	and	r24, r24
    de8c:	a1 f1       	breq	.+104    	; 0xdef6 <update_level+0xbc>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    de8e:	c6 01       	movw	r24, r12
    de90:	23 e0       	ldi	r18, 0x03	; 3
    de92:	96 95       	lsr	r25
    de94:	87 95       	ror	r24
    de96:	2a 95       	dec	r18
    de98:	e1 f7       	brne	.-8      	; 0xde92 <update_level+0x58>
    de9a:	4c 96       	adiw	r24, 0x1c	; 28
    de9c:	20 91 c6 0d 	lds	r18, 0x0DC6
    dea0:	30 e0       	ldi	r19, 0x00	; 0
    dea2:	82 17       	cp	r24, r18
    dea4:	93 07       	cpc	r25, r19
    dea6:	70 f4       	brcc	.+28     	; 0xdec4 <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    dea8:	20 91 cc 0d 	lds	r18, 0x0DCC
    deac:	29 30       	cpi	r18, 0x09	; 9
    deae:	39 f4       	brne	.+14     	; 0xdebe <update_level+0x84>
    deb0:	82 3d       	cpi	r24, 0xD2	; 210
    deb2:	91 05       	cpc	r25, r1
    deb4:	20 f0       	brcs	.+8      	; 0xdebe <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    deb6:	80 91 d1 0d 	lds	r24, 0x0DD1
    deba:	80 fd       	sbrc	r24, 0
    debc:	34 c0       	rjmp	.+104    	; 0xdf26 <update_level+0xec>
    debe:	0e 94 22 5b 	call	0xb644	; 0xb644 <move_camera_x>
    dec2:	31 c0       	rjmp	.+98     	; 0xdf26 <update_level+0xec>
    dec4:	80 91 e2 0d 	lds	r24, 0x0DE2
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x+24 >= game.camera_x+CAMERA_WIDTH*8 && game.current_level_index != 9)
    dec8:	a7 01       	movw	r20, r14
    deca:	48 5e       	subi	r20, 0xE8	; 232
    decc:	5f 4f       	sbci	r21, 0xFF	; 255
    dece:	96 01       	movw	r18, r12
    ded0:	20 52       	subi	r18, 0x20	; 32
    ded2:	3f 4f       	sbci	r19, 0xFF	; 255
    ded4:	42 17       	cp	r20, r18
    ded6:	53 07       	cpc	r21, r19
    ded8:	50 f0       	brcs	.+20     	; 0xdeee <update_level+0xb4>
    deda:	90 91 cc 0d 	lds	r25, 0x0DCC
    dede:	99 30       	cpi	r25, 0x09	; 9
    dee0:	31 f0       	breq	.+12     	; 0xdeee <update_level+0xb4>
		{
			game.level_ended = 1;
    dee2:	91 e0       	ldi	r25, 0x01	; 1
    dee4:	90 93 d4 0d 	sts	0x0DD4, r25
			game.player.flags ^= END_OF_SPACE;
    dee8:	90 e2       	ldi	r25, 0x20	; 32
    deea:	89 27       	eor	r24, r25
    deec:	01 c0       	rjmp	.+2      	; 0xdef0 <update_level+0xb6>
		} else {
			game.player.flags |= END_OF_SPACE;
    deee:	80 62       	ori	r24, 0x20	; 32
    def0:	80 93 e2 0d 	sts	0x0DE2, r24
    def4:	18 c0       	rjmp	.+48     	; 0xdf26 <update_level+0xec>
		}
	}
	else if (game.player.shared.vx > 0 &&
    def6:	80 91 df 0d 	lds	r24, 0x0DDF
    defa:	18 16       	cp	r1, r24
    defc:	a4 f4       	brge	.+40     	; 0xdf26 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    defe:	c7 01       	movw	r24, r14
    df00:	8c 19       	sub	r24, r12
    df02:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    df04:	80 37       	cpi	r24, 0x70	; 112
    df06:	91 05       	cpc	r25, r1
    df08:	70 f0       	brcs	.+28     	; 0xdf26 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    df0a:	96 01       	movw	r18, r12
    df0c:	83 e0       	ldi	r24, 0x03	; 3
    df0e:	36 95       	lsr	r19
    df10:	27 95       	ror	r18
    df12:	8a 95       	dec	r24
    df14:	e1 f7       	brne	.-8      	; 0xdf0e <update_level+0xd4>
    df16:	24 5e       	subi	r18, 0xE4	; 228
    df18:	3f 4f       	sbci	r19, 0xFF	; 255
    df1a:	80 91 c6 0d 	lds	r24, 0x0DC6
    df1e:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    df20:	28 17       	cp	r18, r24
    df22:	39 07       	cpc	r19, r25
    df24:	60 f2       	brcs	.-104    	; 0xdebe <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    df26:	21 e0       	ldi	r18, 0x01	; 1
    df28:	40 91 e9 0d 	lds	r20, 0x0DE9
    df2c:	6d e1       	ldi	r22, 0x1D	; 29
    df2e:	89 e0       	ldi	r24, 0x09	; 9
    df30:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    df34:	40 91 bd 0d 	lds	r20, 0x0DBD
    df38:	50 91 be 0d 	lds	r21, 0x0DBE
    df3c:	21 e0       	ldi	r18, 0x01	; 1
    df3e:	6d e1       	ldi	r22, 0x1D	; 29
    df40:	8b e1       	ldi	r24, 0x1B	; 27
    df42:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    df46:	21 e0       	ldi	r18, 0x01	; 1
    df48:	40 91 ca 0d 	lds	r20, 0x0DCA
    df4c:	6e e1       	ldi	r22, 0x1E	; 30
    df4e:	89 e0       	ldi	r24, 0x09	; 9
    df50:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    df54:	40 91 bb 0d 	lds	r20, 0x0DBB
    df58:	50 91 bc 0d 	lds	r21, 0x0DBC
    df5c:	21 e0       	ldi	r18, 0x01	; 1
    df5e:	6e e1       	ldi	r22, 0x1E	; 30
    df60:	8b e1       	ldi	r24, 0x1B	; 27
    df62:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    df66:	40 91 b9 0d 	lds	r20, 0x0DB9
    df6a:	50 91 ba 0d 	lds	r21, 0x0DBA
    df6e:	21 e0       	ldi	r18, 0x01	; 1
    df70:	6f e1       	ldi	r22, 0x1F	; 31
    df72:	8b e1       	ldi	r24, 0x1B	; 27
    df74:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    df78:	80 91 d4 0d 	lds	r24, 0x0DD4
    df7c:	88 23       	and	r24, r24
    df7e:	09 f4       	brne	.+2      	; 0xdf82 <update_level+0x148>
    df80:	8c c0       	rjmp	.+280    	; 0xe09a <update_level+0x260>
    df82:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    df86:	81 11       	cpse	r24, r1
    df88:	6c c0       	rjmp	.+216    	; 0xe062 <update_level+0x228>
    df8a:	80 91 e2 0d 	lds	r24, 0x0DE2
    df8e:	8e 70       	andi	r24, 0x0E	; 14
    df90:	09 f4       	brne	.+2      	; 0xdf94 <update_level+0x15a>
    df92:	83 c0       	rjmp	.+262    	; 0xe09a <update_level+0x260>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    df94:	40 e0       	ldi	r20, 0x00	; 0
    df96:	63 e6       	ldi	r22, 0x63	; 99
    df98:	73 e3       	ldi	r23, 0x33	; 51
    df9a:	80 e0       	ldi	r24, 0x00	; 0
    df9c:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
		if (game.player.flags & PRONE) {
    dfa0:	80 91 e2 0d 	lds	r24, 0x0DE2
    dfa4:	82 ff       	sbrs	r24, 2
    dfa6:	1a c0       	rjmp	.+52     	; 0xdfdc <update_level+0x1a2>
			game.player.shared.y -= 16;
    dfa8:	40 91 dc 0d 	lds	r20, 0x0DDC
    dfac:	50 91 dd 0d 	lds	r21, 0x0DDD
    dfb0:	40 51       	subi	r20, 0x10	; 16
    dfb2:	51 09       	sbc	r21, r1
    dfb4:	50 93 dd 0d 	sts	0x0DDD, r21
    dfb8:	40 93 dc 0d 	sts	0x0DDC, r20
			game.player.width = 2;
    dfbc:	82 e0       	ldi	r24, 0x02	; 2
    dfbe:	80 93 e5 0d 	sts	0x0DE5, r24
			game.player.height = 3;
    dfc2:	83 e0       	ldi	r24, 0x03	; 3
    dfc4:	80 93 e6 0d 	sts	0x0DE6, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    dfc8:	60 91 da 0d 	lds	r22, 0x0DDA
    dfcc:	80 91 b7 0d 	lds	r24, 0x0DB7
    dfd0:	68 1b       	sub	r22, r24
    dfd2:	03 e0       	ldi	r16, 0x03	; 3
    dfd4:	22 e0       	ldi	r18, 0x02	; 2
    dfd6:	80 e0       	ldi	r24, 0x00	; 0
    dfd8:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    dfdc:	6b e0       	ldi	r22, 0x0B	; 11
    dfde:	89 e0       	ldi	r24, 0x09	; 9
    dfe0:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
		LBRotateSprites();
    dfe4:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
		map_ship();
    dfe8:	0e 94 3b 5b 	call	0xb676	; 0xb676 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    dfec:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    dfee:	c0 e0       	ldi	r28, 0x00	; 0
	StopSong();
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    dff0:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    dff2:	81 e0       	ldi	r24, 0x01	; 1
    dff4:	90 e0       	ldi	r25, 0x00	; 0
    dff6:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    dffa:	8c 2f       	mov	r24, r28
    dffc:	90 e0       	ldi	r25, 0x00	; 0
    dffe:	88 3a       	cpi	r24, 0xA8	; 168
    e000:	91 05       	cpc	r25, r1
    e002:	3c f0       	brlt	.+14     	; 0xe012 <update_level+0x1d8>
			{
				clear_sprites(0, 6);
    e004:	66 e0       	ldi	r22, 0x06	; 6
    e006:	80 e0       	ldi	r24, 0x00	; 0
    e008:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
				LBRotateSprites();
    e00c:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
				ship_increment = -3;
    e010:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    e012:	8e e2       	ldi	r24, 0x2E	; 46
    e014:	9e e0       	ldi	r25, 0x0E	; 14
    e016:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <LBGetNextFrame>
    e01a:	40 e0       	ldi	r20, 0x00	; 0
    e01c:	bc 01       	movw	r22, r24
    e01e:	86 e0       	ldi	r24, 0x06	; 6
    e020:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    e024:	02 e0       	ldi	r16, 0x02	; 2
    e026:	24 e0       	ldi	r18, 0x04	; 4
    e028:	4c 2f       	mov	r20, r28
    e02a:	6e 2d       	mov	r22, r14
    e02c:	86 e0       	ldi	r24, 0x06	; 6
    e02e:	0e 94 e0 4f 	call	0x9fc0	; 0x9fc0 <LBMoveSprite>
			ship_y += ship_increment;
    e032:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    e034:	99 f4       	brne	.+38     	; 0xe05c <update_level+0x222>
			{
				clear_sprites(6, 8);
    e036:	68 e0       	ldi	r22, 0x08	; 8
    e038:	86 e0       	ldi	r24, 0x06	; 6
    e03a:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
				LBRotateSprites();
    e03e:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    e042:	64 e6       	ldi	r22, 0x64	; 100
    e044:	70 e0       	ldi	r23, 0x00	; 0
    e046:	82 e3       	ldi	r24, 0x32	; 50
    e048:	93 e0       	ldi	r25, 0x03	; 3
    e04a:	0e 94 6a 6b 	call	0xd6d4	; 0xd6d4 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    e04e:	80 91 cc 0d 	lds	r24, 0x0DCC
    e052:	00 e0       	ldi	r16, 0x00	; 0
    e054:	23 e0       	ldi	r18, 0x03	; 3
    e056:	4a e1       	ldi	r20, 0x1A	; 26
    e058:	6f ef       	ldi	r22, 0xFF	; 255
    e05a:	1c c0       	rjmp	.+56     	; 0xe094 <update_level+0x25a>
				break;
			}
			LBRotateSprites();
    e05c:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
		}
    e060:	c8 cf       	rjmp	.-112    	; 0xdff2 <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    e062:	80 91 cc 0d 	lds	r24, 0x0DCC
    e066:	89 30       	cpi	r24, 0x09	; 9
    e068:	49 f4       	brne	.+18     	; 0xe07c <update_level+0x242>
			tally_score((char*) strLevelClear, 500);
    e06a:	64 ef       	ldi	r22, 0xF4	; 244
    e06c:	71 e0       	ldi	r23, 0x01	; 1
    e06e:	82 e3       	ldi	r24, 0x32	; 50
    e070:	93 e0       	ldi	r25, 0x03	; 3
    e072:	0e 94 6a 6b 	call	0xd6d4	; 0xd6d4 <tally_score>
			congratulations();
    e076:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <congratulations>
    e07a:	2e c0       	rjmp	.+92     	; 0xe0d8 <update_level+0x29e>
			exit_game();
			return 1;
		} else {
			tally_score((char*) strLevelClear, 100);
    e07c:	64 e6       	ldi	r22, 0x64	; 100
    e07e:	70 e0       	ldi	r23, 0x00	; 0
    e080:	82 e3       	ldi	r24, 0x32	; 50
    e082:	93 e0       	ldi	r25, 0x03	; 3
    e084:	0e 94 6a 6b 	call	0xd6d4	; 0xd6d4 <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    e088:	80 91 cc 0d 	lds	r24, 0x0DCC
    e08c:	07 ec       	ldi	r16, 0xC7	; 199
    e08e:	2d ef       	ldi	r18, 0xFD	; 253
    e090:	4c e1       	ldi	r20, 0x1C	; 28
    e092:	61 e0       	ldi	r22, 0x01	; 1
    e094:	8f 5f       	subi	r24, 0xFF	; 255
    e096:	0e 94 ff 67 	call	0xcffe	; 0xcffe <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    e09a:	80 91 d0 0d 	lds	r24, 0x0DD0
    e09e:	82 30       	cpi	r24, 0x02	; 2
    e0a0:	11 f0       	breq	.+4      	; 0xe0a6 <update_level+0x26c>
			demo_counter = 0;
			exit_game();
			return 1;
		}
	}
	return 0;
    e0a2:	80 e0       	ldi	r24, 0x00	; 0
    e0a4:	1c c0       	rjmp	.+56     	; 0xe0de <update_level+0x2a4>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    e0a6:	80 91 f7 0c 	lds	r24, 0x0CF7
    e0aa:	90 91 f8 0c 	lds	r25, 0x0CF8
    e0ae:	01 96       	adiw	r24, 0x01	; 1
    e0b0:	90 93 f8 0c 	sts	0x0CF8, r25
    e0b4:	80 93 f7 0c 	sts	0x0CF7, r24
		if (ReadJoypad(0) || (demo_counter >= DEMO_LENGTH))
    e0b8:	80 e0       	ldi	r24, 0x00	; 0
    e0ba:	0e 94 9a 3f 	call	0x7f34	; 0x7f34 <ReadJoypad>
    e0be:	89 2b       	or	r24, r25
    e0c0:	39 f4       	brne	.+14     	; 0xe0d0 <update_level+0x296>
    e0c2:	80 91 f7 0c 	lds	r24, 0x0CF7
    e0c6:	90 91 f8 0c 	lds	r25, 0x0CF8
    e0ca:	84 38       	cpi	r24, 0x84	; 132
    e0cc:	93 40       	sbci	r25, 0x03	; 3
    e0ce:	48 f3       	brcs	.-46     	; 0xe0a2 <update_level+0x268>
		{
			demo_counter = 0;
    e0d0:	10 92 f8 0c 	sts	0x0CF8, r1
    e0d4:	10 92 f7 0c 	sts	0x0CF7, r1
			exit_game();
    e0d8:	0e 94 0e 6a 	call	0xd41c	; 0xd41c <exit_game>
			return 1;
    e0dc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
	
}
    e0de:	df 91       	pop	r29
    e0e0:	cf 91       	pop	r28
    e0e2:	0f 91       	pop	r16
    e0e4:	ff 90       	pop	r15
    e0e6:	ef 90       	pop	r14
    e0e8:	df 90       	pop	r13
    e0ea:	cf 90       	pop	r12
    e0ec:	08 95       	ret

0000e0ee <update_pause>:
	}
	game.high_score_counter++;
}

void update_pause()
{
    e0ee:	ef 92       	push	r14
    e0f0:	ff 92       	push	r15
    e0f2:	0f 93       	push	r16
    e0f4:	1f 93       	push	r17
    e0f6:	cf 93       	push	r28
    e0f8:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    e0fa:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    e0fe:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    e102:	80 91 4e 0e 	lds	r24, 0x0E4E
    e106:	83 ff       	sbrs	r24, 3
    e108:	63 c0       	rjmp	.+198    	; 0xe1d0 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e10a:	06 95       	lsr	r16
    e10c:	06 95       	lsr	r16
    e10e:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e110:	10 e0       	ldi	r17, 0x00	; 0
	game.high_score_counter++;
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    e112:	c6 95       	lsr	r28
    e114:	c6 95       	lsr	r28
    e116:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e118:	d0 e0       	ldi	r29, 0x00	; 0
    e11a:	c8 01       	movw	r24, r16
    e11c:	06 96       	adiw	r24, 0x06	; 6
    e11e:	2e e1       	ldi	r18, 0x1E	; 30
    e120:	e2 2e       	mov	r14, r18
    e122:	f1 2c       	mov	r15, r1
    e124:	b7 01       	movw	r22, r14
    e126:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    e12a:	9e 01       	movw	r18, r28
    e12c:	28 5f       	subi	r18, 0xF8	; 248
    e12e:	3f 4f       	sbci	r19, 0xFF	; 255
    e130:	45 e1       	ldi	r20, 0x15	; 21
    e132:	5c e5       	ldi	r21, 0x5C	; 92
    e134:	68 2f       	mov	r22, r24
    e136:	82 2f       	mov	r24, r18
    e138:	8f 71       	andi	r24, 0x1F	; 31
    e13a:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    e13e:	c8 01       	movw	r24, r16
    e140:	09 96       	adiw	r24, 0x09	; 9
    e142:	b7 01       	movw	r22, r14
    e144:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    e148:	9e 01       	movw	r18, r28
    e14a:	23 5f       	subi	r18, 0xF3	; 243
    e14c:	3f 4f       	sbci	r19, 0xFF	; 255
    e14e:	4e e3       	ldi	r20, 0x3E	; 62
    e150:	53 e0       	ldi	r21, 0x03	; 3
    e152:	68 2f       	mov	r22, r24
    e154:	82 2f       	mov	r24, r18
    e156:	8f 71       	andi	r24, 0x1F	; 31
    e158:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    e15c:	c8 01       	movw	r24, r16
    e15e:	0c 96       	adiw	r24, 0x0c	; 12
    e160:	b7 01       	movw	r22, r14
    e162:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    e166:	2a 96       	adiw	r28, 0x0a	; 10
    e168:	44 e4       	ldi	r20, 0x44	; 68
    e16a:	53 e0       	ldi	r21, 0x03	; 3
    e16c:	68 2f       	mov	r22, r24
    e16e:	8c 2f       	mov	r24, r28
    e170:	8f 71       	andi	r24, 0x1F	; 31
    e172:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    e176:	64 e1       	ldi	r22, 0x14	; 20
    e178:	80 e0       	ldi	r24, 0x00	; 0
    e17a:	0e 94 32 67 	call	0xce64	; 0xce64 <hide_sprites>
		LBRotateSprites();
    e17e:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    e182:	81 e0       	ldi	r24, 0x01	; 1
    e184:	90 e0       	ldi	r25, 0x00	; 0
    e186:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    e18a:	60 e0       	ldi	r22, 0x00	; 0
    e18c:	8e e4       	ldi	r24, 0x4E	; 78
    e18e:	9e e0       	ldi	r25, 0x0E	; 14
    e190:	0e 94 4e 4e 	call	0x9c9c	; 0x9c9c <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    e194:	80 91 4e 0e 	lds	r24, 0x0E4E
    e198:	90 91 4f 0e 	lds	r25, 0x0E4F
    e19c:	83 ff       	sbrs	r24, 3
    e19e:	08 c0       	rjmp	.+16     	; 0xe1b0 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    e1a0:	df 91       	pop	r29
    e1a2:	cf 91       	pop	r28
    e1a4:	1f 91       	pop	r17
    e1a6:	0f 91       	pop	r16
    e1a8:	ff 90       	pop	r15
    e1aa:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    e1ac:	0c 94 50 59 	jmp	0xb2a0	; 0xb2a0 <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    e1b0:	91 ff       	sbrs	r25, 1
    e1b2:	e7 cf       	rjmp	.-50     	; 0xe182 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    e1b4:	60 e0       	ldi	r22, 0x00	; 0
    e1b6:	70 e0       	ldi	r23, 0x00	; 0
    e1b8:	82 e2       	ldi	r24, 0x22	; 34
    e1ba:	93 e0       	ldi	r25, 0x03	; 3
    e1bc:	0e 94 6a 6b 	call	0xd6d4	; 0xd6d4 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    e1c0:	df 91       	pop	r29
    e1c2:	cf 91       	pop	r28
    e1c4:	1f 91       	pop	r17
    e1c6:	0f 91       	pop	r16
    e1c8:	ff 90       	pop	r15
    e1ca:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    e1cc:	0c 94 0e 6a 	jmp	0xd41c	; 0xd41c <exit_game>
				break;
			}
		}
	}
}
    e1d0:	df 91       	pop	r29
    e1d2:	cf 91       	pop	r28
    e1d4:	1f 91       	pop	r17
    e1d6:	0f 91       	pop	r16
    e1d8:	ff 90       	pop	r15
    e1da:	ef 90       	pop	r14
    e1dc:	08 95       	ret

0000e1de <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    e1de:	cf 92       	push	r12
    e1e0:	df 92       	push	r13
    e1e2:	ff 92       	push	r15
    e1e4:	0f 93       	push	r16
    e1e6:	1f 93       	push	r17
    e1e8:	cf 93       	push	r28
    e1ea:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e1ec:	20 91 cc 0d 	lds	r18, 0x0DCC
    e1f0:	f2 2e       	mov	r15, r18
    e1f2:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e1f4:	ef ea       	ldi	r30, 0xAF	; 175
    e1f6:	fc e0       	ldi	r31, 0x0C	; 12
    e1f8:	84 81       	ldd	r24, Z+4	; 0x04
    e1fa:	86 95       	lsr	r24
    e1fc:	86 95       	lsr	r24
    e1fe:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e200:	08 2f       	mov	r16, r24
    e202:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e204:	c3 81       	ldd	r28, Z+3	; 0x03
    e206:	c6 95       	lsr	r28
    e208:	c6 95       	lsr	r28
    e20a:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e20c:	d0 e0       	ldi	r29, 0x00	; 0
    e20e:	c8 01       	movw	r24, r16
    e210:	06 96       	adiw	r24, 0x06	; 6
    e212:	2e e1       	ldi	r18, 0x1E	; 30
    e214:	c2 2e       	mov	r12, r18
    e216:	d1 2c       	mov	r13, r1
    e218:	b6 01       	movw	r22, r12
    e21a:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    e21e:	9e 01       	movw	r18, r28
    e220:	29 5f       	subi	r18, 0xF9	; 249
    e222:	3f 4f       	sbci	r19, 0xFF	; 255
    e224:	43 eb       	ldi	r20, 0xB3	; 179
    e226:	5b e5       	ldi	r21, 0x5B	; 91
    e228:	68 2f       	mov	r22, r24
    e22a:	82 2f       	mov	r24, r18
    e22c:	8f 71       	andi	r24, 0x1F	; 31
    e22e:	0e 94 dd 4c 	call	0x99ba	; 0x99ba <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e232:	c8 01       	movw	r24, r16
    e234:	09 96       	adiw	r24, 0x09	; 9
    e236:	b6 01       	movw	r22, r12
    e238:	0e 94 80 73 	call	0xe700	; 0xe700 <__divmodhi4>
    e23c:	be 01       	movw	r22, r28
    e23e:	68 5f       	subi	r22, 0xF8	; 248
    e240:	7f 4f       	sbci	r23, 0xFF	; 255
    e242:	6f 71       	andi	r22, 0x1F	; 31
    e244:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e246:	93 e2       	ldi	r25, 0x23	; 35
    e248:	f9 9e       	mul	r15, r25
    e24a:	90 01       	movw	r18, r0
    e24c:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e24e:	48 2f       	mov	r20, r24
    e250:	c9 01       	movw	r24, r18
    e252:	82 5f       	subi	r24, 0xF2	; 242
    e254:	9e 4f       	sbci	r25, 0xFE	; 254
    e256:	0e 94 58 67 	call	0xceb0	; 0xceb0 <stream_text_anywhere>
	LBWaitSeconds(3);
    e25a:	83 e0       	ldi	r24, 0x03	; 3
    e25c:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <LBWaitSeconds>
	game.boss.active = 1;
    e260:	81 e0       	ldi	r24, 0x01	; 1
    e262:	80 93 62 0e 	sts	0x0E62, r24
	render_camera_view();
}
    e266:	df 91       	pop	r29
    e268:	cf 91       	pop	r28
    e26a:	1f 91       	pop	r17
    e26c:	0f 91       	pop	r16
    e26e:	ff 90       	pop	r15
    e270:	df 90       	pop	r13
    e272:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e274:	0c 94 50 59 	jmp	0xb2a0	; 0xb2a0 <render_camera_view>

0000e278 <update_player_ai>:
}

void update_player_ai(Player* player) 
{	 
    e278:	cf 93       	push	r28
    e27a:	df 93       	push	r29
    e27c:	fc 01       	movw	r30, r24
	if (player->ai_flags == AI_NOT_READY)
    e27e:	81 85       	ldd	r24, Z+9	; 0x09
    e280:	81 11       	cpse	r24, r1
    e282:	0e c0       	rjmp	.+28     	; 0xe2a0 <update_player_ai+0x28>
	 {
		 player->controls.held = BTN_LEFT;
    e284:	df 01       	movw	r26, r30
    e286:	a8 58       	subi	r26, 0x88	; 136
    e288:	bf 4f       	sbci	r27, 0xFF	; 255
    e28a:	80 e4       	ldi	r24, 0x40	; 64
    e28c:	90 e0       	ldi	r25, 0x00	; 0
    e28e:	8d 93       	st	X+, r24
    e290:	9c 93       	st	X, r25
		 player->ai_flags = AI_READY;
    e292:	81 e0       	ldi	r24, 0x01	; 1
    e294:	81 87       	std	Z+9, r24	; 0x09
		 game.ai_prone_counter = 0;
    e296:	10 92 d7 0d 	sts	0x0DD7, r1
		 game.ai_do_prone = 1;
    e29a:	80 93 d8 0d 	sts	0x0DD8, r24
    e29e:	b9 c0       	rjmp	.+370    	; 0xe412 <update_player_ai+0x19a>
	 }
	 else if (player->ai_flags & AI_READY)
    e2a0:	80 ff       	sbrs	r24, 0
    e2a2:	2e c0       	rjmp	.+92     	; 0xe300 <update_player_ai+0x88>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e2a4:	df 01       	movw	r26, r30
    e2a6:	ac 58       	subi	r26, 0x8C	; 140
    e2a8:	bf 4f       	sbci	r27, 0xFF	; 255
    e2aa:	15 96       	adiw	r26, 0x05	; 5
    e2ac:	1c 92       	st	X, r1
    e2ae:	1e 92       	st	-X, r1
    e2b0:	14 97       	sbiw	r26, 0x04	; 4
	p->pressed = 0;
    e2b2:	11 96       	adiw	r26, 0x01	; 1
    e2b4:	1c 92       	st	X, r1
    e2b6:	1e 92       	st	-X, r1
	p->released = 0;
    e2b8:	13 96       	adiw	r26, 0x03	; 3
    e2ba:	1c 92       	st	X, r1
    e2bc:	1e 92       	st	-X, r1
    e2be:	12 97       	sbiw	r26, 0x02	; 2
	p->held_cycles = 0;
    e2c0:	16 96       	adiw	r26, 0x06	; 6
    e2c2:	1c 92       	st	X, r1
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    e2c4:	80 91 b7 0d 	lds	r24, 0x0DB7
    e2c8:	90 91 b8 0d 	lds	r25, 0x0DB8
    e2cc:	23 e0       	ldi	r18, 0x03	; 3
    e2ce:	96 95       	lsr	r25
    e2d0:	87 95       	ror	r24
    e2d2:	2a 95       	dec	r18
    e2d4:	e1 f7       	brne	.-8      	; 0xe2ce <update_player_ai+0x56>
    e2d6:	4c 96       	adiw	r24, 0x1c	; 28
    e2d8:	20 91 c6 0d 	lds	r18, 0x0DC6
    e2dc:	30 e0       	ldi	r19, 0x00	; 0
    e2de:	82 17       	cp	r24, r18
    e2e0:	93 07       	cpc	r25, r19
    e2e2:	08 f4       	brcc	.+2      	; 0xe2e6 <update_player_ai+0x6e>
    e2e4:	96 c0       	rjmp	.+300    	; 0xe412 <update_player_ai+0x19a>
    e2e6:	ef 01       	movw	r28, r30
		 {
			 challenge();
    e2e8:	0e 94 ef 70 	call	0xe1de	; 0xe1de <challenge>
			 player->ai_flags = AI_WALKING;
    e2ec:	82 e0       	ldi	r24, 0x02	; 2
    e2ee:	89 87       	std	Y+9, r24	; 0x09
			 player->controls.held = BTN_LEFT;
    e2f0:	fe 01       	movw	r30, r28
    e2f2:	e8 58       	subi	r30, 0x88	; 136
    e2f4:	ff 4f       	sbci	r31, 0xFF	; 255
    e2f6:	80 e4       	ldi	r24, 0x40	; 64
    e2f8:	90 e0       	ldi	r25, 0x00	; 0
    e2fa:	91 83       	std	Z+1, r25	; 0x01
    e2fc:	80 83       	st	Z, r24
    e2fe:	89 c0       	rjmp	.+274    	; 0xe412 <update_player_ai+0x19a>
		 }
	 }
	 else if (player->ai_flags & AI_WALKING) 
    e300:	81 ff       	sbrs	r24, 1
    e302:	87 c0       	rjmp	.+270    	; 0xe412 <update_player_ai+0x19a>
	 {
		 player->controls.pressed = 0;
    e304:	df 01       	movw	r26, r30
    e306:	ac 58       	subi	r26, 0x8C	; 140
    e308:	bf 4f       	sbci	r27, 0xFF	; 255
    e30a:	11 96       	adiw	r26, 0x01	; 1
    e30c:	1c 92       	st	X, r1
    e30e:	1e 92       	st	-X, r1
		 if (game.frame_counter % 15 == 0)
    e310:	80 91 d1 0d 	lds	r24, 0x0DD1
    e314:	6f e0       	ldi	r22, 0x0F	; 15
    e316:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    e31a:	91 11       	cpse	r25, r1
    e31c:	05 c0       	rjmp	.+10     	; 0xe328 <update_player_ai+0xb0>
		 {
			 player->controls.pressed = BTN_B;
    e31e:	81 e0       	ldi	r24, 0x01	; 1
    e320:	90 e0       	ldi	r25, 0x00	; 0
    e322:	11 96       	adiw	r26, 0x01	; 1
    e324:	9c 93       	st	X, r25
    e326:	8e 93       	st	-X, r24
		 }
		 if (player->shared.x >= game.camera_x+(CAMERA_WIDTH*8/2-40) && player->shared.x <= game.camera_x+(CAMERA_WIDTH*8/2+40))
    e328:	20 81       	ld	r18, Z
    e32a:	31 81       	ldd	r19, Z+1	; 0x01
    e32c:	80 91 b7 0d 	lds	r24, 0x0DB7
    e330:	90 91 b8 0d 	lds	r25, 0x0DB8
    e334:	ac 01       	movw	r20, r24
    e336:	48 5b       	subi	r20, 0xB8	; 184
    e338:	5f 4f       	sbci	r21, 0xFF	; 255
    e33a:	24 17       	cp	r18, r20
    e33c:	35 07       	cpc	r19, r21
    e33e:	78 f0       	brcs	.+30     	; 0xe35e <update_player_ai+0xe6>
    e340:	40 5b       	subi	r20, 0xB0	; 176
    e342:	5f 4f       	sbci	r21, 0xFF	; 255
    e344:	42 17       	cp	r20, r18
    e346:	53 07       	cpc	r21, r19
    e348:	50 f0       	brcs	.+20     	; 0xe35e <update_player_ai+0xe6>
		 {
			 player->controls.pressed |= BTN_A;
    e34a:	2d 91       	ld	r18, X+
    e34c:	3c 91       	ld	r19, X
    e34e:	11 97       	sbiw	r26, 0x01	; 1
    e350:	31 60       	ori	r19, 0x01	; 1
    e352:	11 96       	adiw	r26, 0x01	; 1
    e354:	3c 93       	st	X, r19
    e356:	2e 93       	st	-X, r18
			 game.ai_do_prone = 1;
    e358:	21 e0       	ldi	r18, 0x01	; 1
    e35a:	20 93 d8 0d 	sts	0x0DD8, r18
		 }
		 if (player->shared.x <= game.camera_x)
    e35e:	20 81       	ld	r18, Z
    e360:	31 81       	ldd	r19, Z+1	; 0x01
    e362:	e8 58       	subi	r30, 0x88	; 136
    e364:	ff 4f       	sbci	r31, 0xFF	; 255
    e366:	82 17       	cp	r24, r18
    e368:	93 07       	cpc	r25, r19
    e36a:	18 f0       	brcs	.+6      	; 0xe372 <update_player_ai+0xfa>
		 {
			 player->controls.held = BTN_RIGHT;
    e36c:	40 e8       	ldi	r20, 0x80	; 128
    e36e:	50 e0       	ldi	r21, 0x00	; 0
    e370:	08 c0       	rjmp	.+16     	; 0xe382 <update_player_ai+0x10a>
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    e372:	ac 01       	movw	r20, r24
    e374:	40 53       	subi	r20, 0x30	; 48
    e376:	5f 4f       	sbci	r21, 0xFF	; 255
    e378:	24 17       	cp	r18, r20
    e37a:	35 07       	cpc	r19, r21
    e37c:	20 f0       	brcs	.+8      	; 0xe386 <update_player_ai+0x10e>
		 {
			 player->controls.held = BTN_LEFT;
    e37e:	40 e4       	ldi	r20, 0x40	; 64
    e380:	50 e0       	ldi	r21, 0x00	; 0
    e382:	51 83       	std	Z+1, r21	; 0x01
    e384:	40 83       	st	Z, r20
		 }
		 if (player->controls.held == BTN_RIGHT && player->shared.x >= game.camera_x+3*8 && player->shared.x <=  game.camera_x+4*8 && game.ai_do_prone)
    e386:	40 81       	ld	r20, Z
    e388:	51 81       	ldd	r21, Z+1	; 0x01
    e38a:	40 38       	cpi	r20, 0x80	; 128
    e38c:	51 05       	cpc	r21, r1
    e38e:	89 f4       	brne	.+34     	; 0xe3b2 <update_player_ai+0x13a>
    e390:	ac 01       	movw	r20, r24
    e392:	48 5e       	subi	r20, 0xE8	; 232
    e394:	5f 4f       	sbci	r21, 0xFF	; 255
    e396:	24 17       	cp	r18, r20
    e398:	35 07       	cpc	r19, r21
    e39a:	08 f1       	brcs	.+66     	; 0xe3de <update_player_ai+0x166>
    e39c:	80 96       	adiw	r24, 0x20	; 32
    e39e:	82 17       	cp	r24, r18
    e3a0:	93 07       	cpc	r25, r19
    e3a2:	e8 f0       	brcs	.+58     	; 0xe3de <update_player_ai+0x166>
    e3a4:	80 91 d8 0d 	lds	r24, 0x0DD8
    e3a8:	88 23       	and	r24, r24
    e3aa:	c9 f0       	breq	.+50     	; 0xe3de <update_player_ai+0x166>
		 {
			 player->controls.held |= BTN_DOWN;
    e3ac:	80 ea       	ldi	r24, 0xA0	; 160
    e3ae:	90 e0       	ldi	r25, 0x00	; 0
    e3b0:	14 c0       	rjmp	.+40     	; 0xe3da <update_player_ai+0x162>
		 }
		 else if (player->controls.held == BTN_LEFT && player->shared.x >= game.camera_x+(CAMERA_WIDTH*8)-6*8 && player->shared.x <=  game.camera_x+(CAMERA_WIDTH*8)-5*8 && game.ai_do_prone)
    e3b2:	40 34       	cpi	r20, 0x40	; 64
    e3b4:	51 05       	cpc	r21, r1
    e3b6:	99 f4       	brne	.+38     	; 0xe3de <update_player_ai+0x166>
    e3b8:	ac 01       	movw	r20, r24
    e3ba:	40 55       	subi	r20, 0x50	; 80
    e3bc:	5f 4f       	sbci	r21, 0xFF	; 255
    e3be:	24 17       	cp	r18, r20
    e3c0:	35 07       	cpc	r19, r21
    e3c2:	68 f0       	brcs	.+26     	; 0xe3de <update_player_ai+0x166>
    e3c4:	88 54       	subi	r24, 0x48	; 72
    e3c6:	9f 4f       	sbci	r25, 0xFF	; 255
    e3c8:	82 17       	cp	r24, r18
    e3ca:	93 07       	cpc	r25, r19
    e3cc:	40 f0       	brcs	.+16     	; 0xe3de <update_player_ai+0x166>
    e3ce:	80 91 d8 0d 	lds	r24, 0x0DD8
    e3d2:	88 23       	and	r24, r24
    e3d4:	21 f0       	breq	.+8      	; 0xe3de <update_player_ai+0x166>
		 {
			player->controls.held |= BTN_DOWN; 
    e3d6:	80 e6       	ldi	r24, 0x60	; 96
    e3d8:	90 e0       	ldi	r25, 0x00	; 0
    e3da:	91 83       	std	Z+1, r25	; 0x01
    e3dc:	80 83       	st	Z, r24
		 }
		 if (player->controls.held & BTN_DOWN)
    e3de:	80 81       	ld	r24, Z
    e3e0:	91 81       	ldd	r25, Z+1	; 0x01
    e3e2:	85 ff       	sbrs	r24, 5
    e3e4:	16 c0       	rjmp	.+44     	; 0xe412 <update_player_ai+0x19a>
		 {
			 game.ai_prone_counter++;
    e3e6:	20 91 d7 0d 	lds	r18, 0x0DD7
    e3ea:	2f 5f       	subi	r18, 0xFF	; 255
			 if (game.ai_prone_counter >= 60)
    e3ec:	2c 33       	cpi	r18, 0x3C	; 60
    e3ee:	18 f4       	brcc	.+6      	; 0xe3f6 <update_player_ai+0x17e>
		 {
			player->controls.held |= BTN_DOWN; 
		 }
		 if (player->controls.held & BTN_DOWN)
		 {
			 game.ai_prone_counter++;
    e3f0:	20 93 d7 0d 	sts	0x0DD7, r18
    e3f4:	0e c0       	rjmp	.+28     	; 0xe412 <update_player_ai+0x19a>
			 if (game.ai_prone_counter >= 60)
			 {
				game.ai_prone_counter = 0;
    e3f6:	10 92 d7 0d 	sts	0x0DD7, r1
				player->controls.held ^= BTN_DOWN;
    e3fa:	20 e2       	ldi	r18, 0x20	; 32
    e3fc:	82 27       	eor	r24, r18
    e3fe:	91 83       	std	Z+1, r25	; 0x01
    e400:	80 83       	st	Z, r24
				player->controls.pressed |= BTN_UP;
    e402:	8d 91       	ld	r24, X+
    e404:	9c 91       	ld	r25, X
    e406:	11 97       	sbiw	r26, 0x01	; 1
    e408:	80 61       	ori	r24, 0x10	; 16
    e40a:	8d 93       	st	X+, r24
    e40c:	9c 93       	st	X, r25
				game.ai_do_prone = 0;
    e40e:	10 92 d8 0d 	sts	0x0DD8, r1
			 }
		 }
	 }
}
    e412:	df 91       	pop	r29
    e414:	cf 91       	pop	r28
    e416:	08 95       	ret

0000e418 <prepare_debugging>:

#if DEBUG_MODE
void prepare_debugging() {
    e418:	0f 93       	push	r16
    e41a:	1f 93       	push	r17
    e41c:	cf 93       	push	r28
    e41e:	df 93       	push	r29
	fade_through();
    e420:	0e 94 fc 65 	call	0xcbf8	; 0xcbf8 <fade_through>
	Screen.scrollX = 0;
    e424:	ef ea       	ldi	r30, 0xAF	; 175
    e426:	fc e0       	ldi	r31, 0x0C	; 12
    e428:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    e42a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 29;
    e42c:	0d e1       	ldi	r16, 0x1D	; 29
    e42e:	05 83       	std	Z+5, r16	; 0x05
	Screen.overlayHeight = 3;
    e430:	83 e0       	ldi	r24, 0x03	; 3
    e432:	80 83       	st	Z, r24
	Screen.overlayTileTable = tiles_data;
    e434:	82 e9       	ldi	r24, 0x92	; 146
    e436:	93 e3       	ldi	r25, 0x33	; 51
    e438:	92 83       	std	Z+2, r25	; 0x02
    e43a:	81 83       	std	Z+1, r24	; 0x01
	clear_overlay(2);
    e43c:	82 e0       	ldi	r24, 0x02	; 2
    e43e:	0e 94 10 59 	call	0xb220	; 0xb220 <clear_overlay>
	game.current_screen = LEVEL;
    e442:	c7 eb       	ldi	r28, 0xB7	; 183
    e444:	dd e0       	ldi	r29, 0x0D	; 13
    e446:	82 e0       	ldi	r24, 0x02	; 2
    e448:	8c 8b       	std	Y+20, r24	; 0x14
	game.selection = START_SELECTED;
    e44a:	19 8e       	std	Y+25, r1	; 0x19
	game.lives = LIVES;
    e44c:	1a e0       	ldi	r17, 0x0A	; 10
    e44e:	1b 8b       	std	Y+19, r17	; 0x13
	game.score = 0;
    e450:	1b 82       	std	Y+3, r1	; 0x03
    e452:	1a 82       	std	Y+2, r1	; 0x02
	game.level_score = 0;
    e454:	1d 82       	std	Y+5, r1	; 0x05
    e456:	1c 82       	std	Y+4, r1	; 0x04
	game.time = 0;
    e458:	1f 82       	std	Y+7, r1	; 0x07
    e45a:	1e 82       	std	Y+6, r1	; 0x06
	game.current_level_index = DEBUG_LEVEL;
    e45c:	8d 8b       	std	Y+21, r24	; 0x15
	game.level_ended = 0;
    e45e:	1d 8e       	std	Y+29, r1	; 0x1d
	game.flags = 0;
    e460:	1f 8e       	std	Y+31, r1	; 0x1f
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    e462:	64 e1       	ldi	r22, 0x14	; 20
    e464:	80 e0       	ldi	r24, 0x00	; 0
    e466:	0e 94 da 65 	call	0xcbb4	; 0xcbb4 <clear_sprites>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e46a:	10 92 53 0e 	sts	0x0E53, r1
    e46e:	10 92 52 0e 	sts	0x0E52, r1
	p->pressed = 0;
    e472:	10 92 4f 0e 	sts	0x0E4F, r1
    e476:	10 92 4e 0e 	sts	0x0E4E, r1
	p->released = 0;
    e47a:	10 92 51 0e 	sts	0x0E51, r1
    e47e:	10 92 50 0e 	sts	0x0E50, r1
	p->held_cycles = 0;
    e482:	10 92 54 0e 	sts	0x0E54, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e486:	10 92 ce 0e 	sts	0x0ECE, r1
    e48a:	10 92 cd 0e 	sts	0x0ECD, r1
	p->pressed = 0;
    e48e:	10 92 ca 0e 	sts	0x0ECA, r1
    e492:	10 92 c9 0e 	sts	0x0EC9, r1
	p->released = 0;
    e496:	10 92 cc 0e 	sts	0x0ECC, r1
    e49a:	10 92 cb 0e 	sts	0x0ECB, r1
	p->held_cycles = 0;
    e49e:	10 92 cf 0e 	sts	0x0ECF, r1
	LBResetJoyPadState(&game.boss.controls);
	switch (DEBUG_LEVEL)
	{
		case 0: map_level_info((char*) map_level_ice); break;
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    e4a2:	80 e1       	ldi	r24, 0x10	; 16
    e4a4:	92 e7       	ldi	r25, 0x72	; 114
    e4a6:	0e 94 50 5b 	call	0xb6a0	; 0xb6a0 <map_level_info>
		case 6: map_level_info((char*) map_level_city); break;
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
		case 9: map_level_info((char*) map_level_space_final); break;
	}
	game.column_count = 0;
    e4aa:	19 8a       	std	Y+17, r1	; 0x11
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
#else
	game.camera_x = 199*8;
    e4ac:	88 e3       	ldi	r24, 0x38	; 56
    e4ae:	96 e0       	ldi	r25, 0x06	; 6
    e4b0:	99 83       	std	Y+1, r25	; 0x01
    e4b2:	88 83       	st	Y, r24
	game.camera_y = 0*8;
    e4b4:	18 86       	std	Y+8, r1	; 0x08
	game.player.shared.x = 202*8;
    e4b6:	80 e5       	ldi	r24, 0x50	; 80
    e4b8:	96 e0       	ldi	r25, 0x06	; 6
    e4ba:	9c a3       	std	Y+36, r25	; 0x24
    e4bc:	8b a3       	std	Y+35, r24	; 0x23
	game.player.shared.y = 21*8;
    e4be:	88 ea       	ldi	r24, 0xA8	; 168
    e4c0:	90 e0       	ldi	r25, 0x00	; 0
    e4c2:	9e a3       	std	Y+38, r25	; 0x26
    e4c4:	8d a3       	std	Y+37, r24	; 0x25
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    e4c6:	24 ee       	ldi	r18, 0xE4	; 228
    e4c8:	29 87       	std	Y+9, r18	; 0x09
    game.scroll_dest_x = 29;
    e4ca:	0d 87       	std	Y+13, r16	; 0x0d
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    e4cc:	2a e1       	ldi	r18, 0x1A	; 26
    e4ce:	2a 87       	std	Y+10, r18	; 0x0a
    game.scroll_dest_y =  26;
    e4d0:	2e 87       	std	Y+14, r18	; 0x0e
#endif
	game.boss.shared.x = get_boss_spawn_x(DEBUG_LEVEL)*8;
    e4d2:	28 ed       	ldi	r18, 0xD8	; 216
    e4d4:	37 e0       	ldi	r19, 0x07	; 7
    e4d6:	30 93 56 0e 	sts	0x0E56, r19
    e4da:	20 93 55 0e 	sts	0x0E55, r18
	game.boss.shared.y = get_boss_spawn_y(DEBUG_LEVEL)*8;
    e4de:	90 93 58 0e 	sts	0x0E58, r25
    e4e2:	80 93 57 0e 	sts	0x0E57, r24
	game.scroll_x = 0;
    e4e6:	1b 86       	std	Y+11, r1	; 0x0b
	game.scroll_y = 0;
    e4e8:	1c 86       	std	Y+12, r1	; 0x0c
	game.spawn_rate = BASE_SPAWN_RATE;
    e4ea:	1c 8f       	std	Y+28, r17	; 0x1c
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    e4ec:	49 e6       	ldi	r20, 0x69	; 105
    e4ee:	53 e0       	ldi	r21, 0x03	; 3
    e4f0:	6d e1       	ldi	r22, 0x1D	; 29
    e4f2:	80 e0       	ldi	r24, 0x00	; 0
    e4f4:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    e4f8:	4c e5       	ldi	r20, 0x5C	; 92
    e4fa:	53 e0       	ldi	r21, 0x03	; 3
    e4fc:	6d e1       	ldi	r22, 0x1D	; 29
    e4fe:	82 e1       	ldi	r24, 0x12	; 18
    e500:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    e504:	42 e6       	ldi	r20, 0x62	; 98
    e506:	53 e0       	ldi	r21, 0x03	; 3
    e508:	6e e1       	ldi	r22, 0x1E	; 30
    e50a:	80 e0       	ldi	r24, 0x00	; 0
    e50c:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    e510:	41 e7       	ldi	r20, 0x71	; 113
    e512:	53 e0       	ldi	r21, 0x03	; 3
    e514:	6e e1       	ldi	r22, 0x1E	; 30
    e516:	81 e1       	ldi	r24, 0x11	; 17
    e518:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    e51c:	4b e1       	ldi	r20, 0x1B	; 27
    e51e:	53 e0       	ldi	r21, 0x03	; 3
    e520:	6f e1       	ldi	r22, 0x1F	; 31
    e522:	81 e1       	ldi	r24, 0x11	; 17
    e524:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    e528:	21 e0       	ldi	r18, 0x01	; 1
    e52a:	4a a9       	ldd	r20, Y+50	; 0x32
    e52c:	6d e1       	ldi	r22, 0x1D	; 29
    e52e:	89 e0       	ldi	r24, 0x09	; 9
    e530:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    e534:	4e 81       	ldd	r20, Y+6	; 0x06
    e536:	5f 81       	ldd	r21, Y+7	; 0x07
    e538:	21 e0       	ldi	r18, 0x01	; 1
    e53a:	6d e1       	ldi	r22, 0x1D	; 29
    e53c:	8b e1       	ldi	r24, 0x1B	; 27
    e53e:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    e542:	21 e0       	ldi	r18, 0x01	; 1
    e544:	4b 89       	ldd	r20, Y+19	; 0x13
    e546:	6e e1       	ldi	r22, 0x1E	; 30
    e548:	89 e0       	ldi	r24, 0x09	; 9
    e54a:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    e54e:	4c 81       	ldd	r20, Y+4	; 0x04
    e550:	5d 81       	ldd	r21, Y+5	; 0x05
    e552:	21 e0       	ldi	r18, 0x01	; 1
    e554:	6e e1       	ldi	r22, 0x1E	; 30
    e556:	8b e1       	ldi	r24, 0x1B	; 27
    e558:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    e55c:	4a 81       	ldd	r20, Y+2	; 0x02
    e55e:	5b 81       	ldd	r21, Y+3	; 0x03
    e560:	21 e0       	ldi	r18, 0x01	; 1
    e562:	6f e1       	ldi	r22, 0x1F	; 31
    e564:	8b e1       	ldi	r24, 0x1B	; 27
    e566:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <LBPrintInt>
	
	init_player_state();
    e56a:	0e 94 03 55 	call	0xaa06	; 0xaa06 <init_player_state>
	init_boss_state();
    e56e:	0e 94 79 54 	call	0xa8f2	; 0xa8f2 <init_boss_state>
	init_enemy_state();
    e572:	0e 94 6c 50 	call	0xa0d8	; 0xa0d8 <init_enemy_state>
	render_camera_view();
    e576:	0e 94 50 59 	call	0xb2a0	; 0xb2a0 <render_camera_view>
	music_transition();
}
    e57a:	df 91       	pop	r29
    e57c:	cf 91       	pop	r28
    e57e:	1f 91       	pop	r17
    e580:	0f 91       	pop	r16
	
	init_player_state();
	init_boss_state();
	init_enemy_state();
	render_camera_view();
	music_transition();
    e582:	0c 94 ef 67 	jmp	0xcfde	; 0xcfde <music_transition>

0000e586 <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e586:	0e 94 e8 3f 	call	0x7fd0	; 0x7fd0 <GetTrueRandomSeed>
    e58a:	0e 94 99 40 	call	0x8132	; 0x8132 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e58e:	82 e2       	ldi	r24, 0x22	; 34
    e590:	98 e1       	ldi	r25, 0x18	; 24
    e592:	0e 94 73 41 	call	0x82e6	; 0x82e6 <InitMusicPlayer>
	ClearVram();
    e596:	0e 94 70 3f 	call	0x7ee0	; 0x7ee0 <ClearVram>
	SetMasterVolume(0x05);
    e59a:	85 e0       	ldi	r24, 0x05	; 5
    e59c:	0e 94 2b 45 	call	0x8a56	; 0x8a56 <SetMasterVolume>
	SetTileTable(tiles_data);
    e5a0:	82 e9       	ldi	r24, 0x92	; 146
    e5a2:	93 e3       	ldi	r25, 0x33	; 51
    e5a4:	0e 94 8b 3f 	call	0x7f16	; 0x7f16 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e5a8:	81 ea       	ldi	r24, 0xA1	; 161
    e5aa:	99 e1       	ldi	r25, 0x19	; 25
    e5ac:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e5b0:	82 e5       	ldi	r24, 0x52	; 82
    e5b2:	9b e5       	ldi	r25, 0x5B	; 91
    e5b4:	90 93 8a 0d 	sts	0x0D8A, r25
    e5b8:	80 93 89 0d 	sts	0x0D89, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e5bc:	0e 94 56 50 	call	0xa0ac	; 0xa0ac <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
    e5c0:	0e 94 0c 72 	call	0xe418	; 0xe418 <prepare_debugging>
#else
	load_splash();
#endif
#if DEBUG_OBSERVE_PLAYER
	clear_eeprom();
    e5c4:	0e 94 ed 4d 	call	0x9bda	; 0x9bda <clear_eeprom>
#endif
	while (1)
	{
		WaitVsync(1);
    e5c8:	81 e0       	ldi	r24, 0x01	; 1
    e5ca:	90 e0       	ldi	r25, 0x00	; 0
    e5cc:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e5d0:	60 e0       	ldi	r22, 0x00	; 0
    e5d2:	8e e4       	ldi	r24, 0x4E	; 78
    e5d4:	9e e0       	ldi	r25, 0x0E	; 14
    e5d6:	0e 94 4e 4e 	call	0x9c9c	; 0x9c9c <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e5da:	80 91 cb 0d 	lds	r24, 0x0DCB
    e5de:	82 30       	cpi	r24, 0x02	; 2
    e5e0:	09 f0       	breq	.+2      	; 0xe5e4 <main+0x5e>
    e5e2:	54 c0       	rjmp	.+168    	; 0xe68c <main+0x106>
		{
			if (update_level()) continue;
    e5e4:	0e 94 1d 6f 	call	0xde3a	; 0xde3a <update_level>
    e5e8:	81 11       	cpse	r24, r1
    e5ea:	ee cf       	rjmp	.-36     	; 0xe5c8 <main+0x42>
			if (update_player(&game.player, PLAYER_SLOT))
    e5ec:	60 e0       	ldi	r22, 0x00	; 0
    e5ee:	8a ed       	ldi	r24, 0xDA	; 218
    e5f0:	9d e0       	ldi	r25, 0x0D	; 13
    e5f2:	0e 94 e9 6c 	call	0xd9d2	; 0xd9d2 <update_player>
    e5f6:	88 23       	and	r24, r24
    e5f8:	f9 f0       	breq	.+62     	; 0xe638 <main+0xb2>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e5fa:	66 e0       	ldi	r22, 0x06	; 6
    e5fc:	8a ed       	ldi	r24, 0xDA	; 218
    e5fe:	9d e0       	ldi	r25, 0x0D	; 13
    e600:	0e 94 ea 5b 	call	0xb7d4	; 0xb7d4 <update_shot>
				update_enemies();
    e604:	0e 94 d0 62 	call	0xc5a0	; 0xc5a0 <update_enemies>
				update_enemy_shots();
    e608:	0e 94 3d 63 	call	0xc67a	; 0xc67a <update_enemy_shots>
				animate_enemies();
    e60c:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <animate_enemies>
				animate_enemy_shots();
    e610:	0e 94 b2 64 	call	0xc964	; 0xc964 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e614:	40 e0       	ldi	r20, 0x00	; 0
    e616:	65 e5       	ldi	r22, 0x55	; 85
    e618:	7e e0       	ldi	r23, 0x0E	; 14
    e61a:	8a ed       	ldi	r24, 0xDA	; 218
    e61c:	9d e0       	ldi	r25, 0x0D	; 13
    e61e:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e622:	46 e0       	ldi	r20, 0x06	; 6
    e624:	65 e5       	ldi	r22, 0x55	; 85
    e626:	7e e0       	ldi	r23, 0x0E	; 14
    e628:	8a ed       	ldi	r24, 0xDA	; 218
    e62a:	9d e0       	ldi	r25, 0x0D	; 13
    e62c:	0e 94 af 5f 	call	0xbf5e	; 0xbf5e <animate_shot>
				update_pause();
    e630:	0e 94 77 70 	call	0xe0ee	; 0xe0ee <update_pause>
#if DEBUG_OBSERVE_PLAYER
				observe_player();
    e634:	0e 94 43 5d 	call	0xba86	; 0xba86 <observe_player>
#endif
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e638:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <is_space>
    e63c:	81 11       	cpse	r24, r1
    e63e:	2f c0       	rjmp	.+94     	; 0xe69e <main+0x118>
    e640:	80 91 b7 0d 	lds	r24, 0x0DB7
    e644:	90 91 b8 0d 	lds	r25, 0x0DB8
    e648:	88 3f       	cpi	r24, 0xF8	; 248
    e64a:	96 40       	sbci	r25, 0x06	; 6
    e64c:	40 f1       	brcs	.+80     	; 0xe69e <main+0x118>
    e64e:	69 e0       	ldi	r22, 0x09	; 9
    e650:	85 e5       	ldi	r24, 0x55	; 85
    e652:	9e e0       	ldi	r25, 0x0E	; 14
    e654:	0e 94 e9 6c 	call	0xd9d2	; 0xd9d2 <update_player>
    e658:	88 23       	and	r24, r24
    e65a:	09 f1       	breq	.+66     	; 0xe69e <main+0x118>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e65c:	6f e0       	ldi	r22, 0x0F	; 15
    e65e:	85 e5       	ldi	r24, 0x55	; 85
    e660:	9e e0       	ldi	r25, 0x0E	; 14
    e662:	0e 94 ea 5b 	call	0xb7d4	; 0xb7d4 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e666:	49 e0       	ldi	r20, 0x09	; 9
    e668:	6a ed       	ldi	r22, 0xDA	; 218
    e66a:	7d e0       	ldi	r23, 0x0D	; 13
    e66c:	85 e5       	ldi	r24, 0x55	; 85
    e66e:	9e e0       	ldi	r25, 0x0E	; 14
    e670:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e674:	4f e0       	ldi	r20, 0x0F	; 15
    e676:	6a ed       	ldi	r22, 0xDA	; 218
    e678:	7d e0       	ldi	r23, 0x0D	; 13
    e67a:	85 e5       	ldi	r24, 0x55	; 85
    e67c:	9e e0       	ldi	r25, 0x0E	; 14
    e67e:	0e 94 af 5f 	call	0xbf5e	; 0xbf5e <animate_shot>
				update_player_ai(&game.boss);
    e682:	85 e5       	ldi	r24, 0x55	; 85
    e684:	9e e0       	ldi	r25, 0x0E	; 14
    e686:	0e 94 3c 71 	call	0xe278	; 0xe278 <update_player_ai>
    e68a:	09 c0       	rjmp	.+18     	; 0xe69e <main+0x118>
			}
		}
		else if (game.current_screen == SPLASH)
    e68c:	81 11       	cpse	r24, r1
    e68e:	03 c0       	rjmp	.+6      	; 0xe696 <main+0x110>
		{
			update_splash();
    e690:	0e 94 1e 6a 	call	0xd43c	; 0xd43c <update_splash>
    e694:	04 c0       	rjmp	.+8      	; 0xe69e <main+0x118>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e696:	81 30       	cpi	r24, 0x01	; 1
    e698:	11 f4       	brne	.+4      	; 0xe69e <main+0x118>
		{
			update_high_scores();
    e69a:	0e 94 9a 6a 	call	0xd534	; 0xd534 <update_high_scores>
			
		}
		LBRotateSprites();
    e69e:	0e 94 1e 50 	call	0xa03c	; 0xa03c <LBRotateSprites>
    e6a2:	92 cf       	rjmp	.-220    	; 0xe5c8 <main+0x42>

0000e6a4 <__udivmodqi4>:
    e6a4:	99 1b       	sub	r25, r25
    e6a6:	79 e0       	ldi	r23, 0x09	; 9
    e6a8:	04 c0       	rjmp	.+8      	; 0xe6b2 <__udivmodqi4_ep>

0000e6aa <__udivmodqi4_loop>:
    e6aa:	99 1f       	adc	r25, r25
    e6ac:	96 17       	cp	r25, r22
    e6ae:	08 f0       	brcs	.+2      	; 0xe6b2 <__udivmodqi4_ep>
    e6b0:	96 1b       	sub	r25, r22

0000e6b2 <__udivmodqi4_ep>:
    e6b2:	88 1f       	adc	r24, r24
    e6b4:	7a 95       	dec	r23
    e6b6:	c9 f7       	brne	.-14     	; 0xe6aa <__udivmodqi4_loop>
    e6b8:	80 95       	com	r24
    e6ba:	08 95       	ret

0000e6bc <__divmodqi4>:
    e6bc:	87 fb       	bst	r24, 7
    e6be:	08 2e       	mov	r0, r24
    e6c0:	06 26       	eor	r0, r22
    e6c2:	87 fd       	sbrc	r24, 7
    e6c4:	81 95       	neg	r24
    e6c6:	67 fd       	sbrc	r22, 7
    e6c8:	61 95       	neg	r22
    e6ca:	0e 94 52 73 	call	0xe6a4	; 0xe6a4 <__udivmodqi4>
    e6ce:	0e f4       	brtc	.+2      	; 0xe6d2 <__divmodqi4_1>
    e6d0:	91 95       	neg	r25

0000e6d2 <__divmodqi4_1>:
    e6d2:	07 fc       	sbrc	r0, 7
    e6d4:	81 95       	neg	r24

0000e6d6 <__divmodqi4_exit>:
    e6d6:	08 95       	ret

0000e6d8 <__udivmodhi4>:
    e6d8:	aa 1b       	sub	r26, r26
    e6da:	bb 1b       	sub	r27, r27
    e6dc:	51 e1       	ldi	r21, 0x11	; 17
    e6de:	07 c0       	rjmp	.+14     	; 0xe6ee <__udivmodhi4_ep>

0000e6e0 <__udivmodhi4_loop>:
    e6e0:	aa 1f       	adc	r26, r26
    e6e2:	bb 1f       	adc	r27, r27
    e6e4:	a6 17       	cp	r26, r22
    e6e6:	b7 07       	cpc	r27, r23
    e6e8:	10 f0       	brcs	.+4      	; 0xe6ee <__udivmodhi4_ep>
    e6ea:	a6 1b       	sub	r26, r22
    e6ec:	b7 0b       	sbc	r27, r23

0000e6ee <__udivmodhi4_ep>:
    e6ee:	88 1f       	adc	r24, r24
    e6f0:	99 1f       	adc	r25, r25
    e6f2:	5a 95       	dec	r21
    e6f4:	a9 f7       	brne	.-22     	; 0xe6e0 <__udivmodhi4_loop>
    e6f6:	80 95       	com	r24
    e6f8:	90 95       	com	r25
    e6fa:	bc 01       	movw	r22, r24
    e6fc:	cd 01       	movw	r24, r26
    e6fe:	08 95       	ret

0000e700 <__divmodhi4>:
    e700:	97 fb       	bst	r25, 7
    e702:	07 2e       	mov	r0, r23
    e704:	16 f4       	brtc	.+4      	; 0xe70a <__divmodhi4+0xa>
    e706:	00 94       	com	r0
    e708:	07 d0       	rcall	.+14     	; 0xe718 <__divmodhi4_neg1>
    e70a:	77 fd       	sbrc	r23, 7
    e70c:	09 d0       	rcall	.+18     	; 0xe720 <__divmodhi4_neg2>
    e70e:	0e 94 6c 73 	call	0xe6d8	; 0xe6d8 <__udivmodhi4>
    e712:	07 fc       	sbrc	r0, 7
    e714:	05 d0       	rcall	.+10     	; 0xe720 <__divmodhi4_neg2>
    e716:	3e f4       	brtc	.+14     	; 0xe726 <__divmodhi4_exit>

0000e718 <__divmodhi4_neg1>:
    e718:	90 95       	com	r25
    e71a:	81 95       	neg	r24
    e71c:	9f 4f       	sbci	r25, 0xFF	; 255
    e71e:	08 95       	ret

0000e720 <__divmodhi4_neg2>:
    e720:	70 95       	com	r23
    e722:	61 95       	neg	r22
    e724:	7f 4f       	sbci	r23, 0xFF	; 255

0000e726 <__divmodhi4_exit>:
    e726:	08 95       	ret

0000e728 <__tablejump2__>:
    e728:	ee 0f       	add	r30, r30
    e72a:	ff 1f       	adc	r31, r31
    e72c:	05 90       	lpm	r0, Z+
    e72e:	f4 91       	lpm	r31, Z
    e730:	e0 2d       	mov	r30, r0
    e732:	09 94       	ijmp

0000e734 <__subsf3>:
    e734:	50 58       	subi	r21, 0x80	; 128

0000e736 <__addsf3>:
    e736:	bb 27       	eor	r27, r27
    e738:	aa 27       	eor	r26, r26
    e73a:	0e d0       	rcall	.+28     	; 0xe758 <__addsf3x>
    e73c:	e5 c0       	rjmp	.+458    	; 0xe908 <__fp_round>
    e73e:	d6 d0       	rcall	.+428    	; 0xe8ec <__fp_pscA>
    e740:	30 f0       	brcs	.+12     	; 0xe74e <__addsf3+0x18>
    e742:	db d0       	rcall	.+438    	; 0xe8fa <__fp_pscB>
    e744:	20 f0       	brcs	.+8      	; 0xe74e <__addsf3+0x18>
    e746:	31 f4       	brne	.+12     	; 0xe754 <__addsf3+0x1e>
    e748:	9f 3f       	cpi	r25, 0xFF	; 255
    e74a:	11 f4       	brne	.+4      	; 0xe750 <__addsf3+0x1a>
    e74c:	1e f4       	brtc	.+6      	; 0xe754 <__addsf3+0x1e>
    e74e:	cb c0       	rjmp	.+406    	; 0xe8e6 <__fp_nan>
    e750:	0e f4       	brtc	.+2      	; 0xe754 <__addsf3+0x1e>
    e752:	e0 95       	com	r30
    e754:	e7 fb       	bst	r30, 7
    e756:	c1 c0       	rjmp	.+386    	; 0xe8da <__fp_inf>

0000e758 <__addsf3x>:
    e758:	e9 2f       	mov	r30, r25
    e75a:	e7 d0       	rcall	.+462    	; 0xe92a <__fp_split3>
    e75c:	80 f3       	brcs	.-32     	; 0xe73e <__addsf3+0x8>
    e75e:	ba 17       	cp	r27, r26
    e760:	62 07       	cpc	r22, r18
    e762:	73 07       	cpc	r23, r19
    e764:	84 07       	cpc	r24, r20
    e766:	95 07       	cpc	r25, r21
    e768:	18 f0       	brcs	.+6      	; 0xe770 <__addsf3x+0x18>
    e76a:	71 f4       	brne	.+28     	; 0xe788 <__addsf3x+0x30>
    e76c:	9e f5       	brtc	.+102    	; 0xe7d4 <__addsf3x+0x7c>
    e76e:	ff c0       	rjmp	.+510    	; 0xe96e <__fp_zero>
    e770:	0e f4       	brtc	.+2      	; 0xe774 <__addsf3x+0x1c>
    e772:	e0 95       	com	r30
    e774:	0b 2e       	mov	r0, r27
    e776:	ba 2f       	mov	r27, r26
    e778:	a0 2d       	mov	r26, r0
    e77a:	0b 01       	movw	r0, r22
    e77c:	b9 01       	movw	r22, r18
    e77e:	90 01       	movw	r18, r0
    e780:	0c 01       	movw	r0, r24
    e782:	ca 01       	movw	r24, r20
    e784:	a0 01       	movw	r20, r0
    e786:	11 24       	eor	r1, r1
    e788:	ff 27       	eor	r31, r31
    e78a:	59 1b       	sub	r21, r25
    e78c:	99 f0       	breq	.+38     	; 0xe7b4 <__addsf3x+0x5c>
    e78e:	59 3f       	cpi	r21, 0xF9	; 249
    e790:	50 f4       	brcc	.+20     	; 0xe7a6 <__addsf3x+0x4e>
    e792:	50 3e       	cpi	r21, 0xE0	; 224
    e794:	68 f1       	brcs	.+90     	; 0xe7f0 <__addsf3x+0x98>
    e796:	1a 16       	cp	r1, r26
    e798:	f0 40       	sbci	r31, 0x00	; 0
    e79a:	a2 2f       	mov	r26, r18
    e79c:	23 2f       	mov	r18, r19
    e79e:	34 2f       	mov	r19, r20
    e7a0:	44 27       	eor	r20, r20
    e7a2:	58 5f       	subi	r21, 0xF8	; 248
    e7a4:	f3 cf       	rjmp	.-26     	; 0xe78c <__addsf3x+0x34>
    e7a6:	46 95       	lsr	r20
    e7a8:	37 95       	ror	r19
    e7aa:	27 95       	ror	r18
    e7ac:	a7 95       	ror	r26
    e7ae:	f0 40       	sbci	r31, 0x00	; 0
    e7b0:	53 95       	inc	r21
    e7b2:	c9 f7       	brne	.-14     	; 0xe7a6 <__addsf3x+0x4e>
    e7b4:	7e f4       	brtc	.+30     	; 0xe7d4 <__addsf3x+0x7c>
    e7b6:	1f 16       	cp	r1, r31
    e7b8:	ba 0b       	sbc	r27, r26
    e7ba:	62 0b       	sbc	r22, r18
    e7bc:	73 0b       	sbc	r23, r19
    e7be:	84 0b       	sbc	r24, r20
    e7c0:	ba f0       	brmi	.+46     	; 0xe7f0 <__addsf3x+0x98>
    e7c2:	91 50       	subi	r25, 0x01	; 1
    e7c4:	a1 f0       	breq	.+40     	; 0xe7ee <__addsf3x+0x96>
    e7c6:	ff 0f       	add	r31, r31
    e7c8:	bb 1f       	adc	r27, r27
    e7ca:	66 1f       	adc	r22, r22
    e7cc:	77 1f       	adc	r23, r23
    e7ce:	88 1f       	adc	r24, r24
    e7d0:	c2 f7       	brpl	.-16     	; 0xe7c2 <__addsf3x+0x6a>
    e7d2:	0e c0       	rjmp	.+28     	; 0xe7f0 <__addsf3x+0x98>
    e7d4:	ba 0f       	add	r27, r26
    e7d6:	62 1f       	adc	r22, r18
    e7d8:	73 1f       	adc	r23, r19
    e7da:	84 1f       	adc	r24, r20
    e7dc:	48 f4       	brcc	.+18     	; 0xe7f0 <__addsf3x+0x98>
    e7de:	87 95       	ror	r24
    e7e0:	77 95       	ror	r23
    e7e2:	67 95       	ror	r22
    e7e4:	b7 95       	ror	r27
    e7e6:	f7 95       	ror	r31
    e7e8:	9e 3f       	cpi	r25, 0xFE	; 254
    e7ea:	08 f0       	brcs	.+2      	; 0xe7ee <__addsf3x+0x96>
    e7ec:	b3 cf       	rjmp	.-154    	; 0xe754 <__addsf3+0x1e>
    e7ee:	93 95       	inc	r25
    e7f0:	88 0f       	add	r24, r24
    e7f2:	08 f0       	brcs	.+2      	; 0xe7f6 <__addsf3x+0x9e>
    e7f4:	99 27       	eor	r25, r25
    e7f6:	ee 0f       	add	r30, r30
    e7f8:	97 95       	ror	r25
    e7fa:	87 95       	ror	r24
    e7fc:	08 95       	ret

0000e7fe <__fixsfsi>:
    e7fe:	04 d0       	rcall	.+8      	; 0xe808 <__fixunssfsi>
    e800:	68 94       	set
    e802:	b1 11       	cpse	r27, r1
    e804:	b5 c0       	rjmp	.+362    	; 0xe970 <__fp_szero>
    e806:	08 95       	ret

0000e808 <__fixunssfsi>:
    e808:	98 d0       	rcall	.+304    	; 0xe93a <__fp_splitA>
    e80a:	88 f0       	brcs	.+34     	; 0xe82e <__fixunssfsi+0x26>
    e80c:	9f 57       	subi	r25, 0x7F	; 127
    e80e:	90 f0       	brcs	.+36     	; 0xe834 <__fixunssfsi+0x2c>
    e810:	b9 2f       	mov	r27, r25
    e812:	99 27       	eor	r25, r25
    e814:	b7 51       	subi	r27, 0x17	; 23
    e816:	a0 f0       	brcs	.+40     	; 0xe840 <__fixunssfsi+0x38>
    e818:	d1 f0       	breq	.+52     	; 0xe84e <__fixunssfsi+0x46>
    e81a:	66 0f       	add	r22, r22
    e81c:	77 1f       	adc	r23, r23
    e81e:	88 1f       	adc	r24, r24
    e820:	99 1f       	adc	r25, r25
    e822:	1a f0       	brmi	.+6      	; 0xe82a <__fixunssfsi+0x22>
    e824:	ba 95       	dec	r27
    e826:	c9 f7       	brne	.-14     	; 0xe81a <__fixunssfsi+0x12>
    e828:	12 c0       	rjmp	.+36     	; 0xe84e <__fixunssfsi+0x46>
    e82a:	b1 30       	cpi	r27, 0x01	; 1
    e82c:	81 f0       	breq	.+32     	; 0xe84e <__fixunssfsi+0x46>
    e82e:	9f d0       	rcall	.+318    	; 0xe96e <__fp_zero>
    e830:	b1 e0       	ldi	r27, 0x01	; 1
    e832:	08 95       	ret
    e834:	9c c0       	rjmp	.+312    	; 0xe96e <__fp_zero>
    e836:	67 2f       	mov	r22, r23
    e838:	78 2f       	mov	r23, r24
    e83a:	88 27       	eor	r24, r24
    e83c:	b8 5f       	subi	r27, 0xF8	; 248
    e83e:	39 f0       	breq	.+14     	; 0xe84e <__fixunssfsi+0x46>
    e840:	b9 3f       	cpi	r27, 0xF9	; 249
    e842:	cc f3       	brlt	.-14     	; 0xe836 <__fixunssfsi+0x2e>
    e844:	86 95       	lsr	r24
    e846:	77 95       	ror	r23
    e848:	67 95       	ror	r22
    e84a:	b3 95       	inc	r27
    e84c:	d9 f7       	brne	.-10     	; 0xe844 <__fixunssfsi+0x3c>
    e84e:	3e f4       	brtc	.+14     	; 0xe85e <__fixunssfsi+0x56>
    e850:	90 95       	com	r25
    e852:	80 95       	com	r24
    e854:	70 95       	com	r23
    e856:	61 95       	neg	r22
    e858:	7f 4f       	sbci	r23, 0xFF	; 255
    e85a:	8f 4f       	sbci	r24, 0xFF	; 255
    e85c:	9f 4f       	sbci	r25, 0xFF	; 255
    e85e:	08 95       	ret

0000e860 <__floatunsisf>:
    e860:	e8 94       	clt
    e862:	09 c0       	rjmp	.+18     	; 0xe876 <__floatsisf+0x12>

0000e864 <__floatsisf>:
    e864:	97 fb       	bst	r25, 7
    e866:	3e f4       	brtc	.+14     	; 0xe876 <__floatsisf+0x12>
    e868:	90 95       	com	r25
    e86a:	80 95       	com	r24
    e86c:	70 95       	com	r23
    e86e:	61 95       	neg	r22
    e870:	7f 4f       	sbci	r23, 0xFF	; 255
    e872:	8f 4f       	sbci	r24, 0xFF	; 255
    e874:	9f 4f       	sbci	r25, 0xFF	; 255
    e876:	99 23       	and	r25, r25
    e878:	a9 f0       	breq	.+42     	; 0xe8a4 <__floatsisf+0x40>
    e87a:	f9 2f       	mov	r31, r25
    e87c:	96 e9       	ldi	r25, 0x96	; 150
    e87e:	bb 27       	eor	r27, r27
    e880:	93 95       	inc	r25
    e882:	f6 95       	lsr	r31
    e884:	87 95       	ror	r24
    e886:	77 95       	ror	r23
    e888:	67 95       	ror	r22
    e88a:	b7 95       	ror	r27
    e88c:	f1 11       	cpse	r31, r1
    e88e:	f8 cf       	rjmp	.-16     	; 0xe880 <__floatsisf+0x1c>
    e890:	fa f4       	brpl	.+62     	; 0xe8d0 <__floatsisf+0x6c>
    e892:	bb 0f       	add	r27, r27
    e894:	11 f4       	brne	.+4      	; 0xe89a <__floatsisf+0x36>
    e896:	60 ff       	sbrs	r22, 0
    e898:	1b c0       	rjmp	.+54     	; 0xe8d0 <__floatsisf+0x6c>
    e89a:	6f 5f       	subi	r22, 0xFF	; 255
    e89c:	7f 4f       	sbci	r23, 0xFF	; 255
    e89e:	8f 4f       	sbci	r24, 0xFF	; 255
    e8a0:	9f 4f       	sbci	r25, 0xFF	; 255
    e8a2:	16 c0       	rjmp	.+44     	; 0xe8d0 <__floatsisf+0x6c>
    e8a4:	88 23       	and	r24, r24
    e8a6:	11 f0       	breq	.+4      	; 0xe8ac <__floatsisf+0x48>
    e8a8:	96 e9       	ldi	r25, 0x96	; 150
    e8aa:	11 c0       	rjmp	.+34     	; 0xe8ce <__floatsisf+0x6a>
    e8ac:	77 23       	and	r23, r23
    e8ae:	21 f0       	breq	.+8      	; 0xe8b8 <__floatsisf+0x54>
    e8b0:	9e e8       	ldi	r25, 0x8E	; 142
    e8b2:	87 2f       	mov	r24, r23
    e8b4:	76 2f       	mov	r23, r22
    e8b6:	05 c0       	rjmp	.+10     	; 0xe8c2 <__floatsisf+0x5e>
    e8b8:	66 23       	and	r22, r22
    e8ba:	71 f0       	breq	.+28     	; 0xe8d8 <__floatsisf+0x74>
    e8bc:	96 e8       	ldi	r25, 0x86	; 134
    e8be:	86 2f       	mov	r24, r22
    e8c0:	70 e0       	ldi	r23, 0x00	; 0
    e8c2:	60 e0       	ldi	r22, 0x00	; 0
    e8c4:	2a f0       	brmi	.+10     	; 0xe8d0 <__floatsisf+0x6c>
    e8c6:	9a 95       	dec	r25
    e8c8:	66 0f       	add	r22, r22
    e8ca:	77 1f       	adc	r23, r23
    e8cc:	88 1f       	adc	r24, r24
    e8ce:	da f7       	brpl	.-10     	; 0xe8c6 <__floatsisf+0x62>
    e8d0:	88 0f       	add	r24, r24
    e8d2:	96 95       	lsr	r25
    e8d4:	87 95       	ror	r24
    e8d6:	97 f9       	bld	r25, 7
    e8d8:	08 95       	ret

0000e8da <__fp_inf>:
    e8da:	97 f9       	bld	r25, 7
    e8dc:	9f 67       	ori	r25, 0x7F	; 127
    e8de:	80 e8       	ldi	r24, 0x80	; 128
    e8e0:	70 e0       	ldi	r23, 0x00	; 0
    e8e2:	60 e0       	ldi	r22, 0x00	; 0
    e8e4:	08 95       	ret

0000e8e6 <__fp_nan>:
    e8e6:	9f ef       	ldi	r25, 0xFF	; 255
    e8e8:	80 ec       	ldi	r24, 0xC0	; 192
    e8ea:	08 95       	ret

0000e8ec <__fp_pscA>:
    e8ec:	00 24       	eor	r0, r0
    e8ee:	0a 94       	dec	r0
    e8f0:	16 16       	cp	r1, r22
    e8f2:	17 06       	cpc	r1, r23
    e8f4:	18 06       	cpc	r1, r24
    e8f6:	09 06       	cpc	r0, r25
    e8f8:	08 95       	ret

0000e8fa <__fp_pscB>:
    e8fa:	00 24       	eor	r0, r0
    e8fc:	0a 94       	dec	r0
    e8fe:	12 16       	cp	r1, r18
    e900:	13 06       	cpc	r1, r19
    e902:	14 06       	cpc	r1, r20
    e904:	05 06       	cpc	r0, r21
    e906:	08 95       	ret

0000e908 <__fp_round>:
    e908:	09 2e       	mov	r0, r25
    e90a:	03 94       	inc	r0
    e90c:	00 0c       	add	r0, r0
    e90e:	11 f4       	brne	.+4      	; 0xe914 <__fp_round+0xc>
    e910:	88 23       	and	r24, r24
    e912:	52 f0       	brmi	.+20     	; 0xe928 <__fp_round+0x20>
    e914:	bb 0f       	add	r27, r27
    e916:	40 f4       	brcc	.+16     	; 0xe928 <__fp_round+0x20>
    e918:	bf 2b       	or	r27, r31
    e91a:	11 f4       	brne	.+4      	; 0xe920 <__fp_round+0x18>
    e91c:	60 ff       	sbrs	r22, 0
    e91e:	04 c0       	rjmp	.+8      	; 0xe928 <__fp_round+0x20>
    e920:	6f 5f       	subi	r22, 0xFF	; 255
    e922:	7f 4f       	sbci	r23, 0xFF	; 255
    e924:	8f 4f       	sbci	r24, 0xFF	; 255
    e926:	9f 4f       	sbci	r25, 0xFF	; 255
    e928:	08 95       	ret

0000e92a <__fp_split3>:
    e92a:	57 fd       	sbrc	r21, 7
    e92c:	90 58       	subi	r25, 0x80	; 128
    e92e:	44 0f       	add	r20, r20
    e930:	55 1f       	adc	r21, r21
    e932:	59 f0       	breq	.+22     	; 0xe94a <__fp_splitA+0x10>
    e934:	5f 3f       	cpi	r21, 0xFF	; 255
    e936:	71 f0       	breq	.+28     	; 0xe954 <__fp_splitA+0x1a>
    e938:	47 95       	ror	r20

0000e93a <__fp_splitA>:
    e93a:	88 0f       	add	r24, r24
    e93c:	97 fb       	bst	r25, 7
    e93e:	99 1f       	adc	r25, r25
    e940:	61 f0       	breq	.+24     	; 0xe95a <__fp_splitA+0x20>
    e942:	9f 3f       	cpi	r25, 0xFF	; 255
    e944:	79 f0       	breq	.+30     	; 0xe964 <__fp_splitA+0x2a>
    e946:	87 95       	ror	r24
    e948:	08 95       	ret
    e94a:	12 16       	cp	r1, r18
    e94c:	13 06       	cpc	r1, r19
    e94e:	14 06       	cpc	r1, r20
    e950:	55 1f       	adc	r21, r21
    e952:	f2 cf       	rjmp	.-28     	; 0xe938 <__fp_split3+0xe>
    e954:	46 95       	lsr	r20
    e956:	f1 df       	rcall	.-30     	; 0xe93a <__fp_splitA>
    e958:	08 c0       	rjmp	.+16     	; 0xe96a <__fp_splitA+0x30>
    e95a:	16 16       	cp	r1, r22
    e95c:	17 06       	cpc	r1, r23
    e95e:	18 06       	cpc	r1, r24
    e960:	99 1f       	adc	r25, r25
    e962:	f1 cf       	rjmp	.-30     	; 0xe946 <__fp_splitA+0xc>
    e964:	86 95       	lsr	r24
    e966:	71 05       	cpc	r23, r1
    e968:	61 05       	cpc	r22, r1
    e96a:	08 94       	sec
    e96c:	08 95       	ret

0000e96e <__fp_zero>:
    e96e:	e8 94       	clt

0000e970 <__fp_szero>:
    e970:	bb 27       	eor	r27, r27
    e972:	66 27       	eor	r22, r22
    e974:	77 27       	eor	r23, r23
    e976:	cb 01       	movw	r24, r22
    e978:	97 f9       	bld	r25, 7
    e97a:	08 95       	ret

0000e97c <__mulsf3>:
    e97c:	0b d0       	rcall	.+22     	; 0xe994 <__mulsf3x>
    e97e:	c4 cf       	rjmp	.-120    	; 0xe908 <__fp_round>
    e980:	b5 df       	rcall	.-150    	; 0xe8ec <__fp_pscA>
    e982:	28 f0       	brcs	.+10     	; 0xe98e <__mulsf3+0x12>
    e984:	ba df       	rcall	.-140    	; 0xe8fa <__fp_pscB>
    e986:	18 f0       	brcs	.+6      	; 0xe98e <__mulsf3+0x12>
    e988:	95 23       	and	r25, r21
    e98a:	09 f0       	breq	.+2      	; 0xe98e <__mulsf3+0x12>
    e98c:	a6 cf       	rjmp	.-180    	; 0xe8da <__fp_inf>
    e98e:	ab cf       	rjmp	.-170    	; 0xe8e6 <__fp_nan>
    e990:	11 24       	eor	r1, r1
    e992:	ee cf       	rjmp	.-36     	; 0xe970 <__fp_szero>

0000e994 <__mulsf3x>:
    e994:	ca df       	rcall	.-108    	; 0xe92a <__fp_split3>
    e996:	a0 f3       	brcs	.-24     	; 0xe980 <__mulsf3+0x4>

0000e998 <__mulsf3_pse>:
    e998:	95 9f       	mul	r25, r21
    e99a:	d1 f3       	breq	.-12     	; 0xe990 <__mulsf3+0x14>
    e99c:	95 0f       	add	r25, r21
    e99e:	50 e0       	ldi	r21, 0x00	; 0
    e9a0:	55 1f       	adc	r21, r21
    e9a2:	62 9f       	mul	r22, r18
    e9a4:	f0 01       	movw	r30, r0
    e9a6:	72 9f       	mul	r23, r18
    e9a8:	bb 27       	eor	r27, r27
    e9aa:	f0 0d       	add	r31, r0
    e9ac:	b1 1d       	adc	r27, r1
    e9ae:	63 9f       	mul	r22, r19
    e9b0:	aa 27       	eor	r26, r26
    e9b2:	f0 0d       	add	r31, r0
    e9b4:	b1 1d       	adc	r27, r1
    e9b6:	aa 1f       	adc	r26, r26
    e9b8:	64 9f       	mul	r22, r20
    e9ba:	66 27       	eor	r22, r22
    e9bc:	b0 0d       	add	r27, r0
    e9be:	a1 1d       	adc	r26, r1
    e9c0:	66 1f       	adc	r22, r22
    e9c2:	82 9f       	mul	r24, r18
    e9c4:	22 27       	eor	r18, r18
    e9c6:	b0 0d       	add	r27, r0
    e9c8:	a1 1d       	adc	r26, r1
    e9ca:	62 1f       	adc	r22, r18
    e9cc:	73 9f       	mul	r23, r19
    e9ce:	b0 0d       	add	r27, r0
    e9d0:	a1 1d       	adc	r26, r1
    e9d2:	62 1f       	adc	r22, r18
    e9d4:	83 9f       	mul	r24, r19
    e9d6:	a0 0d       	add	r26, r0
    e9d8:	61 1d       	adc	r22, r1
    e9da:	22 1f       	adc	r18, r18
    e9dc:	74 9f       	mul	r23, r20
    e9de:	33 27       	eor	r19, r19
    e9e0:	a0 0d       	add	r26, r0
    e9e2:	61 1d       	adc	r22, r1
    e9e4:	23 1f       	adc	r18, r19
    e9e6:	84 9f       	mul	r24, r20
    e9e8:	60 0d       	add	r22, r0
    e9ea:	21 1d       	adc	r18, r1
    e9ec:	82 2f       	mov	r24, r18
    e9ee:	76 2f       	mov	r23, r22
    e9f0:	6a 2f       	mov	r22, r26
    e9f2:	11 24       	eor	r1, r1
    e9f4:	9f 57       	subi	r25, 0x7F	; 127
    e9f6:	50 40       	sbci	r21, 0x00	; 0
    e9f8:	8a f0       	brmi	.+34     	; 0xea1c <__mulsf3_pse+0x84>
    e9fa:	e1 f0       	breq	.+56     	; 0xea34 <__mulsf3_pse+0x9c>
    e9fc:	88 23       	and	r24, r24
    e9fe:	4a f0       	brmi	.+18     	; 0xea12 <__mulsf3_pse+0x7a>
    ea00:	ee 0f       	add	r30, r30
    ea02:	ff 1f       	adc	r31, r31
    ea04:	bb 1f       	adc	r27, r27
    ea06:	66 1f       	adc	r22, r22
    ea08:	77 1f       	adc	r23, r23
    ea0a:	88 1f       	adc	r24, r24
    ea0c:	91 50       	subi	r25, 0x01	; 1
    ea0e:	50 40       	sbci	r21, 0x00	; 0
    ea10:	a9 f7       	brne	.-22     	; 0xe9fc <__mulsf3_pse+0x64>
    ea12:	9e 3f       	cpi	r25, 0xFE	; 254
    ea14:	51 05       	cpc	r21, r1
    ea16:	70 f0       	brcs	.+28     	; 0xea34 <__mulsf3_pse+0x9c>
    ea18:	60 cf       	rjmp	.-320    	; 0xe8da <__fp_inf>
    ea1a:	aa cf       	rjmp	.-172    	; 0xe970 <__fp_szero>
    ea1c:	5f 3f       	cpi	r21, 0xFF	; 255
    ea1e:	ec f3       	brlt	.-6      	; 0xea1a <__mulsf3_pse+0x82>
    ea20:	98 3e       	cpi	r25, 0xE8	; 232
    ea22:	dc f3       	brlt	.-10     	; 0xea1a <__mulsf3_pse+0x82>
    ea24:	86 95       	lsr	r24
    ea26:	77 95       	ror	r23
    ea28:	67 95       	ror	r22
    ea2a:	b7 95       	ror	r27
    ea2c:	f7 95       	ror	r31
    ea2e:	e7 95       	ror	r30
    ea30:	9f 5f       	subi	r25, 0xFF	; 255
    ea32:	c1 f7       	brne	.-16     	; 0xea24 <__mulsf3_pse+0x8c>
    ea34:	fe 2b       	or	r31, r30
    ea36:	88 0f       	add	r24, r24
    ea38:	91 1d       	adc	r25, r1
    ea3a:	96 95       	lsr	r25
    ea3c:	87 95       	ror	r24
    ea3e:	97 f9       	bld	r25, 7
    ea40:	08 95       	ret

0000ea42 <strnlen_P>:
    ea42:	fc 01       	movw	r30, r24
    ea44:	05 90       	lpm	r0, Z+
    ea46:	61 50       	subi	r22, 0x01	; 1
    ea48:	70 40       	sbci	r23, 0x00	; 0
    ea4a:	01 10       	cpse	r0, r1
    ea4c:	d8 f7       	brcc	.-10     	; 0xea44 <strnlen_P+0x2>
    ea4e:	80 95       	com	r24
    ea50:	90 95       	com	r25
    ea52:	8e 0f       	add	r24, r30
    ea54:	9f 1f       	adc	r25, r31
    ea56:	08 95       	ret

0000ea58 <_exit>:
    ea58:	f8 94       	cli

0000ea5a <__stop_program>:
    ea5a:	ff cf       	rjmp	.-2      	; 0xea5a <__stop_program>
