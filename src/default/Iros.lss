
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e74c  0000e84c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000e860  2**5
                  CONTENTS, READONLY
  2 .text         0000e74c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b4f  00800510  00800510  0000e85c  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000ec60  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000f368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000f659  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000007a0  00000000  00000000  0000f670  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000aca0  00000000  00000000  0000fe10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000166c  00000000  00000000  0001aab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002906  00000000  00000000  0001c11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001844  00000000  00000000  0001ea24  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000020ec  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000094fa  00000000  00000000  00022354  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000938  00000000  00000000  0002b850  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 39 	jmp	0x728a	; 0x728a <__ctors_end>
       4:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
       8:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
       c:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      10:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      14:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      18:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      1c:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      20:	0c 94 29 3f 	jmp	0x7e52	; 0x7e52 <__vector_8>
      24:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      28:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      2c:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      30:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      34:	0c 94 f7 3c 	jmp	0x79ee	; 0x79ee <__vector_13>
      38:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__vector_14>
      3c:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      40:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      44:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      48:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      4c:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      50:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      54:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      58:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      5c:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      60:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      64:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      68:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      6c:	0c 94 ae 39 	jmp	0x735c	; 0x735c <__bad_interrupt>
      70:	ec 61       	ori	r30, 0x1C	; 28
      72:	f8 61       	ori	r31, 0x18	; 24
      74:	04 62       	ori	r16, 0x24	; 36
      76:	f0 61       	ori	r31, 0x10	; 16
      78:	f4 61       	ori	r31, 0x14	; 20
      7a:	fc 61       	ori	r31, 0x1C	; 28
      7c:	f0 61       	ori	r31, 0x10	; 16
      7e:	f0 61       	ori	r31, 0x10	; 16
      80:	00 62       	ori	r16, 0x20	; 32
      82:	94 65       	ori	r25, 0x54	; 84
      84:	a0 65       	ori	r26, 0x50	; 80
      86:	97 65       	ori	r25, 0x57	; 87
      88:	a0 65       	ori	r26, 0x50	; 80
      8a:	9a 65       	ori	r25, 0x5A	; 90
      8c:	a0 65       	ori	r26, 0x50	; 80
      8e:	9d 65       	ori	r25, 0x5D	; 93
      90:	a0 65       	ori	r26, 0x50	; 80
      92:	a3 65       	ori	r26, 0x53	; 83
      94:	a6 65       	ori	r26, 0x56	; 86

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	27 ff       	sbrs	r18, 7
      9c:	24 ff       	sbrs	r18, 4
      9e:	2a 90       	ld	r2, -Y
      a0:	2b 1c       	adc	r2, r11
      a2:	21 0c       	add	r2, r1
      a4:	22 fb       	bst	r18, 2
      a6:	85 00       	.word	0x0085	; ????
      a8:	84 00       	.word	0x0084	; ????
      aa:	89 03       	fmulsu	r16, r17
      ac:	88 8d       	ldd	r24, Y+24	; 0x18
      ae:	81 09       	sbc	r24, r1
      b0:	6f 02       	muls	r22, r31
      b2:	44 42       	sbci	r20, 0x24	; 36
      b4:	47 00       	.word	0x0047	; ????
      b6:	45 01       	movw	r8, r10
      b8:	b0 83       	st	Z, r27
      ba:	b3 00       	.word	0x00b3	; ????
      bc:	b1 01       	movw	r22, r2
      be:	25 11       	cpse	r18, r5
      c0:	8a 1c       	adc	r8, r10
      c2:	8b 03       	fmulsu	r16, r19

000000c4 <eeprom_format_table>:
      c4:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e4 <patchCommands>:
      e4:	03 40 06 40 62 40 66 40 6d 40 0e 40 13 40 18 40     .@.@b@f@m@.@.@.@
      f4:	75 40 1b 40 1e 40 21 40 5c 40 5f 40 85 40           u@.@.@!@\@_@.@

00000102 <fader>:
     102:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000010e <strChallenge>:
     10e:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     11e:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     12e:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     13e:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     14e:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     15e:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     16e:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     17e:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     18e:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     19e:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     1ae:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

000001be <strCongrats>:
     1be:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     1ce:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     1de:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     1ee:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     1fe:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     20e:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     21e:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     22e:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     23e:	49 4e 45 52 53 00 00 50 41 54 20 59 4f 55 52 53     INERS..PAT YOURS
     24e:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     25e:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     26e:	4f 4e 45 00 23 00                                   ONE.#.

00000274 <strIntro>:
     274:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     284:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     294:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     2a4:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     2b4:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     2c4:	45 43 41 55 53 45 20 54 48 45 59 20 53 55 43 4b     ECAUSE THEY SUCK
     2d4:	00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20 41     ..DESTROY THEM A
     2e4:	4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f 55     ND.TAKE BACK YOU
     2f4:	52 20 53 57 41 47 00 23 00                          R SWAG.#.

000002fd <default_scores>:
     2fd:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     30d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000031b <strTally>:
     31b:	54 41 4c 4c 59 20 00                                TALLY .

00000322 <strGameOver>:
     322:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000032c <strLevelBonus>:
     32c:	42 4f 4e 55 53 00                                   BONUS.

00000332 <strLevelClear>:
     332:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

0000033e <strPaused>:
     33e:	50 41 55 53 45 00                                   PAUSE.

00000344 <strExitGame>:
     344:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000350 <strMainMenu>:
     350:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

0000035c <strTime>:
     35c:	54 49 4d 45 20 00                                   TIME .

00000362 <strLives>:
     362:	4c 49 56 45 53 20 00                                LIVES .

00000369 <strShield>:
     369:	53 48 49 45 4c 44 20 00                             SHIELD .

00000371 <strScore>:
     371:	53 43 4f 52 45 20 00                                SCORE .

00000378 <strSelectHandle>:
	...

00000379 <strHighScores>:
     379:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000385 <str1Player>:
     385:	53 54 41 52 54 00                                   START.

0000038b <strCopyright>:
     38b:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     39b:	4f 4f 4b 53 00                                      OOKS.

000003a0 <observation_matrix>:
	...

00000528 <spacesong>:
     528:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     538:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     548:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     558:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     568:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     578:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     588:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     598:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     5a8:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     5b8:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     5c8:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     5d8:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     5e8:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     5f8:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     608:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     618:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     628:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     638:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     648:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     658:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     668:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     678:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     688:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     698:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     6a8:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     6b8:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     6c8:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     6d8:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     6e8:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     6f8:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     708:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     718:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     728:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     738:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     748:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     758:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     768:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     778:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     788:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     798:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     7a8:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     7b8:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     7c8:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     7d8:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     7e8:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     7f8:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     808:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     818:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     828:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     838:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     848:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     858:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     868:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     878:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     888:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     898:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     8a8:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     8b8:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     8c8:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     8d8:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     8e8:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     8f8:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     908:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     918:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     928:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     938:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     948:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     958:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     968:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     978:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     988:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     998:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     9a8:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     9b8:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     9c8:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     9d8:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     9e8:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     9f8:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     a08:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     a18:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     a28:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     a38:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     a48:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     a58:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     a68:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     a78:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     a88:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     a98:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     aa8:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     ab8:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     ac8:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     ad8:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     ae8:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     af8:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     b08:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     b18:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     b28:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     b38:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     b48:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     b58:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
     b68:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
     b78:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
     b88:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
     b98:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
     ba8:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
     bb8:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00000bc8 <planetsong>:
     bc8:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
     bd8:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
     be8:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
     bf8:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     c08:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
     c18:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
     c28:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     c38:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
     c48:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
     c58:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
     c68:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
     c78:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     c88:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
     c98:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
     ca8:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
     cb8:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
     cc8:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
     cd8:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     ce8:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     cf8:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     d08:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     d18:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     d28:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
     d38:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
     d48:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
     d58:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
     d68:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
     d78:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
     d88:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
     d98:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
     da8:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
     db8:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
     dc8:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
     dd8:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     de8:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
     df8:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
     e08:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     e18:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
     e28:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
     e38:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
     e48:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
     e58:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
     e68:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
     e78:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
     e88:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
     e98:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
     ea8:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
     eb8:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
     ec8:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
     ed8:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
     ee8:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
     ef8:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
     f08:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
     f18:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
     f28:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
     f38:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
     f48:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
     f58:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
     f68:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
     f78:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
     f88:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
     f98:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
     fa8:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
     fb8:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
     fc8:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     fd8:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
     fe8:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
     ff8:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    1008:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    1018:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    1028:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    1038:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1048:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1058:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1068:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1078:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1088:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1098:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    10a8:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    10b8:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    10c8:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    10d8:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    10e8:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    10f8:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1108:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1118:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1128:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1138:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1148:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1158:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1168:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1178:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1188:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1198:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    11a8:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    11b8:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    11c8:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    11d8:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    11e8:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    11f8:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1208:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1218:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1228:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1238:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1248:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1258:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1268:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1278:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1288:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1298:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    12a8:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    12b8:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    12c8:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    12d8:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    12e8:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    12f8:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1308:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1318:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1328:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1338:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1348:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1358:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1368:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1378:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1388:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1398:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    13a8:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    13b8:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    13c8:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    13d8:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    13e8:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    13f8:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1408:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1418:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1428:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1438:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1448:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1458:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1468:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1478:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1488:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1498:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    14a8:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    14b8:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    14c8:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    14d8:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    14e8:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    14f8:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1508:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1518:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1528:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1538:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1548:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1558:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1568:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1578:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1588:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1598:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    15a8:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    15b8:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    15c8:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    15d8:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    15e8:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    15f8:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1608:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1618:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1628:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1638:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1648:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1658:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1668:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1678:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1688:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1698:	2f 00                                               /.

0000169a <my_patches>:
    169a:	00 00 00 11 18 00 00 00 00 00 00 00 11 18 00 00     ................
    16aa:	00 00 00 00 00 00 18 00 00 00 00 00 00 00 aa 17     ................
	...
    16c2:	18 00 00 00 00 00 00 00 d9 16 00 00 00 00 00 00     ................
    16d2:	00 d9 16 00 00 00 00                                .......

000016d9 <explode>:
    16d9:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    16e9:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    16f9:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1709:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1719:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1729:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1739:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1749:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1759:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1769:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1779:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1789:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1799:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    17a9:	ff                                                  .

000017aa <pshoot>:
    17aa:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    17ba:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    17ca:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    17da:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    17ea:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    17fa:	00 01 05 00 00 ff                                   ......

00001800 <navigate>:
    1800:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1810:	ff                                                  .

00001811 <instrument>:
    1811:	00 02 04 00 00 dd 00 ff                             ........

00001819 <sprites_data>:
    1819:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1829:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1839:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1849:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1859:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1869:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1879:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1889:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1899:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    18a9:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    18b9:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    18c9:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    18d9:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    18e9:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    18f9:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1909:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1919:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1929:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1939:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1949:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1959:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1969:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1979:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1989:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1999:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    19a9:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    19b9:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    19c9:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19d9:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    19e9:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    19f9:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    1a09:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a19:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    1a29:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    1a39:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    1a49:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    1a59:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    1a69:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    1a79:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    1a89:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a99:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    1aa9:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    1ab9:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    1ac9:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    1ad9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ae9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1af9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b19:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    1b29:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1b39:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    1b49:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1b59:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1b69:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1b79:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1b89:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1b99:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1ba9:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1bb9:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1bc9:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    1bd9:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1be9:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1bf9:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1c09:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    1c19:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1c29:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1c39:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1c49:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1c59:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1c69:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1c79:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    1c89:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1c99:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1ca9:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1cb9:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1cc9:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    1cd9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ce9:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    1cf9:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    1d09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d19:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    1d29:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    1d39:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    1d49:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    1d59:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d69:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    1d79:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    1d89:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d99:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1da9:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    1db9:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    1dc9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1dd9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1de9:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    1df9:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    1e09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e19:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e29:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    1e39:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    1e49:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e59:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    1e69:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    1e79:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    1e89:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    1e99:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    1ea9:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1eb9:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1ec9:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    1ed9:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1ee9:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    1ef9:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    1f09:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1f19:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    1f29:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f39:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    1f49:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1f59:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1f69:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    1f79:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    1f89:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f99:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    1fa9:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    1fb9:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    1fc9:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1fd9:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1fe9:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    1ff9:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2009:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2019:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2029:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2039:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2049:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2059:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2069:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2079:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2089:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2099:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    20a9:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    20b9:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    20c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20d9:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    20e9:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    20f9:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2109:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2119:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    2129:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    2139:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2149:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2159:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2169:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2179:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2189:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2199:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    21a9:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    21b9:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    21c9:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    21d9:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    21e9:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    21f9:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2209:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2219:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2229:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2239:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2249:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2259:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2269:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2279:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2289:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2299:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    22a9:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    22b9:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    22c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22d9:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    22e9:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    22f9:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2309:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2319:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2329:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2339:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2349:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2359:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2369:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2379:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2389:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2399:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23a9:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    23b9:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    23c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d9:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    23e9:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    23f9:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2409:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2419:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2429:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2439:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2449:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2459:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2469:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2479:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2489:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2499:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24a9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24b9:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    24c9:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    24d9:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    24e9:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    24f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2509:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2519:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2529:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2539:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2549:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2559:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2569:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2579:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2589:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2599:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    25a9:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    25b9:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    25c9:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    25d9:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    25e9:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    25f9:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2609:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2619:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2629:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2639:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2649:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2659:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2669:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2679:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2689:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2699:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    26a9:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    26b9:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    26c9:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    26d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    26e9:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    26f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2709:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2719:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2729:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2739:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2749:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2759:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2769:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2779:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2789:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2799:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27a9:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    27b9:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    27c9:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    27d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27e9:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    27f9:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2809:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2819:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2829:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2839:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2849:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2859:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2869:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2879:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2889:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2899:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    28a9:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    28b9:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    28c9:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    28d9:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    28e9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2909:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2919:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2929:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2939:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2949:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2959:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2969:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2979:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2989:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2999:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    29a9:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    29b9:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    29c9:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    29d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29e9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2a09:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2a19:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2a29:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2a39:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2a49:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2a59:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2a69:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2a79:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2a89:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2a99:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2aa9:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2ab9:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2ac9:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2ad9:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2ae9:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2af9:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b09:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b19:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    2b29:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    2b39:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    2b49:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    2b59:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    2b69:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    2b79:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    2b89:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    2b99:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2ba9:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    2bb9:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2bc9:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    2bd9:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2be9:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    2bf9:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    2c09:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    2c19:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    2c29:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2c39:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    2c49:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    2c59:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2c69:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2c79:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2c89:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    2c99:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2ca9:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2cb9:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2cc9:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    2cd9:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    2ce9:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    2cf9:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2d09:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    2d19:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2d29:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2d39:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2d49:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2d59:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2d69:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2d79:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    2d89:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2d99:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2da9:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2db9:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2dc9:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    2dd9:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    2de9:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    2df9:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    2e09:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    2e19:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    2e29:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2e39:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2e49:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2e59:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2e69:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    2e79:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    2e89:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2e99:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2ea9:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2eb9:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    2ec9:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2ed9:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2ee9:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    2ef9:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    2f09:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f19:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    2f29:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    2f39:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    2f49:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    2f59:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2f69:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    2f79:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    2f89:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2f99:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    2fa9:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2fb9:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2fc9:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2fd9:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2fe9:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    2ff9:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    3009:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    3019:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    3029:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    3039:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    3049:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3059:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3069:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3079:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    3089:	fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3099:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    30a9:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    30b9:	fe fe 02 02 00 00 00 00 02 02 02 02 02 00 00 05     ................
    30c9:	00 00 00 00 05 02 00 00 00 00 00 00 05 05 00 00     ................
    30d9:	00 00 00 00 fe fe fe fe 00 07 07 27 07 fe fe fe     ...........'....
    30e9:	00 00 07 77 27 fe fe fe 00 00 00 27 07 fe fe fe     ...w'......'....
    30f9:	02 02 00 00 07 fe fe fe 05 05 05 05 05 00 02 fe     ................
    3109:	05 05 05 05 05 05 00 05 00 05 05 05 05 00 00 00     ................

00003119 <map_hazard_desert>:
    3119:	01 01 28                                            ..(

0000311c <map_hazard_city>:
    311c:	01 01 29                                            ..)

0000311f <map_hazard_jungle>:
    311f:	01 01 27                                            ..'

00003122 <map_hazard_fire>:
    3122:	01 01 26                                            ..&

00003125 <map_hazard_ice>:
    3125:	01 01 25                                            ..%

00003128 <map_enemy_boss_shot>:
    3128:	01 01 39                                            ..9

0000312b <map_enemy_boss_eye>:
    312b:	01 01 37                                            ..7

0000312e <map_enemy_boss_turret>:
    312e:	01 01 36                                            ..6

00003131 <map_enemy_drone>:
    3131:	01 01 35                                            ..5

00003134 <map_enemy_tank>:
    3134:	01 01 24                                            ..$

00003137 <map_enemy_ball>:
    3137:	01 01 14                                            ...

0000313a <map_enemy_spider_1>:
    313a:	01 01 34                                            ..4

0000313d <map_enemy_spider_0>:
    313d:	01 01 23                                            ..#

00003140 <map_enemy_xwing>:
    3140:	01 01 3a                                            ..:

00003143 <map_enemy_shark>:
    3143:	01 01 05                                            ...

00003146 <map_enemy_shot>:
    3146:	01 01 13                                            ...

00003149 <map_ahero_jump>:
    3149:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

00003151 <map_ahero_prone>:
    3151:	03 01 61 62 63                                      ..abc

00003156 <map_ahero_step_3>:
    3156:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

0000315e <map_ahero_step_2>:
    315e:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

00003166 <map_ahero_step_1>:
    3166:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

0000316e <map_ahero_step_0>:
    316e:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

00003176 <map_ahero_idle>:
    3176:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

0000317e <map_hero_rplasma_shot>:
    317e:	01 01 38                                            ..8

00003181 <map_hero_space_bomb>:
    3181:	01 01 18                                            ...

00003184 <map_hero_space_shot>:
    3184:	01 01 17                                            ...

00003187 <map_hero_ice_shot>:
    3187:	01 01 16                                            ...

0000318a <map_hero_ball_shot>:
    318a:	01 01 15                                            ...

0000318d <map_hero_gplasma_shot>:
    318d:	01 01 04                                            ...

00003190 <map_hero_ship_large_1>:
    3190:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

0000319a <map_hero_ship_large_0>:
    319a:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

000031a4 <map_hero_ship_1>:
    31a4:	03 01 3b 2b 2c                                      ..;+,

000031a9 <map_hero_ship_0>:
    31a9:	03 01 2a 2b 2c                                      ..*+,

000031ae <map_hero_prone>:
    31ae:	03 01 47 48 49                                      ..GHI

000031b3 <map_hero_jump>:
    31b3:	02 03 02 03 0f 12 21 22                             ......!"

000031bb <map_hero_step_3>:
    31bb:	02 03 02 03 0f 44 45 46                             .....DEF

000031c3 <map_hero_step_2>:
    31c3:	02 03 00 01 0c 11 1f 20                             ....... 

000031cb <map_hero_step_1>:
    31cb:	02 03 02 03 0f 10 1d 1e                             ........

000031d3 <map_hero_step_0>:
    31d3:	02 03 00 01 0c 0e 1b 1c                             ........

000031db <map_hero_idle>:
    31db:	02 03 00 01 0c 0d 19 1a                             ........

000031e3 <map_emerald_4>:
    31e3:	01 01 0a                                            ...

000031e6 <map_emerald_3>:
    31e6:	01 01 09                                            ...

000031e9 <map_emerald_2>:
    31e9:	01 01 08                                            ...

000031ec <map_emerald_1>:
    31ec:	01 01 07                                            ...

000031ef <map_emerald_0>:
    31ef:	01 01 06                                            ...

000031f2 <map_explosion_2>:
    31f2:	01 01 2f                                            ../

000031f5 <map_explosion_1>:
    31f5:	01 01 2e                                            ...

000031f8 <map_explosion_0>:
    31f8:	01 01 2d                                            ..-

000031fb <map_particle>:
    31fb:	01 01 30                                            ..0

000031fe <map_up_arrow>:
    31fe:	01 01 33                                            ..3

00003201 <map_down_arrow>:
    3201:	01 01 32                                            ..2

00003204 <map_right_arrow>:
    3204:	01 01 31                                            ..1

00003207 <map_none>:
    3207:	01 01 14                                            ...

0000320a <tiles_data>:
	...
    324a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    325a:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    326a:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    327a:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    328a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    329a:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    32aa:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    32ba:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    32ca:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    32da:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    32ea:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    32fa:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    330a:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    331a:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    332a:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    333a:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    334a:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    335a:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    336a:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    337a:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    338a:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    339a:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    33aa:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    33ba:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    33ca:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    33da:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    33ea:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    33fa:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    340a:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    341a:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    342a:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    343a:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    344a:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    345a:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    346a:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    347a:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    348a:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    349a:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    34aa:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    34ba:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    34ca:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    34da:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    34ea:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    34fa:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    350a:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    351a:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    352a:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    353a:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    354a:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    355a:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    356a:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    357a:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    358a:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    359a:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    35aa:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    35ba:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    35ca:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    35da:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    35ea:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    35fa:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    360a:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    361a:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    362a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    363a:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    364a:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    365a:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    366a:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    367a:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    368a:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    369a:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    36aa:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    36ba:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    36ca:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    36da:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    36ea:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    36fa:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    370a:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    371a:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    372a:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    373a:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    374a:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    375a:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    376a:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    377a:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    378a:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    379a:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    37aa:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    37ba:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    37ca:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    37da:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    37ea:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    37fa:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    380a:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    381a:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    382a:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    383a:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    384a:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    385a:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    386a:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    387a:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    388a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    389a:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    38aa:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    38ba:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    38ca:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    38da:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    38ea:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    38fa:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    390a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    391a:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    392a:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    393a:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    394a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    395a:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    398a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    399a:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    39aa:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    39ba:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    39ca:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    39da:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    39ea:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    39fa:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3a0a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3a1a:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3a2a:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3a3a:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3a62:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3a72:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3aa2:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3ab2:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3aca:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3ada:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3aea:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3afa:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3b0a:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3b1a:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3b2a:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3b3a:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3b4a:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3b5a:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    3b6a:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    3b7a:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    3b8a:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    3b9a:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    3baa:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    3bba:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    3bca:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    3bda:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    3bea:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    3bfa:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    3c0a:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    3c1a:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    3c2a:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    3c3a:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    3c4a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c5a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c6a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c7a:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3c96:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3ca6:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3cb6:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3cc6:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3cd6:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ce6:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cf6:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3d06:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3d16:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3d26:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3d36:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3d46:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3d56:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3d66:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3d76:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3d86:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3d96:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3da6:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3db6:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3dc6:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3dd6:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3de6:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3df6:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    3e06:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3e16:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3e26:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    3e36:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e46:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3e72:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e82:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3e92:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ea2:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3eb2:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ec2:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    3ed2:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    3ee2:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    3ef2:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    3f02:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    3f12:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3f22:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    3f32:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3f42:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    3f52:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    3f62:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    3f72:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    3f82:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    3f92:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    3fa2:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    3fb2:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    3fc2:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    3fd2:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3fe2:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3ff2:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    4002:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    4012:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    4022:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4032:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4042:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    4052:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    4062:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    4072:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    408a:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    409a:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    40aa:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    40ba:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    40ca:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    40da:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    40ea:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    4112:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4122:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    4132:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4152:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    4162:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    4172:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    4192:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    41a2:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    41b2:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    41d2:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    41e2:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    41f2:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4216:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4226:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4236:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4252:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4262:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4272:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4292:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    42a2:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    42b2:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    42d2:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    42e2:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    42f2:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4312:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4322:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4332:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4352:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4362:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4372:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    4392:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    43a2:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    43b2:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    43d2:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    43e2:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    43f2:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4412:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4422:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4432:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4452:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4462:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4472:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4492:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    44a2:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    44b2:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    44d2:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    44e2:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    44f2:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4512:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4522:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4532:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4552:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4562:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4572:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4592:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    45a2:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    45b2:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    45d6:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    45e6:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    45f6:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4612:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4622:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4632:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4652:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4662:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4672:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4692:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    46a2:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    46b2:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    46d2:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    46e2:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    46f2:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4712:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4722:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4732:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4752:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4762:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4772:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4792:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    47a2:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47b2:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    47d2:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    47e2:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    47f2:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4812:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4822:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4832:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4852:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4862:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4872:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4892:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48a2:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48b2:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    48d2:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    48e2:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    48f2:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4912:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4922:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4932:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4952:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4962:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4972:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4992:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    49a2:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    49b2:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    49d2:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    49e2:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    49f2:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4a0a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4a1a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4a2a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4a3a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4a4a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4a5a:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4a6a:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4a7a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4a8a:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    4a9a:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4aaa:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4aba:	af af af af af af af af af af af af af af af af     ................
    4aca:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4ada:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4aea:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4afa:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b0a:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4b1a:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4b2a:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4b3a:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4b4a:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4b5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b6a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b7a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b8a:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4b9a:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4baa:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4bba:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4bca:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    4bda:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    4bea:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4bfa:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4c0a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c1a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c2a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c3a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c4a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c6a:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4c7a:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4c8a:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c9a:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4caa:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4cba:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4cca:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4cda:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    4cea:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4cfa:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4d0a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4d1a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4d2a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4d3a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4d4a:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    4d5a:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4d6a:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4d7a:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4d8a:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4d9a:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4daa:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4dba:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4dca:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4dda:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4dea:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4dfa:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    4e0a:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    4e1a:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    4e2a:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    4e3a:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4e4a:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    4e5a:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4e6a:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4e7a:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4e8a:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    4e9a:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4eaa:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4eba:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4eca:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    4eda:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    4eea:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4efa:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4f0a:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    4f1a:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4f2a:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4f3a:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4f4a:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    4f5a:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    4f6a:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4f7a:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4f8a:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    4f9a:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    4faa:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    4fba:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    4fca:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    4fda:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    4fea:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    4ffa:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    500a:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    501a:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    502a:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    503a:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    504a:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    505a:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    506a:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    507a:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    508a:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    509a:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    50aa:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    50ba:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    50ca:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    50da:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    50ea:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    50fa:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    510a:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    511a:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    512a:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    513a:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    514a:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    515a:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    516a:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    517a:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    518a:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    519a:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    51aa:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    51ba:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    51ca:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    51da:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    51ea:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    51fa:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    520a:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    521a:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    522a:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    523a:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    524a:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    525a:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    526a:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    527a:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    528a:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    529a:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    52aa:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    52ba:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    52ca:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    52da:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    52ea:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    52fa:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    530a:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    531a:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    532a:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    533a:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    534a:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    535a:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    536a:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    537a:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    538a:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    539a:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    53aa:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    53ba:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    53ca:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    53da:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    53ea:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    53fa:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    540a:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    541a:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    542a:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    543a:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    544a:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    545a:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    546a:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    547a:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    548a:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    549a:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    54aa:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    54ba:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    54ca:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    54da:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    54ea:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    54fa:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    550a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    551a:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    552a:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    553a:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    554a:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    555a:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    556a:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    557a:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    558a:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    559a:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    55aa:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    55ba:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    55ca:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    55e2:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    55f2:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5602:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5612:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5622:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5632:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5642:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5652:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5662:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5672:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5682:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5692:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    56a2:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    56b2:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    56c2:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    56d2:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    56e2:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    56f2:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5702:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5712:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5722:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5732:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5742:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5752:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5762:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5772:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5782:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5792:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    57a2:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    57b2:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    57c2:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    57d2:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    57e2:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    57f2:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5802:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5812:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5822:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5832:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5842:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5852:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5862:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5872:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5882:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5892:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    58a2:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    58b2:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    58c2:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    58d2:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    58e2:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    58f2:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5902:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5912:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5922:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5932:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5942:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5952:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5962:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5972:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5982:	5c 5c 5c 5c 5c 5c 5c 5c 00 00 00 00 00 00 00 00     \\\\\\\\........
    5992:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    59a2:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    59b2:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    59c2:	00 00 00 00 00 00 00 a4                             ........

000059ca <map_font>:
    59ca:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    59da:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    59ea:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

000059f1 <map_atmosphere>:
    59f1:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5a01:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5a11:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5a21:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005a2b <map_dialog>:
    5a2b:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5a3b:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5a4b:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5a5b:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5a6b:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5a7b:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5a8b:	31 32                                               12

00005a8d <map_canvas>:
    5a8d:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    5a9d:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    5aad:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5ac9:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5ad9:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    5ae9:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5b05:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5b15:	32                                                  2

00005b16 <map_splash>:
    5b16:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    5b26:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    5b36:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    5b46:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    5b56:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

00005b63 <map_tile_none>:
    5b63:	01 01 00                                            ...

00005b66 <map_level_mega_tiles>:
    5b66:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5b76:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    5b86:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    5b96:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    5ba6:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    5bb6:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    5bc6:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    5bd6:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    5be6:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5bf6:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    5c06:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5c16:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5c26:	02 02 02 63 63 04 11 11 63 63 63 63 63 63 63 63     ...cc...cccccccc
    5c36:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5c46:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5c56:	02 02 63 63 63 11 04 63 63 63 63 63 63 63 63 63     ..ccc..ccccccccc
    5c66:	63 63 63 63 63 63 63 63 63 63 63 64 63 63 63 63     cccccccccccdcccc
    5c76:	65 66 67 63 63 63 63 63 63 63 63 63 63 63 02 02     efgccccccccccc..
    5c86:	02 02 63 04 04 04 04 02 04 04 04 04 63 63 63 63     ..c.........cccc
    5c96:	63 63 63 02 63 63 02 02 04 02 02 04 04 04 04 04     ccc.cc..........
    5ca6:	04 04 04 04 04 63 63 63 63 63 63 63 63 63 63 02     .....cccccccccc.
    5cb6:	02 02 02 02 04 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    5cc6:	63 63 63 63 63 02 63 63 02 02 04 02 63 04 04 04     ccccc.cc....c...
    5cd6:	04 02 04 04 04 04 04 63 63 63 63 63 63 63 63 63     .......ccccccccc
    5ce6:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 02     ccccccccccccccc.
    5cf6:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5d06:	63 63 63 63 02 63 63 63 02 63 63 63 63 63 63 63     cccc.ccc.ccccccc
    5d16:	63 63 02 63 63 63 63 04 63 63 63 63 63 02 63 63     cc.cccc.ccccc.cc
    5d26:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    5d36:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5d46:	02 02 02 02 63 11 11 11 04 63 63 63 63 63 63 63     ....c....ccccccc
    5d56:	63 63 63 63 63 63 63 63 63 02 02 02 02 02 04 11     ccccccccc.......
    5d66:	11 11 04 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5d76:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    5d86:	63 02 02 02 02 02 67 66 68 63 63 63 63 68 67 66     c.....gfhcccchgf
    5d96:	66 67 68 63 63 63 63 69 63 63 02 02 02 02 02 63     fghccccicc.....c
    5da6:	63 63 63 63 63 63 63 02 02 63 63 63 04 04 02 02     ccccccc..ccc....
    5db6:	02 04 04 04 04 04 04 04 63 63 63 63 63 02 02 02     ........ccccc...
    5dc6:	63 63 04 04 04 02 63 04 04 04 04 02 04 04 04 04     cc....c.........
    5dd6:	04 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    5de6:	63 63 63 63 02 02 02 02 02 04 63 63 63 63 63 63     cccc......cccccc
    5df6:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 18 18     cccccccccccccc..
    5e06:	18 18 18 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    5e16:	63 63 02 63 63 63 02 04 02 02 02 04 63 63 63 63     cc.ccc......cccc
    5e26:	63 63 63 63 63 63 63 63 63 63 63 02 63 63 63 63     ccccccccccc.cccc
    5e36:	04 02 02 02 02 63 63 63 63 02 63 63 63 02 04 63     .....cccc.ccc..c
    5e46:	63 02 04 04 63 02 04 04 04 02 04 04 04 04 02 02     c...c...........
    5e56:	02 02 02 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5e66:	04 04 04 04 04 04 04 02 02 02 02 04 04 04 04 04     ................
    5e76:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5e86:	18 18 18 18 18 04 04 04 04 04 04 04 04 04 04 04     ................
    5e96:	04 04 04 04 04 04 04 04 04 04 02 02 02 04 04 04     ................
    5ea6:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5eb6:	04 04 04 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    5ec6:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    5ed6:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    5ee6:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    5ef6:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    5f06:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5f16:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    5f26:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5f36:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5f46:	6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lll.llllllllllll
    5f56:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05     lllllllllllllll.
    5f66:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5f76:	06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c     .....lllllllll.l
    5f86:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    5f96:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    5fa6:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    5fb6:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fc6:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    5fd6:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    5fe6:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    5ff6:	6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    6006:	6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 13 13 13     llllll..lll.....
    6016:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6026:	6c 6c 6c 6c 13 13 13 13 13 6c 6c 6c 6c 6c 6c 6c     llll.....lllllll
    6036:	6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 06     llllllll..lll...
    6046:	06 06 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     .......lllllllll
    6056:	6c 6c 6c 6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 06     llllll.....llll.
    6066:	6c 6c 6c 06 05 6c 6c 06 05 05 06 06 05 05 05 05     lll..ll.........
    6076:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6086:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6096:	05 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    60a6:	05 05 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c     ......lllll.llll
    60b6:	05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 13 13 6c     ..lll...ll.....l
    60c6:	6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 6c 06     lll.lll..ll...l.
    60d6:	05 05 05 06 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c     ........lllll.ll
    60e6:	6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 05     ll..lll...ll....
    60f6:	05 6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05     .llll.lll..ll...
    6106:	6c 06 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c 06     l.........lllll.
    6116:	6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05     llll..lll...ll..
    6126:	05 06 06 72 73 74 74 73 74 73 74 74 73 74 73 74     ...rsttststtstst
    6136:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    6146:	73 74 73 74 74 73 74 73 74 74 73 74 73 74 74 73     ststtststtststts
    6156:	74 73 74 74 73 74 73 74 74 75 74 73 74 74 73 74     tsttststtutsttst
    6166:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 76 73     sttststtststtsvs
    6176:	74 74 73 78 78 78 78 78 78 78 78 78 78 78 78 78     ttsxxxxxxxxxxxxx
    6186:	78 78 78 78 78 78 78 74 73 74 74 73 79 7a 79 79     xxxxxxxtsttsyzyy
    6196:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c     z{|{{|yzyyz{|{{|
    61a6:	74 73 74 74 77 78 78 78 78 78 78 78 78 78 78 78     tsttwxxxxxxxxxxx
    61b6:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    61c6:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    61d6:	78 78 79 7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79     xxyzyyz{|{{|yzyy
    61e6:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 0d 0e 0e 0d 0e     z{|{{|yzyyz.....
    61f6:	78 78 12 78 78 78 78 78 78 78 78 78 78 78 78 78     xx.xxxxxxxxxxxxx
    6206:	78 78 78 78 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     xxxx{|{{|yzyyz{|
    6216:	7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78     {{|yzyyz{|{{|xxx
    6226:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6236:	78 07 07 07 07 07 79 7a 79 79 7a 7b 7c 7b 7b 7c     x.....yzyyz{|{{|
    6246:	79 7a 79 79 7a 7b 7c 7b 7b 7c 07 07 07 07 07 0d     yzyyz{|{{|......
    6256:	0e 0e 0d 0e 78 78 78 78 78 78 78 78 78 78 78 78     ....xxxxxxxxxxxx
    6266:	78 78 78 07 07 07 07 07 78 78 78 78 78 78 07 07     xxx.....xxxxxx..
    6276:	07 07 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    6286:	05 78 78 78 78 78 07 07 07 07 78 05 05 05 05 78     .xxxxx....x....x
    6296:	05 05 05 05 07 05 05 05 05 05 78 78 78 78 78 78     ..........xxxxxx
    62a6:	78 78 78 78 78 78 78 78 78 07 78 78 78 78 05 14     xxxxxxxxx.xxxx..
    62b6:	14 14 14 78 78 78 78 78 78 78 78 78 78 78 78 78     ...xxxxxxxxxxxxx
    62c6:	78 78 78 78 78 78 07 14 14 14 14 05 0d 0e 0e 0d     xxxxxx..........
    62d6:	0e 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     .xxxxxxxxxx.xxxx
    62e6:	05 14 14 14 14 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d     .....}}}}}}}}}}}
    62f6:	0f 81 7d 0f 85 85 85 85 85 85 85 85 85 85 7d 7d     ..}...........}}
    6306:	7d 7d 7d 7d 7d 7d 7e 7f 81 7d 0f 82 83 85 85 85     }}}}}}~..}......
    6316:	86 87 85 85 85 89 8a 7d 7d 7d 7d 7d 80 7d 7d 7d     .......}}}}}.}}}
    6326:	7d 84 81 7d 0f 81 88 85 85 85 85 84 85 85 85 85     }..}............
    6336:	7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 81 7d 0f 81 7d 85     }}}}}}}}}}.}..}.
    6346:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6356:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6366:	85 85 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    6376:	87 85 85 85 89 8a 85 85 85 86 87 88 85 85 85 85     ................
    6386:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 88     ................
    6396:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    63a6:	85 85 8b 85 85 85 8b 60 85 85 8b 60 60 85 85 85     .......`...``...
    63b6:	89 8a 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    63c6:	87 85 85 85 89 8a 84 85 85 85 85 88 85 85 85 85     ................
    63d6:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 85     ................
    63e6:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    63f6:	8c 8c 8c 85 85 8c 8c 8c 85 85 85 86 87 85 8d 85     ................
    6406:	89 8a 8d 8e 85 85 8f 90 90 90 90 90 90 90 90 90     ................
    6416:	90 88 85 85 85 85 84 85 85 85 85 85 85 85 85 85     ................
    6426:	85 85 85 85 85 85 85 85 85 85 85 8c 8c 8c 8c 85     ................
    6436:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c     ................
    6446:	8c 8c 8c 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6456:	85 85 85 85 90 90 90 85 85 90 90 90 85 09 09 09     ................
    6466:	09 85 8d 85 89 8a 8d 8e 85 85 8f 90 90 90 90 90     ................
    6476:	90 90 90 90 90 09 85 85 85 85 84 85 85 85 85 85     ................
    6486:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6496:	85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    64a6:	8c 8c 85 8c 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c     ................
    64b6:	8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09 09     ........```.....
    64c6:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    64d6:	90 90 90 90 09 09 09 09 09 85 85 85 85 85 85 8c     ................
    64e6:	8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09 09     .........``.....
    64f6:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    6506:	8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90 90     ..````..........
    6516:	85 85 90 90 90 85 85 90 90 90 85 85 90 90 90 09     ................
    6526:	09 09 09 09 85 09 09 09 09 85 85 8c 8c 8c 85 85     ................
    6536:	8c 8c 8c 85 85 60 60 60 09 09 09 09 09 09 90 90     .....```........
    6546:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6556:	90 09 09 09 09 09 85 09 09 09 09 85 8c 8c 85 85     ................
    6566:	85 8c 8c 90 85 85 60 60 90 85 09 09 09 09 09 09     ......``........
    6576:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 60     ...............`
    6586:	60 60 60 09 09 09 09 09 85 85 90 90 90 85 85 90     ```.............
    6596:	90 90 85 85 90 90 90 85 09 90 90 90 09 08 15 15     ................
    65a6:	15 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c     ................
    65b6:	85 85 09 60 60 15 15 08 09 09 90 90 90 90 90 90     ...``...........
    65c6:	90 90 90 90 90 90 90 90 90 90 90 90 09 90 09 09     ................
    65d6:	09 08 15 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    65e6:	85 85 85 85 85 85 09 15 15 15 15 08 90 90 90 90     ................
    65f6:	90 90 90 90 90 09 90 90 90 09 08 90 90 09 08 08     ................
    6606:	09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c 15     ................
    6616:	15 15 15 15 08 08 08 08 08 08 08 08 08 08 85 8c     ................
    6626:	8c 8c 8c 85 09 09 8c 8c 15 08 08 15 15 08 08 08     ................
    6636:	08 08 08 08 08 08 08 85 85 90 90 90 85 85 09 09     ................
    6646:	90 15 15 08 08 15 08 08 08 08 08 08 08 08 08 08     ................
    6656:	85 85 8c 8c 8c 85 85 09 09 09 15 15 08 08 08 08     ................
    6666:	08 08 08 08 08 08 08 08 08 90 90 90 90 90 90 90     ................
    6676:	90 90 90 09 90 90 90 90 08 09 90 90 90 08 08 09     ................
    6686:	09 09 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6696:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    66a6:	91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 93     ................
    66b6:	93 93 93 93 91 91 91 91 91 91 91 91 91 91 91 91     ................
    66c6:	91 91 91 92 92 92 92 92 93 93 94 93 93 93 93 93     ................
    66d6:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    66e6:	93 93 93 93 93 93 93 95 96 97 93 95 96 96 96 97     ................
    66f6:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6706:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6716:	93 93 93 93 93 94 93 93 93 93 93 93 93 93 93 94     ................
    6726:	93 93 93 95 96 97 93 95 96 96 96 97 93 93 93 93     ................
    6736:	93 93 98 99 9a 93 95 9b 10 9c 97 93 93 93 93 93     ................
    6746:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6756:	93 94 93 93 93 98 99 9a 93 95 9b 10 9c 97 93 93     ................
    6766:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    6776:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6786:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6796:	93 93 93 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    67a6:	93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93 93     ................
    67b6:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    67c6:	93 93 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 93 93 93 93     ................
    67d6:	93 93 93 93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a     ................
    67e6:	93 93 93 0a 0a 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a     ................
    67f6:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a 0a 0a 0a 0b 0b     ................
    6806:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6816:	0b 0b 9d 0a 0a 93 93 0b 0b 0b 0a 93 0b 0b 0b 0b     ................
    6826:	0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 93 93 93 0a 16     ................
    6836:	93 93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b     ................
    6846:	0a 0a 0a 0a 16 16 16 16 0a 93 93 93 93 93 93 93     ................
    6856:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    6866:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6876:	0a 0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93     ................
    6886:	93 93 93 93 93 93 93 93 93 93 17 17 17 17 17 93     ................
    6896:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    68a6:	93 93 93 0b 0b 17 17 17 93 93 93 93 93 93 93 93     ................
    68b6:	93 93 93 93 93 93 93 93 93 0a 0a 93 17 17 0b 0b     ................
    68c6:	17 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    68d6:	93 93 93 93 0a 17 17 17 17 0b 93 93 93 93 93 93     ................
    68e6:	93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 17     ................
    68f6:	17 17 17 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6906:	93 93 93 0a 93 93 93 17 0b 0a 0a 0a 0a 0a 0a 9d     ................
    6916:	0a 0a 16 16 16 0a 93 93 93 93 93 93 93 93 93 93     ................
    6926:	0a 0a 0a 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    6936:	93 93 93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 00 21     ...............!
	...
    6952:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6962:	00 00 00 00 22 00 21 00 00 00 00 00 00 00 00 00     ....".!.........
    6972:	00 00 00 21 00 00 00 00 00 00 00 22 00 00 00 21     ...!......."...!
	...
    698a:	00 00 00 22 00 22 00 00 00 00 00 00 00 00 00 00     ..."."..........
    699a:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 21     !..............!
    69aa:	19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21 00     ..............!.
    69ba:	00 00 00 00 00 00 00 19 19 19 19 19 19 19 19 19     ................
    69ca:	19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00 00 21     ...............!
    69da:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
    69ea:	21 00 00 00 00 00 00 00 00 19 19 9e 9e 9e 19 19     !...............
    69fa:	19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00     ................
    6a0a:	00 21 9e 9e 9e 9e 9e 19 19 19 19 19 1a 1a 1a 1a     .!..............
    6a1a:	1a 00 21 00 00 00 00 00 00 00 00 9e 9e 19 19 19     ..!.............
    6a2a:	19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00     ................
    6a3a:	00 00 00 21 19 19 19 19 19 19 19 19 19 19 1a 1a     ...!............
    6a4a:	1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00 00 00     ................
    6a5a:	00 00 00 00 22 00 00 00 21 00 00 00 00 00 00 1a     ...."...!.......
    6a6a:	1a 00 00 00 22 00 22 00 00 00 00 00 00 00 00 00     ....".".........
    6a7a:	00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00 1b 19     .!..............
    6a8a:	19 00 00 00 19 19 22 00 00 19 19 00 00 00 1a 1a     ......".........
    6a9a:	1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00 00 1b     ......".........
    6aaa:	1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00 00 1b     ...!............
    6aba:	1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    6aca:	1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00 00 00     ................
    6ada:	00 22 1a 1a 00 21 00 00 00 00 00 00 00 00 00 00     ."...!..........
    6aea:	00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00 21 00     ."."..........!.
	...
    6b06:	1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00 19     ................
    6b16:	19 00 00 00 19 19 00 22 00 00 21 00 00 00 00 00     ......."..!.....
    6b26:	00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00 19     .........!......
    6b36:	19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a 1a     ..........."....
    6b46:	1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00 00     ............!...
    6b56:	00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19 19     ................
    6b66:	19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a 1a     ................
    6b76:	1a 1a 1a 19 19 19 19 19 19 19 19 19 19              .............

00006b83 <map_level_space_final>:
    6b83:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6b93:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ba3:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 92 93 94 93     ................
    6bb3:	94 95 96 97 98 90 91 90 91 90 91 90 91 90 91 90     ................
    6bc3:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6bd3:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6be3:	91 90 91 90 91 99 9a 9b 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bf3:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c03:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c13:	8e 8f 8e 8f 8e 8f 8e 8f 8e 9c 9d 90 91 90 91 90     ................
    6c23:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6c33:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6c43:	91 90 91 90 91 90 91 90 91 90 91 9e 9f a0 8e 8f     ................
    6c53:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c63:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c73:	8e 8f 8e 8f 8e 8f 8e 8f a1 a2 a3 a2 a3 a2 a3 a2     ................
    6c83:	a4                                                  .

00006c84 <map_level_space>:
    6c84:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6c94:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ca4:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6cb4:	8e 8f 8e 8f 8e 90 91 90 91 90 91 90 91 90 91 90     ................
    6cc4:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6cd4:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ce4:	91 90 91 90 91 90 91 90 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6cf4:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d04:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d14:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 90 91 90 91 90     ................
    6d24:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6d34:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6d44:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 8e 8f     ................
    6d54:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d64:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d74:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6d84:	8e                                                  .

00006d85 <map_level_desert>:
    6d85:	33 05 72 72 72 72 72 72 72 72 72 72 72 72 72 72     3.rrrrrrrrrrrrrr
    6d95:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6da5:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6db5:	72 72 72 72 72 73 74 73 73 73 74 73 73 73 74 73     rrrrrstssstsssts
    6dc5:	73 73 74 73 73 73 73 73 73 73 74 73 73 73 74 73     sstssssssstsssts
    6dd5:	73 73 74 73 73 73 74 73 73 73 73 73 73 73 73 73     sstssstsssssssss
    6de5:	73 73 73 73 73 73 73 73 75 76 75 77 75 76 75 78     ssssssssuvuwuvux
    6df5:	75 79 75 77 75 79 75 78 75 7a 75 77 75 79 75 78     uyuwuyuxuzuwuyux
    6e05:	75 79 75 77 75 79 75 78 75 79 75 77 75 77 75 78     uyuwuyuxuyuwuwux
    6e15:	75 7a 75 77 75 77 75 78 75 78 75 75 75 75 76 75     uzuwuwuxuxuuuuvu
    6e25:	7b 75 75 75 75 75 76 7c 7d 75 75 75 75 75 76 75     {uuuuuv|}uuuuuvu
    6e35:	75 75 75 75 75 75 76 75 75 75 75 75 75 75 76 75     uuuuuuvuuuuuuuvu
    6e45:	79 75 75 75 75 75 76 75 76 75 75 75 75 75 7e 7e     yuuuuuvuvuuuuu~~
    6e55:	7e 7e 7f 7e 7f 7e 80 81 81 82 83 84 7e 7e 85 86     ~~.~.~......~~..
    6e65:	87 88 89 8a 8b 7e 7f 7e 7f 7e 8c 7e 7e 7e 80 81     .....~.~.~.~~~..
    6e75:	81 82 8d 7e 7e 7e 7e 8a 8b 7e 7e 7e 7e 7e 7e 7e     ...~~~~..~~~~~~~
    6e85:	7e                                                  ~

00006e86 <map_level_city>:
    6e86:	33 05 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d     3.MNOMPMNOMPMNOM
    6e96:	50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50     PMNOMPMNOMPMNOMP
    6ea6:	4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d     MNOMPMNOMPMNOMPM
    6eb6:	4e 4f 4d 50 4d 51 52 53 51 51 51 52 53 51 51 51     NOMPMQRSQQQRSQQQ
    6ec6:	52 53 51 51 51 52 53 51 51 51 52 53 51 51 51 52     RSQQQRSQQQRSQQQR
    6ed6:	53 51 51 51 52 53 51 51 51 52 53 51 51 51 52 53     SQQQRSQQQRSQQQRS
    6ee6:	51 51 51 52 53 51 51 51 54 55 56 51 51 54 55 56     QQQRSQQQTUVQQTUV
    6ef6:	51 51 54 55 56 51 51 54 55 56 51 51 54 55 56 51     QQTUVQQTUVQQTUVQ
    6f06:	51 54 55 56 51 51 54 55 56 51 51 54 55 56 51 51     QTUVQQTUVQQTUVQQ
    6f16:	54 55 56 51 51 54 55 56 51 51 54 57 58 59 5a 5b     TUVQQTUVQQTWXYZ[
    6f26:	57 5c 5d 5a 5b 57 58 59 5a 5b 57 5c 5d 5a 5b 57     W\]Z[WXYZ[W\]Z[W
    6f36:	58 59 5e 5b 57 58 59 5a 5b 57 58 59 5a 5b 57 58     XY^[WXYZ[WXYZ[WX
    6f46:	59 5a 5b 57 5c 5d 5a 5b 57 58 59 5a 5b 57 5f 60     YZ[W\]Z[WXYZ[W_`
    6f56:	61 62 63 64 65 66 67 68 69 6a 6b 62 63 64 65 66     abcdefghijkbcdef
    6f66:	67 63 5f 6c 6d 6e 6f 70 71 61 62 63 5f 6c 6d 6e     gc_lmnopqabc_lmn
    6f76:	6f 70 71 61 62 63 64 65 66 67 63 5f 60 61 62 63     opqabcdefgc_`abc
    6f86:	5f                                                  _

00006f87 <map_level_forest>:
    6f87:	33 05 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     3.;<=;<=;<=;<=;<
    6f97:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    6fa7:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    6fb7:	3c 3d 3b 3c 3d 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f     <=;<=>?@>?@>?@>?
    6fc7:	40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40     @>?@>?@>?@>?@>?@
    6fd7:	3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e     >?@>?@>?@>?@>?@>
    6fe7:	3f 40 3e 3f 40 3e 3f 40 41 42 41 41 42 41 41 42     ?@>?@>?@ABAABAAB
    6ff7:	41 41 42 41 41 42 41 41 42 43 41 42 41 41 42 41     AABAABAABCABAABA
    7007:	41 42 41 41 42 41 41 42 41 41 42 43 41 42 43 41     ABAABAABAABCABCA
    7017:	42 41 41 42 41 41 42 41 41 42 41 41 44 41 41 44     BAABAABAABAADAAD
    7027:	41 41 44 43 41 44 43 41 44 41 43 44 41 41 44 41     AADCADCADACDAADA
    7037:	41 44 41 41 44 41 41 44 41 41 44 41 41 44 41 41     ADAADAADAADAADAA
    7047:	44 41 41 44 41 41 44 43 41 44 41 41 44 41 45 46     DAADAADCADAADAEF
    7057:	45 45 46 45 47 46 45 47 46 45 47 46 45 45 46 48     EEFEGFEGFEGFEEFH
    7067:	49 46 48 49 46 48 49 46 4a 4b 46 4c 4b 46 47 45     IFHIFHIFJKFLKFGE
    7077:	46 4a 4b 46 4a 4b 46 4a 4b 46 45 45 46 45 45 46     FJKFJKFJKFEEFEEF
    7087:	45                                                  E

00007088 <map_level_fire>:
    7088:	33 05 23 23 23 23 23 23 23 23 23 23 23 23 23 23     3.##############
    7098:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    70a8:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    70b8:	23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24     #####$$$$$$$$$$$
    70c8:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    70d8:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    70e8:	24 24 24 24 24 24 24 24 25 26 25 25 25 25 26 25     $$$$$$$$%&%%%%&%
    70f8:	25 25 25 26 25 25 25 25 25 25 25 26 25 25 25 25     %%%&%%%%%%%&%%%%
    7108:	25 25 25 25 25 27 28 26 25 25 25 25 26 25 25 25     %%%%%'(&%%%%&%%%
    7118:	25 25 25 25 25 25 25 26 25 25 25 25 25 25 25 25     %%%%%%%&%%%%%%%%
    7128:	25 25 25 25 25 25 25 25 25 25 25 25 29 25 25 25     %%%%%%%%%%%%)%%%
    7138:	25 25 25 25 25 25 25 2a 2b 2c 2d 25 25 25 25 25     %%%%%%%*+,-%%%%%
    7148:	25 27 28 25 25 27 28 25 25 25 25 25 25 25 2e 2e     %'(%%'(%%%%%%%..
    7158:	2f 30 2f 30 2f 30 2f 30 31 2e 32 2e 2e 32 2e 2e     /0/0/0/01.2..2..
    7168:	2e 32 2e 2e 2e 2f 30 2f 30 33 34 34 34 35 36 30     .2.../0/03444560
    7178:	2f 30 31 37 2b 2c 38 39 2b 2c 3a 2e 2e 2e 2e 2e     /017+,89+,:.....
    7188:	2e                                                  .

00007189 <map_level_ice>:
    7189:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    7199:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    71a9:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    71b9:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    71c9:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    71d9:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    71e9:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    71f9:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    7209:	06 06 06 06 06 06 06 06 06 06 06 07 08 09 06 06     ................
    7219:	06 06 06 06 06 06 06 06 06 06 06 06 06 0a 06 06     ................
    7229:	06 06 06 0b 0c 0d 0e 06 06 06 0a 06 06 06 06 06     ................
    7239:	06 06 06 06 06 0f 06 10 06 10 06 11 12 13 06 06     ................
    7249:	06 14 06 06 0a 06 06 06 06 06 06 06 06 06 15 15     ................
    7259:	16 15 15 15 15 17 02 02 02 02 18 15 15 16 19 1a     ................
    7269:	1b 1a 1b 1a 1c 1d 1e 1e 1f 20 21 20 21 20 22 15     ......... ! ! ".
    7279:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    7289:	15                                                  .

0000728a <__ctors_end>:
    728a:	11 24       	eor	r1, r1
    728c:	1f be       	out	0x3f, r1	; 63
    728e:	cf ef       	ldi	r28, 0xFF	; 255
    7290:	d0 e1       	ldi	r29, 0x10	; 16
    7292:	de bf       	out	0x3e, r29	; 62
    7294:	cd bf       	out	0x3d, r28	; 61

00007296 <__do_copy_data>:
    7296:	15 e0       	ldi	r17, 0x05	; 5
    7298:	a0 e0       	ldi	r26, 0x00	; 0
    729a:	b5 e0       	ldi	r27, 0x05	; 5
    729c:	ec e4       	ldi	r30, 0x4C	; 76
    729e:	f7 ee       	ldi	r31, 0xE7	; 231
    72a0:	02 c0       	rjmp	.+4      	; 0x72a6 <__do_copy_data+0x10>
    72a2:	05 90       	lpm	r0, Z+
    72a4:	0d 92       	st	X+, r0
    72a6:	a0 31       	cpi	r26, 0x10	; 16
    72a8:	b1 07       	cpc	r27, r17
    72aa:	d9 f7       	brne	.-10     	; 0x72a2 <__do_copy_data+0xc>

000072ac <__do_clear_bss>:
    72ac:	10 e1       	ldi	r17, 0x10	; 16
    72ae:	a0 e1       	ldi	r26, 0x10	; 16
    72b0:	b5 e0       	ldi	r27, 0x05	; 5
    72b2:	01 c0       	rjmp	.+2      	; 0x72b6 <.do_clear_bss_start>

000072b4 <.do_clear_bss_loop>:
    72b4:	1d 92       	st	X+, r1

000072b6 <.do_clear_bss_start>:
    72b6:	af 35       	cpi	r26, 0x5F	; 95
    72b8:	b1 07       	cpc	r27, r17
    72ba:	e1 f7       	brne	.-8      	; 0x72b4 <.do_clear_bss_loop>

000072bc <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    72bc:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <wdt_randomize>
#endif

    MCUSR = 0;
    72c0:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    72c2:	88 e1       	ldi	r24, 0x18	; 24
    72c4:	0f b6       	in	r0, 0x3f	; 63
    72c6:	f8 94       	cli
    72c8:	80 93 60 00 	sts	0x0060, r24
    72cc:	10 92 60 00 	sts	0x0060, r1
    72d0:	0f be       	out	0x3f, r0	; 63

000072d2 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    72d2:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <isEepromFormatted>
    72d6:	81 11       	cpse	r24, r1
    72d8:	02 c0       	rjmp	.+4      	; 0x72de <Initialize+0xc>
    72da:	0e 94 9c 3f 	call	0x7f38	; 0x7f38 <FormatEeprom>

	cli();
    72de:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    72e0:	81 e0       	ldi	r24, 0x01	; 1
    72e2:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    72e6:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    72ea:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    72ee:	10 92 d0 0c 	sts	0x0CD0, r1
    72f2:	10 92 d6 0c 	sts	0x0CD6, r1
    72f6:	10 92 dc 0c 	sts	0x0CDC, r1
    72fa:	10 92 e2 0c 	sts	0x0CE2, r1
    72fe:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7302:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    7306:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    730a:	92 e1       	ldi	r25, 0x12	; 18
    730c:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7310:	90 ee       	ldi	r25, 0xE0	; 224
    7312:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    7316:	94 e1       	ldi	r25, 0x14	; 20
    7318:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    731c:	10 92 c2 0c 	sts	0x0CC2, r1
    7320:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    7324:	10 92 c6 0c 	sts	0x0CC6, r1
    7328:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    732c:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    7330:	0e 94 4e 4c 	call	0x989c	; 0x989c <InitializeVideoMode>
    7334:	86 e9       	ldi	r24, 0x96	; 150
    7336:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7338:	fc 01       	movw	r30, r24
    733a:	25 91       	lpm	r18, Z+
    733c:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    733e:	f9 01       	movw	r30, r18
    7340:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7342:	30 83       	st	Z, r19
    7344:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7346:	20 e0       	ldi	r18, 0x00	; 0
    7348:	84 3c       	cpi	r24, 0xC4	; 196
    734a:	92 07       	cpc	r25, r18
    734c:	a9 f7       	brne	.-22     	; 0x7338 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    734e:	78 94       	sei
	
	DisplayLogo();
    7350:	0e 94 4d 4c 	call	0x989a	; 0x989a <DisplayLogo>
    7354:	0e 94 3f 71 	call	0xe27e	; 0xe27e <main>
    7358:	0c 94 a4 73 	jmp	0xe748	; 0xe748 <_exit>

0000735c <__bad_interrupt>:
    735c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007360 <sub_video_mode3>:
    ;***************************************************

    sub_video_mode3:
        ;de-activate sync timer interrupts
        ;we will need to use the I flag to branch in a critical loop
        ldi ZL,(0<<OCIE1A)
    7360:	e0 e0       	ldi	r30, 0x00	; 0
        sts _SFR_MEM_ADDR(TIMSK1),ZL
    7362:	e0 93 6f 00 	sts	0x006F, r30

        ;wait cycles to align with next hsync
        WAIT r26,183+241
    7366:	ad e8       	ldi	r26, 0x8D	; 141
    7368:	aa 95       	dec	r26
    736a:	f1 f7       	brne	.-4      	; 0x7368 <sub_video_mode3+0x8>
    736c:	00 00       	nop

        ;Refresh ramtiles indexes in VRAM
        ;This has to be done because the main
        ;program may have altered the VRAM
        ;after vsync and the rendering interrupt.
        lds r16,userRamTilesCount
    736e:	00 91 f3 0c 	lds	r16, 0x0CF3

        ldi ZL,lo8(ram_tiles_restore);
    7372:	e0 e5       	ldi	r30, 0x50	; 80
        ldi ZH,hi8(ram_tiles_restore);
    7374:	fc e0       	ldi	r31, 0x0C	; 12
        ldi r18,3
    7376:	23 e0       	ldi	r18, 0x03	; 3
        mul r16,r18
    7378:	02 9f       	mul	r16, r18
        add ZL,r0
    737a:	e0 0d       	add	r30, r0
        adc ZH,r1
    737c:	f1 1d       	adc	r31, r1

        ldi YL,lo8(vram)
    737e:	c0 e0       	ldi	r28, 0x00	; 0
        ldi YH,hi8(vram)
    7380:	d1 e0       	ldi	r29, 0x01	; 1

        lds r18,free_tile_index
    7382:	20 91 85 0d 	lds	r18, 0x0D85
        ldi r19,MAX_RAMTILES        ;maximum possible ramtiles
    7386:	3c e3       	ldi	r19, 0x3C	; 60
        sub r19,r18                 ;sub free tile
    7388:	32 1b       	sub	r19, r18
        add r19,r16                 ;add user tiles
    738a:	30 0f       	add	r19, r16

        cp r18,r16
    738c:	20 17       	cp	r18, r16
        breq no_ramtiles
    738e:	51 f0       	breq	.+20     	; 0x73a4 <no_ramtiles>
        nop
    7390:	00 00       	nop
	...

00007394 <upd_loop>:
        nop
upd_loop:
        ld XL,Z+    ;load vram offset of ramtile
    7394:	a1 91       	ld	r26, Z+
        ld XH,Z+
    7396:	b1 91       	ld	r27, Z+

        ld r17,X    ;get latest VRAM tile that may have been modified my
    7398:	1c 91       	ld	r17, X
        st Z+,r17   ;the main program and store it in the restore buffer
    739a:	11 93       	st	Z+, r17
        st X,r16    ;write the ramtile index back to vram
    739c:	0c 93       	st	X, r16

        inc r16
    739e:	03 95       	inc	r16
        cp r16,r18
    73a0:	02 17       	cp	r16, r18
        brlo upd_loop ;loop is 14 cycles
    73a2:	c0 f3       	brcs	.-16     	; 0x7394 <upd_loop>

000073a4 <no_ramtiles>:

no_ramtiles:
        ;wait for remaining maximum possible ramtiles
1:
        ldi r17,3
    73a4:	13 e0       	ldi	r17, 0x03	; 3
        dec r17
    73a6:	1a 95       	dec	r17
        brne .-4
    73a8:	f1 f7       	brne	.-4      	; 0x73a6 <no_ramtiles+0x2>
        rjmp .
    73aa:	00 c0       	rjmp	.+0      	; 0x73ac <no_ramtiles+0x8>
        dec r19
    73ac:	3a 95       	dec	r19
        brne 1b
    73ae:	d1 f7       	brne	.-12     	; 0x73a4 <no_ramtiles>

        ;**********************
        ; setup scroll stuff
        ;**********************
    
        ldi YL,lo8(vram)
    73b0:	c0 e0       	ldi	r28, 0x00	; 0
        ldi YH,hi8(vram)
    73b2:	d1 e0       	ldi	r29, 0x01	; 1

        //add X scroll (coarse)
        lds r18,screen_scrollX ;ScreenScrollX
    73b4:	20 91 b2 0c 	lds	r18, 0x0CB2
        mov r25,r18
    73b8:	92 2f       	mov	r25, r18
        andi r18,0xf8   ;(x>>3) * 8 interleave
    73ba:	28 7f       	andi	r18, 0xF8	; 248
        add YL,r18
    73bc:	c2 0f       	add	r28, r18

        ;save Y wrap adress 
        movw r12,YL
    73be:	6e 01       	movw	r12, r28
    

        //add Y scroll (coarse)
        lds r16,screen_scrollY ;ScreenScrollY
    73c0:	00 91 b3 0c 	lds	r16, 0x0CB3
        mov r22,r16
    73c4:	60 2f       	mov	r22, r16
        lsr r16
    73c6:	06 95       	lsr	r16
        lsr r16
    73c8:	06 95       	lsr	r16
        lsr r16 ;/8
    73ca:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    73cc:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    73d0:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    73d2:	f1 2e       	mov	r15, r17

        mov r17,r16
    73d4:	10 2f       	mov	r17, r16
        lsr r16
    73d6:	06 95       	lsr	r16
        lsr r16
    73d8:	06 95       	lsr	r16
        lsr r16 ;/8
    73da:	06 95       	lsr	r16
        add YH,r16      ; (bits 6-7)
    73dc:	d0 0f       	add	r29, r16
        andi r17,0x7
    73de:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    73e0:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    73e2:	67 70       	andi	r22, 0x07	; 7
        ;lds r20,tile_table_lo
        ;lds r21,tile_table_hi
        ;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
        ;out _SFR_IO_ADDR(GPIOR2),r21

        lds r20,overlay_tile_table
    73e4:	40 91 b0 0c 	lds	r20, 0x0CB0
        lds r21,overlay_tile_table+1
    73e8:	50 91 b1 0c 	lds	r21, 0x0CB1
        lds r6,tile_table_lo
    73ec:	60 90 ac 0c 	lds	r6, 0x0CAC
        lds r7,tile_table_hi
    73f0:	70 90 ad 0c 	lds	r7, 0x0CAD
        out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    73f4:	6a bc       	out	0x2a, r6	; 42
        out _SFR_IO_ADDR(GPIOR2),r7
    73f6:	7b bc       	out	0x2b, r7	; 43


        ;save main section value    
        movw r10,YL
    73f8:	5e 01       	movw	r10, r28
        mov r23,r22
    73fa:	76 2f       	mov	r23, r22
        mov r24,r15
    73fc:	8f 2d       	mov	r24, r15
        mov r9,r25
    73fe:	99 2e       	mov	r9, r25

        ;load values for overlay if it's activated (overlay_height>0)
        
        ;compute beginning of overlay in vram 
        lds r16,screen_scrollHeight
    7400:	00 91 b4 0c 	lds	r16, 0x0CB4
        mov r18,r16
    7404:	20 2f       	mov	r18, r16
        lsr r16
    7406:	06 95       	lsr	r16
        lsr r16
    7408:	06 95       	lsr	r16
        lsr r16         ;hi8
    740a:	06 95       	lsr	r16
        inc r16         ;add 0x100 ram offset
    740c:	03 95       	inc	r16
        andi r18,7      ;lo8
    740e:	27 70       	andi	r18, 0x07	; 7
        
        lds r19,overlay_height  
    7410:	30 91 af 0c 	lds	r19, 0x0CAF
        cpi r19,0
    7414:	30 30       	cpi	r19, 0x00	; 0
        in r0, _SFR_IO_ADDR(SREG)
    7416:	0f b6       	in	r0, 0x3f	; 63

        sbrs r0,SREG_Z
    7418:	01 fe       	sbrs	r0, 1
        clr r22
    741a:	66 27       	eor	r22, r22
        sbrs r0,SREG_Z
    741c:	01 fe       	sbrs	r0, 1
        mov YL,r18      ;lo8(overlay_vram)
    741e:	c2 2f       	mov	r28, r18
        sbrs r0,SREG_Z
    7420:	01 fe       	sbrs	r0, 1
        mov YH,r16      ;hi8(overlay_vram)
    7422:	d0 2f       	mov	r29, r16
        sbrs r0,SREG_Z
    7424:	01 fe       	sbrs	r0, 1
        ser r24
    7426:	8f ef       	ldi	r24, 0xFF	; 255
        sbrs r0,SREG_Z
    7428:	01 fe       	sbrs	r0, 1
        clr r9
    742a:	99 24       	eor	r9, r9

        sbrs r0,SREG_Z
    742c:	01 fe       	sbrs	r0, 1
        out _SFR_IO_ADDR(GPIOR1),r20
    742e:	4a bd       	out	0x2a, r20	; 42
        sbrs r0,SREG_Z
    7430:	01 fe       	sbrs	r0, 1
        out _SFR_IO_ADDR(GPIOR2),r21
    7432:	5b bd       	out	0x2b, r21	; 43


        //ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
        //mov r8,r16
        lds r8,render_lines_count ;total scanlines to draw
    7434:	80 90 be 0c 	lds	r8, 0x0CBE

00007438 <next_tile_line>:
    ;r23 = Main section tile row
    ;r24 = Current Y tiles to draw before wrapping
    ;r25 = Main section scrollX

    next_tile_line:
        rcall hsync_pulse
    7438:	bf d3       	rcall	.+1918   	; 0x7bb8 <hsync_pulse>

        WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    743a:	24 e0       	ldi	r18, 0x04	; 4
    743c:	2a 95       	dec	r18
    743e:	f1 f7       	brne	.-4      	; 0x743c <next_tile_line+0x4>
    7440:	00 00       	nop
                
        call render_tile_line
    7442:	0e 94 62 3a 	call	0x74c4	; 0x74c4 <render_tile_line>

        WAIT r18,58
    7446:	23 e1       	ldi	r18, 0x13	; 19
    7448:	2a 95       	dec	r18
    744a:	f1 f7       	brne	.-4      	; 0x7448 <next_tile_line+0x10>
    744c:	00 00       	nop

        inc r22
    744e:	63 95       	inc	r22
        dec r8
    7450:	8a 94       	dec	r8
        breq text_frame_end
    7452:	09 f1       	breq	.+66     	; 0x7496 <text_frame_end>

        cpi r22,TILE_HEIGHT ;last char line? 1
    7454:	68 30       	cpi	r22, 0x08	; 8
        breq next_tile_row
    7456:	29 f0       	breq	.+10     	; 0x7462 <next_tile_row>

        ;wait to align with next_tile_row instructions (+1 cycle for the breq)
        WAIT r16,25
    7458:	08 e0       	ldi	r16, 0x08	; 8
    745a:	0a 95       	dec	r16
    745c:	f1 f7       	brne	.-4      	; 0x745a <next_tile_line+0x22>
    745e:	00 00       	nop
        rjmp next_tile_line
    7460:	eb cf       	rjmp	.-42     	; 0x7438 <next_tile_line>

00007462 <next_tile_row>:

    next_tile_row:

        clr r22     ;clear current char line
    7462:	66 27       	eor	r22, r22

        ;increment vram pointer next row
        mov r16,YL
    7464:	0c 2f       	mov	r16, r28
        andi r16,0x7
    7466:	07 70       	andi	r16, 0x07	; 7
        cpi r16,7
    7468:	07 30       	cpi	r16, 0x07	; 7
        breq 1f
    746a:	11 f0       	breq	.+4      	; 0x7470 <next_tile_row+0xe>
        inc YL
    746c:	c3 95       	inc	r28
        rjmp 2f
    746e:	02 c0       	rjmp	.+4      	; 0x7474 <next_tile_row+0x12>
    1:
        andi YL,0xf8
    7470:	c8 7f       	andi	r28, 0xF8	; 248
        inc YH
    7472:	d3 95       	inc	r29
    2:

        dec r24     ;wrap section?
    7474:	8a 95       	dec	r24
        brne .+2
    7476:	09 f4       	brne	.+2      	; 0x747a <next_tile_row+0x18>
        movw YL,r12
    7478:	e6 01       	movw	r28, r12

        dec r19
    747a:	3a 95       	dec	r19
        brne .+2
    747c:	09 f4       	brne	.+2      	; 0x7480 <next_tile_row+0x1e>
        mov r22,r23 ;section tile row
    747e:	67 2f       	mov	r22, r23
        brne .+2
    7480:	09 f4       	brne	.+2      	; 0x7484 <next_tile_row+0x22>
        movw YL,r10 ;vram adress
    7482:	e5 01       	movw	r28, r10
        brne .+2
    7484:	09 f4       	brne	.+2      	; 0x7488 <next_tile_row+0x26>
        mov r24,r15 ;Y wrapping
    7486:	8f 2d       	mov	r24, r15
        brne .+2
    7488:	09 f4       	brne	.+2      	; 0x748c <next_tile_row+0x2a>
        mov r9,r25  ;scrollX
    748a:	99 2e       	mov	r9, r25

        brne .+2
    748c:	09 f4       	brne	.+2      	; 0x7490 <next_tile_row+0x2e>
        out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    748e:	6a bc       	out	0x2a, r6	; 42
        brne .+2
    7490:	09 f4       	brne	.+2      	; 0x7494 <next_tile_row+0x32>
        out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7492:	7b bc       	out	0x2b, r7	; 43

        rjmp next_tile_line
    7494:	d1 cf       	rjmp	.-94     	; 0x7438 <next_tile_line>

00007496 <text_frame_end>:

    text_frame_end:

        WAIT r18,28
    7496:	29 e0       	ldi	r18, 0x09	; 9
    7498:	2a 95       	dec	r18
    749a:	f1 f7       	brne	.-4      	; 0x7498 <text_frame_end+0x2>
    749c:	00 00       	nop

        rcall hsync_pulse ;145
    749e:	8c d3       	rcall	.+1816   	; 0x7bb8 <hsync_pulse>
    
        clr r1
    74a0:	11 24       	eor	r1, r1
        call RestoreBackground
    74a2:	0e 94 00 4b 	call	0x9600	; 0x9600 <RestoreBackground>

        ;set vsync flag & flip field
        lds ZL,sync_flags
    74a6:	e0 91 b8 0c 	lds	r30, 0x0CB8
        ldi r20,SYNC_FLAG_FIELD
    74aa:	42 e0       	ldi	r20, 0x02	; 2
        ori ZL,SYNC_FLAG_VSYNC
    74ac:	e1 60       	ori	r30, 0x01	; 1
        eor ZL,r20
    74ae:	e4 27       	eor	r30, r20
        sts sync_flags,ZL
    74b0:	e0 93 b8 0c 	sts	0x0CB8, r30
    
        cli 
    74b4:	f8 94       	cli

        ;re-activate sync timer interrupts
        ldi ZL,(1<<OCIE1A)
    74b6:	e2 e0       	ldi	r30, 0x02	; 2
        sts _SFR_MEM_ADDR(TIMSK1),ZL
    74b8:	e0 93 6f 00 	sts	0x006F, r30
            
        ;clear any pending timer int
        ldi ZL,(1<<OCF1A)
    74bc:	e2 e0       	ldi	r30, 0x02	; 2
        sts _SFR_MEM_ADDR(TIFR1),ZL
    74be:	e0 93 36 00 	sts	0x0036, r30

        ret
    74c2:	08 95       	ret

000074c4 <render_tile_line>:
    ; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
    ; 
    ; cycles  = 1495
    ;*************************************************
    render_tile_line:
        push YL
    74c4:	cf 93       	push	r28
        push YH
    74c6:	df 93       	push	r29
        push r23
    74c8:	7f 93       	push	r23
        push r22
    74ca:	6f 93       	push	r22
        push r19
    74cc:	3f 93       	push	r19
        push r13
    74ce:	df 92       	push	r13
        push r12
    74d0:	cf 92       	push	r12
        push r9
    74d2:	9f 92       	push	r9
        push r7
    74d4:	7f 92       	push	r7
        push r6
    74d6:	6f 92       	push	r6
        ;--------------------------
        ; Rendering 
        ;---------------------------

        ;get tile row offset
        ldi r23,TILE_WIDTH ;tile width in pixels
    74d8:	78 e0       	ldi	r23, 0x08	; 8
        mul r22,r23
    74da:	67 9f       	mul	r22, r23

        ;compute base adresses for ROM and RAM tiles
        in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    74dc:	0a b5       	in	r16, 0x2a	; 42
        in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    74de:	1b b5       	in	r17, 0x2b	; 43
        subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    74e0:	00 50       	subi	r16, 0x00	; 0
        sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    74e2:	17 40       	sbci	r17, 0x07	; 7

        add r16,r0
    74e4:	00 0d       	add	r16, r0
        adc r17,r1
    74e6:	11 1d       	adc	r17, r1
        movw r2,r16         ;rom tiles adress
    74e8:	18 01       	movw	r2, r16

        ldi r16,lo8(ram_tiles)
    74ea:	00 e5       	ldi	r16, 0x50	; 80
        ldi r17,hi8(ram_tiles)
    74ec:	15 e0       	ldi	r17, 0x05	; 5
        add r16,r0
    74ee:	00 0d       	add	r16, r0
        adc r17,r1
    74f0:	11 1d       	adc	r17, r1
        movw r4,r16         ;ram tiles adress
    74f2:	28 01       	movw	r4, r16

        ldi r19,TILE_HEIGHT*TILE_WIDTH
    74f4:	30 e4       	ldi	r19, 0x40	; 64
        ldi r17,SCREEN_TILES_H-1    ;main loop counter
    74f6:	1b e1       	ldi	r17, 0x1B	; 27


        ;handle fine scroll offset
        ;lds r22,screenSections+scrollX
        mov r22,r9
    74f8:	69 2d       	mov	r22, r9
        andi r22,0x7        
    74fa:	67 70       	andi	r22, 0x07	; 7
        mov r14,r22 ;pixels to draw on last tile    
    74fc:	e6 2e       	mov	r14, r22
        cli         ;no trailing pixel to draw (hack, see end: )
    74fe:	f8 94       	cli
        breq .+2
    7500:	09 f0       	breq	.+2      	; 0x7504 <render_tile_line+0x40>
        sei         ;some trailing pixel to draw (hack, see end: )
    7502:	78 94       	sei

        ;get first pixel of last tile in ROM (for ROM tiles fine scroll)
        ;and adress of next pixel
        movw ZL,YL
    7504:	fe 01       	movw	r30, r28
        subi ZL,-(SCREEN_TILES_H*8)
    7506:	e0 52       	subi	r30, 0x20	; 32
        ld r18,Z
    7508:	20 81       	ld	r18, Z
        mul r18,r19     ;tile*width*height
    750a:	23 9f       	mul	r18, r19
        add r0,r2    ;add ROM title table address +row offset
    750c:	02 0c       	add	r0, r2
        adc r1,r3
    750e:	13 1c       	adc	r1, r3
        movw ZL,r0
    7510:	f0 01       	movw	r30, r0
        lpm r9,Z+   ;hold first pixel until end 
    7512:	95 90       	lpm	r9, Z+
        movw r12,ZL ;hold second pixel adress until end
    7514:	6f 01       	movw	r12, r30


        ;compute first tile adress
        ld r18,Y        ;load next tile # from VRAM
    7516:	28 81       	ld	r18, Y
        subi YL,-8
    7518:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT
    751a:	2c 31       	cpi	r18, 0x1C	; 28
        in r16,_SFR_IO_ADDR(SREG)   ;save the carry flag for later  
    751c:	0f b7       	in	r16, 0x3f	; 63
        mul r18,r19     ;tile*width*height
    751e:	23 9f       	mul	r18, r19
        movw r20,r2     ;rom tiles  
    7520:	a1 01       	movw	r20, r2
        sbrc r16,SREG_C
    7522:	00 fd       	sbrc	r16, 0
        movw r20,r4     ;ram tiles
    7524:	a2 01       	movw	r20, r4
        add r0,r20    ;add title table address +row offset
    7526:	04 0e       	add	r0, r20
        adc r1,r21
    7528:	15 1e       	adc	r1, r21
        movw XL,r0
    752a:	d0 01       	movw	r26, r0


        ;compute second tile adress
        ld r18,Y        ;load next tile # from VRAM
    752c:	28 81       	ld	r18, Y
        subi YL,-8
    752e:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT
    7530:	2c 31       	cpi	r18, 0x1C	; 28
        in r7,_SFR_IO_ADDR(SREG)    ;save the carry flag for later
    7532:	7f b6       	in	r7, 0x3f	; 63
        bst r7,SREG_C
    7534:	70 fa       	bst	r7, 0
        mul r18,r19     ;tile*width*height
    7536:	23 9f       	mul	r18, r19
        movw r20,r2     ;rom tiles
    7538:	a1 01       	movw	r20, r2
        brtc .+2
    753a:	0e f4       	brtc	.+2      	; 0x753e <render_tile_line+0x7a>
        movw r20,r4     ;ram tiles
    753c:	a2 01       	movw	r20, r4
        add r0,r20      ;add title table address +row offset
    753e:	04 0e       	add	r0, r20
        adc r1,r21
    7540:	15 1e       	adc	r1, r21
        movw ZL,r0
    7542:	f0 01       	movw	r30, r0
        movw r6,ZL      ;push Z
    7544:	3f 01       	movw	r6, r30

00007546 <do_fine_scroll>:


    do_fine_scroll:
        ;output 1st tile with fine scroll offset 
        clr r0
    7546:	00 24       	eor	r0, r0
        add XL,r22  ;add fine offset
    7548:	a6 0f       	add	r26, r22
        adc XH,r0
    754a:	b0 1d       	adc	r27, r0

        ;compute jump offset
        ldi r23,3
    754c:	73 e0       	ldi	r23, 0x03	; 3
        mul r22,r23 ;3 instructions
    754e:	67 9f       	mul	r22, r23
    
        sbrs r16,SREG_C
    7550:	00 ff       	sbrs	r16, 0
        rjmp rom_fine_scroll
    7552:	22 c0       	rjmp	.+68     	; 0x7598 <rom_fine_scroll>

00007554 <ram_fine_scroll>:

    /***FINE SCROLL RAM LOOP***/
    ram_fine_scroll:
        rjmp .
    7554:	00 c0       	rjmp	.+0      	; 0x7556 <ram_fine_scroll+0x2>
        ldi r22,lo8(pm(ram_fine_scroll_loop))
    7556:	62 eb       	ldi	r22, 0xB2	; 178
        ldi r23,hi8(pm(ram_fine_scroll_loop))
    7558:	7a e3       	ldi	r23, 0x3A	; 58
        add r22,r0
    755a:	60 0d       	add	r22, r0
        adc r23,r1
    755c:	71 1d       	adc	r23, r1
        push r22
    755e:	6f 93       	push	r22
        push r23    
    7560:	7f 93       	push	r23
        ret ;jump into ram_fine_scroll_loop
    7562:	08 95       	ret

00007564 <ram_fine_scroll_loop>:
    ram_fine_scroll_loop:
        .rept 8
            ld r16,X+
            lpm
            out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        .endr
    7564:	0d 91       	ld	r16, X+
    7566:	c8 95       	lpm
    7568:	08 b9       	out	0x08, r16	; 8
    756a:	0d 91       	ld	r16, X+
    756c:	c8 95       	lpm
    756e:	08 b9       	out	0x08, r16	; 8
    7570:	0d 91       	ld	r16, X+
    7572:	c8 95       	lpm
    7574:	08 b9       	out	0x08, r16	; 8
    7576:	0d 91       	ld	r16, X+
    7578:	c8 95       	lpm
    757a:	08 b9       	out	0x08, r16	; 8
    757c:	0d 91       	ld	r16, X+
    757e:	c8 95       	lpm
    7580:	08 b9       	out	0x08, r16	; 8
    7582:	0d 91       	ld	r16, X+
    7584:	c8 95       	lpm
    7586:	08 b9       	out	0x08, r16	; 8
    7588:	0d 91       	ld	r16, X+
    758a:	c8 95       	lpm
    758c:	08 b9       	out	0x08, r16	; 8
    758e:	0d 91       	ld	r16, X+
    7590:	c8 95       	lpm
    7592:	08 b9       	out	0x08, r16	; 8

        ;branch to tile #2
        brtc romloop
    7594:	1e f5       	brtc	.+70     	; 0x75dc <romloop>
        rjmp ramloop
    7596:	40 c0       	rjmp	.+128    	; 0x7618 <ramloop>

00007598 <rom_fine_scroll>:

    /***FINE SCROLL ROM LOOP***/
    rom_fine_scroll:
        movw ZL,XL
    7598:	fd 01       	movw	r30, r26
        ldi r22,lo8(pm(rom_fine_scroll_loop))   
    759a:	64 ed       	ldi	r22, 0xD4	; 212
        ldi r23,hi8(pm(rom_fine_scroll_loop))
    759c:	7a e3       	ldi	r23, 0x3A	; 58
        add r22,r0
    759e:	60 0d       	add	r22, r0
        adc r23,r1
    75a0:	71 1d       	adc	r23, r1
        push r22
    75a2:	6f 93       	push	r22
        push r23    
    75a4:	7f 93       	push	r23
        ret
    75a6:	08 95       	ret

000075a8 <rom_fine_scroll_loop>:
    rom_fine_scroll_loop:
        .rept 8
            lpm r16,Z+
            rjmp .
            out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        .endr 
    75a8:	05 91       	lpm	r16, Z+
    75aa:	00 c0       	rjmp	.+0      	; 0x75ac <rom_fine_scroll_loop+0x4>
    75ac:	08 b9       	out	0x08, r16	; 8
    75ae:	05 91       	lpm	r16, Z+
    75b0:	00 c0       	rjmp	.+0      	; 0x75b2 <rom_fine_scroll_loop+0xa>
    75b2:	08 b9       	out	0x08, r16	; 8
    75b4:	05 91       	lpm	r16, Z+
    75b6:	00 c0       	rjmp	.+0      	; 0x75b8 <rom_fine_scroll_loop+0x10>
    75b8:	08 b9       	out	0x08, r16	; 8
    75ba:	05 91       	lpm	r16, Z+
    75bc:	00 c0       	rjmp	.+0      	; 0x75be <rom_fine_scroll_loop+0x16>
    75be:	08 b9       	out	0x08, r16	; 8
    75c0:	05 91       	lpm	r16, Z+
    75c2:	00 c0       	rjmp	.+0      	; 0x75c4 <rom_fine_scroll_loop+0x1c>
    75c4:	08 b9       	out	0x08, r16	; 8
    75c6:	05 91       	lpm	r16, Z+
    75c8:	00 c0       	rjmp	.+0      	; 0x75ca <rom_fine_scroll_loop+0x22>
    75ca:	08 b9       	out	0x08, r16	; 8
    75cc:	05 91       	lpm	r16, Z+
    75ce:	00 c0       	rjmp	.+0      	; 0x75d0 <rom_fine_scroll_loop+0x28>
    75d0:	08 b9       	out	0x08, r16	; 8
    75d2:	05 91       	lpm	r16, Z+
    75d4:	00 c0       	rjmp	.+0      	; 0x75d6 <rom_fine_scroll_loop+0x2e>
    75d6:	08 b9       	out	0x08, r16	; 8
    
        movw ZL,r6      ;restore Z for tile #2
    75d8:	f3 01       	movw	r30, r6

        ;branch to tile #2
        brts ramloop
    75da:	f6 f0       	brts	.+60     	; 0x7618 <ramloop>

000075dc <romloop>:

    
    romloop:
        lpm r16,Z+
    75dc:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    75de:	08 b9       	out	0x08, r16	; 8
        ld r18,Y     ;load next tile # from VRAM
    75e0:	28 81       	ld	r18, Y

        lpm r16,Z+
    75e2:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    75e4:	08 b9       	out	0x08, r16	; 8
        mul r18,r19 ;tile*width*height
    75e6:	23 9f       	mul	r18, r19

        lpm r16,Z+
    75e8:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    75ea:	08 b9       	out	0x08, r16	; 8
        subi YL,-8
    75ec:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT     ;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    75ee:	2c 31       	cpi	r18, 0x1C	; 28
        
        lpm r16,Z+
    75f0:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    75f2:	08 b9       	out	0x08, r16	; 8
        brsh .+2        ;skip if next tile is in ROM    
    75f4:	08 f4       	brcc	.+2      	; 0x75f8 <romloop+0x1c>
        movw r20,r4     ;load RAM title table address +row offset   
    75f6:	a2 01       	movw	r20, r4
   
        lpm r16,Z+
    75f8:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    75fa:	08 b9       	out	0x08, r16	; 8
        add r0,r20      ;add tile table address +row offset lsb
    75fc:	04 0e       	add	r0, r20
        adc r1,r21      ;add title table address +row offset msb
    75fe:	15 1e       	adc	r1, r21

        lpm r16,Z+
    7600:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7602:	08 b9       	out	0x08, r16	; 8
        cpi r18,RAM_TILES_COUNT 
    7604:	2c 31       	cpi	r18, 0x1C	; 28
        dec r17         ;decrement tiles to draw on line (does not affect carry)
    7606:	1a 95       	dec	r17
   
        lpm r16,Z+
    7608:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    760a:	08 b9       	out	0x08, r16	; 8
        lpm r16,Z+
    760c:	05 91       	lpm	r16, Z+

        breq end    
    760e:	39 f1       	breq	.+78     	; 0x765e <end>
        movw ZL,r0      ;copy next tile adress
    7610:	f0 01       	movw	r30, r0

        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7612:	08 b9       	out	0x08, r16	; 8
        brcc romloop
    7614:	18 f7       	brcc	.-58     	; 0x75dc <romloop>
    
        rjmp .
    7616:	00 c0       	rjmp	.+0      	; 0x7618 <ramloop>

00007618 <ramloop>:

    ramloop:

        ld r16,Z+
    7618:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    761a:	08 b9       	out	0x08, r16	; 8
        ld r18,Y     ;load next tile # from VRAM
    761c:	28 81       	ld	r18, Y

        ld r16,Z+ 
    761e:	01 91       	ld	r16, Z+
        subi YL,-8          
    7620:	c8 5f       	subi	r28, 0xF8	; 248
        out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 2
    7622:	08 b9       	out	0x08, r16	; 8
        mul r18,r19 ;tile*width*height
    7624:	23 9f       	mul	r18, r19

        ld r16,Z+
    7626:	01 91       	ld	r16, Z+
        nop
    7628:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    762a:	08 b9       	out	0x08, r16	; 8
        cpi r18,RAM_TILES_COUNT
    762c:	2c 31       	cpi	r18, 0x1C	; 28
        rjmp .
    762e:	00 c0       	rjmp	.+0      	; 0x7630 <ramloop+0x18>
   
        ld r16,Z+
    7630:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7632:	08 b9       	out	0x08, r16	; 8
        brcs .+2 
    7634:	08 f0       	brcs	.+2      	; 0x7638 <ramloop+0x20>
        movw r20,r2     ;ROM title table address +row offset    
    7636:	a1 01       	movw	r20, r2
   
   
        ld r16,Z+
    7638:	01 91       	ld	r16, Z+
        add r0,r20    ;add title table address +row offset
    763a:	04 0e       	add	r0, r20
        out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    763c:	08 b9       	out	0x08, r16	; 8
        adc r1,r21
    763e:	15 1e       	adc	r1, r21
        rjmp .
    7640:	00 c0       	rjmp	.+0      	; 0x7642 <ramloop+0x2a>
    
        ld r16,Z+       
    7642:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7644:	08 b9       	out	0x08, r16	; 8
        ld r7,Z+
    7646:	71 90       	ld	r7, Z+
        ld r16,Z+   
    7648:	01 91       	ld	r16, Z+
    
        movw ZL,r0
    764a:	f0 01       	movw	r30, r0
        out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    764c:	78 b8       	out	0x08, r7	; 8
        nop
    764e:	00 00       	nop
        cpi r18,RAM_TILES_COUNT 
    7650:	2c 31       	cpi	r18, 0x1C	; 28
        dec r17
    7652:	1a 95       	dec	r17
        breq end
    7654:	21 f0       	breq	.+8      	; 0x765e <end>
    
        nop
    7656:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7658:	08 b9       	out	0x08, r16	; 8
    
        brcc romloop
    765a:	00 f6       	brcc	.-128    	; 0x75dc <romloop>
        rjmp ramloop
    765c:	dd cf       	rjmp	.-70     	; 0x7618 <ramloop>

0000765e <end>:
    
    end:
        out _SFR_IO_ADDR(DATA_PORT),r16     ;pixel 8
    765e:	08 b9       	out	0x08, r16	; 8
        brid end_fine_scroll                ;hack: interrupt flag=0 => no fine offset pixel to draw
    7660:	27 f5       	brid	.+72     	; 0x76aa <end_fine_scroll>
        brcc end_rom_fine_scroll_loop
    7662:	30 f4       	brcc	.+12     	; 0x7670 <end_rom_fine_scroll_loop>

    /***END RAM LOOP***/
        movw ZL,r0
    7664:	f0 01       	movw	r30, r0

00007666 <end_ram_fine_scroll_loop>:
    end_ram_fine_scroll_loop:
        ld r16,Z+
    7666:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7668:	08 b9       	out	0x08, r16	; 8
        dec r14
    766a:	ea 94       	dec	r14
        brne end_ram_fine_scroll_loop
    766c:	e1 f7       	brne	.-8      	; 0x7666 <end_ram_fine_scroll_loop>
        rjmp end_fine_scroll_ram
    766e:	1f c0       	rjmp	.+62     	; 0x76ae <end_fine_scroll_ram>

00007670 <end_rom_fine_scroll_loop>:

    /***END ROM LOOP***/
    end_rom_fine_scroll_loop:
        movw ZL,r12
    7670:	f6 01       	movw	r30, r12
        nop
    7672:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7674:	98 b8       	out	0x08, r9	; 8
        dec r14
    7676:	ea 94       	dec	r14
        breq end_fine_scroll_rom
    7678:	c9 f0       	breq	.+50     	; 0x76ac <end_fine_scroll_rom>
    .rept 6
        lpm r16,Z+      
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        dec r14
        breq end_fine_scroll_rom
    .endr
    767a:	05 91       	lpm	r16, Z+
    767c:	08 b9       	out	0x08, r16	; 8
    767e:	ea 94       	dec	r14
    7680:	a9 f0       	breq	.+42     	; 0x76ac <end_fine_scroll_rom>
    7682:	05 91       	lpm	r16, Z+
    7684:	08 b9       	out	0x08, r16	; 8
    7686:	ea 94       	dec	r14
    7688:	89 f0       	breq	.+34     	; 0x76ac <end_fine_scroll_rom>
    768a:	05 91       	lpm	r16, Z+
    768c:	08 b9       	out	0x08, r16	; 8
    768e:	ea 94       	dec	r14
    7690:	69 f0       	breq	.+26     	; 0x76ac <end_fine_scroll_rom>
    7692:	05 91       	lpm	r16, Z+
    7694:	08 b9       	out	0x08, r16	; 8
    7696:	ea 94       	dec	r14
    7698:	49 f0       	breq	.+18     	; 0x76ac <end_fine_scroll_rom>
    769a:	05 91       	lpm	r16, Z+
    769c:	08 b9       	out	0x08, r16	; 8
    769e:	ea 94       	dec	r14
    76a0:	29 f0       	breq	.+10     	; 0x76ac <end_fine_scroll_rom>
    76a2:	05 91       	lpm	r16, Z+
    76a4:	08 b9       	out	0x08, r16	; 8
    76a6:	ea 94       	dec	r14
    76a8:	09 f0       	breq	.+2      	; 0x76ac <end_fine_scroll_rom>

000076aa <end_fine_scroll>:
	...

000076ac <end_fine_scroll_rom>:
	...

000076ae <end_fine_scroll_ram>:
    end_fine_scroll:    
        nop
    end_fine_scroll_rom:
        nop
    end_fine_scroll_ram:
        clr r16 
    76ae:	00 27       	eor	r16, r16
        out _SFR_IO_ADDR(DATA_PORT),r16   
    76b0:	08 b9       	out	0x08, r16	; 8

        pop r6
    76b2:	6f 90       	pop	r6
        pop r7
    76b4:	7f 90       	pop	r7
        pop r9
    76b6:	9f 90       	pop	r9
        pop r12
    76b8:	cf 90       	pop	r12
        pop r13
    76ba:	df 90       	pop	r13
        pop r19
    76bc:	3f 91       	pop	r19
        pop r22
    76be:	6f 91       	pop	r22
        pop r23
    76c0:	7f 91       	pop	r23
        pop YH
    76c2:	df 91       	pop	r29
        pop YL
    76c4:	cf 91       	pop	r28

        ret
    76c6:	08 95       	ret

000076c8 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
    ldi r18,TILE_HEIGHT*TILE_WIDTH
    76c8:	20 e4       	ldi	r18, 0x40	; 64

    ;compute source adress
    lds ZL,tile_table_lo
    76ca:	e0 91 ac 0c 	lds	r30, 0x0CAC
    lds ZH,tile_table_hi
    76ce:	f0 91 ad 0c 	lds	r31, 0x0CAD
    mul r24,r18
    76d2:	82 9f       	mul	r24, r18
    add ZL,r0
    76d4:	e0 0d       	add	r30, r0
    adc ZH,r1
    76d6:	f1 1d       	adc	r31, r1

    ;compute destination adress
    ldi XL,lo8(ram_tiles)
    76d8:	a0 e5       	ldi	r26, 0x50	; 80
    ldi XH,hi8(ram_tiles)
    76da:	b5 e0       	ldi	r27, 0x05	; 5
    mul r22,r18
    76dc:	62 9f       	mul	r22, r18
    add XL,r0
    76de:	a0 0d       	add	r26, r0
    adc XH,r1
    76e0:	b1 1d       	adc	r27, r1

    ;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
    lpm r1,Z+
    st X+,r1
.endr
    76e2:	15 90       	lpm	r1, Z+
    76e4:	1d 92       	st	X+, r1
    76e6:	15 90       	lpm	r1, Z+
    76e8:	1d 92       	st	X+, r1
    76ea:	15 90       	lpm	r1, Z+
    76ec:	1d 92       	st	X+, r1
    76ee:	15 90       	lpm	r1, Z+
    76f0:	1d 92       	st	X+, r1
    76f2:	15 90       	lpm	r1, Z+
    76f4:	1d 92       	st	X+, r1
    76f6:	15 90       	lpm	r1, Z+
    76f8:	1d 92       	st	X+, r1
    76fa:	15 90       	lpm	r1, Z+
    76fc:	1d 92       	st	X+, r1
    76fe:	15 90       	lpm	r1, Z+
    7700:	1d 92       	st	X+, r1
    7702:	15 90       	lpm	r1, Z+
    7704:	1d 92       	st	X+, r1
    7706:	15 90       	lpm	r1, Z+
    7708:	1d 92       	st	X+, r1
    770a:	15 90       	lpm	r1, Z+
    770c:	1d 92       	st	X+, r1
    770e:	15 90       	lpm	r1, Z+
    7710:	1d 92       	st	X+, r1
    7712:	15 90       	lpm	r1, Z+
    7714:	1d 92       	st	X+, r1
    7716:	15 90       	lpm	r1, Z+
    7718:	1d 92       	st	X+, r1
    771a:	15 90       	lpm	r1, Z+
    771c:	1d 92       	st	X+, r1
    771e:	15 90       	lpm	r1, Z+
    7720:	1d 92       	st	X+, r1
    7722:	15 90       	lpm	r1, Z+
    7724:	1d 92       	st	X+, r1
    7726:	15 90       	lpm	r1, Z+
    7728:	1d 92       	st	X+, r1
    772a:	15 90       	lpm	r1, Z+
    772c:	1d 92       	st	X+, r1
    772e:	15 90       	lpm	r1, Z+
    7730:	1d 92       	st	X+, r1
    7732:	15 90       	lpm	r1, Z+
    7734:	1d 92       	st	X+, r1
    7736:	15 90       	lpm	r1, Z+
    7738:	1d 92       	st	X+, r1
    773a:	15 90       	lpm	r1, Z+
    773c:	1d 92       	st	X+, r1
    773e:	15 90       	lpm	r1, Z+
    7740:	1d 92       	st	X+, r1
    7742:	15 90       	lpm	r1, Z+
    7744:	1d 92       	st	X+, r1
    7746:	15 90       	lpm	r1, Z+
    7748:	1d 92       	st	X+, r1
    774a:	15 90       	lpm	r1, Z+
    774c:	1d 92       	st	X+, r1
    774e:	15 90       	lpm	r1, Z+
    7750:	1d 92       	st	X+, r1
    7752:	15 90       	lpm	r1, Z+
    7754:	1d 92       	st	X+, r1
    7756:	15 90       	lpm	r1, Z+
    7758:	1d 92       	st	X+, r1
    775a:	15 90       	lpm	r1, Z+
    775c:	1d 92       	st	X+, r1
    775e:	15 90       	lpm	r1, Z+
    7760:	1d 92       	st	X+, r1
    7762:	15 90       	lpm	r1, Z+
    7764:	1d 92       	st	X+, r1
    7766:	15 90       	lpm	r1, Z+
    7768:	1d 92       	st	X+, r1
    776a:	15 90       	lpm	r1, Z+
    776c:	1d 92       	st	X+, r1
    776e:	15 90       	lpm	r1, Z+
    7770:	1d 92       	st	X+, r1
    7772:	15 90       	lpm	r1, Z+
    7774:	1d 92       	st	X+, r1
    7776:	15 90       	lpm	r1, Z+
    7778:	1d 92       	st	X+, r1
    777a:	15 90       	lpm	r1, Z+
    777c:	1d 92       	st	X+, r1
    777e:	15 90       	lpm	r1, Z+
    7780:	1d 92       	st	X+, r1
    7782:	15 90       	lpm	r1, Z+
    7784:	1d 92       	st	X+, r1
    7786:	15 90       	lpm	r1, Z+
    7788:	1d 92       	st	X+, r1
    778a:	15 90       	lpm	r1, Z+
    778c:	1d 92       	st	X+, r1
    778e:	15 90       	lpm	r1, Z+
    7790:	1d 92       	st	X+, r1
    7792:	15 90       	lpm	r1, Z+
    7794:	1d 92       	st	X+, r1
    7796:	15 90       	lpm	r1, Z+
    7798:	1d 92       	st	X+, r1
    779a:	15 90       	lpm	r1, Z+
    779c:	1d 92       	st	X+, r1
    779e:	15 90       	lpm	r1, Z+
    77a0:	1d 92       	st	X+, r1
    77a2:	15 90       	lpm	r1, Z+
    77a4:	1d 92       	st	X+, r1
    77a6:	15 90       	lpm	r1, Z+
    77a8:	1d 92       	st	X+, r1
    77aa:	15 90       	lpm	r1, Z+
    77ac:	1d 92       	st	X+, r1
    77ae:	15 90       	lpm	r1, Z+
    77b0:	1d 92       	st	X+, r1
    77b2:	15 90       	lpm	r1, Z+
    77b4:	1d 92       	st	X+, r1
    77b6:	15 90       	lpm	r1, Z+
    77b8:	1d 92       	st	X+, r1
    77ba:	15 90       	lpm	r1, Z+
    77bc:	1d 92       	st	X+, r1
    77be:	15 90       	lpm	r1, Z+
    77c0:	1d 92       	st	X+, r1
    77c2:	15 90       	lpm	r1, Z+
    77c4:	1d 92       	st	X+, r1
    77c6:	15 90       	lpm	r1, Z+
    77c8:	1d 92       	st	X+, r1
    77ca:	15 90       	lpm	r1, Z+
    77cc:	1d 92       	st	X+, r1
    77ce:	15 90       	lpm	r1, Z+
    77d0:	1d 92       	st	X+, r1
    77d2:	15 90       	lpm	r1, Z+
    77d4:	1d 92       	st	X+, r1
    77d6:	15 90       	lpm	r1, Z+
    77d8:	1d 92       	st	X+, r1
    77da:	15 90       	lpm	r1, Z+
    77dc:	1d 92       	st	X+, r1
    77de:	15 90       	lpm	r1, Z+
    77e0:	1d 92       	st	X+, r1
    clr r1
    77e2:	11 24       	eor	r1, r1
    ret
    77e4:	08 95       	ret

000077e6 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

    ldi r18,TILE_HEIGHT*TILE_WIDTH
    77e6:	20 e4       	ldi	r18, 0x40	; 64

    ;compute source adress
    ldi ZL,lo8(ram_tiles)
    77e8:	e0 e5       	ldi	r30, 0x50	; 80
    ldi ZH,hi8(ram_tiles)
    77ea:	f5 e0       	ldi	r31, 0x05	; 5
    mul r24,r18
    77ec:	82 9f       	mul	r24, r18
    add ZL,r0
    77ee:	e0 0d       	add	r30, r0
    adc ZH,r1
    77f0:	f1 1d       	adc	r31, r1

    ;compute destination adress
    ldi XL,lo8(ram_tiles)
    77f2:	a0 e5       	ldi	r26, 0x50	; 80
    ldi XH,hi8(ram_tiles)
    77f4:	b5 e0       	ldi	r27, 0x05	; 5
    mul r22,r18
    77f6:	62 9f       	mul	r22, r18
    add XL,r0
    77f8:	a0 0d       	add	r26, r0
    adc XH,r1
    77fa:	b1 1d       	adc	r27, r1

    ;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
    ld r1,Z+
    st X+,r1
.endr
    77fc:	11 90       	ld	r1, Z+
    77fe:	1d 92       	st	X+, r1
    7800:	11 90       	ld	r1, Z+
    7802:	1d 92       	st	X+, r1
    7804:	11 90       	ld	r1, Z+
    7806:	1d 92       	st	X+, r1
    7808:	11 90       	ld	r1, Z+
    780a:	1d 92       	st	X+, r1
    780c:	11 90       	ld	r1, Z+
    780e:	1d 92       	st	X+, r1
    7810:	11 90       	ld	r1, Z+
    7812:	1d 92       	st	X+, r1
    7814:	11 90       	ld	r1, Z+
    7816:	1d 92       	st	X+, r1
    7818:	11 90       	ld	r1, Z+
    781a:	1d 92       	st	X+, r1
    781c:	11 90       	ld	r1, Z+
    781e:	1d 92       	st	X+, r1
    7820:	11 90       	ld	r1, Z+
    7822:	1d 92       	st	X+, r1
    7824:	11 90       	ld	r1, Z+
    7826:	1d 92       	st	X+, r1
    7828:	11 90       	ld	r1, Z+
    782a:	1d 92       	st	X+, r1
    782c:	11 90       	ld	r1, Z+
    782e:	1d 92       	st	X+, r1
    7830:	11 90       	ld	r1, Z+
    7832:	1d 92       	st	X+, r1
    7834:	11 90       	ld	r1, Z+
    7836:	1d 92       	st	X+, r1
    7838:	11 90       	ld	r1, Z+
    783a:	1d 92       	st	X+, r1
    783c:	11 90       	ld	r1, Z+
    783e:	1d 92       	st	X+, r1
    7840:	11 90       	ld	r1, Z+
    7842:	1d 92       	st	X+, r1
    7844:	11 90       	ld	r1, Z+
    7846:	1d 92       	st	X+, r1
    7848:	11 90       	ld	r1, Z+
    784a:	1d 92       	st	X+, r1
    784c:	11 90       	ld	r1, Z+
    784e:	1d 92       	st	X+, r1
    7850:	11 90       	ld	r1, Z+
    7852:	1d 92       	st	X+, r1
    7854:	11 90       	ld	r1, Z+
    7856:	1d 92       	st	X+, r1
    7858:	11 90       	ld	r1, Z+
    785a:	1d 92       	st	X+, r1
    785c:	11 90       	ld	r1, Z+
    785e:	1d 92       	st	X+, r1
    7860:	11 90       	ld	r1, Z+
    7862:	1d 92       	st	X+, r1
    7864:	11 90       	ld	r1, Z+
    7866:	1d 92       	st	X+, r1
    7868:	11 90       	ld	r1, Z+
    786a:	1d 92       	st	X+, r1
    786c:	11 90       	ld	r1, Z+
    786e:	1d 92       	st	X+, r1
    7870:	11 90       	ld	r1, Z+
    7872:	1d 92       	st	X+, r1
    7874:	11 90       	ld	r1, Z+
    7876:	1d 92       	st	X+, r1
    7878:	11 90       	ld	r1, Z+
    787a:	1d 92       	st	X+, r1
    787c:	11 90       	ld	r1, Z+
    787e:	1d 92       	st	X+, r1
    7880:	11 90       	ld	r1, Z+
    7882:	1d 92       	st	X+, r1
    7884:	11 90       	ld	r1, Z+
    7886:	1d 92       	st	X+, r1
    7888:	11 90       	ld	r1, Z+
    788a:	1d 92       	st	X+, r1
    788c:	11 90       	ld	r1, Z+
    788e:	1d 92       	st	X+, r1
    7890:	11 90       	ld	r1, Z+
    7892:	1d 92       	st	X+, r1
    7894:	11 90       	ld	r1, Z+
    7896:	1d 92       	st	X+, r1
    7898:	11 90       	ld	r1, Z+
    789a:	1d 92       	st	X+, r1
    789c:	11 90       	ld	r1, Z+
    789e:	1d 92       	st	X+, r1
    78a0:	11 90       	ld	r1, Z+
    78a2:	1d 92       	st	X+, r1
    78a4:	11 90       	ld	r1, Z+
    78a6:	1d 92       	st	X+, r1
    78a8:	11 90       	ld	r1, Z+
    78aa:	1d 92       	st	X+, r1
    78ac:	11 90       	ld	r1, Z+
    78ae:	1d 92       	st	X+, r1
    78b0:	11 90       	ld	r1, Z+
    78b2:	1d 92       	st	X+, r1
    78b4:	11 90       	ld	r1, Z+
    78b6:	1d 92       	st	X+, r1
    78b8:	11 90       	ld	r1, Z+
    78ba:	1d 92       	st	X+, r1
    78bc:	11 90       	ld	r1, Z+
    78be:	1d 92       	st	X+, r1
    78c0:	11 90       	ld	r1, Z+
    78c2:	1d 92       	st	X+, r1
    78c4:	11 90       	ld	r1, Z+
    78c6:	1d 92       	st	X+, r1
    78c8:	11 90       	ld	r1, Z+
    78ca:	1d 92       	st	X+, r1
    78cc:	11 90       	ld	r1, Z+
    78ce:	1d 92       	st	X+, r1
    78d0:	11 90       	ld	r1, Z+
    78d2:	1d 92       	st	X+, r1
    78d4:	11 90       	ld	r1, Z+
    78d6:	1d 92       	st	X+, r1
    78d8:	11 90       	ld	r1, Z+
    78da:	1d 92       	st	X+, r1
    78dc:	11 90       	ld	r1, Z+
    78de:	1d 92       	st	X+, r1
    78e0:	11 90       	ld	r1, Z+
    78e2:	1d 92       	st	X+, r1
    78e4:	11 90       	ld	r1, Z+
    78e6:	1d 92       	st	X+, r1
    78e8:	11 90       	ld	r1, Z+
    78ea:	1d 92       	st	X+, r1
    78ec:	11 90       	ld	r1, Z+
    78ee:	1d 92       	st	X+, r1
    78f0:	11 90       	ld	r1, Z+
    78f2:	1d 92       	st	X+, r1
    78f4:	11 90       	ld	r1, Z+
    78f6:	1d 92       	st	X+, r1
    78f8:	11 90       	ld	r1, Z+
    78fa:	1d 92       	st	X+, r1
    clr r1
    78fc:	11 24       	eor	r1, r1
    ret
    78fe:	08 95       	ret

00007900 <BlitSprite>:
; r21:r20: Y:X (0 or 1, location of 8x8 sprite fragment on 2x2 tile container)
; r19:r18: DY:DX (0 to 7, offset of sprite relative to 0:0 of container)
;************************************
BlitSprite:

    push  YL
    7900:	cf 93       	push	r28
    push  YH
    7902:	df 93       	push	r29

    ; src = sprites_tiletable_lo + (sprites[i].tileIndex * TILE_HEIGHT * TILE_WIDTH)

    ldi   r25,     SPRITE_STRUCT_SIZE
    7904:	94 e0       	ldi	r25, 0x04	; 4
    mul   r24,     r25
    7906:	89 9f       	mul	r24, r25

    movw  ZL,      r0
    7908:	f0 01       	movw	r30, r0
    subi  ZL,      lo8(-(sprites))
    790a:	e0 5f       	subi	r30, 0xF0	; 240
    sbci  ZH,      hi8(-(sprites))
    790c:	fa 4f       	sbci	r31, 0xFA	; 250

    ldd   r23,     Z + sprFlags
    790e:	73 81       	ldd	r23, Z+3	; 0x03

    ; 8x16 multiply

    ldd   r24,     Z + sprTileIndex
    7910:	82 81       	ldd	r24, Z+2	; 0x02
    ldi   ZL,      TILE_WIDTH * TILE_HEIGHT
    7912:	e0 e4       	ldi	r30, 0x40	; 64
    mul   r24,     ZL
    7914:	8e 9f       	mul	r24, r30
    movw  XL,      r0
    7916:	d0 01       	movw	r26, r0

    ; Get tile bank addr

    ldi   r25,     4 * 2
    7918:	98 e0       	ldi	r25, 0x08	; 8
    mul   r23,     r25
    791a:	79 9f       	mul	r23, r25
    mov   YL,      r1
    791c:	c1 2d       	mov	r28, r1
    clr   YH
    791e:	dd 27       	eor	r29, r29
    subi  YL,      lo8(-(sprites_tile_banks))
    7920:	cc 55       	subi	r28, 0x5C	; 92
    sbci  YH,      hi8(-(sprites_tile_banks))
    7922:	d3 4f       	sbci	r29, 0xF3	; 243
    ldd   ZL,      Y + 0
    7924:	e8 81       	ld	r30, Y
    ldd   ZH,      Y + 1
    7926:	f9 81       	ldd	r31, Y+1	; 0x01
    add   ZL,      XL      ; Tile data src
    7928:	ea 0f       	add	r30, r26
    adc   ZH,      XH
    792a:	fb 1f       	adc	r31, r27

    ; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

    ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    792c:	90 e4       	ldi	r25, 0x40	; 64
    mul   r22,     r25
    792e:	69 9f       	mul	r22, r25
    movw  XL,      r0
    7930:	d0 01       	movw	r26, r0
    subi  XL,      lo8(-(ram_tiles))
    7932:	a0 5b       	subi	r26, 0xB0	; 176
    sbci  XH,      hi8(-(ram_tiles))
    7934:	ba 4f       	sbci	r27, 0xFA	; 250
            dest += (xspan - 1U);
        }
    }
    */

    clr   r1
    7936:	11 24       	eor	r1, r1
    clr   YH               ; srcXdiff high byte
    7938:	dd 27       	eor	r29, r29
    sbrc  r20,     0
    793a:	40 fd       	sbrc	r20, 0
    rjmp  x_2nd_tile
    793c:	0d c0       	rjmp	.+26     	; 0x7958 <x_2nd_tile>

    mov   YL,      r18     ; srcXdiff = dx
    793e:	c2 2f       	mov	r28, r18
    ldi   r20,     TILE_WIDTH
    7940:	48 e0       	ldi	r20, 0x08	; 8
    sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7942:	42 1b       	sub	r20, r18
    sbrc  r23,     SPRITE_FLIP_X_BIT
    7944:	70 fd       	sbrc	r23, 0
    rjmp  x_1st_tile_xf
    7946:	03 c0       	rjmp	.+6      	; 0x794e <x_1st_tile_xf>

    add   XL,      r18
    7948:	a2 0f       	add	r26, r18
    adc   XH,      r1      ; dest += dx
    794a:	b1 1d       	adc	r27, r1
    rjmp  x_check_end
    794c:	10 c0       	rjmp	.+32     	; 0x796e <x_check_end>

0000794e <x_1st_tile_xf>:

x_1st_tile_xf:

    adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1U)
    794e:	17 96       	adiw	r26, 0x07	; 7
    adiw  ZL,      TILE_WIDTH
    7950:	38 96       	adiw	r30, 0x08	; 8
    sub   ZL,      r20
    7952:	e4 1b       	sub	r30, r20
    sbc   ZH,      r1      ; src += (TILE_WIDTH - xspan)
    7954:	f1 09       	sbc	r31, r1
    rjmp  x_check_end
    7956:	0b c0       	rjmp	.+22     	; 0x796e <x_check_end>

00007958 <x_2nd_tile>:

x_2nd_tile:

    ldi   YL,      TILE_WIDTH
    7958:	c8 e0       	ldi	r28, 0x08	; 8
    sub   YL,      r18     ; srcXdiff = TILE_WIDTH - dx
    795a:	c2 1b       	sub	r28, r18
    mov   r20,     r18     ; xspan = dx;
    795c:	42 2f       	mov	r20, r18
    sbrc  r23,     SPRITE_FLIP_X_BIT
    795e:	70 fd       	sbrc	r23, 0
    rjmp  x_2nd_tile_xf
    7960:	03 c0       	rjmp	.+6      	; 0x7968 <x_2nd_tile_xf>

    add   ZL,      YL
    7962:	ec 0f       	add	r30, r28
    adc   ZH,      r1      ; src += srcXdiff
    7964:	f1 1d       	adc	r31, r1
    rjmp  x_check_end
    7966:	03 c0       	rjmp	.+6      	; 0x796e <x_check_end>

00007968 <x_2nd_tile_xf>:

x_2nd_tile_xf:

    add   XL,      r20
    7968:	a4 0f       	add	r26, r20
    adc   XH,      r1
    796a:	b1 1d       	adc	r27, r1
    sbiw  XL,      1       ; dest += (xspan - 1U)
    796c:	11 97       	sbiw	r26, 0x01	; 1

0000796e <x_check_end>:
            src += (ydiff * TILE_WIDTH);
        }
    }
    */

    cpi   r21,     0
    796e:	50 30       	cpi	r21, 0x00	; 0
    brne  y_2nd_tile
    7970:	51 f4       	brne	.+20     	; 0x7986 <y_2nd_tile>

    ldi   r25,     TILE_WIDTH ; dest += (dy * TILE_WIDTH)
    7972:	98 e0       	ldi	r25, 0x08	; 8
    mul   r25,     r19
    7974:	93 9f       	mul	r25, r19
    add   XL,      r0
    7976:	a0 0d       	add	r26, r0
    adc   XH,      r1
    7978:	b1 1d       	adc	r27, r1

    mov   r25,     r19        ; ydiff = dy
    797a:	93 2f       	mov	r25, r19

    sbrc  r23,     SPRITE_FLIP_Y_BIT
    797c:	71 fd       	sbrc	r23, 1
    subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    797e:	e8 5c       	subi	r30, 0xC8	; 200
    sbrc  r23,     SPRITE_FLIP_Y_BIT
    7980:	71 fd       	sbrc	r23, 1
    sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7982:	ff 4f       	sbci	r31, 0xFF	; 255

    rjmp y_check_end
    7984:	0a c0       	rjmp	.+20     	; 0x799a <y_check_end>

00007986 <y_2nd_tile>:

y_2nd_tile:

    ldi   r25,     TILE_HEIGHT ; ydiff = (TILE_HEIGHT - dy)
    7986:	98 e0       	ldi	r25, 0x08	; 8
    sub   r25,     r19
    7988:	93 1b       	sub	r25, r19

    mov   r1,      r19         ; temp = dy - 1
    798a:	13 2e       	mov	r1, r19
    dec   r1
    798c:	1a 94       	dec	r1
    sbrs  r23,     SPRITE_FLIP_Y_BIT
    798e:	71 ff       	sbrs	r23, 1
    mov   r1,      r25         ; temp = ydiff
    7990:	19 2e       	mov	r1, r25

    ldi   r21,     TILE_WIDTH  ; src += (temp * TILE_WIDTH)
    7992:	58 e0       	ldi	r21, 0x08	; 8
    mul   r21,     r1
    7994:	51 9d       	mul	r21, r1
    add   ZL,      r0
    7996:	e0 0d       	add	r30, r0
    adc   ZH,      r1
    7998:	f1 1d       	adc	r31, r1

0000799a <y_check_end>:
    if ((flags & SPRITE_FLIP_Y) != 0U){
        srcXdiff -= (TILE_WIDTH * 2);
    }
    */

    sbrc  r23,     SPRITE_FLIP_Y_BIT
    799a:	71 fd       	sbrc	r23, 1
    sbiw  YL,      (TILE_WIDTH * 2)
    799c:	60 97       	sbiw	r28, 0x10	; 16
        destXdiff = TILE_WIDTH + xspan;
        step = -1;
    }
    */

    ldi   r24,     TILE_WIDTH ; destXdiff = TILE_WIDTH
    799e:	88 e0       	ldi	r24, 0x08	; 8
    sbrc  r23,     SPRITE_FLIP_X_BIT
    79a0:	70 fd       	sbrc	r23, 0
    rjmp  x_diff_xf
    79a2:	04 c0       	rjmp	.+8      	; 0x79ac <x_diff_xf>

    sub   r24,     r20     ; destXdiff -= xspan
    79a4:	84 1b       	sub	r24, r20
    ldi   r23,     0x00
    79a6:	70 e0       	ldi	r23, 0x00	; 0
    ldi   r22,     0x01    ; step = 1
    79a8:	61 e0       	ldi	r22, 0x01	; 1
    rjmp  x_diff_end
    79aa:	03 c0       	rjmp	.+6      	; 0x79b2 <x_diff_end>

000079ac <x_diff_xf>:

x_diff_xf:

    add   r24,     r20     ; destXdiff += xspan
    79ac:	84 0f       	add	r24, r20
    ldi   r23,     0xFF
    79ae:	7f ef       	ldi	r23, 0xFF	; 255
    ldi   r22,     0xFF    ; step = -1
    79b0:	6f ef       	ldi	r22, 0xFF	; 255

000079b2 <x_diff_end>:
    ;     r25 = ydiff
    ;       X = dest
    ;       Y = srcXdiff
    ;       Z = src

    clr   r1
    79b2:	11 24       	eor	r1, r1
    ldi   r19,     TRANSLUCENT_COLOR
    79b4:	3e ef       	ldi	r19, 0xFE	; 254

    ldi   r21,     TILE_HEIGHT
    79b6:	58 e0       	ldi	r21, 0x08	; 8
    sub   r21,     r25     ; yspan = (TILE_HEIGHT - ydiff)
    79b8:	59 1b       	sub	r21, r25
    mov   r0,      r20     ; xspan
    79ba:	04 2e       	mov	r0, r20
    inc   r0
    79bc:	03 94       	inc	r0

000079be <y_loop>:

y_loop:
    mov   r20,     r0      ; xspan
    79be:	40 2d       	mov	r20, r0
    lsr   r20
    79c0:	46 95       	lsr	r20
    brcc  x_loop1
    79c2:	28 f4       	brcc	.+10     	; 0x79ce <x_loop1>

000079c4 <x_loop0>:

x_loop0:
    lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    79c4:	25 91       	lpm	r18, Z+
    cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    79c6:	23 13       	cpse	r18, r19
    st    X,       r18     ; *dest = px
    79c8:	2c 93       	st	X, r18
    add   XL,      r22     ; dest += step;
    79ca:	a6 0f       	add	r26, r22
    adc   XH,      r23
    79cc:	b7 1f       	adc	r27, r23

000079ce <x_loop1>:
x_loop1:
    lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    79ce:	25 91       	lpm	r18, Z+
    cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    79d0:	23 13       	cpse	r18, r19
    st    X,       r18     ; *dest = px
    79d2:	2c 93       	st	X, r18
    add   XL,      r22     ; dest += step;
    79d4:	a6 0f       	add	r26, r22
    adc   XH,      r23
    79d6:	b7 1f       	adc	r27, r23
    subi  r20,     1
    79d8:	41 50       	subi	r20, 0x01	; 1
    brne  x_loop0
    79da:	a1 f7       	brne	.-24     	; 0x79c4 <x_loop0>

    add   ZL,      YL      ; src += srcXdiff
    79dc:	ec 0f       	add	r30, r28
    adc   ZH,      YH
    79de:	fd 1f       	adc	r31, r29
    add   XL,      r24     ; dest += destXdiff
    79e0:	a8 0f       	add	r26, r24
    adc   XH,      r1
    79e2:	b1 1d       	adc	r27, r1
    dec   r21
    79e4:	5a 95       	dec	r21
    brne  y_loop
    79e6:	59 f7       	brne	.-42     	; 0x79be <y_loop>

    pop   YH
    79e8:	df 91       	pop	r29
    pop   YL
    79ea:	cf 91       	pop	r28
    ret
    79ec:	08 95       	ret

000079ee <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    79ee:	0f 92       	push	r0
	push r1
    79f0:	1f 92       	push	r1
	push ZL;2
    79f2:	ef 93       	push	r30
	push ZH;2
    79f4:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    79f6:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    79f8:	ef 93       	push	r30
   ; Use an alternate way to shave off 5 cycles jitter faster. It shifts
   ; all timing 57 cycles "down", so every Timer related comment and code
   ; should subtract 57 to align with this (Notes: Everything works as
   ; normal except video modes using the Timer to terminate the line).

   lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x12 - 0x17 (5 cy jitter)
    79fa:	e0 91 84 00 	lds	r30, 0x0084

   cpi   ZL,      0x16    ; ( 1)
    79fe:	e6 31       	cpi	r30, 0x16	; 22
   breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    7a00:	01 f0       	breq	.+0      	; 0x7a02 <__vector_13+0x14>
   brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    7a02:	28 f4       	brcc	.+10     	; 0x7a0e <__vector_13+0x20>
   cpi   ZL,      0x14    ; ()
    7a04:	e4 31       	cpi	r30, 0x14	; 20
   breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    7a06:	01 f0       	breq	.+0      	; 0x7a08 <__vector_13+0x1a>
   brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    7a08:	18 f4       	brcc	.+6      	; 0x7a10 <__vector_13+0x22>
   cpi   ZL,      0x12    ; ()
    7a0a:	e2 31       	cpi	r30, 0x12	; 18
   breq  .                ; ()   +5 / +4 (10 / 9)
    7a0c:	01 f0       	breq	.+0      	; 0x7a0e <__vector_13+0x20>
   nop                    ; ( 5) Timer at 0x1C
    7a0e:	00 00       	nop

;  WAIT  ZL,      57      ; Realigns with original kernel

	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7a10:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7a14:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7a16:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7a1a:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    7a1e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7a20:	55 c0       	rjmp	.+170    	; 0x7acc <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7a22:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7a24:	98 f0       	brcs	.+38     	; 0x7a4c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7a26:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7a28:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7a2c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7a2e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7a32:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7a34:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7a36:	26 f4       	brtc	.+8      	; 0x7a40 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7a38:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7a3a:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <update_sound>
	rjmp sync_end
    7a3e:	b5 c0       	rjmp	.+362    	; 0x7baa <sync_end>

00007a40 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7a40:	e5 e1       	ldi	r30, 0x15	; 21
    7a42:	ea 95       	dec	r30
    7a44:	f1 f7       	brne	.-4      	; 0x7a42 <sync_pre_eq_no_sound_update+0x2>
    7a46:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7a48:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7a4a:	af c0       	rjmp	.+350    	; 0x7baa <sync_end>

00007a4c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7a4c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7a4e:	28 f1       	brcs	.+74     	; 0x7a9a <sync_post_eq>

	rjmp .
    7a50:	00 c0       	rjmp	.+0      	; 0x7a52 <sync_eq+0x6>
	rjmp .
    7a52:	00 c0       	rjmp	.+0      	; 0x7a54 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7a54:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7a56:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7a58:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7a5a:	16 f4       	brtc	.+4      	; 0x7a60 <sync_eq_skip>
	
	call update_sound
    7a5c:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <update_sound>

00007a60 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7a60:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7a62:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7a66:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7a68:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7a6c:	9e c0       	rjmp	.+316    	; 0x7baa <sync_end>

00007a6e <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7a6e:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7a70:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7a72:	ef 93       	push	r30
;  breq  .                ; ()   +5 / +4 (10 / 9)
;  nop                    ; ( 5) Timer at 0x67 

;  WAIT  ZL,      6       ; Realigns with original kernel

    lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x2A - 0x2F (5 cy jitter)
    7a74:	e0 91 84 00 	lds	r30, 0x0084

    cpi   ZL,      0x2E    ; ( 1)
    7a78:	ee 32       	cpi	r30, 0x2E	; 46
    breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    7a7a:	01 f0       	breq	.+0      	; 0x7a7c <__vector_14+0xe>
    brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    7a7c:	28 f4       	brcc	.+10     	; 0x7a88 <__vector_14+0x1a>
    cpi   ZL,      0x2C    ; ()
    7a7e:	ec 32       	cpi	r30, 0x2C	; 44
    breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    7a80:	01 f0       	breq	.+0      	; 0x7a82 <__vector_14+0x14>
    brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    7a82:	18 f4       	brcc	.+6      	; 0x7a8a <__vector_14+0x1c>
    cpi   ZL,      0x2A    ; ()
    7a84:	ea 32       	cpi	r30, 0x2A	; 42
    breq  .                ; ()   +5 / +4 (10 / 9)
    7a86:	01 f0       	breq	.+0      	; 0x7a88 <__vector_14+0x1a>
    nop                    ; ( 5) Timer at 0x34
    7a88:	00 00       	nop

;   WAIT  ZL,      57      ; Realigns with original kernel

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7a8a:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7a8c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7a8e:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7a92:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7a94:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7a96:	ef 91       	pop	r30
	reti
    7a98:	18 95       	reti

00007a9a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7a9a:	00 c0       	rjmp	.+0      	; 0x7a9c <sync_post_eq+0x2>

	bst ZL,0
    7a9c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7a9e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7aa0:	26 f4       	brtc	.+8      	; 0x7aaa <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7aa2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7aa4:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <update_sound>
	rjmp sync_pre_eq_cont
    7aa8:	05 c0       	rjmp	.+10     	; 0x7ab4 <sync_pre_eq_cont>

00007aaa <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7aaa:	e5 e1       	ldi	r30, 0x15	; 21
    7aac:	ea 95       	dec	r30
    7aae:	f1 f7       	brne	.-4      	; 0x7aac <sync_post_eq_no_sound_update+0x2>
    7ab0:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7ab2:	28 9a       	sbi	0x05, 0	; 5

00007ab4 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7ab4:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7ab8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7aba:	09 f0       	breq	.+2      	; 0x7abe <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7abc:	76 c0       	rjmp	.+236    	; 0x7baa <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7abe:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7ac0:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7ac4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7ac6:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7aca:	6f c0       	rjmp	.+222    	; 0x7baa <sync_end>

00007acc <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7acc:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7ace:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7ad2:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7ad4:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7ad8:	00 c0       	rjmp	.+0      	; 0x7ada <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7ada:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7adc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7ade:	00 c0       	rjmp	.+0      	; 0x7ae0 <sync_hsync+0x14>
	call update_sound
    7ae0:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7ae4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7ae6:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7aea:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7aec:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7af0:	ef 17       	cp	r30, r31
	brsh no_render
    7af2:	d0 f4       	brcc	.+52     	; 0x7b28 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7af4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7af6:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7afa:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7afc:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7b00:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7b02:	ef 17       	cp	r30, r31
	brlo no_render
    7b04:	88 f0       	brcs	.+34     	; 0x7b28 <no_render>

	;push r1-r29
	ldi ZL,29
    7b06:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7b08:	ff 27       	eor	r31, r31

00007b0a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7b0a:	00 80       	ld	r0, Z
	push r0
    7b0c:	0f 92       	push	r0
	dec ZL
    7b0e:	ea 95       	dec	r30
	brne push_loop	
    7b10:	e1 f7       	brne	.-8      	; 0x7b0a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7b12:	06 e0       	ldi	r16, 0x06	; 6
    7b14:	0a 95       	dec	r16
    7b16:	f1 f7       	brne	.-4      	; 0x7b14 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7b18:	0e 94 b0 39 	call	0x7360	; 0x7360 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7b1c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7b1e:	ff 27       	eor	r31, r31

00007b20 <pop_loop>:
pop_loop:
	pop r0
    7b20:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7b22:	01 92       	st	Z+, r0
	cpi ZL,30
    7b24:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7b26:	e0 f3       	brcs	.-8      	; 0x7b20 <pop_loop>

00007b28 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7b28:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7b2c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7b2e:	09 f0       	breq	.+2      	; 0x7b32 <no_render+0xa>
	rjmp sync_end
    7b30:	3c c0       	rjmp	.+120    	; 0x7baa <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7b32:	2f 93       	push	r18
	push r19
    7b34:	3f 93       	push	r19
	push r20
    7b36:	4f 93       	push	r20
	push r21
    7b38:	5f 93       	push	r21
	push r22
    7b3a:	6f 93       	push	r22
	push r23
    7b3c:	7f 93       	push	r23
	push r24
    7b3e:	8f 93       	push	r24
	push r25
    7b40:	9f 93       	push	r25
	push r26
    7b42:	af 93       	push	r26
	push r27
    7b44:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7b46:	78 94       	sei
	clr r1
    7b48:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7b4a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7b4c:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7b50:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7b52:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7b56:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7b5a:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7b5e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7b60:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7b64:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7b68:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7b6c:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7b70:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7b72:	f1 05       	cpc	r31, r1
	breq .+2 
    7b74:	09 f0       	breq	.+2      	; 0x7b78 <no_render+0x50>
	icall
    7b76:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7b78:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7b7c:	0e 94 28 4d 	call	0x9a50	; 0x9a50 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7b80:	0e 94 e7 3d 	call	0x7bce	; 0x7bce <process_music>
	clr r1
    7b84:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7b86:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    7b8a:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7b8e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7b90:	f1 05       	cpc	r31, r1
	breq .+2 
    7b92:	09 f0       	breq	.+2      	; 0x7b96 <no_render+0x6e>
	icall
    7b94:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7b96:	bf 91       	pop	r27
	pop r26
    7b98:	af 91       	pop	r26
	pop r25
    7b9a:	9f 91       	pop	r25
	pop r24
    7b9c:	8f 91       	pop	r24
	pop r23
    7b9e:	7f 91       	pop	r23
	pop r22
    7ba0:	6f 91       	pop	r22
	pop r21
    7ba2:	5f 91       	pop	r21
	pop r20
    7ba4:	4f 91       	pop	r20
	pop r19
    7ba6:	3f 91       	pop	r19
	pop r18
    7ba8:	2f 91       	pop	r18

00007baa <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7baa:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7bac:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7bae:	ff 91       	pop	r31
	pop ZL
    7bb0:	ef 91       	pop	r30
	pop r1
    7bb2:	1f 90       	pop	r1
	pop r0
    7bb4:	0f 90       	pop	r0
	reti
    7bb6:	18 95       	reti

00007bb8 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7bb8:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7bba:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7bbc:	00 c0       	rjmp	.+0      	; 0x7bbe <hsync_pulse+0x6>
	call update_sound
    7bbe:	0e 94 ed 3d 	call	0x7bda	; 0x7bda <update_sound>

	lds ZL,sync_pulse
    7bc2:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7bc6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7bc8:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    7bcc:	08 95       	ret

00007bce <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7bce:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7bd2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7bd4:	0e 94 48 42 	call	0x8490	; 0x8490 <ProcessMusic>
#endif

	ret
    7bd8:	08 95       	ret

00007bda <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7bda:	0f 93       	push	r16
	push r17
    7bdc:	1f 93       	push	r17
	push r18
    7bde:	2f 93       	push	r18
	push r28
    7be0:	cf 93       	push	r28
	push r29
    7be2:	df 93       	push	r29

	mov r18,ZL
    7be4:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7be6:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    7bea:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7bee:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7bf0:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7bf4:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    7bf8:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    7bfc:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7bfe:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7c00:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7c04:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    7c08:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    7c0c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7c0e:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7c10:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7c12:	d0 2d       	mov	r29, r0
	nop
    7c14:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7c16:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    7c1a:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7c1e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7c20:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7c24:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    7c28:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    7c2c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7c2e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7c30:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    7c34:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    7c38:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7c3c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7c3e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7c40:	20 ff       	sbrs	r18, 0
	rjmp .
    7c42:	00 c0       	rjmp	.+0      	; 0x7c44 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7c44:	01 03       	mulsu	r16, r17
	clr r0
    7c46:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7c48:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7c4a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7c4c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7c4e:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    7c52:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    7c56:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7c58:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    7c5c:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    7c60:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    7c64:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7c66:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7c68:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    7c6c:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    7c70:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    7c74:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7c76:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7c78:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7c7a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7c7c:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    7c80:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    7c84:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    7c88:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7c8a:	92 f4       	brpl	.+36     	; 0x7cb0 <ch4_no_shift>

	lds ZH,tr4_params
    7c8c:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    7c90:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7c92:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7c94:	00 2e       	mov	r0, r16
	lsr r0
    7c96:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7c98:	00 26       	eor	r0, r16
	bst r0,0
    7c9a:	00 fa       	bst	r0, 0
	lsr r17
    7c9c:	16 95       	lsr	r17
	ror r16
    7c9e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7ca0:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7ca2:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7ca4:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7ca6:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    7caa:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    7cae:	03 c0       	rjmp	.+6      	; 0x7cb6 <ch4_end>

00007cb0 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7cb0:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7cb2:	1a 95       	dec	r17
	brne .-4
    7cb4:	f1 f7       	brne	.-4      	; 0x7cb2 <ch4_no_shift+0x2>

00007cb6 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7cb6:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    7cba:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7cbc:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7cbe:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7cc0:	21 ff       	sbrs	r18, 1
	rjmp .
    7cc2:	00 c0       	rjmp	.+0      	; 0x7cc4 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7cc4:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7cc6:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7cc8:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    7ccc:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7cce:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7cd0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7cd2:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7cd4:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    7cd8:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    7cdc:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7cde:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    7ce2:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    7ce6:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    7cea:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7cec:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    7cf0:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7cf2:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7cf4:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7cf6:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    7cfa:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    7cfe:	00 19       	sub	r16, r0
	sbc r17,r1
    7d00:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7d02:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    7d06:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    7d0a:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7d0c:	f1 05       	cpc	r31, r1
	brlo .+2
    7d0e:	08 f0       	brcs	.+2      	; 0x7d12 <ch4_end+0x5c>
	movw ZL,r16
    7d10:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7d12:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    7d16:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    7d1a:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7d1c:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    7d20:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7d22:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7d24:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7d26:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7d28:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7d2a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7d2c:	d0 05       	cpc	r29, r0
	brlt .+2
    7d2e:	0c f0       	brlt	.+2      	; 0x7d32 <ch4_end+0x7c>
	ldi r28,127
    7d30:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7d32:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7d34:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7d36:	d0 05       	cpc	r29, r0
	brge .+2
    7d38:	0c f4       	brge	.+2      	; 0x7d3c <ch4_end+0x86>
	ldi r28,-128
    7d3a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7d3c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7d3e:	c0 93 b3 00 	sts	0x00B3, r28

00007d42 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7d42:	df 91       	pop	r29
	pop r28
    7d44:	cf 91       	pop	r28
	pop r18
    7d46:	2f 91       	pop	r18
	pop r17
    7d48:	1f 91       	pop	r17
	pop r16
    7d4a:	0f 91       	pop	r16
	
	ret
    7d4c:	08 95       	ret

00007d4e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
    sts sprites_tile_banks,r24
    7d4e:	80 93 a4 0c 	sts	0x0CA4, r24
    sts sprites_tile_banks+1,r25
    7d52:	90 93 a5 0c 	sts	0x0CA5, r25
    ret
    7d56:	08 95       	ret

00007d58 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
    //init vram     
    ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7d58:	e0 e0       	ldi	r30, 0x00	; 0
    ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7d5a:	f4 e0       	ldi	r31, 0x04	; 4

    ldi XL,lo8(vram)
    7d5c:	a0 e0       	ldi	r26, 0x00	; 0
    ldi XH,hi8(vram)
    7d5e:	b1 e0       	ldi	r27, 0x01	; 1

    ldi r22,RAM_TILES_COUNT
    7d60:	6c e1       	ldi	r22, 0x1C	; 28

00007d62 <fill_vram_loop>:

fill_vram_loop:
    st X+,r22
    7d62:	6d 93       	st	X+, r22
    sbiw r30,1
    7d64:	31 97       	sbiw	r30, 0x01	; 1
    brne fill_vram_loop
    7d66:	e9 f7       	brne	.-6      	; 0x7d62 <fill_vram_loop>

    clr r1
    7d68:	11 24       	eor	r1, r1

    ret
    7d6a:	08 95       	ret

00007d6c <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
    ;index formula is vram[((y>>3)*256)+8x+(y&7)]
    
    andi r24,0x1f
    7d6c:	8f 71       	andi	r24, 0x1F	; 31
    mov r23,r22
    7d6e:	76 2f       	mov	r23, r22
    lsr r22
    7d70:	66 95       	lsr	r22
    lsr r22
    7d72:	66 95       	lsr	r22
    lsr r22         ;y>>3
    7d74:	66 95       	lsr	r22
    ldi r18,8       
    7d76:	28 e0       	ldi	r18, 0x08	; 8
    mul r24,r18     ;x*8
    7d78:	82 9f       	mul	r24, r18
    movw XL,r0
    7d7a:	d0 01       	movw	r26, r0
    subi XL,lo8(-(vram))
    7d7c:	a0 50       	subi	r26, 0x00	; 0
    sbci XH,hi8(-(vram))
    7d7e:	bf 4f       	sbci	r27, 0xFF	; 255
    add XH,r22      ;vram+((y>>3)*256)
    7d80:	b6 0f       	add	r27, r22
    andi r23,7      ;y&7    
    7d82:	77 70       	andi	r23, 0x07	; 7
    add XL,r23
    7d84:	a7 0f       	add	r26, r23
                        
    subi r20,~(RAM_TILES_COUNT-1)   
    7d86:	44 5e       	subi	r20, 0xE4	; 228
    st X,r20
    7d88:	4c 93       	st	X, r20

    clr r1
    7d8a:	11 24       	eor	r1, r1

    ret
    7d8c:	08 95       	ret

00007d8e <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
    sts tile_table_lo,r24
    7d8e:	80 93 ac 0c 	sts	0x0CAC, r24
    sts tile_table_hi,r25   
    7d92:	90 93 ad 0c 	sts	0x0CAD, r25
    ret
    7d96:	08 95       	ret

00007d98 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7d98:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    7d9c:	81 70       	andi	r24, 0x01	; 1
	ret
    7d9e:	08 95       	ret

00007da0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7da0:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    7da4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7da6:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    7daa:	08 95       	ret

00007dac <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7dac:	88 23       	and	r24, r24
	brne rj_p2
    7dae:	29 f4       	brne	.+10     	; 0x7dba <rj_p2>
		
	lds r24,joypad1_status_lo
    7db0:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    7db4:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    7db8:	08 95       	ret

00007dba <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7dba:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7dbe:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7dc2:	08 95       	ret

00007dc4 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7dc4:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7dc6:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7dc8:	f1 f7       	brne	.-4      	; 0x7dc6 <WaitUs+0x2>
	nop
    7dca:	00 00       	nop
	sbiw r24,1
    7dcc:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7dce:	d1 f7       	brne	.-12     	; 0x7dc4 <WaitUs>

	ret
    7dd0:	08 95       	ret

00007dd2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7dd2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7dd4:	fe cf       	rjmp	.-4      	; 0x7dd2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7dd6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7dd8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7dda:	60 bd       	out	0x20, r22	; 32
   cli
    7ddc:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7dde:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7de0:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7de2:	78 94       	sei
   ret
    7de4:	08 95       	ret

00007de6 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7de6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7de8:	fe cf       	rjmp	.-4      	; 0x7de6 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7dea:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7dec:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7dee:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7df0:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7df2:	80 b5       	in	r24, 0x20	; 32
   sei
    7df4:	78 94       	sei
   ret
    7df6:	08 95       	ret

00007df8 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7df8:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7dfa:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7dfe:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7e02:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7e06:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7e0a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7e0e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7e12:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7e16:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7e1a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7e1e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7e20:	80 93 81 00 	sts	0x0081, r24

		cli
    7e24:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7e26:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7e28:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7e2c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7e2e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7e32:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7e34:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7e38:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7e3c:	78 94       	sei

00007e3e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7e3e:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    7e42:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7e44:	e0 f3       	brcs	.-8      	; 0x7e3e <wait>

		ret
    7e46:	08 95       	ret

00007e48 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7e48:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    7e4c:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7e50:	08 95       	ret

00007e52 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7e52:	0f 93       	push	r16
		push r17
    7e54:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7e56:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7e58:	0f 93       	push	r16

		lds r16,sync_pulse
    7e5a:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7e5e:	03 95       	inc	r16
		sts sync_pulse,r16
    7e60:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7e64:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7e66:	08 c0       	rjmp	.+16     	; 0x7e78 <__vector_8+0x26>
		lds r17,random_value
    7e68:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7e6c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7e70:	10 27       	eor	r17, r16
		sts random_value,r17
    7e72:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    7e76:	07 c0       	rjmp	.+14     	; 0x7e86 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7e78:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7e7c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7e80:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7e82:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7e86:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7e88:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7e8c:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7e8e:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7e90:	1f 91       	pop	r17
		pop r16
    7e92:	0f 91       	pop	r16
		reti
    7e94:	18 95       	reti

00007e96 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7e96:	98 e0       	ldi	r25, 0x08	; 8
    7e98:	88 e1       	ldi	r24, 0x18	; 24
    7e9a:	0f b6       	in	r0, 0x3f	; 63
    7e9c:	f8 94       	cli
    7e9e:	a8 95       	wdr
    7ea0:	80 93 60 00 	sts	0x0060, r24
    7ea4:	0f be       	out	0x3f, r0	; 63
    7ea6:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7eaa:	ff cf       	rjmp	.-2      	; 0x7eaa <SoftReset+0x14>

00007eac <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7eac:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7eae:	c8 95       	lpm
    7eb0:	c8 95       	lpm
		Wait200ns();
    7eb2:	c8 95       	lpm
    7eb4:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7eb6:	12 98       	cbi	0x02, 2	; 2
    7eb8:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7eba:	80 e0       	ldi	r24, 0x00	; 0
    7ebc:	90 e0       	ldi	r25, 0x00	; 0
    7ebe:	20 e0       	ldi	r18, 0x00	; 0
    7ec0:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7ec2:	36 95       	lsr	r19
    7ec4:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7ec6:	96 95       	lsr	r25
    7ec8:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7eca:	c8 95       	lpm
    7ecc:	c8 95       	lpm
			Wait200ns();
    7ece:	c8 95       	lpm
    7ed0:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7ed2:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7ed4:	00 9b       	sbis	0x00, 0	; 0
    7ed6:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7ed8:	01 9b       	sbis	0x00, 1	; 0
    7eda:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7edc:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7ede:	c8 95       	lpm
    7ee0:	c8 95       	lpm
			Wait200ns();
    7ee2:	c8 95       	lpm
    7ee4:	c8 95       	lpm
    7ee6:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7ee8:	61 f7       	brne	.-40     	; 0x7ec2 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7eea:	30 93 c0 0c 	sts	0x0CC0, r19
    7eee:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    7ef2:	90 93 c4 0c 	sts	0x0CC4, r25
    7ef6:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7efa:	80 91 bf 0c 	lds	r24, 0x0CBF
    7efe:	90 91 c0 0c 	lds	r25, 0x0CC0
    7f02:	0f 97       	sbiw	r24, 0x0f	; 15
    7f04:	31 f0       	breq	.+12     	; 0x7f12 <ReadButtons+0x66>
    7f06:	80 91 c3 0c 	lds	r24, 0x0CC3
    7f0a:	90 91 c4 0c 	lds	r25, 0x0CC4
    7f0e:	0f 97       	sbiw	r24, 0x0f	; 15
    7f10:	11 f4       	brne	.+4      	; 0x7f16 <ReadButtons+0x6a>
		SoftReset();
    7f12:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <SoftReset>
    7f16:	08 95       	ret

00007f18 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7f18:	10 92 ff 0c 	sts	0x0CFF, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7f1c:	00 99       	sbic	0x00, 0	; 0
    7f1e:	03 c0       	rjmp	.+6      	; 0x7f26 <ReadControllers+0xe>
    7f20:	81 e0       	ldi	r24, 0x01	; 1
    7f22:	80 93 ff 0c 	sts	0x0CFF, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7f26:	01 99       	sbic	0x00, 1	; 0
    7f28:	05 c0       	rjmp	.+10     	; 0x7f34 <ReadControllers+0x1c>
    7f2a:	80 91 ff 0c 	lds	r24, 0x0CFF
    7f2e:	82 60       	ori	r24, 0x02	; 2
    7f30:	80 93 ff 0c 	sts	0x0CFF, r24
			
	//read the standard buttons
	ReadButtons();
    7f34:	0c 94 56 3f 	jmp	0x7eac	; 0x7eac <ReadButtons>

00007f38 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7f38:	cf 93       	push	r28
    7f3a:	df 93       	push	r29
    7f3c:	c0 e0       	ldi	r28, 0x00	; 0
    7f3e:	d0 e0       	ldi	r29, 0x00	; 0
    7f40:	fe 01       	movw	r30, r28
    7f42:	ec 53       	subi	r30, 0x3C	; 60
    7f44:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7f46:	64 91       	lpm	r22, Z
    7f48:	ce 01       	movw	r24, r28
    7f4a:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <WriteEeprom>
    7f4e:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7f50:	c0 32       	cpi	r28, 0x20	; 32
    7f52:	d1 05       	cpc	r29, r1
    7f54:	a9 f7       	brne	.-22     	; 0x7f40 <FormatEeprom+0x8>
    7f56:	c0 e2       	ldi	r28, 0x20	; 32
    7f58:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7f5a:	6f ef       	ldi	r22, 0xFF	; 255
    7f5c:	ce 01       	movw	r24, r28
    7f5e:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7f62:	6f ef       	ldi	r22, 0xFF	; 255
    7f64:	ce 01       	movw	r24, r28
    7f66:	01 96       	adiw	r24, 0x01	; 1
    7f68:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7f6c:	a0 96       	adiw	r28, 0x20	; 32
    7f6e:	c1 15       	cp	r28, r1
    7f70:	88 e0       	ldi	r24, 0x08	; 8
    7f72:	d8 07       	cpc	r29, r24
    7f74:	91 f7       	brne	.-28     	; 0x7f5a <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7f76:	df 91       	pop	r29
    7f78:	cf 91       	pop	r28
    7f7a:	08 95       	ret

00007f7c <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7f7c:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7f7e:	80 e0       	ldi	r24, 0x00	; 0
    7f80:	90 e0       	ldi	r25, 0x00	; 0
    7f82:	0e 94 f3 3e 	call	0x7de6	; 0x7de6 <ReadEeprom>
    7f86:	c8 2f       	mov	r28, r24
    7f88:	81 e0       	ldi	r24, 0x01	; 1
    7f8a:	90 e0       	ldi	r25, 0x00	; 0
    7f8c:	0e 94 f3 3e 	call	0x7de6	; 0x7de6 <ReadEeprom>
    7f90:	28 2f       	mov	r18, r24
    7f92:	30 e0       	ldi	r19, 0x00	; 0
    7f94:	32 2f       	mov	r19, r18
    7f96:	22 27       	eor	r18, r18
    7f98:	2c 0f       	add	r18, r28
    7f9a:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7f9c:	81 e0       	ldi	r24, 0x01	; 1
    7f9e:	2a 35       	cpi	r18, 0x5A	; 90
    7fa0:	35 45       	sbci	r19, 0x55	; 85
    7fa2:	09 f0       	breq	.+2      	; 0x7fa6 <isEepromFormatted+0x2a>
    7fa4:	80 e0       	ldi	r24, 0x00	; 0
}
    7fa6:	cf 91       	pop	r28
    7fa8:	08 95       	ret

00007faa <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7faa:	00 97       	sbiw	r24, 0x00	; 0
    7fac:	21 f0       	breq	.+8      	; 0x7fb6 <GetPrngNumber+0xc>
    7fae:	90 93 cd 0c 	sts	0x0CCD, r25
    7fb2:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7fb6:	20 91 cc 0c 	lds	r18, 0x0CCC
    7fba:	30 91 cd 0c 	lds	r19, 0x0CCD
    7fbe:	a9 01       	movw	r20, r18
    7fc0:	56 95       	lsr	r21
    7fc2:	47 95       	ror	r20
    7fc4:	56 95       	lsr	r21
    7fc6:	47 95       	ror	r20
    7fc8:	c9 01       	movw	r24, r18
    7fca:	63 e0       	ldi	r22, 0x03	; 3
    7fcc:	96 95       	lsr	r25
    7fce:	87 95       	ror	r24
    7fd0:	6a 95       	dec	r22
    7fd2:	e1 f7       	brne	.-8      	; 0x7fcc <GetPrngNumber+0x22>
    7fd4:	84 27       	eor	r24, r20
    7fd6:	95 27       	eor	r25, r21
    7fd8:	82 27       	eor	r24, r18
    7fda:	93 27       	eor	r25, r19
    7fdc:	a9 01       	movw	r20, r18
    7fde:	75 e0       	ldi	r23, 0x05	; 5
    7fe0:	56 95       	lsr	r21
    7fe2:	47 95       	ror	r20
    7fe4:	7a 95       	dec	r23
    7fe6:	e1 f7       	brne	.-8      	; 0x7fe0 <GetPrngNumber+0x36>
    7fe8:	84 27       	eor	r24, r20
    7fea:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    7fec:	99 27       	eor	r25, r25
    7fee:	86 95       	lsr	r24
    7ff0:	97 95       	ror	r25
    7ff2:	88 27       	eor	r24, r24
    7ff4:	36 95       	lsr	r19
    7ff6:	27 95       	ror	r18
    7ff8:	82 2b       	or	r24, r18
    7ffa:	93 2b       	or	r25, r19
    7ffc:	90 93 cd 0c 	sts	0x0CCD, r25
    8000:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    8004:	08 95       	ret

00008006 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8006:	fc 01       	movw	r30, r24
    8008:	67 87       	std	Z+15, r22	; 0x0f
    800a:	08 95       	ret

0000800c <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    800c:	e0 ed       	ldi	r30, 0xD0	; 208
    800e:	fc e0       	ldi	r31, 0x0C	; 12
    8010:	81 e0       	ldi	r24, 0x01	; 1
    8012:	91 e0       	ldi	r25, 0x01	; 1
    8014:	95 8b       	std	Z+21, r25	; 0x15
    8016:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8018:	63 8b       	std	Z+19, r22	; 0x13
    801a:	08 95       	ret

0000801c <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    801c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    801e:	90 81       	ld	r25, Z
    8020:	9f 75       	andi	r25, 0x5F	; 95
    8022:	90 83       	st	Z, r25
    8024:	08 95       	ret

00008026 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8026:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8028:	90 81       	ld	r25, Z
    802a:	90 64       	ori	r25, 0x40	; 64
    802c:	90 83       	st	Z, r25
    802e:	08 95       	ret

00008030 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8030:	fc 01       	movw	r30, r24
    8032:	66 87       	std	Z+14, r22	; 0x0e
    8034:	08 95       	ret

00008036 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8036:	fc 01       	movw	r30, r24
    8038:	62 87       	std	Z+10, r22	; 0x0a
    803a:	08 95       	ret

0000803c <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    803c:	fc 01       	movw	r30, r24
    803e:	63 87       	std	Z+11, r22	; 0x0b
    8040:	08 95       	ret

00008042 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8042:	cf 93       	push	r28
    8044:	df 93       	push	r29
    8046:	ec 01       	movw	r28, r24
    8048:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    804a:	29 81       	ldd	r18, Y+1	; 0x01
    804c:	30 e0       	ldi	r19, 0x00	; 0
    804e:	f9 01       	movw	r30, r18
    8050:	ee 0f       	add	r30, r30
    8052:	ff 1f       	adc	r31, r31
    8054:	e8 5f       	subi	r30, 0xF8	; 248
    8056:	f5 47       	sbci	r31, 0x75	; 117
    8058:	65 91       	lpm	r22, Z+
    805a:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    805c:	f9 01       	movw	r30, r18
    805e:	e4 0f       	add	r30, r20
    8060:	f1 1d       	adc	r31, r1
    8062:	47 fd       	sbrc	r20, 7
    8064:	fa 95       	dec	r31
    8066:	ee 0f       	add	r30, r30
    8068:	ff 1f       	adc	r31, r31
    806a:	e8 5f       	subi	r30, 0xF8	; 248
    806c:	f5 47       	sbci	r31, 0x75	; 117
    806e:	85 91       	lpm	r24, Z+
    8070:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8072:	86 1b       	sub	r24, r22
    8074:	97 0b       	sbc	r25, r23
    8076:	68 85       	ldd	r22, Y+8	; 0x08
    8078:	70 e0       	ldi	r23, 0x00	; 0
    807a:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
	if(delta==0)delta++;
    807e:	61 15       	cp	r22, r1
    8080:	71 05       	cpc	r23, r1
    8082:	11 f4       	brne	.+4      	; 0x8088 <PatchCommand11+0x46>
    8084:	61 e0       	ldi	r22, 0x01	; 1
    8086:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8088:	ea 81       	ldd	r30, Y+2	; 0x02
    808a:	86 e0       	ldi	r24, 0x06	; 6
    808c:	e8 9f       	mul	r30, r24
    808e:	f0 01       	movw	r30, r0
    8090:	11 24       	eor	r1, r1
    8092:	e0 53       	subi	r30, 0x30	; 48
    8094:	f3 4f       	sbci	r31, 0xF3	; 243
    8096:	81 81       	ldd	r24, Z+1	; 0x01
    8098:	92 81       	ldd	r25, Z+2	; 0x02
    809a:	86 0f       	add	r24, r22
    809c:	97 1f       	adc	r25, r23
    809e:	92 83       	std	Z+2, r25	; 0x02
    80a0:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    80a2:	7e 83       	std	Y+6, r23	; 0x06
    80a4:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    80a6:	88 81       	ld	r24, Y
    80a8:	88 60       	ori	r24, 0x08	; 8
    80aa:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    80ac:	89 81       	ldd	r24, Y+1	; 0x01
    80ae:	48 0f       	add	r20, r24
    80b0:	4f 83       	std	Y+7, r20	; 0x07
}
    80b2:	df 91       	pop	r29
    80b4:	cf 91       	pop	r28
    80b6:	08 95       	ret

000080b8 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    80b8:	fc 01       	movw	r30, r24
    80ba:	60 87       	std	Z+8, r22	; 0x08
    80bc:	08 95       	ret

000080be <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    80be:	fc 01       	movw	r30, r24
    80c0:	64 83       	std	Z+4, r22	; 0x04
    80c2:	08 95       	ret

000080c4 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    80c4:	fc 01       	movw	r30, r24
    80c6:	82 81       	ldd	r24, Z+2	; 0x02
    80c8:	0c 94 84 44 	jmp	0x8908	; 0x8908 <SetMixerWave>

000080cc <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    80cc:	fc 01       	movw	r30, r24
	track->note+=param;
    80ce:	91 81       	ldd	r25, Z+1	; 0x01
    80d0:	69 0f       	add	r22, r25
    80d2:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    80d4:	82 81       	ldd	r24, Z+2	; 0x02
    80d6:	0c 94 6d 44 	jmp	0x88da	; 0x88da <SetMixerNote>

000080da <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    80da:	fc 01       	movw	r30, r24
	track->note-=param;
    80dc:	91 81       	ldd	r25, Z+1	; 0x01
    80de:	96 1b       	sub	r25, r22
    80e0:	69 2f       	mov	r22, r25
    80e2:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    80e4:	82 81       	ldd	r24, Z+2	; 0x02
    80e6:	0c 94 6d 44 	jmp	0x88da	; 0x88da <SetMixerNote>

000080ea <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    80ea:	1f 93       	push	r17
    80ec:	cf 93       	push	r28
    80ee:	df 93       	push	r29
    80f0:	ec 01       	movw	r28, r24
    80f2:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    80f4:	8a 81       	ldd	r24, Y+2	; 0x02
    80f6:	0e 94 6d 44 	call	0x88da	; 0x88da <SetMixerNote>
	track->note=param;
    80fa:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    80fc:	88 81       	ld	r24, Y
    80fe:	87 7f       	andi	r24, 0xF7	; 247
    8100:	88 83       	st	Y, r24
}
    8102:	df 91       	pop	r29
    8104:	cf 91       	pop	r28
    8106:	1f 91       	pop	r17
    8108:	08 95       	ret

0000810a <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    810a:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    810c:	14 96       	adiw	r26, 0x04	; 4
    810e:	8c 91       	ld	r24, X
    8110:	14 97       	sbiw	r26, 0x04	; 4
    8112:	88 23       	and	r24, r24
    8114:	19 f1       	breq	.+70     	; 0x815c <PatchCommand14+0x52>
    8116:	55 96       	adiw	r26, 0x15	; 21
    8118:	2d 91       	ld	r18, X+
    811a:	3c 91       	ld	r19, X
    811c:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    811e:	66 23       	and	r22, r22
    8120:	79 f0       	breq	.+30     	; 0x8140 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8122:	77 27       	eor	r23, r23
    8124:	67 fd       	sbrc	r22, 7
    8126:	70 95       	com	r23
    8128:	6f 5f       	subi	r22, 0xFF	; 255
    812a:	7f 4f       	sbci	r23, 0xFF	; 255
    812c:	ab 01       	movw	r20, r22
    812e:	44 0f       	add	r20, r20
    8130:	55 1f       	adc	r21, r21
    8132:	64 0f       	add	r22, r20
    8134:	75 1f       	adc	r23, r21
    8136:	26 1b       	sub	r18, r22
    8138:	37 0b       	sbc	r19, r23
    813a:	09 c0       	rjmp	.+18     	; 0x814e <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    813c:	ef 3f       	cpi	r30, 0xFF	; 255
    813e:	39 f0       	breq	.+14     	; 0x814e <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8140:	23 50       	subi	r18, 0x03	; 3
    8142:	31 09       	sbc	r19, r1
    8144:	f9 01       	movw	r30, r18
    8146:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8148:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    814a:	ed 30       	cpi	r30, 0x0D	; 13
    814c:	b9 f7       	brne	.-18     	; 0x813c <PatchCommand14+0x32>
    814e:	56 96       	adiw	r26, 0x16	; 22
    8150:	3c 93       	st	X, r19
    8152:	2e 93       	st	-X, r18
    8154:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    8156:	81 50       	subi	r24, 0x01	; 1
    8158:	14 96       	adiw	r26, 0x04	; 4
    815a:	8c 93       	st	X, r24
    815c:	08 95       	ret

0000815e <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    815e:	90 93 78 0d 	sts	0x0D78, r25
    8162:	80 93 77 0d 	sts	0x0D77, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8166:	8f e6       	ldi	r24, 0x6F	; 111
    8168:	80 93 7a 0d 	sts	0x0D7A, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    816c:	10 92 ce 0c 	sts	0x0CCE, r1
    8170:	e2 e1       	ldi	r30, 0x12	; 18
    8172:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8174:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8176:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8178:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    817a:	28 e1       	ldi	r18, 0x18	; 24
    817c:	df 01       	movw	r26, r30
    817e:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8180:	8c 93       	st	X, r24
    8182:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8184:	9c 93       	st	X, r25
    8186:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8188:	1c 92       	st	X, r1
    818a:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    818c:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    818e:	10 82       	st	Z, r1
    8190:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8192:	2c 93       	st	X, r18
    8194:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8196:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8198:	8f 5f       	subi	r24, 0xFF	; 255
    819a:	77 96       	adiw	r30, 0x17	; 23
    819c:	85 30       	cpi	r24, 0x05	; 5
    819e:	71 f7       	brne	.-36     	; 0x817c <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    81a0:	08 95       	ret

000081a2 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    81a2:	e2 e0       	ldi	r30, 0x02	; 2
    81a4:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    81a6:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    81a8:	20 81       	ld	r18, Z
    81aa:	2f 77       	andi	r18, 0x7F	; 127
    81ac:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    81ae:	33 83       	std	Z+3, r19	; 0x03
    81b0:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    81b2:	2d e0       	ldi	r18, 0x0D	; 13
    81b4:	e5 37       	cpi	r30, 0x75	; 117
    81b6:	f2 07       	cpc	r31, r18
    81b8:	b9 f7       	brne	.-18     	; 0x81a8 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    81ba:	01 96       	adiw	r24, 0x01	; 1
    81bc:	90 93 7f 0d 	sts	0x0D7F, r25
    81c0:	80 93 7e 0d 	sts	0x0D7E, r24
		songStart=song+1;//skip first delta-time
    81c4:	90 93 01 0d 	sts	0x0D01, r25
    81c8:	80 93 00 0d 	sts	0x0D00, r24
		loopStart=song+1;
    81cc:	90 93 81 0d 	sts	0x0D81, r25
    81d0:	80 93 80 0d 	sts	0x0D80, r24
		nextDeltaTime=0;
    81d4:	10 92 7c 0d 	sts	0x0D7C, r1
    81d8:	10 92 7b 0d 	sts	0x0D7B, r1
		currDeltaTime=0;
    81dc:	10 92 76 0d 	sts	0x0D76, r1
    81e0:	10 92 75 0d 	sts	0x0D75, r1
		songSpeed=0;
    81e4:	10 92 7d 0d 	sts	0x0D7D, r1

		lastStatus=0;
    81e8:	10 92 79 0d 	sts	0x0D79, r1
		playSong=true;
    81ec:	81 e0       	ldi	r24, 0x01	; 1
    81ee:	80 93 ce 0c 	sts	0x0CCE, r24
    81f2:	08 95       	ret

000081f4 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    81f4:	e2 e0       	ldi	r30, 0x02	; 2
    81f6:	fd e0       	ldi	r31, 0x0D	; 13
    81f8:	8a ef       	ldi	r24, 0xFA	; 250
    81fa:	87 87       	std	Z+15, r24	; 0x0f
    81fc:	86 a3       	std	Z+38, r24	; 0x26
    81fe:	80 93 3f 0d 	sts	0x0D3F, r24
    8202:	80 93 56 0d 	sts	0x0D56, r24
    8206:	80 93 6d 0d 	sts	0x0D6D, r24
	}

	playSong=false;
    820a:	10 92 ce 0c 	sts	0x0CCE, r1
    820e:	08 95       	ret

00008210 <ResumeSong>:
}


void ResumeSong(){
	playSong=true;
    8210:	81 e0       	ldi	r24, 0x01	; 1
    8212:	80 93 ce 0c 	sts	0x0CCE, r24
    8216:	08 95       	ret

00008218 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8218:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    821a:	ed 91       	ld	r30, X+
    821c:	fc 91       	ld	r31, X
    821e:	11 97       	sbiw	r26, 0x01	; 1
    8220:	9f 01       	movw	r18, r30
    8222:	2f 5f       	subi	r18, 0xFF	; 255
    8224:	3f 4f       	sbci	r19, 0xFF	; 255
    8226:	11 96       	adiw	r26, 0x01	; 1
    8228:	3c 93       	st	X, r19
    822a:	2e 93       	st	-X, r18
    822c:	e4 91       	lpm	r30, Z
    822e:	e7 fd       	sbrc	r30, 7
    8230:	03 c0       	rjmp	.+6      	; 0x8238 <ReadVarLen+0x20>
    8232:	8e 2f       	mov	r24, r30
    8234:	90 e0       	ldi	r25, 0x00	; 0
    8236:	08 95       	ret
    {
       value &= 0x7F;
    8238:	ef 77       	andi	r30, 0x7F	; 127
    823a:	8e 2f       	mov	r24, r30
    823c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    823e:	96 95       	lsr	r25
    8240:	98 2f       	mov	r25, r24
    8242:	88 27       	eor	r24, r24
    8244:	97 95       	ror	r25
    8246:	87 95       	ror	r24
    8248:	2f 5f       	subi	r18, 0xFF	; 255
    824a:	3f 4f       	sbci	r19, 0xFF	; 255
    824c:	f9 01       	movw	r30, r18
    824e:	31 97       	sbiw	r30, 0x01	; 1
    8250:	e4 91       	lpm	r30, Z
    8252:	4e 2f       	mov	r20, r30
    8254:	4f 77       	andi	r20, 0x7F	; 127
    8256:	84 0f       	add	r24, r20
    8258:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    825a:	e7 fd       	sbrc	r30, 7
    825c:	f0 cf       	rjmp	.-32     	; 0x823e <ReadVarLen+0x26>
    825e:	2d 93       	st	X+, r18
    8260:	3c 93       	st	X, r19
    }


    return value;
}
    8262:	08 95       	ret

00008264 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8264:	ef 92       	push	r14
    8266:	ff 92       	push	r15
    8268:	0f 93       	push	r16
    826a:	1f 93       	push	r17
    826c:	cf 93       	push	r28
    826e:	df 93       	push	r29
    8270:	1f 92       	push	r1
    8272:	cd b7       	in	r28, 0x3d	; 61
    8274:	de b7       	in	r29, 0x3e	; 62
    8276:	7c 01       	movw	r14, r24
    8278:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    827a:	fc 01       	movw	r30, r24
    827c:	80 81       	ld	r24, Z
    827e:	08 2f       	mov	r16, r24
    8280:	00 1f       	adc	r16, r16
    8282:	00 27       	eor	r16, r16
    8284:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8286:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8288:	9f ef       	ldi	r25, 0xFF	; 255
    828a:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    828c:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    828e:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8290:	87 7b       	andi	r24, 0xB7	; 183
    8292:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8294:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8296:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8298:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    829a:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    829c:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    829e:	82 81       	ldd	r24, Z+2	; 0x02
    82a0:	83 30       	cpi	r24, 0x03	; 3
    82a2:	69 f4       	brne	.+26     	; 0x82be <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    82a4:	01 11       	cpse	r16, r1
    82a6:	01 c0       	rjmp	.+2      	; 0x82aa <TriggerCommon+0x46>
    82a8:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    82aa:	81 e0       	ldi	r24, 0x01	; 1
    82ac:	91 e0       	ldi	r25, 0x01	; 1
    82ae:	90 93 e5 0c 	sts	0x0CE5, r25
    82b2:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    82b6:	81 e0       	ldi	r24, 0x01	; 1
    82b8:	80 93 e3 0c 	sts	0x0CE3, r24
    82bc:	39 c0       	rjmp	.+114    	; 0x8330 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    82be:	84 30       	cpi	r24, 0x04	; 4
    82c0:	69 f5       	brne	.+90     	; 0x831c <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    82c2:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    82c6:	80 91 77 0d 	lds	r24, 0x0D77
    82ca:	90 91 78 0d 	lds	r25, 0x0D78
    82ce:	f9 e0       	ldi	r31, 0x09	; 9
    82d0:	6f 9f       	mul	r22, r31
    82d2:	80 0d       	add	r24, r0
    82d4:	91 1d       	adc	r25, r1
    82d6:	11 24       	eor	r1, r1
    82d8:	fc 01       	movw	r30, r24
    82da:	31 96       	adiw	r30, 0x01	; 1
    82dc:	a5 91       	lpm	r26, Z+
    82de:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    82e0:	b0 93 ed 0c 	sts	0x0CED, r27
    82e4:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    82e8:	ac 01       	movw	r20, r24
    82ea:	49 5f       	subi	r20, 0xF9	; 249
    82ec:	5f 4f       	sbci	r21, 0xFF	; 255
    82ee:	fa 01       	movw	r30, r20
    82f0:	65 91       	lpm	r22, Z+
    82f2:	74 91       	lpm	r23, Z
    82f4:	05 96       	adiw	r24, 0x05	; 5
    82f6:	fc 01       	movw	r30, r24
    82f8:	85 91       	lpm	r24, Z+
    82fa:	94 91       	lpm	r25, Z
    82fc:	68 1b       	sub	r22, r24
    82fe:	79 0b       	sbc	r23, r25
    8300:	70 93 ef 0c 	sts	0x0CEF, r23
    8304:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8308:	fa 01       	movw	r30, r20
    830a:	85 91       	lpm	r24, Z+
    830c:	94 91       	lpm	r25, Z
    830e:	a8 0f       	add	r26, r24
    8310:	b9 1f       	adc	r27, r25
    8312:	b0 93 f1 0c 	sts	0x0CF1, r27
    8316:	a0 93 f0 0c 	sts	0x0CF0, r26
    831a:	05 c0       	rjmp	.+10     	; 0x8326 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    831c:	60 e0       	ldi	r22, 0x00	; 0
    831e:	29 83       	std	Y+1, r18	; 0x01
    8320:	0e 94 84 44 	call	0x8908	; 0x8908 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8324:	29 81       	ldd	r18, Y+1	; 0x01
    8326:	62 2f       	mov	r22, r18
    8328:	f7 01       	movw	r30, r14
    832a:	82 81       	ldd	r24, Z+2	; 0x02
    832c:	0e 94 6d 44 	call	0x88da	; 0x88da <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8330:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8332:	00 23       	and	r16, r16
    8334:	11 f0       	breq	.+4      	; 0x833a <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8336:	11 8b       	std	Z+17, r17	; 0x11
    8338:	01 c0       	rjmp	.+2      	; 0x833c <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    833a:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    833c:	e0 91 77 0d 	lds	r30, 0x0D77
    8340:	f0 91 78 0d 	lds	r31, 0x0D78
    8344:	39 e0       	ldi	r19, 0x09	; 9
    8346:	13 9f       	mul	r17, r19
    8348:	e0 0d       	add	r30, r0
    834a:	f1 1d       	adc	r31, r1
    834c:	11 24       	eor	r1, r1
    834e:	33 96       	adiw	r30, 0x03	; 3
    8350:	85 91       	lpm	r24, Z+
    8352:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8354:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8356:	00 97       	sbiw	r24, 0x00	; 0
    8358:	19 f4       	brne	.+6      	; 0x8360 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    835a:	16 8a       	std	Z+22, r1	; 0x16
    835c:	15 8a       	std	Z+21, r1	; 0x15
    835e:	08 c0       	rjmp	.+16     	; 0x8370 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8360:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8362:	fc 01       	movw	r30, r24
    8364:	24 91       	lpm	r18, Z
    8366:	f7 01       	movw	r30, r14
    8368:	22 8b       	std	Z+18, r18	; 0x12
    836a:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    836c:	96 8b       	std	Z+22, r25	; 0x16
    836e:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8370:	0f 90       	pop	r0
    8372:	df 91       	pop	r29
    8374:	cf 91       	pop	r28
    8376:	1f 91       	pop	r17
    8378:	0f 91       	pop	r16
    837a:	ff 90       	pop	r15
    837c:	ef 90       	pop	r14
    837e:	08 95       	ret

00008380 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8380:	cf 93       	push	r28
    8382:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8384:	e0 91 77 0d 	lds	r30, 0x0D77
    8388:	f0 91 78 0d 	lds	r31, 0x0D78
    838c:	99 e0       	ldi	r25, 0x09	; 9
    838e:	89 9f       	mul	r24, r25
    8390:	e0 0d       	add	r30, r0
    8392:	f1 1d       	adc	r31, r1
    8394:	11 24       	eor	r1, r1
    8396:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8398:	e1 30       	cpi	r30, 0x01	; 1
    839a:	e9 f0       	breq	.+58     	; 0x83d6 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    839c:	e2 30       	cpi	r30, 0x02	; 2
    839e:	e9 f0       	breq	.+58     	; 0x83da <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    83a0:	20 91 19 0d 	lds	r18, 0x0D19
    83a4:	27 ff       	sbrs	r18, 7
    83a6:	1d c0       	rjmp	.+58     	; 0x83e2 <TriggerFx+0x62>
    83a8:	20 91 2a 0d 	lds	r18, 0x0D2A
    83ac:	28 13       	cpse	r18, r24
    83ae:	02 c0       	rjmp	.+4      	; 0x83b4 <TriggerFx+0x34>
    83b0:	41 11       	cpse	r20, r1
    83b2:	17 c0       	rjmp	.+46     	; 0x83e2 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    83b4:	20 91 30 0d 	lds	r18, 0x0D30
    83b8:	27 ff       	sbrs	r18, 7
    83ba:	11 c0       	rjmp	.+34     	; 0x83de <TriggerFx+0x5e>
    83bc:	20 91 41 0d 	lds	r18, 0x0D41
    83c0:	28 13       	cpse	r18, r24
    83c2:	02 c0       	rjmp	.+4      	; 0x83c8 <TriggerFx+0x48>
    83c4:	41 11       	cpse	r20, r1
    83c6:	0b c0       	rjmp	.+22     	; 0x83de <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    83c8:	20 91 2d 0d 	lds	r18, 0x0D2D
    83cc:	90 91 44 0d 	lds	r25, 0x0D44
    83d0:	92 17       	cp	r25, r18
    83d2:	28 f4       	brcc	.+10     	; 0x83de <TriggerFx+0x5e>
    83d4:	06 c0       	rjmp	.+12     	; 0x83e2 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    83d6:	c3 e0       	ldi	r28, 0x03	; 3
    83d8:	05 c0       	rjmp	.+10     	; 0x83e4 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    83da:	c4 e0       	ldi	r28, 0x04	; 4
    83dc:	03 c0       	rjmp	.+6      	; 0x83e4 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    83de:	c2 e0       	ldi	r28, 0x02	; 2
    83e0:	01 c0       	rjmp	.+2      	; 0x83e4 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    83e2:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    83e4:	97 e1       	ldi	r25, 0x17	; 23
    83e6:	c9 9f       	mul	r28, r25
    83e8:	e0 01       	movw	r28, r0
    83ea:	11 24       	eor	r1, r1
    83ec:	ce 5f       	subi	r28, 0xFE	; 254
    83ee:	d2 4f       	sbci	r29, 0xF2	; 242
    83f0:	90 e8       	ldi	r25, 0x80	; 128
    83f2:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    83f4:	1e 8a       	std	Y+22, r1	; 0x16
    83f6:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    83f8:	20 e5       	ldi	r18, 0x50	; 80
    83fa:	46 2f       	mov	r20, r22
    83fc:	68 2f       	mov	r22, r24
    83fe:	ce 01       	movw	r24, r28
    8400:	0e 94 32 41 	call	0x8264	; 0x8264 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8404:	88 81       	ld	r24, Y
    8406:	80 62       	ori	r24, 0x20	; 32
    8408:	88 83       	st	Y, r24
}
    840a:	df 91       	pop	r29
    840c:	cf 91       	pop	r28
    840e:	08 95       	ret

00008410 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8410:	cf 93       	push	r28
    8412:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8414:	a8 2f       	mov	r26, r24
    8416:	b0 e0       	ldi	r27, 0x00	; 0
    8418:	97 e1       	ldi	r25, 0x17	; 23
    841a:	89 9f       	mul	r24, r25
    841c:	f0 01       	movw	r30, r0
    841e:	11 24       	eor	r1, r1
    8420:	ee 5f       	subi	r30, 0xFE	; 254
    8422:	f2 4f       	sbci	r31, 0xF2	; 242
    8424:	80 81       	ld	r24, Z
    8426:	85 ff       	sbrs	r24, 5
    8428:	02 c0       	rjmp	.+4      	; 0x842e <TriggerNote+0x1e>
    842a:	87 fd       	sbrc	r24, 7
    842c:	2e c0       	rjmp	.+92     	; 0x848a <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    842e:	21 11       	cpse	r18, r1
    8430:	18 c0       	rjmp	.+48     	; 0x8462 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8432:	97 e1       	ldi	r25, 0x17	; 23
    8434:	9a 9f       	mul	r25, r26
    8436:	f0 01       	movw	r30, r0
    8438:	9b 9f       	mul	r25, r27
    843a:	f0 0d       	add	r31, r0
    843c:	11 24       	eor	r1, r1
    843e:	ee 5f       	subi	r30, 0xFE	; 254
    8440:	f2 4f       	sbci	r31, 0xF2	; 242
    8442:	97 85       	ldd	r25, Z+15	; 0x0f
    8444:	91 11       	cpse	r25, r1
    8446:	02 c0       	rjmp	.+4      	; 0x844c <TriggerNote+0x3c>
    8448:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    844a:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    844c:	97 e1       	ldi	r25, 0x17	; 23
    844e:	9a 9f       	mul	r25, r26
    8450:	f0 01       	movw	r30, r0
    8452:	9b 9f       	mul	r25, r27
    8454:	f0 0d       	add	r31, r0
    8456:	11 24       	eor	r1, r1
    8458:	ee 5f       	subi	r30, 0xFE	; 254
    845a:	f2 4f       	sbci	r31, 0xF2	; 242
    845c:	8f 7b       	andi	r24, 0xBF	; 191
    845e:	80 83       	st	Z, r24
    8460:	14 c0       	rjmp	.+40     	; 0x848a <TriggerNote+0x7a>
    8462:	82 2f       	mov	r24, r18
    8464:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8466:	97 e1       	ldi	r25, 0x17	; 23
    8468:	9a 9f       	mul	r25, r26
    846a:	e0 01       	movw	r28, r0
    846c:	9b 9f       	mul	r25, r27
    846e:	d0 0d       	add	r29, r0
    8470:	11 24       	eor	r1, r1
    8472:	ce 5f       	subi	r28, 0xFE	; 254
    8474:	d2 4f       	sbci	r29, 0xF2	; 242
    8476:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8478:	1e 8a       	std	Y+22, r1	; 0x16
    847a:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    847c:	48 2f       	mov	r20, r24
    847e:	ce 01       	movw	r24, r28
    8480:	0e 94 32 41 	call	0x8264	; 0x8264 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8484:	88 81       	ld	r24, Y
    8486:	80 62       	ori	r24, 0x20	; 32
    8488:	88 83       	st	Y, r24
		}

	}
}
    848a:	df 91       	pop	r29
    848c:	cf 91       	pop	r28
    848e:	08 95       	ret

00008490 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8490:	6f 92       	push	r6
    8492:	7f 92       	push	r7
    8494:	8f 92       	push	r8
    8496:	9f 92       	push	r9
    8498:	af 92       	push	r10
    849a:	bf 92       	push	r11
    849c:	cf 92       	push	r12
    849e:	df 92       	push	r13
    84a0:	ef 92       	push	r14
    84a2:	ff 92       	push	r15
    84a4:	0f 93       	push	r16
    84a6:	1f 93       	push	r17
    84a8:	cf 93       	push	r28
    84aa:	df 93       	push	r29
    84ac:	c2 e0       	ldi	r28, 0x02	; 2
    84ae:	dd e0       	ldi	r29, 0x0D	; 13
    84b0:	00 ed       	ldi	r16, 0xD0	; 208
    84b2:	1c e0       	ldi	r17, 0x0C	; 12
    84b4:	d8 01       	movw	r26, r16
    84b6:	9e 01       	movw	r18, r28
    84b8:	40 e0       	ldi	r20, 0x00	; 0
    84ba:	50 e0       	ldi	r21, 0x00	; 0
    84bc:	ca 01       	movw	r24, r20
    84be:	8e 5f       	subi	r24, 0xFE	; 254
    84c0:	92 4f       	sbci	r25, 0xF2	; 242
    84c2:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    84c4:	fc 01       	movw	r30, r24
    84c6:	87 85       	ldd	r24, Z+15	; 0x0f
    84c8:	88 23       	and	r24, r24
    84ca:	91 f0       	breq	.+36     	; 0x84f0 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    84cc:	66 85       	ldd	r22, Z+14	; 0x0e
    84ce:	99 27       	eor	r25, r25
    84d0:	87 fd       	sbrc	r24, 7
    84d2:	90 95       	com	r25
    84d4:	86 0f       	add	r24, r22
    84d6:	91 1d       	adc	r25, r1
    84d8:	8f 3f       	cpi	r24, 0xFF	; 255
    84da:	91 05       	cpc	r25, r1
    84dc:	19 f0       	breq	.+6      	; 0x84e4 <ProcessMusic+0x54>
    84de:	14 f0       	brlt	.+4      	; 0x84e4 <ProcessMusic+0x54>
    84e0:	8f ef       	ldi	r24, 0xFF	; 255
    84e2:	90 e0       	ldi	r25, 0x00	; 0
    84e4:	97 ff       	sbrs	r25, 7
    84e6:	02 c0       	rjmp	.+4      	; 0x84ec <ProcessMusic+0x5c>
    84e8:	80 e0       	ldi	r24, 0x00	; 0
    84ea:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    84ec:	f6 01       	movw	r30, r12
    84ee:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    84f0:	f9 01       	movw	r30, r18
    84f2:	f0 80       	ld	r15, Z
    84f4:	f3 fe       	sbrs	r15, 3
    84f6:	2a c0       	rjmp	.+84     	; 0x854c <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    84f8:	65 81       	ldd	r22, Z+5	; 0x05
    84fa:	76 81       	ldd	r23, Z+6	; 0x06
    84fc:	11 96       	adiw	r26, 0x01	; 1
    84fe:	8d 91       	ld	r24, X+
    8500:	9c 91       	ld	r25, X
    8502:	12 97       	sbiw	r26, 0x02	; 2
    8504:	86 0f       	add	r24, r22
    8506:	97 1f       	adc	r25, r23
    8508:	12 96       	adiw	r26, 0x02	; 2
    850a:	9c 93       	st	X, r25
    850c:	8e 93       	st	-X, r24
    850e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8510:	f6 01       	movw	r30, r12
    8512:	e7 80       	ldd	r14, Z+7	; 0x07
    8514:	ee 2d       	mov	r30, r14
    8516:	f0 e0       	ldi	r31, 0x00	; 0
    8518:	ee 0f       	add	r30, r30
    851a:	ff 1f       	adc	r31, r31
    851c:	e8 5f       	subi	r30, 0xF8	; 248
    851e:	f5 47       	sbci	r31, 0x75	; 117
    8520:	c5 90       	lpm	r12, Z+
    8522:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8524:	16 16       	cp	r1, r22
    8526:	17 06       	cpc	r1, r23
    8528:	24 f4       	brge	.+8      	; 0x8532 <ProcessMusic+0xa2>
    852a:	8c 15       	cp	r24, r12
    852c:	9d 05       	cpc	r25, r13
    852e:	30 f4       	brcc	.+12     	; 0x853c <ProcessMusic+0xac>
    8530:	0d c0       	rjmp	.+26     	; 0x854c <ProcessMusic+0xbc>
    8532:	67 2b       	or	r22, r23
    8534:	59 f0       	breq	.+22     	; 0x854c <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8536:	c8 16       	cp	r12, r24
    8538:	d9 06       	cpc	r13, r25
    853a:	40 f0       	brcs	.+16     	; 0x854c <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    853c:	12 96       	adiw	r26, 0x02	; 2
    853e:	dc 92       	st	X, r13
    8540:	ce 92       	st	-X, r12
    8542:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8544:	8f 2d       	mov	r24, r15
    8546:	87 7f       	andi	r24, 0xF7	; 247
    8548:	f9 01       	movw	r30, r18
    854a:	80 83       	st	Z, r24
    854c:	49 5e       	subi	r20, 0xE9	; 233
    854e:	5f 4f       	sbci	r21, 0xFF	; 255
    8550:	29 5e       	subi	r18, 0xE9	; 233
    8552:	3f 4f       	sbci	r19, 0xFF	; 255
    8554:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8556:	43 37       	cpi	r20, 0x73	; 115
    8558:	51 05       	cpc	r21, r1
    855a:	09 f0       	breq	.+2      	; 0x855e <ProcessMusic+0xce>
    855c:	af cf       	rjmp	.-162    	; 0x84bc <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    855e:	80 91 ce 0c 	lds	r24, 0x0CCE
    8562:	88 23       	and	r24, r24
    8564:	09 f4       	brne	.+2      	; 0x8568 <ProcessMusic+0xd8>
    8566:	cc c0       	rjmp	.+408    	; 0x8700 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8568:	57 e1       	ldi	r21, 0x17	; 23
    856a:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    856c:	80 91 75 0d 	lds	r24, 0x0D75
    8570:	90 91 76 0d 	lds	r25, 0x0D76
    8574:	20 91 7b 0d 	lds	r18, 0x0D7B
    8578:	30 91 7c 0d 	lds	r19, 0x0D7C
    857c:	82 17       	cp	r24, r18
    857e:	93 07       	cpc	r25, r19
    8580:	09 f0       	breq	.+2      	; 0x8584 <ProcessMusic+0xf4>
    8582:	b9 c0       	rjmp	.+370    	; 0x86f6 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8584:	20 91 7e 0d 	lds	r18, 0x0D7E
    8588:	30 91 7f 0d 	lds	r19, 0x0D7F
    858c:	b9 01       	movw	r22, r18
    858e:	6f 5f       	subi	r22, 0xFF	; 255
    8590:	7f 4f       	sbci	r23, 0xFF	; 255
    8592:	70 93 7f 0d 	sts	0x0D7F, r23
    8596:	60 93 7e 0d 	sts	0x0D7E, r22
    859a:	f9 01       	movw	r30, r18
    859c:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    859e:	4f 3f       	cpi	r20, 0xFF	; 255
    85a0:	79 f5       	brne	.+94     	; 0x8600 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    85a2:	a9 01       	movw	r20, r18
    85a4:	4e 5f       	subi	r20, 0xFE	; 254
    85a6:	5f 4f       	sbci	r21, 0xFF	; 255
    85a8:	50 93 7f 0d 	sts	0x0D7F, r21
    85ac:	40 93 7e 0d 	sts	0x0D7E, r20
    85b0:	fb 01       	movw	r30, r22
    85b2:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    85b4:	6f 32       	cpi	r22, 0x2F	; 47
    85b6:	19 f4       	brne	.+6      	; 0x85be <ProcessMusic+0x12e>
						playSong=false;
    85b8:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    85bc:	9c c0       	rjmp	.+312    	; 0x86f6 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    85be:	66 30       	cpi	r22, 0x06	; 6
    85c0:	09 f0       	breq	.+2      	; 0x85c4 <ProcessMusic+0x134>
    85c2:	8c c0       	rjmp	.+280    	; 0x86dc <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    85c4:	fa 01       	movw	r30, r20
    85c6:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    85c8:	c9 01       	movw	r24, r18
    85ca:	04 96       	adiw	r24, 0x04	; 4
    85cc:	90 93 7f 0d 	sts	0x0D7F, r25
    85d0:	80 93 7e 0d 	sts	0x0D7E, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    85d4:	f9 01       	movw	r30, r18
    85d6:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    85d8:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    85da:	e3 35       	cpi	r30, 0x53	; 83
    85dc:	29 f4       	brne	.+10     	; 0x85e8 <ProcessMusic+0x158>
							loopStart=songPos;
    85de:	90 93 81 0d 	sts	0x0D81, r25
    85e2:	80 93 80 0d 	sts	0x0D80, r24
    85e6:	7a c0       	rjmp	.+244    	; 0x86dc <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    85e8:	e5 34       	cpi	r30, 0x45	; 69
    85ea:	09 f0       	breq	.+2      	; 0x85ee <ProcessMusic+0x15e>
    85ec:	77 c0       	rjmp	.+238    	; 0x86dc <ProcessMusic+0x24c>
							songPos=loopStart;
    85ee:	80 91 80 0d 	lds	r24, 0x0D80
    85f2:	90 91 81 0d 	lds	r25, 0x0D81
    85f6:	90 93 7f 0d 	sts	0x0D7F, r25
    85fa:	80 93 7e 0d 	sts	0x0D7E, r24
    85fe:	6e c0       	rjmp	.+220    	; 0x86dc <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8600:	47 fd       	sbrc	r20, 7
    8602:	40 93 79 0d 	sts	0x0D79, r20
					channel=lastStatus&0x0f;
    8606:	90 91 79 0d 	lds	r25, 0x0D79
    860a:	89 2f       	mov	r24, r25
    860c:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    860e:	47 ff       	sbrs	r20, 7
    8610:	08 c0       	rjmp	.+16     	; 0x8622 <ProcessMusic+0x192>
    8612:	2e 5f       	subi	r18, 0xFE	; 254
    8614:	3f 4f       	sbci	r19, 0xFF	; 255
    8616:	30 93 7f 0d 	sts	0x0D7F, r19
    861a:	20 93 7e 0d 	sts	0x0D7E, r18
    861e:	fb 01       	movw	r30, r22
    8620:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8622:	90 7f       	andi	r25, 0xF0	; 240
    8624:	90 3b       	cpi	r25, 0xB0	; 176
    8626:	e1 f0       	breq	.+56     	; 0x8660 <ProcessMusic+0x1d0>
    8628:	90 3c       	cpi	r25, 0xC0	; 192
    862a:	09 f4       	brne	.+2      	; 0x862e <ProcessMusic+0x19e>
    862c:	51 c0       	rjmp	.+162    	; 0x86d0 <ProcessMusic+0x240>
    862e:	90 39       	cpi	r25, 0x90	; 144
    8630:	09 f0       	breq	.+2      	; 0x8634 <ProcessMusic+0x1a4>
    8632:	54 c0       	rjmp	.+168    	; 0x86dc <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8634:	e0 91 7e 0d 	lds	r30, 0x0D7E
    8638:	f0 91 7f 0d 	lds	r31, 0x0D7F
    863c:	9f 01       	movw	r18, r30
    863e:	2f 5f       	subi	r18, 0xFF	; 255
    8640:	3f 4f       	sbci	r19, 0xFF	; 255
    8642:	30 93 7f 0d 	sts	0x0D7F, r19
    8646:	20 93 7e 0d 	sts	0x0D7E, r18
    864a:	24 91       	lpm	r18, Z
    864c:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    864e:	f8 9e       	mul	r15, r24
    8650:	f0 01       	movw	r30, r0
    8652:	11 24       	eor	r1, r1
    8654:	ee 5f       	subi	r30, 0xFE	; 254
    8656:	f2 4f       	sbci	r31, 0xF2	; 242
    8658:	60 89       	ldd	r22, Z+16	; 0x10
    865a:	0e 94 08 42 	call	0x8410	; 0x8410 <TriggerNote>
    865e:	3e c0       	rjmp	.+124    	; 0x86dc <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8660:	e0 91 7e 0d 	lds	r30, 0x0D7E
    8664:	f0 91 7f 0d 	lds	r31, 0x0D7F
    8668:	9f 01       	movw	r18, r30
    866a:	2f 5f       	subi	r18, 0xFF	; 255
    866c:	3f 4f       	sbci	r19, 0xFF	; 255
    866e:	30 93 7f 0d 	sts	0x0D7F, r19
    8672:	20 93 7e 0d 	sts	0x0D7E, r18
    8676:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8678:	47 30       	cpi	r20, 0x07	; 7
    867a:	49 f4       	brne	.+18     	; 0x868e <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    867c:	f8 9e       	mul	r15, r24
    867e:	d0 01       	movw	r26, r0
    8680:	11 24       	eor	r1, r1
    8682:	ae 5f       	subi	r26, 0xFE	; 254
    8684:	b2 4f       	sbci	r27, 0xF2	; 242
    8686:	ee 0f       	add	r30, r30
    8688:	1c 96       	adiw	r26, 0x0c	; 12
    868a:	ec 93       	st	X, r30
    868c:	27 c0       	rjmp	.+78     	; 0x86dc <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    868e:	4b 30       	cpi	r20, 0x0B	; 11
    8690:	49 f4       	brne	.+18     	; 0x86a4 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8692:	f8 9e       	mul	r15, r24
    8694:	d0 01       	movw	r26, r0
    8696:	11 24       	eor	r1, r1
    8698:	ae 5f       	subi	r26, 0xFE	; 254
    869a:	b2 4f       	sbci	r27, 0xF2	; 242
    869c:	ee 0f       	add	r30, r30
    869e:	13 96       	adiw	r26, 0x03	; 3
    86a0:	ec 93       	st	X, r30
    86a2:	1c c0       	rjmp	.+56     	; 0x86dc <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    86a4:	4c 35       	cpi	r20, 0x5C	; 92
    86a6:	49 f4       	brne	.+18     	; 0x86ba <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    86a8:	f8 9e       	mul	r15, r24
    86aa:	d0 01       	movw	r26, r0
    86ac:	11 24       	eor	r1, r1
    86ae:	ae 5f       	subi	r26, 0xFE	; 254
    86b0:	b2 4f       	sbci	r27, 0xF2	; 242
    86b2:	ee 0f       	add	r30, r30
    86b4:	1a 96       	adiw	r26, 0x0a	; 10
    86b6:	ec 93       	st	X, r30
    86b8:	11 c0       	rjmp	.+34     	; 0x86dc <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    86ba:	44 36       	cpi	r20, 0x64	; 100
    86bc:	79 f4       	brne	.+30     	; 0x86dc <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    86be:	f8 9e       	mul	r15, r24
    86c0:	d0 01       	movw	r26, r0
    86c2:	11 24       	eor	r1, r1
    86c4:	ae 5f       	subi	r26, 0xFE	; 254
    86c6:	b2 4f       	sbci	r27, 0xF2	; 242
    86c8:	ee 0f       	add	r30, r30
    86ca:	1b 96       	adiw	r26, 0x0b	; 11
    86cc:	ec 93       	st	X, r30
    86ce:	06 c0       	rjmp	.+12     	; 0x86dc <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    86d0:	f8 9e       	mul	r15, r24
    86d2:	f0 01       	movw	r30, r0
    86d4:	11 24       	eor	r1, r1
    86d6:	ee 5f       	subi	r30, 0xFE	; 254
    86d8:	f2 4f       	sbci	r31, 0xF2	; 242
    86da:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    86dc:	8e e7       	ldi	r24, 0x7E	; 126
    86de:	9d e0       	ldi	r25, 0x0D	; 13
    86e0:	0e 94 0c 41 	call	0x8218	; 0x8218 <ReadVarLen>
    86e4:	90 93 7c 0d 	sts	0x0D7C, r25
    86e8:	80 93 7b 0d 	sts	0x0D7B, r24
				currDeltaTime=0;
    86ec:	10 92 76 0d 	sts	0x0D76, r1
    86f0:	10 92 75 0d 	sts	0x0D75, r1
    86f4:	3b cf       	rjmp	.-394    	; 0x856c <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    86f6:	01 96       	adiw	r24, 0x01	; 1
    86f8:	90 93 76 0d 	sts	0x0D76, r25
    86fc:	80 93 75 0d 	sts	0x0D75, r24
    8700:	9b e0       	ldi	r25, 0x0B	; 11
    8702:	a9 2e       	mov	r10, r25
    8704:	9d e0       	ldi	r25, 0x0D	; 13
    8706:	b9 2e       	mov	r11, r25
    8708:	25 e1       	ldi	r18, 0x15	; 21
    870a:	c2 2e       	mov	r12, r18
    870c:	2d e0       	ldi	r18, 0x0D	; 13
    870e:	d2 2e       	mov	r13, r18
    8710:	36 e1       	ldi	r19, 0x16	; 22
    8712:	e3 2e       	mov	r14, r19
    8714:	3d e0       	ldi	r19, 0x0D	; 13
    8716:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8718:	66 24       	eor	r6, r6
    871a:	6a 94       	dec	r6
    871c:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    871e:	88 81       	ld	r24, Y
    8720:	85 ff       	sbrs	r24, 5
    8722:	42 c0       	rjmp	.+132    	; 0x87a8 <ProcessMusic+0x318>
    8724:	2d 89       	ldd	r18, Y+21	; 0x15
    8726:	3e 89       	ldd	r19, Y+22	; 0x16
    8728:	23 2b       	or	r18, r19
    872a:	09 f4       	brne	.+2      	; 0x872e <ProcessMusic+0x29e>
    872c:	3d c0       	rjmp	.+122    	; 0x87a8 <ProcessMusic+0x318>
    872e:	86 fd       	sbrc	r24, 6
    8730:	3b c0       	rjmp	.+118    	; 0x87a8 <ProcessMusic+0x318>
    8732:	47 01       	movw	r8, r14
    8734:	f2 e0       	ldi	r31, 0x02	; 2
    8736:	8f 1a       	sub	r8, r31
    8738:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    873a:	d6 01       	movw	r26, r12
    873c:	9c 91       	ld	r25, X
    873e:	f4 01       	movw	r30, r8
    8740:	80 81       	ld	r24, Z
    8742:	98 13       	cpse	r25, r24
    8744:	2e c0       	rjmp	.+92     	; 0x87a2 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8746:	ed 89       	ldd	r30, Y+21	; 0x15
    8748:	fe 89       	ldd	r31, Y+22	; 0x16
    874a:	bf 01       	movw	r22, r30
    874c:	6f 5f       	subi	r22, 0xFF	; 255
    874e:	7f 4f       	sbci	r23, 0xFF	; 255
    8750:	7e 8b       	std	Y+22, r23	; 0x16
    8752:	6d 8b       	std	Y+21, r22	; 0x15
    8754:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8756:	8f 3f       	cpi	r24, 0xFF	; 255
    8758:	31 f4       	brne	.+12     	; 0x8766 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    875a:	88 81       	ld	r24, Y
    875c:	8f 77       	andi	r24, 0x7F	; 127
    875e:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8760:	1e 8a       	std	Y+22, r1	; 0x16
    8762:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8764:	1e c0       	rjmp	.+60     	; 0x87a2 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8766:	9f 01       	movw	r18, r30
    8768:	2e 5f       	subi	r18, 0xFE	; 254
    876a:	3f 4f       	sbci	r19, 0xFF	; 255
    876c:	3e 8b       	std	Y+22, r19	; 0x16
    876e:	2d 8b       	std	Y+21, r18	; 0x15
    8770:	fb 01       	movw	r30, r22
    8772:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8774:	e8 2f       	mov	r30, r24
    8776:	f0 e0       	ldi	r31, 0x00	; 0
    8778:	ee 0f       	add	r30, r30
    877a:	ff 1f       	adc	r31, r31
    877c:	ec 51       	subi	r30, 0x1C	; 28
    877e:	ff 4f       	sbci	r31, 0xFF	; 255
    8780:	25 91       	lpm	r18, Z+
    8782:	34 91       	lpm	r19, Z
    8784:	ce 01       	movw	r24, r28
    8786:	f9 01       	movw	r30, r18
    8788:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    878a:	ed 89       	ldd	r30, Y+21	; 0x15
    878c:	fe 89       	ldd	r31, Y+22	; 0x16
    878e:	cf 01       	movw	r24, r30
    8790:	01 96       	adiw	r24, 0x01	; 1
    8792:	9e 8b       	std	Y+22, r25	; 0x16
    8794:	8d 8b       	std	Y+21, r24	; 0x15
    8796:	e4 91       	lpm	r30, Z
    8798:	d4 01       	movw	r26, r8
    879a:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    879c:	f6 01       	movw	r30, r12
    879e:	10 82       	st	Z, r1
    87a0:	cc cf       	rjmp	.-104    	; 0x873a <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    87a2:	9f 5f       	subi	r25, 0xFF	; 255
    87a4:	d6 01       	movw	r26, r12
    87a6:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    87a8:	98 81       	ld	r25, Y
    87aa:	95 ff       	sbrs	r25, 5
    87ac:	6c c0       	rjmp	.+216    	; 0x8886 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    87ae:	f7 01       	movw	r30, r14
    87b0:	80 81       	ld	r24, Z
    87b2:	8f 3f       	cpi	r24, 0xFF	; 255
    87b4:	11 f0       	breq	.+4      	; 0x87ba <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    87b6:	8f 5f       	subi	r24, 0xFF	; 255
    87b8:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    87ba:	97 fd       	sbrc	r25, 7
    87bc:	04 c0       	rjmp	.+8      	; 0x87c6 <ProcessMusic+0x336>
    87be:	f7 01       	movw	r30, r14
    87c0:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    87c2:	90 81       	ld	r25, Z
    87c4:	01 c0       	rjmp	.+2      	; 0x87c8 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    87c6:	9f ef       	ldi	r25, 0xFF	; 255
    87c8:	f7 01       	movw	r30, r14
    87ca:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    87cc:	80 81       	ld	r24, Z
    87ce:	88 23       	and	r24, r24
    87d0:	09 f4       	brne	.+2      	; 0x87d4 <ProcessMusic+0x344>
    87d2:	4e c0       	rjmp	.+156    	; 0x8870 <ProcessMusic+0x3e0>
    87d4:	31 96       	adiw	r30, 0x01	; 1
    87d6:	50 81       	ld	r21, Z
    87d8:	55 23       	and	r21, r21
    87da:	09 f4       	brne	.+2      	; 0x87de <ProcessMusic+0x34e>
    87dc:	49 c0       	rjmp	.+146    	; 0x8870 <ProcessMusic+0x3e0>
    87de:	99 23       	and	r25, r25
    87e0:	09 f4       	brne	.+2      	; 0x87e4 <ProcessMusic+0x354>
    87e2:	46 c0       	rjmp	.+140    	; 0x8870 <ProcessMusic+0x3e0>
    87e4:	40 91 7a 0d 	lds	r20, 0x0D7A
    87e8:	44 23       	and	r20, r20
    87ea:	09 f4       	brne	.+2      	; 0x87ee <ProcessMusic+0x35e>
    87ec:	41 c0       	rjmp	.+130    	; 0x8870 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    87ee:	89 9f       	mul	r24, r25
    87f0:	c0 01       	movw	r24, r0
    87f2:	11 24       	eor	r1, r1
    87f4:	93 95       	inc	r25
				uVol>>=8;
    87f6:	89 2f       	mov	r24, r25
    87f8:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    87fa:	58 9f       	mul	r21, r24
    87fc:	90 01       	movw	r18, r0
    87fe:	59 9f       	mul	r21, r25
    8800:	30 0d       	add	r19, r0
    8802:	11 24       	eor	r1, r1
    8804:	c9 01       	movw	r24, r18
    8806:	93 95       	inc	r25
				uVol>>=8;
    8808:	89 2f       	mov	r24, r25
    880a:	99 27       	eor	r25, r25
    880c:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    880e:	50 81       	ld	r21, Z
    8810:	58 9f       	mul	r21, r24
    8812:	90 01       	movw	r18, r0
    8814:	59 9f       	mul	r21, r25
    8816:	30 0d       	add	r19, r0
    8818:	11 24       	eor	r1, r1
    881a:	33 95       	inc	r19
					uVol>>=8;
    881c:	23 2f       	mov	r18, r19
    881e:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8820:	42 9f       	mul	r20, r18
    8822:	c0 01       	movw	r24, r0
    8824:	43 9f       	mul	r20, r19
    8826:	90 0d       	add	r25, r0
    8828:	11 24       	eor	r1, r1
    882a:	93 95       	inc	r25
				uVol>>=8;
    882c:	89 2f       	mov	r24, r25
    882e:	99 27       	eor	r25, r25
    8830:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8832:	20 81       	ld	r18, Z
    8834:	22 23       	and	r18, r18
    8836:	f1 f0       	breq	.+60     	; 0x8874 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8838:	d5 01       	movw	r26, r10
    883a:	ec 91       	ld	r30, X
    883c:	f0 e0       	ldi	r31, 0x00	; 0
    883e:	e0 50       	subi	r30, 0x00	; 0
    8840:	f4 47       	sbci	r31, 0x74	; 116
    8842:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8844:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8846:	2e 9f       	mul	r18, r30
    8848:	f0 01       	movw	r30, r0
    884a:	11 24       	eor	r1, r1
    884c:	f3 95       	inc	r31
					tVol>>=8;
    884e:	ef 2f       	mov	r30, r31
    8850:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8852:	a3 01       	movw	r20, r6
    8854:	4e 1b       	sub	r20, r30
    8856:	5f 0b       	sbc	r21, r31
    8858:	48 9f       	mul	r20, r24
    885a:	90 01       	movw	r18, r0
    885c:	49 9f       	mul	r20, r25
    885e:	30 0d       	add	r19, r0
    8860:	58 9f       	mul	r21, r24
    8862:	30 0d       	add	r19, r0
    8864:	11 24       	eor	r1, r1
    8866:	c9 01       	movw	r24, r18
    8868:	93 95       	inc	r25
					uVol>>=8;
    886a:	89 2f       	mov	r24, r25
    886c:	99 27       	eor	r25, r25
    886e:	02 c0       	rjmp	.+4      	; 0x8874 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8870:	80 e0       	ldi	r24, 0x00	; 0
    8872:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8874:	f5 01       	movw	r30, r10
    8876:	30 81       	ld	r19, Z
    8878:	f7 01       	movw	r30, r14
    887a:	39 97       	sbiw	r30, 0x09	; 9
    887c:	20 81       	ld	r18, Z
    887e:	23 0f       	add	r18, r19
    8880:	d5 01       	movw	r26, r10
    8882:	2c 93       	st	X, r18
    8884:	02 c0       	rjmp	.+4      	; 0x888a <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8886:	80 e0       	ldi	r24, 0x00	; 0
    8888:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    888a:	f8 01       	movw	r30, r16
    888c:	80 83       	st	Z, r24
    888e:	67 96       	adiw	r28, 0x17	; 23
    8890:	0a 5f       	subi	r16, 0xFA	; 250
    8892:	1f 4f       	sbci	r17, 0xFF	; 255
    8894:	f7 e1       	ldi	r31, 0x17	; 23
    8896:	af 0e       	add	r10, r31
    8898:	b1 1c       	adc	r11, r1
    889a:	87 e1       	ldi	r24, 0x17	; 23
    889c:	c8 0e       	add	r12, r24
    889e:	d1 1c       	adc	r13, r1
    88a0:	97 e1       	ldi	r25, 0x17	; 23
    88a2:	e9 0e       	add	r14, r25
    88a4:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    88a6:	ad e0       	ldi	r26, 0x0D	; 13
    88a8:	c5 37       	cpi	r28, 0x75	; 117
    88aa:	da 07       	cpc	r29, r26
    88ac:	09 f0       	breq	.+2      	; 0x88b0 <ProcessMusic+0x420>
    88ae:	37 cf       	rjmp	.-402    	; 0x871e <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    88b0:	df 91       	pop	r29
    88b2:	cf 91       	pop	r28
    88b4:	1f 91       	pop	r17
    88b6:	0f 91       	pop	r16
    88b8:	ff 90       	pop	r15
    88ba:	ef 90       	pop	r14
    88bc:	df 90       	pop	r13
    88be:	cf 90       	pop	r12
    88c0:	bf 90       	pop	r11
    88c2:	af 90       	pop	r10
    88c4:	9f 90       	pop	r9
    88c6:	8f 90       	pop	r8
    88c8:	7f 90       	pop	r7
    88ca:	6f 90       	pop	r6
    88cc:	08 95       	ret

000088ce <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    88ce:	80 93 7a 0d 	sts	0x0D7A, r24
    88d2:	08 95       	ret

000088d4 <IsSongPlaying>:
	return masterVolume;
}

bool IsSongPlaying(){
    return playSong;
}
    88d4:	80 91 ce 0c 	lds	r24, 0x0CCE
    88d8:	08 95       	ret

000088da <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    88da:	99 27       	eor	r25, r25
	clr r23
    88dc:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    88de:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    88e0:	09 f4       	brne	.+2      	; 0x88e4 <set_note_waves>
		ret
    88e2:	08 95       	ret

000088e4 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    88e4:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    88e6:	fa e8       	ldi	r31, 0x8A	; 138
	lsl r22
    88e8:	66 0f       	add	r22, r22
	rol r23
    88ea:	77 1f       	adc	r23, r23
	add ZL,r22
    88ec:	e6 0f       	add	r30, r22
	adc ZH,r23	
    88ee:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    88f0:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    88f2:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    88f4:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    88f6:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    88f8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    88fa:	28 9f       	mul	r18, r24
	add ZL,r0
    88fc:	e0 0d       	add	r30, r0
	adc ZH,r1
    88fe:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8900:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8902:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8904:	11 24       	eor	r1, r1
	

	ret
    8906:	08 95       	ret

00008908 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8908:	99 27       	eor	r25, r25
	clr r23
    890a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    890c:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    890e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8910:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8912:	28 9f       	mul	r18, r24
	add ZL,r0
    8914:	e0 0d       	add	r30, r0
	adc ZH,r1
    8916:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8918:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    891a:	31 f4       	brne	.+12     	; 0x8928 <smw1>
	lds r22,tr4_params
    891c:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8920:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8922:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8926:	0b c0       	rjmp	.+22     	; 0x893e <esmw>

00008928 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8928:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    892a:	31 f4       	brne	.+12     	; 0x8938 <smw2>
	lds r22,tr4_params
    892c:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8930:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8932:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8936:	03 c0       	rjmp	.+6      	; 0x893e <esmw>

00008938 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8938:	7c e8       	ldi	r23, 0x8C	; 140
	add r23,r22
    893a:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    893c:	75 83       	std	Z+5, r23	; 0x05

0000893e <esmw>:

esmw:
	clr r1	
    893e:	11 24       	eor	r1, r1
	ret
    8940:	08 95       	ret
	...

00008a00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8a00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8a02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8a06:	08 95       	ret

00008a08 <steptable>:
    8a08:	22 00       	.word	0x0022	; ????
    8a0a:	24 00       	.word	0x0024	; ????
    8a0c:	26 00       	.word	0x0026	; ????
    8a0e:	28 00       	.word	0x0028	; ????
    8a10:	2b 00       	.word	0x002b	; ????
    8a12:	2d 00       	.word	0x002d	; ????
    8a14:	30 00       	.word	0x0030	; ????
    8a16:	33 00       	.word	0x0033	; ????
    8a18:	36 00       	.word	0x0036	; ????
    8a1a:	39 00       	.word	0x0039	; ????
    8a1c:	3d 00       	.word	0x003d	; ????
    8a1e:	40 00       	.word	0x0040	; ????
    8a20:	44 00       	.word	0x0044	; ????
    8a22:	48 00       	.word	0x0048	; ????
    8a24:	4c 00       	.word	0x004c	; ????
    8a26:	51 00       	.word	0x0051	; ????
    8a28:	56 00       	.word	0x0056	; ????
    8a2a:	5b 00       	.word	0x005b	; ????
    8a2c:	60 00       	.word	0x0060	; ????
    8a2e:	66 00       	.word	0x0066	; ????
    8a30:	6c 00       	.word	0x006c	; ????
    8a32:	73 00       	.word	0x0073	; ????
    8a34:	79 00       	.word	0x0079	; ????
    8a36:	81 00       	.word	0x0081	; ????
    8a38:	88 00       	.word	0x0088	; ????
    8a3a:	90 00       	.word	0x0090	; ????
    8a3c:	99 00       	.word	0x0099	; ????
    8a3e:	a2 00       	.word	0x00a2	; ????
    8a40:	ac 00       	.word	0x00ac	; ????
    8a42:	b6 00       	.word	0x00b6	; ????
    8a44:	c1 00       	.word	0x00c1	; ????
    8a46:	cc 00       	.word	0x00cc	; ????
    8a48:	d8 00       	.word	0x00d8	; ????
    8a4a:	e5 00       	.word	0x00e5	; ????
    8a4c:	f3 00       	.word	0x00f3	; ????
    8a4e:	01 01       	movw	r0, r2
    8a50:	10 01       	movw	r2, r0
    8a52:	21 01       	movw	r4, r2
    8a54:	32 01       	movw	r6, r4
    8a56:	44 01       	movw	r8, r8
    8a58:	57 01       	movw	r10, r14
    8a5a:	6c 01       	movw	r12, r24
    8a5c:	81 01       	movw	r16, r2
    8a5e:	98 01       	movw	r18, r16
    8a60:	b0 01       	movw	r22, r0
    8a62:	ca 01       	movw	r24, r20
    8a64:	e5 01       	movw	r28, r10
    8a66:	02 02       	muls	r16, r18
    8a68:	21 02       	muls	r18, r17
    8a6a:	41 02       	muls	r20, r17
    8a6c:	64 02       	muls	r22, r20
    8a6e:	88 02       	muls	r24, r24
    8a70:	ae 02       	muls	r26, r30
    8a72:	d7 02       	muls	r29, r23
    8a74:	03 03       	mulsu	r16, r19
    8a76:	30 03       	mulsu	r19, r16
    8a78:	61 03       	mulsu	r22, r17
    8a7a:	94 03       	fmuls	r17, r20
    8a7c:	cb 03       	fmulsu	r20, r19
    8a7e:	05 04       	cpc	r0, r5
    8a80:	42 04       	cpc	r4, r2
    8a82:	83 04       	cpc	r8, r3
    8a84:	c7 04       	cpc	r12, r7
    8a86:	10 05       	cpc	r17, r0
    8a88:	5d 05       	cpc	r21, r13
    8a8a:	af 05       	cpc	r26, r15
    8a8c:	05 06       	cpc	r0, r21
    8a8e:	61 06       	cpc	r6, r17
    8a90:	c2 06       	cpc	r12, r18
    8a92:	29 07       	cpc	r18, r25
    8a94:	96 07       	cpc	r25, r22
    8a96:	09 08       	sbc	r0, r9
    8a98:	83 08       	sbc	r8, r3
    8a9a:	05 09       	sbc	r16, r5
    8a9c:	8e 09       	sbc	r24, r14
    8a9e:	20 0a       	sbc	r2, r16
    8aa0:	ba 0a       	sbc	r11, r26
    8aa2:	5d 0b       	sbc	r21, r29
    8aa4:	0a 0c       	add	r0, r10
    8aa6:	c1 0c       	add	r12, r1
    8aa8:	84 0d       	add	r24, r4
    8aaa:	51 0e       	add	r5, r17
    8aac:	2b 0f       	add	r18, r27
    8aae:	12 10       	cpse	r1, r2
    8ab0:	07 11       	cpse	r16, r7
    8ab2:	0a 12       	cpse	r0, r26
    8ab4:	1d 13       	cpse	r17, r29
    8ab6:	40 14       	cp	r4, r0
    8ab8:	74 15       	cp	r23, r4
    8aba:	ba 16       	cp	r11, r26
    8abc:	14 18       	sub	r1, r4
    8abe:	83 19       	sub	r24, r3
    8ac0:	07 1b       	sub	r16, r23
    8ac2:	a3 1c       	adc	r10, r3
    8ac4:	57 1e       	adc	r5, r23
    8ac6:	24 20       	and	r2, r4
    8ac8:	0e 22       	and	r0, r30
    8aca:	14 24       	eor	r1, r4
    8acc:	39 26       	eor	r3, r25
    8ace:	7f 28       	or	r7, r15
    8ad0:	e8 2a       	or	r14, r24
    8ad2:	75 2d       	mov	r23, r5
    8ad4:	29 30       	cpi	r18, 0x09	; 9
    8ad6:	06 33       	cpi	r16, 0x36	; 54
    8ad8:	0f 36       	cpi	r16, 0x6F	; 111
    8ada:	45 39       	cpi	r20, 0x95	; 149
    8adc:	ad 3c       	cpi	r26, 0xCD	; 205
    8ade:	49 40       	sbci	r20, 0x09	; 9
    8ae0:	1b 44       	sbci	r17, 0x4B	; 75
    8ae2:	28 48       	sbci	r18, 0x88	; 136
    8ae4:	73 4c       	sbci	r23, 0xC3	; 195
    8ae6:	fe 50       	subi	r31, 0x0E	; 14
    8ae8:	cf 55       	subi	r28, 0x5F	; 95
    8aea:	ea 5a       	subi	r30, 0xAA	; 170
    8aec:	51 60       	ori	r21, 0x01	; 1
    8aee:	0c 66       	ori	r16, 0x6C	; 108
    8af0:	1d 6c       	ori	r17, 0xCD	; 205
    8af2:	8b 72       	andi	r24, 0x2B	; 43
    8af4:	5a 79       	andi	r21, 0x9A	; 154
    8af6:	92 80       	ldd	r9, Z+2	; 0x02
    8af8:	37 88       	ldd	r3, Z+23	; 0x17
    8afa:	50 90 e5 98 	lds	r5, 0x98E5
    8afe:	fd a1       	ldd	r31, Y+37	; 0x25
    8b00:	9f ab       	std	Y+55, r25	; 0x37
    8b02:	d3 b5       	in	r29, 0x23	; 35
    8b04:	a3 c0       	rjmp	.+326    	; 0x8c4c <waves+0x4c>
	...

00008c00 <waves>:
    8c00:	00 03       	mulsu	r16, r16
    8c02:	06 09       	sbc	r16, r6
    8c04:	0c 10       	cpse	r0, r12
    8c06:	13 16       	cp	r1, r19
    8c08:	19 1c       	adc	r1, r9
    8c0a:	1f 22       	and	r1, r31
    8c0c:	25 28       	or	r2, r5
    8c0e:	2b 2e       	mov	r2, r27
    8c10:	31 33       	cpi	r19, 0x31	; 49
    8c12:	36 39       	cpi	r19, 0x96	; 150
    8c14:	3c 3f       	cpi	r19, 0xFC	; 252
    8c16:	41 44       	sbci	r20, 0x41	; 65
    8c18:	47 49       	sbci	r20, 0x97	; 151
    8c1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8c1c:	51 53       	subi	r21, 0x31	; 49
    8c1e:	55 58       	subi	r21, 0x85	; 133
    8c20:	5a 5c       	subi	r21, 0xCA	; 202
    8c22:	5e 60       	ori	r21, 0x0E	; 14
    8c24:	62 64       	ori	r22, 0x42	; 66
    8c26:	66 68       	ori	r22, 0x86	; 134
    8c28:	6a 6b       	ori	r22, 0xBA	; 186
    8c2a:	6d 6f       	ori	r22, 0xFD	; 253
    8c2c:	70 71       	andi	r23, 0x10	; 16
    8c2e:	73 74       	andi	r23, 0x43	; 67
    8c30:	75 76       	andi	r23, 0x65	; 101
    8c32:	78 79       	andi	r23, 0x98	; 152
    8c34:	7a 7a       	andi	r23, 0xAA	; 170
    8c36:	7b 7c       	andi	r23, 0xCB	; 203
    8c38:	7d 7d       	andi	r23, 0xDD	; 221
    8c3a:	7e 7e       	andi	r23, 0xEE	; 238
    8c3c:	7e 7f       	andi	r23, 0xFE	; 254
    8c3e:	7f 7f       	andi	r23, 0xFF	; 255
    8c40:	7f 7f       	andi	r23, 0xFF	; 255
    8c42:	7f 7f       	andi	r23, 0xFF	; 255
    8c44:	7e 7e       	andi	r23, 0xEE	; 238
    8c46:	7e 7d       	andi	r23, 0xDE	; 222
    8c48:	7d 7c       	andi	r23, 0xCD	; 205
    8c4a:	7b 7a       	andi	r23, 0xAB	; 171
    8c4c:	7a 79       	andi	r23, 0x9A	; 154
    8c4e:	78 76       	andi	r23, 0x68	; 104
    8c50:	75 74       	andi	r23, 0x45	; 69
    8c52:	73 71       	andi	r23, 0x13	; 19
    8c54:	70 6f       	ori	r23, 0xF0	; 240
    8c56:	6d 6b       	ori	r22, 0xBD	; 189
    8c58:	6a 68       	ori	r22, 0x8A	; 138
    8c5a:	66 64       	ori	r22, 0x46	; 70
    8c5c:	62 60       	ori	r22, 0x02	; 2
    8c5e:	5e 5c       	subi	r21, 0xCE	; 206
    8c60:	5a 58       	subi	r21, 0x8A	; 138
    8c62:	55 53       	subi	r21, 0x35	; 53
    8c64:	51 4e       	sbci	r21, 0xE1	; 225
    8c66:	4c 49       	sbci	r20, 0x9C	; 156
    8c68:	47 44       	sbci	r20, 0x47	; 71
    8c6a:	41 3f       	cpi	r20, 0xF1	; 241
    8c6c:	3c 39       	cpi	r19, 0x9C	; 156
    8c6e:	36 33       	cpi	r19, 0x36	; 54
    8c70:	31 2e       	mov	r3, r17
    8c72:	2b 28       	or	r2, r11
    8c74:	25 22       	and	r2, r21
    8c76:	1f 1c       	adc	r1, r15
    8c78:	19 16       	cp	r1, r25
    8c7a:	13 10       	cpse	r1, r3
    8c7c:	0c 09       	sbc	r16, r12
    8c7e:	06 03       	mulsu	r16, r22
    8c80:	00 fd       	sbrc	r16, 0
    8c82:	fa f7       	brpl	.-2      	; 0x8c82 <waves+0x82>
    8c84:	f4 f0       	brlt	.+60     	; 0x8cc2 <waves+0xc2>
    8c86:	ed ea       	ldi	r30, 0xAD	; 173
    8c88:	e7 e4       	ldi	r30, 0x47	; 71
    8c8a:	e1 de       	rcall	.-574    	; 0x8a4e <steptable+0x46>
    8c8c:	db d8       	rcall	.-3658   	; 0x7e44 <wait+0x6>
    8c8e:	d5 d2       	rcall	.+1450   	; 0x923a <waves+0x63a>
    8c90:	cf cd       	rjmp	.-1122   	; 0x8830 <ProcessMusic+0x3a0>
    8c92:	ca c7       	rjmp	.+3988   	; 0x9c28 <LBPrintByte+0x20>
    8c94:	c4 c1       	rjmp	.+904    	; 0x901e <waves+0x41e>
    8c96:	bf bc       	out	0x2f, r11	; 47
    8c98:	b9 b7       	in	r27, 0x39	; 57
    8c9a:	b4 b2       	in	r11, 0x14	; 20
    8c9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8c9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8ca0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8ca2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8ca4:	9e 9c       	mul	r9, r14
    8ca6:	9a 98       	cbi	0x13, 2	; 19
    8ca8:	96 95       	lsr	r25
    8caa:	93 91       	.word	0x9193	; ????
    8cac:	90 8f       	std	Z+24, r25	; 0x18
    8cae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8cb0:	8b 8a       	std	Y+19, r8	; 0x13
    8cb2:	88 87       	std	Y+8, r24	; 0x08
    8cb4:	86 86       	std	Z+14, r8	; 0x0e
    8cb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8cb8:	83 83       	std	Z+3, r24	; 0x03
    8cba:	82 82       	std	Z+2, r8	; 0x02
    8cbc:	82 81       	ldd	r24, Z+2	; 0x02
    8cbe:	81 81       	ldd	r24, Z+1	; 0x01
    8cc0:	81 81       	ldd	r24, Z+1	; 0x01
    8cc2:	81 81       	ldd	r24, Z+1	; 0x01
    8cc4:	82 82       	std	Z+2, r8	; 0x02
    8cc6:	82 83       	std	Z+2, r24	; 0x02
    8cc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8cca:	85 86       	std	Z+13, r8	; 0x0d
    8ccc:	86 87       	std	Z+14, r24	; 0x0e
    8cce:	88 8a       	std	Y+16, r8	; 0x10
    8cd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8cd4:	90 91 93 95 	lds	r25, 0x9593
    8cd8:	96 98       	cbi	0x12, 6	; 18
    8cda:	9a 9c       	mul	r9, r10
    8cdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8cde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8ce0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8ce2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ce4:	af b2       	in	r10, 0x1f	; 31
    8ce6:	b4 b7       	in	r27, 0x34	; 52
    8ce8:	b9 bc       	out	0x29, r11	; 41
    8cea:	bf c1       	rjmp	.+894    	; 0x906a <waves+0x46a>
    8cec:	c4 c7       	rjmp	.+3976   	; 0x9c76 <LBPrintInt+0xc>
    8cee:	ca cd       	rjmp	.-1132   	; 0x8884 <ProcessMusic+0x3f4>
    8cf0:	cf d2       	rcall	.+1438   	; 0x9290 <waves+0x690>
    8cf2:	d5 d8       	rcall	.-3670   	; 0x7e9e <SoftReset+0x8>
    8cf4:	db de       	rcall	.-586    	; 0x8aac <steptable+0xa4>
    8cf6:	e1 e4       	ldi	r30, 0x41	; 65
    8cf8:	e7 ea       	ldi	r30, 0xA7	; 167
    8cfa:	ed f0       	brhs	.+58     	; 0x8d36 <waves+0x136>
    8cfc:	f4 f7       	brge	.-4      	; 0x8cfa <waves+0xfa>
    8cfe:	fa fd       	.word	0xfdfa	; ????
    8d00:	80 81       	ld	r24, Z
    8d02:	82 83       	std	Z+2, r24	; 0x02
    8d04:	84 85       	ldd	r24, Z+12	; 0x0c
    8d06:	86 87       	std	Z+14, r24	; 0x0e
    8d08:	88 89       	ldd	r24, Y+16	; 0x10
    8d0a:	8a 8b       	std	Y+18, r24	; 0x12
    8d0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8d10:	90 91 92 93 	lds	r25, 0x9392
    8d14:	94 95       	.word	0x9594	; ????
    8d16:	96 97       	sbiw	r26, 0x26	; 38
    8d18:	98 99       	sbic	0x13, 0	; 19
    8d1a:	9a 9b       	sbis	0x13, 2	; 19
    8d1c:	9c 9d       	mul	r25, r12
    8d1e:	9e 9f       	mul	r25, r30
    8d20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8d22:	a2 a3       	std	Z+34, r26	; 0x22
    8d24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8d26:	a6 a7       	std	Z+46, r26	; 0x2e
    8d28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8d2a:	aa ab       	std	Y+50, r26	; 0x32
    8d2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8d2e:	ae af       	std	Y+62, r26	; 0x3e
    8d30:	b0 b1       	in	r27, 0x00	; 0
    8d32:	b2 b3       	in	r27, 0x12	; 18
    8d34:	b4 b5       	in	r27, 0x24	; 36
    8d36:	b6 b7       	in	r27, 0x36	; 54
    8d38:	b8 b9       	out	0x08, r27	; 8
    8d3a:	ba bb       	out	0x1a, r27	; 26
    8d3c:	bc bd       	out	0x2c, r27	; 44
    8d3e:	be bf       	out	0x3e, r27	; 62
    8d40:	c0 c1       	rjmp	.+896    	; 0x90c2 <waves+0x4c2>
    8d42:	c2 c3       	rjmp	.+1924   	; 0x94c8 <waves+0x8c8>
    8d44:	c4 c5       	rjmp	.+2952   	; 0x98ce <DrawMap+0x14>
    8d46:	c6 c7       	rjmp	.+3980   	; 0x9cd4 <LBPrintInt+0x6a>
    8d48:	c8 c9       	rjmp	.-3184   	; 0x80da <PatchCommand04>
    8d4a:	ca cb       	rjmp	.-2156   	; 0x84e0 <ProcessMusic+0x50>
    8d4c:	cc cd       	rjmp	.-1128   	; 0x88e6 <set_note_waves+0x2>
    8d4e:	ce cf       	rjmp	.-100    	; 0x8cec <waves+0xec>
    8d50:	d0 d1       	rcall	.+928    	; 0x90f2 <waves+0x4f2>
    8d52:	d2 d3       	rcall	.+1956   	; 0x94f8 <waves+0x8f8>
    8d54:	d4 d5       	rcall	.+2984   	; 0x98fe <DrawMap+0x44>
    8d56:	d6 d7       	rcall	.+4012   	; 0x9d04 <LBCollides+0x28>
    8d58:	d8 d9       	rcall	.-3152   	; 0x810a <PatchCommand14>
    8d5a:	da db       	rcall	.-2124   	; 0x8510 <ProcessMusic+0x80>
    8d5c:	dc dd       	rcall	.-1096   	; 0x8916 <SetMixerWave+0xe>
    8d5e:	de df       	rcall	.-68     	; 0x8d1c <waves+0x11c>
    8d60:	e0 e1       	ldi	r30, 0x10	; 16
    8d62:	e2 e3       	ldi	r30, 0x32	; 50
    8d64:	e4 e5       	ldi	r30, 0x54	; 84
    8d66:	e6 e7       	ldi	r30, 0x76	; 118
    8d68:	e8 e9       	ldi	r30, 0x98	; 152
    8d6a:	ea eb       	ldi	r30, 0xBA	; 186
    8d6c:	ec ed       	ldi	r30, 0xDC	; 220
    8d6e:	ee ef       	ldi	r30, 0xFE	; 254
    8d70:	f0 f1       	brcs	.+124    	; 0x8dee <waves+0x1ee>
    8d72:	f2 f3       	brmi	.-4      	; 0x8d70 <waves+0x170>
    8d74:	f4 f5       	brge	.+124    	; 0x8df2 <waves+0x1f2>
    8d76:	f6 f7       	brtc	.-4      	; 0x8d74 <waves+0x174>
    8d78:	f8 f9       	.word	0xf9f8	; ????
    8d7a:	fa fb       	.word	0xfbfa	; ????
    8d7c:	fc fd       	.word	0xfdfc	; ????
    8d7e:	fe ff       	.word	0xfffe	; ????
    8d80:	00 01       	movw	r0, r0
    8d82:	02 03       	mulsu	r16, r18
    8d84:	04 05       	cpc	r16, r4
    8d86:	06 07       	cpc	r16, r22
    8d88:	08 09       	sbc	r16, r8
    8d8a:	0a 0b       	sbc	r16, r26
    8d8c:	0c 0d       	add	r16, r12
    8d8e:	0e 0f       	add	r16, r30
    8d90:	10 11       	cpse	r17, r0
    8d92:	12 13       	cpse	r17, r18
    8d94:	14 15       	cp	r17, r4
    8d96:	16 17       	cp	r17, r22
    8d98:	18 19       	sub	r17, r8
    8d9a:	1a 1b       	sub	r17, r26
    8d9c:	1c 1d       	adc	r17, r12
    8d9e:	1e 1f       	adc	r17, r30
    8da0:	20 21       	and	r18, r0
    8da2:	22 23       	and	r18, r18
    8da4:	24 25       	eor	r18, r4
    8da6:	26 27       	eor	r18, r22
    8da8:	28 29       	or	r18, r8
    8daa:	2a 2b       	or	r18, r26
    8dac:	2c 2d       	mov	r18, r12
    8dae:	2e 2f       	mov	r18, r30
    8db0:	30 31       	cpi	r19, 0x10	; 16
    8db2:	32 33       	cpi	r19, 0x32	; 50
    8db4:	34 35       	cpi	r19, 0x54	; 84
    8db6:	36 37       	cpi	r19, 0x76	; 118
    8db8:	38 39       	cpi	r19, 0x98	; 152
    8dba:	3a 3b       	cpi	r19, 0xBA	; 186
    8dbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8dbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8dc0:	40 41       	sbci	r20, 0x10	; 16
    8dc2:	42 43       	sbci	r20, 0x32	; 50
    8dc4:	44 45       	sbci	r20, 0x54	; 84
    8dc6:	46 47       	sbci	r20, 0x76	; 118
    8dc8:	48 49       	sbci	r20, 0x98	; 152
    8dca:	4a 4b       	sbci	r20, 0xBA	; 186
    8dcc:	4c 4d       	sbci	r20, 0xDC	; 220
    8dce:	4e 4f       	sbci	r20, 0xFE	; 254
    8dd0:	50 51       	subi	r21, 0x10	; 16
    8dd2:	52 53       	subi	r21, 0x32	; 50
    8dd4:	54 55       	subi	r21, 0x54	; 84
    8dd6:	56 57       	subi	r21, 0x76	; 118
    8dd8:	58 59       	subi	r21, 0x98	; 152
    8dda:	5a 5b       	subi	r21, 0xBA	; 186
    8ddc:	5c 5d       	subi	r21, 0xDC	; 220
    8dde:	5e 5f       	subi	r21, 0xFE	; 254
    8de0:	60 61       	ori	r22, 0x10	; 16
    8de2:	62 63       	ori	r22, 0x32	; 50
    8de4:	64 65       	ori	r22, 0x54	; 84
    8de6:	66 67       	ori	r22, 0x76	; 118
    8de8:	68 69       	ori	r22, 0x98	; 152
    8dea:	6a 6b       	ori	r22, 0xBA	; 186
    8dec:	6c 6d       	ori	r22, 0xDC	; 220
    8dee:	6e 6f       	ori	r22, 0xFE	; 254
    8df0:	70 71       	andi	r23, 0x10	; 16
    8df2:	72 73       	andi	r23, 0x32	; 50
    8df4:	74 75       	andi	r23, 0x54	; 84
    8df6:	76 77       	andi	r23, 0x76	; 118
    8df8:	78 79       	andi	r23, 0x98	; 152
    8dfa:	7a 7b       	andi	r23, 0xBA	; 186
    8dfc:	7c 7d       	andi	r23, 0xDC	; 220
    8dfe:	7e 7f       	andi	r23, 0xFE	; 254
    8e00:	00 02       	muls	r16, r16
    8e02:	04 06       	cpc	r0, r20
    8e04:	08 0a       	sbc	r0, r24
    8e06:	0c 0e       	add	r0, r28
    8e08:	10 12       	cpse	r1, r16
    8e0a:	14 16       	cp	r1, r20
    8e0c:	18 1a       	sub	r1, r24
    8e0e:	1c 1e       	adc	r1, r28
    8e10:	20 22       	and	r2, r16
    8e12:	24 26       	eor	r2, r20
    8e14:	28 2a       	or	r2, r24
    8e16:	2c 2e       	mov	r2, r28
    8e18:	30 32       	cpi	r19, 0x20	; 32
    8e1a:	34 36       	cpi	r19, 0x64	; 100
    8e1c:	38 3a       	cpi	r19, 0xA8	; 168
    8e1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8e20:	40 42       	sbci	r20, 0x20	; 32
    8e22:	44 46       	sbci	r20, 0x64	; 100
    8e24:	48 4a       	sbci	r20, 0xA8	; 168
    8e26:	4c 4e       	sbci	r20, 0xEC	; 236
    8e28:	50 52       	subi	r21, 0x20	; 32
    8e2a:	54 56       	subi	r21, 0x64	; 100
    8e2c:	58 5a       	subi	r21, 0xA8	; 168
    8e2e:	5c 5e       	subi	r21, 0xEC	; 236
    8e30:	60 62       	ori	r22, 0x20	; 32
    8e32:	64 66       	ori	r22, 0x64	; 100
    8e34:	68 6a       	ori	r22, 0xA8	; 168
    8e36:	6c 6e       	ori	r22, 0xEC	; 236
    8e38:	70 72       	andi	r23, 0x20	; 32
    8e3a:	74 76       	andi	r23, 0x64	; 100
    8e3c:	78 7a       	andi	r23, 0xA8	; 168
    8e3e:	7c 7e       	andi	r23, 0xEC	; 236
    8e40:	7f 7d       	andi	r23, 0xDF	; 223
    8e42:	7b 79       	andi	r23, 0x9B	; 155
    8e44:	77 75       	andi	r23, 0x57	; 87
    8e46:	73 71       	andi	r23, 0x13	; 19
    8e48:	6f 6d       	ori	r22, 0xDF	; 223
    8e4a:	6b 69       	ori	r22, 0x9B	; 155
    8e4c:	67 65       	ori	r22, 0x57	; 87
    8e4e:	63 61       	ori	r22, 0x13	; 19
    8e50:	5f 5d       	subi	r21, 0xDF	; 223
    8e52:	5b 59       	subi	r21, 0x9B	; 155
    8e54:	57 55       	subi	r21, 0x57	; 87
    8e56:	53 51       	subi	r21, 0x13	; 19
    8e58:	4f 4d       	sbci	r20, 0xDF	; 223
    8e5a:	4b 49       	sbci	r20, 0x9B	; 155
    8e5c:	47 45       	sbci	r20, 0x57	; 87
    8e5e:	43 41       	sbci	r20, 0x13	; 19
    8e60:	3f 3d       	cpi	r19, 0xDF	; 223
    8e62:	3b 39       	cpi	r19, 0x9B	; 155
    8e64:	37 35       	cpi	r19, 0x57	; 87
    8e66:	33 31       	cpi	r19, 0x13	; 19
    8e68:	2f 2d       	mov	r18, r15
    8e6a:	2b 29       	or	r18, r11
    8e6c:	27 25       	eor	r18, r7
    8e6e:	23 21       	and	r18, r3
    8e70:	1f 1d       	adc	r17, r15
    8e72:	1b 19       	sub	r17, r11
    8e74:	17 15       	cp	r17, r7
    8e76:	13 11       	cpse	r17, r3
    8e78:	0f 0d       	add	r16, r15
    8e7a:	0b 09       	sbc	r16, r11
    8e7c:	07 05       	cpc	r16, r7
    8e7e:	03 01       	movw	r0, r6
    8e80:	ff fd       	.word	0xfdff	; ????
    8e82:	fb f9       	.word	0xf9fb	; ????
    8e84:	f7 f5       	brid	.+124    	; 0x8f02 <waves+0x302>
    8e86:	f3 f1       	brvs	.+124    	; 0x8f04 <waves+0x304>
    8e88:	ef ed       	ldi	r30, 0xDF	; 223
    8e8a:	eb e9       	ldi	r30, 0x9B	; 155
    8e8c:	e7 e5       	ldi	r30, 0x57	; 87
    8e8e:	e3 e1       	ldi	r30, 0x13	; 19
    8e90:	df dd       	rcall	.-1090   	; 0x8a50 <steptable+0x48>
    8e92:	db d9       	rcall	.-3146   	; 0x824a <ReadVarLen+0x32>
    8e94:	d7 d5       	rcall	.+2990   	; 0x9a44 <ProcessFading+0x3e>
    8e96:	d3 d1       	rcall	.+934    	; 0x923e <waves+0x63e>
    8e98:	cf cd       	rjmp	.-1122   	; 0x8a38 <steptable+0x30>
    8e9a:	cb c9       	rjmp	.-3178   	; 0x8232 <ReadVarLen+0x1a>
    8e9c:	c7 c5       	rjmp	.+2958   	; 0x9a2c <ProcessFading+0x26>
    8e9e:	c3 c1       	rjmp	.+902    	; 0x9226 <waves+0x626>
    8ea0:	bf bd       	out	0x2f, r27	; 47
    8ea2:	bb b9       	out	0x0b, r27	; 11
    8ea4:	b7 b5       	in	r27, 0x27	; 39
    8ea6:	b3 b1       	in	r27, 0x03	; 3
    8ea8:	af ad       	ldd	r26, Y+63	; 0x3f
    8eaa:	ab a9       	ldd	r26, Y+51	; 0x33
    8eac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8eae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8eb0:	9f 9d       	mul	r25, r15
    8eb2:	9b 99       	sbic	0x13, 3	; 19
    8eb4:	97 95       	ror	r25
    8eb6:	93 91       	.word	0x9193	; ????
    8eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8eba:	8b 89       	ldd	r24, Y+19	; 0x13
    8ebc:	87 85       	ldd	r24, Z+15	; 0x0f
    8ebe:	83 81       	ldd	r24, Z+3	; 0x03
    8ec0:	80 82       	st	Z, r8
    8ec2:	84 86       	std	Z+12, r8	; 0x0c
    8ec4:	88 8a       	std	Y+16, r8	; 0x10
    8ec6:	8c 8e       	std	Y+28, r8	; 0x1c
    8ec8:	90 92 94 96 	sts	0x9694, r9
    8ecc:	98 9a       	sbi	0x13, 0	; 19
    8ece:	9c 9e       	mul	r9, r28
    8ed0:	a0 a2       	std	Z+32, r10	; 0x20
    8ed2:	a4 a6       	std	Z+44, r10	; 0x2c
    8ed4:	a8 aa       	std	Y+48, r10	; 0x30
    8ed6:	ac ae       	std	Y+60, r10	; 0x3c
    8ed8:	b0 b2       	in	r11, 0x10	; 16
    8eda:	b4 b6       	in	r11, 0x34	; 52
    8edc:	b8 ba       	out	0x18, r11	; 24
    8ede:	bc be       	out	0x3c, r11	; 60
    8ee0:	c0 c2       	rjmp	.+1408   	; 0x9462 <waves+0x862>
    8ee2:	c4 c6       	rjmp	.+3464   	; 0x9c6c <LBPrintInt+0x2>
    8ee4:	c8 ca       	rjmp	.-2672   	; 0x8476 <TriggerNote+0x66>
    8ee6:	cc ce       	rjmp	.-616    	; 0x8c80 <waves+0x80>
    8ee8:	d0 d2       	rcall	.+1440   	; 0x948a <waves+0x88a>
    8eea:	d4 d6       	rcall	.+3496   	; 0x9c94 <LBPrintInt+0x2a>
    8eec:	d8 da       	rcall	.-2640   	; 0x849e <ProcessMusic+0xe>
    8eee:	dc de       	rcall	.-584    	; 0x8ca8 <waves+0xa8>
    8ef0:	e0 e2       	ldi	r30, 0x20	; 32
    8ef2:	e4 e6       	ldi	r30, 0x64	; 100
    8ef4:	e8 ea       	ldi	r30, 0xA8	; 168
    8ef6:	ec ee       	ldi	r30, 0xEC	; 236
    8ef8:	f0 f2       	brcs	.-68     	; 0x8eb6 <waves+0x2b6>
    8efa:	f4 f6       	brge	.-68     	; 0x8eb8 <waves+0x2b8>
    8efc:	f8 fa       	.word	0xfaf8	; ????
    8efe:	fc fe       	.word	0xfefc	; ????
    8f00:	7f 7f       	andi	r23, 0xFF	; 255
    8f02:	7f 7f       	andi	r23, 0xFF	; 255
    8f04:	7f 7f       	andi	r23, 0xFF	; 255
    8f06:	7f 7f       	andi	r23, 0xFF	; 255
    8f08:	7f 7f       	andi	r23, 0xFF	; 255
    8f0a:	7f 7f       	andi	r23, 0xFF	; 255
    8f0c:	7f 7f       	andi	r23, 0xFF	; 255
    8f0e:	7f 7f       	andi	r23, 0xFF	; 255
    8f10:	7f 7f       	andi	r23, 0xFF	; 255
    8f12:	7f 7f       	andi	r23, 0xFF	; 255
    8f14:	7f 7f       	andi	r23, 0xFF	; 255
    8f16:	7f 7f       	andi	r23, 0xFF	; 255
    8f18:	7f 7f       	andi	r23, 0xFF	; 255
    8f1a:	7f 7f       	andi	r23, 0xFF	; 255
    8f1c:	7f 7f       	andi	r23, 0xFF	; 255
    8f1e:	7f 7f       	andi	r23, 0xFF	; 255
    8f20:	7f 7f       	andi	r23, 0xFF	; 255
    8f22:	7f 7f       	andi	r23, 0xFF	; 255
    8f24:	7f 7f       	andi	r23, 0xFF	; 255
    8f26:	7f 7f       	andi	r23, 0xFF	; 255
    8f28:	7f 7f       	andi	r23, 0xFF	; 255
    8f2a:	7f 7f       	andi	r23, 0xFF	; 255
    8f2c:	7f 7f       	andi	r23, 0xFF	; 255
    8f2e:	7f 7f       	andi	r23, 0xFF	; 255
    8f30:	7f 7f       	andi	r23, 0xFF	; 255
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	80 80       	ld	r8, Z
    8f42:	80 80       	ld	r8, Z
    8f44:	80 80       	ld	r8, Z
    8f46:	80 80       	ld	r8, Z
    8f48:	80 80       	ld	r8, Z
    8f4a:	80 80       	ld	r8, Z
    8f4c:	80 80       	ld	r8, Z
    8f4e:	80 80       	ld	r8, Z
    8f50:	80 80       	ld	r8, Z
    8f52:	80 80       	ld	r8, Z
    8f54:	80 80       	ld	r8, Z
    8f56:	80 80       	ld	r8, Z
    8f58:	80 80       	ld	r8, Z
    8f5a:	80 80       	ld	r8, Z
    8f5c:	80 80       	ld	r8, Z
    8f5e:	80 80       	ld	r8, Z
    8f60:	80 80       	ld	r8, Z
    8f62:	80 80       	ld	r8, Z
    8f64:	80 80       	ld	r8, Z
    8f66:	80 80       	ld	r8, Z
    8f68:	80 80       	ld	r8, Z
    8f6a:	80 80       	ld	r8, Z
    8f6c:	80 80       	ld	r8, Z
    8f6e:	80 80       	ld	r8, Z
    8f70:	80 80       	ld	r8, Z
    8f72:	80 80       	ld	r8, Z
    8f74:	80 80       	ld	r8, Z
    8f76:	80 80       	ld	r8, Z
    8f78:	80 80       	ld	r8, Z
    8f7a:	80 80       	ld	r8, Z
    8f7c:	80 80       	ld	r8, Z
    8f7e:	80 80       	ld	r8, Z
    8f80:	80 80       	ld	r8, Z
    8f82:	80 80       	ld	r8, Z
    8f84:	80 80       	ld	r8, Z
    8f86:	80 80       	ld	r8, Z
    8f88:	80 80       	ld	r8, Z
    8f8a:	80 80       	ld	r8, Z
    8f8c:	80 80       	ld	r8, Z
    8f8e:	80 80       	ld	r8, Z
    8f90:	80 80       	ld	r8, Z
    8f92:	80 80       	ld	r8, Z
    8f94:	80 80       	ld	r8, Z
    8f96:	80 80       	ld	r8, Z
    8f98:	80 80       	ld	r8, Z
    8f9a:	80 80       	ld	r8, Z
    8f9c:	80 80       	ld	r8, Z
    8f9e:	80 80       	ld	r8, Z
    8fa0:	80 80       	ld	r8, Z
    8fa2:	80 80       	ld	r8, Z
    8fa4:	80 80       	ld	r8, Z
    8fa6:	80 80       	ld	r8, Z
    8fa8:	80 80       	ld	r8, Z
    8faa:	80 80       	ld	r8, Z
    8fac:	80 80       	ld	r8, Z
    8fae:	80 80       	ld	r8, Z
    8fb0:	80 80       	ld	r8, Z
    8fb2:	80 80       	ld	r8, Z
    8fb4:	80 80       	ld	r8, Z
    8fb6:	80 80       	ld	r8, Z
    8fb8:	80 80       	ld	r8, Z
    8fba:	80 80       	ld	r8, Z
    8fbc:	80 80       	ld	r8, Z
    8fbe:	80 80       	ld	r8, Z
    8fc0:	80 80       	ld	r8, Z
    8fc2:	80 80       	ld	r8, Z
    8fc4:	80 80       	ld	r8, Z
    8fc6:	80 80       	ld	r8, Z
    8fc8:	80 80       	ld	r8, Z
    8fca:	80 80       	ld	r8, Z
    8fcc:	80 80       	ld	r8, Z
    8fce:	80 80       	ld	r8, Z
    8fd0:	80 80       	ld	r8, Z
    8fd2:	80 80       	ld	r8, Z
    8fd4:	80 80       	ld	r8, Z
    8fd6:	80 80       	ld	r8, Z
    8fd8:	80 80       	ld	r8, Z
    8fda:	80 80       	ld	r8, Z
    8fdc:	80 80       	ld	r8, Z
    8fde:	80 80       	ld	r8, Z
    8fe0:	80 80       	ld	r8, Z
    8fe2:	80 80       	ld	r8, Z
    8fe4:	80 80       	ld	r8, Z
    8fe6:	80 80       	ld	r8, Z
    8fe8:	80 80       	ld	r8, Z
    8fea:	80 80       	ld	r8, Z
    8fec:	80 80       	ld	r8, Z
    8fee:	80 80       	ld	r8, Z
    8ff0:	80 80       	ld	r8, Z
    8ff2:	80 80       	ld	r8, Z
    8ff4:	80 80       	ld	r8, Z
    8ff6:	80 80       	ld	r8, Z
    8ff8:	80 80       	ld	r8, Z
    8ffa:	80 80       	ld	r8, Z
    8ffc:	80 80       	ld	r8, Z
    8ffe:	80 80       	ld	r8, Z
    9000:	7f 7f       	andi	r23, 0xFF	; 255
    9002:	7f 7f       	andi	r23, 0xFF	; 255
    9004:	7f 7f       	andi	r23, 0xFF	; 255
    9006:	7f 7f       	andi	r23, 0xFF	; 255
    9008:	7f 7f       	andi	r23, 0xFF	; 255
    900a:	7f 7f       	andi	r23, 0xFF	; 255
    900c:	7f 7f       	andi	r23, 0xFF	; 255
    900e:	7f 7f       	andi	r23, 0xFF	; 255
    9010:	7f 7f       	andi	r23, 0xFF	; 255
    9012:	7f 7f       	andi	r23, 0xFF	; 255
    9014:	7f 7f       	andi	r23, 0xFF	; 255
    9016:	7f 7f       	andi	r23, 0xFF	; 255
    9018:	7f 7f       	andi	r23, 0xFF	; 255
    901a:	7f 7f       	andi	r23, 0xFF	; 255
    901c:	7f 7f       	andi	r23, 0xFF	; 255
    901e:	7f 7f       	andi	r23, 0xFF	; 255
    9020:	7f 7f       	andi	r23, 0xFF	; 255
    9022:	7f 7f       	andi	r23, 0xFF	; 255
    9024:	7f 7f       	andi	r23, 0xFF	; 255
    9026:	7f 7f       	andi	r23, 0xFF	; 255
    9028:	7f 7f       	andi	r23, 0xFF	; 255
    902a:	7f 7f       	andi	r23, 0xFF	; 255
    902c:	7f 7f       	andi	r23, 0xFF	; 255
    902e:	7f 7f       	andi	r23, 0xFF	; 255
    9030:	7f 7f       	andi	r23, 0xFF	; 255
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7f 7f       	andi	r23, 0xFF	; 255
    9046:	7f 7f       	andi	r23, 0xFF	; 255
    9048:	7f 7f       	andi	r23, 0xFF	; 255
    904a:	7f 7f       	andi	r23, 0xFF	; 255
    904c:	7f 7f       	andi	r23, 0xFF	; 255
    904e:	7f 7f       	andi	r23, 0xFF	; 255
    9050:	7f 7f       	andi	r23, 0xFF	; 255
    9052:	7f 7f       	andi	r23, 0xFF	; 255
    9054:	7f 7f       	andi	r23, 0xFF	; 255
    9056:	7f 7f       	andi	r23, 0xFF	; 255
    9058:	7f 7f       	andi	r23, 0xFF	; 255
    905a:	7f 7f       	andi	r23, 0xFF	; 255
    905c:	7f 7f       	andi	r23, 0xFF	; 255
    905e:	7f 7f       	andi	r23, 0xFF	; 255
    9060:	7f 7f       	andi	r23, 0xFF	; 255
    9062:	7f 7f       	andi	r23, 0xFF	; 255
    9064:	7f 7f       	andi	r23, 0xFF	; 255
    9066:	7f 7f       	andi	r23, 0xFF	; 255
    9068:	7f 7f       	andi	r23, 0xFF	; 255
    906a:	7f 7f       	andi	r23, 0xFF	; 255
    906c:	7f 7f       	andi	r23, 0xFF	; 255
    906e:	7f 7f       	andi	r23, 0xFF	; 255
    9070:	7f 7f       	andi	r23, 0xFF	; 255
    9072:	7f 7f       	andi	r23, 0xFF	; 255
    9074:	7f 7f       	andi	r23, 0xFF	; 255
    9076:	7f 7f       	andi	r23, 0xFF	; 255
    9078:	7f 7f       	andi	r23, 0xFF	; 255
    907a:	7f 7f       	andi	r23, 0xFF	; 255
    907c:	7f 7f       	andi	r23, 0xFF	; 255
    907e:	7f 7f       	andi	r23, 0xFF	; 255
    9080:	80 80       	ld	r8, Z
    9082:	80 80       	ld	r8, Z
    9084:	80 80       	ld	r8, Z
    9086:	80 80       	ld	r8, Z
    9088:	80 80       	ld	r8, Z
    908a:	80 80       	ld	r8, Z
    908c:	80 80       	ld	r8, Z
    908e:	80 80       	ld	r8, Z
    9090:	80 80       	ld	r8, Z
    9092:	80 80       	ld	r8, Z
    9094:	80 80       	ld	r8, Z
    9096:	80 80       	ld	r8, Z
    9098:	80 80       	ld	r8, Z
    909a:	80 80       	ld	r8, Z
    909c:	80 80       	ld	r8, Z
    909e:	80 80       	ld	r8, Z
    90a0:	80 80       	ld	r8, Z
    90a2:	80 80       	ld	r8, Z
    90a4:	80 80       	ld	r8, Z
    90a6:	80 80       	ld	r8, Z
    90a8:	80 80       	ld	r8, Z
    90aa:	80 80       	ld	r8, Z
    90ac:	80 80       	ld	r8, Z
    90ae:	80 80       	ld	r8, Z
    90b0:	80 80       	ld	r8, Z
    90b2:	80 80       	ld	r8, Z
    90b4:	80 80       	ld	r8, Z
    90b6:	80 80       	ld	r8, Z
    90b8:	80 80       	ld	r8, Z
    90ba:	80 80       	ld	r8, Z
    90bc:	80 80       	ld	r8, Z
    90be:	80 80       	ld	r8, Z
    90c0:	80 80       	ld	r8, Z
    90c2:	80 80       	ld	r8, Z
    90c4:	80 80       	ld	r8, Z
    90c6:	80 80       	ld	r8, Z
    90c8:	80 80       	ld	r8, Z
    90ca:	80 80       	ld	r8, Z
    90cc:	80 80       	ld	r8, Z
    90ce:	80 80       	ld	r8, Z
    90d0:	80 80       	ld	r8, Z
    90d2:	80 80       	ld	r8, Z
    90d4:	80 80       	ld	r8, Z
    90d6:	80 80       	ld	r8, Z
    90d8:	80 80       	ld	r8, Z
    90da:	80 80       	ld	r8, Z
    90dc:	80 80       	ld	r8, Z
    90de:	80 80       	ld	r8, Z
    90e0:	80 80       	ld	r8, Z
    90e2:	80 80       	ld	r8, Z
    90e4:	80 80       	ld	r8, Z
    90e6:	80 80       	ld	r8, Z
    90e8:	80 80       	ld	r8, Z
    90ea:	80 80       	ld	r8, Z
    90ec:	80 80       	ld	r8, Z
    90ee:	80 80       	ld	r8, Z
    90f0:	80 80       	ld	r8, Z
    90f2:	80 80       	ld	r8, Z
    90f4:	80 80       	ld	r8, Z
    90f6:	80 80       	ld	r8, Z
    90f8:	80 80       	ld	r8, Z
    90fa:	80 80       	ld	r8, Z
    90fc:	80 80       	ld	r8, Z
    90fe:	80 80       	ld	r8, Z
    9100:	7f 7f       	andi	r23, 0xFF	; 255
    9102:	7f 7f       	andi	r23, 0xFF	; 255
    9104:	7f 7f       	andi	r23, 0xFF	; 255
    9106:	7f 7f       	andi	r23, 0xFF	; 255
    9108:	7f 7f       	andi	r23, 0xFF	; 255
    910a:	7f 7f       	andi	r23, 0xFF	; 255
    910c:	7f 7f       	andi	r23, 0xFF	; 255
    910e:	7f 7f       	andi	r23, 0xFF	; 255
    9110:	7f 7f       	andi	r23, 0xFF	; 255
    9112:	7f 7f       	andi	r23, 0xFF	; 255
    9114:	7f 7f       	andi	r23, 0xFF	; 255
    9116:	7f 7f       	andi	r23, 0xFF	; 255
    9118:	7f 7f       	andi	r23, 0xFF	; 255
    911a:	7f 7f       	andi	r23, 0xFF	; 255
    911c:	7f 7f       	andi	r23, 0xFF	; 255
    911e:	7f 7f       	andi	r23, 0xFF	; 255
    9120:	7f 7f       	andi	r23, 0xFF	; 255
    9122:	7f 7f       	andi	r23, 0xFF	; 255
    9124:	7f 7f       	andi	r23, 0xFF	; 255
    9126:	7f 7f       	andi	r23, 0xFF	; 255
    9128:	7f 7f       	andi	r23, 0xFF	; 255
    912a:	7f 7f       	andi	r23, 0xFF	; 255
    912c:	7f 7f       	andi	r23, 0xFF	; 255
    912e:	7f 7f       	andi	r23, 0xFF	; 255
    9130:	7f 7f       	andi	r23, 0xFF	; 255
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7f 7f       	andi	r23, 0xFF	; 255
    9148:	7f 7f       	andi	r23, 0xFF	; 255
    914a:	7f 7f       	andi	r23, 0xFF	; 255
    914c:	7f 7f       	andi	r23, 0xFF	; 255
    914e:	7f 7f       	andi	r23, 0xFF	; 255
    9150:	7f 7f       	andi	r23, 0xFF	; 255
    9152:	7f 7f       	andi	r23, 0xFF	; 255
    9154:	7f 7f       	andi	r23, 0xFF	; 255
    9156:	7f 7f       	andi	r23, 0xFF	; 255
    9158:	7f 7f       	andi	r23, 0xFF	; 255
    915a:	7f 7f       	andi	r23, 0xFF	; 255
    915c:	7f 7f       	andi	r23, 0xFF	; 255
    915e:	7f 7f       	andi	r23, 0xFF	; 255
    9160:	7f 7f       	andi	r23, 0xFF	; 255
    9162:	7f 7f       	andi	r23, 0xFF	; 255
    9164:	7f 7f       	andi	r23, 0xFF	; 255
    9166:	7f 7f       	andi	r23, 0xFF	; 255
    9168:	7f 7f       	andi	r23, 0xFF	; 255
    916a:	7f 7f       	andi	r23, 0xFF	; 255
    916c:	7f 7f       	andi	r23, 0xFF	; 255
    916e:	7f 7f       	andi	r23, 0xFF	; 255
    9170:	7f 7f       	andi	r23, 0xFF	; 255
    9172:	7f 7f       	andi	r23, 0xFF	; 255
    9174:	7f 7f       	andi	r23, 0xFF	; 255
    9176:	7f 7f       	andi	r23, 0xFF	; 255
    9178:	7f 7f       	andi	r23, 0xFF	; 255
    917a:	7f 7f       	andi	r23, 0xFF	; 255
    917c:	7f 7f       	andi	r23, 0xFF	; 255
    917e:	7f 7f       	andi	r23, 0xFF	; 255
    9180:	7f 7f       	andi	r23, 0xFF	; 255
    9182:	7f 7f       	andi	r23, 0xFF	; 255
    9184:	7f 7f       	andi	r23, 0xFF	; 255
    9186:	7f 7f       	andi	r23, 0xFF	; 255
    9188:	7f 7f       	andi	r23, 0xFF	; 255
    918a:	7f 7f       	andi	r23, 0xFF	; 255
    918c:	7f 7f       	andi	r23, 0xFF	; 255
    918e:	7f 7f       	andi	r23, 0xFF	; 255
    9190:	7f 7f       	andi	r23, 0xFF	; 255
    9192:	7f 7f       	andi	r23, 0xFF	; 255
    9194:	7f 7f       	andi	r23, 0xFF	; 255
    9196:	7f 7f       	andi	r23, 0xFF	; 255
    9198:	7f 7f       	andi	r23, 0xFF	; 255
    919a:	7f 7f       	andi	r23, 0xFF	; 255
    919c:	7f 7f       	andi	r23, 0xFF	; 255
    919e:	7f 7f       	andi	r23, 0xFF	; 255
    91a0:	7f 7f       	andi	r23, 0xFF	; 255
    91a2:	7f 7f       	andi	r23, 0xFF	; 255
    91a4:	7f 7f       	andi	r23, 0xFF	; 255
    91a6:	7f 7f       	andi	r23, 0xFF	; 255
    91a8:	7f 7f       	andi	r23, 0xFF	; 255
    91aa:	7f 7f       	andi	r23, 0xFF	; 255
    91ac:	7f 7f       	andi	r23, 0xFF	; 255
    91ae:	7f 7f       	andi	r23, 0xFF	; 255
    91b0:	7f 7f       	andi	r23, 0xFF	; 255
    91b2:	7f 7f       	andi	r23, 0xFF	; 255
    91b4:	7f 7f       	andi	r23, 0xFF	; 255
    91b6:	7f 7f       	andi	r23, 0xFF	; 255
    91b8:	7f 7f       	andi	r23, 0xFF	; 255
    91ba:	7f 7f       	andi	r23, 0xFF	; 255
    91bc:	7f 7f       	andi	r23, 0xFF	; 255
    91be:	7f 7f       	andi	r23, 0xFF	; 255
    91c0:	80 80       	ld	r8, Z
    91c2:	80 80       	ld	r8, Z
    91c4:	80 80       	ld	r8, Z
    91c6:	80 80       	ld	r8, Z
    91c8:	80 80       	ld	r8, Z
    91ca:	80 80       	ld	r8, Z
    91cc:	80 80       	ld	r8, Z
    91ce:	80 80       	ld	r8, Z
    91d0:	80 80       	ld	r8, Z
    91d2:	80 80       	ld	r8, Z
    91d4:	80 80       	ld	r8, Z
    91d6:	80 80       	ld	r8, Z
    91d8:	80 80       	ld	r8, Z
    91da:	80 80       	ld	r8, Z
    91dc:	80 80       	ld	r8, Z
    91de:	80 80       	ld	r8, Z
    91e0:	80 80       	ld	r8, Z
    91e2:	80 80       	ld	r8, Z
    91e4:	80 80       	ld	r8, Z
    91e6:	80 80       	ld	r8, Z
    91e8:	80 80       	ld	r8, Z
    91ea:	80 80       	ld	r8, Z
    91ec:	80 80       	ld	r8, Z
    91ee:	80 80       	ld	r8, Z
    91f0:	80 80       	ld	r8, Z
    91f2:	80 80       	ld	r8, Z
    91f4:	80 80       	ld	r8, Z
    91f6:	80 80       	ld	r8, Z
    91f8:	80 80       	ld	r8, Z
    91fa:	80 80       	ld	r8, Z
    91fc:	80 80       	ld	r8, Z
    91fe:	80 80       	ld	r8, Z
    9200:	03 09       	sbc	r16, r3
    9202:	13 1e       	adc	r1, r19
    9204:	28 31       	cpi	r18, 0x18	; 24
    9206:	3a 40       	sbci	r19, 0x0A	; 10
    9208:	46 4c       	sbci	r20, 0xC6	; 198
    920a:	50 54       	subi	r21, 0x40	; 64
    920c:	58 5b       	subi	r21, 0xB8	; 184
    920e:	5e 61       	ori	r21, 0x1E	; 30
    9210:	63 65       	ori	r22, 0x53	; 83
    9212:	67 69       	ori	r22, 0x97	; 151
    9214:	6b 6c       	ori	r22, 0xCB	; 203
    9216:	6e 6f       	ori	r22, 0xFE	; 254
    9218:	70 71       	andi	r23, 0x10	; 16
    921a:	72 73       	andi	r23, 0x32	; 50
    921c:	74 75       	andi	r23, 0x54	; 84
    921e:	76 77       	andi	r23, 0x76	; 118
    9220:	77 78       	andi	r23, 0x87	; 135
    9222:	79 79       	andi	r23, 0x99	; 153
    9224:	7a 7a       	andi	r23, 0xAA	; 170
    9226:	7b 7b       	andi	r23, 0xBB	; 187
    9228:	7c 7c       	andi	r23, 0xCC	; 204
    922a:	7c 7d       	andi	r23, 0xDC	; 220
    922c:	7d 7d       	andi	r23, 0xDD	; 221
    922e:	7e 7e       	andi	r23, 0xEE	; 238
    9230:	7e 7e       	andi	r23, 0xEE	; 238
    9232:	7f 7f       	andi	r23, 0xFF	; 255
    9234:	7f 7f       	andi	r23, 0xFF	; 255
    9236:	7f 7f       	andi	r23, 0xFF	; 255
    9238:	7f 7f       	andi	r23, 0xFF	; 255
    923a:	7f 7f       	andi	r23, 0xFF	; 255
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7f 7f       	andi	r23, 0xFF	; 255
    9248:	7f 7f       	andi	r23, 0xFF	; 255
    924a:	7f 7f       	andi	r23, 0xFF	; 255
    924c:	7f 7e       	andi	r23, 0xEF	; 239
    924e:	7e 7e       	andi	r23, 0xEE	; 238
    9250:	7e 7d       	andi	r23, 0xDE	; 222
    9252:	7d 7d       	andi	r23, 0xDD	; 221
    9254:	7c 7c       	andi	r23, 0xCC	; 204
    9256:	7c 7b       	andi	r23, 0xBC	; 188
    9258:	7b 7a       	andi	r23, 0xAB	; 171
    925a:	7a 79       	andi	r23, 0x9A	; 154
    925c:	79 78       	andi	r23, 0x89	; 137
    925e:	77 77       	andi	r23, 0x77	; 119
    9260:	76 75       	andi	r23, 0x56	; 86
    9262:	74 73       	andi	r23, 0x34	; 52
    9264:	72 71       	andi	r23, 0x12	; 18
    9266:	70 6f       	ori	r23, 0xF0	; 240
    9268:	6e 6c       	ori	r22, 0xCE	; 206
    926a:	6b 69       	ori	r22, 0x9B	; 155
    926c:	67 65       	ori	r22, 0x57	; 87
    926e:	63 61       	ori	r22, 0x13	; 19
    9270:	5e 5b       	subi	r21, 0xBE	; 190
    9272:	58 54       	subi	r21, 0x48	; 72
    9274:	50 4c       	sbci	r21, 0xC0	; 192
    9276:	46 40       	sbci	r20, 0x06	; 6
    9278:	3a 31       	cpi	r19, 0x1A	; 26
    927a:	28 1e       	adc	r2, r24
    927c:	13 09       	sbc	r17, r3
    927e:	03 00       	.word	0x0003	; ????
    9280:	c6 cc       	rjmp	.-1652   	; 0x8c0e <waves+0xe>
    9282:	d5 db       	rcall	.-2134   	; 0x8a2e <steptable+0x26>
    9284:	df e3       	ldi	r29, 0x3F	; 63
    9286:	e5 e7       	ldi	r30, 0x75	; 117
    9288:	e9 ea       	ldi	r30, 0xA9	; 169
    928a:	eb ec       	ldi	r30, 0xCB	; 203
    928c:	ed ee       	ldi	r30, 0xED	; 237
    928e:	ef ef       	ldi	r30, 0xFF	; 255
    9290:	f0 f0       	brcs	.+60     	; 0x92ce <waves+0x6ce>
    9292:	f0 f1       	brcs	.+124    	; 0x9310 <waves+0x710>
    9294:	f1 f1       	breq	.+124    	; 0x9312 <waves+0x712>
    9296:	f1 f2       	breq	.-68     	; 0x9254 <waves+0x654>
    9298:	f2 f2       	brmi	.-68     	; 0x9256 <waves+0x656>
    929a:	f2 f2       	brmi	.-68     	; 0x9258 <waves+0x658>
    929c:	f2 f2       	brmi	.-68     	; 0x925a <waves+0x65a>
    929e:	f2 f3       	brmi	.-4      	; 0x929c <waves+0x69c>
    92a0:	f3 f3       	brvs	.-4      	; 0x929e <waves+0x69e>
    92a2:	f3 f3       	brvs	.-4      	; 0x92a0 <waves+0x6a0>
    92a4:	f3 f3       	brvs	.-4      	; 0x92a2 <waves+0x6a2>
    92a6:	f3 f3       	brvs	.-4      	; 0x92a4 <waves+0x6a4>
    92a8:	f3 f3       	brvs	.-4      	; 0x92a6 <waves+0x6a6>
    92aa:	f3 f3       	brvs	.-4      	; 0x92a8 <waves+0x6a8>
    92ac:	f3 f3       	brvs	.-4      	; 0x92aa <waves+0x6aa>
    92ae:	f3 f3       	brvs	.-4      	; 0x92ac <waves+0x6ac>
    92b0:	f3 f3       	brvs	.-4      	; 0x92ae <waves+0x6ae>
    92b2:	f3 f3       	brvs	.-4      	; 0x92b0 <waves+0x6b0>
    92b4:	f3 f3       	brvs	.-4      	; 0x92b2 <waves+0x6b2>
    92b6:	f3 f3       	brvs	.-4      	; 0x92b4 <waves+0x6b4>
    92b8:	f3 f3       	brvs	.-4      	; 0x92b6 <waves+0x6b6>
    92ba:	f3 f3       	brvs	.-4      	; 0x92b8 <waves+0x6b8>
    92bc:	f3 f3       	brvs	.-4      	; 0x92ba <waves+0x6ba>
    92be:	f3 f3       	brvs	.-4      	; 0x92bc <waves+0x6bc>
    92c0:	f3 f3       	brvs	.-4      	; 0x92be <waves+0x6be>
    92c2:	f3 f3       	brvs	.-4      	; 0x92c0 <waves+0x6c0>
    92c4:	f3 f3       	brvs	.-4      	; 0x92c2 <waves+0x6c2>
    92c6:	f3 f3       	brvs	.-4      	; 0x92c4 <waves+0x6c4>
    92c8:	f3 f3       	brvs	.-4      	; 0x92c6 <waves+0x6c6>
    92ca:	f3 f3       	brvs	.-4      	; 0x92c8 <waves+0x6c8>
    92cc:	f3 f3       	brvs	.-4      	; 0x92ca <waves+0x6ca>
    92ce:	f3 f3       	brvs	.-4      	; 0x92cc <waves+0x6cc>
    92d0:	f3 f3       	brvs	.-4      	; 0x92ce <waves+0x6ce>
    92d2:	f3 f3       	brvs	.-4      	; 0x92d0 <waves+0x6d0>
    92d4:	f3 f3       	brvs	.-4      	; 0x92d2 <waves+0x6d2>
    92d6:	f3 f3       	brvs	.-4      	; 0x92d4 <waves+0x6d4>
    92d8:	f3 f3       	brvs	.-4      	; 0x92d6 <waves+0x6d6>
    92da:	f3 f3       	brvs	.-4      	; 0x92d8 <waves+0x6d8>
    92dc:	f3 f3       	brvs	.-4      	; 0x92da <waves+0x6da>
    92de:	f3 f3       	brvs	.-4      	; 0x92dc <waves+0x6dc>
    92e0:	f2 f2       	brmi	.-68     	; 0x929e <waves+0x69e>
    92e2:	f2 f2       	brmi	.-68     	; 0x92a0 <waves+0x6a0>
    92e4:	f2 f2       	brmi	.-68     	; 0x92a2 <waves+0x6a2>
    92e6:	f2 f2       	brmi	.-68     	; 0x92a4 <waves+0x6a4>
    92e8:	f1 f1       	breq	.+124    	; 0x9366 <waves+0x766>
    92ea:	f1 f1       	breq	.+124    	; 0x9368 <waves+0x768>
    92ec:	f0 f0       	brcs	.+60     	; 0x932a <waves+0x72a>
    92ee:	f0 ef       	ldi	r31, 0xF0	; 240
    92f0:	ef ee       	ldi	r30, 0xEF	; 239
    92f2:	ed ec       	ldi	r30, 0xCD	; 205
    92f4:	eb ea       	ldi	r30, 0xAB	; 171
    92f6:	e9 e7       	ldi	r30, 0x79	; 121
    92f8:	e5 e3       	ldi	r30, 0x35	; 53
    92fa:	df db       	rcall	.-2114   	; 0x8aba <steptable+0xb2>
    92fc:	d5 cc       	rjmp	.-1622   	; 0x8ca8 <waves+0xa8>
    92fe:	c6 00       	.word	0x00c6	; ????
    9300:	00 28       	or	r0, r0
    9302:	3d 42       	sbci	r19, 0x2D	; 45
    9304:	30 2d       	mov	r19, r0
    9306:	2c 2b       	or	r18, r28
    9308:	2c 2d       	mov	r18, r12
    930a:	2e 2f       	mov	r18, r30
    930c:	30 32       	cpi	r19, 0x20	; 32
    930e:	33 35       	cpi	r19, 0x53	; 83
    9310:	37 39       	cpi	r19, 0x97	; 151
    9312:	3b 3d       	cpi	r19, 0xDB	; 219
    9314:	3f 41       	sbci	r19, 0x1F	; 31
    9316:	43 45       	sbci	r20, 0x53	; 83
    9318:	48 4a       	sbci	r20, 0xA8	; 168
    931a:	4c 4e       	sbci	r20, 0xEC	; 236
    931c:	50 53       	subi	r21, 0x30	; 48
    931e:	55 57       	subi	r21, 0x75	; 117
    9320:	59 5b       	subi	r21, 0xB9	; 185
    9322:	5d 5f       	subi	r21, 0xFD	; 253
    9324:	61 63       	ori	r22, 0x31	; 49
    9326:	65 67       	ori	r22, 0x75	; 117
    9328:	69 6b       	ori	r22, 0xB9	; 185
    932a:	6c 6e       	ori	r22, 0xEC	; 236
    932c:	70 71       	andi	r23, 0x10	; 16
    932e:	73 74       	andi	r23, 0x43	; 67
    9330:	75 77       	andi	r23, 0x75	; 117
    9332:	78 79       	andi	r23, 0x98	; 152
    9334:	7a 7b       	andi	r23, 0xBA	; 186
    9336:	7c 7d       	andi	r23, 0xDC	; 220
    9338:	7d 7e       	andi	r23, 0xED	; 237
    933a:	7e 7f       	andi	r23, 0xFE	; 254
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7e 7e       	andi	r23, 0xEE	; 238
    9348:	7d 7d       	andi	r23, 0xDD	; 221
    934a:	7c 7b       	andi	r23, 0xBC	; 188
    934c:	7a 79       	andi	r23, 0x9A	; 154
    934e:	78 77       	andi	r23, 0x78	; 120
    9350:	75 74       	andi	r23, 0x45	; 69
    9352:	73 71       	andi	r23, 0x13	; 19
    9354:	70 6e       	ori	r23, 0xE0	; 224
    9356:	6c 6b       	ori	r22, 0xBC	; 188
    9358:	69 67       	ori	r22, 0x79	; 121
    935a:	65 63       	ori	r22, 0x35	; 53
    935c:	61 5f       	subi	r22, 0xF1	; 241
    935e:	5d 5b       	subi	r21, 0xBD	; 189
    9360:	59 57       	subi	r21, 0x79	; 121
    9362:	55 53       	subi	r21, 0x35	; 53
    9364:	50 4e       	sbci	r21, 0xE0	; 224
    9366:	4c 4a       	sbci	r20, 0xAC	; 172
    9368:	48 45       	sbci	r20, 0x58	; 88
    936a:	43 41       	sbci	r20, 0x13	; 19
    936c:	3f 3d       	cpi	r19, 0xDF	; 223
    936e:	3b 39       	cpi	r19, 0x9B	; 155
    9370:	37 35       	cpi	r19, 0x57	; 87
    9372:	33 32       	cpi	r19, 0x23	; 35
    9374:	30 2f       	mov	r19, r16
    9376:	2e 2d       	mov	r18, r14
    9378:	2c 2b       	or	r18, r28
    937a:	2c 2d       	mov	r18, r12
    937c:	30 42       	sbci	r19, 0x20	; 32
    937e:	3d 28       	or	r3, r13
    9380:	00 e9       	ldi	r16, 0x90	; 144
    9382:	e5 fe       	sbrs	r14, 5
    9384:	d4 d7       	rcall	.+4008   	; 0xa32e <init_player_shot+0x3d2>
    9386:	d7 d7       	rcall	.+4014   	; 0xa336 <init_player_shot+0x3da>
    9388:	d6 d4       	rcall	.+2476   	; 0x9d36 <LBRandom+0x6>
    938a:	d2 d0       	rcall	.+420    	; 0x9530 <waves+0x930>
    938c:	ce cc       	rjmp	.-1636   	; 0x8d2a <waves+0x12a>
    938e:	ca c8       	rjmp	.-3692   	; 0x8524 <ProcessMusic+0x94>
    9390:	c6 c3       	rjmp	.+1932   	; 0x9b1e <LBGetJoyPadState+0x24>
    9392:	c1 bf       	out	0x31, r28	; 49
    9394:	bd ba       	out	0x1d, r11	; 29
    9396:	b8 b6       	in	r11, 0x38	; 56
    9398:	b4 b1       	in	r27, 0x04	; 4
    939a:	af ad       	ldd	r26, Y+63	; 0x3f
    939c:	ab a9       	ldd	r26, Y+51	; 0x33
    939e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    93a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    93a2:	9f 9e       	mul	r9, r31
    93a4:	9c 9a       	sbi	0x13, 4	; 19
    93a6:	99 97       	sbiw	r26, 0x29	; 41
    93a8:	95 94       	asr	r9
    93aa:	93 91       	.word	0x9193	; ????
    93ac:	90 8f       	std	Z+24, r25	; 0x18
    93ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    93b0:	8b 8a       	std	Y+19, r8	; 0x13
    93b2:	89 88       	ldd	r8, Y+17	; 0x11
    93b4:	88 87       	std	Y+8, r24	; 0x08
    93b6:	86 85       	ldd	r24, Z+14	; 0x0e
    93b8:	85 84       	ldd	r8, Z+13	; 0x0d
    93ba:	84 84       	ldd	r8, Z+12	; 0x0c
    93bc:	83 83       	std	Z+3, r24	; 0x03
    93be:	83 83       	std	Z+3, r24	; 0x03
    93c0:	83 83       	std	Z+3, r24	; 0x03
    93c2:	83 83       	std	Z+3, r24	; 0x03
    93c4:	83 84       	ldd	r8, Z+11	; 0x0b
    93c6:	84 84       	ldd	r8, Z+12	; 0x0c
    93c8:	85 85       	ldd	r24, Z+13	; 0x0d
    93ca:	86 87       	std	Z+14, r24	; 0x0e
    93cc:	88 88       	ldd	r8, Y+16	; 0x10
    93ce:	89 8a       	std	Y+17, r8	; 0x11
    93d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    93d2:	8d 8f       	std	Y+29, r24	; 0x1d
    93d4:	90 91 93 94 	lds	r25, 0x9493
    93d8:	95 97       	sbiw	r26, 0x25	; 37
    93da:	99 9a       	sbi	0x13, 1	; 19
    93dc:	9c 9e       	mul	r9, r28
    93de:	9f a1       	ldd	r25, Y+39	; 0x27
    93e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    93e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    93e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    93e6:	af b1       	in	r26, 0x0f	; 15
    93e8:	b4 b6       	in	r11, 0x34	; 52
    93ea:	b8 ba       	out	0x18, r11	; 24
    93ec:	bd bf       	out	0x3d, r27	; 61
    93ee:	c1 c3       	rjmp	.+1922   	; 0x9b72 <LBGetJoyPadState+0x78>
    93f0:	c6 c8       	rjmp	.-3700   	; 0x857e <ProcessMusic+0xee>
    93f2:	ca cc       	rjmp	.-1644   	; 0x8d88 <waves+0x188>
    93f4:	ce d0       	rcall	.+412    	; 0x9592 <waves+0x992>
    93f6:	d2 d4       	rcall	.+2468   	; 0x9d9c <LBMapSprite+0x22>
    93f8:	d6 d7       	rcall	.+4012   	; 0xa3a6 <init_boss_shot+0xc>
    93fa:	d7 d7       	rcall	.+4014   	; 0xa3aa <init_boss_shot+0x10>
    93fc:	d4 fe       	sbrs	r13, 4
    93fe:	e5 e9       	ldi	r30, 0x95	; 149
    9400:	f9 f8       	.word	0xf8f9	; ????
    9402:	f9 f5       	brne	.+126    	; 0x9482 <waves+0x882>
    9404:	eb e1       	ldi	r30, 0x1B	; 27
    9406:	dd de       	rcall	.-582    	; 0x91c2 <waves+0x5c2>
    9408:	e0 e2       	ldi	r30, 0x20	; 32
    940a:	e4 e5       	ldi	r30, 0x54	; 84
    940c:	e6 e5       	ldi	r30, 0x56	; 86
    940e:	e4 e2       	ldi	r30, 0x24	; 36
    9410:	de d9       	rcall	.-3140   	; 0x87ce <ProcessMusic+0x33e>
    9412:	d2 ca       	rjmp	.-2652   	; 0x89b8 <esmw+0x7a>
    9414:	c1 b7       	in	r28, 0x31	; 49
    9416:	ac a2       	std	Y+36, r10	; 0x24
    9418:	99 91       	ld	r25, Y+
    941a:	8a 86       	std	Y+10, r8	; 0x0a
    941c:	83 81       	ldd	r24, Z+3	; 0x03
    941e:	80 80       	ld	r8, Z
    9420:	81 82       	std	Z+1, r8	; 0x01
    9422:	83 85       	ldd	r24, Z+11	; 0x0b
    9424:	86 88       	ldd	r8, Z+22	; 0x16
    9426:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9428:	8d 8f       	std	Y+29, r24	; 0x1d
    942a:	90 92 93 95 	sts	0x9593, r9
    942e:	96 97       	sbiw	r26, 0x26	; 38
    9430:	98 99       	sbic	0x13, 0	; 19
    9432:	9a 9b       	sbis	0x13, 2	; 19
    9434:	9b 9c       	mul	r9, r11
    9436:	9d 9d       	mul	r25, r13
    9438:	9d 9e       	mul	r9, r29
    943a:	9e 9e       	mul	r9, r30
    943c:	9f 9f       	mul	r25, r31
    943e:	9f 9f       	mul	r25, r31
    9440:	9f 9f       	mul	r25, r31
    9442:	9f 9e       	mul	r9, r31
    9444:	9e 9e       	mul	r9, r30
    9446:	9d 9d       	mul	r25, r13
    9448:	9d 9c       	mul	r9, r13
    944a:	9b 9b       	sbis	0x13, 3	; 19
    944c:	9a 99       	sbic	0x13, 2	; 19
    944e:	98 97       	sbiw	r26, 0x28	; 40
    9450:	96 95       	lsr	r25
    9452:	93 92       	.word	0x9293	; ????
    9454:	90 8f       	std	Z+24, r25	; 0x18
    9456:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9458:	8a 88       	ldd	r8, Y+18	; 0x12
    945a:	86 85       	ldd	r24, Z+14	; 0x0e
    945c:	83 82       	std	Z+3, r8	; 0x03
    945e:	81 80       	ldd	r8, Z+1	; 0x01
    9460:	80 81       	ld	r24, Z
    9462:	83 86       	std	Z+11, r8	; 0x0b
    9464:	8a 91       	ld	r24, -Y
    9466:	99 a2       	std	Y+33, r9	; 0x21
    9468:	ac b7       	in	r26, 0x3c	; 60
    946a:	c1 ca       	rjmp	.-2686   	; 0x89ee <esmw+0xb0>
    946c:	d2 d9       	rcall	.-3164   	; 0x8812 <ProcessMusic+0x382>
    946e:	de e2       	ldi	r29, 0x2E	; 46
    9470:	e4 e5       	ldi	r30, 0x54	; 84
    9472:	e6 e5       	ldi	r30, 0x56	; 86
    9474:	e4 e2       	ldi	r30, 0x24	; 36
    9476:	e0 de       	rcall	.-576    	; 0x9238 <waves+0x638>
    9478:	dd e1       	ldi	r29, 0x1D	; 29
    947a:	eb f5       	brvc	.+122    	; 0x94f6 <waves+0x8f6>
    947c:	f9 f8       	.word	0xf8f9	; ????
    947e:	f9 00       	.word	0x00f9	; ????
    9480:	07 08       	sbc	r0, r7
    9482:	07 0b       	sbc	r16, r23
    9484:	15 1f       	adc	r17, r21
    9486:	23 22       	and	r2, r19
    9488:	20 1e       	adc	r2, r16
    948a:	1c 1b       	sub	r17, r28
    948c:	1a 1b       	sub	r17, r26
    948e:	1c 1e       	adc	r1, r28
    9490:	22 27       	eor	r18, r18
    9492:	2e 36       	cpi	r18, 0x6E	; 110
    9494:	3f 49       	sbci	r19, 0x9F	; 159
    9496:	54 5e       	subi	r21, 0xE4	; 228
    9498:	67 6f       	ori	r22, 0xF7	; 247
    949a:	76 7a       	andi	r23, 0xA6	; 166
    949c:	7e 7f       	andi	r23, 0xFE	; 254
    949e:	7f 7f       	andi	r23, 0xFF	; 255
    94a0:	7f 7e       	andi	r23, 0xEF	; 239
    94a2:	7d 7b       	andi	r23, 0xBD	; 189
    94a4:	7a 78       	andi	r23, 0x8A	; 138
    94a6:	76 74       	andi	r23, 0x46	; 70
    94a8:	73 71       	andi	r23, 0x13	; 19
    94aa:	70 6e       	ori	r23, 0xE0	; 224
    94ac:	6d 6b       	ori	r22, 0xBD	; 189
    94ae:	6a 69       	ori	r22, 0x9A	; 154
    94b0:	68 67       	ori	r22, 0x78	; 120
    94b2:	66 65       	ori	r22, 0x56	; 86
    94b4:	65 64       	ori	r22, 0x45	; 69
    94b6:	64 63       	ori	r22, 0x34	; 52
    94b8:	63 62       	ori	r22, 0x23	; 35
    94ba:	62 62       	ori	r22, 0x22	; 34
    94bc:	61 61       	ori	r22, 0x11	; 17
    94be:	61 61       	ori	r22, 0x11	; 17
    94c0:	61 61       	ori	r22, 0x11	; 17
    94c2:	61 62       	ori	r22, 0x21	; 33
    94c4:	62 62       	ori	r22, 0x22	; 34
    94c6:	63 63       	ori	r22, 0x33	; 51
    94c8:	63 64       	ori	r22, 0x43	; 67
    94ca:	65 65       	ori	r22, 0x55	; 85
    94cc:	66 67       	ori	r22, 0x76	; 118
    94ce:	68 69       	ori	r22, 0x98	; 152
    94d0:	6a 6b       	ori	r22, 0xBA	; 186
    94d2:	6d 6e       	ori	r22, 0xED	; 237
    94d4:	70 71       	andi	r23, 0x10	; 16
    94d6:	73 74       	andi	r23, 0x43	; 67
    94d8:	76 78       	andi	r23, 0x86	; 134
    94da:	7a 7b       	andi	r23, 0xBA	; 186
    94dc:	7d 7e       	andi	r23, 0xED	; 237
    94de:	7f 7f       	andi	r23, 0xFF	; 255
    94e0:	7f 7f       	andi	r23, 0xFF	; 255
    94e2:	7e 7a       	andi	r23, 0xAE	; 174
    94e4:	76 6f       	ori	r23, 0xF6	; 246
    94e6:	67 5e       	subi	r22, 0xE7	; 231
    94e8:	54 49       	sbci	r21, 0x94	; 148
    94ea:	3f 36       	cpi	r19, 0x6F	; 111
    94ec:	2e 27       	eor	r18, r30
    94ee:	22 1e       	adc	r2, r18
    94f0:	1c 1b       	sub	r17, r28
    94f2:	1a 1b       	sub	r17, r26
    94f4:	1c 1e       	adc	r1, r28
    94f6:	20 22       	and	r2, r16
    94f8:	23 1f       	adc	r18, r19
    94fa:	15 0b       	sbc	r17, r21
    94fc:	07 08       	sbc	r0, r7
    94fe:	07 00       	.word	0x0007	; ????
    9500:	1f 31       	cpi	r17, 0x1F	; 31
    9502:	3d 44       	sbci	r19, 0x4D	; 77
    9504:	4e 53       	subi	r20, 0x3E	; 62
    9506:	54 56       	subi	r21, 0x64	; 100
    9508:	5a 5f       	subi	r21, 0xFA	; 250
    950a:	64 69       	ori	r22, 0x94	; 148
    950c:	6e 74       	andi	r22, 0x4E	; 78
    950e:	76 79       	andi	r23, 0x96	; 150
    9510:	7c 7f       	andi	r23, 0xFC	; 252
    9512:	7f 7f       	andi	r23, 0xFF	; 255
    9514:	7f 7f       	andi	r23, 0xFF	; 255
    9516:	7f 7f       	andi	r23, 0xFF	; 255
    9518:	7f 7f       	andi	r23, 0xFF	; 255
    951a:	7f 7f       	andi	r23, 0xFF	; 255
    951c:	7f 7f       	andi	r23, 0xFF	; 255
    951e:	7f 7f       	andi	r23, 0xFF	; 255
    9520:	7f 7f       	andi	r23, 0xFF	; 255
    9522:	7f 7f       	andi	r23, 0xFF	; 255
    9524:	7f 7f       	andi	r23, 0xFF	; 255
    9526:	7f 7f       	andi	r23, 0xFF	; 255
    9528:	7f 7f       	andi	r23, 0xFF	; 255
    952a:	7f 7f       	andi	r23, 0xFF	; 255
    952c:	7f 7f       	andi	r23, 0xFF	; 255
    952e:	7f 7f       	andi	r23, 0xFF	; 255
    9530:	7f 7f       	andi	r23, 0xFF	; 255
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7f       	andi	r23, 0xFF	; 255
    954e:	7f 7f       	andi	r23, 0xFF	; 255
    9550:	7f 7f       	andi	r23, 0xFF	; 255
    9552:	7f 7f       	andi	r23, 0xFF	; 255
    9554:	7f 7f       	andi	r23, 0xFF	; 255
    9556:	7f 7f       	andi	r23, 0xFF	; 255
    9558:	7f 7f       	andi	r23, 0xFF	; 255
    955a:	7f 7f       	andi	r23, 0xFF	; 255
    955c:	7f 7f       	andi	r23, 0xFF	; 255
    955e:	7f 7f       	andi	r23, 0xFF	; 255
    9560:	7f 7f       	andi	r23, 0xFF	; 255
    9562:	7f 7f       	andi	r23, 0xFF	; 255
    9564:	7f 7f       	andi	r23, 0xFF	; 255
    9566:	7f 7f       	andi	r23, 0xFF	; 255
    9568:	7f 7f       	andi	r23, 0xFF	; 255
    956a:	7f 7f       	andi	r23, 0xFF	; 255
    956c:	7f 7f       	andi	r23, 0xFF	; 255
    956e:	7f 7f       	andi	r23, 0xFF	; 255
    9570:	7f 7f       	andi	r23, 0xFF	; 255
    9572:	7f 7f       	andi	r23, 0xFF	; 255
    9574:	7f 7f       	andi	r23, 0xFF	; 255
    9576:	7f 7f       	andi	r23, 0xFF	; 255
    9578:	7f 7f       	andi	r23, 0xFF	; 255
    957a:	7f 7c       	andi	r23, 0xCF	; 207
    957c:	78 71       	andi	r23, 0x18	; 24
    957e:	68 4c       	sbci	r22, 0xC8	; 200
    9580:	2c 1c       	adc	r2, r12
    9582:	12 0c       	add	r1, r2
    9584:	0a 0b       	sbc	r16, r26
    9586:	0a 05       	cpc	r16, r10
    9588:	fd f3       	brhs	.-2      	; 0x9588 <waves+0x988>
    958a:	e9 df       	rcall	.-46     	; 0x955e <waves+0x95e>
    958c:	d4 ca       	rjmp	.-2648   	; 0x8b36 <steptable+0x12e>
    958e:	c0 b7       	in	r28, 0x30	; 48
    9590:	ae a6       	std	Y+46, r10	; 0x2e
    9592:	9e 97       	sbiw	r26, 0x2e	; 46
    9594:	91 8b       	std	Z+17, r25	; 0x11
    9596:	86 85       	ldd	r24, Z+14	; 0x0e
    9598:	82 80       	ldd	r8, Z+2	; 0x02
    959a:	80 80       	ld	r8, Z
    959c:	80 80       	ld	r8, Z
    959e:	80 80       	ld	r8, Z
    95a0:	80 80       	ld	r8, Z
    95a2:	80 80       	ld	r8, Z
    95a4:	80 80       	ld	r8, Z
    95a6:	80 80       	ld	r8, Z
    95a8:	80 80       	ld	r8, Z
    95aa:	80 80       	ld	r8, Z
    95ac:	80 80       	ld	r8, Z
    95ae:	80 80       	ld	r8, Z
    95b0:	80 80       	ld	r8, Z
    95b2:	80 80       	ld	r8, Z
    95b4:	80 80       	ld	r8, Z
    95b6:	80 80       	ld	r8, Z
    95b8:	80 80       	ld	r8, Z
    95ba:	80 80       	ld	r8, Z
    95bc:	80 80       	ld	r8, Z
    95be:	80 80       	ld	r8, Z
    95c0:	80 80       	ld	r8, Z
    95c2:	80 80       	ld	r8, Z
    95c4:	80 80       	ld	r8, Z
    95c6:	80 80       	ld	r8, Z
    95c8:	80 80       	ld	r8, Z
    95ca:	80 80       	ld	r8, Z
    95cc:	80 80       	ld	r8, Z
    95ce:	80 80       	ld	r8, Z
    95d0:	80 80       	ld	r8, Z
    95d2:	80 80       	ld	r8, Z
    95d4:	80 80       	ld	r8, Z
    95d6:	80 80       	ld	r8, Z
    95d8:	80 80       	ld	r8, Z
    95da:	80 80       	ld	r8, Z
    95dc:	80 80       	ld	r8, Z
    95de:	80 80       	ld	r8, Z
    95e0:	80 80       	ld	r8, Z
    95e2:	80 80       	ld	r8, Z
    95e4:	80 80       	ld	r8, Z
    95e6:	80 80       	ld	r8, Z
    95e8:	80 80       	ld	r8, Z
    95ea:	80 80       	ld	r8, Z
    95ec:	80 80       	ld	r8, Z
    95ee:	80 80       	ld	r8, Z
    95f0:	80 80       	ld	r8, Z
    95f2:	80 80       	ld	r8, Z
    95f4:	80 87       	std	Z+8, r24	; 0x08
    95f6:	91 9d       	mul	r25, r1
    95f8:	ac c4       	rjmp	.+2392   	; 0x9f52 <init_enemy_state+0x1c>
    95fa:	cb d4       	rcall	.+2454   	; 0x9f92 <init_player_shot+0x36>
    95fc:	dd f2       	brhs	.-74     	; 0x95b4 <waves+0x9b4>
    95fe:	fa fa       	.word	0xfafa	; ????

00009600 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9600:	80 91 f3 0c 	lds	r24, 0x0CF3
    9604:	90 91 85 0d 	lds	r25, 0x0D85
    9608:	89 17       	cp	r24, r25
    960a:	78 f4       	brcc	.+30     	; 0x962a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    960c:	e8 2f       	mov	r30, r24
    960e:	f0 e0       	ldi	r31, 0x00	; 0
    9610:	9f 01       	movw	r18, r30
    9612:	22 0f       	add	r18, r18
    9614:	33 1f       	adc	r19, r19
    9616:	e2 0f       	add	r30, r18
    9618:	f3 1f       	adc	r31, r19
    961a:	e0 5b       	subi	r30, 0xB0	; 176
    961c:	f3 4f       	sbci	r31, 0xF3	; 243
    961e:	a0 81       	ld	r26, Z
    9620:	b1 81       	ldd	r27, Z+1	; 0x01
    9622:	92 81       	ldd	r25, Z+2	; 0x02
    9624:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9626:	8f 5f       	subi	r24, 0xFF	; 255
    9628:	ed cf       	rjmp	.-38     	; 0x9604 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    962a:	08 95       	ret

0000962c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    962c:	2f 92       	push	r2
    962e:	3f 92       	push	r3
    9630:	4f 92       	push	r4
    9632:	5f 92       	push	r5
    9634:	6f 92       	push	r6
    9636:	7f 92       	push	r7
    9638:	8f 92       	push	r8
    963a:	9f 92       	push	r9
    963c:	af 92       	push	r10
    963e:	bf 92       	push	r11
    9640:	cf 92       	push	r12
    9642:	df 92       	push	r13
    9644:	ef 92       	push	r14
    9646:	ff 92       	push	r15
    9648:	0f 93       	push	r16
    964a:	1f 93       	push	r17
    964c:	cf 93       	push	r28
    964e:	df 93       	push	r29
    9650:	00 d0       	rcall	.+0      	; 0x9652 <ProcessSprites+0x26>
    9652:	00 d0       	rcall	.+0      	; 0x9654 <ProcessSprites+0x28>
    9654:	cd b7       	in	r28, 0x3d	; 61
    9656:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9658:	80 91 00 05 	lds	r24, 0x0500
    965c:	88 23       	and	r24, r24
    965e:	09 f4       	brne	.+2      	; 0x9662 <ProcessSprites+0x36>
    9660:	e0 c0       	rjmp	.+448    	; 0x9822 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9662:	80 91 f2 0c 	lds	r24, 0x0CF2
    9666:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    966a:	80 93 85 0d 	sts	0x0D85, r24
    966e:	e0 e1       	ldi	r30, 0x10	; 16
    9670:	ce 2e       	mov	r12, r30
    9672:	e5 e0       	ldi	r30, 0x05	; 5
    9674:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9676:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9678:	f6 01       	movw	r30, r12
    967a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    967c:	20 3e       	cpi	r18, 0xE0	; 224
    967e:	09 f4       	brne	.+2      	; 0x9682 <ProcessSprites+0x56>
    9680:	b1 c0       	rjmp	.+354    	; 0x97e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9682:	80 91 b2 0c 	lds	r24, 0x0CB2
    9686:	90 e0       	ldi	r25, 0x00	; 0
    9688:	82 0f       	add	r24, r18
    968a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    968c:	41 81       	ldd	r20, Z+1	; 0x01
    968e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9692:	30 e0       	ldi	r19, 0x00	; 0
    9694:	24 0f       	add	r18, r20
    9696:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9698:	ac 01       	movw	r20, r24
    969a:	73 e0       	ldi	r23, 0x03	; 3
    969c:	56 95       	lsr	r21
    969e:	47 95       	ror	r20
    96a0:	7a 95       	dec	r23
    96a2:	e1 f7       	brne	.-8      	; 0x969c <ProcessSprites+0x70>
    96a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    96a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    96a8:	11 f0       	breq	.+4      	; 0x96ae <ProcessSprites+0x82>
    96aa:	92 e0       	ldi	r25, 0x02	; 2
    96ac:	01 c0       	rjmp	.+2      	; 0x96b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    96ae:	91 e0       	ldi	r25, 0x01	; 1
    96b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    96b2:	a9 01       	movw	r20, r18
    96b4:	63 e0       	ldi	r22, 0x03	; 3
    96b6:	56 95       	lsr	r21
    96b8:	47 95       	ror	r20
    96ba:	6a 95       	dec	r22
    96bc:	e1 f7       	brne	.-8      	; 0x96b6 <ProcessSprites+0x8a>
    96be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    96c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    96c2:	19 f0       	breq	.+6      	; 0x96ca <ProcessSprites+0x9e>
    96c4:	52 e0       	ldi	r21, 0x02	; 2
    96c6:	35 2e       	mov	r3, r21
    96c8:	02 c0       	rjmp	.+4      	; 0x96ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    96ca:	33 24       	eor	r3, r3
    96cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    96ce:	30 e0       	ldi	r19, 0x00	; 0
    96d0:	32 2f       	mov	r19, r18
    96d2:	22 27       	eor	r18, r18
    96d4:	f9 01       	movw	r30, r18
    96d6:	e8 0f       	add	r30, r24
    96d8:	f1 1d       	adc	r31, r1
    96da:	fc 83       	std	Y+4, r31	; 0x04
    96dc:	eb 83       	std	Y+3, r30	; 0x03
    96de:	e1 2c       	mov	r14, r1
    96e0:	f1 2c       	mov	r15, r1
    96e2:	be 2c       	mov	r11, r14
    96e4:	aa 24       	eor	r10, r10
    96e6:	26 2c       	mov	r2, r6
    96e8:	45 2c       	mov	r4, r5
    96ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    96ec:	84 2c       	mov	r8, r4
    96ee:	91 2c       	mov	r9, r1
    96f0:	84 2d       	mov	r24, r4
    96f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    96f6:	42 2f       	mov	r20, r18
    96f8:	50 e0       	ldi	r21, 0x00	; 0
    96fa:	44 0f       	add	r20, r20
    96fc:	55 1f       	adc	r21, r21
    96fe:	84 16       	cp	r8, r20
    9700:	95 06       	cpc	r9, r21
    9702:	14 f0       	brlt	.+4      	; 0x9708 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9704:	22 0f       	add	r18, r18
    9706:	03 c0       	rjmp	.+6      	; 0x970e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9708:	42 16       	cp	r4, r18
    970a:	10 f0       	brcs	.+4      	; 0x9710 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    970c:	84 2d       	mov	r24, r4
    970e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9710:	ff e1       	ldi	r31, 0x1F	; 31
    9712:	f2 15       	cp	r31, r2
    9714:	18 f4       	brcc	.+6      	; 0x971c <ProcessSprites+0xf0>
    9716:	00 ee       	ldi	r16, 0xE0	; 224
    9718:	02 0d       	add	r16, r2
    971a:	01 c0       	rjmp	.+2      	; 0x971e <ProcessSprites+0xf2>
    971c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    971e:	28 2f       	mov	r18, r24
    9720:	26 95       	lsr	r18
    9722:	26 95       	lsr	r18
    9724:	26 95       	lsr	r18
    9726:	10 e0       	ldi	r17, 0x00	; 0
    9728:	40 e2       	ldi	r20, 0x20	; 32
    972a:	24 9f       	mul	r18, r20
    972c:	00 0d       	add	r16, r0
    972e:	11 1d       	adc	r17, r1
    9730:	11 24       	eor	r1, r1
    9732:	23 e0       	ldi	r18, 0x03	; 3
    9734:	00 0f       	add	r16, r16
    9736:	11 1f       	adc	r17, r17
    9738:	2a 95       	dec	r18
    973a:	e1 f7       	brne	.-8      	; 0x9734 <ProcessSprites+0x108>
    973c:	87 70       	andi	r24, 0x07	; 7
    973e:	08 0f       	add	r16, r24
    9740:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9742:	00 50       	subi	r16, 0x00	; 0
    9744:	1f 4f       	sbci	r17, 0xFF	; 255
    9746:	f8 01       	movw	r30, r16
    9748:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    974a:	81 e0       	ldi	r24, 0x01	; 1
    974c:	7c 31       	cpi	r23, 0x1C	; 28
    974e:	08 f4       	brcc	.+2      	; 0x9752 <ProcessSprites+0x126>
    9750:	80 e0       	ldi	r24, 0x00	; 0
    9752:	21 e0       	ldi	r18, 0x01	; 1
    9754:	30 91 f3 0c 	lds	r19, 0x0CF3
    9758:	73 17       	cp	r23, r19
    975a:	18 f0       	brcs	.+6      	; 0x9762 <ProcessSprites+0x136>
    975c:	20 e0       	ldi	r18, 0x00	; 0
    975e:	88 23       	and	r24, r24
    9760:	51 f1       	breq	.+84     	; 0x97b6 <ProcessSprites+0x18a>
    9762:	60 91 85 0d 	lds	r22, 0x0D85
    9766:	6c 31       	cpi	r22, 0x1C	; 28
    9768:	20 f5       	brcc	.+72     	; 0x97b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    976a:	88 23       	and	r24, r24
    976c:	31 f0       	breq	.+12     	; 0x977a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    976e:	84 ee       	ldi	r24, 0xE4	; 228
    9770:	87 0f       	add	r24, r23
    9772:	7a 83       	std	Y+2, r23	; 0x02
    9774:	0e 94 64 3b 	call	0x76c8	; 0x76c8 <CopyFlashTile>
    9778:	06 c0       	rjmp	.+12     	; 0x9786 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    977a:	22 23       	and	r18, r18
    977c:	29 f0       	breq	.+10     	; 0x9788 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    977e:	87 2f       	mov	r24, r23
    9780:	7a 83       	std	Y+2, r23	; 0x02
    9782:	0e 94 f3 3b 	call	0x77e6	; 0x77e6 <CopyRamTile>
    9786:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9788:	80 91 85 0d 	lds	r24, 0x0D85
    978c:	e8 2f       	mov	r30, r24
    978e:	f0 e0       	ldi	r31, 0x00	; 0
    9790:	9f 01       	movw	r18, r30
    9792:	22 0f       	add	r18, r18
    9794:	33 1f       	adc	r19, r19
    9796:	e2 0f       	add	r30, r18
    9798:	f3 1f       	adc	r31, r19
    979a:	e0 5b       	subi	r30, 0xB0	; 176
    979c:	f3 4f       	sbci	r31, 0xF3	; 243
    979e:	11 83       	std	Z+1, r17	; 0x01
    97a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    97a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    97a4:	f8 01       	movw	r30, r16
    97a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    97a8:	21 e0       	ldi	r18, 0x01	; 1
    97aa:	28 0f       	add	r18, r24
    97ac:	20 93 85 0d 	sts	0x0D85, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    97b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    97b2:	7c 31       	cpi	r23, 0x1C	; 28
    97b4:	38 f4       	brcc	.+14     	; 0x97c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    97b6:	2b 81       	ldd	r18, Y+3	; 0x03
    97b8:	3c 81       	ldd	r19, Y+4	; 0x04
    97ba:	a5 01       	movw	r20, r10
    97bc:	67 2f       	mov	r22, r23
    97be:	87 2d       	mov	r24, r7
    97c0:	0e 94 80 3c 	call	0x7900	; 0x7900 <BlitSprite>
    97c4:	ff ef       	ldi	r31, 0xFF	; 255
    97c6:	af 1a       	sub	r10, r31
    97c8:	bf 0a       	sbc	r11, r31
    97ca:	23 94       	inc	r2
    97cc:	82 2d       	mov	r24, r2
    97ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    97d0:	99 81       	ldd	r25, Y+1	; 0x01
    97d2:	89 17       	cp	r24, r25
    97d4:	08 f4       	brcc	.+2      	; 0x97d8 <ProcessSprites+0x1ac>
    97d6:	8c cf       	rjmp	.-232    	; 0x96f0 <ProcessSprites+0xc4>
    97d8:	ef ef       	ldi	r30, 0xFF	; 255
    97da:	ee 1a       	sub	r14, r30
    97dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    97de:	e3 14       	cp	r14, r3
    97e0:	08 f4       	brcc	.+2      	; 0x97e4 <ProcessSprites+0x1b8>
    97e2:	7f cf       	rjmp	.-258    	; 0x96e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    97e4:	73 94       	inc	r7
    97e6:	f4 e0       	ldi	r31, 0x04	; 4
    97e8:	cf 0e       	add	r12, r31
    97ea:	d1 1c       	adc	r13, r1
    97ec:	40 e1       	ldi	r20, 0x10	; 16
    97ee:	74 12       	cpse	r7, r20
    97f0:	43 cf       	rjmp	.-378    	; 0x9678 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    97f2:	0f 90       	pop	r0
    97f4:	0f 90       	pop	r0
    97f6:	0f 90       	pop	r0
    97f8:	0f 90       	pop	r0
    97fa:	df 91       	pop	r29
    97fc:	cf 91       	pop	r28
    97fe:	1f 91       	pop	r17
    9800:	0f 91       	pop	r16
    9802:	ff 90       	pop	r15
    9804:	ef 90       	pop	r14
    9806:	df 90       	pop	r13
    9808:	cf 90       	pop	r12
    980a:	bf 90       	pop	r11
    980c:	af 90       	pop	r10
    980e:	9f 90       	pop	r9
    9810:	8f 90       	pop	r8
    9812:	7f 90       	pop	r7
    9814:	6f 90       	pop	r6
    9816:	5f 90       	pop	r5
    9818:	4f 90       	pop	r4
    981a:	3f 90       	pop	r3
    981c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    981e:	0c 94 00 4b 	jmp	0x9600	; 0x9600 <RestoreBackground>

	}
    9822:	0f 90       	pop	r0
    9824:	0f 90       	pop	r0
    9826:	0f 90       	pop	r0
    9828:	0f 90       	pop	r0
    982a:	df 91       	pop	r29
    982c:	cf 91       	pop	r28
    982e:	1f 91       	pop	r17
    9830:	0f 91       	pop	r16
    9832:	ff 90       	pop	r15
    9834:	ef 90       	pop	r14
    9836:	df 90       	pop	r13
    9838:	cf 90       	pop	r12
    983a:	bf 90       	pop	r11
    983c:	af 90       	pop	r10
    983e:	9f 90       	pop	r9
    9840:	8f 90       	pop	r8
    9842:	7f 90       	pop	r7
    9844:	6f 90       	pop	r6
    9846:	5f 90       	pop	r5
    9848:	4f 90       	pop	r4
    984a:	3f 90       	pop	r3
    984c:	2f 90       	pop	r2
    984e:	08 95       	ret

00009850 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9850:	90 91 b3 0c 	lds	r25, 0x0CB3
    9854:	96 0f       	add	r25, r22
    9856:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    985a:	20 91 b2 0c 	lds	r18, 0x0CB2
    985e:	82 0f       	add	r24, r18
    9860:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9864:	80 91 b4 0c 	lds	r24, 0x0CB4
    9868:	80 32       	cpi	r24, 0x20	; 32
    986a:	b0 f4       	brcc	.+44     	; 0x9898 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    986c:	29 2f       	mov	r18, r25
    986e:	30 e0       	ldi	r19, 0x00	; 0
    9870:	78 e0       	ldi	r23, 0x08	; 8
    9872:	87 9f       	mul	r24, r23
    9874:	a0 01       	movw	r20, r0
    9876:	11 24       	eor	r1, r1
    9878:	24 17       	cp	r18, r20
    987a:	35 07       	cpc	r19, r21
    987c:	6c f0       	brlt	.+26     	; 0x9898 <Scroll+0x48>
				if(dy>=0){	
    987e:	67 fd       	sbrc	r22, 7
    9880:	05 c0       	rjmp	.+10     	; 0x988c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9882:	28 ef       	ldi	r18, 0xF8	; 248
    9884:	82 9f       	mul	r24, r18
    9886:	90 0d       	add	r25, r0
    9888:	11 24       	eor	r1, r1
    988a:	04 c0       	rjmp	.+8      	; 0x9894 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    988c:	78 e0       	ldi	r23, 0x08	; 8
    988e:	87 9f       	mul	r24, r23
    9890:	90 0d       	add	r25, r0
    9892:	11 24       	eor	r1, r1
    9894:	90 93 b3 0c 	sts	0x0CB3, r25
    9898:	08 95       	ret

0000989a <DisplayLogo>:
		}	

	}

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    989a:	08 95       	ret

0000989c <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    989c:	e0 e1       	ldi	r30, 0x10	; 16
    989e:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    98a0:	80 ee       	ldi	r24, 0xE0	; 224
    98a2:	80 83       	st	Z, r24
    98a4:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    98a6:	95 e0       	ldi	r25, 0x05	; 5
    98a8:	e0 35       	cpi	r30, 0x50	; 80
    98aa:	f9 07       	cpc	r31, r25
    98ac:	d1 f7       	brne	.-12     	; 0x98a2 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    98ae:	80 e2       	ldi	r24, 0x20	; 32
    98b0:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    98b4:	10 92 af 0c 	sts	0x0CAF, r1
    98b8:	08 95       	ret

000098ba <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    98ba:	2f 92       	push	r2
    98bc:	3f 92       	push	r3
    98be:	4f 92       	push	r4
    98c0:	5f 92       	push	r5
    98c2:	6f 92       	push	r6
    98c4:	7f 92       	push	r7
    98c6:	8f 92       	push	r8
    98c8:	9f 92       	push	r9
    98ca:	af 92       	push	r10
    98cc:	bf 92       	push	r11
    98ce:	cf 92       	push	r12
    98d0:	df 92       	push	r13
    98d2:	ef 92       	push	r14
    98d4:	ff 92       	push	r15
    98d6:	0f 93       	push	r16
    98d8:	1f 93       	push	r17
    98da:	cf 93       	push	r28
    98dc:	df 93       	push	r29
    98de:	00 d0       	rcall	.+0      	; 0x98e0 <DrawMap+0x26>
    98e0:	1f 92       	push	r1
    98e2:	cd b7       	in	r28, 0x3d	; 61
    98e4:	de b7       	in	r29, 0x3e	; 62
    98e6:	28 2f       	mov	r18, r24
    98e8:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    98ea:	fa 01       	movw	r30, r20
    98ec:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    98ee:	31 96       	adiw	r30, 0x01	; 1
    98f0:	34 90       	lpm	r3, Z
    98f2:	42 2c       	mov	r4, r2
    98f4:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    98f6:	e1 2c       	mov	r14, r1
    98f8:	f1 2c       	mov	r15, r1
    98fa:	00 e0       	ldi	r16, 0x00	; 0
    98fc:	10 e0       	ldi	r17, 0x00	; 0
    98fe:	c6 2e       	mov	r12, r22
    9900:	d1 2c       	mov	r13, r1
    9902:	03 15       	cp	r16, r3
    9904:	68 f5       	brcc	.+90     	; 0x9960 <DrawMap+0xa6>
    9906:	1b 82       	std	Y+3, r1	; 0x03
    9908:	1a 82       	std	Y+2, r1	; 0x02
    990a:	57 01       	movw	r10, r14
    990c:	92 e0       	ldi	r25, 0x02	; 2
    990e:	a9 0e       	add	r10, r25
    9910:	b1 1c       	adc	r11, r1
    9912:	48 01       	movw	r8, r16
    9914:	8c 0c       	add	r8, r12
    9916:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9918:	ea 81       	ldd	r30, Y+2	; 0x02
    991a:	e2 15       	cp	r30, r2
    991c:	e0 f4       	brcc	.+56     	; 0x9956 <DrawMap+0x9c>
    991e:	ea 81       	ldd	r30, Y+2	; 0x02
    9920:	fb 81       	ldd	r31, Y+3	; 0x03
    9922:	ea 0d       	add	r30, r10
    9924:	fb 1d       	adc	r31, r11
    9926:	e6 0d       	add	r30, r6
    9928:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    992a:	e4 91       	lpm	r30, Z
    992c:	f0 e0       	ldi	r31, 0x00	; 0
    992e:	60 91 b4 0c 	lds	r22, 0x0CB4
    9932:	70 e0       	ldi	r23, 0x00	; 0
    9934:	c4 01       	movw	r24, r8
    9936:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    993a:	af 01       	movw	r20, r30
    993c:	68 2f       	mov	r22, r24
    993e:	8a 81       	ldd	r24, Y+2	; 0x02
    9940:	82 0f       	add	r24, r18
    9942:	29 83       	std	Y+1, r18	; 0x01
    9944:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <SetTile>
    9948:	8a 81       	ldd	r24, Y+2	; 0x02
    994a:	9b 81       	ldd	r25, Y+3	; 0x03
    994c:	01 96       	adiw	r24, 0x01	; 1
    994e:	9b 83       	std	Y+3, r25	; 0x03
    9950:	8a 83       	std	Y+2, r24	; 0x02
    9952:	29 81       	ldd	r18, Y+1	; 0x01
    9954:	e1 cf       	rjmp	.-62     	; 0x9918 <DrawMap+0x5e>
    9956:	0f 5f       	subi	r16, 0xFF	; 255
    9958:	1f 4f       	sbci	r17, 0xFF	; 255
    995a:	e4 0c       	add	r14, r4
    995c:	f5 1c       	adc	r15, r5
    995e:	d1 cf       	rjmp	.-94     	; 0x9902 <DrawMap+0x48>
			}
		}

	}
    9960:	0f 90       	pop	r0
    9962:	0f 90       	pop	r0
    9964:	0f 90       	pop	r0
    9966:	df 91       	pop	r29
    9968:	cf 91       	pop	r28
    996a:	1f 91       	pop	r17
    996c:	0f 91       	pop	r16
    996e:	ff 90       	pop	r15
    9970:	ef 90       	pop	r14
    9972:	df 90       	pop	r13
    9974:	cf 90       	pop	r12
    9976:	bf 90       	pop	r11
    9978:	af 90       	pop	r10
    997a:	9f 90       	pop	r9
    997c:	8f 90       	pop	r8
    997e:	7f 90       	pop	r7
    9980:	6f 90       	pop	r6
    9982:	5f 90       	pop	r5
    9984:	4f 90       	pop	r4
    9986:	3f 90       	pop	r3
    9988:	2f 90       	pop	r2
    998a:	08 95       	ret

0000998c <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    998c:	0f 93       	push	r16
    998e:	1f 93       	push	r17
    9990:	cf 93       	push	r28
    9992:	df 93       	push	r29
    9994:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9996:	c0 e0       	ldi	r28, 0x00	; 0
    9998:	d0 e0       	ldi	r29, 0x00	; 0
    999a:	c0 17       	cp	r28, r16
    999c:	d1 07       	cpc	r29, r17
    999e:	44 f4       	brge	.+16     	; 0x99b0 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    99a0:	0e 94 cc 3e 	call	0x7d98	; 0x7d98 <GetVsyncFlag>
    99a4:	88 23       	and	r24, r24
    99a6:	e1 f3       	breq	.-8      	; 0x99a0 <WaitVsync+0x14>
		ClearVsyncFlag();		
    99a8:	0e 94 d0 3e 	call	0x7da0	; 0x7da0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    99ac:	21 96       	adiw	r28, 0x01	; 1
    99ae:	f5 cf       	rjmp	.-22     	; 0x999a <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    99b0:	df 91       	pop	r29
    99b2:	cf 91       	pop	r28
    99b4:	1f 91       	pop	r17
    99b6:	0f 91       	pop	r16
    99b8:	08 95       	ret

000099ba <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    99ba:	80 93 83 0d 	sts	0x0D83, r24
	currFadeFrame=0;
    99be:	10 92 87 0d 	sts	0x0D87, r1
	fadeActive=true;
    99c2:	81 e0       	ldi	r24, 0x01	; 1
    99c4:	80 93 86 0d 	sts	0x0D86, r24
		
	if(blocking){
    99c8:	66 23       	and	r22, r22
    99ca:	21 f0       	breq	.+8      	; 0x99d4 <doFade+0x1a>
		while(fadeActive==true);
    99cc:	80 91 86 0d 	lds	r24, 0x0D86
    99d0:	81 11       	cpse	r24, r1
    99d2:	fc cf       	rjmp	.-8      	; 0x99cc <doFade+0x12>
    99d4:	08 95       	ret

000099d6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    99d6:	81 11       	cpse	r24, r1
    99d8:	03 c0       	rjmp	.+6      	; 0x99e0 <FadeIn+0xa>
		DDRC=0xff;
    99da:	8f ef       	ldi	r24, 0xFF	; 255
    99dc:	87 b9       	out	0x07, r24	; 7
		return;
    99de:	08 95       	ret
	}
	fadeStep=1;
    99e0:	91 e0       	ldi	r25, 0x01	; 1
    99e2:	90 93 88 0d 	sts	0x0D88, r25
	fadeDir=1;
    99e6:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    99ea:	0c 94 dd 4c 	jmp	0x99ba	; 0x99ba <doFade>

000099ee <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    99ee:	81 11       	cpse	r24, r1
    99f0:	02 c0       	rjmp	.+4      	; 0x99f6 <FadeOut+0x8>
		DDRC=0;
    99f2:	17 b8       	out	0x07, r1	; 7
		return;
    99f4:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    99f6:	9c e0       	ldi	r25, 0x0C	; 12
    99f8:	90 93 88 0d 	sts	0x0D88, r25
	fadeDir=-1;
    99fc:	9f ef       	ldi	r25, 0xFF	; 255
    99fe:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    9a02:	0c 94 dd 4c 	jmp	0x99ba	; 0x99ba <doFade>

00009a06 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9a06:	80 91 86 0d 	lds	r24, 0x0D86
    9a0a:	88 23       	and	r24, r24
    9a0c:	01 f1       	breq	.+64     	; 0x9a4e <ProcessFading+0x48>
		if(currFadeFrame==0){
    9a0e:	80 91 87 0d 	lds	r24, 0x0D87
    9a12:	81 11       	cpse	r24, r1
    9a14:	19 c0       	rjmp	.+50     	; 0x9a48 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9a16:	80 91 83 0d 	lds	r24, 0x0D83
    9a1a:	80 93 87 0d 	sts	0x0D87, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9a1e:	e0 91 88 0d 	lds	r30, 0x0D88
    9a22:	f0 e0       	ldi	r31, 0x00	; 0
    9a24:	ef 5f       	subi	r30, 0xFF	; 255
    9a26:	fe 4f       	sbci	r31, 0xFE	; 254
    9a28:	e4 91       	lpm	r30, Z
    9a2a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9a2c:	90 91 84 0d 	lds	r25, 0x0D84
    9a30:	80 91 88 0d 	lds	r24, 0x0D88
    9a34:	89 0f       	add	r24, r25
    9a36:	80 93 88 0d 	sts	0x0D88, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9a3a:	88 23       	and	r24, r24
    9a3c:	11 f0       	breq	.+4      	; 0x9a42 <ProcessFading+0x3c>
    9a3e:	8d 30       	cpi	r24, 0x0D	; 13
    9a40:	31 f4       	brne	.+12     	; 0x9a4e <ProcessFading+0x48>
				fadeActive=false;
    9a42:	10 92 86 0d 	sts	0x0D86, r1
    9a46:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9a48:	81 50       	subi	r24, 0x01	; 1
    9a4a:	80 93 87 0d 	sts	0x0D87, r24
    9a4e:	08 95       	ret

00009a50 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    9a50:	0e 94 03 4d 	call	0x9a06	; 0x9a06 <ProcessFading>
		ProcessSprites();
    9a54:	0c 94 16 4b 	jmp	0x962c	; 0x962c <ProcessSprites>

00009a58 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9a58:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9a5a:	88 23       	and	r24, r24
    9a5c:	29 f1       	breq	.+74     	; 0x9aa8 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    9a5e:	87 ff       	sbrs	r24, 7
    9a60:	03 c0       	rjmp	.+6      	; 0x9a68 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9a62:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9a64:	3f ef       	ldi	r19, 0xFF	; 255
    9a66:	01 c0       	rjmp	.+2      	; 0x9a6a <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9a68:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9a6a:	6c e3       	ldi	r22, 0x3C	; 60
    9a6c:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <__divmodqi4>
    9a70:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9a72:	99 23       	and	r25, r25
    9a74:	a9 f0       	breq	.+42     	; 0x9aa0 <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9a76:	69 2f       	mov	r22, r25
    9a78:	70 e0       	ldi	r23, 0x00	; 0
    9a7a:	8c e3       	ldi	r24, 0x3C	; 60
    9a7c:	90 e0       	ldi	r25, 0x00	; 0
    9a7e:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9a82:	8e 2f       	mov	r24, r30
    9a84:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    9a88:	91 11       	cpse	r25, r1
    9a8a:	0a c0       	rjmp	.+20     	; 0x9aa0 <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    9a8c:	42 2f       	mov	r20, r18
    9a8e:	50 e0       	ldi	r21, 0x00	; 0
    9a90:	4f 5f       	subi	r20, 0xFF	; 255
    9a92:	5f 4f       	sbci	r21, 0xFF	; 255
    9a94:	34 03       	mulsu	r19, r20
    9a96:	c0 01       	movw	r24, r0
    9a98:	35 9f       	mul	r19, r21
    9a9a:	90 0d       	add	r25, r0
    9a9c:	11 24       	eor	r1, r1
    9a9e:	08 95       	ret
	}
	return direction*base_delta;
    9aa0:	32 03       	mulsu	r19, r18
    9aa2:	c0 01       	movw	r24, r0
    9aa4:	11 24       	eor	r1, r1
    9aa6:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9aa8:	80 e0       	ldi	r24, 0x00	; 0
    9aaa:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    9aac:	08 95       	ret

00009aae <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    9aae:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9ab0:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9ab2:	93 81       	ldd	r25, Z+3	; 0x03
    9ab4:	9f 5f       	subi	r25, 0xFF	; 255
    9ab6:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9ab8:	42 81       	ldd	r20, Z+2	; 0x02
    9aba:	80 81       	ld	r24, Z
    9abc:	26 81       	ldd	r18, Z+6	; 0x06
    9abe:	37 81       	ldd	r19, Z+7	; 0x07
    9ac0:	94 17       	cp	r25, r20
    9ac2:	30 f4       	brcc	.+12     	; 0x9ad0 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    9ac4:	f9 01       	movw	r30, r18
    9ac6:	e8 0f       	add	r30, r24
    9ac8:	f1 1d       	adc	r31, r1
    9aca:	e8 0f       	add	r30, r24
    9acc:	f1 1d       	adc	r31, r1
    9ace:	12 c0       	rjmp	.+36     	; 0x9af4 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    9ad0:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9ad2:	90 e0       	ldi	r25, 0x00	; 0
    9ad4:	01 96       	adiw	r24, 0x01	; 1
    9ad6:	61 81       	ldd	r22, Z+1	; 0x01
    9ad8:	70 e0       	ldi	r23, 0x00	; 0
    9ada:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    9ade:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9ae0:	81 11       	cpse	r24, r1
    9ae2:	02 c0       	rjmp	.+4      	; 0x9ae8 <LBGetNextFrame+0x3a>
    9ae4:	41 e0       	ldi	r20, 0x01	; 1
    9ae6:	44 83       	std	Z+4, r20	; 0x04
    9ae8:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9aea:	88 0f       	add	r24, r24
    9aec:	99 1f       	adc	r25, r25
    9aee:	f9 01       	movw	r30, r18
    9af0:	e8 0f       	add	r30, r24
    9af2:	f9 1f       	adc	r31, r25
    9af4:	80 81       	ld	r24, Z
    9af6:	91 81       	ldd	r25, Z+1	; 0x01
}
    9af8:	08 95       	ret

00009afa <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9afa:	0f 93       	push	r16
    9afc:	1f 93       	push	r17
    9afe:	cf 93       	push	r28
    9b00:	df 93       	push	r29
    9b02:	1f 92       	push	r1
    9b04:	cd b7       	in	r28, 0x3d	; 61
    9b06:	de b7       	in	r29, 0x3e	; 62
    9b08:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9b0a:	86 2f       	mov	r24, r22
    9b0c:	69 83       	std	Y+1, r22	; 0x01
    9b0e:	0e 94 d6 3e 	call	0x7dac	; 0x7dac <ReadJoypad>
    9b12:	d8 01       	movw	r26, r16
    9b14:	15 96       	adiw	r26, 0x05	; 5
    9b16:	9c 93       	st	X, r25
    9b18:	8e 93       	st	-X, r24
    9b1a:	14 97       	sbiw	r26, 0x04	; 4
    9b1c:	69 81       	ldd	r22, Y+1	; 0x01
    9b1e:	e6 2f       	mov	r30, r22
    9b20:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9b22:	00 97       	sbiw	r24, 0x00	; 0
    9b24:	51 f0       	breq	.+20     	; 0x9b3a <LBGetJoyPadState+0x40>
    9b26:	df 01       	movw	r26, r30
    9b28:	aa 0f       	add	r26, r26
    9b2a:	bb 1f       	adc	r27, r27
    9b2c:	a5 50       	subi	r26, 0x05	; 5
    9b2e:	b3 4f       	sbci	r27, 0xF3	; 243
    9b30:	2d 91       	ld	r18, X+
    9b32:	3c 91       	ld	r19, X
    9b34:	82 17       	cp	r24, r18
    9b36:	93 07       	cpc	r25, r19
    9b38:	21 f0       	breq	.+8      	; 0x9b42 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9b3a:	d8 01       	movw	r26, r16
    9b3c:	16 96       	adiw	r26, 0x06	; 6
    9b3e:	1c 92       	st	X, r1
    9b40:	07 c0       	rjmp	.+14     	; 0x9b50 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9b42:	d8 01       	movw	r26, r16
    9b44:	16 96       	adiw	r26, 0x06	; 6
    9b46:	2c 91       	ld	r18, X
    9b48:	16 97       	sbiw	r26, 0x06	; 6
    9b4a:	2f 5f       	subi	r18, 0xFF	; 255
    9b4c:	16 96       	adiw	r26, 0x06	; 6
    9b4e:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9b50:	ee 0f       	add	r30, r30
    9b52:	ff 1f       	adc	r31, r31
    9b54:	e5 50       	subi	r30, 0x05	; 5
    9b56:	f3 4f       	sbci	r31, 0xF3	; 243
    9b58:	20 81       	ld	r18, Z
    9b5a:	31 81       	ldd	r19, Z+1	; 0x01
    9b5c:	a9 01       	movw	r20, r18
    9b5e:	40 95       	com	r20
    9b60:	50 95       	com	r21
    9b62:	48 23       	and	r20, r24
    9b64:	59 23       	and	r21, r25
    9b66:	d8 01       	movw	r26, r16
    9b68:	11 96       	adiw	r26, 0x01	; 1
    9b6a:	5c 93       	st	X, r21
    9b6c:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9b6e:	ac 01       	movw	r20, r24
    9b70:	40 95       	com	r20
    9b72:	50 95       	com	r21
    9b74:	24 23       	and	r18, r20
    9b76:	35 23       	and	r19, r21
    9b78:	13 96       	adiw	r26, 0x03	; 3
    9b7a:	3c 93       	st	X, r19
    9b7c:	2e 93       	st	-X, r18
    9b7e:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9b80:	91 83       	std	Z+1, r25	; 0x01
    9b82:	80 83       	st	Z, r24
}
    9b84:	0f 90       	pop	r0
    9b86:	df 91       	pop	r29
    9b88:	cf 91       	pop	r28
    9b8a:	1f 91       	pop	r17
    9b8c:	0f 91       	pop	r16
    9b8e:	08 95       	ret

00009b90 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9b90:	90 ed       	ldi	r25, 0xD0	; 208
    9b92:	94 0f       	add	r25, r20
    9b94:	e0 91 89 0d 	lds	r30, 0x0D89
    9b98:	f0 91 8a 0d 	lds	r31, 0x0D8A
    9b9c:	9a 30       	cpi	r25, 0x0A	; 10
    9b9e:	38 f4       	brcc	.+14     	; 0x9bae <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9ba0:	24 2f       	mov	r18, r20
    9ba2:	30 e0       	ldi	r19, 0x00	; 0
    9ba4:	2d 52       	subi	r18, 0x2D	; 45
    9ba6:	31 09       	sbc	r19, r1
    9ba8:	e2 0f       	add	r30, r18
    9baa:	f3 1f       	adc	r31, r19
    9bac:	0c c0       	rjmp	.+24     	; 0x9bc6 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    9bae:	9f eb       	ldi	r25, 0xBF	; 191
    9bb0:	94 0f       	add	r25, r20
    9bb2:	9a 31       	cpi	r25, 0x1A	; 26
    9bb4:	38 f4       	brcc	.+14     	; 0x9bc4 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9bb6:	50 e0       	ldi	r21, 0x00	; 0
    9bb8:	44 53       	subi	r20, 0x34	; 52
    9bba:	51 09       	sbc	r21, r1
    9bbc:	e4 0f       	add	r30, r20
    9bbe:	f5 1f       	adc	r31, r21
    9bc0:	44 91       	lpm	r20, Z
    9bc2:	03 c0       	rjmp	.+6      	; 0x9bca <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9bc4:	32 96       	adiw	r30, 0x02	; 2
    9bc6:	e4 91       	lpm	r30, Z
    9bc8:	4e 2f       	mov	r20, r30
    9bca:	50 e0       	ldi	r21, 0x00	; 0
    9bcc:	0c 94 b6 3e 	jmp	0x7d6c	; 0x7d6c <SetTile>

00009bd0 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9bd0:	ff 92       	push	r15
    9bd2:	0f 93       	push	r16
    9bd4:	1f 93       	push	r17
    9bd6:	cf 93       	push	r28
    9bd8:	df 93       	push	r29
    9bda:	d8 2f       	mov	r29, r24
    9bdc:	f6 2e       	mov	r15, r22
    9bde:	8a 01       	movw	r16, r20
	u8 i = 0;
    9be0:	c0 e0       	ldi	r28, 0x00	; 0
    9be2:	8c 2f       	mov	r24, r28
    9be4:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9be6:	f8 01       	movw	r30, r16
    9be8:	ec 0f       	add	r30, r28
    9bea:	f1 1d       	adc	r31, r1
    9bec:	44 91       	lpm	r20, Z
    9bee:	44 23       	and	r20, r20
    9bf0:	29 f0       	breq	.+10     	; 0x9bfc <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9bf2:	6f 2d       	mov	r22, r15
    9bf4:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		i++;
    9bf8:	cf 5f       	subi	r28, 0xFF	; 255
    9bfa:	f3 cf       	rjmp	.-26     	; 0x9be2 <LBPrint+0x12>
	}
}
    9bfc:	df 91       	pop	r29
    9bfe:	cf 91       	pop	r28
    9c00:	1f 91       	pop	r17
    9c02:	0f 91       	pop	r16
    9c04:	ff 90       	pop	r15
    9c06:	08 95       	ret

00009c08 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9c08:	df 92       	push	r13
    9c0a:	ef 92       	push	r14
    9c0c:	ff 92       	push	r15
    9c0e:	0f 93       	push	r16
    9c10:	1f 93       	push	r17
    9c12:	cf 93       	push	r28
    9c14:	df 93       	push	r29
    9c16:	1f 92       	push	r1
    9c18:	cd b7       	in	r28, 0x3d	; 61
    9c1a:	de b7       	in	r29, 0x3e	; 62
    9c1c:	38 2f       	mov	r19, r24
    9c1e:	06 2f       	mov	r16, r22
    9c20:	84 2f       	mov	r24, r20
    9c22:	9d ef       	ldi	r25, 0xFD	; 253
    9c24:	e9 2e       	mov	r14, r25
    9c26:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9c28:	4a e0       	ldi	r20, 0x0A	; 10
    9c2a:	f4 2e       	mov	r15, r20
    9c2c:	1f ef       	ldi	r17, 0xFF	; 255
    9c2e:	13 0f       	add	r17, r19
    9c30:	6f 2d       	mov	r22, r15
    9c32:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    9c36:	d8 2e       	mov	r13, r24
    9c38:	40 e3       	ldi	r20, 0x30	; 48
    9c3a:	49 0f       	add	r20, r25
    9c3c:	60 2f       	mov	r22, r16
    9c3e:	83 2f       	mov	r24, r19
    9c40:	29 83       	std	Y+1, r18	; 0x01
    9c42:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		value /= 10;
    9c46:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9c48:	29 81       	ldd	r18, Y+1	; 0x01
    9c4a:	21 11       	cpse	r18, r1
    9c4c:	02 c0       	rjmp	.+4      	; 0x9c52 <LBPrintByte+0x4a>
    9c4e:	dd 20       	and	r13, r13
    9c50:	19 f0       	breq	.+6      	; 0x9c58 <LBPrintByte+0x50>
    9c52:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9c54:	1e 11       	cpse	r17, r14
    9c56:	ea cf       	rjmp	.-44     	; 0x9c2c <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9c58:	0f 90       	pop	r0
    9c5a:	df 91       	pop	r29
    9c5c:	cf 91       	pop	r28
    9c5e:	1f 91       	pop	r17
    9c60:	0f 91       	pop	r16
    9c62:	ff 90       	pop	r15
    9c64:	ef 90       	pop	r14
    9c66:	df 90       	pop	r13
    9c68:	08 95       	ret

00009c6a <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9c6a:	cf 92       	push	r12
    9c6c:	df 92       	push	r13
    9c6e:	ef 92       	push	r14
    9c70:	ff 92       	push	r15
    9c72:	0f 93       	push	r16
    9c74:	1f 93       	push	r17
    9c76:	cf 93       	push	r28
    9c78:	df 93       	push	r29
    9c7a:	00 d0       	rcall	.+0      	; 0x9c7c <LBPrintInt+0x12>
    9c7c:	cd b7       	in	r28, 0x3d	; 61
    9c7e:	de b7       	in	r29, 0x3e	; 62
    9c80:	38 2f       	mov	r19, r24
    9c82:	16 2f       	mov	r17, r22
    9c84:	ca 01       	movw	r24, r20
    9c86:	4b ef       	ldi	r20, 0xFB	; 251
    9c88:	d4 2e       	mov	r13, r20
    9c8a:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9c8c:	5a e0       	ldi	r21, 0x0A	; 10
    9c8e:	e5 2e       	mov	r14, r21
    9c90:	f1 2c       	mov	r15, r1
    9c92:	cc 24       	eor	r12, r12
    9c94:	ca 94       	dec	r12
    9c96:	c3 0e       	add	r12, r19
    9c98:	b7 01       	movw	r22, r14
    9c9a:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <__udivmodhi4>
    9c9e:	06 2f       	mov	r16, r22
    9ca0:	40 e3       	ldi	r20, 0x30	; 48
    9ca2:	48 0f       	add	r20, r24
    9ca4:	61 2f       	mov	r22, r17
    9ca6:	83 2f       	mov	r24, r19
    9ca8:	29 83       	std	Y+1, r18	; 0x01
    9caa:	7a 83       	std	Y+2, r23	; 0x02
    9cac:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		value /= 10;
    9cb0:	80 2f       	mov	r24, r16
    9cb2:	7a 81       	ldd	r23, Y+2	; 0x02
    9cb4:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    9cb6:	29 81       	ldd	r18, Y+1	; 0x01
    9cb8:	21 11       	cpse	r18, r1
    9cba:	02 c0       	rjmp	.+4      	; 0x9cc0 <LBPrintInt+0x56>
    9cbc:	00 97       	sbiw	r24, 0x00	; 0
    9cbe:	19 f0       	breq	.+6      	; 0x9cc6 <LBPrintInt+0x5c>
    9cc0:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    9cc2:	cd 10       	cpse	r12, r13
    9cc4:	e6 cf       	rjmp	.-52     	; 0x9c92 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9cc6:	0f 90       	pop	r0
    9cc8:	0f 90       	pop	r0
    9cca:	df 91       	pop	r29
    9ccc:	cf 91       	pop	r28
    9cce:	1f 91       	pop	r17
    9cd0:	0f 91       	pop	r16
    9cd2:	ff 90       	pop	r15
    9cd4:	ef 90       	pop	r14
    9cd6:	df 90       	pop	r13
    9cd8:	cf 90       	pop	r12
    9cda:	08 95       	ret

00009cdc <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9cdc:	af 92       	push	r10
    9cde:	cf 92       	push	r12
    9ce0:	ef 92       	push	r14
    9ce2:	ff 92       	push	r15
    9ce4:	0f 93       	push	r16
    9ce6:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9ce8:	70 e0       	ldi	r23, 0x00	; 0
    9cea:	f1 2c       	mov	r15, r1
    9cec:	fb 01       	movw	r30, r22
    9cee:	e2 0f       	add	r30, r18
    9cf0:	f1 1d       	adc	r31, r1
    9cf2:	ee 16       	cp	r14, r30
    9cf4:	ff 06       	cpc	r15, r31
    9cf6:	a4 f4       	brge	.+40     	; 0x9d20 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9cf8:	ea 0c       	add	r14, r10
    9cfa:	f1 1c       	adc	r15, r1
    9cfc:	6e 15       	cp	r22, r14
    9cfe:	7f 05       	cpc	r23, r15
    9d00:	7c f4       	brge	.+30     	; 0x9d20 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9d02:	28 2f       	mov	r18, r24
    9d04:	30 e0       	ldi	r19, 0x00	; 0
    9d06:	10 e0       	ldi	r17, 0x00	; 0
    9d08:	c9 01       	movw	r24, r18
    9d0a:	84 0f       	add	r24, r20
    9d0c:	91 1d       	adc	r25, r1
    9d0e:	08 17       	cp	r16, r24
    9d10:	19 07       	cpc	r17, r25
    9d12:	34 f4       	brge	.+12     	; 0x9d20 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9d14:	0c 0d       	add	r16, r12
    9d16:	11 1d       	adc	r17, r1
    9d18:	81 e0       	ldi	r24, 0x01	; 1
    9d1a:	20 17       	cp	r18, r16
    9d1c:	31 07       	cpc	r19, r17
    9d1e:	0c f0       	brlt	.+2      	; 0x9d22 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9d20:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9d22:	1f 91       	pop	r17
    9d24:	0f 91       	pop	r16
    9d26:	ff 90       	pop	r15
    9d28:	ef 90       	pop	r14
    9d2a:	cf 90       	pop	r12
    9d2c:	af 90       	pop	r10
    9d2e:	08 95       	ret

00009d30 <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9d30:	cf 93       	push	r28
    9d32:	df 93       	push	r29
    9d34:	d8 2f       	mov	r29, r24
    9d36:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9d38:	80 e0       	ldi	r24, 0x00	; 0
    9d3a:	90 e0       	ldi	r25, 0x00	; 0
    9d3c:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <GetPrngNumber>
    9d40:	6f ef       	ldi	r22, 0xFF	; 255
    9d42:	70 e0       	ldi	r23, 0x00	; 0
    9d44:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9d48:	6c 2f       	mov	r22, r28
    9d4a:	70 e0       	ldi	r23, 0x00	; 0
    9d4c:	6d 1b       	sub	r22, r29
    9d4e:	71 09       	sbc	r23, r1
    9d50:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
}
    9d54:	8d 0f       	add	r24, r29
    9d56:	df 91       	pop	r29
    9d58:	cf 91       	pop	r28
    9d5a:	08 95       	ret

00009d5c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9d5c:	cf 93       	push	r28
    9d5e:	df 93       	push	r29
    9d60:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9d62:	c0 e0       	ldi	r28, 0x00	; 0
    9d64:	cd 17       	cp	r28, r29
    9d66:	31 f0       	breq	.+12     	; 0x9d74 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9d68:	8f ef       	ldi	r24, 0xFF	; 255
    9d6a:	9f ef       	ldi	r25, 0xFF	; 255
    9d6c:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9d70:	cf 5f       	subi	r28, 0xFF	; 255
    9d72:	f8 cf       	rjmp	.-16     	; 0x9d64 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9d74:	df 91       	pop	r29
    9d76:	cf 91       	pop	r28
    9d78:	08 95       	ret

00009d7a <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9d7a:	df 92       	push	r13
    9d7c:	ef 92       	push	r14
    9d7e:	ff 92       	push	r15
    9d80:	0f 93       	push	r16
    9d82:	1f 93       	push	r17
    9d84:	cf 93       	push	r28
    9d86:	df 93       	push	r29
    9d88:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9d8a:	fb 01       	movw	r30, r22
    9d8c:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9d8e:	31 96       	adiw	r30, 0x01	; 1
    9d90:	64 91       	lpm	r22, Z
    9d92:	5f ef       	ldi	r21, 0xFF	; 255
    9d94:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9d96:	24 2f       	mov	r18, r20
    9d98:	21 70       	andi	r18, 0x01	; 1
    9d9a:	40 ff       	sbrs	r20, 0
    9d9c:	04 c0       	rjmp	.+8      	; 0x9da6 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    9d9e:	95 2f       	mov	r25, r21
		dx=-1;
    9da0:	ff 24       	eor	r15, r15
    9da2:	fa 94       	dec	r15
    9da4:	03 c0       	rjmp	.+6      	; 0x9dac <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9da6:	ff 24       	eor	r15, r15
    9da8:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    9daa:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    9dac:	41 ff       	sbrs	r20, 1
    9dae:	05 c0       	rjmp	.+10     	; 0x9dba <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9db0:	7f ef       	ldi	r23, 0xFF	; 255
    9db2:	76 0f       	add	r23, r22
		dy=-1;
    9db4:	ee 24       	eor	r14, r14
    9db6:	ea 94       	dec	r14
    9db8:	03 c0       	rjmp	.+6      	; 0x9dc0 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    9dba:	ee 24       	eor	r14, r14
    9dbc:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    9dbe:	70 e0       	ldi	r23, 0x00	; 0
    9dc0:	21 11       	cpse	r18, r1
    9dc2:	01 c0       	rjmp	.+2      	; 0x9dc6 <LBMapSprite+0x4c>
    9dc4:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9dc6:	00 e0       	ldi	r16, 0x00	; 0
    9dc8:	06 17       	cp	r16, r22
    9dca:	09 f1       	breq	.+66     	; 0x9e0e <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9dcc:	71 03       	mulsu	r23, r17
    9dce:	e0 01       	movw	r28, r0
    9dd0:	11 24       	eor	r1, r1
    9dd2:	d8 2e       	mov	r13, r24
    9dd4:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    9dd6:	8d 15       	cp	r24, r13
    9dd8:	b1 f0       	breq	.+44     	; 0x9e06 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9dda:	9e 01       	movw	r18, r28
    9ddc:	29 0f       	add	r18, r25
    9dde:	31 1d       	adc	r19, r1
    9de0:	97 fd       	sbrc	r25, 7
    9de2:	3a 95       	dec	r19
    9de4:	2e 5f       	subi	r18, 0xFE	; 254
    9de6:	3f 4f       	sbci	r19, 0xFF	; 255
    9de8:	fd 01       	movw	r30, r26
    9dea:	e2 0f       	add	r30, r18
    9dec:	f3 1f       	adc	r31, r19
    9dee:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    9df0:	34 e0       	ldi	r19, 0x04	; 4
    9df2:	83 9f       	mul	r24, r19
    9df4:	f0 01       	movw	r30, r0
    9df6:	11 24       	eor	r1, r1
    9df8:	eb 51       	subi	r30, 0x1B	; 27
    9dfa:	f0 4f       	sbci	r31, 0xF0	; 240
    9dfc:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    9dfe:	8f 5f       	subi	r24, 0xFF	; 255
    9e00:	43 83       	std	Z+3, r20	; 0x03
    9e02:	9f 0d       	add	r25, r15
    9e04:	e8 cf       	rjmp	.-48     	; 0x9dd6 <LBMapSprite+0x5c>
    9e06:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9e08:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9e0a:	95 2f       	mov	r25, r21
    9e0c:	dd cf       	rjmp	.-70     	; 0x9dc8 <LBMapSprite+0x4e>
	}
}
    9e0e:	df 91       	pop	r29
    9e10:	cf 91       	pop	r28
    9e12:	1f 91       	pop	r17
    9e14:	0f 91       	pop	r16
    9e16:	ff 90       	pop	r15
    9e18:	ef 90       	pop	r14
    9e1a:	df 90       	pop	r13
    9e1c:	08 95       	ret

00009e1e <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    9e1e:	df 92       	push	r13
    9e20:	ef 92       	push	r14
    9e22:	ff 92       	push	r15
    9e24:	0f 93       	push	r16
    9e26:	1f 93       	push	r17
    9e28:	cf 93       	push	r28
    9e2a:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9e2c:	a0 91 b4 0c 	lds	r26, 0x0CB4
    9e30:	98 e0       	ldi	r25, 0x08	; 8
    9e32:	a9 9f       	mul	r26, r25
    9e34:	70 01       	movw	r14, r0
    9e36:	11 24       	eor	r1, r1
    9e38:	50 e0       	ldi	r21, 0x00	; 0
    9e3a:	38 ef       	ldi	r19, 0xF8	; 248
    9e3c:	a3 9f       	mul	r26, r19
    9e3e:	30 2d       	mov	r19, r0
    9e40:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9e42:	70 e0       	ldi	r23, 0x00	; 0
    9e44:	70 17       	cp	r23, r16
    9e46:	09 f1       	breq	.+66     	; 0x9e8a <LBMoveSprite+0x6c>
    9e48:	d4 2e       	mov	r13, r20
    9e4a:	13 2f       	mov	r17, r19
    9e4c:	14 0f       	add	r17, r20
    9e4e:	b8 2f       	mov	r27, r24
    9e50:	b2 0f       	add	r27, r18
    9e52:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9e54:	8b 17       	cp	r24, r27
    9e56:	a9 f0       	breq	.+42     	; 0x9e82 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9e58:	c4 e0       	ldi	r28, 0x04	; 4
    9e5a:	8c 9f       	mul	r24, r28
    9e5c:	f0 01       	movw	r30, r0
    9e5e:	11 24       	eor	r1, r1
    9e60:	ef 01       	movw	r28, r30
    9e62:	cb 51       	subi	r28, 0x1B	; 27
    9e64:	d0 4f       	sbci	r29, 0xF0	; 240
    9e66:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9e68:	a0 32       	cpi	r26, 0x20	; 32
    9e6a:	28 f4       	brcc	.+10     	; 0x9e76 <LBMoveSprite+0x58>
    9e6c:	e4 16       	cp	r14, r20
    9e6e:	f5 06       	cpc	r15, r21
    9e70:	14 f4       	brge	.+4      	; 0x9e76 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9e72:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9e74:	03 c0       	rjmp	.+6      	; 0x9e7c <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9e76:	eb 51       	subi	r30, 0x1B	; 27
    9e78:	f0 4f       	sbci	r31, 0xF0	; 240
    9e7a:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    9e7c:	8f 5f       	subi	r24, 0xFF	; 255
    9e7e:	98 5f       	subi	r25, 0xF8	; 248
    9e80:	e9 cf       	rjmp	.-46     	; 0x9e54 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9e82:	7f 5f       	subi	r23, 0xFF	; 255
    9e84:	48 5f       	subi	r20, 0xF8	; 248
    9e86:	5f 4f       	sbci	r21, 0xFF	; 255
    9e88:	dd cf       	rjmp	.-70     	; 0x9e44 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9e8a:	df 91       	pop	r29
    9e8c:	cf 91       	pop	r28
    9e8e:	1f 91       	pop	r17
    9e90:	0f 91       	pop	r16
    9e92:	ff 90       	pop	r15
    9e94:	ef 90       	pop	r14
    9e96:	df 90       	pop	r13
    9e98:	08 95       	ret

00009e9a <LBRotateSprites>:

void LBRotateSprites()
{
    9e9a:	80 e0       	ldi	r24, 0x00	; 0
    9e9c:	90 e0       	ldi	r25, 0x00	; 0
    9e9e:	dc 01       	movw	r26, r24
    9ea0:	ab 51       	subi	r26, 0x1B	; 27
    9ea2:	b0 4f       	sbci	r27, 0xF0	; 240
    9ea4:	fc 01       	movw	r30, r24
    9ea6:	e0 5f       	subi	r30, 0xF0	; 240
    9ea8:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9eaa:	13 96       	adiw	r26, 0x03	; 3
    9eac:	2c 91       	ld	r18, X
    9eae:	13 97       	sbiw	r26, 0x03	; 3
    9eb0:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9eb2:	12 96       	adiw	r26, 0x02	; 2
    9eb4:	2c 91       	ld	r18, X
    9eb6:	12 97       	sbiw	r26, 0x02	; 2
    9eb8:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9eba:	2c 91       	ld	r18, X
    9ebc:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9ebe:	11 96       	adiw	r26, 0x01	; 1
    9ec0:	2c 91       	ld	r18, X
    9ec2:	21 83       	std	Z+1, r18	; 0x01
    9ec4:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    9ec6:	8c 33       	cpi	r24, 0x3C	; 60
    9ec8:	91 05       	cpc	r25, r1
    9eca:	49 f7       	brne	.-46     	; 0x9e9e <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    9ecc:	80 91 01 05 	lds	r24, 0x0501
    9ed0:	94 e0       	ldi	r25, 0x04	; 4
    9ed2:	89 9f       	mul	r24, r25
    9ed4:	f0 01       	movw	r30, r0
    9ed6:	11 24       	eor	r1, r1
    9ed8:	eb 51       	subi	r30, 0x1B	; 27
    9eda:	f0 4f       	sbci	r31, 0xF0	; 240
    9edc:	93 81       	ldd	r25, Z+3	; 0x03
    9ede:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9ee2:	92 81       	ldd	r25, Z+2	; 0x02
    9ee4:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    9ee8:	90 81       	ld	r25, Z
    9eea:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    9eee:	91 81       	ldd	r25, Z+1	; 0x01
    9ef0:	90 93 4d 05 	sts	0x054D, r25
		if (++rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9ef4:	8f 5f       	subi	r24, 0xFF	; 255
    9ef6:	84 31       	cpi	r24, 0x14	; 20
    9ef8:	08 f0       	brcs	.+2      	; 0x9efc <LBRotateSprites+0x62>
    9efa:	8f e0       	ldi	r24, 0x0F	; 15
    9efc:	80 93 01 05 	sts	0x0501, r24
    9f00:	08 95       	ret

00009f02 <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9f02:	80 91 cc 0d 	lds	r24, 0x0DCC
}
    9f06:	81 70       	andi	r24, 0x01	; 1
    9f08:	08 95       	ret

00009f0a <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    9f0a:	8e e8       	ldi	r24, 0x8E	; 142
    9f0c:	90 e0       	ldi	r25, 0x00	; 0
    9f0e:	90 93 98 0d 	sts	0x0D98, r25
    9f12:	80 93 97 0d 	sts	0x0D97, r24
    9f16:	80 e0       	ldi	r24, 0x00	; 0
    9f18:	90 e0       	ldi	r25, 0x00	; 0
    9f1a:	fc 01       	movw	r30, r24
    9f1c:	e3 50       	subi	r30, 0x03	; 3
    9f1e:	fd 4f       	sbci	r31, 0xFD	; 253
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9f20:	e4 91       	lpm	r30, Z
    9f22:	dc 01       	movw	r26, r24
    9f24:	a9 56       	subi	r26, 0x69	; 105
    9f26:	b2 4f       	sbci	r27, 0xF2	; 242
    9f28:	12 96       	adiw	r26, 0x02	; 2
    9f2a:	ec 93       	st	X, r30
    9f2c:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9f2e:	8e 31       	cpi	r24, 0x1E	; 30
    9f30:	91 05       	cpc	r25, r1
    9f32:	99 f7       	brne	.-26     	; 0x9f1a <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9f34:	08 95       	ret

00009f36 <init_enemy_state>:

void init_enemy_state()
{
    9f36:	80 e0       	ldi	r24, 0x00	; 0
    9f38:	90 e0       	ldi	r25, 0x00	; 0
    9f3a:	9c 01       	movw	r18, r24
    9f3c:	29 54       	subi	r18, 0x49	; 73
    9f3e:	32 4f       	sbci	r19, 0xF2	; 242
    9f40:	f9 01       	movw	r30, r18
    9f42:	e0 5e       	subi	r30, 0xE0	; 224
    9f44:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    9f46:	10 82       	st	Z, r1
    9f48:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    9f4a:	10 82       	st	Z, r1
    9f4c:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9f4e:	89 30       	cpi	r24, 0x09	; 9
    9f50:	21 e0       	ldi	r18, 0x01	; 1
    9f52:	92 07       	cpc	r25, r18
    9f54:	91 f7       	brne	.-28     	; 0x9f3a <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    9f56:	10 92 d2 0d 	sts	0x0DD2, r1
    9f5a:	08 95       	ret

00009f5c <init_player_shot>:
	shot->active = 0;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    9f5c:	81 11       	cpse	r24, r1
    9f5e:	3f c0       	rjmp	.+126    	; 0x9fde <init_player_shot+0x82>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f60:	10 92 f1 0d 	sts	0x0DF1, r1
	shot->hit_count = damage;
    9f64:	81 e0       	ldi	r24, 0x01	; 1
    9f66:	80 93 f2 0d 	sts	0x0DF2, r24
	shot->shot_speed = speed;
    9f6a:	90 e5       	ldi	r25, 0x50	; 80
    9f6c:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    9f70:	10 92 f5 0d 	sts	0x0DF5, r1
	shot->anim.anim_count = 1;
    9f74:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    9f78:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    9f7c:	2b e8       	ldi	r18, 0x8B	; 139
    9f7e:	3d e0       	ldi	r19, 0x0D	; 13
    9f80:	30 93 fd 0d 	sts	0x0DFD, r19
    9f84:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    9f88:	2a e8       	ldi	r18, 0x8A	; 138
    9f8a:	31 e3       	ldi	r19, 0x31	; 49
    9f8c:	30 93 8c 0d 	sts	0x0D8C, r19
    9f90:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    9f94:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
    9f98:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9f9c:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fa0:	10 92 05 0e 	sts	0x0E05, r1
	shot->hit_count = damage;
    9fa4:	80 93 06 0e 	sts	0x0E06, r24
	shot->shot_speed = speed;
    9fa8:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    9fac:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    9fb0:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    9fb4:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    9fb8:	41 e4       	ldi	r20, 0x41	; 65
    9fba:	50 e1       	ldi	r21, 0x10	; 16
    9fbc:	50 93 11 0e 	sts	0x0E11, r21
    9fc0:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    9fc4:	30 93 42 10 	sts	0x1042, r19
    9fc8:	20 93 41 10 	sts	0x1041, r18
	shot->shared.vx = speed;
    9fcc:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    9fd0:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9fd4:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fd8:	10 92 19 0e 	sts	0x0E19, r1
    9fdc:	41 c0       	rjmp	.+130    	; 0xa060 <init_player_shot+0x104>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    9fde:	82 30       	cpi	r24, 0x02	; 2
    9fe0:	09 f0       	breq	.+2      	; 0x9fe4 <init_player_shot+0x88>
    9fe2:	57 c0       	rjmp	.+174    	; 0xa092 <init_player_shot+0x136>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fe4:	81 e0       	ldi	r24, 0x01	; 1
    9fe6:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->hit_count = damage;
    9fea:	80 93 f2 0d 	sts	0x0DF2, r24
	shot->shot_speed = speed;
    9fee:	94 e6       	ldi	r25, 0x64	; 100
    9ff0:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    9ff4:	10 92 f5 0d 	sts	0x0DF5, r1
	shot->anim.anim_count = 1;
    9ff8:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    9ffc:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    a000:	2b e8       	ldi	r18, 0x8B	; 139
    a002:	3d e0       	ldi	r19, 0x0D	; 13
    a004:	30 93 fd 0d 	sts	0x0DFD, r19
    a008:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    a00c:	27 e8       	ldi	r18, 0x87	; 135
    a00e:	31 e3       	ldi	r19, 0x31	; 49
    a010:	30 93 8c 0d 	sts	0x0D8C, r19
    a014:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    a018:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
    a01c:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a020:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a024:	80 93 05 0e 	sts	0x0E05, r24
	shot->hit_count = damage;
    a028:	80 93 06 0e 	sts	0x0E06, r24
	shot->shot_speed = speed;
    a02c:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    a030:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a034:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    a038:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    a03c:	41 e4       	ldi	r20, 0x41	; 65
    a03e:	50 e1       	ldi	r21, 0x10	; 16
    a040:	50 93 11 0e 	sts	0x0E11, r21
    a044:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    a048:	30 93 42 10 	sts	0x1042, r19
    a04c:	20 93 41 10 	sts	0x1041, r18
	shot->shared.vx = speed;
    a050:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    a054:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a058:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a05c:	80 93 19 0e 	sts	0x0E19, r24
	shot->hit_count = damage;
    a060:	80 93 1a 0e 	sts	0x0E1A, r24
	shot->shot_speed = speed;
    a064:	90 93 1c 0e 	sts	0x0E1C, r25
	shot->y_delta = y_delta;
    a068:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a06c:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.frames_per_anim = 1;
    a070:	80 93 20 0e 	sts	0x0E20, r24
	shot->anim.anims = anim;
    a074:	43 e5       	ldi	r20, 0x53	; 83
    a076:	50 e1       	ldi	r21, 0x10	; 16
    a078:	50 93 25 0e 	sts	0x0E25, r21
    a07c:	40 93 24 0e 	sts	0x0E24, r20
	shot->anim.anims[0] = (char*) map;
    a080:	30 93 54 10 	sts	0x1054, r19
    a084:	20 93 53 10 	sts	0x1053, r18
	shot->shared.vx = speed;
    a088:	90 93 17 0e 	sts	0x0E17, r25
	shot->shared.vy = 0;
    a08c:	10 92 16 0e 	sts	0x0E16, r1
    a090:	7f c1       	rjmp	.+766    	; 0xa390 <init_player_shot+0x434>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    a092:	84 30       	cpi	r24, 0x04	; 4
    a094:	09 f0       	breq	.+2      	; 0xa098 <init_player_shot+0x13c>
    a096:	5a c0       	rjmp	.+180    	; 0xa14c <init_player_shot+0x1f0>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a098:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->hit_count = damage;
    a09c:	81 e0       	ldi	r24, 0x01	; 1
    a09e:	80 93 f2 0d 	sts	0x0DF2, r24
	shot->shot_speed = speed;
    a0a2:	9f e7       	ldi	r25, 0x7F	; 127
    a0a4:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    a0a8:	28 ef       	ldi	r18, 0xF8	; 248
    a0aa:	20 93 f5 0d 	sts	0x0DF5, r18
	shot->anim.anim_count = 1;
    a0ae:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    a0b2:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    a0b6:	2b e8       	ldi	r18, 0x8B	; 139
    a0b8:	3d e0       	ldi	r19, 0x0D	; 13
    a0ba:	30 93 fd 0d 	sts	0x0DFD, r19
    a0be:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    a0c2:	2a e8       	ldi	r18, 0x8A	; 138
    a0c4:	31 e3       	ldi	r19, 0x31	; 49
    a0c6:	30 93 8c 0d 	sts	0x0D8C, r19
    a0ca:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    a0ce:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a0d2:	21 e8       	ldi	r18, 0x81	; 129
    a0d4:	20 93 ee 0d 	sts	0x0DEE, r18
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a0d8:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a0dc:	22 e0       	ldi	r18, 0x02	; 2
    a0de:	20 93 05 0e 	sts	0x0E05, r18
	shot->hit_count = damage;
    a0e2:	80 93 06 0e 	sts	0x0E06, r24
	shot->shot_speed = speed;
    a0e6:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    a0ea:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a0ee:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    a0f2:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    a0f6:	41 e4       	ldi	r20, 0x41	; 65
    a0f8:	50 e1       	ldi	r21, 0x10	; 16
    a0fa:	50 93 11 0e 	sts	0x0E11, r21
    a0fe:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    a102:	4e e7       	ldi	r20, 0x7E	; 126
    a104:	51 e3       	ldi	r21, 0x31	; 49
    a106:	50 93 42 10 	sts	0x1042, r21
    a10a:	40 93 41 10 	sts	0x1041, r20
	shot->shared.vx = speed;
    a10e:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    a112:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a116:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a11a:	20 93 19 0e 	sts	0x0E19, r18
	shot->hit_count = damage;
    a11e:	80 93 1a 0e 	sts	0x0E1A, r24
	shot->shot_speed = speed;
    a122:	90 93 1c 0e 	sts	0x0E1C, r25
	shot->y_delta = y_delta;
    a126:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a12a:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.frames_per_anim = 1;
    a12e:	80 93 20 0e 	sts	0x0E20, r24
	shot->anim.anims = anim;
    a132:	63 e5       	ldi	r22, 0x53	; 83
    a134:	70 e1       	ldi	r23, 0x10	; 16
    a136:	70 93 25 0e 	sts	0x0E25, r23
    a13a:	60 93 24 0e 	sts	0x0E24, r22
	shot->anim.anims[0] = (char*) map;
    a13e:	50 93 54 10 	sts	0x1054, r21
    a142:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a146:	90 93 17 0e 	sts	0x0E17, r25
    a14a:	5c c0       	rjmp	.+184    	; 0xa204 <init_player_shot+0x2a8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a14c:	86 30       	cpi	r24, 0x06	; 6
    a14e:	09 f0       	breq	.+2      	; 0xa152 <init_player_shot+0x1f6>
    a150:	60 c0       	rjmp	.+192    	; 0xa212 <init_player_shot+0x2b6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a152:	33 e0       	ldi	r19, 0x03	; 3
    a154:	30 93 f1 0d 	sts	0x0DF1, r19
	shot->hit_count = damage;
    a158:	22 e0       	ldi	r18, 0x02	; 2
    a15a:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->shot_speed = speed;
    a15e:	8f e7       	ldi	r24, 0x7F	; 127
    a160:	80 93 f4 0d 	sts	0x0DF4, r24
	shot->y_delta = y_delta;
    a164:	98 ef       	ldi	r25, 0xF8	; 248
    a166:	90 93 f5 0d 	sts	0x0DF5, r25
	shot->anim.anim_count = 1;
    a16a:	91 e0       	ldi	r25, 0x01	; 1
    a16c:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.frames_per_anim = 1;
    a170:	90 93 f8 0d 	sts	0x0DF8, r25
	shot->anim.anims = anim;
    a174:	4b e8       	ldi	r20, 0x8B	; 139
    a176:	5d e0       	ldi	r21, 0x0D	; 13
    a178:	50 93 fd 0d 	sts	0x0DFD, r21
    a17c:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->anim.anims[0] = (char*) map;
    a180:	4d e8       	ldi	r20, 0x8D	; 141
    a182:	51 e3       	ldi	r21, 0x31	; 49
    a184:	50 93 8c 0d 	sts	0x0D8C, r21
    a188:	40 93 8b 0d 	sts	0x0D8B, r20
	shot->shared.vx = speed;
    a18c:	80 93 ef 0d 	sts	0x0DEF, r24
	shot->shared.vy = 0;
    a190:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a194:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a198:	20 93 05 0e 	sts	0x0E05, r18
	shot->hit_count = damage;
    a19c:	20 93 06 0e 	sts	0x0E06, r18
	shot->shot_speed = speed;
    a1a0:	80 93 08 0e 	sts	0x0E08, r24
	shot->y_delta = y_delta;
    a1a4:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a1a8:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.frames_per_anim = 1;
    a1ac:	90 93 0c 0e 	sts	0x0E0C, r25
	shot->anim.anims = anim;
    a1b0:	61 e4       	ldi	r22, 0x41	; 65
    a1b2:	70 e1       	ldi	r23, 0x10	; 16
    a1b4:	70 93 11 0e 	sts	0x0E11, r23
    a1b8:	60 93 10 0e 	sts	0x0E10, r22
	shot->anim.anims[0] = (char*) map;
    a1bc:	6e e7       	ldi	r22, 0x7E	; 126
    a1be:	71 e3       	ldi	r23, 0x31	; 49
    a1c0:	70 93 42 10 	sts	0x1042, r23
    a1c4:	60 93 41 10 	sts	0x1041, r22
	shot->shared.vx = speed;
    a1c8:	80 93 03 0e 	sts	0x0E03, r24
	shot->shared.vy = 0;
    a1cc:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1d0:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1d4:	30 93 19 0e 	sts	0x0E19, r19
	shot->hit_count = damage;
    a1d8:	20 93 1a 0e 	sts	0x0E1A, r18
	shot->shot_speed = speed;
    a1dc:	80 93 1c 0e 	sts	0x0E1C, r24
	shot->y_delta = y_delta;
    a1e0:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a1e4:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.frames_per_anim = 1;
    a1e8:	90 93 20 0e 	sts	0x0E20, r25
	shot->anim.anims = anim;
    a1ec:	63 e5       	ldi	r22, 0x53	; 83
    a1ee:	70 e1       	ldi	r23, 0x10	; 16
    a1f0:	70 93 25 0e 	sts	0x0E25, r23
    a1f4:	60 93 24 0e 	sts	0x0E24, r22
	shot->anim.anims[0] = (char*) map;
    a1f8:	50 93 54 10 	sts	0x1054, r21
    a1fc:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a200:	80 93 17 0e 	sts	0x0E17, r24
	shot->shared.vy = 0;
    a204:	10 92 16 0e 	sts	0x0E16, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a208:	10 92 1b 0e 	sts	0x0E1B, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a20c:	20 93 e8 0d 	sts	0x0DE8, r18
    a210:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a212:	88 30       	cpi	r24, 0x08	; 8
    a214:	09 f0       	breq	.+2      	; 0xa218 <init_player_shot+0x2bc>
    a216:	60 c0       	rjmp	.+192    	; 0xa2d8 <init_player_shot+0x37c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a218:	33 e0       	ldi	r19, 0x03	; 3
    a21a:	30 93 f1 0d 	sts	0x0DF1, r19
	shot->hit_count = damage;
    a21e:	62 e0       	ldi	r22, 0x02	; 2
    a220:	60 93 f2 0d 	sts	0x0DF2, r22
	shot->shot_speed = speed;
    a224:	2f e7       	ldi	r18, 0x7F	; 127
    a226:	20 93 f4 0d 	sts	0x0DF4, r18
	shot->y_delta = y_delta;
    a22a:	98 ef       	ldi	r25, 0xF8	; 248
    a22c:	90 93 f5 0d 	sts	0x0DF5, r25
	shot->anim.anim_count = 1;
    a230:	91 e0       	ldi	r25, 0x01	; 1
    a232:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.frames_per_anim = 1;
    a236:	90 93 f8 0d 	sts	0x0DF8, r25
	shot->anim.anims = anim;
    a23a:	4b e8       	ldi	r20, 0x8B	; 139
    a23c:	5d e0       	ldi	r21, 0x0D	; 13
    a23e:	50 93 fd 0d 	sts	0x0DFD, r21
    a242:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->anim.anims[0] = (char*) map;
    a246:	4d e8       	ldi	r20, 0x8D	; 141
    a248:	51 e3       	ldi	r21, 0x31	; 49
    a24a:	50 93 8c 0d 	sts	0x0D8C, r21
    a24e:	40 93 8b 0d 	sts	0x0D8B, r20
	shot->shared.vx = speed;
    a252:	20 93 ef 0d 	sts	0x0DEF, r18
	shot->shared.vy = 0;
    a256:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a25a:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a25e:	90 93 05 0e 	sts	0x0E05, r25
	shot->hit_count = damage;
    a262:	90 93 06 0e 	sts	0x0E06, r25
	shot->shot_speed = speed;
    a266:	20 93 08 0e 	sts	0x0E08, r18
	shot->y_delta = y_delta;
    a26a:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a26e:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.frames_per_anim = 1;
    a272:	90 93 0c 0e 	sts	0x0E0C, r25
	shot->anim.anims = anim;
    a276:	e1 e4       	ldi	r30, 0x41	; 65
    a278:	f0 e1       	ldi	r31, 0x10	; 16
    a27a:	f0 93 11 0e 	sts	0x0E11, r31
    a27e:	e0 93 10 0e 	sts	0x0E10, r30
	shot->anim.anims[0] = (char*) map;
    a282:	e7 e8       	ldi	r30, 0x87	; 135
    a284:	f1 e3       	ldi	r31, 0x31	; 49
    a286:	f0 93 42 10 	sts	0x1042, r31
    a28a:	e0 93 41 10 	sts	0x1041, r30
	shot->shared.vx = speed;
    a28e:	20 93 03 0e 	sts	0x0E03, r18
	shot->shared.vy = 0;
    a292:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a296:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a29a:	30 93 19 0e 	sts	0x0E19, r19
	shot->hit_count = damage;
    a29e:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->shot_speed = speed;
    a2a2:	20 93 1c 0e 	sts	0x0E1C, r18
	shot->y_delta = y_delta;
    a2a6:	80 93 1d 0e 	sts	0x0E1D, r24
	shot->anim.anim_count = 1;
    a2aa:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.frames_per_anim = 1;
    a2ae:	90 93 20 0e 	sts	0x0E20, r25
	shot->anim.anims = anim;
    a2b2:	83 e5       	ldi	r24, 0x53	; 83
    a2b4:	90 e1       	ldi	r25, 0x10	; 16
    a2b6:	90 93 25 0e 	sts	0x0E25, r25
    a2ba:	80 93 24 0e 	sts	0x0E24, r24
	shot->anim.anims[0] = (char*) map;
    a2be:	50 93 54 10 	sts	0x1054, r21
    a2c2:	40 93 53 10 	sts	0x1053, r20
	shot->shared.vx = speed;
    a2c6:	20 93 17 0e 	sts	0x0E17, r18
	shot->shared.vy = 0;
    a2ca:	10 92 16 0e 	sts	0x0E16, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a2ce:	10 92 1b 0e 	sts	0x0E1B, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a2d2:	30 93 e8 0d 	sts	0x0DE8, r19
    a2d6:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2d8:	55 e0       	ldi	r21, 0x05	; 5
    a2da:	50 93 f1 0d 	sts	0x0DF1, r21
	shot->hit_count = damage;
    a2de:	42 e0       	ldi	r20, 0x02	; 2
    a2e0:	40 93 f2 0d 	sts	0x0DF2, r20
	shot->shot_speed = speed;
    a2e4:	9f e7       	ldi	r25, 0x7F	; 127
    a2e6:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->y_delta = y_delta;
    a2ea:	10 92 f5 0d 	sts	0x0DF5, r1
	shot->anim.anim_count = 1;
    a2ee:	81 e0       	ldi	r24, 0x01	; 1
    a2f0:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.frames_per_anim = 1;
    a2f4:	80 93 f8 0d 	sts	0x0DF8, r24
	shot->anim.anims = anim;
    a2f8:	2b e8       	ldi	r18, 0x8B	; 139
    a2fa:	3d e0       	ldi	r19, 0x0D	; 13
    a2fc:	30 93 fd 0d 	sts	0x0DFD, r19
    a300:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->anim.anims[0] = (char*) map;
    a304:	24 e8       	ldi	r18, 0x84	; 132
    a306:	31 e3       	ldi	r19, 0x31	; 49
    a308:	30 93 8c 0d 	sts	0x0D8C, r19
    a30c:	20 93 8b 0d 	sts	0x0D8B, r18
	shot->shared.vx = speed;
    a310:	90 93 ef 0d 	sts	0x0DEF, r25
	shot->shared.vy = 0;
    a314:	10 92 ee 0d 	sts	0x0DEE, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a318:	10 92 f3 0d 	sts	0x0DF3, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a31c:	50 93 05 0e 	sts	0x0E05, r21
	shot->hit_count = damage;
    a320:	40 93 06 0e 	sts	0x0E06, r20
	shot->shot_speed = speed;
    a324:	90 93 08 0e 	sts	0x0E08, r25
	shot->y_delta = y_delta;
    a328:	10 92 09 0e 	sts	0x0E09, r1
	shot->anim.anim_count = 1;
    a32c:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.frames_per_anim = 1;
    a330:	80 93 0c 0e 	sts	0x0E0C, r24
	shot->anim.anims = anim;
    a334:	41 e4       	ldi	r20, 0x41	; 65
    a336:	50 e1       	ldi	r21, 0x10	; 16
    a338:	50 93 11 0e 	sts	0x0E11, r21
    a33c:	40 93 10 0e 	sts	0x0E10, r20
	shot->anim.anims[0] = (char*) map;
    a340:	30 93 42 10 	sts	0x1042, r19
    a344:	20 93 41 10 	sts	0x1041, r18
	shot->shared.vx = speed;
    a348:	90 93 03 0e 	sts	0x0E03, r25
	shot->shared.vy = 0;
    a34c:	10 92 02 0e 	sts	0x0E02, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a350:	10 92 07 0e 	sts	0x0E07, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a354:	26 e0       	ldi	r18, 0x06	; 6
    a356:	20 93 19 0e 	sts	0x0E19, r18
	shot->hit_count = damage;
    a35a:	24 e0       	ldi	r18, 0x04	; 4
    a35c:	20 93 1a 0e 	sts	0x0E1A, r18
	shot->shot_speed = speed;
    a360:	90 93 1c 0e 	sts	0x0E1C, r25
	shot->y_delta = y_delta;
    a364:	10 92 1d 0e 	sts	0x0E1D, r1
	shot->anim.anim_count = 1;
    a368:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.frames_per_anim = 1;
    a36c:	80 93 20 0e 	sts	0x0E20, r24
	shot->anim.anims = anim;
    a370:	23 e5       	ldi	r18, 0x53	; 83
    a372:	30 e1       	ldi	r19, 0x10	; 16
    a374:	30 93 25 0e 	sts	0x0E25, r19
    a378:	20 93 24 0e 	sts	0x0E24, r18
	shot->anim.anims[0] = (char*) map;
    a37c:	21 e8       	ldi	r18, 0x81	; 129
    a37e:	31 e3       	ldi	r19, 0x31	; 49
    a380:	30 93 54 10 	sts	0x1054, r19
    a384:	20 93 53 10 	sts	0x1053, r18
	shot->shared.vx = speed;
    a388:	90 93 17 0e 	sts	0x0E17, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a38c:	90 93 16 0e 	sts	0x0E16, r25
	}
	shot->active = 0;
    a390:	10 92 1b 0e 	sts	0x0E1B, r1
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a394:	80 93 e8 0d 	sts	0x0DE8, r24
    a398:	08 95       	ret

0000a39a <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a39a:	81 11       	cpse	r24, r1
    a39c:	55 c0       	rjmp	.+170    	; 0xa448 <init_boss_shot+0xae>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a39e:	81 e0       	ldi	r24, 0x01	; 1
    a3a0:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->hit_count = damage;
    a3a4:	80 93 6d 0e 	sts	0x0E6D, r24
	shot->shot_speed = speed;
    a3a8:	94 e6       	ldi	r25, 0x64	; 100
    a3aa:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->y_delta = y_delta;
    a3ae:	10 92 70 0e 	sts	0x0E70, r1
	shot->anim.anim_count = 1;
    a3b2:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.frames_per_anim = 1;
    a3b6:	80 93 73 0e 	sts	0x0E73, r24
	shot->anim.anims = anim;
    a3ba:	2b ed       	ldi	r18, 0xDB	; 219
    a3bc:	3f e0       	ldi	r19, 0x0F	; 15
    a3be:	30 93 78 0e 	sts	0x0E78, r19
    a3c2:	20 93 77 0e 	sts	0x0E77, r18
	shot->anim.anims[0] = (char*) map;
    a3c6:	27 e8       	ldi	r18, 0x87	; 135
    a3c8:	31 e3       	ldi	r19, 0x31	; 49
    a3ca:	30 93 dc 0f 	sts	0x0FDC, r19
    a3ce:	20 93 db 0f 	sts	0x0FDB, r18
	shot->shared.vx = speed;
    a3d2:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->shared.vy = 0;
    a3d6:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3da:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3de:	80 93 80 0e 	sts	0x0E80, r24
	shot->hit_count = damage;
    a3e2:	80 93 81 0e 	sts	0x0E81, r24
	shot->shot_speed = speed;
    a3e6:	90 93 83 0e 	sts	0x0E83, r25
	shot->y_delta = y_delta;
    a3ea:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a3ee:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.frames_per_anim = 1;
    a3f2:	80 93 87 0e 	sts	0x0E87, r24
	shot->anim.anims = anim;
    a3f6:	47 e5       	ldi	r20, 0x57	; 87
    a3f8:	50 e1       	ldi	r21, 0x10	; 16
    a3fa:	50 93 8c 0e 	sts	0x0E8C, r21
    a3fe:	40 93 8b 0e 	sts	0x0E8B, r20
	shot->anim.anims[0] = (char*) map;
    a402:	30 93 58 10 	sts	0x1058, r19
    a406:	20 93 57 10 	sts	0x1057, r18
	shot->shared.vx = speed;
    a40a:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->shared.vy = 0;
    a40e:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a412:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a416:	80 93 94 0e 	sts	0x0E94, r24
	shot->hit_count = damage;
    a41a:	80 93 95 0e 	sts	0x0E95, r24
	shot->shot_speed = speed;
    a41e:	90 93 97 0e 	sts	0x0E97, r25
	shot->y_delta = y_delta;
    a422:	10 92 98 0e 	sts	0x0E98, r1
	shot->anim.anim_count = 1;
    a426:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.frames_per_anim = 1;
    a42a:	80 93 9b 0e 	sts	0x0E9B, r24
	shot->anim.anims = anim;
    a42e:	47 e3       	ldi	r20, 0x37	; 55
    a430:	50 e1       	ldi	r21, 0x10	; 16
    a432:	50 93 a0 0e 	sts	0x0EA0, r21
    a436:	40 93 9f 0e 	sts	0x0E9F, r20
	shot->anim.anims[0] = (char*) map;
    a43a:	30 93 38 10 	sts	0x1038, r19
    a43e:	20 93 37 10 	sts	0x1037, r18
	shot->shared.vx = speed;
    a442:	90 93 92 0e 	sts	0x0E92, r25
    a446:	5c c0       	rjmp	.+184    	; 0xa500 <init_boss_shot+0x166>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a448:	82 30       	cpi	r24, 0x02	; 2
    a44a:	09 f0       	breq	.+2      	; 0xa44e <init_boss_shot+0xb4>
    a44c:	5e c0       	rjmp	.+188    	; 0xa50a <init_boss_shot+0x170>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a44e:	94 e0       	ldi	r25, 0x04	; 4
    a450:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->hit_count = damage;
    a454:	91 e0       	ldi	r25, 0x01	; 1
    a456:	90 93 6d 0e 	sts	0x0E6D, r25
	shot->shot_speed = speed;
    a45a:	2f e7       	ldi	r18, 0x7F	; 127
    a45c:	20 93 6f 0e 	sts	0x0E6F, r18
	shot->y_delta = y_delta;
    a460:	38 ef       	ldi	r19, 0xF8	; 248
    a462:	30 93 70 0e 	sts	0x0E70, r19
	shot->anim.anim_count = 1;
    a466:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.frames_per_anim = 1;
    a46a:	90 93 73 0e 	sts	0x0E73, r25
	shot->anim.anims = anim;
    a46e:	4b ed       	ldi	r20, 0xDB	; 219
    a470:	5f e0       	ldi	r21, 0x0F	; 15
    a472:	50 93 78 0e 	sts	0x0E78, r21
    a476:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a47a:	4a e8       	ldi	r20, 0x8A	; 138
    a47c:	51 e3       	ldi	r21, 0x31	; 49
    a47e:	50 93 dc 0f 	sts	0x0FDC, r21
    a482:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a486:	20 93 6a 0e 	sts	0x0E6A, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a48a:	31 e8       	ldi	r19, 0x81	; 129
    a48c:	30 93 69 0e 	sts	0x0E69, r19
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a490:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a494:	80 93 80 0e 	sts	0x0E80, r24
	shot->hit_count = damage;
    a498:	90 93 81 0e 	sts	0x0E81, r25
	shot->shot_speed = speed;
    a49c:	20 93 83 0e 	sts	0x0E83, r18
	shot->y_delta = y_delta;
    a4a0:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a4a4:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.frames_per_anim = 1;
    a4a8:	90 93 87 0e 	sts	0x0E87, r25
	shot->anim.anims = anim;
    a4ac:	47 e5       	ldi	r20, 0x57	; 87
    a4ae:	50 e1       	ldi	r21, 0x10	; 16
    a4b0:	50 93 8c 0e 	sts	0x0E8C, r21
    a4b4:	40 93 8b 0e 	sts	0x0E8B, r20
	shot->anim.anims[0] = (char*) map;
    a4b8:	4e e7       	ldi	r20, 0x7E	; 126
    a4ba:	51 e3       	ldi	r21, 0x31	; 49
    a4bc:	50 93 58 10 	sts	0x1058, r21
    a4c0:	40 93 57 10 	sts	0x1057, r20
	shot->shared.vx = speed;
    a4c4:	20 93 7e 0e 	sts	0x0E7E, r18
	shot->shared.vy = 0;
    a4c8:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a4cc:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4d0:	80 93 94 0e 	sts	0x0E94, r24
	shot->hit_count = damage;
    a4d4:	90 93 95 0e 	sts	0x0E95, r25
	shot->shot_speed = speed;
    a4d8:	20 93 97 0e 	sts	0x0E97, r18
	shot->y_delta = y_delta;
    a4dc:	10 92 98 0e 	sts	0x0E98, r1
	shot->anim.anim_count = 1;
    a4e0:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.frames_per_anim = 1;
    a4e4:	90 93 9b 0e 	sts	0x0E9B, r25
	shot->anim.anims = anim;
    a4e8:	67 e3       	ldi	r22, 0x37	; 55
    a4ea:	70 e1       	ldi	r23, 0x10	; 16
    a4ec:	70 93 a0 0e 	sts	0x0EA0, r23
    a4f0:	60 93 9f 0e 	sts	0x0E9F, r22
	shot->anim.anims[0] = (char*) map;
    a4f4:	50 93 38 10 	sts	0x1038, r21
    a4f8:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a4fc:	20 93 92 0e 	sts	0x0E92, r18
	shot->shared.vy = 0;
    a500:	10 92 91 0e 	sts	0x0E91, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a504:	10 92 96 0e 	sts	0x0E96, r1
    a508:	20 c1       	rjmp	.+576    	; 0xa74a <init_boss_shot+0x3b0>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    a50a:	84 30       	cpi	r24, 0x04	; 4
    a50c:	09 f0       	breq	.+2      	; 0xa510 <init_boss_shot+0x176>
    a50e:	5a c0       	rjmp	.+180    	; 0xa5c4 <init_boss_shot+0x22a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a510:	33 e0       	ldi	r19, 0x03	; 3
    a512:	30 93 6c 0e 	sts	0x0E6C, r19
	shot->hit_count = damage;
    a516:	22 e0       	ldi	r18, 0x02	; 2
    a518:	20 93 6d 0e 	sts	0x0E6D, r18
	shot->shot_speed = speed;
    a51c:	8f e7       	ldi	r24, 0x7F	; 127
    a51e:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->y_delta = y_delta;
    a522:	98 ef       	ldi	r25, 0xF8	; 248
    a524:	90 93 70 0e 	sts	0x0E70, r25
	shot->anim.anim_count = 1;
    a528:	91 e0       	ldi	r25, 0x01	; 1
    a52a:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.frames_per_anim = 1;
    a52e:	90 93 73 0e 	sts	0x0E73, r25
	shot->anim.anims = anim;
    a532:	4b ed       	ldi	r20, 0xDB	; 219
    a534:	5f e0       	ldi	r21, 0x0F	; 15
    a536:	50 93 78 0e 	sts	0x0E78, r21
    a53a:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a53e:	4d e8       	ldi	r20, 0x8D	; 141
    a540:	51 e3       	ldi	r21, 0x31	; 49
    a542:	50 93 dc 0f 	sts	0x0FDC, r21
    a546:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a54a:	80 93 6a 0e 	sts	0x0E6A, r24
	shot->shared.vy = 0;
    a54e:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a552:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a556:	20 93 80 0e 	sts	0x0E80, r18
	shot->hit_count = damage;
    a55a:	20 93 81 0e 	sts	0x0E81, r18
	shot->shot_speed = speed;
    a55e:	80 93 83 0e 	sts	0x0E83, r24
	shot->y_delta = y_delta;
    a562:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a566:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.frames_per_anim = 1;
    a56a:	90 93 87 0e 	sts	0x0E87, r25
	shot->anim.anims = anim;
    a56e:	67 e5       	ldi	r22, 0x57	; 87
    a570:	70 e1       	ldi	r23, 0x10	; 16
    a572:	70 93 8c 0e 	sts	0x0E8C, r23
    a576:	60 93 8b 0e 	sts	0x0E8B, r22
	shot->anim.anims[0] = (char*) map;
    a57a:	6e e7       	ldi	r22, 0x7E	; 126
    a57c:	71 e3       	ldi	r23, 0x31	; 49
    a57e:	70 93 58 10 	sts	0x1058, r23
    a582:	60 93 57 10 	sts	0x1057, r22
	shot->shared.vx = speed;
    a586:	80 93 7e 0e 	sts	0x0E7E, r24
	shot->shared.vy = 0;
    a58a:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a58e:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a592:	30 93 94 0e 	sts	0x0E94, r19
	shot->hit_count = damage;
    a596:	20 93 95 0e 	sts	0x0E95, r18
	shot->shot_speed = speed;
    a59a:	80 93 97 0e 	sts	0x0E97, r24
	shot->y_delta = y_delta;
    a59e:	10 92 98 0e 	sts	0x0E98, r1
	shot->anim.anim_count = 1;
    a5a2:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.frames_per_anim = 1;
    a5a6:	90 93 9b 0e 	sts	0x0E9B, r25
	shot->anim.anims = anim;
    a5aa:	67 e3       	ldi	r22, 0x37	; 55
    a5ac:	70 e1       	ldi	r23, 0x10	; 16
    a5ae:	70 93 a0 0e 	sts	0x0EA0, r23
    a5b2:	60 93 9f 0e 	sts	0x0E9F, r22
	shot->anim.anims[0] = (char*) map;
    a5b6:	50 93 38 10 	sts	0x1038, r21
    a5ba:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a5be:	80 93 92 0e 	sts	0x0E92, r24
    a5c2:	5d c0       	rjmp	.+186    	; 0xa67e <init_boss_shot+0x2e4>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    a5c4:	86 30       	cpi	r24, 0x06	; 6
    a5c6:	09 f0       	breq	.+2      	; 0xa5ca <init_boss_shot+0x230>
    a5c8:	61 c0       	rjmp	.+194    	; 0xa68c <init_boss_shot+0x2f2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5ca:	23 e0       	ldi	r18, 0x03	; 3
    a5cc:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->hit_count = damage;
    a5d0:	32 e0       	ldi	r19, 0x02	; 2
    a5d2:	30 93 6d 0e 	sts	0x0E6D, r19
	shot->shot_speed = speed;
    a5d6:	9f e7       	ldi	r25, 0x7F	; 127
    a5d8:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->y_delta = y_delta;
    a5dc:	88 ef       	ldi	r24, 0xF8	; 248
    a5de:	80 93 70 0e 	sts	0x0E70, r24
	shot->anim.anim_count = 1;
    a5e2:	81 e0       	ldi	r24, 0x01	; 1
    a5e4:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.frames_per_anim = 1;
    a5e8:	80 93 73 0e 	sts	0x0E73, r24
	shot->anim.anims = anim;
    a5ec:	4b ed       	ldi	r20, 0xDB	; 219
    a5ee:	5f e0       	ldi	r21, 0x0F	; 15
    a5f0:	50 93 78 0e 	sts	0x0E78, r21
    a5f4:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a5f8:	4d e8       	ldi	r20, 0x8D	; 141
    a5fa:	51 e3       	ldi	r21, 0x31	; 49
    a5fc:	50 93 dc 0f 	sts	0x0FDC, r21
    a600:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a604:	90 93 6a 0e 	sts	0x0E6A, r25
	shot->shared.vy = 0;
    a608:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a60c:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a610:	80 93 80 0e 	sts	0x0E80, r24
	shot->hit_count = damage;
    a614:	80 93 81 0e 	sts	0x0E81, r24
	shot->shot_speed = speed;
    a618:	90 93 83 0e 	sts	0x0E83, r25
	shot->y_delta = y_delta;
    a61c:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a620:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.frames_per_anim = 1;
    a624:	80 93 87 0e 	sts	0x0E87, r24
	shot->anim.anims = anim;
    a628:	67 e5       	ldi	r22, 0x57	; 87
    a62a:	70 e1       	ldi	r23, 0x10	; 16
    a62c:	70 93 8c 0e 	sts	0x0E8C, r23
    a630:	60 93 8b 0e 	sts	0x0E8B, r22
	shot->anim.anims[0] = (char*) map;
    a634:	67 e8       	ldi	r22, 0x87	; 135
    a636:	71 e3       	ldi	r23, 0x31	; 49
    a638:	70 93 58 10 	sts	0x1058, r23
    a63c:	60 93 57 10 	sts	0x1057, r22
	shot->shared.vx = speed;
    a640:	90 93 7e 0e 	sts	0x0E7E, r25
	shot->shared.vy = 0;
    a644:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a648:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a64c:	20 93 94 0e 	sts	0x0E94, r18
	shot->hit_count = damage;
    a650:	30 93 95 0e 	sts	0x0E95, r19
	shot->shot_speed = speed;
    a654:	90 93 97 0e 	sts	0x0E97, r25
	shot->y_delta = y_delta;
    a658:	38 e0       	ldi	r19, 0x08	; 8
    a65a:	30 93 98 0e 	sts	0x0E98, r19
	shot->anim.anim_count = 1;
    a65e:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.frames_per_anim = 1;
    a662:	80 93 9b 0e 	sts	0x0E9B, r24
	shot->anim.anims = anim;
    a666:	67 e3       	ldi	r22, 0x37	; 55
    a668:	70 e1       	ldi	r23, 0x10	; 16
    a66a:	70 93 a0 0e 	sts	0x0EA0, r23
    a66e:	60 93 9f 0e 	sts	0x0E9F, r22
	shot->anim.anims[0] = (char*) map;
    a672:	50 93 38 10 	sts	0x1038, r21
    a676:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a67a:	90 93 92 0e 	sts	0x0E92, r25
	shot->shared.vy = 0;
    a67e:	10 92 91 0e 	sts	0x0E91, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a682:	10 92 96 0e 	sts	0x0E96, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a686:	20 93 63 0e 	sts	0x0E63, r18
    a68a:	08 95       	ret
	}
	else if (level == 8) // Dessert
    a68c:	88 30       	cpi	r24, 0x08	; 8
    a68e:	09 f0       	breq	.+2      	; 0xa692 <init_boss_shot+0x2f8>
    a690:	5e c0       	rjmp	.+188    	; 0xa74e <init_boss_shot+0x3b4>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a692:	22 e0       	ldi	r18, 0x02	; 2
    a694:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->hit_count = damage;
    a698:	20 93 6d 0e 	sts	0x0E6D, r18
	shot->shot_speed = speed;
    a69c:	3f e7       	ldi	r19, 0x7F	; 127
    a69e:	30 93 6f 0e 	sts	0x0E6F, r19
	shot->y_delta = y_delta;
    a6a2:	98 ef       	ldi	r25, 0xF8	; 248
    a6a4:	90 93 70 0e 	sts	0x0E70, r25
	shot->anim.anim_count = 1;
    a6a8:	91 e0       	ldi	r25, 0x01	; 1
    a6aa:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.frames_per_anim = 1;
    a6ae:	90 93 73 0e 	sts	0x0E73, r25
	shot->anim.anims = anim;
    a6b2:	4b ed       	ldi	r20, 0xDB	; 219
    a6b4:	5f e0       	ldi	r21, 0x0F	; 15
    a6b6:	50 93 78 0e 	sts	0x0E78, r21
    a6ba:	40 93 77 0e 	sts	0x0E77, r20
	shot->anim.anims[0] = (char*) map;
    a6be:	4e e7       	ldi	r20, 0x7E	; 126
    a6c0:	51 e3       	ldi	r21, 0x31	; 49
    a6c2:	50 93 dc 0f 	sts	0x0FDC, r21
    a6c6:	40 93 db 0f 	sts	0x0FDB, r20
	shot->shared.vx = speed;
    a6ca:	30 93 6a 0e 	sts	0x0E6A, r19
	shot->shared.vy = 0;
    a6ce:	10 92 69 0e 	sts	0x0E69, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a6d2:	10 92 6e 0e 	sts	0x0E6E, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6d6:	20 93 80 0e 	sts	0x0E80, r18
	shot->hit_count = damage;
    a6da:	90 93 81 0e 	sts	0x0E81, r25
	shot->shot_speed = speed;
    a6de:	64 e6       	ldi	r22, 0x64	; 100
    a6e0:	60 93 83 0e 	sts	0x0E83, r22
	shot->y_delta = y_delta;
    a6e4:	10 92 84 0e 	sts	0x0E84, r1
	shot->anim.anim_count = 1;
    a6e8:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.frames_per_anim = 1;
    a6ec:	90 93 87 0e 	sts	0x0E87, r25
	shot->anim.anims = anim;
    a6f0:	e7 e5       	ldi	r30, 0x57	; 87
    a6f2:	f0 e1       	ldi	r31, 0x10	; 16
    a6f4:	f0 93 8c 0e 	sts	0x0E8C, r31
    a6f8:	e0 93 8b 0e 	sts	0x0E8B, r30
	shot->anim.anims[0] = (char*) map;
    a6fc:	50 93 58 10 	sts	0x1058, r21
    a700:	40 93 57 10 	sts	0x1057, r20
	shot->shared.vx = speed;
    a704:	60 93 7e 0e 	sts	0x0E7E, r22
	shot->shared.vy = 0;
    a708:	10 92 7d 0e 	sts	0x0E7D, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a70c:	10 92 82 0e 	sts	0x0E82, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a710:	20 93 94 0e 	sts	0x0E94, r18
	shot->hit_count = damage;
    a714:	20 93 95 0e 	sts	0x0E95, r18
	shot->shot_speed = speed;
    a718:	30 93 97 0e 	sts	0x0E97, r19
	shot->y_delta = y_delta;
    a71c:	80 93 98 0e 	sts	0x0E98, r24
	shot->anim.anim_count = 1;
    a720:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.frames_per_anim = 1;
    a724:	90 93 9b 0e 	sts	0x0E9B, r25
	shot->anim.anims = anim;
    a728:	87 e3       	ldi	r24, 0x37	; 55
    a72a:	90 e1       	ldi	r25, 0x10	; 16
    a72c:	90 93 a0 0e 	sts	0x0EA0, r25
    a730:	80 93 9f 0e 	sts	0x0E9F, r24
	shot->anim.anims[0] = (char*) map;
    a734:	50 93 38 10 	sts	0x1038, r21
    a738:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a73c:	30 93 92 0e 	sts	0x0E92, r19
	shot->shared.vy = 0;
    a740:	10 92 91 0e 	sts	0x0E91, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a744:	10 92 96 0e 	sts	0x0E96, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a748:	83 e0       	ldi	r24, 0x03	; 3
    a74a:	80 93 63 0e 	sts	0x0E63, r24
    a74e:	08 95       	ret

0000a750 <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a750:	10 92 ce 0e 	sts	0x0ECE, r1
    a754:	10 92 cd 0e 	sts	0x0ECD, r1
	p->pressed = 0;
    a758:	10 92 ca 0e 	sts	0x0ECA, r1
    a75c:	10 92 c9 0e 	sts	0x0EC9, r1
	p->released = 0;
    a760:	10 92 cc 0e 	sts	0x0ECC, r1
    a764:	10 92 cb 0e 	sts	0x0ECB, r1
	p->held_cycles = 0;
    a768:	10 92 cf 0e 	sts	0x0ECF, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	game.boss.width = 2;
    a76c:	82 e0       	ldi	r24, 0x02	; 2
    a76e:	80 93 60 0e 	sts	0x0E60, r24
	game.boss.height = 3;
    a772:	93 e0       	ldi	r25, 0x03	; 3
    a774:	90 93 61 0e 	sts	0x0E61, r25
	game.boss.run.anim_count = 4;
    a778:	84 e0       	ldi	r24, 0x04	; 4
    a77a:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a77e:	8c e0       	ldi	r24, 0x0C	; 12
    a780:	80 93 ab 0e 	sts	0x0EAB, r24
	game.boss.run.anims = boss_run_anim;
    a784:	ed e8       	ldi	r30, 0x8D	; 141
    a786:	fd e0       	ldi	r31, 0x0D	; 13
    a788:	f0 93 b0 0e 	sts	0x0EB0, r31
    a78c:	e0 93 af 0e 	sts	0x0EAF, r30
	game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a790:	2e e6       	ldi	r18, 0x6E	; 110
    a792:	31 e3       	ldi	r19, 0x31	; 49
    a794:	31 83       	std	Z+1, r19	; 0x01
    a796:	20 83       	st	Z, r18
	game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a798:	26 e6       	ldi	r18, 0x66	; 102
    a79a:	31 e3       	ldi	r19, 0x31	; 49
    a79c:	33 83       	std	Z+3, r19	; 0x03
    a79e:	22 83       	std	Z+2, r18	; 0x02
	game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a7a0:	2e e5       	ldi	r18, 0x5E	; 94
    a7a2:	31 e3       	ldi	r19, 0x31	; 49
    a7a4:	35 83       	std	Z+5, r19	; 0x05
    a7a6:	24 83       	std	Z+4, r18	; 0x04
	game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a7a8:	26 e5       	ldi	r18, 0x56	; 86
    a7aa:	31 e3       	ldi	r19, 0x31	; 49
    a7ac:	37 83       	std	Z+7, r19	; 0x07
    a7ae:	26 83       	std	Z+6, r18	; 0x06
	game.boss.active_shots = 0;
    a7b0:	10 92 5c 0e 	sts	0x0E5C, r1
	game.boss.shared.vx = 0;
    a7b4:	10 92 5a 0e 	sts	0x0E5A, r1
	game.boss.shared.vy = 0;
    a7b8:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.shared.gravity = 0;
    a7bc:	10 92 5b 0e 	sts	0x0E5B, r1
	game.boss.active = 0;
    a7c0:	10 92 62 0e 	sts	0x0E62, r1
	game.boss.direction = D_LEFT;
    a7c4:	10 92 5f 0e 	sts	0x0E5F, r1
	game.boss.flags = IDLE;
    a7c8:	88 e0       	ldi	r24, 0x08	; 8
    a7ca:	80 93 5d 0e 	sts	0x0E5D, r24
	game.boss.ai_flags = AI_NOT_READY;
    a7ce:	10 92 5e 0e 	sts	0x0E5E, r1
	game.boss.shield = BOSS_SHIELD;
    a7d2:	8e e1       	ldi	r24, 0x1E	; 30
    a7d4:	80 93 64 0e 	sts	0x0E64, r24
	game.boss.idle.anim_count = 1;
    a7d8:	81 e0       	ldi	r24, 0x01	; 1
    a7da:	80 93 a2 0e 	sts	0x0EA2, r24
	game.boss.idle.frames_per_anim = 1;
    a7de:	80 93 a3 0e 	sts	0x0EA3, r24
	game.boss.idle.anims = boss_idle_anim;
    a7e2:	e5 e5       	ldi	r30, 0x55	; 85
    a7e4:	f0 e1       	ldi	r31, 0x10	; 16
    a7e6:	f0 93 a8 0e 	sts	0x0EA8, r31
    a7ea:	e0 93 a7 0e 	sts	0x0EA7, r30
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a7ee:	26 e7       	ldi	r18, 0x76	; 118
    a7f0:	31 e3       	ldi	r19, 0x31	; 49
    a7f2:	31 83       	std	Z+1, r19	; 0x01
    a7f4:	20 83       	st	Z, r18
	
	game.boss.jump.anim_count = 1;
    a7f6:	80 93 b2 0e 	sts	0x0EB2, r24
	game.boss.jump.frames_per_anim = 1;
    a7fa:	80 93 b3 0e 	sts	0x0EB3, r24
	game.boss.jump.anims = boss_jump_anim;
    a7fe:	e3 e4       	ldi	r30, 0x43	; 67
    a800:	f0 e1       	ldi	r31, 0x10	; 16
    a802:	f0 93 b8 0e 	sts	0x0EB8, r31
    a806:	e0 93 b7 0e 	sts	0x0EB7, r30
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a80a:	29 e4       	ldi	r18, 0x49	; 73
    a80c:	31 e3       	ldi	r19, 0x31	; 49
    a80e:	31 83       	std	Z+1, r19	; 0x01
    a810:	20 83       	st	Z, r18
	
	game.boss.prone.anim_count = 1;
    a812:	80 93 ba 0e 	sts	0x0EBA, r24
	game.boss.prone.frames_per_anim = 1;
    a816:	80 93 bb 0e 	sts	0x0EBB, r24
	game.boss.prone.anims = boss_prone_anim;
    a81a:	e1 e5       	ldi	r30, 0x51	; 81
    a81c:	f0 e1       	ldi	r31, 0x10	; 16
    a81e:	f0 93 c0 0e 	sts	0x0EC0, r31
    a822:	e0 93 bf 0e 	sts	0x0EBF, r30
	game.boss.prone.anims[0] = (char*) map_ahero_prone;
    a826:	21 e5       	ldi	r18, 0x51	; 81
    a828:	31 e3       	ldi	r19, 0x31	; 49
    a82a:	31 83       	std	Z+1, r19	; 0x01
    a82c:	20 83       	st	Z, r18
	
	game.boss.expl.anim_count = 3;
    a82e:	90 93 c2 0e 	sts	0x0EC2, r25
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a832:	85 e0       	ldi	r24, 0x05	; 5
    a834:	80 93 c3 0e 	sts	0x0EC3, r24
	game.boss.expl.anims = expl_anim;
    a838:	eb e4       	ldi	r30, 0x4B	; 75
    a83a:	f0 e1       	ldi	r31, 0x10	; 16
    a83c:	f0 93 c8 0e 	sts	0x0EC8, r31
    a840:	e0 93 c7 0e 	sts	0x0EC7, r30
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a844:	88 ef       	ldi	r24, 0xF8	; 248
    a846:	91 e3       	ldi	r25, 0x31	; 49
    a848:	91 83       	std	Z+1, r25	; 0x01
    a84a:	80 83       	st	Z, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a84c:	85 ef       	ldi	r24, 0xF5	; 245
    a84e:	91 e3       	ldi	r25, 0x31	; 49
    a850:	93 83       	std	Z+3, r25	; 0x03
    a852:	82 83       	std	Z+2, r24	; 0x02
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a854:	82 ef       	ldi	r24, 0xF2	; 242
    a856:	91 e3       	ldi	r25, 0x31	; 49
    a858:	95 83       	std	Z+5, r25	; 0x05
    a85a:	84 83       	std	Z+4, r24	; 0x04
	
	init_boss_shot(game.current_level_index);
    a85c:	80 91 cc 0d 	lds	r24, 0x0DCC
    a860:	0c 94 cd 51 	jmp	0xa39a	; 0xa39a <init_boss_shot>

0000a864 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    a864:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    a868:	88 23       	and	r24, r24
    a86a:	f9 f0       	breq	.+62     	; 0xa8aa <init_player_state+0x46>
	{
		game.player.width = 3;
    a86c:	83 e0       	ldi	r24, 0x03	; 3
    a86e:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.height = 1;
    a872:	81 e0       	ldi	r24, 0x01	; 1
    a874:	80 93 e6 0d 	sts	0x0DE6, r24
		game.player.run.anim_count = 2;
    a878:	82 e0       	ldi	r24, 0x02	; 2
    a87a:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a87e:	85 e0       	ldi	r24, 0x05	; 5
    a880:	80 93 30 0e 	sts	0x0E30, r24
		game.player.run.anims = run_anim;
    a884:	89 e3       	ldi	r24, 0x39	; 57
    a886:	90 e1       	ldi	r25, 0x10	; 16
    a888:	90 93 35 0e 	sts	0x0E35, r25
    a88c:	80 93 34 0e 	sts	0x0E34, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    a890:	89 ea       	ldi	r24, 0xA9	; 169
    a892:	91 e3       	ldi	r25, 0x31	; 49
    a894:	90 93 3a 10 	sts	0x103A, r25
    a898:	80 93 39 10 	sts	0x1039, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    a89c:	84 ea       	ldi	r24, 0xA4	; 164
    a89e:	91 e3       	ldi	r25, 0x31	; 49
    a8a0:	90 93 3c 10 	sts	0x103C, r25
    a8a4:	80 93 3b 10 	sts	0x103B, r24
    a8a8:	2a c0       	rjmp	.+84     	; 0xa8fe <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    a8aa:	82 e0       	ldi	r24, 0x02	; 2
    a8ac:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.height = 3;
    a8b0:	83 e0       	ldi	r24, 0x03	; 3
    a8b2:	80 93 e6 0d 	sts	0x0DE6, r24
		game.player.run.anim_count = 4;
    a8b6:	84 e0       	ldi	r24, 0x04	; 4
    a8b8:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a8bc:	8c e0       	ldi	r24, 0x0C	; 12
    a8be:	80 93 30 0e 	sts	0x0E30, r24
		game.player.run.anims = run_anim;
    a8c2:	89 e3       	ldi	r24, 0x39	; 57
    a8c4:	90 e1       	ldi	r25, 0x10	; 16
    a8c6:	90 93 35 0e 	sts	0x0E35, r25
    a8ca:	80 93 34 0e 	sts	0x0E34, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    a8ce:	83 ed       	ldi	r24, 0xD3	; 211
    a8d0:	91 e3       	ldi	r25, 0x31	; 49
    a8d2:	90 93 3a 10 	sts	0x103A, r25
    a8d6:	80 93 39 10 	sts	0x1039, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    a8da:	8b ec       	ldi	r24, 0xCB	; 203
    a8dc:	91 e3       	ldi	r25, 0x31	; 49
    a8de:	90 93 3c 10 	sts	0x103C, r25
    a8e2:	80 93 3b 10 	sts	0x103B, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a8e6:	83 ec       	ldi	r24, 0xC3	; 195
    a8e8:	91 e3       	ldi	r25, 0x31	; 49
    a8ea:	90 93 3e 10 	sts	0x103E, r25
    a8ee:	80 93 3d 10 	sts	0x103D, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a8f2:	8b eb       	ldi	r24, 0xBB	; 187
    a8f4:	91 e3       	ldi	r25, 0x31	; 49
    a8f6:	90 93 40 10 	sts	0x1040, r25
    a8fa:	80 93 3f 10 	sts	0x103F, r24
	}
	game.player.shared.vx = 0;
    a8fe:	10 92 df 0d 	sts	0x0DDF, r1
	game.player.shared.vy = 0;
    a902:	10 92 de 0d 	sts	0x0DDE, r1
	game.player.shared.gravity = 0;
    a906:	10 92 e0 0d 	sts	0x0DE0, r1
	game.player.active_shots = 0;
    a90a:	10 92 e1 0d 	sts	0x0DE1, r1
	game.player.active = 1;
    a90e:	81 e0       	ldi	r24, 0x01	; 1
    a910:	80 93 e7 0d 	sts	0x0DE7, r24
	game.player.direction = D_RIGHT;
    a914:	80 93 e4 0d 	sts	0x0DE4, r24
	game.player.flags = IDLE;
    a918:	98 e0       	ldi	r25, 0x08	; 8
    a91a:	90 93 e2 0d 	sts	0x0DE2, r25
	game.player.ai_flags = AI_NOT_READY;
    a91e:	10 92 e3 0d 	sts	0x0DE3, r1
	game.player.shield = PLAYER_SHIELD;
    a922:	9f e0       	ldi	r25, 0x0F	; 15
    a924:	90 93 e9 0d 	sts	0x0DE9, r25
	game.player.idle.anim_count = 1;
    a928:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.frames_per_anim = 1;
    a92c:	80 93 28 0e 	sts	0x0E28, r24
	game.player.idle.anims = idle_anim;
    a930:	2d e5       	ldi	r18, 0x5D	; 93
    a932:	30 e1       	ldi	r19, 0x10	; 16
    a934:	30 93 2d 0e 	sts	0x0E2D, r19
    a938:	20 93 2c 0e 	sts	0x0E2C, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a93c:	2b ed       	ldi	r18, 0xDB	; 219
    a93e:	31 e3       	ldi	r19, 0x31	; 49
    a940:	30 93 5e 10 	sts	0x105E, r19
    a944:	20 93 5d 10 	sts	0x105D, r18
	
	game.player.jump.anim_count = 1;
    a948:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.frames_per_anim = 1;
    a94c:	80 93 38 0e 	sts	0x0E38, r24
	game.player.jump.anims = jump_anim;
    a950:	25 e9       	ldi	r18, 0x95	; 149
    a952:	3d e0       	ldi	r19, 0x0D	; 13
    a954:	30 93 3d 0e 	sts	0x0E3D, r19
    a958:	20 93 3c 0e 	sts	0x0E3C, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a95c:	23 eb       	ldi	r18, 0xB3	; 179
    a95e:	31 e3       	ldi	r19, 0x31	; 49
    a960:	30 93 96 0d 	sts	0x0D96, r19
    a964:	20 93 95 0d 	sts	0x0D95, r18
	
	game.player.prone.anim_count = 1;
    a968:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.frames_per_anim = 1;
    a96c:	80 93 40 0e 	sts	0x0E40, r24
	game.player.prone.anims = prone_anim;
    a970:	8d ed       	ldi	r24, 0xDD	; 221
    a972:	9f e0       	ldi	r25, 0x0F	; 15
    a974:	90 93 45 0e 	sts	0x0E45, r25
    a978:	80 93 44 0e 	sts	0x0E44, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a97c:	8e ea       	ldi	r24, 0xAE	; 174
    a97e:	91 e3       	ldi	r25, 0x31	; 49
    a980:	90 93 de 0f 	sts	0x0FDE, r25
    a984:	80 93 dd 0f 	sts	0x0FDD, r24
	
	game.player.expl.anim_count = 3;
    a988:	83 e0       	ldi	r24, 0x03	; 3
    a98a:	80 93 47 0e 	sts	0x0E47, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a98e:	85 e0       	ldi	r24, 0x05	; 5
    a990:	80 93 48 0e 	sts	0x0E48, r24
	game.player.expl.anims = expl_anim;
    a994:	8b e4       	ldi	r24, 0x4B	; 75
    a996:	90 e1       	ldi	r25, 0x10	; 16
    a998:	90 93 4d 0e 	sts	0x0E4D, r25
    a99c:	80 93 4c 0e 	sts	0x0E4C, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a9a0:	88 ef       	ldi	r24, 0xF8	; 248
    a9a2:	91 e3       	ldi	r25, 0x31	; 49
    a9a4:	90 93 4c 10 	sts	0x104C, r25
    a9a8:	80 93 4b 10 	sts	0x104B, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a9ac:	85 ef       	ldi	r24, 0xF5	; 245
    a9ae:	91 e3       	ldi	r25, 0x31	; 49
    a9b0:	90 93 4e 10 	sts	0x104E, r25
    a9b4:	80 93 4d 10 	sts	0x104D, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a9b8:	82 ef       	ldi	r24, 0xF2	; 242
    a9ba:	91 e3       	ldi	r25, 0x31	; 49
    a9bc:	90 93 50 10 	sts	0x1050, r25
    a9c0:	80 93 4f 10 	sts	0x104F, r24
	game.eye_clusters = 9;
    a9c4:	89 e0       	ldi	r24, 0x09	; 9
    a9c6:	80 93 d5 0d 	sts	0x0DD5, r24
	init_player_shot(game.current_level_index);
    a9ca:	80 91 cc 0d 	lds	r24, 0x0DCC
    a9ce:	0c 94 ae 4f 	jmp	0x9f5c	; 0x9f5c <init_player_shot>

0000a9d2 <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    a9d2:	0f 93       	push	r16
    a9d4:	1f 93       	push	r17
    a9d6:	cf 93       	push	r28
    a9d8:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    a9da:	a8 2f       	mov	r26, r24
    a9dc:	b0 e0       	ldi	r27, 0x00	; 0
    a9de:	35 e3       	ldi	r19, 0x35	; 53
    a9e0:	83 9f       	mul	r24, r19
    a9e2:	c0 01       	movw	r24, r0
    a9e4:	11 24       	eor	r1, r1
    a9e6:	89 54       	subi	r24, 0x49	; 73
    a9e8:	92 4f       	sbci	r25, 0xF2	; 242
    a9ea:	fc 01       	movw	r30, r24
    a9ec:	e9 5b       	subi	r30, 0xB9	; 185
    a9ee:	fe 4f       	sbci	r31, 0xFE	; 254
    a9f0:	33 e0       	ldi	r19, 0x03	; 3
    a9f2:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a9f4:	31 96       	adiw	r30, 0x01	; 1
    a9f6:	35 e0       	ldi	r19, 0x05	; 5
    a9f8:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    a9fa:	34 96       	adiw	r30, 0x04	; 4
    a9fc:	cb e4       	ldi	r28, 0x4B	; 75
    a9fe:	d0 e1       	ldi	r29, 0x10	; 16
    aa00:	d1 83       	std	Z+1, r29	; 0x01
    aa02:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    aa04:	e8 ef       	ldi	r30, 0xF8	; 248
    aa06:	f1 e3       	ldi	r31, 0x31	; 49
    aa08:	f0 93 4c 10 	sts	0x104C, r31
    aa0c:	e0 93 4b 10 	sts	0x104B, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    aa10:	e5 ef       	ldi	r30, 0xF5	; 245
    aa12:	f1 e3       	ldi	r31, 0x31	; 49
    aa14:	f0 93 4e 10 	sts	0x104E, r31
    aa18:	e0 93 4d 10 	sts	0x104D, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    aa1c:	e2 ef       	ldi	r30, 0xF2	; 242
    aa1e:	f1 e3       	ldi	r31, 0x31	; 49
    aa20:	f0 93 50 10 	sts	0x1050, r31
    aa24:	e0 93 4f 10 	sts	0x104F, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    aa28:	ec 01       	movw	r28, r24
    aa2a:	ce 5c       	subi	r28, 0xCE	; 206
    aa2c:	de 4f       	sbci	r29, 0xFE	; 254
    aa2e:	31 e0       	ldi	r19, 0x01	; 1
    aa30:	38 83       	st	Y, r19
		game.enemies[i].shot[j].active = 0;
    aa32:	fc 01       	movw	r30, r24
    aa34:	ed 5c       	subi	r30, 0xCD	; 205
    aa36:	fe 4f       	sbci	r31, 0xFE	; 254
    aa38:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    aa3a:	32 97       	sbiw	r30, 0x02	; 2
    aa3c:	17 e0       	ldi	r17, 0x07	; 7
    aa3e:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    aa40:	36 96       	adiw	r30, 0x06	; 6
    aa42:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    aa44:	31 96       	adiw	r30, 0x01	; 1
    aa46:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    aa48:	34 96       	adiw	r30, 0x04	; 4
    aa4a:	05 e4       	ldi	r16, 0x45	; 69
    aa4c:	10 e1       	ldi	r17, 0x10	; 16
    aa4e:	11 83       	std	Z+1, r17	; 0x01
    aa50:	00 83       	st	Z, r16
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    aa52:	e6 e4       	ldi	r30, 0x46	; 70
    aa54:	f1 e3       	ldi	r31, 0x31	; 49
    aa56:	f0 93 46 10 	sts	0x1046, r31
    aa5a:	e0 93 45 10 	sts	0x1045, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    aa5e:	fc 01       	movw	r30, r24
    aa60:	ec 5c       	subi	r30, 0xCC	; 204
    aa62:	fe 4f       	sbci	r31, 0xFE	; 254
    aa64:	30 e5       	ldi	r19, 0x50	; 80
    aa66:	30 83       	st	Z, r19
		if (is_boss)
    aa68:	22 23       	and	r18, r18
    aa6a:	51 f0       	breq	.+20     	; 0xaa80 <init_enemy_shot+0xae>
		{
			game.enemies[i].shot[j].hit_count = CRITICAL_SHOT_DAMAGE;
    aa6c:	8a e0       	ldi	r24, 0x0A	; 10
    aa6e:	88 83       	st	Y, r24
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    aa70:	88 e2       	ldi	r24, 0x28	; 40
    aa72:	91 e3       	ldi	r25, 0x31	; 49
    aa74:	90 93 46 10 	sts	0x1046, r25
    aa78:	80 93 45 10 	sts	0x1045, r24
			game.enemies[i].shot[j].shot_speed = MEDIUM_SHOT_SPEED;
    aa7c:	84 e6       	ldi	r24, 0x64	; 100
    aa7e:	08 c0       	rjmp	.+16     	; 0xaa90 <init_enemy_shot+0xbe>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    aa80:	fc 01       	movw	r30, r24
    aa82:	eb 5d       	subi	r30, 0xDB	; 219
    aa84:	fe 4f       	sbci	r31, 0xFE	; 254
    aa86:	20 81       	ld	r18, Z
    aa88:	3a 96       	adiw	r30, 0x0a	; 10
    aa8a:	24 30       	cpi	r18, 0x04	; 4
    aa8c:	19 f4       	brne	.+6      	; 0xaa94 <init_enemy_shot+0xc2>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    aa8e:	82 ee       	ldi	r24, 0xE2	; 226
    aa90:	80 83       	st	Z, r24
    aa92:	05 c0       	rjmp	.+10     	; 0xaa9e <init_enemy_shot+0xcc>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    aa94:	25 30       	cpi	r18, 0x05	; 5
    aa96:	11 f4       	brne	.+4      	; 0xaa9c <init_enemy_shot+0xca>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    aa98:	8a e0       	ldi	r24, 0x0A	; 10
    aa9a:	fa cf       	rjmp	.-12     	; 0xaa90 <init_enemy_shot+0xbe>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    aa9c:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    aa9e:	25 e3       	ldi	r18, 0x35	; 53
    aaa0:	2a 9f       	mul	r18, r26
    aaa2:	c0 01       	movw	r24, r0
    aaa4:	2b 9f       	mul	r18, r27
    aaa6:	90 0d       	add	r25, r0
    aaa8:	11 24       	eor	r1, r1
    aaaa:	89 54       	subi	r24, 0x49	; 73
    aaac:	92 4f       	sbci	r25, 0xF2	; 242
    aaae:	fc 01       	movw	r30, r24
    aab0:	e2 5d       	subi	r30, 0xD2	; 210
    aab2:	fe 4f       	sbci	r31, 0xFE	; 254
    aab4:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    aab6:	34 97       	sbiw	r30, 0x04	; 4
    aab8:	71 83       	std	Z+1, r23	; 0x01
    aaba:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    aabc:	32 96       	adiw	r30, 0x02	; 2
    aabe:	51 83       	std	Z+1, r21	; 0x01
    aac0:	40 83       	st	Z, r20
	}
}
    aac2:	df 91       	pop	r29
    aac4:	cf 91       	pop	r28
    aac6:	1f 91       	pop	r17
    aac8:	0f 91       	pop	r16
    aaca:	08 95       	ret

0000aacc <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    aacc:	95 e3       	ldi	r25, 0x35	; 53
    aace:	89 9f       	mul	r24, r25
    aad0:	90 01       	movw	r18, r0
    aad2:	11 24       	eor	r1, r1
    aad4:	29 54       	subi	r18, 0x49	; 73
    aad6:	32 4f       	sbci	r19, 0xF2	; 242
    aad8:	f9 01       	movw	r30, r18
    aada:	e0 5e       	subi	r30, 0xE0	; 224
    aadc:	fe 4f       	sbci	r31, 0xFE	; 254
    aade:	91 e0       	ldi	r25, 0x01	; 1
    aae0:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aae2:	32 96       	adiw	r30, 0x02	; 2
    aae4:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    aae6:	31 97       	sbiw	r30, 0x01	; 1
    aae8:	a8 e0       	ldi	r26, 0x08	; 8
    aaea:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    aaec:	32 96       	adiw	r30, 0x02	; 2
    aaee:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aaf0:	31 96       	adiw	r30, 0x01	; 1
    aaf2:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    aaf4:	31 96       	adiw	r30, 0x01	; 1
    aaf6:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    aaf8:	31 96       	adiw	r30, 0x01	; 1
    aafa:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aafc:	31 96       	adiw	r30, 0x01	; 1
    aafe:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    ab00:	32 96       	adiw	r30, 0x02	; 2
    ab02:	92 e0       	ldi	r25, 0x02	; 2
    ab04:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    ab06:	76 96       	adiw	r30, 0x16	; 22
    ab08:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    ab0a:	31 96       	adiw	r30, 0x01	; 1
    ab0c:	9a e0       	ldi	r25, 0x0A	; 10
    ab0e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    ab10:	d9 01       	movw	r26, r18
    ab12:	ac 5b       	subi	r26, 0xBC	; 188
    ab14:	be 4f       	sbci	r27, 0xFE	; 254
    ab16:	ef ed       	ldi	r30, 0xDF	; 223
    ab18:	ff e0       	ldi	r31, 0x0F	; 15
    ab1a:	ed 93       	st	X+, r30
    ab1c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    ab1e:	ad e3       	ldi	r26, 0x3D	; 61
    ab20:	b1 e3       	ldi	r27, 0x31	; 49
    ab22:	b1 83       	std	Z+1, r27	; 0x01
    ab24:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    ab26:	aa e3       	ldi	r26, 0x3A	; 58
    ab28:	b1 e3       	ldi	r27, 0x31	; 49
    ab2a:	b3 83       	std	Z+3, r27	; 0x03
    ab2c:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    ab2e:	f9 01       	movw	r30, r18
    ab30:	e1 5e       	subi	r30, 0xE1	; 225
    ab32:	fe 4f       	sbci	r31, 0xFE	; 254
    ab34:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ab36:	31 97       	sbiw	r30, 0x01	; 1
    ab38:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ab3a:	31 97       	sbiw	r30, 0x01	; 1
    ab3c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab3e:	34 97       	sbiw	r30, 0x04	; 4
    ab40:	71 83       	std	Z+1, r23	; 0x01
    ab42:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab44:	32 96       	adiw	r30, 0x02	; 2
    ab46:	51 83       	std	Z+1, r21	; 0x01
    ab48:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ab4a:	20 e0       	ldi	r18, 0x00	; 0
    ab4c:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <init_enemy_shot>

0000ab50 <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ab50:	95 e3       	ldi	r25, 0x35	; 53
    ab52:	89 9f       	mul	r24, r25
    ab54:	90 01       	movw	r18, r0
    ab56:	11 24       	eor	r1, r1
    ab58:	29 54       	subi	r18, 0x49	; 73
    ab5a:	32 4f       	sbci	r19, 0xF2	; 242
    ab5c:	f9 01       	movw	r30, r18
    ab5e:	ef 5d       	subi	r30, 0xDF	; 223
    ab60:	fe 4f       	sbci	r31, 0xFE	; 254
    ab62:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ab64:	31 97       	sbiw	r30, 0x01	; 1
    ab66:	91 e0       	ldi	r25, 0x01	; 1
    ab68:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ab6a:	32 96       	adiw	r30, 0x02	; 2
    ab6c:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ab6e:	31 96       	adiw	r30, 0x01	; 1
    ab70:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ab72:	31 96       	adiw	r30, 0x01	; 1
    ab74:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    ab76:	31 96       	adiw	r30, 0x01	; 1
    ab78:	a3 e0       	ldi	r26, 0x03	; 3
    ab7a:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ab7c:	31 96       	adiw	r30, 0x01	; 1
    ab7e:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ab80:	31 96       	adiw	r30, 0x01	; 1
    ab82:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    ab84:	32 96       	adiw	r30, 0x02	; 2
    ab86:	a2 e0       	ldi	r26, 0x02	; 2
    ab88:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ab8a:	76 96       	adiw	r30, 0x16	; 22
    ab8c:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ab8e:	31 96       	adiw	r30, 0x01	; 1
    ab90:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ab92:	d9 01       	movw	r26, r18
    ab94:	ac 5b       	subi	r26, 0xBC	; 188
    ab96:	be 4f       	sbci	r27, 0xFE	; 254
    ab98:	e5 e3       	ldi	r30, 0x35	; 53
    ab9a:	f0 e1       	ldi	r31, 0x10	; 16
    ab9c:	ed 93       	st	X+, r30
    ab9e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    aba0:	a4 e3       	ldi	r26, 0x34	; 52
    aba2:	b1 e3       	ldi	r27, 0x31	; 49
    aba4:	b1 83       	std	Z+1, r27	; 0x01
    aba6:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aba8:	f9 01       	movw	r30, r18
    abaa:	e1 5e       	subi	r30, 0xE1	; 225
    abac:	fe 4f       	sbci	r31, 0xFE	; 254
    abae:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    abb0:	31 97       	sbiw	r30, 0x01	; 1
    abb2:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    abb4:	31 97       	sbiw	r30, 0x01	; 1
    abb6:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    abb8:	34 97       	sbiw	r30, 0x04	; 4
    abba:	71 83       	std	Z+1, r23	; 0x01
    abbc:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    abbe:	32 96       	adiw	r30, 0x02	; 2
    abc0:	51 83       	std	Z+1, r21	; 0x01
    abc2:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    abc4:	20 e0       	ldi	r18, 0x00	; 0
    abc6:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <init_enemy_shot>

0000abca <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    abca:	95 e3       	ldi	r25, 0x35	; 53
    abcc:	89 9f       	mul	r24, r25
    abce:	90 01       	movw	r18, r0
    abd0:	11 24       	eor	r1, r1
    abd2:	29 54       	subi	r18, 0x49	; 73
    abd4:	32 4f       	sbci	r19, 0xF2	; 242
    abd6:	f9 01       	movw	r30, r18
    abd8:	ef 5d       	subi	r30, 0xDF	; 223
    abda:	fe 4f       	sbci	r31, 0xFE	; 254
    abdc:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    abde:	31 97       	sbiw	r30, 0x01	; 1
    abe0:	91 e0       	ldi	r25, 0x01	; 1
    abe2:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    abe4:	32 96       	adiw	r30, 0x02	; 2
    abe6:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    abe8:	31 96       	adiw	r30, 0x01	; 1
    abea:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    abec:	31 96       	adiw	r30, 0x01	; 1
    abee:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    abf0:	31 96       	adiw	r30, 0x01	; 1
    abf2:	a4 e0       	ldi	r26, 0x04	; 4
    abf4:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    abf6:	31 96       	adiw	r30, 0x01	; 1
    abf8:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    abfa:	31 96       	adiw	r30, 0x01	; 1
    abfc:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    abfe:	32 96       	adiw	r30, 0x02	; 2
    ac00:	a2 e0       	ldi	r26, 0x02	; 2
    ac02:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ac04:	76 96       	adiw	r30, 0x16	; 22
    ac06:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ac08:	31 96       	adiw	r30, 0x01	; 1
    ac0a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    ac0c:	d9 01       	movw	r26, r18
    ac0e:	ac 5b       	subi	r26, 0xBC	; 188
    ac10:	be 4f       	sbci	r27, 0xFE	; 254
    ac12:	e9 e4       	ldi	r30, 0x49	; 73
    ac14:	f0 e1       	ldi	r31, 0x10	; 16
    ac16:	ed 93       	st	X+, r30
    ac18:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    ac1a:	a1 e3       	ldi	r26, 0x31	; 49
    ac1c:	b1 e3       	ldi	r27, 0x31	; 49
    ac1e:	b1 83       	std	Z+1, r27	; 0x01
    ac20:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ac22:	f9 01       	movw	r30, r18
    ac24:	e1 5e       	subi	r30, 0xE1	; 225
    ac26:	fe 4f       	sbci	r31, 0xFE	; 254
    ac28:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    ac2a:	31 97       	sbiw	r30, 0x01	; 1
    ac2c:	92 ee       	ldi	r25, 0xE2	; 226
    ac2e:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ac30:	31 97       	sbiw	r30, 0x01	; 1
    ac32:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ac34:	34 97       	sbiw	r30, 0x04	; 4
    ac36:	71 83       	std	Z+1, r23	; 0x01
    ac38:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac3a:	32 96       	adiw	r30, 0x02	; 2
    ac3c:	51 83       	std	Z+1, r21	; 0x01
    ac3e:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ac40:	20 e0       	ldi	r18, 0x00	; 0
    ac42:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <init_enemy_shot>

0000ac46 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ac46:	95 e3       	ldi	r25, 0x35	; 53
    ac48:	89 9f       	mul	r24, r25
    ac4a:	90 01       	movw	r18, r0
    ac4c:	11 24       	eor	r1, r1
    ac4e:	29 54       	subi	r18, 0x49	; 73
    ac50:	32 4f       	sbci	r19, 0xF2	; 242
    ac52:	f9 01       	movw	r30, r18
    ac54:	ef 5d       	subi	r30, 0xDF	; 223
    ac56:	fe 4f       	sbci	r31, 0xFE	; 254
    ac58:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ac5a:	31 97       	sbiw	r30, 0x01	; 1
    ac5c:	91 e0       	ldi	r25, 0x01	; 1
    ac5e:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ac60:	33 96       	adiw	r30, 0x03	; 3
    ac62:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ac64:	31 96       	adiw	r30, 0x01	; 1
    ac66:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    ac68:	31 96       	adiw	r30, 0x01	; 1
    ac6a:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    ac6c:	31 96       	adiw	r30, 0x01	; 1
    ac6e:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ac70:	31 96       	adiw	r30, 0x01	; 1
    ac72:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    ac74:	32 96       	adiw	r30, 0x02	; 2
    ac76:	a4 e0       	ldi	r26, 0x04	; 4
    ac78:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ac7a:	76 96       	adiw	r30, 0x16	; 22
    ac7c:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ac7e:	31 96       	adiw	r30, 0x01	; 1
    ac80:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    ac82:	d9 01       	movw	r26, r18
    ac84:	ac 5b       	subi	r26, 0xBC	; 188
    ac86:	be 4f       	sbci	r27, 0xFE	; 254
    ac88:	e3 ee       	ldi	r30, 0xE3	; 227
    ac8a:	ff e0       	ldi	r31, 0x0F	; 15
    ac8c:	ed 93       	st	X+, r30
    ac8e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    ac90:	a3 e4       	ldi	r26, 0x43	; 67
    ac92:	b1 e3       	ldi	r27, 0x31	; 49
    ac94:	b1 83       	std	Z+1, r27	; 0x01
    ac96:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ac98:	f9 01       	movw	r30, r18
    ac9a:	e1 5e       	subi	r30, 0xE1	; 225
    ac9c:	fe 4f       	sbci	r31, 0xFE	; 254
    ac9e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    aca0:	31 97       	sbiw	r30, 0x01	; 1
    aca2:	9e e1       	ldi	r25, 0x1E	; 30
    aca4:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    aca6:	31 97       	sbiw	r30, 0x01	; 1
    aca8:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    acaa:	34 97       	sbiw	r30, 0x04	; 4
    acac:	71 83       	std	Z+1, r23	; 0x01
    acae:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    acb0:	32 96       	adiw	r30, 0x02	; 2
    acb2:	51 83       	std	Z+1, r21	; 0x01
    acb4:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    acb6:	20 e0       	ldi	r18, 0x00	; 0
    acb8:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <init_enemy_shot>

0000acbc <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    acbc:	95 e3       	ldi	r25, 0x35	; 53
    acbe:	89 9f       	mul	r24, r25
    acc0:	90 01       	movw	r18, r0
    acc2:	11 24       	eor	r1, r1
    acc4:	29 54       	subi	r18, 0x49	; 73
    acc6:	32 4f       	sbci	r19, 0xF2	; 242
    acc8:	f9 01       	movw	r30, r18
    acca:	ef 5d       	subi	r30, 0xDF	; 223
    accc:	fe 4f       	sbci	r31, 0xFE	; 254
    acce:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    acd0:	31 97       	sbiw	r30, 0x01	; 1
    acd2:	91 e0       	ldi	r25, 0x01	; 1
    acd4:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    acd6:	33 96       	adiw	r30, 0x03	; 3
    acd8:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    acda:	31 96       	adiw	r30, 0x01	; 1
    acdc:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    acde:	31 96       	adiw	r30, 0x01	; 1
    ace0:	a5 e0       	ldi	r26, 0x05	; 5
    ace2:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ace4:	31 96       	adiw	r30, 0x01	; 1
    ace6:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ace8:	31 96       	adiw	r30, 0x01	; 1
    acea:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    acec:	32 96       	adiw	r30, 0x02	; 2
    acee:	a4 e0       	ldi	r26, 0x04	; 4
    acf0:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    acf2:	76 96       	adiw	r30, 0x16	; 22
    acf4:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    acf6:	31 96       	adiw	r30, 0x01	; 1
    acf8:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    acfa:	d9 01       	movw	r26, r18
    acfc:	ac 5b       	subi	r26, 0xBC	; 188
    acfe:	be 4f       	sbci	r27, 0xFE	; 254
    ad00:	e7 e4       	ldi	r30, 0x47	; 71
    ad02:	f0 e1       	ldi	r31, 0x10	; 16
    ad04:	ed 93       	st	X+, r30
    ad06:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    ad08:	a7 e3       	ldi	r26, 0x37	; 55
    ad0a:	b1 e3       	ldi	r27, 0x31	; 49
    ad0c:	b1 83       	std	Z+1, r27	; 0x01
    ad0e:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ad10:	f9 01       	movw	r30, r18
    ad12:	e1 5e       	subi	r30, 0xE1	; 225
    ad14:	fe 4f       	sbci	r31, 0xFE	; 254
    ad16:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    ad18:	31 97       	sbiw	r30, 0x01	; 1
    ad1a:	9a e0       	ldi	r25, 0x0A	; 10
    ad1c:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ad1e:	31 97       	sbiw	r30, 0x01	; 1
    ad20:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ad22:	34 97       	sbiw	r30, 0x04	; 4
    ad24:	71 83       	std	Z+1, r23	; 0x01
    ad26:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad28:	32 96       	adiw	r30, 0x02	; 2
    ad2a:	51 83       	std	Z+1, r21	; 0x01
    ad2c:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ad2e:	20 e0       	ldi	r18, 0x00	; 0
    ad30:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <init_enemy_shot>

0000ad34 <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ad34:	95 e3       	ldi	r25, 0x35	; 53
    ad36:	89 9f       	mul	r24, r25
    ad38:	90 01       	movw	r18, r0
    ad3a:	11 24       	eor	r1, r1
    ad3c:	29 54       	subi	r18, 0x49	; 73
    ad3e:	32 4f       	sbci	r19, 0xF2	; 242
    ad40:	f9 01       	movw	r30, r18
    ad42:	ef 5d       	subi	r30, 0xDF	; 223
    ad44:	fe 4f       	sbci	r31, 0xFE	; 254
    ad46:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ad48:	31 97       	sbiw	r30, 0x01	; 1
    ad4a:	91 e0       	ldi	r25, 0x01	; 1
    ad4c:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ad4e:	33 96       	adiw	r30, 0x03	; 3
    ad50:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ad52:	31 96       	adiw	r30, 0x01	; 1
    ad54:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    ad56:	31 96       	adiw	r30, 0x01	; 1
    ad58:	a8 e0       	ldi	r26, 0x08	; 8
    ad5a:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ad5c:	31 96       	adiw	r30, 0x01	; 1
    ad5e:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ad60:	31 96       	adiw	r30, 0x01	; 1
    ad62:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    ad64:	32 96       	adiw	r30, 0x02	; 2
    ad66:	a4 e0       	ldi	r26, 0x04	; 4
    ad68:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ad6a:	76 96       	adiw	r30, 0x16	; 22
    ad6c:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ad6e:	31 96       	adiw	r30, 0x01	; 1
    ad70:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    ad72:	d9 01       	movw	r26, r18
    ad74:	ac 5b       	subi	r26, 0xBC	; 188
    ad76:	be 4f       	sbci	r27, 0xFE	; 254
    ad78:	e9 e5       	ldi	r30, 0x59	; 89
    ad7a:	f0 e1       	ldi	r31, 0x10	; 16
    ad7c:	ed 93       	st	X+, r30
    ad7e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    ad80:	a0 e4       	ldi	r26, 0x40	; 64
    ad82:	b1 e3       	ldi	r27, 0x31	; 49
    ad84:	b1 83       	std	Z+1, r27	; 0x01
    ad86:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ad88:	f9 01       	movw	r30, r18
    ad8a:	e1 5e       	subi	r30, 0xE1	; 225
    ad8c:	fe 4f       	sbci	r31, 0xFE	; 254
    ad8e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    ad90:	31 97       	sbiw	r30, 0x01	; 1
    ad92:	94 e1       	ldi	r25, 0x14	; 20
    ad94:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    ad96:	31 97       	sbiw	r30, 0x01	; 1
    ad98:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    ad9a:	34 97       	sbiw	r30, 0x04	; 4
    ad9c:	71 83       	std	Z+1, r23	; 0x01
    ad9e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ada0:	32 96       	adiw	r30, 0x02	; 2
    ada2:	51 83       	std	Z+1, r21	; 0x01
    ada4:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ada6:	20 e0       	ldi	r18, 0x00	; 0
    ada8:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <init_enemy_shot>

0000adac <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    adac:	95 e3       	ldi	r25, 0x35	; 53
    adae:	89 9f       	mul	r24, r25
    adb0:	90 01       	movw	r18, r0
    adb2:	11 24       	eor	r1, r1
    adb4:	29 54       	subi	r18, 0x49	; 73
    adb6:	32 4f       	sbci	r19, 0xF2	; 242
    adb8:	f9 01       	movw	r30, r18
    adba:	ef 5d       	subi	r30, 0xDF	; 223
    adbc:	fe 4f       	sbci	r31, 0xFE	; 254
    adbe:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    adc0:	31 97       	sbiw	r30, 0x01	; 1
    adc2:	91 e0       	ldi	r25, 0x01	; 1
    adc4:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    adc6:	32 96       	adiw	r30, 0x02	; 2
    adc8:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    adca:	31 96       	adiw	r30, 0x01	; 1
    adcc:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    adce:	31 96       	adiw	r30, 0x01	; 1
    add0:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    add2:	31 96       	adiw	r30, 0x01	; 1
    add4:	a6 e0       	ldi	r26, 0x06	; 6
    add6:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    add8:	31 96       	adiw	r30, 0x01	; 1
    adda:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    addc:	31 96       	adiw	r30, 0x01	; 1
    adde:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    ade0:	32 96       	adiw	r30, 0x02	; 2
    ade2:	a8 e0       	ldi	r26, 0x08	; 8
    ade4:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ade6:	76 96       	adiw	r30, 0x16	; 22
    ade8:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    adea:	31 96       	adiw	r30, 0x01	; 1
    adec:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    adee:	d9 01       	movw	r26, r18
    adf0:	ac 5b       	subi	r26, 0xBC	; 188
    adf2:	be 4f       	sbci	r27, 0xFE	; 254
    adf4:	e5 e3       	ldi	r30, 0x35	; 53
    adf6:	f0 e1       	ldi	r31, 0x10	; 16
    adf8:	ed 93       	st	X+, r30
    adfa:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    adfc:	ae e2       	ldi	r26, 0x2E	; 46
    adfe:	b1 e3       	ldi	r27, 0x31	; 49
    ae00:	b1 83       	std	Z+1, r27	; 0x01
    ae02:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ae04:	f9 01       	movw	r30, r18
    ae06:	e1 5e       	subi	r30, 0xE1	; 225
    ae08:	fe 4f       	sbci	r31, 0xFE	; 254
    ae0a:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ae0c:	31 97       	sbiw	r30, 0x01	; 1
    ae0e:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ae10:	31 97       	sbiw	r30, 0x01	; 1
    ae12:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ae14:	34 97       	sbiw	r30, 0x04	; 4
    ae16:	71 83       	std	Z+1, r23	; 0x01
    ae18:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ae1a:	32 96       	adiw	r30, 0x02	; 2
    ae1c:	51 83       	std	Z+1, r21	; 0x01
    ae1e:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    ae20:	21 e0       	ldi	r18, 0x01	; 1
    ae22:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <init_enemy_shot>

0000ae26 <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    ae26:	cf 93       	push	r28
    ae28:	df 93       	push	r29
    ae2a:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    ae2c:	95 e3       	ldi	r25, 0x35	; 53
    ae2e:	89 9f       	mul	r24, r25
    ae30:	90 01       	movw	r18, r0
    ae32:	11 24       	eor	r1, r1
    ae34:	29 54       	subi	r18, 0x49	; 73
    ae36:	32 4f       	sbci	r19, 0xF2	; 242
    ae38:	f9 01       	movw	r30, r18
    ae3a:	ef 5d       	subi	r30, 0xDF	; 223
    ae3c:	fe 4f       	sbci	r31, 0xFE	; 254
    ae3e:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ae40:	31 97       	sbiw	r30, 0x01	; 1
    ae42:	91 e0       	ldi	r25, 0x01	; 1
    ae44:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ae46:	32 96       	adiw	r30, 0x02	; 2
    ae48:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ae4a:	31 96       	adiw	r30, 0x01	; 1
    ae4c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ae4e:	31 96       	adiw	r30, 0x01	; 1
    ae50:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    ae52:	31 96       	adiw	r30, 0x01	; 1
    ae54:	47 e0       	ldi	r20, 0x07	; 7
    ae56:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    ae58:	31 96       	adiw	r30, 0x01	; 1
    ae5a:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ae5c:	31 96       	adiw	r30, 0x01	; 1
    ae5e:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    ae60:	32 96       	adiw	r30, 0x02	; 2
    ae62:	48 e0       	ldi	r20, 0x08	; 8
    ae64:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    ae66:	76 96       	adiw	r30, 0x16	; 22
    ae68:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ae6a:	31 96       	adiw	r30, 0x01	; 1
    ae6c:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ae6e:	d9 01       	movw	r26, r18
    ae70:	ac 5b       	subi	r26, 0xBC	; 188
    ae72:	be 4f       	sbci	r27, 0xFE	; 254
    ae74:	e5 e3       	ldi	r30, 0x35	; 53
    ae76:	f0 e1       	ldi	r31, 0x10	; 16
    ae78:	ed 93       	st	X+, r30
    ae7a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    ae7c:	4b e2       	ldi	r20, 0x2B	; 43
    ae7e:	51 e3       	ldi	r21, 0x31	; 49
    ae80:	51 83       	std	Z+1, r21	; 0x01
    ae82:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    ae84:	f9 01       	movw	r30, r18
    ae86:	e1 5e       	subi	r30, 0xE1	; 225
    ae88:	fe 4f       	sbci	r31, 0xFE	; 254
    ae8a:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ae8c:	31 97       	sbiw	r30, 0x01	; 1
    ae8e:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ae90:	31 97       	sbiw	r30, 0x01	; 1
    ae92:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ae94:	34 97       	sbiw	r30, 0x04	; 4
    ae96:	71 83       	std	Z+1, r23	; 0x01
    ae98:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ae9a:	32 96       	adiw	r30, 0x02	; 2
    ae9c:	d1 83       	std	Z+1, r29	; 0x01
    ae9e:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    aea0:	21 e0       	ldi	r18, 0x01	; 1
    aea2:	ae 01       	movw	r20, r28
    aea4:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    aea8:	be 01       	movw	r22, r28
    aeaa:	83 e0       	ldi	r24, 0x03	; 3
    aeac:	76 95       	lsr	r23
    aeae:	67 95       	ror	r22
    aeb0:	8a 95       	dec	r24
    aeb2:	e1 f7       	brne	.-8      	; 0xaeac <init_enemy_boss_eye+0x86>
    aeb4:	90 91 d5 0d 	lds	r25, 0x0DD5
    aeb8:	40 e0       	ldi	r20, 0x00	; 0
    aeba:	50 e0       	ldi	r21, 0x00	; 0
    aebc:	80 e2       	ldi	r24, 0x20	; 32
    aebe:	89 1b       	sub	r24, r25
}
    aec0:	df 91       	pop	r29
    aec2:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    aec4:	0c 94 b6 3e 	jmp	0x7d6c	; 0x7d6c <SetTile>

0000aec8 <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    aec8:	40 e2       	ldi	r20, 0x20	; 32
    aeca:	50 e0       	ldi	r21, 0x00	; 0
    aecc:	68 ec       	ldi	r22, 0xC8	; 200
    aece:	77 e0       	ldi	r23, 0x07	; 7
    aed0:	80 e0       	ldi	r24, 0x00	; 0
    aed2:	0e 94 d6 56 	call	0xadac	; 0xadac <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    aed6:	40 e3       	ldi	r20, 0x30	; 48
    aed8:	50 e0       	ldi	r21, 0x00	; 0
    aeda:	68 ec       	ldi	r22, 0xC8	; 200
    aedc:	77 e0       	ldi	r23, 0x07	; 7
    aede:	81 e0       	ldi	r24, 0x01	; 1
    aee0:	0e 94 d6 56 	call	0xadac	; 0xadac <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    aee4:	40 e9       	ldi	r20, 0x90	; 144
    aee6:	50 e0       	ldi	r21, 0x00	; 0
    aee8:	68 ec       	ldi	r22, 0xC8	; 200
    aeea:	77 e0       	ldi	r23, 0x07	; 7
    aeec:	82 e0       	ldi	r24, 0x02	; 2
    aeee:	0e 94 d6 56 	call	0xadac	; 0xadac <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    aef2:	40 ea       	ldi	r20, 0xA0	; 160
    aef4:	50 e0       	ldi	r21, 0x00	; 0
    aef6:	68 ec       	ldi	r22, 0xC8	; 200
    aef8:	77 e0       	ldi	r23, 0x07	; 7
    aefa:	83 e0       	ldi	r24, 0x03	; 3
    aefc:	0e 94 d6 56 	call	0xadac	; 0xadac <init_enemy_boss_turret>
	game.active_enemies = 4;
    af00:	84 e0       	ldi	r24, 0x04	; 4
    af02:	80 93 d2 0d 	sts	0x0DD2, r24
    af06:	08 95       	ret

0000af08 <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    af08:	ef 92       	push	r14
    af0a:	ff 92       	push	r15
    af0c:	0f 93       	push	r16
    af0e:	1f 93       	push	r17
    af10:	cf 93       	push	r28
    af12:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    af14:	07 eb       	ldi	r16, 0xB7	; 183
    af16:	1d e0       	ldi	r17, 0x0D	; 13
    af18:	f8 01       	movw	r30, r16
    af1a:	86 8d       	ldd	r24, Z+30	; 0x1e
    af1c:	c0 e0       	ldi	r28, 0x00	; 0
    af1e:	d1 e0       	ldi	r29, 0x01	; 1
    af20:	9e 01       	movw	r18, r28
    af22:	28 1b       	sub	r18, r24
    af24:	31 09       	sbc	r19, r1
    af26:	83 e0       	ldi	r24, 0x03	; 3
    af28:	22 0f       	add	r18, r18
    af2a:	33 1f       	adc	r19, r19
    af2c:	8a 95       	dec	r24
    af2e:	e1 f7       	brne	.-8      	; 0xaf28 <init_enemy_boss_eyes+0x20>
    af30:	80 91 fa 0c 	lds	r24, 0x0CFA
    af34:	65 e0       	ldi	r22, 0x05	; 5
    af36:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    af3a:	89 2f       	mov	r24, r25
    af3c:	48 e5       	ldi	r20, 0x58	; 88
    af3e:	50 e0       	ldi	r21, 0x00	; 0
    af40:	b9 01       	movw	r22, r18
    af42:	0e 94 13 57 	call	0xae26	; 0xae26 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    af46:	f8 01       	movw	r30, r16
    af48:	86 8d       	ldd	r24, Z+30	; 0x1e
    af4a:	9e 01       	movw	r18, r28
    af4c:	28 1b       	sub	r18, r24
    af4e:	31 09       	sbc	r19, r1
    af50:	93 e0       	ldi	r25, 0x03	; 3
    af52:	22 0f       	add	r18, r18
    af54:	33 1f       	adc	r19, r19
    af56:	9a 95       	dec	r25
    af58:	e1 f7       	brne	.-8      	; 0xaf52 <init_enemy_boss_eyes+0x4a>
    af5a:	80 91 fa 0c 	lds	r24, 0x0CFA
    af5e:	90 e0       	ldi	r25, 0x00	; 0
    af60:	01 96       	adiw	r24, 0x01	; 1
    af62:	45 e0       	ldi	r20, 0x05	; 5
    af64:	e4 2e       	mov	r14, r20
    af66:	f1 2c       	mov	r15, r1
    af68:	b7 01       	movw	r22, r14
    af6a:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    af6e:	40 e6       	ldi	r20, 0x60	; 96
    af70:	50 e0       	ldi	r21, 0x00	; 0
    af72:	b9 01       	movw	r22, r18
    af74:	0e 94 13 57 	call	0xae26	; 0xae26 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    af78:	f8 01       	movw	r30, r16
    af7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    af7c:	c8 1b       	sub	r28, r24
    af7e:	d1 09       	sbc	r29, r1
    af80:	53 e0       	ldi	r21, 0x03	; 3
    af82:	cc 0f       	add	r28, r28
    af84:	dd 1f       	adc	r29, r29
    af86:	5a 95       	dec	r21
    af88:	e1 f7       	brne	.-8      	; 0xaf82 <init_enemy_boss_eyes+0x7a>
    af8a:	80 91 fa 0c 	lds	r24, 0x0CFA
    af8e:	90 e0       	ldi	r25, 0x00	; 0
    af90:	02 96       	adiw	r24, 0x02	; 2
    af92:	b7 01       	movw	r22, r14
    af94:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    af98:	48 e6       	ldi	r20, 0x68	; 104
    af9a:	50 e0       	ldi	r21, 0x00	; 0
    af9c:	be 01       	movw	r22, r28
    af9e:	0e 94 13 57 	call	0xae26	; 0xae26 <init_enemy_boss_eye>
	game.active_enemies = 3;
    afa2:	83 e0       	ldi	r24, 0x03	; 3
    afa4:	f8 01       	movw	r30, r16
    afa6:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    afa8:	80 91 fa 0c 	lds	r24, 0x0CFA
    afac:	8d 5f       	subi	r24, 0xFD	; 253
    afae:	80 93 fa 0c 	sts	0x0CFA, r24
}
    afb2:	df 91       	pop	r29
    afb4:	cf 91       	pop	r28
    afb6:	1f 91       	pop	r17
    afb8:	0f 91       	pop	r16
    afba:	ff 90       	pop	r15
    afbc:	ef 90       	pop	r14
    afbe:	08 95       	ret

0000afc0 <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    afc0:	a8 2f       	mov	r26, r24
    afc2:	b0 e0       	ldi	r27, 0x00	; 0
    afc4:	25 e3       	ldi	r18, 0x35	; 53
    afc6:	82 9f       	mul	r24, r18
    afc8:	c0 01       	movw	r24, r0
    afca:	11 24       	eor	r1, r1
    afcc:	89 54       	subi	r24, 0x49	; 73
    afce:	92 4f       	sbci	r25, 0xF2	; 242
    afd0:	fc 01       	movw	r30, r24
    afd2:	e0 5e       	subi	r30, 0xE0	; 224
    afd4:	fe 4f       	sbci	r31, 0xFE	; 254
    afd6:	21 e0       	ldi	r18, 0x01	; 1
    afd8:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    afda:	33 96       	adiw	r30, 0x03	; 3
    afdc:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    afde:	31 96       	adiw	r30, 0x01	; 1
    afe0:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    afe2:	31 96       	adiw	r30, 0x01	; 1
    afe4:	32 e0       	ldi	r19, 0x02	; 2
    afe6:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    afe8:	31 96       	adiw	r30, 0x01	; 1
    afea:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    afec:	31 96       	adiw	r30, 0x01	; 1
    afee:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    aff0:	78 96       	adiw	r30, 0x18	; 24
    aff2:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    aff4:	31 96       	adiw	r30, 0x01	; 1
    aff6:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    aff8:	34 96       	adiw	r30, 0x04	; 4
    affa:	8b e5       	ldi	r24, 0x5B	; 91
    affc:	90 e1       	ldi	r25, 0x10	; 16
    affe:	91 83       	std	Z+1, r25	; 0x01
    b000:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b002:	80 91 cc 0d 	lds	r24, 0x0DCC
    b006:	84 30       	cpi	r24, 0x04	; 4
    b008:	79 f0       	breq	.+30     	; 0xb028 <init_enemy_level_hazard+0x68>
    b00a:	38 f4       	brcc	.+14     	; 0xb01a <init_enemy_level_hazard+0x5a>
    b00c:	88 23       	and	r24, r24
    b00e:	91 f0       	breq	.+36     	; 0xb034 <init_enemy_level_hazard+0x74>
    b010:	82 30       	cpi	r24, 0x02	; 2
    b012:	81 f4       	brne	.+32     	; 0xb034 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b014:	82 e2       	ldi	r24, 0x22	; 34
    b016:	91 e3       	ldi	r25, 0x31	; 49
    b018:	0f c0       	rjmp	.+30     	; 0xb038 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b01a:	86 30       	cpi	r24, 0x06	; 6
    b01c:	41 f0       	breq	.+16     	; 0xb02e <init_enemy_level_hazard+0x6e>
    b01e:	88 30       	cpi	r24, 0x08	; 8
    b020:	49 f4       	brne	.+18     	; 0xb034 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b022:	89 e1       	ldi	r24, 0x19	; 25
    b024:	91 e3       	ldi	r25, 0x31	; 49
    b026:	08 c0       	rjmp	.+16     	; 0xb038 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b028:	8f e1       	ldi	r24, 0x1F	; 31
    b02a:	91 e3       	ldi	r25, 0x31	; 49
    b02c:	05 c0       	rjmp	.+10     	; 0xb038 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b02e:	8c e1       	ldi	r24, 0x1C	; 28
    b030:	91 e3       	ldi	r25, 0x31	; 49
    b032:	02 c0       	rjmp	.+4      	; 0xb038 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b034:	85 e2       	ldi	r24, 0x25	; 37
    b036:	91 e3       	ldi	r25, 0x31	; 49
    b038:	90 93 5c 10 	sts	0x105C, r25
    b03c:	80 93 5b 10 	sts	0x105B, r24
	}
	game.enemies[i].shared.gravity = 0;
    b040:	25 e3       	ldi	r18, 0x35	; 53
    b042:	2a 9f       	mul	r18, r26
    b044:	c0 01       	movw	r24, r0
    b046:	2b 9f       	mul	r18, r27
    b048:	90 0d       	add	r25, r0
    b04a:	11 24       	eor	r1, r1
    b04c:	89 54       	subi	r24, 0x49	; 73
    b04e:	92 4f       	sbci	r25, 0xF2	; 242
    b050:	fc 01       	movw	r30, r24
    b052:	e1 5e       	subi	r30, 0xE1	; 225
    b054:	fe 4f       	sbci	r31, 0xFE	; 254
    b056:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b058:	32 97       	sbiw	r30, 0x02	; 2
    b05a:	2e e1       	ldi	r18, 0x1E	; 30
    b05c:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b05e:	31 96       	adiw	r30, 0x01	; 1
    b060:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b062:	35 97       	sbiw	r30, 0x05	; 5
    b064:	71 83       	std	Z+1, r23	; 0x01
    b066:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b068:	32 96       	adiw	r30, 0x02	; 2
    b06a:	51 83       	std	Z+1, r21	; 0x01
    b06c:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b06e:	3d 96       	adiw	r30, 0x0d	; 13
    b070:	83 e0       	ldi	r24, 0x03	; 3
    b072:	56 95       	lsr	r21
    b074:	47 95       	ror	r20
    b076:	8a 95       	dec	r24
    b078:	e1 f7       	brne	.-8      	; 0xb072 <init_enemy_level_hazard+0xb2>
    b07a:	40 83       	st	Z, r20
    b07c:	08 95       	ret

0000b07e <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b07e:	1f 93       	push	r17
    b080:	cf 93       	push	r28
    b082:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b084:	d0 e0       	ldi	r29, 0x00	; 0
    b086:	10 e2       	ldi	r17, 0x20	; 32
    b088:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b08a:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b08c:	c1 17       	cp	r28, r17
    b08e:	41 f0       	breq	.+16     	; 0xb0a0 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b090:	40 e0       	ldi	r20, 0x00	; 0
    b092:	50 e0       	ldi	r21, 0x00	; 0
    b094:	6c 2f       	mov	r22, r28
    b096:	8d 2f       	mov	r24, r29
    b098:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <SetTile>
    b09c:	cf 5f       	subi	r28, 0xFF	; 255
    b09e:	f6 cf       	rjmp	.-20     	; 0xb08c <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b0a0:	df 5f       	subi	r29, 0xFF	; 255
    b0a2:	dc 31       	cpi	r29, 0x1C	; 28
    b0a4:	91 f7       	brne	.-28     	; 0xb08a <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b0a6:	df 91       	pop	r29
    b0a8:	cf 91       	pop	r28
    b0aa:	1f 91       	pop	r17
    b0ac:	08 95       	ret

0000b0ae <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b0ae:	dc 01       	movw	r26, r24
    b0b0:	e6 2f       	mov	r30, r22
    b0b2:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b0b4:	25 e0       	ldi	r18, 0x05	; 5
    b0b6:	62 2f       	mov	r22, r18
    b0b8:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    b0bc:	58 2f       	mov	r21, r24
    b0be:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b0c0:	40 91 cd 0d 	lds	r20, 0x0DCD
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b0c4:	8e 2f       	mov	r24, r30
    b0c6:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b0ca:	e8 2f       	mov	r30, r24
    b0cc:	f0 e0       	ldi	r31, 0x00	; 0
    b0ce:	54 9f       	mul	r21, r20
    b0d0:	e0 0d       	add	r30, r0
    b0d2:	f1 1d       	adc	r31, r1
    b0d4:	11 24       	eor	r1, r1
    b0d6:	32 96       	adiw	r30, 0x02	; 2
    b0d8:	ea 0f       	add	r30, r26
    b0da:	fb 1f       	adc	r31, r27
    b0dc:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b0de:	e9 2f       	mov	r30, r25
    b0e0:	f0 e0       	ldi	r31, 0x00	; 0
    b0e2:	95 e0       	ldi	r25, 0x05	; 5
    b0e4:	39 9f       	mul	r19, r25
    b0e6:	e0 0d       	add	r30, r0
    b0e8:	f1 1d       	adc	r31, r1
    b0ea:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b0ec:	99 e1       	ldi	r25, 0x19	; 25
    b0ee:	89 9f       	mul	r24, r25
    b0f0:	e0 0d       	add	r30, r0
    b0f2:	f1 1d       	adc	r31, r1
    b0f4:	11 24       	eor	r1, r1
    b0f6:	ea 59       	subi	r30, 0x9A	; 154
    b0f8:	f4 4a       	sbci	r31, 0xA4	; 164
    b0fa:	84 91       	lpm	r24, Z
}
    b0fc:	08 95       	ret

0000b0fe <render_camera_view>:

void render_camera_view()
{
    b0fe:	7f 92       	push	r7
    b100:	8f 92       	push	r8
    b102:	9f 92       	push	r9
    b104:	af 92       	push	r10
    b106:	bf 92       	push	r11
    b108:	cf 92       	push	r12
    b10a:	df 92       	push	r13
    b10c:	ef 92       	push	r14
    b10e:	ff 92       	push	r15
    b110:	0f 93       	push	r16
    b112:	1f 93       	push	r17
    b114:	cf 93       	push	r28
    b116:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b118:	c0 91 b7 0d 	lds	r28, 0x0DB7
    b11c:	d0 91 b8 0d 	lds	r29, 0x0DB8
    b120:	83 e0       	ldi	r24, 0x03	; 3
    b122:	d6 95       	lsr	r29
    b124:	c7 95       	ror	r28
    b126:	8a 95       	dec	r24
    b128:	e1 f7       	brne	.-8      	; 0xb122 <render_camera_view+0x24>
    b12a:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b12c:	00 91 bf 0d 	lds	r16, 0x0DBF
    b130:	06 95       	lsr	r16
    b132:	06 95       	lsr	r16
    b134:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b136:	dd 27       	eor	r29, r29
    b138:	7e 01       	movw	r14, r28
    b13a:	4c e1       	ldi	r20, 0x1C	; 28
    b13c:	e4 0e       	add	r14, r20
    b13e:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b140:	10 e0       	ldi	r17, 0x00	; 0
    b142:	68 01       	movw	r12, r16
    b144:	89 e1       	ldi	r24, 0x19	; 25
    b146:	c8 0e       	add	r12, r24
    b148:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b14a:	9e e1       	ldi	r25, 0x1E	; 30
    b14c:	a9 2e       	mov	r10, r25
    b14e:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b150:	ec 16       	cp	r14, r28
    b152:	fd 06       	cpc	r15, r29
    b154:	70 f1       	brcs	.+92     	; 0xb1b2 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b156:	48 01       	movw	r8, r16
    b158:	c8 14       	cp	r12, r8
    b15a:	d9 04       	cpc	r13, r9
    b15c:	40 f1       	brcs	.+80     	; 0xb1ae <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b15e:	48 2d       	mov	r20, r8
    b160:	6c 2f       	mov	r22, r28
    b162:	80 91 d9 0f 	lds	r24, 0x0FD9
    b166:	90 91 da 0f 	lds	r25, 0x0FDA
    b16a:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b16e:	28 2f       	mov	r18, r24
    b170:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b172:	80 91 b3 0c 	lds	r24, 0x0CB3
    b176:	86 95       	lsr	r24
    b178:	86 95       	lsr	r24
    b17a:	86 95       	lsr	r24
    b17c:	90 e0       	ldi	r25, 0x00	; 0
    b17e:	80 1b       	sub	r24, r16
    b180:	91 0b       	sbc	r25, r17
    b182:	88 0d       	add	r24, r8
    b184:	99 1d       	adc	r25, r9
    b186:	b5 01       	movw	r22, r10
    b188:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <__udivmodhi4>
    b18c:	90 91 b2 0c 	lds	r25, 0x0CB2
    b190:	96 95       	lsr	r25
    b192:	96 95       	lsr	r25
    b194:	96 95       	lsr	r25
    b196:	97 19       	sub	r25, r7
    b198:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b19a:	a9 01       	movw	r20, r18
    b19c:	68 2f       	mov	r22, r24
    b19e:	89 2f       	mov	r24, r25
    b1a0:	8f 71       	andi	r24, 0x1F	; 31
    b1a2:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b1a6:	8f ef       	ldi	r24, 0xFF	; 255
    b1a8:	88 1a       	sub	r8, r24
    b1aa:	98 0a       	sbc	r9, r24
    b1ac:	d5 cf       	rjmp	.-86     	; 0xb158 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b1ae:	21 96       	adiw	r28, 0x01	; 1
    b1b0:	cf cf       	rjmp	.-98     	; 0xb150 <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b1b2:	df 91       	pop	r29
    b1b4:	cf 91       	pop	r28
    b1b6:	1f 91       	pop	r17
    b1b8:	0f 91       	pop	r16
    b1ba:	ff 90       	pop	r15
    b1bc:	ef 90       	pop	r14
    b1be:	df 90       	pop	r13
    b1c0:	cf 90       	pop	r12
    b1c2:	bf 90       	pop	r11
    b1c4:	af 90       	pop	r10
    b1c6:	9f 90       	pop	r9
    b1c8:	8f 90       	pop	r8
    b1ca:	7f 90       	pop	r7
    b1cc:	08 95       	ret

0000b1ce <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b1ce:	28 2f       	mov	r18, r24
    b1d0:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b1d2:	80 91 cc 0d 	lds	r24, 0x0DCC
    b1d6:	81 11       	cpse	r24, r1
    b1d8:	04 c0       	rjmp	.+8      	; 0xb1e2 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b1da:	bf 01       	movw	r22, r30
    b1dc:	82 2f       	mov	r24, r18
    b1de:	0c 94 a8 55 	jmp	0xab50	; 0xab50 <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b1e2:	82 30       	cpi	r24, 0x02	; 2
    b1e4:	21 f4       	brne	.+8      	; 0xb1ee <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b1e6:	bf 01       	movw	r22, r30
    b1e8:	82 2f       	mov	r24, r18
    b1ea:	0c 94 66 55 	jmp	0xaacc	; 0xaacc <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b1ee:	84 30       	cpi	r24, 0x04	; 4
    b1f0:	31 f4       	brne	.+12     	; 0xb1fe <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b1f2:	48 52       	subi	r20, 0x28	; 40
    b1f4:	51 09       	sbc	r21, r1
    b1f6:	bf 01       	movw	r22, r30
    b1f8:	82 2f       	mov	r24, r18
    b1fa:	0c 94 e5 55 	jmp	0xabca	; 0xabca <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b1fe:	80 91 d1 0d 	lds	r24, 0x0DD1
    b202:	63 e0       	ldi	r22, 0x03	; 3
    b204:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    b208:	99 23       	and	r25, r25
    b20a:	39 f3       	breq	.-50     	; 0xb1da <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b20c:	91 30       	cpi	r25, 0x01	; 1
    b20e:	89 f7       	brne	.-30     	; 0xb1f2 <init_level_enemy+0x24>
    b210:	ea cf       	rjmp	.-44     	; 0xb1e6 <init_level_enemy+0x18>

0000b212 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b212:	28 2f       	mov	r18, r24
    b214:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b216:	80 91 cc 0d 	lds	r24, 0x0DCC
    b21a:	81 30       	cpi	r24, 0x01	; 1
    b21c:	21 f4       	brne	.+8      	; 0xb226 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b21e:	bf 01       	movw	r22, r30
    b220:	82 2f       	mov	r24, r18
    b222:	0c 94 23 56 	jmp	0xac46	; 0xac46 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b226:	83 30       	cpi	r24, 0x03	; 3
    b228:	21 f4       	brne	.+8      	; 0xb232 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b22a:	bf 01       	movw	r22, r30
    b22c:	82 2f       	mov	r24, r18
    b22e:	0c 94 5e 56 	jmp	0xacbc	; 0xacbc <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    b232:	85 30       	cpi	r24, 0x05	; 5
    b234:	21 f4       	brne	.+8      	; 0xb23e <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    b236:	bf 01       	movw	r22, r30
    b238:	82 2f       	mov	r24, r18
    b23a:	0c 94 9a 56 	jmp	0xad34	; 0xad34 <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    b23e:	80 91 d1 0d 	lds	r24, 0x0DD1
    b242:	63 e0       	ldi	r22, 0x03	; 3
    b244:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    b248:	99 23       	and	r25, r25
    b24a:	49 f3       	breq	.-46     	; 0xb21e <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b24c:	91 30       	cpi	r25, 0x01	; 1
    b24e:	99 f7       	brne	.-26     	; 0xb236 <init_space_enemy+0x24>
    b250:	ec cf       	rjmp	.-40     	; 0xb22a <init_space_enemy+0x18>

0000b252 <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b252:	0f 93       	push	r16
    b254:	1f 93       	push	r17
    b256:	cf 93       	push	r28
    b258:	df 93       	push	r29
    b25a:	00 d0       	rcall	.+0      	; 0xb25c <spawn_enemy+0xa>
    b25c:	00 d0       	rcall	.+0      	; 0xb25e <spawn_enemy+0xc>
    b25e:	cd b7       	in	r28, 0x3d	; 61
    b260:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b262:	20 91 b7 0d 	lds	r18, 0x0DB7
    b266:	30 91 b8 0d 	lds	r19, 0x0DB8
    b26a:	28 3c       	cpi	r18, 0xC8	; 200
    b26c:	35 40       	sbci	r19, 0x05	; 5
    b26e:	98 f5       	brcc	.+102    	; 0xb2d6 <spawn_enemy+0x84>
    b270:	27 eb       	ldi	r18, 0xB7	; 183
    b272:	3d e0       	ldi	r19, 0x0D	; 13
    b274:	10 e0       	ldi	r17, 0x00	; 0
    b276:	f9 01       	movw	r30, r18
    b278:	e0 5e       	subi	r30, 0xE0	; 224
    b27a:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b27c:	50 81       	ld	r21, Z
    b27e:	51 11       	cpse	r21, r1
    b280:	25 c0       	rjmp	.+74     	; 0xb2cc <spawn_enemy+0x7a>
    b282:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b284:	50 81       	ld	r21, Z
    b286:	51 11       	cpse	r21, r1
    b288:	21 c0       	rjmp	.+66     	; 0xb2cc <spawn_enemy+0x7a>
    b28a:	04 2f       	mov	r16, r20
    b28c:	ab 01       	movw	r20, r22
    b28e:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b290:	4b 83       	std	Y+3, r20	; 0x03
    b292:	5c 83       	std	Y+4, r21	; 0x04
    b294:	89 83       	std	Y+1, r24	; 0x01
    b296:	7a 83       	std	Y+2, r23	; 0x02
    b298:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    b29c:	4b 81       	ldd	r20, Y+3	; 0x03
    b29e:	5c 81       	ldd	r21, Y+4	; 0x04
    b2a0:	69 81       	ldd	r22, Y+1	; 0x01
    b2a2:	7a 81       	ldd	r23, Y+2	; 0x02
    b2a4:	88 23       	and	r24, r24
    b2a6:	21 f0       	breq	.+8      	; 0xb2b0 <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b2a8:	81 2f       	mov	r24, r17
    b2aa:	0e 94 09 59 	call	0xb212	; 0xb212 <init_space_enemy>
    b2ae:	08 c0       	rjmp	.+16     	; 0xb2c0 <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b2b0:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b2b2:	01 11       	cpse	r16, r1
    b2b4:	03 c0       	rjmp	.+6      	; 0xb2bc <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b2b6:	0e 94 e7 58 	call	0xb1ce	; 0xb1ce <init_level_enemy>
    b2ba:	02 c0       	rjmp	.+4      	; 0xb2c0 <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b2bc:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b2c0:	80 91 d2 0d 	lds	r24, 0x0DD2
    b2c4:	8f 5f       	subi	r24, 0xFF	; 255
    b2c6:	80 93 d2 0d 	sts	0x0DD2, r24
    b2ca:	05 c0       	rjmp	.+10     	; 0xb2d6 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b2cc:	1f 5f       	subi	r17, 0xFF	; 255
    b2ce:	2b 5c       	subi	r18, 0xCB	; 203
    b2d0:	3f 4f       	sbci	r19, 0xFF	; 255
    b2d2:	15 30       	cpi	r17, 0x05	; 5
    b2d4:	81 f6       	brne	.-96     	; 0xb276 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b2d6:	0f 90       	pop	r0
    b2d8:	0f 90       	pop	r0
    b2da:	0f 90       	pop	r0
    b2dc:	0f 90       	pop	r0
    b2de:	df 91       	pop	r29
    b2e0:	cf 91       	pop	r28
    b2e2:	1f 91       	pop	r17
    b2e4:	0f 91       	pop	r16
    b2e6:	08 95       	ret

0000b2e8 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b2e8:	9f ef       	ldi	r25, 0xFF	; 255
    b2ea:	98 0f       	add	r25, r24
    b2ec:	9e 30       	cpi	r25, 0x0E	; 14
    b2ee:	28 f0       	brcs	.+10     	; 0xb2fa <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    b2f0:	8f 50       	subi	r24, 0x0F	; 15
    b2f2:	8c 30       	cpi	r24, 0x0C	; 12
    b2f4:	20 f0       	brcs	.+8      	; 0xb2fe <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b2f6:	80 e0       	ldi	r24, 0x00	; 0
    b2f8:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b2fa:	81 e0       	ldi	r24, 0x01	; 1
    b2fc:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    b2fe:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b300:	08 95       	ret

0000b302 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b302:	af 92       	push	r10
    b304:	bf 92       	push	r11
    b306:	cf 92       	push	r12
    b308:	df 92       	push	r13
    b30a:	ef 92       	push	r14
    b30c:	ff 92       	push	r15
    b30e:	0f 93       	push	r16
    b310:	1f 93       	push	r17
    b312:	cf 93       	push	r28
    b314:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b316:	66 e1       	ldi	r22, 0x16	; 22
    b318:	82 e0       	ldi	r24, 0x02	; 2
    b31a:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <LBRandom>
    b31e:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b320:	80 91 c8 0d 	lds	r24, 0x0DC8
    b324:	8f 5f       	subi	r24, 0xFF	; 255
    b326:	80 93 c8 0d 	sts	0x0DC8, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b32a:	20 91 d3 0d 	lds	r18, 0x0DD3
    b32e:	62 2f       	mov	r22, r18
    b330:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    b334:	89 2f       	mov	r24, r25
    b336:	90 e0       	ldi	r25, 0x00	; 0
    b338:	30 e0       	ldi	r19, 0x00	; 0
    b33a:	21 50       	subi	r18, 0x01	; 1
    b33c:	31 09       	sbc	r19, r1
    b33e:	82 17       	cp	r24, r18
    b340:	93 07       	cpc	r25, r19
    b342:	31 f4       	brne	.+12     	; 0xb350 <append_tile_column+0x4e>
    b344:	bb 24       	eor	r11, r11
    b346:	b3 94       	inc	r11
    b348:	80 91 d2 0d 	lds	r24, 0x0DD2
    b34c:	85 30       	cpi	r24, 0x05	; 5
    b34e:	08 f0       	brcs	.+2      	; 0xb352 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b350:	b1 2c       	mov	r11, r1
    b352:	00 e0       	ldi	r16, 0x00	; 0
    b354:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b356:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    b358:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b35a:	2e e1       	ldi	r18, 0x1E	; 30
    b35c:	c2 2e       	mov	r12, r18
    b35e:	d1 2c       	mov	r13, r1
    b360:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b362:	40 91 bf 0d 	lds	r20, 0x0DBF
    b366:	46 95       	lsr	r20
    b368:	46 95       	lsr	r20
    b36a:	46 95       	lsr	r20
    b36c:	40 0f       	add	r20, r16
    b36e:	60 91 c0 0d 	lds	r22, 0x0DC0
    b372:	80 91 d9 0f 	lds	r24, 0x0FD9
    b376:	90 91 da 0f 	lds	r25, 0x0FDA
    b37a:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    b37e:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b380:	28 2f       	mov	r18, r24
    b382:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b384:	80 91 b3 0c 	lds	r24, 0x0CB3
    b388:	86 95       	lsr	r24
    b38a:	86 95       	lsr	r24
    b38c:	86 95       	lsr	r24
    b38e:	a8 01       	movw	r20, r16
    b390:	48 0f       	add	r20, r24
    b392:	51 1d       	adc	r21, r1
    b394:	ca 01       	movw	r24, r20
    b396:	b6 01       	movw	r22, r12
    b398:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b39c:	a9 01       	movw	r20, r18
    b39e:	68 2f       	mov	r22, r24
    b3a0:	80 91 c4 0d 	lds	r24, 0x0DC4
    b3a4:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b3a8:	bb 20       	and	r11, r11
    b3aa:	81 f0       	breq	.+32     	; 0xb3cc <append_tile_column+0xca>
    b3ac:	01 15       	cp	r16, r1
    b3ae:	11 05       	cpc	r17, r1
    b3b0:	69 f0       	breq	.+26     	; 0xb3cc <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b3b2:	81 ef       	ldi	r24, 0xF1	; 241
    b3b4:	8e 0d       	add	r24, r14
    b3b6:	85 30       	cpi	r24, 0x05	; 5
    b3b8:	30 f0       	brcs	.+12     	; 0xb3c6 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b3ba:	8f ef       	ldi	r24, 0xFF	; 255
    b3bc:	8e 0d       	add	r24, r14
    b3be:	8e 30       	cpi	r24, 0x0E	; 14
    b3c0:	08 f4       	brcc	.+2      	; 0xb3c4 <append_tile_column+0xc2>
    b3c2:	60 c0       	rjmp	.+192    	; 0xb484 <append_tile_column+0x182>
    b3c4:	03 c0       	rjmp	.+6      	; 0xb3cc <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b3c6:	c1 11       	cpse	r28, r1
    b3c8:	f8 cf       	rjmp	.-16     	; 0xb3ba <append_tile_column+0xb8>
    b3ca:	c0 2f       	mov	r28, r16
    b3cc:	0f 5f       	subi	r16, 0xFF	; 255
    b3ce:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b3d0:	09 31       	cpi	r16, 0x19	; 25
    b3d2:	11 05       	cpc	r17, r1
    b3d4:	29 f6       	brne	.-118    	; 0xb360 <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b3d6:	bb 20       	and	r11, r11
    b3d8:	51 f0       	breq	.+20     	; 0xb3ee <append_tile_column+0xec>
    b3da:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    b3de:	88 23       	and	r24, r24
    b3e0:	31 f0       	breq	.+12     	; 0xb3ee <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b3e2:	ff 0c       	add	r15, r15
    b3e4:	ff 0c       	add	r15, r15
    b3e6:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b3e8:	6f 2d       	mov	r22, r15
    b3ea:	70 e0       	ldi	r23, 0x00	; 0
    b3ec:	32 c0       	rjmp	.+100    	; 0xb452 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b3ee:	cc 23       	and	r28, r28
    b3f0:	f1 f0       	breq	.+60     	; 0xb42e <append_tile_column+0x12c>
    b3f2:	80 91 cc 0d 	lds	r24, 0x0DCC
    b3f6:	90 91 bf 0d 	lds	r25, 0x0DBF
    b3fa:	20 91 b7 0d 	lds	r18, 0x0DB7
    b3fe:	30 91 b8 0d 	lds	r19, 0x0DB8
    b402:	6c 2f       	mov	r22, r28
    b404:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b406:	96 95       	lsr	r25
    b408:	96 95       	lsr	r25
    b40a:	96 95       	lsr	r25
    b40c:	69 0f       	add	r22, r25
    b40e:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b410:	82 30       	cpi	r24, 0x02	; 2
    b412:	19 f4       	brne	.+6      	; 0xb41a <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b414:	61 50       	subi	r22, 0x01	; 1
    b416:	71 09       	sbc	r23, r1
    b418:	02 c0       	rjmp	.+4      	; 0xb41e <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b41a:	6f 5f       	subi	r22, 0xFF	; 255
    b41c:	7f 4f       	sbci	r23, 0xFF	; 255
    b41e:	93 e0       	ldi	r25, 0x03	; 3
    b420:	66 0f       	add	r22, r22
    b422:	77 1f       	adc	r23, r23
    b424:	9a 95       	dec	r25
    b426:	e1 f7       	brne	.-8      	; 0xb420 <append_tile_column+0x11e>
    b428:	41 e0       	ldi	r20, 0x01	; 1
    b42a:	c9 01       	movw	r24, r18
    b42c:	17 c0       	rjmp	.+46     	; 0xb45c <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b42e:	dd 23       	and	r29, r29
    b430:	c9 f0       	breq	.+50     	; 0xb464 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b432:	80 91 bf 0d 	lds	r24, 0x0DBF
    b436:	86 95       	lsr	r24
    b438:	86 95       	lsr	r24
    b43a:	86 95       	lsr	r24
    b43c:	6d 2f       	mov	r22, r29
    b43e:	70 e0       	ldi	r23, 0x00	; 0
    b440:	68 0f       	add	r22, r24
    b442:	71 1d       	adc	r23, r1
    b444:	61 50       	subi	r22, 0x01	; 1
    b446:	71 09       	sbc	r23, r1
    b448:	83 e0       	ldi	r24, 0x03	; 3
    b44a:	66 0f       	add	r22, r22
    b44c:	77 1f       	adc	r23, r23
    b44e:	8a 95       	dec	r24
    b450:	e1 f7       	brne	.-8      	; 0xb44a <append_tile_column+0x148>
    b452:	80 91 b7 0d 	lds	r24, 0x0DB7
    b456:	90 91 b8 0d 	lds	r25, 0x0DB8
    b45a:	40 e0       	ldi	r20, 0x00	; 0
    b45c:	80 52       	subi	r24, 0x20	; 32
    b45e:	9f 4f       	sbci	r25, 0xFF	; 255
    b460:	0e 94 29 59 	call	0xb252	; 0xb252 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b464:	80 91 c0 0d 	lds	r24, 0x0DC0
    b468:	8f 5f       	subi	r24, 0xFF	; 255
    b46a:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_dest_x++;
    b46e:	80 91 c4 0d 	lds	r24, 0x0DC4
    b472:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b474:	80 32       	cpi	r24, 0x20	; 32
    b476:	18 f4       	brcc	.+6      	; 0xb47e <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b478:	80 93 c4 0d 	sts	0x0DC4, r24
    b47c:	07 c0       	rjmp	.+14     	; 0xb48c <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b47e:	10 92 c4 0d 	sts	0x0DC4, r1
    b482:	04 c0       	rjmp	.+8      	; 0xb48c <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b484:	d1 11       	cpse	r29, r1
    b486:	a2 cf       	rjmp	.-188    	; 0xb3cc <append_tile_column+0xca>
    b488:	da 2d       	mov	r29, r10
    b48a:	a0 cf       	rjmp	.-192    	; 0xb3cc <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b48c:	df 91       	pop	r29
    b48e:	cf 91       	pop	r28
    b490:	1f 91       	pop	r17
    b492:	0f 91       	pop	r16
    b494:	ff 90       	pop	r15
    b496:	ef 90       	pop	r14
    b498:	df 90       	pop	r13
    b49a:	cf 90       	pop	r12
    b49c:	bf 90       	pop	r11
    b49e:	af 90       	pop	r10
    b4a0:	08 95       	ret

0000b4a2 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b4a2:	80 91 b7 0d 	lds	r24, 0x0DB7
    b4a6:	90 91 b8 0d 	lds	r25, 0x0DB8
    b4aa:	01 96       	adiw	r24, 0x01	; 1
    b4ac:	90 93 b8 0d 	sts	0x0DB8, r25
    b4b0:	80 93 b7 0d 	sts	0x0DB7, r24
	Scroll(1,0);
    b4b4:	60 e0       	ldi	r22, 0x00	; 0
    b4b6:	81 e0       	ldi	r24, 0x01	; 1
    b4b8:	0e 94 28 4c 	call	0x9850	; 0x9850 <Scroll>
	if (++game.scroll_x == 8)
    b4bc:	80 91 c2 0d 	lds	r24, 0x0DC2
    b4c0:	8f 5f       	subi	r24, 0xFF	; 255
    b4c2:	88 30       	cpi	r24, 0x08	; 8
    b4c4:	19 f0       	breq	.+6      	; 0xb4cc <move_camera_x+0x2a>
    b4c6:	80 93 c2 0d 	sts	0x0DC2, r24
    b4ca:	08 95       	ret
	{
		game.scroll_x = 0;
    b4cc:	10 92 c2 0d 	sts	0x0DC2, r1
		append_tile_column();
    b4d0:	0c 94 81 59 	jmp	0xb302	; 0xb302 <append_tile_column>

0000b4d4 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b4d4:	82 e0       	ldi	r24, 0x02	; 2
    b4d6:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b4da:	85 e0       	ldi	r24, 0x05	; 5
    b4dc:	80 93 30 0e 	sts	0x0E30, r24
	game.player.run.anims = run_anim;
    b4e0:	e9 e3       	ldi	r30, 0x39	; 57
    b4e2:	f0 e1       	ldi	r31, 0x10	; 16
    b4e4:	f0 93 35 0e 	sts	0x0E35, r31
    b4e8:	e0 93 34 0e 	sts	0x0E34, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b4ec:	8a e9       	ldi	r24, 0x9A	; 154
    b4ee:	91 e3       	ldi	r25, 0x31	; 49
    b4f0:	91 83       	std	Z+1, r25	; 0x01
    b4f2:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b4f4:	80 e9       	ldi	r24, 0x90	; 144
    b4f6:	91 e3       	ldi	r25, 0x31	; 49
    b4f8:	93 83       	std	Z+3, r25	; 0x03
    b4fa:	82 83       	std	Z+2, r24	; 0x02
    b4fc:	08 95       	ret

0000b4fe <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b4fe:	a7 eb       	ldi	r26, 0xB7	; 183
    b500:	bd e0       	ldi	r27, 0x0D	; 13
    b502:	90 93 da 0f 	sts	0x0FDA, r25
    b506:	80 93 d9 0f 	sts	0x0FD9, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b50a:	fc 01       	movw	r30, r24
    b50c:	24 91       	lpm	r18, Z
    b50e:	56 96       	adiw	r26, 0x16	; 22
    b510:	2c 93       	st	X, r18
    b512:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b514:	9c 01       	movw	r18, r24
    b516:	2f 5f       	subi	r18, 0xFF	; 255
    b518:	3f 4f       	sbci	r19, 0xFF	; 255
    b51a:	f9 01       	movw	r30, r18
    b51c:	44 91       	lpm	r20, Z
    b51e:	57 96       	adiw	r26, 0x17	; 23
    b520:	4c 93       	st	X, r20
    b522:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b524:	fc 01       	movw	r30, r24
    b526:	84 91       	lpm	r24, Z
    b528:	98 2f       	mov	r25, r24
    b52a:	99 0f       	add	r25, r25
    b52c:	99 0f       	add	r25, r25
    b52e:	89 0f       	add	r24, r25
    b530:	1f 96       	adiw	r26, 0x0f	; 15
    b532:	8c 93       	st	X, r24
    b534:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b536:	f9 01       	movw	r30, r18
    b538:	24 91       	lpm	r18, Z
    b53a:	82 2f       	mov	r24, r18
    b53c:	88 0f       	add	r24, r24
    b53e:	88 0f       	add	r24, r24
    b540:	28 0f       	add	r18, r24
    b542:	50 96       	adiw	r26, 0x10	; 16
    b544:	2c 93       	st	X, r18
    b546:	08 95       	ret

0000b548 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b548:	cf 92       	push	r12
    b54a:	df 92       	push	r13
    b54c:	ef 92       	push	r14
    b54e:	ff 92       	push	r15
    b550:	0f 93       	push	r16
    b552:	1f 93       	push	r17
    b554:	cf 93       	push	r28
    b556:	df 93       	push	r29
    b558:	7c 01       	movw	r14, r24
    b55a:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b55c:	88 e0       	ldi	r24, 0x08	; 8
    b55e:	48 9f       	mul	r20, r24
    b560:	80 01       	movw	r16, r0
    b562:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b564:	c0 e0       	ldi	r28, 0x00	; 0
    b566:	cd 17       	cp	r28, r29
    b568:	09 f4       	brne	.+2      	; 0xb56c <on_solid_ground+0x24>
    b56a:	41 c0       	rjmp	.+130    	; 0xb5ee <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b56c:	f7 01       	movw	r30, r14
    b56e:	42 81       	ldd	r20, Z+2	; 0x02
    b570:	53 81       	ldd	r21, Z+3	; 0x03
    b572:	40 0f       	add	r20, r16
    b574:	51 1f       	adc	r21, r17
    b576:	83 e0       	ldi	r24, 0x03	; 3
    b578:	56 95       	lsr	r21
    b57a:	47 95       	ror	r20
    b57c:	8a 95       	dec	r24
    b57e:	e1 f7       	brne	.-8      	; 0xb578 <on_solid_ground+0x30>
    b580:	60 81       	ld	r22, Z
    b582:	71 81       	ldd	r23, Z+1	; 0x01
    b584:	93 e0       	ldi	r25, 0x03	; 3
    b586:	76 95       	lsr	r23
    b588:	67 95       	ror	r22
    b58a:	9a 95       	dec	r25
    b58c:	e1 f7       	brne	.-8      	; 0xb586 <on_solid_ground+0x3e>
    b58e:	6c 0f       	add	r22, r28
    b590:	80 91 d9 0f 	lds	r24, 0x0FD9
    b594:	90 91 da 0f 	lds	r25, 0x0FDA
    b598:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    b59c:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b59e:	f7 01       	movw	r30, r14
    b5a0:	42 81       	ldd	r20, Z+2	; 0x02
    b5a2:	53 81       	ldd	r21, Z+3	; 0x03
    b5a4:	40 0f       	add	r20, r16
    b5a6:	51 1f       	adc	r21, r17
    b5a8:	23 e0       	ldi	r18, 0x03	; 3
    b5aa:	56 95       	lsr	r21
    b5ac:	47 95       	ror	r20
    b5ae:	2a 95       	dec	r18
    b5b0:	e1 f7       	brne	.-8      	; 0xb5aa <on_solid_ground+0x62>
    b5b2:	20 81       	ld	r18, Z
    b5b4:	31 81       	ldd	r19, Z+1	; 0x01
    b5b6:	29 5f       	subi	r18, 0xF9	; 249
    b5b8:	3f 4f       	sbci	r19, 0xFF	; 255
    b5ba:	53 e0       	ldi	r21, 0x03	; 3
    b5bc:	36 95       	lsr	r19
    b5be:	27 95       	ror	r18
    b5c0:	5a 95       	dec	r21
    b5c2:	e1 f7       	brne	.-8      	; 0xb5bc <on_solid_ground+0x74>
    b5c4:	6c 2f       	mov	r22, r28
    b5c6:	62 0f       	add	r22, r18
    b5c8:	80 91 d9 0f 	lds	r24, 0x0FD9
    b5cc:	90 91 da 0f 	lds	r25, 0x0FDA
    b5d0:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    b5d4:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b5d6:	8c 2d       	mov	r24, r12
    b5d8:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    b5dc:	81 11       	cpse	r24, r1
    b5de:	09 c0       	rjmp	.+18     	; 0xb5f2 <on_solid_ground+0xaa>
    b5e0:	8d 2d       	mov	r24, r13
    b5e2:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    b5e6:	81 11       	cpse	r24, r1
    b5e8:	04 c0       	rjmp	.+8      	; 0xb5f2 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b5ea:	cf 5f       	subi	r28, 0xFF	; 255
    b5ec:	bc cf       	rjmp	.-136    	; 0xb566 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b5ee:	80 e0       	ldi	r24, 0x00	; 0
    b5f0:	01 c0       	rjmp	.+2      	; 0xb5f4 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b5f2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b5f4:	df 91       	pop	r29
    b5f6:	cf 91       	pop	r28
    b5f8:	1f 91       	pop	r17
    b5fa:	0f 91       	pop	r16
    b5fc:	ff 90       	pop	r15
    b5fe:	ef 90       	pop	r14
    b600:	df 90       	pop	r13
    b602:	cf 90       	pop	r12
    b604:	08 95       	ret

0000b606 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b606:	9c 01       	movw	r18, r24
    b608:	80 91 f9 0c 	lds	r24, 0x0CF9
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b60c:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b60e:	83 30       	cpi	r24, 0x03	; 3
    b610:	08 f0       	brcs	.+2      	; 0xb614 <find_shot_slot+0xe>
    b612:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b614:	f9 01       	movw	r30, r18
    b616:	48 9f       	mul	r20, r24
    b618:	e0 0d       	add	r30, r0
    b61a:	f1 1d       	adc	r31, r1
    b61c:	11 24       	eor	r1, r1
    b61e:	51 8d       	ldd	r21, Z+25	; 0x19
    b620:	91 e0       	ldi	r25, 0x01	; 1
    b622:	98 0f       	add	r25, r24
    b624:	51 11       	cpse	r21, r1
    b626:	03 c0       	rjmp	.+6      	; 0xb62e <find_shot_slot+0x28>
		{
			return i++;
    b628:	90 93 f9 0c 	sts	0x0CF9, r25
    b62c:	08 95       	ret
		}
		i++;
    b62e:	89 2f       	mov	r24, r25
	}
    b630:	ee cf       	rjmp	.-36     	; 0xb60e <find_shot_slot+0x8>

0000b632 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b632:	bf 92       	push	r11
    b634:	cf 92       	push	r12
    b636:	df 92       	push	r13
    b638:	ef 92       	push	r14
    b63a:	ff 92       	push	r15
    b63c:	0f 93       	push	r16
    b63e:	1f 93       	push	r17
    b640:	cf 93       	push	r28
    b642:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_B && player->active_shots < MAX_PLAYER_SHOTS)
    b644:	fc 01       	movw	r30, r24
    b646:	ec 58       	subi	r30, 0x8C	; 140
    b648:	ff 4f       	sbci	r31, 0xFF	; 255
    b64a:	20 81       	ld	r18, Z
    b64c:	20 ff       	sbrs	r18, 0
    b64e:	a7 c0       	rjmp	.+334    	; 0xb79e <update_shot+0x16c>
    b650:	fc 01       	movw	r30, r24
    b652:	27 81       	ldd	r18, Z+7	; 0x07
    b654:	23 30       	cpi	r18, 0x03	; 3
    b656:	08 f0       	brcs	.+2      	; 0xb65a <update_shot+0x28>
    b658:	a2 c0       	rjmp	.+324    	; 0xb79e <update_shot+0x16c>
    b65a:	16 2f       	mov	r17, r22
    b65c:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    b65e:	0e 94 03 5b 	call	0xb606	; 0xb606 <find_shot_slot>
    b662:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    b664:	e8 2e       	mov	r14, r24
    b666:	f1 2c       	mov	r15, r1
    b668:	fe 01       	movw	r30, r28
    b66a:	24 e1       	ldi	r18, 0x14	; 20
    b66c:	82 9f       	mul	r24, r18
    b66e:	e0 0d       	add	r30, r0
    b670:	f1 1d       	adc	r31, r1
    b672:	11 24       	eor	r1, r1
    b674:	87 89       	ldd	r24, Z+23	; 0x17
    b676:	86 30       	cpi	r24, 0x06	; 6
    b678:	29 f4       	brne	.+10     	; 0xb684 <update_shot+0x52>
    b67a:	8a 81       	ldd	r24, Y+2	; 0x02
    b67c:	9b 81       	ldd	r25, Y+3	; 0x03
    b67e:	04 97       	sbiw	r24, 0x04	; 4
    b680:	08 f4       	brcc	.+2      	; 0xb684 <update_shot+0x52>
    b682:	8d c0       	rjmp	.+282    	; 0xb79e <update_shot+0x16c>
		SFX_PLAYER_SHOOT;
    b684:	2f ef       	ldi	r18, 0xFF	; 255
    b686:	43 e2       	ldi	r20, 0x23	; 35
    b688:	63 e0       	ldi	r22, 0x03	; 3
    b68a:	82 e0       	ldi	r24, 0x02	; 2
    b68c:	0e 94 08 42 	call	0x8410	; 0x8410 <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b690:	84 e1       	ldi	r24, 0x14	; 20
    b692:	8e 9d       	mul	r24, r14
    b694:	60 01       	movw	r12, r0
    b696:	8f 9d       	mul	r24, r15
    b698:	d0 0c       	add	r13, r0
    b69a:	11 24       	eor	r1, r1
    b69c:	c6 01       	movw	r24, r12
    b69e:	4c 96       	adiw	r24, 0x1c	; 28
    b6a0:	8c 0f       	add	r24, r28
    b6a2:	9d 1f       	adc	r25, r29
    b6a4:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    b6a8:	40 e0       	ldi	r20, 0x00	; 0
    b6aa:	bc 01       	movw	r22, r24
    b6ac:	8b 2d       	mov	r24, r11
    b6ae:	81 0f       	add	r24, r17
    b6b0:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
		player->shot[idx].active = 1;
    b6b4:	8e 01       	movw	r16, r28
    b6b6:	0c 0d       	add	r16, r12
    b6b8:	1d 1d       	adc	r17, r13
    b6ba:	81 e0       	ldi	r24, 0x01	; 1
    b6bc:	f8 01       	movw	r30, r16
    b6be:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    b6c0:	ca 80       	ldd	r12, Y+2	; 0x02
    b6c2:	db 80       	ldd	r13, Y+3	; 0x03
    b6c4:	f8 ef       	ldi	r31, 0xF8	; 248
    b6c6:	cf 22       	and	r12, r31
    b6c8:	f8 01       	movw	r30, r16
    b6ca:	83 8d       	ldd	r24, Z+27	; 0x1b
    b6cc:	c8 0e       	add	r12, r24
    b6ce:	d1 1c       	adc	r13, r1
    b6d0:	87 fd       	sbrc	r24, 7
    b6d2:	da 94       	dec	r13
    b6d4:	d3 8a       	std	Z+19, r13	; 0x13
    b6d6:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    b6d8:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    b6dc:	28 81       	ld	r18, Y
    b6de:	39 81       	ldd	r19, Y+1	; 0x01
    b6e0:	88 23       	and	r24, r24
    b6e2:	e1 f0       	breq	.+56     	; 0xb71c <update_shot+0xea>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b6e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    b6e6:	f8 e0       	ldi	r31, 0x08	; 8
    b6e8:	8f 9f       	mul	r24, r31
    b6ea:	20 0d       	add	r18, r0
    b6ec:	31 1d       	adc	r19, r1
    b6ee:	11 24       	eor	r1, r1
    b6f0:	f8 01       	movw	r30, r16
    b6f2:	31 8b       	std	Z+17, r19	; 0x11
    b6f4:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b6f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    b6f8:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    b6fa:	87 89       	ldd	r24, Z+23	; 0x17
    b6fc:	86 30       	cpi	r24, 0x06	; 6
    b6fe:	09 f0       	breq	.+2      	; 0xb702 <update_shot+0xd0>
    b700:	4b c0       	rjmp	.+150    	; 0xb798 <update_shot+0x166>
    b702:	fe 01       	movw	r30, r28
    b704:	24 e1       	ldi	r18, 0x14	; 20
    b706:	b2 9e       	mul	r11, r18
    b708:	e0 0d       	add	r30, r0
    b70a:	f1 1d       	adc	r31, r1
    b70c:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    b70e:	84 89       	ldd	r24, Z+20	; 0x14
    b710:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    b712:	81 11       	cpse	r24, r1
    b714:	01 c0       	rjmp	.+2      	; 0xb718 <update_shot+0xe6>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    b716:	8f e7       	ldi	r24, 0x7F	; 127
    b718:	84 8b       	std	Z+20, r24	; 0x14
    b71a:	3e c0       	rjmp	.+124    	; 0xb798 <update_shot+0x166>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    b71c:	88 85       	ldd	r24, Y+8	; 0x08
    b71e:	82 fd       	sbrc	r24, 2
    b720:	06 c0       	rjmp	.+12     	; 0xb72e <update_shot+0xfc>
			{
				player->shot[idx].shared.y += 8;
    b722:	88 e0       	ldi	r24, 0x08	; 8
    b724:	c8 0e       	add	r12, r24
    b726:	d1 1c       	adc	r13, r1
    b728:	f8 01       	movw	r30, r16
    b72a:	d3 8a       	std	Z+19, r13	; 0x13
    b72c:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    b72e:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b730:	94 e1       	ldi	r25, 0x14	; 20
    b732:	9e 9d       	mul	r25, r14
    b734:	f0 01       	movw	r30, r0
    b736:	9f 9d       	mul	r25, r15
    b738:	f0 0d       	add	r31, r0
    b73a:	11 24       	eor	r1, r1
    b73c:	ec 0f       	add	r30, r28
    b73e:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    b740:	81 30       	cpi	r24, 0x01	; 1
    b742:	a9 f4       	brne	.+42     	; 0xb76e <update_shot+0x13c>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b744:	20 5f       	subi	r18, 0xF0	; 240
    b746:	3f 4f       	sbci	r19, 0xFF	; 255
    b748:	31 8b       	std	Z+17, r19	; 0x11
    b74a:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b74c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b74e:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b750:	27 89       	ldd	r18, Z+23	; 0x17
    b752:	24 30       	cpi	r18, 0x04	; 4
    b754:	09 f5       	brne	.+66     	; 0xb798 <update_shot+0x166>
    b756:	ff ef       	ldi	r31, 0xFF	; 255
    b758:	ef 1a       	sub	r14, r31
    b75a:	ff 0a       	sbc	r15, r31
    b75c:	9e 9d       	mul	r25, r14
    b75e:	f0 01       	movw	r30, r0
    b760:	9f 9d       	mul	r25, r15
    b762:	f0 0d       	add	r31, r0
    b764:	11 24       	eor	r1, r1
    b766:	ec 0f       	add	r30, r28
    b768:	fd 1f       	adc	r31, r29
    b76a:	81 95       	neg	r24
    b76c:	14 c0       	rjmp	.+40     	; 0xb796 <update_shot+0x164>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    b76e:	28 50       	subi	r18, 0x08	; 8
    b770:	31 09       	sbc	r19, r1
    b772:	31 8b       	std	Z+17, r19	; 0x11
    b774:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    b776:	82 8d       	ldd	r24, Z+26	; 0x1a
    b778:	81 95       	neg	r24
    b77a:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b77c:	27 89       	ldd	r18, Z+23	; 0x17
    b77e:	24 30       	cpi	r18, 0x04	; 4
    b780:	59 f4       	brne	.+22     	; 0xb798 <update_shot+0x166>
    b782:	2f ef       	ldi	r18, 0xFF	; 255
    b784:	e2 1a       	sub	r14, r18
    b786:	f2 0a       	sbc	r15, r18
    b788:	9e 9d       	mul	r25, r14
    b78a:	f0 01       	movw	r30, r0
    b78c:	9f 9d       	mul	r25, r15
    b78e:	f0 0d       	add	r31, r0
    b790:	11 24       	eor	r1, r1
    b792:	ec 0f       	add	r30, r28
    b794:	fd 1f       	adc	r31, r29
    b796:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    b798:	8f 81       	ldd	r24, Y+7	; 0x07
    b79a:	8f 5f       	subi	r24, 0xFF	; 255
    b79c:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    b79e:	df 91       	pop	r29
    b7a0:	cf 91       	pop	r28
    b7a2:	1f 91       	pop	r17
    b7a4:	0f 91       	pop	r16
    b7a6:	ff 90       	pop	r15
    b7a8:	ef 90       	pop	r14
    b7aa:	df 90       	pop	r13
    b7ac:	cf 90       	pop	r12
    b7ae:	bf 90       	pop	r11
    b7b0:	08 95       	ret

0000b7b2 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    b7b2:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    b7b4:	40 81       	ld	r20, Z
    b7b6:	51 81       	ldd	r21, Z+1	; 0x01
    b7b8:	20 91 b7 0d 	lds	r18, 0x0DB7
    b7bc:	30 91 b8 0d 	lds	r19, 0x0DB8
    b7c0:	42 17       	cp	r20, r18
    b7c2:	53 07       	cpc	r21, r19
    b7c4:	08 f1       	brcs	.+66     	; 0xb808 <out_of_bounds+0x56>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    b7c6:	48 5f       	subi	r20, 0xF8	; 248
    b7c8:	5f 4f       	sbci	r21, 0xFF	; 255
    b7ca:	20 52       	subi	r18, 0x20	; 32
    b7cc:	3f 4f       	sbci	r19, 0xFF	; 255
    b7ce:	24 17       	cp	r18, r20
    b7d0:	35 07       	cpc	r19, r21
    b7d2:	d0 f0       	brcs	.+52     	; 0xb808 <out_of_bounds+0x56>
	if (s->y < game.camera_y) return 1;
    b7d4:	42 81       	ldd	r20, Z+2	; 0x02
    b7d6:	53 81       	ldd	r21, Z+3	; 0x03
    b7d8:	20 91 bf 0d 	lds	r18, 0x0DBF
    b7dc:	30 e0       	ldi	r19, 0x00	; 0
    b7de:	42 17       	cp	r20, r18
    b7e0:	53 07       	cpc	r21, r19
    b7e2:	90 f0       	brcs	.+36     	; 0xb808 <out_of_bounds+0x56>
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
    b7e4:	c9 01       	movw	r24, r18
    b7e6:	01 96       	adiw	r24, 0x01	; 1
    b7e8:	48 17       	cp	r20, r24
    b7ea:	59 07       	cpc	r21, r25
    b7ec:	18 f4       	brcc	.+6      	; 0xb7f4 <out_of_bounds+0x42>
    b7ee:	84 81       	ldd	r24, Z+4	; 0x04
    b7f0:	81 11       	cpse	r24, r1
    b7f2:	0a c0       	rjmp	.+20     	; 0xb808 <out_of_bounds+0x56>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    b7f4:	48 5f       	subi	r20, 0xF8	; 248
    b7f6:	5f 4f       	sbci	r21, 0xFF	; 255
    b7f8:	28 53       	subi	r18, 0x38	; 56
    b7fa:	3f 4f       	sbci	r19, 0xFF	; 255
    b7fc:	81 e0       	ldi	r24, 0x01	; 1
    b7fe:	24 17       	cp	r18, r20
    b800:	35 07       	cpc	r19, r21
    b802:	18 f0       	brcs	.+6      	; 0xb80a <out_of_bounds+0x58>
    b804:	80 e0       	ldi	r24, 0x00	; 0
    b806:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    b808:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    b80a:	08 95       	ret

0000b80c <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    b80c:	40 91 d2 0d 	lds	r20, 0x0DD2
    b810:	80 e0       	ldi	r24, 0x00	; 0
    b812:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    b814:	50 e1       	ldi	r21, 0x10	; 16
    b816:	9c 01       	movw	r18, r24
    b818:	29 54       	subi	r18, 0x49	; 73
    b81a:	32 4f       	sbci	r19, 0xF2	; 242
    b81c:	d9 01       	movw	r26, r18
    b81e:	a0 5e       	subi	r26, 0xE0	; 224
    b820:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    b822:	6c 91       	ld	r22, X
    b824:	66 23       	and	r22, r22
    b826:	31 f0       	breq	.+12     	; 0xb834 <explode_all_enemies+0x28>
    b828:	f9 01       	movw	r30, r18
    b82a:	ef 5d       	subi	r30, 0xDF	; 223
    b82c:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    b82e:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    b830:	1c 92       	st	X, r1
			game.active_enemies--;
    b832:	41 50       	subi	r20, 0x01	; 1
    b834:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b836:	89 30       	cpi	r24, 0x09	; 9
    b838:	21 e0       	ldi	r18, 0x01	; 1
    b83a:	92 07       	cpc	r25, r18
    b83c:	61 f7       	brne	.-40     	; 0xb816 <explode_all_enemies+0xa>
    b83e:	40 93 d2 0d 	sts	0x0DD2, r20
    b842:	08 95       	ret

0000b844 <handle_music_toggle>:
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
}

char music_toggle_pressed(JoyPadState* p)
{
	return (p->pressed & BTN_SELECT);
    b844:	fc 01       	movw	r30, r24
    b846:	80 81       	ld	r24, Z
	}
}

void handle_music_toggle(JoyPadState* p)
{
	if (music_toggle_pressed(p))
    b848:	82 ff       	sbrs	r24, 2
    b84a:	07 c0       	rjmp	.+14     	; 0xb85a <handle_music_toggle+0x16>
	{
		if (IsSongPlaying())
    b84c:	0e 94 6a 44 	call	0x88d4	; 0x88d4 <IsSongPlaying>
    b850:	81 11       	cpse	r24, r1
		{
			StopSong();
    b852:	0c 94 fa 40 	jmp	0x81f4	; 0x81f4 <StopSong>
		}
		else
		{
			ResumeSong();
    b856:	0c 94 08 41 	jmp	0x8210	; 0x8210 <ResumeSong>
    b85a:	08 95       	ret

0000b85c <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    b85c:	0f 93       	push	r16
    b85e:	1f 93       	push	r17
    b860:	cf 93       	push	r28
    b862:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    b864:	20 91 d0 0d 	lds	r18, 0x0DD0
    b868:	22 30       	cpi	r18, 0x02	; 2
    b86a:	b9 f5       	brne	.+110    	; 0xb8da <handle_demo_play+0x7e>
    b86c:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    b86e:	8c 01       	movw	r16, r24
    b870:	0c 58       	subi	r16, 0x8C	; 140
    b872:	1f 4f       	sbci	r17, 0xFF	; 255
    b874:	f8 01       	movw	r30, r16
    b876:	11 82       	std	Z+1, r1	; 0x01
    b878:	10 82       	st	Z, r1
		if (is_space())
    b87a:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    b87e:	88 23       	and	r24, r24
    b880:	69 f0       	breq	.+26     	; 0xb89c <handle_demo_play+0x40>
		{
			if (game.time < 2)
    b882:	80 91 bd 0d 	lds	r24, 0x0DBD
    b886:	90 91 be 0d 	lds	r25, 0x0DBE
    b88a:	02 97       	sbiw	r24, 0x02	; 2
    b88c:	d0 f4       	brcc	.+52     	; 0xb8c2 <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    b88e:	c8 58       	subi	r28, 0x88	; 136
    b890:	df 4f       	sbci	r29, 0xFF	; 255
    b892:	80 e1       	ldi	r24, 0x10	; 16
    b894:	90 e0       	ldi	r25, 0x00	; 0
    b896:	99 83       	std	Y+1, r25	; 0x01
    b898:	88 83       	st	Y, r24
    b89a:	13 c0       	rjmp	.+38     	; 0xb8c2 <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    b89c:	80 e8       	ldi	r24, 0x80	; 128
    b89e:	90 e0       	ldi	r25, 0x00	; 0
    b8a0:	fe 01       	movw	r30, r28
    b8a2:	e8 58       	subi	r30, 0x88	; 136
    b8a4:	ff 4f       	sbci	r31, 0xFF	; 255
    b8a6:	91 83       	std	Z+1, r25	; 0x01
    b8a8:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    b8aa:	8d 81       	ldd	r24, Y+5	; 0x05
    b8ac:	81 11       	cpse	r24, r1
    b8ae:	09 c0       	rjmp	.+18     	; 0xb8c2 <handle_demo_play+0x66>
    b8b0:	88 81       	ld	r24, Y
    b8b2:	99 81       	ldd	r25, Y+1	; 0x01
    b8b4:	89 97       	sbiw	r24, 0x29	; 41
    b8b6:	28 f0       	brcs	.+10     	; 0xb8c2 <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_A;
    b8b8:	80 e0       	ldi	r24, 0x00	; 0
    b8ba:	91 e0       	ldi	r25, 0x01	; 1
    b8bc:	f8 01       	movw	r30, r16
    b8be:	91 83       	std	Z+1, r25	; 0x01
    b8c0:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    b8c2:	80 91 d1 0d 	lds	r24, 0x0DD1
    b8c6:	6f e0       	ldi	r22, 0x0F	; 15
    b8c8:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    b8cc:	91 11       	cpse	r25, r1
    b8ce:	05 c0       	rjmp	.+10     	; 0xb8da <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_B;
    b8d0:	81 e0       	ldi	r24, 0x01	; 1
    b8d2:	90 e0       	ldi	r25, 0x00	; 0
    b8d4:	f8 01       	movw	r30, r16
    b8d6:	91 83       	std	Z+1, r25	; 0x01
    b8d8:	80 83       	st	Z, r24
		}
	}
}
    b8da:	df 91       	pop	r29
    b8dc:	cf 91       	pop	r28
    b8de:	1f 91       	pop	r17
    b8e0:	0f 91       	pop	r16
    b8e2:	08 95       	ret

0000b8e4 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    b8e4:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    b8e6:	86 17       	cp	r24, r22
    b8e8:	10 f4       	brcc	.+4      	; 0xb8ee <pixel_overlap+0xa>
    b8ea:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    b8ec:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    b8ee:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    b8f0:	26 0f       	add	r18, r22
	if (s2 < s1)
    b8f2:	28 17       	cp	r18, r24
    b8f4:	10 f4       	brcc	.+4      	; 0xb8fa <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    b8f6:	28 1b       	sub	r18, r24
    b8f8:	92 0f       	add	r25, r18
	}
	return result;
}
    b8fa:	89 2f       	mov	r24, r25
    b8fc:	08 95       	ret

0000b8fe <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b8fe:	2f 92       	push	r2
    b900:	3f 92       	push	r3
    b902:	4f 92       	push	r4
    b904:	5f 92       	push	r5
    b906:	6f 92       	push	r6
    b908:	7f 92       	push	r7
    b90a:	8f 92       	push	r8
    b90c:	9f 92       	push	r9
    b90e:	af 92       	push	r10
    b910:	bf 92       	push	r11
    b912:	cf 92       	push	r12
    b914:	df 92       	push	r13
    b916:	ef 92       	push	r14
    b918:	ff 92       	push	r15
    b91a:	0f 93       	push	r16
    b91c:	1f 93       	push	r17
    b91e:	cf 93       	push	r28
    b920:	df 93       	push	r29
    b922:	00 d0       	rcall	.+0      	; 0xb924 <collision_detect_level+0x26>
    b924:	00 d0       	rcall	.+0      	; 0xb926 <collision_detect_level+0x28>
    b926:	00 d0       	rcall	.+0      	; 0xb928 <collision_detect_level+0x2a>
    b928:	cd b7       	in	r28, 0x3d	; 61
    b92a:	de b7       	in	r29, 0x3e	; 62
    b92c:	9e 83       	std	Y+6, r25	; 0x06
    b92e:	8d 83       	std	Y+5, r24	; 0x05
    b930:	56 2e       	mov	r5, r22
    b932:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    b934:	fc 01       	movw	r30, r24
    b936:	a0 80       	ld	r10, Z
    b938:	b1 80       	ldd	r11, Z+1	; 0x01
    b93a:	75 01       	movw	r14, r10
    b93c:	13 e0       	ldi	r17, 0x03	; 3
    b93e:	f6 94       	lsr	r15
    b940:	e7 94       	ror	r14
    b942:	1a 95       	dec	r17
    b944:	e1 f7       	brne	.-8      	; 0xb93e <collision_detect_level+0x40>
    b946:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    b948:	c2 80       	ldd	r12, Z+2	; 0x02
    b94a:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    b94c:	84 81       	ldd	r24, Z+4	; 0x04
    b94e:	88 23       	and	r24, r24
    b950:	09 f4       	brne	.+2      	; 0xb954 <collision_detect_level+0x56>
    b952:	e1 c0       	rjmp	.+450    	; 0xbb16 <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    b954:	e3 e0       	ldi	r30, 0x03	; 3
    b956:	d6 94       	lsr	r13
    b958:	c7 94       	ror	r12
    b95a:	ea 95       	dec	r30
    b95c:	e1 f7       	brne	.-8      	; 0xb956 <collision_detect_level+0x58>
    b95e:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    b960:	f7 e0       	ldi	r31, 0x07	; 7
    b962:	af 0e       	add	r10, r31
    b964:	b1 1c       	adc	r11, r1
    b966:	f3 e0       	ldi	r31, 0x03	; 3
    b968:	b6 94       	lsr	r11
    b96a:	a7 94       	ror	r10
    b96c:	fa 95       	dec	r31
    b96e:	e1 f7       	brne	.-8      	; 0xb968 <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b970:	8e 2d       	mov	r24, r14
    b972:	88 0f       	add	r24, r24
    b974:	88 0f       	add	r24, r24
    b976:	88 0f       	add	r24, r24
    b978:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b97a:	2a 2c       	mov	r2, r10
    b97c:	22 0c       	add	r2, r2
    b97e:	22 0c       	add	r2, r2
    b980:	22 0c       	add	r2, r2
    b982:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b984:	46 01       	movw	r8, r12
    b986:	9f ef       	ldi	r25, 0xFF	; 255
    b988:	89 1a       	sub	r8, r25
    b98a:	99 0a       	sbc	r9, r25
    b98c:	a3 e0       	ldi	r26, 0x03	; 3
    b98e:	88 0c       	add	r8, r8
    b990:	99 1c       	adc	r9, r9
    b992:	aa 95       	dec	r26
    b994:	e1 f7       	brne	.-8      	; 0xb98e <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b996:	e8 e0       	ldi	r30, 0x08	; 8
    b998:	4e 9f       	mul	r20, r30
    b99a:	30 01       	movw	r6, r0
    b99c:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b99e:	b3 e0       	ldi	r27, 0x03	; 3
    b9a0:	cc 0c       	add	r12, r12
    b9a2:	dd 1c       	adc	r13, r13
    b9a4:	ba 95       	dec	r27
    b9a6:	e1 f7       	brne	.-8      	; 0xb9a0 <collision_detect_level+0xa2>
    b9a8:	41 2c       	mov	r4, r1
    b9aa:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b9ac:	45 14       	cp	r4, r5
    b9ae:	09 f4       	brne	.+2      	; 0xb9b2 <collision_detect_level+0xb4>
    b9b0:	b3 c0       	rjmp	.+358    	; 0xbb18 <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    b9b2:	ed 81       	ldd	r30, Y+5	; 0x05
    b9b4:	fe 81       	ldd	r31, Y+6	; 0x06
    b9b6:	84 81       	ldd	r24, Z+4	; 0x04
    b9b8:	87 ff       	sbrs	r24, 7
    b9ba:	47 c0       	rjmp	.+142    	; 0xba4a <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    b9bc:	49 81       	ldd	r20, Y+1	; 0x01
    b9be:	64 2d       	mov	r22, r4
    b9c0:	6e 0d       	add	r22, r14
    b9c2:	80 91 d9 0f 	lds	r24, 0x0FD9
    b9c6:	90 91 da 0f 	lds	r25, 0x0FDA
    b9ca:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    b9ce:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    b9d0:	49 81       	ldd	r20, Y+1	; 0x01
    b9d2:	64 2d       	mov	r22, r4
    b9d4:	6a 0d       	add	r22, r10
    b9d6:	80 91 d9 0f 	lds	r24, 0x0FD9
    b9da:	90 91 da 0f 	lds	r25, 0x0FDA
    b9de:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    b9e2:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b9e4:	83 2d       	mov	r24, r3
    b9e6:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    b9ea:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b9ec:	80 2f       	mov	r24, r16
    b9ee:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    b9f2:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b9f4:	33 20       	and	r3, r3
    b9f6:	71 f0       	breq	.+28     	; 0xba14 <collision_detect_level+0x116>
    b9f8:	30 91 b7 0d 	lds	r19, 0x0DB7
    b9fc:	6b 81       	ldd	r22, Y+3	; 0x03
    b9fe:	63 1b       	sub	r22, r19
    ba00:	ed 81       	ldd	r30, Y+5	; 0x05
    ba02:	fe 81       	ldd	r31, Y+6	; 0x06
    ba04:	80 81       	ld	r24, Z
    ba06:	28 e0       	ldi	r18, 0x08	; 8
    ba08:	48 e0       	ldi	r20, 0x08	; 8
    ba0a:	83 1b       	sub	r24, r19
    ba0c:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    ba10:	84 30       	cpi	r24, 0x04	; 4
    ba12:	80 f4       	brcc	.+32     	; 0xba34 <collision_detect_level+0x136>
    ba14:	00 23       	and	r16, r16
    ba16:	c9 f0       	breq	.+50     	; 0xba4a <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    ba18:	30 91 b7 0d 	lds	r19, 0x0DB7
    ba1c:	62 2d       	mov	r22, r2
    ba1e:	63 1b       	sub	r22, r19
    ba20:	ed 81       	ldd	r30, Y+5	; 0x05
    ba22:	fe 81       	ldd	r31, Y+6	; 0x06
    ba24:	80 81       	ld	r24, Z
    ba26:	28 e0       	ldi	r18, 0x08	; 8
    ba28:	48 e0       	ldi	r20, 0x08	; 8
    ba2a:	83 1b       	sub	r24, r19
    ba2c:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    ba30:	84 30       	cpi	r24, 0x04	; 4
    ba32:	58 f0       	brcs	.+22     	; 0xba4a <collision_detect_level+0x14c>
				{
					s->vy =  0;
    ba34:	ed 81       	ldd	r30, Y+5	; 0x05
    ba36:	fe 81       	ldd	r31, Y+6	; 0x06
    ba38:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    ba3a:	93 82       	std	Z+3, r9	; 0x03
    ba3c:	82 82       	std	Z+2, r8	; 0x02
    ba3e:	30 16       	cp	r3, r16
    ba40:	08 f4       	brcc	.+2      	; 0xba44 <collision_detect_level+0x146>
    ba42:	30 2e       	mov	r3, r16
    ba44:	13 15       	cp	r17, r3
    ba46:	08 f4       	brcc	.+2      	; 0xba4a <collision_detect_level+0x14c>
    ba48:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    ba4a:	ed 81       	ldd	r30, Y+5	; 0x05
    ba4c:	fe 81       	ldd	r31, Y+6	; 0x06
    ba4e:	84 81       	ldd	r24, Z+4	; 0x04
    ba50:	18 16       	cp	r1, r24
    ba52:	0c f0       	brlt	.+2      	; 0xba56 <collision_detect_level+0x158>
    ba54:	5e c0       	rjmp	.+188    	; 0xbb12 <collision_detect_level+0x214>
    ba56:	42 81       	ldd	r20, Z+2	; 0x02
    ba58:	53 81       	ldd	r21, Z+3	; 0x03
    ba5a:	41 50       	subi	r20, 0x01	; 1
    ba5c:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    ba5e:	46 0d       	add	r20, r6
    ba60:	57 1d       	adc	r21, r7
    ba62:	63 e0       	ldi	r22, 0x03	; 3
    ba64:	56 95       	lsr	r21
    ba66:	47 95       	ror	r20
    ba68:	6a 95       	dec	r22
    ba6a:	e1 f7       	brne	.-8      	; 0xba64 <collision_detect_level+0x166>
    ba6c:	64 2d       	mov	r22, r4
    ba6e:	6e 0d       	add	r22, r14
    ba70:	80 91 d9 0f 	lds	r24, 0x0FD9
    ba74:	90 91 da 0f 	lds	r25, 0x0FDA
    ba78:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    ba7c:	38 2e       	mov	r3, r24
    ba7e:	ed 81       	ldd	r30, Y+5	; 0x05
    ba80:	fe 81       	ldd	r31, Y+6	; 0x06
    ba82:	42 81       	ldd	r20, Z+2	; 0x02
    ba84:	53 81       	ldd	r21, Z+3	; 0x03
    ba86:	41 50       	subi	r20, 0x01	; 1
    ba88:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    ba8a:	46 0d       	add	r20, r6
    ba8c:	57 1d       	adc	r21, r7
    ba8e:	73 e0       	ldi	r23, 0x03	; 3
    ba90:	56 95       	lsr	r21
    ba92:	47 95       	ror	r20
    ba94:	7a 95       	dec	r23
    ba96:	e1 f7       	brne	.-8      	; 0xba90 <collision_detect_level+0x192>
    ba98:	64 2d       	mov	r22, r4
    ba9a:	6a 0d       	add	r22, r10
    ba9c:	80 91 d9 0f 	lds	r24, 0x0FD9
    baa0:	90 91 da 0f 	lds	r25, 0x0FDA
    baa4:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    baa8:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    baaa:	83 2d       	mov	r24, r3
    baac:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    bab0:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bab2:	80 2f       	mov	r24, r16
    bab4:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    bab8:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    baba:	33 20       	and	r3, r3
    babc:	71 f0       	breq	.+28     	; 0xbada <collision_detect_level+0x1dc>
    babe:	30 91 b7 0d 	lds	r19, 0x0DB7
    bac2:	6b 81       	ldd	r22, Y+3	; 0x03
    bac4:	63 1b       	sub	r22, r19
    bac6:	ed 81       	ldd	r30, Y+5	; 0x05
    bac8:	fe 81       	ldd	r31, Y+6	; 0x06
    baca:	80 81       	ld	r24, Z
    bacc:	28 e0       	ldi	r18, 0x08	; 8
    bace:	48 e0       	ldi	r20, 0x08	; 8
    bad0:	83 1b       	sub	r24, r19
    bad2:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    bad6:	84 30       	cpi	r24, 0x04	; 4
    bad8:	80 f4       	brcc	.+32     	; 0xbafa <collision_detect_level+0x1fc>
    bada:	00 23       	and	r16, r16
    badc:	d1 f0       	breq	.+52     	; 0xbb12 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bade:	30 91 b7 0d 	lds	r19, 0x0DB7
    bae2:	62 2d       	mov	r22, r2
    bae4:	63 1b       	sub	r22, r19
    bae6:	ed 81       	ldd	r30, Y+5	; 0x05
    bae8:	fe 81       	ldd	r31, Y+6	; 0x06
    baea:	80 81       	ld	r24, Z
    baec:	28 e0       	ldi	r18, 0x08	; 8
    baee:	48 e0       	ldi	r20, 0x08	; 8
    baf0:	83 1b       	sub	r24, r19
    baf2:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    baf6:	84 30       	cpi	r24, 0x04	; 4
    baf8:	60 f0       	brcs	.+24     	; 0xbb12 <collision_detect_level+0x214>
				{
					s->vy =  0;
    bafa:	ed 81       	ldd	r30, Y+5	; 0x05
    bafc:	fe 81       	ldd	r31, Y+6	; 0x06
    bafe:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    bb00:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    bb02:	d3 82       	std	Z+3, r13	; 0x03
    bb04:	c2 82       	std	Z+2, r12	; 0x02
    bb06:	30 16       	cp	r3, r16
    bb08:	08 f4       	brcc	.+2      	; 0xbb0c <collision_detect_level+0x20e>
    bb0a:	30 2e       	mov	r3, r16
    bb0c:	13 15       	cp	r17, r3
    bb0e:	08 f4       	brcc	.+2      	; 0xbb12 <collision_detect_level+0x214>
    bb10:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bb12:	43 94       	inc	r4
    bb14:	4b cf       	rjmp	.-362    	; 0xb9ac <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    bb16:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    bb18:	ed 81       	ldd	r30, Y+5	; 0x05
    bb1a:	fe 81       	ldd	r31, Y+6	; 0x06
    bb1c:	85 81       	ldd	r24, Z+5	; 0x05
    bb1e:	88 23       	and	r24, r24
    bb20:	09 f4       	brne	.+2      	; 0xbb24 <collision_detect_level+0x226>
    bb22:	e1 c0       	rjmp	.+450    	; 0xbce6 <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    bb24:	c2 80       	ldd	r12, Z+2	; 0x02
    bb26:	d3 80       	ldd	r13, Z+3	; 0x03
    bb28:	56 01       	movw	r10, r12
    bb2a:	23 e0       	ldi	r18, 0x03	; 3
    bb2c:	b6 94       	lsr	r11
    bb2e:	a7 94       	ror	r10
    bb30:	2a 95       	dec	r18
    bb32:	e1 f7       	brne	.-8      	; 0xbb2c <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    bb34:	f7 e0       	ldi	r31, 0x07	; 7
    bb36:	cf 0e       	add	r12, r31
    bb38:	d1 1c       	adc	r13, r1
    bb3a:	33 e0       	ldi	r19, 0x03	; 3
    bb3c:	d6 94       	lsr	r13
    bb3e:	c7 94       	ror	r12
    bb40:	3a 95       	dec	r19
    bb42:	e1 f7       	brne	.-8      	; 0xbb3c <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bb44:	3a 2c       	mov	r3, r10
    bb46:	33 0c       	add	r3, r3
    bb48:	33 0c       	add	r3, r3
    bb4a:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bb4c:	4c 2c       	mov	r4, r12
    bb4e:	44 0c       	add	r4, r4
    bb50:	44 0c       	add	r4, r4
    bb52:	44 0c       	add	r4, r4
    bb54:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    bb56:	37 01       	movw	r6, r14
    bb58:	8f ef       	ldi	r24, 0xFF	; 255
    bb5a:	68 1a       	sub	r6, r24
    bb5c:	78 0a       	sbc	r7, r24
    bb5e:	43 e0       	ldi	r20, 0x03	; 3
    bb60:	66 0c       	add	r6, r6
    bb62:	77 1c       	adc	r7, r7
    bb64:	4a 95       	dec	r20
    bb66:	e1 f7       	brne	.-8      	; 0xbb60 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bb68:	98 e0       	ldi	r25, 0x08	; 8
    bb6a:	59 9e       	mul	r5, r25
    bb6c:	40 01       	movw	r8, r0
    bb6e:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    bb70:	53 e0       	ldi	r21, 0x03	; 3
    bb72:	ee 0c       	add	r14, r14
    bb74:	ff 1c       	adc	r15, r15
    bb76:	5a 95       	dec	r21
    bb78:	e1 f7       	brne	.-8      	; 0xbb72 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bb7a:	51 2c       	mov	r5, r1
    bb7c:	fc 81       	ldd	r31, Y+4	; 0x04
    bb7e:	5f 16       	cp	r5, r31
    bb80:	09 f4       	brne	.+2      	; 0xbb84 <collision_detect_level+0x286>
    bb82:	b1 c0       	rjmp	.+354    	; 0xbce6 <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    bb84:	ed 81       	ldd	r30, Y+5	; 0x05
    bb86:	fe 81       	ldd	r31, Y+6	; 0x06
    bb88:	85 81       	ldd	r24, Z+5	; 0x05
    bb8a:	87 ff       	sbrs	r24, 7
    bb8c:	47 c0       	rjmp	.+142    	; 0xbc1c <collision_detect_level+0x31e>
    bb8e:	45 2d       	mov	r20, r5
    bb90:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    bb92:	6a 81       	ldd	r22, Y+2	; 0x02
    bb94:	80 91 d9 0f 	lds	r24, 0x0FD9
    bb98:	90 91 da 0f 	lds	r25, 0x0FDA
    bb9c:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    bba0:	28 2e       	mov	r2, r24
    bba2:	45 2d       	mov	r20, r5
    bba4:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    bba6:	6a 81       	ldd	r22, Y+2	; 0x02
    bba8:	80 91 d9 0f 	lds	r24, 0x0FD9
    bbac:	90 91 da 0f 	lds	r25, 0x0FDA
    bbb0:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    bbb4:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bbb6:	82 2d       	mov	r24, r2
    bbb8:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    bbbc:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bbbe:	80 2f       	mov	r24, r16
    bbc0:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    bbc4:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bbc6:	22 20       	and	r2, r2
    bbc8:	71 f0       	breq	.+28     	; 0xbbe6 <collision_detect_level+0x2e8>
    bbca:	30 91 bf 0d 	lds	r19, 0x0DBF
    bbce:	63 2d       	mov	r22, r3
    bbd0:	63 1b       	sub	r22, r19
    bbd2:	ed 81       	ldd	r30, Y+5	; 0x05
    bbd4:	fe 81       	ldd	r31, Y+6	; 0x06
    bbd6:	82 81       	ldd	r24, Z+2	; 0x02
    bbd8:	28 e0       	ldi	r18, 0x08	; 8
    bbda:	48 e0       	ldi	r20, 0x08	; 8
    bbdc:	83 1b       	sub	r24, r19
    bbde:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    bbe2:	84 30       	cpi	r24, 0x04	; 4
    bbe4:	80 f4       	brcc	.+32     	; 0xbc06 <collision_detect_level+0x308>
    bbe6:	00 23       	and	r16, r16
    bbe8:	c9 f0       	breq	.+50     	; 0xbc1c <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bbea:	30 91 bf 0d 	lds	r19, 0x0DBF
    bbee:	64 2d       	mov	r22, r4
    bbf0:	63 1b       	sub	r22, r19
    bbf2:	ed 81       	ldd	r30, Y+5	; 0x05
    bbf4:	fe 81       	ldd	r31, Y+6	; 0x06
    bbf6:	82 81       	ldd	r24, Z+2	; 0x02
    bbf8:	28 e0       	ldi	r18, 0x08	; 8
    bbfa:	48 e0       	ldi	r20, 0x08	; 8
    bbfc:	83 1b       	sub	r24, r19
    bbfe:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    bc02:	84 30       	cpi	r24, 0x04	; 4
    bc04:	58 f0       	brcs	.+22     	; 0xbc1c <collision_detect_level+0x31e>
				{
					s->vx =  0;
    bc06:	ed 81       	ldd	r30, Y+5	; 0x05
    bc08:	fe 81       	ldd	r31, Y+6	; 0x06
    bc0a:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    bc0c:	71 82       	std	Z+1, r7	; 0x01
    bc0e:	60 82       	st	Z, r6
    bc10:	20 16       	cp	r2, r16
    bc12:	08 f4       	brcc	.+2      	; 0xbc16 <collision_detect_level+0x318>
    bc14:	20 2e       	mov	r2, r16
    bc16:	12 15       	cp	r17, r2
    bc18:	08 f4       	brcc	.+2      	; 0xbc1c <collision_detect_level+0x31e>
    bc1a:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    bc1c:	ed 81       	ldd	r30, Y+5	; 0x05
    bc1e:	fe 81       	ldd	r31, Y+6	; 0x06
    bc20:	85 81       	ldd	r24, Z+5	; 0x05
    bc22:	18 16       	cp	r1, r24
    bc24:	0c f0       	brlt	.+2      	; 0xbc28 <collision_detect_level+0x32a>
    bc26:	5d c0       	rjmp	.+186    	; 0xbce2 <collision_detect_level+0x3e4>
    bc28:	60 81       	ld	r22, Z
    bc2a:	71 81       	ldd	r23, Z+1	; 0x01
    bc2c:	61 50       	subi	r22, 0x01	; 1
    bc2e:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bc30:	68 0d       	add	r22, r8
    bc32:	79 1d       	adc	r23, r9
    bc34:	83 e0       	ldi	r24, 0x03	; 3
    bc36:	76 95       	lsr	r23
    bc38:	67 95       	ror	r22
    bc3a:	8a 95       	dec	r24
    bc3c:	e1 f7       	brne	.-8      	; 0xbc36 <collision_detect_level+0x338>
    bc3e:	45 2d       	mov	r20, r5
    bc40:	4a 0d       	add	r20, r10
    bc42:	80 91 d9 0f 	lds	r24, 0x0FD9
    bc46:	90 91 da 0f 	lds	r25, 0x0FDA
    bc4a:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    bc4e:	28 2e       	mov	r2, r24
    bc50:	ed 81       	ldd	r30, Y+5	; 0x05
    bc52:	fe 81       	ldd	r31, Y+6	; 0x06
    bc54:	60 81       	ld	r22, Z
    bc56:	71 81       	ldd	r23, Z+1	; 0x01
    bc58:	61 50       	subi	r22, 0x01	; 1
    bc5a:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bc5c:	68 0d       	add	r22, r8
    bc5e:	79 1d       	adc	r23, r9
    bc60:	93 e0       	ldi	r25, 0x03	; 3
    bc62:	76 95       	lsr	r23
    bc64:	67 95       	ror	r22
    bc66:	9a 95       	dec	r25
    bc68:	e1 f7       	brne	.-8      	; 0xbc62 <collision_detect_level+0x364>
    bc6a:	45 2d       	mov	r20, r5
    bc6c:	4c 0d       	add	r20, r12
    bc6e:	80 91 d9 0f 	lds	r24, 0x0FD9
    bc72:	90 91 da 0f 	lds	r25, 0x0FDA
    bc76:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <get_level_tile>
    bc7a:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bc7c:	82 2d       	mov	r24, r2
    bc7e:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    bc82:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bc84:	80 2f       	mov	r24, r16
    bc86:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <solid_or_hazard_tile>
    bc8a:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bc8c:	22 20       	and	r2, r2
    bc8e:	71 f0       	breq	.+28     	; 0xbcac <collision_detect_level+0x3ae>
    bc90:	30 91 bf 0d 	lds	r19, 0x0DBF
    bc94:	63 2d       	mov	r22, r3
    bc96:	63 1b       	sub	r22, r19
    bc98:	ed 81       	ldd	r30, Y+5	; 0x05
    bc9a:	fe 81       	ldd	r31, Y+6	; 0x06
    bc9c:	82 81       	ldd	r24, Z+2	; 0x02
    bc9e:	28 e0       	ldi	r18, 0x08	; 8
    bca0:	48 e0       	ldi	r20, 0x08	; 8
    bca2:	83 1b       	sub	r24, r19
    bca4:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    bca8:	84 30       	cpi	r24, 0x04	; 4
    bcaa:	80 f4       	brcc	.+32     	; 0xbccc <collision_detect_level+0x3ce>
    bcac:	00 23       	and	r16, r16
    bcae:	c9 f0       	breq	.+50     	; 0xbce2 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bcb0:	30 91 bf 0d 	lds	r19, 0x0DBF
    bcb4:	64 2d       	mov	r22, r4
    bcb6:	63 1b       	sub	r22, r19
    bcb8:	ed 81       	ldd	r30, Y+5	; 0x05
    bcba:	fe 81       	ldd	r31, Y+6	; 0x06
    bcbc:	82 81       	ldd	r24, Z+2	; 0x02
    bcbe:	28 e0       	ldi	r18, 0x08	; 8
    bcc0:	48 e0       	ldi	r20, 0x08	; 8
    bcc2:	83 1b       	sub	r24, r19
    bcc4:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <pixel_overlap>
    bcc8:	84 30       	cpi	r24, 0x04	; 4
    bcca:	58 f0       	brcs	.+22     	; 0xbce2 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    bccc:	ed 81       	ldd	r30, Y+5	; 0x05
    bcce:	fe 81       	ldd	r31, Y+6	; 0x06
    bcd0:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    bcd2:	f1 82       	std	Z+1, r15	; 0x01
    bcd4:	e0 82       	st	Z, r14
    bcd6:	20 16       	cp	r2, r16
    bcd8:	08 f4       	brcc	.+2      	; 0xbcdc <collision_detect_level+0x3de>
    bcda:	20 2e       	mov	r2, r16
    bcdc:	12 15       	cp	r17, r2
    bcde:	08 f4       	brcc	.+2      	; 0xbce2 <collision_detect_level+0x3e4>
    bce0:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bce2:	53 94       	inc	r5
    bce4:	4b cf       	rjmp	.-362    	; 0xbb7c <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    bce6:	81 2f       	mov	r24, r17
    bce8:	26 96       	adiw	r28, 0x06	; 6
    bcea:	0f b6       	in	r0, 0x3f	; 63
    bcec:	f8 94       	cli
    bcee:	de bf       	out	0x3e, r29	; 62
    bcf0:	0f be       	out	0x3f, r0	; 63
    bcf2:	cd bf       	out	0x3d, r28	; 61
    bcf4:	df 91       	pop	r29
    bcf6:	cf 91       	pop	r28
    bcf8:	1f 91       	pop	r17
    bcfa:	0f 91       	pop	r16
    bcfc:	ff 90       	pop	r15
    bcfe:	ef 90       	pop	r14
    bd00:	df 90       	pop	r13
    bd02:	cf 90       	pop	r12
    bd04:	bf 90       	pop	r11
    bd06:	af 90       	pop	r10
    bd08:	9f 90       	pop	r9
    bd0a:	8f 90       	pop	r8
    bd0c:	7f 90       	pop	r7
    bd0e:	6f 90       	pop	r6
    bd10:	5f 90       	pop	r5
    bd12:	4f 90       	pop	r4
    bd14:	3f 90       	pop	r3
    bd16:	2f 90       	pop	r2
    bd18:	08 95       	ret

0000bd1a <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    bd1a:	2f 92       	push	r2
    bd1c:	3f 92       	push	r3
    bd1e:	4f 92       	push	r4
    bd20:	5f 92       	push	r5
    bd22:	6f 92       	push	r6
    bd24:	7f 92       	push	r7
    bd26:	8f 92       	push	r8
    bd28:	9f 92       	push	r9
    bd2a:	af 92       	push	r10
    bd2c:	bf 92       	push	r11
    bd2e:	cf 92       	push	r12
    bd30:	df 92       	push	r13
    bd32:	ef 92       	push	r14
    bd34:	ff 92       	push	r15
    bd36:	0f 93       	push	r16
    bd38:	1f 93       	push	r17
    bd3a:	cf 93       	push	r28
    bd3c:	df 93       	push	r29
    bd3e:	00 d0       	rcall	.+0      	; 0xbd40 <animate_shot+0x26>
    bd40:	00 d0       	rcall	.+0      	; 0xbd42 <animate_shot+0x28>
    bd42:	1f 92       	push	r1
    bd44:	cd b7       	in	r28, 0x3d	; 61
    bd46:	de b7       	in	r29, 0x3e	; 62
    bd48:	2c 01       	movw	r4, r24
    bd4a:	3b 01       	movw	r6, r22
    bd4c:	d4 2e       	mov	r13, r20
    bd4e:	4c 01       	movw	r8, r24
    bd50:	29 e1       	ldi	r18, 0x19	; 25
    bd52:	82 0e       	add	r8, r18
    bd54:	91 1c       	adc	r9, r1
    bd56:	40 96       	adiw	r24, 0x10	; 16
    bd58:	9d 83       	std	Y+5, r25	; 0x05
    bd5a:	8c 83       	std	Y+4, r24	; 0x04
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bd5c:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    bd5e:	30 e1       	ldi	r19, 0x10	; 16
    bd60:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bd62:	f4 01       	movw	r30, r8
    bd64:	80 81       	ld	r24, Z
    bd66:	88 23       	and	r24, r24
    bd68:	09 f4       	brne	.+2      	; 0xbd6c <animate_shot+0x52>
    bd6a:	12 c1       	rjmp	.+548    	; 0xbf90 <animate_shot+0x276>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bd6c:	60 91 d1 0d 	lds	r22, 0x0DD1
    bd70:	34 97       	sbiw	r30, 0x04	; 4
    bd72:	80 81       	ld	r24, Z
    bd74:	0e 94 2c 4d 	call	0x9a58	; 0x9a58 <LBMoveDelta>
    bd78:	88 0f       	add	r24, r24
    bd7a:	99 1f       	adc	r25, r25
    bd7c:	ec 81       	ldd	r30, Y+4	; 0x04
    bd7e:	fd 81       	ldd	r31, Y+5	; 0x05
    bd80:	20 81       	ld	r18, Z
    bd82:	31 81       	ldd	r19, Z+1	; 0x01
    bd84:	82 0f       	add	r24, r18
    bd86:	93 1f       	adc	r25, r19
    bd88:	91 83       	std	Z+1, r25	; 0x01
    bd8a:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    bd8c:	60 91 d1 0d 	lds	r22, 0x0DD1
    bd90:	f4 01       	movw	r30, r8
    bd92:	35 97       	sbiw	r30, 0x05	; 5
    bd94:	80 81       	ld	r24, Z
    bd96:	0e 94 2c 4d 	call	0x9a58	; 0x9a58 <LBMoveDelta>
    bd9a:	ec 81       	ldd	r30, Y+4	; 0x04
    bd9c:	fd 81       	ldd	r31, Y+5	; 0x05
    bd9e:	42 81       	ldd	r20, Z+2	; 0x02
    bda0:	53 81       	ldd	r21, Z+3	; 0x03
    bda2:	84 0f       	add	r24, r20
    bda4:	95 1f       	adc	r25, r21
    bda6:	93 83       	std	Z+3, r25	; 0x03
    bda8:	82 83       	std	Z+2, r24	; 0x02
    bdaa:	f1 2e       	mov	r15, r17
    bdac:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    bdae:	90 91 bf 0d 	lds	r25, 0x0DBF
    bdb2:	48 2f       	mov	r20, r24
    bdb4:	49 1b       	sub	r20, r25
    bdb6:	60 81       	ld	r22, Z
    bdb8:	80 91 b7 0d 	lds	r24, 0x0DB7
    bdbc:	68 1b       	sub	r22, r24
    bdbe:	01 e0       	ldi	r16, 0x01	; 1
    bdc0:	21 e0       	ldi	r18, 0x01	; 1
    bdc2:	8f 2d       	mov	r24, r15
    bdc4:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    bdc8:	8c 81       	ldd	r24, Y+4	; 0x04
    bdca:	9d 81       	ldd	r25, Y+5	; 0x05
    bdcc:	0e 94 d9 5b 	call	0xb7b2	; 0xb7b2 <out_of_bounds>
    bdd0:	81 11       	cpse	r24, r1
    bdd2:	d1 c0       	rjmp	.+418    	; 0xbf76 <animate_shot+0x25c>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    bdd4:	41 e0       	ldi	r20, 0x01	; 1
    bdd6:	61 e0       	ldi	r22, 0x01	; 1
    bdd8:	8c 81       	ldd	r24, Y+4	; 0x04
    bdda:	9d 81       	ldd	r25, Y+5	; 0x05
    bddc:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    bde0:	81 11       	cpse	r24, r1
    bde2:	c9 c0       	rjmp	.+402    	; 0xbf76 <animate_shot+0x25c>
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bde4:	90 91 b7 0d 	lds	r25, 0x0DB7
    bde8:	8c ed       	ldi	r24, 0xDC	; 220
    bdea:	28 2e       	mov	r2, r24
    bdec:	8e e0       	ldi	r24, 0x0E	; 14
    bdee:	38 2e       	mov	r3, r24
    bdf0:	1a 82       	std	Y+2, r1	; 0x02
    bdf2:	19 82       	std	Y+1, r1	; 0x01
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bdf4:	f1 01       	movw	r30, r2
    bdf6:	80 81       	ld	r24, Z
    bdf8:	82 30       	cpi	r24, 0x02	; 2
    bdfa:	09 f4       	brne	.+2      	; 0xbdfe <animate_shot+0xe4>
    bdfc:	68 c0       	rjmp	.+208    	; 0xbece <animate_shot+0x1b4>
    bdfe:	35 97       	sbiw	r30, 0x05	; 5
    be00:	80 81       	ld	r24, Z
    be02:	88 23       	and	r24, r24
    be04:	09 f4       	brne	.+2      	; 0xbe08 <animate_shot+0xee>
    be06:	63 c0       	rjmp	.+198    	; 0xbece <animate_shot+0x1b4>
    be08:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    be0a:	a0 80       	ld	r10, Z
    be0c:	aa 0c       	add	r10, r10
    be0e:	aa 0c       	add	r10, r10
    be10:	aa 0c       	add	r10, r10
    be12:	31 97       	sbiw	r30, 0x01	; 1
    be14:	c0 80       	ld	r12, Z
    be16:	cc 0c       	add	r12, r12
    be18:	cc 0c       	add	r12, r12
    be1a:	cc 0c       	add	r12, r12
    be1c:	3a 97       	sbiw	r30, 0x0a	; 10
    be1e:	00 81       	ld	r16, Z
    be20:	09 1b       	sub	r16, r25
    be22:	ec 81       	ldd	r30, Y+4	; 0x04
    be24:	fd 81       	ldd	r31, Y+5	; 0x05
    be26:	80 81       	ld	r24, Z
    be28:	f1 01       	movw	r30, r2
    be2a:	3a 97       	sbiw	r30, 0x0a	; 10
    be2c:	e0 80       	ld	r14, Z
    be2e:	28 e0       	ldi	r18, 0x08	; 8
    be30:	48 e0       	ldi	r20, 0x08	; 8
    be32:	ec 81       	ldd	r30, Y+4	; 0x04
    be34:	fd 81       	ldd	r31, Y+5	; 0x05
    be36:	62 81       	ldd	r22, Z+2	; 0x02
    be38:	89 1b       	sub	r24, r25
    be3a:	9b 83       	std	Y+3, r25	; 0x03
    be3c:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    be40:	9b 81       	ldd	r25, Y+3	; 0x03
    be42:	88 23       	and	r24, r24
    be44:	09 f4       	brne	.+2      	; 0xbe48 <animate_shot+0x12e>
    be46:	43 c0       	rjmp	.+134    	; 0xbece <animate_shot+0x1b4>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    be48:	41 e0       	ldi	r20, 0x01	; 1
    be4a:	6f ef       	ldi	r22, 0xFF	; 255
    be4c:	84 e0       	ldi	r24, 0x04	; 4
    be4e:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    be52:	45 e3       	ldi	r20, 0x35	; 53
    be54:	29 81       	ldd	r18, Y+1	; 0x01
    be56:	3a 81       	ldd	r19, Y+2	; 0x02
    be58:	42 9f       	mul	r20, r18
    be5a:	c0 01       	movw	r24, r0
    be5c:	43 9f       	mul	r20, r19
    be5e:	90 0d       	add	r25, r0
    be60:	11 24       	eor	r1, r1
    be62:	fc 01       	movw	r30, r24
    be64:	e9 54       	subi	r30, 0x49	; 73
    be66:	f2 4f       	sbci	r31, 0xF2	; 242
    be68:	1f 01       	movw	r2, r30
    be6a:	df 01       	movw	r26, r30
    be6c:	a7 5d       	subi	r26, 0xD7	; 215
    be6e:	be 4f       	sbci	r27, 0xFE	; 254
    be70:	8c 91       	ld	r24, X
    be72:	f4 01       	movw	r30, r8
    be74:	31 97       	sbiw	r30, 0x01	; 1
    be76:	90 81       	ld	r25, Z
    be78:	89 1b       	sub	r24, r25
    be7a:	8c 93       	st	X, r24
						if (game.enemies[j].shield <= 0)
    be7c:	18 16       	cp	r1, r24
    be7e:	cc f0       	brlt	.+50     	; 0xbeb2 <animate_shot+0x198>
						{
							SFX_ENEMY_EXPLODE;
    be80:	41 e0       	ldi	r20, 0x01	; 1
    be82:	6f ef       	ldi	r22, 0xFF	; 255
    be84:	86 e0       	ldi	r24, 0x06	; 6
    be86:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    be8a:	f1 01       	movw	r30, r2
    be8c:	ef 5d       	subi	r30, 0xDF	; 223
    be8e:	fe 4f       	sbci	r31, 0xFE	; 254
    be90:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    be92:	31 97       	sbiw	r30, 0x01	; 1
    be94:	10 82       	st	Z, r1
							game.active_enemies--;
    be96:	80 91 d2 0d 	lds	r24, 0x0DD2
    be9a:	81 50       	subi	r24, 0x01	; 1
    be9c:	80 93 d2 0d 	sts	0x0DD2, r24
							game.level_score += KILL_SCORE;
    bea0:	80 91 bb 0d 	lds	r24, 0x0DBB
    bea4:	90 91 bc 0d 	lds	r25, 0x0DBC
    bea8:	0a 96       	adiw	r24, 0x0a	; 10
    beaa:	90 93 bc 0d 	sts	0x0DBC, r25
    beae:	80 93 bb 0d 	sts	0x0DBB, r24
						}
						player->shot[i].active = 0;
    beb2:	f4 01       	movw	r30, r8
    beb4:	10 82       	st	Z, r1
						player->active_shots--;
    beb6:	f2 01       	movw	r30, r4
    beb8:	87 81       	ldd	r24, Z+7	; 0x07
    beba:	81 50       	subi	r24, 0x01	; 1
    bebc:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    bebe:	01 e0       	ldi	r16, 0x01	; 1
    bec0:	21 e0       	ldi	r18, 0x01	; 1
    bec2:	40 e0       	ldi	r20, 0x00	; 0
    bec4:	60 ee       	ldi	r22, 0xE0	; 224
    bec6:	8f 2d       	mov	r24, r15
    bec8:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
						break;
    becc:	0e c0       	rjmp	.+28     	; 0xbeea <animate_shot+0x1d0>
    bece:	29 81       	ldd	r18, Y+1	; 0x01
    bed0:	3a 81       	ldd	r19, Y+2	; 0x02
    bed2:	2f 5f       	subi	r18, 0xFF	; 255
    bed4:	3f 4f       	sbci	r19, 0xFF	; 255
    bed6:	3a 83       	std	Y+2, r19	; 0x02
    bed8:	29 83       	std	Y+1, r18	; 0x01
    beda:	35 e3       	ldi	r19, 0x35	; 53
    bedc:	23 0e       	add	r2, r19
    bede:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    bee0:	e9 81       	ldd	r30, Y+1	; 0x01
    bee2:	fa 81       	ldd	r31, Y+2	; 0x02
    bee4:	35 97       	sbiw	r30, 0x05	; 5
    bee6:	09 f0       	breq	.+2      	; 0xbeea <animate_shot+0x1d0>
    bee8:	85 cf       	rjmp	.-246    	; 0xbdf4 <animate_shot+0xda>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    beea:	f3 01       	movw	r30, r6
    beec:	85 85       	ldd	r24, Z+13	; 0x0d
    beee:	88 23       	and	r24, r24
    bef0:	09 f4       	brne	.+2      	; 0xbef4 <animate_shot+0x1da>
    bef2:	4e c0       	rjmp	.+156    	; 0xbf90 <animate_shot+0x276>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bef4:	90 91 b7 0d 	lds	r25, 0x0DB7
    bef8:	a4 84       	ldd	r10, Z+12	; 0x0c
    befa:	aa 0c       	add	r10, r10
    befc:	aa 0c       	add	r10, r10
    befe:	aa 0c       	add	r10, r10
    bf00:	c3 84       	ldd	r12, Z+11	; 0x0b
    bf02:	cc 0c       	add	r12, r12
    bf04:	cc 0c       	add	r12, r12
    bf06:	cc 0c       	add	r12, r12
    bf08:	00 81       	ld	r16, Z
    bf0a:	09 1b       	sub	r16, r25
    bf0c:	ec 81       	ldd	r30, Y+4	; 0x04
    bf0e:	fd 81       	ldd	r31, Y+5	; 0x05
    bf10:	80 81       	ld	r24, Z
    bf12:	f3 01       	movw	r30, r6
    bf14:	e2 80       	ldd	r14, Z+2	; 0x02
    bf16:	28 e0       	ldi	r18, 0x08	; 8
    bf18:	48 e0       	ldi	r20, 0x08	; 8
    bf1a:	ec 81       	ldd	r30, Y+4	; 0x04
    bf1c:	fd 81       	ldd	r31, Y+5	; 0x05
    bf1e:	62 81       	ldd	r22, Z+2	; 0x02
    bf20:	89 1b       	sub	r24, r25
    bf22:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBCollides>
    bf26:	88 23       	and	r24, r24
    bf28:	99 f1       	breq	.+102    	; 0xbf90 <animate_shot+0x276>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    bf2a:	41 e0       	ldi	r20, 0x01	; 1
    bf2c:	6f ef       	ldi	r22, 0xFF	; 255
    bf2e:	84 e0       	ldi	r24, 0x04	; 4
    bf30:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    bf34:	f3 01       	movw	r30, r6
    bf36:	87 85       	ldd	r24, Z+15	; 0x0f
    bf38:	f4 01       	movw	r30, r8
    bf3a:	31 97       	sbiw	r30, 0x01	; 1
    bf3c:	90 81       	ld	r25, Z
    bf3e:	89 1b       	sub	r24, r25
    bf40:	f3 01       	movw	r30, r6
    bf42:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    bf44:	18 16       	cp	r1, r24
    bf46:	bc f0       	brlt	.+46     	; 0xbf76 <animate_shot+0x25c>
							{
								SFX_PLAYER_EXPLODE;
    bf48:	41 e0       	ldi	r20, 0x01	; 1
    bf4a:	6f ef       	ldi	r22, 0xFF	; 255
    bf4c:	85 e0       	ldi	r24, 0x05	; 5
    bf4e:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
								other_player->shield = 0;
    bf52:	f3 01       	movw	r30, r6
    bf54:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    bf56:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    bf58:	f5 e5       	ldi	r31, 0x55	; 85
    bf5a:	6f 16       	cp	r6, r31
    bf5c:	fe e0       	ldi	r31, 0x0E	; 14
    bf5e:	7f 06       	cpc	r7, r31
    bf60:	51 f4       	brne	.+20     	; 0xbf76 <animate_shot+0x25c>
    bf62:	80 91 bb 0d 	lds	r24, 0x0DBB
    bf66:	90 91 bc 0d 	lds	r25, 0x0DBC
    bf6a:	8c 59       	subi	r24, 0x9C	; 156
    bf6c:	9f 4f       	sbci	r25, 0xFF	; 255
    bf6e:	90 93 bc 0d 	sts	0x0DBC, r25
    bf72:	80 93 bb 0d 	sts	0x0DBB, r24
							}
							player->shot[i].active = 0;
    bf76:	f4 01       	movw	r30, r8
    bf78:	10 82       	st	Z, r1
							player->active_shots--;
    bf7a:	f2 01       	movw	r30, r4
    bf7c:	87 81       	ldd	r24, Z+7	; 0x07
    bf7e:	81 50       	subi	r24, 0x01	; 1
    bf80:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    bf82:	01 e0       	ldi	r16, 0x01	; 1
    bf84:	21 e0       	ldi	r18, 0x01	; 1
    bf86:	40 e0       	ldi	r20, 0x00	; 0
    bf88:	60 ee       	ldi	r22, 0xE0	; 224
    bf8a:	8f 2d       	mov	r24, r15
    bf8c:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bf90:	1f 5f       	subi	r17, 0xFF	; 255
    bf92:	f4 e1       	ldi	r31, 0x14	; 20
    bf94:	8f 0e       	add	r8, r31
    bf96:	91 1c       	adc	r9, r1
    bf98:	2c 81       	ldd	r18, Y+4	; 0x04
    bf9a:	3d 81       	ldd	r19, Y+5	; 0x05
    bf9c:	2c 5e       	subi	r18, 0xEC	; 236
    bf9e:	3f 4f       	sbci	r19, 0xFF	; 255
    bfa0:	3d 83       	std	Y+5, r19	; 0x05
    bfa2:	2c 83       	std	Y+4, r18	; 0x04
    bfa4:	13 30       	cpi	r17, 0x03	; 3
    bfa6:	09 f0       	breq	.+2      	; 0xbfaa <animate_shot+0x290>
    bfa8:	dc ce       	rjmp	.-584    	; 0xbd62 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    bfaa:	0f 90       	pop	r0
    bfac:	0f 90       	pop	r0
    bfae:	0f 90       	pop	r0
    bfb0:	0f 90       	pop	r0
    bfb2:	0f 90       	pop	r0
    bfb4:	df 91       	pop	r29
    bfb6:	cf 91       	pop	r28
    bfb8:	1f 91       	pop	r17
    bfba:	0f 91       	pop	r16
    bfbc:	ff 90       	pop	r15
    bfbe:	ef 90       	pop	r14
    bfc0:	df 90       	pop	r13
    bfc2:	cf 90       	pop	r12
    bfc4:	bf 90       	pop	r11
    bfc6:	af 90       	pop	r10
    bfc8:	9f 90       	pop	r9
    bfca:	8f 90       	pop	r8
    bfcc:	7f 90       	pop	r7
    bfce:	6f 90       	pop	r6
    bfd0:	5f 90       	pop	r5
    bfd2:	4f 90       	pop	r4
    bfd4:	3f 90       	pop	r3
    bfd6:	2f 90       	pop	r2
    bfd8:	08 95       	ret

0000bfda <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    bfda:	7f 92       	push	r7
    bfdc:	8f 92       	push	r8
    bfde:	9f 92       	push	r9
    bfe0:	af 92       	push	r10
    bfe2:	bf 92       	push	r11
    bfe4:	cf 92       	push	r12
    bfe6:	df 92       	push	r13
    bfe8:	ef 92       	push	r14
    bfea:	ff 92       	push	r15
    bfec:	0f 93       	push	r16
    bfee:	1f 93       	push	r17
    bff0:	cf 93       	push	r28
    bff2:	df 93       	push	r29
    bff4:	1f 92       	push	r1
    bff6:	cd b7       	in	r28, 0x3d	; 61
    bff8:	de b7       	in	r29, 0x3e	; 62
    bffa:	6c 01       	movw	r12, r24
    bffc:	7b 01       	movw	r14, r22
    bffe:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c000:	cb 01       	movw	r24, r22
    c002:	29 83       	std	Y+1, r18	; 0x01
    c004:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c008:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c00a:	29 81       	ldd	r18, Y+1	; 0x01
    c00c:	20 9f       	mul	r18, r16
    c00e:	50 01       	movw	r10, r0
    c010:	11 24       	eor	r1, r1
    c012:	10 e0       	ldi	r17, 0x00	; 0
    c014:	81 2f       	mov	r24, r17
    c016:	90 e0       	ldi	r25, 0x00	; 0
    c018:	8a 15       	cp	r24, r10
    c01a:	9b 05       	cpc	r25, r11
    c01c:	54 f4       	brge	.+20     	; 0xc032 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c01e:	40 e0       	ldi	r20, 0x00	; 0
    c020:	b4 01       	movw	r22, r8
    c022:	81 2f       	mov	r24, r17
    c024:	87 0d       	add	r24, r7
    c026:	29 83       	std	Y+1, r18	; 0x01
    c028:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c02c:	1f 5f       	subi	r17, 0xFF	; 255
    c02e:	29 81       	ldd	r18, Y+1	; 0x01
    c030:	f1 cf       	rjmp	.-30     	; 0xc014 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c032:	f7 01       	movw	r30, r14
    c034:	84 81       	ldd	r24, Z+4	; 0x04
    c036:	88 23       	and	r24, r24
    c038:	51 f0       	breq	.+20     	; 0xc04e <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c03a:	f6 01       	movw	r30, r12
    c03c:	80 81       	ld	r24, Z
    c03e:	90 e1       	ldi	r25, 0x10	; 16
    c040:	98 27       	eor	r25, r24
    c042:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c044:	40 e0       	ldi	r20, 0x00	; 0
    c046:	60 ee       	ldi	r22, 0xE0	; 224
    c048:	87 2d       	mov	r24, r7
    c04a:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	}
	return anim->looped;
}
    c04e:	f7 01       	movw	r30, r14
    c050:	84 81       	ldd	r24, Z+4	; 0x04
    c052:	0f 90       	pop	r0
    c054:	df 91       	pop	r29
    c056:	cf 91       	pop	r28
    c058:	1f 91       	pop	r17
    c05a:	0f 91       	pop	r16
    c05c:	ff 90       	pop	r15
    c05e:	ef 90       	pop	r14
    c060:	df 90       	pop	r13
    c062:	cf 90       	pop	r12
    c064:	bf 90       	pop	r11
    c066:	af 90       	pop	r10
    c068:	9f 90       	pop	r9
    c06a:	8f 90       	pop	r8
    c06c:	7f 90       	pop	r7
    c06e:	08 95       	ret

0000c070 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c070:	8f 92       	push	r8
    c072:	9f 92       	push	r9
    c074:	af 92       	push	r10
    c076:	bf 92       	push	r11
    c078:	cf 92       	push	r12
    c07a:	df 92       	push	r13
    c07c:	ef 92       	push	r14
    c07e:	ff 92       	push	r15
    c080:	0f 93       	push	r16
    c082:	1f 93       	push	r17
    c084:	cf 93       	push	r28
    c086:	df 93       	push	r29
    c088:	ec 01       	movw	r28, r24
    c08a:	c6 2e       	mov	r12, r22
    c08c:	14 2f       	mov	r17, r20
    c08e:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c090:	6c 81       	ldd	r22, Y+4	; 0x04
    c092:	77 27       	eor	r23, r23
    c094:	67 fd       	sbrc	r22, 7
    c096:	70 95       	com	r23
    c098:	87 2f       	mov	r24, r23
    c09a:	97 2f       	mov	r25, r23
    c09c:	0e 94 aa 72 	call	0xe554	; 0xe554 <__floatsisf>
    c0a0:	4b 01       	movw	r8, r22
    c0a2:	5c 01       	movw	r10, r24
    c0a4:	8e 81       	ldd	r24, Y+6	; 0x06
    c0a6:	68 2f       	mov	r22, r24
    c0a8:	70 e0       	ldi	r23, 0x00	; 0
    c0aa:	80 e0       	ldi	r24, 0x00	; 0
    c0ac:	90 e0       	ldi	r25, 0x00	; 0
    c0ae:	0e 94 aa 72 	call	0xe554	; 0xe554 <__floatsisf>
    c0b2:	29 e8       	ldi	r18, 0x89	; 137
    c0b4:	38 e8       	ldi	r19, 0x88	; 136
    c0b6:	48 e8       	ldi	r20, 0x88	; 136
    c0b8:	5c e3       	ldi	r21, 0x3C	; 60
    c0ba:	0e 94 36 73 	call	0xe66c	; 0xe66c <__mulsf3>
    c0be:	9b 01       	movw	r18, r22
    c0c0:	ac 01       	movw	r20, r24
    c0c2:	c5 01       	movw	r24, r10
    c0c4:	b4 01       	movw	r22, r8
    c0c6:	0e 94 13 72 	call	0xe426	; 0xe426 <__addsf3>
    c0ca:	0e 94 77 72 	call	0xe4ee	; 0xe4ee <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c0ce:	69 37       	cpi	r22, 0x79	; 121
    c0d0:	14 f4       	brge	.+4      	; 0xc0d6 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c0d2:	6c 83       	std	Y+4, r22	; 0x04
    c0d4:	02 c0       	rjmp	.+4      	; 0xc0da <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c0d6:	88 e7       	ldi	r24, 0x78	; 120
    c0d8:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c0da:	60 91 d1 0d 	lds	r22, 0x0DD1
    c0de:	8d 81       	ldd	r24, Y+5	; 0x05
    c0e0:	0e 94 2c 4d 	call	0x9a58	; 0x9a58 <LBMoveDelta>
    c0e4:	28 81       	ld	r18, Y
    c0e6:	39 81       	ldd	r19, Y+1	; 0x01
    c0e8:	82 0f       	add	r24, r18
    c0ea:	93 1f       	adc	r25, r19
    c0ec:	99 83       	std	Y+1, r25	; 0x01
    c0ee:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c0f0:	60 91 d1 0d 	lds	r22, 0x0DD1
    c0f4:	8c 81       	ldd	r24, Y+4	; 0x04
    c0f6:	0e 94 2c 4d 	call	0x9a58	; 0x9a58 <LBMoveDelta>
    c0fa:	ea 81       	ldd	r30, Y+2	; 0x02
    c0fc:	fb 81       	ldd	r31, Y+3	; 0x03
    c0fe:	8e 0f       	add	r24, r30
    c100:	9f 1f       	adc	r25, r31
    c102:	9b 83       	std	Y+3, r25	; 0x03
    c104:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c106:	4d 2d       	mov	r20, r13
    c108:	61 2f       	mov	r22, r17
    c10a:	ce 01       	movw	r24, r28
    c10c:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <collision_detect_level>
    c110:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c112:	88 23       	and	r24, r24
    c114:	41 f0       	breq	.+16     	; 0xc126 <animate_sprite+0xb6>
    c116:	00 23       	and	r16, r16
    c118:	31 f0       	breq	.+12     	; 0xc126 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c11a:	88 e0       	ldi	r24, 0x08	; 8
    c11c:	e8 9e       	mul	r14, r24
    c11e:	70 01       	movw	r14, r0
    c120:	11 24       	eor	r1, r1
    c122:	fb 82       	std	Y+3, r15	; 0x03
    c124:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c126:	3a 81       	ldd	r19, Y+2	; 0x02
    c128:	80 91 bf 0d 	lds	r24, 0x0DBF
    c12c:	43 2f       	mov	r20, r19
    c12e:	48 1b       	sub	r20, r24
    c130:	98 81       	ld	r25, Y
    c132:	80 91 b7 0d 	lds	r24, 0x0DB7
    c136:	69 2f       	mov	r22, r25
    c138:	68 1b       	sub	r22, r24
    c13a:	0d 2d       	mov	r16, r13
    c13c:	21 2f       	mov	r18, r17
    c13e:	8c 2d       	mov	r24, r12
    c140:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	return result;
}
    c144:	8b 2d       	mov	r24, r11
    c146:	df 91       	pop	r29
    c148:	cf 91       	pop	r28
    c14a:	1f 91       	pop	r17
    c14c:	0f 91       	pop	r16
    c14e:	ff 90       	pop	r15
    c150:	ef 90       	pop	r14
    c152:	df 90       	pop	r13
    c154:	cf 90       	pop	r12
    c156:	bf 90       	pop	r11
    c158:	af 90       	pop	r10
    c15a:	9f 90       	pop	r9
    c15c:	8f 90       	pop	r8
    c15e:	08 95       	ret

0000c160 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c160:	ef 92       	push	r14
    c162:	0f 93       	push	r16
    c164:	fc 01       	movw	r30, r24
    c166:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    c168:	90 85       	ldd	r25, Z+8	; 0x08
    c16a:	94 ff       	sbrs	r25, 4
    c16c:	0f c0       	rjmp	.+30     	; 0xc18c <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c16e:	92 81       	ldd	r25, Z+2	; 0x02
    c170:	20 91 bf 0d 	lds	r18, 0x0DBF
    c174:	49 2f       	mov	r20, r25
    c176:	42 1b       	sub	r20, r18
    c178:	90 81       	ld	r25, Z
    c17a:	20 91 b7 0d 	lds	r18, 0x0DB7
    c17e:	69 2f       	mov	r22, r25
    c180:	62 1b       	sub	r22, r18
    c182:	04 85       	ldd	r16, Z+12	; 0x0c
    c184:	23 85       	ldd	r18, Z+11	; 0x0b
    c186:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
    c18a:	14 c0       	rjmp	.+40     	; 0xc1b4 <animate_player+0x54>
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c18c:	e1 2c       	mov	r14, r1
    c18e:	00 e0       	ldi	r16, 0x00	; 0
    c190:	24 85       	ldd	r18, Z+12	; 0x0c
    c192:	43 85       	ldd	r20, Z+11	; 0x0b
    c194:	68 2f       	mov	r22, r24
    c196:	cf 01       	movw	r24, r30
    c198:	0e 94 38 60 	call	0xc070	; 0xc070 <animate_sprite>
    c19c:	82 30       	cpi	r24, 0x02	; 2
    c19e:	50 f0       	brcs	.+20     	; 0xc1b4 <animate_player+0x54>
	{
		SFX_PLAYER_EXPLODE;
    c1a0:	41 e0       	ldi	r20, 0x01	; 1
    c1a2:	6f ef       	ldi	r22, 0xFF	; 255
    c1a4:	85 e0       	ldi	r24, 0x05	; 5
    c1a6:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
		game.player.shield = 0;
    c1aa:	10 92 e9 0d 	sts	0x0DE9, r1
		game.player.flags = EXPLODING;
    c1ae:	80 e1       	ldi	r24, 0x10	; 16
    c1b0:	80 93 e2 0d 	sts	0x0DE2, r24
	}
}
    c1b4:	0f 91       	pop	r16
    c1b6:	ef 90       	pop	r14
    c1b8:	08 95       	ret

0000c1ba <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c1ba:	1f 93       	push	r17
    c1bc:	cf 93       	push	r28
    c1be:	df 93       	push	r29
    c1c0:	ec 01       	movw	r28, r24
    c1c2:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c1c4:	98 85       	ldd	r25, Y+8	; 0x08
    c1c6:	89 2f       	mov	r24, r25
    c1c8:	88 70       	andi	r24, 0x08	; 8
    c1ca:	93 ff       	sbrs	r25, 3
    c1cc:	14 c0       	rjmp	.+40     	; 0xc1f6 <update_spider_enemy+0x3c>
    c1ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    c1d0:	20 38       	cpi	r18, 0x80	; 128
    c1d2:	89 f4       	brne	.+34     	; 0xc1f6 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c1d4:	81 e0       	ldi	r24, 0x01	; 1
    c1d6:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c1d8:	8c e9       	ldi	r24, 0x9C	; 156
    c1da:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c1dc:	88 ec       	ldi	r24, 0xC8	; 200
    c1de:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c1e0:	8c e3       	ldi	r24, 0x3C	; 60
    c1e2:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c1e4:	89 85       	ldd	r24, Y+9	; 0x09
    c1e6:	81 11       	cpse	r24, r1
    c1e8:	02 c0       	rjmp	.+4      	; 0xc1ee <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c1ea:	84 ec       	ldi	r24, 0xC4	; 196
    c1ec:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c1ee:	40 e0       	ldi	r20, 0x00	; 0
    c1f0:	6a e3       	ldi	r22, 0x3A	; 58
    c1f2:	71 e3       	ldi	r23, 0x31	; 49
    c1f4:	19 c0       	rjmp	.+50     	; 0xc228 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c1f6:	90 ff       	sbrs	r25, 0
    c1f8:	0f c0       	rjmp	.+30     	; 0xc218 <update_spider_enemy+0x5e>
    c1fa:	9e 81       	ldd	r25, Y+6	; 0x06
    c1fc:	91 11       	cpse	r25, r1
    c1fe:	0c c0       	rjmp	.+24     	; 0xc218 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c200:	88 e0       	ldi	r24, 0x08	; 8
    c202:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c204:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c206:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c208:	89 85       	ldd	r24, Y+9	; 0x09
    c20a:	81 11       	cpse	r24, r1
    c20c:	03 c0       	rjmp	.+6      	; 0xc214 <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c20e:	81 e0       	ldi	r24, 0x01	; 1
    c210:	89 87       	std	Y+9, r24	; 0x09
    c212:	0d c0       	rjmp	.+26     	; 0xc22e <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c214:	19 86       	std	Y+9, r1	; 0x09
    c216:	0b c0       	rjmp	.+22     	; 0xc22e <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c218:	88 23       	and	r24, r24
    c21a:	49 f0       	breq	.+18     	; 0xc22e <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c21c:	ce 01       	movw	r24, r28
    c21e:	85 96       	adiw	r24, 0x25	; 37
    c220:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c224:	40 e0       	ldi	r20, 0x00	; 0
    c226:	bc 01       	movw	r22, r24
    c228:	81 2f       	mov	r24, r17
    c22a:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	}
	e->frame_count++;
    c22e:	8d 85       	ldd	r24, Y+13	; 0x0d
    c230:	8f 5f       	subi	r24, 0xFF	; 255
    c232:	8d 87       	std	Y+13, r24	; 0x0d
}
    c234:	df 91       	pop	r29
    c236:	cf 91       	pop	r28
    c238:	1f 91       	pop	r17
    c23a:	08 95       	ret

0000c23c <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c23c:	cf 93       	push	r28
    c23e:	fc 01       	movw	r30, r24
    c240:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c242:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c244:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    c246:	40 91 da 0d 	lds	r20, 0x0DDA
    c24a:	50 91 db 0d 	lds	r21, 0x0DDB
    c24e:	20 81       	ld	r18, Z
    c250:	31 81       	ldd	r19, Z+1	; 0x01
    c252:	85 96       	adiw	r24, 0x25	; 37
    c254:	24 17       	cp	r18, r20
    c256:	35 07       	cpc	r19, r21
    c258:	38 f4       	brcc	.+14     	; 0xc268 <update_turret_enemy+0x2c>
    c25a:	24 85       	ldd	r18, Z+12	; 0x0c
    c25c:	26 30       	cpi	r18, 0x06	; 6
    c25e:	21 f0       	breq	.+8      	; 0xc268 <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c260:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c264:	41 e0       	ldi	r20, 0x01	; 1
    c266:	03 c0       	rjmp	.+6      	; 0xc26e <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c268:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c26c:	40 e0       	ldi	r20, 0x00	; 0
    c26e:	bc 01       	movw	r22, r24
    c270:	8c 2f       	mov	r24, r28
	}
}
    c272:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c274:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000c278 <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c278:	cf 93       	push	r28
    c27a:	fc 01       	movw	r30, r24
    c27c:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c27e:	82 ee       	ldi	r24, 0xE2	; 226
    c280:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c282:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c284:	cf 01       	movw	r24, r30
    c286:	85 96       	adiw	r24, 0x25	; 37
    c288:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c28c:	40 e0       	ldi	r20, 0x00	; 0
    c28e:	bc 01       	movw	r22, r24
    c290:	8c 2f       	mov	r24, r28
}
    c292:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c294:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000c298 <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c298:	cf 93       	push	r28
    c29a:	fc 01       	movw	r30, r24
    c29c:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c29e:	8a e0       	ldi	r24, 0x0A	; 10
    c2a0:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c2a2:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c2a4:	cf 01       	movw	r24, r30
    c2a6:	85 96       	adiw	r24, 0x25	; 37
    c2a8:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c2ac:	40 e0       	ldi	r20, 0x00	; 0
    c2ae:	bc 01       	movw	r22, r24
    c2b0:	8c 2f       	mov	r24, r28
}
    c2b2:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c2b4:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000c2b8 <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    c2b8:	cf 93       	push	r28
    c2ba:	fc 01       	movw	r30, r24
    c2bc:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    c2be:	84 e1       	ldi	r24, 0x14	; 20
    c2c0:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    c2c2:	80 91 d1 0d 	lds	r24, 0x0DD1
    c2c6:	6c e3       	ldi	r22, 0x3C	; 60
    c2c8:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    c2cc:	91 11       	cpse	r25, r1
    c2ce:	03 c0       	rjmp	.+6      	; 0xc2d6 <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    c2d0:	94 81       	ldd	r25, Z+4	; 0x04
    c2d2:	91 95       	neg	r25
    c2d4:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c2d6:	cf 01       	movw	r24, r30
    c2d8:	85 96       	adiw	r24, 0x25	; 37
    c2da:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c2de:	40 e0       	ldi	r20, 0x00	; 0
    c2e0:	bc 01       	movw	r22, r24
    c2e2:	8c 2f       	mov	r24, r28
}
    c2e4:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c2e6:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000c2ea <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c2ea:	cf 93       	push	r28
    c2ec:	fc 01       	movw	r30, r24
    c2ee:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c2f0:	8e e1       	ldi	r24, 0x1E	; 30
    c2f2:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c2f4:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c2f6:	cf 01       	movw	r24, r30
    c2f8:	85 96       	adiw	r24, 0x25	; 37
    c2fa:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c2fe:	40 e0       	ldi	r20, 0x00	; 0
    c300:	bc 01       	movw	r22, r24
    c302:	8c 2f       	mov	r24, r28
}
    c304:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c306:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000c30a <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c30a:	cf 93       	push	r28
    c30c:	fc 01       	movw	r30, r24
    c30e:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c310:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c312:	8e e1       	ldi	r24, 0x1E	; 30
    c314:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c316:	80 91 cc 0d 	lds	r24, 0x0DCC
    c31a:	82 30       	cpi	r24, 0x02	; 2
    c31c:	11 f4       	brne	.+4      	; 0xc322 <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c31e:	82 ee       	ldi	r24, 0xE2	; 226
    c320:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c322:	22 81       	ldd	r18, Z+2	; 0x02
    c324:	33 81       	ldd	r19, Z+3	; 0x03
    c326:	24 50       	subi	r18, 0x04	; 4
    c328:	31 09       	sbc	r19, r1
    c32a:	2d 3b       	cpi	r18, 0xBD	; 189
    c32c:	31 05       	cpc	r19, r1
    c32e:	38 f0       	brcs	.+14     	; 0xc33e <update_level_hazard+0x34>
    c330:	27 85       	ldd	r18, Z+15	; 0x0f
    c332:	88 e0       	ldi	r24, 0x08	; 8
    c334:	28 9f       	mul	r18, r24
    c336:	90 01       	movw	r18, r0
    c338:	11 24       	eor	r1, r1
    c33a:	33 83       	std	Z+3, r19	; 0x03
    c33c:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c33e:	cf 01       	movw	r24, r30
    c340:	85 96       	adiw	r24, 0x25	; 37
    c342:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c346:	40 e0       	ldi	r20, 0x00	; 0
    c348:	bc 01       	movw	r22, r24
    c34a:	8c 2f       	mov	r24, r28
}
    c34c:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c34e:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000c352 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c352:	cf 93       	push	r28
    c354:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c356:	0c 96       	adiw	r24, 0x0c	; 12
    c358:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    c35c:	40 e0       	ldi	r20, 0x00	; 0
    c35e:	bc 01       	movw	r22, r24
    c360:	8c 2f       	mov	r24, r28
}
    c362:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c364:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000c368 <update_enemies>:
}

void update_enemies()
{
    c368:	cf 92       	push	r12
    c36a:	df 92       	push	r13
    c36c:	ef 92       	push	r14
    c36e:	ff 92       	push	r15
    c370:	0f 93       	push	r16
    c372:	1f 93       	push	r17
    c374:	cf 93       	push	r28
    c376:	df 93       	push	r29
    c378:	8b ed       	ldi	r24, 0xDB	; 219
    c37a:	e8 2e       	mov	r14, r24
    c37c:	8e e0       	ldi	r24, 0x0E	; 14
    c37e:	f8 2e       	mov	r15, r24
    c380:	c0 ed       	ldi	r28, 0xD0	; 208
    c382:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c384:	19 e0       	ldi	r17, 0x09	; 9
    c386:	f7 01       	movw	r30, r14
    c388:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c38a:	80 81       	ld	r24, Z
    c38c:	97 01       	movw	r18, r14
    c38e:	21 50       	subi	r18, 0x01	; 1
    c390:	31 09       	sbc	r19, r1
    c392:	69 01       	movw	r12, r18
    c394:	84 ff       	sbrs	r24, 4
    c396:	0d c0       	rjmp	.+26     	; 0xc3b2 <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c398:	d7 01       	movw	r26, r14
    c39a:	0c 91       	ld	r16, X
    c39c:	f9 01       	movw	r30, r18
    c39e:	20 81       	ld	r18, Z
    c3a0:	41 2f       	mov	r20, r17
    c3a2:	be 01       	movw	r22, r28
    c3a4:	63 5d       	subi	r22, 0xD3	; 211
    c3a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c3a8:	ce 01       	movw	r24, r28
    c3aa:	08 96       	adiw	r24, 0x08	; 8
    c3ac:	0e 94 ed 5f 	call	0xbfda	; 0xbfda <map_explosion>
    c3b0:	2e c0       	rjmp	.+92     	; 0xc40e <update_enemies+0xa6>
    c3b2:	f7 01       	movw	r30, r14
    c3b4:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c3b6:	80 81       	ld	r24, Z
    c3b8:	88 23       	and	r24, r24
    c3ba:	49 f1       	breq	.+82     	; 0xc40e <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c3bc:	d7 01       	movw	r26, r14
    c3be:	11 96       	adiw	r26, 0x01	; 1
    c3c0:	ec 91       	ld	r30, X
    c3c2:	8e 2f       	mov	r24, r30
    c3c4:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c3c6:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c3c8:	89 30       	cpi	r24, 0x09	; 9
    c3ca:	91 05       	cpc	r25, r1
    c3cc:	e8 f4       	brcc	.+58     	; 0xc408 <update_enemies+0xa0>
    c3ce:	fc 01       	movw	r30, r24
    c3d0:	e8 5c       	subi	r30, 0xC8	; 200
    c3d2:	ff 4f       	sbci	r31, 0xFF	; 255
    c3d4:	0c 94 0c 72 	jmp	0xe418	; 0xe418 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c3d8:	ce 01       	movw	r24, r28
    c3da:	0e 94 dd 60 	call	0xc1ba	; 0xc1ba <update_spider_enemy>
    c3de:	17 c0       	rjmp	.+46     	; 0xc40e <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    c3e0:	ce 01       	movw	r24, r28
    c3e2:	0e 94 1e 61 	call	0xc23c	; 0xc23c <update_turret_enemy>
    c3e6:	13 c0       	rjmp	.+38     	; 0xc40e <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c3e8:	ce 01       	movw	r24, r28
    c3ea:	0e 94 3c 61 	call	0xc278	; 0xc278 <update_drone_enemy>
    c3ee:	0f c0       	rjmp	.+30     	; 0xc40e <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c3f0:	ce 01       	movw	r24, r28
    c3f2:	0e 94 75 61 	call	0xc2ea	; 0xc2ea <update_shark_enemy>
    c3f6:	0b c0       	rjmp	.+22     	; 0xc40e <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c3f8:	ce 01       	movw	r24, r28
    c3fa:	0e 94 4c 61 	call	0xc298	; 0xc298 <update_globe_enemy>
    c3fe:	07 c0       	rjmp	.+14     	; 0xc40e <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    c400:	ce 01       	movw	r24, r28
    c402:	0e 94 5c 61 	call	0xc2b8	; 0xc2b8 <update_xwing_enemy>
    c406:	03 c0       	rjmp	.+6      	; 0xc40e <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    c408:	ce 01       	movw	r24, r28
    c40a:	0e 94 85 61 	call	0xc30a	; 0xc30a <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c40e:	f6 01       	movw	r30, r12
    c410:	90 81       	ld	r25, Z
    c412:	d7 01       	movw	r26, r14
    c414:	8c 91       	ld	r24, X
    c416:	98 9f       	mul	r25, r24
    c418:	10 0d       	add	r17, r0
    c41a:	11 24       	eor	r1, r1
    c41c:	b5 e3       	ldi	r27, 0x35	; 53
    c41e:	eb 0e       	add	r14, r27
    c420:	f1 1c       	adc	r15, r1
    c422:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c424:	e4 ee       	ldi	r30, 0xE4	; 228
    c426:	ee 16       	cp	r14, r30
    c428:	ef e0       	ldi	r30, 0x0F	; 15
    c42a:	fe 06       	cpc	r15, r30
    c42c:	09 f0       	breq	.+2      	; 0xc430 <update_enemies+0xc8>
    c42e:	ab cf       	rjmp	.-170    	; 0xc386 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c430:	df 91       	pop	r29
    c432:	cf 91       	pop	r28
    c434:	1f 91       	pop	r17
    c436:	0f 91       	pop	r16
    c438:	ff 90       	pop	r15
    c43a:	ef 90       	pop	r14
    c43c:	df 90       	pop	r13
    c43e:	cf 90       	pop	r12
    c440:	08 95       	ret

0000c442 <update_enemy_shots>:

void update_enemy_shots()
{
    c442:	6f 92       	push	r6
    c444:	7f 92       	push	r7
    c446:	8f 92       	push	r8
    c448:	9f 92       	push	r9
    c44a:	bf 92       	push	r11
    c44c:	cf 92       	push	r12
    c44e:	df 92       	push	r13
    c450:	ef 92       	push	r14
    c452:	ff 92       	push	r15
    c454:	0f 93       	push	r16
    c456:	1f 93       	push	r17
    c458:	cf 93       	push	r28
    c45a:	df 93       	push	r29
    c45c:	1f 92       	push	r1
    c45e:	cd b7       	in	r28, 0x3d	; 61
    c460:	de b7       	in	r29, 0x3e	; 62
    c462:	8e ed       	ldi	r24, 0xDE	; 222
    c464:	68 2e       	mov	r6, r24
    c466:	8e e0       	ldi	r24, 0x0E	; 14
    c468:	78 2e       	mov	r7, r24
    c46a:	9b ee       	ldi	r25, 0xEB	; 235
    c46c:	e9 2e       	mov	r14, r25
    c46e:	9e e0       	ldi	r25, 0x0E	; 14
    c470:	f9 2e       	mov	r15, r25
    c472:	25 ee       	ldi	r18, 0xE5	; 229
    c474:	c2 2e       	mov	r12, r18
    c476:	2e e0       	ldi	r18, 0x0E	; 14
    c478:	d2 2e       	mov	r13, r18
    c47a:	00 e1       	ldi	r16, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c47c:	bb 24       	eor	r11, r11
    c47e:	b3 94       	inc	r11
    c480:	6f ef       	ldi	r22, 0xFF	; 255
    c482:	60 0f       	add	r22, r16
    c484:	f3 01       	movw	r30, r6
    c486:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c488:	80 81       	ld	r24, Z
    c48a:	35 97       	sbiw	r30, 0x05	; 5
    c48c:	82 30       	cpi	r24, 0x02	; 2
    c48e:	09 f4       	brne	.+2      	; 0xc492 <update_enemy_shots+0x50>
    c490:	55 c0       	rjmp	.+170    	; 0xc53c <update_enemy_shots+0xfa>
    c492:	90 81       	ld	r25, Z
    c494:	99 23       	and	r25, r25
    c496:	09 f4       	brne	.+2      	; 0xc49a <update_enemy_shots+0x58>
    c498:	51 c0       	rjmp	.+162    	; 0xc53c <update_enemy_shots+0xfa>
    c49a:	d3 01       	movw	r26, r6
    c49c:	9c 91       	ld	r25, X
    c49e:	9c 33       	cpi	r25, 0x3C	; 60
    c4a0:	08 f4       	brcc	.+2      	; 0xc4a4 <update_enemy_shots+0x62>
    c4a2:	4c c0       	rjmp	.+152    	; 0xc53c <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    c4a4:	1c 92       	st	X, r1
    c4a6:	f7 01       	movw	r30, r14
    c4a8:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c4aa:	90 81       	ld	r25, Z
    c4ac:	97 30       	cpi	r25, 0x07	; 7
    c4ae:	09 f0       	breq	.+2      	; 0xc4b2 <update_enemy_shots+0x70>
    c4b0:	4c c0       	rjmp	.+152    	; 0xc54a <update_enemy_shots+0x108>
    c4b2:	f7 01       	movw	r30, r14
				{
					if (!game.enemies[i].shot[j].active)
    c4b4:	92 91       	ld	r25, -Z
    c4b6:	91 11       	cpse	r25, r1
    c4b8:	3c c0       	rjmp	.+120    	; 0xc532 <update_enemy_shots+0xf0>
					{
						game.enemies[i].shot[j].active = 1;
    c4ba:	b0 82       	st	Z, r11
    c4bc:	f3 01       	movw	r30, r6
    c4be:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c4c0:	20 81       	ld	r18, Z
    c4c2:	31 81       	ldd	r19, Z+1	; 0x01
    c4c4:	f3 01       	movw	r30, r6
    c4c6:	34 83       	std	Z+4, r19	; 0x04
    c4c8:	23 83       	std	Z+3, r18	; 0x03
    c4ca:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c4cc:	40 81       	ld	r20, Z
    c4ce:	51 81       	ldd	r21, Z+1	; 0x01
    c4d0:	fa 01       	movw	r30, r20
    c4d2:	e8 7f       	andi	r30, 0xF8	; 248
    c4d4:	16 96       	adiw	r26, 0x06	; 6
    c4d6:	fc 93       	st	X, r31
    c4d8:	ee 93       	st	-X, r30
    c4da:	15 97       	sbiw	r26, 0x05	; 5
    c4dc:	f7 01       	movw	r30, r14
    c4de:	10 81       	ld	r17, Z
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c4e0:	84 30       	cpi	r24, 0x04	; 4
    c4e2:	19 f4       	brne	.+6      	; 0xc4ea <update_enemy_shots+0xa8>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c4e4:	d6 01       	movw	r26, r12
    c4e6:	1c 93       	st	X, r17
    c4e8:	24 c0       	rjmp	.+72     	; 0xc532 <update_enemy_shots+0xf0>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c4ea:	85 30       	cpi	r24, 0x05	; 5
    c4ec:	59 f4       	brne	.+22     	; 0xc504 <update_enemy_shots+0xc2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c4ee:	f6 01       	movw	r30, r12
    c4f0:	10 83       	st	Z, r17
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c4f2:	80 91 dc 0d 	lds	r24, 0x0DDC
    c4f6:	90 91 dd 0d 	lds	r25, 0x0DDD
    c4fa:	48 17       	cp	r20, r24
    c4fc:	59 07       	cpc	r21, r25
    c4fe:	c8 f0       	brcs	.+50     	; 0xc532 <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c500:	11 95       	neg	r17
    c502:	16 c0       	rjmp	.+44     	; 0xc530 <update_enemy_shots+0xee>
    c504:	47 01       	movw	r8, r14
    c506:	f5 e0       	ldi	r31, 0x05	; 5
    c508:	8f 1a       	sub	r8, r31
    c50a:	91 08       	sbc	r9, r1
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c50c:	81 2f       	mov	r24, r17
    c50e:	81 95       	neg	r24
    c510:	d4 01       	movw	r26, r8
    c512:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    c514:	80 91 da 0d 	lds	r24, 0x0DDA
    c518:	90 91 db 0d 	lds	r25, 0x0DDB
    c51c:	82 17       	cp	r24, r18
    c51e:	93 07       	cpc	r25, r19
    c520:	40 f0       	brcs	.+16     	; 0xc532 <update_enemy_shots+0xf0>
    c522:	69 83       	std	Y+1, r22	; 0x01
    c524:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    c528:	69 81       	ldd	r22, Y+1	; 0x01
    c52a:	81 11       	cpse	r24, r1
    c52c:	02 c0       	rjmp	.+4      	; 0xc532 <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c52e:	f4 01       	movw	r30, r8
    c530:	10 83       	st	Z, r17
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c532:	c3 01       	movw	r24, r6
    c534:	03 96       	adiw	r24, 0x03	; 3
    c536:	0e 94 a9 61 	call	0xc352	; 0xc352 <update_basic_shot>
    c53a:	07 c0       	rjmp	.+14     	; 0xc54a <update_enemy_shots+0x108>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c53c:	80 81       	ld	r24, Z
    c53e:	88 23       	and	r24, r24
    c540:	21 f0       	breq	.+8      	; 0xc54a <update_enemy_shots+0x108>
		{
			game.enemies[i].shot_frame_count++;
    c542:	d3 01       	movw	r26, r6
    c544:	8c 91       	ld	r24, X
    c546:	8f 5f       	subi	r24, 0xFF	; 255
    c548:	8c 93       	st	X, r24
    c54a:	0f 5f       	subi	r16, 0xFF	; 255
    c54c:	b5 e3       	ldi	r27, 0x35	; 53
    c54e:	6b 0e       	add	r6, r27
    c550:	71 1c       	adc	r7, r1
    c552:	e5 e3       	ldi	r30, 0x35	; 53
    c554:	ee 0e       	add	r14, r30
    c556:	f1 1c       	adc	r15, r1
    c558:	f5 e3       	ldi	r31, 0x35	; 53
    c55a:	cf 0e       	add	r12, r31
    c55c:	d1 1c       	adc	r13, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c55e:	05 31       	cpi	r16, 0x15	; 21
    c560:	09 f0       	breq	.+2      	; 0xc564 <update_enemy_shots+0x122>
    c562:	8e cf       	rjmp	.-228    	; 0xc480 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c564:	0f 90       	pop	r0
    c566:	df 91       	pop	r29
    c568:	cf 91       	pop	r28
    c56a:	1f 91       	pop	r17
    c56c:	0f 91       	pop	r16
    c56e:	ff 90       	pop	r15
    c570:	ef 90       	pop	r14
    c572:	df 90       	pop	r13
    c574:	cf 90       	pop	r12
    c576:	bf 90       	pop	r11
    c578:	9f 90       	pop	r9
    c57a:	8f 90       	pop	r8
    c57c:	7f 90       	pop	r7
    c57e:	6f 90       	pop	r6
    c580:	08 95       	ret

0000c582 <animate_enemies>:

void animate_enemies()
{
    c582:	2f 92       	push	r2
    c584:	3f 92       	push	r3
    c586:	4f 92       	push	r4
    c588:	5f 92       	push	r5
    c58a:	6f 92       	push	r6
    c58c:	7f 92       	push	r7
    c58e:	8f 92       	push	r8
    c590:	9f 92       	push	r9
    c592:	af 92       	push	r10
    c594:	cf 92       	push	r12
    c596:	df 92       	push	r13
    c598:	ef 92       	push	r14
    c59a:	ff 92       	push	r15
    c59c:	0f 93       	push	r16
    c59e:	1f 93       	push	r17
    c5a0:	cf 93       	push	r28
    c5a2:	df 93       	push	r29
    c5a4:	00 d0       	rcall	.+0      	; 0xc5a6 <animate_enemies+0x24>
    c5a6:	00 d0       	rcall	.+0      	; 0xc5a8 <animate_enemies+0x26>
    c5a8:	cd b7       	in	r28, 0x3d	; 61
    c5aa:	de b7       	in	r29, 0x3e	; 62
    c5ac:	47 ed       	ldi	r20, 0xD7	; 215
    c5ae:	24 2e       	mov	r2, r20
    c5b0:	4e e0       	ldi	r20, 0x0E	; 14
    c5b2:	34 2e       	mov	r3, r20
    c5b4:	5a ed       	ldi	r21, 0xDA	; 218
    c5b6:	65 2e       	mov	r6, r21
    c5b8:	5e e0       	ldi	r21, 0x0E	; 14
    c5ba:	75 2e       	mov	r7, r21
    c5bc:	6b ed       	ldi	r22, 0xDB	; 219
    c5be:	86 2e       	mov	r8, r22
    c5c0:	6e e0       	ldi	r22, 0x0E	; 14
    c5c2:	96 2e       	mov	r9, r22
    c5c4:	80 ed       	ldi	r24, 0xD0	; 208
    c5c6:	9e e0       	ldi	r25, 0x0E	; 14
    c5c8:	9c 83       	std	Y+4, r25	; 0x04
    c5ca:	8b 83       	std	Y+3, r24	; 0x03
    c5cc:	a8 ed       	ldi	r26, 0xD8	; 216
    c5ce:	be e0       	ldi	r27, 0x0E	; 14
    c5d0:	ba 83       	std	Y+2, r27	; 0x02
    c5d2:	a9 83       	std	Y+1, r26	; 0x01
    c5d4:	41 2c       	mov	r4, r1
    c5d6:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    c5d8:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c5da:	70 e1       	ldi	r23, 0x10	; 16
    c5dc:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c5de:	f1 01       	movw	r30, r2
    c5e0:	80 81       	ld	r24, Z
    c5e2:	88 23       	and	r24, r24
    c5e4:	09 f4       	brne	.+2      	; 0xc5e8 <animate_enemies+0x66>
    c5e6:	9b c0       	rjmp	.+310    	; 0xc71e <animate_enemies+0x19c>
    c5e8:	a9 81       	ldd	r26, Y+1	; 0x01
    c5ea:	ba 81       	ldd	r27, Y+2	; 0x02
    c5ec:	8c 91       	ld	r24, X
    c5ee:	84 fd       	sbrc	r24, 4
    c5f0:	96 c0       	rjmp	.+300    	; 0xc71e <animate_enemies+0x19c>
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c5f2:	eb 81       	ldd	r30, Y+3	; 0x03
    c5f4:	fc 81       	ldd	r31, Y+4	; 0x04
    c5f6:	20 81       	ld	r18, Z
    c5f8:	31 81       	ldd	r19, Z+1	; 0x01
    c5fa:	e0 91 b7 0d 	lds	r30, 0x0DB7
    c5fe:	f0 91 b8 0d 	lds	r31, 0x0DB8
    c602:	2e 17       	cp	r18, r30
    c604:	3f 07       	cpc	r19, r31
    c606:	10 f1       	brcs	.+68     	; 0xc64c <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
    c608:	ab 81       	ldd	r26, Y+3	; 0x03
    c60a:	bc 81       	ldd	r27, Y+4	; 0x04
    c60c:	12 96       	adiw	r26, 0x02	; 2
    c60e:	ed 90       	ld	r14, X+
    c610:	fc 90       	ld	r15, X
    c612:	13 97       	sbiw	r26, 0x03	; 3
    c614:	80 91 bf 0d 	lds	r24, 0x0DBF
    c618:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c61a:	e8 16       	cp	r14, r24
    c61c:	f9 06       	cpc	r15, r25
    c61e:	b0 f0       	brcs	.+44     	; 0xc64c <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c620:	88 53       	subi	r24, 0x38	; 56
    c622:	9f 4f       	sbci	r25, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
    c624:	8e 15       	cp	r24, r14
    c626:	9f 05       	cpc	r25, r15
    c628:	88 f0       	brcs	.+34     	; 0xc64c <animate_enemies+0xca>
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c62a:	cf 01       	movw	r24, r30
    c62c:	80 52       	subi	r24, 0x20	; 32
    c62e:	9f 4f       	sbci	r25, 0xFF	; 255
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c630:	82 17       	cp	r24, r18
    c632:	93 07       	cpc	r25, r19
    c634:	c8 f4       	brcc	.+50     	; 0xc668 <animate_enemies+0xe6>
    c636:	d2 01       	movw	r26, r4
    c638:	a4 52       	subi	r26, 0x24	; 36
    c63a:	b1 4f       	sbci	r27, 0xF1	; 241
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c63c:	8c 91       	ld	r24, X
    c63e:	81 11       	cpse	r24, r1
    c640:	13 c0       	rjmp	.+38     	; 0xc668 <animate_enemies+0xe6>
    c642:	d4 01       	movw	r26, r8
    c644:	12 97       	sbiw	r26, 0x02	; 2
				 game.enemies[i].enemy_type == ENEMY_SPIDER &&
    c646:	8c 91       	ld	r24, X
    c648:	81 30       	cpi	r24, 0x01	; 1
    c64a:	71 f4       	brne	.+28     	; 0xc668 <animate_enemies+0xe6>
				 game.enemies[i].direction == D_RIGHT))
			{
				game.enemies[i].active = 0;
    c64c:	f1 01       	movw	r30, r2
    c64e:	10 82       	st	Z, r1
				game.active_enemies--;
    c650:	80 91 d2 0d 	lds	r24, 0x0DD2
    c654:	81 50       	subi	r24, 0x01	; 1
    c656:	80 93 d2 0d 	sts	0x0DD2, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c65a:	d4 01       	movw	r26, r8
    c65c:	0c 91       	ld	r16, X
    c65e:	f3 01       	movw	r30, r6
    c660:	20 81       	ld	r18, Z
    c662:	40 e0       	ldi	r20, 0x00	; 0
    c664:	60 ee       	ldi	r22, 0xE0	; 224
    c666:	6e c0       	rjmp	.+220    	; 0xc744 <animate_enemies+0x1c2>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c668:	02 2f       	mov	r16, r18
    c66a:	0e 1b       	sub	r16, r30
    c66c:	20 91 e6 0d 	lds	r18, 0x0DE6
    c670:	22 0f       	add	r18, r18
    c672:	22 0f       	add	r18, r18
    c674:	22 0f       	add	r18, r18
    c676:	40 91 e5 0d 	lds	r20, 0x0DE5
    c67a:	44 0f       	add	r20, r20
    c67c:	44 0f       	add	r20, r20
    c67e:	44 0f       	add	r20, r20
    c680:	80 91 da 0d 	lds	r24, 0x0DDA
    c684:	98 e0       	ldi	r25, 0x08	; 8
    c686:	a9 2e       	mov	r10, r25
    c688:	38 e0       	ldi	r19, 0x08	; 8
    c68a:	c3 2e       	mov	r12, r19
    c68c:	60 91 dc 0d 	lds	r22, 0x0DDC
    c690:	8e 1b       	sub	r24, r30
    c692:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBCollides>
    c696:	88 23       	and	r24, r24
    c698:	79 f0       	breq	.+30     	; 0xc6b8 <animate_enemies+0x136>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c69a:	80 91 e2 0d 	lds	r24, 0x0DE2
    c69e:	84 fd       	sbrc	r24, 4
    c6a0:	0b c0       	rjmp	.+22     	; 0xc6b8 <animate_enemies+0x136>
			)
			{
				SFX_PLAYER_EXPLODE;
    c6a2:	41 e0       	ldi	r20, 0x01	; 1
    c6a4:	6f ef       	ldi	r22, 0xFF	; 255
    c6a6:	85 e0       	ldi	r24, 0x05	; 5
    c6a8:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
				game.player.shield = 0;
    c6ac:	10 92 e9 0d 	sts	0x0DE9, r1
				game.player.flags = EXPLODING;
    c6b0:	80 e1       	ldi	r24, 0x10	; 16
    c6b2:	80 93 e2 0d 	sts	0x0DE2, r24
				return;
    c6b6:	6c c0       	rjmp	.+216    	; 0xc790 <animate_enemies+0x20e>
    c6b8:	c2 01       	movw	r24, r4
    c6ba:	89 54       	subi	r24, 0x49	; 73
    c6bc:	92 4f       	sbci	r25, 0xF2	; 242
    c6be:	fc 01       	movw	r30, r24
    c6c0:	eb 5d       	subi	r30, 0xDB	; 219
    c6c2:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c6c4:	20 81       	ld	r18, Z
    c6c6:	22 30       	cpi	r18, 0x02	; 2
    c6c8:	69 f4       	brne	.+26     	; 0xc6e4 <animate_enemies+0x162>
    c6ca:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c6cc:	e0 80       	ld	r14, Z
    c6ce:	01 e0       	ldi	r16, 0x01	; 1
    c6d0:	d4 01       	movw	r26, r8
    c6d2:	2c 91       	ld	r18, X
    c6d4:	f3 01       	movw	r30, r6
    c6d6:	40 81       	ld	r20, Z
    c6d8:	61 2f       	mov	r22, r17
    c6da:	8b 81       	ldd	r24, Y+3	; 0x03
    c6dc:	9c 81       	ldd	r25, Y+4	; 0x04
    c6de:	0e 94 38 60 	call	0xc070	; 0xc070 <animate_sprite>
    c6e2:	33 c0       	rjmp	.+102    	; 0xc74a <animate_enemies+0x1c8>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c6e4:	e1 2c       	mov	r14, r1
    c6e6:	00 e0       	ldi	r16, 0x00	; 0
    c6e8:	d4 01       	movw	r26, r8
    c6ea:	2c 91       	ld	r18, X
    c6ec:	f3 01       	movw	r30, r6
    c6ee:	40 81       	ld	r20, Z
    c6f0:	61 2f       	mov	r22, r17
    c6f2:	8b 81       	ldd	r24, Y+3	; 0x03
    c6f4:	9c 81       	ldd	r25, Y+4	; 0x04
    c6f6:	0e 94 38 60 	call	0xc070	; 0xc070 <animate_sprite>
    c6fa:	82 30       	cpi	r24, 0x02	; 2
    c6fc:	30 f1       	brcs	.+76     	; 0xc74a <animate_enemies+0x1c8>
			{
				SFX_ENEMY_EXPLODE;
    c6fe:	41 e0       	ldi	r20, 0x01	; 1
    c700:	6f ef       	ldi	r22, 0xFF	; 255
    c702:	86 e0       	ldi	r24, 0x06	; 6
    c704:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c708:	a9 81       	ldd	r26, Y+1	; 0x01
    c70a:	ba 81       	ldd	r27, Y+2	; 0x02
    c70c:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    c70e:	f1 01       	movw	r30, r2
    c710:	10 82       	st	Z, r1
				game.active_enemies--;
    c712:	80 91 d2 0d 	lds	r24, 0x0DD2
    c716:	81 50       	subi	r24, 0x01	; 1
    c718:	80 93 d2 0d 	sts	0x0DD2, r24
    c71c:	16 c0       	rjmp	.+44     	; 0xc74a <animate_enemies+0x1c8>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c71e:	a9 81       	ldd	r26, Y+1	; 0x01
    c720:	ba 81       	ldd	r27, Y+2	; 0x02
    c722:	8c 91       	ld	r24, X
    c724:	84 ff       	sbrs	r24, 4
    c726:	11 c0       	rjmp	.+34     	; 0xc74a <animate_enemies+0x1c8>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c728:	eb 81       	ldd	r30, Y+3	; 0x03
    c72a:	fc 81       	ldd	r31, Y+4	; 0x04
    c72c:	42 81       	ldd	r20, Z+2	; 0x02
    c72e:	80 91 bf 0d 	lds	r24, 0x0DBF
    c732:	48 1b       	sub	r20, r24
    c734:	60 81       	ld	r22, Z
    c736:	80 91 b7 0d 	lds	r24, 0x0DB7
    c73a:	68 1b       	sub	r22, r24
    c73c:	d4 01       	movw	r26, r8
    c73e:	0c 91       	ld	r16, X
    c740:	f3 01       	movw	r30, r6
    c742:	20 81       	ld	r18, Z
    c744:	81 2f       	mov	r24, r17
    c746:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c74a:	d4 01       	movw	r26, r8
    c74c:	9c 91       	ld	r25, X
    c74e:	f3 01       	movw	r30, r6
    c750:	80 81       	ld	r24, Z
    c752:	98 9f       	mul	r25, r24
    c754:	10 0d       	add	r17, r0
    c756:	11 24       	eor	r1, r1
    c758:	f5 e3       	ldi	r31, 0x35	; 53
    c75a:	2f 0e       	add	r2, r31
    c75c:	31 1c       	adc	r3, r1
    c75e:	85 e3       	ldi	r24, 0x35	; 53
    c760:	48 0e       	add	r4, r24
    c762:	51 1c       	adc	r5, r1
    c764:	95 e3       	ldi	r25, 0x35	; 53
    c766:	69 0e       	add	r6, r25
    c768:	71 1c       	adc	r7, r1
    c76a:	a5 e3       	ldi	r26, 0x35	; 53
    c76c:	8a 0e       	add	r8, r26
    c76e:	91 1c       	adc	r9, r1
    c770:	eb 81       	ldd	r30, Y+3	; 0x03
    c772:	fc 81       	ldd	r31, Y+4	; 0x04
    c774:	f5 96       	adiw	r30, 0x35	; 53
    c776:	fc 83       	std	Y+4, r31	; 0x04
    c778:	eb 83       	std	Y+3, r30	; 0x03
    c77a:	89 81       	ldd	r24, Y+1	; 0x01
    c77c:	9a 81       	ldd	r25, Y+2	; 0x02
    c77e:	c5 96       	adiw	r24, 0x35	; 53
    c780:	9a 83       	std	Y+2, r25	; 0x02
    c782:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c784:	99 e0       	ldi	r25, 0x09	; 9
    c786:	49 16       	cp	r4, r25
    c788:	91 e0       	ldi	r25, 0x01	; 1
    c78a:	59 06       	cpc	r5, r25
    c78c:	09 f0       	breq	.+2      	; 0xc790 <animate_enemies+0x20e>
    c78e:	27 cf       	rjmp	.-434    	; 0xc5de <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c790:	0f 90       	pop	r0
    c792:	0f 90       	pop	r0
    c794:	0f 90       	pop	r0
    c796:	0f 90       	pop	r0
    c798:	df 91       	pop	r29
    c79a:	cf 91       	pop	r28
    c79c:	1f 91       	pop	r17
    c79e:	0f 91       	pop	r16
    c7a0:	ff 90       	pop	r15
    c7a2:	ef 90       	pop	r14
    c7a4:	df 90       	pop	r13
    c7a6:	cf 90       	pop	r12
    c7a8:	af 90       	pop	r10
    c7aa:	9f 90       	pop	r9
    c7ac:	8f 90       	pop	r8
    c7ae:	7f 90       	pop	r7
    c7b0:	6f 90       	pop	r6
    c7b2:	5f 90       	pop	r5
    c7b4:	4f 90       	pop	r4
    c7b6:	3f 90       	pop	r3
    c7b8:	2f 90       	pop	r2
    c7ba:	08 95       	ret

0000c7bc <animate_enemy_shots>:

void animate_enemy_shots()
{
    c7bc:	4f 92       	push	r4
    c7be:	5f 92       	push	r5
    c7c0:	6f 92       	push	r6
    c7c2:	7f 92       	push	r7
    c7c4:	8f 92       	push	r8
    c7c6:	9f 92       	push	r9
    c7c8:	af 92       	push	r10
    c7ca:	cf 92       	push	r12
    c7cc:	df 92       	push	r13
    c7ce:	ef 92       	push	r14
    c7d0:	ff 92       	push	r15
    c7d2:	0f 93       	push	r16
    c7d4:	1f 93       	push	r17
    c7d6:	cf 93       	push	r28
    c7d8:	df 93       	push	r29
    c7da:	ca ee       	ldi	r28, 0xEA	; 234
    c7dc:	de e0       	ldi	r29, 0x0E	; 14
    c7de:	41 ee       	ldi	r20, 0xE1	; 225
    c7e0:	84 2e       	mov	r8, r20
    c7e2:	4e e0       	ldi	r20, 0x0E	; 14
    c7e4:	94 2e       	mov	r9, r20
	u8 slot = ENEMY_SHOT_SLOT;
    c7e6:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    c7e8:	50 e1       	ldi	r21, 0x10	; 16
    c7ea:	f5 2e       	mov	r15, r21
    c7ec:	fe 01       	movw	r30, r28
    c7ee:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c7f0:	80 81       	ld	r24, Z
    c7f2:	87 30       	cpi	r24, 0x07	; 7
    c7f4:	09 f0       	breq	.+2      	; 0xc7f8 <animate_enemy_shots+0x3c>
    c7f6:	73 c0       	rjmp	.+230    	; 0xc8de <animate_enemy_shots+0x122>
			{
				if (game.enemies[i].shot[j].active)
    c7f8:	88 81       	ld	r24, Y
    c7fa:	88 23       	and	r24, r24
    c7fc:	09 f4       	brne	.+2      	; 0xc800 <animate_enemy_shots+0x44>
    c7fe:	68 c0       	rjmp	.+208    	; 0xc8d0 <animate_enemy_shots+0x114>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c800:	c4 01       	movw	r24, r8
    c802:	0e 94 d9 5b 	call	0xb7b2	; 0xb7b2 <out_of_bounds>
    c806:	81 11       	cpse	r24, r1
    c808:	40 c0       	rjmp	.+128    	; 0xc88a <animate_enemy_shots+0xce>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c80a:	41 e0       	ldi	r20, 0x01	; 1
    c80c:	61 e0       	ldi	r22, 0x01	; 1
    c80e:	c4 01       	movw	r24, r8
    c810:	0e 94 7f 5c 	call	0xb8fe	; 0xb8fe <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c814:	81 11       	cpse	r24, r1
    c816:	39 c0       	rjmp	.+114    	; 0xc88a <animate_enemy_shots+0xce>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    c818:	f4 01       	movw	r30, r8
    c81a:	42 80       	ldd	r4, Z+2	; 0x02
    c81c:	53 80       	ldd	r5, Z+3	; 0x03
    c81e:	60 80       	ld	r6, Z
    c820:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c822:	d0 90 b7 0d 	lds	r13, 0x0DB7
    c826:	06 2d       	mov	r16, r6
    c828:	0d 19       	sub	r16, r13
    c82a:	20 91 e6 0d 	lds	r18, 0x0DE6
    c82e:	22 0f       	add	r18, r18
    c830:	22 0f       	add	r18, r18
    c832:	22 0f       	add	r18, r18
    c834:	40 91 e5 0d 	lds	r20, 0x0DE5
    c838:	44 0f       	add	r20, r20
    c83a:	44 0f       	add	r20, r20
    c83c:	44 0f       	add	r20, r20
    c83e:	80 91 da 0d 	lds	r24, 0x0DDA
    c842:	98 e0       	ldi	r25, 0x08	; 8
    c844:	a9 2e       	mov	r10, r25
    c846:	38 e0       	ldi	r19, 0x08	; 8
    c848:	c3 2e       	mov	r12, r19
    c84a:	e4 2c       	mov	r14, r4
    c84c:	60 91 dc 0d 	lds	r22, 0x0DDC
    c850:	8d 19       	sub	r24, r13
    c852:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBCollides>
    c856:	88 23       	and	r24, r24
    c858:	d1 f0       	breq	.+52     	; 0xc88e <animate_enemy_shots+0xd2>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    c85a:	41 e0       	ldi	r20, 0x01	; 1
    c85c:	6f ef       	ldi	r22, 0xFF	; 255
    c85e:	84 e0       	ldi	r24, 0x04	; 4
    c860:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    c864:	80 91 e9 0d 	lds	r24, 0x0DE9
    c868:	fe 01       	movw	r30, r28
    c86a:	31 97       	sbiw	r30, 0x01	; 1
    c86c:	90 81       	ld	r25, Z
    c86e:	89 1b       	sub	r24, r25
    c870:	80 93 e9 0d 	sts	0x0DE9, r24
#endif
						if (game.player.shield <= 0)
    c874:	18 16       	cp	r1, r24
    c876:	4c f0       	brlt	.+18     	; 0xc88a <animate_enemy_shots+0xce>
						{
							SFX_PLAYER_EXPLODE;
    c878:	41 e0       	ldi	r20, 0x01	; 1
    c87a:	6f ef       	ldi	r22, 0xFF	; 255
    c87c:	85 e0       	ldi	r24, 0x05	; 5
    c87e:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
							game.player.shield = 0;
    c882:	10 92 e9 0d 	sts	0x0DE9, r1
							game.player.flags = EXPLODING;
    c886:	f0 92 e2 0d 	sts	0x0DE2, r15
						}
						game.enemies[i].shot[j].active = 0;
    c88a:	18 82       	st	Y, r1
    c88c:	21 c0       	rjmp	.+66     	; 0xc8d0 <animate_enemy_shots+0x114>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    c88e:	00 91 d1 0d 	lds	r16, 0x0DD1
    c892:	60 2f       	mov	r22, r16
    c894:	fe 01       	movw	r30, r28
    c896:	34 97       	sbiw	r30, 0x04	; 4
    c898:	80 81       	ld	r24, Z
    c89a:	0e 94 2c 4d 	call	0x9a58	; 0x9a58 <LBMoveDelta>
    c89e:	68 0e       	add	r6, r24
    c8a0:	79 1e       	adc	r7, r25
    c8a2:	f4 01       	movw	r30, r8
    c8a4:	71 82       	std	Z+1, r7	; 0x01
    c8a6:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    c8a8:	60 2f       	mov	r22, r16
    c8aa:	fe 01       	movw	r30, r28
    c8ac:	35 97       	sbiw	r30, 0x05	; 5
    c8ae:	80 81       	ld	r24, Z
    c8b0:	0e 94 2c 4d 	call	0x9a58	; 0x9a58 <LBMoveDelta>
    c8b4:	48 0e       	add	r4, r24
    c8b6:	59 1e       	adc	r5, r25
    c8b8:	f4 01       	movw	r30, r8
    c8ba:	53 82       	std	Z+3, r5	; 0x03
    c8bc:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    c8be:	80 91 bf 0d 	lds	r24, 0x0DBF
    c8c2:	44 2d       	mov	r20, r4
    c8c4:	48 1b       	sub	r20, r24
    c8c6:	66 2d       	mov	r22, r6
    c8c8:	6d 19       	sub	r22, r13
    c8ca:	01 e0       	ldi	r16, 0x01	; 1
    c8cc:	21 e0       	ldi	r18, 0x01	; 1
    c8ce:	04 c0       	rjmp	.+8      	; 0xc8d8 <animate_enemy_shots+0x11c>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    c8d0:	01 e0       	ldi	r16, 0x01	; 1
    c8d2:	21 e0       	ldi	r18, 0x01	; 1
    c8d4:	40 e0       	ldi	r20, 0x00	; 0
    c8d6:	60 ee       	ldi	r22, 0xE0	; 224
    c8d8:	81 2f       	mov	r24, r17
    c8da:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
				}
			}
			slot += 1;
    c8de:	1f 5f       	subi	r17, 0xFF	; 255
    c8e0:	e5 96       	adiw	r28, 0x35	; 53
    c8e2:	f5 e3       	ldi	r31, 0x35	; 53
    c8e4:	8f 0e       	add	r8, r31
    c8e6:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c8e8:	14 31       	cpi	r17, 0x14	; 20
    c8ea:	09 f0       	breq	.+2      	; 0xc8ee <animate_enemy_shots+0x132>
    c8ec:	7f cf       	rjmp	.-258    	; 0xc7ec <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    c8ee:	df 91       	pop	r29
    c8f0:	cf 91       	pop	r28
    c8f2:	1f 91       	pop	r17
    c8f4:	0f 91       	pop	r16
    c8f6:	ff 90       	pop	r15
    c8f8:	ef 90       	pop	r14
    c8fa:	df 90       	pop	r13
    c8fc:	cf 90       	pop	r12
    c8fe:	af 90       	pop	r10
    c900:	9f 90       	pop	r9
    c902:	8f 90       	pop	r8
    c904:	7f 90       	pop	r7
    c906:	6f 90       	pop	r6
    c908:	5f 90       	pop	r5
    c90a:	4f 90       	pop	r4
    c90c:	08 95       	ret

0000c90e <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y)
{
    c90e:	ff 92       	push	r15
    c910:	0f 93       	push	r16
    c912:	1f 93       	push	r17
    c914:	cf 93       	push	r28
    c916:	df 93       	push	r29
    c918:	ec 01       	movw	r28, r24
    c91a:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    c91c:	8e e0       	ldi	r24, 0x0E	; 14
    c91e:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c920:	fe 01       	movw	r30, r28
    c922:	84 91       	lpm	r24, Z
    c924:	83 32       	cpi	r24, 0x23	; 35
    c926:	31 f1       	breq	.+76     	; 0xc974 <stream_text_middle+0x66>
	{
		ln = strnlen_P(dialogue, 255);
    c928:	6f ef       	ldi	r22, 0xFF	; 255
    c92a:	70 e0       	ldi	r23, 0x00	; 0
    c92c:	ce 01       	movw	r24, r28
    c92e:	0e 94 99 73 	call	0xe732	; 0xe732 <strnlen_P>
		x = 14 - ln / 2;
    c932:	86 95       	lsr	r24
    c934:	0f 2d       	mov	r16, r15
    c936:	08 1b       	sub	r16, r24
    c938:	0c 1b       	sub	r16, r28
    c93a:	8c 2f       	mov	r24, r28
    c93c:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c93e:	21 96       	adiw	r28, 0x01	; 1
    c940:	fe 01       	movw	r30, r28
    c942:	31 97       	sbiw	r30, 0x01	; 1
    c944:	44 91       	lpm	r20, Z
    c946:	44 23       	and	r20, r20
    c948:	99 f0       	breq	.+38     	; 0xc970 <stream_text_middle+0x62>
		{
			LBPrintChar(x++, y, c);
    c94a:	61 2f       	mov	r22, r17
    c94c:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    c950:	60 e0       	ldi	r22, 0x00	; 0
    c952:	8e e4       	ldi	r24, 0x4E	; 78
    c954:	9e e0       	ldi	r25, 0x0E	; 14
    c956:	0e 94 7d 4d 	call	0x9afa	; 0x9afa <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_A)) WaitUs(CHARACTER_DELAY_US);
    c95a:	80 91 52 0e 	lds	r24, 0x0E52
    c95e:	90 91 53 0e 	lds	r25, 0x0E53
    c962:	90 fd       	sbrc	r25, 0
    c964:	ea cf       	rjmp	.-44     	; 0xc93a <stream_text_middle+0x2c>
    c966:	80 e7       	ldi	r24, 0x70	; 112
    c968:	97 e1       	ldi	r25, 0x17	; 23
    c96a:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <WaitUs>
    c96e:	e5 cf       	rjmp	.-54     	; 0xc93a <stream_text_middle+0x2c>
		}
		y++;
    c970:	1f 5f       	subi	r17, 0xFF	; 255
    c972:	d6 cf       	rjmp	.-84     	; 0xc920 <stream_text_middle+0x12>
	}
}
    c974:	df 91       	pop	r29
    c976:	cf 91       	pop	r28
    c978:	1f 91       	pop	r17
    c97a:	0f 91       	pop	r16
    c97c:	ff 90       	pop	r15
    c97e:	08 95       	ret

0000c980 <print_scroll>:

void print_scroll(const unsigned char text[])
{
    c980:	0f 93       	push	r16
    c982:	cf 93       	push	r28
    c984:	df 93       	push	r29
    c986:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    c988:	40 e0       	ldi	r20, 0x00	; 0
    c98a:	6f ee       	ldi	r22, 0xEF	; 239
    c98c:	71 e3       	ldi	r23, 0x31	; 49
    c98e:	80 e0       	ldi	r24, 0x00	; 0
    c990:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    c994:	01 e0       	ldi	r16, 0x01	; 1
    c996:	21 e0       	ldi	r18, 0x01	; 1
    c998:	40 e3       	ldi	r20, 0x30	; 48
    c99a:	60 e5       	ldi	r22, 0x50	; 80
    c99c:	80 e0       	ldi	r24, 0x00	; 0
    c99e:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c9a2:	40 e0       	ldi	r20, 0x00	; 0
    c9a4:	6c ee       	ldi	r22, 0xEC	; 236
    c9a6:	71 e3       	ldi	r23, 0x31	; 49
    c9a8:	81 e0       	ldi	r24, 0x01	; 1
    c9aa:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    c9ae:	21 e0       	ldi	r18, 0x01	; 1
    c9b0:	40 e3       	ldi	r20, 0x30	; 48
    c9b2:	60 e6       	ldi	r22, 0x60	; 96
    c9b4:	81 e0       	ldi	r24, 0x01	; 1
    c9b6:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    c9ba:	40 e0       	ldi	r20, 0x00	; 0
    c9bc:	69 ee       	ldi	r22, 0xE9	; 233
    c9be:	71 e3       	ldi	r23, 0x31	; 49
    c9c0:	82 e0       	ldi	r24, 0x02	; 2
    c9c2:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    c9c6:	21 e0       	ldi	r18, 0x01	; 1
    c9c8:	40 e3       	ldi	r20, 0x30	; 48
    c9ca:	60 e7       	ldi	r22, 0x70	; 112
    c9cc:	82 e0       	ldi	r24, 0x02	; 2
    c9ce:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    c9d2:	40 e0       	ldi	r20, 0x00	; 0
    c9d4:	66 ee       	ldi	r22, 0xE6	; 230
    c9d6:	71 e3       	ldi	r23, 0x31	; 49
    c9d8:	83 e0       	ldi	r24, 0x03	; 3
    c9da:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    c9de:	21 e0       	ldi	r18, 0x01	; 1
    c9e0:	40 e3       	ldi	r20, 0x30	; 48
    c9e2:	60 e8       	ldi	r22, 0x80	; 128
    c9e4:	83 e0       	ldi	r24, 0x03	; 3
    c9e6:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c9ea:	40 e0       	ldi	r20, 0x00	; 0
    c9ec:	63 ee       	ldi	r22, 0xE3	; 227
    c9ee:	71 e3       	ldi	r23, 0x31	; 49
    c9f0:	84 e0       	ldi	r24, 0x04	; 4
    c9f2:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c9f6:	21 e0       	ldi	r18, 0x01	; 1
    c9f8:	40 e3       	ldi	r20, 0x30	; 48
    c9fa:	60 e9       	ldi	r22, 0x90	; 144
    c9fc:	84 e0       	ldi	r24, 0x04	; 4
    c9fe:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	LBRotateSprites();
    ca02:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	stream_text_middle((const char*) text, 12);
    ca06:	6c e0       	ldi	r22, 0x0C	; 12
    ca08:	ce 01       	movw	r24, r28
    ca0a:	0e 94 87 64 	call	0xc90e	; 0xc90e <stream_text_middle>
	LBWaitSeconds(2);
    ca0e:	82 e0       	ldi	r24, 0x02	; 2
}
    ca10:	df 91       	pop	r29
    ca12:	cf 91       	pop	r28
    ca14:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12);
	LBWaitSeconds(2);
    ca16:	0c 94 ae 4e 	jmp	0x9d5c	; 0x9d5c <LBWaitSeconds>

0000ca1a <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    ca1a:	ef 92       	push	r14
    ca1c:	ff 92       	push	r15
    ca1e:	0f 93       	push	r16
    ca20:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    ca22:	c8 2f       	mov	r28, r24
    ca24:	e6 2e       	mov	r14, r22
    ca26:	f1 2c       	mov	r15, r1
    ca28:	e8 0e       	add	r14, r24
    ca2a:	f1 1c       	adc	r15, r1
    ca2c:	8c 2f       	mov	r24, r28
    ca2e:	90 e0       	ldi	r25, 0x00	; 0
    ca30:	8e 15       	cp	r24, r14
    ca32:	9f 05       	cpc	r25, r15
    ca34:	7c f4       	brge	.+30     	; 0xca54 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    ca36:	40 e0       	ldi	r20, 0x00	; 0
    ca38:	67 e0       	ldi	r22, 0x07	; 7
    ca3a:	72 e3       	ldi	r23, 0x32	; 50
    ca3c:	8c 2f       	mov	r24, r28
    ca3e:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    ca42:	01 e0       	ldi	r16, 0x01	; 1
    ca44:	21 e0       	ldi	r18, 0x01	; 1
    ca46:	40 e0       	ldi	r20, 0x00	; 0
    ca48:	60 ee       	ldi	r22, 0xE0	; 224
    ca4a:	8c 2f       	mov	r24, r28
    ca4c:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    ca50:	cf 5f       	subi	r28, 0xFF	; 255
    ca52:	ec cf       	rjmp	.-40     	; 0xca2c <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    ca54:	cf 91       	pop	r28
    ca56:	0f 91       	pop	r16
    ca58:	ff 90       	pop	r15
    ca5a:	ef 90       	pop	r14
    ca5c:	08 95       	ret

0000ca5e <fade_through>:
#endif
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    ca5e:	61 e0       	ldi	r22, 0x01	; 1
    ca60:	81 e0       	ldi	r24, 0x01	; 1
    ca62:	0e 94 f7 4c 	call	0x99ee	; 0x99ee <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    ca66:	64 e1       	ldi	r22, 0x14	; 20
    ca68:	80 e0       	ldi	r24, 0x00	; 0
    ca6a:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
	LBRotateSprites();
    ca6e:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	ClearVram();
    ca72:	0e 94 ac 3e 	call	0x7d58	; 0x7d58 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    ca76:	60 e0       	ldi	r22, 0x00	; 0
    ca78:	81 e0       	ldi	r24, 0x01	; 1
    ca7a:	0c 94 eb 4c 	jmp	0x99d6	; 0x99d6 <FadeIn>

0000ca7e <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    ca7e:	0e 94 2f 65 	call	0xca5e	; 0xca5e <fade_through>
	StartSong(spacesong);
    ca82:	88 e2       	ldi	r24, 0x28	; 40
    ca84:	95 e0       	ldi	r25, 0x05	; 5
    ca86:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <StartSong>
	Screen.scrollX = 0;
    ca8a:	ef ea       	ldi	r30, 0xAF	; 175
    ca8c:	fc e0       	ldi	r31, 0x0C	; 12
    ca8e:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    ca90:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    ca92:	80 e2       	ldi	r24, 0x20	; 32
    ca94:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    ca96:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    ca98:	8e eb       	ldi	r24, 0xBE	; 190
    ca9a:	91 e0       	ldi	r25, 0x01	; 1
    ca9c:	0e 94 c0 64 	call	0xc980	; 0xc980 <print_scroll>
	StopSong();
    caa0:	0c 94 fa 40 	jmp	0x81f4	; 0x81f4 <StopSong>

0000caa4 <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    caa4:	0f 93       	push	r16
    caa6:	cf 93       	push	r28
    caa8:	df 93       	push	r29
    caaa:	c8 2f       	mov	r28, r24
    caac:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    caae:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    cab2:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    cab6:	8d e1       	ldi	r24, 0x1D	; 29
    cab8:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    cabc:	8a e0       	ldi	r24, 0x0A	; 10
    cabe:	92 e3       	ldi	r25, 0x32	; 50
    cac0:	90 93 b1 0c 	sts	0x0CB1, r25
    cac4:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    cac8:	83 e0       	ldi	r24, 0x03	; 3
    caca:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    cace:	82 e0       	ldi	r24, 0x02	; 2
    cad0:	0e 94 3f 58 	call	0xb07e	; 0xb07e <clear_overlay>
	game.current_level_index = index;
    cad4:	c0 93 cc 0d 	sts	0x0DCC, r28
	game.level_ended = 0;
    cad8:	10 92 d4 0d 	sts	0x0DD4, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cadc:	10 92 53 0e 	sts	0x0E53, r1
    cae0:	10 92 52 0e 	sts	0x0E52, r1
	p->pressed = 0;
    cae4:	10 92 4f 0e 	sts	0x0E4F, r1
    cae8:	10 92 4e 0e 	sts	0x0E4E, r1
	p->released = 0;
    caec:	10 92 51 0e 	sts	0x0E51, r1
    caf0:	10 92 50 0e 	sts	0x0E50, r1
	p->held_cycles = 0;
    caf4:	10 92 54 0e 	sts	0x0E54, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    caf8:	10 92 ce 0e 	sts	0x0ECE, r1
    cafc:	10 92 cd 0e 	sts	0x0ECD, r1
	p->pressed = 0;
    cb00:	10 92 ca 0e 	sts	0x0ECA, r1
    cb04:	10 92 c9 0e 	sts	0x0EC9, r1
	p->released = 0;
    cb08:	10 92 cc 0e 	sts	0x0ECC, r1
    cb0c:	10 92 cb 0e 	sts	0x0ECB, r1
	p->held_cycles = 0;
    cb10:	10 92 cf 0e 	sts	0x0ECF, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    cb14:	8c 2f       	mov	r24, r28
    cb16:	90 e0       	ldi	r25, 0x00	; 0
    cb18:	8a 30       	cpi	r24, 0x0A	; 10
    cb1a:	91 05       	cpc	r25, r1
    cb1c:	d8 f4       	brcc	.+54     	; 0xcb54 <load_level+0xb0>
    cb1e:	fc 01       	movw	r30, r24
    cb20:	ef 5b       	subi	r30, 0xBF	; 191
    cb22:	ff 4f       	sbci	r31, 0xFF	; 255
    cb24:	0c 94 0c 72 	jmp	0xe418	; 0xe418 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    cb28:	89 e8       	ldi	r24, 0x89	; 137
    cb2a:	91 e7       	ldi	r25, 0x71	; 113
    cb2c:	11 c0       	rjmp	.+34     	; 0xcb50 <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    cb2e:	88 e8       	ldi	r24, 0x88	; 136
    cb30:	90 e7       	ldi	r25, 0x70	; 112
    cb32:	0e c0       	rjmp	.+28     	; 0xcb50 <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    cb34:	87 e8       	ldi	r24, 0x87	; 135
    cb36:	9f e6       	ldi	r25, 0x6F	; 111
    cb38:	0b c0       	rjmp	.+22     	; 0xcb50 <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    cb3a:	86 e8       	ldi	r24, 0x86	; 134
    cb3c:	9e e6       	ldi	r25, 0x6E	; 110
    cb3e:	08 c0       	rjmp	.+16     	; 0xcb50 <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    cb40:	84 e8       	ldi	r24, 0x84	; 132
    cb42:	9c e6       	ldi	r25, 0x6C	; 108
    cb44:	05 c0       	rjmp	.+10     	; 0xcb50 <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    cb46:	85 e8       	ldi	r24, 0x85	; 133
    cb48:	9d e6       	ldi	r25, 0x6D	; 109
    cb4a:	02 c0       	rjmp	.+4      	; 0xcb50 <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    cb4c:	83 e8       	ldi	r24, 0x83	; 131
    cb4e:	9b e6       	ldi	r25, 0x6B	; 107
    cb50:	0e 94 7f 5a 	call	0xb4fe	; 0xb4fe <map_level_info>
	}
	game.column_count = 0;
    cb54:	10 92 c8 0d 	sts	0x0DC8, r1
	game.camera_x = get_camera_x(index);
    cb58:	10 92 b8 0d 	sts	0x0DB8, r1
    cb5c:	10 92 b7 0d 	sts	0x0DB7, r1
	game.camera_y = get_camera_y(index);
    cb60:	10 92 bf 0d 	sts	0x0DBF, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    cb64:	88 e1       	ldi	r24, 0x18	; 24
    cb66:	90 e0       	ldi	r25, 0x00	; 0
    cb68:	90 93 db 0d 	sts	0x0DDB, r25
    cb6c:	80 93 da 0d 	sts	0x0DDA, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    cb70:	88 ea       	ldi	r24, 0xA8	; 168
    cb72:	90 e0       	ldi	r25, 0x00	; 0
    cb74:	90 93 dd 0d 	sts	0x0DDD, r25
    cb78:	80 93 dc 0d 	sts	0x0DDC, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    cb7c:	28 ed       	ldi	r18, 0xD8	; 216
    cb7e:	37 e0       	ldi	r19, 0x07	; 7
    cb80:	30 93 56 0e 	sts	0x0E56, r19
    cb84:	20 93 55 0e 	sts	0x0E55, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    cb88:	90 93 58 0e 	sts	0x0E58, r25
    cb8c:	80 93 57 0e 	sts	0x0E57, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cb90:	8d e1       	ldi	r24, 0x1D	; 29
    cb92:	80 93 c0 0d 	sts	0x0DC0, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cb96:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cb9a:	8a e1       	ldi	r24, 0x1A	; 26
    cb9c:	80 93 c1 0d 	sts	0x0DC1, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cba0:	80 93 c5 0d 	sts	0x0DC5, r24
	game.scroll_x = 0;
    cba4:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    cba8:	10 92 c3 0d 	sts	0x0DC3, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    cbac:	8a e0       	ldi	r24, 0x0A	; 10
    cbae:	80 93 d3 0d 	sts	0x0DD3, r24
	game.flags = 0;
    cbb2:	10 92 d6 0d 	sts	0x0DD6, r1
	render_camera_view();
    cbb6:	0e 94 7f 58 	call	0xb0fe	; 0xb0fe <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    cbba:	49 e6       	ldi	r20, 0x69	; 105
    cbbc:	53 e0       	ldi	r21, 0x03	; 3
    cbbe:	6d e1       	ldi	r22, 0x1D	; 29
    cbc0:	80 e0       	ldi	r24, 0x00	; 0
    cbc2:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    cbc6:	4c e5       	ldi	r20, 0x5C	; 92
    cbc8:	53 e0       	ldi	r21, 0x03	; 3
    cbca:	6d e1       	ldi	r22, 0x1D	; 29
    cbcc:	82 e1       	ldi	r24, 0x12	; 18
    cbce:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    cbd2:	42 e6       	ldi	r20, 0x62	; 98
    cbd4:	53 e0       	ldi	r21, 0x03	; 3
    cbd6:	6e e1       	ldi	r22, 0x1E	; 30
    cbd8:	80 e0       	ldi	r24, 0x00	; 0
    cbda:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    cbde:	41 e7       	ldi	r20, 0x71	; 113
    cbe0:	53 e0       	ldi	r21, 0x03	; 3
    cbe2:	6e e1       	ldi	r22, 0x1E	; 30
    cbe4:	81 e1       	ldi	r24, 0x11	; 17
    cbe6:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    cbea:	4b e1       	ldi	r20, 0x1B	; 27
    cbec:	53 e0       	ldi	r21, 0x03	; 3
    cbee:	6f e1       	ldi	r22, 0x1F	; 31
    cbf0:	81 e1       	ldi	r24, 0x11	; 17
    cbf2:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cbf6:	21 e0       	ldi	r18, 0x01	; 1
    cbf8:	40 91 e9 0d 	lds	r20, 0x0DE9
    cbfc:	6d e1       	ldi	r22, 0x1D	; 29
    cbfe:	89 e0       	ldi	r24, 0x09	; 9
    cc00:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cc04:	40 91 bd 0d 	lds	r20, 0x0DBD
    cc08:	50 91 be 0d 	lds	r21, 0x0DBE
    cc0c:	21 e0       	ldi	r18, 0x01	; 1
    cc0e:	6d e1       	ldi	r22, 0x1D	; 29
    cc10:	8b e1       	ldi	r24, 0x1B	; 27
    cc12:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cc16:	21 e0       	ldi	r18, 0x01	; 1
    cc18:	40 91 ca 0d 	lds	r20, 0x0DCA
    cc1c:	6e e1       	ldi	r22, 0x1E	; 30
    cc1e:	89 e0       	ldi	r24, 0x09	; 9
    cc20:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cc24:	40 91 bb 0d 	lds	r20, 0x0DBB
    cc28:	50 91 bc 0d 	lds	r21, 0x0DBC
    cc2c:	21 e0       	ldi	r18, 0x01	; 1
    cc2e:	6e e1       	ldi	r22, 0x1E	; 30
    cc30:	8b e1       	ldi	r24, 0x1B	; 27
    cc32:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cc36:	40 91 b9 0d 	lds	r20, 0x0DB9
    cc3a:	50 91 ba 0d 	lds	r21, 0x0DBA
    cc3e:	21 e0       	ldi	r18, 0x01	; 1
    cc40:	6f e1       	ldi	r22, 0x1F	; 31
    cc42:	8b e1       	ldi	r24, 0x1B	; 27
    cc44:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cc48:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    cc4c:	81 11       	cpse	r24, r1
    cc4e:	39 c0       	rjmp	.+114    	; 0xccc2 <load_level+0x21e>
    cc50:	dd 23       	and	r29, r29
    cc52:	b9 f1       	breq	.+110    	; 0xccc2 <load_level+0x21e>
	{
		map_ship();
    cc54:	0e 94 6a 5a 	call	0xb4d4	; 0xb4d4 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cc58:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cc5a:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cc5c:	81 e0       	ldi	r24, 0x01	; 1
    cc5e:	90 e0       	ldi	r25, 0x00	; 0
    cc60:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cc64:	8c 2f       	mov	r24, r28
    cc66:	90 e0       	ldi	r25, 0x00	; 0
    cc68:	88 3a       	cpi	r24, 0xA8	; 168
    cc6a:	91 05       	cpc	r25, r1
    cc6c:	74 f0       	brlt	.+28     	; 0xcc8a <load_level+0x1e6>
			{
				LBMapSprite(0, map_hero_idle, 0);
    cc6e:	40 e0       	ldi	r20, 0x00	; 0
    cc70:	6b ed       	ldi	r22, 0xDB	; 219
    cc72:	71 e3       	ldi	r23, 0x31	; 49
    cc74:	80 e0       	ldi	r24, 0x00	; 0
    cc76:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cc7a:	03 e0       	ldi	r16, 0x03	; 3
    cc7c:	22 e0       	ldi	r18, 0x02	; 2
    cc7e:	48 ea       	ldi	r20, 0xA8	; 168
    cc80:	68 e1       	ldi	r22, 0x18	; 24
    cc82:	80 e0       	ldi	r24, 0x00	; 0
    cc84:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
				ship_increment = -3;
    cc88:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cc8a:	8e e2       	ldi	r24, 0x2E	; 46
    cc8c:	9e e0       	ldi	r25, 0x0E	; 14
    cc8e:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    cc92:	40 e0       	ldi	r20, 0x00	; 0
    cc94:	bc 01       	movw	r22, r24
    cc96:	86 e0       	ldi	r24, 0x06	; 6
    cc98:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cc9c:	02 e0       	ldi	r16, 0x02	; 2
    cc9e:	24 e0       	ldi	r18, 0x04	; 4
    cca0:	4c 2f       	mov	r20, r28
    cca2:	68 e0       	ldi	r22, 0x08	; 8
    cca4:	86 e0       	ldi	r24, 0x06	; 6
    cca6:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
			ship_y += ship_increment;
    ccaa:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    ccac:	39 f4       	brne	.+14     	; 0xccbc <load_level+0x218>
			{
				clear_sprites(6, 8);
    ccae:	68 e0       	ldi	r22, 0x08	; 8
    ccb0:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    ccb2:	df 91       	pop	r29
    ccb4:	cf 91       	pop	r28
    ccb6:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    ccb8:	0c 94 0d 65 	jmp	0xca1a	; 0xca1a <clear_sprites>
				break;
			}
			LBRotateSprites();
    ccbc:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
		}
    ccc0:	cd cf       	rjmp	.-102    	; 0xcc5c <load_level+0x1b8>
	}
}
    ccc2:	df 91       	pop	r29
    ccc4:	cf 91       	pop	r28
    ccc6:	0f 91       	pop	r16
    ccc8:	08 95       	ret

0000ccca <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    ccca:	0f 93       	push	r16
    cccc:	1f 93       	push	r17
    ccce:	cf 93       	push	r28
    ccd0:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    ccd2:	18 2f       	mov	r17, r24
    ccd4:	c6 2f       	mov	r28, r22
    ccd6:	d0 e0       	ldi	r29, 0x00	; 0
    ccd8:	c8 0f       	add	r28, r24
    ccda:	d1 1d       	adc	r29, r1
    ccdc:	81 2f       	mov	r24, r17
    ccde:	90 e0       	ldi	r25, 0x00	; 0
    cce0:	8c 17       	cp	r24, r28
    cce2:	9d 07       	cpc	r25, r29
    cce4:	4c f4       	brge	.+18     	; 0xccf8 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cce6:	01 e0       	ldi	r16, 0x01	; 1
    cce8:	21 e0       	ldi	r18, 0x01	; 1
    ccea:	40 e0       	ldi	r20, 0x00	; 0
    ccec:	60 ee       	ldi	r22, 0xE0	; 224
    ccee:	81 2f       	mov	r24, r17
    ccf0:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    ccf4:	1f 5f       	subi	r17, 0xFF	; 255
    ccf6:	f2 cf       	rjmp	.-28     	; 0xccdc <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    ccf8:	df 91       	pop	r29
    ccfa:	cf 91       	pop	r28
    ccfc:	1f 91       	pop	r17
    ccfe:	0f 91       	pop	r16
    cd00:	08 95       	ret

0000cd02 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    cd02:	fc 01       	movw	r30, r24
    cd04:	20 81       	ld	r18, Z
    cd06:	31 81       	ldd	r19, Z+1	; 0x01
    cd08:	29 70       	andi	r18, 0x09	; 9
    cd0a:	33 27       	eor	r19, r19
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
    cd0c:	81 e0       	ldi	r24, 0x01	; 1
    cd0e:	23 2b       	or	r18, r19
    cd10:	09 f4       	brne	.+2      	; 0xcd14 <select_pressed+0x12>
    cd12:	80 e0       	ldi	r24, 0x00	; 0
}
    cd14:	08 95       	ret

0000cd16 <stream_text_anywhere>:
{
	return (p->pressed & BTN_SELECT);
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    cd16:	ff 92       	push	r15
    cd18:	0f 93       	push	r16
    cd1a:	1f 93       	push	r17
    cd1c:	cf 93       	push	r28
    cd1e:	df 93       	push	r29
    cd20:	f6 2e       	mov	r15, r22
    cd22:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    cd24:	fc 01       	movw	r30, r24
    cd26:	24 91       	lpm	r18, Z
    cd28:	23 32       	cpi	r18, 0x23	; 35
    cd2a:	b1 f0       	breq	.+44     	; 0xcd58 <stream_text_anywhere+0x42>
    cd2c:	ec 01       	movw	r28, r24
    cd2e:	0f 2d       	mov	r16, r15
    cd30:	08 1b       	sub	r16, r24
    cd32:	8c 2f       	mov	r24, r28
    cd34:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cd36:	21 96       	adiw	r28, 0x01	; 1
    cd38:	fe 01       	movw	r30, r28
    cd3a:	31 97       	sbiw	r30, 0x01	; 1
    cd3c:	44 91       	lpm	r20, Z
    cd3e:	44 23       	and	r20, r20
    cd40:	41 f0       	breq	.+16     	; 0xcd52 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    cd42:	61 2f       	mov	r22, r17
    cd44:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    cd48:	80 e7       	ldi	r24, 0x70	; 112
    cd4a:	97 e1       	ldi	r25, 0x17	; 23
    cd4c:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <WaitUs>
    cd50:	f0 cf       	rjmp	.-32     	; 0xcd32 <stream_text_anywhere+0x1c>
		}
		y++;
    cd52:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cd54:	ce 01       	movw	r24, r28
    cd56:	e6 cf       	rjmp	.-52     	; 0xcd24 <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cd58:	df 91       	pop	r29
    cd5a:	cf 91       	pop	r28
    cd5c:	1f 91       	pop	r17
    cd5e:	0f 91       	pop	r16
    cd60:	ff 90       	pop	r15
    cd62:	08 95       	ret

0000cd64 <map_particles>:

void map_particles()
{
    cd64:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    cd66:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    cd68:	40 e0       	ldi	r20, 0x00	; 0
    cd6a:	6b ef       	ldi	r22, 0xFB	; 251
    cd6c:	71 e3       	ldi	r23, 0x31	; 49
    cd6e:	8c 2f       	mov	r24, r28
    cd70:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    cd74:	cf 5f       	subi	r28, 0xFF	; 255
    cd76:	c4 31       	cpi	r28, 0x14	; 20
    cd78:	b9 f7       	brne	.-18     	; 0xcd68 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    cd7a:	cf 91       	pop	r28
    cd7c:	08 95       	ret

0000cd7e <place_particles>:

void place_particles()
{
    cd7e:	0f 93       	push	r16
    cd80:	1f 93       	push	r17
    cd82:	cf 93       	push	r28
    cd84:	df 93       	push	r29
    cd86:	1f 92       	push	r1
    cd88:	cd b7       	in	r28, 0x3d	; 61
    cd8a:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    cd8c:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    cd8e:	68 ec       	ldi	r22, 0xC8	; 200
    cd90:	80 e0       	ldi	r24, 0x00	; 0
    cd92:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <LBRandom>
    cd96:	48 2f       	mov	r20, r24
    cd98:	60 ee       	ldi	r22, 0xE0	; 224
    cd9a:	80 e0       	ldi	r24, 0x00	; 0
    cd9c:	49 83       	std	Y+1, r20	; 0x01
    cd9e:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <LBRandom>
    cda2:	68 2f       	mov	r22, r24
    cda4:	01 e0       	ldi	r16, 0x01	; 1
    cda6:	21 e0       	ldi	r18, 0x01	; 1
    cda8:	49 81       	ldd	r20, Y+1	; 0x01
    cdaa:	81 2f       	mov	r24, r17
    cdac:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    cdb0:	1f 5f       	subi	r17, 0xFF	; 255
    cdb2:	14 31       	cpi	r17, 0x14	; 20
    cdb4:	61 f7       	brne	.-40     	; 0xcd8e <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    cdb6:	0f 90       	pop	r0
    cdb8:	df 91       	pop	r29
    cdba:	cf 91       	pop	r28
    cdbc:	1f 91       	pop	r17
    cdbe:	0f 91       	pop	r16
    cdc0:	08 95       	ret

0000cdc2 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    cdc2:	ef 92       	push	r14
    cdc4:	ff 92       	push	r15
    cdc6:	0f 93       	push	r16
    cdc8:	1f 93       	push	r17
    cdca:	cf 93       	push	r28
    cdcc:	df 93       	push	r29
    cdce:	d8 2f       	mov	r29, r24
    cdd0:	16 2f       	mov	r17, r22
    cdd2:	8a e0       	ldi	r24, 0x0A	; 10
    cdd4:	e8 2e       	mov	r14, r24
    cdd6:	80 e1       	ldi	r24, 0x10	; 16
    cdd8:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    cdda:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    cddc:	f7 01       	movw	r30, r14
    cdde:	40 81       	ld	r20, Z
    cde0:	4d 0f       	add	r20, r29
    cde2:	01 e0       	ldi	r16, 0x01	; 1
    cde4:	21 e0       	ldi	r18, 0x01	; 1
    cde6:	31 97       	sbiw	r30, 0x01	; 1
    cde8:	60 81       	ld	r22, Z
    cdea:	8c 2f       	mov	r24, r28
    cdec:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    cdf0:	f7 01       	movw	r30, r14
    cdf2:	80 81       	ld	r24, Z
    cdf4:	89 3c       	cpi	r24, 0xC9	; 201
    cdf6:	50 f0       	brcs	.+20     	; 0xce0c <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    cdf8:	60 ee       	ldi	r22, 0xE0	; 224
    cdfa:	80 e0       	ldi	r24, 0x00	; 0
    cdfc:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <LBRandom>
    ce00:	21 e0       	ldi	r18, 0x01	; 1
    ce02:	41 2f       	mov	r20, r17
    ce04:	68 2f       	mov	r22, r24
    ce06:	8c 2f       	mov	r24, r28
    ce08:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    ce0c:	cf 5f       	subi	r28, 0xFF	; 255
    ce0e:	f4 e0       	ldi	r31, 0x04	; 4
    ce10:	ef 0e       	add	r14, r31
    ce12:	f1 1c       	adc	r15, r1
    ce14:	c4 31       	cpi	r28, 0x14	; 20
    ce16:	11 f7       	brne	.-60     	; 0xcddc <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    ce18:	df 91       	pop	r29
    ce1a:	cf 91       	pop	r28
    ce1c:	1f 91       	pop	r17
    ce1e:	0f 91       	pop	r16
    ce20:	ff 90       	pop	r15
    ce22:	ef 90       	pop	r14
    ce24:	08 95       	ret

0000ce26 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    ce26:	82 50       	subi	r24, 0x02	; 2
    ce28:	87 30       	cpi	r24, 0x07	; 7
    ce2a:	48 f4       	brcc	.+18     	; 0xce3e <get_emarald_map+0x18>
    ce2c:	e8 2f       	mov	r30, r24
    ce2e:	f0 e0       	ldi	r31, 0x00	; 0
    ce30:	ee 0f       	add	r30, r30
    ce32:	ff 1f       	adc	r31, r31
    ce34:	ee 5f       	subi	r30, 0xFE	; 254
    ce36:	fa 4f       	sbci	r31, 0xFA	; 250
    ce38:	80 81       	ld	r24, Z
    ce3a:	91 81       	ldd	r25, Z+1	; 0x01
    ce3c:	08 95       	ret
    ce3e:	8f ee       	ldi	r24, 0xEF	; 239
    ce40:	91 e3       	ldi	r25, 0x31	; 49
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    ce42:	08 95       	ret

0000ce44 <music_transition>:

void music_transition()
{
	if (is_space())
    ce44:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    ce48:	88 23       	and	r24, r24
    ce4a:	19 f0       	breq	.+6      	; 0xce52 <music_transition+0xe>
	{
		StartSong(spacesong);
    ce4c:	88 e2       	ldi	r24, 0x28	; 40
    ce4e:	95 e0       	ldi	r25, 0x05	; 5
    ce50:	06 c0       	rjmp	.+12     	; 0xce5e <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    ce52:	80 91 cc 0d 	lds	r24, 0x0DCC
    ce56:	88 23       	and	r24, r24
    ce58:	21 f0       	breq	.+8      	; 0xce62 <music_transition+0x1e>
	{
		StartSong(planetsong);
    ce5a:	88 ec       	ldi	r24, 0xC8	; 200
    ce5c:	9b e0       	ldi	r25, 0x0B	; 11
    ce5e:	0c 94 d1 40 	jmp	0x81a2	; 0x81a2 <StartSong>
    ce62:	08 95       	ret

0000ce64 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    ce64:	cf 92       	push	r12
    ce66:	df 92       	push	r13
    ce68:	ef 92       	push	r14
    ce6a:	ff 92       	push	r15
    ce6c:	0f 93       	push	r16
    ce6e:	1f 93       	push	r17
    ce70:	cf 93       	push	r28
    ce72:	df 93       	push	r29
    ce74:	1f 92       	push	r1
    ce76:	cd b7       	in	r28, 0x3d	; 61
    ce78:	de b7       	in	r29, 0x3e	; 62
    ce7a:	c8 2e       	mov	r12, r24
    ce7c:	e6 2e       	mov	r14, r22
    ce7e:	12 2f       	mov	r17, r18
    ce80:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    ce82:	49 83       	std	Y+1, r20	; 0x01
    ce84:	0e 94 2f 65 	call	0xca5e	; 0xca5e <fade_through>
	Screen.scrollX = 0;
    ce88:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    ce8c:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    ce90:	80 e2       	ldi	r24, 0x20	; 32
    ce92:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    ce96:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    ce9a:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    ce9e:	10 92 c3 0d 	sts	0x0DC3, r1
	map_particles();
    cea2:	0e 94 b2 66 	call	0xcd64	; 0xcd64 <map_particles>
	map_ship();
    cea6:	0e 94 6a 5a 	call	0xb4d4	; 0xb4d4 <map_ship>
	place_particles();
    ceaa:	0e 94 bf 66 	call	0xcd7e	; 0xcd7e <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    ceae:	41 ef       	ldi	r20, 0xF1	; 241
    ceb0:	59 e5       	ldi	r21, 0x59	; 89
    ceb2:	69 81       	ldd	r22, Y+1	; 0x01
    ceb4:	80 e0       	ldi	r24, 0x00	; 0
    ceb6:	0e 94 5d 4c 	call	0x98ba	; 0x98ba <DrawMap>
	game.current_level_index = index;
    ceba:	c0 92 cc 0d 	sts	0x0DCC, r12
	music_transition();
    cebe:	0e 94 22 67 	call	0xce44	; 0xce44 <music_transition>
	if (!is_space())
    cec2:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    cec6:	81 11       	cpse	r24, r1
    cec8:	0f c0       	rjmp	.+30     	; 0xcee8 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    ceca:	8c 2d       	mov	r24, r12
    cecc:	0e 94 13 67 	call	0xce26	; 0xce26 <get_emarald_map>
    ced0:	40 e0       	ldi	r20, 0x00	; 0
    ced2:	bc 01       	movw	r22, r24
    ced4:	88 e0       	ldi	r24, 0x08	; 8
    ced6:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    ceda:	01 e0       	ldi	r16, 0x01	; 1
    cedc:	21 e0       	ldi	r18, 0x01	; 1
    cede:	40 e3       	ldi	r20, 0x30	; 48
    cee0:	60 e7       	ldi	r22, 0x70	; 112
    cee2:	88 e0       	ldi	r24, 0x08	; 8
    cee4:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cee8:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    ceea:	81 e0       	ldi	r24, 0x01	; 1
    ceec:	90 e0       	ldi	r25, 0x00	; 0
    ceee:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    cef2:	8e e2       	ldi	r24, 0x2E	; 46
    cef4:	9e e0       	ldi	r25, 0x0E	; 14
    cef6:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    cefa:	40 e0       	ldi	r20, 0x00	; 0
    cefc:	bc 01       	movw	r22, r24
    cefe:	80 e0       	ldi	r24, 0x00	; 0
    cf00:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    cf04:	02 e0       	ldi	r16, 0x02	; 2
    cf06:	24 e0       	ldi	r18, 0x04	; 4
    cf08:	48 e6       	ldi	r20, 0x68	; 104
    cf0a:	68 e6       	ldi	r22, 0x68	; 104
    cf0c:	80 e0       	ldi	r24, 0x00	; 0
    cf0e:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
		frame_counter++;
    cf12:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    cf14:	8d 2d       	mov	r24, r13
    cf16:	8f 70       	andi	r24, 0x0F	; 15
    cf18:	29 f4       	brne	.+10     	; 0xcf24 <planet_transition+0xc0>
    cf1a:	90 91 b3 0c 	lds	r25, 0x0CB3
    cf1e:	9e 0d       	add	r25, r14
    cf20:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    cf24:	6f 2d       	mov	r22, r15
    cf26:	81 2f       	mov	r24, r17
    cf28:	0e 94 e1 66 	call	0xcdc2	; 0xcdc2 <animate_particles>
		LBRotateSprites();
    cf2c:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    cf30:	8f ef       	ldi	r24, 0xFF	; 255
    cf32:	d8 12       	cpse	r13, r24
    cf34:	da cf       	rjmp	.-76     	; 0xceea <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    cf36:	82 e0       	ldi	r24, 0x02	; 2
    cf38:	80 93 cb 0d 	sts	0x0DCB, r24
	ClearVram();
    cf3c:	0e 94 ac 3e 	call	0x7d58	; 0x7d58 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cf40:	64 e1       	ldi	r22, 0x14	; 20
    cf42:	80 e0       	ldi	r24, 0x00	; 0
    cf44:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
	LBRotateSprites();
    cf48:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	fade_through();
    cf4c:	0e 94 2f 65 	call	0xca5e	; 0xca5e <fade_through>
	game.level_score = 0;
    cf50:	10 92 bc 0d 	sts	0x0DBC, r1
    cf54:	10 92 bb 0d 	sts	0x0DBB, r1
	load_level(index, true);
    cf58:	61 e0       	ldi	r22, 0x01	; 1
    cf5a:	8c 2d       	mov	r24, r12
    cf5c:	0e 94 52 65 	call	0xcaa4	; 0xcaa4 <load_level>
	init_player_state();
    cf60:	0e 94 32 54 	call	0xa864	; 0xa864 <init_player_state>
	init_boss_state();
    cf64:	0e 94 a8 53 	call	0xa750	; 0xa750 <init_boss_state>
	init_enemy_state();
}
    cf68:	0f 90       	pop	r0
    cf6a:	df 91       	pop	r29
    cf6c:	cf 91       	pop	r28
    cf6e:	1f 91       	pop	r17
    cf70:	0f 91       	pop	r16
    cf72:	ff 90       	pop	r15
    cf74:	ef 90       	pop	r14
    cf76:	df 90       	pop	r13
    cf78:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    cf7a:	0c 94 9b 4f 	jmp	0x9f36	; 0x9f36 <init_enemy_state>

0000cf7e <intro>:
}


void intro()
{
    cf7e:	0f 93       	push	r16
	fade_through();
    cf80:	0e 94 2f 65 	call	0xca5e	; 0xca5e <fade_through>
	game.lives = LIVES;
    cf84:	e7 eb       	ldi	r30, 0xB7	; 183
    cf86:	fd e0       	ldi	r31, 0x0D	; 13
    cf88:	8a e0       	ldi	r24, 0x0A	; 10
    cf8a:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    cf8c:	13 82       	std	Z+3, r1	; 0x03
    cf8e:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    cf90:	15 82       	std	Z+5, r1	; 0x05
    cf92:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    cf94:	17 82       	std	Z+7, r1	; 0x07
    cf96:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    cf98:	88 ec       	ldi	r24, 0xC8	; 200
    cf9a:	9b e0       	ldi	r25, 0x0B	; 11
    cf9c:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <StartSong>
	print_scroll(strIntro);
    cfa0:	84 e7       	ldi	r24, 0x74	; 116
    cfa2:	92 e0       	ldi	r25, 0x02	; 2
    cfa4:	0e 94 c0 64 	call	0xc980	; 0xc980 <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    cfa8:	07 ec       	ldi	r16, 0xC7	; 199
    cfaa:	2d ef       	ldi	r18, 0xFD	; 253
    cfac:	4c e1       	ldi	r20, 0x1C	; 28
    cfae:	61 e0       	ldi	r22, 0x01	; 1
    cfb0:	80 e0       	ldi	r24, 0x00	; 0
    cfb2:	0e 94 32 67 	call	0xce64	; 0xce64 <planet_transition>
}
    cfb6:	0f 91       	pop	r16
    cfb8:	08 95       	ret

0000cfba <demo_load>:

void demo_load(u8 idx)
{
    cfba:	cf 93       	push	r28
    cfbc:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    cfbe:	e7 eb       	ldi	r30, 0xB7	; 183
    cfc0:	fd e0       	ldi	r31, 0x0D	; 13
    cfc2:	8a e0       	ldi	r24, 0x0A	; 10
    cfc4:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    cfc6:	13 82       	std	Z+3, r1	; 0x03
    cfc8:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    cfca:	15 82       	std	Z+5, r1	; 0x05
    cfcc:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    cfce:	17 82       	std	Z+7, r1	; 0x07
    cfd0:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    cfd2:	82 e0       	ldi	r24, 0x02	; 2
    cfd4:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    cfd6:	0e 94 ac 3e 	call	0x7d58	; 0x7d58 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cfda:	64 e1       	ldi	r22, 0x14	; 20
    cfdc:	80 e0       	ldi	r24, 0x00	; 0
    cfde:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
	LBRotateSprites();
    cfe2:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	fade_through();
    cfe6:	0e 94 2f 65 	call	0xca5e	; 0xca5e <fade_through>
	load_level(idx, true);
    cfea:	61 e0       	ldi	r22, 0x01	; 1
    cfec:	8c 2f       	mov	r24, r28
    cfee:	0e 94 52 65 	call	0xcaa4	; 0xcaa4 <load_level>
	init_player_state();
    cff2:	0e 94 32 54 	call	0xa864	; 0xa864 <init_player_state>
	init_boss_state();
    cff6:	0e 94 a8 53 	call	0xa750	; 0xa750 <init_boss_state>
	init_enemy_state();
}
    cffa:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    cffc:	0c 94 9b 4f 	jmp	0x9f36	; 0x9f36 <init_enemy_state>

0000d000 <load_splash>:
}

void load_splash()
{
	fade_through();
    d000:	0e 94 2f 65 	call	0xca5e	; 0xca5e <fade_through>
	Screen.scrollX = 0;
    d004:	ef ea       	ldi	r30, 0xAF	; 175
    d006:	fc e0       	ldi	r31, 0x0C	; 12
    d008:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d00a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d00c:	80 e2       	ldi	r24, 0x20	; 32
    d00e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d010:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d012:	e7 eb       	ldi	r30, 0xB7	; 183
    d014:	fd e0       	ldi	r31, 0x0D	; 13
    d016:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    d018:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d01a:	64 e1       	ldi	r22, 0x14	; 20
    d01c:	80 e0       	ldi	r24, 0x00	; 0
    d01e:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
	LBRotateSprites();
    d022:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d026:	45 e8       	ldi	r20, 0x85	; 133
    d028:	53 e0       	ldi	r21, 0x03	; 3
    d02a:	6f e0       	ldi	r22, 0x0F	; 15
    d02c:	88 e0       	ldi	r24, 0x08	; 8
    d02e:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d032:	49 e7       	ldi	r20, 0x79	; 121
    d034:	53 e0       	ldi	r21, 0x03	; 3
    d036:	60 e1       	ldi	r22, 0x10	; 16
    d038:	88 e0       	ldi	r24, 0x08	; 8
    d03a:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d03e:	4b e8       	ldi	r20, 0x8B	; 139
    d040:	53 e0       	ldi	r21, 0x03	; 3
    d042:	65 e1       	ldi	r22, 0x15	; 21
    d044:	84 e0       	ldi	r24, 0x04	; 4
    d046:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	DrawMap2(6, 5, map_splash);
    d04a:	46 e1       	ldi	r20, 0x16	; 22
    d04c:	5b e5       	ldi	r21, 0x5B	; 91
    d04e:	65 e0       	ldi	r22, 0x05	; 5
    d050:	86 e0       	ldi	r24, 0x06	; 6
    d052:	0e 94 5d 4c 	call	0x98ba	; 0x98ba <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d056:	40 e0       	ldi	r20, 0x00	; 0
    d058:	64 e0       	ldi	r22, 0x04	; 4
    d05a:	72 e3       	ldi	r23, 0x32	; 50
    d05c:	80 e0       	ldi	r24, 0x00	; 0
    d05e:	0c 94 bd 4e 	jmp	0x9d7a	; 0x9d7a <LBMapSprite>

0000d062 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d062:	2f 92       	push	r2
    d064:	3f 92       	push	r3
    d066:	5f 92       	push	r5
    d068:	6f 92       	push	r6
    d06a:	7f 92       	push	r7
    d06c:	8f 92       	push	r8
    d06e:	9f 92       	push	r9
    d070:	af 92       	push	r10
    d072:	bf 92       	push	r11
    d074:	cf 92       	push	r12
    d076:	df 92       	push	r13
    d078:	ef 92       	push	r14
    d07a:	ff 92       	push	r15
    d07c:	0f 93       	push	r16
    d07e:	1f 93       	push	r17
    d080:	cf 93       	push	r28
    d082:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d084:	81 e0       	ldi	r24, 0x01	; 1
    d086:	80 93 cb 0d 	sts	0x0DCB, r24
	game.high_score_index = -1;
    d08a:	8f ef       	ldi	r24, 0xFF	; 255
    d08c:	80 93 c9 0d 	sts	0x0DC9, r24
	fade_through();
    d090:	0e 94 2f 65 	call	0xca5e	; 0xca5e <fade_through>
	Screen.scrollX = 0;
    d094:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d098:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d09c:	80 e2       	ldi	r24, 0x20	; 32
    d09e:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d0a2:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
	
	LBPrint(9, 3, (char*) strHighScores);
    d0a6:	49 e7       	ldi	r20, 0x79	; 121
    d0a8:	53 e0       	ldi	r21, 0x03	; 3
    d0aa:	63 e0       	ldi	r22, 0x03	; 3
    d0ac:	89 e0       	ldi	r24, 0x09	; 9
    d0ae:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d0b2:	40 e0       	ldi	r20, 0x00	; 0
    d0b4:	6f ee       	ldi	r22, 0xEF	; 239
    d0b6:	71 e3       	ldi	r23, 0x31	; 49
    d0b8:	80 e0       	ldi	r24, 0x00	; 0
    d0ba:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d0be:	40 e0       	ldi	r20, 0x00	; 0
    d0c0:	6c ee       	ldi	r22, 0xEC	; 236
    d0c2:	71 e3       	ldi	r23, 0x31	; 49
    d0c4:	81 e0       	ldi	r24, 0x01	; 1
    d0c6:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d0ca:	01 e0       	ldi	r16, 0x01	; 1
    d0cc:	21 e0       	ldi	r18, 0x01	; 1
    d0ce:	48 e1       	ldi	r20, 0x18	; 24
    d0d0:	68 e3       	ldi	r22, 0x38	; 56
    d0d2:	80 e0       	ldi	r24, 0x00	; 0
    d0d4:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d0d8:	21 e0       	ldi	r18, 0x01	; 1
    d0da:	48 e1       	ldi	r20, 0x18	; 24
    d0dc:	68 ea       	ldi	r22, 0xA8	; 168
    d0de:	81 e0       	ldi	r24, 0x01	; 1
    d0e0:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
    d0e4:	89 e9       	ldi	r24, 0x99	; 153
    d0e6:	a8 2e       	mov	r10, r24
    d0e8:	8d e0       	ldi	r24, 0x0D	; 13
    d0ea:	b8 2e       	mov	r11, r24
    d0ec:	9a e9       	ldi	r25, 0x9A	; 154
    d0ee:	c9 2e       	mov	r12, r25
    d0f0:	9d e0       	ldi	r25, 0x0D	; 13
    d0f2:	d9 2e       	mov	r13, r25
    d0f4:	2b e9       	ldi	r18, 0x9B	; 155
    d0f6:	82 2e       	mov	r8, r18
    d0f8:	2d e0       	ldi	r18, 0x0D	; 13
    d0fa:	92 2e       	mov	r9, r18
    d0fc:	74 01       	movw	r14, r8
    d0fe:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d100:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d102:	35 e0       	ldi	r19, 0x05	; 5
    d104:	53 2e       	mov	r5, r19
    d106:	42 eb       	ldi	r20, 0xB2	; 178
    d108:	64 2e       	mov	r6, r20
    d10a:	4d e0       	ldi	r20, 0x0D	; 13
    d10c:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d10e:	11 e4       	ldi	r17, 0x41	; 65
    d110:	0e 2d       	mov	r16, r14
    d112:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d114:	80 2f       	mov	r24, r16
    d116:	65 2d       	mov	r22, r5
    d118:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    d11c:	41 e0       	ldi	r20, 0x01	; 1
    d11e:	48 0f       	add	r20, r24
    d120:	20 e0       	ldi	r18, 0x00	; 0
    d122:	6c 2f       	mov	r22, r28
    d124:	89 e0       	ldi	r24, 0x09	; 9
    d126:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d12a:	40 e2       	ldi	r20, 0x20	; 32
    d12c:	6c 2f       	mov	r22, r28
    d12e:	8a e0       	ldi	r24, 0x0A	; 10
    d130:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d134:	f5 01       	movw	r30, r10
    d136:	40 81       	ld	r20, Z
    d138:	6c 2f       	mov	r22, r28
    d13a:	8b e0       	ldi	r24, 0x0B	; 11
    d13c:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d140:	f6 01       	movw	r30, r12
    d142:	40 81       	ld	r20, Z
    d144:	6c 2f       	mov	r22, r28
    d146:	8c e0       	ldi	r24, 0x0C	; 12
    d148:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d14c:	f7 01       	movw	r30, r14
    d14e:	40 81       	ld	r20, Z
    d150:	6c 2f       	mov	r22, r28
    d152:	8d e0       	ldi	r24, 0x0D	; 13
    d154:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d158:	40 e2       	ldi	r20, 0x20	; 32
    d15a:	6c 2f       	mov	r22, r28
    d15c:	8e e0       	ldi	r24, 0x0E	; 14
    d15e:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d162:	f7 01       	movw	r30, r14
    d164:	21 80       	ldd	r2, Z+1	; 0x01
    d166:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d168:	21 e0       	ldi	r18, 0x01	; 1
    d16a:	a1 01       	movw	r20, r2
    d16c:	6c 2f       	mov	r22, r28
    d16e:	83 e1       	ldi	r24, 0x13	; 19
    d170:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d174:	20 91 b9 0d 	lds	r18, 0x0DB9
    d178:	30 91 ba 0d 	lds	r19, 0x0DBA
    d17c:	22 16       	cp	r2, r18
    d17e:	33 06       	cpc	r3, r19
    d180:	08 f0       	brcs	.+2      	; 0xd184 <load_high_scores+0x122>
    d182:	5a c0       	rjmp	.+180    	; 0xd238 <load_high_scores+0x1d6>
    d184:	80 91 c9 0d 	lds	r24, 0x0DC9
    d188:	8f 3f       	cpi	r24, 0xFF	; 255
    d18a:	09 f0       	breq	.+2      	; 0xd18e <load_high_scores+0x12c>
    d18c:	55 c0       	rjmp	.+170    	; 0xd238 <load_high_scores+0x1d6>
    d18e:	80 91 d0 0d 	lds	r24, 0x0DD0
    d192:	82 30       	cpi	r24, 0x02	; 2
    d194:	09 f4       	brne	.+2      	; 0xd198 <load_high_scores+0x136>
    d196:	50 c0       	rjmp	.+160    	; 0xd238 <load_high_scores+0x1d6>
    d198:	a2 eb       	ldi	r26, 0xB2	; 178
    d19a:	bd e0       	ldi	r27, 0x0D	; 13
    d19c:	cd 01       	movw	r24, r26
    d19e:	05 97       	sbiw	r24, 0x05	; 5
    d1a0:	4e e1       	ldi	r20, 0x1E	; 30
    d1a2:	48 0f       	add	r20, r24
    d1a4:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d1a6:	04 17       	cp	r16, r20
    d1a8:	40 f4       	brcc	.+16     	; 0xd1ba <load_high_scores+0x158>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d1aa:	fc 01       	movw	r30, r24
    d1ac:	45 2d       	mov	r20, r5
    d1ae:	01 90       	ld	r0, Z+
    d1b0:	0d 92       	st	X+, r0
    d1b2:	4a 95       	dec	r20
    d1b4:	e1 f7       	brne	.-8      	; 0xd1ae <load_high_scores+0x14c>
    d1b6:	dc 01       	movw	r26, r24
    d1b8:	f1 cf       	rjmp	.-30     	; 0xd19c <load_high_scores+0x13a>
			}
			scores.data[i] = 'A';
    d1ba:	f5 01       	movw	r30, r10
    d1bc:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d1be:	f6 01       	movw	r30, r12
    d1c0:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d1c2:	f7 01       	movw	r30, r14
    d1c4:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d1c6:	32 83       	std	Z+2, r19	; 0x02
    d1c8:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d1ca:	f5 01       	movw	r30, r10
    d1cc:	40 81       	ld	r20, Z
    d1ce:	6c 2f       	mov	r22, r28
    d1d0:	8b e0       	ldi	r24, 0x0B	; 11
    d1d2:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d1d6:	f6 01       	movw	r30, r12
    d1d8:	40 81       	ld	r20, Z
    d1da:	6c 2f       	mov	r22, r28
    d1dc:	8c e0       	ldi	r24, 0x0C	; 12
    d1de:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d1e2:	f7 01       	movw	r30, r14
    d1e4:	40 81       	ld	r20, Z
    d1e6:	6c 2f       	mov	r22, r28
    d1e8:	8d e0       	ldi	r24, 0x0D	; 13
    d1ea:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d1ee:	40 91 b9 0d 	lds	r20, 0x0DB9
    d1f2:	50 91 ba 0d 	lds	r21, 0x0DBA
    d1f6:	21 e0       	ldi	r18, 0x01	; 1
    d1f8:	6c 2f       	mov	r22, r28
    d1fa:	83 e1       	ldi	r24, 0x13	; 19
    d1fc:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
			game.high_score_index = i;
    d200:	00 93 c9 0d 	sts	0x0DC9, r16
			LBMapSprite(2, map_down_arrow, 0);
    d204:	40 e0       	ldi	r20, 0x00	; 0
    d206:	61 e0       	ldi	r22, 0x01	; 1
    d208:	72 e3       	ldi	r23, 0x32	; 50
    d20a:	82 e0       	ldi	r24, 0x02	; 2
    d20c:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d210:	40 e0       	ldi	r20, 0x00	; 0
    d212:	6e ef       	ldi	r22, 0xFE	; 254
    d214:	71 e3       	ldi	r23, 0x31	; 49
    d216:	83 e0       	ldi	r24, 0x03	; 3
    d218:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d21c:	01 e0       	ldi	r16, 0x01	; 1
    d21e:	21 e0       	ldi	r18, 0x01	; 1
    d220:	4d 2f       	mov	r20, r29
    d222:	68 e5       	ldi	r22, 0x58	; 88
    d224:	82 e0       	ldi	r24, 0x02	; 2
    d226:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d22a:	21 e0       	ldi	r18, 0x01	; 1
    d22c:	40 e1       	ldi	r20, 0x10	; 16
    d22e:	4d 0f       	add	r20, r29
    d230:	68 e5       	ldi	r22, 0x58	; 88
    d232:	83 e0       	ldi	r24, 0x03	; 3
    d234:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
		}
		
		ypos += 2;
    d238:	ce 5f       	subi	r28, 0xFE	; 254
    d23a:	f5 e0       	ldi	r31, 0x05	; 5
    d23c:	af 0e       	add	r10, r31
    d23e:	b1 1c       	adc	r11, r1
    d240:	85 e0       	ldi	r24, 0x05	; 5
    d242:	c8 0e       	add	r12, r24
    d244:	d1 1c       	adc	r13, r1
    d246:	e5 e0       	ldi	r30, 0x05	; 5
    d248:	ee 0e       	add	r14, r30
    d24a:	f1 1c       	adc	r15, r1
    d24c:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d24e:	c3 31       	cpi	r28, 0x13	; 19
    d250:	09 f0       	breq	.+2      	; 0xd254 <load_high_scores+0x1f2>
    d252:	5e cf       	rjmp	.-324    	; 0xd110 <load_high_scores+0xae>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d254:	40 e5       	ldi	r20, 0x50	; 80
    d256:	53 e0       	ldi	r21, 0x03	; 3
    d258:	66 e1       	ldi	r22, 0x16	; 22
    d25a:	89 e0       	ldi	r24, 0x09	; 9
}
    d25c:	df 91       	pop	r29
    d25e:	cf 91       	pop	r28
    d260:	1f 91       	pop	r17
    d262:	0f 91       	pop	r16
    d264:	ff 90       	pop	r15
    d266:	ef 90       	pop	r14
    d268:	df 90       	pop	r13
    d26a:	cf 90       	pop	r12
    d26c:	bf 90       	pop	r11
    d26e:	af 90       	pop	r10
    d270:	9f 90       	pop	r9
    d272:	8f 90       	pop	r8
    d274:	7f 90       	pop	r7
    d276:	6f 90       	pop	r6
    d278:	5f 90       	pop	r5
    d27a:	3f 90       	pop	r3
    d27c:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d27e:	0c 94 e8 4d 	jmp	0x9bd0	; 0x9bd0 <LBPrint>

0000d282 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d282:	64 e1       	ldi	r22, 0x14	; 20
    d284:	80 e0       	ldi	r24, 0x00	; 0
    d286:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
	LBRotateSprites();
    d28a:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	init_player_state();
    d28e:	0e 94 32 54 	call	0xa864	; 0xa864 <init_player_state>
	init_boss_state();
    d292:	0e 94 a8 53 	call	0xa750	; 0xa750 <init_boss_state>
	init_enemy_state();
    d296:	0e 94 9b 4f 	call	0x9f36	; 0x9f36 <init_enemy_state>
	StopSong();
    d29a:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <StopSong>
	load_high_scores();
    d29e:	0c 94 31 68 	jmp	0xd062	; 0xd062 <load_high_scores>

0000d2a2 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d2a2:	0f 93       	push	r16
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	if (game.player.controls.pressed) demo_counter = 0;
    d2a4:	80 91 4e 0e 	lds	r24, 0x0E4E
    d2a8:	90 91 4f 0e 	lds	r25, 0x0E4F
    d2ac:	00 97       	sbiw	r24, 0x00	; 0
    d2ae:	21 f0       	breq	.+8      	; 0xd2b8 <update_splash+0x16>
    d2b0:	10 92 f6 0c 	sts	0x0CF6, r1
    d2b4:	10 92 f5 0c 	sts	0x0CF5, r1
	
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d2b8:	85 ff       	sbrs	r24, 5
    d2ba:	08 c0       	rjmp	.+16     	; 0xd2cc <update_splash+0x2a>
    d2bc:	20 91 d0 0d 	lds	r18, 0x0DD0
    d2c0:	21 11       	cpse	r18, r1
    d2c2:	04 c0       	rjmp	.+8      	; 0xd2cc <update_splash+0x2a>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d2c4:	81 e0       	ldi	r24, 0x01	; 1
    d2c6:	80 93 d0 0d 	sts	0x0DD0, r24
    d2ca:	08 c0       	rjmp	.+16     	; 0xd2dc <update_splash+0x3a>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d2cc:	84 ff       	sbrs	r24, 4
    d2ce:	0c c0       	rjmp	.+24     	; 0xd2e8 <update_splash+0x46>
    d2d0:	80 91 d0 0d 	lds	r24, 0x0DD0
    d2d4:	81 30       	cpi	r24, 0x01	; 1
    d2d6:	41 f4       	brne	.+16     	; 0xd2e8 <update_splash+0x46>
	{
		game.selection = START_SELECTED;
    d2d8:	10 92 d0 0d 	sts	0x0DD0, r1
		SFX_NAVIGATE;
    d2dc:	41 e0       	ldi	r20, 0x01	; 1
    d2de:	6f ef       	ldi	r22, 0xFF	; 255
    d2e0:	82 e0       	ldi	r24, 0x02	; 2
    d2e2:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
    d2e6:	40 c0       	rjmp	.+128    	; 0xd368 <update_splash+0xc6>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d2e8:	8e e4       	ldi	r24, 0x4E	; 78
    d2ea:	9e e0       	ldi	r25, 0x0E	; 14
    d2ec:	0e 94 81 66 	call	0xcd02	; 0xcd02 <select_pressed>
    d2f0:	88 23       	and	r24, r24
    d2f2:	b1 f0       	breq	.+44     	; 0xd320 <update_splash+0x7e>
    d2f4:	80 91 d0 0d 	lds	r24, 0x0DD0
    d2f8:	81 11       	cpse	r24, r1
    d2fa:	08 c0       	rjmp	.+16     	; 0xd30c <update_splash+0x6a>
	{
		SFX_NAVIGATE;
    d2fc:	41 e0       	ldi	r20, 0x01	; 1
    d2fe:	6f ef       	ldi	r22, 0xFF	; 255
    d300:	82 e0       	ldi	r24, 0x02	; 2
    d302:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d306:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d308:	0c 94 bf 67 	jmp	0xcf7e	; 0xcf7e <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d30c:	81 30       	cpi	r24, 0x01	; 1
    d30e:	41 f4       	brne	.+16     	; 0xd320 <update_splash+0x7e>
	{
		SFX_NAVIGATE;
    d310:	41 e0       	ldi	r20, 0x01	; 1
    d312:	6f ef       	ldi	r22, 0xFF	; 255
    d314:	82 e0       	ldi	r24, 0x02	; 2
    d316:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d31a:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d31c:	0c 94 31 68 	jmp	0xd062	; 0xd062 <load_high_scores>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    d320:	80 91 f5 0c 	lds	r24, 0x0CF5
    d324:	90 91 f6 0c 	lds	r25, 0x0CF6
    d328:	88 35       	cpi	r24, 0x58	; 88
    d32a:	92 40       	sbci	r25, 0x02	; 2
    d32c:	e8 f0       	brcs	.+58     	; 0xd368 <update_splash+0xc6>
	{
		demo_counter = 0;
    d32e:	10 92 f6 0c 	sts	0x0CF6, r1
    d332:	10 92 f5 0c 	sts	0x0CF5, r1
		game.selection = DEMO_SELECTED;
    d336:	82 e0       	ldi	r24, 0x02	; 2
    d338:	80 93 d0 0d 	sts	0x0DD0, r24
		demo_load(demo_choice++);
    d33c:	80 91 f4 0c 	lds	r24, 0x0CF4
    d340:	91 e0       	ldi	r25, 0x01	; 1
    d342:	98 0f       	add	r25, r24
    d344:	90 93 f4 0c 	sts	0x0CF4, r25
    d348:	0e 94 dd 67 	call	0xcfba	; 0xcfba <demo_load>
		if (demo_choice == 2) demo_choice = 3;
    d34c:	80 91 f4 0c 	lds	r24, 0x0CF4
    d350:	82 30       	cpi	r24, 0x02	; 2
    d352:	19 f4       	brne	.+6      	; 0xd35a <update_splash+0xb8>
    d354:	83 e0       	ldi	r24, 0x03	; 3
    d356:	80 93 f4 0c 	sts	0x0CF4, r24
		if (demo_choice == 5) demo_choice = 0;
    d35a:	80 91 f4 0c 	lds	r24, 0x0CF4
    d35e:	85 30       	cpi	r24, 0x05	; 5
    d360:	d1 f4       	brne	.+52     	; 0xd396 <update_splash+0xf4>
    d362:	10 92 f4 0c 	sts	0x0CF4, r1
    d366:	17 c0       	rjmp	.+46     	; 0xd396 <update_splash+0xf4>
		return;
		
	}
	demo_counter++;
    d368:	80 91 f5 0c 	lds	r24, 0x0CF5
    d36c:	90 91 f6 0c 	lds	r25, 0x0CF6
    d370:	01 96       	adiw	r24, 0x01	; 1
    d372:	90 93 f6 0c 	sts	0x0CF6, r25
    d376:	80 93 f5 0c 	sts	0x0CF5, r24
	
	if (game.selection == START_SELECTED)
    d37a:	80 91 d0 0d 	lds	r24, 0x0DD0
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d37e:	01 e0       	ldi	r16, 0x01	; 1
    d380:	21 e0       	ldi	r18, 0x01	; 1
		return;
		
	}
	demo_counter++;
	
	if (game.selection == START_SELECTED)
    d382:	81 11       	cpse	r24, r1
    d384:	03 c0       	rjmp	.+6      	; 0xd38c <update_splash+0xea>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d386:	48 e7       	ldi	r20, 0x78	; 120
    d388:	68 e3       	ldi	r22, 0x38	; 56
    d38a:	03 c0       	rjmp	.+6      	; 0xd392 <update_splash+0xf0>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d38c:	40 e8       	ldi	r20, 0x80	; 128
    d38e:	68 e3       	ldi	r22, 0x38	; 56
    d390:	80 e0       	ldi	r24, 0x00	; 0
    d392:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
	}
}
    d396:	0f 91       	pop	r16
    d398:	08 95       	ret

0000d39a <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{	
    d39a:	0f 93       	push	r16
    d39c:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_X)
    d39e:	80 91 4e 0e 	lds	r24, 0x0E4E
    d3a2:	90 91 4f 0e 	lds	r25, 0x0E4F
    d3a6:	91 ff       	sbrs	r25, 1
    d3a8:	10 c0       	rjmp	.+32     	; 0xd3ca <update_high_scores+0x30>
	{
		game.high_score_counter = 0;
    d3aa:	10 92 d9 0d 	sts	0x0DD9, r1
		SFX_NAVIGATE;
    d3ae:	41 e0       	ldi	r20, 0x01	; 1
    d3b0:	6f ef       	ldi	r22, 0xFF	; 255
    d3b2:	82 e0       	ldi	r24, 0x02	; 2
    d3b4:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
		game.high_score_index = -1;
    d3b8:	8f ef       	ldi	r24, 0xFF	; 255
    d3ba:	80 93 c9 0d 	sts	0x0DC9, r24
		game.score = 0;
    d3be:	10 92 ba 0d 	sts	0x0DBA, r1
    d3c2:	10 92 b9 0d 	sts	0x0DB9, r1
		save_eeprom(&scores);
		load_splash();
    d3c6:	0e 94 00 68 	call	0xd000	; 0xd000 <load_splash>
	}
	if ((game.player.controls.held & BTN_SL) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    d3ca:	80 91 52 0e 	lds	r24, 0x0E52
    d3ce:	90 91 53 0e 	lds	r25, 0x0E53
    d3d2:	92 ff       	sbrs	r25, 2
    d3d4:	13 c0       	rjmp	.+38     	; 0xd3fc <update_high_scores+0x62>
    d3d6:	80 91 54 0e 	lds	r24, 0x0E54
    d3da:	8f 3f       	cpi	r24, 0xFF	; 255
    d3dc:	79 f4       	brne	.+30     	; 0xd3fc <update_high_scores+0x62>
    d3de:	80 91 c9 0d 	lds	r24, 0x0DC9
    d3e2:	8f 3f       	cpi	r24, 0xFF	; 255
    d3e4:	59 f4       	brne	.+22     	; 0xd3fc <update_high_scores+0x62>
	{
		game.high_score_counter = 0;
    d3e6:	10 92 d9 0d 	sts	0x0DD9, r1
	    SFX_NAVIGATE;
    d3ea:	41 e0       	ldi	r20, 0x01	; 1
    d3ec:	6f ef       	ldi	r22, 0xFF	; 255
    d3ee:	82 e0       	ldi	r24, 0x02	; 2
    d3f0:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
		init_default_high_scores();
    d3f4:	0e 94 85 4f 	call	0x9f0a	; 0x9f0a <init_default_high_scores>
	    save_eeprom(&scores);
		load_high_scores();
    d3f8:	0e 94 31 68 	call	0xd062	; 0xd062 <load_high_scores>
	}
	
	if (game.high_score_index != -1)
    d3fc:	30 91 c9 0d 	lds	r19, 0x0DC9
    d400:	3f 3f       	cpi	r19, 0xFF	; 255
    d402:	09 f4       	brne	.+2      	; 0xd406 <update_high_scores+0x6c>
    d404:	7f c0       	rjmp	.+254    	; 0xd504 <update_high_scores+0x16a>
	{
		game.high_score_counter = 0;
    d406:	10 92 d9 0d 	sts	0x0DD9, r1
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d40a:	20 91 4e 0e 	lds	r18, 0x0E4E
    d40e:	27 ff       	sbrs	r18, 7
    d410:	1e c0       	rjmp	.+60     	; 0xd44e <update_high_scores+0xb4>
    d412:	83 2f       	mov	r24, r19
    d414:	65 e0       	ldi	r22, 0x05	; 5
    d416:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <__divmodqi4>
    d41a:	92 30       	cpi	r25, 0x02	; 2
    d41c:	c1 f0       	breq	.+48     	; 0xd44e <update_high_scores+0xb4>
		{
			SFX_NAVIGATE;
    d41e:	41 e0       	ldi	r20, 0x01	; 1
    d420:	6f ef       	ldi	r22, 0xFF	; 255
    d422:	82 e0       	ldi	r24, 0x02	; 2
    d424:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
			game.high_score_index++;
    d428:	80 91 c9 0d 	lds	r24, 0x0DC9
    d42c:	8f 5f       	subi	r24, 0xFF	; 255
    d42e:	80 93 c9 0d 	sts	0x0DC9, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d432:	60 91 ed 0f 	lds	r22, 0x0FED
    d436:	68 5f       	subi	r22, 0xF8	; 248
    d438:	01 e0       	ldi	r16, 0x01	; 1
    d43a:	21 e0       	ldi	r18, 0x01	; 1
    d43c:	40 91 ee 0f 	lds	r20, 0x0FEE
    d440:	82 e0       	ldi	r24, 0x02	; 2
    d442:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d446:	60 91 f1 0f 	lds	r22, 0x0FF1
    d44a:	68 5f       	subi	r22, 0xF8	; 248
    d44c:	1f c0       	rjmp	.+62     	; 0xd48c <update_high_scores+0xf2>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d44e:	26 ff       	sbrs	r18, 6
    d450:	24 c0       	rjmp	.+72     	; 0xd49a <update_high_scores+0x100>
    d452:	83 2f       	mov	r24, r19
    d454:	65 e0       	ldi	r22, 0x05	; 5
    d456:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <__divmodqi4>
    d45a:	99 23       	and	r25, r25
    d45c:	f1 f0       	breq	.+60     	; 0xd49a <update_high_scores+0x100>
		{
			SFX_NAVIGATE;
    d45e:	41 e0       	ldi	r20, 0x01	; 1
    d460:	6f ef       	ldi	r22, 0xFF	; 255
    d462:	82 e0       	ldi	r24, 0x02	; 2
    d464:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
			game.high_score_index--;
    d468:	80 91 c9 0d 	lds	r24, 0x0DC9
    d46c:	81 50       	subi	r24, 0x01	; 1
    d46e:	80 93 c9 0d 	sts	0x0DC9, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d472:	60 91 ed 0f 	lds	r22, 0x0FED
    d476:	68 50       	subi	r22, 0x08	; 8
    d478:	01 e0       	ldi	r16, 0x01	; 1
    d47a:	21 e0       	ldi	r18, 0x01	; 1
    d47c:	40 91 ee 0f 	lds	r20, 0x0FEE
    d480:	82 e0       	ldi	r24, 0x02	; 2
    d482:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d486:	60 91 f1 0f 	lds	r22, 0x0FF1
    d48a:	68 50       	subi	r22, 0x08	; 8
    d48c:	21 e0       	ldi	r18, 0x01	; 1
    d48e:	40 91 f2 0f 	lds	r20, 0x0FF2
    d492:	83 e0       	ldi	r24, 0x03	; 3
    d494:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
    d498:	35 c0       	rjmp	.+106    	; 0xd504 <update_high_scores+0x16a>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d49a:	24 ff       	sbrs	r18, 4
    d49c:	13 c0       	rjmp	.+38     	; 0xd4c4 <update_high_scores+0x12a>
		{
			SFX_NAVIGATE;
    d49e:	41 e0       	ldi	r20, 0x01	; 1
    d4a0:	6f ef       	ldi	r22, 0xFF	; 255
    d4a2:	82 e0       	ldi	r24, 0x02	; 2
    d4a4:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d4a8:	80 91 c9 0d 	lds	r24, 0x0DC9
    d4ac:	e8 2f       	mov	r30, r24
    d4ae:	ff 27       	eor	r31, r31
    d4b0:	e7 fd       	sbrc	r30, 7
    d4b2:	f0 95       	com	r31
    d4b4:	e9 56       	subi	r30, 0x69	; 105
    d4b6:	f2 4f       	sbci	r31, 0xF2	; 242
    d4b8:	92 81       	ldd	r25, Z+2	; 0x02
    d4ba:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d4bc:	91 34       	cpi	r25, 0x41	; 65
    d4be:	b0 f4       	brcc	.+44     	; 0xd4ec <update_high_scores+0x152>
    d4c0:	91 e4       	ldi	r25, 0x41	; 65
    d4c2:	14 c0       	rjmp	.+40     	; 0xd4ec <update_high_scores+0x152>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d4c4:	25 ff       	sbrs	r18, 5
    d4c6:	1e c0       	rjmp	.+60     	; 0xd504 <update_high_scores+0x16a>
		{
			SFX_NAVIGATE;
    d4c8:	41 e0       	ldi	r20, 0x01	; 1
    d4ca:	6f ef       	ldi	r22, 0xFF	; 255
    d4cc:	82 e0       	ldi	r24, 0x02	; 2
    d4ce:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d4d2:	80 91 c9 0d 	lds	r24, 0x0DC9
    d4d6:	e8 2f       	mov	r30, r24
    d4d8:	ff 27       	eor	r31, r31
    d4da:	e7 fd       	sbrc	r30, 7
    d4dc:	f0 95       	com	r31
    d4de:	e9 56       	subi	r30, 0x69	; 105
    d4e0:	f2 4f       	sbci	r31, 0xF2	; 242
    d4e2:	92 81       	ldd	r25, Z+2	; 0x02
    d4e4:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d4e6:	9b 35       	cpi	r25, 0x5B	; 91
    d4e8:	08 f0       	brcs	.+2      	; 0xd4ec <update_high_scores+0x152>
    d4ea:	9a e5       	ldi	r25, 0x5A	; 90
    d4ec:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d4ee:	65 e0       	ldi	r22, 0x05	; 5
    d4f0:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <__divmodqi4>
    d4f4:	68 2f       	mov	r22, r24
    d4f6:	66 0f       	add	r22, r22
    d4f8:	69 5f       	subi	r22, 0xF9	; 249
    d4fa:	42 81       	ldd	r20, Z+2	; 0x02
    d4fc:	8b e0       	ldi	r24, 0x0B	; 11
    d4fe:	89 0f       	add	r24, r25
    d500:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <LBPrintChar>
		}
	}
	if (game.high_score_counter >= HIGH_SCORES_LENGTH)
    d504:	c0 91 d9 0d 	lds	r28, 0x0DD9
    d508:	cf 3f       	cpi	r28, 0xFF	; 255
    d50a:	79 f4       	brne	.+30     	; 0xd52a <update_high_scores+0x190>
	{
		game.high_score_counter = 0;
    d50c:	10 92 d9 0d 	sts	0x0DD9, r1
		SFX_NAVIGATE;
    d510:	41 e0       	ldi	r20, 0x01	; 1
    d512:	6f ef       	ldi	r22, 0xFF	; 255
    d514:	82 e0       	ldi	r24, 0x02	; 2
    d516:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
		game.high_score_index = -1;
    d51a:	c0 93 c9 0d 	sts	0x0DC9, r28
		game.score = 0;
    d51e:	10 92 ba 0d 	sts	0x0DBA, r1
    d522:	10 92 b9 0d 	sts	0x0DB9, r1
		load_splash();
    d526:	0e 94 00 68 	call	0xd000	; 0xd000 <load_splash>
	}
	game.high_score_counter++;
    d52a:	80 91 d9 0d 	lds	r24, 0x0DD9
    d52e:	8f 5f       	subi	r24, 0xFF	; 255
    d530:	80 93 d9 0d 	sts	0x0DD9, r24
}
    d534:	cf 91       	pop	r28
    d536:	0f 91       	pop	r16
    d538:	08 95       	ret

0000d53a <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d53a:	2f 92       	push	r2
    d53c:	3f 92       	push	r3
    d53e:	4f 92       	push	r4
    d540:	5f 92       	push	r5
    d542:	6f 92       	push	r6
    d544:	7f 92       	push	r7
    d546:	8f 92       	push	r8
    d548:	9f 92       	push	r9
    d54a:	af 92       	push	r10
    d54c:	bf 92       	push	r11
    d54e:	cf 92       	push	r12
    d550:	df 92       	push	r13
    d552:	ef 92       	push	r14
    d554:	ff 92       	push	r15
    d556:	0f 93       	push	r16
    d558:	1f 93       	push	r17
    d55a:	cf 93       	push	r28
    d55c:	df 93       	push	r29
    d55e:	7c 01       	movw	r14, r24
    d560:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d562:	c0 91 b2 0c 	lds	r28, 0x0CB2
    d566:	c6 95       	lsr	r28
    d568:	c6 95       	lsr	r28
    d56a:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d56c:	00 91 b3 0c 	lds	r16, 0x0CB3
    d570:	06 95       	lsr	r16
    d572:	06 95       	lsr	r16
    d574:	06 95       	lsr	r16
	u16 tally = game.score;
    d576:	a0 90 b9 0d 	lds	r10, 0x0DB9
    d57a:	b0 90 ba 0d 	lds	r11, 0x0DBA
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d57e:	64 e1       	ldi	r22, 0x14	; 20
    d580:	80 e0       	ldi	r24, 0x00	; 0
    d582:	0e 94 65 66 	call	0xccca	; 0xccca <hide_sprites>
	LBRotateSprites();
    d586:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	
	StopSong();
    d58a:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d58e:	10 e0       	ldi	r17, 0x00	; 0
    d590:	d0 e0       	ldi	r29, 0x00	; 0
    d592:	c8 01       	movw	r24, r16
    d594:	06 96       	adiw	r24, 0x06	; 6
    d596:	2e e1       	ldi	r18, 0x1E	; 30
    d598:	82 2e       	mov	r8, r18
    d59a:	91 2c       	mov	r9, r1
    d59c:	b4 01       	movw	r22, r8
    d59e:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    d5a2:	9e 01       	movw	r18, r28
    d5a4:	28 5f       	subi	r18, 0xF8	; 248
    d5a6:	3f 4f       	sbci	r19, 0xFF	; 255
    d5a8:	4d e8       	ldi	r20, 0x8D	; 141
    d5aa:	5a e5       	ldi	r21, 0x5A	; 90
    d5ac:	68 2f       	mov	r22, r24
    d5ae:	82 2f       	mov	r24, r18
    d5b0:	8f 71       	andi	r24, 0x1F	; 31
    d5b2:	0e 94 5d 4c 	call	0x98ba	; 0x98ba <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d5b6:	c8 01       	movw	r24, r16
    d5b8:	07 96       	adiw	r24, 0x07	; 7
    d5ba:	b4 01       	movw	r22, r8
    d5bc:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    d5c0:	9e 01       	movw	r18, r28
    d5c2:	26 5f       	subi	r18, 0xF6	; 246
    d5c4:	3f 4f       	sbci	r19, 0xFF	; 255
    d5c6:	a7 01       	movw	r20, r14
    d5c8:	68 2f       	mov	r22, r24
    d5ca:	82 2f       	mov	r24, r18
    d5cc:	8f 71       	andi	r24, 0x1F	; 31
    d5ce:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d5d2:	c8 01       	movw	r24, r16
    d5d4:	09 96       	adiw	r24, 0x09	; 9
    d5d6:	b4 01       	movw	r22, r8
    d5d8:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    d5dc:	48 2e       	mov	r4, r24
    d5de:	78 2e       	mov	r7, r24
    d5e0:	7e 01       	movw	r14, r28
    d5e2:	29 e0       	ldi	r18, 0x09	; 9
    d5e4:	e2 0e       	add	r14, r18
    d5e6:	f1 1c       	adc	r15, r1
    d5e8:	8f e1       	ldi	r24, 0x1F	; 31
    d5ea:	e8 22       	and	r14, r24
    d5ec:	ff 24       	eor	r15, r15
    d5ee:	4b e1       	ldi	r20, 0x1B	; 27
    d5f0:	53 e0       	ldi	r21, 0x03	; 3
    d5f2:	64 2d       	mov	r22, r4
    d5f4:	8e 2d       	mov	r24, r14
    d5f6:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d5fa:	c8 01       	movw	r24, r16
    d5fc:	0b 96       	adiw	r24, 0x0b	; 11
    d5fe:	b4 01       	movw	r22, r8
    d600:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    d604:	38 2e       	mov	r3, r24
    d606:	68 2e       	mov	r6, r24
    d608:	41 e7       	ldi	r20, 0x71	; 113
    d60a:	53 e0       	ldi	r21, 0x03	; 3
    d60c:	68 2f       	mov	r22, r24
    d60e:	8e 2d       	mov	r24, r14
    d610:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d614:	c8 01       	movw	r24, r16
    d616:	0c 96       	adiw	r24, 0x0c	; 12
    d618:	b4 01       	movw	r22, r8
    d61a:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    d61e:	58 2e       	mov	r5, r24
    d620:	f8 2e       	mov	r15, r24
    d622:	4c e5       	ldi	r20, 0x5C	; 92
    d624:	53 e0       	ldi	r21, 0x03	; 3
    d626:	68 2f       	mov	r22, r24
    d628:	8e 2d       	mov	r24, r14
    d62a:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d62e:	c8 01       	movw	r24, r16
    d630:	0d 96       	adiw	r24, 0x0d	; 13
    d632:	b4 01       	movw	r22, r8
    d634:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    d638:	18 2f       	mov	r17, r24
    d63a:	28 2e       	mov	r2, r24
    d63c:	4c e2       	ldi	r20, 0x2C	; 44
    d63e:	53 e0       	ldi	r21, 0x03	; 3
    d640:	68 2f       	mov	r22, r24
    d642:	8e 2d       	mov	r24, r14
    d644:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d648:	64 96       	adiw	r28, 0x14	; 20
    d64a:	cf 71       	andi	r28, 0x1F	; 31
    d64c:	dd 27       	eor	r29, r29
    d64e:	ec 2e       	mov	r14, r28
    d650:	21 e0       	ldi	r18, 0x01	; 1
    d652:	a5 01       	movw	r20, r10
    d654:	64 2d       	mov	r22, r4
    d656:	8c 2f       	mov	r24, r28
    d658:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d65c:	40 91 bb 0d 	lds	r20, 0x0DBB
    d660:	50 91 bc 0d 	lds	r21, 0x0DBC
    d664:	21 e0       	ldi	r18, 0x01	; 1
    d666:	63 2d       	mov	r22, r3
    d668:	8c 2f       	mov	r24, r28
    d66a:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d66e:	40 91 bd 0d 	lds	r20, 0x0DBD
    d672:	50 91 be 0d 	lds	r21, 0x0DBE
    d676:	21 e0       	ldi	r18, 0x01	; 1
    d678:	65 2d       	mov	r22, r5
    d67a:	8c 2f       	mov	r24, r28
    d67c:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d680:	21 e0       	ldi	r18, 0x01	; 1
    d682:	a6 01       	movw	r20, r12
    d684:	61 2f       	mov	r22, r17
    d686:	8c 2f       	mov	r24, r28
    d688:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	
	LBWaitSeconds(2);
    d68c:	82 e0       	ldi	r24, 0x02	; 2
    d68e:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d692:	80 90 bb 0d 	lds	r8, 0x0DBB
    d696:	90 90 bc 0d 	lds	r9, 0x0DBC
    d69a:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d69c:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d69e:	20 97       	sbiw	r28, 0x00	; 0
    d6a0:	e9 f0       	breq	.+58     	; 0xd6dc <tally_score+0x1a2>
	{
		WaitVsync(1);
    d6a2:	81 e0       	ldi	r24, 0x01	; 1
    d6a4:	90 e0       	ldi	r25, 0x00	; 0
    d6a6:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
		SFX_HIT;
    d6aa:	41 e0       	ldi	r20, 0x01	; 1
    d6ac:	6f ef       	ldi	r22, 0xFF	; 255
    d6ae:	84 e0       	ldi	r24, 0x04	; 4
    d6b0:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
		tally += 1;
    d6b4:	0f 5f       	subi	r16, 0xFF	; 255
    d6b6:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d6b8:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d6ba:	21 e0       	ldi	r18, 0x01	; 1
    d6bc:	a8 01       	movw	r20, r16
    d6be:	67 2d       	mov	r22, r7
    d6c0:	8e 2d       	mov	r24, r14
    d6c2:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d6c6:	21 e0       	ldi	r18, 0x01	; 1
    d6c8:	ae 01       	movw	r20, r28
    d6ca:	66 2d       	mov	r22, r6
    d6cc:	8e 2d       	mov	r24, r14
    d6ce:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d6d2:	8c ed       	ldi	r24, 0xDC	; 220
    d6d4:	95 e0       	ldi	r25, 0x05	; 5
    d6d6:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <WaitUs>
    d6da:	e1 cf       	rjmp	.-62     	; 0xd69e <tally_score+0x164>
    d6dc:	a8 0c       	add	r10, r8
    d6de:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d6e0:	c0 91 bd 0d 	lds	r28, 0x0DBD
    d6e4:	d0 91 be 0d 	lds	r29, 0x0DBE
	while (counter > 0)
    d6e8:	20 97       	sbiw	r28, 0x00	; 0
    d6ea:	31 f1       	breq	.+76     	; 0xd738 <tally_score+0x1fe>
	{
		WaitVsync(1);
    d6ec:	81 e0       	ldi	r24, 0x01	; 1
    d6ee:	90 e0       	ldi	r25, 0x00	; 0
    d6f0:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
		SFX_HIT;
    d6f4:	41 e0       	ldi	r20, 0x01	; 1
    d6f6:	6f ef       	ldi	r22, 0xFF	; 255
    d6f8:	84 e0       	ldi	r24, 0x04	; 4
    d6fa:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d6fe:	c5 01       	movw	r24, r10
    d700:	02 97       	sbiw	r24, 0x02	; 2
    d702:	8e 3f       	cpi	r24, 0xFE	; 254
    d704:	9f 4f       	sbci	r25, 0xFF	; 255
    d706:	20 f4       	brcc	.+8      	; 0xd710 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d708:	81 e0       	ldi	r24, 0x01	; 1
    d70a:	a8 1a       	sub	r10, r24
    d70c:	b1 08       	sbc	r11, r1
    d70e:	02 c0       	rjmp	.+4      	; 0xd714 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d710:	a1 2c       	mov	r10, r1
    d712:	b1 2c       	mov	r11, r1
		counter -= 1;
    d714:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d716:	21 e0       	ldi	r18, 0x01	; 1
    d718:	a5 01       	movw	r20, r10
    d71a:	67 2d       	mov	r22, r7
    d71c:	8e 2d       	mov	r24, r14
    d71e:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d722:	21 e0       	ldi	r18, 0x01	; 1
    d724:	ae 01       	movw	r20, r28
    d726:	6f 2d       	mov	r22, r15
    d728:	8e 2d       	mov	r24, r14
    d72a:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d72e:	8c ed       	ldi	r24, 0xDC	; 220
    d730:	95 e0       	ldi	r25, 0x05	; 5
    d732:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <WaitUs>
    d736:	d8 cf       	rjmp	.-80     	; 0xd6e8 <tally_score+0x1ae>
    d738:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d73a:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d73c:	20 97       	sbiw	r28, 0x00	; 0
    d73e:	e9 f0       	breq	.+58     	; 0xd77a <tally_score+0x240>
	{
		WaitVsync(1);
    d740:	81 e0       	ldi	r24, 0x01	; 1
    d742:	90 e0       	ldi	r25, 0x00	; 0
    d744:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
		SFX_HIT;
    d748:	41 e0       	ldi	r20, 0x01	; 1
    d74a:	6f ef       	ldi	r22, 0xFF	; 255
    d74c:	84 e0       	ldi	r24, 0x04	; 4
    d74e:	0e 94 c0 41 	call	0x8380	; 0x8380 <TriggerFx>
		tally += 1;
    d752:	0f 5f       	subi	r16, 0xFF	; 255
    d754:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d756:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d758:	21 e0       	ldi	r18, 0x01	; 1
    d75a:	a8 01       	movw	r20, r16
    d75c:	67 2d       	mov	r22, r7
    d75e:	8e 2d       	mov	r24, r14
    d760:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d764:	21 e0       	ldi	r18, 0x01	; 1
    d766:	ae 01       	movw	r20, r28
    d768:	62 2d       	mov	r22, r2
    d76a:	8e 2d       	mov	r24, r14
    d76c:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d770:	8c ed       	ldi	r24, 0xDC	; 220
    d772:	95 e0       	ldi	r25, 0x05	; 5
    d774:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <WaitUs>
    d778:	e1 cf       	rjmp	.-62     	; 0xd73c <tally_score+0x202>
    d77a:	ac 0c       	add	r10, r12
    d77c:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d77e:	b0 92 ba 0d 	sts	0x0DBA, r11
    d782:	a0 92 b9 0d 	sts	0x0DB9, r10
	game.time = 0;
    d786:	10 92 be 0d 	sts	0x0DBE, r1
    d78a:	10 92 bd 0d 	sts	0x0DBD, r1
	LBWaitSeconds(2);
    d78e:	82 e0       	ldi	r24, 0x02	; 2
}
    d790:	df 91       	pop	r29
    d792:	cf 91       	pop	r28
    d794:	1f 91       	pop	r17
    d796:	0f 91       	pop	r16
    d798:	ff 90       	pop	r15
    d79a:	ef 90       	pop	r14
    d79c:	df 90       	pop	r13
    d79e:	cf 90       	pop	r12
    d7a0:	bf 90       	pop	r11
    d7a2:	af 90       	pop	r10
    d7a4:	9f 90       	pop	r9
    d7a6:	8f 90       	pop	r8
    d7a8:	7f 90       	pop	r7
    d7aa:	6f 90       	pop	r6
    d7ac:	5f 90       	pop	r5
    d7ae:	4f 90       	pop	r4
    d7b0:	3f 90       	pop	r3
    d7b2:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    d7b4:	0c 94 ae 4e 	jmp	0x9d5c	; 0x9d5c <LBWaitSeconds>

0000d7b8 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    d7b8:	cf 93       	push	r28
	if (player == &game.boss) {
    d7ba:	85 55       	subi	r24, 0x55	; 85
    d7bc:	9e 40       	sbci	r25, 0x0E	; 14
    d7be:	29 f4       	brne	.+10     	; 0xd7ca <handle_player_death+0x12>
		game.level_ended = 1;
    d7c0:	81 e0       	ldi	r24, 0x01	; 1
    d7c2:	80 93 d4 0d 	sts	0x0DD4, r24
		return 1;
    d7c6:	c1 e0       	ldi	r28, 0x01	; 1
    d7c8:	34 c0       	rjmp	.+104    	; 0xd832 <handle_player_death+0x7a>
	}
	game.lives--;
    d7ca:	80 91 ca 0d 	lds	r24, 0x0DCA
    d7ce:	81 50       	subi	r24, 0x01	; 1
    d7d0:	80 93 ca 0d 	sts	0x0DCA, r24
	clear_sprites(0, 6);
    d7d4:	66 e0       	ldi	r22, 0x06	; 6
    d7d6:	80 e0       	ldi	r24, 0x00	; 0
    d7d8:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
	LBRotateSprites();
    d7dc:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	if (game.lives == 0)
    d7e0:	c0 91 ca 0d 	lds	r28, 0x0DCA
    d7e4:	c1 11       	cpse	r28, r1
    d7e6:	09 c0       	rjmp	.+18     	; 0xd7fa <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    d7e8:	60 e0       	ldi	r22, 0x00	; 0
    d7ea:	70 e0       	ldi	r23, 0x00	; 0
    d7ec:	82 e2       	ldi	r24, 0x22	; 34
    d7ee:	93 e0       	ldi	r25, 0x03	; 3
    d7f0:	0e 94 9d 6a 	call	0xd53a	; 0xd53a <tally_score>
		exit_game();
    d7f4:	0e 94 41 69 	call	0xd282	; 0xd282 <exit_game>
    d7f8:	1c c0       	rjmp	.+56     	; 0xd832 <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d7fa:	61 e0       	ldi	r22, 0x01	; 1
    d7fc:	81 e0       	ldi	r24, 0x01	; 1
    d7fe:	0e 94 f7 4c 	call	0x99ee	; 0x99ee <FadeOut>
	ClearVram();
    d802:	0e 94 ac 3e 	call	0x7d58	; 0x7d58 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d806:	64 e1       	ldi	r22, 0x14	; 20
    d808:	80 e0       	ldi	r24, 0x00	; 0
    d80a:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
	LBRotateSprites();
    d80e:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d812:	60 e0       	ldi	r22, 0x00	; 0
    d814:	81 e0       	ldi	r24, 0x01	; 1
    d816:	0e 94 eb 4c 	call	0x99d6	; 0x99d6 <FadeIn>
	init_player_state();
    d81a:	0e 94 32 54 	call	0xa864	; 0xa864 <init_player_state>
	init_boss_state();
    d81e:	0e 94 a8 53 	call	0xa750	; 0xa750 <init_boss_state>
	init_enemy_state();
    d822:	0e 94 9b 4f 	call	0x9f36	; 0x9f36 <init_enemy_state>
	load_level(game.current_level_index, false);
    d826:	60 e0       	ldi	r22, 0x00	; 0
    d828:	80 91 cc 0d 	lds	r24, 0x0DCC
    d82c:	0e 94 52 65 	call	0xcaa4	; 0xcaa4 <load_level>
	return 0;
    d830:	c0 e0       	ldi	r28, 0x00	; 0
}
    d832:	8c 2f       	mov	r24, r28
    d834:	cf 91       	pop	r28
    d836:	08 95       	ret

0000d838 <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    d838:	cf 92       	push	r12
    d83a:	df 92       	push	r13
    d83c:	ef 92       	push	r14
    d83e:	ff 92       	push	r15
    d840:	0f 93       	push	r16
    d842:	1f 93       	push	r17
    d844:	cf 93       	push	r28
    d846:	df 93       	push	r29
    d848:	1f 92       	push	r1
    d84a:	cd b7       	in	r28, 0x3d	; 61
    d84c:	de b7       	in	r29, 0x3e	; 62
    d84e:	6c 01       	movw	r12, r24
    d850:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	handle_music_toggle(&player->controls);
    d852:	7c 01       	movw	r14, r24
    d854:	24 e7       	ldi	r18, 0x74	; 116
    d856:	e2 0e       	add	r14, r18
    d858:	f1 1c       	adc	r15, r1
    d85a:	c7 01       	movw	r24, r14
    d85c:	0e 94 22 5c 	call	0xb844	; 0xb844 <handle_music_toggle>
	handle_demo_play(player);
    d860:	c6 01       	movw	r24, r12
    d862:	0e 94 2e 5c 	call	0xb85c	; 0xb85c <handle_demo_play>
	
	if (player->flags & EXPLODING)
    d866:	f6 01       	movw	r30, r12
    d868:	00 85       	ldd	r16, Z+8	; 0x08
    d86a:	04 ff       	sbrs	r16, 4
    d86c:	19 c0       	rjmp	.+50     	; 0xd8a0 <update_player+0x68>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    d86e:	04 85       	ldd	r16, Z+12	; 0x0c
    d870:	23 85       	ldd	r18, Z+11	; 0x0b
    d872:	41 2f       	mov	r20, r17
    d874:	b6 01       	movw	r22, r12
    d876:	64 59       	subi	r22, 0x94	; 148
    d878:	7f 4f       	sbci	r23, 0xFF	; 255
    d87a:	c6 01       	movw	r24, r12
    d87c:	08 96       	adiw	r24, 0x08	; 8
    d87e:	0e 94 ed 5f 	call	0xbfda	; 0xbfda <map_explosion>
    d882:	88 23       	and	r24, r24
    d884:	09 f4       	brne	.+2      	; 0xd888 <update_player+0x50>
    d886:	01 c2       	rjmp	.+1026   	; 0xdc8a <update_player+0x452>
		{
			return handle_player_death(player);
    d888:	c6 01       	movw	r24, r12
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    d88a:	0f 90       	pop	r0
    d88c:	df 91       	pop	r29
    d88e:	cf 91       	pop	r28
    d890:	1f 91       	pop	r17
    d892:	0f 91       	pop	r16
    d894:	ff 90       	pop	r15
    d896:	ef 90       	pop	r14
    d898:	df 90       	pop	r13
    d89a:	cf 90       	pop	r12
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    d89c:	0c 94 dc 6b 	jmp	0xd7b8	; 0xd7b8 <handle_player_death>
		}
	}
	else if (is_space())
    d8a0:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    d8a4:	88 23       	and	r24, r24
    d8a6:	09 f4       	brne	.+2      	; 0xd8aa <update_player+0x72>
    d8a8:	a6 c0       	rjmp	.+332    	; 0xd9f6 <update_player+0x1be>
	{
		if (game.current_level_index == 9)
    d8aa:	80 91 cc 0d 	lds	r24, 0x0DCC
    d8ae:	89 30       	cpi	r24, 0x09	; 9
    d8b0:	09 f0       	breq	.+2      	; 0xd8b4 <update_player+0x7c>
    d8b2:	4d c0       	rjmp	.+154    	; 0xd94e <update_player+0x116>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    d8b4:	80 91 b7 0d 	lds	r24, 0x0DB7
    d8b8:	90 91 b8 0d 	lds	r25, 0x0DB8
    d8bc:	e3 e0       	ldi	r30, 0x03	; 3
    d8be:	96 95       	lsr	r25
    d8c0:	87 95       	ror	r24
    d8c2:	ea 95       	dec	r30
    d8c4:	e1 f7       	brne	.-8      	; 0xd8be <update_player+0x86>
    d8c6:	4c 96       	adiw	r24, 0x1c	; 28
    d8c8:	82 3d       	cpi	r24, 0xD2	; 210
    d8ca:	91 05       	cpc	r25, r1
    d8cc:	08 f4       	brcc	.+2      	; 0xd8d0 <update_player+0x98>
    d8ce:	3f c0       	rjmp	.+126    	; 0xd94e <update_player+0x116>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    d8d0:	05 ff       	sbrs	r16, 5
    d8d2:	02 c0       	rjmp	.+4      	; 0xd8d8 <update_player+0xa0>
				{
					space_ship_speed = 0;
    d8d4:	00 e0       	ldi	r16, 0x00	; 0
    d8d6:	01 c0       	rjmp	.+2      	; 0xd8da <update_player+0xa2>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    d8d8:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(game.flags & BOSS_APROACHING))
    d8da:	80 91 d6 0d 	lds	r24, 0x0DD6
    d8de:	86 fd       	sbrc	r24, 6
    d8e0:	07 c0       	rjmp	.+14     	; 0xd8f0 <update_player+0xb8>
				{
					game.flags |= BOSS_APROACHING;
    d8e2:	80 64       	ori	r24, 0x40	; 64
    d8e4:	80 93 d6 0d 	sts	0x0DD6, r24
					explode_all_enemies();
    d8e8:	0e 94 06 5c 	call	0xb80c	; 0xb80c <explode_all_enemies>
					StopSong();
    d8ec:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(game.flags & BOSS_REACHED))
    d8f0:	80 91 b7 0d 	lds	r24, 0x0DB7
    d8f4:	90 91 b8 0d 	lds	r25, 0x0DB8
    d8f8:	73 e0       	ldi	r23, 0x03	; 3
    d8fa:	96 95       	lsr	r25
    d8fc:	87 95       	ror	r24
    d8fe:	7a 95       	dec	r23
    d900:	e1 f7       	brne	.-8      	; 0xd8fa <update_player+0xc2>
    d902:	4c 96       	adiw	r24, 0x1c	; 28
    d904:	8a 3f       	cpi	r24, 0xFA	; 250
    d906:	91 05       	cpc	r25, r1
    d908:	68 f0       	brcs	.+26     	; 0xd924 <update_player+0xec>
    d90a:	80 91 d6 0d 	lds	r24, 0x0DD6
    d90e:	87 fd       	sbrc	r24, 7
    d910:	09 c0       	rjmp	.+18     	; 0xd924 <update_player+0xec>
				{
					game.flags |= BOSS_REACHED;
    d912:	80 68       	ori	r24, 0x80	; 128
    d914:	80 93 d6 0d 	sts	0x0DD6, r24
					init_enemy_boss_turrets();
    d918:	0e 94 64 57 	call	0xaec8	; 0xaec8 <init_enemy_boss_turrets>
					StartSong(planetsong);
    d91c:	88 ec       	ldi	r24, 0xC8	; 200
    d91e:	9b e0       	ldi	r25, 0x0B	; 11
    d920:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <StartSong>
				}
				if ((game.flags & BOSS_REACHED) && (game.active_enemies == 0))
    d924:	80 91 d6 0d 	lds	r24, 0x0DD6
    d928:	87 ff       	sbrs	r24, 7
    d92a:	12 c0       	rjmp	.+36     	; 0xd950 <update_player+0x118>
    d92c:	80 91 d2 0d 	lds	r24, 0x0DD2
    d930:	81 11       	cpse	r24, r1
    d932:	0e c0       	rjmp	.+28     	; 0xd950 <update_player+0x118>
				{
					init_enemy_boss_eyes();
    d934:	0e 94 84 57 	call	0xaf08	; 0xaf08 <init_enemy_boss_eyes>
					game.eye_clusters--;
    d938:	80 91 d5 0d 	lds	r24, 0x0DD5
    d93c:	81 50       	subi	r24, 0x01	; 1
    d93e:	80 93 d5 0d 	sts	0x0DD5, r24
					if (game.eye_clusters == 0)
    d942:	81 11       	cpse	r24, r1
    d944:	05 c0       	rjmp	.+10     	; 0xd950 <update_player+0x118>
					{
						game.level_ended = 1;
    d946:	81 e0       	ldi	r24, 0x01	; 1
    d948:	80 93 d4 0d 	sts	0x0DD4, r24
    d94c:	01 c0       	rjmp	.+2      	; 0xd950 <update_player+0x118>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    d94e:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    d950:	f6 01       	movw	r30, r12
    d952:	80 85       	ldd	r24, Z+8	; 0x08
    d954:	85 ff       	sbrs	r24, 5
    d956:	08 c0       	rjmp	.+16     	; 0xd968 <update_player+0x130>
    d958:	80 91 cc 0d 	lds	r24, 0x0DCC
    d95c:	89 30       	cpi	r24, 0x09	; 9
    d95e:	21 f0       	breq	.+8      	; 0xd968 <update_player+0x130>
			player->shared.vx = space_ship_speed*2;
    d960:	00 0f       	add	r16, r16
    d962:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    d964:	14 82       	std	Z+4, r1	; 0x04
    d966:	43 c0       	rjmp	.+134    	; 0xd9ee <update_player+0x1b6>
		} else {
			player->shared.vy = 0;
    d968:	f6 01       	movw	r30, r12
    d96a:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    d96c:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    d96e:	e8 58       	subi	r30, 0x88	; 136
    d970:	ff 4f       	sbci	r31, 0xFF	; 255
    d972:	20 81       	ld	r18, Z
    d974:	25 ff       	sbrs	r18, 5
    d976:	11 c0       	rjmp	.+34     	; 0xd99a <update_player+0x162>
    d978:	f6 01       	movw	r30, r12
    d97a:	82 81       	ldd	r24, Z+2	; 0x02
    d97c:	93 81       	ldd	r25, Z+3	; 0x03
    d97e:	63 e0       	ldi	r22, 0x03	; 3
    d980:	96 95       	lsr	r25
    d982:	87 95       	ror	r24
    d984:	6a 95       	dec	r22
    d986:	e1 f7       	brne	.-8      	; 0xd980 <update_player+0x148>
    d988:	01 96       	adiw	r24, 0x01	; 1
    d98a:	40 91 c7 0d 	lds	r20, 0x0DC7
    d98e:	50 e0       	ldi	r21, 0x00	; 0
    d990:	84 17       	cp	r24, r20
    d992:	95 07       	cpc	r25, r21
    d994:	10 f4       	brcc	.+4      	; 0xd99a <update_player+0x162>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    d996:	8c e3       	ldi	r24, 0x3C	; 60
    d998:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    d99a:	27 ff       	sbrs	r18, 7
    d99c:	11 c0       	rjmp	.+34     	; 0xd9c0 <update_player+0x188>
    d99e:	f6 01       	movw	r30, r12
    d9a0:	40 81       	ld	r20, Z
    d9a2:	51 81       	ldd	r21, Z+1	; 0x01
    d9a4:	48 5e       	subi	r20, 0xE8	; 232
    d9a6:	5f 4f       	sbci	r21, 0xFF	; 255
    d9a8:	80 91 b7 0d 	lds	r24, 0x0DB7
    d9ac:	90 91 b8 0d 	lds	r25, 0x0DB8
    d9b0:	80 52       	subi	r24, 0x20	; 32
    d9b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d9b4:	48 17       	cp	r20, r24
    d9b6:	59 07       	cpc	r21, r25
    d9b8:	18 f4       	brcc	.+6      	; 0xd9c0 <update_player+0x188>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    d9ba:	8c e3       	ldi	r24, 0x3C	; 60
    d9bc:	80 0f       	add	r24, r16
    d9be:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d9c0:	26 ff       	sbrs	r18, 6
    d9c2:	0c c0       	rjmp	.+24     	; 0xd9dc <update_player+0x1a4>
    d9c4:	f6 01       	movw	r30, r12
    d9c6:	40 81       	ld	r20, Z
    d9c8:	51 81       	ldd	r21, Z+1	; 0x01
    d9ca:	80 91 b7 0d 	lds	r24, 0x0DB7
    d9ce:	90 91 b8 0d 	lds	r25, 0x0DB8
    d9d2:	84 17       	cp	r24, r20
    d9d4:	95 07       	cpc	r25, r21
    d9d6:	10 f4       	brcc	.+4      	; 0xd9dc <update_player+0x1a4>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    d9d8:	0c 53       	subi	r16, 0x3C	; 60
    d9da:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    d9dc:	24 ff       	sbrs	r18, 4
    d9de:	07 c0       	rjmp	.+14     	; 0xd9ee <update_player+0x1b6>
    d9e0:	f6 01       	movw	r30, r12
    d9e2:	82 81       	ldd	r24, Z+2	; 0x02
    d9e4:	93 81       	ldd	r25, Z+3	; 0x03
    d9e6:	89 2b       	or	r24, r25
    d9e8:	11 f0       	breq	.+4      	; 0xd9ee <update_player+0x1b6>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    d9ea:	84 ec       	ldi	r24, 0xC4	; 196
    d9ec:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d9ee:	c6 01       	movw	r24, r12
    d9f0:	8c 5a       	subi	r24, 0xAC	; 172
    d9f2:	9f 4f       	sbci	r25, 0xFF	; 255
    d9f4:	43 c1       	rjmp	.+646    	; 0xdc7c <update_player+0x444>
	}
	else if (player->flags & (IDLE|RUNNING))
    d9f6:	80 2f       	mov	r24, r16
    d9f8:	8a 70       	andi	r24, 0x0A	; 10
    d9fa:	09 f4       	brne	.+2      	; 0xd9fe <update_player+0x1c6>
    d9fc:	97 c0       	rjmp	.+302    	; 0xdb2c <update_player+0x2f4>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    d9fe:	f6 01       	movw	r30, r12
    da00:	44 85       	ldd	r20, Z+12	; 0x0c
    da02:	63 85       	ldd	r22, Z+11	; 0x0b
    da04:	c6 01       	movw	r24, r12
    da06:	0e 94 a4 5a 	call	0xb548	; 0xb548 <on_solid_ground>
    da0a:	81 11       	cpse	r24, r1
    da0c:	06 c0       	rjmp	.+12     	; 0xda1a <update_player+0x1e2>
		{
			player->shared.gravity = GRAVITY;
    da0e:	88 ec       	ldi	r24, 0xC8	; 200
    da10:	f6 01       	movw	r30, r12
    da12:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    da14:	81 e0       	ldi	r24, 0x01	; 1
    da16:	80 87       	std	Z+8, r24	; 0x08
    da18:	0f c1       	rjmp	.+542    	; 0xdc38 <update_player+0x400>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    da1a:	f6 01       	movw	r30, r12
    da1c:	e8 58       	subi	r30, 0x88	; 136
    da1e:	ff 4f       	sbci	r31, 0xFF	; 255
    da20:	80 81       	ld	r24, Z
    da22:	85 ff       	sbrs	r24, 5
    da24:	26 c0       	rjmp	.+76     	; 0xda72 <update_player+0x23a>
			{
				player->shared.y += 16;
    da26:	f6 01       	movw	r30, r12
    da28:	82 81       	ldd	r24, Z+2	; 0x02
    da2a:	93 81       	ldd	r25, Z+3	; 0x03
    da2c:	40 96       	adiw	r24, 0x10	; 16
    da2e:	93 83       	std	Z+3, r25	; 0x03
    da30:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    da32:	82 85       	ldd	r24, Z+10	; 0x0a
    da34:	81 30       	cpi	r24, 0x01	; 1
    da36:	29 f4       	brne	.+10     	; 0xda42 <update_player+0x20a>
				{
					player->shared.x -= 8;
    da38:	80 81       	ld	r24, Z
    da3a:	91 81       	ldd	r25, Z+1	; 0x01
    da3c:	08 97       	sbiw	r24, 0x08	; 8
    da3e:	91 83       	std	Z+1, r25	; 0x01
    da40:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    da42:	f6 01       	movw	r30, r12
    da44:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    da46:	84 e0       	ldi	r24, 0x04	; 4
    da48:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    da4a:	83 e0       	ldi	r24, 0x03	; 3
    da4c:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    da4e:	81 e0       	ldi	r24, 0x01	; 1
    da50:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(slot+3, 3);
    da52:	63 e0       	ldi	r22, 0x03	; 3
    da54:	83 e0       	ldi	r24, 0x03	; 3
    da56:	81 0f       	add	r24, r17
    da58:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    da5c:	24 e0       	ldi	r18, 0x04	; 4
    da5e:	12 9f       	mul	r17, r18
    da60:	f0 01       	movw	r30, r0
    da62:	11 24       	eor	r1, r1
    da64:	eb 51       	subi	r30, 0x1B	; 27
    da66:	f0 4f       	sbci	r31, 0xF0	; 240
    da68:	43 81       	ldd	r20, Z+3	; 0x03
    da6a:	c6 01       	movw	r24, r12
    da6c:	8c 59       	subi	r24, 0x9C	; 156
    da6e:	9f 4f       	sbci	r25, 0xFF	; 255
    da70:	45 c0       	rjmp	.+138    	; 0xdafc <update_player+0x2c4>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    da72:	87 ff       	sbrs	r24, 7
    da74:	1d c0       	rjmp	.+58     	; 0xdab0 <update_player+0x278>
    da76:	f6 01       	movw	r30, r12
    da78:	20 81       	ld	r18, Z
    da7a:	31 81       	ldd	r19, Z+1	; 0x01
    da7c:	53 e0       	ldi	r21, 0x03	; 3
    da7e:	36 95       	lsr	r19
    da80:	27 95       	ror	r18
    da82:	5a 95       	dec	r21
    da84:	e1 f7       	brne	.-8      	; 0xda7e <update_player+0x246>
    da86:	2e 5f       	subi	r18, 0xFE	; 254
    da88:	3f 4f       	sbci	r19, 0xFF	; 255
    da8a:	40 91 c6 0d 	lds	r20, 0x0DC6
    da8e:	50 e0       	ldi	r21, 0x00	; 0
    da90:	24 17       	cp	r18, r20
    da92:	35 07       	cpc	r19, r21
    da94:	68 f4       	brcc	.+26     	; 0xdab0 <update_player+0x278>
			{
				player->shared.vx = RUN_SPEED;
    da96:	8c e3       	ldi	r24, 0x3C	; 60
    da98:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    da9a:	82 e0       	ldi	r24, 0x02	; 2
    da9c:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    da9e:	81 e0       	ldi	r24, 0x01	; 1
    daa0:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    daa2:	c6 01       	movw	r24, r12
    daa4:	8c 5a       	subi	r24, 0xAC	; 172
    daa6:	9f 4f       	sbci	r25, 0xFF	; 255
    daa8:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    daac:	40 e0       	ldi	r20, 0x00	; 0
    daae:	2a c0       	rjmp	.+84     	; 0xdb04 <update_player+0x2cc>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dab0:	86 ff       	sbrs	r24, 6
    dab2:	16 c0       	rjmp	.+44     	; 0xdae0 <update_player+0x2a8>
    dab4:	f6 01       	movw	r30, r12
    dab6:	20 81       	ld	r18, Z
    dab8:	31 81       	ldd	r19, Z+1	; 0x01
    daba:	80 91 b7 0d 	lds	r24, 0x0DB7
    dabe:	90 91 b8 0d 	lds	r25, 0x0DB8
    dac2:	82 17       	cp	r24, r18
    dac4:	93 07       	cpc	r25, r19
    dac6:	60 f4       	brcc	.+24     	; 0xdae0 <update_player+0x2a8>
			{
				player->shared.vx = -RUN_SPEED;
    dac8:	84 ec       	ldi	r24, 0xC4	; 196
    daca:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    dacc:	82 e0       	ldi	r24, 0x02	; 2
    dace:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    dad0:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    dad2:	c6 01       	movw	r24, r12
    dad4:	8c 5a       	subi	r24, 0xAC	; 172
    dad6:	9f 4f       	sbci	r25, 0xFF	; 255
    dad8:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    dadc:	41 e0       	ldi	r20, 0x01	; 1
    dade:	12 c0       	rjmp	.+36     	; 0xdb04 <update_player+0x2cc>
			}
			else
			{
				player->flags = IDLE;
    dae0:	88 e0       	ldi	r24, 0x08	; 8
    dae2:	f6 01       	movw	r30, r12
    dae4:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    dae6:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    dae8:	24 e0       	ldi	r18, 0x04	; 4
    daea:	12 9f       	mul	r17, r18
    daec:	f0 01       	movw	r30, r0
    daee:	11 24       	eor	r1, r1
    daf0:	eb 51       	subi	r30, 0x1B	; 27
    daf2:	f0 4f       	sbci	r31, 0xF0	; 240
    daf4:	43 81       	ldd	r20, Z+3	; 0x03
    daf6:	c6 01       	movw	r24, r12
    daf8:	84 5b       	subi	r24, 0xB4	; 180
    dafa:	9f 4f       	sbci	r25, 0xFF	; 255
    dafc:	49 83       	std	Y+1, r20	; 0x01
    dafe:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    db02:	49 81       	ldd	r20, Y+1	; 0x01
    db04:	bc 01       	movw	r22, r24
    db06:	81 2f       	mov	r24, r17
    db08:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
			}
			if (player->controls.pressed & BTN_A && !(player->flags & PRONE))
    db0c:	f7 01       	movw	r30, r14
    db0e:	80 81       	ld	r24, Z
    db10:	91 81       	ldd	r25, Z+1	; 0x01
    db12:	90 ff       	sbrs	r25, 0
    db14:	ba c0       	rjmp	.+372    	; 0xdc8a <update_player+0x452>
    db16:	f6 01       	movw	r30, r12
    db18:	80 85       	ldd	r24, Z+8	; 0x08
    db1a:	82 fd       	sbrc	r24, 2
    db1c:	b6 c0       	rjmp	.+364    	; 0xdc8a <update_player+0x452>
			{
				player->shared.vy = -JUMP_SPEED;
    db1e:	81 e8       	ldi	r24, 0x81	; 129
    db20:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    db22:	88 ec       	ldi	r24, 0xC8	; 200
    db24:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    db26:	81 e0       	ldi	r24, 0x01	; 1
    db28:	80 87       	std	Z+8, r24	; 0x08
    db2a:	82 c0       	rjmp	.+260    	; 0xdc30 <update_player+0x3f8>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    db2c:	00 ff       	sbrs	r16, 0
    db2e:	4c c0       	rjmp	.+152    	; 0xdbc8 <update_player+0x390>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    db30:	f6 01       	movw	r30, r12
    db32:	e8 58       	subi	r30, 0x88	; 136
    db34:	ff 4f       	sbci	r31, 0xFF	; 255
    db36:	60 81       	ld	r22, Z
    db38:	c6 01       	movw	r24, r12
    db3a:	84 5a       	subi	r24, 0xA4	; 164
    db3c:	9f 4f       	sbci	r25, 0xFF	; 255
    db3e:	67 ff       	sbrs	r22, 7
    db40:	18 c0       	rjmp	.+48     	; 0xdb72 <update_player+0x33a>
    db42:	f6 01       	movw	r30, r12
    db44:	20 81       	ld	r18, Z
    db46:	31 81       	ldd	r19, Z+1	; 0x01
    db48:	43 e0       	ldi	r20, 0x03	; 3
    db4a:	36 95       	lsr	r19
    db4c:	27 95       	ror	r18
    db4e:	4a 95       	dec	r20
    db50:	e1 f7       	brne	.-8      	; 0xdb4a <update_player+0x312>
    db52:	2e 5f       	subi	r18, 0xFE	; 254
    db54:	3f 4f       	sbci	r19, 0xFF	; 255
    db56:	40 91 c6 0d 	lds	r20, 0x0DC6
    db5a:	50 e0       	ldi	r21, 0x00	; 0
    db5c:	24 17       	cp	r18, r20
    db5e:	35 07       	cpc	r19, r21
    db60:	40 f4       	brcc	.+16     	; 0xdb72 <update_player+0x33a>
		{
			player->shared.vx = RUN_SPEED;
    db62:	2c e3       	ldi	r18, 0x3C	; 60
    db64:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    db66:	21 e0       	ldi	r18, 0x01	; 1
    db68:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    db6a:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    db6e:	40 e0       	ldi	r20, 0x00	; 0
    db70:	20 c0       	rjmp	.+64     	; 0xdbb2 <update_player+0x37a>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    db72:	66 ff       	sbrs	r22, 6
    db74:	11 c0       	rjmp	.+34     	; 0xdb98 <update_player+0x360>
    db76:	f6 01       	movw	r30, r12
    db78:	40 81       	ld	r20, Z
    db7a:	51 81       	ldd	r21, Z+1	; 0x01
    db7c:	20 91 b7 0d 	lds	r18, 0x0DB7
    db80:	30 91 b8 0d 	lds	r19, 0x0DB8
    db84:	24 17       	cp	r18, r20
    db86:	35 07       	cpc	r19, r21
    db88:	38 f4       	brcc	.+14     	; 0xdb98 <update_player+0x360>
		{
			player->shared.vx = -RUN_SPEED;
    db8a:	24 ec       	ldi	r18, 0xC4	; 196
    db8c:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    db8e:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    db90:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    db94:	41 e0       	ldi	r20, 0x01	; 1
    db96:	0d c0       	rjmp	.+26     	; 0xdbb2 <update_player+0x37a>
		}
		else
		{
			player->shared.vx = 0;
    db98:	f6 01       	movw	r30, r12
    db9a:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    db9c:	24 e0       	ldi	r18, 0x04	; 4
    db9e:	12 9f       	mul	r17, r18
    dba0:	f0 01       	movw	r30, r0
    dba2:	11 24       	eor	r1, r1
    dba4:	eb 51       	subi	r30, 0x1B	; 27
    dba6:	f0 4f       	sbci	r31, 0xF0	; 240
    dba8:	43 81       	ldd	r20, Z+3	; 0x03
    dbaa:	49 83       	std	Y+1, r20	; 0x01
    dbac:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    dbb0:	49 81       	ldd	r20, Y+1	; 0x01
    dbb2:	bc 01       	movw	r22, r24
    dbb4:	81 2f       	mov	r24, r17
    dbb6:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    dbba:	f6 01       	movw	r30, r12
    dbbc:	86 81       	ldd	r24, Z+6	; 0x06
    dbbe:	81 11       	cpse	r24, r1
    dbc0:	64 c0       	rjmp	.+200    	; 0xdc8a <update_player+0x452>
		{
			player->flags = IDLE;
    dbc2:	88 e0       	ldi	r24, 0x08	; 8
    dbc4:	80 87       	std	Z+8, r24	; 0x08
    dbc6:	61 c0       	rjmp	.+194    	; 0xdc8a <update_player+0x452>
		}
	}
	else if (player->flags & PRONE)
    dbc8:	02 ff       	sbrs	r16, 2
    dbca:	5f c0       	rjmp	.+190    	; 0xdc8a <update_player+0x452>
	{
		if (player->controls.pressed & BTN_UP)
    dbcc:	f7 01       	movw	r30, r14
    dbce:	80 81       	ld	r24, Z
    dbd0:	91 81       	ldd	r25, Z+1	; 0x01
    dbd2:	84 ff       	sbrs	r24, 4
    dbd4:	16 c0       	rjmp	.+44     	; 0xdc02 <update_player+0x3ca>
		{
			player->flags = IDLE;	
    dbd6:	88 e0       	ldi	r24, 0x08	; 8
    dbd8:	f6 01       	movw	r30, r12
    dbda:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dbdc:	82 81       	ldd	r24, Z+2	; 0x02
    dbde:	93 81       	ldd	r25, Z+3	; 0x03
    dbe0:	40 97       	sbiw	r24, 0x10	; 16
    dbe2:	93 83       	std	Z+3, r25	; 0x03
    dbe4:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    dbe6:	82 85       	ldd	r24, Z+10	; 0x0a
    dbe8:	81 30       	cpi	r24, 0x01	; 1
    dbea:	29 f4       	brne	.+10     	; 0xdbf6 <update_player+0x3be>
			{
				player->shared.x += 8;
    dbec:	80 81       	ld	r24, Z
    dbee:	91 81       	ldd	r25, Z+1	; 0x01
    dbf0:	08 96       	adiw	r24, 0x08	; 8
    dbf2:	91 83       	std	Z+1, r25	; 0x01
    dbf4:	80 83       	st	Z, r24
			}
			player->width = 2;
    dbf6:	82 e0       	ldi	r24, 0x02	; 2
    dbf8:	f6 01       	movw	r30, r12
    dbfa:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    dbfc:	83 e0       	ldi	r24, 0x03	; 3
    dbfe:	84 87       	std	Z+12, r24	; 0x0c
    dc00:	44 c0       	rjmp	.+136    	; 0xdc8a <update_player+0x452>
		}
		else if (player->controls.pressed & BTN_A)
    dc02:	90 ff       	sbrs	r25, 0
    dc04:	28 c0       	rjmp	.+80     	; 0xdc56 <update_player+0x41e>
		{
			player->flags = JUMPING;
    dc06:	81 e0       	ldi	r24, 0x01	; 1
    dc08:	f6 01       	movw	r30, r12
    dc0a:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dc0c:	82 81       	ldd	r24, Z+2	; 0x02
    dc0e:	93 81       	ldd	r25, Z+3	; 0x03
    dc10:	40 97       	sbiw	r24, 0x10	; 16
    dc12:	93 83       	std	Z+3, r25	; 0x03
    dc14:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    dc16:	82 85       	ldd	r24, Z+10	; 0x0a
    dc18:	81 30       	cpi	r24, 0x01	; 1
    dc1a:	29 f4       	brne	.+10     	; 0xdc26 <update_player+0x3ee>
			{
				player->shared.x += 8;
    dc1c:	80 81       	ld	r24, Z
    dc1e:	91 81       	ldd	r25, Z+1	; 0x01
    dc20:	08 96       	adiw	r24, 0x08	; 8
    dc22:	91 83       	std	Z+1, r25	; 0x01
    dc24:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    dc26:	81 e8       	ldi	r24, 0x81	; 129
    dc28:	f6 01       	movw	r30, r12
    dc2a:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    dc2c:	88 ec       	ldi	r24, 0xC8	; 200
    dc2e:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    dc30:	82 e0       	ldi	r24, 0x02	; 2
    dc32:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    dc34:	83 e0       	ldi	r24, 0x03	; 3
    dc36:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dc38:	24 e0       	ldi	r18, 0x04	; 4
    dc3a:	12 9f       	mul	r17, r18
    dc3c:	f0 01       	movw	r30, r0
    dc3e:	11 24       	eor	r1, r1
    dc40:	eb 51       	subi	r30, 0x1B	; 27
    dc42:	f0 4f       	sbci	r31, 0xF0	; 240
    dc44:	43 81       	ldd	r20, Z+3	; 0x03
    dc46:	c6 01       	movw	r24, r12
    dc48:	84 5a       	subi	r24, 0xA4	; 164
    dc4a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc4c:	49 83       	std	Y+1, r20	; 0x01
    dc4e:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    dc52:	49 81       	ldd	r20, Y+1	; 0x01
    dc54:	16 c0       	rjmp	.+44     	; 0xdc82 <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_LEFT)
    dc56:	86 ff       	sbrs	r24, 6
    dc58:	09 c0       	rjmp	.+18     	; 0xdc6c <update_player+0x434>
		{
			player->direction = D_LEFT;
    dc5a:	f6 01       	movw	r30, r12
    dc5c:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    dc5e:	c6 01       	movw	r24, r12
    dc60:	8c 59       	subi	r24, 0x9C	; 156
    dc62:	9f 4f       	sbci	r25, 0xFF	; 255
    dc64:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    dc68:	41 e0       	ldi	r20, 0x01	; 1
    dc6a:	0b c0       	rjmp	.+22     	; 0xdc82 <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    dc6c:	87 ff       	sbrs	r24, 7
    dc6e:	0d c0       	rjmp	.+26     	; 0xdc8a <update_player+0x452>
		{
			player->direction = D_RIGHT;
    dc70:	81 e0       	ldi	r24, 0x01	; 1
    dc72:	f6 01       	movw	r30, r12
    dc74:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    dc76:	c6 01       	movw	r24, r12
    dc78:	8c 59       	subi	r24, 0x9C	; 156
    dc7a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc7c:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    dc80:	40 e0       	ldi	r20, 0x00	; 0
    dc82:	bc 01       	movw	r22, r24
    dc84:	81 2f       	mov	r24, r17
    dc86:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
		}
	}
	return 1;
}
    dc8a:	81 e0       	ldi	r24, 0x01	; 1
    dc8c:	0f 90       	pop	r0
    dc8e:	df 91       	pop	r29
    dc90:	cf 91       	pop	r28
    dc92:	1f 91       	pop	r17
    dc94:	0f 91       	pop	r16
    dc96:	ff 90       	pop	r15
    dc98:	ef 90       	pop	r14
    dc9a:	df 90       	pop	r13
    dc9c:	cf 90       	pop	r12
    dc9e:	08 95       	ret

0000dca0 <update_level>:
	print_scroll(strCongrats);
	StopSong();
}

u8 update_level()
{
    dca0:	cf 92       	push	r12
    dca2:	df 92       	push	r13
    dca4:	ef 92       	push	r14
    dca6:	ff 92       	push	r15
    dca8:	0f 93       	push	r16
    dcaa:	cf 93       	push	r28
    dcac:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    dcae:	e0 90 da 0d 	lds	r14, 0x0DDA
    dcb2:	f0 90 db 0d 	lds	r15, 0x0DDB
    dcb6:	c0 90 b7 0d 	lds	r12, 0x0DB7
    dcba:	d0 90 b8 0d 	lds	r13, 0x0DB8
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    dcbe:	80 91 d1 0d 	lds	r24, 0x0DD1
    dcc2:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    dcc4:	8c 33       	cpi	r24, 0x3C	; 60
    dcc6:	19 f0       	breq	.+6      	; 0xdcce <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    dcc8:	80 93 d1 0d 	sts	0x0DD1, r24
    dccc:	0f c0       	rjmp	.+30     	; 0xdcec <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    dcce:	10 92 d1 0d 	sts	0x0DD1, r1
		if (game.time != 65535) game.time++;
    dcd2:	80 91 bd 0d 	lds	r24, 0x0DBD
    dcd6:	90 91 be 0d 	lds	r25, 0x0DBE
    dcda:	8f 3f       	cpi	r24, 0xFF	; 255
    dcdc:	2f ef       	ldi	r18, 0xFF	; 255
    dcde:	92 07       	cpc	r25, r18
    dce0:	29 f0       	breq	.+10     	; 0xdcec <update_level+0x4c>
    dce2:	01 96       	adiw	r24, 0x01	; 1
    dce4:	90 93 be 0d 	sts	0x0DBE, r25
    dce8:	80 93 bd 0d 	sts	0x0DBD, r24
	}
	
	if (is_space())
    dcec:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    dcf0:	88 23       	and	r24, r24
    dcf2:	a1 f1       	breq	.+104    	; 0xdd5c <update_level+0xbc>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    dcf4:	c6 01       	movw	r24, r12
    dcf6:	23 e0       	ldi	r18, 0x03	; 3
    dcf8:	96 95       	lsr	r25
    dcfa:	87 95       	ror	r24
    dcfc:	2a 95       	dec	r18
    dcfe:	e1 f7       	brne	.-8      	; 0xdcf8 <update_level+0x58>
    dd00:	4c 96       	adiw	r24, 0x1c	; 28
    dd02:	20 91 c6 0d 	lds	r18, 0x0DC6
    dd06:	30 e0       	ldi	r19, 0x00	; 0
    dd08:	82 17       	cp	r24, r18
    dd0a:	93 07       	cpc	r25, r19
    dd0c:	70 f4       	brcc	.+28     	; 0xdd2a <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    dd0e:	20 91 cc 0d 	lds	r18, 0x0DCC
    dd12:	29 30       	cpi	r18, 0x09	; 9
    dd14:	39 f4       	brne	.+14     	; 0xdd24 <update_level+0x84>
    dd16:	82 3d       	cpi	r24, 0xD2	; 210
    dd18:	91 05       	cpc	r25, r1
    dd1a:	20 f0       	brcs	.+8      	; 0xdd24 <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    dd1c:	80 91 d1 0d 	lds	r24, 0x0DD1
    dd20:	80 fd       	sbrc	r24, 0
    dd22:	34 c0       	rjmp	.+104    	; 0xdd8c <update_level+0xec>
    dd24:	0e 94 51 5a 	call	0xb4a2	; 0xb4a2 <move_camera_x>
    dd28:	31 c0       	rjmp	.+98     	; 0xdd8c <update_level+0xec>
    dd2a:	80 91 e2 0d 	lds	r24, 0x0DE2
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x+24 >= game.camera_x+CAMERA_WIDTH*8 && game.current_level_index != 9)
    dd2e:	a7 01       	movw	r20, r14
    dd30:	48 5e       	subi	r20, 0xE8	; 232
    dd32:	5f 4f       	sbci	r21, 0xFF	; 255
    dd34:	96 01       	movw	r18, r12
    dd36:	20 52       	subi	r18, 0x20	; 32
    dd38:	3f 4f       	sbci	r19, 0xFF	; 255
    dd3a:	42 17       	cp	r20, r18
    dd3c:	53 07       	cpc	r21, r19
    dd3e:	50 f0       	brcs	.+20     	; 0xdd54 <update_level+0xb4>
    dd40:	90 91 cc 0d 	lds	r25, 0x0DCC
    dd44:	99 30       	cpi	r25, 0x09	; 9
    dd46:	31 f0       	breq	.+12     	; 0xdd54 <update_level+0xb4>
		{
			game.level_ended = 1;
    dd48:	91 e0       	ldi	r25, 0x01	; 1
    dd4a:	90 93 d4 0d 	sts	0x0DD4, r25
			game.player.flags ^= END_OF_SPACE;
    dd4e:	90 e2       	ldi	r25, 0x20	; 32
    dd50:	89 27       	eor	r24, r25
    dd52:	01 c0       	rjmp	.+2      	; 0xdd56 <update_level+0xb6>
		} else {
			game.player.flags |= END_OF_SPACE;
    dd54:	80 62       	ori	r24, 0x20	; 32
    dd56:	80 93 e2 0d 	sts	0x0DE2, r24
    dd5a:	18 c0       	rjmp	.+48     	; 0xdd8c <update_level+0xec>
		}
	}
	else if (game.player.shared.vx > 0 &&
    dd5c:	80 91 df 0d 	lds	r24, 0x0DDF
    dd60:	18 16       	cp	r1, r24
    dd62:	a4 f4       	brge	.+40     	; 0xdd8c <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dd64:	c7 01       	movw	r24, r14
    dd66:	8c 19       	sub	r24, r12
    dd68:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    dd6a:	80 37       	cpi	r24, 0x70	; 112
    dd6c:	91 05       	cpc	r25, r1
    dd6e:	70 f0       	brcs	.+28     	; 0xdd8c <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    dd70:	96 01       	movw	r18, r12
    dd72:	83 e0       	ldi	r24, 0x03	; 3
    dd74:	36 95       	lsr	r19
    dd76:	27 95       	ror	r18
    dd78:	8a 95       	dec	r24
    dd7a:	e1 f7       	brne	.-8      	; 0xdd74 <update_level+0xd4>
    dd7c:	24 5e       	subi	r18, 0xE4	; 228
    dd7e:	3f 4f       	sbci	r19, 0xFF	; 255
    dd80:	80 91 c6 0d 	lds	r24, 0x0DC6
    dd84:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dd86:	28 17       	cp	r18, r24
    dd88:	39 07       	cpc	r19, r25
    dd8a:	60 f2       	brcs	.-104    	; 0xdd24 <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    dd8c:	21 e0       	ldi	r18, 0x01	; 1
    dd8e:	40 91 e9 0d 	lds	r20, 0x0DE9
    dd92:	6d e1       	ldi	r22, 0x1D	; 29
    dd94:	89 e0       	ldi	r24, 0x09	; 9
    dd96:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    dd9a:	40 91 bd 0d 	lds	r20, 0x0DBD
    dd9e:	50 91 be 0d 	lds	r21, 0x0DBE
    dda2:	21 e0       	ldi	r18, 0x01	; 1
    dda4:	6d e1       	ldi	r22, 0x1D	; 29
    dda6:	8b e1       	ldi	r24, 0x1B	; 27
    dda8:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    ddac:	21 e0       	ldi	r18, 0x01	; 1
    ddae:	40 91 ca 0d 	lds	r20, 0x0DCA
    ddb2:	6e e1       	ldi	r22, 0x1E	; 30
    ddb4:	89 e0       	ldi	r24, 0x09	; 9
    ddb6:	0e 94 04 4e 	call	0x9c08	; 0x9c08 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    ddba:	40 91 bb 0d 	lds	r20, 0x0DBB
    ddbe:	50 91 bc 0d 	lds	r21, 0x0DBC
    ddc2:	21 e0       	ldi	r18, 0x01	; 1
    ddc4:	6e e1       	ldi	r22, 0x1E	; 30
    ddc6:	8b e1       	ldi	r24, 0x1B	; 27
    ddc8:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    ddcc:	40 91 b9 0d 	lds	r20, 0x0DB9
    ddd0:	50 91 ba 0d 	lds	r21, 0x0DBA
    ddd4:	21 e0       	ldi	r18, 0x01	; 1
    ddd6:	6f e1       	ldi	r22, 0x1F	; 31
    ddd8:	8b e1       	ldi	r24, 0x1B	; 27
    ddda:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    ddde:	80 91 d4 0d 	lds	r24, 0x0DD4
    dde2:	88 23       	and	r24, r24
    dde4:	09 f4       	brne	.+2      	; 0xdde8 <update_level+0x148>
    dde6:	8c c0       	rjmp	.+280    	; 0xdf00 <update_level+0x260>
    dde8:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    ddec:	81 11       	cpse	r24, r1
    ddee:	6c c0       	rjmp	.+216    	; 0xdec8 <update_level+0x228>
    ddf0:	80 91 e2 0d 	lds	r24, 0x0DE2
    ddf4:	8e 70       	andi	r24, 0x0E	; 14
    ddf6:	09 f4       	brne	.+2      	; 0xddfa <update_level+0x15a>
    ddf8:	83 c0       	rjmp	.+262    	; 0xdf00 <update_level+0x260>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    ddfa:	40 e0       	ldi	r20, 0x00	; 0
    ddfc:	6b ed       	ldi	r22, 0xDB	; 219
    ddfe:	71 e3       	ldi	r23, 0x31	; 49
    de00:	80 e0       	ldi	r24, 0x00	; 0
    de02:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
		if (game.player.flags & PRONE) {
    de06:	80 91 e2 0d 	lds	r24, 0x0DE2
    de0a:	82 ff       	sbrs	r24, 2
    de0c:	1a c0       	rjmp	.+52     	; 0xde42 <update_level+0x1a2>
			game.player.shared.y -= 16;
    de0e:	40 91 dc 0d 	lds	r20, 0x0DDC
    de12:	50 91 dd 0d 	lds	r21, 0x0DDD
    de16:	40 51       	subi	r20, 0x10	; 16
    de18:	51 09       	sbc	r21, r1
    de1a:	50 93 dd 0d 	sts	0x0DDD, r21
    de1e:	40 93 dc 0d 	sts	0x0DDC, r20
			game.player.width = 2;
    de22:	82 e0       	ldi	r24, 0x02	; 2
    de24:	80 93 e5 0d 	sts	0x0DE5, r24
			game.player.height = 3;
    de28:	83 e0       	ldi	r24, 0x03	; 3
    de2a:	80 93 e6 0d 	sts	0x0DE6, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    de2e:	60 91 da 0d 	lds	r22, 0x0DDA
    de32:	80 91 b7 0d 	lds	r24, 0x0DB7
    de36:	68 1b       	sub	r22, r24
    de38:	03 e0       	ldi	r16, 0x03	; 3
    de3a:	22 e0       	ldi	r18, 0x02	; 2
    de3c:	80 e0       	ldi	r24, 0x00	; 0
    de3e:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    de42:	6b e0       	ldi	r22, 0x0B	; 11
    de44:	89 e0       	ldi	r24, 0x09	; 9
    de46:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
		LBRotateSprites();
    de4a:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
		map_ship();
    de4e:	0e 94 6a 5a 	call	0xb4d4	; 0xb4d4 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    de52:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    de54:	c0 e0       	ldi	r28, 0x00	; 0
	StopSong();
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    de56:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    de58:	81 e0       	ldi	r24, 0x01	; 1
    de5a:	90 e0       	ldi	r25, 0x00	; 0
    de5c:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    de60:	8c 2f       	mov	r24, r28
    de62:	90 e0       	ldi	r25, 0x00	; 0
    de64:	88 3a       	cpi	r24, 0xA8	; 168
    de66:	91 05       	cpc	r25, r1
    de68:	3c f0       	brlt	.+14     	; 0xde78 <update_level+0x1d8>
			{
				clear_sprites(0, 6);
    de6a:	66 e0       	ldi	r22, 0x06	; 6
    de6c:	80 e0       	ldi	r24, 0x00	; 0
    de6e:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
				LBRotateSprites();
    de72:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
				ship_increment = -3;
    de76:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    de78:	8e e2       	ldi	r24, 0x2E	; 46
    de7a:	9e e0       	ldi	r25, 0x0E	; 14
    de7c:	0e 94 57 4d 	call	0x9aae	; 0x9aae <LBGetNextFrame>
    de80:	40 e0       	ldi	r20, 0x00	; 0
    de82:	bc 01       	movw	r22, r24
    de84:	86 e0       	ldi	r24, 0x06	; 6
    de86:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    de8a:	02 e0       	ldi	r16, 0x02	; 2
    de8c:	24 e0       	ldi	r18, 0x04	; 4
    de8e:	4c 2f       	mov	r20, r28
    de90:	6e 2d       	mov	r22, r14
    de92:	86 e0       	ldi	r24, 0x06	; 6
    de94:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <LBMoveSprite>
			ship_y += ship_increment;
    de98:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    de9a:	99 f4       	brne	.+38     	; 0xdec2 <update_level+0x222>
			{
				clear_sprites(6, 8);
    de9c:	68 e0       	ldi	r22, 0x08	; 8
    de9e:	86 e0       	ldi	r24, 0x06	; 6
    dea0:	0e 94 0d 65 	call	0xca1a	; 0xca1a <clear_sprites>
				LBRotateSprites();
    dea4:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    dea8:	64 e6       	ldi	r22, 0x64	; 100
    deaa:	70 e0       	ldi	r23, 0x00	; 0
    deac:	82 e3       	ldi	r24, 0x32	; 50
    deae:	93 e0       	ldi	r25, 0x03	; 3
    deb0:	0e 94 9d 6a 	call	0xd53a	; 0xd53a <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    deb4:	80 91 cc 0d 	lds	r24, 0x0DCC
    deb8:	00 e0       	ldi	r16, 0x00	; 0
    deba:	23 e0       	ldi	r18, 0x03	; 3
    debc:	4a e1       	ldi	r20, 0x1A	; 26
    debe:	6f ef       	ldi	r22, 0xFF	; 255
    dec0:	1c c0       	rjmp	.+56     	; 0xdefa <update_level+0x25a>
				break;
			}
			LBRotateSprites();
    dec2:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
		}
    dec6:	c8 cf       	rjmp	.-112    	; 0xde58 <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    dec8:	80 91 cc 0d 	lds	r24, 0x0DCC
    decc:	89 30       	cpi	r24, 0x09	; 9
    dece:	49 f4       	brne	.+18     	; 0xdee2 <update_level+0x242>
			tally_score((char*) strLevelClear, 500);
    ded0:	64 ef       	ldi	r22, 0xF4	; 244
    ded2:	71 e0       	ldi	r23, 0x01	; 1
    ded4:	82 e3       	ldi	r24, 0x32	; 50
    ded6:	93 e0       	ldi	r25, 0x03	; 3
    ded8:	0e 94 9d 6a 	call	0xd53a	; 0xd53a <tally_score>
			congratulations();
    dedc:	0e 94 3f 65 	call	0xca7e	; 0xca7e <congratulations>
    dee0:	2e c0       	rjmp	.+92     	; 0xdf3e <update_level+0x29e>
			exit_game();
			return 1;
		} else {
			tally_score((char*) strLevelClear, 100);
    dee2:	64 e6       	ldi	r22, 0x64	; 100
    dee4:	70 e0       	ldi	r23, 0x00	; 0
    dee6:	82 e3       	ldi	r24, 0x32	; 50
    dee8:	93 e0       	ldi	r25, 0x03	; 3
    deea:	0e 94 9d 6a 	call	0xd53a	; 0xd53a <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    deee:	80 91 cc 0d 	lds	r24, 0x0DCC
    def2:	07 ec       	ldi	r16, 0xC7	; 199
    def4:	2d ef       	ldi	r18, 0xFD	; 253
    def6:	4c e1       	ldi	r20, 0x1C	; 28
    def8:	61 e0       	ldi	r22, 0x01	; 1
    defa:	8f 5f       	subi	r24, 0xFF	; 255
    defc:	0e 94 32 67 	call	0xce64	; 0xce64 <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    df00:	80 91 d0 0d 	lds	r24, 0x0DD0
    df04:	82 30       	cpi	r24, 0x02	; 2
    df06:	11 f0       	breq	.+4      	; 0xdf0c <update_level+0x26c>
			demo_counter = 0;
			exit_game();
			return 1;
		}
	}
	return 0;
    df08:	80 e0       	ldi	r24, 0x00	; 0
    df0a:	1c c0       	rjmp	.+56     	; 0xdf44 <update_level+0x2a4>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    df0c:	80 91 f7 0c 	lds	r24, 0x0CF7
    df10:	90 91 f8 0c 	lds	r25, 0x0CF8
    df14:	01 96       	adiw	r24, 0x01	; 1
    df16:	90 93 f8 0c 	sts	0x0CF8, r25
    df1a:	80 93 f7 0c 	sts	0x0CF7, r24
		if (ReadJoypad(0) || (demo_counter >= DEMO_LENGTH))
    df1e:	80 e0       	ldi	r24, 0x00	; 0
    df20:	0e 94 d6 3e 	call	0x7dac	; 0x7dac <ReadJoypad>
    df24:	89 2b       	or	r24, r25
    df26:	39 f4       	brne	.+14     	; 0xdf36 <update_level+0x296>
    df28:	80 91 f7 0c 	lds	r24, 0x0CF7
    df2c:	90 91 f8 0c 	lds	r25, 0x0CF8
    df30:	84 38       	cpi	r24, 0x84	; 132
    df32:	93 40       	sbci	r25, 0x03	; 3
    df34:	48 f3       	brcs	.-46     	; 0xdf08 <update_level+0x268>
		{
			demo_counter = 0;
    df36:	10 92 f8 0c 	sts	0x0CF8, r1
    df3a:	10 92 f7 0c 	sts	0x0CF7, r1
			exit_game();
    df3e:	0e 94 41 69 	call	0xd282	; 0xd282 <exit_game>
			return 1;
    df42:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
	
}
    df44:	df 91       	pop	r29
    df46:	cf 91       	pop	r28
    df48:	0f 91       	pop	r16
    df4a:	ff 90       	pop	r15
    df4c:	ef 90       	pop	r14
    df4e:	df 90       	pop	r13
    df50:	cf 90       	pop	r12
    df52:	08 95       	ret

0000df54 <update_pause>:
	}
	game.high_score_counter++;
}

void update_pause()
{
    df54:	ef 92       	push	r14
    df56:	ff 92       	push	r15
    df58:	0f 93       	push	r16
    df5a:	1f 93       	push	r17
    df5c:	cf 93       	push	r28
    df5e:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    df60:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    df64:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    df68:	80 91 4e 0e 	lds	r24, 0x0E4E
    df6c:	83 ff       	sbrs	r24, 3
    df6e:	63 c0       	rjmp	.+198    	; 0xe036 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    df70:	06 95       	lsr	r16
    df72:	06 95       	lsr	r16
    df74:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    df76:	10 e0       	ldi	r17, 0x00	; 0
	game.high_score_counter++;
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    df78:	c6 95       	lsr	r28
    df7a:	c6 95       	lsr	r28
    df7c:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    df7e:	d0 e0       	ldi	r29, 0x00	; 0
    df80:	c8 01       	movw	r24, r16
    df82:	06 96       	adiw	r24, 0x06	; 6
    df84:	2e e1       	ldi	r18, 0x1E	; 30
    df86:	e2 2e       	mov	r14, r18
    df88:	f1 2c       	mov	r15, r1
    df8a:	b7 01       	movw	r22, r14
    df8c:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    df90:	9e 01       	movw	r18, r28
    df92:	28 5f       	subi	r18, 0xF8	; 248
    df94:	3f 4f       	sbci	r19, 0xFF	; 255
    df96:	4d e8       	ldi	r20, 0x8D	; 141
    df98:	5a e5       	ldi	r21, 0x5A	; 90
    df9a:	68 2f       	mov	r22, r24
    df9c:	82 2f       	mov	r24, r18
    df9e:	8f 71       	andi	r24, 0x1F	; 31
    dfa0:	0e 94 5d 4c 	call	0x98ba	; 0x98ba <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    dfa4:	c8 01       	movw	r24, r16
    dfa6:	09 96       	adiw	r24, 0x09	; 9
    dfa8:	b7 01       	movw	r22, r14
    dfaa:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    dfae:	9e 01       	movw	r18, r28
    dfb0:	23 5f       	subi	r18, 0xF3	; 243
    dfb2:	3f 4f       	sbci	r19, 0xFF	; 255
    dfb4:	4e e3       	ldi	r20, 0x3E	; 62
    dfb6:	53 e0       	ldi	r21, 0x03	; 3
    dfb8:	68 2f       	mov	r22, r24
    dfba:	82 2f       	mov	r24, r18
    dfbc:	8f 71       	andi	r24, 0x1F	; 31
    dfbe:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    dfc2:	c8 01       	movw	r24, r16
    dfc4:	0c 96       	adiw	r24, 0x0c	; 12
    dfc6:	b7 01       	movw	r22, r14
    dfc8:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    dfcc:	2a 96       	adiw	r28, 0x0a	; 10
    dfce:	44 e4       	ldi	r20, 0x44	; 68
    dfd0:	53 e0       	ldi	r21, 0x03	; 3
    dfd2:	68 2f       	mov	r22, r24
    dfd4:	8c 2f       	mov	r24, r28
    dfd6:	8f 71       	andi	r24, 0x1F	; 31
    dfd8:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    dfdc:	64 e1       	ldi	r22, 0x14	; 20
    dfde:	80 e0       	ldi	r24, 0x00	; 0
    dfe0:	0e 94 65 66 	call	0xccca	; 0xccca <hide_sprites>
		LBRotateSprites();
    dfe4:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    dfe8:	81 e0       	ldi	r24, 0x01	; 1
    dfea:	90 e0       	ldi	r25, 0x00	; 0
    dfec:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    dff0:	60 e0       	ldi	r22, 0x00	; 0
    dff2:	8e e4       	ldi	r24, 0x4E	; 78
    dff4:	9e e0       	ldi	r25, 0x0E	; 14
    dff6:	0e 94 7d 4d 	call	0x9afa	; 0x9afa <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    dffa:	80 91 4e 0e 	lds	r24, 0x0E4E
    dffe:	90 91 4f 0e 	lds	r25, 0x0E4F
    e002:	83 ff       	sbrs	r24, 3
    e004:	08 c0       	rjmp	.+16     	; 0xe016 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    e006:	df 91       	pop	r29
    e008:	cf 91       	pop	r28
    e00a:	1f 91       	pop	r17
    e00c:	0f 91       	pop	r16
    e00e:	ff 90       	pop	r15
    e010:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    e012:	0c 94 7f 58 	jmp	0xb0fe	; 0xb0fe <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    e016:	91 ff       	sbrs	r25, 1
    e018:	e7 cf       	rjmp	.-50     	; 0xdfe8 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    e01a:	60 e0       	ldi	r22, 0x00	; 0
    e01c:	70 e0       	ldi	r23, 0x00	; 0
    e01e:	82 e2       	ldi	r24, 0x22	; 34
    e020:	93 e0       	ldi	r25, 0x03	; 3
    e022:	0e 94 9d 6a 	call	0xd53a	; 0xd53a <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    e026:	df 91       	pop	r29
    e028:	cf 91       	pop	r28
    e02a:	1f 91       	pop	r17
    e02c:	0f 91       	pop	r16
    e02e:	ff 90       	pop	r15
    e030:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    e032:	0c 94 41 69 	jmp	0xd282	; 0xd282 <exit_game>
				break;
			}
		}
	}
}
    e036:	df 91       	pop	r29
    e038:	cf 91       	pop	r28
    e03a:	1f 91       	pop	r17
    e03c:	0f 91       	pop	r16
    e03e:	ff 90       	pop	r15
    e040:	ef 90       	pop	r14
    e042:	08 95       	ret

0000e044 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    e044:	cf 92       	push	r12
    e046:	df 92       	push	r13
    e048:	ff 92       	push	r15
    e04a:	0f 93       	push	r16
    e04c:	1f 93       	push	r17
    e04e:	cf 93       	push	r28
    e050:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e052:	20 91 cc 0d 	lds	r18, 0x0DCC
    e056:	f2 2e       	mov	r15, r18
    e058:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e05a:	ef ea       	ldi	r30, 0xAF	; 175
    e05c:	fc e0       	ldi	r31, 0x0C	; 12
    e05e:	84 81       	ldd	r24, Z+4	; 0x04
    e060:	86 95       	lsr	r24
    e062:	86 95       	lsr	r24
    e064:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e066:	08 2f       	mov	r16, r24
    e068:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e06a:	c3 81       	ldd	r28, Z+3	; 0x03
    e06c:	c6 95       	lsr	r28
    e06e:	c6 95       	lsr	r28
    e070:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e072:	d0 e0       	ldi	r29, 0x00	; 0
    e074:	c8 01       	movw	r24, r16
    e076:	06 96       	adiw	r24, 0x06	; 6
    e078:	2e e1       	ldi	r18, 0x1E	; 30
    e07a:	c2 2e       	mov	r12, r18
    e07c:	d1 2c       	mov	r13, r1
    e07e:	b6 01       	movw	r22, r12
    e080:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    e084:	9e 01       	movw	r18, r28
    e086:	29 5f       	subi	r18, 0xF9	; 249
    e088:	3f 4f       	sbci	r19, 0xFF	; 255
    e08a:	4b e2       	ldi	r20, 0x2B	; 43
    e08c:	5a e5       	ldi	r21, 0x5A	; 90
    e08e:	68 2f       	mov	r22, r24
    e090:	82 2f       	mov	r24, r18
    e092:	8f 71       	andi	r24, 0x1F	; 31
    e094:	0e 94 5d 4c 	call	0x98ba	; 0x98ba <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e098:	c8 01       	movw	r24, r16
    e09a:	09 96       	adiw	r24, 0x09	; 9
    e09c:	b6 01       	movw	r22, r12
    e09e:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__divmodhi4>
    e0a2:	be 01       	movw	r22, r28
    e0a4:	68 5f       	subi	r22, 0xF8	; 248
    e0a6:	7f 4f       	sbci	r23, 0xFF	; 255
    e0a8:	6f 71       	andi	r22, 0x1F	; 31
    e0aa:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e0ac:	93 e2       	ldi	r25, 0x23	; 35
    e0ae:	f9 9e       	mul	r15, r25
    e0b0:	90 01       	movw	r18, r0
    e0b2:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e0b4:	48 2f       	mov	r20, r24
    e0b6:	c9 01       	movw	r24, r18
    e0b8:	82 5f       	subi	r24, 0xF2	; 242
    e0ba:	9e 4f       	sbci	r25, 0xFE	; 254
    e0bc:	0e 94 8b 66 	call	0xcd16	; 0xcd16 <stream_text_anywhere>
	LBWaitSeconds(3);
    e0c0:	83 e0       	ldi	r24, 0x03	; 3
    e0c2:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <LBWaitSeconds>
	game.boss.active = 1;
    e0c6:	81 e0       	ldi	r24, 0x01	; 1
    e0c8:	80 93 62 0e 	sts	0x0E62, r24
	render_camera_view();
}
    e0cc:	df 91       	pop	r29
    e0ce:	cf 91       	pop	r28
    e0d0:	1f 91       	pop	r17
    e0d2:	0f 91       	pop	r16
    e0d4:	ff 90       	pop	r15
    e0d6:	df 90       	pop	r13
    e0d8:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e0da:	0c 94 7f 58 	jmp	0xb0fe	; 0xb0fe <render_camera_view>

0000e0de <update_player_ai>:
}

void update_player_ai(Player* player) 
{	 
    e0de:	cf 93       	push	r28
    e0e0:	df 93       	push	r29
    e0e2:	fc 01       	movw	r30, r24
	if (player->ai_flags == AI_NOT_READY)
    e0e4:	81 85       	ldd	r24, Z+9	; 0x09
    e0e6:	81 11       	cpse	r24, r1
    e0e8:	0e c0       	rjmp	.+28     	; 0xe106 <update_player_ai+0x28>
	 {
		 player->controls.held = BTN_LEFT;
    e0ea:	df 01       	movw	r26, r30
    e0ec:	a8 58       	subi	r26, 0x88	; 136
    e0ee:	bf 4f       	sbci	r27, 0xFF	; 255
    e0f0:	80 e4       	ldi	r24, 0x40	; 64
    e0f2:	90 e0       	ldi	r25, 0x00	; 0
    e0f4:	8d 93       	st	X+, r24
    e0f6:	9c 93       	st	X, r25
		 player->ai_flags = AI_READY;
    e0f8:	81 e0       	ldi	r24, 0x01	; 1
    e0fa:	81 87       	std	Z+9, r24	; 0x09
		 game.ai_prone_counter = 0;
    e0fc:	10 92 d7 0d 	sts	0x0DD7, r1
		 game.ai_do_prone = 1;
    e100:	80 93 d8 0d 	sts	0x0DD8, r24
    e104:	b9 c0       	rjmp	.+370    	; 0xe278 <update_player_ai+0x19a>
	 }
	 else if (player->ai_flags & AI_READY)
    e106:	80 ff       	sbrs	r24, 0
    e108:	2e c0       	rjmp	.+92     	; 0xe166 <update_player_ai+0x88>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e10a:	df 01       	movw	r26, r30
    e10c:	ac 58       	subi	r26, 0x8C	; 140
    e10e:	bf 4f       	sbci	r27, 0xFF	; 255
    e110:	15 96       	adiw	r26, 0x05	; 5
    e112:	1c 92       	st	X, r1
    e114:	1e 92       	st	-X, r1
    e116:	14 97       	sbiw	r26, 0x04	; 4
	p->pressed = 0;
    e118:	11 96       	adiw	r26, 0x01	; 1
    e11a:	1c 92       	st	X, r1
    e11c:	1e 92       	st	-X, r1
	p->released = 0;
    e11e:	13 96       	adiw	r26, 0x03	; 3
    e120:	1c 92       	st	X, r1
    e122:	1e 92       	st	-X, r1
    e124:	12 97       	sbiw	r26, 0x02	; 2
	p->held_cycles = 0;
    e126:	16 96       	adiw	r26, 0x06	; 6
    e128:	1c 92       	st	X, r1
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    e12a:	80 91 b7 0d 	lds	r24, 0x0DB7
    e12e:	90 91 b8 0d 	lds	r25, 0x0DB8
    e132:	23 e0       	ldi	r18, 0x03	; 3
    e134:	96 95       	lsr	r25
    e136:	87 95       	ror	r24
    e138:	2a 95       	dec	r18
    e13a:	e1 f7       	brne	.-8      	; 0xe134 <update_player_ai+0x56>
    e13c:	4c 96       	adiw	r24, 0x1c	; 28
    e13e:	20 91 c6 0d 	lds	r18, 0x0DC6
    e142:	30 e0       	ldi	r19, 0x00	; 0
    e144:	82 17       	cp	r24, r18
    e146:	93 07       	cpc	r25, r19
    e148:	08 f4       	brcc	.+2      	; 0xe14c <update_player_ai+0x6e>
    e14a:	96 c0       	rjmp	.+300    	; 0xe278 <update_player_ai+0x19a>
    e14c:	ef 01       	movw	r28, r30
		 {
			 challenge();
    e14e:	0e 94 22 70 	call	0xe044	; 0xe044 <challenge>
			 player->ai_flags = AI_WALKING;
    e152:	82 e0       	ldi	r24, 0x02	; 2
    e154:	89 87       	std	Y+9, r24	; 0x09
			 player->controls.held = BTN_LEFT;
    e156:	fe 01       	movw	r30, r28
    e158:	e8 58       	subi	r30, 0x88	; 136
    e15a:	ff 4f       	sbci	r31, 0xFF	; 255
    e15c:	80 e4       	ldi	r24, 0x40	; 64
    e15e:	90 e0       	ldi	r25, 0x00	; 0
    e160:	91 83       	std	Z+1, r25	; 0x01
    e162:	80 83       	st	Z, r24
    e164:	89 c0       	rjmp	.+274    	; 0xe278 <update_player_ai+0x19a>
		 }
	 }
	 else if (player->ai_flags & AI_WALKING) 
    e166:	81 ff       	sbrs	r24, 1
    e168:	87 c0       	rjmp	.+270    	; 0xe278 <update_player_ai+0x19a>
	 {
		 player->controls.pressed = 0;
    e16a:	df 01       	movw	r26, r30
    e16c:	ac 58       	subi	r26, 0x8C	; 140
    e16e:	bf 4f       	sbci	r27, 0xFF	; 255
    e170:	11 96       	adiw	r26, 0x01	; 1
    e172:	1c 92       	st	X, r1
    e174:	1e 92       	st	-X, r1
		 if (game.frame_counter % 15 == 0)
    e176:	80 91 d1 0d 	lds	r24, 0x0DD1
    e17a:	6f e0       	ldi	r22, 0x0F	; 15
    e17c:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    e180:	91 11       	cpse	r25, r1
    e182:	05 c0       	rjmp	.+10     	; 0xe18e <update_player_ai+0xb0>
		 {
			 player->controls.pressed = BTN_B;
    e184:	81 e0       	ldi	r24, 0x01	; 1
    e186:	90 e0       	ldi	r25, 0x00	; 0
    e188:	11 96       	adiw	r26, 0x01	; 1
    e18a:	9c 93       	st	X, r25
    e18c:	8e 93       	st	-X, r24
		 }
		 if (player->shared.x >= game.camera_x+(CAMERA_WIDTH*8/2-40) && player->shared.x <= game.camera_x+(CAMERA_WIDTH*8/2+40))
    e18e:	20 81       	ld	r18, Z
    e190:	31 81       	ldd	r19, Z+1	; 0x01
    e192:	80 91 b7 0d 	lds	r24, 0x0DB7
    e196:	90 91 b8 0d 	lds	r25, 0x0DB8
    e19a:	ac 01       	movw	r20, r24
    e19c:	48 5b       	subi	r20, 0xB8	; 184
    e19e:	5f 4f       	sbci	r21, 0xFF	; 255
    e1a0:	24 17       	cp	r18, r20
    e1a2:	35 07       	cpc	r19, r21
    e1a4:	78 f0       	brcs	.+30     	; 0xe1c4 <update_player_ai+0xe6>
    e1a6:	40 5b       	subi	r20, 0xB0	; 176
    e1a8:	5f 4f       	sbci	r21, 0xFF	; 255
    e1aa:	42 17       	cp	r20, r18
    e1ac:	53 07       	cpc	r21, r19
    e1ae:	50 f0       	brcs	.+20     	; 0xe1c4 <update_player_ai+0xe6>
		 {
			 player->controls.pressed |= BTN_A;
    e1b0:	2d 91       	ld	r18, X+
    e1b2:	3c 91       	ld	r19, X
    e1b4:	11 97       	sbiw	r26, 0x01	; 1
    e1b6:	31 60       	ori	r19, 0x01	; 1
    e1b8:	11 96       	adiw	r26, 0x01	; 1
    e1ba:	3c 93       	st	X, r19
    e1bc:	2e 93       	st	-X, r18
			 game.ai_do_prone = 1;
    e1be:	21 e0       	ldi	r18, 0x01	; 1
    e1c0:	20 93 d8 0d 	sts	0x0DD8, r18
		 }
		 if (player->shared.x <= game.camera_x)
    e1c4:	20 81       	ld	r18, Z
    e1c6:	31 81       	ldd	r19, Z+1	; 0x01
    e1c8:	e8 58       	subi	r30, 0x88	; 136
    e1ca:	ff 4f       	sbci	r31, 0xFF	; 255
    e1cc:	82 17       	cp	r24, r18
    e1ce:	93 07       	cpc	r25, r19
    e1d0:	18 f0       	brcs	.+6      	; 0xe1d8 <update_player_ai+0xfa>
		 {
			 player->controls.held = BTN_RIGHT;
    e1d2:	40 e8       	ldi	r20, 0x80	; 128
    e1d4:	50 e0       	ldi	r21, 0x00	; 0
    e1d6:	08 c0       	rjmp	.+16     	; 0xe1e8 <update_player_ai+0x10a>
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    e1d8:	ac 01       	movw	r20, r24
    e1da:	40 53       	subi	r20, 0x30	; 48
    e1dc:	5f 4f       	sbci	r21, 0xFF	; 255
    e1de:	24 17       	cp	r18, r20
    e1e0:	35 07       	cpc	r19, r21
    e1e2:	20 f0       	brcs	.+8      	; 0xe1ec <update_player_ai+0x10e>
		 {
			 player->controls.held = BTN_LEFT;
    e1e4:	40 e4       	ldi	r20, 0x40	; 64
    e1e6:	50 e0       	ldi	r21, 0x00	; 0
    e1e8:	51 83       	std	Z+1, r21	; 0x01
    e1ea:	40 83       	st	Z, r20
		 }
		 if (player->controls.held == BTN_RIGHT && player->shared.x >= game.camera_x+3*8 && player->shared.x <=  game.camera_x+4*8 && game.ai_do_prone)
    e1ec:	40 81       	ld	r20, Z
    e1ee:	51 81       	ldd	r21, Z+1	; 0x01
    e1f0:	40 38       	cpi	r20, 0x80	; 128
    e1f2:	51 05       	cpc	r21, r1
    e1f4:	89 f4       	brne	.+34     	; 0xe218 <update_player_ai+0x13a>
    e1f6:	ac 01       	movw	r20, r24
    e1f8:	48 5e       	subi	r20, 0xE8	; 232
    e1fa:	5f 4f       	sbci	r21, 0xFF	; 255
    e1fc:	24 17       	cp	r18, r20
    e1fe:	35 07       	cpc	r19, r21
    e200:	08 f1       	brcs	.+66     	; 0xe244 <update_player_ai+0x166>
    e202:	80 96       	adiw	r24, 0x20	; 32
    e204:	82 17       	cp	r24, r18
    e206:	93 07       	cpc	r25, r19
    e208:	e8 f0       	brcs	.+58     	; 0xe244 <update_player_ai+0x166>
    e20a:	80 91 d8 0d 	lds	r24, 0x0DD8
    e20e:	88 23       	and	r24, r24
    e210:	c9 f0       	breq	.+50     	; 0xe244 <update_player_ai+0x166>
		 {
			 player->controls.held |= BTN_DOWN;
    e212:	80 ea       	ldi	r24, 0xA0	; 160
    e214:	90 e0       	ldi	r25, 0x00	; 0
    e216:	14 c0       	rjmp	.+40     	; 0xe240 <update_player_ai+0x162>
		 }
		 else if (player->controls.held == BTN_LEFT && player->shared.x >= game.camera_x+(CAMERA_WIDTH*8)-6*8 && player->shared.x <=  game.camera_x+(CAMERA_WIDTH*8)-5*8 && game.ai_do_prone)
    e218:	40 34       	cpi	r20, 0x40	; 64
    e21a:	51 05       	cpc	r21, r1
    e21c:	99 f4       	brne	.+38     	; 0xe244 <update_player_ai+0x166>
    e21e:	ac 01       	movw	r20, r24
    e220:	40 55       	subi	r20, 0x50	; 80
    e222:	5f 4f       	sbci	r21, 0xFF	; 255
    e224:	24 17       	cp	r18, r20
    e226:	35 07       	cpc	r19, r21
    e228:	68 f0       	brcs	.+26     	; 0xe244 <update_player_ai+0x166>
    e22a:	88 54       	subi	r24, 0x48	; 72
    e22c:	9f 4f       	sbci	r25, 0xFF	; 255
    e22e:	82 17       	cp	r24, r18
    e230:	93 07       	cpc	r25, r19
    e232:	40 f0       	brcs	.+16     	; 0xe244 <update_player_ai+0x166>
    e234:	80 91 d8 0d 	lds	r24, 0x0DD8
    e238:	88 23       	and	r24, r24
    e23a:	21 f0       	breq	.+8      	; 0xe244 <update_player_ai+0x166>
		 {
			player->controls.held |= BTN_DOWN; 
    e23c:	80 e6       	ldi	r24, 0x60	; 96
    e23e:	90 e0       	ldi	r25, 0x00	; 0
    e240:	91 83       	std	Z+1, r25	; 0x01
    e242:	80 83       	st	Z, r24
		 }
		 if (player->controls.held & BTN_DOWN)
    e244:	80 81       	ld	r24, Z
    e246:	91 81       	ldd	r25, Z+1	; 0x01
    e248:	85 ff       	sbrs	r24, 5
    e24a:	16 c0       	rjmp	.+44     	; 0xe278 <update_player_ai+0x19a>
		 {
			 game.ai_prone_counter++;
    e24c:	20 91 d7 0d 	lds	r18, 0x0DD7
    e250:	2f 5f       	subi	r18, 0xFF	; 255
			 if (game.ai_prone_counter >= 60)
    e252:	2c 33       	cpi	r18, 0x3C	; 60
    e254:	18 f4       	brcc	.+6      	; 0xe25c <update_player_ai+0x17e>
		 {
			player->controls.held |= BTN_DOWN; 
		 }
		 if (player->controls.held & BTN_DOWN)
		 {
			 game.ai_prone_counter++;
    e256:	20 93 d7 0d 	sts	0x0DD7, r18
    e25a:	0e c0       	rjmp	.+28     	; 0xe278 <update_player_ai+0x19a>
			 if (game.ai_prone_counter >= 60)
			 {
				game.ai_prone_counter = 0;
    e25c:	10 92 d7 0d 	sts	0x0DD7, r1
				player->controls.held ^= BTN_DOWN;
    e260:	20 e2       	ldi	r18, 0x20	; 32
    e262:	82 27       	eor	r24, r18
    e264:	91 83       	std	Z+1, r25	; 0x01
    e266:	80 83       	st	Z, r24
				player->controls.pressed |= BTN_UP;
    e268:	8d 91       	ld	r24, X+
    e26a:	9c 91       	ld	r25, X
    e26c:	11 97       	sbiw	r26, 0x01	; 1
    e26e:	80 61       	ori	r24, 0x10	; 16
    e270:	8d 93       	st	X+, r24
    e272:	9c 93       	st	X, r25
				game.ai_do_prone = 0;
    e274:	10 92 d8 0d 	sts	0x0DD8, r1
			 }
		 }
	 }
}
    e278:	df 91       	pop	r29
    e27a:	cf 91       	pop	r28
    e27c:	08 95       	ret

0000e27e <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e27e:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <GetTrueRandomSeed>
    e282:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e286:	8a e9       	ldi	r24, 0x9A	; 154
    e288:	96 e1       	ldi	r25, 0x16	; 22
    e28a:	0e 94 af 40 	call	0x815e	; 0x815e <InitMusicPlayer>
	ClearVram();
    e28e:	0e 94 ac 3e 	call	0x7d58	; 0x7d58 <ClearVram>
	SetMasterVolume(0x05);
    e292:	85 e0       	ldi	r24, 0x05	; 5
    e294:	0e 94 67 44 	call	0x88ce	; 0x88ce <SetMasterVolume>
	SetTileTable(tiles_data);
    e298:	8a e0       	ldi	r24, 0x0A	; 10
    e29a:	92 e3       	ldi	r25, 0x32	; 50
    e29c:	0e 94 c7 3e 	call	0x7d8e	; 0x7d8e <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e2a0:	89 e1       	ldi	r24, 0x19	; 25
    e2a2:	98 e1       	ldi	r25, 0x18	; 24
    e2a4:	0e 94 a7 3e 	call	0x7d4e	; 0x7d4e <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e2a8:	8a ec       	ldi	r24, 0xCA	; 202
    e2aa:	99 e5       	ldi	r25, 0x59	; 89
    e2ac:	90 93 8a 0d 	sts	0x0D8A, r25
    e2b0:	80 93 89 0d 	sts	0x0D89, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e2b4:	0e 94 85 4f 	call	0x9f0a	; 0x9f0a <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_splash();
    e2b8:	0e 94 00 68 	call	0xd000	; 0xd000 <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    e2bc:	81 e0       	ldi	r24, 0x01	; 1
    e2be:	90 e0       	ldi	r25, 0x00	; 0
    e2c0:	0e 94 c6 4c 	call	0x998c	; 0x998c <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e2c4:	60 e0       	ldi	r22, 0x00	; 0
    e2c6:	8e e4       	ldi	r24, 0x4E	; 78
    e2c8:	9e e0       	ldi	r25, 0x0E	; 14
    e2ca:	0e 94 7d 4d 	call	0x9afa	; 0x9afa <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e2ce:	80 91 cb 0d 	lds	r24, 0x0DCB
    e2d2:	82 30       	cpi	r24, 0x02	; 2
    e2d4:	09 f0       	breq	.+2      	; 0xe2d8 <main+0x5a>
    e2d6:	52 c0       	rjmp	.+164    	; 0xe37c <main+0xfe>
		{
			if (update_level()) continue;
    e2d8:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <update_level>
    e2dc:	81 11       	cpse	r24, r1
    e2de:	ee cf       	rjmp	.-36     	; 0xe2bc <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    e2e0:	60 e0       	ldi	r22, 0x00	; 0
    e2e2:	8a ed       	ldi	r24, 0xDA	; 218
    e2e4:	9d e0       	ldi	r25, 0x0D	; 13
    e2e6:	0e 94 1c 6c 	call	0xd838	; 0xd838 <update_player>
    e2ea:	88 23       	and	r24, r24
    e2ec:	e9 f0       	breq	.+58     	; 0xe328 <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e2ee:	66 e0       	ldi	r22, 0x06	; 6
    e2f0:	8a ed       	ldi	r24, 0xDA	; 218
    e2f2:	9d e0       	ldi	r25, 0x0D	; 13
    e2f4:	0e 94 19 5b 	call	0xb632	; 0xb632 <update_shot>
				update_enemies();
    e2f8:	0e 94 b4 61 	call	0xc368	; 0xc368 <update_enemies>
				update_enemy_shots();
    e2fc:	0e 94 21 62 	call	0xc442	; 0xc442 <update_enemy_shots>
				animate_enemies();
    e300:	0e 94 c1 62 	call	0xc582	; 0xc582 <animate_enemies>
				animate_enemy_shots();
    e304:	0e 94 de 63 	call	0xc7bc	; 0xc7bc <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e308:	40 e0       	ldi	r20, 0x00	; 0
    e30a:	65 e5       	ldi	r22, 0x55	; 85
    e30c:	7e e0       	ldi	r23, 0x0E	; 14
    e30e:	8a ed       	ldi	r24, 0xDA	; 218
    e310:	9d e0       	ldi	r25, 0x0D	; 13
    e312:	0e 94 b0 60 	call	0xc160	; 0xc160 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e316:	46 e0       	ldi	r20, 0x06	; 6
    e318:	65 e5       	ldi	r22, 0x55	; 85
    e31a:	7e e0       	ldi	r23, 0x0E	; 14
    e31c:	8a ed       	ldi	r24, 0xDA	; 218
    e31e:	9d e0       	ldi	r25, 0x0D	; 13
    e320:	0e 94 8d 5e 	call	0xbd1a	; 0xbd1a <animate_shot>
				update_pause();
    e324:	0e 94 aa 6f 	call	0xdf54	; 0xdf54 <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e328:	0e 94 81 4f 	call	0x9f02	; 0x9f02 <is_space>
    e32c:	81 11       	cpse	r24, r1
    e32e:	2f c0       	rjmp	.+94     	; 0xe38e <main+0x110>
    e330:	80 91 b7 0d 	lds	r24, 0x0DB7
    e334:	90 91 b8 0d 	lds	r25, 0x0DB8
    e338:	88 3f       	cpi	r24, 0xF8	; 248
    e33a:	96 40       	sbci	r25, 0x06	; 6
    e33c:	40 f1       	brcs	.+80     	; 0xe38e <main+0x110>
    e33e:	69 e0       	ldi	r22, 0x09	; 9
    e340:	85 e5       	ldi	r24, 0x55	; 85
    e342:	9e e0       	ldi	r25, 0x0E	; 14
    e344:	0e 94 1c 6c 	call	0xd838	; 0xd838 <update_player>
    e348:	88 23       	and	r24, r24
    e34a:	09 f1       	breq	.+66     	; 0xe38e <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e34c:	6f e0       	ldi	r22, 0x0F	; 15
    e34e:	85 e5       	ldi	r24, 0x55	; 85
    e350:	9e e0       	ldi	r25, 0x0E	; 14
    e352:	0e 94 19 5b 	call	0xb632	; 0xb632 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e356:	49 e0       	ldi	r20, 0x09	; 9
    e358:	6a ed       	ldi	r22, 0xDA	; 218
    e35a:	7d e0       	ldi	r23, 0x0D	; 13
    e35c:	85 e5       	ldi	r24, 0x55	; 85
    e35e:	9e e0       	ldi	r25, 0x0E	; 14
    e360:	0e 94 b0 60 	call	0xc160	; 0xc160 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e364:	4f e0       	ldi	r20, 0x0F	; 15
    e366:	6a ed       	ldi	r22, 0xDA	; 218
    e368:	7d e0       	ldi	r23, 0x0D	; 13
    e36a:	85 e5       	ldi	r24, 0x55	; 85
    e36c:	9e e0       	ldi	r25, 0x0E	; 14
    e36e:	0e 94 8d 5e 	call	0xbd1a	; 0xbd1a <animate_shot>
				update_player_ai(&game.boss);
    e372:	85 e5       	ldi	r24, 0x55	; 85
    e374:	9e e0       	ldi	r25, 0x0E	; 14
    e376:	0e 94 6f 70 	call	0xe0de	; 0xe0de <update_player_ai>
    e37a:	09 c0       	rjmp	.+18     	; 0xe38e <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    e37c:	81 11       	cpse	r24, r1
    e37e:	03 c0       	rjmp	.+6      	; 0xe386 <main+0x108>
		{
			update_splash();
    e380:	0e 94 51 69 	call	0xd2a2	; 0xd2a2 <update_splash>
    e384:	04 c0       	rjmp	.+8      	; 0xe38e <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e386:	81 30       	cpi	r24, 0x01	; 1
    e388:	11 f4       	brne	.+4      	; 0xe38e <main+0x110>
		{
			update_high_scores();
    e38a:	0e 94 cd 69 	call	0xd39a	; 0xd39a <update_high_scores>
			
		}
		LBRotateSprites();
    e38e:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <LBRotateSprites>
    e392:	94 cf       	rjmp	.-216    	; 0xe2bc <main+0x3e>

0000e394 <__udivmodqi4>:
    e394:	99 1b       	sub	r25, r25
    e396:	79 e0       	ldi	r23, 0x09	; 9
    e398:	04 c0       	rjmp	.+8      	; 0xe3a2 <__udivmodqi4_ep>

0000e39a <__udivmodqi4_loop>:
    e39a:	99 1f       	adc	r25, r25
    e39c:	96 17       	cp	r25, r22
    e39e:	08 f0       	brcs	.+2      	; 0xe3a2 <__udivmodqi4_ep>
    e3a0:	96 1b       	sub	r25, r22

0000e3a2 <__udivmodqi4_ep>:
    e3a2:	88 1f       	adc	r24, r24
    e3a4:	7a 95       	dec	r23
    e3a6:	c9 f7       	brne	.-14     	; 0xe39a <__udivmodqi4_loop>
    e3a8:	80 95       	com	r24
    e3aa:	08 95       	ret

0000e3ac <__divmodqi4>:
    e3ac:	87 fb       	bst	r24, 7
    e3ae:	08 2e       	mov	r0, r24
    e3b0:	06 26       	eor	r0, r22
    e3b2:	87 fd       	sbrc	r24, 7
    e3b4:	81 95       	neg	r24
    e3b6:	67 fd       	sbrc	r22, 7
    e3b8:	61 95       	neg	r22
    e3ba:	0e 94 ca 71 	call	0xe394	; 0xe394 <__udivmodqi4>
    e3be:	0e f4       	brtc	.+2      	; 0xe3c2 <__divmodqi4_1>
    e3c0:	91 95       	neg	r25

0000e3c2 <__divmodqi4_1>:
    e3c2:	07 fc       	sbrc	r0, 7
    e3c4:	81 95       	neg	r24

0000e3c6 <__divmodqi4_exit>:
    e3c6:	08 95       	ret

0000e3c8 <__udivmodhi4>:
    e3c8:	aa 1b       	sub	r26, r26
    e3ca:	bb 1b       	sub	r27, r27
    e3cc:	51 e1       	ldi	r21, 0x11	; 17
    e3ce:	07 c0       	rjmp	.+14     	; 0xe3de <__udivmodhi4_ep>

0000e3d0 <__udivmodhi4_loop>:
    e3d0:	aa 1f       	adc	r26, r26
    e3d2:	bb 1f       	adc	r27, r27
    e3d4:	a6 17       	cp	r26, r22
    e3d6:	b7 07       	cpc	r27, r23
    e3d8:	10 f0       	brcs	.+4      	; 0xe3de <__udivmodhi4_ep>
    e3da:	a6 1b       	sub	r26, r22
    e3dc:	b7 0b       	sbc	r27, r23

0000e3de <__udivmodhi4_ep>:
    e3de:	88 1f       	adc	r24, r24
    e3e0:	99 1f       	adc	r25, r25
    e3e2:	5a 95       	dec	r21
    e3e4:	a9 f7       	brne	.-22     	; 0xe3d0 <__udivmodhi4_loop>
    e3e6:	80 95       	com	r24
    e3e8:	90 95       	com	r25
    e3ea:	bc 01       	movw	r22, r24
    e3ec:	cd 01       	movw	r24, r26
    e3ee:	08 95       	ret

0000e3f0 <__divmodhi4>:
    e3f0:	97 fb       	bst	r25, 7
    e3f2:	07 2e       	mov	r0, r23
    e3f4:	16 f4       	brtc	.+4      	; 0xe3fa <__divmodhi4+0xa>
    e3f6:	00 94       	com	r0
    e3f8:	07 d0       	rcall	.+14     	; 0xe408 <__divmodhi4_neg1>
    e3fa:	77 fd       	sbrc	r23, 7
    e3fc:	09 d0       	rcall	.+18     	; 0xe410 <__divmodhi4_neg2>
    e3fe:	0e 94 e4 71 	call	0xe3c8	; 0xe3c8 <__udivmodhi4>
    e402:	07 fc       	sbrc	r0, 7
    e404:	05 d0       	rcall	.+10     	; 0xe410 <__divmodhi4_neg2>
    e406:	3e f4       	brtc	.+14     	; 0xe416 <__divmodhi4_exit>

0000e408 <__divmodhi4_neg1>:
    e408:	90 95       	com	r25
    e40a:	81 95       	neg	r24
    e40c:	9f 4f       	sbci	r25, 0xFF	; 255
    e40e:	08 95       	ret

0000e410 <__divmodhi4_neg2>:
    e410:	70 95       	com	r23
    e412:	61 95       	neg	r22
    e414:	7f 4f       	sbci	r23, 0xFF	; 255

0000e416 <__divmodhi4_exit>:
    e416:	08 95       	ret

0000e418 <__tablejump2__>:
    e418:	ee 0f       	add	r30, r30
    e41a:	ff 1f       	adc	r31, r31
    e41c:	05 90       	lpm	r0, Z+
    e41e:	f4 91       	lpm	r31, Z
    e420:	e0 2d       	mov	r30, r0
    e422:	09 94       	ijmp

0000e424 <__subsf3>:
    e424:	50 58       	subi	r21, 0x80	; 128

0000e426 <__addsf3>:
    e426:	bb 27       	eor	r27, r27
    e428:	aa 27       	eor	r26, r26
    e42a:	0e d0       	rcall	.+28     	; 0xe448 <__addsf3x>
    e42c:	e5 c0       	rjmp	.+458    	; 0xe5f8 <__fp_round>
    e42e:	d6 d0       	rcall	.+428    	; 0xe5dc <__fp_pscA>
    e430:	30 f0       	brcs	.+12     	; 0xe43e <__addsf3+0x18>
    e432:	db d0       	rcall	.+438    	; 0xe5ea <__fp_pscB>
    e434:	20 f0       	brcs	.+8      	; 0xe43e <__addsf3+0x18>
    e436:	31 f4       	brne	.+12     	; 0xe444 <__addsf3+0x1e>
    e438:	9f 3f       	cpi	r25, 0xFF	; 255
    e43a:	11 f4       	brne	.+4      	; 0xe440 <__addsf3+0x1a>
    e43c:	1e f4       	brtc	.+6      	; 0xe444 <__addsf3+0x1e>
    e43e:	cb c0       	rjmp	.+406    	; 0xe5d6 <__fp_nan>
    e440:	0e f4       	brtc	.+2      	; 0xe444 <__addsf3+0x1e>
    e442:	e0 95       	com	r30
    e444:	e7 fb       	bst	r30, 7
    e446:	c1 c0       	rjmp	.+386    	; 0xe5ca <__fp_inf>

0000e448 <__addsf3x>:
    e448:	e9 2f       	mov	r30, r25
    e44a:	e7 d0       	rcall	.+462    	; 0xe61a <__fp_split3>
    e44c:	80 f3       	brcs	.-32     	; 0xe42e <__addsf3+0x8>
    e44e:	ba 17       	cp	r27, r26
    e450:	62 07       	cpc	r22, r18
    e452:	73 07       	cpc	r23, r19
    e454:	84 07       	cpc	r24, r20
    e456:	95 07       	cpc	r25, r21
    e458:	18 f0       	brcs	.+6      	; 0xe460 <__addsf3x+0x18>
    e45a:	71 f4       	brne	.+28     	; 0xe478 <__addsf3x+0x30>
    e45c:	9e f5       	brtc	.+102    	; 0xe4c4 <__addsf3x+0x7c>
    e45e:	ff c0       	rjmp	.+510    	; 0xe65e <__fp_zero>
    e460:	0e f4       	brtc	.+2      	; 0xe464 <__addsf3x+0x1c>
    e462:	e0 95       	com	r30
    e464:	0b 2e       	mov	r0, r27
    e466:	ba 2f       	mov	r27, r26
    e468:	a0 2d       	mov	r26, r0
    e46a:	0b 01       	movw	r0, r22
    e46c:	b9 01       	movw	r22, r18
    e46e:	90 01       	movw	r18, r0
    e470:	0c 01       	movw	r0, r24
    e472:	ca 01       	movw	r24, r20
    e474:	a0 01       	movw	r20, r0
    e476:	11 24       	eor	r1, r1
    e478:	ff 27       	eor	r31, r31
    e47a:	59 1b       	sub	r21, r25
    e47c:	99 f0       	breq	.+38     	; 0xe4a4 <__addsf3x+0x5c>
    e47e:	59 3f       	cpi	r21, 0xF9	; 249
    e480:	50 f4       	brcc	.+20     	; 0xe496 <__addsf3x+0x4e>
    e482:	50 3e       	cpi	r21, 0xE0	; 224
    e484:	68 f1       	brcs	.+90     	; 0xe4e0 <__addsf3x+0x98>
    e486:	1a 16       	cp	r1, r26
    e488:	f0 40       	sbci	r31, 0x00	; 0
    e48a:	a2 2f       	mov	r26, r18
    e48c:	23 2f       	mov	r18, r19
    e48e:	34 2f       	mov	r19, r20
    e490:	44 27       	eor	r20, r20
    e492:	58 5f       	subi	r21, 0xF8	; 248
    e494:	f3 cf       	rjmp	.-26     	; 0xe47c <__addsf3x+0x34>
    e496:	46 95       	lsr	r20
    e498:	37 95       	ror	r19
    e49a:	27 95       	ror	r18
    e49c:	a7 95       	ror	r26
    e49e:	f0 40       	sbci	r31, 0x00	; 0
    e4a0:	53 95       	inc	r21
    e4a2:	c9 f7       	brne	.-14     	; 0xe496 <__addsf3x+0x4e>
    e4a4:	7e f4       	brtc	.+30     	; 0xe4c4 <__addsf3x+0x7c>
    e4a6:	1f 16       	cp	r1, r31
    e4a8:	ba 0b       	sbc	r27, r26
    e4aa:	62 0b       	sbc	r22, r18
    e4ac:	73 0b       	sbc	r23, r19
    e4ae:	84 0b       	sbc	r24, r20
    e4b0:	ba f0       	brmi	.+46     	; 0xe4e0 <__addsf3x+0x98>
    e4b2:	91 50       	subi	r25, 0x01	; 1
    e4b4:	a1 f0       	breq	.+40     	; 0xe4de <__addsf3x+0x96>
    e4b6:	ff 0f       	add	r31, r31
    e4b8:	bb 1f       	adc	r27, r27
    e4ba:	66 1f       	adc	r22, r22
    e4bc:	77 1f       	adc	r23, r23
    e4be:	88 1f       	adc	r24, r24
    e4c0:	c2 f7       	brpl	.-16     	; 0xe4b2 <__addsf3x+0x6a>
    e4c2:	0e c0       	rjmp	.+28     	; 0xe4e0 <__addsf3x+0x98>
    e4c4:	ba 0f       	add	r27, r26
    e4c6:	62 1f       	adc	r22, r18
    e4c8:	73 1f       	adc	r23, r19
    e4ca:	84 1f       	adc	r24, r20
    e4cc:	48 f4       	brcc	.+18     	; 0xe4e0 <__addsf3x+0x98>
    e4ce:	87 95       	ror	r24
    e4d0:	77 95       	ror	r23
    e4d2:	67 95       	ror	r22
    e4d4:	b7 95       	ror	r27
    e4d6:	f7 95       	ror	r31
    e4d8:	9e 3f       	cpi	r25, 0xFE	; 254
    e4da:	08 f0       	brcs	.+2      	; 0xe4de <__addsf3x+0x96>
    e4dc:	b3 cf       	rjmp	.-154    	; 0xe444 <__addsf3+0x1e>
    e4de:	93 95       	inc	r25
    e4e0:	88 0f       	add	r24, r24
    e4e2:	08 f0       	brcs	.+2      	; 0xe4e6 <__addsf3x+0x9e>
    e4e4:	99 27       	eor	r25, r25
    e4e6:	ee 0f       	add	r30, r30
    e4e8:	97 95       	ror	r25
    e4ea:	87 95       	ror	r24
    e4ec:	08 95       	ret

0000e4ee <__fixsfsi>:
    e4ee:	04 d0       	rcall	.+8      	; 0xe4f8 <__fixunssfsi>
    e4f0:	68 94       	set
    e4f2:	b1 11       	cpse	r27, r1
    e4f4:	b5 c0       	rjmp	.+362    	; 0xe660 <__fp_szero>
    e4f6:	08 95       	ret

0000e4f8 <__fixunssfsi>:
    e4f8:	98 d0       	rcall	.+304    	; 0xe62a <__fp_splitA>
    e4fa:	88 f0       	brcs	.+34     	; 0xe51e <__fixunssfsi+0x26>
    e4fc:	9f 57       	subi	r25, 0x7F	; 127
    e4fe:	90 f0       	brcs	.+36     	; 0xe524 <__fixunssfsi+0x2c>
    e500:	b9 2f       	mov	r27, r25
    e502:	99 27       	eor	r25, r25
    e504:	b7 51       	subi	r27, 0x17	; 23
    e506:	a0 f0       	brcs	.+40     	; 0xe530 <__fixunssfsi+0x38>
    e508:	d1 f0       	breq	.+52     	; 0xe53e <__fixunssfsi+0x46>
    e50a:	66 0f       	add	r22, r22
    e50c:	77 1f       	adc	r23, r23
    e50e:	88 1f       	adc	r24, r24
    e510:	99 1f       	adc	r25, r25
    e512:	1a f0       	brmi	.+6      	; 0xe51a <__fixunssfsi+0x22>
    e514:	ba 95       	dec	r27
    e516:	c9 f7       	brne	.-14     	; 0xe50a <__fixunssfsi+0x12>
    e518:	12 c0       	rjmp	.+36     	; 0xe53e <__fixunssfsi+0x46>
    e51a:	b1 30       	cpi	r27, 0x01	; 1
    e51c:	81 f0       	breq	.+32     	; 0xe53e <__fixunssfsi+0x46>
    e51e:	9f d0       	rcall	.+318    	; 0xe65e <__fp_zero>
    e520:	b1 e0       	ldi	r27, 0x01	; 1
    e522:	08 95       	ret
    e524:	9c c0       	rjmp	.+312    	; 0xe65e <__fp_zero>
    e526:	67 2f       	mov	r22, r23
    e528:	78 2f       	mov	r23, r24
    e52a:	88 27       	eor	r24, r24
    e52c:	b8 5f       	subi	r27, 0xF8	; 248
    e52e:	39 f0       	breq	.+14     	; 0xe53e <__fixunssfsi+0x46>
    e530:	b9 3f       	cpi	r27, 0xF9	; 249
    e532:	cc f3       	brlt	.-14     	; 0xe526 <__fixunssfsi+0x2e>
    e534:	86 95       	lsr	r24
    e536:	77 95       	ror	r23
    e538:	67 95       	ror	r22
    e53a:	b3 95       	inc	r27
    e53c:	d9 f7       	brne	.-10     	; 0xe534 <__fixunssfsi+0x3c>
    e53e:	3e f4       	brtc	.+14     	; 0xe54e <__fixunssfsi+0x56>
    e540:	90 95       	com	r25
    e542:	80 95       	com	r24
    e544:	70 95       	com	r23
    e546:	61 95       	neg	r22
    e548:	7f 4f       	sbci	r23, 0xFF	; 255
    e54a:	8f 4f       	sbci	r24, 0xFF	; 255
    e54c:	9f 4f       	sbci	r25, 0xFF	; 255
    e54e:	08 95       	ret

0000e550 <__floatunsisf>:
    e550:	e8 94       	clt
    e552:	09 c0       	rjmp	.+18     	; 0xe566 <__floatsisf+0x12>

0000e554 <__floatsisf>:
    e554:	97 fb       	bst	r25, 7
    e556:	3e f4       	brtc	.+14     	; 0xe566 <__floatsisf+0x12>
    e558:	90 95       	com	r25
    e55a:	80 95       	com	r24
    e55c:	70 95       	com	r23
    e55e:	61 95       	neg	r22
    e560:	7f 4f       	sbci	r23, 0xFF	; 255
    e562:	8f 4f       	sbci	r24, 0xFF	; 255
    e564:	9f 4f       	sbci	r25, 0xFF	; 255
    e566:	99 23       	and	r25, r25
    e568:	a9 f0       	breq	.+42     	; 0xe594 <__floatsisf+0x40>
    e56a:	f9 2f       	mov	r31, r25
    e56c:	96 e9       	ldi	r25, 0x96	; 150
    e56e:	bb 27       	eor	r27, r27
    e570:	93 95       	inc	r25
    e572:	f6 95       	lsr	r31
    e574:	87 95       	ror	r24
    e576:	77 95       	ror	r23
    e578:	67 95       	ror	r22
    e57a:	b7 95       	ror	r27
    e57c:	f1 11       	cpse	r31, r1
    e57e:	f8 cf       	rjmp	.-16     	; 0xe570 <__floatsisf+0x1c>
    e580:	fa f4       	brpl	.+62     	; 0xe5c0 <__floatsisf+0x6c>
    e582:	bb 0f       	add	r27, r27
    e584:	11 f4       	brne	.+4      	; 0xe58a <__floatsisf+0x36>
    e586:	60 ff       	sbrs	r22, 0
    e588:	1b c0       	rjmp	.+54     	; 0xe5c0 <__floatsisf+0x6c>
    e58a:	6f 5f       	subi	r22, 0xFF	; 255
    e58c:	7f 4f       	sbci	r23, 0xFF	; 255
    e58e:	8f 4f       	sbci	r24, 0xFF	; 255
    e590:	9f 4f       	sbci	r25, 0xFF	; 255
    e592:	16 c0       	rjmp	.+44     	; 0xe5c0 <__floatsisf+0x6c>
    e594:	88 23       	and	r24, r24
    e596:	11 f0       	breq	.+4      	; 0xe59c <__floatsisf+0x48>
    e598:	96 e9       	ldi	r25, 0x96	; 150
    e59a:	11 c0       	rjmp	.+34     	; 0xe5be <__floatsisf+0x6a>
    e59c:	77 23       	and	r23, r23
    e59e:	21 f0       	breq	.+8      	; 0xe5a8 <__floatsisf+0x54>
    e5a0:	9e e8       	ldi	r25, 0x8E	; 142
    e5a2:	87 2f       	mov	r24, r23
    e5a4:	76 2f       	mov	r23, r22
    e5a6:	05 c0       	rjmp	.+10     	; 0xe5b2 <__floatsisf+0x5e>
    e5a8:	66 23       	and	r22, r22
    e5aa:	71 f0       	breq	.+28     	; 0xe5c8 <__floatsisf+0x74>
    e5ac:	96 e8       	ldi	r25, 0x86	; 134
    e5ae:	86 2f       	mov	r24, r22
    e5b0:	70 e0       	ldi	r23, 0x00	; 0
    e5b2:	60 e0       	ldi	r22, 0x00	; 0
    e5b4:	2a f0       	brmi	.+10     	; 0xe5c0 <__floatsisf+0x6c>
    e5b6:	9a 95       	dec	r25
    e5b8:	66 0f       	add	r22, r22
    e5ba:	77 1f       	adc	r23, r23
    e5bc:	88 1f       	adc	r24, r24
    e5be:	da f7       	brpl	.-10     	; 0xe5b6 <__floatsisf+0x62>
    e5c0:	88 0f       	add	r24, r24
    e5c2:	96 95       	lsr	r25
    e5c4:	87 95       	ror	r24
    e5c6:	97 f9       	bld	r25, 7
    e5c8:	08 95       	ret

0000e5ca <__fp_inf>:
    e5ca:	97 f9       	bld	r25, 7
    e5cc:	9f 67       	ori	r25, 0x7F	; 127
    e5ce:	80 e8       	ldi	r24, 0x80	; 128
    e5d0:	70 e0       	ldi	r23, 0x00	; 0
    e5d2:	60 e0       	ldi	r22, 0x00	; 0
    e5d4:	08 95       	ret

0000e5d6 <__fp_nan>:
    e5d6:	9f ef       	ldi	r25, 0xFF	; 255
    e5d8:	80 ec       	ldi	r24, 0xC0	; 192
    e5da:	08 95       	ret

0000e5dc <__fp_pscA>:
    e5dc:	00 24       	eor	r0, r0
    e5de:	0a 94       	dec	r0
    e5e0:	16 16       	cp	r1, r22
    e5e2:	17 06       	cpc	r1, r23
    e5e4:	18 06       	cpc	r1, r24
    e5e6:	09 06       	cpc	r0, r25
    e5e8:	08 95       	ret

0000e5ea <__fp_pscB>:
    e5ea:	00 24       	eor	r0, r0
    e5ec:	0a 94       	dec	r0
    e5ee:	12 16       	cp	r1, r18
    e5f0:	13 06       	cpc	r1, r19
    e5f2:	14 06       	cpc	r1, r20
    e5f4:	05 06       	cpc	r0, r21
    e5f6:	08 95       	ret

0000e5f8 <__fp_round>:
    e5f8:	09 2e       	mov	r0, r25
    e5fa:	03 94       	inc	r0
    e5fc:	00 0c       	add	r0, r0
    e5fe:	11 f4       	brne	.+4      	; 0xe604 <__fp_round+0xc>
    e600:	88 23       	and	r24, r24
    e602:	52 f0       	brmi	.+20     	; 0xe618 <__fp_round+0x20>
    e604:	bb 0f       	add	r27, r27
    e606:	40 f4       	brcc	.+16     	; 0xe618 <__fp_round+0x20>
    e608:	bf 2b       	or	r27, r31
    e60a:	11 f4       	brne	.+4      	; 0xe610 <__fp_round+0x18>
    e60c:	60 ff       	sbrs	r22, 0
    e60e:	04 c0       	rjmp	.+8      	; 0xe618 <__fp_round+0x20>
    e610:	6f 5f       	subi	r22, 0xFF	; 255
    e612:	7f 4f       	sbci	r23, 0xFF	; 255
    e614:	8f 4f       	sbci	r24, 0xFF	; 255
    e616:	9f 4f       	sbci	r25, 0xFF	; 255
    e618:	08 95       	ret

0000e61a <__fp_split3>:
    e61a:	57 fd       	sbrc	r21, 7
    e61c:	90 58       	subi	r25, 0x80	; 128
    e61e:	44 0f       	add	r20, r20
    e620:	55 1f       	adc	r21, r21
    e622:	59 f0       	breq	.+22     	; 0xe63a <__fp_splitA+0x10>
    e624:	5f 3f       	cpi	r21, 0xFF	; 255
    e626:	71 f0       	breq	.+28     	; 0xe644 <__fp_splitA+0x1a>
    e628:	47 95       	ror	r20

0000e62a <__fp_splitA>:
    e62a:	88 0f       	add	r24, r24
    e62c:	97 fb       	bst	r25, 7
    e62e:	99 1f       	adc	r25, r25
    e630:	61 f0       	breq	.+24     	; 0xe64a <__fp_splitA+0x20>
    e632:	9f 3f       	cpi	r25, 0xFF	; 255
    e634:	79 f0       	breq	.+30     	; 0xe654 <__fp_splitA+0x2a>
    e636:	87 95       	ror	r24
    e638:	08 95       	ret
    e63a:	12 16       	cp	r1, r18
    e63c:	13 06       	cpc	r1, r19
    e63e:	14 06       	cpc	r1, r20
    e640:	55 1f       	adc	r21, r21
    e642:	f2 cf       	rjmp	.-28     	; 0xe628 <__fp_split3+0xe>
    e644:	46 95       	lsr	r20
    e646:	f1 df       	rcall	.-30     	; 0xe62a <__fp_splitA>
    e648:	08 c0       	rjmp	.+16     	; 0xe65a <__fp_splitA+0x30>
    e64a:	16 16       	cp	r1, r22
    e64c:	17 06       	cpc	r1, r23
    e64e:	18 06       	cpc	r1, r24
    e650:	99 1f       	adc	r25, r25
    e652:	f1 cf       	rjmp	.-30     	; 0xe636 <__fp_splitA+0xc>
    e654:	86 95       	lsr	r24
    e656:	71 05       	cpc	r23, r1
    e658:	61 05       	cpc	r22, r1
    e65a:	08 94       	sec
    e65c:	08 95       	ret

0000e65e <__fp_zero>:
    e65e:	e8 94       	clt

0000e660 <__fp_szero>:
    e660:	bb 27       	eor	r27, r27
    e662:	66 27       	eor	r22, r22
    e664:	77 27       	eor	r23, r23
    e666:	cb 01       	movw	r24, r22
    e668:	97 f9       	bld	r25, 7
    e66a:	08 95       	ret

0000e66c <__mulsf3>:
    e66c:	0b d0       	rcall	.+22     	; 0xe684 <__mulsf3x>
    e66e:	c4 cf       	rjmp	.-120    	; 0xe5f8 <__fp_round>
    e670:	b5 df       	rcall	.-150    	; 0xe5dc <__fp_pscA>
    e672:	28 f0       	brcs	.+10     	; 0xe67e <__mulsf3+0x12>
    e674:	ba df       	rcall	.-140    	; 0xe5ea <__fp_pscB>
    e676:	18 f0       	brcs	.+6      	; 0xe67e <__mulsf3+0x12>
    e678:	95 23       	and	r25, r21
    e67a:	09 f0       	breq	.+2      	; 0xe67e <__mulsf3+0x12>
    e67c:	a6 cf       	rjmp	.-180    	; 0xe5ca <__fp_inf>
    e67e:	ab cf       	rjmp	.-170    	; 0xe5d6 <__fp_nan>
    e680:	11 24       	eor	r1, r1
    e682:	ee cf       	rjmp	.-36     	; 0xe660 <__fp_szero>

0000e684 <__mulsf3x>:
    e684:	ca df       	rcall	.-108    	; 0xe61a <__fp_split3>
    e686:	a0 f3       	brcs	.-24     	; 0xe670 <__mulsf3+0x4>

0000e688 <__mulsf3_pse>:
    e688:	95 9f       	mul	r25, r21
    e68a:	d1 f3       	breq	.-12     	; 0xe680 <__mulsf3+0x14>
    e68c:	95 0f       	add	r25, r21
    e68e:	50 e0       	ldi	r21, 0x00	; 0
    e690:	55 1f       	adc	r21, r21
    e692:	62 9f       	mul	r22, r18
    e694:	f0 01       	movw	r30, r0
    e696:	72 9f       	mul	r23, r18
    e698:	bb 27       	eor	r27, r27
    e69a:	f0 0d       	add	r31, r0
    e69c:	b1 1d       	adc	r27, r1
    e69e:	63 9f       	mul	r22, r19
    e6a0:	aa 27       	eor	r26, r26
    e6a2:	f0 0d       	add	r31, r0
    e6a4:	b1 1d       	adc	r27, r1
    e6a6:	aa 1f       	adc	r26, r26
    e6a8:	64 9f       	mul	r22, r20
    e6aa:	66 27       	eor	r22, r22
    e6ac:	b0 0d       	add	r27, r0
    e6ae:	a1 1d       	adc	r26, r1
    e6b0:	66 1f       	adc	r22, r22
    e6b2:	82 9f       	mul	r24, r18
    e6b4:	22 27       	eor	r18, r18
    e6b6:	b0 0d       	add	r27, r0
    e6b8:	a1 1d       	adc	r26, r1
    e6ba:	62 1f       	adc	r22, r18
    e6bc:	73 9f       	mul	r23, r19
    e6be:	b0 0d       	add	r27, r0
    e6c0:	a1 1d       	adc	r26, r1
    e6c2:	62 1f       	adc	r22, r18
    e6c4:	83 9f       	mul	r24, r19
    e6c6:	a0 0d       	add	r26, r0
    e6c8:	61 1d       	adc	r22, r1
    e6ca:	22 1f       	adc	r18, r18
    e6cc:	74 9f       	mul	r23, r20
    e6ce:	33 27       	eor	r19, r19
    e6d0:	a0 0d       	add	r26, r0
    e6d2:	61 1d       	adc	r22, r1
    e6d4:	23 1f       	adc	r18, r19
    e6d6:	84 9f       	mul	r24, r20
    e6d8:	60 0d       	add	r22, r0
    e6da:	21 1d       	adc	r18, r1
    e6dc:	82 2f       	mov	r24, r18
    e6de:	76 2f       	mov	r23, r22
    e6e0:	6a 2f       	mov	r22, r26
    e6e2:	11 24       	eor	r1, r1
    e6e4:	9f 57       	subi	r25, 0x7F	; 127
    e6e6:	50 40       	sbci	r21, 0x00	; 0
    e6e8:	8a f0       	brmi	.+34     	; 0xe70c <__mulsf3_pse+0x84>
    e6ea:	e1 f0       	breq	.+56     	; 0xe724 <__mulsf3_pse+0x9c>
    e6ec:	88 23       	and	r24, r24
    e6ee:	4a f0       	brmi	.+18     	; 0xe702 <__mulsf3_pse+0x7a>
    e6f0:	ee 0f       	add	r30, r30
    e6f2:	ff 1f       	adc	r31, r31
    e6f4:	bb 1f       	adc	r27, r27
    e6f6:	66 1f       	adc	r22, r22
    e6f8:	77 1f       	adc	r23, r23
    e6fa:	88 1f       	adc	r24, r24
    e6fc:	91 50       	subi	r25, 0x01	; 1
    e6fe:	50 40       	sbci	r21, 0x00	; 0
    e700:	a9 f7       	brne	.-22     	; 0xe6ec <__mulsf3_pse+0x64>
    e702:	9e 3f       	cpi	r25, 0xFE	; 254
    e704:	51 05       	cpc	r21, r1
    e706:	70 f0       	brcs	.+28     	; 0xe724 <__mulsf3_pse+0x9c>
    e708:	60 cf       	rjmp	.-320    	; 0xe5ca <__fp_inf>
    e70a:	aa cf       	rjmp	.-172    	; 0xe660 <__fp_szero>
    e70c:	5f 3f       	cpi	r21, 0xFF	; 255
    e70e:	ec f3       	brlt	.-6      	; 0xe70a <__mulsf3_pse+0x82>
    e710:	98 3e       	cpi	r25, 0xE8	; 232
    e712:	dc f3       	brlt	.-10     	; 0xe70a <__mulsf3_pse+0x82>
    e714:	86 95       	lsr	r24
    e716:	77 95       	ror	r23
    e718:	67 95       	ror	r22
    e71a:	b7 95       	ror	r27
    e71c:	f7 95       	ror	r31
    e71e:	e7 95       	ror	r30
    e720:	9f 5f       	subi	r25, 0xFF	; 255
    e722:	c1 f7       	brne	.-16     	; 0xe714 <__mulsf3_pse+0x8c>
    e724:	fe 2b       	or	r31, r30
    e726:	88 0f       	add	r24, r24
    e728:	91 1d       	adc	r25, r1
    e72a:	96 95       	lsr	r25
    e72c:	87 95       	ror	r24
    e72e:	97 f9       	bld	r25, 7
    e730:	08 95       	ret

0000e732 <strnlen_P>:
    e732:	fc 01       	movw	r30, r24
    e734:	05 90       	lpm	r0, Z+
    e736:	61 50       	subi	r22, 0x01	; 1
    e738:	70 40       	sbci	r23, 0x00	; 0
    e73a:	01 10       	cpse	r0, r1
    e73c:	d8 f7       	brcc	.-10     	; 0xe734 <strnlen_P+0x2>
    e73e:	80 95       	com	r24
    e740:	90 95       	com	r25
    e742:	8e 0f       	add	r24, r30
    e744:	9f 1f       	adc	r25, r31
    e746:	08 95       	ret

0000e748 <_exit>:
    e748:	f8 94       	cli

0000e74a <__stop_program>:
    e74a:	ff cf       	rjmp	.-2      	; 0xe74a <__stop_program>
