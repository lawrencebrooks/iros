
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000eb5c  0000ec5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000ed00  2**8
                  CONTENTS, READONLY
  2 .text         0000eb5c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b53  00800510  00800510  0000ec6c  2**1
                  ALLOC
  4 .comment      00000011  00000000  00000000  0000f100  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000910  00000000  00000000  0000f118  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b62f  00000000  00000000  0000fa28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000173a  00000000  00000000  0001b057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f54  00000000  00000000  0001c791  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001944  00000000  00000000  0001f6e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000225a  00000000  00000000  0002102c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000099cc  00000000  00000000  00023286  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b8  00000000  00000000  0002cc58  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 38 	jmp	0x715e	; 0x715e <__ctors_end>
       4:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
       8:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
       c:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      10:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      14:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      18:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      1c:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      20:	0c 94 8a 3e 	jmp	0x7d14	; 0x7d14 <__vector_8>
      24:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      28:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      2c:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      30:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      34:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <__vector_13>
      38:	0c 94 a2 3c 	jmp	0x7944	; 0x7944 <__vector_14>
      3c:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__vector_15>
      40:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      44:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      48:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      4c:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      50:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      54:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      58:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      5c:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      60:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      64:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      68:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      6c:	0c 94 18 39 	jmp	0x7230	; 0x7230 <__bad_interrupt>
      70:	39 62       	ori	r19, 0x29	; 41
      72:	45 62       	ori	r20, 0x25	; 37
      74:	51 62       	ori	r21, 0x21	; 33
      76:	3d 62       	ori	r19, 0x2D	; 45
      78:	41 62       	ori	r20, 0x21	; 33
      7a:	49 62       	ori	r20, 0x29	; 41
      7c:	3d 62       	ori	r19, 0x2D	; 45
      7e:	3d 62       	ori	r19, 0x2D	; 45
      80:	4d 62       	ori	r20, 0x2D	; 45
      82:	4f 66       	ori	r20, 0x6F	; 111
      84:	5b 66       	ori	r21, 0x6B	; 107
      86:	52 66       	ori	r21, 0x62	; 98
      88:	5b 66       	ori	r21, 0x6B	; 107
      8a:	55 66       	ori	r21, 0x65	; 101
      8c:	5b 66       	ori	r21, 0x6B	; 107
      8e:	58 66       	ori	r21, 0x68	; 104
      90:	5b 66       	ori	r21, 0x6B	; 107
      92:	5e 66       	ori	r21, 0x6E	; 110
      94:	61 66       	ori	r22, 0x61	; 97

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	5d ff       	.word	0xff5d	; ????
      9c:	5e 10       	cpse	r5, r14
      9e:	27 ff       	sbrs	r18, 7
      a0:	2a d2       	rcall	.+1108   	; 0x4f6 <spacesong+0xb0>
      a2:	2b 7d       	andi	r18, 0xDB	; 219
      a4:	21 0c       	add	r2, r1
      a6:	22 fb       	bst	r18, 2
      a8:	85 00       	.word	0x0085	; ????
      aa:	84 00       	.word	0x0084	; ????
      ac:	89 03       	fmulsu	r16, r17
      ae:	88 8d       	ldd	r24, Y+24	; 0x18
      b0:	81 09       	sbc	r24, r1
      b2:	6f 02       	muls	r22, r31
      b4:	44 42       	sbci	r20, 0x24	; 36
      b6:	47 00       	.word	0x0047	; ????
      b8:	45 01       	movw	r8, r10
      ba:	b0 83       	st	Z, r27
      bc:	b3 00       	.word	0x00b3	; ????
      be:	b1 01       	movw	r22, r2
      c0:	24 b9       	out	0x04, r18	; 4
      c2:	25 57       	subi	r18, 0x75	; 117
      c4:	8a 1d       	adc	r24, r10
      c6:	8b 03       	fmulsu	r16, r19

000000c8 <eeprom_format_table>:
      c8:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e8 <patchCommands>:
      e8:	28 40 2b 40 87 40 8b 40 92 40 33 40 38 40 3d 40     (@+@.@.@.@3@8@=@
      f8:	9a 40 40 40 43 40 46 40 81 40 84 40 aa 40           .@@@C@F@.@.@.@

00000106 <fader>:
     106:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

00000112 <strChallenge>:
     112:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     122:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     132:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     142:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     152:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     162:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     172:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     182:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     192:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     1a2:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     1b2:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

000001c2 <strCongrats>:
     1c2:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     1d2:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     1e2:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     1f2:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     202:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     212:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     222:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     232:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     242:	49 4e 45 52 53 00 00 50 41 54 20 59 4f 55 52 53     INERS..PAT YOURS
     252:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     262:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     272:	4f 4e 45 00 23 00                                   ONE.#.

00000278 <strIntro>:
     278:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     288:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     298:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     2a8:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     2b8:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     2c8:	45 43 41 55 53 45 20 54 48 45 59 20 53 55 43 4b     ECAUSE THEY SUCK
     2d8:	00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20 41     ..DESTROY THEM A
     2e8:	4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f 55     ND.TAKE BACK YOU
     2f8:	52 20 53 57 41 47 00 23 00                          R SWAG.#.

00000301 <default_scores>:
     301:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     311:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000031f <strCredits>:
     31f:	49 52 4f 53 20 56 33 2e 30 20 46 4f 52 20 55 5a     IROS V3.0 FOR UZ
     32f:	45 42 4f 58 00 00 00 50 52 4f 47 52 41 4d 4d 49     EBOX...PROGRAMMI
     33f:	4e 47 20 41 4e 44 20 44 45 53 49 47 4e 00 00 4c     NG AND DESIGN..L
     34f:	41 57 52 45 4e 43 45 20 42 52 4f 4f 4b 53 00 00     AWRENCE BROOKS..
     35f:	00 4d 55 53 49 43 20 44 45 52 49 56 45 44 20 46     .MUSIC DERIVED F
     36f:	52 4f 4d 00 00 43 59 41 52 4f 4e 53 20 47 41 54     ROM..CYARONS GAT
     37f:	45 20 42 59 00 00 54 41 4e 4e 45 52 20 48 45 4c     E BY..TANNER HEL
     38f:	4c 41 4e 44 00 00 4c 49 43 45 4e 43 45 44 20 55     LAND..LICENCED U
     39f:	4e 44 45 52 20 43 43 20 56 33 2e 30 00 23 00        NDER CC V3.0.#.

000003ae <strTally>:
     3ae:	54 41 4c 4c 59 20 00                                TALLY .

000003b5 <strGameOver>:
     3b5:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000003bf <strLevelBonus>:
     3bf:	42 4f 4e 55 53 00                                   BONUS.

000003c5 <strLevelClear>:
     3c5:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

000003d1 <strTime>:
     3d1:	54 49 4d 45 20 00                                   TIME .

000003d7 <strLives>:
     3d7:	4c 49 56 45 53 20 00                                LIVES .

000003de <strShield>:
     3de:	53 48 49 45 4c 44 20 00                             SHIELD .

000003e6 <strScore>:
     3e6:	53 43 4f 52 45 20 00                                SCORE .

000003ed <strSelectHandle>:
	...

000003ee <strCopyright>:
     3ee:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     3fe:	4f 4f 4b 53 00                                      OOKS.

00000403 <strHighScores>:
     403:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

0000040f <strMainMenu>:
     40f:	20 20 20 20 20 20 20 20 20 20 20 00                            .

0000041b <strContinue>:
     41b:	43 4f 4e 54 49 4e 55 45 20 00                       CONTINUE .

00000425 <strCreditCount>:
     425:	43 52 45 44 49 54 53 20 00                          CREDITS .

0000042e <str1Player>:
     42e:	50 52 45 53 53 20 53 54 41 52 54 00                 PRESS START.

0000043a <strInsertCoin>:
     43a:	49 4e 53 45 52 54 20 43 4f 49 4e 00                 INSERT COIN.

00000446 <spacesong>:
     446:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     456:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     466:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     476:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     486:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     496:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     4a6:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     4b6:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     4c6:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     4d6:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     4e6:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     4f6:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     506:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     516:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     526:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     536:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     546:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     556:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     566:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     576:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     586:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     596:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     5a6:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     5b6:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     5c6:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     5d6:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     5e6:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     5f6:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     606:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     616:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     626:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     636:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     646:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     656:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     666:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     676:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     686:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     696:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     6a6:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     6b6:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     6c6:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     6d6:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     6e6:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     6f6:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     706:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     716:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     726:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     736:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     746:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     756:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     766:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     776:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     786:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     796:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     7a6:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     7b6:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     7c6:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     7d6:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     7e6:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     7f6:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     806:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     816:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     826:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     836:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     846:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     856:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     866:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     876:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     886:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     896:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     8a6:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     8b6:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     8c6:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     8d6:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     8e6:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     8f6:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     906:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     916:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     926:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     936:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     946:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     956:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     966:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     976:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     986:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     996:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     9a6:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     9b6:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     9c6:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     9d6:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     9e6:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     9f6:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     a06:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     a16:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     a26:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     a36:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     a46:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     a56:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     a66:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     a76:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
     a86:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
     a96:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
     aa6:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
     ab6:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
     ac6:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
     ad6:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00000ae6 <planetsong>:
     ae6:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
     af6:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
     b06:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
     b16:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     b26:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
     b36:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
     b46:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     b56:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
     b66:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
     b76:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
     b86:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
     b96:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     ba6:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
     bb6:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
     bc6:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
     bd6:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
     be6:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
     bf6:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     c06:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     c16:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     c26:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     c36:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     c46:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
     c56:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
     c66:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
     c76:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
     c86:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
     c96:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
     ca6:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
     cb6:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
     cc6:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
     cd6:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
     ce6:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
     cf6:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     d06:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
     d16:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
     d26:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     d36:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
     d46:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
     d56:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
     d66:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
     d76:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
     d86:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
     d96:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
     da6:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
     db6:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
     dc6:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
     dd6:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
     de6:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
     df6:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
     e06:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
     e16:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
     e26:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
     e36:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
     e46:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
     e56:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
     e66:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
     e76:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
     e86:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
     e96:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
     ea6:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
     eb6:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
     ec6:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
     ed6:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
     ee6:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     ef6:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
     f06:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
     f16:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     f26:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
     f36:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
     f46:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
     f56:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
     f66:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     f76:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
     f86:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
     f96:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
     fa6:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
     fb6:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
     fc6:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     fd6:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     fe6:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     ff6:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1006:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1016:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1026:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1036:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1046:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1056:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1066:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1076:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1086:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1096:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    10a6:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    10b6:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    10c6:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    10d6:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    10e6:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    10f6:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1106:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1116:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1126:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1136:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1146:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1156:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1166:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1176:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1186:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1196:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    11a6:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    11b6:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    11c6:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    11d6:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    11e6:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    11f6:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1206:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1216:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1226:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1236:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1246:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1256:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1266:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1276:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1286:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1296:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    12a6:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    12b6:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    12c6:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    12d6:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    12e6:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    12f6:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1306:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1316:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1326:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1336:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1346:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1356:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1366:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1376:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1386:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1396:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    13a6:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    13b6:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    13c6:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    13d6:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    13e6:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    13f6:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1406:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1416:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1426:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1436:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1446:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1456:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1466:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1476:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1486:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1496:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    14a6:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    14b6:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    14c6:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    14d6:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    14e6:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    14f6:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1506:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1516:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1526:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1536:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1546:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1556:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1566:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1576:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1586:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1596:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    15a6:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    15b6:	2f 00                                               /.

000015b8 <my_patches>:
    15b8:	00 00 00 2f 17 00 00 00 00 00 00 00 2f 17 00 00     .../......../...
    15c8:	00 00 00 00 00 1e 17 00 00 00 00 00 00 00 c8 16     ................
    15d8:	00 00 00 00 00 00 00 1e 17 00 00 00 00 00 00 00     ................
    15e8:	f7 15 00 00 00 00 00 00 00 f7 15 00 00 00 00        ...............

000015f7 <explode>:
    15f7:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1607:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1617:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1627:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1637:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1647:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1657:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1667:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1677:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1687:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1697:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    16a7:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    16b7:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    16c7:	ff                                                  .

000016c8 <pshoot>:
    16c8:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    16d8:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    16e8:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    16f8:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1708:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1718:	00 01 05 00 00 ff                                   ......

0000171e <navigate>:
    171e:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    172e:	ff                                                  .

0000172f <instrument>:
    172f:	00 02 04 00 00 dd 00 ff                             ........

00001737 <sprites_data>:
    1737:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1747:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1757:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1767:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1777:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1787:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1797:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    17a7:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    17b7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    17c7:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    17d7:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    17e7:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    17f7:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1807:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1817:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1827:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1837:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1847:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1857:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1867:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1877:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1887:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1897:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    18a7:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    18b7:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    18c7:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    18d7:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    18e7:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18f7:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    1907:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    1917:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    1927:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1937:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    1947:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    1957:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    1967:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    1977:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    1987:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    1997:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    19a7:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19b7:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    19c7:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    19d7:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    19e7:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    19f7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a07:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a17:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a27:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a37:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    1a47:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1a57:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    1a67:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1a77:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1a87:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1a97:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1aa7:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1ab7:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1ac7:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1ad7:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1ae7:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    1af7:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1b07:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1b17:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1b27:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    1b37:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1b47:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1b57:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1b67:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1b77:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1b87:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1b97:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    1ba7:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1bb7:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1bc7:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1bd7:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1be7:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    1bf7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c07:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    1c17:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    1c27:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c37:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    1c47:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    1c57:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    1c67:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    1c77:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c87:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    1c97:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    1ca7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cb7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cc7:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    1cd7:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    1ce7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cf7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d07:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    1d17:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    1d27:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d37:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d47:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    1d57:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    1d67:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d77:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    1d87:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    1d97:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    1da7:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    1db7:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    1dc7:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1dd7:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1de7:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    1df7:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1e07:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    1e17:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    1e27:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1e37:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    1e47:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1e57:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    1e67:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1e77:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1e87:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    1e97:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    1ea7:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1eb7:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    1ec7:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    1ed7:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    1ee7:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1ef7:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1f07:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    1f17:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    1f27:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1f37:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    1f47:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1f57:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1f67:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1f77:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1f87:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    1f97:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    1fa7:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    1fb7:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    1fc7:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    1fd7:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    1fe7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ff7:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    2007:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    2017:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2027:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2037:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    2047:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    2057:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2067:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2077:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2087:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2097:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    20a7:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    20b7:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    20c7:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    20d7:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    20e7:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    20f7:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    2107:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    2117:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2127:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2137:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2147:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2157:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2167:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2177:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2187:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2197:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    21a7:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    21b7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    21c7:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    21d7:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    21e7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21f7:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    2207:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2217:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2227:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2237:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2247:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2257:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2267:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2277:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2287:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2297:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    22a7:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    22b7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22c7:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    22d7:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    22e7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22f7:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2307:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2317:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2327:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2337:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2347:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2357:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2367:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2377:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2387:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2397:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    23a7:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    23b7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23c7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d7:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    23e7:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    23f7:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2407:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2417:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2427:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2437:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2447:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2457:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2467:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2477:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2487:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2497:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    24a7:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    24b7:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    24c7:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    24d7:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    24e7:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    24f7:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2507:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2517:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2527:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2537:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2547:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2557:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2567:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2577:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2587:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2597:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    25a7:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25b7:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    25c7:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    25d7:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    25e7:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    25f7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2607:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2617:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2627:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2637:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2647:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2657:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2667:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2677:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2687:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2697:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    26a7:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    26b7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26c7:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    26d7:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    26e7:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    26f7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2707:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2717:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2727:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2737:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2747:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2757:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2767:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2777:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2787:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2797:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    27a7:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    27b7:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    27c7:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    27d7:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    27e7:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    27f7:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2807:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2817:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2827:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2837:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2847:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2857:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2867:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2877:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2887:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2897:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    28a7:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28b7:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    28c7:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    28d7:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    28e7:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    28f7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2907:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2917:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2927:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2937:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2947:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2957:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2967:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2977:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2987:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2997:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    29a7:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    29b7:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    29c7:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    29d7:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    29e7:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    29f7:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2a07:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2a17:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2a27:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2a37:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    2a47:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    2a57:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    2a67:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    2a77:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    2a87:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    2a97:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    2aa7:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    2ab7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2ac7:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    2ad7:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2ae7:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    2af7:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2b07:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    2b17:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    2b27:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    2b37:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    2b47:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2b57:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    2b67:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    2b77:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2b87:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2b97:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2ba7:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    2bb7:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2bc7:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2bd7:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2be7:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    2bf7:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    2c07:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    2c17:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2c27:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    2c37:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2c47:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2c57:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2c67:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2c77:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2c87:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2c97:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    2ca7:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2cb7:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2cc7:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2cd7:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2ce7:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    2cf7:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    2d07:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    2d17:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    2d27:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    2d37:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    2d47:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2d57:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2d67:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2d77:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2d87:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    2d97:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    2da7:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2db7:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2dc7:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2dd7:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    2de7:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2df7:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2e07:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    2e17:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    2e27:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e37:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    2e47:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    2e57:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    2e67:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    2e77:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2e87:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    2e97:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    2ea7:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2eb7:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    2ec7:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2ed7:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2ee7:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2ef7:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2f07:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    2f17:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    2f27:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    2f37:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    2f47:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    2f57:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    2f67:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f77:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f87:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f97:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    2fa7:	fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fb7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2fc7:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2fd7:	fe fe 02 02 00 00 00 00 02 02 02 02 02 00 00 05     ................
    2fe7:	00 00 00 00 05 02 00 00 00 00 00 00 05 05 00 00     ................
    2ff7:	00 00 00 00 fe fe fe fe 00 07 07 27 07 fe fe fe     ...........'....
    3007:	00 00 07 77 27 fe fe fe 00 00 00 27 07 fe fe fe     ...w'......'....
    3017:	02 02 00 00 07 fe fe fe 05 05 05 05 05 00 02 fe     ................
    3027:	05 05 05 05 05 05 00 05 00 05 05 05 05 00 00 00     ................

00003037 <map_hazard_desert>:
    3037:	01 01 28                                            ..(

0000303a <map_hazard_city>:
    303a:	01 01 29                                            ..)

0000303d <map_hazard_jungle>:
    303d:	01 01 27                                            ..'

00003040 <map_hazard_fire>:
    3040:	01 01 26                                            ..&

00003043 <map_hazard_ice>:
    3043:	01 01 25                                            ..%

00003046 <map_enemy_boss_shot>:
    3046:	01 01 39                                            ..9

00003049 <map_enemy_boss_eye>:
    3049:	01 01 37                                            ..7

0000304c <map_enemy_boss_turret>:
    304c:	01 01 36                                            ..6

0000304f <map_enemy_drone>:
    304f:	01 01 35                                            ..5

00003052 <map_enemy_tank>:
    3052:	01 01 24                                            ..$

00003055 <map_enemy_ball>:
    3055:	01 01 14                                            ...

00003058 <map_enemy_spider_1>:
    3058:	01 01 34                                            ..4

0000305b <map_enemy_spider_0>:
    305b:	01 01 23                                            ..#

0000305e <map_enemy_xwing>:
    305e:	01 01 3a                                            ..:

00003061 <map_enemy_shark>:
    3061:	01 01 05                                            ...

00003064 <map_enemy_shot>:
    3064:	01 01 13                                            ...

00003067 <map_ahero_jump>:
    3067:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

0000306f <map_ahero_prone>:
    306f:	03 01 61 62 63                                      ..abc

00003074 <map_ahero_step_3>:
    3074:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

0000307c <map_ahero_step_2>:
    307c:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

00003084 <map_ahero_step_1>:
    3084:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

0000308c <map_ahero_step_0>:
    308c:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

00003094 <map_ahero_idle>:
    3094:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

0000309c <map_hero_rplasma_shot>:
    309c:	01 01 38                                            ..8

0000309f <map_hero_space_bomb>:
    309f:	01 01 18                                            ...

000030a2 <map_hero_space_shot>:
    30a2:	01 01 17                                            ...

000030a5 <map_hero_ice_shot>:
    30a5:	01 01 16                                            ...

000030a8 <map_hero_ball_shot>:
    30a8:	01 01 15                                            ...

000030ab <map_hero_gplasma_shot>:
    30ab:	01 01 04                                            ...

000030ae <map_hero_ship_large_1>:
    30ae:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

000030b8 <map_hero_ship_large_0>:
    30b8:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

000030c2 <map_hero_ship_1>:
    30c2:	03 01 3b 2b 2c                                      ..;+,

000030c7 <map_hero_ship_0>:
    30c7:	03 01 2a 2b 2c                                      ..*+,

000030cc <map_hero_prone>:
    30cc:	03 01 47 48 49                                      ..GHI

000030d1 <map_hero_jump>:
    30d1:	02 03 02 03 0f 12 21 22                             ......!"

000030d9 <map_hero_step_3>:
    30d9:	02 03 02 03 0f 44 45 46                             .....DEF

000030e1 <map_hero_step_2>:
    30e1:	02 03 00 01 0c 11 1f 20                             ....... 

000030e9 <map_hero_step_1>:
    30e9:	02 03 02 03 0f 10 1d 1e                             ........

000030f1 <map_hero_step_0>:
    30f1:	02 03 00 01 0c 0e 1b 1c                             ........

000030f9 <map_hero_idle>:
    30f9:	02 03 00 01 0c 0d 19 1a                             ........

00003101 <map_emerald_4>:
    3101:	01 01 0a                                            ...

00003104 <map_emerald_3>:
    3104:	01 01 09                                            ...

00003107 <map_emerald_2>:
    3107:	01 01 08                                            ...

0000310a <map_emerald_1>:
    310a:	01 01 07                                            ...

0000310d <map_emerald_0>:
    310d:	01 01 06                                            ...

00003110 <map_explosion_2>:
    3110:	01 01 2f                                            ../

00003113 <map_explosion_1>:
    3113:	01 01 2e                                            ...

00003116 <map_explosion_0>:
    3116:	01 01 2d                                            ..-

00003119 <map_particle>:
    3119:	01 01 30                                            ..0

0000311c <map_up_arrow>:
    311c:	01 01 33                                            ..3

0000311f <map_down_arrow>:
    311f:	01 01 32                                            ..2

00003122 <map_right_arrow>:
    3122:	01 01 31                                            ..1

00003125 <map_none>:
    3125:	01 01 14                                            ...

00003128 <tiles_data>:
	...
    3168:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3178:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3188:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3198:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    31a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31b8:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    31c8:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    31d8:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    31e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31f8:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3208:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3218:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3228:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3238:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3248:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3258:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3268:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3278:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3288:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3298:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    32a8:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    32b8:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    32c8:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    32d8:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    32e8:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    32f8:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3308:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3318:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3328:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3338:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3348:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3358:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3368:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3378:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3388:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3398:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    33a8:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    33b8:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    33c8:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    33d8:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    33e8:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    33f8:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3408:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3418:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3428:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3438:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3448:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3458:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3468:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3478:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3488:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3498:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    34a8:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    34b8:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    34c8:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    34d8:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    34e8:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    34f8:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3508:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3518:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3528:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3538:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3548:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3558:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3568:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3578:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3588:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3598:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    35a8:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    35b8:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    35c8:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    35d8:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    35e8:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    35f8:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3608:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3618:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3628:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3638:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3648:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3658:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3668:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3678:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3688:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3698:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    36a8:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    36b8:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    36c8:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    36d8:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    36e8:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    36f8:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3708:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3718:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3728:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3738:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3748:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3758:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3768:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3778:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3788:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3798:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    37a8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    37b8:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    37c8:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    37d8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    37e8:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    37f8:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    3808:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3818:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3828:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3838:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3848:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3858:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3868:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3878:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    38a8:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38b8:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    38c8:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    38d8:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    38e8:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38f8:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    3908:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    3918:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3928:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3938:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3948:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3958:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3980:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3990:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39c0:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    39d0:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39e8:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    39f8:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3a08:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3a18:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3a28:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a38:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a48:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a58:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a68:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3a78:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    3a88:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    3a98:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    3aa8:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    3ab8:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    3ac8:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    3ad8:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    3ae8:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    3af8:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    3b08:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    3b18:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    3b28:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    3b38:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    3b48:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    3b58:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    3b68:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b78:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b88:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b98:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3bb4:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3bc4:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3bd4:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3be4:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3bf4:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c04:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c14:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c24:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3c34:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3c44:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3c54:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3c64:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3c74:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3c84:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3c94:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3ca4:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cb4:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cc4:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cd4:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ce4:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3cf4:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3d04:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3d14:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    3d24:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3d34:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3d44:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    3d54:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d64:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d90:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3da0:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3db0:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3dc0:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3dd0:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3de0:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    3df0:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    3e00:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    3e10:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    3e20:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    3e30:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3e40:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    3e50:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3e60:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    3e70:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    3e80:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    3e90:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    3ea0:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    3eb0:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    3ec0:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    3ed0:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    3ee0:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    3ef0:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3f00:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3f10:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3f20:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    3f30:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    3f40:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f50:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f60:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    3f70:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    3f80:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3f90:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fa8:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3fb8:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    3fc8:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    3fd8:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    3fe8:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3ff8:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4008:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    4030:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4040:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    4050:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4070:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    4080:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    4090:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    40b0:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    40c0:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    40d0:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    40f0:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    4100:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    4110:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4134:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4144:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4154:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4170:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4180:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4190:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    41b0:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    41c0:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    41d0:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    41f0:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    4200:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    4210:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4230:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4240:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4250:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4270:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4280:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4290:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    42b0:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    42c0:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    42d0:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    42f0:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4300:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4310:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4330:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4340:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4350:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4370:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4380:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4390:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    43b0:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    43c0:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    43d0:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    43f0:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4400:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4410:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4430:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4440:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4450:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4470:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4480:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4490:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    44b0:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    44c0:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    44d0:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    44f4:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4504:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4514:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4530:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4540:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4550:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4570:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4580:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4590:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    45b0:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    45c0:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    45d0:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    45f0:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4600:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4610:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4630:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4640:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4650:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4670:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4680:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4690:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    46b0:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    46c0:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    46d0:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    46f0:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4700:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4710:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4730:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4740:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4750:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4770:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4780:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4790:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    47b0:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47c0:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47d0:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    47f0:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4800:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4810:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4830:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4840:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4850:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4870:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4880:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4890:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    48b0:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48c0:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    48d0:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    48f0:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    4900:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    4910:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4950:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4968:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4978:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4988:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4998:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49a8:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49b8:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    49c8:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    49d8:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49e8:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    49f8:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4a08:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4a18:	af af af af af af af af af af af af af af af af     ................
    4a28:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a38:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a48:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a58:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a68:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4a78:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4a88:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4a98:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4aa8:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4ab8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ac8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ad8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ae8:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4af8:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b08:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b18:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b28:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    4b38:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    4b48:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b58:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b68:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b78:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b88:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b98:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ba8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4bb8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4bc8:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4bd8:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4be8:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4bf8:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c08:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c18:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c28:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c38:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    4c48:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c58:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4c68:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c78:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c88:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c98:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4ca8:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    4cb8:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4cc8:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4cd8:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ce8:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4cf8:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4d08:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4d18:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4d28:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4d38:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4d48:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4d58:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    4d68:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    4d78:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    4d88:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    4d98:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4da8:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    4db8:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4dc8:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4dd8:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4de8:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    4df8:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4e08:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4e18:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4e28:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    4e38:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    4e48:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4e58:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4e68:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    4e78:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4e88:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4e98:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4ea8:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    4eb8:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    4ec8:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4ed8:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4ee8:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    4ef8:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    4f08:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    4f18:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    4f28:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    4f38:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    4f48:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    4f58:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f68:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f78:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f88:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f98:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4fa8:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    4fb8:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    4fc8:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    4fd8:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    4fe8:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    4ff8:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    5008:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    5018:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5028:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5038:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5048:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5058:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5068:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5078:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5088:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5098:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    50a8:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50b8:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50c8:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50d8:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50e8:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50f8:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    5108:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    5118:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5128:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5138:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5148:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5158:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5168:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5178:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5188:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5198:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    51a8:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    51b8:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    51c8:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    51d8:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    51e8:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    51f8:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    5208:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    5218:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5228:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5238:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5248:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5258:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5268:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5278:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5288:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5298:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    52a8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52b8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52c8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52d8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52e8:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    52f8:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    5308:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    5318:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5328:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5338:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5348:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5358:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5368:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5378:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5388:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5398:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    53a8:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    53b8:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    53c8:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    53d8:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    53e8:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    53f8:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    5408:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5418:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5428:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5438:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5448:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5458:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5468:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5478:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5488:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5498:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    54a8:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    54b8:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    54c8:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    54d8:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54e8:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54f8:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5508:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5518:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5528:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5540:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5550:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5560:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5570:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5580:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5590:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    55a0:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    55b0:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55c0:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55d0:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55e0:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55f0:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5600:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5610:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5620:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5630:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5640:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5650:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5660:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5670:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5680:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5690:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    56a0:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    56b0:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    56c0:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    56d0:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    56e0:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56f0:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5700:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5710:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5720:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5730:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5740:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5750:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5760:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5770:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5780:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5790:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    57a0:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    57b0:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    57c0:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    57d0:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    57e0:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    57f0:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5800:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5810:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5820:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    5830:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5840:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5850:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5860:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5870:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5880:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5890:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    58a0:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    58b0:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    58c0:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    58d0:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    58e0:	5c 5c 5c 5c 5c 5c 5c 5c                             \\\\\\\\

000058e8 <map_font>:
    58e8:	26 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     &..<=>?@ABCDEFGH
    58f8:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    5908:	59 5a 5b 5c 5d 5e 5f 60                             YZ[\]^_`

00005910 <map_atmosphere>:
    5910:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5920:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5930:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5940:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

0000594a <map_dialog>:
    594a:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    595a:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    596a:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    597a:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    598a:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    599a:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    59aa:	31 32                                               12

000059ac <map_canvas>:
    59ac:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    59bc:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    59cc:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    59e8:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    59f8:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    5a08:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5a24:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5a34:	32                                                  2

00005a35 <map_splash>:
    5a35:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    5a45:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    5a55:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    5a65:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    5a75:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

00005a82 <map_tile_none>:
    5a82:	01 01 00                                            ...

00005a85 <map_level_mega_tiles>:
    5a85:	61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61     aaaaaaaaaaaaaaaa
    5a95:	61 61 61 61 61 61 61 61 61 61 61 61 61 61 62 61     aaaaaaaaaaaaaaba
    5aa5:	61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61     aaaaaaaaaaaaaaaa
    5ab5:	61 61 04 04 04 04 04 04 04 04 04 04 04 04 04 04     aa..............
    5ac5:	04 04 04 04 04 04 04 04 04 04 04 61 61 61 61 61     ...........aaaaa
    5ad5:	61 61 61 61 61 61 61 61 61 61 63 63 63 63 63 64     aaaaaaaaaacccccd
    5ae5:	64 64 64 64 61 61 61 61 61 61 61 62 61 61 61 61     ddddaaaaaaabaaaa
    5af5:	61 61 61 63 63 63 63 63 64 64 64 64 64 04 04 04     aaacccccddddd...
    5b05:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5b15:	04 11 11 11 11 11 64 64 64 64 64 64 64 64 64 64     ......dddddddddd
    5b25:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5b35:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5b45:	02 02 02 64 64 04 11 11 64 64 64 64 64 64 64 64     ...dd...dddddddd
    5b55:	64 64 64 64 64 64 64 02 02 02 02 02 11 11 11 11     ddddddd.........
    5b65:	11 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     .ddddddddddddddd
    5b75:	02 02 64 64 64 11 04 64 64 64 64 64 64 64 64 64     ..ddd..ddddddddd
    5b85:	64 64 64 64 64 64 64 64 64 64 64 65 64 64 64 64     dddddddddddedddd
    5b95:	66 67 68 64 64 64 64 64 64 64 64 64 64 64 02 02     fghddddddddddd..
    5ba5:	02 02 64 04 04 04 04 02 04 04 04 04 64 64 64 64     ..d.........dddd
    5bb5:	64 64 64 02 64 64 02 02 04 02 02 04 04 04 04 04     ddd.dd..........
    5bc5:	04 04 04 04 04 64 64 64 64 64 64 64 64 64 64 02     .....dddddddddd.
    5bd5:	02 02 02 02 04 04 04 04 04 04 04 04 04 04 64 64     ..............dd
    5be5:	64 64 64 64 64 02 64 64 02 02 04 02 64 04 04 04     ddddd.dd....d...
    5bf5:	04 02 04 04 04 04 04 64 64 64 64 64 64 64 64 64     .......ddddddddd
    5c05:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 02     ddddddddddddddd.
    5c15:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5c25:	64 64 64 64 02 64 64 64 02 64 64 64 64 64 64 64     dddd.ddd.ddddddd
    5c35:	64 64 02 64 64 64 64 04 64 64 64 64 64 02 64 64     dd.dddd.ddddd.dd
    5c45:	64 64 64 64 64 64 64 02 02 02 02 02 11 11 11 11     ddddddd.........
    5c55:	11 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     .ddddddddddddddd
    5c65:	02 02 02 02 64 11 11 11 04 64 64 64 64 64 64 64     ....d....ddddddd
    5c75:	64 64 64 64 64 64 64 64 64 02 02 02 02 02 04 11     ddddddddd.......
    5c85:	11 11 04 64 64 64 64 64 64 64 64 64 64 64 64 64     ...ddddddddddddd
    5c95:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5ca5:	64 02 02 02 02 02 68 67 69 64 64 64 64 69 68 67     d.....hgiddddihg
    5cb5:	67 68 69 64 64 64 64 6a 64 64 02 02 02 02 02 64     ghiddddjdd.....d
    5cc5:	64 64 64 64 64 64 64 02 02 64 64 64 04 04 02 02     ddddddd..ddd....
    5cd5:	02 04 04 04 04 04 04 04 64 64 64 64 64 02 02 02     ........ddddd...
    5ce5:	64 64 04 04 04 02 64 04 04 04 04 02 04 04 04 04     dd....d.........
    5cf5:	04 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     .ddddddddddddddd
    5d05:	64 64 64 64 02 02 02 02 02 04 64 64 64 64 64 64     dddd......dddddd
    5d15:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 18 18     dddddddddddddd..
    5d25:	18 18 18 64 64 64 64 64 64 64 64 64 64 64 64 64     ...ddddddddddddd
    5d35:	64 64 02 64 64 64 02 04 02 02 02 04 64 64 64 64     dd.ddd......dddd
    5d45:	64 64 64 64 64 64 64 64 64 64 64 02 64 64 64 64     ddddddddddd.dddd
    5d55:	04 02 02 02 02 64 64 64 64 02 64 64 64 02 04 64     .....dddd.ddd..d
    5d65:	64 02 04 04 64 02 04 04 04 02 04 04 04 04 02 02     d...d...........
    5d75:	02 02 02 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5d85:	04 04 04 04 04 04 04 02 02 02 02 04 04 04 04 04     ................
    5d95:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5da5:	18 18 18 18 18 04 04 04 04 04 04 04 04 04 04 04     ................
    5db5:	04 04 04 04 04 04 04 04 04 04 02 02 02 04 04 04     ................
    5dc5:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5dd5:	04 04 04 64 64 64 64 04 02 64 64 64 04 04 02 64     ...dddd..ddd...d
    5de5:	64 04 04 04 02 64 04 04 04 04 02 6b 6b 6b 6b 6b     d....d.....kkkkk
    5df5:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    5e05:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    5e15:	6b 6b 6b 6c 6c 6c 6c 6c 6d 6d 6d 6d 6d 6d 6d 6d     kkklllllmmmmmmmm
    5e25:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e35:	6d 6d 6d 6d 6d 6d 6d 6e 6f 70 6d 71 69 69 69 72     mmmmmmmnopmqiiir
    5e45:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e55:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e65:	6d 6d 6d 05 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmm.mmmmmmmmmmmm
    5e75:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 05     mmmmmmmmmmmmmmm.
    5e85:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e95:	06 06 06 06 06 6d 6d 6d 6d 6d 6d 6d 6d 6d 05 6d     .....mmmmmmmmm.m
    5ea5:	6d 6d 05 05 6d 6d 05 05 05 6d 05 05 05 05 05 05     mm..mm...m......
    5eb5:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    5ec5:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    5ed5:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5ee5:	05 05 05 05 05 6d 6d 6d 6d 6d 05 6d 6d 6d 6d 05     .....mmmmm.mmmm.
    5ef5:	05 6d 6d 6d 05 05 05 6d 6d 05 05 05 05 6d 6d 6d     .mmm...mm....mmm
    5f05:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5f15:	6d 6d 06 06 06 06 06 6d 6d 6d 6d 6d 6d 6d 6d 6d     mm.....mmmmmmmmm
    5f25:	6d 6d 6d 6d 6d 6d 06 06 6d 6d 6d 05 05 13 13 13     mmmmmm..mmm.....
    5f35:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5f45:	6d 6d 6d 6d 13 13 13 13 13 6d 6d 6d 6d 6d 6d 6d     mmmm.....mmmmmmm
    5f55:	6d 6d 6d 6d 6d 6d 6d 6d 06 06 6d 6d 6d 05 05 06     mmmmmmmm..mmm...
    5f65:	06 06 06 06 06 06 06 6d 6d 6d 6d 6d 6d 6d 6d 6d     .......mmmmmmmmm
    5f75:	6d 6d 6d 6d 6d 6d 06 06 06 06 06 6d 6d 6d 6d 06     mmmmmm.....mmmm.
    5f85:	6d 6d 6d 06 05 6d 6d 06 05 05 06 06 05 05 05 05     mmm..mm.........
    5f95:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fa5:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fb5:	05 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fc5:	05 05 05 05 05 05 6d 6d 6d 6d 6d 06 6d 6d 6d 6d     ......mmmmm.mmmm
    5fd5:	05 06 6d 6d 6d 05 05 06 6d 6d 05 05 05 13 13 6d     ..mmm...mm.....m
    5fe5:	6d 6d 6d 06 6d 6d 6d 06 05 6d 6d 06 05 05 6d 06     mmm.mmm..mm...m.
    5ff5:	05 05 05 06 05 05 05 05 6d 6d 6d 6d 6d 06 6d 6d     ........mmmmm.mm
    6005:	6d 6d 05 06 6d 6d 6d 05 05 06 6d 6d 05 05 05 05     mm..mmm...mm....
    6015:	05 6d 6d 6d 6d 06 6d 6d 6d 06 05 6d 6d 06 05 05     .mmmm.mmm..mm...
    6025:	6d 06 05 05 05 05 05 05 05 05 6d 6d 6d 6d 6d 06     m.........mmmmm.
    6035:	6d 6d 6d 6d 05 06 6d 6d 6d 05 05 06 6d 6d 05 05     mmmm..mmm...mm..
    6045:	05 06 06 73 74 75 75 74 75 74 75 75 74 75 74 75     ...stuututuututu
    6055:	75 74 75 74 75 75 74 75 74 75 75 74 75 74 75 75     ututuututuututuu
    6065:	74 75 74 75 75 74 75 74 75 75 74 75 74 75 75 74     tutuututuututuut
    6075:	75 74 75 75 74 75 74 75 75 76 75 74 75 75 74 75     utuututuuvutuutu
    6085:	74 75 75 74 75 74 75 75 74 75 74 75 75 74 77 74     tuututuututuutwt
    6095:	75 75 74 79 79 79 79 79 79 79 79 79 79 79 79 79     uutyyyyyyyyyyyyy
    60a5:	79 79 79 79 79 79 79 75 74 75 75 74 7a 7b 7a 7a     yyyyyyyutuutz{zz
    60b5:	7b 7c 7d 7c 7c 7d 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d     {|}||}z{zz{|}||}
    60c5:	75 74 75 75 78 79 79 79 79 79 79 79 79 79 79 79     utuuxyyyyyyyyyyy
    60d5:	79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79     yyyyyyyyyyyyyyyy
    60e5:	79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79     yyyyyyyyyyyyyyyy
    60f5:	79 79 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d 7a 7b 7a 7a     yyz{zz{|}||}z{zz
    6105:	7b 7c 7d 7c 7c 7d 7a 7b 7a 7a 7b 0d 0e 0e 0d 0e     {|}||}z{zz{.....
    6115:	79 79 12 79 79 79 79 79 79 79 79 79 79 79 79 79     yy.yyyyyyyyyyyyy
    6125:	79 79 79 79 7c 7d 7c 7c 7d 7a 7b 7a 7a 7b 7c 7d     yyyy|}||}z{zz{|}
    6135:	7c 7c 7d 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d 79 79 79     ||}z{zz{|}||}yyy
    6145:	79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79     yyyyyyyyyyyyyyyy
    6155:	79 07 07 07 07 07 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d     y.....z{zz{|}||}
    6165:	7a 7b 7a 7a 7b 7c 7d 7c 7c 7d 07 07 07 07 07 0d     z{zz{|}||}......
    6175:	0e 0e 0d 0e 79 79 79 79 79 79 79 79 79 79 79 79     ....yyyyyyyyyyyy
    6185:	79 79 79 07 07 07 07 07 79 79 79 79 79 79 07 07     yyy.....yyyyyy..
    6195:	07 07 79 05 05 05 05 07 05 05 05 05 05 05 05 05     ..y.............
    61a5:	05 79 79 79 79 79 07 07 07 07 79 05 05 05 05 79     .yyyyy....y....y
    61b5:	05 05 05 05 07 05 05 05 05 05 79 79 79 79 79 79     ..........yyyyyy
    61c5:	79 79 79 79 79 79 79 79 79 07 79 79 79 79 05 14     yyyyyyyyy.yyyy..
    61d5:	14 14 14 79 79 79 79 79 79 79 79 79 79 79 79 79     ...yyyyyyyyyyyyy
    61e5:	79 79 79 79 79 79 07 14 14 14 14 05 0d 0e 0e 0d     yyyyyy..........
    61f5:	0e 79 79 79 79 79 79 79 79 79 79 07 79 79 79 79     .yyyyyyyyyy.yyyy
    6205:	05 14 14 14 14 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     .....~~~~~~~~~~~
    6215:	0f 82 7e 0f 86 86 86 86 86 86 86 86 86 86 7e 7e     ..~...........~~
    6225:	7e 7e 7e 7e 7e 7e 7f 80 82 7e 0f 83 84 86 86 86     ~~~~~~...~......
    6235:	87 88 86 86 86 8a 8b 7e 7e 7e 7e 7e 81 7e 7e 7e     .......~~~~~.~~~
    6245:	7e 85 82 7e 0f 82 89 86 86 86 86 85 86 86 86 86     ~..~............
    6255:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 82 7e 0f 82 7e 86     ~~~~~~~~~~.~..~.
    6265:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    6275:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    6285:	86 86 86 86 86 87 88 86 86 86 8a 8b 86 86 86 87     ................
    6295:	88 86 86 86 8a 8b 86 86 86 87 88 89 86 86 86 86     ................
    62a5:	85 86 86 86 86 89 86 86 86 86 85 86 86 86 86 89     ................
    62b5:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    62c5:	86 86 8c 86 86 86 8c 61 86 86 8c 61 61 86 86 86     .......a...aa...
    62d5:	8a 8b 86 86 86 87 88 86 86 86 8a 8b 86 86 86 87     ................
    62e5:	88 86 86 86 8a 8b 85 86 86 86 86 89 86 86 86 86     ................
    62f5:	85 86 86 86 86 89 86 86 86 86 85 86 86 86 86 86     ................
    6305:	86 8d 8d 8d 86 86 8d 8d 8d 86 86 8d 8d 8d 86 86     ................
    6315:	8d 8d 8d 86 86 8d 8d 8d 86 86 86 87 88 86 8e 86     ................
    6325:	8a 8b 8e 8f 86 86 90 91 91 91 91 91 91 91 91 91     ................
    6335:	91 89 86 86 86 86 85 86 86 86 86 86 86 86 86 86     ................
    6345:	86 86 86 86 86 86 86 86 86 86 86 8d 8d 8d 8d 86     ................
    6355:	8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d     ................
    6365:	8d 8d 8d 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    6375:	86 86 86 86 91 91 91 86 86 91 91 91 86 09 09 09     ................
    6385:	09 86 8e 86 8a 8b 8e 8f 86 86 90 91 91 91 91 91     ................
    6395:	91 91 91 91 91 09 86 86 86 86 85 86 86 86 86 86     ................
    63a5:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    63b5:	86 86 86 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d     ................
    63c5:	8d 8d 86 8d 8d 8d 8d 86 86 8d 8d 8d 86 86 8d 8d     ................
    63d5:	8d 86 86 8d 8d 8d 86 86 61 61 61 09 09 09 09 09     ........aaa.....
    63e5:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    63f5:	91 91 91 91 09 09 09 09 09 86 86 86 86 86 86 8d     ................
    6405:	8d 86 86 86 8d 8d 91 86 86 61 61 91 86 09 09 09     .........aa.....
    6415:	09 09 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d 8d     ................
    6425:	8d 86 61 61 61 61 09 09 09 09 09 86 86 91 91 91     ..aaaa..........
    6435:	86 86 91 91 91 86 86 91 91 91 86 86 91 91 91 09     ................
    6445:	09 09 09 09 86 09 09 09 09 86 86 8d 8d 8d 86 86     ................
    6455:	8d 8d 8d 86 86 61 61 61 09 09 09 09 09 09 91 91     .....aaa........
    6465:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6475:	91 09 09 09 09 09 86 09 09 09 09 86 8d 8d 86 86     ................
    6485:	86 8d 8d 91 86 86 61 61 91 86 09 09 09 09 09 09     ......aa........
    6495:	8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 61     ...............a
    64a5:	61 61 61 09 09 09 09 09 86 86 91 91 91 86 86 91     aaa.............
    64b5:	91 91 86 86 91 91 91 86 09 91 91 91 09 08 15 15     ................
    64c5:	15 86 86 8d 8d 8d 86 86 8d 8d 8d 86 86 8d 8d 8d     ................
    64d5:	86 86 09 61 61 15 15 08 09 09 91 91 91 91 91 91     ...aa...........
    64e5:	91 91 91 91 91 91 91 91 91 91 91 91 09 91 09 09     ................
    64f5:	09 08 15 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    6505:	86 86 86 86 86 86 09 15 15 15 15 08 91 91 91 91     ................
    6515:	91 91 91 91 91 09 91 91 91 09 08 91 91 09 08 08     ................
    6525:	09 09 08 08 08 86 8d 8d 8d 8d 86 8d 8d 8d 8d 15     ................
    6535:	15 15 15 15 08 08 08 08 08 08 08 08 08 08 86 8d     ................
    6545:	8d 8d 8d 86 09 09 8d 8d 15 08 08 15 15 08 08 08     ................
    6555:	08 08 08 08 08 08 08 86 86 91 91 91 86 86 09 09     ................
    6565:	91 15 15 08 08 15 08 08 08 08 08 08 08 08 08 08     ................
    6575:	86 86 8d 8d 8d 86 86 09 09 09 15 15 08 08 08 08     ................
    6585:	08 08 08 08 08 08 08 08 08 91 91 91 91 91 91 91     ................
    6595:	91 91 91 09 91 91 91 91 08 09 91 91 91 08 08 09     ................
    65a5:	09 09 92 92 92 92 92 92 92 92 92 92 92 92 92 92     ................
    65b5:	92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92     ................
    65c5:	92 92 92 92 92 92 92 92 92 92 93 93 93 93 93 94     ................
    65d5:	94 94 94 94 92 92 92 92 92 92 92 92 92 92 92 92     ................
    65e5:	92 92 92 93 93 93 93 93 94 94 95 94 94 94 94 94     ................
    65f5:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6605:	94 94 94 94 94 94 94 96 97 98 94 96 97 97 97 98     ................
    6615:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6625:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6635:	94 94 94 94 94 95 94 94 94 94 94 94 94 94 94 95     ................
    6645:	94 94 94 96 97 98 94 96 97 97 97 98 94 94 94 94     ................
    6655:	94 94 99 9a 9b 94 96 9c 10 9d 98 94 94 94 94 94     ................
    6665:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6675:	94 95 94 94 94 99 9a 9b 94 96 9c 10 9d 98 94 94     ................
    6685:	94 94 94 94 94 94 94 94 0a 0a 0a 0a 0a 94 94 94     ................
    6695:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    66a5:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    66b5:	94 94 94 0a 0a 94 94 94 94 94 94 94 94 94 94 94     ................
    66c5:	94 94 94 94 94 94 94 94 94 0a 0a 0a 9e 0a 94 94     ................
    66d5:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    66e5:	94 94 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 94 94 94 94     ................
    66f5:	94 94 94 94 94 94 94 94 94 94 94 0a 0a 0a 0a 0a     ................
    6705:	94 94 94 0a 0a 94 94 0a 0b 0b 94 0a 0b 0b 0b 0a     ................
    6715:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a 0a 0a 0a 0b 0b     ................
    6725:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6735:	0b 0b 9e 0a 0a 94 94 0b 0b 0b 0a 94 0b 0b 0b 0b     ................
    6745:	0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 94 94 94 0a 16     ................
    6755:	94 94 94 94 94 94 94 94 94 94 0a 94 94 94 94 0b     ................
    6765:	0a 0a 0a 0a 16 16 16 16 0a 94 94 94 94 94 94 94     ................
    6775:	94 94 94 94 94 94 94 94 0a 0a 0a 0a 0a 94 94 94     ................
    6785:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6795:	0a 0a 0a 0a 0a 0b 94 94 94 94 94 94 94 94 94 94     ................
    67a5:	94 94 94 94 94 94 94 94 94 94 17 17 17 17 17 94     ................
    67b5:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 0a 0a     ................
    67c5:	94 94 94 0b 0b 17 17 17 94 94 94 94 94 94 94 94     ................
    67d5:	94 94 94 94 94 94 94 94 94 0a 0a 94 17 17 0b 0b     ................
    67e5:	17 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    67f5:	94 94 94 94 0a 17 17 17 17 0b 94 94 94 94 94 94     ................
    6805:	94 94 94 94 94 94 94 94 94 0a 94 94 94 94 0b 17     ................
    6815:	17 17 17 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6825:	94 94 94 0a 94 94 94 17 0b 0a 0a 0a 0a 0a 0a 9e     ................
    6835:	0a 0a 16 16 16 0a 94 94 94 94 94 94 94 94 94 94     ................
    6845:	0a 0a 0a 0a 0a 94 94 94 94 94 94 94 94 94 94 94     ................
    6855:	94 94 94 94 0a 94 94 94 94 0b 0a 0a 0a 0a 00 21     ...............!
	...
    6871:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6881:	00 00 00 00 22 00 21 00 00 00 00 00 00 00 00 00     ....".!.........
    6891:	00 00 00 21 00 00 00 00 00 00 00 22 00 00 00 21     ...!......."...!
	...
    68a9:	00 00 00 22 00 22 00 00 00 00 00 00 00 00 00 00     ..."."..........
    68b9:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 21     !..............!
    68c9:	19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21 00     ..............!.
    68d9:	00 00 00 00 00 00 00 19 19 19 19 19 19 19 19 19     ................
    68e9:	19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00 00 21     ...............!
    68f9:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
    6909:	21 00 00 00 00 00 00 00 00 19 19 19 19 19 19 19     !...............
    6919:	19 19 19 1a 1a 1a 1a 1a 19 19 00 00 00 19 19 00     ................
	...
    6931:	00 22 00 00 00 21 00 00 00 00 00 00 1a 1a 00 00     ."...!..........
    6941:	00 22 00 22 00 00 00 00 00 00 00 00 00 00 21 00     ."."..........!.
    6951:	00 00 1a 1a 1a 1a 1a 00 00 00 00 1b 19 19 00 00     ................
    6961:	00 19 19 22 00 00 19 19 00 00 00 1a 1a 1a 1a 1a     ..."............
    6971:	1b 1b 1b 22 00 00 00 00 1b 1b 00 00 1b 1b 1b 00     ..."............
    6981:	21 1b 1b 1b 00 00 1b 1b 1b 00 00 00 1b 1b 1b 1b     !...............
    6991:	1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    69a1:	1b 1b 1b 1b 1b 1b 00 00 00 00 00 00 00 00 22 1a     ..............".
    69b1:	1a 00 21 00 00 00 00 00 00 00 00 00 00 00 22 00     ..!...........".
    69c1:	22 00 00 00 1b 1a 1a 1a 1a 1a 00 21 00 00 00 00     "..........!....
	...
    69d9:	00 1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00     ................
    69e9:	19 19 00 00 00 19 19 00 22 00 00 21 00 00 00 00     ........"..!....
    69f9:	00 00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00     ..........!.....
    6a09:	19 19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a     ............"...
    6a19:	1a 1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00     .............!..
    6a29:	00 00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19     ................
    6a39:	19 19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a     ................
    6a49:	1a 1a 1a 1a 19 19 19 19 19 19 19 19 19 19           ..............

00006a57 <map_level_space_final>:
    6a57:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6a67:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6a77:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 92 93 94 93     ................
    6a87:	94 93 94 93 95 90 91 90 91 90 91 90 91 90 91 90     ................
    6a97:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6aa7:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ab7:	91 90 91 90 91 96 97 98 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ac7:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ad7:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ae7:	8e 8f 8e 8f 8e 8f 8e 8f 8e 99 9a 90 91 90 91 90     ................
    6af7:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b07:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b17:	91 90 91 90 91 90 91 90 91 90 91 9b 9c 9d 8e 8f     ................
    6b27:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b37:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b47:	8e 8f 8e 8f 8e 8f 8e 8f 9e 9f a0 9f a0 9f a0 9f     ................
    6b57:	a1                                                  .

00006b58 <map_level_space>:
    6b58:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6b68:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b78:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b88:	8e 8f 8e 8f 8e 90 91 90 91 90 91 90 91 90 91 90     ................
    6b98:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ba8:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6bb8:	91 90 91 90 91 90 91 90 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bc8:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bd8:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6be8:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 90 91 90 91 90     ................
    6bf8:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6c08:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6c18:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 8e 8f     ................
    6c28:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c38:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c48:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c58:	8e                                                  .

00006c59 <map_level_desert>:
    6c59:	33 05 72 72 72 72 72 72 72 72 72 72 72 72 72 72     3.rrrrrrrrrrrrrr
    6c69:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6c79:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6c89:	72 72 72 72 72 73 74 73 73 73 74 73 73 73 74 73     rrrrrstssstsssts
    6c99:	73 73 74 73 73 73 73 73 73 73 74 73 73 73 74 73     sstssssssstsssts
    6ca9:	73 73 74 73 73 73 74 73 73 73 73 73 73 73 73 73     sstssstsssssssss
    6cb9:	73 73 73 73 73 73 73 73 75 76 75 77 75 76 75 78     ssssssssuvuwuvux
    6cc9:	75 79 75 77 75 79 75 78 75 7a 75 77 75 79 75 78     uyuwuyuxuzuwuyux
    6cd9:	75 79 75 77 75 79 75 78 75 79 75 77 75 77 75 78     uyuwuyuxuyuwuwux
    6ce9:	75 7a 75 77 75 77 75 78 75 78 75 75 75 75 76 75     uzuwuwuxuxuuuuvu
    6cf9:	7b 75 75 75 75 75 76 7c 7d 75 75 75 75 75 76 75     {uuuuuv|}uuuuuvu
    6d09:	75 75 75 75 75 75 76 75 75 75 75 75 75 75 76 75     uuuuuuvuuuuuuuvu
    6d19:	79 75 75 75 75 75 76 75 76 75 75 75 75 75 7e 7e     yuuuuuvuvuuuuu~~
    6d29:	7e 7e 7f 7e 7f 7e 80 81 81 82 83 84 7e 7e 85 86     ~~.~.~......~~..
    6d39:	87 88 89 8a 8b 7e 7f 7e 7f 7e 8c 7e 7e 7e 80 81     .....~.~.~.~~~..
    6d49:	81 82 8d 7e 7e 7e 7e 8a 8b 7e 7e 7e 7e 7e 7e 7e     ...~~~~..~~~~~~~
    6d59:	7e                                                  ~

00006d5a <map_level_city>:
    6d5a:	33 05 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d     3.MNOMPMNOMPMNOM
    6d6a:	50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50     PMNOMPMNOMPMNOMP
    6d7a:	4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d     MNOMPMNOMPMNOMPM
    6d8a:	4e 4f 4d 50 4d 51 52 53 51 51 51 52 53 51 51 51     NOMPMQRSQQQRSQQQ
    6d9a:	52 53 51 51 51 52 53 51 51 51 52 53 51 51 51 52     RSQQQRSQQQRSQQQR
    6daa:	53 51 51 51 52 53 51 51 51 52 53 51 51 51 52 53     SQQQRSQQQRSQQQRS
    6dba:	51 51 51 52 53 51 51 51 54 55 56 51 51 54 55 56     QQQRSQQQTUVQQTUV
    6dca:	51 51 54 55 56 51 51 54 55 56 51 51 54 55 56 51     QQTUVQQTUVQQTUVQ
    6dda:	51 54 55 56 51 51 54 55 56 51 51 54 55 56 51 51     QTUVQQTUVQQTUVQQ
    6dea:	54 55 56 51 51 54 55 56 51 51 54 57 58 59 5a 5b     TUVQQTUVQQTWXYZ[
    6dfa:	57 5c 5d 5a 5b 57 58 59 5a 5b 57 5c 5d 5a 5b 57     W\]Z[WXYZ[W\]Z[W
    6e0a:	58 59 5e 5b 57 58 59 5a 5b 57 58 59 5a 5b 57 58     XY^[WXYZ[WXYZ[WX
    6e1a:	59 5a 5b 57 5c 5d 5a 5b 57 58 59 5a 5b 57 5f 60     YZ[W\]Z[WXYZ[W_`
    6e2a:	61 62 63 64 65 66 67 68 69 6a 6b 62 63 64 65 66     abcdefghijkbcdef
    6e3a:	67 63 5f 6c 6d 6e 6f 70 71 61 62 63 5f 6c 6d 6e     gc_lmnopqabc_lmn
    6e4a:	6f 70 71 61 62 63 64 65 66 67 63 5f 60 61 62 63     opqabcdefgc_`abc
    6e5a:	5f                                                  _

00006e5b <map_level_forest>:
    6e5b:	33 05 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     3.;<=;<=;<=;<=;<
    6e6b:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    6e7b:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    6e8b:	3c 3d 3b 3c 3d 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f     <=;<=>?@>?@>?@>?
    6e9b:	40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40     @>?@>?@>?@>?@>?@
    6eab:	3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e     >?@>?@>?@>?@>?@>
    6ebb:	3f 40 3e 3f 40 3e 3f 40 41 42 41 41 42 41 41 42     ?@>?@>?@ABAABAAB
    6ecb:	41 41 42 41 41 42 41 41 42 43 41 42 41 41 42 41     AABAABAABCABAABA
    6edb:	41 42 41 41 42 41 41 42 41 41 42 43 41 42 43 41     ABAABAABAABCABCA
    6eeb:	42 41 41 42 41 41 42 41 41 42 41 41 44 41 41 44     BAABAABAABAADAAD
    6efb:	41 41 44 43 41 44 43 41 44 41 43 44 41 41 44 41     AADCADCADACDAADA
    6f0b:	41 44 41 41 44 41 41 44 41 41 44 41 41 44 41 41     ADAADAADAADAADAA
    6f1b:	44 41 41 44 41 41 44 43 41 44 41 41 44 41 45 46     DAADAADCADAADAEF
    6f2b:	45 45 46 45 47 46 45 47 46 45 47 46 45 45 46 48     EEFEGFEGFEGFEEFH
    6f3b:	49 46 48 49 46 48 49 46 4a 4b 46 4c 4b 46 47 45     IFHIFHIFJKFLKFGE
    6f4b:	46 4a 4b 46 4a 4b 46 4a 4b 46 45 45 46 45 45 46     FJKFJKFJKFEEFEEF
    6f5b:	45                                                  E

00006f5c <map_level_fire>:
    6f5c:	33 05 23 23 23 23 23 23 23 23 23 23 23 23 23 23     3.##############
    6f6c:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6f7c:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6f8c:	23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24     #####$$$$$$$$$$$
    6f9c:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6fac:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6fbc:	24 24 24 24 24 24 24 24 25 26 25 25 25 25 26 25     $$$$$$$$%&%%%%&%
    6fcc:	25 25 25 26 25 25 25 25 25 25 25 26 25 25 25 25     %%%&%%%%%%%&%%%%
    6fdc:	25 25 25 25 25 27 28 26 25 25 25 25 26 25 25 25     %%%%%'(&%%%%&%%%
    6fec:	25 25 25 25 25 25 25 26 25 25 25 25 25 25 25 25     %%%%%%%&%%%%%%%%
    6ffc:	25 25 25 25 25 25 25 25 25 25 25 25 29 25 25 25     %%%%%%%%%%%%)%%%
    700c:	25 25 25 25 25 25 25 2a 2b 2c 2d 25 25 25 25 25     %%%%%%%*+,-%%%%%
    701c:	25 27 28 25 25 27 28 25 25 25 25 25 25 25 2e 2e     %'(%%'(%%%%%%%..
    702c:	2f 30 2f 30 2f 30 2f 30 31 2e 32 2e 2e 32 2e 2e     /0/0/0/01.2..2..
    703c:	2e 32 2e 2e 2e 2f 30 2f 30 33 34 34 34 35 36 30     .2.../0/03444560
    704c:	2f 30 31 37 2b 2c 38 39 2b 2c 3a 2e 2e 2e 2e 2e     /017+,89+,:.....
    705c:	2e                                                  .

0000705d <map_level_ice>:
    705d:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    706d:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    707d:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    708d:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    709d:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    70ad:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    70bd:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    70cd:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    70dd:	06 06 06 06 06 06 06 06 06 06 06 07 08 09 06 06     ................
    70ed:	06 06 06 06 06 06 06 06 06 06 06 06 06 0a 06 06     ................
    70fd:	06 06 06 0b 0c 0d 0e 06 06 06 0a 06 06 06 06 06     ................
    710d:	06 06 06 06 06 0f 06 10 06 10 06 11 12 13 06 06     ................
    711d:	06 14 06 06 0a 06 06 06 06 06 06 06 06 06 15 15     ................
    712d:	16 15 15 15 15 17 02 02 02 02 18 15 15 16 19 1a     ................
    713d:	1b 1a 1b 1a 1c 1d 1e 1e 1f 20 21 20 21 20 22 15     ......... ! ! ".
    714d:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    715d:	15                                                  .

0000715e <__ctors_end>:
    715e:	11 24       	eor	r1, r1
    7160:	1f be       	out	0x3f, r1	; 63
    7162:	cf ef       	ldi	r28, 0xFF	; 255
    7164:	d0 e1       	ldi	r29, 0x10	; 16
    7166:	de bf       	out	0x3e, r29	; 62
    7168:	cd bf       	out	0x3d, r28	; 61

0000716a <__do_copy_data>:
    716a:	15 e0       	ldi	r17, 0x05	; 5
    716c:	a0 e0       	ldi	r26, 0x00	; 0
    716e:	b5 e0       	ldi	r27, 0x05	; 5
    7170:	ec e5       	ldi	r30, 0x5C	; 92
    7172:	fb ee       	ldi	r31, 0xEB	; 235
    7174:	02 c0       	rjmp	.+4      	; 0x717a <__do_copy_data+0x10>
    7176:	05 90       	lpm	r0, Z+
    7178:	0d 92       	st	X+, r0
    717a:	a0 31       	cpi	r26, 0x10	; 16
    717c:	b1 07       	cpc	r27, r17
    717e:	d9 f7       	brne	.-10     	; 0x7176 <__do_copy_data+0xc>

00007180 <__do_clear_bss>:
    7180:	10 e1       	ldi	r17, 0x10	; 16
    7182:	a0 e1       	ldi	r26, 0x10	; 16
    7184:	b5 e0       	ldi	r27, 0x05	; 5
    7186:	01 c0       	rjmp	.+2      	; 0x718a <.do_clear_bss_start>

00007188 <.do_clear_bss_loop>:
    7188:	1d 92       	st	X+, r1

0000718a <.do_clear_bss_start>:
    718a:	a3 36       	cpi	r26, 0x63	; 99
    718c:	b1 07       	cpc	r27, r17
    718e:	e1 f7       	brne	.-8      	; 0x7188 <.do_clear_bss_loop>

00007190 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7190:	0e 94 5d 3e 	call	0x7cba	; 0x7cba <wdt_randomize>
#endif

    MCUSR = 0;
    7194:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7196:	88 e1       	ldi	r24, 0x18	; 24
    7198:	0f b6       	in	r0, 0x3f	; 63
    719a:	f8 94       	cli
    719c:	80 93 60 00 	sts	0x0060, r24
    71a0:	10 92 60 00 	sts	0x0060, r1
    71a4:	0f be       	out	0x3f, r0	; 63

000071a6 <Initialize>:


void Initialize(void){
	int i;

	cli();
    71a6:	f8 94       	cli
    71a8:	86 e9       	ldi	r24, 0x96	; 150
    71aa:	90 e0       	ldi	r25, 0x00	; 0

	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    71ac:	fc 01       	movw	r30, r24
    71ae:	25 91       	lpm	r18, Z+
    71b0:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    71b2:	f9 01       	movw	r30, r18
    71b4:	ff 27       	eor	r31, r31
		*ptr=val>>8;
    71b6:	30 83       	st	Z, r19
    71b8:	02 96       	adiw	r24, 0x02	; 2
	cli();

	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    71ba:	20 e0       	ldi	r18, 0x00	; 0
    71bc:	88 3c       	cpi	r24, 0xC8	; 200
    71be:	92 07       	cpc	r25, r18
    71c0:	a9 f7       	brne	.-22     	; 0x71ac <Initialize+0x6>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;
	}

	if(!isEepromFormatted()) FormatEeprom();
    71c2:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <isEepromFormatted>
    71c6:	81 11       	cpse	r24, r1
    71c8:	02 c0       	rjmp	.+4      	; 0x71ce <Initialize+0x28>
    71ca:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <FormatEeprom>
		mix_bank=0;
	#endif

	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    71ce:	81 e0       	ldi	r24, 0x01	; 1
    71d0:	80 93 e6 0c 	sts	0x0CE6, r24
		tr4_barrel_hi=1;		
    71d4:	80 93 e7 0c 	sts	0x0CE7, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    71d8:	80 93 e5 0c 	sts	0x0CE5, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    71dc:	10 92 d2 0c 	sts	0x0CD2, r1
    71e0:	10 92 d8 0c 	sts	0x0CD8, r1
    71e4:	10 92 de 0c 	sts	0x0CDE, r1
    71e8:	10 92 e4 0c 	sts	0x0CE4, r1
    71ec:	10 92 ea 0c 	sts	0x0CEA, r1
	}

	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    71f0:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_flags=0;
    71f4:	10 92 ba 0c 	sts	0x0CBA, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    71f8:	92 e1       	ldi	r25, 0x12	; 18
    71fa:	90 93 b9 0c 	sts	0x0CB9, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    71fe:	90 ee       	ldi	r25, 0xE0	; 224
    7200:	90 93 c0 0c 	sts	0x0CC0, r25
	first_render_line=FIRST_RENDER_LINE;
    7204:	94 e1       	ldi	r25, 0x14	; 20
    7206:	90 93 bf 0c 	sts	0x0CBF, r25

	joypad1_status_hi=0;
    720a:	10 92 c4 0c 	sts	0x0CC4, r1
    720e:	10 92 c3 0c 	sts	0x0CC3, r1
	joypad2_status_hi=0;
    7212:	10 92 c8 0c 	sts	0x0CC8, r1
    7216:	10 92 c7 0c 	sts	0x0CC7, r1
	sound_enabled=1;
    721a:	80 93 d1 0c 	sts	0x0CD1, r24

	InitializeVideoMode();
    721e:	0e 94 d2 4b 	call	0x97a4	; 0x97a4 <InitializeVideoMode>

	sei();
    7222:	78 94       	sei

	DisplayLogo();
    7224:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <DisplayLogo>
    7228:	0e 94 47 73 	call	0xe68e	; 0xe68e <main>
    722c:	0c 94 ac 75 	jmp	0xeb58	; 0xeb58 <_exit>

00007230 <__bad_interrupt>:
    7230:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007234 <sub_video_mode3>:

sub_video_mode3:

	; Wait cycles to align with next hsync

	WAIT  r16,     395
    7234:	03 e8       	ldi	r16, 0x83	; 131
    7236:	0a 95       	dec	r16
    7238:	f1 f7       	brne	.-4      	; 0x7236 <sub_video_mode3+0x2>
    723a:	00 c0       	rjmp	.+0      	; 0x723c <sub_video_mode3+0x8>

	; Refresh ramtiles indexes in VRAM. This has to be done because the
	; main program may have altered the VRAM after vsync and the rendering
	; interrupt.

	lds   r16,     user_ram_tiles_c
    723c:	00 91 a5 0c 	lds	r16, 0x0CA5

	ldi   ZL,      lo8(ram_tiles_restore)
    7240:	e0 e5       	ldi	r30, 0x50	; 80
	ldi   ZH,      hi8(ram_tiles_restore)
    7242:	fc e0       	ldi	r31, 0x0C	; 12
	ldi   r18,     3
    7244:	23 e0       	ldi	r18, 0x03	; 3
	mul   r16,     r18
    7246:	02 9f       	mul	r16, r18
	add   ZL,      r0
    7248:	e0 0d       	add	r30, r0
	adc   ZH,      r1      ; Skip user RAM tiles
    724a:	f1 1d       	adc	r31, r1

	lds   r18,     free_tile_index
    724c:	20 91 a4 0c 	lds	r18, 0x0CA4
	ldi   r19,     MAX_RAMTILES ; Maximum possible ramtiles
    7250:	3c e3       	ldi	r19, 0x3C	; 60
	sub   r19,     r18     ; Subtract free tiles
    7252:	32 1b       	sub	r19, r18
	add   r19,     r16     ; Add user tiles
    7254:	30 0f       	add	r19, r16

	cp    r18,     r16
    7256:	20 17       	cp	r18, r16
	breq  no_ramtiles
    7258:	51 f0       	breq	.+20     	; 0x726e <no_ramtiles>
	nop
    725a:	00 00       	nop
	...

0000725e <upd_loop>:
	nop
upd_loop:
	ld    XL,      Z+      ; Load vram offset of ramtile
    725e:	a1 91       	ld	r26, Z+
	ld    XH,      Z+
    7260:	b1 91       	ld	r27, Z+

	ld    r17,     X       ; Get latest VRAM tile that may have been modified my
    7262:	1c 91       	ld	r17, X
	st    Z+,      r17     ; The main program and store it in the restore buffer
    7264:	11 93       	st	Z+, r17
	st    X,       r16     ; Write the ramtile index back to vram
    7266:	0c 93       	st	X, r16

	inc   r16
    7268:	03 95       	inc	r16
	cp    r16,     r18
    726a:	02 17       	cp	r16, r18
	brlo  upd_loop         ; Loop is 14 cycles
    726c:	c0 f3       	brcs	.-16     	; 0x725e <upd_loop>

0000726e <no_ramtiles>:

no_ramtiles:
	; Wait for remaining maximum possible ramtiles
1:
	ldi   r17,     3
    726e:	13 e0       	ldi	r17, 0x03	; 3
	dec   r17
    7270:	1a 95       	dec	r17
	brne  .-4
    7272:	f1 f7       	brne	.-4      	; 0x7270 <no_ramtiles+0x2>
	rjmp  .
    7274:	00 c0       	rjmp	.+0      	; 0x7276 <no_ramtiles+0x8>
	dec   r19
    7276:	3a 95       	dec	r19
	brne  1b
    7278:	d1 f7       	brne	.-12     	; 0x726e <no_ramtiles>
	WAIT  r17,     18 + (MAX_RAMTILES * 14) - 2

#endif


	ldi   YL,      lo8(vram)
    727a:	c0 e0       	ldi	r28, 0x00	; 0
	ldi   YH,      hi8(vram)
    727c:	d1 e0       	ldi	r29, 0x01	; 1

	; Prepare scrolling related elements

	; Add X scroll (coarse)

	lds   r18,     screen_scrollX ; ScreenScrollX
    727e:	20 91 b5 0c 	lds	r18, 0x0CB5
	mov   r25,     r18
    7282:	92 2f       	mov	r25, r18
	andi  r18,     0xf8    ; (x>>3) * 8 interleave
    7284:	28 7f       	andi	r18, 0xF8	; 248
	add   YL,      r18
    7286:	c2 0f       	add	r28, r18

	; Save Y wrap adress

	movw  r12,     YL
    7288:	6e 01       	movw	r12, r28

	; Add Y scroll (coarse)

	lds   r16,     screen_scrollY ; ScreenScrollY
    728a:	00 91 b6 0c 	lds	r16, 0x0CB6
	mov   r22,     r16
    728e:	60 2f       	mov	r22, r16
	lsr   r16
    7290:	06 95       	lsr	r16
	lsr   r16
    7292:	06 95       	lsr	r16
	lsr   r16              ; Divide by 8
    7294:	06 95       	lsr	r16

	lds   r17,     screen_scrollHeight
    7296:	10 91 b7 0c 	lds	r17, 0x0CB7
	sub   r17,     r16
    729a:	10 1b       	sub	r17, r16
	mov   r15,     r17     ; Y tiles to draw before wrapping
    729c:	f1 2e       	mov	r15, r17

	mov   r17,     r16
    729e:	10 2f       	mov	r17, r16
	lsr   r16
    72a0:	06 95       	lsr	r16
	lsr   r16
    72a2:	06 95       	lsr	r16
	lsr   r16              ; Divide by 8
    72a4:	06 95       	lsr	r16
	add   YH,      r16     ; (bits 6-7 for 256 byte VRAM bank select)
    72a6:	d0 0f       	add	r29, r16
	andi  r17,     0x7
    72a8:	17 70       	andi	r17, 0x07	; 7
	add   YL,      r17     ; Interleave (bits 3-5)
    72aa:	c1 0f       	add	r28, r17
	andi  r22,     0x7     ; Fine Y scrolling (bits 0-2)
    72ac:	67 70       	andi	r22, 0x07	; 7
#endif


	; Prepare overlay

	lds   r20,     overlay_tile_table
    72ae:	40 91 b3 0c 	lds	r20, 0x0CB3
	lds   r21,     overlay_tile_table + 1
    72b2:	50 91 b4 0c 	lds	r21, 0x0CB4
	lds   r6,      tile_table_lo
    72b6:	60 90 af 0c 	lds	r6, 0x0CAF
	lds   r7,      tile_table_hi
    72ba:	70 90 b0 0c 	lds	r7, 0x0CB0
	movw  XL,      r6      ; Store for later
    72be:	d3 01       	movw	r26, r6

	; Save main section values

	movw  r10,     YL      ; Main section VRAM begin
    72c0:	5e 01       	movw	r10, r28
	mov   r23,     r22     ; Main section line counter within tile row (fine Y scroll)
    72c2:	76 2f       	mov	r23, r22
#if (SCROLLING != 0)
	mov   r24,     r15     ; Y tiles to draw before wrapping
    72c4:	8f 2d       	mov	r24, r15
	mov   r9,      r25     ; Main section X scroll
    72c6:	99 2e       	mov	r9, r25

#if (SCROLLING != 0)

	; Compute beginning of overlay in vram

	lds   r16,     screen_scrollHeight
    72c8:	00 91 b7 0c 	lds	r16, 0x0CB7
	mov   r18,     r16
    72cc:	20 2f       	mov	r18, r16
	lsr   r16
    72ce:	06 95       	lsr	r16
	lsr   r16
    72d0:	06 95       	lsr	r16
	lsr   r16              ; Hi8
    72d2:	06 95       	lsr	r16
	inc   r16              ; Add 0x100 ram offset
    72d4:	03 95       	inc	r16
	andi  r18,     7       ; Lo8
    72d6:	27 70       	andi	r18, 0x07	; 7

	lds   r19,     overlay_height
    72d8:	30 91 b2 0c 	lds	r19, 0x0CB2
	cpi   r19,     0
    72dc:	30 30       	cpi	r19, 0x00	; 0
	in    r0,      _SFR_IO_ADDR(SREG)
    72de:	0f b6       	in	r0, 0x3f	; 63

	sbrs  r0,      SREG_Z
    72e0:	01 fe       	sbrs	r0, 1
	clr   r22              ; Overlay: No Y fine scroll
    72e2:	66 27       	eor	r22, r22
	sbrs  r0,      SREG_Z
    72e4:	01 fe       	sbrs	r0, 1
	mov   YL,      r18     ; lo8(overlay_vram)
    72e6:	c2 2f       	mov	r28, r18
	sbrs  r0,      SREG_Z
    72e8:	01 fe       	sbrs	r0, 1
	mov   YH,      r16     ; hi8(overlay_vram)
    72ea:	d0 2f       	mov	r29, r16
	sbrs  r0,      SREG_Z
    72ec:	01 fe       	sbrs	r0, 1
	ldi   r24,     0xFF    ; Overlay doesn't wrap (max out wrap counter)
    72ee:	8f ef       	ldi	r24, 0xFF	; 255
	sbrs  r0,      SREG_Z
    72f0:	01 fe       	sbrs	r0, 1
	clr   r9               ; Overlay has no X scroll
    72f2:	99 24       	eor	r9, r9
	sbrs  r0,      SREG_Z
    72f4:	01 fe       	sbrs	r0, 1
	movw  XL,      r20     ; Overlay tile table
    72f6:	da 01       	movw	r26, r20
#endif


	; Total scanlines to draw

	lds   r8,      render_lines_count
    72f8:	80 90 c0 0c 	lds	r8, 0x0CC0

	; Prepare Timer1 to use it for terminating scanlines

	ldi   r16,     (1 << OCF1B) + (1 << OCF1A) + (1 << TOV1)
    72fc:	07 e0       	ldi	r16, 0x07	; 7
	sts   _SFR_MEM_ADDR(TIFR1), r16  ; Clear any pending timer int
    72fe:	00 93 36 00 	sts	0x0036, r16

	ldi   r16,     (0 << WGM12) + (1 << CS10)
    7302:	01 e0       	ldi	r16, 0x01	; 1
	sts   _SFR_MEM_ADDR(TCCR1B), r16 ; Switch to timer1 normal mode (mode 0)
    7304:	00 93 81 00 	sts	0x0081, r16

	ldi   r16,     (1 << TOIE1)
    7308:	01 e0       	ldi	r16, 0x01	; 1
	sts   _SFR_MEM_ADDR(TIMSK1), r16 ; Enable Overflow interrupt
    730a:	00 93 6f 00 	sts	0x006F, r16

0000730e <next_tile_line>:

next_tile_line:

	; Get tile row offset

	ldi   r16,     TILE_WIDTH ; Tile width in pixels
    730e:	08 e0       	ldi	r16, 0x08	; 8
	mul   r22,     r16     ; r1:r0: Row offset within tile
    7310:	60 9f       	mul	r22, r16

	; Compute base adresses for ROM and RAM tiles

	movw  r16,     XL      ; Tile table
    7312:	8d 01       	movw	r16, r26
	subi  r16,     lo8(RAM_TILES_COUNT * TILE_HEIGHT * TILE_WIDTH)
    7314:	00 50       	subi	r16, 0x00	; 0
	sbci  r17,     hi8(RAM_TILES_COUNT * TILE_HEIGHT * TILE_WIDTH)
    7316:	17 40       	sbci	r17, 0x07	; 7
	add   r16,     r0
    7318:	00 0d       	add	r16, r0
	adc   r17,     r1
    731a:	11 1d       	adc	r17, r1
	movw  r2,      r16     ; r3:r2: ROM tiles row adress
    731c:	18 01       	movw	r2, r16

	ldi   r16,     lo8(ram_tiles)
    731e:	00 e5       	ldi	r16, 0x50	; 80
	ldi   r17,     hi8(ram_tiles)
    7320:	15 e0       	ldi	r17, 0x05	; 5
	add   r16,     r0
    7322:	00 0d       	add	r16, r0
	adc   r17,     r1
    7324:	11 1d       	adc	r17, r1
	movw  r4,      r16     ; r5:r4: RAM tiles row adress
    7326:	28 01       	movw	r4, r16

	ldi   r16,     TILE_HEIGHT * TILE_WIDTH
    7328:	00 e4       	ldi	r16, 0x40	; 64
	mov   r14,     r16     ; 14 cycles
    732a:	e0 2e       	mov	r14, r16

	; Prepare Timer1 OVF interrupt location

#if (RESOLUTION_EXT == 0)
	ldi   r16,     lo8(0xFFFF - (48 * SCREEN_TILES_H) - 44)
    732c:	03 e9       	ldi	r16, 0x93	; 147
	ldi   r17,     hi8(0xFFFF - (48 * SCREEN_TILES_H) - 44)
    732e:	1a ef       	ldi	r17, 0xFA	; 250
	ldi   r17,     hi8(0xFFFF - (44 * SCREEN_TILES_H) - 44)
#endif

	; Save current VRAM location (left column)

	push  YL
    7330:	cf 93       	push	r28
	push  YH
    7332:	df 93       	push	r29

	; Fetch first two tiles to prepare for scrolling output

#if (SCROLLING != 0)
	ld    r21,     Y       ; Tile 0 ID from VRAM
    7334:	58 81       	ld	r21, Y
	subi  YL,      0xF8
    7336:	c8 5f       	subi	r28, 0xF8	; 248
	ld    r20,     Y       ; Tile 1 ID from VRAM
    7338:	48 81       	ld	r20, Y
	subi  YL,      0xF8    ; 6 cycles
    733a:	c8 5f       	subi	r28, 0xF8	; 248
	rjmp  .
#endif

	; Enter next scanline including left alignment waits

	rcall hsync_pulse
    733c:	a5 d3       	rcall	.+1866   	; 0x7a88 <hsync_pulse>

	WAIT  r18,     HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    733e:	2c e0       	ldi	r18, 0x0C	; 12
    7340:	2a 95       	dec	r18
    7342:	f1 f7       	brne	.-4      	; 0x7340 <next_tile_line+0x32>

#if (RESOLUTION_EXT == 0)
	WAIT  r18,     0  + ((30 - SCREEN_TILES_H) * 24)
    7344:	20 e1       	ldi	r18, 0x10	; 16
    7346:	2a 95       	dec	r18
    7348:	f1 f7       	brne	.-4      	; 0x7346 <next_tile_line+0x38>
	WAIT  r18,     16 + ((32 - SCREEN_TILES_H) * 22)
#endif

	; Set up Timer 1

	sts   _SFR_MEM_ADDR(TCNT1H), r17
    734a:	10 93 85 00 	sts	0x0085, r17
	sts   _SFR_MEM_ADDR(TCNT1L), r16
    734e:	00 93 84 00 	sts	0x0084, r16
	sei                    ; 7 cycles
    7352:	78 94       	sei

#if (SCROLLING != 0)

	; Prepare first two tile addresses

	clr   r16
    7354:	00 27       	eor	r16, r16

	mul   r21,     r14     ; r1:r0: Tile address
    7356:	5e 9d       	mul	r21, r14
	cpi   r21,     RAM_TILES_COUNT
    7358:	5c 31       	cpi	r21, 0x1C	; 28
	movw  ZL,      r2      ; ROM tile address
    735a:	f1 01       	movw	r30, r2
	brcc  .+2
    735c:	08 f4       	brcc	.+2      	; 0x7360 <next_tile_line+0x52>
	movw  ZL,      r4      ; RAM tile address
    735e:	f2 01       	movw	r30, r4
	rol   r16              ; r16.0: Tile0 RAM if set
    7360:	00 1f       	adc	r16, r16
	add   ZL,      r0
    7362:	e0 0d       	add	r30, r0
	adc   ZH,      r1      ; ZH:ZL: Tile 0 address to start with
    7364:	f1 1d       	adc	r31, r1

	mov   r18,     r9
    7366:	29 2d       	mov	r18, r9
	andi  r18,     0x07    ; Low 7 bits: 0-7 px visible of last tile
    7368:	27 70       	andi	r18, 0x07	; 7
	clr   r1
    736a:	11 24       	eor	r1, r1
	add   ZL,      r18
    736c:	e2 0f       	add	r30, r18
	adc   ZH,      r1      ; ZH:ZL: Skipped non-visible left pixels
    736e:	f1 1d       	adc	r31, r1

	mul   r20,     r14     ; r1:r0: Tile address
    7370:	4e 9d       	mul	r20, r14
	cpi   r20,     RAM_TILES_COUNT
    7372:	4c 31       	cpi	r20, 0x1C	; 28
	movw  r20,     r2      ; ROM tile address
    7374:	a1 01       	movw	r20, r2
	brcc  .+2
    7376:	08 f4       	brcc	.+2      	; 0x737a <next_tile_line+0x6c>
	movw  r20,     r4      ; RAM tile address
    7378:	a2 01       	movw	r20, r4
	rol   r16              ; r16.0: Tile1 RAM if set; r16.1: Tile0 RAM if set
    737a:	00 1f       	adc	r16, r16
	add   r20,     r0      ; r21:r20: Tile 1 address to start with
    737c:	40 0d       	add	r20, r0
	adc   r21,     r1      ; 24 cycles
    737e:	51 1d       	adc	r21, r1

	; Select entry point

	ldi   r17,     26
    7380:	1a e1       	ldi	r17, 0x1A	; 26
	mul   r16,     r17     ; Select entry block
    7382:	01 9f       	mul	r16, r17
	mov   r16,     r0
    7384:	00 2d       	mov	r16, r0
	ldi   r17,     3
    7386:	13 e0       	ldi	r17, 0x03	; 3
	mul   r18,     r17     ; Select entry point within block
    7388:	21 9f       	mul	r18, r17
	clr   r17
    738a:	11 27       	eor	r17, r17
	subi  r16,     lo8(-(pm(romrom_e)))
    738c:	09 5e       	subi	r16, 0xE9	; 233
	sbci  r17,     hi8(-(pm(romrom_e)))
    738e:	15 4c       	sbci	r17, 0xC5	; 197
	add   r0,      r16
    7390:	00 0e       	add	r0, r16
	adc   r1,      r17     ; 12 cycles
    7392:	11 1e       	adc	r1, r17

	; Enter scanline loop

	clr   r17              ; End of scanline zero pixel
    7394:	11 27       	eor	r17, r17
	push  r0
    7396:	0f 92       	push	r0
	push  r1
    7398:	1f 92       	push	r1
	ret                    ; 9 cycles (+2 relative to non-scrolling)
    739a:	08 95       	ret

0000739c <__vector_15>:

	; End of scanline using Timer1 overflow

TIMER1_OVF_vect:

	out   PIXOUT,  r17     ; Zero pixel terminating the line
    739c:	18 b9       	out	0x08, r17	; 8

	pop   r0               ; pop & discard OVF interrupt return address
    739e:	0f 90       	pop	r0
	pop   r0               ; pop & discard OVF interrupt return address
    73a0:	0f 90       	pop	r0

	; Restore VRAM address (left column)

	pop   YH
    73a2:	df 91       	pop	r29
	pop   YL
    73a4:	cf 91       	pop	r28

	; Right alignment wait

#if (RESOLUTION_EXT == 0)
	WAIT  r16,     11 + ((30 - SCREEN_TILES_H) * 24)
    73a6:	03 e1       	ldi	r16, 0x13	; 19
    73a8:	0a 95       	dec	r16
    73aa:	f1 f7       	brne	.-4      	; 0x73a8 <__vector_15+0xc>
    73ac:	00 c0       	rjmp	.+0      	; 0x73ae <__vector_15+0x12>
	WAIT  r16,     27 + ((32 - SCREEN_TILES_H) * 22)
#endif

	; Next line & row logic

	inc   r22              ; Line counter within tile row
    73ae:	63 95       	inc	r22
	dec   r8               ; Total remaining scanlines counter
    73b0:	8a 94       	dec	r8
	breq  text_frame_end
    73b2:	f9 f0       	breq	.+62     	; 0x73f2 <text_frame_end>

	cpi   r22,     TILE_HEIGHT ; At last char line?
    73b4:	68 30       	cpi	r22, 0x08	; 8
	breq  next_tile_row
    73b6:	29 f0       	breq	.+10     	; 0x73c2 <next_tile_row>

	; Wait to align with next_tile_row instructions (+1 cycle for the breq)

	WAIT  r16,     23
    73b8:	07 e0       	ldi	r16, 0x07	; 7
    73ba:	0a 95       	dec	r16
    73bc:	f1 f7       	brne	.-4      	; 0x73ba <__vector_15+0x1e>
    73be:	00 c0       	rjmp	.+0      	; 0x73c0 <__vector_15+0x24>
	rjmp  next_tile_line
    73c0:	a6 cf       	rjmp	.-180    	; 0x730e <next_tile_line>

000073c2 <next_tile_row>:

next_tile_row:

	clr   r22              ; Clear line counter for next tile row
    73c2:	66 27       	eor	r22, r22

	; Increment VRAM pointer for next row

#if (SCROLLING != 0)

	mov   r16,     YL
    73c4:	0c 2f       	mov	r16, r28
	andi  r16,     0x7
    73c6:	07 70       	andi	r16, 0x07	; 7
	cpi   r16,     0x7
    73c8:	07 30       	cpi	r16, 0x07	; 7
	breq  .+4
    73ca:	11 f0       	breq	.+4      	; 0x73d0 <next_tile_row+0xe>
	inc   YL               ; Within a 8 tile tall block
    73cc:	c3 95       	inc	r28
	rjmp  .+4
    73ce:	02 c0       	rjmp	.+4      	; 0x73d4 <next_tile_row+0x12>
	andi  YL,      0xF8    ; Crossing a 8 tile tall block boundary
    73d0:	c8 7f       	andi	r28, 0xF8	; 248
	inc   YH
    73d2:	d3 95       	inc	r29

	dec   r24              ; Tile rows until wraparound
    73d4:	8a 95       	dec	r24
	brne  .+2
    73d6:	09 f4       	brne	.+2      	; 0x73da <next_tile_row+0x18>
	movw  YL,      r12     ; Load wrap to address
    73d8:	e6 01       	movw	r28, r12

#endif

	; Check end of overlay section

	dec   r19              ; At end, load main section params
    73da:	3a 95       	dec	r19
	brne  .+2
    73dc:	09 f4       	brne	.+2      	; 0x73e0 <next_tile_row+0x1e>
	mov   r22,     r23     ; Main section begin line counter
    73de:	67 2f       	mov	r22, r23
	brne  .+2
    73e0:	09 f4       	brne	.+2      	; 0x73e4 <next_tile_row+0x22>
	movw  YL,      r10     ; Main section begin VRAM adress
    73e2:	e5 01       	movw	r28, r10
#if (SCROLLING != 0)
	brne  .+2
    73e4:	09 f4       	brne	.+2      	; 0x73e8 <next_tile_row+0x26>
	mov   r24,     r15     ; Main section remaining tile rows before Y wrapping
    73e6:	8f 2d       	mov	r24, r15
	brne  .+2
    73e8:	09 f4       	brne	.+2      	; 0x73ec <next_tile_row+0x2a>
	mov   r9,      r25     ; Main section scrollX
    73ea:	99 2e       	mov	r9, r25
#else
	rjmp  .
	rjmp  .
#endif
	brne  .+2
    73ec:	09 f4       	brne	.+2      	; 0x73f0 <next_tile_row+0x2e>
	movw  XL,      r6      ; Main section ROM tileset
    73ee:	d3 01       	movw	r26, r6

	rjmp next_tile_line
    73f0:	8e cf       	rjmp	.-228    	; 0x730e <next_tile_line>

000073f2 <text_frame_end>:

text_frame_end:

	WAIT  r18,     48
    73f2:	20 e1       	ldi	r18, 0x10	; 16
    73f4:	2a 95       	dec	r18
    73f6:	f1 f7       	brne	.-4      	; 0x73f4 <text_frame_end+0x2>

	; Restore Timer1 to the value it should normally have at this point

	ldi   r16,     hi8(101 - TIMER1_DISPLACE)
    73f8:	00 e0       	ldi	r16, 0x00	; 0
	sts   _SFR_MEM_ADDR(TCNT1H), r16
    73fa:	00 93 85 00 	sts	0x0085, r16
	ldi   r16,     lo8(101 - TIMER1_DISPLACE)
    73fe:	0c e2       	ldi	r16, 0x2C	; 44
	sts   _SFR_MEM_ADDR(TCNT1L), r16
    7400:	00 93 84 00 	sts	0x0084, r16

	rcall hsync_pulse      ; 145
    7404:	41 d3       	rcall	.+1666   	; 0x7a88 <hsync_pulse>

#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
	clr   r1
    7406:	11 24       	eor	r1, r1
	call  RestoreBackground
    7408:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <RestoreBackground>
#endif

	; Set VSync flag & flip field

	lds   ZL,      sync_flags
    740c:	e0 91 ba 0c 	lds	r30, 0x0CBA
	ldi   r20,     SYNC_FLAG_FIELD
    7410:	42 e0       	ldi	r20, 0x02	; 2
	ori   ZL,      SYNC_FLAG_VSYNC
    7412:	e1 60       	ori	r30, 0x01	; 1
	eor   ZL,      r20
    7414:	e4 27       	eor	r30, r20
	sts   sync_flags, ZL
    7416:	e0 93 ba 0c 	sts	0x0CBA, r30

	; Restore Timer 1's operation mode

	ldi   r16,     (1 << OCF1B) + (1 << OCF1A) + (1 << TOV1)
    741a:	07 e0       	ldi	r16, 0x07	; 7
	sts   _SFR_MEM_ADDR(TIFR1), r16  ; Clear any pending timer int
    741c:	00 93 36 00 	sts	0x0036, r16

	ldi   r16,     (1 << WGM12) + (1 << CS10)
    7420:	09 e0       	ldi	r16, 0x09	; 9
	sts   _SFR_MEM_ADDR(TCCR1B), r16 ; Switch back to timer1 CTC mode (mode 4)
    7422:	00 93 81 00 	sts	0x0081, r16

	ldi   r16,     (1 << OCIE1A)
    7426:	02 e0       	ldi	r16, 0x02	; 2
	sts   _SFR_MEM_ADDR(TIMSK1), r16 ; Restore ints on compare match
    7428:	00 93 6f 00 	sts	0x006F, r16

	ret
    742c:	08 95       	ret

0000742e <romrom_e>:
	; Left side entry blocks for 1-8 pixels. Each pixel is 3 words, and a
	; complete block is 26 words (8 * 3 + 2 words). Entry is performed by
	; a ret (pushing the appropriate entry address on stack).

romrom_e:
	rjmp  .
    742e:	00 c0       	rjmp	.+0      	; 0x7430 <romrom_e+0x2>
	lpm   r16,     Z+
    7430:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7432:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7434:	00 c0       	rjmp	.+0      	; 0x7436 <romrom_e+0x8>
#else
	nop
#endif
	lpm   r16,     Z+
    7436:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7438:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    743a:	00 c0       	rjmp	.+0      	; 0x743c <romrom_e+0xe>
	lpm   r16,     Z+
    743c:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    743e:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7440:	00 c0       	rjmp	.+0      	; 0x7442 <romrom_e+0x14>
#else
	nop
#endif
	lpm   r16,     Z+
    7442:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7444:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7446:	00 c0       	rjmp	.+0      	; 0x7448 <romrom_e+0x1a>
	lpm   r16,     Z+
    7448:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    744a:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    744c:	00 c0       	rjmp	.+0      	; 0x744e <romrom_e+0x20>
#else
	nop
#endif
	lpm   r16,     Z+
    744e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7450:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7452:	00 c0       	rjmp	.+0      	; 0x7454 <romrom_e+0x26>
	lpm   r16,     Z+
    7454:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7456:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	nop
    7458:	00 00       	nop
#endif
	lpm   r16,     Z+
    745a:	05 91       	lpm	r16, Z+
	movw  ZL,      r20
    745c:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    745e:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    7460:	56 c0       	rjmp	.+172    	; 0x750e <romloop_px0>

00007462 <romram_e>:
#if (RESOLUTION_EXT != 0)
	nop
#endif

romram_e:
	rjmp  .
    7462:	00 c0       	rjmp	.+0      	; 0x7464 <romram_e+0x2>
	lpm   r16,     Z+
    7464:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7466:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7468:	00 c0       	rjmp	.+0      	; 0x746a <romram_e+0x8>
#else
	nop
#endif
	lpm   r16,     Z+
    746a:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    746c:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    746e:	00 c0       	rjmp	.+0      	; 0x7470 <romram_e+0xe>
	lpm   r16,     Z+
    7470:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    7472:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7474:	00 c0       	rjmp	.+0      	; 0x7476 <romram_e+0x14>
#else
	nop
#endif
	lpm   r16,     Z+
    7476:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7478:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    747a:	00 c0       	rjmp	.+0      	; 0x747c <romram_e+0x1a>
	lpm   r16,     Z+
    747c:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    747e:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7480:	00 c0       	rjmp	.+0      	; 0x7482 <romram_e+0x20>
#else
	nop
#endif
	lpm   r16,     Z+
    7482:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7484:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7486:	00 c0       	rjmp	.+0      	; 0x7488 <romram_e+0x26>
	lpm   r16,     Z+
    7488:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    748a:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	nop
    748c:	00 00       	nop
#endif
	lpm   r16,     Z+
    748e:	05 91       	lpm	r16, Z+
	movw  ZL,      r20
    7490:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    7492:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    7494:	59 c0       	rjmp	.+178    	; 0x7548 <ramloop_px0>

00007496 <ramrom_e>:
#if (RESOLUTION_EXT != 0)
	nop
#endif

ramrom_e:
	lpm   r16,     Z       ; Dummy load (nop)
    7496:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    7498:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    749a:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    749c:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    749e:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    74a0:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74a2:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74a4:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    74a6:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74a8:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74aa:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    74ac:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74ae:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74b0:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    74b2:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74b4:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74b6:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    74b8:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74ba:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74bc:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    74be:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    74c0:	00 c0       	rjmp	.+0      	; 0x74c2 <ramrom_e+0x2c>
#else
	nop
#endif
	ld    r16,     Z+
    74c2:	01 91       	ld	r16, Z+
	movw  ZL,      r20
    74c4:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    74c6:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    74c8:	22 c0       	rjmp	.+68     	; 0x750e <romloop_px0>

000074ca <ramram_e>:

ramram_e:
	lpm   r16,     Z       ; Dummy load (nop)
    74ca:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74cc:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    74ce:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74d0:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74d2:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    74d4:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74d6:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74d8:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    74da:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74dc:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74de:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    74e0:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74e2:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74e4:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    74e6:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74e8:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74ea:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    74ec:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74ee:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74f0:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    74f2:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    74f4:	00 c0       	rjmp	.+0      	; 0x74f6 <ramram_e+0x2c>
#else
	nop
#endif
	ld    r16,     Z+
    74f6:	01 91       	ld	r16, Z+
	movw  ZL,      r20
    74f8:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    74fa:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    74fc:	25 c0       	rjmp	.+74     	; 0x7548 <ramloop_px0>

000074fe <romloop>:
	; interval will be turned into 7 for termination (3 cycles IT latency
	; and 3 cycles JMP in the generated interrupt entry table before the
	; zero pixel output).

romloop:
	lpm   r16,     Z+
    74fe:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7500:	08 b9       	out	0x08, r16	; 8
	add   r0,      r2      ; Add tile table address + row offset lsb
    7502:	02 0c       	add	r0, r2
#if (RESOLUTION_EXT == 0)
	nop
    7504:	00 00       	nop
#endif

	lpm   r16,     Z+
    7506:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7508:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r3      ; Add tile table address + row offset msb
    750a:	13 1c       	adc	r1, r3
	movw  ZL,      r0      ; Next tile (ROM)
    750c:	f0 01       	movw	r30, r0

0000750e <romloop_px0>:

romloop_px0:
	lpm   r16,     Z+
    750e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7510:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7512:	00 c0       	rjmp	.+0      	; 0x7514 <romloop_px0+0x6>
#else
	nop
#endif

	lpm   r16,     Z+
    7514:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7516:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	ld    r20,     Y+      ; Load next tile ID from VRAM
#else
	ld    r20,     Y       ; Load next tile ID from VRAM
    7518:	48 81       	ld	r20, Y
#endif

	lpm   r16,     Z+
    751a:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    751c:	08 b9       	out	0x08, r16	; 8
	rjmp  .
#else
	nop
#endif
#else
	subi  YL,      0xF8    ; Add 8 to VRAM address low
    751e:	c8 5f       	subi	r28, 0xF8	; 248
#if (RESOLUTION_EXT == 0)
	nop
    7520:	00 00       	nop
#endif
#endif

	lpm   r16,     Z+
    7522:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7524:	08 b9       	out	0x08, r16	; 8
	mul   r20,     r14     ; r14 = Width * Height
    7526:	4e 9d       	mul	r20, r14

	lpm   r16,     Z+
    7528:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    752a:	08 b9       	out	0x08, r16	; 8
	cpi   r20,     RAM_TILES_COUNT ; Is tile in RAM or ROM? (RAM tiles have indexes < RAM_TILES_COUNT)
    752c:	4c 31       	cpi	r20, 0x1C	; 28
#if (RESOLUTION_EXT == 0)
	nop
    752e:	00 00       	nop
#endif

	lpm   r16,     Z+
    7530:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7532:	08 b9       	out	0x08, r16	; 8
	brcc  romloop          ; ROM tiles: stay in ROM loop
    7534:	20 f7       	brcc	.-56     	; 0x74fe <romloop>
	nop
    7536:	00 00       	nop

	lpm   r16,     Z+
    7538:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    753a:	08 b9       	out	0x08, r16	; 8
	add   r0,      r4      ; Add tile table address + row offset lsb
    753c:	04 0c       	add	r0, r4
#if (RESOLUTION_EXT == 0)
	nop
    753e:	00 00       	nop
#endif

	lpm   r16,     Z+
    7540:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7542:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r5      ; Add tile table address + row offset msb
    7544:	15 1c       	adc	r1, r5
	movw  ZL,      r0      ; Next tile (RAM)
    7546:	f0 01       	movw	r30, r0

00007548 <ramloop_px0>:

ramloop_px0:
	nop
    7548:	00 00       	nop

	ld    r16,     Z+
    754a:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    754c:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	ld    r20,     Y+      ; Load next tile ID from VRAM
#else
	ld    r20,     Y       ; Load next tile ID from VRAM
    754e:	48 81       	ld	r20, Y
#endif
#if (RESOLUTION_EXT == 0)
	nop
    7550:	00 00       	nop
#endif

	ld    r16,     Z+
    7552:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7554:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	nop
#else
	subi  YL,      0xF8    ; Add 8 to VRAM address low
    7556:	c8 5f       	subi	r28, 0xF8	; 248
#endif
	mul   r20,     r14     ; r14 = Width * Height
    7558:	4e 9d       	mul	r20, r14

	ld    r16,     Z+
    755a:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    755c:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    755e:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif

	ld    r16,     Z+
    7560:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7562:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    7564:	04 91       	lpm	r16, Z

	ld    r16,     Z+
    7566:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    7568:	08 b9       	out	0x08, r16	; 8
	cpi   r20,     RAM_TILES_COUNT ; Is tile in RAM or ROM? (RAM tiles have indexes < RAM_TILES_COUNT)
    756a:	4c 31       	cpi	r20, 0x1C	; 28
#if (RESOLUTION_EXT == 0)
	rjmp  .
    756c:	00 c0       	rjmp	.+0      	; 0x756e <ramloop_px0+0x26>
#else
	nop
#endif

	ld    r16,     Z+
    756e:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7570:	08 b9       	out	0x08, r16	; 8
	brcc  ramloop_tr       ; ROM tiles: transfer to ROM loop
    7572:	50 f4       	brcc	.+20     	; 0x7588 <ramloop_tr>
	nop
    7574:	00 00       	nop
	add   r0,      r4      ; Add tile table address + row offset lsb
    7576:	04 0c       	add	r0, r4

	ld    r16,     Z+
    7578:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    757a:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r5      ; Add tile table address + row offset msb
    757c:	15 1c       	adc	r1, r5
#if (RESOLUTION_EXT == 0)
	nop
    757e:	00 00       	nop
#endif

	ld    r16,     Z+
    7580:	01 91       	ld	r16, Z+
	movw  ZL,      r0      ; Next tile (RAM)
    7582:	f0 01       	movw	r30, r0
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7584:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    7586:	e0 cf       	rjmp	.-64     	; 0x7548 <ramloop_px0>

00007588 <ramloop_tr>:

ramloop_tr:
	add   r0,      r2      ; Add tile table address + row offset lsb
    7588:	02 0c       	add	r0, r2

	ld    r16,     Z+
    758a:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    758c:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r3      ; Add tile table address + row offset msb
    758e:	13 1c       	adc	r1, r3
#if (RESOLUTION_EXT == 0)
	nop
    7590:	00 00       	nop
#endif

	ld    r16,     Z+
    7592:	01 91       	ld	r16, Z+
	movw  ZL,      r0      ; Next tile (ROM)
    7594:	f0 01       	movw	r30, r0
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7596:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    7598:	ba cf       	rjmp	.-140    	; 0x750e <romloop_px0>

0000759a <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    759a:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    759c:	e0 91 af 0c 	lds	r30, 0x0CAF
	lds ZH,tile_table_hi
    75a0:	f0 91 b0 0c 	lds	r31, 0x0CB0
	mul r24,r18
    75a4:	82 9f       	mul	r24, r18
	add ZL,r0
    75a6:	e0 0d       	add	r30, r0
	adc ZH,r1
    75a8:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    75aa:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    75ac:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    75ae:	62 9f       	mul	r22, r18
	add XL,r0
    75b0:	a0 0d       	add	r26, r0
	adc XH,r1
    75b2:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    75b4:	15 90       	lpm	r1, Z+
    75b6:	1d 92       	st	X+, r1
    75b8:	15 90       	lpm	r1, Z+
    75ba:	1d 92       	st	X+, r1
    75bc:	15 90       	lpm	r1, Z+
    75be:	1d 92       	st	X+, r1
    75c0:	15 90       	lpm	r1, Z+
    75c2:	1d 92       	st	X+, r1
    75c4:	15 90       	lpm	r1, Z+
    75c6:	1d 92       	st	X+, r1
    75c8:	15 90       	lpm	r1, Z+
    75ca:	1d 92       	st	X+, r1
    75cc:	15 90       	lpm	r1, Z+
    75ce:	1d 92       	st	X+, r1
    75d0:	15 90       	lpm	r1, Z+
    75d2:	1d 92       	st	X+, r1
    75d4:	15 90       	lpm	r1, Z+
    75d6:	1d 92       	st	X+, r1
    75d8:	15 90       	lpm	r1, Z+
    75da:	1d 92       	st	X+, r1
    75dc:	15 90       	lpm	r1, Z+
    75de:	1d 92       	st	X+, r1
    75e0:	15 90       	lpm	r1, Z+
    75e2:	1d 92       	st	X+, r1
    75e4:	15 90       	lpm	r1, Z+
    75e6:	1d 92       	st	X+, r1
    75e8:	15 90       	lpm	r1, Z+
    75ea:	1d 92       	st	X+, r1
    75ec:	15 90       	lpm	r1, Z+
    75ee:	1d 92       	st	X+, r1
    75f0:	15 90       	lpm	r1, Z+
    75f2:	1d 92       	st	X+, r1
    75f4:	15 90       	lpm	r1, Z+
    75f6:	1d 92       	st	X+, r1
    75f8:	15 90       	lpm	r1, Z+
    75fa:	1d 92       	st	X+, r1
    75fc:	15 90       	lpm	r1, Z+
    75fe:	1d 92       	st	X+, r1
    7600:	15 90       	lpm	r1, Z+
    7602:	1d 92       	st	X+, r1
    7604:	15 90       	lpm	r1, Z+
    7606:	1d 92       	st	X+, r1
    7608:	15 90       	lpm	r1, Z+
    760a:	1d 92       	st	X+, r1
    760c:	15 90       	lpm	r1, Z+
    760e:	1d 92       	st	X+, r1
    7610:	15 90       	lpm	r1, Z+
    7612:	1d 92       	st	X+, r1
    7614:	15 90       	lpm	r1, Z+
    7616:	1d 92       	st	X+, r1
    7618:	15 90       	lpm	r1, Z+
    761a:	1d 92       	st	X+, r1
    761c:	15 90       	lpm	r1, Z+
    761e:	1d 92       	st	X+, r1
    7620:	15 90       	lpm	r1, Z+
    7622:	1d 92       	st	X+, r1
    7624:	15 90       	lpm	r1, Z+
    7626:	1d 92       	st	X+, r1
    7628:	15 90       	lpm	r1, Z+
    762a:	1d 92       	st	X+, r1
    762c:	15 90       	lpm	r1, Z+
    762e:	1d 92       	st	X+, r1
    7630:	15 90       	lpm	r1, Z+
    7632:	1d 92       	st	X+, r1
    7634:	15 90       	lpm	r1, Z+
    7636:	1d 92       	st	X+, r1
    7638:	15 90       	lpm	r1, Z+
    763a:	1d 92       	st	X+, r1
    763c:	15 90       	lpm	r1, Z+
    763e:	1d 92       	st	X+, r1
    7640:	15 90       	lpm	r1, Z+
    7642:	1d 92       	st	X+, r1
    7644:	15 90       	lpm	r1, Z+
    7646:	1d 92       	st	X+, r1
    7648:	15 90       	lpm	r1, Z+
    764a:	1d 92       	st	X+, r1
    764c:	15 90       	lpm	r1, Z+
    764e:	1d 92       	st	X+, r1
    7650:	15 90       	lpm	r1, Z+
    7652:	1d 92       	st	X+, r1
    7654:	15 90       	lpm	r1, Z+
    7656:	1d 92       	st	X+, r1
    7658:	15 90       	lpm	r1, Z+
    765a:	1d 92       	st	X+, r1
    765c:	15 90       	lpm	r1, Z+
    765e:	1d 92       	st	X+, r1
    7660:	15 90       	lpm	r1, Z+
    7662:	1d 92       	st	X+, r1
    7664:	15 90       	lpm	r1, Z+
    7666:	1d 92       	st	X+, r1
    7668:	15 90       	lpm	r1, Z+
    766a:	1d 92       	st	X+, r1
    766c:	15 90       	lpm	r1, Z+
    766e:	1d 92       	st	X+, r1
    7670:	15 90       	lpm	r1, Z+
    7672:	1d 92       	st	X+, r1
    7674:	15 90       	lpm	r1, Z+
    7676:	1d 92       	st	X+, r1
    7678:	15 90       	lpm	r1, Z+
    767a:	1d 92       	st	X+, r1
    767c:	15 90       	lpm	r1, Z+
    767e:	1d 92       	st	X+, r1
    7680:	15 90       	lpm	r1, Z+
    7682:	1d 92       	st	X+, r1
    7684:	15 90       	lpm	r1, Z+
    7686:	1d 92       	st	X+, r1
    7688:	15 90       	lpm	r1, Z+
    768a:	1d 92       	st	X+, r1
    768c:	15 90       	lpm	r1, Z+
    768e:	1d 92       	st	X+, r1
    7690:	15 90       	lpm	r1, Z+
    7692:	1d 92       	st	X+, r1
    7694:	15 90       	lpm	r1, Z+
    7696:	1d 92       	st	X+, r1
    7698:	15 90       	lpm	r1, Z+
    769a:	1d 92       	st	X+, r1
    769c:	15 90       	lpm	r1, Z+
    769e:	1d 92       	st	X+, r1
    76a0:	15 90       	lpm	r1, Z+
    76a2:	1d 92       	st	X+, r1
    76a4:	15 90       	lpm	r1, Z+
    76a6:	1d 92       	st	X+, r1
    76a8:	15 90       	lpm	r1, Z+
    76aa:	1d 92       	st	X+, r1
    76ac:	15 90       	lpm	r1, Z+
    76ae:	1d 92       	st	X+, r1
    76b0:	15 90       	lpm	r1, Z+
    76b2:	1d 92       	st	X+, r1
	clr r1
    76b4:	11 24       	eor	r1, r1
	ret
    76b6:	08 95       	ret

000076b8 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    76b8:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    76ba:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    76bc:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    76be:	82 9f       	mul	r24, r18
	add ZL,r0
    76c0:	e0 0d       	add	r30, r0
	adc ZH,r1
    76c2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    76c4:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    76c6:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    76c8:	62 9f       	mul	r22, r18
	add XL,r0
    76ca:	a0 0d       	add	r26, r0
	adc XH,r1
    76cc:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    76ce:	11 90       	ld	r1, Z+
    76d0:	1d 92       	st	X+, r1
    76d2:	11 90       	ld	r1, Z+
    76d4:	1d 92       	st	X+, r1
    76d6:	11 90       	ld	r1, Z+
    76d8:	1d 92       	st	X+, r1
    76da:	11 90       	ld	r1, Z+
    76dc:	1d 92       	st	X+, r1
    76de:	11 90       	ld	r1, Z+
    76e0:	1d 92       	st	X+, r1
    76e2:	11 90       	ld	r1, Z+
    76e4:	1d 92       	st	X+, r1
    76e6:	11 90       	ld	r1, Z+
    76e8:	1d 92       	st	X+, r1
    76ea:	11 90       	ld	r1, Z+
    76ec:	1d 92       	st	X+, r1
    76ee:	11 90       	ld	r1, Z+
    76f0:	1d 92       	st	X+, r1
    76f2:	11 90       	ld	r1, Z+
    76f4:	1d 92       	st	X+, r1
    76f6:	11 90       	ld	r1, Z+
    76f8:	1d 92       	st	X+, r1
    76fa:	11 90       	ld	r1, Z+
    76fc:	1d 92       	st	X+, r1
    76fe:	11 90       	ld	r1, Z+
    7700:	1d 92       	st	X+, r1
    7702:	11 90       	ld	r1, Z+
    7704:	1d 92       	st	X+, r1
    7706:	11 90       	ld	r1, Z+
    7708:	1d 92       	st	X+, r1
    770a:	11 90       	ld	r1, Z+
    770c:	1d 92       	st	X+, r1
    770e:	11 90       	ld	r1, Z+
    7710:	1d 92       	st	X+, r1
    7712:	11 90       	ld	r1, Z+
    7714:	1d 92       	st	X+, r1
    7716:	11 90       	ld	r1, Z+
    7718:	1d 92       	st	X+, r1
    771a:	11 90       	ld	r1, Z+
    771c:	1d 92       	st	X+, r1
    771e:	11 90       	ld	r1, Z+
    7720:	1d 92       	st	X+, r1
    7722:	11 90       	ld	r1, Z+
    7724:	1d 92       	st	X+, r1
    7726:	11 90       	ld	r1, Z+
    7728:	1d 92       	st	X+, r1
    772a:	11 90       	ld	r1, Z+
    772c:	1d 92       	st	X+, r1
    772e:	11 90       	ld	r1, Z+
    7730:	1d 92       	st	X+, r1
    7732:	11 90       	ld	r1, Z+
    7734:	1d 92       	st	X+, r1
    7736:	11 90       	ld	r1, Z+
    7738:	1d 92       	st	X+, r1
    773a:	11 90       	ld	r1, Z+
    773c:	1d 92       	st	X+, r1
    773e:	11 90       	ld	r1, Z+
    7740:	1d 92       	st	X+, r1
    7742:	11 90       	ld	r1, Z+
    7744:	1d 92       	st	X+, r1
    7746:	11 90       	ld	r1, Z+
    7748:	1d 92       	st	X+, r1
    774a:	11 90       	ld	r1, Z+
    774c:	1d 92       	st	X+, r1
    774e:	11 90       	ld	r1, Z+
    7750:	1d 92       	st	X+, r1
    7752:	11 90       	ld	r1, Z+
    7754:	1d 92       	st	X+, r1
    7756:	11 90       	ld	r1, Z+
    7758:	1d 92       	st	X+, r1
    775a:	11 90       	ld	r1, Z+
    775c:	1d 92       	st	X+, r1
    775e:	11 90       	ld	r1, Z+
    7760:	1d 92       	st	X+, r1
    7762:	11 90       	ld	r1, Z+
    7764:	1d 92       	st	X+, r1
    7766:	11 90       	ld	r1, Z+
    7768:	1d 92       	st	X+, r1
    776a:	11 90       	ld	r1, Z+
    776c:	1d 92       	st	X+, r1
    776e:	11 90       	ld	r1, Z+
    7770:	1d 92       	st	X+, r1
    7772:	11 90       	ld	r1, Z+
    7774:	1d 92       	st	X+, r1
    7776:	11 90       	ld	r1, Z+
    7778:	1d 92       	st	X+, r1
    777a:	11 90       	ld	r1, Z+
    777c:	1d 92       	st	X+, r1
    777e:	11 90       	ld	r1, Z+
    7780:	1d 92       	st	X+, r1
    7782:	11 90       	ld	r1, Z+
    7784:	1d 92       	st	X+, r1
    7786:	11 90       	ld	r1, Z+
    7788:	1d 92       	st	X+, r1
    778a:	11 90       	ld	r1, Z+
    778c:	1d 92       	st	X+, r1
    778e:	11 90       	ld	r1, Z+
    7790:	1d 92       	st	X+, r1
    7792:	11 90       	ld	r1, Z+
    7794:	1d 92       	st	X+, r1
    7796:	11 90       	ld	r1, Z+
    7798:	1d 92       	st	X+, r1
    779a:	11 90       	ld	r1, Z+
    779c:	1d 92       	st	X+, r1
    779e:	11 90       	ld	r1, Z+
    77a0:	1d 92       	st	X+, r1
    77a2:	11 90       	ld	r1, Z+
    77a4:	1d 92       	st	X+, r1
    77a6:	11 90       	ld	r1, Z+
    77a8:	1d 92       	st	X+, r1
    77aa:	11 90       	ld	r1, Z+
    77ac:	1d 92       	st	X+, r1
    77ae:	11 90       	ld	r1, Z+
    77b0:	1d 92       	st	X+, r1
    77b2:	11 90       	ld	r1, Z+
    77b4:	1d 92       	st	X+, r1
    77b6:	11 90       	ld	r1, Z+
    77b8:	1d 92       	st	X+, r1
    77ba:	11 90       	ld	r1, Z+
    77bc:	1d 92       	st	X+, r1
    77be:	11 90       	ld	r1, Z+
    77c0:	1d 92       	st	X+, r1
    77c2:	11 90       	ld	r1, Z+
    77c4:	1d 92       	st	X+, r1
    77c6:	11 90       	ld	r1, Z+
    77c8:	1d 92       	st	X+, r1
    77ca:	11 90       	ld	r1, Z+
    77cc:	1d 92       	st	X+, r1
	clr r1
    77ce:	11 24       	eor	r1, r1
	ret
    77d0:	08 95       	ret

000077d2 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    77d2:	e0 91 a5 0c 	lds	r30, 0x0CA5
	mov   r24,     ZL
    77d6:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    77d8:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    77da:	e8 0f       	add	r30, r24
	clr   ZH
    77dc:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    77de:	e0 5b       	subi	r30, 0xB0	; 176
	sbci  ZH,      hi8(-(ram_tiles_restore))
    77e0:	f3 4f       	sbci	r31, 0xF3	; 243

	lds   r0,      free_tile_index
    77e2:	00 90 a4 0c 	lds	r0, 0x0CA4
	sub   r24,     r0
    77e6:	80 19       	sub	r24, r0
	brcc  rbg_exit
    77e8:	30 f4       	brcc	.+12     	; 0x77f6 <rbg_exit>

000077ea <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    77ea:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    77ec:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    77ee:	01 90       	ld	r0, Z+
	st    X,       r0
    77f0:	0c 92       	st	X, r0
	inc   r24
    77f2:	83 95       	inc	r24
	brne  rbg_loop
    77f4:	d1 f7       	brne	.-12     	; 0x77ea <rbg_loop>

000077f6 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    77f6:	08 95       	ret

000077f8 <BlitSpritePart>:

bsp_srom:

	clt
#endif
	ldi   r25,     4 * 2
    77f8:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    77fa:	79 9f       	mul	r23, r25
	mov   XL,      r1
    77fc:	a1 2d       	mov	r26, r1
	clr   XH
    77fe:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7800:	a9 55       	subi	r26, 0x59	; 89
	sbci  XH,      hi8(-(sprites_tile_banks))
    7802:	b3 4f       	sbci	r27, 0xF3	; 243
	ld    ZL,      X+
    7804:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7806:	fd 91       	ld	r31, X+

00007808 <bsp_send>:

bsp_send:

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7808:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    780a:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    780c:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    780e:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    7810:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7812:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7814:	a0 5b       	subi	r26, 0xB0	; 176
	sbci  XH,      hi8(-(ram_tiles))
    7816:	ba 4f       	sbci	r27, 0xFA	; 250
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7818:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    781a:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    781c:	09 c0       	rjmp	.+18     	; 0x7830 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    781e:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7820:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7822:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7824:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7826:	0a c0       	rjmp	.+20     	; 0x783c <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7828:	17 96       	adiw	r26, 0x07	; 7

0000782a <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    782a:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    782c:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    782e:	08 c0       	rjmp	.+16     	; 0x7840 <x_check_end>

00007830 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7830:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7832:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7834:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7836:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7838:	f8 cf       	rjmp	.-16     	; 0x782a <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    783a:	11 97       	sbiw	r26, 0x01	; 1

0000783c <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    783c:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    783e:	b9 1f       	adc	r27, r25

00007840 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7840:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7842:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7844:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7846:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7848:	09 c0       	rjmp	.+18     	; 0x785c <y_2nd_tile>

	mul   r22,     r19
    784a:	63 9f       	mul	r22, r19
	add   XL,      r0
    784c:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    784e:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7850:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7852:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7854:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7856:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7858:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    785a:	08 c0       	rjmp	.+16     	; 0x786c <y_check_end>

0000785c <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    785c:	13 2e       	mov	r1, r19
	dec   r1
    785e:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    7860:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7862:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7864:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7866:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7868:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    786a:	13 2e       	mov	r1, r19

0000786c <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    786c:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    786e:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    7870:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    7872:	05 c0       	rjmp	.+10     	; 0x787e <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    7874:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    7876:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    7878:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    787a:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    787c:	04 c0       	rjmp	.+8      	; 0x7886 <x_diff_end>

0000787e <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    787e:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    7880:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    7882:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    7884:	6f ef       	ldi	r22, 0xFF	; 255

00007886 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    7886:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    7888:	04 2e       	mov	r0, r20
	lsr   r20
    788a:	46 95       	lsr	r20
#if (SPRITE_RAM_ENABLE != 0)
	brts  bsp_ramloop      ; T flag set: RAM loop, clear: ROM loop
#endif
	brcc  x_loop1          ; ROM sprite loop entry
    788c:	30 f4       	brcc	.+12     	; 0x789a <x_loop1>
	breq  x_loopx
    788e:	61 f0       	breq	.+24     	; 0x78a8 <x_loopx>

00007890 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7890:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7892:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7894:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7896:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7898:	b7 1f       	adc	r27, r23

0000789a <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    789a:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    789c:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    789e:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    78a0:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    78a2:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    78a4:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    78a6:	a1 f7       	brne	.-24     	; 0x7890 <x_loop0>

000078a8 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    78a8:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    78aa:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    78ac:	2c 93       	st	X, r18

	dec   r1
    78ae:	1a 94       	dec	r1
	breq  loop_e
    78b0:	49 f0       	breq	.+18     	; 0x78c4 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    78b2:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    78b4:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    78b6:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    78b8:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    78ba:	40 2d       	mov	r20, r0
	lsr   r20
    78bc:	46 95       	lsr	r20
	brcc  x_loop1
    78be:	68 f7       	brcc	.-38     	; 0x789a <x_loop1>
	brne  x_loop0
    78c0:	39 f7       	brne	.-50     	; 0x7890 <x_loop0>
	rjmp  x_loopx
    78c2:	f2 cf       	rjmp	.-28     	; 0x78a8 <x_loopx>

000078c4 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    78c4:	08 95       	ret

000078c6 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    78c6:	0f 92       	push	r0
	push  r1
    78c8:	1f 92       	push	r1
	push  ZL
    78ca:	ef 93       	push	r30
	push  ZH
    78cc:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    78ce:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    78d0:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    78d4:	ff 93       	push	r31

	sbrc  ZL,      2
    78d6:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    78d8:	04 c0       	rjmp	.+8      	; 0x78e2 <__vector_13+0x1c>
	sbrc  ZL,      1
    78da:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    78dc:	02 c0       	rjmp	.+4      	; 0x78e2 <__vector_13+0x1c>
	nop
    78de:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    78e0:	00 c0       	rjmp	.+0      	; 0x78e2 <__vector_13+0x1c>
	sbrs  ZL,      0
    78e2:	e0 ff       	sbrs	r30, 0
	rjmp  .
    78e4:	00 c0       	rjmp	.+0      	; 0x78e6 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    78e6:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    78ea:	ea 95       	dec	r30
	sts sync_pulse,ZL
    78ec:	e0 93 b9 0c 	sts	0x0CB9, r30

	;process sync phases
	lds ZH,sync_phase
    78f0:	f0 91 b8 0c 	lds	r31, 0x0CB8
	sbrc ZH,0
    78f4:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    78f6:	51 c0       	rjmp	.+162    	; 0x799a <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    78f8:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    78fa:	98 f0       	brcs	.+38     	; 0x7922 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    78fc:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    78fe:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7902:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7904:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7908:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    790a:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    790c:	26 f4       	brtc	.+8      	; 0x7916 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    790e:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7910:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <update_sound>
	rjmp sync_end
    7914:	b2 c0       	rjmp	.+356    	; 0x7a7a <sync_end>

00007916 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7916:	e5 e1       	ldi	r30, 0x15	; 21
    7918:	ea 95       	dec	r30
    791a:	f1 f7       	brne	.-4      	; 0x7918 <sync_pre_eq_no_sound_update+0x2>
    791c:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    791e:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7920:	ac c0       	rjmp	.+344    	; 0x7a7a <sync_end>

00007922 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7922:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7924:	08 f1       	brcs	.+66     	; 0x7968 <sync_post_eq>

	rjmp .
    7926:	00 c0       	rjmp	.+0      	; 0x7928 <sync_eq+0x6>
	rjmp .
    7928:	00 c0       	rjmp	.+0      	; 0x792a <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    792a:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    792c:	e0 fb       	bst	r30, 0
	ldi ZL,4
    792e:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7930:	16 f4       	brtc	.+4      	; 0x7936 <sync_eq_skip>
	
	call update_sound
    7932:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <update_sound>

00007936 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7936:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7938:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    793c:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    793e:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7942:	9b c0       	rjmp	.+310    	; 0x7a7a <sync_end>

00007944 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7944:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7946:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    794a:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    794c:	04 c0       	rjmp	.+8      	; 0x7956 <__vector_14+0x12>
	sbrc  ZL,      1
    794e:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    7950:	02 c0       	rjmp	.+4      	; 0x7956 <__vector_14+0x12>
	nop
    7952:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7954:	00 c0       	rjmp	.+0      	; 0x7956 <__vector_14+0x12>
	sbrs  ZL,      0
    7956:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7958:	00 c0       	rjmp	.+0      	; 0x795a <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    795a:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    795c:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    795e:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    7960:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    7964:	ef 91       	pop	r30
	reti
    7966:	18 95       	reti

00007968 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7968:	00 c0       	rjmp	.+0      	; 0x796a <sync_post_eq+0x2>

	bst ZL,0
    796a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    796c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    796e:	26 f4       	brtc	.+8      	; 0x7978 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7970:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7972:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <update_sound>
	rjmp sync_pre_eq_cont
    7976:	05 c0       	rjmp	.+10     	; 0x7982 <sync_pre_eq_cont>

00007978 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7978:	e5 e1       	ldi	r30, 0x15	; 21
    797a:	ea 95       	dec	r30
    797c:	f1 f7       	brne	.-4      	; 0x797a <sync_post_eq_no_sound_update+0x2>
    797e:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7980:	28 9a       	sbi	0x05, 0	; 5

00007982 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7982:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    7986:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7988:	09 f0       	breq	.+2      	; 0x798c <sync_pre_eq_cont+0xa>
	rjmp sync_end
    798a:	77 c0       	rjmp	.+238    	; 0x7a7a <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    798c:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    798e:	e0 93 b9 0c 	sts	0x0CB9, r30
	ldi ZL,1
    7992:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7994:	e0 93 b8 0c 	sts	0x0CB8, r30
	
	rjmp sync_end
    7998:	70 c0       	rjmp	.+224    	; 0x7a7a <sync_end>

0000799a <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    799a:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    799c:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    79a0:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    79a2:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    79a6:	00 c0       	rjmp	.+0      	; 0x79a8 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    79a8:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    79aa:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    79ac:	00 c0       	rjmp	.+0      	; 0x79ae <sync_hsync+0x14>
	call update_sound
    79ae:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    79b2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79b4:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    79b8:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    79ba:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cp ZL,ZH
    79be:	ef 17       	cp	r30, r31
	brsh no_render
    79c0:	d8 f4       	brcc	.+54     	; 0x79f8 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    79c2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79c4:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    79c8:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    79ca:	00 90 c0 0c 	lds	r0, 0x0CC0
	sub ZH,r0			
    79ce:	f0 19       	sub	r31, r0
	cp ZL,ZH
    79d0:	ef 17       	cp	r30, r31
	brlo no_render
    79d2:	90 f0       	brcs	.+36     	; 0x79f8 <no_render>

	;push r1-r29
	ldi ZL,29
    79d4:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    79d6:	ff 27       	eor	r31, r31

000079d8 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    79d8:	00 80       	ld	r0, Z
	push r0
    79da:	0f 92       	push	r0
	dec ZL
    79dc:	ea 95       	dec	r30
	brne push_loop	
    79de:	e1 f7       	brne	.-8      	; 0x79d8 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    79e0:	0d e0       	ldi	r16, 0x0D	; 13
    79e2:	0a 95       	dec	r16
    79e4:	f1 f7       	brne	.-4      	; 0x79e2 <push_loop+0xa>
    79e6:	00 c0       	rjmp	.+0      	; 0x79e8 <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    79e8:	0e 94 1a 39 	call	0x7234	; 0x7234 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    79ec:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    79ee:	ff 27       	eor	r31, r31

000079f0 <pop_loop>:
pop_loop:
	pop r0
    79f0:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    79f2:	01 92       	st	Z+, r0
	cpi ZL,30
    79f4:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    79f6:	e0 f3       	brcs	.-8      	; 0x79f0 <pop_loop>

000079f8 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    79f8:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    79fc:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    79fe:	09 f0       	breq	.+2      	; 0x7a02 <no_render+0xa>
	rjmp sync_end
    7a00:	3c c0       	rjmp	.+120    	; 0x7a7a <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7a02:	2f 93       	push	r18
	push r19
    7a04:	3f 93       	push	r19
	push r20
    7a06:	4f 93       	push	r20
	push r21
    7a08:	5f 93       	push	r21
	push r22
    7a0a:	6f 93       	push	r22
	push r23
    7a0c:	7f 93       	push	r23
	push r24
    7a0e:	8f 93       	push	r24
	push r25
    7a10:	9f 93       	push	r25
	push r26
    7a12:	af 93       	push	r26
	push r27
    7a14:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7a16:	78 94       	sei
	clr r1
    7a18:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7a1a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7a1c:	e0 93 b8 0c 	sts	0x0CB8, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7a20:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7a22:	e0 93 b9 0c 	sts	0x0CB9, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7a26:	80 91 c9 0c 	lds	r24, 0x0CC9
	lds r25,vsync_counter+1
    7a2a:	90 91 ca 0c 	lds	r25, 0x0CCA
	adiw r24,1
    7a2e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7a30:	80 93 c9 0c 	sts	0x0CC9, r24
	sts vsync_counter+1,r25
    7a34:	90 93 ca 0c 	sts	0x0CCA, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7a38:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,pre_vsync_user_callback+1
    7a3c:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7a40:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a42:	f1 05       	cpc	r31, r1
	breq .+2 
    7a44:	09 f0       	breq	.+2      	; 0x7a48 <no_render+0x50>
	icall
    7a46:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7a48:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7a4c:	0e 94 97 4c 	call	0x992e	; 0x992e <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7a50:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <process_music>
	clr r1
    7a54:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7a56:	e0 91 bd 0c 	lds	r30, 0x0CBD
	lds ZH,post_vsync_user_callback+1
    7a5a:	f0 91 be 0c 	lds	r31, 0x0CBE
	cp  ZL,r1
    7a5e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a60:	f1 05       	cpc	r31, r1
	breq .+2 
    7a62:	09 f0       	breq	.+2      	; 0x7a66 <no_render+0x6e>
	icall
    7a64:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7a66:	bf 91       	pop	r27
	pop r26
    7a68:	af 91       	pop	r26
	pop r25
    7a6a:	9f 91       	pop	r25
	pop r24
    7a6c:	8f 91       	pop	r24
	pop r23
    7a6e:	7f 91       	pop	r23
	pop r22
    7a70:	6f 91       	pop	r22
	pop r21
    7a72:	5f 91       	pop	r21
	pop r20
    7a74:	4f 91       	pop	r20
	pop r19
    7a76:	3f 91       	pop	r19
	pop r18
    7a78:	2f 91       	pop	r18

00007a7a <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7a7a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7a7c:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7a7e:	ff 91       	pop	r31
	pop ZL
    7a80:	ef 91       	pop	r30
	pop r1
    7a82:	1f 90       	pop	r1
	pop r0
    7a84:	0f 90       	pop	r0
	reti
    7a86:	18 95       	reti

00007a88 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7a88:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7a8a:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7a8c:	00 c0       	rjmp	.+0      	; 0x7a8e <hsync_pulse+0x6>
	call update_sound
    7a8e:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <update_sound>

	lds ZL,sync_pulse
    7a92:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    7a96:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7a98:	e0 93 b9 0c 	sts	0x0CB9, r30

	ret
    7a9c:	08 95       	ret

00007a9e <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:

#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7a9e:	e0 91 d1 0c 	lds	r30, 0x0CD1
	sbrc ZL,0
    7aa2:	e0 fd       	sbrc	r30, 0
	call ProcessMusic
    7aa4:	0e 94 69 42 	call	0x84d2	; 0x84d2 <ProcessMusic>
#endif

	ret
    7aa8:	08 95       	ret

00007aaa <update_sound>:
; Destroys: Z, r0, r1
;****************************

update_sound:

	push  r18
    7aaa:	2f 93       	push	r18
	push  r17
    7aac:	1f 93       	push	r17
	push  r16
    7aae:	0f 93       	push	r16

	mov   r18,     ZL
    7ab0:	2e 2f       	mov	r18, r30

	; Mix result is collected in r0:r1 (r0 is the high byte!)

	; Channel 1 (27 cy - 3 for initializing mix. buffer)

	lds   r17,     tr1_pos_frac
    7ab2:	10 91 d5 0c 	lds	r17, 0x0CD5
	lds   ZL,      tr1_pos_lo
    7ab6:	e0 91 d6 0c 	lds	r30, 0x0CD6
	lds   ZH,      tr1_pos_hi
    7aba:	f0 91 d7 0c 	lds	r31, 0x0CD7
	lds   r16,     tr1_step_lo
    7abe:	00 91 d3 0c 	lds	r16, 0x0CD3
	add   r17,     r16     ; Add step to fractional part of sample pos
    7ac2:	10 0f       	add	r17, r16
	lds   r16,     tr1_step_hi
    7ac4:	00 91 d4 0c 	lds	r16, 0x0CD4
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7ac8:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7aca:	04 91       	lpm	r16, Z
	sts   tr1_pos_lo, ZL
    7acc:	e0 93 d6 0c 	sts	0x0CD6, r30
	sts   tr1_pos_frac, r17
    7ad0:	10 93 d5 0c 	sts	0x0CD5, r17
	lds   r17,     tr1_vol
    7ad4:	10 91 d2 0c 	lds	r17, 0x0CD2
	mulsu r16,     r17     ; (sample * mixing_vol)
    7ad8:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7ada:	00 08       	sbc	r0, r0

	; Channel 2 (27 cy + 2/3 sync generator + 2 preload)

	lds   r17,     tr2_pos_frac
    7adc:	10 91 db 0c 	lds	r17, 0x0CDB
	lds   ZL,      tr2_pos_lo
    7ae0:	e0 91 dc 0c 	lds	r30, 0x0CDC
	lds   ZH,      tr2_pos_hi
    7ae4:	f0 91 dd 0c 	lds	r31, 0x0CDD
	lds   r16,     tr2_step_lo
    7ae8:	00 91 d9 0c 	lds	r16, 0x0CD9
	add   r17,     r16     ; Add step to fractional part of sample pos
    7aec:	10 0f       	add	r17, r16
	lds   r16,     tr2_step_hi
    7aee:	00 91 da 0c 	lds	r16, 0x0CDA
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7af2:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7af4:	04 91       	lpm	r16, Z
	sts   tr2_pos_lo, ZL
    7af6:	e0 93 dc 0c 	sts	0x0CDC, r30
	sts   tr2_pos_frac, r17
    7afa:	10 93 db 0c 	sts	0x0CDB, r17
	movw  ZL,      r0
    7afe:	f0 01       	movw	r30, r0
	lds   r17,     tr2_vol
    7b00:	10 91 d8 0c 	lds	r17, 0x0CD8
	mulsu r16,     r17     ; (sample * mixing_vol)
    7b04:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7b06:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7b08:	1f 0e       	add	r1, r31
	lds   r17,     tr3_pos_frac
    7b0a:	10 91 e1 0c 	lds	r17, 0x0CE1
	;--- Video sync update ( 68 cy LOW pulse) ---
	sbrc  r18,     0
    7b0e:	20 fd       	sbrc	r18, 0
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN
    7b10:	28 9a       	sbi	0x05, 0	; 5
	;--------------------------------------------
	adc   r0,      ZL      ; Ajust mix buffer msb
    7b12:	0e 1e       	adc	r0, r30

	; Channel 3 (27 cy - 2 preload)

	lds   ZL,      tr3_pos_lo
    7b14:	e0 91 e2 0c 	lds	r30, 0x0CE2
	lds   ZH,      tr3_pos_hi
    7b18:	f0 91 e3 0c 	lds	r31, 0x0CE3
	lds   r16,     tr3_step_lo
    7b1c:	00 91 df 0c 	lds	r16, 0x0CDF
	add   r17,     r16     ; Add step to fractional part of sample pos
    7b20:	10 0f       	add	r17, r16
	lds   r16,     tr3_step_hi
    7b22:	00 91 e0 0c 	lds	r16, 0x0CE0
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7b26:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7b28:	04 91       	lpm	r16, Z
	sts   tr3_pos_lo, ZL
    7b2a:	e0 93 e2 0c 	sts	0x0CE2, r30
	sts   tr3_pos_frac, r17
    7b2e:	10 93 e1 0c 	sts	0x0CE1, r17
	movw  ZL,      r0
    7b32:	f0 01       	movw	r30, r0
	lds   r17,     tr3_vol
    7b34:	10 91 de 0c 	lds	r17, 0x0CDE
	mulsu r16,     r17     ; (sample * mixing_vol)
    7b38:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7b3a:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7b3c:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Ajust mix buffer msb
    7b3e:	0e 1e       	adc	r0, r30

	; Channel 4 - 7/15 bit LFSR (34 cy)

	lds   r16,     tr4_barrel_lo ; Get the LFSR (16 bits barrel shifter)
    7b40:	00 91 e6 0c 	lds	r16, 0x0CE6
	lds   r17,     tr4_barrel_hi
    7b44:	10 91 e7 0c 	lds	r17, 0x0CE7

	lds   ZH,      tr4_vol ; get the Volume
    7b48:	f0 91 e4 0c 	lds	r31, 0x0CE4
	lsr   ZH               ; Divide it by 2 to get sample for '1'.
    7b4c:	f6 95       	lsr	r31
	clc
    7b4e:	88 94       	clc
	sbrc  r16,     0       ; If the LSB of the LFSR is zero
    7b50:	00 fd       	sbrc	r16, 0
	neg   ZH               ; then produce sample (negative) for '0' (C set unless zero)
    7b52:	f1 95       	neg	r31
	sbc   ZL,      ZL      ; Sign extend
    7b54:	ee 0b       	sbc	r30, r30
	add   r1,      ZH      ; Add sample to mix buffer lsb
    7b56:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Adjust mix buffer msb
    7b58:	0e 1e       	adc	r0, r30

	lds   ZL,      tr4_divider ; load the divider
    7b5a:	e0 91 e8 0c 	lds	r30, 0x0CE8
	subi  ZL,      2       ; Decrement bits 1..7 leaving bit 0 untouched by subtracting 2
    7b5e:	e2 50       	subi	r30, 0x02	; 2
	brcs  ch4_shift        ; if not enough ticks have elapsed then don't shift the LFSR
    7b60:	20 f0       	brcs	.+8      	; 0x7b6a <ch4_shift>
	lpm   ZL,      Z
    7b62:	e4 91       	lpm	r30, Z
	lpm   ZL,      Z
    7b64:	e4 91       	lpm	r30, Z
	lpm   ZL,      Z
    7b66:	e4 91       	lpm	r30, Z
	rjmp  ch4_end
    7b68:	0a c0       	rjmp	.+20     	; 0x7b7e <ch4_end>

00007b6a <ch4_shift>:

ch4_shift:
	mov   ZL,      r16     ; Perform the actual LFSR shifting by copying low byte of LFSR to a temp for XOR opperation
    7b6a:	e0 2f       	mov	r30, r16
	lsr   r17              ; shift the 16 bits of the barrel shifter
    7b6c:	16 95       	lsr	r17
	ror   r16              ; leaving the old bit 0 into Carry (Same bit used to decide +ve or -ve "sample" above)
    7b6e:	07 95       	ror	r16
	eor   ZL,      r16     ; perform the XOR of bit 0 and bit 1
    7b70:	e0 27       	eor	r30, r16
	bst   ZL,      0       ; Save that XOR'd bit to T
    7b72:	e0 fb       	bst	r30, 0
	bld   r17,     6       ; Write T to the 15th bit of the LFSR (regardless of mode as 7 bit will overwrite it)
    7b74:	16 f9       	bld	r17, 6
	lds   ZL,      tr4_params ; Reload the divider / Parameters which consists of 7 bits of divider + 1 bit of mode
    7b76:	e0 91 e5 0c 	lds	r30, 0x0CE5
	sbrs  ZL,      0       ; If the 7/14 mode bit indicates 7 bit mode then
    7b7a:	e0 ff       	sbrs	r30, 0
	bld   r16,     6       ; Store T to the 7th bit of the LFSR
    7b7c:	06 f9       	bld	r16, 6

00007b7e <ch4_end>:

ch4_end:
	sts   tr4_barrel_lo, r16 ; save the LFSR
    7b7e:	00 93 e6 0c 	sts	0x0CE6, r16
	sts   tr4_barrel_hi, r17
    7b82:	10 93 e7 0c 	sts	0x0CE7, r17
	sts   tr4_divider, ZL  ; Save the divider (plus 7/15 mode bit in LSB)
    7b86:	e0 93 e8 0c 	sts	0x0CE8, r30

#if (SOUND_CHANNEL_5_ENABLE != 0)

	; Channel 5 - PCM (45 cy + 2/3 sync generator)

	ldi   r17,     0
    7b8a:	10 e0       	ldi	r17, 0x00	; 0
	lds   ZL,      tr5_pos_frac
    7b8c:	e0 91 ed 0c 	lds	r30, 0x0CED
	lds   ZH,      tr5_step_lo
    7b90:	f0 91 eb 0c 	lds	r31, 0x0CEB
	;--- Video sync update (136 cy LOW pulse) ---
	sbrc  r18,     1
    7b94:	21 fd       	sbrc	r18, 1
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN
    7b96:	28 9a       	sbi	0x05, 0	; 5
	;--------------------------------------------
	add   ZL,      ZH      ; Add fractional part
    7b98:	ef 0f       	add	r30, r31
	sts   tr5_pos_frac, ZL
    7b9a:	e0 93 ed 0c 	sts	0x0CED, r30

	lds   ZL,      tr5_pos_lo
    7b9e:	e0 91 ee 0c 	lds	r30, 0x0CEE
	lds   ZH,      tr5_pos_hi
    7ba2:	f0 91 ef 0c 	lds	r31, 0x0CEF
	lds   r16,     tr5_step_hi
    7ba6:	00 91 ec 0c 	lds	r16, 0x0CEC
	adc   ZL,      r16     ; Add low part
    7baa:	e0 1f       	adc	r30, r16
	adc   ZH,      r17     ; Add high part
    7bac:	f1 1f       	adc	r31, r17

	lds   r16,     tr5_loop_end_lo
    7bae:	00 91 f2 0c 	lds	r16, 0x0CF2
	lds   r17,     tr5_loop_end_hi
    7bb2:	10 91 f3 0c 	lds	r17, 0x0CF3
	cp    ZL,      r16
    7bb6:	e0 17       	cp	r30, r16
	cpc   ZH,      r17
    7bb8:	f1 07       	cpc	r31, r17
	brcc  ch5_reset        ; Gone past end of sample
    7bba:	18 f4       	brcc	.+6      	; 0x7bc2 <ch5_reset>
	lpm   ZL,      Z
    7bbc:	e4 91       	lpm	r30, Z
	rjmp  .
    7bbe:	00 c0       	rjmp	.+0      	; 0x7bc0 <ch4_end+0x42>
	rjmp  ch5_nores
    7bc0:	06 c0       	rjmp	.+12     	; 0x7bce <ch5_nores>

00007bc2 <ch5_reset>:

ch5_reset:
	lds   r16,     tr5_loop_len_lo
    7bc2:	00 91 f0 0c 	lds	r16, 0x0CF0
	lds   r17,     tr5_loop_len_hi
    7bc6:	10 91 f1 0c 	lds	r17, 0x0CF1
	sub   ZL,      r16
    7bca:	e0 1b       	sub	r30, r16
	sbc   ZH,      r17     ; Reset to beginning
    7bcc:	f1 0b       	sbc	r31, r17

00007bce <ch5_nores>:

ch5_nores:
	sts   tr5_pos_lo, ZL
    7bce:	e0 93 ee 0c 	sts	0x0CEE, r30
	sts   tr5_pos_hi, ZH
    7bd2:	f0 93 ef 0c 	sts	0x0CEF, r31

	lpm   r16,     Z       ; Load sample
    7bd6:	04 91       	lpm	r16, Z
	movw  ZL,      r0
    7bd8:	f0 01       	movw	r30, r0
	lds   r17,     tr5_vol
    7bda:	10 91 ea 0c 	lds	r17, 0x0CEA
	mulsu r16,     r17     ; (sample * mixing_vol)
    7bde:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7be0:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7be2:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Ajust mix buffer msb
    7be4:	0e 1e       	adc	r0, r30

#endif

	; Restore no longer used registers (5 cy + 2/3 sync generator)

	movw  ZL,      r0      ; Move mix buffer for Final processing
    7be6:	f0 01       	movw	r30, r0
	pop   r16
    7be8:	0f 91       	pop	r16
	pop   r17
    7bea:	1f 91       	pop	r17
	;--------------------------------------------
#endif

	; Final processing (9 cy)

	subi  ZH,      0x80
    7bec:	f0 58       	subi	r31, 0x80	; 128
	sbci  ZL,      0xFF    ; Converts to unsigned
    7bee:	ef 4f       	sbci	r30, 0xFF	; 255
	brpl  .+6
    7bf0:	1a f4       	brpl	.+6      	; 0x7bf8 <ch5_nores+0x2a>
	ldi   ZH,      0x00    ; Saturate from bottom to 0x00
    7bf2:	f0 e0       	ldi	r31, 0x00	; 0
	nop
    7bf4:	00 00       	nop
	rjmp  .+6
    7bf6:	03 c0       	rjmp	.+6      	; 0x7bfe <ch5_nores+0x30>
	cpi   ZL,      0x00
    7bf8:	e0 30       	cpi	r30, 0x00	; 0
	breq  .+2
    7bfa:	09 f0       	breq	.+2      	; 0x7bfe <ch5_nores+0x30>
	ldi   ZH,      0xFF    ; Saturate from top to 0xFF
    7bfc:	ff ef       	ldi	r31, 0xFF	; 255
	sts   _SFR_MEM_ADDR(OCR2A), ZH ; Output sound byte
    7bfe:	f0 93 b3 00 	sts	0x00B3, r31

uart_tx_end:

#endif

	pop   r18
    7c02:	2f 91       	pop	r18

	ret
    7c04:	08 95       	ret

00007c06 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7c06:	80 93 a7 0c 	sts	0x0CA7, r24
	sts sprites_tile_banks+1,r25
    7c0a:	90 93 a8 0c 	sts	0x0CA8, r25
	ret
    7c0e:	08 95       	ret

00007c10 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7c10:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7c12:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7c14:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7c16:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7c18:	6c e1       	ldi	r22, 0x1C	; 28

00007c1a <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7c1a:	6d 93       	st	X+, r22
	sbiw r30,1
    7c1c:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7c1e:	e9 f7       	brne	.-6      	; 0x7c1a <fill_vram_loop>

	clr r1
    7c20:	11 24       	eor	r1, r1

	ret
    7c22:	08 95       	ret

00007c24 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7c24:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7c26:	76 2f       	mov	r23, r22
	lsr r22
    7c28:	66 95       	lsr	r22
	lsr r22
    7c2a:	66 95       	lsr	r22
	lsr r22			;y>>3
    7c2c:	66 95       	lsr	r22
	ldi r18,8		
    7c2e:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    7c30:	82 9f       	mul	r24, r18
	movw XL,r0
    7c32:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7c34:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7c36:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7c38:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7c3a:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7c3c:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7c3e:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    7c40:	4c 93       	st	X, r20

	clr r1
    7c42:	11 24       	eor	r1, r1

	ret
    7c44:	08 95       	ret

00007c46 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7c46:	80 93 af 0c 	sts	0x0CAF, r24
	sts tile_table_hi,r25	
    7c4a:	90 93 b0 0c 	sts	0x0CB0, r25
	ret
    7c4e:	08 95       	ret

00007c50 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7c50:	80 91 ba 0c 	lds	r24, 0x0CBA
	andi r24,SYNC_FLAG_VSYNC
    7c54:	81 70       	andi	r24, 0x01	; 1
	ret
    7c56:	08 95       	ret

00007c58 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7c58:	20 91 ba 0c 	lds	r18, 0x0CBA
	andi r18,~SYNC_FLAG_VSYNC
    7c5c:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7c5e:	20 93 ba 0c 	sts	0x0CBA, r18
	ret
    7c62:	08 95       	ret

00007c64 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7c64:	88 23       	and	r24, r24
	brne rj_p2
    7c66:	29 f4       	brne	.+10     	; 0x7c72 <rj_p2>
		
	lds r24,joypad1_status_lo
    7c68:	80 91 c1 0c 	lds	r24, 0x0CC1
	lds r25,joypad1_status_lo+1
    7c6c:	90 91 c2 0c 	lds	r25, 0x0CC2
	ret
    7c70:	08 95       	ret

00007c72 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7c72:	80 91 c5 0c 	lds	r24, 0x0CC5
	lds r25,joypad2_status_lo+1	
    7c76:	90 91 c6 0c 	lds	r25, 0x0CC6

	ret
    7c7a:	08 95       	ret

00007c7c <SoftReset>:
	; This may happen if the soft reset is called from interrupt, which
	; happens if CONTROLLERS_VSYNC_READ is set nonzero.
	; Note that no "wdr" is used, it is unnecessary. If the watchdog
	; resets right when it was enabled, that's all right.
	
	ldi  ZL,       lo8(_SFR_MEM_ADDR(WDTCSR))
    7c7c:	e0 e6       	ldi	r30, 0x60	; 96
	ldi  ZH,       hi8(_SFR_MEM_ADDR(WDTCSR))
    7c7e:	f0 e0       	ldi	r31, 0x00	; 0
	ld   r24,      Z
    7c80:	80 81       	ld	r24, Z
	sbrc r24,      WDE     ; Watchdog already enabled?
    7c82:	83 fd       	sbrc	r24, 3
	ret                    ; If so, return doing nothing (let it time out)
    7c84:	08 95       	ret
	ldi  r24,      (1 << WDCE) | (1 << WDE)
    7c86:	88 e1       	ldi	r24, 0x18	; 24
	ldi  r25,      (1 << WDE) ; Enable Watchdog, 16ms timeout
    7c88:	98 e0       	ldi	r25, 0x08	; 8
	cli
    7c8a:	f8 94       	cli
	st   Z,        r24
    7c8c:	80 83       	st	Z, r24
	st   Z,        r25
    7c8e:	90 83       	st	Z, r25
	sei
    7c90:	78 94       	sei
	rjmp .-2               ; Halt user program
    7c92:	ff cf       	rjmp	.-2      	; 0x7c92 <SoftReset+0x16>

00007c94 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7c94:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7c96:	fe cf       	rjmp	.-4      	; 0x7c94 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7c98:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7c9a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7c9c:	60 bd       	out	0x20, r22	; 32
   cli
    7c9e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7ca0:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7ca2:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7ca4:	78 94       	sei
   ret
    7ca6:	08 95       	ret

00007ca8 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7ca8:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7caa:	fe cf       	rjmp	.-4      	; 0x7ca8 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7cac:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7cae:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7cb0:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7cb2:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7cb4:	80 b5       	in	r24, 0x20	; 32
   sei
    7cb6:	78 94       	sei
   ret
    7cb8:	08 95       	ret

00007cba <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7cba:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7cbc:	80 93 b9 0c 	sts	0x0CB9, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7cc0:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7cc4:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7cc8:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7ccc:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7cd0:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7cd4:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7cd8:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7cdc:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7ce0:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7ce2:	80 93 81 00 	sts	0x0081, r24

		cli
    7ce6:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7ce8:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7cea:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7cee:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7cf0:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7cf4:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7cf6:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7cfa:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7cfe:	78 94       	sei

00007d00 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7d00:	80 91 b9 0c 	lds	r24, 0x0CB9
		cpi r24,8
    7d04:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7d06:	e0 f3       	brcs	.-8      	; 0x7d00 <wait>

		ret
    7d08:	08 95       	ret

00007d0a <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7d0a:	80 91 cb 0c 	lds	r24, 0x0CCB
		lds r25,random_value+1
    7d0e:	90 91 cc 0c 	lds	r25, 0x0CCC
		ret
    7d12:	08 95       	ret

00007d14 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7d14:	0f 93       	push	r16
		push r17
    7d16:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7d18:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7d1a:	0f 93       	push	r16

		lds r16,sync_pulse
    7d1c:	00 91 b9 0c 	lds	r16, 0x0CB9
		inc r16
    7d20:	03 95       	inc	r16
		sts sync_pulse,r16
    7d22:	00 93 b9 0c 	sts	0x0CB9, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7d26:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7d28:	08 c0       	rjmp	.+16     	; 0x7d3a <__vector_8+0x26>
		lds r17,random_value
    7d2a:	10 91 cb 0c 	lds	r17, 0x0CCB
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d2e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d32:	10 27       	eor	r17, r16
		sts random_value,r17
    7d34:	10 93 cb 0c 	sts	0x0CCB, r17
		rjmp 2f
    7d38:	07 c0       	rjmp	.+14     	; 0x7d48 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7d3a:	10 91 cc 0c 	lds	r17, 0x0CCC
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d3e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d42:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7d44:	10 93 cc 0c 	sts	0x0CCC, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7d48:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7d4a:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7d4e:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7d50:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7d52:	1f 91       	pop	r17
		pop r16
    7d54:	0f 91       	pop	r16
		reti
    7d56:	18 95       	reti

00007d58 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7d58:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7d5a:	c8 95       	lpm
    7d5c:	c8 95       	lpm
		Wait200ns();
    7d5e:	c8 95       	lpm
    7d60:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7d62:	12 98       	cbi	0x02, 2	; 2
    7d64:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();

}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7d66:	80 e0       	ldi	r24, 0x00	; 0
    7d68:	90 e0       	ldi	r25, 0x00	; 0
    7d6a:	20 e0       	ldi	r18, 0x00	; 0
    7d6c:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7d6e:	36 95       	lsr	r19
    7d70:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7d72:	96 95       	lsr	r25
    7d74:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d76:	c8 95       	lpm
    7d78:	c8 95       	lpm
			Wait200ns();
    7d7a:	c8 95       	lpm
    7d7c:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7d7e:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7d80:	00 9b       	sbis	0x00, 0	; 0
    7d82:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7d84:	01 9b       	sbis	0x00, 1	; 0
    7d86:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7d88:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d8a:	c8 95       	lpm
    7d8c:	c8 95       	lpm
			Wait200ns();
    7d8e:	c8 95       	lpm
    7d90:	c8 95       	lpm
    7d92:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7d94:	61 f7       	brne	.-40     	; 0x7d6e <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7d96:	30 93 c2 0c 	sts	0x0CC2, r19
    7d9a:	20 93 c1 0c 	sts	0x0CC1, r18
		joypad2_status_lo=p2ButtonsLo;
    7d9e:	90 93 c6 0c 	sts	0x0CC6, r25
    7da2:	80 93 c5 0c 	sts	0x0CC5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7da6:	80 91 c1 0c 	lds	r24, 0x0CC1
    7daa:	90 91 c2 0c 	lds	r25, 0x0CC2
    7dae:	0f 97       	sbiw	r24, 0x0f	; 15
    7db0:	31 f0       	breq	.+12     	; 0x7dbe <ReadButtons+0x66>
    7db2:	80 91 c5 0c 	lds	r24, 0x0CC5
    7db6:	90 91 c6 0c 	lds	r25, 0x0CC6
    7dba:	0f 97       	sbiw	r24, 0x0f	; 15
    7dbc:	11 f4       	brne	.+4      	; 0x7dc2 <ReadButtons+0x6a>
		SoftReset();
    7dbe:	0c 94 3e 3e 	jmp	0x7c7c	; 0x7c7c <SoftReset>
    7dc2:	08 95       	ret

00007dc4 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7dc4:	10 92 ff 0c 	sts	0x0CFF, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7dc8:	00 99       	sbic	0x00, 0	; 0
    7dca:	03 c0       	rjmp	.+6      	; 0x7dd2 <ReadControllers+0xe>
    7dcc:	81 e0       	ldi	r24, 0x01	; 1
    7dce:	80 93 ff 0c 	sts	0x0CFF, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7dd2:	01 99       	sbic	0x00, 1	; 0
    7dd4:	05 c0       	rjmp	.+10     	; 0x7de0 <ReadControllers+0x1c>
    7dd6:	80 91 ff 0c 	lds	r24, 0x0CFF
    7dda:	82 60       	ori	r24, 0x02	; 2
    7ddc:	80 93 ff 0c 	sts	0x0CFF, r24
			
	//read the standard buttons
	ReadButtons();
    7de0:	0c 94 ac 3e 	jmp	0x7d58	; 0x7d58 <ReadButtons>

00007de4 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7de4:	cf 93       	push	r28
    7de6:	df 93       	push	r29
    7de8:	c0 e0       	ldi	r28, 0x00	; 0
    7dea:	d0 e0       	ldi	r29, 0x00	; 0
    7dec:	fe 01       	movw	r30, r28
    7dee:	e8 53       	subi	r30, 0x38	; 56
    7df0:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7df2:	64 91       	lpm	r22, Z
    7df4:	ce 01       	movw	r24, r28
    7df6:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <WriteEeprom>
    7dfa:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7dfc:	c0 32       	cpi	r28, 0x20	; 32
    7dfe:	d1 05       	cpc	r29, r1
    7e00:	a9 f7       	brne	.-22     	; 0x7dec <FormatEeprom+0x8>
    7e02:	c0 e2       	ldi	r28, 0x20	; 32
    7e04:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7e06:	6f ef       	ldi	r22, 0xFF	; 255
    7e08:	ce 01       	movw	r24, r28
    7e0a:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7e0e:	6f ef       	ldi	r22, 0xFF	; 255
    7e10:	ce 01       	movw	r24, r28
    7e12:	01 96       	adiw	r24, 0x01	; 1
    7e14:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7e18:	a0 96       	adiw	r28, 0x20	; 32
    7e1a:	c1 15       	cp	r28, r1
    7e1c:	88 e0       	ldi	r24, 0x08	; 8
    7e1e:	d8 07       	cpc	r29, r24
    7e20:	91 f7       	brne	.-28     	; 0x7e06 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7e22:	df 91       	pop	r29
    7e24:	cf 91       	pop	r28
    7e26:	08 95       	ret

00007e28 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7e28:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7e2a:	80 e0       	ldi	r24, 0x00	; 0
    7e2c:	90 e0       	ldi	r25, 0x00	; 0
    7e2e:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <ReadEeprom>
    7e32:	c8 2f       	mov	r28, r24
    7e34:	81 e0       	ldi	r24, 0x01	; 1
    7e36:	90 e0       	ldi	r25, 0x00	; 0
    7e38:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <ReadEeprom>
    7e3c:	28 2f       	mov	r18, r24
    7e3e:	30 e0       	ldi	r19, 0x00	; 0
    7e40:	32 2f       	mov	r19, r18
    7e42:	22 27       	eor	r18, r18
    7e44:	2c 0f       	add	r18, r28
    7e46:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7e48:	81 e0       	ldi	r24, 0x01	; 1
    7e4a:	2a 35       	cpi	r18, 0x5A	; 90
    7e4c:	35 45       	sbci	r19, 0x55	; 85
    7e4e:	09 f0       	breq	.+2      	; 0x7e52 <isEepromFormatted+0x2a>
    7e50:	80 e0       	ldi	r24, 0x00	; 0
}
    7e52:	cf 91       	pop	r28
    7e54:	08 95       	ret

00007e56 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7e56:	8f 92       	push	r8
    7e58:	9f 92       	push	r9
    7e5a:	af 92       	push	r10
    7e5c:	bf 92       	push	r11
    7e5e:	cf 92       	push	r12
    7e60:	df 92       	push	r13
    7e62:	ef 92       	push	r14
    7e64:	ff 92       	push	r15
    7e66:	0f 93       	push	r16
    7e68:	1f 93       	push	r17
    7e6a:	cf 93       	push	r28
    7e6c:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7e6e:	fb 01       	movw	r30, r22
    7e70:	11 82       	std	Z+1, r1	; 0x01
    7e72:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7e74:	8f 3f       	cpi	r24, 0xFF	; 255
    7e76:	ff ef       	ldi	r31, 0xFF	; 255
    7e78:	9f 07       	cpc	r25, r31
    7e7a:	89 f1       	breq	.+98     	; 0x7ede <EepromBlockExists+0x88>
    7e7c:	6a 01       	movw	r12, r20
    7e7e:	8b 01       	movw	r16, r22
    7e80:	7c 01       	movw	r14, r24
    7e82:	a1 2c       	mov	r10, r1
    7e84:	b1 2c       	mov	r11, r1
    7e86:	c0 e0       	ldi	r28, 0x00	; 0
    7e88:	d3 e0       	ldi	r29, 0x03	; 3
    7e8a:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7e8c:	c5 01       	movw	r24, r10
    7e8e:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <ReadEeprom>
    7e92:	88 2e       	mov	r8, r24
    7e94:	c5 01       	movw	r24, r10
    7e96:	01 96       	adiw	r24, 0x01	; 1
    7e98:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <ReadEeprom>
    7e9c:	28 2f       	mov	r18, r24
    7e9e:	30 e0       	ldi	r19, 0x00	; 0
    7ea0:	32 2f       	mov	r19, r18
    7ea2:	22 27       	eor	r18, r18
    7ea4:	28 0d       	add	r18, r8
    7ea6:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7ea8:	2e 15       	cp	r18, r14
    7eaa:	3f 05       	cpc	r19, r15
    7eac:	29 f4       	brne	.+10     	; 0x7eb8 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7eae:	f8 01       	movw	r30, r16
    7eb0:	b1 82       	std	Z+1, r11	; 0x01
    7eb2:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7eb4:	d0 e0       	ldi	r29, 0x00	; 0
    7eb6:	0b c0       	rjmp	.+22     	; 0x7ece <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7eb8:	2f 3f       	cpi	r18, 0xFF	; 255
    7eba:	3f 4f       	sbci	r19, 0xFF	; 255
    7ebc:	41 f4       	brne	.+16     	; 0x7ece <EepromBlockExists+0x78>
    7ebe:	91 10       	cpse	r9, r1
    7ec0:	06 c0       	rjmp	.+12     	; 0x7ece <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7ec2:	c1 14       	cp	r12, r1
    7ec4:	d1 04       	cpc	r13, r1
    7ec6:	11 f0       	breq	.+4      	; 0x7ecc <EepromBlockExists+0x76>
    7ec8:	f6 01       	movw	r30, r12
    7eca:	c0 83       	st	Z, r28
    7ecc:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7ece:	cf 5f       	subi	r28, 0xFF	; 255
    7ed0:	f0 e2       	ldi	r31, 0x20	; 32
    7ed2:	af 0e       	add	r10, r31
    7ed4:	b1 1c       	adc	r11, r1
    7ed6:	c0 34       	cpi	r28, 0x40	; 64
    7ed8:	c9 f6       	brne	.-78     	; 0x7e8c <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7eda:	8d 2f       	mov	r24, r29
    7edc:	01 c0       	rjmp	.+2      	; 0x7ee0 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7ede:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7ee0:	df 91       	pop	r29
    7ee2:	cf 91       	pop	r28
    7ee4:	1f 91       	pop	r17
    7ee6:	0f 91       	pop	r16
    7ee8:	ff 90       	pop	r15
    7eea:	ef 90       	pop	r14
    7eec:	df 90       	pop	r13
    7eee:	cf 90       	pop	r12
    7ef0:	bf 90       	pop	r11
    7ef2:	af 90       	pop	r10
    7ef4:	9f 90       	pop	r9
    7ef6:	8f 90       	pop	r8
    7ef8:	08 95       	ret

00007efa <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7efa:	ef 92       	push	r14
    7efc:	ff 92       	push	r15
    7efe:	0f 93       	push	r16
    7f00:	1f 93       	push	r17
    7f02:	cf 93       	push	r28
    7f04:	df 93       	push	r29
    7f06:	00 d0       	rcall	.+0      	; 0x7f08 <EepromWriteBlock+0xe>
    7f08:	1f 92       	push	r1
    7f0a:	cd b7       	in	r28, 0x3d	; 61
    7f0c:	de b7       	in	r29, 0x3e	; 62
    7f0e:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7f10:	1a 82       	std	Y+2, r1	; 0x02
    7f12:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    7f14:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    7f16:	ae 01       	movw	r20, r28
    7f18:	4d 5f       	subi	r20, 0xFD	; 253
    7f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    7f1c:	be 01       	movw	r22, r28
    7f1e:	6f 5f       	subi	r22, 0xFF	; 255
    7f20:	7f 4f       	sbci	r23, 0xFF	; 255
    7f22:	fc 01       	movw	r30, r24
    7f24:	80 81       	ld	r24, Z
    7f26:	91 81       	ldd	r25, Z+1	; 0x01
    7f28:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7f2c:	88 23       	and	r24, r24
    7f2e:	11 f0       	breq	.+4      	; 0x7f34 <EepromWriteBlock+0x3a>
    7f30:	83 30       	cpi	r24, 0x03	; 3
    7f32:	19 f5       	brne	.+70     	; 0x7f7a <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f34:	89 81       	ldd	r24, Y+1	; 0x01
    7f36:	9a 81       	ldd	r25, Y+2	; 0x02
    7f38:	89 2b       	or	r24, r25
    7f3a:	49 f4       	brne	.+18     	; 0x7f4e <EepromWriteBlock+0x54>
    7f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    7f3e:	88 23       	and	r24, r24
    7f40:	d9 f0       	breq	.+54     	; 0x7f78 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7f42:	f0 e2       	ldi	r31, 0x20	; 32
    7f44:	8f 9f       	mul	r24, r31
    7f46:	c0 01       	movw	r24, r0
    7f48:	11 24       	eor	r1, r1
    7f4a:	9a 83       	std	Y+2, r25	; 0x02
    7f4c:	89 83       	std	Y+1, r24	; 0x01
    7f4e:	78 01       	movw	r14, r16
    7f50:	20 e2       	ldi	r18, 0x20	; 32
    7f52:	e2 0e       	add	r14, r18
    7f54:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7f56:	f8 01       	movw	r30, r16
    7f58:	61 91       	ld	r22, Z+
    7f5a:	8f 01       	movw	r16, r30
    7f5c:	89 81       	ldd	r24, Y+1	; 0x01
    7f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f60:	9c 01       	movw	r18, r24
    7f62:	2f 5f       	subi	r18, 0xFF	; 255
    7f64:	3f 4f       	sbci	r19, 0xFF	; 255
    7f66:	3a 83       	std	Y+2, r19	; 0x02
    7f68:	29 83       	std	Y+1, r18	; 0x01
    7f6a:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7f6e:	0e 15       	cp	r16, r14
    7f70:	1f 05       	cpc	r17, r15
    7f72:	89 f7       	brne	.-30     	; 0x7f56 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7f74:	80 e0       	ldi	r24, 0x00	; 0
    7f76:	01 c0       	rjmp	.+2      	; 0x7f7a <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f78:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7f7a:	0f 90       	pop	r0
    7f7c:	0f 90       	pop	r0
    7f7e:	0f 90       	pop	r0
    7f80:	df 91       	pop	r29
    7f82:	cf 91       	pop	r28
    7f84:	1f 91       	pop	r17
    7f86:	0f 91       	pop	r16
    7f88:	ff 90       	pop	r15
    7f8a:	ef 90       	pop	r14
    7f8c:	08 95       	ret

00007f8e <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7f8e:	cf 92       	push	r12
    7f90:	df 92       	push	r13
    7f92:	ff 92       	push	r15
    7f94:	0f 93       	push	r16
    7f96:	1f 93       	push	r17
    7f98:	cf 93       	push	r28
    7f9a:	df 93       	push	r29
    7f9c:	00 d0       	rcall	.+0      	; 0x7f9e <EepromReadBlock+0x10>
    7f9e:	cd b7       	in	r28, 0x3d	; 61
    7fa0:	de b7       	in	r29, 0x3e	; 62
    7fa2:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7fa4:	40 e0       	ldi	r20, 0x00	; 0
    7fa6:	50 e0       	ldi	r21, 0x00	; 0
    7fa8:	be 01       	movw	r22, r28
    7faa:	6f 5f       	subi	r22, 0xFF	; 255
    7fac:	7f 4f       	sbci	r23, 0xFF	; 255
    7fae:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <EepromBlockExists>
    7fb2:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7fb4:	81 11       	cpse	r24, r1
    7fb6:	13 c0       	rjmp	.+38     	; 0x7fde <EepromReadBlock+0x50>
    7fb8:	68 01       	movw	r12, r16
    7fba:	80 e2       	ldi	r24, 0x20	; 32
    7fbc:	c8 0e       	add	r12, r24
    7fbe:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7fc0:	89 81       	ldd	r24, Y+1	; 0x01
    7fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    7fc4:	9c 01       	movw	r18, r24
    7fc6:	2f 5f       	subi	r18, 0xFF	; 255
    7fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    7fca:	3a 83       	std	Y+2, r19	; 0x02
    7fcc:	29 83       	std	Y+1, r18	; 0x01
    7fce:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <ReadEeprom>
    7fd2:	f8 01       	movw	r30, r16
    7fd4:	81 93       	st	Z+, r24
    7fd6:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7fd8:	ec 15       	cp	r30, r12
    7fda:	fd 05       	cpc	r31, r13
    7fdc:	89 f7       	brne	.-30     	; 0x7fc0 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7fde:	8f 2d       	mov	r24, r15
    7fe0:	0f 90       	pop	r0
    7fe2:	0f 90       	pop	r0
    7fe4:	df 91       	pop	r29
    7fe6:	cf 91       	pop	r28
    7fe8:	1f 91       	pop	r17
    7fea:	0f 91       	pop	r16
    7fec:	ff 90       	pop	r15
    7fee:	df 90       	pop	r13
    7ff0:	cf 90       	pop	r12
    7ff2:	08 95       	ret

00007ff4 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7ff4:	00 97       	sbiw	r24, 0x00	; 0
    7ff6:	21 f0       	breq	.+8      	; 0x8000 <GetPrngNumber+0xc>
    7ff8:	90 93 cf 0c 	sts	0x0CCF, r25
    7ffc:	80 93 ce 0c 	sts	0x0CCE, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8000:	20 91 ce 0c 	lds	r18, 0x0CCE
    8004:	30 91 cf 0c 	lds	r19, 0x0CCF
    8008:	a9 01       	movw	r20, r18
    800a:	56 95       	lsr	r21
    800c:	47 95       	ror	r20
    800e:	56 95       	lsr	r21
    8010:	47 95       	ror	r20
    8012:	c9 01       	movw	r24, r18
    8014:	63 e0       	ldi	r22, 0x03	; 3
    8016:	96 95       	lsr	r25
    8018:	87 95       	ror	r24
    801a:	6a 95       	dec	r22
    801c:	e1 f7       	brne	.-8      	; 0x8016 <GetPrngNumber+0x22>
    801e:	84 27       	eor	r24, r20
    8020:	95 27       	eor	r25, r21
    8022:	82 27       	eor	r24, r18
    8024:	93 27       	eor	r25, r19
    8026:	a9 01       	movw	r20, r18
    8028:	75 e0       	ldi	r23, 0x05	; 5
    802a:	56 95       	lsr	r21
    802c:	47 95       	ror	r20
    802e:	7a 95       	dec	r23
    8030:	e1 f7       	brne	.-8      	; 0x802a <GetPrngNumber+0x36>
    8032:	84 27       	eor	r24, r20
    8034:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8036:	99 27       	eor	r25, r25
    8038:	86 95       	lsr	r24
    803a:	97 95       	ror	r25
    803c:	88 27       	eor	r24, r24
    803e:	36 95       	lsr	r19
    8040:	27 95       	ror	r18
    8042:	82 2b       	or	r24, r18
    8044:	93 2b       	or	r25, r19
    8046:	90 93 cf 0c 	sts	0x0CCF, r25
    804a:	80 93 ce 0c 	sts	0x0CCE, r24
	return prng_state;   
}
    804e:	08 95       	ret

00008050 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8050:	fc 01       	movw	r30, r24
    8052:	67 87       	std	Z+15, r22	; 0x0f
    8054:	08 95       	ret

00008056 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8056:	e2 ed       	ldi	r30, 0xD2	; 210
    8058:	fc e0       	ldi	r31, 0x0C	; 12
    805a:	81 e0       	ldi	r24, 0x01	; 1
    805c:	91 e0       	ldi	r25, 0x01	; 1
    805e:	95 8b       	std	Z+21, r25	; 0x15
    8060:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8062:	63 8b       	std	Z+19, r22	; 0x13
    8064:	08 95       	ret

00008066 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8066:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8068:	90 81       	ld	r25, Z
    806a:	9f 75       	andi	r25, 0x5F	; 95
    806c:	90 83       	st	Z, r25
    806e:	08 95       	ret

00008070 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8070:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8072:	90 81       	ld	r25, Z
    8074:	90 64       	ori	r25, 0x40	; 64
    8076:	90 83       	st	Z, r25
    8078:	08 95       	ret

0000807a <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    807a:	fc 01       	movw	r30, r24
    807c:	66 87       	std	Z+14, r22	; 0x0e
    807e:	08 95       	ret

00008080 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8080:	fc 01       	movw	r30, r24
    8082:	62 87       	std	Z+10, r22	; 0x0a
    8084:	08 95       	ret

00008086 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8086:	fc 01       	movw	r30, r24
    8088:	63 87       	std	Z+11, r22	; 0x0b
    808a:	08 95       	ret

0000808c <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    808c:	cf 93       	push	r28
    808e:	df 93       	push	r29
    8090:	ec 01       	movw	r28, r24
    8092:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8094:	29 81       	ldd	r18, Y+1	; 0x01
    8096:	30 e0       	ldi	r19, 0x00	; 0
    8098:	f9 01       	movw	r30, r18
    809a:	ee 0f       	add	r30, r30
    809c:	ff 1f       	adc	r31, r31
    809e:	e2 58       	subi	r30, 0x82	; 130
    80a0:	f6 47       	sbci	r31, 0x76	; 118
    80a2:	65 91       	lpm	r22, Z+
    80a4:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    80a6:	f9 01       	movw	r30, r18
    80a8:	e4 0f       	add	r30, r20
    80aa:	f1 1d       	adc	r31, r1
    80ac:	47 fd       	sbrc	r20, 7
    80ae:	fa 95       	dec	r31
    80b0:	ee 0f       	add	r30, r30
    80b2:	ff 1f       	adc	r31, r31
    80b4:	e2 58       	subi	r30, 0x82	; 130
    80b6:	f6 47       	sbci	r31, 0x76	; 118
    80b8:	85 91       	lpm	r24, Z+
    80ba:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    80bc:	86 1b       	sub	r24, r22
    80be:	97 0b       	sbc	r25, r23
    80c0:	68 85       	ldd	r22, Y+8	; 0x08
    80c2:	70 e0       	ldi	r23, 0x00	; 0
    80c4:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
	if(delta==0)delta++;
    80c8:	61 15       	cp	r22, r1
    80ca:	71 05       	cpc	r23, r1
    80cc:	11 f4       	brne	.+4      	; 0x80d2 <PatchCommand11+0x46>
    80ce:	61 e0       	ldi	r22, 0x01	; 1
    80d0:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    80d2:	ea 81       	ldd	r30, Y+2	; 0x02
    80d4:	86 e0       	ldi	r24, 0x06	; 6
    80d6:	e8 9f       	mul	r30, r24
    80d8:	f0 01       	movw	r30, r0
    80da:	11 24       	eor	r1, r1
    80dc:	ee 52       	subi	r30, 0x2E	; 46
    80de:	f3 4f       	sbci	r31, 0xF3	; 243
    80e0:	81 81       	ldd	r24, Z+1	; 0x01
    80e2:	92 81       	ldd	r25, Z+2	; 0x02
    80e4:	86 0f       	add	r24, r22
    80e6:	97 1f       	adc	r25, r23
    80e8:	92 83       	std	Z+2, r25	; 0x02
    80ea:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    80ec:	7e 83       	std	Y+6, r23	; 0x06
    80ee:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    80f0:	88 81       	ld	r24, Y
    80f2:	88 60       	ori	r24, 0x08	; 8
    80f4:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    80f6:	89 81       	ldd	r24, Y+1	; 0x01
    80f8:	48 0f       	add	r20, r24
    80fa:	4f 83       	std	Y+7, r20	; 0x07
}
    80fc:	df 91       	pop	r29
    80fe:	cf 91       	pop	r28
    8100:	08 95       	ret

00008102 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8102:	fc 01       	movw	r30, r24
    8104:	60 87       	std	Z+8, r22	; 0x08
    8106:	08 95       	ret

00008108 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8108:	fc 01       	movw	r30, r24
    810a:	64 83       	std	Z+4, r22	; 0x04
    810c:	08 95       	ret

0000810e <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    810e:	fc 01       	movw	r30, r24
    8110:	82 81       	ldd	r24, Z+2	; 0x02
    8112:	0c 94 a2 44 	jmp	0x8944	; 0x8944 <SetMixerWave>

00008116 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8116:	fc 01       	movw	r30, r24
	track->note+=param;
    8118:	91 81       	ldd	r25, Z+1	; 0x01
    811a:	69 0f       	add	r22, r25
    811c:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    811e:	82 81       	ldd	r24, Z+2	; 0x02
    8120:	0c 94 8b 44 	jmp	0x8916	; 0x8916 <SetMixerNote>

00008124 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8124:	fc 01       	movw	r30, r24
	track->note-=param;
    8126:	91 81       	ldd	r25, Z+1	; 0x01
    8128:	96 1b       	sub	r25, r22
    812a:	69 2f       	mov	r22, r25
    812c:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    812e:	82 81       	ldd	r24, Z+2	; 0x02
    8130:	0c 94 8b 44 	jmp	0x8916	; 0x8916 <SetMixerNote>

00008134 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8134:	1f 93       	push	r17
    8136:	cf 93       	push	r28
    8138:	df 93       	push	r29
    813a:	ec 01       	movw	r28, r24
    813c:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    813e:	8a 81       	ldd	r24, Y+2	; 0x02
    8140:	0e 94 8b 44 	call	0x8916	; 0x8916 <SetMixerNote>
	track->note=param;
    8144:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8146:	88 81       	ld	r24, Y
    8148:	87 7f       	andi	r24, 0xF7	; 247
    814a:	88 83       	st	Y, r24
}
    814c:	df 91       	pop	r29
    814e:	cf 91       	pop	r28
    8150:	1f 91       	pop	r17
    8152:	08 95       	ret

00008154 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8154:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8156:	14 96       	adiw	r26, 0x04	; 4
    8158:	8c 91       	ld	r24, X
    815a:	14 97       	sbiw	r26, 0x04	; 4
    815c:	88 23       	and	r24, r24
    815e:	19 f1       	breq	.+70     	; 0x81a6 <PatchCommand14+0x52>
    8160:	55 96       	adiw	r26, 0x15	; 21
    8162:	2d 91       	ld	r18, X+
    8164:	3c 91       	ld	r19, X
    8166:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8168:	66 23       	and	r22, r22
    816a:	79 f0       	breq	.+30     	; 0x818a <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    816c:	77 27       	eor	r23, r23
    816e:	67 fd       	sbrc	r22, 7
    8170:	70 95       	com	r23
    8172:	6f 5f       	subi	r22, 0xFF	; 255
    8174:	7f 4f       	sbci	r23, 0xFF	; 255
    8176:	ab 01       	movw	r20, r22
    8178:	44 0f       	add	r20, r20
    817a:	55 1f       	adc	r21, r21
    817c:	64 0f       	add	r22, r20
    817e:	75 1f       	adc	r23, r21
    8180:	26 1b       	sub	r18, r22
    8182:	37 0b       	sbc	r19, r23
    8184:	09 c0       	rjmp	.+18     	; 0x8198 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8186:	ef 3f       	cpi	r30, 0xFF	; 255
    8188:	39 f0       	breq	.+14     	; 0x8198 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    818a:	23 50       	subi	r18, 0x03	; 3
    818c:	31 09       	sbc	r19, r1
    818e:	f9 01       	movw	r30, r18
    8190:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8192:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8194:	ed 30       	cpi	r30, 0x0D	; 13
    8196:	b9 f7       	brne	.-18     	; 0x8186 <PatchCommand14+0x32>
    8198:	56 96       	adiw	r26, 0x16	; 22
    819a:	3c 93       	st	X, r19
    819c:	2e 93       	st	-X, r18
    819e:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    81a0:	81 50       	subi	r24, 0x01	; 1
    81a2:	14 96       	adiw	r26, 0x04	; 4
    81a4:	8c 93       	st	X, r24
    81a6:	08 95       	ret

000081a8 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    81a8:	90 93 78 0d 	sts	0x0D78, r25
    81ac:	80 93 77 0d 	sts	0x0D77, r24

	masterVolume=DEFAULT_MASTER_VOL;
    81b0:	8f e6       	ldi	r24, 0x6F	; 111
    81b2:	80 93 7a 0d 	sts	0x0D7A, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    81b6:	10 92 d0 0c 	sts	0x0CD0, r1
    81ba:	e2 e1       	ldi	r30, 0x12	; 18
    81bc:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    81be:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    81c0:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    81c2:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    81c4:	28 e1       	ldi	r18, 0x18	; 24
    81c6:	df 01       	movw	r26, r30
    81c8:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    81ca:	8c 93       	st	X, r24
    81cc:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    81ce:	9c 93       	st	X, r25
    81d0:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    81d2:	1c 92       	st	X, r1
    81d4:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    81d6:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    81d8:	10 82       	st	Z, r1
    81da:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    81dc:	2c 93       	st	X, r18
    81de:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    81e0:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    81e2:	8f 5f       	subi	r24, 0xFF	; 255
    81e4:	77 96       	adiw	r30, 0x17	; 23
    81e6:	85 30       	cpi	r24, 0x05	; 5
    81e8:	71 f7       	brne	.-36     	; 0x81c6 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    81ea:	08 95       	ret

000081ec <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    81ec:	e2 e0       	ldi	r30, 0x02	; 2
    81ee:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    81f0:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    81f2:	20 81       	ld	r18, Z
    81f4:	2f 77       	andi	r18, 0x7F	; 127
    81f6:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    81f8:	33 83       	std	Z+3, r19	; 0x03
    81fa:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    81fc:	2d e0       	ldi	r18, 0x0D	; 13
    81fe:	e5 37       	cpi	r30, 0x75	; 117
    8200:	f2 07       	cpc	r31, r18
    8202:	b9 f7       	brne	.-18     	; 0x81f2 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8204:	01 96       	adiw	r24, 0x01	; 1
    8206:	90 93 7f 0d 	sts	0x0D7F, r25
    820a:	80 93 7e 0d 	sts	0x0D7E, r24
		songStart=song+1;//skip first delta-time
    820e:	90 93 01 0d 	sts	0x0D01, r25
    8212:	80 93 00 0d 	sts	0x0D00, r24
		loopStart=song+1;
    8216:	90 93 81 0d 	sts	0x0D81, r25
    821a:	80 93 80 0d 	sts	0x0D80, r24
		nextDeltaTime=0;
    821e:	10 92 7c 0d 	sts	0x0D7C, r1
    8222:	10 92 7b 0d 	sts	0x0D7B, r1
		currDeltaTime=0;
    8226:	10 92 76 0d 	sts	0x0D76, r1
    822a:	10 92 75 0d 	sts	0x0D75, r1
		songSpeed=0;
    822e:	10 92 7d 0d 	sts	0x0D7D, r1

		lastStatus=0;
    8232:	10 92 79 0d 	sts	0x0D79, r1
		playSong=true;
    8236:	81 e0       	ldi	r24, 0x01	; 1
    8238:	80 93 d0 0c 	sts	0x0CD0, r24
    823c:	08 95       	ret

0000823e <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    823e:	e2 e0       	ldi	r30, 0x02	; 2
    8240:	fd e0       	ldi	r31, 0x0D	; 13
    8242:	8a ef       	ldi	r24, 0xFA	; 250
    8244:	87 87       	std	Z+15, r24	; 0x0f
    8246:	86 a3       	std	Z+38, r24	; 0x26
    8248:	80 93 3f 0d 	sts	0x0D3F, r24
    824c:	80 93 56 0d 	sts	0x0D56, r24
    8250:	80 93 6d 0d 	sts	0x0D6D, r24
	}

	playSong=false;
    8254:	10 92 d0 0c 	sts	0x0CD0, r1
    8258:	08 95       	ret

0000825a <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    825a:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    825c:	ed 91       	ld	r30, X+
    825e:	fc 91       	ld	r31, X
    8260:	11 97       	sbiw	r26, 0x01	; 1
    8262:	9f 01       	movw	r18, r30
    8264:	2f 5f       	subi	r18, 0xFF	; 255
    8266:	3f 4f       	sbci	r19, 0xFF	; 255
    8268:	11 96       	adiw	r26, 0x01	; 1
    826a:	3c 93       	st	X, r19
    826c:	2e 93       	st	-X, r18
    826e:	e4 91       	lpm	r30, Z
    8270:	e7 fd       	sbrc	r30, 7
    8272:	03 c0       	rjmp	.+6      	; 0x827a <ReadVarLen+0x20>
    8274:	8e 2f       	mov	r24, r30
    8276:	90 e0       	ldi	r25, 0x00	; 0
    8278:	08 95       	ret
    {
       value &= 0x7F;
    827a:	ef 77       	andi	r30, 0x7F	; 127
    827c:	8e 2f       	mov	r24, r30
    827e:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8280:	96 95       	lsr	r25
    8282:	98 2f       	mov	r25, r24
    8284:	88 27       	eor	r24, r24
    8286:	97 95       	ror	r25
    8288:	87 95       	ror	r24
    828a:	2f 5f       	subi	r18, 0xFF	; 255
    828c:	3f 4f       	sbci	r19, 0xFF	; 255
    828e:	f9 01       	movw	r30, r18
    8290:	31 97       	sbiw	r30, 0x01	; 1
    8292:	e4 91       	lpm	r30, Z
    8294:	4e 2f       	mov	r20, r30
    8296:	4f 77       	andi	r20, 0x7F	; 127
    8298:	84 0f       	add	r24, r20
    829a:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    829c:	e7 fd       	sbrc	r30, 7
    829e:	f0 cf       	rjmp	.-32     	; 0x8280 <ReadVarLen+0x26>
    82a0:	2d 93       	st	X+, r18
    82a2:	3c 93       	st	X, r19
    }


    return value;
}
    82a4:	08 95       	ret

000082a6 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    82a6:	ef 92       	push	r14
    82a8:	ff 92       	push	r15
    82aa:	0f 93       	push	r16
    82ac:	1f 93       	push	r17
    82ae:	cf 93       	push	r28
    82b0:	df 93       	push	r29
    82b2:	1f 92       	push	r1
    82b4:	cd b7       	in	r28, 0x3d	; 61
    82b6:	de b7       	in	r29, 0x3e	; 62
    82b8:	7c 01       	movw	r14, r24
    82ba:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    82bc:	fc 01       	movw	r30, r24
    82be:	80 81       	ld	r24, Z
    82c0:	08 2f       	mov	r16, r24
    82c2:	00 1f       	adc	r16, r16
    82c4:	00 27       	eor	r16, r16
    82c6:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    82c8:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    82ca:	9f ef       	ldi	r25, 0xFF	; 255
    82cc:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    82ce:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    82d0:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    82d2:	87 7b       	andi	r24, 0xB7	; 183
    82d4:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    82d6:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    82d8:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    82da:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    82dc:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    82de:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    82e0:	82 81       	ldd	r24, Z+2	; 0x02
    82e2:	83 30       	cpi	r24, 0x03	; 3
    82e4:	69 f4       	brne	.+26     	; 0x8300 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    82e6:	01 11       	cpse	r16, r1
    82e8:	01 c0       	rjmp	.+2      	; 0x82ec <TriggerCommon+0x46>
    82ea:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    82ec:	81 e0       	ldi	r24, 0x01	; 1
    82ee:	91 e0       	ldi	r25, 0x01	; 1
    82f0:	90 93 e7 0c 	sts	0x0CE7, r25
    82f4:	80 93 e6 0c 	sts	0x0CE6, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    82f8:	81 e0       	ldi	r24, 0x01	; 1
    82fa:	80 93 e5 0c 	sts	0x0CE5, r24
    82fe:	39 c0       	rjmp	.+114    	; 0x8372 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8300:	84 30       	cpi	r24, 0x04	; 4
    8302:	69 f5       	brne	.+90     	; 0x835e <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8304:	10 92 ed 0c 	sts	0x0CED, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8308:	80 91 77 0d 	lds	r24, 0x0D77
    830c:	90 91 78 0d 	lds	r25, 0x0D78
    8310:	f9 e0       	ldi	r31, 0x09	; 9
    8312:	6f 9f       	mul	r22, r31
    8314:	80 0d       	add	r24, r0
    8316:	91 1d       	adc	r25, r1
    8318:	11 24       	eor	r1, r1
    831a:	fc 01       	movw	r30, r24
    831c:	31 96       	adiw	r30, 0x01	; 1
    831e:	a5 91       	lpm	r26, Z+
    8320:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8322:	b0 93 ef 0c 	sts	0x0CEF, r27
    8326:	a0 93 ee 0c 	sts	0x0CEE, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    832a:	ac 01       	movw	r20, r24
    832c:	49 5f       	subi	r20, 0xF9	; 249
    832e:	5f 4f       	sbci	r21, 0xFF	; 255
    8330:	fa 01       	movw	r30, r20
    8332:	65 91       	lpm	r22, Z+
    8334:	74 91       	lpm	r23, Z
    8336:	05 96       	adiw	r24, 0x05	; 5
    8338:	fc 01       	movw	r30, r24
    833a:	85 91       	lpm	r24, Z+
    833c:	94 91       	lpm	r25, Z
    833e:	68 1b       	sub	r22, r24
    8340:	79 0b       	sbc	r23, r25
    8342:	70 93 f1 0c 	sts	0x0CF1, r23
    8346:	60 93 f0 0c 	sts	0x0CF0, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    834a:	fa 01       	movw	r30, r20
    834c:	85 91       	lpm	r24, Z+
    834e:	94 91       	lpm	r25, Z
    8350:	a8 0f       	add	r26, r24
    8352:	b9 1f       	adc	r27, r25
    8354:	b0 93 f3 0c 	sts	0x0CF3, r27
    8358:	a0 93 f2 0c 	sts	0x0CF2, r26
    835c:	05 c0       	rjmp	.+10     	; 0x8368 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    835e:	60 e0       	ldi	r22, 0x00	; 0
    8360:	29 83       	std	Y+1, r18	; 0x01
    8362:	0e 94 a2 44 	call	0x8944	; 0x8944 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8366:	29 81       	ldd	r18, Y+1	; 0x01
    8368:	62 2f       	mov	r22, r18
    836a:	f7 01       	movw	r30, r14
    836c:	82 81       	ldd	r24, Z+2	; 0x02
    836e:	0e 94 8b 44 	call	0x8916	; 0x8916 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8372:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8374:	00 23       	and	r16, r16
    8376:	11 f0       	breq	.+4      	; 0x837c <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8378:	11 8b       	std	Z+17, r17	; 0x11
    837a:	01 c0       	rjmp	.+2      	; 0x837e <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    837c:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    837e:	e0 91 77 0d 	lds	r30, 0x0D77
    8382:	f0 91 78 0d 	lds	r31, 0x0D78
    8386:	39 e0       	ldi	r19, 0x09	; 9
    8388:	13 9f       	mul	r17, r19
    838a:	e0 0d       	add	r30, r0
    838c:	f1 1d       	adc	r31, r1
    838e:	11 24       	eor	r1, r1
    8390:	33 96       	adiw	r30, 0x03	; 3
    8392:	85 91       	lpm	r24, Z+
    8394:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8396:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8398:	00 97       	sbiw	r24, 0x00	; 0
    839a:	19 f4       	brne	.+6      	; 0x83a2 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    839c:	16 8a       	std	Z+22, r1	; 0x16
    839e:	15 8a       	std	Z+21, r1	; 0x15
    83a0:	08 c0       	rjmp	.+16     	; 0x83b2 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    83a2:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    83a4:	fc 01       	movw	r30, r24
    83a6:	24 91       	lpm	r18, Z
    83a8:	f7 01       	movw	r30, r14
    83aa:	22 8b       	std	Z+18, r18	; 0x12
    83ac:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    83ae:	96 8b       	std	Z+22, r25	; 0x16
    83b0:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    83b2:	0f 90       	pop	r0
    83b4:	df 91       	pop	r29
    83b6:	cf 91       	pop	r28
    83b8:	1f 91       	pop	r17
    83ba:	0f 91       	pop	r16
    83bc:	ff 90       	pop	r15
    83be:	ef 90       	pop	r14
    83c0:	08 95       	ret

000083c2 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    83c2:	cf 93       	push	r28
    83c4:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    83c6:	e0 91 77 0d 	lds	r30, 0x0D77
    83ca:	f0 91 78 0d 	lds	r31, 0x0D78
    83ce:	99 e0       	ldi	r25, 0x09	; 9
    83d0:	89 9f       	mul	r24, r25
    83d2:	e0 0d       	add	r30, r0
    83d4:	f1 1d       	adc	r31, r1
    83d6:	11 24       	eor	r1, r1
    83d8:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    83da:	e1 30       	cpi	r30, 0x01	; 1
    83dc:	e9 f0       	breq	.+58     	; 0x8418 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    83de:	e2 30       	cpi	r30, 0x02	; 2
    83e0:	e9 f0       	breq	.+58     	; 0x841c <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    83e2:	20 91 19 0d 	lds	r18, 0x0D19
    83e6:	27 ff       	sbrs	r18, 7
    83e8:	1d c0       	rjmp	.+58     	; 0x8424 <TriggerFx+0x62>
    83ea:	20 91 2a 0d 	lds	r18, 0x0D2A
    83ee:	28 13       	cpse	r18, r24
    83f0:	02 c0       	rjmp	.+4      	; 0x83f6 <TriggerFx+0x34>
    83f2:	41 11       	cpse	r20, r1
    83f4:	17 c0       	rjmp	.+46     	; 0x8424 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    83f6:	20 91 30 0d 	lds	r18, 0x0D30
    83fa:	27 ff       	sbrs	r18, 7
    83fc:	11 c0       	rjmp	.+34     	; 0x8420 <TriggerFx+0x5e>
    83fe:	20 91 41 0d 	lds	r18, 0x0D41
    8402:	28 13       	cpse	r18, r24
    8404:	02 c0       	rjmp	.+4      	; 0x840a <TriggerFx+0x48>
    8406:	41 11       	cpse	r20, r1
    8408:	0b c0       	rjmp	.+22     	; 0x8420 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    840a:	20 91 2d 0d 	lds	r18, 0x0D2D
    840e:	90 91 44 0d 	lds	r25, 0x0D44
    8412:	92 17       	cp	r25, r18
    8414:	28 f4       	brcc	.+10     	; 0x8420 <TriggerFx+0x5e>
    8416:	06 c0       	rjmp	.+12     	; 0x8424 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8418:	c3 e0       	ldi	r28, 0x03	; 3
    841a:	05 c0       	rjmp	.+10     	; 0x8426 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    841c:	c4 e0       	ldi	r28, 0x04	; 4
    841e:	03 c0       	rjmp	.+6      	; 0x8426 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8420:	c2 e0       	ldi	r28, 0x02	; 2
    8422:	01 c0       	rjmp	.+2      	; 0x8426 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8424:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8426:	97 e1       	ldi	r25, 0x17	; 23
    8428:	c9 9f       	mul	r28, r25
    842a:	e0 01       	movw	r28, r0
    842c:	11 24       	eor	r1, r1
    842e:	ce 5f       	subi	r28, 0xFE	; 254
    8430:	d2 4f       	sbci	r29, 0xF2	; 242
    8432:	90 e8       	ldi	r25, 0x80	; 128
    8434:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8436:	1e 8a       	std	Y+22, r1	; 0x16
    8438:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    843a:	20 e5       	ldi	r18, 0x50	; 80
    843c:	46 2f       	mov	r20, r22
    843e:	68 2f       	mov	r22, r24
    8440:	ce 01       	movw	r24, r28
    8442:	0e 94 53 41 	call	0x82a6	; 0x82a6 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8446:	88 81       	ld	r24, Y
    8448:	80 62       	ori	r24, 0x20	; 32
    844a:	88 83       	st	Y, r24
}
    844c:	df 91       	pop	r29
    844e:	cf 91       	pop	r28
    8450:	08 95       	ret

00008452 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8452:	cf 93       	push	r28
    8454:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8456:	a8 2f       	mov	r26, r24
    8458:	b0 e0       	ldi	r27, 0x00	; 0
    845a:	97 e1       	ldi	r25, 0x17	; 23
    845c:	89 9f       	mul	r24, r25
    845e:	f0 01       	movw	r30, r0
    8460:	11 24       	eor	r1, r1
    8462:	ee 5f       	subi	r30, 0xFE	; 254
    8464:	f2 4f       	sbci	r31, 0xF2	; 242
    8466:	80 81       	ld	r24, Z
    8468:	85 ff       	sbrs	r24, 5
    846a:	02 c0       	rjmp	.+4      	; 0x8470 <TriggerNote+0x1e>
    846c:	87 fd       	sbrc	r24, 7
    846e:	2e c0       	rjmp	.+92     	; 0x84cc <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8470:	21 11       	cpse	r18, r1
    8472:	18 c0       	rjmp	.+48     	; 0x84a4 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8474:	97 e1       	ldi	r25, 0x17	; 23
    8476:	9a 9f       	mul	r25, r26
    8478:	f0 01       	movw	r30, r0
    847a:	9b 9f       	mul	r25, r27
    847c:	f0 0d       	add	r31, r0
    847e:	11 24       	eor	r1, r1
    8480:	ee 5f       	subi	r30, 0xFE	; 254
    8482:	f2 4f       	sbci	r31, 0xF2	; 242
    8484:	97 85       	ldd	r25, Z+15	; 0x0f
    8486:	91 11       	cpse	r25, r1
    8488:	02 c0       	rjmp	.+4      	; 0x848e <TriggerNote+0x3c>
    848a:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    848c:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    848e:	97 e1       	ldi	r25, 0x17	; 23
    8490:	9a 9f       	mul	r25, r26
    8492:	f0 01       	movw	r30, r0
    8494:	9b 9f       	mul	r25, r27
    8496:	f0 0d       	add	r31, r0
    8498:	11 24       	eor	r1, r1
    849a:	ee 5f       	subi	r30, 0xFE	; 254
    849c:	f2 4f       	sbci	r31, 0xF2	; 242
    849e:	8f 7b       	andi	r24, 0xBF	; 191
    84a0:	80 83       	st	Z, r24
    84a2:	14 c0       	rjmp	.+40     	; 0x84cc <TriggerNote+0x7a>
    84a4:	82 2f       	mov	r24, r18
    84a6:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    84a8:	97 e1       	ldi	r25, 0x17	; 23
    84aa:	9a 9f       	mul	r25, r26
    84ac:	e0 01       	movw	r28, r0
    84ae:	9b 9f       	mul	r25, r27
    84b0:	d0 0d       	add	r29, r0
    84b2:	11 24       	eor	r1, r1
    84b4:	ce 5f       	subi	r28, 0xFE	; 254
    84b6:	d2 4f       	sbci	r29, 0xF2	; 242
    84b8:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    84ba:	1e 8a       	std	Y+22, r1	; 0x16
    84bc:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    84be:	48 2f       	mov	r20, r24
    84c0:	ce 01       	movw	r24, r28
    84c2:	0e 94 53 41 	call	0x82a6	; 0x82a6 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    84c6:	88 81       	ld	r24, Y
    84c8:	80 62       	ori	r24, 0x20	; 32
    84ca:	88 83       	st	Y, r24
		}

	}
}
    84cc:	df 91       	pop	r29
    84ce:	cf 91       	pop	r28
    84d0:	08 95       	ret

000084d2 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    84d2:	6f 92       	push	r6
    84d4:	7f 92       	push	r7
    84d6:	8f 92       	push	r8
    84d8:	9f 92       	push	r9
    84da:	af 92       	push	r10
    84dc:	bf 92       	push	r11
    84de:	cf 92       	push	r12
    84e0:	df 92       	push	r13
    84e2:	ef 92       	push	r14
    84e4:	ff 92       	push	r15
    84e6:	0f 93       	push	r16
    84e8:	1f 93       	push	r17
    84ea:	cf 93       	push	r28
    84ec:	df 93       	push	r29
    84ee:	c2 e0       	ldi	r28, 0x02	; 2
    84f0:	dd e0       	ldi	r29, 0x0D	; 13
    84f2:	02 ed       	ldi	r16, 0xD2	; 210
    84f4:	1c e0       	ldi	r17, 0x0C	; 12
    84f6:	d8 01       	movw	r26, r16
    84f8:	9e 01       	movw	r18, r28
    84fa:	40 e0       	ldi	r20, 0x00	; 0
    84fc:	50 e0       	ldi	r21, 0x00	; 0
    84fe:	ca 01       	movw	r24, r20
    8500:	8e 5f       	subi	r24, 0xFE	; 254
    8502:	92 4f       	sbci	r25, 0xF2	; 242
    8504:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8506:	fc 01       	movw	r30, r24
    8508:	87 85       	ldd	r24, Z+15	; 0x0f
    850a:	88 23       	and	r24, r24
    850c:	91 f0       	breq	.+36     	; 0x8532 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    850e:	66 85       	ldd	r22, Z+14	; 0x0e
    8510:	99 27       	eor	r25, r25
    8512:	87 fd       	sbrc	r24, 7
    8514:	90 95       	com	r25
    8516:	86 0f       	add	r24, r22
    8518:	91 1d       	adc	r25, r1
    851a:	8f 3f       	cpi	r24, 0xFF	; 255
    851c:	91 05       	cpc	r25, r1
    851e:	19 f0       	breq	.+6      	; 0x8526 <ProcessMusic+0x54>
    8520:	14 f0       	brlt	.+4      	; 0x8526 <ProcessMusic+0x54>
    8522:	8f ef       	ldi	r24, 0xFF	; 255
    8524:	90 e0       	ldi	r25, 0x00	; 0
    8526:	97 ff       	sbrs	r25, 7
    8528:	02 c0       	rjmp	.+4      	; 0x852e <ProcessMusic+0x5c>
    852a:	80 e0       	ldi	r24, 0x00	; 0
    852c:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    852e:	f6 01       	movw	r30, r12
    8530:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8532:	f9 01       	movw	r30, r18
    8534:	f0 80       	ld	r15, Z
    8536:	f3 fe       	sbrs	r15, 3
    8538:	2a c0       	rjmp	.+84     	; 0x858e <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    853a:	65 81       	ldd	r22, Z+5	; 0x05
    853c:	76 81       	ldd	r23, Z+6	; 0x06
    853e:	11 96       	adiw	r26, 0x01	; 1
    8540:	8d 91       	ld	r24, X+
    8542:	9c 91       	ld	r25, X
    8544:	12 97       	sbiw	r26, 0x02	; 2
    8546:	86 0f       	add	r24, r22
    8548:	97 1f       	adc	r25, r23
    854a:	12 96       	adiw	r26, 0x02	; 2
    854c:	9c 93       	st	X, r25
    854e:	8e 93       	st	-X, r24
    8550:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8552:	f6 01       	movw	r30, r12
    8554:	e7 80       	ldd	r14, Z+7	; 0x07
    8556:	ee 2d       	mov	r30, r14
    8558:	f0 e0       	ldi	r31, 0x00	; 0
    855a:	ee 0f       	add	r30, r30
    855c:	ff 1f       	adc	r31, r31
    855e:	e2 58       	subi	r30, 0x82	; 130
    8560:	f6 47       	sbci	r31, 0x76	; 118
    8562:	c5 90       	lpm	r12, Z+
    8564:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8566:	16 16       	cp	r1, r22
    8568:	17 06       	cpc	r1, r23
    856a:	24 f4       	brge	.+8      	; 0x8574 <ProcessMusic+0xa2>
    856c:	8c 15       	cp	r24, r12
    856e:	9d 05       	cpc	r25, r13
    8570:	30 f4       	brcc	.+12     	; 0x857e <ProcessMusic+0xac>
    8572:	0d c0       	rjmp	.+26     	; 0x858e <ProcessMusic+0xbc>
    8574:	67 2b       	or	r22, r23
    8576:	59 f0       	breq	.+22     	; 0x858e <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8578:	c8 16       	cp	r12, r24
    857a:	d9 06       	cpc	r13, r25
    857c:	40 f0       	brcs	.+16     	; 0x858e <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    857e:	12 96       	adiw	r26, 0x02	; 2
    8580:	dc 92       	st	X, r13
    8582:	ce 92       	st	-X, r12
    8584:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8586:	8f 2d       	mov	r24, r15
    8588:	87 7f       	andi	r24, 0xF7	; 247
    858a:	f9 01       	movw	r30, r18
    858c:	80 83       	st	Z, r24
    858e:	49 5e       	subi	r20, 0xE9	; 233
    8590:	5f 4f       	sbci	r21, 0xFF	; 255
    8592:	29 5e       	subi	r18, 0xE9	; 233
    8594:	3f 4f       	sbci	r19, 0xFF	; 255
    8596:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8598:	43 37       	cpi	r20, 0x73	; 115
    859a:	51 05       	cpc	r21, r1
    859c:	09 f0       	breq	.+2      	; 0x85a0 <ProcessMusic+0xce>
    859e:	af cf       	rjmp	.-162    	; 0x84fe <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    85a0:	80 91 d0 0c 	lds	r24, 0x0CD0
    85a4:	88 23       	and	r24, r24
    85a6:	09 f4       	brne	.+2      	; 0x85aa <ProcessMusic+0xd8>
    85a8:	cc c0       	rjmp	.+408    	; 0x8742 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    85aa:	57 e1       	ldi	r21, 0x17	; 23
    85ac:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    85ae:	80 91 75 0d 	lds	r24, 0x0D75
    85b2:	90 91 76 0d 	lds	r25, 0x0D76
    85b6:	20 91 7b 0d 	lds	r18, 0x0D7B
    85ba:	30 91 7c 0d 	lds	r19, 0x0D7C
    85be:	82 17       	cp	r24, r18
    85c0:	93 07       	cpc	r25, r19
    85c2:	09 f0       	breq	.+2      	; 0x85c6 <ProcessMusic+0xf4>
    85c4:	b9 c0       	rjmp	.+370    	; 0x8738 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    85c6:	20 91 7e 0d 	lds	r18, 0x0D7E
    85ca:	30 91 7f 0d 	lds	r19, 0x0D7F
    85ce:	b9 01       	movw	r22, r18
    85d0:	6f 5f       	subi	r22, 0xFF	; 255
    85d2:	7f 4f       	sbci	r23, 0xFF	; 255
    85d4:	70 93 7f 0d 	sts	0x0D7F, r23
    85d8:	60 93 7e 0d 	sts	0x0D7E, r22
    85dc:	f9 01       	movw	r30, r18
    85de:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    85e0:	4f 3f       	cpi	r20, 0xFF	; 255
    85e2:	79 f5       	brne	.+94     	; 0x8642 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    85e4:	a9 01       	movw	r20, r18
    85e6:	4e 5f       	subi	r20, 0xFE	; 254
    85e8:	5f 4f       	sbci	r21, 0xFF	; 255
    85ea:	50 93 7f 0d 	sts	0x0D7F, r21
    85ee:	40 93 7e 0d 	sts	0x0D7E, r20
    85f2:	fb 01       	movw	r30, r22
    85f4:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    85f6:	6f 32       	cpi	r22, 0x2F	; 47
    85f8:	19 f4       	brne	.+6      	; 0x8600 <ProcessMusic+0x12e>
						playSong=false;
    85fa:	10 92 d0 0c 	sts	0x0CD0, r1
						break;	
    85fe:	9c c0       	rjmp	.+312    	; 0x8738 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8600:	66 30       	cpi	r22, 0x06	; 6
    8602:	09 f0       	breq	.+2      	; 0x8606 <ProcessMusic+0x134>
    8604:	8c c0       	rjmp	.+280    	; 0x871e <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8606:	fa 01       	movw	r30, r20
    8608:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    860a:	c9 01       	movw	r24, r18
    860c:	04 96       	adiw	r24, 0x04	; 4
    860e:	90 93 7f 0d 	sts	0x0D7F, r25
    8612:	80 93 7e 0d 	sts	0x0D7E, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8616:	f9 01       	movw	r30, r18
    8618:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    861a:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    861c:	e3 35       	cpi	r30, 0x53	; 83
    861e:	29 f4       	brne	.+10     	; 0x862a <ProcessMusic+0x158>
							loopStart=songPos;
    8620:	90 93 81 0d 	sts	0x0D81, r25
    8624:	80 93 80 0d 	sts	0x0D80, r24
    8628:	7a c0       	rjmp	.+244    	; 0x871e <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    862a:	e5 34       	cpi	r30, 0x45	; 69
    862c:	09 f0       	breq	.+2      	; 0x8630 <ProcessMusic+0x15e>
    862e:	77 c0       	rjmp	.+238    	; 0x871e <ProcessMusic+0x24c>
							songPos=loopStart;
    8630:	80 91 80 0d 	lds	r24, 0x0D80
    8634:	90 91 81 0d 	lds	r25, 0x0D81
    8638:	90 93 7f 0d 	sts	0x0D7F, r25
    863c:	80 93 7e 0d 	sts	0x0D7E, r24
    8640:	6e c0       	rjmp	.+220    	; 0x871e <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8642:	47 fd       	sbrc	r20, 7
    8644:	40 93 79 0d 	sts	0x0D79, r20
					channel=lastStatus&0x0f;
    8648:	90 91 79 0d 	lds	r25, 0x0D79
    864c:	89 2f       	mov	r24, r25
    864e:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8650:	47 ff       	sbrs	r20, 7
    8652:	08 c0       	rjmp	.+16     	; 0x8664 <ProcessMusic+0x192>
    8654:	2e 5f       	subi	r18, 0xFE	; 254
    8656:	3f 4f       	sbci	r19, 0xFF	; 255
    8658:	30 93 7f 0d 	sts	0x0D7F, r19
    865c:	20 93 7e 0d 	sts	0x0D7E, r18
    8660:	fb 01       	movw	r30, r22
    8662:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8664:	90 7f       	andi	r25, 0xF0	; 240
    8666:	90 3b       	cpi	r25, 0xB0	; 176
    8668:	e1 f0       	breq	.+56     	; 0x86a2 <ProcessMusic+0x1d0>
    866a:	90 3c       	cpi	r25, 0xC0	; 192
    866c:	09 f4       	brne	.+2      	; 0x8670 <ProcessMusic+0x19e>
    866e:	51 c0       	rjmp	.+162    	; 0x8712 <ProcessMusic+0x240>
    8670:	90 39       	cpi	r25, 0x90	; 144
    8672:	09 f0       	breq	.+2      	; 0x8676 <ProcessMusic+0x1a4>
    8674:	54 c0       	rjmp	.+168    	; 0x871e <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8676:	e0 91 7e 0d 	lds	r30, 0x0D7E
    867a:	f0 91 7f 0d 	lds	r31, 0x0D7F
    867e:	9f 01       	movw	r18, r30
    8680:	2f 5f       	subi	r18, 0xFF	; 255
    8682:	3f 4f       	sbci	r19, 0xFF	; 255
    8684:	30 93 7f 0d 	sts	0x0D7F, r19
    8688:	20 93 7e 0d 	sts	0x0D7E, r18
    868c:	24 91       	lpm	r18, Z
    868e:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8690:	f8 9e       	mul	r15, r24
    8692:	f0 01       	movw	r30, r0
    8694:	11 24       	eor	r1, r1
    8696:	ee 5f       	subi	r30, 0xFE	; 254
    8698:	f2 4f       	sbci	r31, 0xF2	; 242
    869a:	60 89       	ldd	r22, Z+16	; 0x10
    869c:	0e 94 29 42 	call	0x8452	; 0x8452 <TriggerNote>
    86a0:	3e c0       	rjmp	.+124    	; 0x871e <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    86a2:	e0 91 7e 0d 	lds	r30, 0x0D7E
    86a6:	f0 91 7f 0d 	lds	r31, 0x0D7F
    86aa:	9f 01       	movw	r18, r30
    86ac:	2f 5f       	subi	r18, 0xFF	; 255
    86ae:	3f 4f       	sbci	r19, 0xFF	; 255
    86b0:	30 93 7f 0d 	sts	0x0D7F, r19
    86b4:	20 93 7e 0d 	sts	0x0D7E, r18
    86b8:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    86ba:	47 30       	cpi	r20, 0x07	; 7
    86bc:	49 f4       	brne	.+18     	; 0x86d0 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    86be:	f8 9e       	mul	r15, r24
    86c0:	d0 01       	movw	r26, r0
    86c2:	11 24       	eor	r1, r1
    86c4:	ae 5f       	subi	r26, 0xFE	; 254
    86c6:	b2 4f       	sbci	r27, 0xF2	; 242
    86c8:	ee 0f       	add	r30, r30
    86ca:	1c 96       	adiw	r26, 0x0c	; 12
    86cc:	ec 93       	st	X, r30
    86ce:	27 c0       	rjmp	.+78     	; 0x871e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    86d0:	4b 30       	cpi	r20, 0x0B	; 11
    86d2:	49 f4       	brne	.+18     	; 0x86e6 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    86d4:	f8 9e       	mul	r15, r24
    86d6:	d0 01       	movw	r26, r0
    86d8:	11 24       	eor	r1, r1
    86da:	ae 5f       	subi	r26, 0xFE	; 254
    86dc:	b2 4f       	sbci	r27, 0xF2	; 242
    86de:	ee 0f       	add	r30, r30
    86e0:	13 96       	adiw	r26, 0x03	; 3
    86e2:	ec 93       	st	X, r30
    86e4:	1c c0       	rjmp	.+56     	; 0x871e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    86e6:	4c 35       	cpi	r20, 0x5C	; 92
    86e8:	49 f4       	brne	.+18     	; 0x86fc <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    86ea:	f8 9e       	mul	r15, r24
    86ec:	d0 01       	movw	r26, r0
    86ee:	11 24       	eor	r1, r1
    86f0:	ae 5f       	subi	r26, 0xFE	; 254
    86f2:	b2 4f       	sbci	r27, 0xF2	; 242
    86f4:	ee 0f       	add	r30, r30
    86f6:	1a 96       	adiw	r26, 0x0a	; 10
    86f8:	ec 93       	st	X, r30
    86fa:	11 c0       	rjmp	.+34     	; 0x871e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    86fc:	44 36       	cpi	r20, 0x64	; 100
    86fe:	79 f4       	brne	.+30     	; 0x871e <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8700:	f8 9e       	mul	r15, r24
    8702:	d0 01       	movw	r26, r0
    8704:	11 24       	eor	r1, r1
    8706:	ae 5f       	subi	r26, 0xFE	; 254
    8708:	b2 4f       	sbci	r27, 0xF2	; 242
    870a:	ee 0f       	add	r30, r30
    870c:	1b 96       	adiw	r26, 0x0b	; 11
    870e:	ec 93       	st	X, r30
    8710:	06 c0       	rjmp	.+12     	; 0x871e <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8712:	f8 9e       	mul	r15, r24
    8714:	f0 01       	movw	r30, r0
    8716:	11 24       	eor	r1, r1
    8718:	ee 5f       	subi	r30, 0xFE	; 254
    871a:	f2 4f       	sbci	r31, 0xF2	; 242
    871c:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    871e:	8e e7       	ldi	r24, 0x7E	; 126
    8720:	9d e0       	ldi	r25, 0x0D	; 13
    8722:	0e 94 2d 41 	call	0x825a	; 0x825a <ReadVarLen>
    8726:	90 93 7c 0d 	sts	0x0D7C, r25
    872a:	80 93 7b 0d 	sts	0x0D7B, r24
				currDeltaTime=0;
    872e:	10 92 76 0d 	sts	0x0D76, r1
    8732:	10 92 75 0d 	sts	0x0D75, r1
    8736:	3b cf       	rjmp	.-394    	; 0x85ae <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8738:	01 96       	adiw	r24, 0x01	; 1
    873a:	90 93 76 0d 	sts	0x0D76, r25
    873e:	80 93 75 0d 	sts	0x0D75, r24
    8742:	9b e0       	ldi	r25, 0x0B	; 11
    8744:	a9 2e       	mov	r10, r25
    8746:	9d e0       	ldi	r25, 0x0D	; 13
    8748:	b9 2e       	mov	r11, r25
    874a:	25 e1       	ldi	r18, 0x15	; 21
    874c:	c2 2e       	mov	r12, r18
    874e:	2d e0       	ldi	r18, 0x0D	; 13
    8750:	d2 2e       	mov	r13, r18
    8752:	36 e1       	ldi	r19, 0x16	; 22
    8754:	e3 2e       	mov	r14, r19
    8756:	3d e0       	ldi	r19, 0x0D	; 13
    8758:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    875a:	66 24       	eor	r6, r6
    875c:	6a 94       	dec	r6
    875e:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8760:	88 81       	ld	r24, Y
    8762:	85 ff       	sbrs	r24, 5
    8764:	42 c0       	rjmp	.+132    	; 0x87ea <ProcessMusic+0x318>
    8766:	2d 89       	ldd	r18, Y+21	; 0x15
    8768:	3e 89       	ldd	r19, Y+22	; 0x16
    876a:	23 2b       	or	r18, r19
    876c:	09 f4       	brne	.+2      	; 0x8770 <ProcessMusic+0x29e>
    876e:	3d c0       	rjmp	.+122    	; 0x87ea <ProcessMusic+0x318>
    8770:	86 fd       	sbrc	r24, 6
    8772:	3b c0       	rjmp	.+118    	; 0x87ea <ProcessMusic+0x318>
    8774:	47 01       	movw	r8, r14
    8776:	f2 e0       	ldi	r31, 0x02	; 2
    8778:	8f 1a       	sub	r8, r31
    877a:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    877c:	d6 01       	movw	r26, r12
    877e:	9c 91       	ld	r25, X
    8780:	f4 01       	movw	r30, r8
    8782:	80 81       	ld	r24, Z
    8784:	98 13       	cpse	r25, r24
    8786:	2e c0       	rjmp	.+92     	; 0x87e4 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8788:	ed 89       	ldd	r30, Y+21	; 0x15
    878a:	fe 89       	ldd	r31, Y+22	; 0x16
    878c:	bf 01       	movw	r22, r30
    878e:	6f 5f       	subi	r22, 0xFF	; 255
    8790:	7f 4f       	sbci	r23, 0xFF	; 255
    8792:	7e 8b       	std	Y+22, r23	; 0x16
    8794:	6d 8b       	std	Y+21, r22	; 0x15
    8796:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8798:	8f 3f       	cpi	r24, 0xFF	; 255
    879a:	31 f4       	brne	.+12     	; 0x87a8 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    879c:	88 81       	ld	r24, Y
    879e:	8f 77       	andi	r24, 0x7F	; 127
    87a0:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    87a2:	1e 8a       	std	Y+22, r1	; 0x16
    87a4:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    87a6:	1e c0       	rjmp	.+60     	; 0x87e4 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    87a8:	9f 01       	movw	r18, r30
    87aa:	2e 5f       	subi	r18, 0xFE	; 254
    87ac:	3f 4f       	sbci	r19, 0xFF	; 255
    87ae:	3e 8b       	std	Y+22, r19	; 0x16
    87b0:	2d 8b       	std	Y+21, r18	; 0x15
    87b2:	fb 01       	movw	r30, r22
    87b4:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    87b6:	e8 2f       	mov	r30, r24
    87b8:	f0 e0       	ldi	r31, 0x00	; 0
    87ba:	ee 0f       	add	r30, r30
    87bc:	ff 1f       	adc	r31, r31
    87be:	e8 51       	subi	r30, 0x18	; 24
    87c0:	ff 4f       	sbci	r31, 0xFF	; 255
    87c2:	25 91       	lpm	r18, Z+
    87c4:	34 91       	lpm	r19, Z
    87c6:	ce 01       	movw	r24, r28
    87c8:	f9 01       	movw	r30, r18
    87ca:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    87cc:	ed 89       	ldd	r30, Y+21	; 0x15
    87ce:	fe 89       	ldd	r31, Y+22	; 0x16
    87d0:	cf 01       	movw	r24, r30
    87d2:	01 96       	adiw	r24, 0x01	; 1
    87d4:	9e 8b       	std	Y+22, r25	; 0x16
    87d6:	8d 8b       	std	Y+21, r24	; 0x15
    87d8:	e4 91       	lpm	r30, Z
    87da:	d4 01       	movw	r26, r8
    87dc:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    87de:	f6 01       	movw	r30, r12
    87e0:	10 82       	st	Z, r1
    87e2:	cc cf       	rjmp	.-104    	; 0x877c <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    87e4:	9f 5f       	subi	r25, 0xFF	; 255
    87e6:	d6 01       	movw	r26, r12
    87e8:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    87ea:	98 81       	ld	r25, Y
    87ec:	95 ff       	sbrs	r25, 5
    87ee:	6c c0       	rjmp	.+216    	; 0x88c8 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    87f0:	f7 01       	movw	r30, r14
    87f2:	80 81       	ld	r24, Z
    87f4:	8f 3f       	cpi	r24, 0xFF	; 255
    87f6:	11 f0       	breq	.+4      	; 0x87fc <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    87f8:	8f 5f       	subi	r24, 0xFF	; 255
    87fa:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    87fc:	97 fd       	sbrc	r25, 7
    87fe:	04 c0       	rjmp	.+8      	; 0x8808 <ProcessMusic+0x336>
    8800:	f7 01       	movw	r30, r14
    8802:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8804:	90 81       	ld	r25, Z
    8806:	01 c0       	rjmp	.+2      	; 0x880a <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8808:	9f ef       	ldi	r25, 0xFF	; 255
    880a:	f7 01       	movw	r30, r14
    880c:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    880e:	80 81       	ld	r24, Z
    8810:	88 23       	and	r24, r24
    8812:	09 f4       	brne	.+2      	; 0x8816 <ProcessMusic+0x344>
    8814:	4e c0       	rjmp	.+156    	; 0x88b2 <ProcessMusic+0x3e0>
    8816:	31 96       	adiw	r30, 0x01	; 1
    8818:	50 81       	ld	r21, Z
    881a:	55 23       	and	r21, r21
    881c:	09 f4       	brne	.+2      	; 0x8820 <ProcessMusic+0x34e>
    881e:	49 c0       	rjmp	.+146    	; 0x88b2 <ProcessMusic+0x3e0>
    8820:	99 23       	and	r25, r25
    8822:	09 f4       	brne	.+2      	; 0x8826 <ProcessMusic+0x354>
    8824:	46 c0       	rjmp	.+140    	; 0x88b2 <ProcessMusic+0x3e0>
    8826:	40 91 7a 0d 	lds	r20, 0x0D7A
    882a:	44 23       	and	r20, r20
    882c:	09 f4       	brne	.+2      	; 0x8830 <ProcessMusic+0x35e>
    882e:	41 c0       	rjmp	.+130    	; 0x88b2 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8830:	89 9f       	mul	r24, r25
    8832:	c0 01       	movw	r24, r0
    8834:	11 24       	eor	r1, r1
    8836:	93 95       	inc	r25
				uVol>>=8;
    8838:	89 2f       	mov	r24, r25
    883a:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    883c:	58 9f       	mul	r21, r24
    883e:	90 01       	movw	r18, r0
    8840:	59 9f       	mul	r21, r25
    8842:	30 0d       	add	r19, r0
    8844:	11 24       	eor	r1, r1
    8846:	c9 01       	movw	r24, r18
    8848:	93 95       	inc	r25
				uVol>>=8;
    884a:	89 2f       	mov	r24, r25
    884c:	99 27       	eor	r25, r25
    884e:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8850:	50 81       	ld	r21, Z
    8852:	58 9f       	mul	r21, r24
    8854:	90 01       	movw	r18, r0
    8856:	59 9f       	mul	r21, r25
    8858:	30 0d       	add	r19, r0
    885a:	11 24       	eor	r1, r1
    885c:	33 95       	inc	r19
					uVol>>=8;
    885e:	23 2f       	mov	r18, r19
    8860:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8862:	42 9f       	mul	r20, r18
    8864:	c0 01       	movw	r24, r0
    8866:	43 9f       	mul	r20, r19
    8868:	90 0d       	add	r25, r0
    886a:	11 24       	eor	r1, r1
    886c:	93 95       	inc	r25
				uVol>>=8;
    886e:	89 2f       	mov	r24, r25
    8870:	99 27       	eor	r25, r25
    8872:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){
    8874:	20 81       	ld	r18, Z
    8876:	22 23       	and	r18, r18
    8878:	f1 f0       	breq	.+60     	; 0x88b6 <ProcessMusic+0x3e4>
					#if (INCLUDE_DEFAULT_WAVES != 0)
						tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    887a:	d5 01       	movw	r26, r10
    887c:	ec 91       	ld	r30, X
    887e:	f0 e0       	ldi	r31, 0x00	; 0
    8880:	e0 50       	subi	r30, 0x00	; 0
    8882:	f5 47       	sbci	r31, 0x75	; 117
    8884:	e4 91       	lpm	r30, Z
					#else
						tmp=0;
					#endif
					tmp-=128; //convert to unsigned
    8886:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8888:	2e 9f       	mul	r18, r30
    888a:	f0 01       	movw	r30, r0
    888c:	11 24       	eor	r1, r1
    888e:	f3 95       	inc	r31
					tVol>>=8;
    8890:	ef 2f       	mov	r30, r31
    8892:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8894:	a3 01       	movw	r20, r6
    8896:	4e 1b       	sub	r20, r30
    8898:	5f 0b       	sbc	r21, r31
    889a:	48 9f       	mul	r20, r24
    889c:	90 01       	movw	r18, r0
    889e:	49 9f       	mul	r20, r25
    88a0:	30 0d       	add	r19, r0
    88a2:	58 9f       	mul	r21, r24
    88a4:	30 0d       	add	r19, r0
    88a6:	11 24       	eor	r1, r1
    88a8:	c9 01       	movw	r24, r18
    88aa:	93 95       	inc	r25
					uVol>>=8;
    88ac:	89 2f       	mov	r24, r25
    88ae:	99 27       	eor	r25, r25
    88b0:	02 c0       	rjmp	.+4      	; 0x88b6 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    88b2:	80 e0       	ldi	r24, 0x00	; 0
    88b4:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    88b6:	f5 01       	movw	r30, r10
    88b8:	30 81       	ld	r19, Z
    88ba:	f7 01       	movw	r30, r14
    88bc:	39 97       	sbiw	r30, 0x09	; 9
    88be:	20 81       	ld	r18, Z
    88c0:	23 0f       	add	r18, r19
    88c2:	d5 01       	movw	r26, r10
    88c4:	2c 93       	st	X, r18
    88c6:	02 c0       	rjmp	.+4      	; 0x88cc <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    88c8:	80 e0       	ldi	r24, 0x00	; 0
    88ca:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    88cc:	f8 01       	movw	r30, r16
    88ce:	80 83       	st	Z, r24
    88d0:	67 96       	adiw	r28, 0x17	; 23
    88d2:	0a 5f       	subi	r16, 0xFA	; 250
    88d4:	1f 4f       	sbci	r17, 0xFF	; 255
    88d6:	f7 e1       	ldi	r31, 0x17	; 23
    88d8:	af 0e       	add	r10, r31
    88da:	b1 1c       	adc	r11, r1
    88dc:	87 e1       	ldi	r24, 0x17	; 23
    88de:	c8 0e       	add	r12, r24
    88e0:	d1 1c       	adc	r13, r1
    88e2:	97 e1       	ldi	r25, 0x17	; 23
    88e4:	e9 0e       	add	r14, r25
    88e6:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    88e8:	ad e0       	ldi	r26, 0x0D	; 13
    88ea:	c5 37       	cpi	r28, 0x75	; 117
    88ec:	da 07       	cpc	r29, r26
    88ee:	09 f0       	breq	.+2      	; 0x88f2 <ProcessMusic+0x420>
    88f0:	37 cf       	rjmp	.-402    	; 0x8760 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    88f2:	df 91       	pop	r29
    88f4:	cf 91       	pop	r28
    88f6:	1f 91       	pop	r17
    88f8:	0f 91       	pop	r16
    88fa:	ff 90       	pop	r15
    88fc:	ef 90       	pop	r14
    88fe:	df 90       	pop	r13
    8900:	cf 90       	pop	r12
    8902:	bf 90       	pop	r11
    8904:	af 90       	pop	r10
    8906:	9f 90       	pop	r9
    8908:	8f 90       	pop	r8
    890a:	7f 90       	pop	r7
    890c:	6f 90       	pop	r6
    890e:	08 95       	ret

00008910 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8910:	80 93 7a 0d 	sts	0x0D7A, r24
    8914:	08 95       	ret

00008916 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8916:	99 27       	eor	r25, r25
	clr r23
    8918:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    891a:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    891c:	09 f4       	brne	.+2      	; 0x8920 <set_note_waves>
		ret
    891e:	08 95       	ret

00008920 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8920:	ee e7       	ldi	r30, 0x7E	; 126
	ldi ZH,hi8(steptable)
    8922:	f9 e8       	ldi	r31, 0x89	; 137
	lsl r22
    8924:	66 0f       	add	r22, r22
	rol r23
    8926:	77 1f       	adc	r23, r23
	add ZL,r22
    8928:	e6 0f       	add	r30, r22
	adc ZH,r23	
    892a:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    892c:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    892e:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8930:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    8932:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8934:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8936:	28 9f       	mul	r18, r24
	add ZL,r0
    8938:	e0 0d       	add	r30, r0
	adc ZH,r1
    893a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    893c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    893e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8940:	11 24       	eor	r1, r1
	

	ret
    8942:	08 95       	ret

00008944 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8944:	99 27       	eor	r25, r25
	clr r23
    8946:	77 27       	eor	r23, r23

#if (INCLUDE_DEFAULT_WAVES != 0)
	ldi ZL,lo8(mixerStruct)
    8948:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    894a:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    894c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    894e:	28 9f       	mul	r18, r24
	add ZL,r0
    8950:	e0 0d       	add	r30, r0
	adc ZH,r1
    8952:	f1 1d       	adc	r31, r1
#endif

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8954:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8956:	31 f4       	brne	.+12     	; 0x8964 <smw1>
	lds r22,tr4_params
    8958:	60 91 e5 0c 	lds	r22, 0x0CE5
	andi r22,0xfe;
    895c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    895e:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw	
    8962:	0b c0       	rjmp	.+22     	; 0x897a <esmw>

00008964 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8964:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8966:	31 f4       	brne	.+12     	; 0x8974 <smw2>
	lds r22,tr4_params
    8968:	60 91 e5 0c 	lds	r22, 0x0CE5
	ori r22,0xfe;
    896c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    896e:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw
    8972:	03 c0       	rjmp	.+6      	; 0x897a <esmw>

00008974 <smw2>:
smw2:
#endif

#if (INCLUDE_DEFAULT_WAVES != 0)
	ldi r23,hi8(waves)
    8974:	7b e8       	ldi	r23, 0x8B	; 139
	add r23,r22
    8976:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8978:	75 83       	std	Z+5, r23	; 0x05

0000897a <esmw>:
#endif

esmw:
	clr r1	
    897a:	11 24       	eor	r1, r1
	ret
    897c:	08 95       	ret

0000897e <steptable>:
    897e:	22 00       	.word	0x0022	; ????
    8980:	24 00       	.word	0x0024	; ????
    8982:	26 00       	.word	0x0026	; ????
    8984:	28 00       	.word	0x0028	; ????
    8986:	2b 00       	.word	0x002b	; ????
    8988:	2d 00       	.word	0x002d	; ????
    898a:	30 00       	.word	0x0030	; ????
    898c:	33 00       	.word	0x0033	; ????
    898e:	36 00       	.word	0x0036	; ????
    8990:	39 00       	.word	0x0039	; ????
    8992:	3d 00       	.word	0x003d	; ????
    8994:	40 00       	.word	0x0040	; ????
    8996:	44 00       	.word	0x0044	; ????
    8998:	48 00       	.word	0x0048	; ????
    899a:	4c 00       	.word	0x004c	; ????
    899c:	51 00       	.word	0x0051	; ????
    899e:	56 00       	.word	0x0056	; ????
    89a0:	5b 00       	.word	0x005b	; ????
    89a2:	60 00       	.word	0x0060	; ????
    89a4:	66 00       	.word	0x0066	; ????
    89a6:	6c 00       	.word	0x006c	; ????
    89a8:	73 00       	.word	0x0073	; ????
    89aa:	79 00       	.word	0x0079	; ????
    89ac:	81 00       	.word	0x0081	; ????
    89ae:	88 00       	.word	0x0088	; ????
    89b0:	90 00       	.word	0x0090	; ????
    89b2:	99 00       	.word	0x0099	; ????
    89b4:	a2 00       	.word	0x00a2	; ????
    89b6:	ac 00       	.word	0x00ac	; ????
    89b8:	b6 00       	.word	0x00b6	; ????
    89ba:	c1 00       	.word	0x00c1	; ????
    89bc:	cc 00       	.word	0x00cc	; ????
    89be:	d8 00       	.word	0x00d8	; ????
    89c0:	e5 00       	.word	0x00e5	; ????
    89c2:	f3 00       	.word	0x00f3	; ????
    89c4:	01 01       	movw	r0, r2
    89c6:	10 01       	movw	r2, r0
    89c8:	21 01       	movw	r4, r2
    89ca:	32 01       	movw	r6, r4
    89cc:	44 01       	movw	r8, r8
    89ce:	57 01       	movw	r10, r14
    89d0:	6c 01       	movw	r12, r24
    89d2:	81 01       	movw	r16, r2
    89d4:	98 01       	movw	r18, r16
    89d6:	b0 01       	movw	r22, r0
    89d8:	ca 01       	movw	r24, r20
    89da:	e5 01       	movw	r28, r10
    89dc:	02 02       	muls	r16, r18
    89de:	21 02       	muls	r18, r17
    89e0:	41 02       	muls	r20, r17
    89e2:	64 02       	muls	r22, r20
    89e4:	88 02       	muls	r24, r24
    89e6:	ae 02       	muls	r26, r30
    89e8:	d7 02       	muls	r29, r23
    89ea:	03 03       	mulsu	r16, r19
    89ec:	30 03       	mulsu	r19, r16
    89ee:	61 03       	mulsu	r22, r17
    89f0:	94 03       	fmuls	r17, r20
    89f2:	cb 03       	fmulsu	r20, r19
    89f4:	05 04       	cpc	r0, r5
    89f6:	42 04       	cpc	r4, r2
    89f8:	83 04       	cpc	r8, r3
    89fa:	c7 04       	cpc	r12, r7
    89fc:	10 05       	cpc	r17, r0
    89fe:	5d 05       	cpc	r21, r13
    8a00:	af 05       	cpc	r26, r15
    8a02:	05 06       	cpc	r0, r21
    8a04:	61 06       	cpc	r6, r17
    8a06:	c2 06       	cpc	r12, r18
    8a08:	29 07       	cpc	r18, r25
    8a0a:	96 07       	cpc	r25, r22
    8a0c:	09 08       	sbc	r0, r9
    8a0e:	83 08       	sbc	r8, r3
    8a10:	05 09       	sbc	r16, r5
    8a12:	8e 09       	sbc	r24, r14
    8a14:	20 0a       	sbc	r2, r16
    8a16:	ba 0a       	sbc	r11, r26
    8a18:	5d 0b       	sbc	r21, r29
    8a1a:	0a 0c       	add	r0, r10
    8a1c:	c1 0c       	add	r12, r1
    8a1e:	84 0d       	add	r24, r4
    8a20:	51 0e       	add	r5, r17
    8a22:	2b 0f       	add	r18, r27
    8a24:	12 10       	cpse	r1, r2
    8a26:	07 11       	cpse	r16, r7
    8a28:	0a 12       	cpse	r0, r26
    8a2a:	1d 13       	cpse	r17, r29
    8a2c:	40 14       	cp	r4, r0
    8a2e:	74 15       	cp	r23, r4
    8a30:	ba 16       	cp	r11, r26
    8a32:	14 18       	sub	r1, r4
    8a34:	83 19       	sub	r24, r3
    8a36:	07 1b       	sub	r16, r23
    8a38:	a3 1c       	adc	r10, r3
    8a3a:	57 1e       	adc	r5, r23
    8a3c:	24 20       	and	r2, r4
    8a3e:	0e 22       	and	r0, r30
    8a40:	14 24       	eor	r1, r4
    8a42:	39 26       	eor	r3, r25
    8a44:	7f 28       	or	r7, r15
    8a46:	e8 2a       	or	r14, r24
    8a48:	75 2d       	mov	r23, r5
    8a4a:	29 30       	cpi	r18, 0x09	; 9
    8a4c:	06 33       	cpi	r16, 0x36	; 54
    8a4e:	0f 36       	cpi	r16, 0x6F	; 111
    8a50:	45 39       	cpi	r20, 0x95	; 149
    8a52:	ad 3c       	cpi	r26, 0xCD	; 205
    8a54:	49 40       	sbci	r20, 0x09	; 9
    8a56:	1b 44       	sbci	r17, 0x4B	; 75
    8a58:	28 48       	sbci	r18, 0x88	; 136
    8a5a:	73 4c       	sbci	r23, 0xC3	; 195
    8a5c:	fe 50       	subi	r31, 0x0E	; 14
    8a5e:	cf 55       	subi	r28, 0x5F	; 95
    8a60:	ea 5a       	subi	r30, 0xAA	; 170
    8a62:	51 60       	ori	r21, 0x01	; 1
    8a64:	0c 66       	ori	r16, 0x6C	; 108
    8a66:	1d 6c       	ori	r17, 0xCD	; 205
    8a68:	8b 72       	andi	r24, 0x2B	; 43
    8a6a:	5a 79       	andi	r21, 0x9A	; 154
    8a6c:	92 80       	ldd	r9, Z+2	; 0x02
    8a6e:	37 88       	ldd	r3, Z+23	; 0x17
    8a70:	50 90 e5 98 	lds	r5, 0x98E5
    8a74:	fd a1       	ldd	r31, Y+37	; 0x25
    8a76:	9f ab       	std	Y+55, r25	; 0x37
    8a78:	d3 b5       	in	r29, 0x23	; 35
    8a7a:	a3 c0       	rjmp	.+326    	; 0x8bc2 <waves+0xc2>
	...

00008b00 <waves>:
    8b00:	00 03       	mulsu	r16, r16
    8b02:	06 09       	sbc	r16, r6
    8b04:	0c 10       	cpse	r0, r12
    8b06:	13 16       	cp	r1, r19
    8b08:	19 1c       	adc	r1, r9
    8b0a:	1f 22       	and	r1, r31
    8b0c:	25 28       	or	r2, r5
    8b0e:	2b 2e       	mov	r2, r27
    8b10:	31 33       	cpi	r19, 0x31	; 49
    8b12:	36 39       	cpi	r19, 0x96	; 150
    8b14:	3c 3f       	cpi	r19, 0xFC	; 252
    8b16:	41 44       	sbci	r20, 0x41	; 65
    8b18:	47 49       	sbci	r20, 0x97	; 151
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	51 53       	subi	r21, 0x31	; 49
    8b1e:	55 58       	subi	r21, 0x85	; 133
    8b20:	5a 5c       	subi	r21, 0xCA	; 202
    8b22:	5e 60       	ori	r21, 0x0E	; 14
    8b24:	62 64       	ori	r22, 0x42	; 66
    8b26:	66 68       	ori	r22, 0x86	; 134
    8b28:	6a 6b       	ori	r22, 0xBA	; 186
    8b2a:	6d 6f       	ori	r22, 0xFD	; 253
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 76       	andi	r23, 0x65	; 101
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7a       	andi	r23, 0xAA	; 170
    8b36:	7b 7c       	andi	r23, 0xCB	; 203
    8b38:	7d 7d       	andi	r23, 0xDD	; 221
    8b3a:	7e 7e       	andi	r23, 0xEE	; 238
    8b3c:	7e 7f       	andi	r23, 0xFE	; 254
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7e 7e       	andi	r23, 0xEE	; 238
    8b46:	7e 7d       	andi	r23, 0xDE	; 222
    8b48:	7d 7c       	andi	r23, 0xCD	; 205
    8b4a:	7b 7a       	andi	r23, 0xAB	; 171
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 76       	andi	r23, 0x68	; 104
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6f       	ori	r23, 0xF0	; 240
    8b56:	6d 6b       	ori	r22, 0xBD	; 189
    8b58:	6a 68       	ori	r22, 0x8A	; 138
    8b5a:	66 64       	ori	r22, 0x46	; 70
    8b5c:	62 60       	ori	r22, 0x02	; 2
    8b5e:	5e 5c       	subi	r21, 0xCE	; 206
    8b60:	5a 58       	subi	r21, 0x8A	; 138
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	51 4e       	sbci	r21, 0xE1	; 225
    8b66:	4c 49       	sbci	r20, 0x9C	; 156
    8b68:	47 44       	sbci	r20, 0x47	; 71
    8b6a:	41 3f       	cpi	r20, 0xF1	; 241
    8b6c:	3c 39       	cpi	r19, 0x9C	; 156
    8b6e:	36 33       	cpi	r19, 0x36	; 54
    8b70:	31 2e       	mov	r3, r17
    8b72:	2b 28       	or	r2, r11
    8b74:	25 22       	and	r2, r21
    8b76:	1f 1c       	adc	r1, r15
    8b78:	19 16       	cp	r1, r25
    8b7a:	13 10       	cpse	r1, r3
    8b7c:	0c 09       	sbc	r16, r12
    8b7e:	06 03       	mulsu	r16, r22
    8b80:	00 fd       	sbrc	r16, 0
    8b82:	fa f7       	brpl	.-2      	; 0x8b82 <waves+0x82>
    8b84:	f4 f0       	brlt	.+60     	; 0x8bc2 <waves+0xc2>
    8b86:	ed ea       	ldi	r30, 0xAD	; 173
    8b88:	e7 e4       	ldi	r30, 0x47	; 71
    8b8a:	e1 de       	rcall	.-574    	; 0x894e <SetMixerWave+0xa>
    8b8c:	db d8       	rcall	.-3658   	; 0x7d44 <__vector_8+0x30>
    8b8e:	d5 d2       	rcall	.+1450   	; 0x913a <waves+0x63a>
    8b90:	cf cd       	rjmp	.-1122   	; 0x8730 <ProcessMusic+0x25e>
    8b92:	ca c7       	rjmp	.+3988   	; 0x9b28 <LBGetJoyPadState+0x70>
    8b94:	c4 c1       	rjmp	.+904    	; 0x8f1e <waves+0x41e>
    8b96:	bf bc       	out	0x2f, r11	; 47
    8b98:	b9 b7       	in	r27, 0x39	; 57
    8b9a:	b4 b2       	in	r11, 0x14	; 20
    8b9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8ba0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8ba2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8ba4:	9e 9c       	mul	r9, r14
    8ba6:	9a 98       	cbi	0x13, 2	; 19
    8ba8:	96 95       	lsr	r25
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	88 87       	std	Y+8, r24	; 0x08
    8bb4:	86 86       	std	Z+14, r8	; 0x0e
    8bb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8bb8:	83 83       	std	Z+3, r24	; 0x03
    8bba:	82 82       	std	Z+2, r8	; 0x02
    8bbc:	82 81       	ldd	r24, Z+2	; 0x02
    8bbe:	81 81       	ldd	r24, Z+1	; 0x01
    8bc0:	81 81       	ldd	r24, Z+1	; 0x01
    8bc2:	81 81       	ldd	r24, Z+1	; 0x01
    8bc4:	82 82       	std	Z+2, r8	; 0x02
    8bc6:	82 83       	std	Z+2, r24	; 0x02
    8bc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8bca:	85 86       	std	Z+13, r8	; 0x0d
    8bcc:	86 87       	std	Z+14, r24	; 0x0e
    8bce:	88 8a       	std	Y+16, r8	; 0x10
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 95 	lds	r25, 0x9593
    8bd8:	96 98       	cbi	0x12, 6	; 18
    8bda:	9a 9c       	mul	r9, r10
    8bdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8bde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8be0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8be2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be4:	af b2       	in	r10, 0x1f	; 31
    8be6:	b4 b7       	in	r27, 0x34	; 52
    8be8:	b9 bc       	out	0x29, r11	; 41
    8bea:	bf c1       	rjmp	.+894    	; 0x8f6a <waves+0x46a>
    8bec:	c4 c7       	rjmp	.+3976   	; 0x9b76 <LBPrintChar+0x28>
    8bee:	ca cd       	rjmp	.-1132   	; 0x8784 <ProcessMusic+0x2b2>
    8bf0:	cf d2       	rcall	.+1438   	; 0x9190 <waves+0x690>
    8bf2:	d5 d8       	rcall	.-3670   	; 0x7d9e <ReadButtons+0x46>
    8bf4:	db de       	rcall	.-586    	; 0x89ac <steptable+0x2e>
    8bf6:	e1 e4       	ldi	r30, 0x41	; 65
    8bf8:	e7 ea       	ldi	r30, 0xA7	; 167
    8bfa:	ed f0       	brhs	.+58     	; 0x8c36 <waves+0x136>
    8bfc:	f4 f7       	brge	.-4      	; 0x8bfa <waves+0xfa>
    8bfe:	fa fd       	.word	0xfdfa	; ????
    8c00:	80 81       	ld	r24, Z
    8c02:	82 83       	std	Z+2, r24	; 0x02
    8c04:	84 85       	ldd	r24, Z+12	; 0x0c
    8c06:	86 87       	std	Z+14, r24	; 0x0e
    8c08:	88 89       	ldd	r24, Y+16	; 0x10
    8c0a:	8a 8b       	std	Y+18, r24	; 0x12
    8c0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8c10:	90 91 92 93 	lds	r25, 0x9392
    8c14:	94 95       	.word	0x9594	; ????
    8c16:	96 97       	sbiw	r26, 0x26	; 38
    8c18:	98 99       	sbic	0x13, 0	; 19
    8c1a:	9a 9b       	sbis	0x13, 2	; 19
    8c1c:	9c 9d       	mul	r25, r12
    8c1e:	9e 9f       	mul	r25, r30
    8c20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8c22:	a2 a3       	std	Z+34, r26	; 0x22
    8c24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8c26:	a6 a7       	std	Z+46, r26	; 0x2e
    8c28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8c2a:	aa ab       	std	Y+50, r26	; 0x32
    8c2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8c2e:	ae af       	std	Y+62, r26	; 0x3e
    8c30:	b0 b1       	in	r27, 0x00	; 0
    8c32:	b2 b3       	in	r27, 0x12	; 18
    8c34:	b4 b5       	in	r27, 0x24	; 36
    8c36:	b6 b7       	in	r27, 0x36	; 54
    8c38:	b8 b9       	out	0x08, r27	; 8
    8c3a:	ba bb       	out	0x1a, r27	; 26
    8c3c:	bc bd       	out	0x2c, r27	; 44
    8c3e:	be bf       	out	0x3e, r27	; 62
    8c40:	c0 c1       	rjmp	.+896    	; 0x8fc2 <waves+0x4c2>
    8c42:	c2 c3       	rjmp	.+1924   	; 0x93c8 <waves+0x8c8>
    8c44:	c4 c5       	rjmp	.+2952   	; 0x97ce <InitializeVideoMode+0x2a>
    8c46:	c6 c7       	rjmp	.+3980   	; 0x9bd4 <LBPrintByte+0x4>
    8c48:	c8 c9       	rjmp	.-3184   	; 0x7fda <EepromReadBlock+0x4c>
    8c4a:	ca cb       	rjmp	.-2156   	; 0x83e0 <TriggerFx+0x1e>
    8c4c:	cc cd       	rjmp	.-1128   	; 0x87e6 <ProcessMusic+0x314>
    8c4e:	ce cf       	rjmp	.-100    	; 0x8bec <waves+0xec>
    8c50:	d0 d1       	rcall	.+928    	; 0x8ff2 <waves+0x4f2>
    8c52:	d2 d3       	rcall	.+1956   	; 0x93f8 <waves+0x8f8>
    8c54:	d4 d5       	rcall	.+2984   	; 0x97fe <DrawMap+0x2e>
    8c56:	d6 d7       	rcall	.+4012   	; 0x9c04 <LBPrintByte+0x34>
    8c58:	d8 d9       	rcall	.-3152   	; 0x800a <GetPrngNumber+0x16>
    8c5a:	da db       	rcall	.-2124   	; 0x8410 <TriggerFx+0x4e>
    8c5c:	dc dd       	rcall	.-1096   	; 0x8816 <ProcessMusic+0x344>
    8c5e:	de df       	rcall	.-68     	; 0x8c1c <waves+0x11c>
    8c60:	e0 e1       	ldi	r30, 0x10	; 16
    8c62:	e2 e3       	ldi	r30, 0x32	; 50
    8c64:	e4 e5       	ldi	r30, 0x54	; 84
    8c66:	e6 e7       	ldi	r30, 0x76	; 118
    8c68:	e8 e9       	ldi	r30, 0x98	; 152
    8c6a:	ea eb       	ldi	r30, 0xBA	; 186
    8c6c:	ec ed       	ldi	r30, 0xDC	; 220
    8c6e:	ee ef       	ldi	r30, 0xFE	; 254
    8c70:	f0 f1       	brcs	.+124    	; 0x8cee <waves+0x1ee>
    8c72:	f2 f3       	brmi	.-4      	; 0x8c70 <waves+0x170>
    8c74:	f4 f5       	brge	.+124    	; 0x8cf2 <waves+0x1f2>
    8c76:	f6 f7       	brtc	.-4      	; 0x8c74 <waves+0x174>
    8c78:	f8 f9       	.word	0xf9f8	; ????
    8c7a:	fa fb       	.word	0xfbfa	; ????
    8c7c:	fc fd       	.word	0xfdfc	; ????
    8c7e:	fe ff       	.word	0xfffe	; ????
    8c80:	00 01       	movw	r0, r0
    8c82:	02 03       	mulsu	r16, r18
    8c84:	04 05       	cpc	r16, r4
    8c86:	06 07       	cpc	r16, r22
    8c88:	08 09       	sbc	r16, r8
    8c8a:	0a 0b       	sbc	r16, r26
    8c8c:	0c 0d       	add	r16, r12
    8c8e:	0e 0f       	add	r16, r30
    8c90:	10 11       	cpse	r17, r0
    8c92:	12 13       	cpse	r17, r18
    8c94:	14 15       	cp	r17, r4
    8c96:	16 17       	cp	r17, r22
    8c98:	18 19       	sub	r17, r8
    8c9a:	1a 1b       	sub	r17, r26
    8c9c:	1c 1d       	adc	r17, r12
    8c9e:	1e 1f       	adc	r17, r30
    8ca0:	20 21       	and	r18, r0
    8ca2:	22 23       	and	r18, r18
    8ca4:	24 25       	eor	r18, r4
    8ca6:	26 27       	eor	r18, r22
    8ca8:	28 29       	or	r18, r8
    8caa:	2a 2b       	or	r18, r26
    8cac:	2c 2d       	mov	r18, r12
    8cae:	2e 2f       	mov	r18, r30
    8cb0:	30 31       	cpi	r19, 0x10	; 16
    8cb2:	32 33       	cpi	r19, 0x32	; 50
    8cb4:	34 35       	cpi	r19, 0x54	; 84
    8cb6:	36 37       	cpi	r19, 0x76	; 118
    8cb8:	38 39       	cpi	r19, 0x98	; 152
    8cba:	3a 3b       	cpi	r19, 0xBA	; 186
    8cbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8cbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8cc0:	40 41       	sbci	r20, 0x10	; 16
    8cc2:	42 43       	sbci	r20, 0x32	; 50
    8cc4:	44 45       	sbci	r20, 0x54	; 84
    8cc6:	46 47       	sbci	r20, 0x76	; 118
    8cc8:	48 49       	sbci	r20, 0x98	; 152
    8cca:	4a 4b       	sbci	r20, 0xBA	; 186
    8ccc:	4c 4d       	sbci	r20, 0xDC	; 220
    8cce:	4e 4f       	sbci	r20, 0xFE	; 254
    8cd0:	50 51       	subi	r21, 0x10	; 16
    8cd2:	52 53       	subi	r21, 0x32	; 50
    8cd4:	54 55       	subi	r21, 0x54	; 84
    8cd6:	56 57       	subi	r21, 0x76	; 118
    8cd8:	58 59       	subi	r21, 0x98	; 152
    8cda:	5a 5b       	subi	r21, 0xBA	; 186
    8cdc:	5c 5d       	subi	r21, 0xDC	; 220
    8cde:	5e 5f       	subi	r21, 0xFE	; 254
    8ce0:	60 61       	ori	r22, 0x10	; 16
    8ce2:	62 63       	ori	r22, 0x32	; 50
    8ce4:	64 65       	ori	r22, 0x54	; 84
    8ce6:	66 67       	ori	r22, 0x76	; 118
    8ce8:	68 69       	ori	r22, 0x98	; 152
    8cea:	6a 6b       	ori	r22, 0xBA	; 186
    8cec:	6c 6d       	ori	r22, 0xDC	; 220
    8cee:	6e 6f       	ori	r22, 0xFE	; 254
    8cf0:	70 71       	andi	r23, 0x10	; 16
    8cf2:	72 73       	andi	r23, 0x32	; 50
    8cf4:	74 75       	andi	r23, 0x54	; 84
    8cf6:	76 77       	andi	r23, 0x76	; 118
    8cf8:	78 79       	andi	r23, 0x98	; 152
    8cfa:	7a 7b       	andi	r23, 0xBA	; 186
    8cfc:	7c 7d       	andi	r23, 0xDC	; 220
    8cfe:	7e 7f       	andi	r23, 0xFE	; 254
    8d00:	00 02       	muls	r16, r16
    8d02:	04 06       	cpc	r0, r20
    8d04:	08 0a       	sbc	r0, r24
    8d06:	0c 0e       	add	r0, r28
    8d08:	10 12       	cpse	r1, r16
    8d0a:	14 16       	cp	r1, r20
    8d0c:	18 1a       	sub	r1, r24
    8d0e:	1c 1e       	adc	r1, r28
    8d10:	20 22       	and	r2, r16
    8d12:	24 26       	eor	r2, r20
    8d14:	28 2a       	or	r2, r24
    8d16:	2c 2e       	mov	r2, r28
    8d18:	30 32       	cpi	r19, 0x20	; 32
    8d1a:	34 36       	cpi	r19, 0x64	; 100
    8d1c:	38 3a       	cpi	r19, 0xA8	; 168
    8d1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8d20:	40 42       	sbci	r20, 0x20	; 32
    8d22:	44 46       	sbci	r20, 0x64	; 100
    8d24:	48 4a       	sbci	r20, 0xA8	; 168
    8d26:	4c 4e       	sbci	r20, 0xEC	; 236
    8d28:	50 52       	subi	r21, 0x20	; 32
    8d2a:	54 56       	subi	r21, 0x64	; 100
    8d2c:	58 5a       	subi	r21, 0xA8	; 168
    8d2e:	5c 5e       	subi	r21, 0xEC	; 236
    8d30:	60 62       	ori	r22, 0x20	; 32
    8d32:	64 66       	ori	r22, 0x64	; 100
    8d34:	68 6a       	ori	r22, 0xA8	; 168
    8d36:	6c 6e       	ori	r22, 0xEC	; 236
    8d38:	70 72       	andi	r23, 0x20	; 32
    8d3a:	74 76       	andi	r23, 0x64	; 100
    8d3c:	78 7a       	andi	r23, 0xA8	; 168
    8d3e:	7c 7e       	andi	r23, 0xEC	; 236
    8d40:	7f 7d       	andi	r23, 0xDF	; 223
    8d42:	7b 79       	andi	r23, 0x9B	; 155
    8d44:	77 75       	andi	r23, 0x57	; 87
    8d46:	73 71       	andi	r23, 0x13	; 19
    8d48:	6f 6d       	ori	r22, 0xDF	; 223
    8d4a:	6b 69       	ori	r22, 0x9B	; 155
    8d4c:	67 65       	ori	r22, 0x57	; 87
    8d4e:	63 61       	ori	r22, 0x13	; 19
    8d50:	5f 5d       	subi	r21, 0xDF	; 223
    8d52:	5b 59       	subi	r21, 0x9B	; 155
    8d54:	57 55       	subi	r21, 0x57	; 87
    8d56:	53 51       	subi	r21, 0x13	; 19
    8d58:	4f 4d       	sbci	r20, 0xDF	; 223
    8d5a:	4b 49       	sbci	r20, 0x9B	; 155
    8d5c:	47 45       	sbci	r20, 0x57	; 87
    8d5e:	43 41       	sbci	r20, 0x13	; 19
    8d60:	3f 3d       	cpi	r19, 0xDF	; 223
    8d62:	3b 39       	cpi	r19, 0x9B	; 155
    8d64:	37 35       	cpi	r19, 0x57	; 87
    8d66:	33 31       	cpi	r19, 0x13	; 19
    8d68:	2f 2d       	mov	r18, r15
    8d6a:	2b 29       	or	r18, r11
    8d6c:	27 25       	eor	r18, r7
    8d6e:	23 21       	and	r18, r3
    8d70:	1f 1d       	adc	r17, r15
    8d72:	1b 19       	sub	r17, r11
    8d74:	17 15       	cp	r17, r7
    8d76:	13 11       	cpse	r17, r3
    8d78:	0f 0d       	add	r16, r15
    8d7a:	0b 09       	sbc	r16, r11
    8d7c:	07 05       	cpc	r16, r7
    8d7e:	03 01       	movw	r0, r6
    8d80:	ff fd       	.word	0xfdff	; ????
    8d82:	fb f9       	.word	0xf9fb	; ????
    8d84:	f7 f5       	brid	.+124    	; 0x8e02 <waves+0x302>
    8d86:	f3 f1       	brvs	.+124    	; 0x8e04 <waves+0x304>
    8d88:	ef ed       	ldi	r30, 0xDF	; 223
    8d8a:	eb e9       	ldi	r30, 0x9B	; 155
    8d8c:	e7 e5       	ldi	r30, 0x57	; 87
    8d8e:	e3 e1       	ldi	r30, 0x13	; 19
    8d90:	df dd       	rcall	.-1090   	; 0x8950 <SetMixerWave+0xc>
    8d92:	db d9       	rcall	.-3146   	; 0x814a <PatchCommand08+0x16>
    8d94:	d7 d5       	rcall	.+2990   	; 0x9944 <extract_dip_switches+0xe>
    8d96:	d3 d1       	rcall	.+934    	; 0x913e <waves+0x63e>
    8d98:	cf cd       	rjmp	.-1122   	; 0x8938 <set_note_waves+0x18>
    8d9a:	cb c9       	rjmp	.-3178   	; 0x8132 <PatchCommand04+0xe>
    8d9c:	c7 c5       	rjmp	.+2958   	; 0x992c <ProcessFading+0x48>
    8d9e:	c3 c1       	rjmp	.+902    	; 0x9126 <waves+0x626>
    8da0:	bf bd       	out	0x2f, r27	; 47
    8da2:	bb b9       	out	0x0b, r27	; 11
    8da4:	b7 b5       	in	r27, 0x27	; 39
    8da6:	b3 b1       	in	r27, 0x03	; 3
    8da8:	af ad       	ldd	r26, Y+63	; 0x3f
    8daa:	ab a9       	ldd	r26, Y+51	; 0x33
    8dac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8dae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8db0:	9f 9d       	mul	r25, r15
    8db2:	9b 99       	sbic	0x13, 3	; 19
    8db4:	97 95       	ror	r25
    8db6:	93 91       	.word	0x9193	; ????
    8db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8dba:	8b 89       	ldd	r24, Y+19	; 0x13
    8dbc:	87 85       	ldd	r24, Z+15	; 0x0f
    8dbe:	83 81       	ldd	r24, Z+3	; 0x03
    8dc0:	80 82       	st	Z, r8
    8dc2:	84 86       	std	Z+12, r8	; 0x0c
    8dc4:	88 8a       	std	Y+16, r8	; 0x10
    8dc6:	8c 8e       	std	Y+28, r8	; 0x1c
    8dc8:	90 92 94 96 	sts	0x9694, r9
    8dcc:	98 9a       	sbi	0x13, 0	; 19
    8dce:	9c 9e       	mul	r9, r28
    8dd0:	a0 a2       	std	Z+32, r10	; 0x20
    8dd2:	a4 a6       	std	Z+44, r10	; 0x2c
    8dd4:	a8 aa       	std	Y+48, r10	; 0x30
    8dd6:	ac ae       	std	Y+60, r10	; 0x3c
    8dd8:	b0 b2       	in	r11, 0x10	; 16
    8dda:	b4 b6       	in	r11, 0x34	; 52
    8ddc:	b8 ba       	out	0x18, r11	; 24
    8dde:	bc be       	out	0x3c, r11	; 60
    8de0:	c0 c2       	rjmp	.+1408   	; 0x9362 <waves+0x862>
    8de2:	c4 c6       	rjmp	.+3464   	; 0x9b6c <LBPrintChar+0x1e>
    8de4:	c8 ca       	rjmp	.-2672   	; 0x8376 <TriggerCommon+0xd0>
    8de6:	cc ce       	rjmp	.-616    	; 0x8b80 <waves+0x80>
    8de8:	d0 d2       	rcall	.+1440   	; 0x938a <waves+0x88a>
    8dea:	d4 d6       	rcall	.+3496   	; 0x9b94 <LBPrintChar+0x46>
    8dec:	d8 da       	rcall	.-2640   	; 0x839e <TriggerCommon+0xf8>
    8dee:	dc de       	rcall	.-584    	; 0x8ba8 <waves+0xa8>
    8df0:	e0 e2       	ldi	r30, 0x20	; 32
    8df2:	e4 e6       	ldi	r30, 0x64	; 100
    8df4:	e8 ea       	ldi	r30, 0xA8	; 168
    8df6:	ec ee       	ldi	r30, 0xEC	; 236
    8df8:	f0 f2       	brcs	.-68     	; 0x8db6 <waves+0x2b6>
    8dfa:	f4 f6       	brge	.-68     	; 0x8db8 <waves+0x2b8>
    8dfc:	f8 fa       	.word	0xfaf8	; ????
    8dfe:	fc fe       	.word	0xfefc	; ????
    8e00:	7f 7f       	andi	r23, 0xFF	; 255
    8e02:	7f 7f       	andi	r23, 0xFF	; 255
    8e04:	7f 7f       	andi	r23, 0xFF	; 255
    8e06:	7f 7f       	andi	r23, 0xFF	; 255
    8e08:	7f 7f       	andi	r23, 0xFF	; 255
    8e0a:	7f 7f       	andi	r23, 0xFF	; 255
    8e0c:	7f 7f       	andi	r23, 0xFF	; 255
    8e0e:	7f 7f       	andi	r23, 0xFF	; 255
    8e10:	7f 7f       	andi	r23, 0xFF	; 255
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	80 80       	ld	r8, Z
    8e42:	80 80       	ld	r8, Z
    8e44:	80 80       	ld	r8, Z
    8e46:	80 80       	ld	r8, Z
    8e48:	80 80       	ld	r8, Z
    8e4a:	80 80       	ld	r8, Z
    8e4c:	80 80       	ld	r8, Z
    8e4e:	80 80       	ld	r8, Z
    8e50:	80 80       	ld	r8, Z
    8e52:	80 80       	ld	r8, Z
    8e54:	80 80       	ld	r8, Z
    8e56:	80 80       	ld	r8, Z
    8e58:	80 80       	ld	r8, Z
    8e5a:	80 80       	ld	r8, Z
    8e5c:	80 80       	ld	r8, Z
    8e5e:	80 80       	ld	r8, Z
    8e60:	80 80       	ld	r8, Z
    8e62:	80 80       	ld	r8, Z
    8e64:	80 80       	ld	r8, Z
    8e66:	80 80       	ld	r8, Z
    8e68:	80 80       	ld	r8, Z
    8e6a:	80 80       	ld	r8, Z
    8e6c:	80 80       	ld	r8, Z
    8e6e:	80 80       	ld	r8, Z
    8e70:	80 80       	ld	r8, Z
    8e72:	80 80       	ld	r8, Z
    8e74:	80 80       	ld	r8, Z
    8e76:	80 80       	ld	r8, Z
    8e78:	80 80       	ld	r8, Z
    8e7a:	80 80       	ld	r8, Z
    8e7c:	80 80       	ld	r8, Z
    8e7e:	80 80       	ld	r8, Z
    8e80:	80 80       	ld	r8, Z
    8e82:	80 80       	ld	r8, Z
    8e84:	80 80       	ld	r8, Z
    8e86:	80 80       	ld	r8, Z
    8e88:	80 80       	ld	r8, Z
    8e8a:	80 80       	ld	r8, Z
    8e8c:	80 80       	ld	r8, Z
    8e8e:	80 80       	ld	r8, Z
    8e90:	80 80       	ld	r8, Z
    8e92:	80 80       	ld	r8, Z
    8e94:	80 80       	ld	r8, Z
    8e96:	80 80       	ld	r8, Z
    8e98:	80 80       	ld	r8, Z
    8e9a:	80 80       	ld	r8, Z
    8e9c:	80 80       	ld	r8, Z
    8e9e:	80 80       	ld	r8, Z
    8ea0:	80 80       	ld	r8, Z
    8ea2:	80 80       	ld	r8, Z
    8ea4:	80 80       	ld	r8, Z
    8ea6:	80 80       	ld	r8, Z
    8ea8:	80 80       	ld	r8, Z
    8eaa:	80 80       	ld	r8, Z
    8eac:	80 80       	ld	r8, Z
    8eae:	80 80       	ld	r8, Z
    8eb0:	80 80       	ld	r8, Z
    8eb2:	80 80       	ld	r8, Z
    8eb4:	80 80       	ld	r8, Z
    8eb6:	80 80       	ld	r8, Z
    8eb8:	80 80       	ld	r8, Z
    8eba:	80 80       	ld	r8, Z
    8ebc:	80 80       	ld	r8, Z
    8ebe:	80 80       	ld	r8, Z
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 80       	ld	r8, Z
    8ef6:	80 80       	ld	r8, Z
    8ef8:	80 80       	ld	r8, Z
    8efa:	80 80       	ld	r8, Z
    8efc:	80 80       	ld	r8, Z
    8efe:	80 80       	ld	r8, Z
    8f00:	7f 7f       	andi	r23, 0xFF	; 255
    8f02:	7f 7f       	andi	r23, 0xFF	; 255
    8f04:	7f 7f       	andi	r23, 0xFF	; 255
    8f06:	7f 7f       	andi	r23, 0xFF	; 255
    8f08:	7f 7f       	andi	r23, 0xFF	; 255
    8f0a:	7f 7f       	andi	r23, 0xFF	; 255
    8f0c:	7f 7f       	andi	r23, 0xFF	; 255
    8f0e:	7f 7f       	andi	r23, 0xFF	; 255
    8f10:	7f 7f       	andi	r23, 0xFF	; 255
    8f12:	7f 7f       	andi	r23, 0xFF	; 255
    8f14:	7f 7f       	andi	r23, 0xFF	; 255
    8f16:	7f 7f       	andi	r23, 0xFF	; 255
    8f18:	7f 7f       	andi	r23, 0xFF	; 255
    8f1a:	7f 7f       	andi	r23, 0xFF	; 255
    8f1c:	7f 7f       	andi	r23, 0xFF	; 255
    8f1e:	7f 7f       	andi	r23, 0xFF	; 255
    8f20:	7f 7f       	andi	r23, 0xFF	; 255
    8f22:	7f 7f       	andi	r23, 0xFF	; 255
    8f24:	7f 7f       	andi	r23, 0xFF	; 255
    8f26:	7f 7f       	andi	r23, 0xFF	; 255
    8f28:	7f 7f       	andi	r23, 0xFF	; 255
    8f2a:	7f 7f       	andi	r23, 0xFF	; 255
    8f2c:	7f 7f       	andi	r23, 0xFF	; 255
    8f2e:	7f 7f       	andi	r23, 0xFF	; 255
    8f30:	7f 7f       	andi	r23, 0xFF	; 255
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7f 7f       	andi	r23, 0xFF	; 255
    8f46:	7f 7f       	andi	r23, 0xFF	; 255
    8f48:	7f 7f       	andi	r23, 0xFF	; 255
    8f4a:	7f 7f       	andi	r23, 0xFF	; 255
    8f4c:	7f 7f       	andi	r23, 0xFF	; 255
    8f4e:	7f 7f       	andi	r23, 0xFF	; 255
    8f50:	7f 7f       	andi	r23, 0xFF	; 255
    8f52:	7f 7f       	andi	r23, 0xFF	; 255
    8f54:	7f 7f       	andi	r23, 0xFF	; 255
    8f56:	7f 7f       	andi	r23, 0xFF	; 255
    8f58:	7f 7f       	andi	r23, 0xFF	; 255
    8f5a:	7f 7f       	andi	r23, 0xFF	; 255
    8f5c:	7f 7f       	andi	r23, 0xFF	; 255
    8f5e:	7f 7f       	andi	r23, 0xFF	; 255
    8f60:	7f 7f       	andi	r23, 0xFF	; 255
    8f62:	7f 7f       	andi	r23, 0xFF	; 255
    8f64:	7f 7f       	andi	r23, 0xFF	; 255
    8f66:	7f 7f       	andi	r23, 0xFF	; 255
    8f68:	7f 7f       	andi	r23, 0xFF	; 255
    8f6a:	7f 7f       	andi	r23, 0xFF	; 255
    8f6c:	7f 7f       	andi	r23, 0xFF	; 255
    8f6e:	7f 7f       	andi	r23, 0xFF	; 255
    8f70:	7f 7f       	andi	r23, 0xFF	; 255
    8f72:	7f 7f       	andi	r23, 0xFF	; 255
    8f74:	7f 7f       	andi	r23, 0xFF	; 255
    8f76:	7f 7f       	andi	r23, 0xFF	; 255
    8f78:	7f 7f       	andi	r23, 0xFF	; 255
    8f7a:	7f 7f       	andi	r23, 0xFF	; 255
    8f7c:	7f 7f       	andi	r23, 0xFF	; 255
    8f7e:	7f 7f       	andi	r23, 0xFF	; 255
    8f80:	80 80       	ld	r8, Z
    8f82:	80 80       	ld	r8, Z
    8f84:	80 80       	ld	r8, Z
    8f86:	80 80       	ld	r8, Z
    8f88:	80 80       	ld	r8, Z
    8f8a:	80 80       	ld	r8, Z
    8f8c:	80 80       	ld	r8, Z
    8f8e:	80 80       	ld	r8, Z
    8f90:	80 80       	ld	r8, Z
    8f92:	80 80       	ld	r8, Z
    8f94:	80 80       	ld	r8, Z
    8f96:	80 80       	ld	r8, Z
    8f98:	80 80       	ld	r8, Z
    8f9a:	80 80       	ld	r8, Z
    8f9c:	80 80       	ld	r8, Z
    8f9e:	80 80       	ld	r8, Z
    8fa0:	80 80       	ld	r8, Z
    8fa2:	80 80       	ld	r8, Z
    8fa4:	80 80       	ld	r8, Z
    8fa6:	80 80       	ld	r8, Z
    8fa8:	80 80       	ld	r8, Z
    8faa:	80 80       	ld	r8, Z
    8fac:	80 80       	ld	r8, Z
    8fae:	80 80       	ld	r8, Z
    8fb0:	80 80       	ld	r8, Z
    8fb2:	80 80       	ld	r8, Z
    8fb4:	80 80       	ld	r8, Z
    8fb6:	80 80       	ld	r8, Z
    8fb8:	80 80       	ld	r8, Z
    8fba:	80 80       	ld	r8, Z
    8fbc:	80 80       	ld	r8, Z
    8fbe:	80 80       	ld	r8, Z
    8fc0:	80 80       	ld	r8, Z
    8fc2:	80 80       	ld	r8, Z
    8fc4:	80 80       	ld	r8, Z
    8fc6:	80 80       	ld	r8, Z
    8fc8:	80 80       	ld	r8, Z
    8fca:	80 80       	ld	r8, Z
    8fcc:	80 80       	ld	r8, Z
    8fce:	80 80       	ld	r8, Z
    8fd0:	80 80       	ld	r8, Z
    8fd2:	80 80       	ld	r8, Z
    8fd4:	80 80       	ld	r8, Z
    8fd6:	80 80       	ld	r8, Z
    8fd8:	80 80       	ld	r8, Z
    8fda:	80 80       	ld	r8, Z
    8fdc:	80 80       	ld	r8, Z
    8fde:	80 80       	ld	r8, Z
    8fe0:	80 80       	ld	r8, Z
    8fe2:	80 80       	ld	r8, Z
    8fe4:	80 80       	ld	r8, Z
    8fe6:	80 80       	ld	r8, Z
    8fe8:	80 80       	ld	r8, Z
    8fea:	80 80       	ld	r8, Z
    8fec:	80 80       	ld	r8, Z
    8fee:	80 80       	ld	r8, Z
    8ff0:	80 80       	ld	r8, Z
    8ff2:	80 80       	ld	r8, Z
    8ff4:	80 80       	ld	r8, Z
    8ff6:	80 80       	ld	r8, Z
    8ff8:	80 80       	ld	r8, Z
    8ffa:	80 80       	ld	r8, Z
    8ffc:	80 80       	ld	r8, Z
    8ffe:	80 80       	ld	r8, Z
    9000:	7f 7f       	andi	r23, 0xFF	; 255
    9002:	7f 7f       	andi	r23, 0xFF	; 255
    9004:	7f 7f       	andi	r23, 0xFF	; 255
    9006:	7f 7f       	andi	r23, 0xFF	; 255
    9008:	7f 7f       	andi	r23, 0xFF	; 255
    900a:	7f 7f       	andi	r23, 0xFF	; 255
    900c:	7f 7f       	andi	r23, 0xFF	; 255
    900e:	7f 7f       	andi	r23, 0xFF	; 255
    9010:	7f 7f       	andi	r23, 0xFF	; 255
    9012:	7f 7f       	andi	r23, 0xFF	; 255
    9014:	7f 7f       	andi	r23, 0xFF	; 255
    9016:	7f 7f       	andi	r23, 0xFF	; 255
    9018:	7f 7f       	andi	r23, 0xFF	; 255
    901a:	7f 7f       	andi	r23, 0xFF	; 255
    901c:	7f 7f       	andi	r23, 0xFF	; 255
    901e:	7f 7f       	andi	r23, 0xFF	; 255
    9020:	7f 7f       	andi	r23, 0xFF	; 255
    9022:	7f 7f       	andi	r23, 0xFF	; 255
    9024:	7f 7f       	andi	r23, 0xFF	; 255
    9026:	7f 7f       	andi	r23, 0xFF	; 255
    9028:	7f 7f       	andi	r23, 0xFF	; 255
    902a:	7f 7f       	andi	r23, 0xFF	; 255
    902c:	7f 7f       	andi	r23, 0xFF	; 255
    902e:	7f 7f       	andi	r23, 0xFF	; 255
    9030:	7f 7f       	andi	r23, 0xFF	; 255
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7f 7f       	andi	r23, 0xFF	; 255
    9046:	7f 7f       	andi	r23, 0xFF	; 255
    9048:	7f 7f       	andi	r23, 0xFF	; 255
    904a:	7f 7f       	andi	r23, 0xFF	; 255
    904c:	7f 7f       	andi	r23, 0xFF	; 255
    904e:	7f 7f       	andi	r23, 0xFF	; 255
    9050:	7f 7f       	andi	r23, 0xFF	; 255
    9052:	7f 7f       	andi	r23, 0xFF	; 255
    9054:	7f 7f       	andi	r23, 0xFF	; 255
    9056:	7f 7f       	andi	r23, 0xFF	; 255
    9058:	7f 7f       	andi	r23, 0xFF	; 255
    905a:	7f 7f       	andi	r23, 0xFF	; 255
    905c:	7f 7f       	andi	r23, 0xFF	; 255
    905e:	7f 7f       	andi	r23, 0xFF	; 255
    9060:	7f 7f       	andi	r23, 0xFF	; 255
    9062:	7f 7f       	andi	r23, 0xFF	; 255
    9064:	7f 7f       	andi	r23, 0xFF	; 255
    9066:	7f 7f       	andi	r23, 0xFF	; 255
    9068:	7f 7f       	andi	r23, 0xFF	; 255
    906a:	7f 7f       	andi	r23, 0xFF	; 255
    906c:	7f 7f       	andi	r23, 0xFF	; 255
    906e:	7f 7f       	andi	r23, 0xFF	; 255
    9070:	7f 7f       	andi	r23, 0xFF	; 255
    9072:	7f 7f       	andi	r23, 0xFF	; 255
    9074:	7f 7f       	andi	r23, 0xFF	; 255
    9076:	7f 7f       	andi	r23, 0xFF	; 255
    9078:	7f 7f       	andi	r23, 0xFF	; 255
    907a:	7f 7f       	andi	r23, 0xFF	; 255
    907c:	7f 7f       	andi	r23, 0xFF	; 255
    907e:	7f 7f       	andi	r23, 0xFF	; 255
    9080:	7f 7f       	andi	r23, 0xFF	; 255
    9082:	7f 7f       	andi	r23, 0xFF	; 255
    9084:	7f 7f       	andi	r23, 0xFF	; 255
    9086:	7f 7f       	andi	r23, 0xFF	; 255
    9088:	7f 7f       	andi	r23, 0xFF	; 255
    908a:	7f 7f       	andi	r23, 0xFF	; 255
    908c:	7f 7f       	andi	r23, 0xFF	; 255
    908e:	7f 7f       	andi	r23, 0xFF	; 255
    9090:	7f 7f       	andi	r23, 0xFF	; 255
    9092:	7f 7f       	andi	r23, 0xFF	; 255
    9094:	7f 7f       	andi	r23, 0xFF	; 255
    9096:	7f 7f       	andi	r23, 0xFF	; 255
    9098:	7f 7f       	andi	r23, 0xFF	; 255
    909a:	7f 7f       	andi	r23, 0xFF	; 255
    909c:	7f 7f       	andi	r23, 0xFF	; 255
    909e:	7f 7f       	andi	r23, 0xFF	; 255
    90a0:	7f 7f       	andi	r23, 0xFF	; 255
    90a2:	7f 7f       	andi	r23, 0xFF	; 255
    90a4:	7f 7f       	andi	r23, 0xFF	; 255
    90a6:	7f 7f       	andi	r23, 0xFF	; 255
    90a8:	7f 7f       	andi	r23, 0xFF	; 255
    90aa:	7f 7f       	andi	r23, 0xFF	; 255
    90ac:	7f 7f       	andi	r23, 0xFF	; 255
    90ae:	7f 7f       	andi	r23, 0xFF	; 255
    90b0:	7f 7f       	andi	r23, 0xFF	; 255
    90b2:	7f 7f       	andi	r23, 0xFF	; 255
    90b4:	7f 7f       	andi	r23, 0xFF	; 255
    90b6:	7f 7f       	andi	r23, 0xFF	; 255
    90b8:	7f 7f       	andi	r23, 0xFF	; 255
    90ba:	7f 7f       	andi	r23, 0xFF	; 255
    90bc:	7f 7f       	andi	r23, 0xFF	; 255
    90be:	7f 7f       	andi	r23, 0xFF	; 255
    90c0:	80 80       	ld	r8, Z
    90c2:	80 80       	ld	r8, Z
    90c4:	80 80       	ld	r8, Z
    90c6:	80 80       	ld	r8, Z
    90c8:	80 80       	ld	r8, Z
    90ca:	80 80       	ld	r8, Z
    90cc:	80 80       	ld	r8, Z
    90ce:	80 80       	ld	r8, Z
    90d0:	80 80       	ld	r8, Z
    90d2:	80 80       	ld	r8, Z
    90d4:	80 80       	ld	r8, Z
    90d6:	80 80       	ld	r8, Z
    90d8:	80 80       	ld	r8, Z
    90da:	80 80       	ld	r8, Z
    90dc:	80 80       	ld	r8, Z
    90de:	80 80       	ld	r8, Z
    90e0:	80 80       	ld	r8, Z
    90e2:	80 80       	ld	r8, Z
    90e4:	80 80       	ld	r8, Z
    90e6:	80 80       	ld	r8, Z
    90e8:	80 80       	ld	r8, Z
    90ea:	80 80       	ld	r8, Z
    90ec:	80 80       	ld	r8, Z
    90ee:	80 80       	ld	r8, Z
    90f0:	80 80       	ld	r8, Z
    90f2:	80 80       	ld	r8, Z
    90f4:	80 80       	ld	r8, Z
    90f6:	80 80       	ld	r8, Z
    90f8:	80 80       	ld	r8, Z
    90fa:	80 80       	ld	r8, Z
    90fc:	80 80       	ld	r8, Z
    90fe:	80 80       	ld	r8, Z
    9100:	03 09       	sbc	r16, r3
    9102:	13 1e       	adc	r1, r19
    9104:	28 31       	cpi	r18, 0x18	; 24
    9106:	3a 40       	sbci	r19, 0x0A	; 10
    9108:	46 4c       	sbci	r20, 0xC6	; 198
    910a:	50 54       	subi	r21, 0x40	; 64
    910c:	58 5b       	subi	r21, 0xB8	; 184
    910e:	5e 61       	ori	r21, 0x1E	; 30
    9110:	63 65       	ori	r22, 0x53	; 83
    9112:	67 69       	ori	r22, 0x97	; 151
    9114:	6b 6c       	ori	r22, 0xCB	; 203
    9116:	6e 6f       	ori	r22, 0xFE	; 254
    9118:	70 71       	andi	r23, 0x10	; 16
    911a:	72 73       	andi	r23, 0x32	; 50
    911c:	74 75       	andi	r23, 0x54	; 84
    911e:	76 77       	andi	r23, 0x76	; 118
    9120:	77 78       	andi	r23, 0x87	; 135
    9122:	79 79       	andi	r23, 0x99	; 153
    9124:	7a 7a       	andi	r23, 0xAA	; 170
    9126:	7b 7b       	andi	r23, 0xBB	; 187
    9128:	7c 7c       	andi	r23, 0xCC	; 204
    912a:	7c 7d       	andi	r23, 0xDC	; 220
    912c:	7d 7d       	andi	r23, 0xDD	; 221
    912e:	7e 7e       	andi	r23, 0xEE	; 238
    9130:	7e 7e       	andi	r23, 0xEE	; 238
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7f 7f       	andi	r23, 0xFF	; 255
    9148:	7f 7f       	andi	r23, 0xFF	; 255
    914a:	7f 7f       	andi	r23, 0xFF	; 255
    914c:	7f 7e       	andi	r23, 0xEF	; 239
    914e:	7e 7e       	andi	r23, 0xEE	; 238
    9150:	7e 7d       	andi	r23, 0xDE	; 222
    9152:	7d 7d       	andi	r23, 0xDD	; 221
    9154:	7c 7c       	andi	r23, 0xCC	; 204
    9156:	7c 7b       	andi	r23, 0xBC	; 188
    9158:	7b 7a       	andi	r23, 0xAB	; 171
    915a:	7a 79       	andi	r23, 0x9A	; 154
    915c:	79 78       	andi	r23, 0x89	; 137
    915e:	77 77       	andi	r23, 0x77	; 119
    9160:	76 75       	andi	r23, 0x56	; 86
    9162:	74 73       	andi	r23, 0x34	; 52
    9164:	72 71       	andi	r23, 0x12	; 18
    9166:	70 6f       	ori	r23, 0xF0	; 240
    9168:	6e 6c       	ori	r22, 0xCE	; 206
    916a:	6b 69       	ori	r22, 0x9B	; 155
    916c:	67 65       	ori	r22, 0x57	; 87
    916e:	63 61       	ori	r22, 0x13	; 19
    9170:	5e 5b       	subi	r21, 0xBE	; 190
    9172:	58 54       	subi	r21, 0x48	; 72
    9174:	50 4c       	sbci	r21, 0xC0	; 192
    9176:	46 40       	sbci	r20, 0x06	; 6
    9178:	3a 31       	cpi	r19, 0x1A	; 26
    917a:	28 1e       	adc	r2, r24
    917c:	13 09       	sbc	r17, r3
    917e:	03 00       	.word	0x0003	; ????
    9180:	c6 cc       	rjmp	.-1652   	; 0x8b0e <waves+0xe>
    9182:	d5 db       	rcall	.-2134   	; 0x892e <set_note_waves+0xe>
    9184:	df e3       	ldi	r29, 0x3F	; 63
    9186:	e5 e7       	ldi	r30, 0x75	; 117
    9188:	e9 ea       	ldi	r30, 0xA9	; 169
    918a:	eb ec       	ldi	r30, 0xCB	; 203
    918c:	ed ee       	ldi	r30, 0xED	; 237
    918e:	ef ef       	ldi	r30, 0xFF	; 255
    9190:	f0 f0       	brcs	.+60     	; 0x91ce <waves+0x6ce>
    9192:	f0 f1       	brcs	.+124    	; 0x9210 <waves+0x710>
    9194:	f1 f1       	breq	.+124    	; 0x9212 <waves+0x712>
    9196:	f1 f2       	breq	.-68     	; 0x9154 <waves+0x654>
    9198:	f2 f2       	brmi	.-68     	; 0x9156 <waves+0x656>
    919a:	f2 f2       	brmi	.-68     	; 0x9158 <waves+0x658>
    919c:	f2 f2       	brmi	.-68     	; 0x915a <waves+0x65a>
    919e:	f2 f3       	brmi	.-4      	; 0x919c <waves+0x69c>
    91a0:	f3 f3       	brvs	.-4      	; 0x919e <waves+0x69e>
    91a2:	f3 f3       	brvs	.-4      	; 0x91a0 <waves+0x6a0>
    91a4:	f3 f3       	brvs	.-4      	; 0x91a2 <waves+0x6a2>
    91a6:	f3 f3       	brvs	.-4      	; 0x91a4 <waves+0x6a4>
    91a8:	f3 f3       	brvs	.-4      	; 0x91a6 <waves+0x6a6>
    91aa:	f3 f3       	brvs	.-4      	; 0x91a8 <waves+0x6a8>
    91ac:	f3 f3       	brvs	.-4      	; 0x91aa <waves+0x6aa>
    91ae:	f3 f3       	brvs	.-4      	; 0x91ac <waves+0x6ac>
    91b0:	f3 f3       	brvs	.-4      	; 0x91ae <waves+0x6ae>
    91b2:	f3 f3       	brvs	.-4      	; 0x91b0 <waves+0x6b0>
    91b4:	f3 f3       	brvs	.-4      	; 0x91b2 <waves+0x6b2>
    91b6:	f3 f3       	brvs	.-4      	; 0x91b4 <waves+0x6b4>
    91b8:	f3 f3       	brvs	.-4      	; 0x91b6 <waves+0x6b6>
    91ba:	f3 f3       	brvs	.-4      	; 0x91b8 <waves+0x6b8>
    91bc:	f3 f3       	brvs	.-4      	; 0x91ba <waves+0x6ba>
    91be:	f3 f3       	brvs	.-4      	; 0x91bc <waves+0x6bc>
    91c0:	f3 f3       	brvs	.-4      	; 0x91be <waves+0x6be>
    91c2:	f3 f3       	brvs	.-4      	; 0x91c0 <waves+0x6c0>
    91c4:	f3 f3       	brvs	.-4      	; 0x91c2 <waves+0x6c2>
    91c6:	f3 f3       	brvs	.-4      	; 0x91c4 <waves+0x6c4>
    91c8:	f3 f3       	brvs	.-4      	; 0x91c6 <waves+0x6c6>
    91ca:	f3 f3       	brvs	.-4      	; 0x91c8 <waves+0x6c8>
    91cc:	f3 f3       	brvs	.-4      	; 0x91ca <waves+0x6ca>
    91ce:	f3 f3       	brvs	.-4      	; 0x91cc <waves+0x6cc>
    91d0:	f3 f3       	brvs	.-4      	; 0x91ce <waves+0x6ce>
    91d2:	f3 f3       	brvs	.-4      	; 0x91d0 <waves+0x6d0>
    91d4:	f3 f3       	brvs	.-4      	; 0x91d2 <waves+0x6d2>
    91d6:	f3 f3       	brvs	.-4      	; 0x91d4 <waves+0x6d4>
    91d8:	f3 f3       	brvs	.-4      	; 0x91d6 <waves+0x6d6>
    91da:	f3 f3       	brvs	.-4      	; 0x91d8 <waves+0x6d8>
    91dc:	f3 f3       	brvs	.-4      	; 0x91da <waves+0x6da>
    91de:	f3 f3       	brvs	.-4      	; 0x91dc <waves+0x6dc>
    91e0:	f2 f2       	brmi	.-68     	; 0x919e <waves+0x69e>
    91e2:	f2 f2       	brmi	.-68     	; 0x91a0 <waves+0x6a0>
    91e4:	f2 f2       	brmi	.-68     	; 0x91a2 <waves+0x6a2>
    91e6:	f2 f2       	brmi	.-68     	; 0x91a4 <waves+0x6a4>
    91e8:	f1 f1       	breq	.+124    	; 0x9266 <waves+0x766>
    91ea:	f1 f1       	breq	.+124    	; 0x9268 <waves+0x768>
    91ec:	f0 f0       	brcs	.+60     	; 0x922a <waves+0x72a>
    91ee:	f0 ef       	ldi	r31, 0xF0	; 240
    91f0:	ef ee       	ldi	r30, 0xEF	; 239
    91f2:	ed ec       	ldi	r30, 0xCD	; 205
    91f4:	eb ea       	ldi	r30, 0xAB	; 171
    91f6:	e9 e7       	ldi	r30, 0x79	; 121
    91f8:	e5 e3       	ldi	r30, 0x35	; 53
    91fa:	df db       	rcall	.-2114   	; 0x89ba <steptable+0x3c>
    91fc:	d5 cc       	rjmp	.-1622   	; 0x8ba8 <waves+0xa8>
    91fe:	c6 00       	.word	0x00c6	; ????
    9200:	00 28       	or	r0, r0
    9202:	3d 42       	sbci	r19, 0x2D	; 45
    9204:	30 2d       	mov	r19, r0
    9206:	2c 2b       	or	r18, r28
    9208:	2c 2d       	mov	r18, r12
    920a:	2e 2f       	mov	r18, r30
    920c:	30 32       	cpi	r19, 0x20	; 32
    920e:	33 35       	cpi	r19, 0x53	; 83
    9210:	37 39       	cpi	r19, 0x97	; 151
    9212:	3b 3d       	cpi	r19, 0xDB	; 219
    9214:	3f 41       	sbci	r19, 0x1F	; 31
    9216:	43 45       	sbci	r20, 0x53	; 83
    9218:	48 4a       	sbci	r20, 0xA8	; 168
    921a:	4c 4e       	sbci	r20, 0xEC	; 236
    921c:	50 53       	subi	r21, 0x30	; 48
    921e:	55 57       	subi	r21, 0x75	; 117
    9220:	59 5b       	subi	r21, 0xB9	; 185
    9222:	5d 5f       	subi	r21, 0xFD	; 253
    9224:	61 63       	ori	r22, 0x31	; 49
    9226:	65 67       	ori	r22, 0x75	; 117
    9228:	69 6b       	ori	r22, 0xB9	; 185
    922a:	6c 6e       	ori	r22, 0xEC	; 236
    922c:	70 71       	andi	r23, 0x10	; 16
    922e:	73 74       	andi	r23, 0x43	; 67
    9230:	75 77       	andi	r23, 0x75	; 117
    9232:	78 79       	andi	r23, 0x98	; 152
    9234:	7a 7b       	andi	r23, 0xBA	; 186
    9236:	7c 7d       	andi	r23, 0xDC	; 220
    9238:	7d 7e       	andi	r23, 0xED	; 237
    923a:	7e 7f       	andi	r23, 0xFE	; 254
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7e 7e       	andi	r23, 0xEE	; 238
    9248:	7d 7d       	andi	r23, 0xDD	; 221
    924a:	7c 7b       	andi	r23, 0xBC	; 188
    924c:	7a 79       	andi	r23, 0x9A	; 154
    924e:	78 77       	andi	r23, 0x78	; 120
    9250:	75 74       	andi	r23, 0x45	; 69
    9252:	73 71       	andi	r23, 0x13	; 19
    9254:	70 6e       	ori	r23, 0xE0	; 224
    9256:	6c 6b       	ori	r22, 0xBC	; 188
    9258:	69 67       	ori	r22, 0x79	; 121
    925a:	65 63       	ori	r22, 0x35	; 53
    925c:	61 5f       	subi	r22, 0xF1	; 241
    925e:	5d 5b       	subi	r21, 0xBD	; 189
    9260:	59 57       	subi	r21, 0x79	; 121
    9262:	55 53       	subi	r21, 0x35	; 53
    9264:	50 4e       	sbci	r21, 0xE0	; 224
    9266:	4c 4a       	sbci	r20, 0xAC	; 172
    9268:	48 45       	sbci	r20, 0x58	; 88
    926a:	43 41       	sbci	r20, 0x13	; 19
    926c:	3f 3d       	cpi	r19, 0xDF	; 223
    926e:	3b 39       	cpi	r19, 0x9B	; 155
    9270:	37 35       	cpi	r19, 0x57	; 87
    9272:	33 32       	cpi	r19, 0x23	; 35
    9274:	30 2f       	mov	r19, r16
    9276:	2e 2d       	mov	r18, r14
    9278:	2c 2b       	or	r18, r28
    927a:	2c 2d       	mov	r18, r12
    927c:	30 42       	sbci	r19, 0x20	; 32
    927e:	3d 28       	or	r3, r13
    9280:	00 e9       	ldi	r16, 0x90	; 144
    9282:	e5 fe       	sbrs	r14, 5
    9284:	d4 d7       	rcall	.+4008   	; 0xa22e <init_player_shot+0x2d6>
    9286:	d7 d7       	rcall	.+4014   	; 0xa236 <init_player_shot+0x2de>
    9288:	d6 d4       	rcall	.+2476   	; 0x9c36 <LBPrintInt+0x4>
    928a:	d2 d0       	rcall	.+420    	; 0x9430 <waves+0x930>
    928c:	ce cc       	rjmp	.-1636   	; 0x8c2a <waves+0x12a>
    928e:	ca c8       	rjmp	.-3692   	; 0x8424 <TriggerFx+0x62>
    9290:	c6 c3       	rjmp	.+1932   	; 0x9a1e <LBMoveDelta+0x8>
    9292:	c1 bf       	out	0x31, r28	; 49
    9294:	bd ba       	out	0x1d, r11	; 29
    9296:	b8 b6       	in	r11, 0x38	; 56
    9298:	b4 b1       	in	r27, 0x04	; 4
    929a:	af ad       	ldd	r26, Y+63	; 0x3f
    929c:	ab a9       	ldd	r26, Y+51	; 0x33
    929e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    92a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    92a2:	9f 9e       	mul	r9, r31
    92a4:	9c 9a       	sbi	0x13, 4	; 19
    92a6:	99 97       	sbiw	r26, 0x29	; 41
    92a8:	95 94       	asr	r9
    92aa:	93 91       	.word	0x9193	; ????
    92ac:	90 8f       	std	Z+24, r25	; 0x18
    92ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    92b0:	8b 8a       	std	Y+19, r8	; 0x13
    92b2:	89 88       	ldd	r8, Y+17	; 0x11
    92b4:	88 87       	std	Y+8, r24	; 0x08
    92b6:	86 85       	ldd	r24, Z+14	; 0x0e
    92b8:	85 84       	ldd	r8, Z+13	; 0x0d
    92ba:	84 84       	ldd	r8, Z+12	; 0x0c
    92bc:	83 83       	std	Z+3, r24	; 0x03
    92be:	83 83       	std	Z+3, r24	; 0x03
    92c0:	83 83       	std	Z+3, r24	; 0x03
    92c2:	83 83       	std	Z+3, r24	; 0x03
    92c4:	83 84       	ldd	r8, Z+11	; 0x0b
    92c6:	84 84       	ldd	r8, Z+12	; 0x0c
    92c8:	85 85       	ldd	r24, Z+13	; 0x0d
    92ca:	86 87       	std	Z+14, r24	; 0x0e
    92cc:	88 88       	ldd	r8, Y+16	; 0x10
    92ce:	89 8a       	std	Y+17, r8	; 0x11
    92d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    92d2:	8d 8f       	std	Y+29, r24	; 0x1d
    92d4:	90 91 93 94 	lds	r25, 0x9493
    92d8:	95 97       	sbiw	r26, 0x25	; 37
    92da:	99 9a       	sbi	0x13, 1	; 19
    92dc:	9c 9e       	mul	r9, r28
    92de:	9f a1       	ldd	r25, Y+39	; 0x27
    92e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    92e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    92e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    92e6:	af b1       	in	r26, 0x0f	; 15
    92e8:	b4 b6       	in	r11, 0x34	; 52
    92ea:	b8 ba       	out	0x18, r11	; 24
    92ec:	bd bf       	out	0x3d, r27	; 61
    92ee:	c1 c3       	rjmp	.+1922   	; 0x9a72 <LBGetNextFrame+0x6>
    92f0:	c6 c8       	rjmp	.-3700   	; 0x847e <TriggerNote+0x2c>
    92f2:	ca cc       	rjmp	.-1644   	; 0x8c88 <waves+0x188>
    92f4:	ce d0       	rcall	.+412    	; 0x9492 <waves+0x992>
    92f6:	d2 d4       	rcall	.+2468   	; 0x9c9c <LBPrintInt+0x6a>
    92f8:	d6 d7       	rcall	.+4012   	; 0xa2a6 <init_player_shot+0x34e>
    92fa:	d7 d7       	rcall	.+4014   	; 0xa2aa <init_player_shot+0x352>
    92fc:	d4 fe       	sbrs	r13, 4
    92fe:	e5 e9       	ldi	r30, 0x95	; 149
    9300:	f9 f8       	.word	0xf8f9	; ????
    9302:	f9 f5       	brne	.+126    	; 0x9382 <waves+0x882>
    9304:	eb e1       	ldi	r30, 0x1B	; 27
    9306:	dd de       	rcall	.-582    	; 0x90c2 <waves+0x5c2>
    9308:	e0 e2       	ldi	r30, 0x20	; 32
    930a:	e4 e5       	ldi	r30, 0x54	; 84
    930c:	e6 e5       	ldi	r30, 0x56	; 86
    930e:	e4 e2       	ldi	r30, 0x24	; 36
    9310:	de d9       	rcall	.-3140   	; 0x86ce <ProcessMusic+0x1fc>
    9312:	d2 ca       	rjmp	.-2652   	; 0x88b8 <ProcessMusic+0x3e6>
    9314:	c1 b7       	in	r28, 0x31	; 49
    9316:	ac a2       	std	Y+36, r10	; 0x24
    9318:	99 91       	ld	r25, Y+
    931a:	8a 86       	std	Y+10, r8	; 0x0a
    931c:	83 81       	ldd	r24, Z+3	; 0x03
    931e:	80 80       	ld	r8, Z
    9320:	81 82       	std	Z+1, r8	; 0x01
    9322:	83 85       	ldd	r24, Z+11	; 0x0b
    9324:	86 88       	ldd	r8, Z+22	; 0x16
    9326:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9328:	8d 8f       	std	Y+29, r24	; 0x1d
    932a:	90 92 93 95 	sts	0x9593, r9
    932e:	96 97       	sbiw	r26, 0x26	; 38
    9330:	98 99       	sbic	0x13, 0	; 19
    9332:	9a 9b       	sbis	0x13, 2	; 19
    9334:	9b 9c       	mul	r9, r11
    9336:	9d 9d       	mul	r25, r13
    9338:	9d 9e       	mul	r9, r29
    933a:	9e 9e       	mul	r9, r30
    933c:	9f 9f       	mul	r25, r31
    933e:	9f 9f       	mul	r25, r31
    9340:	9f 9f       	mul	r25, r31
    9342:	9f 9e       	mul	r9, r31
    9344:	9e 9e       	mul	r9, r30
    9346:	9d 9d       	mul	r25, r13
    9348:	9d 9c       	mul	r9, r13
    934a:	9b 9b       	sbis	0x13, 3	; 19
    934c:	9a 99       	sbic	0x13, 2	; 19
    934e:	98 97       	sbiw	r26, 0x28	; 40
    9350:	96 95       	lsr	r25
    9352:	93 92       	.word	0x9293	; ????
    9354:	90 8f       	std	Z+24, r25	; 0x18
    9356:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9358:	8a 88       	ldd	r8, Y+18	; 0x12
    935a:	86 85       	ldd	r24, Z+14	; 0x0e
    935c:	83 82       	std	Z+3, r8	; 0x03
    935e:	81 80       	ldd	r8, Z+1	; 0x01
    9360:	80 81       	ld	r24, Z
    9362:	83 86       	std	Z+11, r8	; 0x0b
    9364:	8a 91       	ld	r24, -Y
    9366:	99 a2       	std	Y+33, r9	; 0x21
    9368:	ac b7       	in	r26, 0x3c	; 60
    936a:	c1 ca       	rjmp	.-2686   	; 0x88ee <ProcessMusic+0x41c>
    936c:	d2 d9       	rcall	.-3164   	; 0x8712 <ProcessMusic+0x240>
    936e:	de e2       	ldi	r29, 0x2E	; 46
    9370:	e4 e5       	ldi	r30, 0x54	; 84
    9372:	e6 e5       	ldi	r30, 0x56	; 86
    9374:	e4 e2       	ldi	r30, 0x24	; 36
    9376:	e0 de       	rcall	.-576    	; 0x9138 <waves+0x638>
    9378:	dd e1       	ldi	r29, 0x1D	; 29
    937a:	eb f5       	brvc	.+122    	; 0x93f6 <waves+0x8f6>
    937c:	f9 f8       	.word	0xf8f9	; ????
    937e:	f9 00       	.word	0x00f9	; ????
    9380:	07 08       	sbc	r0, r7
    9382:	07 0b       	sbc	r16, r23
    9384:	15 1f       	adc	r17, r21
    9386:	23 22       	and	r2, r19
    9388:	20 1e       	adc	r2, r16
    938a:	1c 1b       	sub	r17, r28
    938c:	1a 1b       	sub	r17, r26
    938e:	1c 1e       	adc	r1, r28
    9390:	22 27       	eor	r18, r18
    9392:	2e 36       	cpi	r18, 0x6E	; 110
    9394:	3f 49       	sbci	r19, 0x9F	; 159
    9396:	54 5e       	subi	r21, 0xE4	; 228
    9398:	67 6f       	ori	r22, 0xF7	; 247
    939a:	76 7a       	andi	r23, 0xA6	; 166
    939c:	7e 7f       	andi	r23, 0xFE	; 254
    939e:	7f 7f       	andi	r23, 0xFF	; 255
    93a0:	7f 7e       	andi	r23, 0xEF	; 239
    93a2:	7d 7b       	andi	r23, 0xBD	; 189
    93a4:	7a 78       	andi	r23, 0x8A	; 138
    93a6:	76 74       	andi	r23, 0x46	; 70
    93a8:	73 71       	andi	r23, 0x13	; 19
    93aa:	70 6e       	ori	r23, 0xE0	; 224
    93ac:	6d 6b       	ori	r22, 0xBD	; 189
    93ae:	6a 69       	ori	r22, 0x9A	; 154
    93b0:	68 67       	ori	r22, 0x78	; 120
    93b2:	66 65       	ori	r22, 0x56	; 86
    93b4:	65 64       	ori	r22, 0x45	; 69
    93b6:	64 63       	ori	r22, 0x34	; 52
    93b8:	63 62       	ori	r22, 0x23	; 35
    93ba:	62 62       	ori	r22, 0x22	; 34
    93bc:	61 61       	ori	r22, 0x11	; 17
    93be:	61 61       	ori	r22, 0x11	; 17
    93c0:	61 61       	ori	r22, 0x11	; 17
    93c2:	61 62       	ori	r22, 0x21	; 33
    93c4:	62 62       	ori	r22, 0x22	; 34
    93c6:	63 63       	ori	r22, 0x33	; 51
    93c8:	63 64       	ori	r22, 0x43	; 67
    93ca:	65 65       	ori	r22, 0x55	; 85
    93cc:	66 67       	ori	r22, 0x76	; 118
    93ce:	68 69       	ori	r22, 0x98	; 152
    93d0:	6a 6b       	ori	r22, 0xBA	; 186
    93d2:	6d 6e       	ori	r22, 0xED	; 237
    93d4:	70 71       	andi	r23, 0x10	; 16
    93d6:	73 74       	andi	r23, 0x43	; 67
    93d8:	76 78       	andi	r23, 0x86	; 134
    93da:	7a 7b       	andi	r23, 0xBA	; 186
    93dc:	7d 7e       	andi	r23, 0xED	; 237
    93de:	7f 7f       	andi	r23, 0xFF	; 255
    93e0:	7f 7f       	andi	r23, 0xFF	; 255
    93e2:	7e 7a       	andi	r23, 0xAE	; 174
    93e4:	76 6f       	ori	r23, 0xF6	; 246
    93e6:	67 5e       	subi	r22, 0xE7	; 231
    93e8:	54 49       	sbci	r21, 0x94	; 148
    93ea:	3f 36       	cpi	r19, 0x6F	; 111
    93ec:	2e 27       	eor	r18, r30
    93ee:	22 1e       	adc	r2, r18
    93f0:	1c 1b       	sub	r17, r28
    93f2:	1a 1b       	sub	r17, r26
    93f4:	1c 1e       	adc	r1, r28
    93f6:	20 22       	and	r2, r16
    93f8:	23 1f       	adc	r18, r19
    93fa:	15 0b       	sbc	r17, r21
    93fc:	07 08       	sbc	r0, r7
    93fe:	07 00       	.word	0x0007	; ????
    9400:	1f 31       	cpi	r17, 0x1F	; 31
    9402:	3d 44       	sbci	r19, 0x4D	; 77
    9404:	4e 53       	subi	r20, 0x3E	; 62
    9406:	54 56       	subi	r21, 0x64	; 100
    9408:	5a 5f       	subi	r21, 0xFA	; 250
    940a:	64 69       	ori	r22, 0x94	; 148
    940c:	6e 74       	andi	r22, 0x4E	; 78
    940e:	76 79       	andi	r23, 0x96	; 150
    9410:	7c 7f       	andi	r23, 0xFC	; 252
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7c       	andi	r23, 0xCF	; 207
    947c:	78 71       	andi	r23, 0x18	; 24
    947e:	68 4c       	sbci	r22, 0xC8	; 200
    9480:	2c 1c       	adc	r2, r12
    9482:	12 0c       	add	r1, r2
    9484:	0a 0b       	sbc	r16, r26
    9486:	0a 05       	cpc	r16, r10
    9488:	fd f3       	brhs	.-2      	; 0x9488 <waves+0x988>
    948a:	e9 df       	rcall	.-46     	; 0x945e <waves+0x95e>
    948c:	d4 ca       	rjmp	.-2648   	; 0x8a36 <steptable+0xb8>
    948e:	c0 b7       	in	r28, 0x30	; 48
    9490:	ae a6       	std	Y+46, r10	; 0x2e
    9492:	9e 97       	sbiw	r26, 0x2e	; 46
    9494:	91 8b       	std	Z+17, r25	; 0x11
    9496:	86 85       	ldd	r24, Z+14	; 0x0e
    9498:	82 80       	ldd	r8, Z+2	; 0x02
    949a:	80 80       	ld	r8, Z
    949c:	80 80       	ld	r8, Z
    949e:	80 80       	ld	r8, Z
    94a0:	80 80       	ld	r8, Z
    94a2:	80 80       	ld	r8, Z
    94a4:	80 80       	ld	r8, Z
    94a6:	80 80       	ld	r8, Z
    94a8:	80 80       	ld	r8, Z
    94aa:	80 80       	ld	r8, Z
    94ac:	80 80       	ld	r8, Z
    94ae:	80 80       	ld	r8, Z
    94b0:	80 80       	ld	r8, Z
    94b2:	80 80       	ld	r8, Z
    94b4:	80 80       	ld	r8, Z
    94b6:	80 80       	ld	r8, Z
    94b8:	80 80       	ld	r8, Z
    94ba:	80 80       	ld	r8, Z
    94bc:	80 80       	ld	r8, Z
    94be:	80 80       	ld	r8, Z
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 87       	std	Z+8, r24	; 0x08
    94f6:	91 9d       	mul	r25, r1
    94f8:	ac c4       	rjmp	.+2392   	; 0x9e52 <LBMoveSprite+0x44>
    94fa:	cb d4       	rcall	.+2454   	; 0x9e92 <LBRotateSprites+0x8>
    94fc:	dd f2       	brhs	.-74     	; 0x94b4 <waves+0x9b4>
    94fe:	fa fa       	.word	0xfafa	; ????

00009500 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    9500:	2f 92       	push	r2
    9502:	3f 92       	push	r3
    9504:	4f 92       	push	r4
    9506:	5f 92       	push	r5
    9508:	6f 92       	push	r6
    950a:	7f 92       	push	r7
    950c:	8f 92       	push	r8
    950e:	9f 92       	push	r9
    9510:	af 92       	push	r10
    9512:	bf 92       	push	r11
    9514:	cf 92       	push	r12
    9516:	df 92       	push	r13
    9518:	ef 92       	push	r14
    951a:	ff 92       	push	r15
    951c:	0f 93       	push	r16
    951e:	1f 93       	push	r17
    9520:	cf 93       	push	r28
    9522:	df 93       	push	r29
    9524:	cd b7       	in	r28, 0x3d	; 61
    9526:	de b7       	in	r29, 0x3e	; 62
    9528:	27 97       	sbiw	r28, 0x07	; 7
    952a:	0f b6       	in	r0, 0x3f	; 63
    952c:	f8 94       	cli
    952e:	de bf       	out	0x3e, r29	; 62
    9530:	0f be       	out	0x3f, r0	; 63
    9532:	cd bf       	out	0x3d, r28	; 61

	u8 i;

	if (!sprites_on){ return; }
    9534:	80 91 00 05 	lds	r24, 0x0500
    9538:	88 23       	and	r24, r24
    953a:	09 f4       	brne	.+2      	; 0x953e <ProcessSprites+0x3e>
    953c:	00 c1       	rjmp	.+512    	; 0x973e <ProcessSprites+0x23e>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    953e:	80 91 a6 0c 	lds	r24, 0x0CA6
    9542:	80 93 a5 0c 	sts	0x0CA5, r24
	free_tile_index = user_ram_tiles_c;
    9546:	80 93 a4 0c 	sts	0x0CA4, r24
    954a:	a1 2c       	mov	r10, r1
    954c:	b1 2c       	mov	r11, r1
    954e:	f5 01       	movw	r30, r10
    9550:	e0 5f       	subi	r30, 0xF0	; 240
    9552:	fa 4f       	sbci	r31, 0xFA	; 250

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    9554:	a1 81       	ldd	r26, Z+1	; 0x01
    9556:	40 81       	ld	r20, Z
    9558:	52 81       	ldd	r21, Z+2	; 0x02
    955a:	e3 81       	ldd	r30, Z+3	; 0x03
	u8  ssy;
	#endif

	/* if sprite is off, then don't draw it */

	if ((flags & SPRITE_OFF) != 0U){ return; }
    955c:	e2 ff       	sbrs	r30, 2
    955e:	21 c0       	rjmp	.+66     	; 0x95a2 <ProcessSprites+0xa2>
    9560:	24 e0       	ldi	r18, 0x04	; 4
    9562:	a2 0e       	add	r10, r18
    9564:	b1 1c       	adc	r11, r1
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9566:	30 e4       	ldi	r19, 0x40	; 64
    9568:	a3 16       	cp	r10, r19
    956a:	b1 04       	cpc	r11, r1
    956c:	81 f7       	brne	.-32     	; 0x954e <ProcessSprites+0x4e>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    956e:	27 96       	adiw	r28, 0x07	; 7
    9570:	0f b6       	in	r0, 0x3f	; 63
    9572:	f8 94       	cli
    9574:	de bf       	out	0x3e, r29	; 62
    9576:	0f be       	out	0x3f, r0	; 63
    9578:	cd bf       	out	0x3d, r28	; 61
    957a:	df 91       	pop	r29
    957c:	cf 91       	pop	r28
    957e:	1f 91       	pop	r17
    9580:	0f 91       	pop	r16
    9582:	ff 90       	pop	r15
    9584:	ef 90       	pop	r14
    9586:	df 90       	pop	r13
    9588:	cf 90       	pop	r12
    958a:	bf 90       	pop	r11
    958c:	af 90       	pop	r10
    958e:	9f 90       	pop	r9
    9590:	8f 90       	pop	r8
    9592:	7f 90       	pop	r7
    9594:	6f 90       	pop	r6
    9596:	5f 90       	pop	r5
    9598:	4f 90       	pop	r4
    959a:	3f 90       	pop	r3
    959c:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    959e:	0c 94 e9 3b 	jmp	0x77d2	; 0x77d2 <RestoreBackground>
	if ((flags & SPRITE_OFF) != 0U){ return; }

	/* get tile's screen section offsets */

	#if (SCROLLING != 0)
	ssx = xpos + Screen.scrollX;
    95a2:	20 91 b5 0c 	lds	r18, 0x0CB5
    95a6:	24 0f       	add	r18, r20
	ssy = ypos + Screen.scrollY;
    95a8:	80 91 b6 0c 	lds	r24, 0x0CB6
    95ac:	90 e0       	ldi	r25, 0x00	; 0
    95ae:	8a 0f       	add	r24, r26
    95b0:	91 1d       	adc	r25, r1
	if (ypos > (u8)((Screen.scrollHeight << 3) - 1U)){
    95b2:	30 91 b7 0c 	lds	r19, 0x0CB7
    95b6:	33 0f       	add	r19, r19
    95b8:	33 0f       	add	r19, r19
    95ba:	33 0f       	add	r19, r19
    95bc:	31 50       	subi	r19, 0x01	; 1
    95be:	3a 17       	cp	r19, r26
    95c0:	08 f4       	brcc	.+2      	; 0x95c4 <ProcessSprites+0xc4>
		ssy += 0xFF00U; /* Sprite should clip on top */
    95c2:	9a 95       	dec	r25
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if ((SCROLLING == 0) && (SCREEN_TILES_H < 32))
	bx = ((u8)((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
	#else
	bx = ssx / TILE_WIDTH;
    95c4:	32 2e       	mov	r3, r18
    95c6:	36 94       	lsr	r3
    95c8:	36 94       	lsr	r3
    95ca:	36 94       	lsr	r3
	#endif
	dx = ssx % TILE_WIDTH;
    95cc:	27 70       	andi	r18, 0x07	; 7
	if (dx != 0U){ tx++; }
    95ce:	19 f0       	breq	.+6      	; 0x95d6 <ProcessSprites+0xd6>
    95d0:	62 e0       	ldi	r22, 0x02	; 2
    95d2:	69 83       	std	Y+1, r22	; 0x01
    95d4:	02 c0       	rjmp	.+4      	; 0x95da <ProcessSprites+0xda>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    95d6:	71 e0       	ldi	r23, 0x01	; 1
    95d8:	79 83       	std	Y+1, r23	; 0x01
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = ((u8)((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
	#else
	by = ssy / TILE_HEIGHT;
    95da:	bc 01       	movw	r22, r24
    95dc:	13 e0       	ldi	r17, 0x03	; 3
    95de:	76 95       	lsr	r23
    95e0:	67 95       	ror	r22
    95e2:	1a 95       	dec	r17
    95e4:	e1 f7       	brne	.-8      	; 0x95de <ProcessSprites+0xde>
    95e6:	26 2e       	mov	r2, r22
	#endif
	dy = ssy % TILE_HEIGHT;
    95e8:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    95ea:	11 f0       	breq	.+4      	; 0x95f0 <ProcessSprites+0xf0>
    95ec:	92 e0       	ldi	r25, 0x02	; 2
    95ee:	01 c0       	rjmp	.+2      	; 0x95f2 <ProcessSprites+0xf2>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    95f0:	91 e0       	ldi	r25, 0x01	; 1
    95f2:	9a 83       	std	Y+2, r25	; 0x02
					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
						               ((u16)(flags) << 8) + sprindex,
						               ((u16)(y)     << 8) + x,
						               ((u16)(dy)    << 8) + dx);
    95f4:	68 2e       	mov	r6, r24
    95f6:	71 2c       	mov	r7, r1
    95f8:	76 2c       	mov	r7, r6
    95fa:	66 24       	eor	r6, r6

					}

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    95fc:	62 0e       	add	r6, r18
    95fe:	71 1c       	adc	r7, r1
						               ((u16)(flags) << 8) + sprindex,
    9600:	f0 e0       	ldi	r31, 0x00	; 0
    9602:	fe 2f       	mov	r31, r30
    9604:	ee 27       	eor	r30, r30

					}

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    9606:	bf 01       	movw	r22, r30
    9608:	65 0f       	add	r22, r21
    960a:	71 1d       	adc	r23, r1
    960c:	7c 83       	std	Y+4, r23	; 0x04
    960e:	6b 83       	std	Y+3, r22	; 0x03
    9610:	e1 2c       	mov	r14, r1
    9612:	f1 2c       	mov	r15, r1
    9614:	97 e0       	ldi	r25, 0x07	; 7
    9616:	9a 0f       	add	r25, r26
    9618:	59 2e       	mov	r5, r25
    961a:	58 1a       	sub	r5, r24
    961c:	49 5f       	subi	r20, 0xF9	; 249
    961e:	44 2e       	mov	r4, r20
    9620:	42 1a       	sub	r4, r18
    9622:	8e 2d       	mov	r24, r14

		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
    9624:	90 91 b7 0c 	lds	r25, 0x0CB7
    9628:	91 11       	cpse	r25, r1
    962a:	07 c0       	rjmp	.+14     	; 0x963a <ProcessSprites+0x13a>
    962c:	7f ef       	ldi	r23, 0xFF	; 255
    962e:	e7 1a       	sub	r14, r23
    9630:	f7 0a       	sbc	r15, r23
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    9632:	9a 81       	ldd	r25, Y+2	; 0x02
    9634:	e9 16       	cp	r14, r25
    9636:	a8 f3       	brcs	.-22     	; 0x9622 <ProcessSprites+0x122>
    9638:	93 cf       	rjmp	.-218    	; 0x9560 <ProcessSprites+0x60>
		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
		     ((u8)((ypos + 7U + (y << 3) - dy) & 0xFFU) < (u8)((Screen.scrollHeight << 3) - 1U)) ){
    963a:	29 2f       	mov	r18, r25
    963c:	22 0f       	add	r18, r18
    963e:	22 0f       	add	r18, r18
    9640:	22 0f       	add	r18, r18
    9642:	21 50       	subi	r18, 0x01	; 1

		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
    9644:	35 2d       	mov	r19, r5
    9646:	e8 e0       	ldi	r30, 0x08	; 8
    9648:	ee 9e       	mul	r14, r30
    964a:	30 0d       	add	r19, r0
    964c:	11 24       	eor	r1, r1
    964e:	32 17       	cp	r19, r18
    9650:	68 f7       	brcc	.-38     	; 0x962c <ProcessSprites+0x12c>
    9652:	82 0d       	add	r24, r2
		     ((u8)((ypos + 7U + (y << 3) - dy) & 0xFFU) < (u8)((Screen.scrollHeight << 3) - 1U)) ){

			while (wy >= Screen.scrollHeight){
    9654:	89 17       	cp	r24, r25
    9656:	10 f0       	brcs	.+4      	; 0x965c <ProcessSprites+0x15c>
				wy -= Screen.scrollHeight;
    9658:	89 1b       	sub	r24, r25
    965a:	fc cf       	rjmp	.-8      	; 0x9654 <ProcessSprites+0x154>

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    965c:	08 2f       	mov	r16, r24
    965e:	06 95       	lsr	r16
    9660:	06 95       	lsr	r16
    9662:	06 95       	lsr	r16
    9664:	10 e0       	ldi	r17, 0x00	; 0
    9666:	10 2f       	mov	r17, r16
    9668:	00 27       	eor	r16, r16
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
    966a:	87 70       	andi	r24, 0x07	; 7
    966c:	08 0f       	add	r16, r24
    966e:	11 1d       	adc	r17, r1

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
						               ((u16)(flags) << 8) + sprindex,
						               ((u16)(y)     << 8) + x,
    9670:	9e 2c       	mov	r9, r14
    9672:	88 24       	eor	r8, r8
    9674:	c1 2c       	mov	r12, r1
    9676:	d1 2c       	mov	r13, r1
				#if (SCROLLING == 0)
				if (wx < VRAM_TILES_H){
				#else
				wx = wx % VRAM_TILES_H;
				#if (SCREEN_TILES_H < 32U)
				if ((u8)((xpos + 7U + (x << 3) - dx) & 0xFFU) < (((SCREEN_TILES_H + 1U) << 3) - 1U)){
    9678:	84 2d       	mov	r24, r4
    967a:	f8 e0       	ldi	r31, 0x08	; 8
    967c:	cf 9e       	mul	r12, r31
    967e:	80 0d       	add	r24, r0
    9680:	11 24       	eor	r1, r1
    9682:	87 3e       	cpi	r24, 0xE7	; 231
    9684:	08 f0       	brcs	.+2      	; 0x9688 <ProcessSprites+0x188>
    9686:	53 c0       	rjmp	.+166    	; 0x972e <ProcessSprites+0x22e>
    9688:	83 2d       	mov	r24, r3
    968a:	8c 0d       	add	r24, r12
					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
    968c:	88 0f       	add	r24, r24
    968e:	88 0f       	add	r24, r24
    9690:	88 0f       	add	r24, r24

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    9692:	98 01       	movw	r18, r16
    9694:	28 0f       	add	r18, r24
    9696:	31 1d       	adc	r19, r1
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
					#endif

					bt = vram[ramPtr];
    9698:	20 50       	subi	r18, 0x00	; 0
    969a:	3f 4f       	sbci	r19, 0xFF	; 255
    969c:	3f 83       	std	Y+7, r19	; 0x07
    969e:	2e 83       	std	Y+6, r18	; 0x06
    96a0:	f9 01       	movw	r30, r18
    96a2:	90 81       	ld	r25, Z

					if ( ( (bt >= RAM_TILES_COUNT) |
    96a4:	81 e0       	ldi	r24, 0x01	; 1
    96a6:	9c 31       	cpi	r25, 0x1C	; 28
    96a8:	08 f4       	brcc	.+2      	; 0x96ac <ProcessSprites+0x1ac>
    96aa:	80 e0       	ldi	r24, 0x00	; 0
    96ac:	21 e0       	ldi	r18, 0x01	; 1
    96ae:	30 91 a5 0c 	lds	r19, 0x0CA5
    96b2:	93 17       	cp	r25, r19
    96b4:	18 f0       	brcs	.+6      	; 0x96bc <ProcessSprites+0x1bc>
    96b6:	20 e0       	ldi	r18, 0x00	; 0
    96b8:	88 23       	and	r24, r24
    96ba:	61 f1       	breq	.+88     	; 0x9714 <ProcessSprites+0x214>
					       (bt < user_ram_tiles_c)) &&
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    96bc:	60 91 a4 0c 	lds	r22, 0x0CA4
					#endif

					bt = vram[ramPtr];

					if ( ( (bt >= RAM_TILES_COUNT) |
					       (bt < user_ram_tiles_c)) &&
    96c0:	6c 31       	cpi	r22, 0x1C	; 28
    96c2:	30 f5       	brcc	.+76     	; 0x9710 <ProcessSprites+0x210>
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

						if (bt >= RAM_TILES_COUNT){
    96c4:	88 23       	and	r24, r24
    96c6:	31 f0       	breq	.+12     	; 0x96d4 <ProcessSprites+0x1d4>
							/* tile is mapped to flash. Copy it to next free RAM tile. */
							CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    96c8:	84 ee       	ldi	r24, 0xE4	; 228
    96ca:	89 0f       	add	r24, r25
    96cc:	9d 83       	std	Y+5, r25	; 0x05
    96ce:	0e 94 cd 3a 	call	0x759a	; 0x759a <CopyFlashTile>
    96d2:	06 c0       	rjmp	.+12     	; 0x96e0 <ProcessSprites+0x1e0>
						}else if (bt < user_ram_tiles_c){
    96d4:	22 23       	and	r18, r18
    96d6:	29 f0       	breq	.+10     	; 0x96e2 <ProcessSprites+0x1e2>
							/* tile is a user ram tile. Copy it to next free RAM tile. */
							CopyRamTile(bt, free_tile_index);
    96d8:	89 2f       	mov	r24, r25
    96da:	9d 83       	std	Y+5, r25	; 0x05
    96dc:	0e 94 5c 3b 	call	0x76b8	; 0x76b8 <CopyRamTile>
    96e0:	9d 81       	ldd	r25, Y+5	; 0x05
						}
						#if (RTLIST_ENABLE != 0)
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    96e2:	80 91 a4 0c 	lds	r24, 0x0CA4
    96e6:	e8 2f       	mov	r30, r24
    96e8:	f0 e0       	ldi	r31, 0x00	; 0
    96ea:	9f 01       	movw	r18, r30
    96ec:	22 0f       	add	r18, r18
    96ee:	33 1f       	adc	r19, r19
    96f0:	e2 0f       	add	r30, r18
    96f2:	f3 1f       	adc	r31, r19
    96f4:	e0 5b       	subi	r30, 0xB0	; 176
    96f6:	f3 4f       	sbci	r31, 0xF3	; 243
    96f8:	2e 81       	ldd	r18, Y+6	; 0x06
    96fa:	3f 81       	ldd	r19, Y+7	; 0x07
    96fc:	31 83       	std	Z+1, r19	; 0x01
    96fe:	20 83       	st	Z, r18
						ram_tiles_restore[free_tile_index].tileIndex = bt;
    9700:	92 83       	std	Z+2, r25	; 0x02
						#endif
						vram[ramPtr] = free_tile_index;
    9702:	f9 01       	movw	r30, r18
    9704:	80 83       	st	Z, r24
						bt = free_tile_index;
						free_tile_index++;
    9706:	91 e0       	ldi	r25, 0x01	; 1
    9708:	98 0f       	add	r25, r24
    970a:	90 93 a4 0c 	sts	0x0CA4, r25
						#if (RTLIST_ENABLE != 0)
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
						ram_tiles_restore[free_tile_index].tileIndex = bt;
						#endif
						vram[ramPtr] = free_tile_index;
						bt = free_tile_index;
    970e:	98 2f       	mov	r25, r24
						free_tile_index++;

					}

					if ( (bt < RAM_TILES_COUNT) &&
    9710:	9c 31       	cpi	r25, 0x1C	; 28
    9712:	68 f4       	brcc	.+26     	; 0x972e <ProcessSprites+0x22e>
    9714:	80 91 a5 0c 	lds	r24, 0x0CA5
    9718:	98 17       	cp	r25, r24
    971a:	48 f0       	brcs	.+18     	; 0x972e <ProcessSprites+0x22e>
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    971c:	93 01       	movw	r18, r6
    971e:	a6 01       	movw	r20, r12
    9720:	48 0d       	add	r20, r8
    9722:	59 1d       	adc	r21, r9
    9724:	6b 81       	ldd	r22, Y+3	; 0x03
    9726:	7c 81       	ldd	r23, Y+4	; 0x04
    9728:	89 2f       	mov	r24, r25
    972a:	0e 94 fc 3b 	call	0x77f8	; 0x77f8 <BlitSpritePart>
    972e:	ff ef       	ldi	r31, 0xFF	; 255
    9730:	cf 1a       	sub	r12, r31
    9732:	df 0a       	sbc	r13, r31
			while (wy >= Screen.scrollHeight){
				wy -= Screen.scrollHeight;
			}
		#endif

			for (x = 0U; x < tx; x++){
    9734:	99 81       	ldd	r25, Y+1	; 0x01
    9736:	c9 16       	cp	r12, r25
    9738:	08 f4       	brcc	.+2      	; 0x973c <ProcessSprites+0x23c>
    973a:	9e cf       	rjmp	.-196    	; 0x9678 <ProcessSprites+0x178>
    973c:	77 cf       	rjmp	.-274    	; 0x962c <ProcessSprites+0x12c>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    973e:	27 96       	adiw	r28, 0x07	; 7
    9740:	0f b6       	in	r0, 0x3f	; 63
    9742:	f8 94       	cli
    9744:	de bf       	out	0x3e, r29	; 62
    9746:	0f be       	out	0x3f, r0	; 63
    9748:	cd bf       	out	0x3d, r28	; 61
    974a:	df 91       	pop	r29
    974c:	cf 91       	pop	r28
    974e:	1f 91       	pop	r17
    9750:	0f 91       	pop	r16
    9752:	ff 90       	pop	r15
    9754:	ef 90       	pop	r14
    9756:	df 90       	pop	r13
    9758:	cf 90       	pop	r12
    975a:	bf 90       	pop	r11
    975c:	af 90       	pop	r10
    975e:	9f 90       	pop	r9
    9760:	8f 90       	pop	r8
    9762:	7f 90       	pop	r7
    9764:	6f 90       	pop	r6
    9766:	5f 90       	pop	r5
    9768:	4f 90       	pop	r4
    976a:	3f 90       	pop	r3
    976c:	2f 90       	pop	r2
    976e:	08 95       	ret

00009770 <Scroll>:
*/
void Scroll(char dx, char dy){

	/* Handles case with TILE_HEIGHT = 8 and scrollHeight = 32 correctly
	** (this will be zero, so zero will add / subtract) */
	u8 scmax = (u8)(Screen.scrollHeight * TILE_HEIGHT);
    9770:	20 91 b7 0c 	lds	r18, 0x0CB7
    9774:	22 0f       	add	r18, r18
    9776:	22 0f       	add	r18, r18
    9778:	22 0f       	add	r18, r18

	Screen.scrollY += (u8)(dy);
    977a:	90 91 b6 0c 	lds	r25, 0x0CB6
    977e:	96 0f       	add	r25, r22
    9780:	90 93 b6 0c 	sts	0x0CB6, r25
	Screen.scrollX += (u8)(dx);
    9784:	30 91 b5 0c 	lds	r19, 0x0CB5
    9788:	83 0f       	add	r24, r19
    978a:	80 93 b5 0c 	sts	0x0CB5, r24

	if (Screen.scrollY >= scmax){
    978e:	92 17       	cp	r25, r18
    9790:	38 f0       	brcs	.+14     	; 0x97a0 <Scroll+0x30>
		if((s8)(dy) >= 0){
    9792:	67 fd       	sbrc	r22, 7
    9794:	02 c0       	rjmp	.+4      	; 0x979a <Scroll+0x2a>
			Screen.scrollY -= scmax;
    9796:	92 1b       	sub	r25, r18
    9798:	01 c0       	rjmp	.+2      	; 0x979c <Scroll+0x2c>
		}else{
			Screen.scrollY += scmax;
    979a:	92 0f       	add	r25, r18
    979c:	90 93 b6 0c 	sts	0x0CB6, r25
    97a0:	08 95       	ret

000097a2 <DisplayLogo>:


/*
** Callback invoked by UzeboxCore.Initialize()
*/
void DisplayLogo(){
    97a2:	08 95       	ret

000097a4 <InitializeVideoMode>:


/*
** Callback invoked by UzeboxCore.Initialize()
*/
void InitializeVideoMode(){
    97a4:	80 e0       	ldi	r24, 0x00	; 0
    97a6:	90 e0       	ldi	r25, 0x00	; 0

	/* Disable sprites */

	#if (SPRITES_AUTO_PROCESS != 0)
	for(i = 0U; i < MAX_SPRITES; i++){
		sprites[i].x = (SCREEN_TILES_H * TILE_WIDTH);
    97a8:	20 ee       	ldi	r18, 0xE0	; 224
    97aa:	fc 01       	movw	r30, r24
    97ac:	e0 5f       	subi	r30, 0xF0	; 240
    97ae:	fa 4f       	sbci	r31, 0xFA	; 250
    97b0:	20 83       	st	Z, r18
		sprites[i].y = (SCREEN_TILES_V * TILE_HEIGHT);
    97b2:	21 83       	std	Z+1, r18	; 0x01
    97b4:	04 96       	adiw	r24, 0x04	; 4
	u8 i;

	/* Disable sprites */

	#if (SPRITES_AUTO_PROCESS != 0)
	for(i = 0U; i < MAX_SPRITES; i++){
    97b6:	80 34       	cpi	r24, 0x40	; 64
    97b8:	91 05       	cpc	r25, r1
    97ba:	b9 f7       	brne	.-18     	; 0x97aa <InitializeVideoMode+0x6>
		sprites[i].y = (SCREEN_TILES_V * TILE_HEIGHT);
	}
	#endif

	#if (SCROLLING == 1)
	Screen.scrollHeight  = VRAM_TILES_V;
    97bc:	80 e2       	ldi	r24, 0x20	; 32
    97be:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0U;
    97c2:	10 92 b2 0c 	sts	0x0CB2, r1
	#endif

	free_tile_index      = 0U;
    97c6:	10 92 a4 0c 	sts	0x0CA4, r1
	user_ram_tiles_c_tmp = 0U;
    97ca:	10 92 a6 0c 	sts	0x0CA6, r1
    97ce:	08 95       	ret

000097d0 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    97d0:	4f 92       	push	r4
    97d2:	5f 92       	push	r5
    97d4:	6f 92       	push	r6
    97d6:	7f 92       	push	r7
    97d8:	8f 92       	push	r8
    97da:	9f 92       	push	r9
    97dc:	af 92       	push	r10
    97de:	bf 92       	push	r11
    97e0:	cf 92       	push	r12
    97e2:	df 92       	push	r13
    97e4:	ef 92       	push	r14
    97e6:	ff 92       	push	r15
    97e8:	0f 93       	push	r16
    97ea:	1f 93       	push	r17
    97ec:	cf 93       	push	r28
    97ee:	df 93       	push	r29
    97f0:	68 2e       	mov	r6, r24
    97f2:	56 2e       	mov	r5, r22
    97f4:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    97f6:	fa 01       	movw	r30, r20
    97f8:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    97fa:	31 96       	adiw	r30, 0x01	; 1
    97fc:	84 90       	lpm	r8, Z
    97fe:	c7 2c       	mov	r12, r7
    9800:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9802:	00 e0       	ldi	r16, 0x00	; 0
    9804:	10 e0       	ldi	r17, 0x00	; 0
    9806:	91 2c       	mov	r9, r1
    9808:	98 14       	cp	r9, r8
    980a:	f1 f0       	breq	.+60     	; 0x9848 <DrawMap+0x78>
    980c:	c0 e0       	ldi	r28, 0x00	; 0
    980e:	d0 e0       	ldi	r29, 0x00	; 0
    9810:	58 01       	movw	r10, r16
    9812:	f2 e0       	ldi	r31, 0x02	; 2
    9814:	af 0e       	add	r10, r31
    9816:	b1 1c       	adc	r11, r1
    9818:	49 2c       	mov	r4, r9
    981a:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    981c:	c7 15       	cp	r28, r7
    981e:	80 f4       	brcc	.+32     	; 0x9840 <DrawMap+0x70>
    9820:	95 01       	movw	r18, r10
    9822:	2c 0f       	add	r18, r28
    9824:	3d 1f       	adc	r19, r29
    9826:	f7 01       	movw	r30, r14
    9828:	e2 0f       	add	r30, r18
    982a:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    982c:	24 91       	lpm	r18, Z
    982e:	42 2f       	mov	r20, r18
    9830:	50 e0       	ldi	r21, 0x00	; 0
    9832:	64 2d       	mov	r22, r4
    9834:	8c 2f       	mov	r24, r28
    9836:	86 0d       	add	r24, r6
    9838:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <SetTile>
    983c:	21 96       	adiw	r28, 0x01	; 1
    983e:	ee cf       	rjmp	.-36     	; 0x981c <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9840:	93 94       	inc	r9
    9842:	0c 0d       	add	r16, r12
    9844:	1d 1d       	adc	r17, r13
    9846:	e0 cf       	rjmp	.-64     	; 0x9808 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9848:	df 91       	pop	r29
    984a:	cf 91       	pop	r28
    984c:	1f 91       	pop	r17
    984e:	0f 91       	pop	r16
    9850:	ff 90       	pop	r15
    9852:	ef 90       	pop	r14
    9854:	df 90       	pop	r13
    9856:	cf 90       	pop	r12
    9858:	bf 90       	pop	r11
    985a:	af 90       	pop	r10
    985c:	9f 90       	pop	r9
    985e:	8f 90       	pop	r8
    9860:	7f 90       	pop	r7
    9862:	6f 90       	pop	r6
    9864:	5f 90       	pop	r5
    9866:	4f 90       	pop	r4
    9868:	08 95       	ret

0000986a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    986a:	0f 93       	push	r16
    986c:	1f 93       	push	r17
    986e:	cf 93       	push	r28
    9870:	df 93       	push	r29
    9872:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9874:	c0 e0       	ldi	r28, 0x00	; 0
    9876:	d0 e0       	ldi	r29, 0x00	; 0
    9878:	c0 17       	cp	r28, r16
    987a:	d1 07       	cpc	r29, r17
    987c:	44 f4       	brge	.+16     	; 0x988e <WaitVsync+0x24>
		while(!GetVsyncFlag());
    987e:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <GetVsyncFlag>
    9882:	88 23       	and	r24, r24
    9884:	e1 f3       	breq	.-8      	; 0x987e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9886:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    988a:	21 96       	adiw	r28, 0x01	; 1
    988c:	f5 cf       	rjmp	.-22     	; 0x9878 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    988e:	df 91       	pop	r29
    9890:	cf 91       	pop	r28
    9892:	1f 91       	pop	r17
    9894:	0f 91       	pop	r16
    9896:	08 95       	ret

00009898 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9898:	80 93 83 0d 	sts	0x0D83, r24
	currFadeFrame=0;
    989c:	10 92 86 0d 	sts	0x0D86, r1
	fadeActive=true;
    98a0:	81 e0       	ldi	r24, 0x01	; 1
    98a2:	80 93 85 0d 	sts	0x0D85, r24
		
	if(blocking){
    98a6:	66 23       	and	r22, r22
    98a8:	21 f0       	breq	.+8      	; 0x98b2 <doFade+0x1a>
		while(fadeActive==true);
    98aa:	80 91 85 0d 	lds	r24, 0x0D85
    98ae:	81 11       	cpse	r24, r1
    98b0:	fc cf       	rjmp	.-8      	; 0x98aa <doFade+0x12>
    98b2:	08 95       	ret

000098b4 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    98b4:	81 11       	cpse	r24, r1
    98b6:	03 c0       	rjmp	.+6      	; 0x98be <FadeIn+0xa>
		DDRC=0xff;
    98b8:	8f ef       	ldi	r24, 0xFF	; 255
    98ba:	87 b9       	out	0x07, r24	; 7
		return;
    98bc:	08 95       	ret
	}
	fadeStep=1;
    98be:	91 e0       	ldi	r25, 0x01	; 1
    98c0:	90 93 87 0d 	sts	0x0D87, r25
	fadeDir=1;
    98c4:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    98c8:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <doFade>

000098cc <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    98cc:	81 11       	cpse	r24, r1
    98ce:	02 c0       	rjmp	.+4      	; 0x98d4 <FadeOut+0x8>
		DDRC=0;
    98d0:	17 b8       	out	0x07, r1	; 7
		return;
    98d2:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    98d4:	9c e0       	ldi	r25, 0x0C	; 12
    98d6:	90 93 87 0d 	sts	0x0D87, r25
	fadeDir=-1;
    98da:	9f ef       	ldi	r25, 0xFF	; 255
    98dc:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    98e0:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <doFade>

000098e4 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    98e4:	80 91 85 0d 	lds	r24, 0x0D85
    98e8:	88 23       	and	r24, r24
    98ea:	01 f1       	breq	.+64     	; 0x992c <ProcessFading+0x48>
		if(currFadeFrame==0){
    98ec:	80 91 86 0d 	lds	r24, 0x0D86
    98f0:	81 11       	cpse	r24, r1
    98f2:	19 c0       	rjmp	.+50     	; 0x9926 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    98f4:	80 91 83 0d 	lds	r24, 0x0D83
    98f8:	80 93 86 0d 	sts	0x0D86, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    98fc:	e0 91 87 0d 	lds	r30, 0x0D87
    9900:	f0 e0       	ldi	r31, 0x00	; 0
    9902:	eb 5f       	subi	r30, 0xFB	; 251
    9904:	fe 4f       	sbci	r31, 0xFE	; 254
    9906:	e4 91       	lpm	r30, Z
    9908:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    990a:	90 91 84 0d 	lds	r25, 0x0D84
    990e:	80 91 87 0d 	lds	r24, 0x0D87
    9912:	89 0f       	add	r24, r25
    9914:	80 93 87 0d 	sts	0x0D87, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9918:	88 23       	and	r24, r24
    991a:	11 f0       	breq	.+4      	; 0x9920 <ProcessFading+0x3c>
    991c:	8d 30       	cpi	r24, 0x0D	; 13
    991e:	31 f4       	brne	.+12     	; 0x992c <ProcessFading+0x48>
				fadeActive=false;
    9920:	10 92 85 0d 	sts	0x0D85, r1
    9924:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9926:	81 50       	subi	r24, 0x01	; 1
    9928:	80 93 86 0d 	sts	0x0D86, r24
    992c:	08 95       	ret

0000992e <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    992e:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    9932:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <ProcessSprites>

00009936 <extract_dip_switches>:
#define CC_4_3 7
#define CC_FRE 8


void extract_dip_switches(u8 switches) {
    coin_credit_rel = (((switches >> 1) << 5) >> 5) + 1;
    9936:	98 2f       	mov	r25, r24
    9938:	96 95       	lsr	r25
    993a:	9f 5f       	subi	r25, 0xFF	; 255
    993c:	90 93 b6 0d 	sts	0x0DB6, r25
    demo_sound_off = ((switches >> 4) << 3) >> 3;
    9940:	82 95       	swap	r24
    9942:	8f 70       	andi	r24, 0x0F	; 15
    9944:	80 93 de 0f 	sts	0x0FDE, r24
    9948:	08 95       	ret

0000994a <coin_inserted>:
}

void coin_inserted() {
	TriggerNote(2,PATCH_PLAYER_SHOOT,0x23,0xff);
    994a:	2f ef       	ldi	r18, 0xFF	; 255
    994c:	43 e2       	ldi	r20, 0x23	; 35
    994e:	63 e0       	ldi	r22, 0x03	; 3
    9950:	82 e0       	ldi	r24, 0x02	; 2
    9952:	0e 94 29 42 	call	0x8452	; 0x8452 <TriggerNote>
    if (coin_credit_rel == CC_FRE || credits == 255) {
    9956:	90 91 b6 0d 	lds	r25, 0x0DB6
    995a:	98 30       	cpi	r25, 0x08	; 8
    995c:	21 f0       	breq	.+8      	; 0x9966 <coin_inserted+0x1c>
    995e:	80 91 dc 0f 	lds	r24, 0x0FDC
    9962:	8f 3f       	cpi	r24, 0xFF	; 255
    9964:	11 f4       	brne	.+4      	; 0x996a <coin_inserted+0x20>
        credits = 255;
    9966:	8f ef       	ldi	r24, 0xFF	; 255
    9968:	29 c0       	rjmp	.+82     	; 0x99bc <coin_inserted+0x72>
        return;
    }
    coin_count += 1;
    996a:	20 91 dd 0f 	lds	r18, 0x0FDD
    if (coin_credit_rel < 4) {
    996e:	94 30       	cpi	r25, 0x04	; 4
    9970:	20 f4       	brcc	.+8      	; 0x997a <coin_inserted+0x30>
        coin_count = 0;
    9972:	10 92 dd 0f 	sts	0x0FDD, r1
        credits += coin_credit_rel;
    9976:	89 0f       	add	r24, r25
    9978:	21 c0       	rjmp	.+66     	; 0x99bc <coin_inserted+0x72>
	TriggerNote(2,PATCH_PLAYER_SHOOT,0x23,0xff);
    if (coin_credit_rel == CC_FRE || credits == 255) {
        credits = 255;
        return;
    }
    coin_count += 1;
    997a:	2f 5f       	subi	r18, 0xFF	; 255
    if (coin_credit_rel < 4) {
        coin_count = 0;
        credits += coin_credit_rel;
    } else if (coin_count == 2 && coin_credit_rel == CC_2_1) {
    997c:	22 30       	cpi	r18, 0x02	; 2
    997e:	49 f4       	brne	.+18     	; 0x9992 <coin_inserted+0x48>
    9980:	94 30       	cpi	r25, 0x04	; 4
    9982:	19 f0       	breq	.+6      	; 0x998a <coin_inserted+0x40>
	TriggerNote(2,PATCH_PLAYER_SHOOT,0x23,0xff);
    if (coin_credit_rel == CC_FRE || credits == 255) {
        credits = 255;
        return;
    }
    coin_count += 1;
    9984:	20 93 dd 0f 	sts	0x0FDD, r18
    9988:	08 95       	ret
    if (coin_credit_rel < 4) {
        coin_count = 0;
        credits += coin_credit_rel;
    } else if (coin_count == 2 && coin_credit_rel == CC_2_1) {
        coin_count = 0;
    998a:	10 92 dd 0f 	sts	0x0FDD, r1
        credits += 1;
    998e:	8f 5f       	subi	r24, 0xFF	; 255
    9990:	15 c0       	rjmp	.+42     	; 0x99bc <coin_inserted+0x72>
    } else if (coin_count == 3 && coin_credit_rel == CC_3_2) {
    9992:	23 30       	cpi	r18, 0x03	; 3
    9994:	61 f4       	brne	.+24     	; 0x99ae <coin_inserted+0x64>
    9996:	95 30       	cpi	r25, 0x05	; 5
    9998:	21 f4       	brne	.+8      	; 0x99a2 <coin_inserted+0x58>
        coin_count = 0;
    999a:	10 92 dd 0f 	sts	0x0FDD, r1
        credits += 2;
    999e:	8e 5f       	subi	r24, 0xFE	; 254
    99a0:	0d c0       	rjmp	.+26     	; 0x99bc <coin_inserted+0x72>
    } else if (coin_count == 3 && coin_credit_rel == CC_3_4) {
    99a2:	96 30       	cpi	r25, 0x06	; 6
    99a4:	79 f7       	brne	.-34     	; 0x9984 <coin_inserted+0x3a>
        coin_count = 0;
    99a6:	10 92 dd 0f 	sts	0x0FDD, r1
        credits += 4;
    99aa:	8c 5f       	subi	r24, 0xFC	; 252
    99ac:	07 c0       	rjmp	.+14     	; 0x99bc <coin_inserted+0x72>
    } else if (coin_count == 4 && coin_credit_rel == CC_4_3) {
    99ae:	24 30       	cpi	r18, 0x04	; 4
    99b0:	49 f7       	brne	.-46     	; 0x9984 <coin_inserted+0x3a>
    99b2:	97 30       	cpi	r25, 0x07	; 7
    99b4:	39 f7       	brne	.-50     	; 0x9984 <coin_inserted+0x3a>
        coin_count = 0;
    99b6:	10 92 dd 0f 	sts	0x0FDD, r1
        credits += 3;
    99ba:	8d 5f       	subi	r24, 0xFD	; 253
    99bc:	80 93 dc 0f 	sts	0x0FDC, r24
    99c0:	08 95       	ret

000099c2 <acquire_credit>:
u8 no_demo_sound() {
	return demo_sound_off;
}

void acquire_credit() {
    if (coin_credit_rel != CC_FRE) credits--;
    99c2:	80 91 b6 0d 	lds	r24, 0x0DB6
    99c6:	88 30       	cpi	r24, 0x08	; 8
    99c8:	29 f0       	breq	.+10     	; 0x99d4 <acquire_credit+0x12>
    99ca:	80 91 dc 0f 	lds	r24, 0x0FDC
    99ce:	81 50       	subi	r24, 0x01	; 1
    99d0:	80 93 dc 0f 	sts	0x0FDC, r24
    99d4:	08 95       	ret

000099d6 <handle_coin_insert>:
}

void handle_coin_insert() {
    if ((ReadJoypad(1) & BTN_SL) && !(p2_prev_state & BTN_SL)) {
    99d6:	81 e0       	ldi	r24, 0x01	; 1
    99d8:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <ReadJoypad>
    99dc:	92 ff       	sbrs	r25, 2
    99de:	07 c0       	rjmp	.+14     	; 0x99ee <handle_coin_insert+0x18>
    99e0:	80 91 df 0f 	lds	r24, 0x0FDF
    99e4:	90 91 e0 0f 	lds	r25, 0x0FE0
    99e8:	92 ff       	sbrs	r25, 2
        coin_inserted();
    99ea:	0e 94 a5 4c 	call	0x994a	; 0x994a <coin_inserted>
    }
    if ((ReadJoypad(1) & BTN_SR) && !(p2_prev_state & BTN_SR)) {
    99ee:	81 e0       	ldi	r24, 0x01	; 1
    99f0:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <ReadJoypad>
    99f4:	93 ff       	sbrs	r25, 3
    99f6:	07 c0       	rjmp	.+14     	; 0x9a06 <handle_coin_insert+0x30>
    99f8:	80 91 df 0f 	lds	r24, 0x0FDF
    99fc:	90 91 e0 0f 	lds	r25, 0x0FE0
    9a00:	93 ff       	sbrs	r25, 3
        coin_inserted();
    9a02:	0e 94 a5 4c 	call	0x994a	; 0x994a <coin_inserted>
    }
    p2_prev_state = ReadJoypad(1);
    9a06:	81 e0       	ldi	r24, 0x01	; 1
    9a08:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <ReadJoypad>
    9a0c:	90 93 e0 0f 	sts	0x0FE0, r25
    9a10:	80 93 df 0f 	sts	0x0FDF, r24
    9a14:	08 95       	ret

00009a16 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9a16:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9a18:	88 23       	and	r24, r24
    9a1a:	29 f1       	breq	.+74     	; 0x9a66 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    9a1c:	87 ff       	sbrs	r24, 7
    9a1e:	03 c0       	rjmp	.+6      	; 0x9a26 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9a20:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9a22:	3f ef       	ldi	r19, 0xFF	; 255
    9a24:	01 c0       	rjmp	.+2      	; 0x9a28 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9a26:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9a28:	6c e3       	ldi	r22, 0x3C	; 60
    9a2a:	0e 94 de 73 	call	0xe7bc	; 0xe7bc <__divmodqi4>
    9a2e:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9a30:	99 23       	and	r25, r25
    9a32:	a9 f0       	breq	.+42     	; 0x9a5e <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9a34:	69 2f       	mov	r22, r25
    9a36:	70 e0       	ldi	r23, 0x00	; 0
    9a38:	8c e3       	ldi	r24, 0x3C	; 60
    9a3a:	90 e0       	ldi	r25, 0x00	; 0
    9a3c:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9a40:	8e 2f       	mov	r24, r30
    9a42:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    9a46:	91 11       	cpse	r25, r1
    9a48:	0a c0       	rjmp	.+20     	; 0x9a5e <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    9a4a:	42 2f       	mov	r20, r18
    9a4c:	50 e0       	ldi	r21, 0x00	; 0
    9a4e:	4f 5f       	subi	r20, 0xFF	; 255
    9a50:	5f 4f       	sbci	r21, 0xFF	; 255
    9a52:	34 03       	mulsu	r19, r20
    9a54:	c0 01       	movw	r24, r0
    9a56:	35 9f       	mul	r19, r21
    9a58:	90 0d       	add	r25, r0
    9a5a:	11 24       	eor	r1, r1
    9a5c:	08 95       	ret
	}
	return direction*base_delta;
    9a5e:	32 03       	mulsu	r19, r18
    9a60:	c0 01       	movw	r24, r0
    9a62:	11 24       	eor	r1, r1
    9a64:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9a66:	80 e0       	ldi	r24, 0x00	; 0
    9a68:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    9a6a:	08 95       	ret

00009a6c <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    9a6c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9a6e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9a70:	93 81       	ldd	r25, Z+3	; 0x03
    9a72:	9f 5f       	subi	r25, 0xFF	; 255
    9a74:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9a76:	42 81       	ldd	r20, Z+2	; 0x02
    9a78:	80 81       	ld	r24, Z
    9a7a:	26 81       	ldd	r18, Z+6	; 0x06
    9a7c:	37 81       	ldd	r19, Z+7	; 0x07
    9a7e:	94 17       	cp	r25, r20
    9a80:	30 f4       	brcc	.+12     	; 0x9a8e <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    9a82:	f9 01       	movw	r30, r18
    9a84:	e8 0f       	add	r30, r24
    9a86:	f1 1d       	adc	r31, r1
    9a88:	e8 0f       	add	r30, r24
    9a8a:	f1 1d       	adc	r31, r1
    9a8c:	12 c0       	rjmp	.+36     	; 0x9ab2 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    9a8e:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9a90:	90 e0       	ldi	r25, 0x00	; 0
    9a92:	01 96       	adiw	r24, 0x01	; 1
    9a94:	61 81       	ldd	r22, Z+1	; 0x01
    9a96:	70 e0       	ldi	r23, 0x00	; 0
    9a98:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    9a9c:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9a9e:	81 11       	cpse	r24, r1
    9aa0:	02 c0       	rjmp	.+4      	; 0x9aa6 <LBGetNextFrame+0x3a>
    9aa2:	41 e0       	ldi	r20, 0x01	; 1
    9aa4:	44 83       	std	Z+4, r20	; 0x04
    9aa6:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    9aa8:	88 0f       	add	r24, r24
    9aaa:	99 1f       	adc	r25, r25
    9aac:	f9 01       	movw	r30, r18
    9aae:	e8 0f       	add	r30, r24
    9ab0:	f9 1f       	adc	r31, r25
    9ab2:	80 81       	ld	r24, Z
    9ab4:	91 81       	ldd	r25, Z+1	; 0x01
}
    9ab6:	08 95       	ret

00009ab8 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9ab8:	0f 93       	push	r16
    9aba:	1f 93       	push	r17
    9abc:	cf 93       	push	r28
    9abe:	df 93       	push	r29
    9ac0:	1f 92       	push	r1
    9ac2:	cd b7       	in	r28, 0x3d	; 61
    9ac4:	de b7       	in	r29, 0x3e	; 62
    9ac6:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    9ac8:	86 2f       	mov	r24, r22
    9aca:	69 83       	std	Y+1, r22	; 0x01
    9acc:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <ReadJoypad>
    9ad0:	d8 01       	movw	r26, r16
    9ad2:	15 96       	adiw	r26, 0x05	; 5
    9ad4:	9c 93       	st	X, r25
    9ad6:	8e 93       	st	-X, r24
    9ad8:	14 97       	sbiw	r26, 0x04	; 4
    9ada:	69 81       	ldd	r22, Y+1	; 0x01
    9adc:	e6 2f       	mov	r30, r22
    9ade:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9ae0:	00 97       	sbiw	r24, 0x00	; 0
    9ae2:	51 f0       	breq	.+20     	; 0x9af8 <LBGetJoyPadState+0x40>
    9ae4:	df 01       	movw	r26, r30
    9ae6:	aa 0f       	add	r26, r26
    9ae8:	bb 1f       	adc	r27, r27
    9aea:	a5 50       	subi	r26, 0x05	; 5
    9aec:	b3 4f       	sbci	r27, 0xF3	; 243
    9aee:	2d 91       	ld	r18, X+
    9af0:	3c 91       	ld	r19, X
    9af2:	82 17       	cp	r24, r18
    9af4:	93 07       	cpc	r25, r19
    9af6:	21 f0       	breq	.+8      	; 0x9b00 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9af8:	d8 01       	movw	r26, r16
    9afa:	16 96       	adiw	r26, 0x06	; 6
    9afc:	1c 92       	st	X, r1
    9afe:	07 c0       	rjmp	.+14     	; 0x9b0e <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9b00:	d8 01       	movw	r26, r16
    9b02:	16 96       	adiw	r26, 0x06	; 6
    9b04:	2c 91       	ld	r18, X
    9b06:	16 97       	sbiw	r26, 0x06	; 6
    9b08:	2f 5f       	subi	r18, 0xFF	; 255
    9b0a:	16 96       	adiw	r26, 0x06	; 6
    9b0c:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9b0e:	ee 0f       	add	r30, r30
    9b10:	ff 1f       	adc	r31, r31
    9b12:	e5 50       	subi	r30, 0x05	; 5
    9b14:	f3 4f       	sbci	r31, 0xF3	; 243
    9b16:	20 81       	ld	r18, Z
    9b18:	31 81       	ldd	r19, Z+1	; 0x01
    9b1a:	a9 01       	movw	r20, r18
    9b1c:	40 95       	com	r20
    9b1e:	50 95       	com	r21
    9b20:	48 23       	and	r20, r24
    9b22:	59 23       	and	r21, r25
    9b24:	d8 01       	movw	r26, r16
    9b26:	11 96       	adiw	r26, 0x01	; 1
    9b28:	5c 93       	st	X, r21
    9b2a:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9b2c:	ac 01       	movw	r20, r24
    9b2e:	40 95       	com	r20
    9b30:	50 95       	com	r21
    9b32:	24 23       	and	r18, r20
    9b34:	35 23       	and	r19, r21
    9b36:	13 96       	adiw	r26, 0x03	; 3
    9b38:	3c 93       	st	X, r19
    9b3a:	2e 93       	st	-X, r18
    9b3c:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9b3e:	91 83       	std	Z+1, r25	; 0x01
    9b40:	80 83       	st	Z, r24
}
    9b42:	0f 90       	pop	r0
    9b44:	df 91       	pop	r29
    9b46:	cf 91       	pop	r28
    9b48:	1f 91       	pop	r17
    9b4a:	0f 91       	pop	r16
    9b4c:	08 95       	ret

00009b4e <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9b4e:	90 ed       	ldi	r25, 0xD0	; 208
    9b50:	94 0f       	add	r25, r20
    9b52:	e0 91 88 0d 	lds	r30, 0x0D88
    9b56:	f0 91 89 0d 	lds	r31, 0x0D89
    9b5a:	9a 30       	cpi	r25, 0x0A	; 10
    9b5c:	38 f4       	brcc	.+14     	; 0x9b6c <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9b5e:	24 2f       	mov	r18, r20
    9b60:	30 e0       	ldi	r19, 0x00	; 0
    9b62:	2d 52       	subi	r18, 0x2D	; 45
    9b64:	31 09       	sbc	r19, r1
    9b66:	e2 0f       	add	r30, r18
    9b68:	f3 1f       	adc	r31, r19
    9b6a:	11 c0       	rjmp	.+34     	; 0x9b8e <LBPrintChar+0x40>
	}
	else if (code >= 65 && code <= 90)
    9b6c:	9f eb       	ldi	r25, 0xBF	; 191
    9b6e:	94 0f       	add	r25, r20
    9b70:	9a 31       	cpi	r25, 0x1A	; 26
    9b72:	40 f4       	brcc	.+16     	; 0x9b84 <LBPrintChar+0x36>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9b74:	24 2f       	mov	r18, r20
    9b76:	30 e0       	ldi	r19, 0x00	; 0
    9b78:	24 53       	subi	r18, 0x34	; 52
    9b7a:	31 09       	sbc	r19, r1
    9b7c:	e2 0f       	add	r30, r18
    9b7e:	f3 1f       	adc	r31, r19
    9b80:	44 91       	lpm	r20, Z
    9b82:	07 c0       	rjmp	.+14     	; 0x9b92 <LBPrintChar+0x44>
	}
	else if (code == 46)
    9b84:	4e 32       	cpi	r20, 0x2E	; 46
    9b86:	11 f4       	brne	.+4      	; 0x9b8c <LBPrintChar+0x3e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[39]));
    9b88:	b7 96       	adiw	r30, 0x27	; 39
    9b8a:	01 c0       	rjmp	.+2      	; 0x9b8e <LBPrintChar+0x40>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9b8c:	32 96       	adiw	r30, 0x02	; 2
    9b8e:	e4 91       	lpm	r30, Z
    9b90:	4e 2f       	mov	r20, r30
    9b92:	50 e0       	ldi	r21, 0x00	; 0
    9b94:	0c 94 12 3e 	jmp	0x7c24	; 0x7c24 <SetTile>

00009b98 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9b98:	ff 92       	push	r15
    9b9a:	0f 93       	push	r16
    9b9c:	1f 93       	push	r17
    9b9e:	cf 93       	push	r28
    9ba0:	df 93       	push	r29
    9ba2:	d8 2f       	mov	r29, r24
    9ba4:	f6 2e       	mov	r15, r22
    9ba6:	8a 01       	movw	r16, r20
	u8 i = 0;
    9ba8:	c0 e0       	ldi	r28, 0x00	; 0
    9baa:	8c 2f       	mov	r24, r28
    9bac:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9bae:	f8 01       	movw	r30, r16
    9bb0:	ec 0f       	add	r30, r28
    9bb2:	f1 1d       	adc	r31, r1
    9bb4:	44 91       	lpm	r20, Z
    9bb6:	44 23       	and	r20, r20
    9bb8:	29 f0       	breq	.+10     	; 0x9bc4 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9bba:	6f 2d       	mov	r22, r15
    9bbc:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		i++;
    9bc0:	cf 5f       	subi	r28, 0xFF	; 255
    9bc2:	f3 cf       	rjmp	.-26     	; 0x9baa <LBPrint+0x12>
	}
}
    9bc4:	df 91       	pop	r29
    9bc6:	cf 91       	pop	r28
    9bc8:	1f 91       	pop	r17
    9bca:	0f 91       	pop	r16
    9bcc:	ff 90       	pop	r15
    9bce:	08 95       	ret

00009bd0 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9bd0:	df 92       	push	r13
    9bd2:	ef 92       	push	r14
    9bd4:	ff 92       	push	r15
    9bd6:	0f 93       	push	r16
    9bd8:	1f 93       	push	r17
    9bda:	cf 93       	push	r28
    9bdc:	df 93       	push	r29
    9bde:	1f 92       	push	r1
    9be0:	cd b7       	in	r28, 0x3d	; 61
    9be2:	de b7       	in	r29, 0x3e	; 62
    9be4:	38 2f       	mov	r19, r24
    9be6:	06 2f       	mov	r16, r22
    9be8:	84 2f       	mov	r24, r20
    9bea:	9d ef       	ldi	r25, 0xFD	; 253
    9bec:	e9 2e       	mov	r14, r25
    9bee:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9bf0:	4a e0       	ldi	r20, 0x0A	; 10
    9bf2:	f4 2e       	mov	r15, r20
    9bf4:	1f ef       	ldi	r17, 0xFF	; 255
    9bf6:	13 0f       	add	r17, r19
    9bf8:	6f 2d       	mov	r22, r15
    9bfa:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    9bfe:	d8 2e       	mov	r13, r24
    9c00:	40 e3       	ldi	r20, 0x30	; 48
    9c02:	49 0f       	add	r20, r25
    9c04:	60 2f       	mov	r22, r16
    9c06:	83 2f       	mov	r24, r19
    9c08:	29 83       	std	Y+1, r18	; 0x01
    9c0a:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		value /= 10;
    9c0e:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9c10:	29 81       	ldd	r18, Y+1	; 0x01
    9c12:	21 11       	cpse	r18, r1
    9c14:	02 c0       	rjmp	.+4      	; 0x9c1a <LBPrintByte+0x4a>
    9c16:	dd 20       	and	r13, r13
    9c18:	19 f0       	breq	.+6      	; 0x9c20 <LBPrintByte+0x50>
    9c1a:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9c1c:	1e 11       	cpse	r17, r14
    9c1e:	ea cf       	rjmp	.-44     	; 0x9bf4 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9c20:	0f 90       	pop	r0
    9c22:	df 91       	pop	r29
    9c24:	cf 91       	pop	r28
    9c26:	1f 91       	pop	r17
    9c28:	0f 91       	pop	r16
    9c2a:	ff 90       	pop	r15
    9c2c:	ef 90       	pop	r14
    9c2e:	df 90       	pop	r13
    9c30:	08 95       	ret

00009c32 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9c32:	cf 92       	push	r12
    9c34:	df 92       	push	r13
    9c36:	ef 92       	push	r14
    9c38:	ff 92       	push	r15
    9c3a:	0f 93       	push	r16
    9c3c:	1f 93       	push	r17
    9c3e:	cf 93       	push	r28
    9c40:	df 93       	push	r29
    9c42:	00 d0       	rcall	.+0      	; 0x9c44 <LBPrintInt+0x12>
    9c44:	cd b7       	in	r28, 0x3d	; 61
    9c46:	de b7       	in	r29, 0x3e	; 62
    9c48:	38 2f       	mov	r19, r24
    9c4a:	16 2f       	mov	r17, r22
    9c4c:	ca 01       	movw	r24, r20
    9c4e:	4b ef       	ldi	r20, 0xFB	; 251
    9c50:	d4 2e       	mov	r13, r20
    9c52:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9c54:	5a e0       	ldi	r21, 0x0A	; 10
    9c56:	e5 2e       	mov	r14, r21
    9c58:	f1 2c       	mov	r15, r1
    9c5a:	cc 24       	eor	r12, r12
    9c5c:	ca 94       	dec	r12
    9c5e:	c3 0e       	add	r12, r19
    9c60:	b7 01       	movw	r22, r14
    9c62:	0e 94 ec 73 	call	0xe7d8	; 0xe7d8 <__udivmodhi4>
    9c66:	06 2f       	mov	r16, r22
    9c68:	40 e3       	ldi	r20, 0x30	; 48
    9c6a:	48 0f       	add	r20, r24
    9c6c:	61 2f       	mov	r22, r17
    9c6e:	83 2f       	mov	r24, r19
    9c70:	29 83       	std	Y+1, r18	; 0x01
    9c72:	7a 83       	std	Y+2, r23	; 0x02
    9c74:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		value /= 10;
    9c78:	80 2f       	mov	r24, r16
    9c7a:	7a 81       	ldd	r23, Y+2	; 0x02
    9c7c:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    9c7e:	29 81       	ldd	r18, Y+1	; 0x01
    9c80:	21 11       	cpse	r18, r1
    9c82:	02 c0       	rjmp	.+4      	; 0x9c88 <LBPrintInt+0x56>
    9c84:	00 97       	sbiw	r24, 0x00	; 0
    9c86:	19 f0       	breq	.+6      	; 0x9c8e <LBPrintInt+0x5c>
    9c88:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    9c8a:	cd 10       	cpse	r12, r13
    9c8c:	e6 cf       	rjmp	.-52     	; 0x9c5a <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9c8e:	0f 90       	pop	r0
    9c90:	0f 90       	pop	r0
    9c92:	df 91       	pop	r29
    9c94:	cf 91       	pop	r28
    9c96:	1f 91       	pop	r17
    9c98:	0f 91       	pop	r16
    9c9a:	ff 90       	pop	r15
    9c9c:	ef 90       	pop	r14
    9c9e:	df 90       	pop	r13
    9ca0:	cf 90       	pop	r12
    9ca2:	08 95       	ret

00009ca4 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9ca4:	af 92       	push	r10
    9ca6:	cf 92       	push	r12
    9ca8:	ef 92       	push	r14
    9caa:	ff 92       	push	r15
    9cac:	0f 93       	push	r16
    9cae:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9cb0:	70 e0       	ldi	r23, 0x00	; 0
    9cb2:	f1 2c       	mov	r15, r1
    9cb4:	fb 01       	movw	r30, r22
    9cb6:	e2 0f       	add	r30, r18
    9cb8:	f1 1d       	adc	r31, r1
    9cba:	ee 16       	cp	r14, r30
    9cbc:	ff 06       	cpc	r15, r31
    9cbe:	a4 f4       	brge	.+40     	; 0x9ce8 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9cc0:	ea 0c       	add	r14, r10
    9cc2:	f1 1c       	adc	r15, r1
    9cc4:	6e 15       	cp	r22, r14
    9cc6:	7f 05       	cpc	r23, r15
    9cc8:	7c f4       	brge	.+30     	; 0x9ce8 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9cca:	28 2f       	mov	r18, r24
    9ccc:	30 e0       	ldi	r19, 0x00	; 0
    9cce:	10 e0       	ldi	r17, 0x00	; 0
    9cd0:	c9 01       	movw	r24, r18
    9cd2:	84 0f       	add	r24, r20
    9cd4:	91 1d       	adc	r25, r1
    9cd6:	08 17       	cp	r16, r24
    9cd8:	19 07       	cpc	r17, r25
    9cda:	34 f4       	brge	.+12     	; 0x9ce8 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9cdc:	0c 0d       	add	r16, r12
    9cde:	11 1d       	adc	r17, r1
    9ce0:	81 e0       	ldi	r24, 0x01	; 1
    9ce2:	20 17       	cp	r18, r16
    9ce4:	31 07       	cpc	r19, r17
    9ce6:	0c f0       	brlt	.+2      	; 0x9cea <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9ce8:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9cea:	1f 91       	pop	r17
    9cec:	0f 91       	pop	r16
    9cee:	ff 90       	pop	r15
    9cf0:	ef 90       	pop	r14
    9cf2:	cf 90       	pop	r12
    9cf4:	af 90       	pop	r10
    9cf6:	08 95       	ret

00009cf8 <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9cf8:	cf 93       	push	r28
    9cfa:	df 93       	push	r29
    9cfc:	d8 2f       	mov	r29, r24
    9cfe:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9d00:	80 e0       	ldi	r24, 0x00	; 0
    9d02:	90 e0       	ldi	r25, 0x00	; 0
    9d04:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <GetPrngNumber>
    9d08:	6f ef       	ldi	r22, 0xFF	; 255
    9d0a:	70 e0       	ldi	r23, 0x00	; 0
    9d0c:	0e 94 ec 73 	call	0xe7d8	; 0xe7d8 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9d10:	6c 2f       	mov	r22, r28
    9d12:	70 e0       	ldi	r23, 0x00	; 0
    9d14:	6d 1b       	sub	r22, r29
    9d16:	71 09       	sbc	r23, r1
    9d18:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
}
    9d1c:	8d 0f       	add	r24, r29
    9d1e:	df 91       	pop	r29
    9d20:	cf 91       	pop	r28
    9d22:	08 95       	ret

00009d24 <LBWaitUs>:

void LBWaitUs(u16 micro_seconds)
{
    9d24:	cf 93       	push	r28
    9d26:	df 93       	push	r29
#if JAMMA
	micro_seconds = micro_seconds / 1500;
    9d28:	6c ed       	ldi	r22, 0xDC	; 220
    9d2a:	75 e0       	ldi	r23, 0x05	; 5
    9d2c:	0e 94 ec 73 	call	0xe7d8	; 0xe7d8 <__udivmodhi4>
    9d30:	eb 01       	movw	r28, r22
	for (;micro_seconds > 0; micro_seconds--) {
    9d32:	20 97       	sbiw	r28, 0x00	; 0
    9d34:	41 f0       	breq	.+16     	; 0x9d46 <LBWaitUs+0x22>
		WaitVsync(1);
    9d36:	81 e0       	ldi	r24, 0x01	; 1
    9d38:	90 e0       	ldi	r25, 0x00	; 0
    9d3a:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		handle_coin_insert();
    9d3e:	0e 94 eb 4c 	call	0x99d6	; 0x99d6 <handle_coin_insert>

void LBWaitUs(u16 micro_seconds)
{
#if JAMMA
	micro_seconds = micro_seconds / 1500;
	for (;micro_seconds > 0; micro_seconds--) {
    9d42:	21 97       	sbiw	r28, 0x01	; 1
    9d44:	f6 cf       	rjmp	.-20     	; 0x9d32 <LBWaitUs+0xe>
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
#endif
}
    9d46:	df 91       	pop	r29
    9d48:	cf 91       	pop	r28
    9d4a:	08 95       	ret

00009d4c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9d4c:	cf 93       	push	r28
    9d4e:	df 93       	push	r29
    9d50:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9d52:	c0 e0       	ldi	r28, 0x00	; 0
    9d54:	cd 17       	cp	r28, r29
    9d56:	31 f0       	breq	.+12     	; 0x9d64 <LBWaitSeconds+0x18>
	{
		LBWaitUs(65535);
    9d58:	8f ef       	ldi	r24, 0xFF	; 255
    9d5a:	9f ef       	ldi	r25, 0xFF	; 255
    9d5c:	0e 94 92 4e 	call	0x9d24	; 0x9d24 <LBWaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9d60:	cf 5f       	subi	r28, 0xFF	; 255
    9d62:	f8 cf       	rjmp	.-16     	; 0x9d54 <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    9d64:	df 91       	pop	r29
    9d66:	cf 91       	pop	r28
    9d68:	08 95       	ret

00009d6a <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9d6a:	df 92       	push	r13
    9d6c:	ef 92       	push	r14
    9d6e:	ff 92       	push	r15
    9d70:	0f 93       	push	r16
    9d72:	1f 93       	push	r17
    9d74:	cf 93       	push	r28
    9d76:	df 93       	push	r29
    9d78:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9d7a:	fb 01       	movw	r30, r22
    9d7c:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9d7e:	31 96       	adiw	r30, 0x01	; 1
    9d80:	64 91       	lpm	r22, Z
    9d82:	5f ef       	ldi	r21, 0xFF	; 255
    9d84:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9d86:	24 2f       	mov	r18, r20
    9d88:	21 70       	andi	r18, 0x01	; 1
    9d8a:	40 ff       	sbrs	r20, 0
    9d8c:	04 c0       	rjmp	.+8      	; 0x9d96 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    9d8e:	95 2f       	mov	r25, r21
		dx=-1;
    9d90:	ff 24       	eor	r15, r15
    9d92:	fa 94       	dec	r15
    9d94:	03 c0       	rjmp	.+6      	; 0x9d9c <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9d96:	ff 24       	eor	r15, r15
    9d98:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    9d9a:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    9d9c:	41 ff       	sbrs	r20, 1
    9d9e:	05 c0       	rjmp	.+10     	; 0x9daa <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9da0:	7f ef       	ldi	r23, 0xFF	; 255
    9da2:	76 0f       	add	r23, r22
		dy=-1;
    9da4:	ee 24       	eor	r14, r14
    9da6:	ea 94       	dec	r14
    9da8:	03 c0       	rjmp	.+6      	; 0x9db0 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    9daa:	ee 24       	eor	r14, r14
    9dac:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    9dae:	70 e0       	ldi	r23, 0x00	; 0
    9db0:	21 11       	cpse	r18, r1
    9db2:	01 c0       	rjmp	.+2      	; 0x9db6 <LBMapSprite+0x4c>
    9db4:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9db6:	00 e0       	ldi	r16, 0x00	; 0
    9db8:	06 17       	cp	r16, r22
    9dba:	09 f1       	breq	.+66     	; 0x9dfe <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9dbc:	71 03       	mulsu	r23, r17
    9dbe:	e0 01       	movw	r28, r0
    9dc0:	11 24       	eor	r1, r1
    9dc2:	d8 2e       	mov	r13, r24
    9dc4:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    9dc6:	8d 15       	cp	r24, r13
    9dc8:	b1 f0       	breq	.+44     	; 0x9df6 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9dca:	9e 01       	movw	r18, r28
    9dcc:	29 0f       	add	r18, r25
    9dce:	31 1d       	adc	r19, r1
    9dd0:	97 fd       	sbrc	r25, 7
    9dd2:	3a 95       	dec	r19
    9dd4:	2e 5f       	subi	r18, 0xFE	; 254
    9dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    9dd8:	fd 01       	movw	r30, r26
    9dda:	e2 0f       	add	r30, r18
    9ddc:	f3 1f       	adc	r31, r19
    9dde:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    9de0:	34 e0       	ldi	r19, 0x04	; 4
    9de2:	83 9f       	mul	r24, r19
    9de4:	f0 01       	movw	r30, r0
    9de6:	11 24       	eor	r1, r1
    9de8:	e7 51       	subi	r30, 0x17	; 23
    9dea:	f0 4f       	sbci	r31, 0xF0	; 240
    9dec:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    9dee:	8f 5f       	subi	r24, 0xFF	; 255
    9df0:	43 83       	std	Z+3, r20	; 0x03
    9df2:	9f 0d       	add	r25, r15
    9df4:	e8 cf       	rjmp	.-48     	; 0x9dc6 <LBMapSprite+0x5c>
    9df6:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9df8:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9dfa:	95 2f       	mov	r25, r21
    9dfc:	dd cf       	rjmp	.-70     	; 0x9db8 <LBMapSprite+0x4e>
	}
}
    9dfe:	df 91       	pop	r29
    9e00:	cf 91       	pop	r28
    9e02:	1f 91       	pop	r17
    9e04:	0f 91       	pop	r16
    9e06:	ff 90       	pop	r15
    9e08:	ef 90       	pop	r14
    9e0a:	df 90       	pop	r13
    9e0c:	08 95       	ret

00009e0e <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    9e0e:	df 92       	push	r13
    9e10:	ef 92       	push	r14
    9e12:	ff 92       	push	r15
    9e14:	0f 93       	push	r16
    9e16:	1f 93       	push	r17
    9e18:	cf 93       	push	r28
    9e1a:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9e1c:	a0 91 b7 0c 	lds	r26, 0x0CB7
    9e20:	98 e0       	ldi	r25, 0x08	; 8
    9e22:	a9 9f       	mul	r26, r25
    9e24:	70 01       	movw	r14, r0
    9e26:	11 24       	eor	r1, r1
    9e28:	50 e0       	ldi	r21, 0x00	; 0
    9e2a:	38 ef       	ldi	r19, 0xF8	; 248
    9e2c:	a3 9f       	mul	r26, r19
    9e2e:	30 2d       	mov	r19, r0
    9e30:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9e32:	70 e0       	ldi	r23, 0x00	; 0
    9e34:	70 17       	cp	r23, r16
    9e36:	09 f1       	breq	.+66     	; 0x9e7a <LBMoveSprite+0x6c>
    9e38:	d4 2e       	mov	r13, r20
    9e3a:	13 2f       	mov	r17, r19
    9e3c:	14 0f       	add	r17, r20
    9e3e:	b8 2f       	mov	r27, r24
    9e40:	b2 0f       	add	r27, r18
    9e42:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9e44:	8b 17       	cp	r24, r27
    9e46:	a9 f0       	breq	.+42     	; 0x9e72 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9e48:	c4 e0       	ldi	r28, 0x04	; 4
    9e4a:	8c 9f       	mul	r24, r28
    9e4c:	f0 01       	movw	r30, r0
    9e4e:	11 24       	eor	r1, r1
    9e50:	ef 01       	movw	r28, r30
    9e52:	c7 51       	subi	r28, 0x17	; 23
    9e54:	d0 4f       	sbci	r29, 0xF0	; 240
    9e56:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9e58:	a0 32       	cpi	r26, 0x20	; 32
    9e5a:	28 f4       	brcc	.+10     	; 0x9e66 <LBMoveSprite+0x58>
    9e5c:	e4 16       	cp	r14, r20
    9e5e:	f5 06       	cpc	r15, r21
    9e60:	14 f4       	brge	.+4      	; 0x9e66 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9e62:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9e64:	03 c0       	rjmp	.+6      	; 0x9e6c <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9e66:	e7 51       	subi	r30, 0x17	; 23
    9e68:	f0 4f       	sbci	r31, 0xF0	; 240
    9e6a:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    9e6c:	8f 5f       	subi	r24, 0xFF	; 255
    9e6e:	98 5f       	subi	r25, 0xF8	; 248
    9e70:	e9 cf       	rjmp	.-46     	; 0x9e44 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9e72:	7f 5f       	subi	r23, 0xFF	; 255
    9e74:	48 5f       	subi	r20, 0xF8	; 248
    9e76:	5f 4f       	sbci	r21, 0xFF	; 255
    9e78:	dd cf       	rjmp	.-70     	; 0x9e34 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9e7a:	df 91       	pop	r29
    9e7c:	cf 91       	pop	r28
    9e7e:	1f 91       	pop	r17
    9e80:	0f 91       	pop	r16
    9e82:	ff 90       	pop	r15
    9e84:	ef 90       	pop	r14
    9e86:	df 90       	pop	r13
    9e88:	08 95       	ret

00009e8a <LBRotateSprites>:

void LBRotateSprites()
{
    9e8a:	80 e0       	ldi	r24, 0x00	; 0
    9e8c:	90 e0       	ldi	r25, 0x00	; 0
    9e8e:	dc 01       	movw	r26, r24
    9e90:	a7 51       	subi	r26, 0x17	; 23
    9e92:	b0 4f       	sbci	r27, 0xF0	; 240
    9e94:	fc 01       	movw	r30, r24
    9e96:	e0 5f       	subi	r30, 0xF0	; 240
    9e98:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9e9a:	13 96       	adiw	r26, 0x03	; 3
    9e9c:	2c 91       	ld	r18, X
    9e9e:	13 97       	sbiw	r26, 0x03	; 3
    9ea0:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9ea2:	12 96       	adiw	r26, 0x02	; 2
    9ea4:	2c 91       	ld	r18, X
    9ea6:	12 97       	sbiw	r26, 0x02	; 2
    9ea8:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9eaa:	2c 91       	ld	r18, X
    9eac:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9eae:	11 96       	adiw	r26, 0x01	; 1
    9eb0:	2c 91       	ld	r18, X
    9eb2:	21 83       	std	Z+1, r18	; 0x01
    9eb4:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    9eb6:	8c 33       	cpi	r24, 0x3C	; 60
    9eb8:	91 05       	cpc	r25, r1
    9eba:	49 f7       	brne	.-46     	; 0x9e8e <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    9ebc:	80 91 01 05 	lds	r24, 0x0501
    9ec0:	94 e0       	ldi	r25, 0x04	; 4
    9ec2:	89 9f       	mul	r24, r25
    9ec4:	f0 01       	movw	r30, r0
    9ec6:	11 24       	eor	r1, r1
    9ec8:	e7 51       	subi	r30, 0x17	; 23
    9eca:	f0 4f       	sbci	r31, 0xF0	; 240
    9ecc:	93 81       	ldd	r25, Z+3	; 0x03
    9ece:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9ed2:	92 81       	ldd	r25, Z+2	; 0x02
    9ed4:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    9ed8:	90 81       	ld	r25, Z
    9eda:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    9ede:	91 81       	ldd	r25, Z+1	; 0x01
    9ee0:	90 93 4d 05 	sts	0x054D, r25
		if (++rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9ee4:	8f 5f       	subi	r24, 0xFF	; 255
    9ee6:	84 31       	cpi	r24, 0x14	; 20
    9ee8:	08 f0       	brcs	.+2      	; 0x9eec <LBRotateSprites+0x62>
    9eea:	8f e0       	ldi	r24, 0x0F	; 15
    9eec:	80 93 01 05 	sts	0x0501, r24
    9ef0:	08 95       	ret

00009ef2 <waitForVSync>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

void waitForVSync()
{
    WaitVsync(1);
    9ef2:	81 e0       	ldi	r24, 0x01	; 1
    9ef4:	90 e0       	ldi	r25, 0x00	; 0
    9ef6:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
#if JAMMA
    handle_coin_insert();
    9efa:	0c 94 eb 4c 	jmp	0x99d6	; 0x99d6 <handle_coin_insert>

00009efe <is_space>:
#endif
}

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9efe:	80 91 cc 0d 	lds	r24, 0x0DCC
}
    9f02:	81 70       	andi	r24, 0x01	; 1
    9f04:	08 95       	ret

00009f06 <init_default_high_scores>:
} 
#endif

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    9f06:	8e e8       	ldi	r24, 0x8E	; 142
    9f08:	90 e0       	ldi	r25, 0x00	; 0
    9f0a:	90 93 97 0d 	sts	0x0D97, r25
    9f0e:	80 93 96 0d 	sts	0x0D96, r24
    9f12:	80 e0       	ldi	r24, 0x00	; 0
    9f14:	90 e0       	ldi	r25, 0x00	; 0
    9f16:	fc 01       	movw	r30, r24
    9f18:	ef 5f       	subi	r30, 0xFF	; 255
    9f1a:	fc 4f       	sbci	r31, 0xFC	; 252
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9f1c:	e4 91       	lpm	r30, Z
    9f1e:	dc 01       	movw	r26, r24
    9f20:	aa 56       	subi	r26, 0x6A	; 106
    9f22:	b2 4f       	sbci	r27, 0xF2	; 242
    9f24:	12 96       	adiw	r26, 0x02	; 2
    9f26:	ec 93       	st	X, r30
    9f28:	01 96       	adiw	r24, 0x01	; 1
#endif

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9f2a:	8e 31       	cpi	r24, 0x1E	; 30
    9f2c:	91 05       	cpc	r25, r1
    9f2e:	99 f7       	brne	.-26     	; 0x9f16 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9f30:	08 95       	ret

00009f32 <init_enemy_state>:

void init_enemy_state()
{
    9f32:	80 e0       	ldi	r24, 0x00	; 0
    9f34:	90 e0       	ldi	r25, 0x00	; 0
    9f36:	9c 01       	movw	r18, r24
    9f38:	29 54       	subi	r18, 0x49	; 73
    9f3a:	32 4f       	sbci	r19, 0xF2	; 242
    9f3c:	f9 01       	movw	r30, r18
    9f3e:	e1 5e       	subi	r30, 0xE1	; 225
    9f40:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    9f42:	10 82       	st	Z, r1
    9f44:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    9f46:	10 82       	st	Z, r1
    9f48:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9f4a:	89 30       	cpi	r24, 0x09	; 9
    9f4c:	21 e0       	ldi	r18, 0x01	; 1
    9f4e:	92 07       	cpc	r25, r18
    9f50:	91 f7       	brne	.-28     	; 0x9f36 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    9f52:	10 92 d2 0d 	sts	0x0DD2, r1
    9f56:	08 95       	ret

00009f58 <init_player_shot>:
	shot->active = 0;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    9f58:	81 11       	cpse	r24, r1
    9f5a:	3f c0       	rjmp	.+126    	; 0x9fda <init_player_shot+0x82>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f5c:	10 92 f0 0d 	sts	0x0DF0, r1
	shot->hit_count = damage;
    9f60:	81 e0       	ldi	r24, 0x01	; 1
    9f62:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9f66:	90 e5       	ldi	r25, 0x50	; 80
    9f68:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9f6c:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    9f70:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9f74:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9f78:	2a e8       	ldi	r18, 0x8A	; 138
    9f7a:	3d e0       	ldi	r19, 0x0D	; 13
    9f7c:	30 93 fc 0d 	sts	0x0DFC, r19
    9f80:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    9f84:	28 ea       	ldi	r18, 0xA8	; 168
    9f86:	30 e3       	ldi	r19, 0x30	; 48
    9f88:	30 93 8b 0d 	sts	0x0D8B, r19
    9f8c:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    9f90:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    9f94:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9f98:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f9c:	10 92 04 0e 	sts	0x0E04, r1
	shot->hit_count = damage;
    9fa0:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    9fa4:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    9fa8:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    9fac:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    9fb0:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    9fb4:	45 e4       	ldi	r20, 0x45	; 69
    9fb6:	50 e1       	ldi	r21, 0x10	; 16
    9fb8:	50 93 10 0e 	sts	0x0E10, r21
    9fbc:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    9fc0:	30 93 46 10 	sts	0x1046, r19
    9fc4:	20 93 45 10 	sts	0x1045, r18
	shot->shared.vx = speed;
    9fc8:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    9fcc:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9fd0:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fd4:	10 92 18 0e 	sts	0x0E18, r1
    9fd8:	41 c0       	rjmp	.+130    	; 0xa05c <init_player_shot+0x104>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    9fda:	82 30       	cpi	r24, 0x02	; 2
    9fdc:	09 f0       	breq	.+2      	; 0x9fe0 <init_player_shot+0x88>
    9fde:	57 c0       	rjmp	.+174    	; 0xa08e <init_player_shot+0x136>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fe0:	81 e0       	ldi	r24, 0x01	; 1
    9fe2:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    9fe6:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9fea:	94 e6       	ldi	r25, 0x64	; 100
    9fec:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9ff0:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    9ff4:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9ff8:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9ffc:	2a e8       	ldi	r18, 0x8A	; 138
    9ffe:	3d e0       	ldi	r19, 0x0D	; 13
    a000:	30 93 fc 0d 	sts	0x0DFC, r19
    a004:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a008:	25 ea       	ldi	r18, 0xA5	; 165
    a00a:	30 e3       	ldi	r19, 0x30	; 48
    a00c:	30 93 8b 0d 	sts	0x0D8B, r19
    a010:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    a014:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a018:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a01c:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a020:	80 93 04 0e 	sts	0x0E04, r24
	shot->hit_count = damage;
    a024:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a028:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a02c:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a030:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a034:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a038:	45 e4       	ldi	r20, 0x45	; 69
    a03a:	50 e1       	ldi	r21, 0x10	; 16
    a03c:	50 93 10 0e 	sts	0x0E10, r21
    a040:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a044:	30 93 46 10 	sts	0x1046, r19
    a048:	20 93 45 10 	sts	0x1045, r18
	shot->shared.vx = speed;
    a04c:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a050:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a054:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a058:	80 93 18 0e 	sts	0x0E18, r24
	shot->hit_count = damage;
    a05c:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a060:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a064:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a068:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a06c:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a070:	47 e5       	ldi	r20, 0x57	; 87
    a072:	50 e1       	ldi	r21, 0x10	; 16
    a074:	50 93 24 0e 	sts	0x0E24, r21
    a078:	40 93 23 0e 	sts	0x0E23, r20
	shot->anim.anims[0] = (char*) map;
    a07c:	30 93 58 10 	sts	0x1058, r19
    a080:	20 93 57 10 	sts	0x1057, r18
	shot->shared.vx = speed;
    a084:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
    a088:	10 92 15 0e 	sts	0x0E15, r1
    a08c:	7f c1       	rjmp	.+766    	; 0xa38c <init_player_shot+0x434>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    a08e:	84 30       	cpi	r24, 0x04	; 4
    a090:	09 f0       	breq	.+2      	; 0xa094 <init_player_shot+0x13c>
    a092:	5a c0       	rjmp	.+180    	; 0xa148 <init_player_shot+0x1f0>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a094:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    a098:	81 e0       	ldi	r24, 0x01	; 1
    a09a:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    a09e:	9f e7       	ldi	r25, 0x7F	; 127
    a0a0:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a0a4:	28 ef       	ldi	r18, 0xF8	; 248
    a0a6:	20 93 f4 0d 	sts	0x0DF4, r18
	shot->anim.anim_count = 1;
    a0aa:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a0ae:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a0b2:	2a e8       	ldi	r18, 0x8A	; 138
    a0b4:	3d e0       	ldi	r19, 0x0D	; 13
    a0b6:	30 93 fc 0d 	sts	0x0DFC, r19
    a0ba:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a0be:	28 ea       	ldi	r18, 0xA8	; 168
    a0c0:	30 e3       	ldi	r19, 0x30	; 48
    a0c2:	30 93 8b 0d 	sts	0x0D8B, r19
    a0c6:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    a0ca:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a0ce:	21 e8       	ldi	r18, 0x81	; 129
    a0d0:	20 93 ed 0d 	sts	0x0DED, r18
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a0d4:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a0d8:	22 e0       	ldi	r18, 0x02	; 2
    a0da:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    a0de:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a0e2:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a0e6:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a0ea:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a0ee:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a0f2:	45 e4       	ldi	r20, 0x45	; 69
    a0f4:	50 e1       	ldi	r21, 0x10	; 16
    a0f6:	50 93 10 0e 	sts	0x0E10, r21
    a0fa:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a0fe:	4c e9       	ldi	r20, 0x9C	; 156
    a100:	50 e3       	ldi	r21, 0x30	; 48
    a102:	50 93 46 10 	sts	0x1046, r21
    a106:	40 93 45 10 	sts	0x1045, r20
	shot->shared.vx = speed;
    a10a:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a10e:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a112:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a116:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    a11a:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a11e:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a122:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a126:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a12a:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a12e:	67 e5       	ldi	r22, 0x57	; 87
    a130:	70 e1       	ldi	r23, 0x10	; 16
    a132:	70 93 24 0e 	sts	0x0E24, r23
    a136:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a13a:	50 93 58 10 	sts	0x1058, r21
    a13e:	40 93 57 10 	sts	0x1057, r20
	shot->shared.vx = speed;
    a142:	90 93 16 0e 	sts	0x0E16, r25
    a146:	5c c0       	rjmp	.+184    	; 0xa200 <init_player_shot+0x2a8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a148:	86 30       	cpi	r24, 0x06	; 6
    a14a:	09 f0       	breq	.+2      	; 0xa14e <init_player_shot+0x1f6>
    a14c:	60 c0       	rjmp	.+192    	; 0xa20e <init_player_shot+0x2b6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a14e:	33 e0       	ldi	r19, 0x03	; 3
    a150:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a154:	22 e0       	ldi	r18, 0x02	; 2
    a156:	20 93 f1 0d 	sts	0x0DF1, r18
	shot->shot_speed = speed;
    a15a:	8f e7       	ldi	r24, 0x7F	; 127
    a15c:	80 93 f3 0d 	sts	0x0DF3, r24
	shot->y_delta = y_delta;
    a160:	98 ef       	ldi	r25, 0xF8	; 248
    a162:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a166:	91 e0       	ldi	r25, 0x01	; 1
    a168:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a16c:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a170:	4a e8       	ldi	r20, 0x8A	; 138
    a172:	5d e0       	ldi	r21, 0x0D	; 13
    a174:	50 93 fc 0d 	sts	0x0DFC, r21
    a178:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a17c:	4b ea       	ldi	r20, 0xAB	; 171
    a17e:	50 e3       	ldi	r21, 0x30	; 48
    a180:	50 93 8b 0d 	sts	0x0D8B, r21
    a184:	40 93 8a 0d 	sts	0x0D8A, r20
	shot->shared.vx = speed;
    a188:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->shared.vy = 0;
    a18c:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a190:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a194:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    a198:	20 93 05 0e 	sts	0x0E05, r18
	shot->shot_speed = speed;
    a19c:	80 93 07 0e 	sts	0x0E07, r24
	shot->y_delta = y_delta;
    a1a0:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a1a4:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a1a8:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a1ac:	65 e4       	ldi	r22, 0x45	; 69
    a1ae:	70 e1       	ldi	r23, 0x10	; 16
    a1b0:	70 93 10 0e 	sts	0x0E10, r23
    a1b4:	60 93 0f 0e 	sts	0x0E0F, r22
	shot->anim.anims[0] = (char*) map;
    a1b8:	6c e9       	ldi	r22, 0x9C	; 156
    a1ba:	70 e3       	ldi	r23, 0x30	; 48
    a1bc:	70 93 46 10 	sts	0x1046, r23
    a1c0:	60 93 45 10 	sts	0x1045, r22
	shot->shared.vx = speed;
    a1c4:	80 93 02 0e 	sts	0x0E02, r24
	shot->shared.vy = 0;
    a1c8:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1cc:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1d0:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a1d4:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    a1d8:	80 93 1b 0e 	sts	0x0E1B, r24
	shot->y_delta = y_delta;
    a1dc:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a1e0:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a1e4:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a1e8:	67 e5       	ldi	r22, 0x57	; 87
    a1ea:	70 e1       	ldi	r23, 0x10	; 16
    a1ec:	70 93 24 0e 	sts	0x0E24, r23
    a1f0:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a1f4:	50 93 58 10 	sts	0x1058, r21
    a1f8:	40 93 57 10 	sts	0x1057, r20
	shot->shared.vx = speed;
    a1fc:	80 93 16 0e 	sts	0x0E16, r24
	shot->shared.vy = 0;
    a200:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a204:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a208:	20 93 e7 0d 	sts	0x0DE7, r18
    a20c:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a20e:	88 30       	cpi	r24, 0x08	; 8
    a210:	09 f0       	breq	.+2      	; 0xa214 <init_player_shot+0x2bc>
    a212:	60 c0       	rjmp	.+192    	; 0xa2d4 <init_player_shot+0x37c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a214:	33 e0       	ldi	r19, 0x03	; 3
    a216:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a21a:	62 e0       	ldi	r22, 0x02	; 2
    a21c:	60 93 f1 0d 	sts	0x0DF1, r22
	shot->shot_speed = speed;
    a220:	2f e7       	ldi	r18, 0x7F	; 127
    a222:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->y_delta = y_delta;
    a226:	98 ef       	ldi	r25, 0xF8	; 248
    a228:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a22c:	91 e0       	ldi	r25, 0x01	; 1
    a22e:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a232:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a236:	4a e8       	ldi	r20, 0x8A	; 138
    a238:	5d e0       	ldi	r21, 0x0D	; 13
    a23a:	50 93 fc 0d 	sts	0x0DFC, r21
    a23e:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a242:	4b ea       	ldi	r20, 0xAB	; 171
    a244:	50 e3       	ldi	r21, 0x30	; 48
    a246:	50 93 8b 0d 	sts	0x0D8B, r21
    a24a:	40 93 8a 0d 	sts	0x0D8A, r20
	shot->shared.vx = speed;
    a24e:	20 93 ee 0d 	sts	0x0DEE, r18
	shot->shared.vy = 0;
    a252:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a256:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a25a:	90 93 04 0e 	sts	0x0E04, r25
	shot->hit_count = damage;
    a25e:	90 93 05 0e 	sts	0x0E05, r25
	shot->shot_speed = speed;
    a262:	20 93 07 0e 	sts	0x0E07, r18
	shot->y_delta = y_delta;
    a266:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a26a:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a26e:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a272:	e5 e4       	ldi	r30, 0x45	; 69
    a274:	f0 e1       	ldi	r31, 0x10	; 16
    a276:	f0 93 10 0e 	sts	0x0E10, r31
    a27a:	e0 93 0f 0e 	sts	0x0E0F, r30
	shot->anim.anims[0] = (char*) map;
    a27e:	e5 ea       	ldi	r30, 0xA5	; 165
    a280:	f0 e3       	ldi	r31, 0x30	; 48
    a282:	f0 93 46 10 	sts	0x1046, r31
    a286:	e0 93 45 10 	sts	0x1045, r30
	shot->shared.vx = speed;
    a28a:	20 93 02 0e 	sts	0x0E02, r18
	shot->shared.vy = 0;
    a28e:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a292:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a296:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a29a:	60 93 19 0e 	sts	0x0E19, r22
	shot->shot_speed = speed;
    a29e:	20 93 1b 0e 	sts	0x0E1B, r18
	shot->y_delta = y_delta;
    a2a2:	80 93 1c 0e 	sts	0x0E1C, r24
	shot->anim.anim_count = 1;
    a2a6:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a2aa:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a2ae:	87 e5       	ldi	r24, 0x57	; 87
    a2b0:	90 e1       	ldi	r25, 0x10	; 16
    a2b2:	90 93 24 0e 	sts	0x0E24, r25
    a2b6:	80 93 23 0e 	sts	0x0E23, r24
	shot->anim.anims[0] = (char*) map;
    a2ba:	50 93 58 10 	sts	0x1058, r21
    a2be:	40 93 57 10 	sts	0x1057, r20
	shot->shared.vx = speed;
    a2c2:	20 93 16 0e 	sts	0x0E16, r18
	shot->shared.vy = 0;
    a2c6:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a2ca:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a2ce:	30 93 e7 0d 	sts	0x0DE7, r19
    a2d2:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2d4:	55 e0       	ldi	r21, 0x05	; 5
    a2d6:	50 93 f0 0d 	sts	0x0DF0, r21
	shot->hit_count = damage;
    a2da:	42 e0       	ldi	r20, 0x02	; 2
    a2dc:	40 93 f1 0d 	sts	0x0DF1, r20
	shot->shot_speed = speed;
    a2e0:	9f e7       	ldi	r25, 0x7F	; 127
    a2e2:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a2e6:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    a2ea:	81 e0       	ldi	r24, 0x01	; 1
    a2ec:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a2f0:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a2f4:	2a e8       	ldi	r18, 0x8A	; 138
    a2f6:	3d e0       	ldi	r19, 0x0D	; 13
    a2f8:	30 93 fc 0d 	sts	0x0DFC, r19
    a2fc:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a300:	22 ea       	ldi	r18, 0xA2	; 162
    a302:	30 e3       	ldi	r19, 0x30	; 48
    a304:	30 93 8b 0d 	sts	0x0D8B, r19
    a308:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    a30c:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a310:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a314:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a318:	50 93 04 0e 	sts	0x0E04, r21
	shot->hit_count = damage;
    a31c:	40 93 05 0e 	sts	0x0E05, r20
	shot->shot_speed = speed;
    a320:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a324:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a328:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a32c:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a330:	45 e4       	ldi	r20, 0x45	; 69
    a332:	50 e1       	ldi	r21, 0x10	; 16
    a334:	50 93 10 0e 	sts	0x0E10, r21
    a338:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a33c:	30 93 46 10 	sts	0x1046, r19
    a340:	20 93 45 10 	sts	0x1045, r18
	shot->shared.vx = speed;
    a344:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a348:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a34c:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a350:	26 e0       	ldi	r18, 0x06	; 6
    a352:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    a356:	24 e0       	ldi	r18, 0x04	; 4
    a358:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    a35c:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a360:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a364:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a368:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a36c:	27 e5       	ldi	r18, 0x57	; 87
    a36e:	30 e1       	ldi	r19, 0x10	; 16
    a370:	30 93 24 0e 	sts	0x0E24, r19
    a374:	20 93 23 0e 	sts	0x0E23, r18
	shot->anim.anims[0] = (char*) map;
    a378:	2f e9       	ldi	r18, 0x9F	; 159
    a37a:	30 e3       	ldi	r19, 0x30	; 48
    a37c:	30 93 58 10 	sts	0x1058, r19
    a380:	20 93 57 10 	sts	0x1057, r18
	shot->shared.vx = speed;
    a384:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a388:	90 93 15 0e 	sts	0x0E15, r25
	}
	shot->active = 0;
    a38c:	10 92 1a 0e 	sts	0x0E1A, r1
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a390:	80 93 e7 0d 	sts	0x0DE7, r24
    a394:	08 95       	ret

0000a396 <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a396:	81 11       	cpse	r24, r1
    a398:	55 c0       	rjmp	.+170    	; 0xa444 <init_boss_shot+0xae>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a39a:	81 e0       	ldi	r24, 0x01	; 1
    a39c:	80 93 6b 0e 	sts	0x0E6B, r24
	shot->hit_count = damage;
    a3a0:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->shot_speed = speed;
    a3a4:	94 e6       	ldi	r25, 0x64	; 100
    a3a6:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    a3aa:	10 92 6f 0e 	sts	0x0E6F, r1
	shot->anim.anim_count = 1;
    a3ae:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    a3b2:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    a3b6:	2a ed       	ldi	r18, 0xDA	; 218
    a3b8:	3f e0       	ldi	r19, 0x0F	; 15
    a3ba:	30 93 77 0e 	sts	0x0E77, r19
    a3be:	20 93 76 0e 	sts	0x0E76, r18
	shot->anim.anims[0] = (char*) map;
    a3c2:	25 ea       	ldi	r18, 0xA5	; 165
    a3c4:	30 e3       	ldi	r19, 0x30	; 48
    a3c6:	30 93 db 0f 	sts	0x0FDB, r19
    a3ca:	20 93 da 0f 	sts	0x0FDA, r18
	shot->shared.vx = speed;
    a3ce:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    a3d2:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3d6:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3da:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a3de:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    a3e2:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    a3e6:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a3ea:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    a3ee:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    a3f2:	4b e5       	ldi	r20, 0x5B	; 91
    a3f4:	50 e1       	ldi	r21, 0x10	; 16
    a3f6:	50 93 8b 0e 	sts	0x0E8B, r21
    a3fa:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    a3fe:	30 93 5c 10 	sts	0x105C, r19
    a402:	20 93 5b 10 	sts	0x105B, r18
	shot->shared.vx = speed;
    a406:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    a40a:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a40e:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a412:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    a416:	80 93 94 0e 	sts	0x0E94, r24
	shot->shot_speed = speed;
    a41a:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    a41e:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a422:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    a426:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    a42a:	4b e3       	ldi	r20, 0x3B	; 59
    a42c:	50 e1       	ldi	r21, 0x10	; 16
    a42e:	50 93 9f 0e 	sts	0x0E9F, r21
    a432:	40 93 9e 0e 	sts	0x0E9E, r20
	shot->anim.anims[0] = (char*) map;
    a436:	30 93 3c 10 	sts	0x103C, r19
    a43a:	20 93 3b 10 	sts	0x103B, r18
	shot->shared.vx = speed;
    a43e:	90 93 91 0e 	sts	0x0E91, r25
    a442:	5c c0       	rjmp	.+184    	; 0xa4fc <init_boss_shot+0x166>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a444:	82 30       	cpi	r24, 0x02	; 2
    a446:	09 f0       	breq	.+2      	; 0xa44a <init_boss_shot+0xb4>
    a448:	5e c0       	rjmp	.+188    	; 0xa506 <init_boss_shot+0x170>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a44a:	94 e0       	ldi	r25, 0x04	; 4
    a44c:	90 93 6b 0e 	sts	0x0E6B, r25
	shot->hit_count = damage;
    a450:	91 e0       	ldi	r25, 0x01	; 1
    a452:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->shot_speed = speed;
    a456:	2f e7       	ldi	r18, 0x7F	; 127
    a458:	20 93 6e 0e 	sts	0x0E6E, r18
	shot->y_delta = y_delta;
    a45c:	38 ef       	ldi	r19, 0xF8	; 248
    a45e:	30 93 6f 0e 	sts	0x0E6F, r19
	shot->anim.anim_count = 1;
    a462:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a466:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a46a:	4a ed       	ldi	r20, 0xDA	; 218
    a46c:	5f e0       	ldi	r21, 0x0F	; 15
    a46e:	50 93 77 0e 	sts	0x0E77, r21
    a472:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a476:	48 ea       	ldi	r20, 0xA8	; 168
    a478:	50 e3       	ldi	r21, 0x30	; 48
    a47a:	50 93 db 0f 	sts	0x0FDB, r21
    a47e:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a482:	20 93 69 0e 	sts	0x0E69, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a486:	31 e8       	ldi	r19, 0x81	; 129
    a488:	30 93 68 0e 	sts	0x0E68, r19
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a48c:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a490:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a494:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    a498:	20 93 82 0e 	sts	0x0E82, r18
	shot->y_delta = y_delta;
    a49c:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a4a0:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a4a4:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a4a8:	4b e5       	ldi	r20, 0x5B	; 91
    a4aa:	50 e1       	ldi	r21, 0x10	; 16
    a4ac:	50 93 8b 0e 	sts	0x0E8B, r21
    a4b0:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    a4b4:	4c e9       	ldi	r20, 0x9C	; 156
    a4b6:	50 e3       	ldi	r21, 0x30	; 48
    a4b8:	50 93 5c 10 	sts	0x105C, r21
    a4bc:	40 93 5b 10 	sts	0x105B, r20
	shot->shared.vx = speed;
    a4c0:	20 93 7d 0e 	sts	0x0E7D, r18
	shot->shared.vy = 0;
    a4c4:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a4c8:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4cc:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    a4d0:	90 93 94 0e 	sts	0x0E94, r25
	shot->shot_speed = speed;
    a4d4:	20 93 96 0e 	sts	0x0E96, r18
	shot->y_delta = y_delta;
    a4d8:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a4dc:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a4e0:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a4e4:	6b e3       	ldi	r22, 0x3B	; 59
    a4e6:	70 e1       	ldi	r23, 0x10	; 16
    a4e8:	70 93 9f 0e 	sts	0x0E9F, r23
    a4ec:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a4f0:	50 93 3c 10 	sts	0x103C, r21
    a4f4:	40 93 3b 10 	sts	0x103B, r20
	shot->shared.vx = speed;
    a4f8:	20 93 91 0e 	sts	0x0E91, r18
	shot->shared.vy = 0;
    a4fc:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a500:	10 92 95 0e 	sts	0x0E95, r1
    a504:	20 c1       	rjmp	.+576    	; 0xa746 <init_boss_shot+0x3b0>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    a506:	84 30       	cpi	r24, 0x04	; 4
    a508:	09 f0       	breq	.+2      	; 0xa50c <init_boss_shot+0x176>
    a50a:	5a c0       	rjmp	.+180    	; 0xa5c0 <init_boss_shot+0x22a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a50c:	33 e0       	ldi	r19, 0x03	; 3
    a50e:	30 93 6b 0e 	sts	0x0E6B, r19
	shot->hit_count = damage;
    a512:	22 e0       	ldi	r18, 0x02	; 2
    a514:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    a518:	8f e7       	ldi	r24, 0x7F	; 127
    a51a:	80 93 6e 0e 	sts	0x0E6E, r24
	shot->y_delta = y_delta;
    a51e:	98 ef       	ldi	r25, 0xF8	; 248
    a520:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    a524:	91 e0       	ldi	r25, 0x01	; 1
    a526:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a52a:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a52e:	4a ed       	ldi	r20, 0xDA	; 218
    a530:	5f e0       	ldi	r21, 0x0F	; 15
    a532:	50 93 77 0e 	sts	0x0E77, r21
    a536:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a53a:	4b ea       	ldi	r20, 0xAB	; 171
    a53c:	50 e3       	ldi	r21, 0x30	; 48
    a53e:	50 93 db 0f 	sts	0x0FDB, r21
    a542:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a546:	80 93 69 0e 	sts	0x0E69, r24
	shot->shared.vy = 0;
    a54a:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a54e:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a552:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    a556:	20 93 80 0e 	sts	0x0E80, r18
	shot->shot_speed = speed;
    a55a:	80 93 82 0e 	sts	0x0E82, r24
	shot->y_delta = y_delta;
    a55e:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a562:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a566:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a56a:	6b e5       	ldi	r22, 0x5B	; 91
    a56c:	70 e1       	ldi	r23, 0x10	; 16
    a56e:	70 93 8b 0e 	sts	0x0E8B, r23
    a572:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    a576:	6c e9       	ldi	r22, 0x9C	; 156
    a578:	70 e3       	ldi	r23, 0x30	; 48
    a57a:	70 93 5c 10 	sts	0x105C, r23
    a57e:	60 93 5b 10 	sts	0x105B, r22
	shot->shared.vx = speed;
    a582:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->shared.vy = 0;
    a586:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a58a:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a58e:	30 93 93 0e 	sts	0x0E93, r19
	shot->hit_count = damage;
    a592:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    a596:	80 93 96 0e 	sts	0x0E96, r24
	shot->y_delta = y_delta;
    a59a:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a59e:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a5a2:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a5a6:	6b e3       	ldi	r22, 0x3B	; 59
    a5a8:	70 e1       	ldi	r23, 0x10	; 16
    a5aa:	70 93 9f 0e 	sts	0x0E9F, r23
    a5ae:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a5b2:	50 93 3c 10 	sts	0x103C, r21
    a5b6:	40 93 3b 10 	sts	0x103B, r20
	shot->shared.vx = speed;
    a5ba:	80 93 91 0e 	sts	0x0E91, r24
    a5be:	5d c0       	rjmp	.+186    	; 0xa67a <init_boss_shot+0x2e4>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    a5c0:	86 30       	cpi	r24, 0x06	; 6
    a5c2:	09 f0       	breq	.+2      	; 0xa5c6 <init_boss_shot+0x230>
    a5c4:	61 c0       	rjmp	.+194    	; 0xa688 <init_boss_shot+0x2f2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5c6:	23 e0       	ldi	r18, 0x03	; 3
    a5c8:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    a5cc:	32 e0       	ldi	r19, 0x02	; 2
    a5ce:	30 93 6c 0e 	sts	0x0E6C, r19
	shot->shot_speed = speed;
    a5d2:	9f e7       	ldi	r25, 0x7F	; 127
    a5d4:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    a5d8:	88 ef       	ldi	r24, 0xF8	; 248
    a5da:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.anim_count = 1;
    a5de:	81 e0       	ldi	r24, 0x01	; 1
    a5e0:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    a5e4:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    a5e8:	4a ed       	ldi	r20, 0xDA	; 218
    a5ea:	5f e0       	ldi	r21, 0x0F	; 15
    a5ec:	50 93 77 0e 	sts	0x0E77, r21
    a5f0:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a5f4:	4b ea       	ldi	r20, 0xAB	; 171
    a5f6:	50 e3       	ldi	r21, 0x30	; 48
    a5f8:	50 93 db 0f 	sts	0x0FDB, r21
    a5fc:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a600:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    a604:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a608:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a60c:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a610:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    a614:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    a618:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a61c:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    a620:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    a624:	6b e5       	ldi	r22, 0x5B	; 91
    a626:	70 e1       	ldi	r23, 0x10	; 16
    a628:	70 93 8b 0e 	sts	0x0E8B, r23
    a62c:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    a630:	65 ea       	ldi	r22, 0xA5	; 165
    a632:	70 e3       	ldi	r23, 0x30	; 48
    a634:	70 93 5c 10 	sts	0x105C, r23
    a638:	60 93 5b 10 	sts	0x105B, r22
	shot->shared.vx = speed;
    a63c:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    a640:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a644:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a648:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    a64c:	30 93 94 0e 	sts	0x0E94, r19
	shot->shot_speed = speed;
    a650:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    a654:	38 e0       	ldi	r19, 0x08	; 8
    a656:	30 93 97 0e 	sts	0x0E97, r19
	shot->anim.anim_count = 1;
    a65a:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    a65e:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    a662:	6b e3       	ldi	r22, 0x3B	; 59
    a664:	70 e1       	ldi	r23, 0x10	; 16
    a666:	70 93 9f 0e 	sts	0x0E9F, r23
    a66a:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a66e:	50 93 3c 10 	sts	0x103C, r21
    a672:	40 93 3b 10 	sts	0x103B, r20
	shot->shared.vx = speed;
    a676:	90 93 91 0e 	sts	0x0E91, r25
	shot->shared.vy = 0;
    a67a:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a67e:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a682:	20 93 62 0e 	sts	0x0E62, r18
    a686:	08 95       	ret
	}
	else if (level == 8) // Dessert
    a688:	88 30       	cpi	r24, 0x08	; 8
    a68a:	09 f0       	breq	.+2      	; 0xa68e <init_boss_shot+0x2f8>
    a68c:	5e c0       	rjmp	.+188    	; 0xa74a <init_boss_shot+0x3b4>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a68e:	22 e0       	ldi	r18, 0x02	; 2
    a690:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    a694:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    a698:	3f e7       	ldi	r19, 0x7F	; 127
    a69a:	30 93 6e 0e 	sts	0x0E6E, r19
	shot->y_delta = y_delta;
    a69e:	98 ef       	ldi	r25, 0xF8	; 248
    a6a0:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    a6a4:	91 e0       	ldi	r25, 0x01	; 1
    a6a6:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a6aa:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a6ae:	4a ed       	ldi	r20, 0xDA	; 218
    a6b0:	5f e0       	ldi	r21, 0x0F	; 15
    a6b2:	50 93 77 0e 	sts	0x0E77, r21
    a6b6:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a6ba:	4c e9       	ldi	r20, 0x9C	; 156
    a6bc:	50 e3       	ldi	r21, 0x30	; 48
    a6be:	50 93 db 0f 	sts	0x0FDB, r21
    a6c2:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a6c6:	30 93 69 0e 	sts	0x0E69, r19
	shot->shared.vy = 0;
    a6ca:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a6ce:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6d2:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    a6d6:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    a6da:	64 e6       	ldi	r22, 0x64	; 100
    a6dc:	60 93 82 0e 	sts	0x0E82, r22
	shot->y_delta = y_delta;
    a6e0:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a6e4:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a6e8:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a6ec:	eb e5       	ldi	r30, 0x5B	; 91
    a6ee:	f0 e1       	ldi	r31, 0x10	; 16
    a6f0:	f0 93 8b 0e 	sts	0x0E8B, r31
    a6f4:	e0 93 8a 0e 	sts	0x0E8A, r30
	shot->anim.anims[0] = (char*) map;
    a6f8:	50 93 5c 10 	sts	0x105C, r21
    a6fc:	40 93 5b 10 	sts	0x105B, r20
	shot->shared.vx = speed;
    a700:	60 93 7d 0e 	sts	0x0E7D, r22
	shot->shared.vy = 0;
    a704:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a708:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a70c:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    a710:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    a714:	30 93 96 0e 	sts	0x0E96, r19
	shot->y_delta = y_delta;
    a718:	80 93 97 0e 	sts	0x0E97, r24
	shot->anim.anim_count = 1;
    a71c:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a720:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a724:	8b e3       	ldi	r24, 0x3B	; 59
    a726:	90 e1       	ldi	r25, 0x10	; 16
    a728:	90 93 9f 0e 	sts	0x0E9F, r25
    a72c:	80 93 9e 0e 	sts	0x0E9E, r24
	shot->anim.anims[0] = (char*) map;
    a730:	50 93 3c 10 	sts	0x103C, r21
    a734:	40 93 3b 10 	sts	0x103B, r20
	shot->shared.vx = speed;
    a738:	30 93 91 0e 	sts	0x0E91, r19
	shot->shared.vy = 0;
    a73c:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a740:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a744:	83 e0       	ldi	r24, 0x03	; 3
    a746:	80 93 62 0e 	sts	0x0E62, r24
    a74a:	08 95       	ret

0000a74c <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a74c:	10 92 cd 0e 	sts	0x0ECD, r1
    a750:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    a754:	10 92 c9 0e 	sts	0x0EC9, r1
    a758:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    a75c:	10 92 cb 0e 	sts	0x0ECB, r1
    a760:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    a764:	10 92 ce 0e 	sts	0x0ECE, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	game.boss.width = 2;
    a768:	82 e0       	ldi	r24, 0x02	; 2
    a76a:	80 93 5f 0e 	sts	0x0E5F, r24
	game.boss.height = 3;
    a76e:	93 e0       	ldi	r25, 0x03	; 3
    a770:	90 93 60 0e 	sts	0x0E60, r25
	game.boss.run.anim_count = 4;
    a774:	84 e0       	ldi	r24, 0x04	; 4
    a776:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a77a:	8c e0       	ldi	r24, 0x0C	; 12
    a77c:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.run.anims = boss_run_anim;
    a780:	ec e8       	ldi	r30, 0x8C	; 140
    a782:	fd e0       	ldi	r31, 0x0D	; 13
    a784:	f0 93 af 0e 	sts	0x0EAF, r31
    a788:	e0 93 ae 0e 	sts	0x0EAE, r30
	game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a78c:	2c e8       	ldi	r18, 0x8C	; 140
    a78e:	30 e3       	ldi	r19, 0x30	; 48
    a790:	31 83       	std	Z+1, r19	; 0x01
    a792:	20 83       	st	Z, r18
	game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a794:	24 e8       	ldi	r18, 0x84	; 132
    a796:	30 e3       	ldi	r19, 0x30	; 48
    a798:	33 83       	std	Z+3, r19	; 0x03
    a79a:	22 83       	std	Z+2, r18	; 0x02
	game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a79c:	2c e7       	ldi	r18, 0x7C	; 124
    a79e:	30 e3       	ldi	r19, 0x30	; 48
    a7a0:	35 83       	std	Z+5, r19	; 0x05
    a7a2:	24 83       	std	Z+4, r18	; 0x04
	game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a7a4:	24 e7       	ldi	r18, 0x74	; 116
    a7a6:	30 e3       	ldi	r19, 0x30	; 48
    a7a8:	37 83       	std	Z+7, r19	; 0x07
    a7aa:	26 83       	std	Z+6, r18	; 0x06
	game.boss.active_shots = 0;
    a7ac:	10 92 5b 0e 	sts	0x0E5B, r1
	game.boss.shared.vx = 0;
    a7b0:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.shared.vy = 0;
    a7b4:	10 92 58 0e 	sts	0x0E58, r1
	game.boss.shared.gravity = 0;
    a7b8:	10 92 5a 0e 	sts	0x0E5A, r1
	game.boss.active = 0;
    a7bc:	10 92 61 0e 	sts	0x0E61, r1
	game.boss.direction = D_LEFT;
    a7c0:	10 92 5e 0e 	sts	0x0E5E, r1
	game.boss.flags = IDLE;
    a7c4:	88 e0       	ldi	r24, 0x08	; 8
    a7c6:	80 93 5c 0e 	sts	0x0E5C, r24
	game.boss.ai_flags = AI_NOT_READY;
    a7ca:	10 92 5d 0e 	sts	0x0E5D, r1
	game.boss.shield = BOSS_SHIELD;
    a7ce:	8e e1       	ldi	r24, 0x1E	; 30
    a7d0:	80 93 63 0e 	sts	0x0E63, r24
	game.boss.idle.anim_count = 1;
    a7d4:	81 e0       	ldi	r24, 0x01	; 1
    a7d6:	80 93 a1 0e 	sts	0x0EA1, r24
	game.boss.idle.frames_per_anim = 1;
    a7da:	80 93 a2 0e 	sts	0x0EA2, r24
	game.boss.idle.anims = boss_idle_anim;
    a7de:	e9 e5       	ldi	r30, 0x59	; 89
    a7e0:	f0 e1       	ldi	r31, 0x10	; 16
    a7e2:	f0 93 a7 0e 	sts	0x0EA7, r31
    a7e6:	e0 93 a6 0e 	sts	0x0EA6, r30
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a7ea:	24 e9       	ldi	r18, 0x94	; 148
    a7ec:	30 e3       	ldi	r19, 0x30	; 48
    a7ee:	31 83       	std	Z+1, r19	; 0x01
    a7f0:	20 83       	st	Z, r18
	
	game.boss.jump.anim_count = 1;
    a7f2:	80 93 b1 0e 	sts	0x0EB1, r24
	game.boss.jump.frames_per_anim = 1;
    a7f6:	80 93 b2 0e 	sts	0x0EB2, r24
	game.boss.jump.anims = boss_jump_anim;
    a7fa:	e7 e4       	ldi	r30, 0x47	; 71
    a7fc:	f0 e1       	ldi	r31, 0x10	; 16
    a7fe:	f0 93 b7 0e 	sts	0x0EB7, r31
    a802:	e0 93 b6 0e 	sts	0x0EB6, r30
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a806:	27 e6       	ldi	r18, 0x67	; 103
    a808:	30 e3       	ldi	r19, 0x30	; 48
    a80a:	31 83       	std	Z+1, r19	; 0x01
    a80c:	20 83       	st	Z, r18
	
	game.boss.prone.anim_count = 1;
    a80e:	80 93 b9 0e 	sts	0x0EB9, r24
	game.boss.prone.frames_per_anim = 1;
    a812:	80 93 ba 0e 	sts	0x0EBA, r24
	game.boss.prone.anims = boss_prone_anim;
    a816:	e5 e5       	ldi	r30, 0x55	; 85
    a818:	f0 e1       	ldi	r31, 0x10	; 16
    a81a:	f0 93 bf 0e 	sts	0x0EBF, r31
    a81e:	e0 93 be 0e 	sts	0x0EBE, r30
	game.boss.prone.anims[0] = (char*) map_ahero_prone;
    a822:	2f e6       	ldi	r18, 0x6F	; 111
    a824:	30 e3       	ldi	r19, 0x30	; 48
    a826:	31 83       	std	Z+1, r19	; 0x01
    a828:	20 83       	st	Z, r18
	
	game.boss.expl.anim_count = 3;
    a82a:	90 93 c1 0e 	sts	0x0EC1, r25
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a82e:	85 e0       	ldi	r24, 0x05	; 5
    a830:	80 93 c2 0e 	sts	0x0EC2, r24
	game.boss.expl.anims = expl_anim;
    a834:	ef e4       	ldi	r30, 0x4F	; 79
    a836:	f0 e1       	ldi	r31, 0x10	; 16
    a838:	f0 93 c7 0e 	sts	0x0EC7, r31
    a83c:	e0 93 c6 0e 	sts	0x0EC6, r30
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a840:	86 e1       	ldi	r24, 0x16	; 22
    a842:	91 e3       	ldi	r25, 0x31	; 49
    a844:	91 83       	std	Z+1, r25	; 0x01
    a846:	80 83       	st	Z, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a848:	83 e1       	ldi	r24, 0x13	; 19
    a84a:	91 e3       	ldi	r25, 0x31	; 49
    a84c:	93 83       	std	Z+3, r25	; 0x03
    a84e:	82 83       	std	Z+2, r24	; 0x02
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a850:	80 e1       	ldi	r24, 0x10	; 16
    a852:	91 e3       	ldi	r25, 0x31	; 49
    a854:	95 83       	std	Z+5, r25	; 0x05
    a856:	84 83       	std	Z+4, r24	; 0x04
	
	init_boss_shot(game.current_level_index);
    a858:	80 91 cc 0d 	lds	r24, 0x0DCC
    a85c:	0c 94 cb 51 	jmp	0xa396	; 0xa396 <init_boss_shot>

0000a860 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    a860:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    a864:	88 23       	and	r24, r24
    a866:	f9 f0       	breq	.+62     	; 0xa8a6 <init_player_state+0x46>
	{
		game.player.width = 3;
    a868:	83 e0       	ldi	r24, 0x03	; 3
    a86a:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 1;
    a86e:	81 e0       	ldi	r24, 0x01	; 1
    a870:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 2;
    a874:	82 e0       	ldi	r24, 0x02	; 2
    a876:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a87a:	85 e0       	ldi	r24, 0x05	; 5
    a87c:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    a880:	8d e3       	ldi	r24, 0x3D	; 61
    a882:	90 e1       	ldi	r25, 0x10	; 16
    a884:	90 93 34 0e 	sts	0x0E34, r25
    a888:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    a88c:	87 ec       	ldi	r24, 0xC7	; 199
    a88e:	90 e3       	ldi	r25, 0x30	; 48
    a890:	90 93 3e 10 	sts	0x103E, r25
    a894:	80 93 3d 10 	sts	0x103D, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    a898:	82 ec       	ldi	r24, 0xC2	; 194
    a89a:	90 e3       	ldi	r25, 0x30	; 48
    a89c:	90 93 40 10 	sts	0x1040, r25
    a8a0:	80 93 3f 10 	sts	0x103F, r24
    a8a4:	2a c0       	rjmp	.+84     	; 0xa8fa <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    a8a6:	82 e0       	ldi	r24, 0x02	; 2
    a8a8:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 3;
    a8ac:	83 e0       	ldi	r24, 0x03	; 3
    a8ae:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 4;
    a8b2:	84 e0       	ldi	r24, 0x04	; 4
    a8b4:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a8b8:	8c e0       	ldi	r24, 0x0C	; 12
    a8ba:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    a8be:	8d e3       	ldi	r24, 0x3D	; 61
    a8c0:	90 e1       	ldi	r25, 0x10	; 16
    a8c2:	90 93 34 0e 	sts	0x0E34, r25
    a8c6:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    a8ca:	81 ef       	ldi	r24, 0xF1	; 241
    a8cc:	90 e3       	ldi	r25, 0x30	; 48
    a8ce:	90 93 3e 10 	sts	0x103E, r25
    a8d2:	80 93 3d 10 	sts	0x103D, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    a8d6:	89 ee       	ldi	r24, 0xE9	; 233
    a8d8:	90 e3       	ldi	r25, 0x30	; 48
    a8da:	90 93 40 10 	sts	0x1040, r25
    a8de:	80 93 3f 10 	sts	0x103F, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a8e2:	81 ee       	ldi	r24, 0xE1	; 225
    a8e4:	90 e3       	ldi	r25, 0x30	; 48
    a8e6:	90 93 42 10 	sts	0x1042, r25
    a8ea:	80 93 41 10 	sts	0x1041, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a8ee:	89 ed       	ldi	r24, 0xD9	; 217
    a8f0:	90 e3       	ldi	r25, 0x30	; 48
    a8f2:	90 93 44 10 	sts	0x1044, r25
    a8f6:	80 93 43 10 	sts	0x1043, r24
	}
	game.player.shared.vx = 0;
    a8fa:	10 92 de 0d 	sts	0x0DDE, r1
	game.player.shared.vy = 0;
    a8fe:	10 92 dd 0d 	sts	0x0DDD, r1
	game.player.shared.gravity = 0;
    a902:	10 92 df 0d 	sts	0x0DDF, r1
	game.player.active_shots = 0;
    a906:	10 92 e0 0d 	sts	0x0DE0, r1
	game.player.active = 1;
    a90a:	81 e0       	ldi	r24, 0x01	; 1
    a90c:	80 93 e6 0d 	sts	0x0DE6, r24
	game.player.direction = D_RIGHT;
    a910:	80 93 e3 0d 	sts	0x0DE3, r24
	game.player.flags = IDLE;
    a914:	98 e0       	ldi	r25, 0x08	; 8
    a916:	90 93 e1 0d 	sts	0x0DE1, r25
	game.player.ai_flags = AI_NOT_READY;
    a91a:	10 92 e2 0d 	sts	0x0DE2, r1
	game.player.shield = PLAYER_SHIELD;
    a91e:	9f e0       	ldi	r25, 0x0F	; 15
    a920:	90 93 e8 0d 	sts	0x0DE8, r25
	game.player.idle.anim_count = 1;
    a924:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.frames_per_anim = 1;
    a928:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.anims = idle_anim;
    a92c:	21 e6       	ldi	r18, 0x61	; 97
    a92e:	30 e1       	ldi	r19, 0x10	; 16
    a930:	30 93 2c 0e 	sts	0x0E2C, r19
    a934:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a938:	29 ef       	ldi	r18, 0xF9	; 249
    a93a:	30 e3       	ldi	r19, 0x30	; 48
    a93c:	30 93 62 10 	sts	0x1062, r19
    a940:	20 93 61 10 	sts	0x1061, r18
	
	game.player.jump.anim_count = 1;
    a944:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.frames_per_anim = 1;
    a948:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.anims = jump_anim;
    a94c:	24 e9       	ldi	r18, 0x94	; 148
    a94e:	3d e0       	ldi	r19, 0x0D	; 13
    a950:	30 93 3c 0e 	sts	0x0E3C, r19
    a954:	20 93 3b 0e 	sts	0x0E3B, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a958:	21 ed       	ldi	r18, 0xD1	; 209
    a95a:	30 e3       	ldi	r19, 0x30	; 48
    a95c:	30 93 95 0d 	sts	0x0D95, r19
    a960:	20 93 94 0d 	sts	0x0D94, r18
	
	game.player.prone.anim_count = 1;
    a964:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.frames_per_anim = 1;
    a968:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.anims = prone_anim;
    a96c:	81 ee       	ldi	r24, 0xE1	; 225
    a96e:	9f e0       	ldi	r25, 0x0F	; 15
    a970:	90 93 44 0e 	sts	0x0E44, r25
    a974:	80 93 43 0e 	sts	0x0E43, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a978:	8c ec       	ldi	r24, 0xCC	; 204
    a97a:	90 e3       	ldi	r25, 0x30	; 48
    a97c:	90 93 e2 0f 	sts	0x0FE2, r25
    a980:	80 93 e1 0f 	sts	0x0FE1, r24
	
	game.player.expl.anim_count = 3;
    a984:	83 e0       	ldi	r24, 0x03	; 3
    a986:	80 93 46 0e 	sts	0x0E46, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a98a:	85 e0       	ldi	r24, 0x05	; 5
    a98c:	80 93 47 0e 	sts	0x0E47, r24
	game.player.expl.anims = expl_anim;
    a990:	8f e4       	ldi	r24, 0x4F	; 79
    a992:	90 e1       	ldi	r25, 0x10	; 16
    a994:	90 93 4c 0e 	sts	0x0E4C, r25
    a998:	80 93 4b 0e 	sts	0x0E4B, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a99c:	86 e1       	ldi	r24, 0x16	; 22
    a99e:	91 e3       	ldi	r25, 0x31	; 49
    a9a0:	90 93 50 10 	sts	0x1050, r25
    a9a4:	80 93 4f 10 	sts	0x104F, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a9a8:	83 e1       	ldi	r24, 0x13	; 19
    a9aa:	91 e3       	ldi	r25, 0x31	; 49
    a9ac:	90 93 52 10 	sts	0x1052, r25
    a9b0:	80 93 51 10 	sts	0x1051, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a9b4:	80 e1       	ldi	r24, 0x10	; 16
    a9b6:	91 e3       	ldi	r25, 0x31	; 49
    a9b8:	90 93 54 10 	sts	0x1054, r25
    a9bc:	80 93 53 10 	sts	0x1053, r24
	game.eye_clusters = 9;
    a9c0:	89 e0       	ldi	r24, 0x09	; 9
    a9c2:	80 93 d5 0d 	sts	0x0DD5, r24
	init_player_shot(game.current_level_index);
    a9c6:	80 91 cc 0d 	lds	r24, 0x0DCC
    a9ca:	0c 94 ac 4f 	jmp	0x9f58	; 0x9f58 <init_player_shot>

0000a9ce <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    a9ce:	0f 93       	push	r16
    a9d0:	1f 93       	push	r17
    a9d2:	cf 93       	push	r28
    a9d4:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    a9d6:	a8 2f       	mov	r26, r24
    a9d8:	b0 e0       	ldi	r27, 0x00	; 0
    a9da:	35 e3       	ldi	r19, 0x35	; 53
    a9dc:	83 9f       	mul	r24, r19
    a9de:	c0 01       	movw	r24, r0
    a9e0:	11 24       	eor	r1, r1
    a9e2:	89 54       	subi	r24, 0x49	; 73
    a9e4:	92 4f       	sbci	r25, 0xF2	; 242
    a9e6:	fc 01       	movw	r30, r24
    a9e8:	ea 5b       	subi	r30, 0xBA	; 186
    a9ea:	fe 4f       	sbci	r31, 0xFE	; 254
    a9ec:	33 e0       	ldi	r19, 0x03	; 3
    a9ee:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a9f0:	31 96       	adiw	r30, 0x01	; 1
    a9f2:	35 e0       	ldi	r19, 0x05	; 5
    a9f4:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    a9f6:	34 96       	adiw	r30, 0x04	; 4
    a9f8:	cf e4       	ldi	r28, 0x4F	; 79
    a9fa:	d0 e1       	ldi	r29, 0x10	; 16
    a9fc:	d1 83       	std	Z+1, r29	; 0x01
    a9fe:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    aa00:	e6 e1       	ldi	r30, 0x16	; 22
    aa02:	f1 e3       	ldi	r31, 0x31	; 49
    aa04:	f0 93 50 10 	sts	0x1050, r31
    aa08:	e0 93 4f 10 	sts	0x104F, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    aa0c:	e3 e1       	ldi	r30, 0x13	; 19
    aa0e:	f1 e3       	ldi	r31, 0x31	; 49
    aa10:	f0 93 52 10 	sts	0x1052, r31
    aa14:	e0 93 51 10 	sts	0x1051, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    aa18:	e0 e1       	ldi	r30, 0x10	; 16
    aa1a:	f1 e3       	ldi	r31, 0x31	; 49
    aa1c:	f0 93 54 10 	sts	0x1054, r31
    aa20:	e0 93 53 10 	sts	0x1053, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    aa24:	ec 01       	movw	r28, r24
    aa26:	cf 5c       	subi	r28, 0xCF	; 207
    aa28:	de 4f       	sbci	r29, 0xFE	; 254
    aa2a:	31 e0       	ldi	r19, 0x01	; 1
    aa2c:	38 83       	st	Y, r19
		game.enemies[i].shot[j].active = 0;
    aa2e:	fc 01       	movw	r30, r24
    aa30:	ee 5c       	subi	r30, 0xCE	; 206
    aa32:	fe 4f       	sbci	r31, 0xFE	; 254
    aa34:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    aa36:	32 97       	sbiw	r30, 0x02	; 2
    aa38:	17 e0       	ldi	r17, 0x07	; 7
    aa3a:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    aa3c:	36 96       	adiw	r30, 0x06	; 6
    aa3e:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    aa40:	31 96       	adiw	r30, 0x01	; 1
    aa42:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    aa44:	34 96       	adiw	r30, 0x04	; 4
    aa46:	09 e4       	ldi	r16, 0x49	; 73
    aa48:	10 e1       	ldi	r17, 0x10	; 16
    aa4a:	11 83       	std	Z+1, r17	; 0x01
    aa4c:	00 83       	st	Z, r16
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    aa4e:	e4 e6       	ldi	r30, 0x64	; 100
    aa50:	f0 e3       	ldi	r31, 0x30	; 48
    aa52:	f0 93 4a 10 	sts	0x104A, r31
    aa56:	e0 93 49 10 	sts	0x1049, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    aa5a:	fc 01       	movw	r30, r24
    aa5c:	ed 5c       	subi	r30, 0xCD	; 205
    aa5e:	fe 4f       	sbci	r31, 0xFE	; 254
    aa60:	30 e5       	ldi	r19, 0x50	; 80
    aa62:	30 83       	st	Z, r19
		if (is_boss)
    aa64:	22 23       	and	r18, r18
    aa66:	59 f0       	breq	.+22     	; 0xaa7e <init_enemy_shot+0xb0>
		{
			game.enemies[i].shot[j].hit_count = CRITICAL_SHOT_DAMAGE;
    aa68:	8a e0       	ldi	r24, 0x0A	; 10
    aa6a:	88 83       	st	Y, r24
			game.enemies[i].shot[j].shot_speed = FAST_SHOT_SPEED;
    aa6c:	8f e7       	ldi	r24, 0x7F	; 127
    aa6e:	80 83       	st	Z, r24
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    aa70:	86 e4       	ldi	r24, 0x46	; 70
    aa72:	90 e3       	ldi	r25, 0x30	; 48
    aa74:	90 93 4a 10 	sts	0x104A, r25
    aa78:	80 93 49 10 	sts	0x1049, r24
    aa7c:	0f c0       	rjmp	.+30     	; 0xaa9c <init_enemy_shot+0xce>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    aa7e:	fc 01       	movw	r30, r24
    aa80:	ec 5d       	subi	r30, 0xDC	; 220
    aa82:	fe 4f       	sbci	r31, 0xFE	; 254
    aa84:	20 81       	ld	r18, Z
    aa86:	3a 96       	adiw	r30, 0x0a	; 10
    aa88:	24 30       	cpi	r18, 0x04	; 4
    aa8a:	11 f4       	brne	.+4      	; 0xaa90 <init_enemy_shot+0xc2>
		{
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    aa8c:	82 ee       	ldi	r24, 0xE2	; 226
    aa8e:	03 c0       	rjmp	.+6      	; 0xaa96 <init_enemy_shot+0xc8>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    aa90:	25 30       	cpi	r18, 0x05	; 5
    aa92:	19 f4       	brne	.+6      	; 0xaa9a <init_enemy_shot+0xcc>
		{
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    aa94:	8a e0       	ldi	r24, 0x0A	; 10
    aa96:	80 83       	st	Z, r24
    aa98:	01 c0       	rjmp	.+2      	; 0xaa9c <init_enemy_shot+0xce>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    aa9a:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    aa9c:	25 e3       	ldi	r18, 0x35	; 53
    aa9e:	2a 9f       	mul	r18, r26
    aaa0:	c0 01       	movw	r24, r0
    aaa2:	2b 9f       	mul	r18, r27
    aaa4:	90 0d       	add	r25, r0
    aaa6:	11 24       	eor	r1, r1
    aaa8:	89 54       	subi	r24, 0x49	; 73
    aaaa:	92 4f       	sbci	r25, 0xF2	; 242
    aaac:	fc 01       	movw	r30, r24
    aaae:	e3 5d       	subi	r30, 0xD3	; 211
    aab0:	fe 4f       	sbci	r31, 0xFE	; 254
    aab2:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    aab4:	34 97       	sbiw	r30, 0x04	; 4
    aab6:	71 83       	std	Z+1, r23	; 0x01
    aab8:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    aaba:	32 96       	adiw	r30, 0x02	; 2
    aabc:	51 83       	std	Z+1, r21	; 0x01
    aabe:	40 83       	st	Z, r20
	}
}
    aac0:	df 91       	pop	r29
    aac2:	cf 91       	pop	r28
    aac4:	1f 91       	pop	r17
    aac6:	0f 91       	pop	r16
    aac8:	08 95       	ret

0000aaca <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    aaca:	95 e3       	ldi	r25, 0x35	; 53
    aacc:	89 9f       	mul	r24, r25
    aace:	90 01       	movw	r18, r0
    aad0:	11 24       	eor	r1, r1
    aad2:	29 54       	subi	r18, 0x49	; 73
    aad4:	32 4f       	sbci	r19, 0xF2	; 242
    aad6:	f9 01       	movw	r30, r18
    aad8:	e1 5e       	subi	r30, 0xE1	; 225
    aada:	fe 4f       	sbci	r31, 0xFE	; 254
    aadc:	91 e0       	ldi	r25, 0x01	; 1
    aade:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aae0:	32 96       	adiw	r30, 0x02	; 2
    aae2:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    aae4:	31 97       	sbiw	r30, 0x01	; 1
    aae6:	a8 e0       	ldi	r26, 0x08	; 8
    aae8:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    aaea:	32 96       	adiw	r30, 0x02	; 2
    aaec:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aaee:	31 96       	adiw	r30, 0x01	; 1
    aaf0:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    aaf2:	31 96       	adiw	r30, 0x01	; 1
    aaf4:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    aaf6:	31 96       	adiw	r30, 0x01	; 1
    aaf8:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aafa:	31 96       	adiw	r30, 0x01	; 1
    aafc:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    aafe:	32 96       	adiw	r30, 0x02	; 2
    ab00:	92 e0       	ldi	r25, 0x02	; 2
    ab02:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    ab04:	76 96       	adiw	r30, 0x16	; 22
    ab06:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    ab08:	31 96       	adiw	r30, 0x01	; 1
    ab0a:	9a e0       	ldi	r25, 0x0A	; 10
    ab0c:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    ab0e:	d9 01       	movw	r26, r18
    ab10:	ad 5b       	subi	r26, 0xBD	; 189
    ab12:	be 4f       	sbci	r27, 0xFE	; 254
    ab14:	e3 ee       	ldi	r30, 0xE3	; 227
    ab16:	ff e0       	ldi	r31, 0x0F	; 15
    ab18:	ed 93       	st	X+, r30
    ab1a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    ab1c:	ab e5       	ldi	r26, 0x5B	; 91
    ab1e:	b0 e3       	ldi	r27, 0x30	; 48
    ab20:	b1 83       	std	Z+1, r27	; 0x01
    ab22:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    ab24:	a8 e5       	ldi	r26, 0x58	; 88
    ab26:	b0 e3       	ldi	r27, 0x30	; 48
    ab28:	b3 83       	std	Z+3, r27	; 0x03
    ab2a:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    ab2c:	f9 01       	movw	r30, r18
    ab2e:	e2 5e       	subi	r30, 0xE2	; 226
    ab30:	fe 4f       	sbci	r31, 0xFE	; 254
    ab32:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ab34:	31 97       	sbiw	r30, 0x01	; 1
    ab36:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ab38:	31 97       	sbiw	r30, 0x01	; 1
    ab3a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab3c:	34 97       	sbiw	r30, 0x04	; 4
    ab3e:	71 83       	std	Z+1, r23	; 0x01
    ab40:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab42:	32 96       	adiw	r30, 0x02	; 2
    ab44:	51 83       	std	Z+1, r21	; 0x01
    ab46:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ab48:	20 e0       	ldi	r18, 0x00	; 0
    ab4a:	0c 94 e7 54 	jmp	0xa9ce	; 0xa9ce <init_enemy_shot>

0000ab4e <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ab4e:	95 e3       	ldi	r25, 0x35	; 53
    ab50:	89 9f       	mul	r24, r25
    ab52:	90 01       	movw	r18, r0
    ab54:	11 24       	eor	r1, r1
    ab56:	29 54       	subi	r18, 0x49	; 73
    ab58:	32 4f       	sbci	r19, 0xF2	; 242
    ab5a:	f9 01       	movw	r30, r18
    ab5c:	e0 5e       	subi	r30, 0xE0	; 224
    ab5e:	fe 4f       	sbci	r31, 0xFE	; 254
    ab60:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ab62:	31 97       	sbiw	r30, 0x01	; 1
    ab64:	91 e0       	ldi	r25, 0x01	; 1
    ab66:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ab68:	32 96       	adiw	r30, 0x02	; 2
    ab6a:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ab6c:	31 96       	adiw	r30, 0x01	; 1
    ab6e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ab70:	31 96       	adiw	r30, 0x01	; 1
    ab72:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    ab74:	31 96       	adiw	r30, 0x01	; 1
    ab76:	a3 e0       	ldi	r26, 0x03	; 3
    ab78:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ab7a:	31 96       	adiw	r30, 0x01	; 1
    ab7c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ab7e:	31 96       	adiw	r30, 0x01	; 1
    ab80:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    ab82:	32 96       	adiw	r30, 0x02	; 2
    ab84:	a2 e0       	ldi	r26, 0x02	; 2
    ab86:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ab88:	76 96       	adiw	r30, 0x16	; 22
    ab8a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ab8c:	31 96       	adiw	r30, 0x01	; 1
    ab8e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ab90:	d9 01       	movw	r26, r18
    ab92:	ad 5b       	subi	r26, 0xBD	; 189
    ab94:	be 4f       	sbci	r27, 0xFE	; 254
    ab96:	e9 e3       	ldi	r30, 0x39	; 57
    ab98:	f0 e1       	ldi	r31, 0x10	; 16
    ab9a:	ed 93       	st	X+, r30
    ab9c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    ab9e:	a2 e5       	ldi	r26, 0x52	; 82
    aba0:	b0 e3       	ldi	r27, 0x30	; 48
    aba2:	b1 83       	std	Z+1, r27	; 0x01
    aba4:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aba6:	f9 01       	movw	r30, r18
    aba8:	e2 5e       	subi	r30, 0xE2	; 226
    abaa:	fe 4f       	sbci	r31, 0xFE	; 254
    abac:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    abae:	31 97       	sbiw	r30, 0x01	; 1
    abb0:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    abb2:	31 97       	sbiw	r30, 0x01	; 1
    abb4:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    abb6:	34 97       	sbiw	r30, 0x04	; 4
    abb8:	71 83       	std	Z+1, r23	; 0x01
    abba:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    abbc:	32 96       	adiw	r30, 0x02	; 2
    abbe:	51 83       	std	Z+1, r21	; 0x01
    abc0:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    abc2:	20 e0       	ldi	r18, 0x00	; 0
    abc4:	0c 94 e7 54 	jmp	0xa9ce	; 0xa9ce <init_enemy_shot>

0000abc8 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    abc8:	95 e3       	ldi	r25, 0x35	; 53
    abca:	89 9f       	mul	r24, r25
    abcc:	90 01       	movw	r18, r0
    abce:	11 24       	eor	r1, r1
    abd0:	29 54       	subi	r18, 0x49	; 73
    abd2:	32 4f       	sbci	r19, 0xF2	; 242
    abd4:	f9 01       	movw	r30, r18
    abd6:	e0 5e       	subi	r30, 0xE0	; 224
    abd8:	fe 4f       	sbci	r31, 0xFE	; 254
    abda:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    abdc:	31 97       	sbiw	r30, 0x01	; 1
    abde:	91 e0       	ldi	r25, 0x01	; 1
    abe0:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    abe2:	32 96       	adiw	r30, 0x02	; 2
    abe4:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    abe6:	31 96       	adiw	r30, 0x01	; 1
    abe8:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    abea:	31 96       	adiw	r30, 0x01	; 1
    abec:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    abee:	31 96       	adiw	r30, 0x01	; 1
    abf0:	a4 e0       	ldi	r26, 0x04	; 4
    abf2:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    abf4:	31 96       	adiw	r30, 0x01	; 1
    abf6:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    abf8:	31 96       	adiw	r30, 0x01	; 1
    abfa:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    abfc:	32 96       	adiw	r30, 0x02	; 2
    abfe:	a2 e0       	ldi	r26, 0x02	; 2
    ac00:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ac02:	76 96       	adiw	r30, 0x16	; 22
    ac04:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ac06:	31 96       	adiw	r30, 0x01	; 1
    ac08:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    ac0a:	d9 01       	movw	r26, r18
    ac0c:	ad 5b       	subi	r26, 0xBD	; 189
    ac0e:	be 4f       	sbci	r27, 0xFE	; 254
    ac10:	ed e4       	ldi	r30, 0x4D	; 77
    ac12:	f0 e1       	ldi	r31, 0x10	; 16
    ac14:	ed 93       	st	X+, r30
    ac16:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    ac18:	af e4       	ldi	r26, 0x4F	; 79
    ac1a:	b0 e3       	ldi	r27, 0x30	; 48
    ac1c:	b1 83       	std	Z+1, r27	; 0x01
    ac1e:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ac20:	f9 01       	movw	r30, r18
    ac22:	e2 5e       	subi	r30, 0xE2	; 226
    ac24:	fe 4f       	sbci	r31, 0xFE	; 254
    ac26:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    ac28:	31 97       	sbiw	r30, 0x01	; 1
    ac2a:	92 ee       	ldi	r25, 0xE2	; 226
    ac2c:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ac2e:	31 97       	sbiw	r30, 0x01	; 1
    ac30:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ac32:	34 97       	sbiw	r30, 0x04	; 4
    ac34:	71 83       	std	Z+1, r23	; 0x01
    ac36:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac38:	32 96       	adiw	r30, 0x02	; 2
    ac3a:	51 83       	std	Z+1, r21	; 0x01
    ac3c:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ac3e:	20 e0       	ldi	r18, 0x00	; 0
    ac40:	0c 94 e7 54 	jmp	0xa9ce	; 0xa9ce <init_enemy_shot>

0000ac44 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ac44:	95 e3       	ldi	r25, 0x35	; 53
    ac46:	89 9f       	mul	r24, r25
    ac48:	90 01       	movw	r18, r0
    ac4a:	11 24       	eor	r1, r1
    ac4c:	29 54       	subi	r18, 0x49	; 73
    ac4e:	32 4f       	sbci	r19, 0xF2	; 242
    ac50:	f9 01       	movw	r30, r18
    ac52:	e0 5e       	subi	r30, 0xE0	; 224
    ac54:	fe 4f       	sbci	r31, 0xFE	; 254
    ac56:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ac58:	31 97       	sbiw	r30, 0x01	; 1
    ac5a:	91 e0       	ldi	r25, 0x01	; 1
    ac5c:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ac5e:	33 96       	adiw	r30, 0x03	; 3
    ac60:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ac62:	31 96       	adiw	r30, 0x01	; 1
    ac64:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    ac66:	31 96       	adiw	r30, 0x01	; 1
    ac68:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    ac6a:	31 96       	adiw	r30, 0x01	; 1
    ac6c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ac6e:	31 96       	adiw	r30, 0x01	; 1
    ac70:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    ac72:	32 96       	adiw	r30, 0x02	; 2
    ac74:	a4 e0       	ldi	r26, 0x04	; 4
    ac76:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ac78:	76 96       	adiw	r30, 0x16	; 22
    ac7a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ac7c:	31 96       	adiw	r30, 0x01	; 1
    ac7e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    ac80:	d9 01       	movw	r26, r18
    ac82:	ad 5b       	subi	r26, 0xBD	; 189
    ac84:	be 4f       	sbci	r27, 0xFE	; 254
    ac86:	e7 ee       	ldi	r30, 0xE7	; 231
    ac88:	ff e0       	ldi	r31, 0x0F	; 15
    ac8a:	ed 93       	st	X+, r30
    ac8c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    ac8e:	a1 e6       	ldi	r26, 0x61	; 97
    ac90:	b0 e3       	ldi	r27, 0x30	; 48
    ac92:	b1 83       	std	Z+1, r27	; 0x01
    ac94:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ac96:	f9 01       	movw	r30, r18
    ac98:	e2 5e       	subi	r30, 0xE2	; 226
    ac9a:	fe 4f       	sbci	r31, 0xFE	; 254
    ac9c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    ac9e:	31 97       	sbiw	r30, 0x01	; 1
    aca0:	9e e1       	ldi	r25, 0x1E	; 30
    aca2:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    aca4:	31 97       	sbiw	r30, 0x01	; 1
    aca6:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aca8:	34 97       	sbiw	r30, 0x04	; 4
    acaa:	71 83       	std	Z+1, r23	; 0x01
    acac:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    acae:	32 96       	adiw	r30, 0x02	; 2
    acb0:	51 83       	std	Z+1, r21	; 0x01
    acb2:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    acb4:	20 e0       	ldi	r18, 0x00	; 0
    acb6:	0c 94 e7 54 	jmp	0xa9ce	; 0xa9ce <init_enemy_shot>

0000acba <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    acba:	95 e3       	ldi	r25, 0x35	; 53
    acbc:	89 9f       	mul	r24, r25
    acbe:	90 01       	movw	r18, r0
    acc0:	11 24       	eor	r1, r1
    acc2:	29 54       	subi	r18, 0x49	; 73
    acc4:	32 4f       	sbci	r19, 0xF2	; 242
    acc6:	f9 01       	movw	r30, r18
    acc8:	e0 5e       	subi	r30, 0xE0	; 224
    acca:	fe 4f       	sbci	r31, 0xFE	; 254
    accc:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    acce:	31 97       	sbiw	r30, 0x01	; 1
    acd0:	91 e0       	ldi	r25, 0x01	; 1
    acd2:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    acd4:	33 96       	adiw	r30, 0x03	; 3
    acd6:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    acd8:	31 96       	adiw	r30, 0x01	; 1
    acda:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    acdc:	31 96       	adiw	r30, 0x01	; 1
    acde:	a5 e0       	ldi	r26, 0x05	; 5
    ace0:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ace2:	31 96       	adiw	r30, 0x01	; 1
    ace4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ace6:	31 96       	adiw	r30, 0x01	; 1
    ace8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    acea:	32 96       	adiw	r30, 0x02	; 2
    acec:	a4 e0       	ldi	r26, 0x04	; 4
    acee:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    acf0:	76 96       	adiw	r30, 0x16	; 22
    acf2:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    acf4:	31 96       	adiw	r30, 0x01	; 1
    acf6:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    acf8:	d9 01       	movw	r26, r18
    acfa:	ad 5b       	subi	r26, 0xBD	; 189
    acfc:	be 4f       	sbci	r27, 0xFE	; 254
    acfe:	eb e4       	ldi	r30, 0x4B	; 75
    ad00:	f0 e1       	ldi	r31, 0x10	; 16
    ad02:	ed 93       	st	X+, r30
    ad04:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    ad06:	a5 e5       	ldi	r26, 0x55	; 85
    ad08:	b0 e3       	ldi	r27, 0x30	; 48
    ad0a:	b1 83       	std	Z+1, r27	; 0x01
    ad0c:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ad0e:	f9 01       	movw	r30, r18
    ad10:	e2 5e       	subi	r30, 0xE2	; 226
    ad12:	fe 4f       	sbci	r31, 0xFE	; 254
    ad14:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    ad16:	31 97       	sbiw	r30, 0x01	; 1
    ad18:	9a e0       	ldi	r25, 0x0A	; 10
    ad1a:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ad1c:	31 97       	sbiw	r30, 0x01	; 1
    ad1e:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ad20:	34 97       	sbiw	r30, 0x04	; 4
    ad22:	71 83       	std	Z+1, r23	; 0x01
    ad24:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad26:	32 96       	adiw	r30, 0x02	; 2
    ad28:	51 83       	std	Z+1, r21	; 0x01
    ad2a:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ad2c:	20 e0       	ldi	r18, 0x00	; 0
    ad2e:	0c 94 e7 54 	jmp	0xa9ce	; 0xa9ce <init_enemy_shot>

0000ad32 <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ad32:	95 e3       	ldi	r25, 0x35	; 53
    ad34:	89 9f       	mul	r24, r25
    ad36:	90 01       	movw	r18, r0
    ad38:	11 24       	eor	r1, r1
    ad3a:	29 54       	subi	r18, 0x49	; 73
    ad3c:	32 4f       	sbci	r19, 0xF2	; 242
    ad3e:	f9 01       	movw	r30, r18
    ad40:	e0 5e       	subi	r30, 0xE0	; 224
    ad42:	fe 4f       	sbci	r31, 0xFE	; 254
    ad44:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ad46:	31 97       	sbiw	r30, 0x01	; 1
    ad48:	91 e0       	ldi	r25, 0x01	; 1
    ad4a:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ad4c:	33 96       	adiw	r30, 0x03	; 3
    ad4e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ad50:	31 96       	adiw	r30, 0x01	; 1
    ad52:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    ad54:	31 96       	adiw	r30, 0x01	; 1
    ad56:	a8 e0       	ldi	r26, 0x08	; 8
    ad58:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ad5a:	31 96       	adiw	r30, 0x01	; 1
    ad5c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ad5e:	31 96       	adiw	r30, 0x01	; 1
    ad60:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    ad62:	32 96       	adiw	r30, 0x02	; 2
    ad64:	a4 e0       	ldi	r26, 0x04	; 4
    ad66:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ad68:	76 96       	adiw	r30, 0x16	; 22
    ad6a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ad6c:	31 96       	adiw	r30, 0x01	; 1
    ad6e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    ad70:	d9 01       	movw	r26, r18
    ad72:	ad 5b       	subi	r26, 0xBD	; 189
    ad74:	be 4f       	sbci	r27, 0xFE	; 254
    ad76:	ed e5       	ldi	r30, 0x5D	; 93
    ad78:	f0 e1       	ldi	r31, 0x10	; 16
    ad7a:	ed 93       	st	X+, r30
    ad7c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    ad7e:	ae e5       	ldi	r26, 0x5E	; 94
    ad80:	b0 e3       	ldi	r27, 0x30	; 48
    ad82:	b1 83       	std	Z+1, r27	; 0x01
    ad84:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ad86:	f9 01       	movw	r30, r18
    ad88:	e2 5e       	subi	r30, 0xE2	; 226
    ad8a:	fe 4f       	sbci	r31, 0xFE	; 254
    ad8c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    ad8e:	31 97       	sbiw	r30, 0x01	; 1
    ad90:	94 e1       	ldi	r25, 0x14	; 20
    ad92:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    ad94:	31 97       	sbiw	r30, 0x01	; 1
    ad96:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    ad98:	34 97       	sbiw	r30, 0x04	; 4
    ad9a:	71 83       	std	Z+1, r23	; 0x01
    ad9c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad9e:	32 96       	adiw	r30, 0x02	; 2
    ada0:	51 83       	std	Z+1, r21	; 0x01
    ada2:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ada4:	20 e0       	ldi	r18, 0x00	; 0
    ada6:	0c 94 e7 54 	jmp	0xa9ce	; 0xa9ce <init_enemy_shot>

0000adaa <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    adaa:	95 e3       	ldi	r25, 0x35	; 53
    adac:	89 9f       	mul	r24, r25
    adae:	90 01       	movw	r18, r0
    adb0:	11 24       	eor	r1, r1
    adb2:	29 54       	subi	r18, 0x49	; 73
    adb4:	32 4f       	sbci	r19, 0xF2	; 242
    adb6:	f9 01       	movw	r30, r18
    adb8:	e0 5e       	subi	r30, 0xE0	; 224
    adba:	fe 4f       	sbci	r31, 0xFE	; 254
    adbc:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    adbe:	31 97       	sbiw	r30, 0x01	; 1
    adc0:	91 e0       	ldi	r25, 0x01	; 1
    adc2:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    adc4:	32 96       	adiw	r30, 0x02	; 2
    adc6:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    adc8:	31 96       	adiw	r30, 0x01	; 1
    adca:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    adcc:	31 96       	adiw	r30, 0x01	; 1
    adce:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    add0:	31 96       	adiw	r30, 0x01	; 1
    add2:	a6 e0       	ldi	r26, 0x06	; 6
    add4:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    add6:	31 96       	adiw	r30, 0x01	; 1
    add8:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    adda:	31 96       	adiw	r30, 0x01	; 1
    addc:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    adde:	32 96       	adiw	r30, 0x02	; 2
    ade0:	a8 e0       	ldi	r26, 0x08	; 8
    ade2:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ade4:	76 96       	adiw	r30, 0x16	; 22
    ade6:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ade8:	31 96       	adiw	r30, 0x01	; 1
    adea:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    adec:	d9 01       	movw	r26, r18
    adee:	ad 5b       	subi	r26, 0xBD	; 189
    adf0:	be 4f       	sbci	r27, 0xFE	; 254
    adf2:	e9 e3       	ldi	r30, 0x39	; 57
    adf4:	f0 e1       	ldi	r31, 0x10	; 16
    adf6:	ed 93       	st	X+, r30
    adf8:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    adfa:	ac e4       	ldi	r26, 0x4C	; 76
    adfc:	b0 e3       	ldi	r27, 0x30	; 48
    adfe:	b1 83       	std	Z+1, r27	; 0x01
    ae00:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ae02:	f9 01       	movw	r30, r18
    ae04:	e2 5e       	subi	r30, 0xE2	; 226
    ae06:	fe 4f       	sbci	r31, 0xFE	; 254
    ae08:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ae0a:	31 97       	sbiw	r30, 0x01	; 1
    ae0c:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ae0e:	31 97       	sbiw	r30, 0x01	; 1
    ae10:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ae12:	34 97       	sbiw	r30, 0x04	; 4
    ae14:	71 83       	std	Z+1, r23	; 0x01
    ae16:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ae18:	32 96       	adiw	r30, 0x02	; 2
    ae1a:	51 83       	std	Z+1, r21	; 0x01
    ae1c:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    ae1e:	21 e0       	ldi	r18, 0x01	; 1
    ae20:	0c 94 e7 54 	jmp	0xa9ce	; 0xa9ce <init_enemy_shot>

0000ae24 <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    ae24:	cf 93       	push	r28
    ae26:	df 93       	push	r29
    ae28:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    ae2a:	95 e3       	ldi	r25, 0x35	; 53
    ae2c:	89 9f       	mul	r24, r25
    ae2e:	90 01       	movw	r18, r0
    ae30:	11 24       	eor	r1, r1
    ae32:	29 54       	subi	r18, 0x49	; 73
    ae34:	32 4f       	sbci	r19, 0xF2	; 242
    ae36:	f9 01       	movw	r30, r18
    ae38:	e0 5e       	subi	r30, 0xE0	; 224
    ae3a:	fe 4f       	sbci	r31, 0xFE	; 254
    ae3c:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ae3e:	31 97       	sbiw	r30, 0x01	; 1
    ae40:	91 e0       	ldi	r25, 0x01	; 1
    ae42:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ae44:	32 96       	adiw	r30, 0x02	; 2
    ae46:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ae48:	31 96       	adiw	r30, 0x01	; 1
    ae4a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ae4c:	31 96       	adiw	r30, 0x01	; 1
    ae4e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    ae50:	31 96       	adiw	r30, 0x01	; 1
    ae52:	47 e0       	ldi	r20, 0x07	; 7
    ae54:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    ae56:	31 96       	adiw	r30, 0x01	; 1
    ae58:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ae5a:	31 96       	adiw	r30, 0x01	; 1
    ae5c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    ae5e:	32 96       	adiw	r30, 0x02	; 2
    ae60:	48 e0       	ldi	r20, 0x08	; 8
    ae62:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    ae64:	76 96       	adiw	r30, 0x16	; 22
    ae66:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ae68:	31 96       	adiw	r30, 0x01	; 1
    ae6a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ae6c:	d9 01       	movw	r26, r18
    ae6e:	ad 5b       	subi	r26, 0xBD	; 189
    ae70:	be 4f       	sbci	r27, 0xFE	; 254
    ae72:	e9 e3       	ldi	r30, 0x39	; 57
    ae74:	f0 e1       	ldi	r31, 0x10	; 16
    ae76:	ed 93       	st	X+, r30
    ae78:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    ae7a:	49 e4       	ldi	r20, 0x49	; 73
    ae7c:	50 e3       	ldi	r21, 0x30	; 48
    ae7e:	51 83       	std	Z+1, r21	; 0x01
    ae80:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    ae82:	f9 01       	movw	r30, r18
    ae84:	e2 5e       	subi	r30, 0xE2	; 226
    ae86:	fe 4f       	sbci	r31, 0xFE	; 254
    ae88:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ae8a:	31 97       	sbiw	r30, 0x01	; 1
    ae8c:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ae8e:	31 97       	sbiw	r30, 0x01	; 1
    ae90:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ae92:	34 97       	sbiw	r30, 0x04	; 4
    ae94:	71 83       	std	Z+1, r23	; 0x01
    ae96:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ae98:	32 96       	adiw	r30, 0x02	; 2
    ae9a:	d1 83       	std	Z+1, r29	; 0x01
    ae9c:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    ae9e:	21 e0       	ldi	r18, 0x01	; 1
    aea0:	ae 01       	movw	r20, r28
    aea2:	0e 94 e7 54 	call	0xa9ce	; 0xa9ce <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    aea6:	be 01       	movw	r22, r28
    aea8:	83 e0       	ldi	r24, 0x03	; 3
    aeaa:	76 95       	lsr	r23
    aeac:	67 95       	ror	r22
    aeae:	8a 95       	dec	r24
    aeb0:	e1 f7       	brne	.-8      	; 0xaeaa <init_enemy_boss_eye+0x86>
    aeb2:	90 91 d5 0d 	lds	r25, 0x0DD5
    aeb6:	40 e0       	ldi	r20, 0x00	; 0
    aeb8:	50 e0       	ldi	r21, 0x00	; 0
    aeba:	80 e2       	ldi	r24, 0x20	; 32
    aebc:	89 1b       	sub	r24, r25
}
    aebe:	df 91       	pop	r29
    aec0:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    aec2:	0c 94 12 3e 	jmp	0x7c24	; 0x7c24 <SetTile>

0000aec6 <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    aec6:	40 e2       	ldi	r20, 0x20	; 32
    aec8:	50 e0       	ldi	r21, 0x00	; 0
    aeca:	68 ec       	ldi	r22, 0xC8	; 200
    aecc:	77 e0       	ldi	r23, 0x07	; 7
    aece:	80 e0       	ldi	r24, 0x00	; 0
    aed0:	0e 94 d5 56 	call	0xadaa	; 0xadaa <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    aed4:	40 e3       	ldi	r20, 0x30	; 48
    aed6:	50 e0       	ldi	r21, 0x00	; 0
    aed8:	68 ec       	ldi	r22, 0xC8	; 200
    aeda:	77 e0       	ldi	r23, 0x07	; 7
    aedc:	81 e0       	ldi	r24, 0x01	; 1
    aede:	0e 94 d5 56 	call	0xadaa	; 0xadaa <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    aee2:	40 e9       	ldi	r20, 0x90	; 144
    aee4:	50 e0       	ldi	r21, 0x00	; 0
    aee6:	68 ec       	ldi	r22, 0xC8	; 200
    aee8:	77 e0       	ldi	r23, 0x07	; 7
    aeea:	82 e0       	ldi	r24, 0x02	; 2
    aeec:	0e 94 d5 56 	call	0xadaa	; 0xadaa <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    aef0:	40 ea       	ldi	r20, 0xA0	; 160
    aef2:	50 e0       	ldi	r21, 0x00	; 0
    aef4:	68 ec       	ldi	r22, 0xC8	; 200
    aef6:	77 e0       	ldi	r23, 0x07	; 7
    aef8:	83 e0       	ldi	r24, 0x03	; 3
    aefa:	0e 94 d5 56 	call	0xadaa	; 0xadaa <init_enemy_boss_turret>
	game.active_enemies = 4;
    aefe:	84 e0       	ldi	r24, 0x04	; 4
    af00:	80 93 d2 0d 	sts	0x0DD2, r24
    af04:	08 95       	ret

0000af06 <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    af06:	ef 92       	push	r14
    af08:	ff 92       	push	r15
    af0a:	0f 93       	push	r16
    af0c:	1f 93       	push	r17
    af0e:	cf 93       	push	r28
    af10:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    af12:	07 eb       	ldi	r16, 0xB7	; 183
    af14:	1d e0       	ldi	r17, 0x0D	; 13
    af16:	f8 01       	movw	r30, r16
    af18:	86 8d       	ldd	r24, Z+30	; 0x1e
    af1a:	c0 e0       	ldi	r28, 0x00	; 0
    af1c:	d1 e0       	ldi	r29, 0x01	; 1
    af1e:	9e 01       	movw	r18, r28
    af20:	28 1b       	sub	r18, r24
    af22:	31 09       	sbc	r19, r1
    af24:	83 e0       	ldi	r24, 0x03	; 3
    af26:	22 0f       	add	r18, r18
    af28:	33 1f       	adc	r19, r19
    af2a:	8a 95       	dec	r24
    af2c:	e1 f7       	brne	.-8      	; 0xaf26 <init_enemy_boss_eyes+0x20>
    af2e:	80 91 fa 0c 	lds	r24, 0x0CFA
    af32:	65 e0       	ldi	r22, 0x05	; 5
    af34:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    af38:	89 2f       	mov	r24, r25
    af3a:	48 e5       	ldi	r20, 0x58	; 88
    af3c:	50 e0       	ldi	r21, 0x00	; 0
    af3e:	b9 01       	movw	r22, r18
    af40:	0e 94 12 57 	call	0xae24	; 0xae24 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    af44:	f8 01       	movw	r30, r16
    af46:	86 8d       	ldd	r24, Z+30	; 0x1e
    af48:	9e 01       	movw	r18, r28
    af4a:	28 1b       	sub	r18, r24
    af4c:	31 09       	sbc	r19, r1
    af4e:	93 e0       	ldi	r25, 0x03	; 3
    af50:	22 0f       	add	r18, r18
    af52:	33 1f       	adc	r19, r19
    af54:	9a 95       	dec	r25
    af56:	e1 f7       	brne	.-8      	; 0xaf50 <init_enemy_boss_eyes+0x4a>
    af58:	80 91 fa 0c 	lds	r24, 0x0CFA
    af5c:	90 e0       	ldi	r25, 0x00	; 0
    af5e:	01 96       	adiw	r24, 0x01	; 1
    af60:	45 e0       	ldi	r20, 0x05	; 5
    af62:	e4 2e       	mov	r14, r20
    af64:	f1 2c       	mov	r15, r1
    af66:	b7 01       	movw	r22, r14
    af68:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    af6c:	40 e6       	ldi	r20, 0x60	; 96
    af6e:	50 e0       	ldi	r21, 0x00	; 0
    af70:	b9 01       	movw	r22, r18
    af72:	0e 94 12 57 	call	0xae24	; 0xae24 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    af76:	f8 01       	movw	r30, r16
    af78:	86 8d       	ldd	r24, Z+30	; 0x1e
    af7a:	c8 1b       	sub	r28, r24
    af7c:	d1 09       	sbc	r29, r1
    af7e:	53 e0       	ldi	r21, 0x03	; 3
    af80:	cc 0f       	add	r28, r28
    af82:	dd 1f       	adc	r29, r29
    af84:	5a 95       	dec	r21
    af86:	e1 f7       	brne	.-8      	; 0xaf80 <init_enemy_boss_eyes+0x7a>
    af88:	80 91 fa 0c 	lds	r24, 0x0CFA
    af8c:	90 e0       	ldi	r25, 0x00	; 0
    af8e:	02 96       	adiw	r24, 0x02	; 2
    af90:	b7 01       	movw	r22, r14
    af92:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    af96:	48 e6       	ldi	r20, 0x68	; 104
    af98:	50 e0       	ldi	r21, 0x00	; 0
    af9a:	be 01       	movw	r22, r28
    af9c:	0e 94 12 57 	call	0xae24	; 0xae24 <init_enemy_boss_eye>
	game.active_enemies = 3;
    afa0:	83 e0       	ldi	r24, 0x03	; 3
    afa2:	f8 01       	movw	r30, r16
    afa4:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    afa6:	80 91 fa 0c 	lds	r24, 0x0CFA
    afaa:	8d 5f       	subi	r24, 0xFD	; 253
    afac:	80 93 fa 0c 	sts	0x0CFA, r24
}
    afb0:	df 91       	pop	r29
    afb2:	cf 91       	pop	r28
    afb4:	1f 91       	pop	r17
    afb6:	0f 91       	pop	r16
    afb8:	ff 90       	pop	r15
    afba:	ef 90       	pop	r14
    afbc:	08 95       	ret

0000afbe <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    afbe:	a8 2f       	mov	r26, r24
    afc0:	b0 e0       	ldi	r27, 0x00	; 0
    afc2:	25 e3       	ldi	r18, 0x35	; 53
    afc4:	82 9f       	mul	r24, r18
    afc6:	c0 01       	movw	r24, r0
    afc8:	11 24       	eor	r1, r1
    afca:	89 54       	subi	r24, 0x49	; 73
    afcc:	92 4f       	sbci	r25, 0xF2	; 242
    afce:	fc 01       	movw	r30, r24
    afd0:	e1 5e       	subi	r30, 0xE1	; 225
    afd2:	fe 4f       	sbci	r31, 0xFE	; 254
    afd4:	21 e0       	ldi	r18, 0x01	; 1
    afd6:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    afd8:	33 96       	adiw	r30, 0x03	; 3
    afda:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    afdc:	31 96       	adiw	r30, 0x01	; 1
    afde:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    afe0:	31 96       	adiw	r30, 0x01	; 1
    afe2:	32 e0       	ldi	r19, 0x02	; 2
    afe4:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    afe6:	31 96       	adiw	r30, 0x01	; 1
    afe8:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    afea:	31 96       	adiw	r30, 0x01	; 1
    afec:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    afee:	78 96       	adiw	r30, 0x18	; 24
    aff0:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    aff2:	31 96       	adiw	r30, 0x01	; 1
    aff4:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    aff6:	34 96       	adiw	r30, 0x04	; 4
    aff8:	8f e5       	ldi	r24, 0x5F	; 95
    affa:	90 e1       	ldi	r25, 0x10	; 16
    affc:	91 83       	std	Z+1, r25	; 0x01
    affe:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b000:	80 91 cc 0d 	lds	r24, 0x0DCC
    b004:	84 30       	cpi	r24, 0x04	; 4
    b006:	79 f0       	breq	.+30     	; 0xb026 <init_enemy_level_hazard+0x68>
    b008:	38 f4       	brcc	.+14     	; 0xb018 <init_enemy_level_hazard+0x5a>
    b00a:	88 23       	and	r24, r24
    b00c:	91 f0       	breq	.+36     	; 0xb032 <init_enemy_level_hazard+0x74>
    b00e:	82 30       	cpi	r24, 0x02	; 2
    b010:	81 f4       	brne	.+32     	; 0xb032 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b012:	80 e4       	ldi	r24, 0x40	; 64
    b014:	90 e3       	ldi	r25, 0x30	; 48
    b016:	0f c0       	rjmp	.+30     	; 0xb036 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b018:	86 30       	cpi	r24, 0x06	; 6
    b01a:	41 f0       	breq	.+16     	; 0xb02c <init_enemy_level_hazard+0x6e>
    b01c:	88 30       	cpi	r24, 0x08	; 8
    b01e:	49 f4       	brne	.+18     	; 0xb032 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b020:	87 e3       	ldi	r24, 0x37	; 55
    b022:	90 e3       	ldi	r25, 0x30	; 48
    b024:	08 c0       	rjmp	.+16     	; 0xb036 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b026:	8d e3       	ldi	r24, 0x3D	; 61
    b028:	90 e3       	ldi	r25, 0x30	; 48
    b02a:	05 c0       	rjmp	.+10     	; 0xb036 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b02c:	8a e3       	ldi	r24, 0x3A	; 58
    b02e:	90 e3       	ldi	r25, 0x30	; 48
    b030:	02 c0       	rjmp	.+4      	; 0xb036 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b032:	83 e4       	ldi	r24, 0x43	; 67
    b034:	90 e3       	ldi	r25, 0x30	; 48
    b036:	90 93 60 10 	sts	0x1060, r25
    b03a:	80 93 5f 10 	sts	0x105F, r24
	}
	game.enemies[i].shared.gravity = 0;
    b03e:	25 e3       	ldi	r18, 0x35	; 53
    b040:	2a 9f       	mul	r18, r26
    b042:	c0 01       	movw	r24, r0
    b044:	2b 9f       	mul	r18, r27
    b046:	90 0d       	add	r25, r0
    b048:	11 24       	eor	r1, r1
    b04a:	89 54       	subi	r24, 0x49	; 73
    b04c:	92 4f       	sbci	r25, 0xF2	; 242
    b04e:	fc 01       	movw	r30, r24
    b050:	e2 5e       	subi	r30, 0xE2	; 226
    b052:	fe 4f       	sbci	r31, 0xFE	; 254
    b054:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b056:	32 97       	sbiw	r30, 0x02	; 2
    b058:	2e e1       	ldi	r18, 0x1E	; 30
    b05a:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b05c:	31 96       	adiw	r30, 0x01	; 1
    b05e:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b060:	35 97       	sbiw	r30, 0x05	; 5
    b062:	71 83       	std	Z+1, r23	; 0x01
    b064:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b066:	32 96       	adiw	r30, 0x02	; 2
    b068:	51 83       	std	Z+1, r21	; 0x01
    b06a:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b06c:	3d 96       	adiw	r30, 0x0d	; 13
    b06e:	83 e0       	ldi	r24, 0x03	; 3
    b070:	56 95       	lsr	r21
    b072:	47 95       	ror	r20
    b074:	8a 95       	dec	r24
    b076:	e1 f7       	brne	.-8      	; 0xb070 <init_enemy_level_hazard+0xb2>
    b078:	40 83       	st	Z, r20
    b07a:	08 95       	ret

0000b07c <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b07c:	cf 93       	push	r28
    b07e:	df 93       	push	r29
    b080:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b082:	bc 01       	movw	r22, r24
    b084:	88 81       	ld	r24, Y
    b086:	99 81       	ldd	r25, Y+1	; 0x01
    b088:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <EepromReadBlock>
	if (status == 0x03)
    b08c:	83 30       	cpi	r24, 0x03	; 3
    b08e:	29 f4       	brne	.+10     	; 0xb09a <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b090:	ce 01       	movw	r24, r28
	}
}
    b092:	df 91       	pop	r29
    b094:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b096:	0c 94 7d 3f 	jmp	0x7efa	; 0x7efa <EepromWriteBlock>
	}
}
    b09a:	df 91       	pop	r29
    b09c:	cf 91       	pop	r28
    b09e:	08 95       	ret

0000b0a0 <read_dip_switches>:
{
	return (game.current_level_index % 2 != 0);
}

#if JAMMA
void read_dip_switches() {
    b0a0:	cf 93       	push	r28
    b0a2:	df 93       	push	r29
    scores.id = EEPROM_DIP_SWITCH_ID;
    b0a4:	c6 e9       	ldi	r28, 0x96	; 150
    b0a6:	dd e0       	ldi	r29, 0x0D	; 13
    b0a8:	8c e0       	ldi	r24, 0x0C	; 12
    b0aa:	9b ea       	ldi	r25, 0xAB	; 171
    b0ac:	99 83       	std	Y+1, r25	; 0x01
    b0ae:	88 83       	st	Y, r24
    load_eeprom(&scores);
    b0b0:	ce 01       	movw	r24, r28
    b0b2:	0e 94 3e 58 	call	0xb07c	; 0xb07c <load_eeprom>
    extract_dip_switches(scores.data[0]);
    b0b6:	8a 81       	ldd	r24, Y+2	; 0x02
} 
    b0b8:	df 91       	pop	r29
    b0ba:	cf 91       	pop	r28

#if JAMMA
void read_dip_switches() {
    scores.id = EEPROM_DIP_SWITCH_ID;
    load_eeprom(&scores);
    extract_dip_switches(scores.data[0]);
    b0bc:	0c 94 9b 4c 	jmp	0x9936	; 0x9936 <extract_dip_switches>

0000b0c0 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b0c0:	1f 93       	push	r17
    b0c2:	cf 93       	push	r28
    b0c4:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b0c6:	d0 e0       	ldi	r29, 0x00	; 0
    b0c8:	10 e2       	ldi	r17, 0x20	; 32
    b0ca:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b0cc:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b0ce:	c1 17       	cp	r28, r17
    b0d0:	41 f0       	breq	.+16     	; 0xb0e2 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b0d2:	40 e0       	ldi	r20, 0x00	; 0
    b0d4:	50 e0       	ldi	r21, 0x00	; 0
    b0d6:	6c 2f       	mov	r22, r28
    b0d8:	8d 2f       	mov	r24, r29
    b0da:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <SetTile>
    b0de:	cf 5f       	subi	r28, 0xFF	; 255
    b0e0:	f6 cf       	rjmp	.-20     	; 0xb0ce <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b0e2:	df 5f       	subi	r29, 0xFF	; 255
    b0e4:	dc 31       	cpi	r29, 0x1C	; 28
    b0e6:	91 f7       	brne	.-28     	; 0xb0cc <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b0e8:	df 91       	pop	r29
    b0ea:	cf 91       	pop	r28
    b0ec:	1f 91       	pop	r17
    b0ee:	08 95       	ret

0000b0f0 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b0f0:	dc 01       	movw	r26, r24
    b0f2:	e6 2f       	mov	r30, r22
    b0f4:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b0f6:	25 e0       	ldi	r18, 0x05	; 5
    b0f8:	62 2f       	mov	r22, r18
    b0fa:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    b0fe:	58 2f       	mov	r21, r24
    b100:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b102:	40 91 cd 0d 	lds	r20, 0x0DCD
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b106:	8e 2f       	mov	r24, r30
    b108:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b10c:	e8 2f       	mov	r30, r24
    b10e:	f0 e0       	ldi	r31, 0x00	; 0
    b110:	54 9f       	mul	r21, r20
    b112:	e0 0d       	add	r30, r0
    b114:	f1 1d       	adc	r31, r1
    b116:	11 24       	eor	r1, r1
    b118:	32 96       	adiw	r30, 0x02	; 2
    b11a:	ea 0f       	add	r30, r26
    b11c:	fb 1f       	adc	r31, r27
    b11e:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b120:	e9 2f       	mov	r30, r25
    b122:	f0 e0       	ldi	r31, 0x00	; 0
    b124:	95 e0       	ldi	r25, 0x05	; 5
    b126:	39 9f       	mul	r19, r25
    b128:	e0 0d       	add	r30, r0
    b12a:	f1 1d       	adc	r31, r1
    b12c:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b12e:	99 e1       	ldi	r25, 0x19	; 25
    b130:	89 9f       	mul	r24, r25
    b132:	e0 0d       	add	r30, r0
    b134:	f1 1d       	adc	r31, r1
    b136:	11 24       	eor	r1, r1
    b138:	eb 57       	subi	r30, 0x7B	; 123
    b13a:	f5 4a       	sbci	r31, 0xA5	; 165
    b13c:	84 91       	lpm	r24, Z
}
    b13e:	08 95       	ret

0000b140 <render_camera_view>:

void render_camera_view()
{
    b140:	7f 92       	push	r7
    b142:	8f 92       	push	r8
    b144:	9f 92       	push	r9
    b146:	af 92       	push	r10
    b148:	bf 92       	push	r11
    b14a:	cf 92       	push	r12
    b14c:	df 92       	push	r13
    b14e:	ef 92       	push	r14
    b150:	ff 92       	push	r15
    b152:	0f 93       	push	r16
    b154:	1f 93       	push	r17
    b156:	cf 93       	push	r28
    b158:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b15a:	c0 91 b7 0d 	lds	r28, 0x0DB7
    b15e:	d0 91 b8 0d 	lds	r29, 0x0DB8
    b162:	83 e0       	ldi	r24, 0x03	; 3
    b164:	d6 95       	lsr	r29
    b166:	c7 95       	ror	r28
    b168:	8a 95       	dec	r24
    b16a:	e1 f7       	brne	.-8      	; 0xb164 <render_camera_view+0x24>
    b16c:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b16e:	00 91 bf 0d 	lds	r16, 0x0DBF
    b172:	06 95       	lsr	r16
    b174:	06 95       	lsr	r16
    b176:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b178:	dd 27       	eor	r29, r29
    b17a:	7e 01       	movw	r14, r28
    b17c:	4c e1       	ldi	r20, 0x1C	; 28
    b17e:	e4 0e       	add	r14, r20
    b180:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b182:	10 e0       	ldi	r17, 0x00	; 0
    b184:	68 01       	movw	r12, r16
    b186:	89 e1       	ldi	r24, 0x19	; 25
    b188:	c8 0e       	add	r12, r24
    b18a:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b18c:	9e e1       	ldi	r25, 0x1E	; 30
    b18e:	a9 2e       	mov	r10, r25
    b190:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b192:	ec 16       	cp	r14, r28
    b194:	fd 06       	cpc	r15, r29
    b196:	70 f1       	brcs	.+92     	; 0xb1f4 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b198:	48 01       	movw	r8, r16
    b19a:	c8 14       	cp	r12, r8
    b19c:	d9 04       	cpc	r13, r9
    b19e:	40 f1       	brcs	.+80     	; 0xb1f0 <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b1a0:	48 2d       	mov	r20, r8
    b1a2:	6c 2f       	mov	r22, r28
    b1a4:	80 91 d8 0f 	lds	r24, 0x0FD8
    b1a8:	90 91 d9 0f 	lds	r25, 0x0FD9
    b1ac:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b1b0:	28 2f       	mov	r18, r24
    b1b2:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b1b4:	80 91 b6 0c 	lds	r24, 0x0CB6
    b1b8:	86 95       	lsr	r24
    b1ba:	86 95       	lsr	r24
    b1bc:	86 95       	lsr	r24
    b1be:	90 e0       	ldi	r25, 0x00	; 0
    b1c0:	80 1b       	sub	r24, r16
    b1c2:	91 0b       	sbc	r25, r17
    b1c4:	88 0d       	add	r24, r8
    b1c6:	99 1d       	adc	r25, r9
    b1c8:	b5 01       	movw	r22, r10
    b1ca:	0e 94 ec 73 	call	0xe7d8	; 0xe7d8 <__udivmodhi4>
    b1ce:	90 91 b5 0c 	lds	r25, 0x0CB5
    b1d2:	96 95       	lsr	r25
    b1d4:	96 95       	lsr	r25
    b1d6:	96 95       	lsr	r25
    b1d8:	97 19       	sub	r25, r7
    b1da:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b1dc:	a9 01       	movw	r20, r18
    b1de:	68 2f       	mov	r22, r24
    b1e0:	89 2f       	mov	r24, r25
    b1e2:	8f 71       	andi	r24, 0x1F	; 31
    b1e4:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b1e8:	8f ef       	ldi	r24, 0xFF	; 255
    b1ea:	88 1a       	sub	r8, r24
    b1ec:	98 0a       	sbc	r9, r24
    b1ee:	d5 cf       	rjmp	.-86     	; 0xb19a <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b1f0:	21 96       	adiw	r28, 0x01	; 1
    b1f2:	cf cf       	rjmp	.-98     	; 0xb192 <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b1f4:	df 91       	pop	r29
    b1f6:	cf 91       	pop	r28
    b1f8:	1f 91       	pop	r17
    b1fa:	0f 91       	pop	r16
    b1fc:	ff 90       	pop	r15
    b1fe:	ef 90       	pop	r14
    b200:	df 90       	pop	r13
    b202:	cf 90       	pop	r12
    b204:	bf 90       	pop	r11
    b206:	af 90       	pop	r10
    b208:	9f 90       	pop	r9
    b20a:	8f 90       	pop	r8
    b20c:	7f 90       	pop	r7
    b20e:	08 95       	ret

0000b210 <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b210:	28 2f       	mov	r18, r24
    b212:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b214:	80 91 cc 0d 	lds	r24, 0x0DCC
    b218:	81 11       	cpse	r24, r1
    b21a:	04 c0       	rjmp	.+8      	; 0xb224 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b21c:	bf 01       	movw	r22, r30
    b21e:	82 2f       	mov	r24, r18
    b220:	0c 94 a7 55 	jmp	0xab4e	; 0xab4e <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b224:	82 30       	cpi	r24, 0x02	; 2
    b226:	21 f4       	brne	.+8      	; 0xb230 <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b228:	bf 01       	movw	r22, r30
    b22a:	82 2f       	mov	r24, r18
    b22c:	0c 94 65 55 	jmp	0xaaca	; 0xaaca <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b230:	84 30       	cpi	r24, 0x04	; 4
    b232:	31 f4       	brne	.+12     	; 0xb240 <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b234:	48 52       	subi	r20, 0x28	; 40
    b236:	51 09       	sbc	r21, r1
    b238:	bf 01       	movw	r22, r30
    b23a:	82 2f       	mov	r24, r18
    b23c:	0c 94 e4 55 	jmp	0xabc8	; 0xabc8 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b240:	80 91 d1 0d 	lds	r24, 0x0DD1
    b244:	63 e0       	ldi	r22, 0x03	; 3
    b246:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    b24a:	99 23       	and	r25, r25
    b24c:	39 f3       	breq	.-50     	; 0xb21c <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b24e:	91 30       	cpi	r25, 0x01	; 1
    b250:	89 f7       	brne	.-30     	; 0xb234 <init_level_enemy+0x24>
    b252:	ea cf       	rjmp	.-44     	; 0xb228 <init_level_enemy+0x18>

0000b254 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b254:	28 2f       	mov	r18, r24
    b256:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b258:	80 91 cc 0d 	lds	r24, 0x0DCC
    b25c:	81 30       	cpi	r24, 0x01	; 1
    b25e:	21 f4       	brne	.+8      	; 0xb268 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b260:	bf 01       	movw	r22, r30
    b262:	82 2f       	mov	r24, r18
    b264:	0c 94 22 56 	jmp	0xac44	; 0xac44 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b268:	83 30       	cpi	r24, 0x03	; 3
    b26a:	21 f4       	brne	.+8      	; 0xb274 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b26c:	bf 01       	movw	r22, r30
    b26e:	82 2f       	mov	r24, r18
    b270:	0c 94 5d 56 	jmp	0xacba	; 0xacba <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    b274:	85 30       	cpi	r24, 0x05	; 5
    b276:	21 f4       	brne	.+8      	; 0xb280 <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    b278:	bf 01       	movw	r22, r30
    b27a:	82 2f       	mov	r24, r18
    b27c:	0c 94 99 56 	jmp	0xad32	; 0xad32 <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    b280:	80 91 d1 0d 	lds	r24, 0x0DD1
    b284:	63 e0       	ldi	r22, 0x03	; 3
    b286:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    b28a:	99 23       	and	r25, r25
    b28c:	49 f3       	breq	.-46     	; 0xb260 <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b28e:	91 30       	cpi	r25, 0x01	; 1
    b290:	99 f7       	brne	.-26     	; 0xb278 <init_space_enemy+0x24>
    b292:	ec cf       	rjmp	.-40     	; 0xb26c <init_space_enemy+0x18>

0000b294 <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b294:	0f 93       	push	r16
    b296:	1f 93       	push	r17
    b298:	cf 93       	push	r28
    b29a:	df 93       	push	r29
    b29c:	00 d0       	rcall	.+0      	; 0xb29e <spawn_enemy+0xa>
    b29e:	00 d0       	rcall	.+0      	; 0xb2a0 <spawn_enemy+0xc>
    b2a0:	cd b7       	in	r28, 0x3d	; 61
    b2a2:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b2a4:	20 91 b7 0d 	lds	r18, 0x0DB7
    b2a8:	30 91 b8 0d 	lds	r19, 0x0DB8
    b2ac:	28 3c       	cpi	r18, 0xC8	; 200
    b2ae:	35 40       	sbci	r19, 0x05	; 5
    b2b0:	98 f5       	brcc	.+102    	; 0xb318 <spawn_enemy+0x84>
    b2b2:	27 eb       	ldi	r18, 0xB7	; 183
    b2b4:	3d e0       	ldi	r19, 0x0D	; 13
    b2b6:	10 e0       	ldi	r17, 0x00	; 0
    b2b8:	f9 01       	movw	r30, r18
    b2ba:	e1 5e       	subi	r30, 0xE1	; 225
    b2bc:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b2be:	50 81       	ld	r21, Z
    b2c0:	51 11       	cpse	r21, r1
    b2c2:	25 c0       	rjmp	.+74     	; 0xb30e <spawn_enemy+0x7a>
    b2c4:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b2c6:	50 81       	ld	r21, Z
    b2c8:	51 11       	cpse	r21, r1
    b2ca:	21 c0       	rjmp	.+66     	; 0xb30e <spawn_enemy+0x7a>
    b2cc:	04 2f       	mov	r16, r20
    b2ce:	ab 01       	movw	r20, r22
    b2d0:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b2d2:	4b 83       	std	Y+3, r20	; 0x03
    b2d4:	5c 83       	std	Y+4, r21	; 0x04
    b2d6:	89 83       	std	Y+1, r24	; 0x01
    b2d8:	7a 83       	std	Y+2, r23	; 0x02
    b2da:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    b2de:	4b 81       	ldd	r20, Y+3	; 0x03
    b2e0:	5c 81       	ldd	r21, Y+4	; 0x04
    b2e2:	69 81       	ldd	r22, Y+1	; 0x01
    b2e4:	7a 81       	ldd	r23, Y+2	; 0x02
    b2e6:	88 23       	and	r24, r24
    b2e8:	21 f0       	breq	.+8      	; 0xb2f2 <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b2ea:	81 2f       	mov	r24, r17
    b2ec:	0e 94 2a 59 	call	0xb254	; 0xb254 <init_space_enemy>
    b2f0:	08 c0       	rjmp	.+16     	; 0xb302 <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b2f2:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b2f4:	01 11       	cpse	r16, r1
    b2f6:	03 c0       	rjmp	.+6      	; 0xb2fe <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b2f8:	0e 94 08 59 	call	0xb210	; 0xb210 <init_level_enemy>
    b2fc:	02 c0       	rjmp	.+4      	; 0xb302 <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b2fe:	0e 94 df 57 	call	0xafbe	; 0xafbe <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b302:	80 91 d2 0d 	lds	r24, 0x0DD2
    b306:	8f 5f       	subi	r24, 0xFF	; 255
    b308:	80 93 d2 0d 	sts	0x0DD2, r24
    b30c:	05 c0       	rjmp	.+10     	; 0xb318 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b30e:	1f 5f       	subi	r17, 0xFF	; 255
    b310:	2b 5c       	subi	r18, 0xCB	; 203
    b312:	3f 4f       	sbci	r19, 0xFF	; 255
    b314:	15 30       	cpi	r17, 0x05	; 5
    b316:	81 f6       	brne	.-96     	; 0xb2b8 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b318:	0f 90       	pop	r0
    b31a:	0f 90       	pop	r0
    b31c:	0f 90       	pop	r0
    b31e:	0f 90       	pop	r0
    b320:	df 91       	pop	r29
    b322:	cf 91       	pop	r28
    b324:	1f 91       	pop	r17
    b326:	0f 91       	pop	r16
    b328:	08 95       	ret

0000b32a <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b32a:	9f ef       	ldi	r25, 0xFF	; 255
    b32c:	98 0f       	add	r25, r24
    b32e:	9e 30       	cpi	r25, 0x0E	; 14
    b330:	28 f0       	brcs	.+10     	; 0xb33c <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    b332:	8f 50       	subi	r24, 0x0F	; 15
    b334:	8c 30       	cpi	r24, 0x0C	; 12
    b336:	20 f0       	brcs	.+8      	; 0xb340 <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b338:	80 e0       	ldi	r24, 0x00	; 0
    b33a:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b33c:	81 e0       	ldi	r24, 0x01	; 1
    b33e:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    b340:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b342:	08 95       	ret

0000b344 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b344:	af 92       	push	r10
    b346:	bf 92       	push	r11
    b348:	cf 92       	push	r12
    b34a:	df 92       	push	r13
    b34c:	ef 92       	push	r14
    b34e:	ff 92       	push	r15
    b350:	0f 93       	push	r16
    b352:	1f 93       	push	r17
    b354:	cf 93       	push	r28
    b356:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b358:	66 e1       	ldi	r22, 0x16	; 22
    b35a:	82 e0       	ldi	r24, 0x02	; 2
    b35c:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <LBRandom>
    b360:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b362:	80 91 c8 0d 	lds	r24, 0x0DC8
    b366:	8f 5f       	subi	r24, 0xFF	; 255
    b368:	80 93 c8 0d 	sts	0x0DC8, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b36c:	20 91 d3 0d 	lds	r18, 0x0DD3
    b370:	62 2f       	mov	r22, r18
    b372:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    b376:	89 2f       	mov	r24, r25
    b378:	90 e0       	ldi	r25, 0x00	; 0
    b37a:	30 e0       	ldi	r19, 0x00	; 0
    b37c:	21 50       	subi	r18, 0x01	; 1
    b37e:	31 09       	sbc	r19, r1
    b380:	82 17       	cp	r24, r18
    b382:	93 07       	cpc	r25, r19
    b384:	31 f4       	brne	.+12     	; 0xb392 <append_tile_column+0x4e>
    b386:	bb 24       	eor	r11, r11
    b388:	b3 94       	inc	r11
    b38a:	80 91 d2 0d 	lds	r24, 0x0DD2
    b38e:	85 30       	cpi	r24, 0x05	; 5
    b390:	08 f0       	brcs	.+2      	; 0xb394 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b392:	b1 2c       	mov	r11, r1
    b394:	00 e0       	ldi	r16, 0x00	; 0
    b396:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b398:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    b39a:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b39c:	2e e1       	ldi	r18, 0x1E	; 30
    b39e:	c2 2e       	mov	r12, r18
    b3a0:	d1 2c       	mov	r13, r1
    b3a2:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b3a4:	40 91 bf 0d 	lds	r20, 0x0DBF
    b3a8:	46 95       	lsr	r20
    b3aa:	46 95       	lsr	r20
    b3ac:	46 95       	lsr	r20
    b3ae:	40 0f       	add	r20, r16
    b3b0:	60 91 c0 0d 	lds	r22, 0x0DC0
    b3b4:	80 91 d8 0f 	lds	r24, 0x0FD8
    b3b8:	90 91 d9 0f 	lds	r25, 0x0FD9
    b3bc:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    b3c0:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b3c2:	28 2f       	mov	r18, r24
    b3c4:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b3c6:	80 91 b6 0c 	lds	r24, 0x0CB6
    b3ca:	86 95       	lsr	r24
    b3cc:	86 95       	lsr	r24
    b3ce:	86 95       	lsr	r24
    b3d0:	a8 01       	movw	r20, r16
    b3d2:	48 0f       	add	r20, r24
    b3d4:	51 1d       	adc	r21, r1
    b3d6:	ca 01       	movw	r24, r20
    b3d8:	b6 01       	movw	r22, r12
    b3da:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b3de:	a9 01       	movw	r20, r18
    b3e0:	68 2f       	mov	r22, r24
    b3e2:	80 91 c4 0d 	lds	r24, 0x0DC4
    b3e6:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b3ea:	bb 20       	and	r11, r11
    b3ec:	81 f0       	breq	.+32     	; 0xb40e <append_tile_column+0xca>
    b3ee:	01 15       	cp	r16, r1
    b3f0:	11 05       	cpc	r17, r1
    b3f2:	69 f0       	breq	.+26     	; 0xb40e <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b3f4:	81 ef       	ldi	r24, 0xF1	; 241
    b3f6:	8e 0d       	add	r24, r14
    b3f8:	85 30       	cpi	r24, 0x05	; 5
    b3fa:	30 f0       	brcs	.+12     	; 0xb408 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b3fc:	8f ef       	ldi	r24, 0xFF	; 255
    b3fe:	8e 0d       	add	r24, r14
    b400:	8e 30       	cpi	r24, 0x0E	; 14
    b402:	08 f4       	brcc	.+2      	; 0xb406 <append_tile_column+0xc2>
    b404:	60 c0       	rjmp	.+192    	; 0xb4c6 <append_tile_column+0x182>
    b406:	03 c0       	rjmp	.+6      	; 0xb40e <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b408:	c1 11       	cpse	r28, r1
    b40a:	f8 cf       	rjmp	.-16     	; 0xb3fc <append_tile_column+0xb8>
    b40c:	c0 2f       	mov	r28, r16
    b40e:	0f 5f       	subi	r16, 0xFF	; 255
    b410:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b412:	09 31       	cpi	r16, 0x19	; 25
    b414:	11 05       	cpc	r17, r1
    b416:	29 f6       	brne	.-118    	; 0xb3a2 <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b418:	bb 20       	and	r11, r11
    b41a:	51 f0       	breq	.+20     	; 0xb430 <append_tile_column+0xec>
    b41c:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    b420:	88 23       	and	r24, r24
    b422:	31 f0       	breq	.+12     	; 0xb430 <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b424:	ff 0c       	add	r15, r15
    b426:	ff 0c       	add	r15, r15
    b428:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b42a:	6f 2d       	mov	r22, r15
    b42c:	70 e0       	ldi	r23, 0x00	; 0
    b42e:	32 c0       	rjmp	.+100    	; 0xb494 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b430:	cc 23       	and	r28, r28
    b432:	f1 f0       	breq	.+60     	; 0xb470 <append_tile_column+0x12c>
    b434:	80 91 cc 0d 	lds	r24, 0x0DCC
    b438:	90 91 bf 0d 	lds	r25, 0x0DBF
    b43c:	20 91 b7 0d 	lds	r18, 0x0DB7
    b440:	30 91 b8 0d 	lds	r19, 0x0DB8
    b444:	6c 2f       	mov	r22, r28
    b446:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b448:	96 95       	lsr	r25
    b44a:	96 95       	lsr	r25
    b44c:	96 95       	lsr	r25
    b44e:	69 0f       	add	r22, r25
    b450:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b452:	82 30       	cpi	r24, 0x02	; 2
    b454:	19 f4       	brne	.+6      	; 0xb45c <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b456:	61 50       	subi	r22, 0x01	; 1
    b458:	71 09       	sbc	r23, r1
    b45a:	02 c0       	rjmp	.+4      	; 0xb460 <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b45c:	6f 5f       	subi	r22, 0xFF	; 255
    b45e:	7f 4f       	sbci	r23, 0xFF	; 255
    b460:	93 e0       	ldi	r25, 0x03	; 3
    b462:	66 0f       	add	r22, r22
    b464:	77 1f       	adc	r23, r23
    b466:	9a 95       	dec	r25
    b468:	e1 f7       	brne	.-8      	; 0xb462 <append_tile_column+0x11e>
    b46a:	41 e0       	ldi	r20, 0x01	; 1
    b46c:	c9 01       	movw	r24, r18
    b46e:	17 c0       	rjmp	.+46     	; 0xb49e <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b470:	dd 23       	and	r29, r29
    b472:	c9 f0       	breq	.+50     	; 0xb4a6 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b474:	80 91 bf 0d 	lds	r24, 0x0DBF
    b478:	86 95       	lsr	r24
    b47a:	86 95       	lsr	r24
    b47c:	86 95       	lsr	r24
    b47e:	6d 2f       	mov	r22, r29
    b480:	70 e0       	ldi	r23, 0x00	; 0
    b482:	68 0f       	add	r22, r24
    b484:	71 1d       	adc	r23, r1
    b486:	61 50       	subi	r22, 0x01	; 1
    b488:	71 09       	sbc	r23, r1
    b48a:	83 e0       	ldi	r24, 0x03	; 3
    b48c:	66 0f       	add	r22, r22
    b48e:	77 1f       	adc	r23, r23
    b490:	8a 95       	dec	r24
    b492:	e1 f7       	brne	.-8      	; 0xb48c <append_tile_column+0x148>
    b494:	80 91 b7 0d 	lds	r24, 0x0DB7
    b498:	90 91 b8 0d 	lds	r25, 0x0DB8
    b49c:	40 e0       	ldi	r20, 0x00	; 0
    b49e:	80 52       	subi	r24, 0x20	; 32
    b4a0:	9f 4f       	sbci	r25, 0xFF	; 255
    b4a2:	0e 94 4a 59 	call	0xb294	; 0xb294 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b4a6:	80 91 c0 0d 	lds	r24, 0x0DC0
    b4aa:	8f 5f       	subi	r24, 0xFF	; 255
    b4ac:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_dest_x++;
    b4b0:	80 91 c4 0d 	lds	r24, 0x0DC4
    b4b4:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b4b6:	80 32       	cpi	r24, 0x20	; 32
    b4b8:	18 f4       	brcc	.+6      	; 0xb4c0 <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b4ba:	80 93 c4 0d 	sts	0x0DC4, r24
    b4be:	07 c0       	rjmp	.+14     	; 0xb4ce <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b4c0:	10 92 c4 0d 	sts	0x0DC4, r1
    b4c4:	04 c0       	rjmp	.+8      	; 0xb4ce <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b4c6:	d1 11       	cpse	r29, r1
    b4c8:	a2 cf       	rjmp	.-188    	; 0xb40e <append_tile_column+0xca>
    b4ca:	da 2d       	mov	r29, r10
    b4cc:	a0 cf       	rjmp	.-192    	; 0xb40e <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b4ce:	df 91       	pop	r29
    b4d0:	cf 91       	pop	r28
    b4d2:	1f 91       	pop	r17
    b4d4:	0f 91       	pop	r16
    b4d6:	ff 90       	pop	r15
    b4d8:	ef 90       	pop	r14
    b4da:	df 90       	pop	r13
    b4dc:	cf 90       	pop	r12
    b4de:	bf 90       	pop	r11
    b4e0:	af 90       	pop	r10
    b4e2:	08 95       	ret

0000b4e4 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b4e4:	80 91 b7 0d 	lds	r24, 0x0DB7
    b4e8:	90 91 b8 0d 	lds	r25, 0x0DB8
    b4ec:	01 96       	adiw	r24, 0x01	; 1
    b4ee:	90 93 b8 0d 	sts	0x0DB8, r25
    b4f2:	80 93 b7 0d 	sts	0x0DB7, r24
	Scroll(1,0);
    b4f6:	60 e0       	ldi	r22, 0x00	; 0
    b4f8:	81 e0       	ldi	r24, 0x01	; 1
    b4fa:	0e 94 b8 4b 	call	0x9770	; 0x9770 <Scroll>
	if (++game.scroll_x == 8)
    b4fe:	80 91 c2 0d 	lds	r24, 0x0DC2
    b502:	8f 5f       	subi	r24, 0xFF	; 255
    b504:	88 30       	cpi	r24, 0x08	; 8
    b506:	19 f0       	breq	.+6      	; 0xb50e <move_camera_x+0x2a>
    b508:	80 93 c2 0d 	sts	0x0DC2, r24
    b50c:	08 95       	ret
	{
		game.scroll_x = 0;
    b50e:	10 92 c2 0d 	sts	0x0DC2, r1
		append_tile_column();
    b512:	0c 94 a2 59 	jmp	0xb344	; 0xb344 <append_tile_column>

0000b516 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b516:	82 e0       	ldi	r24, 0x02	; 2
    b518:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b51c:	85 e0       	ldi	r24, 0x05	; 5
    b51e:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.anims = run_anim;
    b522:	ed e3       	ldi	r30, 0x3D	; 61
    b524:	f0 e1       	ldi	r31, 0x10	; 16
    b526:	f0 93 34 0e 	sts	0x0E34, r31
    b52a:	e0 93 33 0e 	sts	0x0E33, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b52e:	88 eb       	ldi	r24, 0xB8	; 184
    b530:	90 e3       	ldi	r25, 0x30	; 48
    b532:	91 83       	std	Z+1, r25	; 0x01
    b534:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b536:	8e ea       	ldi	r24, 0xAE	; 174
    b538:	90 e3       	ldi	r25, 0x30	; 48
    b53a:	93 83       	std	Z+3, r25	; 0x03
    b53c:	82 83       	std	Z+2, r24	; 0x02
    b53e:	08 95       	ret

0000b540 <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b540:	a7 eb       	ldi	r26, 0xB7	; 183
    b542:	bd e0       	ldi	r27, 0x0D	; 13
    b544:	90 93 d9 0f 	sts	0x0FD9, r25
    b548:	80 93 d8 0f 	sts	0x0FD8, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b54c:	fc 01       	movw	r30, r24
    b54e:	24 91       	lpm	r18, Z
    b550:	56 96       	adiw	r26, 0x16	; 22
    b552:	2c 93       	st	X, r18
    b554:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b556:	9c 01       	movw	r18, r24
    b558:	2f 5f       	subi	r18, 0xFF	; 255
    b55a:	3f 4f       	sbci	r19, 0xFF	; 255
    b55c:	f9 01       	movw	r30, r18
    b55e:	44 91       	lpm	r20, Z
    b560:	57 96       	adiw	r26, 0x17	; 23
    b562:	4c 93       	st	X, r20
    b564:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b566:	fc 01       	movw	r30, r24
    b568:	84 91       	lpm	r24, Z
    b56a:	98 2f       	mov	r25, r24
    b56c:	99 0f       	add	r25, r25
    b56e:	99 0f       	add	r25, r25
    b570:	89 0f       	add	r24, r25
    b572:	1f 96       	adiw	r26, 0x0f	; 15
    b574:	8c 93       	st	X, r24
    b576:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b578:	f9 01       	movw	r30, r18
    b57a:	24 91       	lpm	r18, Z
    b57c:	82 2f       	mov	r24, r18
    b57e:	88 0f       	add	r24, r24
    b580:	88 0f       	add	r24, r24
    b582:	28 0f       	add	r18, r24
    b584:	50 96       	adiw	r26, 0x10	; 16
    b586:	2c 93       	st	X, r18
    b588:	08 95       	ret

0000b58a <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b58a:	cf 92       	push	r12
    b58c:	df 92       	push	r13
    b58e:	ef 92       	push	r14
    b590:	ff 92       	push	r15
    b592:	0f 93       	push	r16
    b594:	1f 93       	push	r17
    b596:	cf 93       	push	r28
    b598:	df 93       	push	r29
    b59a:	7c 01       	movw	r14, r24
    b59c:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b59e:	88 e0       	ldi	r24, 0x08	; 8
    b5a0:	48 9f       	mul	r20, r24
    b5a2:	80 01       	movw	r16, r0
    b5a4:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b5a6:	c0 e0       	ldi	r28, 0x00	; 0
    b5a8:	cd 17       	cp	r28, r29
    b5aa:	09 f4       	brne	.+2      	; 0xb5ae <on_solid_ground+0x24>
    b5ac:	41 c0       	rjmp	.+130    	; 0xb630 <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b5ae:	f7 01       	movw	r30, r14
    b5b0:	42 81       	ldd	r20, Z+2	; 0x02
    b5b2:	53 81       	ldd	r21, Z+3	; 0x03
    b5b4:	40 0f       	add	r20, r16
    b5b6:	51 1f       	adc	r21, r17
    b5b8:	83 e0       	ldi	r24, 0x03	; 3
    b5ba:	56 95       	lsr	r21
    b5bc:	47 95       	ror	r20
    b5be:	8a 95       	dec	r24
    b5c0:	e1 f7       	brne	.-8      	; 0xb5ba <on_solid_ground+0x30>
    b5c2:	60 81       	ld	r22, Z
    b5c4:	71 81       	ldd	r23, Z+1	; 0x01
    b5c6:	93 e0       	ldi	r25, 0x03	; 3
    b5c8:	76 95       	lsr	r23
    b5ca:	67 95       	ror	r22
    b5cc:	9a 95       	dec	r25
    b5ce:	e1 f7       	brne	.-8      	; 0xb5c8 <on_solid_ground+0x3e>
    b5d0:	6c 0f       	add	r22, r28
    b5d2:	80 91 d8 0f 	lds	r24, 0x0FD8
    b5d6:	90 91 d9 0f 	lds	r25, 0x0FD9
    b5da:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    b5de:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b5e0:	f7 01       	movw	r30, r14
    b5e2:	42 81       	ldd	r20, Z+2	; 0x02
    b5e4:	53 81       	ldd	r21, Z+3	; 0x03
    b5e6:	40 0f       	add	r20, r16
    b5e8:	51 1f       	adc	r21, r17
    b5ea:	23 e0       	ldi	r18, 0x03	; 3
    b5ec:	56 95       	lsr	r21
    b5ee:	47 95       	ror	r20
    b5f0:	2a 95       	dec	r18
    b5f2:	e1 f7       	brne	.-8      	; 0xb5ec <on_solid_ground+0x62>
    b5f4:	20 81       	ld	r18, Z
    b5f6:	31 81       	ldd	r19, Z+1	; 0x01
    b5f8:	29 5f       	subi	r18, 0xF9	; 249
    b5fa:	3f 4f       	sbci	r19, 0xFF	; 255
    b5fc:	53 e0       	ldi	r21, 0x03	; 3
    b5fe:	36 95       	lsr	r19
    b600:	27 95       	ror	r18
    b602:	5a 95       	dec	r21
    b604:	e1 f7       	brne	.-8      	; 0xb5fe <on_solid_ground+0x74>
    b606:	6c 2f       	mov	r22, r28
    b608:	62 0f       	add	r22, r18
    b60a:	80 91 d8 0f 	lds	r24, 0x0FD8
    b60e:	90 91 d9 0f 	lds	r25, 0x0FD9
    b612:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    b616:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b618:	8c 2d       	mov	r24, r12
    b61a:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    b61e:	81 11       	cpse	r24, r1
    b620:	09 c0       	rjmp	.+18     	; 0xb634 <on_solid_ground+0xaa>
    b622:	8d 2d       	mov	r24, r13
    b624:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    b628:	81 11       	cpse	r24, r1
    b62a:	04 c0       	rjmp	.+8      	; 0xb634 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b62c:	cf 5f       	subi	r28, 0xFF	; 255
    b62e:	bc cf       	rjmp	.-136    	; 0xb5a8 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b630:	80 e0       	ldi	r24, 0x00	; 0
    b632:	01 c0       	rjmp	.+2      	; 0xb636 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b634:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b636:	df 91       	pop	r29
    b638:	cf 91       	pop	r28
    b63a:	1f 91       	pop	r17
    b63c:	0f 91       	pop	r16
    b63e:	ff 90       	pop	r15
    b640:	ef 90       	pop	r14
    b642:	df 90       	pop	r13
    b644:	cf 90       	pop	r12
    b646:	08 95       	ret

0000b648 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b648:	9c 01       	movw	r18, r24
    b64a:	80 91 f9 0c 	lds	r24, 0x0CF9
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b64e:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b650:	83 30       	cpi	r24, 0x03	; 3
    b652:	08 f0       	brcs	.+2      	; 0xb656 <find_shot_slot+0xe>
    b654:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b656:	f9 01       	movw	r30, r18
    b658:	48 9f       	mul	r20, r24
    b65a:	e0 0d       	add	r30, r0
    b65c:	f1 1d       	adc	r31, r1
    b65e:	11 24       	eor	r1, r1
    b660:	51 8d       	ldd	r21, Z+25	; 0x19
    b662:	91 e0       	ldi	r25, 0x01	; 1
    b664:	98 0f       	add	r25, r24
    b666:	51 11       	cpse	r21, r1
    b668:	03 c0       	rjmp	.+6      	; 0xb670 <find_shot_slot+0x28>
		{
			return i++;
    b66a:	90 93 f9 0c 	sts	0x0CF9, r25
    b66e:	08 95       	ret
		}
		i++;
    b670:	89 2f       	mov	r24, r25
	}
    b672:	ee cf       	rjmp	.-36     	; 0xb650 <find_shot_slot+0x8>

0000b674 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b674:	bf 92       	push	r11
    b676:	cf 92       	push	r12
    b678:	df 92       	push	r13
    b67a:	ef 92       	push	r14
    b67c:	ff 92       	push	r15
    b67e:	0f 93       	push	r16
    b680:	1f 93       	push	r17
    b682:	cf 93       	push	r28
    b684:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_B && player->active_shots < MAX_PLAYER_SHOTS)
    b686:	fc 01       	movw	r30, r24
    b688:	ec 58       	subi	r30, 0x8C	; 140
    b68a:	ff 4f       	sbci	r31, 0xFF	; 255
    b68c:	20 81       	ld	r18, Z
    b68e:	20 ff       	sbrs	r18, 0
    b690:	af c0       	rjmp	.+350    	; 0xb7f0 <update_shot+0x17c>
    b692:	fc 01       	movw	r30, r24
    b694:	27 81       	ldd	r18, Z+7	; 0x07
    b696:	23 30       	cpi	r18, 0x03	; 3
    b698:	08 f0       	brcs	.+2      	; 0xb69c <update_shot+0x28>
    b69a:	aa c0       	rjmp	.+340    	; 0xb7f0 <update_shot+0x17c>
    b69c:	16 2f       	mov	r17, r22
    b69e:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    b6a0:	0e 94 24 5b 	call	0xb648	; 0xb648 <find_shot_slot>
    b6a4:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    b6a6:	e8 2e       	mov	r14, r24
    b6a8:	f1 2c       	mov	r15, r1
    b6aa:	fe 01       	movw	r30, r28
    b6ac:	24 e1       	ldi	r18, 0x14	; 20
    b6ae:	82 9f       	mul	r24, r18
    b6b0:	e0 0d       	add	r30, r0
    b6b2:	f1 1d       	adc	r31, r1
    b6b4:	11 24       	eor	r1, r1
    b6b6:	87 89       	ldd	r24, Z+23	; 0x17
    b6b8:	86 30       	cpi	r24, 0x06	; 6
    b6ba:	29 f4       	brne	.+10     	; 0xb6c6 <update_shot+0x52>
    b6bc:	8a 81       	ldd	r24, Y+2	; 0x02
    b6be:	9b 81       	ldd	r25, Y+3	; 0x03
    b6c0:	04 97       	sbiw	r24, 0x04	; 4
    b6c2:	08 f4       	brcc	.+2      	; 0xb6c6 <update_shot+0x52>
    b6c4:	95 c0       	rjmp	.+298    	; 0xb7f0 <update_shot+0x17c>
		SFX_PLAYER_SHOOT;
    b6c6:	80 91 de 0f 	lds	r24, 0x0FDE
    b6ca:	88 23       	and	r24, r24
    b6cc:	21 f0       	breq	.+8      	; 0xb6d6 <update_shot+0x62>
    b6ce:	80 91 d0 0d 	lds	r24, 0x0DD0
    b6d2:	82 30       	cpi	r24, 0x02	; 2
    b6d4:	31 f0       	breq	.+12     	; 0xb6e2 <update_shot+0x6e>
    b6d6:	2f ef       	ldi	r18, 0xFF	; 255
    b6d8:	43 e2       	ldi	r20, 0x23	; 35
    b6da:	63 e0       	ldi	r22, 0x03	; 3
    b6dc:	82 e0       	ldi	r24, 0x02	; 2
    b6de:	0e 94 29 42 	call	0x8452	; 0x8452 <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b6e2:	84 e1       	ldi	r24, 0x14	; 20
    b6e4:	8e 9d       	mul	r24, r14
    b6e6:	60 01       	movw	r12, r0
    b6e8:	8f 9d       	mul	r24, r15
    b6ea:	d0 0c       	add	r13, r0
    b6ec:	11 24       	eor	r1, r1
    b6ee:	c6 01       	movw	r24, r12
    b6f0:	4c 96       	adiw	r24, 0x1c	; 28
    b6f2:	8c 0f       	add	r24, r28
    b6f4:	9d 1f       	adc	r25, r29
    b6f6:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    b6fa:	40 e0       	ldi	r20, 0x00	; 0
    b6fc:	bc 01       	movw	r22, r24
    b6fe:	8b 2d       	mov	r24, r11
    b700:	81 0f       	add	r24, r17
    b702:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
		player->shot[idx].active = 1;
    b706:	8e 01       	movw	r16, r28
    b708:	0c 0d       	add	r16, r12
    b70a:	1d 1d       	adc	r17, r13
    b70c:	81 e0       	ldi	r24, 0x01	; 1
    b70e:	f8 01       	movw	r30, r16
    b710:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    b712:	ca 80       	ldd	r12, Y+2	; 0x02
    b714:	db 80       	ldd	r13, Y+3	; 0x03
    b716:	f8 ef       	ldi	r31, 0xF8	; 248
    b718:	cf 22       	and	r12, r31
    b71a:	f8 01       	movw	r30, r16
    b71c:	83 8d       	ldd	r24, Z+27	; 0x1b
    b71e:	c8 0e       	add	r12, r24
    b720:	d1 1c       	adc	r13, r1
    b722:	87 fd       	sbrc	r24, 7
    b724:	da 94       	dec	r13
    b726:	d3 8a       	std	Z+19, r13	; 0x13
    b728:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    b72a:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    b72e:	28 81       	ld	r18, Y
    b730:	39 81       	ldd	r19, Y+1	; 0x01
    b732:	88 23       	and	r24, r24
    b734:	e1 f0       	breq	.+56     	; 0xb76e <update_shot+0xfa>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b736:	8b 85       	ldd	r24, Y+11	; 0x0b
    b738:	f8 e0       	ldi	r31, 0x08	; 8
    b73a:	8f 9f       	mul	r24, r31
    b73c:	20 0d       	add	r18, r0
    b73e:	31 1d       	adc	r19, r1
    b740:	11 24       	eor	r1, r1
    b742:	f8 01       	movw	r30, r16
    b744:	31 8b       	std	Z+17, r19	; 0x11
    b746:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b748:	82 8d       	ldd	r24, Z+26	; 0x1a
    b74a:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    b74c:	87 89       	ldd	r24, Z+23	; 0x17
    b74e:	86 30       	cpi	r24, 0x06	; 6
    b750:	09 f0       	breq	.+2      	; 0xb754 <update_shot+0xe0>
    b752:	4b c0       	rjmp	.+150    	; 0xb7ea <update_shot+0x176>
    b754:	fe 01       	movw	r30, r28
    b756:	24 e1       	ldi	r18, 0x14	; 20
    b758:	b2 9e       	mul	r11, r18
    b75a:	e0 0d       	add	r30, r0
    b75c:	f1 1d       	adc	r31, r1
    b75e:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    b760:	84 89       	ldd	r24, Z+20	; 0x14
    b762:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    b764:	81 11       	cpse	r24, r1
    b766:	01 c0       	rjmp	.+2      	; 0xb76a <update_shot+0xf6>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    b768:	8f e7       	ldi	r24, 0x7F	; 127
    b76a:	84 8b       	std	Z+20, r24	; 0x14
    b76c:	3e c0       	rjmp	.+124    	; 0xb7ea <update_shot+0x176>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    b76e:	88 85       	ldd	r24, Y+8	; 0x08
    b770:	82 fd       	sbrc	r24, 2
    b772:	06 c0       	rjmp	.+12     	; 0xb780 <update_shot+0x10c>
			{
				player->shot[idx].shared.y += 8;
    b774:	88 e0       	ldi	r24, 0x08	; 8
    b776:	c8 0e       	add	r12, r24
    b778:	d1 1c       	adc	r13, r1
    b77a:	f8 01       	movw	r30, r16
    b77c:	d3 8a       	std	Z+19, r13	; 0x13
    b77e:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    b780:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b782:	94 e1       	ldi	r25, 0x14	; 20
    b784:	9e 9d       	mul	r25, r14
    b786:	f0 01       	movw	r30, r0
    b788:	9f 9d       	mul	r25, r15
    b78a:	f0 0d       	add	r31, r0
    b78c:	11 24       	eor	r1, r1
    b78e:	ec 0f       	add	r30, r28
    b790:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    b792:	81 30       	cpi	r24, 0x01	; 1
    b794:	a9 f4       	brne	.+42     	; 0xb7c0 <update_shot+0x14c>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b796:	20 5f       	subi	r18, 0xF0	; 240
    b798:	3f 4f       	sbci	r19, 0xFF	; 255
    b79a:	31 8b       	std	Z+17, r19	; 0x11
    b79c:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b79e:	82 8d       	ldd	r24, Z+26	; 0x1a
    b7a0:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b7a2:	27 89       	ldd	r18, Z+23	; 0x17
    b7a4:	24 30       	cpi	r18, 0x04	; 4
    b7a6:	09 f5       	brne	.+66     	; 0xb7ea <update_shot+0x176>
    b7a8:	ff ef       	ldi	r31, 0xFF	; 255
    b7aa:	ef 1a       	sub	r14, r31
    b7ac:	ff 0a       	sbc	r15, r31
    b7ae:	9e 9d       	mul	r25, r14
    b7b0:	f0 01       	movw	r30, r0
    b7b2:	9f 9d       	mul	r25, r15
    b7b4:	f0 0d       	add	r31, r0
    b7b6:	11 24       	eor	r1, r1
    b7b8:	ec 0f       	add	r30, r28
    b7ba:	fd 1f       	adc	r31, r29
    b7bc:	81 95       	neg	r24
    b7be:	14 c0       	rjmp	.+40     	; 0xb7e8 <update_shot+0x174>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    b7c0:	28 50       	subi	r18, 0x08	; 8
    b7c2:	31 09       	sbc	r19, r1
    b7c4:	31 8b       	std	Z+17, r19	; 0x11
    b7c6:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    b7c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    b7ca:	81 95       	neg	r24
    b7cc:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b7ce:	27 89       	ldd	r18, Z+23	; 0x17
    b7d0:	24 30       	cpi	r18, 0x04	; 4
    b7d2:	59 f4       	brne	.+22     	; 0xb7ea <update_shot+0x176>
    b7d4:	2f ef       	ldi	r18, 0xFF	; 255
    b7d6:	e2 1a       	sub	r14, r18
    b7d8:	f2 0a       	sbc	r15, r18
    b7da:	9e 9d       	mul	r25, r14
    b7dc:	f0 01       	movw	r30, r0
    b7de:	9f 9d       	mul	r25, r15
    b7e0:	f0 0d       	add	r31, r0
    b7e2:	11 24       	eor	r1, r1
    b7e4:	ec 0f       	add	r30, r28
    b7e6:	fd 1f       	adc	r31, r29
    b7e8:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    b7ea:	8f 81       	ldd	r24, Y+7	; 0x07
    b7ec:	8f 5f       	subi	r24, 0xFF	; 255
    b7ee:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    b7f0:	df 91       	pop	r29
    b7f2:	cf 91       	pop	r28
    b7f4:	1f 91       	pop	r17
    b7f6:	0f 91       	pop	r16
    b7f8:	ff 90       	pop	r15
    b7fa:	ef 90       	pop	r14
    b7fc:	df 90       	pop	r13
    b7fe:	cf 90       	pop	r12
    b800:	bf 90       	pop	r11
    b802:	08 95       	ret

0000b804 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    b804:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    b806:	40 81       	ld	r20, Z
    b808:	51 81       	ldd	r21, Z+1	; 0x01
    b80a:	20 91 b7 0d 	lds	r18, 0x0DB7
    b80e:	30 91 b8 0d 	lds	r19, 0x0DB8
    b812:	42 17       	cp	r20, r18
    b814:	53 07       	cpc	r21, r19
    b816:	08 f1       	brcs	.+66     	; 0xb85a <out_of_bounds+0x56>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    b818:	48 5f       	subi	r20, 0xF8	; 248
    b81a:	5f 4f       	sbci	r21, 0xFF	; 255
    b81c:	20 52       	subi	r18, 0x20	; 32
    b81e:	3f 4f       	sbci	r19, 0xFF	; 255
    b820:	24 17       	cp	r18, r20
    b822:	35 07       	cpc	r19, r21
    b824:	d0 f0       	brcs	.+52     	; 0xb85a <out_of_bounds+0x56>
	if (s->y < game.camera_y) return 1;
    b826:	42 81       	ldd	r20, Z+2	; 0x02
    b828:	53 81       	ldd	r21, Z+3	; 0x03
    b82a:	20 91 bf 0d 	lds	r18, 0x0DBF
    b82e:	30 e0       	ldi	r19, 0x00	; 0
    b830:	42 17       	cp	r20, r18
    b832:	53 07       	cpc	r21, r19
    b834:	90 f0       	brcs	.+36     	; 0xb85a <out_of_bounds+0x56>
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
    b836:	c9 01       	movw	r24, r18
    b838:	01 96       	adiw	r24, 0x01	; 1
    b83a:	48 17       	cp	r20, r24
    b83c:	59 07       	cpc	r21, r25
    b83e:	18 f4       	brcc	.+6      	; 0xb846 <out_of_bounds+0x42>
    b840:	84 81       	ldd	r24, Z+4	; 0x04
    b842:	81 11       	cpse	r24, r1
    b844:	0a c0       	rjmp	.+20     	; 0xb85a <out_of_bounds+0x56>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    b846:	48 5f       	subi	r20, 0xF8	; 248
    b848:	5f 4f       	sbci	r21, 0xFF	; 255
    b84a:	28 53       	subi	r18, 0x38	; 56
    b84c:	3f 4f       	sbci	r19, 0xFF	; 255
    b84e:	81 e0       	ldi	r24, 0x01	; 1
    b850:	24 17       	cp	r18, r20
    b852:	35 07       	cpc	r19, r21
    b854:	18 f0       	brcs	.+6      	; 0xb85c <out_of_bounds+0x58>
    b856:	80 e0       	ldi	r24, 0x00	; 0
    b858:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    b85a:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    b85c:	08 95       	ret

0000b85e <explode_all_enemies>:
	return 0;
#endif
}

void explode_all_enemies()
{
    b85e:	40 91 d2 0d 	lds	r20, 0x0DD2
    b862:	80 e0       	ldi	r24, 0x00	; 0
    b864:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    b866:	50 e1       	ldi	r21, 0x10	; 16
    b868:	9c 01       	movw	r18, r24
    b86a:	29 54       	subi	r18, 0x49	; 73
    b86c:	32 4f       	sbci	r19, 0xF2	; 242
    b86e:	d9 01       	movw	r26, r18
    b870:	a1 5e       	subi	r26, 0xE1	; 225
    b872:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    b874:	6c 91       	ld	r22, X
    b876:	66 23       	and	r22, r22
    b878:	31 f0       	breq	.+12     	; 0xb886 <explode_all_enemies+0x28>
    b87a:	f9 01       	movw	r30, r18
    b87c:	e0 5e       	subi	r30, 0xE0	; 224
    b87e:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    b880:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    b882:	1c 92       	st	X, r1
			game.active_enemies--;
    b884:	41 50       	subi	r20, 0x01	; 1
    b886:	c5 96       	adiw	r24, 0x35	; 53
#endif
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b888:	89 30       	cpi	r24, 0x09	; 9
    b88a:	21 e0       	ldi	r18, 0x01	; 1
    b88c:	92 07       	cpc	r25, r18
    b88e:	61 f7       	brne	.-40     	; 0xb868 <explode_all_enemies+0xa>
    b890:	40 93 d2 0d 	sts	0x0DD2, r20
    b894:	08 95       	ret

0000b896 <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    b896:	0f 93       	push	r16
    b898:	1f 93       	push	r17
    b89a:	cf 93       	push	r28
    b89c:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    b89e:	20 91 d0 0d 	lds	r18, 0x0DD0
    b8a2:	22 30       	cpi	r18, 0x02	; 2
    b8a4:	b9 f5       	brne	.+110    	; 0xb914 <handle_demo_play+0x7e>
    b8a6:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    b8a8:	8c 01       	movw	r16, r24
    b8aa:	0c 58       	subi	r16, 0x8C	; 140
    b8ac:	1f 4f       	sbci	r17, 0xFF	; 255
    b8ae:	f8 01       	movw	r30, r16
    b8b0:	11 82       	std	Z+1, r1	; 0x01
    b8b2:	10 82       	st	Z, r1
		if (is_space())
    b8b4:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    b8b8:	88 23       	and	r24, r24
    b8ba:	69 f0       	breq	.+26     	; 0xb8d6 <handle_demo_play+0x40>
		{
			if (game.time < 2)
    b8bc:	80 91 bd 0d 	lds	r24, 0x0DBD
    b8c0:	90 91 be 0d 	lds	r25, 0x0DBE
    b8c4:	02 97       	sbiw	r24, 0x02	; 2
    b8c6:	d0 f4       	brcc	.+52     	; 0xb8fc <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    b8c8:	c8 58       	subi	r28, 0x88	; 136
    b8ca:	df 4f       	sbci	r29, 0xFF	; 255
    b8cc:	80 e1       	ldi	r24, 0x10	; 16
    b8ce:	90 e0       	ldi	r25, 0x00	; 0
    b8d0:	99 83       	std	Y+1, r25	; 0x01
    b8d2:	88 83       	st	Y, r24
    b8d4:	13 c0       	rjmp	.+38     	; 0xb8fc <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    b8d6:	80 e8       	ldi	r24, 0x80	; 128
    b8d8:	90 e0       	ldi	r25, 0x00	; 0
    b8da:	fe 01       	movw	r30, r28
    b8dc:	e8 58       	subi	r30, 0x88	; 136
    b8de:	ff 4f       	sbci	r31, 0xFF	; 255
    b8e0:	91 83       	std	Z+1, r25	; 0x01
    b8e2:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    b8e4:	8d 81       	ldd	r24, Y+5	; 0x05
    b8e6:	81 11       	cpse	r24, r1
    b8e8:	09 c0       	rjmp	.+18     	; 0xb8fc <handle_demo_play+0x66>
    b8ea:	88 81       	ld	r24, Y
    b8ec:	99 81       	ldd	r25, Y+1	; 0x01
    b8ee:	89 97       	sbiw	r24, 0x29	; 41
    b8f0:	28 f0       	brcs	.+10     	; 0xb8fc <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_A;
    b8f2:	80 e0       	ldi	r24, 0x00	; 0
    b8f4:	91 e0       	ldi	r25, 0x01	; 1
    b8f6:	f8 01       	movw	r30, r16
    b8f8:	91 83       	std	Z+1, r25	; 0x01
    b8fa:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    b8fc:	80 91 d1 0d 	lds	r24, 0x0DD1
    b900:	6f e0       	ldi	r22, 0x0F	; 15
    b902:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    b906:	91 11       	cpse	r25, r1
    b908:	05 c0       	rjmp	.+10     	; 0xb914 <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_B;
    b90a:	81 e0       	ldi	r24, 0x01	; 1
    b90c:	90 e0       	ldi	r25, 0x00	; 0
    b90e:	f8 01       	movw	r30, r16
    b910:	91 83       	std	Z+1, r25	; 0x01
    b912:	80 83       	st	Z, r24
		}
	}
}
    b914:	df 91       	pop	r29
    b916:	cf 91       	pop	r28
    b918:	1f 91       	pop	r17
    b91a:	0f 91       	pop	r16
    b91c:	08 95       	ret

0000b91e <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    b91e:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    b920:	86 17       	cp	r24, r22
    b922:	10 f4       	brcc	.+4      	; 0xb928 <pixel_overlap+0xa>
    b924:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    b926:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    b928:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    b92a:	26 0f       	add	r18, r22
	if (s2 < s1)
    b92c:	28 17       	cp	r18, r24
    b92e:	10 f4       	brcc	.+4      	; 0xb934 <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    b930:	28 1b       	sub	r18, r24
    b932:	92 0f       	add	r25, r18
	}
	return result;
}
    b934:	89 2f       	mov	r24, r25
    b936:	08 95       	ret

0000b938 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b938:	2f 92       	push	r2
    b93a:	3f 92       	push	r3
    b93c:	4f 92       	push	r4
    b93e:	5f 92       	push	r5
    b940:	6f 92       	push	r6
    b942:	7f 92       	push	r7
    b944:	8f 92       	push	r8
    b946:	9f 92       	push	r9
    b948:	af 92       	push	r10
    b94a:	bf 92       	push	r11
    b94c:	cf 92       	push	r12
    b94e:	df 92       	push	r13
    b950:	ef 92       	push	r14
    b952:	ff 92       	push	r15
    b954:	0f 93       	push	r16
    b956:	1f 93       	push	r17
    b958:	cf 93       	push	r28
    b95a:	df 93       	push	r29
    b95c:	00 d0       	rcall	.+0      	; 0xb95e <collision_detect_level+0x26>
    b95e:	00 d0       	rcall	.+0      	; 0xb960 <collision_detect_level+0x28>
    b960:	00 d0       	rcall	.+0      	; 0xb962 <collision_detect_level+0x2a>
    b962:	cd b7       	in	r28, 0x3d	; 61
    b964:	de b7       	in	r29, 0x3e	; 62
    b966:	9e 83       	std	Y+6, r25	; 0x06
    b968:	8d 83       	std	Y+5, r24	; 0x05
    b96a:	56 2e       	mov	r5, r22
    b96c:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    b96e:	fc 01       	movw	r30, r24
    b970:	a0 80       	ld	r10, Z
    b972:	b1 80       	ldd	r11, Z+1	; 0x01
    b974:	75 01       	movw	r14, r10
    b976:	13 e0       	ldi	r17, 0x03	; 3
    b978:	f6 94       	lsr	r15
    b97a:	e7 94       	ror	r14
    b97c:	1a 95       	dec	r17
    b97e:	e1 f7       	brne	.-8      	; 0xb978 <collision_detect_level+0x40>
    b980:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    b982:	c2 80       	ldd	r12, Z+2	; 0x02
    b984:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    b986:	84 81       	ldd	r24, Z+4	; 0x04
    b988:	88 23       	and	r24, r24
    b98a:	09 f4       	brne	.+2      	; 0xb98e <collision_detect_level+0x56>
    b98c:	e1 c0       	rjmp	.+450    	; 0xbb50 <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    b98e:	e3 e0       	ldi	r30, 0x03	; 3
    b990:	d6 94       	lsr	r13
    b992:	c7 94       	ror	r12
    b994:	ea 95       	dec	r30
    b996:	e1 f7       	brne	.-8      	; 0xb990 <collision_detect_level+0x58>
    b998:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    b99a:	f7 e0       	ldi	r31, 0x07	; 7
    b99c:	af 0e       	add	r10, r31
    b99e:	b1 1c       	adc	r11, r1
    b9a0:	f3 e0       	ldi	r31, 0x03	; 3
    b9a2:	b6 94       	lsr	r11
    b9a4:	a7 94       	ror	r10
    b9a6:	fa 95       	dec	r31
    b9a8:	e1 f7       	brne	.-8      	; 0xb9a2 <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b9aa:	8e 2d       	mov	r24, r14
    b9ac:	88 0f       	add	r24, r24
    b9ae:	88 0f       	add	r24, r24
    b9b0:	88 0f       	add	r24, r24
    b9b2:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b9b4:	2a 2c       	mov	r2, r10
    b9b6:	22 0c       	add	r2, r2
    b9b8:	22 0c       	add	r2, r2
    b9ba:	22 0c       	add	r2, r2
    b9bc:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b9be:	46 01       	movw	r8, r12
    b9c0:	9f ef       	ldi	r25, 0xFF	; 255
    b9c2:	89 1a       	sub	r8, r25
    b9c4:	99 0a       	sbc	r9, r25
    b9c6:	a3 e0       	ldi	r26, 0x03	; 3
    b9c8:	88 0c       	add	r8, r8
    b9ca:	99 1c       	adc	r9, r9
    b9cc:	aa 95       	dec	r26
    b9ce:	e1 f7       	brne	.-8      	; 0xb9c8 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b9d0:	e8 e0       	ldi	r30, 0x08	; 8
    b9d2:	4e 9f       	mul	r20, r30
    b9d4:	30 01       	movw	r6, r0
    b9d6:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b9d8:	b3 e0       	ldi	r27, 0x03	; 3
    b9da:	cc 0c       	add	r12, r12
    b9dc:	dd 1c       	adc	r13, r13
    b9de:	ba 95       	dec	r27
    b9e0:	e1 f7       	brne	.-8      	; 0xb9da <collision_detect_level+0xa2>
    b9e2:	41 2c       	mov	r4, r1
    b9e4:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b9e6:	45 14       	cp	r4, r5
    b9e8:	09 f4       	brne	.+2      	; 0xb9ec <collision_detect_level+0xb4>
    b9ea:	b3 c0       	rjmp	.+358    	; 0xbb52 <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    b9ec:	ed 81       	ldd	r30, Y+5	; 0x05
    b9ee:	fe 81       	ldd	r31, Y+6	; 0x06
    b9f0:	84 81       	ldd	r24, Z+4	; 0x04
    b9f2:	87 ff       	sbrs	r24, 7
    b9f4:	47 c0       	rjmp	.+142    	; 0xba84 <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    b9f6:	49 81       	ldd	r20, Y+1	; 0x01
    b9f8:	64 2d       	mov	r22, r4
    b9fa:	6e 0d       	add	r22, r14
    b9fc:	80 91 d8 0f 	lds	r24, 0x0FD8
    ba00:	90 91 d9 0f 	lds	r25, 0x0FD9
    ba04:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    ba08:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    ba0a:	49 81       	ldd	r20, Y+1	; 0x01
    ba0c:	64 2d       	mov	r22, r4
    ba0e:	6a 0d       	add	r22, r10
    ba10:	80 91 d8 0f 	lds	r24, 0x0FD8
    ba14:	90 91 d9 0f 	lds	r25, 0x0FD9
    ba18:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    ba1c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    ba1e:	83 2d       	mov	r24, r3
    ba20:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    ba24:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    ba26:	80 2f       	mov	r24, r16
    ba28:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    ba2c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    ba2e:	33 20       	and	r3, r3
    ba30:	71 f0       	breq	.+28     	; 0xba4e <collision_detect_level+0x116>
    ba32:	30 91 b7 0d 	lds	r19, 0x0DB7
    ba36:	6b 81       	ldd	r22, Y+3	; 0x03
    ba38:	63 1b       	sub	r22, r19
    ba3a:	ed 81       	ldd	r30, Y+5	; 0x05
    ba3c:	fe 81       	ldd	r31, Y+6	; 0x06
    ba3e:	80 81       	ld	r24, Z
    ba40:	28 e0       	ldi	r18, 0x08	; 8
    ba42:	48 e0       	ldi	r20, 0x08	; 8
    ba44:	83 1b       	sub	r24, r19
    ba46:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    ba4a:	84 30       	cpi	r24, 0x04	; 4
    ba4c:	80 f4       	brcc	.+32     	; 0xba6e <collision_detect_level+0x136>
    ba4e:	00 23       	and	r16, r16
    ba50:	c9 f0       	breq	.+50     	; 0xba84 <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    ba52:	30 91 b7 0d 	lds	r19, 0x0DB7
    ba56:	62 2d       	mov	r22, r2
    ba58:	63 1b       	sub	r22, r19
    ba5a:	ed 81       	ldd	r30, Y+5	; 0x05
    ba5c:	fe 81       	ldd	r31, Y+6	; 0x06
    ba5e:	80 81       	ld	r24, Z
    ba60:	28 e0       	ldi	r18, 0x08	; 8
    ba62:	48 e0       	ldi	r20, 0x08	; 8
    ba64:	83 1b       	sub	r24, r19
    ba66:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    ba6a:	84 30       	cpi	r24, 0x04	; 4
    ba6c:	58 f0       	brcs	.+22     	; 0xba84 <collision_detect_level+0x14c>
				{
					s->vy =  0;
    ba6e:	ed 81       	ldd	r30, Y+5	; 0x05
    ba70:	fe 81       	ldd	r31, Y+6	; 0x06
    ba72:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    ba74:	93 82       	std	Z+3, r9	; 0x03
    ba76:	82 82       	std	Z+2, r8	; 0x02
    ba78:	30 16       	cp	r3, r16
    ba7a:	08 f4       	brcc	.+2      	; 0xba7e <collision_detect_level+0x146>
    ba7c:	30 2e       	mov	r3, r16
    ba7e:	13 15       	cp	r17, r3
    ba80:	08 f4       	brcc	.+2      	; 0xba84 <collision_detect_level+0x14c>
    ba82:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    ba84:	ed 81       	ldd	r30, Y+5	; 0x05
    ba86:	fe 81       	ldd	r31, Y+6	; 0x06
    ba88:	84 81       	ldd	r24, Z+4	; 0x04
    ba8a:	18 16       	cp	r1, r24
    ba8c:	0c f0       	brlt	.+2      	; 0xba90 <collision_detect_level+0x158>
    ba8e:	5e c0       	rjmp	.+188    	; 0xbb4c <collision_detect_level+0x214>
    ba90:	42 81       	ldd	r20, Z+2	; 0x02
    ba92:	53 81       	ldd	r21, Z+3	; 0x03
    ba94:	41 50       	subi	r20, 0x01	; 1
    ba96:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    ba98:	46 0d       	add	r20, r6
    ba9a:	57 1d       	adc	r21, r7
    ba9c:	63 e0       	ldi	r22, 0x03	; 3
    ba9e:	56 95       	lsr	r21
    baa0:	47 95       	ror	r20
    baa2:	6a 95       	dec	r22
    baa4:	e1 f7       	brne	.-8      	; 0xba9e <collision_detect_level+0x166>
    baa6:	64 2d       	mov	r22, r4
    baa8:	6e 0d       	add	r22, r14
    baaa:	80 91 d8 0f 	lds	r24, 0x0FD8
    baae:	90 91 d9 0f 	lds	r25, 0x0FD9
    bab2:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    bab6:	38 2e       	mov	r3, r24
    bab8:	ed 81       	ldd	r30, Y+5	; 0x05
    baba:	fe 81       	ldd	r31, Y+6	; 0x06
    babc:	42 81       	ldd	r20, Z+2	; 0x02
    babe:	53 81       	ldd	r21, Z+3	; 0x03
    bac0:	41 50       	subi	r20, 0x01	; 1
    bac2:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    bac4:	46 0d       	add	r20, r6
    bac6:	57 1d       	adc	r21, r7
    bac8:	73 e0       	ldi	r23, 0x03	; 3
    baca:	56 95       	lsr	r21
    bacc:	47 95       	ror	r20
    bace:	7a 95       	dec	r23
    bad0:	e1 f7       	brne	.-8      	; 0xbaca <collision_detect_level+0x192>
    bad2:	64 2d       	mov	r22, r4
    bad4:	6a 0d       	add	r22, r10
    bad6:	80 91 d8 0f 	lds	r24, 0x0FD8
    bada:	90 91 d9 0f 	lds	r25, 0x0FD9
    bade:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    bae2:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bae4:	83 2d       	mov	r24, r3
    bae6:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    baea:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    baec:	80 2f       	mov	r24, r16
    baee:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    baf2:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    baf4:	33 20       	and	r3, r3
    baf6:	71 f0       	breq	.+28     	; 0xbb14 <collision_detect_level+0x1dc>
    baf8:	30 91 b7 0d 	lds	r19, 0x0DB7
    bafc:	6b 81       	ldd	r22, Y+3	; 0x03
    bafe:	63 1b       	sub	r22, r19
    bb00:	ed 81       	ldd	r30, Y+5	; 0x05
    bb02:	fe 81       	ldd	r31, Y+6	; 0x06
    bb04:	80 81       	ld	r24, Z
    bb06:	28 e0       	ldi	r18, 0x08	; 8
    bb08:	48 e0       	ldi	r20, 0x08	; 8
    bb0a:	83 1b       	sub	r24, r19
    bb0c:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    bb10:	84 30       	cpi	r24, 0x04	; 4
    bb12:	80 f4       	brcc	.+32     	; 0xbb34 <collision_detect_level+0x1fc>
    bb14:	00 23       	and	r16, r16
    bb16:	d1 f0       	breq	.+52     	; 0xbb4c <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bb18:	30 91 b7 0d 	lds	r19, 0x0DB7
    bb1c:	62 2d       	mov	r22, r2
    bb1e:	63 1b       	sub	r22, r19
    bb20:	ed 81       	ldd	r30, Y+5	; 0x05
    bb22:	fe 81       	ldd	r31, Y+6	; 0x06
    bb24:	80 81       	ld	r24, Z
    bb26:	28 e0       	ldi	r18, 0x08	; 8
    bb28:	48 e0       	ldi	r20, 0x08	; 8
    bb2a:	83 1b       	sub	r24, r19
    bb2c:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    bb30:	84 30       	cpi	r24, 0x04	; 4
    bb32:	60 f0       	brcs	.+24     	; 0xbb4c <collision_detect_level+0x214>
				{
					s->vy =  0;
    bb34:	ed 81       	ldd	r30, Y+5	; 0x05
    bb36:	fe 81       	ldd	r31, Y+6	; 0x06
    bb38:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    bb3a:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    bb3c:	d3 82       	std	Z+3, r13	; 0x03
    bb3e:	c2 82       	std	Z+2, r12	; 0x02
    bb40:	30 16       	cp	r3, r16
    bb42:	08 f4       	brcc	.+2      	; 0xbb46 <collision_detect_level+0x20e>
    bb44:	30 2e       	mov	r3, r16
    bb46:	13 15       	cp	r17, r3
    bb48:	08 f4       	brcc	.+2      	; 0xbb4c <collision_detect_level+0x214>
    bb4a:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bb4c:	43 94       	inc	r4
    bb4e:	4b cf       	rjmp	.-362    	; 0xb9e6 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    bb50:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    bb52:	ed 81       	ldd	r30, Y+5	; 0x05
    bb54:	fe 81       	ldd	r31, Y+6	; 0x06
    bb56:	85 81       	ldd	r24, Z+5	; 0x05
    bb58:	88 23       	and	r24, r24
    bb5a:	09 f4       	brne	.+2      	; 0xbb5e <collision_detect_level+0x226>
    bb5c:	e1 c0       	rjmp	.+450    	; 0xbd20 <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    bb5e:	c2 80       	ldd	r12, Z+2	; 0x02
    bb60:	d3 80       	ldd	r13, Z+3	; 0x03
    bb62:	56 01       	movw	r10, r12
    bb64:	23 e0       	ldi	r18, 0x03	; 3
    bb66:	b6 94       	lsr	r11
    bb68:	a7 94       	ror	r10
    bb6a:	2a 95       	dec	r18
    bb6c:	e1 f7       	brne	.-8      	; 0xbb66 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    bb6e:	f7 e0       	ldi	r31, 0x07	; 7
    bb70:	cf 0e       	add	r12, r31
    bb72:	d1 1c       	adc	r13, r1
    bb74:	33 e0       	ldi	r19, 0x03	; 3
    bb76:	d6 94       	lsr	r13
    bb78:	c7 94       	ror	r12
    bb7a:	3a 95       	dec	r19
    bb7c:	e1 f7       	brne	.-8      	; 0xbb76 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bb7e:	3a 2c       	mov	r3, r10
    bb80:	33 0c       	add	r3, r3
    bb82:	33 0c       	add	r3, r3
    bb84:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bb86:	4c 2c       	mov	r4, r12
    bb88:	44 0c       	add	r4, r4
    bb8a:	44 0c       	add	r4, r4
    bb8c:	44 0c       	add	r4, r4
    bb8e:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    bb90:	37 01       	movw	r6, r14
    bb92:	8f ef       	ldi	r24, 0xFF	; 255
    bb94:	68 1a       	sub	r6, r24
    bb96:	78 0a       	sbc	r7, r24
    bb98:	43 e0       	ldi	r20, 0x03	; 3
    bb9a:	66 0c       	add	r6, r6
    bb9c:	77 1c       	adc	r7, r7
    bb9e:	4a 95       	dec	r20
    bba0:	e1 f7       	brne	.-8      	; 0xbb9a <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bba2:	98 e0       	ldi	r25, 0x08	; 8
    bba4:	59 9e       	mul	r5, r25
    bba6:	40 01       	movw	r8, r0
    bba8:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    bbaa:	53 e0       	ldi	r21, 0x03	; 3
    bbac:	ee 0c       	add	r14, r14
    bbae:	ff 1c       	adc	r15, r15
    bbb0:	5a 95       	dec	r21
    bbb2:	e1 f7       	brne	.-8      	; 0xbbac <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bbb4:	51 2c       	mov	r5, r1
    bbb6:	fc 81       	ldd	r31, Y+4	; 0x04
    bbb8:	5f 16       	cp	r5, r31
    bbba:	09 f4       	brne	.+2      	; 0xbbbe <collision_detect_level+0x286>
    bbbc:	b1 c0       	rjmp	.+354    	; 0xbd20 <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    bbbe:	ed 81       	ldd	r30, Y+5	; 0x05
    bbc0:	fe 81       	ldd	r31, Y+6	; 0x06
    bbc2:	85 81       	ldd	r24, Z+5	; 0x05
    bbc4:	87 ff       	sbrs	r24, 7
    bbc6:	47 c0       	rjmp	.+142    	; 0xbc56 <collision_detect_level+0x31e>
    bbc8:	45 2d       	mov	r20, r5
    bbca:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    bbcc:	6a 81       	ldd	r22, Y+2	; 0x02
    bbce:	80 91 d8 0f 	lds	r24, 0x0FD8
    bbd2:	90 91 d9 0f 	lds	r25, 0x0FD9
    bbd6:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    bbda:	28 2e       	mov	r2, r24
    bbdc:	45 2d       	mov	r20, r5
    bbde:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    bbe0:	6a 81       	ldd	r22, Y+2	; 0x02
    bbe2:	80 91 d8 0f 	lds	r24, 0x0FD8
    bbe6:	90 91 d9 0f 	lds	r25, 0x0FD9
    bbea:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    bbee:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bbf0:	82 2d       	mov	r24, r2
    bbf2:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    bbf6:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bbf8:	80 2f       	mov	r24, r16
    bbfa:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    bbfe:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bc00:	22 20       	and	r2, r2
    bc02:	71 f0       	breq	.+28     	; 0xbc20 <collision_detect_level+0x2e8>
    bc04:	30 91 bf 0d 	lds	r19, 0x0DBF
    bc08:	63 2d       	mov	r22, r3
    bc0a:	63 1b       	sub	r22, r19
    bc0c:	ed 81       	ldd	r30, Y+5	; 0x05
    bc0e:	fe 81       	ldd	r31, Y+6	; 0x06
    bc10:	82 81       	ldd	r24, Z+2	; 0x02
    bc12:	28 e0       	ldi	r18, 0x08	; 8
    bc14:	48 e0       	ldi	r20, 0x08	; 8
    bc16:	83 1b       	sub	r24, r19
    bc18:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    bc1c:	84 30       	cpi	r24, 0x04	; 4
    bc1e:	80 f4       	brcc	.+32     	; 0xbc40 <collision_detect_level+0x308>
    bc20:	00 23       	and	r16, r16
    bc22:	c9 f0       	breq	.+50     	; 0xbc56 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bc24:	30 91 bf 0d 	lds	r19, 0x0DBF
    bc28:	64 2d       	mov	r22, r4
    bc2a:	63 1b       	sub	r22, r19
    bc2c:	ed 81       	ldd	r30, Y+5	; 0x05
    bc2e:	fe 81       	ldd	r31, Y+6	; 0x06
    bc30:	82 81       	ldd	r24, Z+2	; 0x02
    bc32:	28 e0       	ldi	r18, 0x08	; 8
    bc34:	48 e0       	ldi	r20, 0x08	; 8
    bc36:	83 1b       	sub	r24, r19
    bc38:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    bc3c:	84 30       	cpi	r24, 0x04	; 4
    bc3e:	58 f0       	brcs	.+22     	; 0xbc56 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    bc40:	ed 81       	ldd	r30, Y+5	; 0x05
    bc42:	fe 81       	ldd	r31, Y+6	; 0x06
    bc44:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    bc46:	71 82       	std	Z+1, r7	; 0x01
    bc48:	60 82       	st	Z, r6
    bc4a:	20 16       	cp	r2, r16
    bc4c:	08 f4       	brcc	.+2      	; 0xbc50 <collision_detect_level+0x318>
    bc4e:	20 2e       	mov	r2, r16
    bc50:	12 15       	cp	r17, r2
    bc52:	08 f4       	brcc	.+2      	; 0xbc56 <collision_detect_level+0x31e>
    bc54:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    bc56:	ed 81       	ldd	r30, Y+5	; 0x05
    bc58:	fe 81       	ldd	r31, Y+6	; 0x06
    bc5a:	85 81       	ldd	r24, Z+5	; 0x05
    bc5c:	18 16       	cp	r1, r24
    bc5e:	0c f0       	brlt	.+2      	; 0xbc62 <collision_detect_level+0x32a>
    bc60:	5d c0       	rjmp	.+186    	; 0xbd1c <collision_detect_level+0x3e4>
    bc62:	60 81       	ld	r22, Z
    bc64:	71 81       	ldd	r23, Z+1	; 0x01
    bc66:	61 50       	subi	r22, 0x01	; 1
    bc68:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bc6a:	68 0d       	add	r22, r8
    bc6c:	79 1d       	adc	r23, r9
    bc6e:	83 e0       	ldi	r24, 0x03	; 3
    bc70:	76 95       	lsr	r23
    bc72:	67 95       	ror	r22
    bc74:	8a 95       	dec	r24
    bc76:	e1 f7       	brne	.-8      	; 0xbc70 <collision_detect_level+0x338>
    bc78:	45 2d       	mov	r20, r5
    bc7a:	4a 0d       	add	r20, r10
    bc7c:	80 91 d8 0f 	lds	r24, 0x0FD8
    bc80:	90 91 d9 0f 	lds	r25, 0x0FD9
    bc84:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    bc88:	28 2e       	mov	r2, r24
    bc8a:	ed 81       	ldd	r30, Y+5	; 0x05
    bc8c:	fe 81       	ldd	r31, Y+6	; 0x06
    bc8e:	60 81       	ld	r22, Z
    bc90:	71 81       	ldd	r23, Z+1	; 0x01
    bc92:	61 50       	subi	r22, 0x01	; 1
    bc94:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bc96:	68 0d       	add	r22, r8
    bc98:	79 1d       	adc	r23, r9
    bc9a:	93 e0       	ldi	r25, 0x03	; 3
    bc9c:	76 95       	lsr	r23
    bc9e:	67 95       	ror	r22
    bca0:	9a 95       	dec	r25
    bca2:	e1 f7       	brne	.-8      	; 0xbc9c <collision_detect_level+0x364>
    bca4:	45 2d       	mov	r20, r5
    bca6:	4c 0d       	add	r20, r12
    bca8:	80 91 d8 0f 	lds	r24, 0x0FD8
    bcac:	90 91 d9 0f 	lds	r25, 0x0FD9
    bcb0:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <get_level_tile>
    bcb4:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bcb6:	82 2d       	mov	r24, r2
    bcb8:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    bcbc:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bcbe:	80 2f       	mov	r24, r16
    bcc0:	0e 94 95 59 	call	0xb32a	; 0xb32a <solid_or_hazard_tile>
    bcc4:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bcc6:	22 20       	and	r2, r2
    bcc8:	71 f0       	breq	.+28     	; 0xbce6 <collision_detect_level+0x3ae>
    bcca:	30 91 bf 0d 	lds	r19, 0x0DBF
    bcce:	63 2d       	mov	r22, r3
    bcd0:	63 1b       	sub	r22, r19
    bcd2:	ed 81       	ldd	r30, Y+5	; 0x05
    bcd4:	fe 81       	ldd	r31, Y+6	; 0x06
    bcd6:	82 81       	ldd	r24, Z+2	; 0x02
    bcd8:	28 e0       	ldi	r18, 0x08	; 8
    bcda:	48 e0       	ldi	r20, 0x08	; 8
    bcdc:	83 1b       	sub	r24, r19
    bcde:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    bce2:	84 30       	cpi	r24, 0x04	; 4
    bce4:	80 f4       	brcc	.+32     	; 0xbd06 <collision_detect_level+0x3ce>
    bce6:	00 23       	and	r16, r16
    bce8:	c9 f0       	breq	.+50     	; 0xbd1c <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bcea:	30 91 bf 0d 	lds	r19, 0x0DBF
    bcee:	64 2d       	mov	r22, r4
    bcf0:	63 1b       	sub	r22, r19
    bcf2:	ed 81       	ldd	r30, Y+5	; 0x05
    bcf4:	fe 81       	ldd	r31, Y+6	; 0x06
    bcf6:	82 81       	ldd	r24, Z+2	; 0x02
    bcf8:	28 e0       	ldi	r18, 0x08	; 8
    bcfa:	48 e0       	ldi	r20, 0x08	; 8
    bcfc:	83 1b       	sub	r24, r19
    bcfe:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <pixel_overlap>
    bd02:	84 30       	cpi	r24, 0x04	; 4
    bd04:	58 f0       	brcs	.+22     	; 0xbd1c <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    bd06:	ed 81       	ldd	r30, Y+5	; 0x05
    bd08:	fe 81       	ldd	r31, Y+6	; 0x06
    bd0a:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    bd0c:	f1 82       	std	Z+1, r15	; 0x01
    bd0e:	e0 82       	st	Z, r14
    bd10:	20 16       	cp	r2, r16
    bd12:	08 f4       	brcc	.+2      	; 0xbd16 <collision_detect_level+0x3de>
    bd14:	20 2e       	mov	r2, r16
    bd16:	12 15       	cp	r17, r2
    bd18:	08 f4       	brcc	.+2      	; 0xbd1c <collision_detect_level+0x3e4>
    bd1a:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bd1c:	53 94       	inc	r5
    bd1e:	4b cf       	rjmp	.-362    	; 0xbbb6 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    bd20:	81 2f       	mov	r24, r17
    bd22:	26 96       	adiw	r28, 0x06	; 6
    bd24:	0f b6       	in	r0, 0x3f	; 63
    bd26:	f8 94       	cli
    bd28:	de bf       	out	0x3e, r29	; 62
    bd2a:	0f be       	out	0x3f, r0	; 63
    bd2c:	cd bf       	out	0x3d, r28	; 61
    bd2e:	df 91       	pop	r29
    bd30:	cf 91       	pop	r28
    bd32:	1f 91       	pop	r17
    bd34:	0f 91       	pop	r16
    bd36:	ff 90       	pop	r15
    bd38:	ef 90       	pop	r14
    bd3a:	df 90       	pop	r13
    bd3c:	cf 90       	pop	r12
    bd3e:	bf 90       	pop	r11
    bd40:	af 90       	pop	r10
    bd42:	9f 90       	pop	r9
    bd44:	8f 90       	pop	r8
    bd46:	7f 90       	pop	r7
    bd48:	6f 90       	pop	r6
    bd4a:	5f 90       	pop	r5
    bd4c:	4f 90       	pop	r4
    bd4e:	3f 90       	pop	r3
    bd50:	2f 90       	pop	r2
    bd52:	08 95       	ret

0000bd54 <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    bd54:	2f 92       	push	r2
    bd56:	3f 92       	push	r3
    bd58:	4f 92       	push	r4
    bd5a:	5f 92       	push	r5
    bd5c:	6f 92       	push	r6
    bd5e:	7f 92       	push	r7
    bd60:	8f 92       	push	r8
    bd62:	9f 92       	push	r9
    bd64:	af 92       	push	r10
    bd66:	bf 92       	push	r11
    bd68:	cf 92       	push	r12
    bd6a:	df 92       	push	r13
    bd6c:	ef 92       	push	r14
    bd6e:	ff 92       	push	r15
    bd70:	0f 93       	push	r16
    bd72:	1f 93       	push	r17
    bd74:	cf 93       	push	r28
    bd76:	df 93       	push	r29
    bd78:	00 d0       	rcall	.+0      	; 0xbd7a <animate_shot+0x26>
    bd7a:	00 d0       	rcall	.+0      	; 0xbd7c <animate_shot+0x28>
    bd7c:	1f 92       	push	r1
    bd7e:	cd b7       	in	r28, 0x3d	; 61
    bd80:	de b7       	in	r29, 0x3e	; 62
    bd82:	9a 83       	std	Y+2, r25	; 0x02
    bd84:	89 83       	std	Y+1, r24	; 0x01
    bd86:	3b 01       	movw	r6, r22
    bd88:	d4 2e       	mov	r13, r20
    bd8a:	4c 01       	movw	r8, r24
    bd8c:	29 e1       	ldi	r18, 0x19	; 25
    bd8e:	82 0e       	add	r8, r18
    bd90:	91 1c       	adc	r9, r1
    bd92:	40 96       	adiw	r24, 0x10	; 16
    bd94:	9d 83       	std	Y+5, r25	; 0x05
    bd96:	8c 83       	std	Y+4, r24	; 0x04
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bd98:	10 e0       	ldi	r17, 0x00	; 0
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
						game.enemies[j].shield -= player->shot[i].hit_count;
    bd9a:	35 e3       	ldi	r19, 0x35	; 53
    bd9c:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bd9e:	f4 01       	movw	r30, r8
    bda0:	80 81       	ld	r24, Z
    bda2:	88 23       	and	r24, r24
    bda4:	09 f4       	brne	.+2      	; 0xbda8 <animate_shot+0x54>
    bda6:	33 c1       	rjmp	.+614    	; 0xc00e <animate_shot+0x2ba>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bda8:	60 91 d1 0d 	lds	r22, 0x0DD1
    bdac:	34 97       	sbiw	r30, 0x04	; 4
    bdae:	80 81       	ld	r24, Z
    bdb0:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <LBMoveDelta>
    bdb4:	88 0f       	add	r24, r24
    bdb6:	99 1f       	adc	r25, r25
    bdb8:	ec 81       	ldd	r30, Y+4	; 0x04
    bdba:	fd 81       	ldd	r31, Y+5	; 0x05
    bdbc:	20 81       	ld	r18, Z
    bdbe:	31 81       	ldd	r19, Z+1	; 0x01
    bdc0:	82 0f       	add	r24, r18
    bdc2:	93 1f       	adc	r25, r19
    bdc4:	91 83       	std	Z+1, r25	; 0x01
    bdc6:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    bdc8:	60 91 d1 0d 	lds	r22, 0x0DD1
    bdcc:	f4 01       	movw	r30, r8
    bdce:	35 97       	sbiw	r30, 0x05	; 5
    bdd0:	80 81       	ld	r24, Z
    bdd2:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <LBMoveDelta>
    bdd6:	ec 81       	ldd	r30, Y+4	; 0x04
    bdd8:	fd 81       	ldd	r31, Y+5	; 0x05
    bdda:	42 81       	ldd	r20, Z+2	; 0x02
    bddc:	53 81       	ldd	r21, Z+3	; 0x03
    bdde:	84 0f       	add	r24, r20
    bde0:	95 1f       	adc	r25, r21
    bde2:	93 83       	std	Z+3, r25	; 0x03
    bde4:	82 83       	std	Z+2, r24	; 0x02
    bde6:	f1 2e       	mov	r15, r17
    bde8:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    bdea:	90 91 bf 0d 	lds	r25, 0x0DBF
    bdee:	48 2f       	mov	r20, r24
    bdf0:	49 1b       	sub	r20, r25
    bdf2:	60 81       	ld	r22, Z
    bdf4:	80 91 b7 0d 	lds	r24, 0x0DB7
    bdf8:	68 1b       	sub	r22, r24
    bdfa:	01 e0       	ldi	r16, 0x01	; 1
    bdfc:	21 e0       	ldi	r18, 0x01	; 1
    bdfe:	8f 2d       	mov	r24, r15
    be00:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    be04:	8c 81       	ldd	r24, Y+4	; 0x04
    be06:	9d 81       	ldd	r25, Y+5	; 0x05
    be08:	0e 94 02 5c 	call	0xb804	; 0xb804 <out_of_bounds>
    be0c:	81 11       	cpse	r24, r1
    be0e:	f1 c0       	rjmp	.+482    	; 0xbff2 <animate_shot+0x29e>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    be10:	41 e0       	ldi	r20, 0x01	; 1
    be12:	61 e0       	ldi	r22, 0x01	; 1
    be14:	8c 81       	ldd	r24, Y+4	; 0x04
    be16:	9d 81       	ldd	r25, Y+5	; 0x05
    be18:	0e 94 9c 5c 	call	0xb938	; 0xb938 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    be1c:	81 11       	cpse	r24, r1
    be1e:	e9 c0       	rjmp	.+466    	; 0xbff2 <animate_shot+0x29e>
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    be20:	90 91 b7 0d 	lds	r25, 0x0DB7
    be24:	8b ed       	ldi	r24, 0xDB	; 219
    be26:	48 2e       	mov	r4, r24
    be28:	8e e0       	ldi	r24, 0x0E	; 14
    be2a:	58 2e       	mov	r5, r24
    be2c:	21 2c       	mov	r2, r1
    be2e:	31 2c       	mov	r3, r1
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    be30:	f2 01       	movw	r30, r4
    be32:	80 81       	ld	r24, Z
    be34:	82 30       	cpi	r24, 0x02	; 2
    be36:	09 f4       	brne	.+2      	; 0xbe3a <animate_shot+0xe6>
    be38:	79 c0       	rjmp	.+242    	; 0xbf2c <animate_shot+0x1d8>
    be3a:	35 97       	sbiw	r30, 0x05	; 5
    be3c:	80 81       	ld	r24, Z
    be3e:	88 23       	and	r24, r24
    be40:	09 f4       	brne	.+2      	; 0xbe44 <animate_shot+0xf0>
    be42:	74 c0       	rjmp	.+232    	; 0xbf2c <animate_shot+0x1d8>
    be44:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    be46:	a0 80       	ld	r10, Z
    be48:	aa 0c       	add	r10, r10
    be4a:	aa 0c       	add	r10, r10
    be4c:	aa 0c       	add	r10, r10
    be4e:	31 97       	sbiw	r30, 0x01	; 1
    be50:	c0 80       	ld	r12, Z
    be52:	cc 0c       	add	r12, r12
    be54:	cc 0c       	add	r12, r12
    be56:	cc 0c       	add	r12, r12
    be58:	3a 97       	sbiw	r30, 0x0a	; 10
    be5a:	00 81       	ld	r16, Z
    be5c:	09 1b       	sub	r16, r25
    be5e:	ec 81       	ldd	r30, Y+4	; 0x04
    be60:	fd 81       	ldd	r31, Y+5	; 0x05
    be62:	80 81       	ld	r24, Z
    be64:	f2 01       	movw	r30, r4
    be66:	3a 97       	sbiw	r30, 0x0a	; 10
    be68:	e0 80       	ld	r14, Z
    be6a:	28 e0       	ldi	r18, 0x08	; 8
    be6c:	48 e0       	ldi	r20, 0x08	; 8
    be6e:	ec 81       	ldd	r30, Y+4	; 0x04
    be70:	fd 81       	ldd	r31, Y+5	; 0x05
    be72:	62 81       	ldd	r22, Z+2	; 0x02
    be74:	89 1b       	sub	r24, r25
    be76:	9b 83       	std	Y+3, r25	; 0x03
    be78:	0e 94 52 4e 	call	0x9ca4	; 0x9ca4 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    be7c:	9b 81       	ldd	r25, Y+3	; 0x03
    be7e:	88 23       	and	r24, r24
    be80:	09 f4       	brne	.+2      	; 0xbe84 <animate_shot+0x130>
    be82:	54 c0       	rjmp	.+168    	; 0xbf2c <animate_shot+0x1d8>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    be84:	80 91 de 0f 	lds	r24, 0x0FDE
    be88:	88 23       	and	r24, r24
    be8a:	21 f0       	breq	.+8      	; 0xbe94 <animate_shot+0x140>
    be8c:	80 91 d0 0d 	lds	r24, 0x0DD0
    be90:	82 30       	cpi	r24, 0x02	; 2
    be92:	29 f0       	breq	.+10     	; 0xbe9e <animate_shot+0x14a>
    be94:	41 e0       	ldi	r20, 0x01	; 1
    be96:	6f ef       	ldi	r22, 0xFF	; 255
    be98:	84 e0       	ldi	r24, 0x04	; 4
    be9a:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    be9e:	b2 9c       	mul	r11, r2
    bea0:	f0 01       	movw	r30, r0
    bea2:	b3 9c       	mul	r11, r3
    bea4:	f0 0d       	add	r31, r0
    bea6:	11 24       	eor	r1, r1
    bea8:	e1 52       	subi	r30, 0x21	; 33
    beaa:	f1 4f       	sbci	r31, 0xF1	; 241
    beac:	80 81       	ld	r24, Z
    beae:	d4 01       	movw	r26, r8
    beb0:	11 97       	sbiw	r26, 0x01	; 1
    beb2:	9c 91       	ld	r25, X
    beb4:	89 1b       	sub	r24, r25
    beb6:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    beb8:	18 16       	cp	r1, r24
    beba:	4c f1       	brlt	.+82     	; 0xbf0e <animate_shot+0x1ba>
						{
							SFX_ENEMY_EXPLODE;
    bebc:	80 91 de 0f 	lds	r24, 0x0FDE
    bec0:	88 23       	and	r24, r24
    bec2:	21 f0       	breq	.+8      	; 0xbecc <animate_shot+0x178>
    bec4:	80 91 d0 0d 	lds	r24, 0x0DD0
    bec8:	82 30       	cpi	r24, 0x02	; 2
    beca:	29 f0       	breq	.+10     	; 0xbed6 <animate_shot+0x182>
    becc:	41 e0       	ldi	r20, 0x01	; 1
    bece:	6f ef       	ldi	r22, 0xFF	; 255
    bed0:	86 e0       	ldi	r24, 0x06	; 6
    bed2:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    bed6:	b2 9c       	mul	r11, r2
    bed8:	c0 01       	movw	r24, r0
    beda:	b3 9c       	mul	r11, r3
    bedc:	90 0d       	add	r25, r0
    bede:	11 24       	eor	r1, r1
    bee0:	89 54       	subi	r24, 0x49	; 73
    bee2:	92 4f       	sbci	r25, 0xF2	; 242
    bee4:	fc 01       	movw	r30, r24
    bee6:	e0 5e       	subi	r30, 0xE0	; 224
    bee8:	fe 4f       	sbci	r31, 0xFE	; 254
    beea:	20 e1       	ldi	r18, 0x10	; 16
    beec:	20 83       	st	Z, r18
							game.enemies[j].active = 0;
    beee:	31 97       	sbiw	r30, 0x01	; 1
    bef0:	10 82       	st	Z, r1
							game.active_enemies--;
    bef2:	80 91 d2 0d 	lds	r24, 0x0DD2
    bef6:	81 50       	subi	r24, 0x01	; 1
    bef8:	80 93 d2 0d 	sts	0x0DD2, r24
							game.level_score += KILL_SCORE;
    befc:	80 91 bb 0d 	lds	r24, 0x0DBB
    bf00:	90 91 bc 0d 	lds	r25, 0x0DBC
    bf04:	c2 96       	adiw	r24, 0x32	; 50
    bf06:	90 93 bc 0d 	sts	0x0DBC, r25
    bf0a:	80 93 bb 0d 	sts	0x0DBB, r24
						}
						player->shot[i].active = 0;
    bf0e:	f4 01       	movw	r30, r8
    bf10:	10 82       	st	Z, r1
						player->active_shots--;
    bf12:	e9 81       	ldd	r30, Y+1	; 0x01
    bf14:	fa 81       	ldd	r31, Y+2	; 0x02
    bf16:	87 81       	ldd	r24, Z+7	; 0x07
    bf18:	81 50       	subi	r24, 0x01	; 1
    bf1a:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    bf1c:	01 e0       	ldi	r16, 0x01	; 1
    bf1e:	21 e0       	ldi	r18, 0x01	; 1
    bf20:	40 e0       	ldi	r20, 0x00	; 0
    bf22:	60 ee       	ldi	r22, 0xE0	; 224
    bf24:	8f 2d       	mov	r24, r15
    bf26:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
						break;
    bf2a:	0b c0       	rjmp	.+22     	; 0xbf42 <animate_shot+0x1ee>
    bf2c:	ff ef       	ldi	r31, 0xFF	; 255
    bf2e:	2f 1a       	sub	r2, r31
    bf30:	3f 0a       	sbc	r3, r31
    bf32:	25 e3       	ldi	r18, 0x35	; 53
    bf34:	42 0e       	add	r4, r18
    bf36:	51 1c       	adc	r5, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    bf38:	85 e0       	ldi	r24, 0x05	; 5
    bf3a:	28 16       	cp	r2, r24
    bf3c:	31 04       	cpc	r3, r1
    bf3e:	09 f0       	breq	.+2      	; 0xbf42 <animate_shot+0x1ee>
    bf40:	77 cf       	rjmp	.-274    	; 0xbe30 <animate_shot+0xdc>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    bf42:	f3 01       	movw	r30, r6
    bf44:	85 85       	ldd	r24, Z+13	; 0x0d
    bf46:	88 23       	and	r24, r24
    bf48:	09 f4       	brne	.+2      	; 0xbf4c <animate_shot+0x1f8>
    bf4a:	61 c0       	rjmp	.+194    	; 0xc00e <animate_shot+0x2ba>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bf4c:	90 91 b7 0d 	lds	r25, 0x0DB7
    bf50:	a4 84       	ldd	r10, Z+12	; 0x0c
    bf52:	aa 0c       	add	r10, r10
    bf54:	aa 0c       	add	r10, r10
    bf56:	aa 0c       	add	r10, r10
    bf58:	c3 84       	ldd	r12, Z+11	; 0x0b
    bf5a:	cc 0c       	add	r12, r12
    bf5c:	cc 0c       	add	r12, r12
    bf5e:	cc 0c       	add	r12, r12
    bf60:	00 81       	ld	r16, Z
    bf62:	09 1b       	sub	r16, r25
    bf64:	ec 81       	ldd	r30, Y+4	; 0x04
    bf66:	fd 81       	ldd	r31, Y+5	; 0x05
    bf68:	80 81       	ld	r24, Z
    bf6a:	f3 01       	movw	r30, r6
    bf6c:	e2 80       	ldd	r14, Z+2	; 0x02
    bf6e:	28 e0       	ldi	r18, 0x08	; 8
    bf70:	48 e0       	ldi	r20, 0x08	; 8
    bf72:	ec 81       	ldd	r30, Y+4	; 0x04
    bf74:	fd 81       	ldd	r31, Y+5	; 0x05
    bf76:	62 81       	ldd	r22, Z+2	; 0x02
    bf78:	89 1b       	sub	r24, r25
    bf7a:	0e 94 52 4e 	call	0x9ca4	; 0x9ca4 <LBCollides>
    bf7e:	88 23       	and	r24, r24
    bf80:	09 f4       	brne	.+2      	; 0xbf84 <animate_shot+0x230>
    bf82:	45 c0       	rjmp	.+138    	; 0xc00e <animate_shot+0x2ba>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    bf84:	80 91 de 0f 	lds	r24, 0x0FDE
    bf88:	88 23       	and	r24, r24
    bf8a:	21 f0       	breq	.+8      	; 0xbf94 <animate_shot+0x240>
    bf8c:	80 91 d0 0d 	lds	r24, 0x0DD0
    bf90:	82 30       	cpi	r24, 0x02	; 2
    bf92:	29 f0       	breq	.+10     	; 0xbf9e <animate_shot+0x24a>
    bf94:	41 e0       	ldi	r20, 0x01	; 1
    bf96:	6f ef       	ldi	r22, 0xFF	; 255
    bf98:	84 e0       	ldi	r24, 0x04	; 4
    bf9a:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    bf9e:	f3 01       	movw	r30, r6
    bfa0:	87 85       	ldd	r24, Z+15	; 0x0f
    bfa2:	f4 01       	movw	r30, r8
    bfa4:	31 97       	sbiw	r30, 0x01	; 1
    bfa6:	90 81       	ld	r25, Z
    bfa8:	89 1b       	sub	r24, r25
    bfaa:	f3 01       	movw	r30, r6
    bfac:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    bfae:	18 16       	cp	r1, r24
    bfb0:	04 f1       	brlt	.+64     	; 0xbff2 <animate_shot+0x29e>
							{
								SFX_PLAYER_EXPLODE;
    bfb2:	80 91 de 0f 	lds	r24, 0x0FDE
    bfb6:	88 23       	and	r24, r24
    bfb8:	21 f0       	breq	.+8      	; 0xbfc2 <animate_shot+0x26e>
    bfba:	80 91 d0 0d 	lds	r24, 0x0DD0
    bfbe:	82 30       	cpi	r24, 0x02	; 2
    bfc0:	29 f0       	breq	.+10     	; 0xbfcc <animate_shot+0x278>
    bfc2:	41 e0       	ldi	r20, 0x01	; 1
    bfc4:	6f ef       	ldi	r22, 0xFF	; 255
    bfc6:	85 e0       	ldi	r24, 0x05	; 5
    bfc8:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
								other_player->shield = 0;
    bfcc:	f3 01       	movw	r30, r6
    bfce:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    bfd0:	20 e1       	ldi	r18, 0x10	; 16
    bfd2:	20 87       	std	Z+8, r18	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    bfd4:	84 e5       	ldi	r24, 0x54	; 84
    bfd6:	68 16       	cp	r6, r24
    bfd8:	8e e0       	ldi	r24, 0x0E	; 14
    bfda:	78 06       	cpc	r7, r24
    bfdc:	51 f4       	brne	.+20     	; 0xbff2 <animate_shot+0x29e>
    bfde:	80 91 bb 0d 	lds	r24, 0x0DBB
    bfe2:	90 91 bc 0d 	lds	r25, 0x0DBC
    bfe6:	8c 59       	subi	r24, 0x9C	; 156
    bfe8:	9f 4f       	sbci	r25, 0xFF	; 255
    bfea:	90 93 bc 0d 	sts	0x0DBC, r25
    bfee:	80 93 bb 0d 	sts	0x0DBB, r24
							}
							player->shot[i].active = 0;
    bff2:	f4 01       	movw	r30, r8
    bff4:	10 82       	st	Z, r1
							player->active_shots--;
    bff6:	e9 81       	ldd	r30, Y+1	; 0x01
    bff8:	fa 81       	ldd	r31, Y+2	; 0x02
    bffa:	87 81       	ldd	r24, Z+7	; 0x07
    bffc:	81 50       	subi	r24, 0x01	; 1
    bffe:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c000:	01 e0       	ldi	r16, 0x01	; 1
    c002:	21 e0       	ldi	r18, 0x01	; 1
    c004:	40 e0       	ldi	r20, 0x00	; 0
    c006:	60 ee       	ldi	r22, 0xE0	; 224
    c008:	8f 2d       	mov	r24, r15
    c00a:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c00e:	1f 5f       	subi	r17, 0xFF	; 255
    c010:	f4 e1       	ldi	r31, 0x14	; 20
    c012:	8f 0e       	add	r8, r31
    c014:	91 1c       	adc	r9, r1
    c016:	8c 81       	ldd	r24, Y+4	; 0x04
    c018:	9d 81       	ldd	r25, Y+5	; 0x05
    c01a:	44 96       	adiw	r24, 0x14	; 20
    c01c:	9d 83       	std	Y+5, r25	; 0x05
    c01e:	8c 83       	std	Y+4, r24	; 0x04
    c020:	13 30       	cpi	r17, 0x03	; 3
    c022:	09 f0       	breq	.+2      	; 0xc026 <animate_shot+0x2d2>
    c024:	bc ce       	rjmp	.-648    	; 0xbd9e <animate_shot+0x4a>
						}
				}
			}
		}
	}
}
    c026:	0f 90       	pop	r0
    c028:	0f 90       	pop	r0
    c02a:	0f 90       	pop	r0
    c02c:	0f 90       	pop	r0
    c02e:	0f 90       	pop	r0
    c030:	df 91       	pop	r29
    c032:	cf 91       	pop	r28
    c034:	1f 91       	pop	r17
    c036:	0f 91       	pop	r16
    c038:	ff 90       	pop	r15
    c03a:	ef 90       	pop	r14
    c03c:	df 90       	pop	r13
    c03e:	cf 90       	pop	r12
    c040:	bf 90       	pop	r11
    c042:	af 90       	pop	r10
    c044:	9f 90       	pop	r9
    c046:	8f 90       	pop	r8
    c048:	7f 90       	pop	r7
    c04a:	6f 90       	pop	r6
    c04c:	5f 90       	pop	r5
    c04e:	4f 90       	pop	r4
    c050:	3f 90       	pop	r3
    c052:	2f 90       	pop	r2
    c054:	08 95       	ret

0000c056 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c056:	7f 92       	push	r7
    c058:	8f 92       	push	r8
    c05a:	9f 92       	push	r9
    c05c:	af 92       	push	r10
    c05e:	bf 92       	push	r11
    c060:	cf 92       	push	r12
    c062:	df 92       	push	r13
    c064:	ef 92       	push	r14
    c066:	ff 92       	push	r15
    c068:	0f 93       	push	r16
    c06a:	1f 93       	push	r17
    c06c:	cf 93       	push	r28
    c06e:	df 93       	push	r29
    c070:	1f 92       	push	r1
    c072:	cd b7       	in	r28, 0x3d	; 61
    c074:	de b7       	in	r29, 0x3e	; 62
    c076:	6c 01       	movw	r12, r24
    c078:	7b 01       	movw	r14, r22
    c07a:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c07c:	cb 01       	movw	r24, r22
    c07e:	29 83       	std	Y+1, r18	; 0x01
    c080:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c084:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c086:	29 81       	ldd	r18, Y+1	; 0x01
    c088:	20 9f       	mul	r18, r16
    c08a:	50 01       	movw	r10, r0
    c08c:	11 24       	eor	r1, r1
    c08e:	10 e0       	ldi	r17, 0x00	; 0
    c090:	81 2f       	mov	r24, r17
    c092:	90 e0       	ldi	r25, 0x00	; 0
    c094:	8a 15       	cp	r24, r10
    c096:	9b 05       	cpc	r25, r11
    c098:	54 f4       	brge	.+20     	; 0xc0ae <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c09a:	40 e0       	ldi	r20, 0x00	; 0
    c09c:	b4 01       	movw	r22, r8
    c09e:	81 2f       	mov	r24, r17
    c0a0:	87 0d       	add	r24, r7
    c0a2:	29 83       	std	Y+1, r18	; 0x01
    c0a4:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c0a8:	1f 5f       	subi	r17, 0xFF	; 255
    c0aa:	29 81       	ldd	r18, Y+1	; 0x01
    c0ac:	f1 cf       	rjmp	.-30     	; 0xc090 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c0ae:	f7 01       	movw	r30, r14
    c0b0:	84 81       	ldd	r24, Z+4	; 0x04
    c0b2:	88 23       	and	r24, r24
    c0b4:	51 f0       	breq	.+20     	; 0xc0ca <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c0b6:	f6 01       	movw	r30, r12
    c0b8:	80 81       	ld	r24, Z
    c0ba:	90 e1       	ldi	r25, 0x10	; 16
    c0bc:	98 27       	eor	r25, r24
    c0be:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c0c0:	40 e0       	ldi	r20, 0x00	; 0
    c0c2:	60 ee       	ldi	r22, 0xE0	; 224
    c0c4:	87 2d       	mov	r24, r7
    c0c6:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	}
	return anim->looped;
}
    c0ca:	f7 01       	movw	r30, r14
    c0cc:	84 81       	ldd	r24, Z+4	; 0x04
    c0ce:	0f 90       	pop	r0
    c0d0:	df 91       	pop	r29
    c0d2:	cf 91       	pop	r28
    c0d4:	1f 91       	pop	r17
    c0d6:	0f 91       	pop	r16
    c0d8:	ff 90       	pop	r15
    c0da:	ef 90       	pop	r14
    c0dc:	df 90       	pop	r13
    c0de:	cf 90       	pop	r12
    c0e0:	bf 90       	pop	r11
    c0e2:	af 90       	pop	r10
    c0e4:	9f 90       	pop	r9
    c0e6:	8f 90       	pop	r8
    c0e8:	7f 90       	pop	r7
    c0ea:	08 95       	ret

0000c0ec <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c0ec:	8f 92       	push	r8
    c0ee:	9f 92       	push	r9
    c0f0:	af 92       	push	r10
    c0f2:	bf 92       	push	r11
    c0f4:	cf 92       	push	r12
    c0f6:	df 92       	push	r13
    c0f8:	ef 92       	push	r14
    c0fa:	ff 92       	push	r15
    c0fc:	0f 93       	push	r16
    c0fe:	1f 93       	push	r17
    c100:	cf 93       	push	r28
    c102:	df 93       	push	r29
    c104:	ec 01       	movw	r28, r24
    c106:	c6 2e       	mov	r12, r22
    c108:	14 2f       	mov	r17, r20
    c10a:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c10c:	6c 81       	ldd	r22, Y+4	; 0x04
    c10e:	77 27       	eor	r23, r23
    c110:	67 fd       	sbrc	r22, 7
    c112:	70 95       	com	r23
    c114:	87 2f       	mov	r24, r23
    c116:	97 2f       	mov	r25, r23
    c118:	0e 94 b2 74 	call	0xe964	; 0xe964 <__floatsisf>
    c11c:	4b 01       	movw	r8, r22
    c11e:	5c 01       	movw	r10, r24
    c120:	8e 81       	ldd	r24, Y+6	; 0x06
    c122:	68 2f       	mov	r22, r24
    c124:	70 e0       	ldi	r23, 0x00	; 0
    c126:	80 e0       	ldi	r24, 0x00	; 0
    c128:	90 e0       	ldi	r25, 0x00	; 0
    c12a:	0e 94 b2 74 	call	0xe964	; 0xe964 <__floatsisf>
    c12e:	29 e8       	ldi	r18, 0x89	; 137
    c130:	38 e8       	ldi	r19, 0x88	; 136
    c132:	48 e8       	ldi	r20, 0x88	; 136
    c134:	5c e3       	ldi	r21, 0x3C	; 60
    c136:	0e 94 3e 75 	call	0xea7c	; 0xea7c <__mulsf3>
    c13a:	9b 01       	movw	r18, r22
    c13c:	ac 01       	movw	r20, r24
    c13e:	c5 01       	movw	r24, r10
    c140:	b4 01       	movw	r22, r8
    c142:	0e 94 1b 74 	call	0xe836	; 0xe836 <__addsf3>
    c146:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c14a:	69 37       	cpi	r22, 0x79	; 121
    c14c:	14 f4       	brge	.+4      	; 0xc152 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c14e:	6c 83       	std	Y+4, r22	; 0x04
    c150:	02 c0       	rjmp	.+4      	; 0xc156 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c152:	88 e7       	ldi	r24, 0x78	; 120
    c154:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c156:	60 91 d1 0d 	lds	r22, 0x0DD1
    c15a:	8d 81       	ldd	r24, Y+5	; 0x05
    c15c:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <LBMoveDelta>
    c160:	28 81       	ld	r18, Y
    c162:	39 81       	ldd	r19, Y+1	; 0x01
    c164:	82 0f       	add	r24, r18
    c166:	93 1f       	adc	r25, r19
    c168:	99 83       	std	Y+1, r25	; 0x01
    c16a:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c16c:	60 91 d1 0d 	lds	r22, 0x0DD1
    c170:	8c 81       	ldd	r24, Y+4	; 0x04
    c172:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <LBMoveDelta>
    c176:	ea 81       	ldd	r30, Y+2	; 0x02
    c178:	fb 81       	ldd	r31, Y+3	; 0x03
    c17a:	8e 0f       	add	r24, r30
    c17c:	9f 1f       	adc	r25, r31
    c17e:	9b 83       	std	Y+3, r25	; 0x03
    c180:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c182:	4d 2d       	mov	r20, r13
    c184:	61 2f       	mov	r22, r17
    c186:	ce 01       	movw	r24, r28
    c188:	0e 94 9c 5c 	call	0xb938	; 0xb938 <collision_detect_level>
    c18c:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c18e:	88 23       	and	r24, r24
    c190:	41 f0       	breq	.+16     	; 0xc1a2 <animate_sprite+0xb6>
    c192:	00 23       	and	r16, r16
    c194:	31 f0       	breq	.+12     	; 0xc1a2 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c196:	88 e0       	ldi	r24, 0x08	; 8
    c198:	e8 9e       	mul	r14, r24
    c19a:	70 01       	movw	r14, r0
    c19c:	11 24       	eor	r1, r1
    c19e:	fb 82       	std	Y+3, r15	; 0x03
    c1a0:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c1a2:	3a 81       	ldd	r19, Y+2	; 0x02
    c1a4:	80 91 bf 0d 	lds	r24, 0x0DBF
    c1a8:	43 2f       	mov	r20, r19
    c1aa:	48 1b       	sub	r20, r24
    c1ac:	98 81       	ld	r25, Y
    c1ae:	80 91 b7 0d 	lds	r24, 0x0DB7
    c1b2:	69 2f       	mov	r22, r25
    c1b4:	68 1b       	sub	r22, r24
    c1b6:	0d 2d       	mov	r16, r13
    c1b8:	21 2f       	mov	r18, r17
    c1ba:	8c 2d       	mov	r24, r12
    c1bc:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	return result;
}
    c1c0:	8b 2d       	mov	r24, r11
    c1c2:	df 91       	pop	r29
    c1c4:	cf 91       	pop	r28
    c1c6:	1f 91       	pop	r17
    c1c8:	0f 91       	pop	r16
    c1ca:	ff 90       	pop	r15
    c1cc:	ef 90       	pop	r14
    c1ce:	df 90       	pop	r13
    c1d0:	cf 90       	pop	r12
    c1d2:	bf 90       	pop	r11
    c1d4:	af 90       	pop	r10
    c1d6:	9f 90       	pop	r9
    c1d8:	8f 90       	pop	r8
    c1da:	08 95       	ret

0000c1dc <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c1dc:	ef 92       	push	r14
    c1de:	0f 93       	push	r16
    c1e0:	fc 01       	movw	r30, r24
    c1e2:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    c1e4:	90 85       	ldd	r25, Z+8	; 0x08
    c1e6:	94 ff       	sbrs	r25, 4
    c1e8:	0f c0       	rjmp	.+30     	; 0xc208 <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c1ea:	92 81       	ldd	r25, Z+2	; 0x02
    c1ec:	20 91 bf 0d 	lds	r18, 0x0DBF
    c1f0:	49 2f       	mov	r20, r25
    c1f2:	42 1b       	sub	r20, r18
    c1f4:	90 81       	ld	r25, Z
    c1f6:	20 91 b7 0d 	lds	r18, 0x0DB7
    c1fa:	69 2f       	mov	r22, r25
    c1fc:	62 1b       	sub	r22, r18
    c1fe:	04 85       	ldd	r16, Z+12	; 0x0c
    c200:	23 85       	ldd	r18, Z+11	; 0x0b
    c202:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
    c206:	23 c0       	rjmp	.+70     	; 0xc24e <animate_player+0x72>
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c208:	e1 2c       	mov	r14, r1
    c20a:	00 e0       	ldi	r16, 0x00	; 0
    c20c:	24 85       	ldd	r18, Z+12	; 0x0c
    c20e:	43 85       	ldd	r20, Z+11	; 0x0b
    c210:	68 2f       	mov	r22, r24
    c212:	cf 01       	movw	r24, r30
    c214:	0e 94 76 60 	call	0xc0ec	; 0xc0ec <animate_sprite>
    c218:	82 30       	cpi	r24, 0x02	; 2
    c21a:	38 f4       	brcc	.+14     	; 0xc22a <animate_player+0x4e>
		SFX_PLAYER_EXPLODE;
		game.player.shield = 0;
		game.player.flags = EXPLODING;
	}
#if JAMMA
    else if (game.time >= MAX_TIME  && !DEBUG_GODMODE) {
    c21c:	80 91 bd 0d 	lds	r24, 0x0DBD
    c220:	90 91 be 0d 	lds	r25, 0x0DBE
    c224:	8c 32       	cpi	r24, 0x2C	; 44
    c226:	91 40       	sbci	r25, 0x01	; 1
    c228:	90 f0       	brcs	.+36     	; 0xc24e <animate_player+0x72>
        SFX_PLAYER_EXPLODE;
    c22a:	80 91 de 0f 	lds	r24, 0x0FDE
    c22e:	88 23       	and	r24, r24
    c230:	21 f0       	breq	.+8      	; 0xc23a <animate_player+0x5e>
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
	{
		SFX_PLAYER_EXPLODE;
    c232:	80 91 d0 0d 	lds	r24, 0x0DD0
    c236:	82 30       	cpi	r24, 0x02	; 2
    c238:	29 f0       	breq	.+10     	; 0xc244 <animate_player+0x68>
    c23a:	41 e0       	ldi	r20, 0x01	; 1
    c23c:	6f ef       	ldi	r22, 0xFF	; 255
    c23e:	85 e0       	ldi	r24, 0x05	; 5
    c240:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
		game.player.shield = 0;
    c244:	10 92 e8 0d 	sts	0x0DE8, r1
		game.player.flags = EXPLODING;
    c248:	80 e1       	ldi	r24, 0x10	; 16
    c24a:	80 93 e1 0d 	sts	0x0DE1, r24
        SFX_PLAYER_EXPLODE;
        game.player.shield = 0;
        game.player.flags = EXPLODING;
    }
#endif
}
    c24e:	0f 91       	pop	r16
    c250:	ef 90       	pop	r14
    c252:	08 95       	ret

0000c254 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c254:	1f 93       	push	r17
    c256:	cf 93       	push	r28
    c258:	df 93       	push	r29
    c25a:	ec 01       	movw	r28, r24
    c25c:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c25e:	98 85       	ldd	r25, Y+8	; 0x08
    c260:	89 2f       	mov	r24, r25
    c262:	88 70       	andi	r24, 0x08	; 8
    c264:	93 ff       	sbrs	r25, 3
    c266:	14 c0       	rjmp	.+40     	; 0xc290 <update_spider_enemy+0x3c>
    c268:	2d 85       	ldd	r18, Y+13	; 0x0d
    c26a:	20 38       	cpi	r18, 0x80	; 128
    c26c:	89 f4       	brne	.+34     	; 0xc290 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c26e:	81 e0       	ldi	r24, 0x01	; 1
    c270:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c272:	8c e9       	ldi	r24, 0x9C	; 156
    c274:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c276:	88 ec       	ldi	r24, 0xC8	; 200
    c278:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c27a:	8c e3       	ldi	r24, 0x3C	; 60
    c27c:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c27e:	89 85       	ldd	r24, Y+9	; 0x09
    c280:	81 11       	cpse	r24, r1
    c282:	02 c0       	rjmp	.+4      	; 0xc288 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c284:	84 ec       	ldi	r24, 0xC4	; 196
    c286:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c288:	40 e0       	ldi	r20, 0x00	; 0
    c28a:	68 e5       	ldi	r22, 0x58	; 88
    c28c:	70 e3       	ldi	r23, 0x30	; 48
    c28e:	19 c0       	rjmp	.+50     	; 0xc2c2 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c290:	90 ff       	sbrs	r25, 0
    c292:	0f c0       	rjmp	.+30     	; 0xc2b2 <update_spider_enemy+0x5e>
    c294:	9e 81       	ldd	r25, Y+6	; 0x06
    c296:	91 11       	cpse	r25, r1
    c298:	0c c0       	rjmp	.+24     	; 0xc2b2 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c29a:	88 e0       	ldi	r24, 0x08	; 8
    c29c:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c29e:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c2a0:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c2a2:	89 85       	ldd	r24, Y+9	; 0x09
    c2a4:	81 11       	cpse	r24, r1
    c2a6:	03 c0       	rjmp	.+6      	; 0xc2ae <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c2a8:	81 e0       	ldi	r24, 0x01	; 1
    c2aa:	89 87       	std	Y+9, r24	; 0x09
    c2ac:	0d c0       	rjmp	.+26     	; 0xc2c8 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c2ae:	19 86       	std	Y+9, r1	; 0x09
    c2b0:	0b c0       	rjmp	.+22     	; 0xc2c8 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c2b2:	88 23       	and	r24, r24
    c2b4:	49 f0       	breq	.+18     	; 0xc2c8 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c2b6:	ce 01       	movw	r24, r28
    c2b8:	85 96       	adiw	r24, 0x25	; 37
    c2ba:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c2be:	40 e0       	ldi	r20, 0x00	; 0
    c2c0:	bc 01       	movw	r22, r24
    c2c2:	81 2f       	mov	r24, r17
    c2c4:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	}
	e->frame_count++;
    c2c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    c2ca:	8f 5f       	subi	r24, 0xFF	; 255
    c2cc:	8d 87       	std	Y+13, r24	; 0x0d
}
    c2ce:	df 91       	pop	r29
    c2d0:	cf 91       	pop	r28
    c2d2:	1f 91       	pop	r17
    c2d4:	08 95       	ret

0000c2d6 <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c2d6:	cf 93       	push	r28
    c2d8:	fc 01       	movw	r30, r24
    c2da:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c2dc:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c2de:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    c2e0:	40 91 d9 0d 	lds	r20, 0x0DD9
    c2e4:	50 91 da 0d 	lds	r21, 0x0DDA
    c2e8:	20 81       	ld	r18, Z
    c2ea:	31 81       	ldd	r19, Z+1	; 0x01
    c2ec:	85 96       	adiw	r24, 0x25	; 37
    c2ee:	24 17       	cp	r18, r20
    c2f0:	35 07       	cpc	r19, r21
    c2f2:	38 f4       	brcc	.+14     	; 0xc302 <update_turret_enemy+0x2c>
    c2f4:	24 85       	ldd	r18, Z+12	; 0x0c
    c2f6:	26 30       	cpi	r18, 0x06	; 6
    c2f8:	21 f0       	breq	.+8      	; 0xc302 <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c2fa:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c2fe:	41 e0       	ldi	r20, 0x01	; 1
    c300:	03 c0       	rjmp	.+6      	; 0xc308 <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c302:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c306:	40 e0       	ldi	r20, 0x00	; 0
    c308:	bc 01       	movw	r22, r24
    c30a:	8c 2f       	mov	r24, r28
	}
}
    c30c:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c30e:	0c 94 b5 4e 	jmp	0x9d6a	; 0x9d6a <LBMapSprite>

0000c312 <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c312:	cf 93       	push	r28
    c314:	fc 01       	movw	r30, r24
    c316:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c318:	82 ee       	ldi	r24, 0xE2	; 226
    c31a:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c31c:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c31e:	cf 01       	movw	r24, r30
    c320:	85 96       	adiw	r24, 0x25	; 37
    c322:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c326:	40 e0       	ldi	r20, 0x00	; 0
    c328:	bc 01       	movw	r22, r24
    c32a:	8c 2f       	mov	r24, r28
}
    c32c:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c32e:	0c 94 b5 4e 	jmp	0x9d6a	; 0x9d6a <LBMapSprite>

0000c332 <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c332:	cf 93       	push	r28
    c334:	fc 01       	movw	r30, r24
    c336:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c338:	8a e0       	ldi	r24, 0x0A	; 10
    c33a:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c33c:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c33e:	cf 01       	movw	r24, r30
    c340:	85 96       	adiw	r24, 0x25	; 37
    c342:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c346:	40 e0       	ldi	r20, 0x00	; 0
    c348:	bc 01       	movw	r22, r24
    c34a:	8c 2f       	mov	r24, r28
}
    c34c:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c34e:	0c 94 b5 4e 	jmp	0x9d6a	; 0x9d6a <LBMapSprite>

0000c352 <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    c352:	cf 93       	push	r28
    c354:	fc 01       	movw	r30, r24
    c356:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    c358:	84 e1       	ldi	r24, 0x14	; 20
    c35a:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    c35c:	80 91 d1 0d 	lds	r24, 0x0DD1
    c360:	6c e3       	ldi	r22, 0x3C	; 60
    c362:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    c366:	91 11       	cpse	r25, r1
    c368:	03 c0       	rjmp	.+6      	; 0xc370 <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    c36a:	94 81       	ldd	r25, Z+4	; 0x04
    c36c:	91 95       	neg	r25
    c36e:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c370:	cf 01       	movw	r24, r30
    c372:	85 96       	adiw	r24, 0x25	; 37
    c374:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c378:	40 e0       	ldi	r20, 0x00	; 0
    c37a:	bc 01       	movw	r22, r24
    c37c:	8c 2f       	mov	r24, r28
}
    c37e:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c380:	0c 94 b5 4e 	jmp	0x9d6a	; 0x9d6a <LBMapSprite>

0000c384 <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c384:	cf 93       	push	r28
    c386:	fc 01       	movw	r30, r24
    c388:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c38a:	8e e1       	ldi	r24, 0x1E	; 30
    c38c:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c38e:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c390:	cf 01       	movw	r24, r30
    c392:	85 96       	adiw	r24, 0x25	; 37
    c394:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c398:	40 e0       	ldi	r20, 0x00	; 0
    c39a:	bc 01       	movw	r22, r24
    c39c:	8c 2f       	mov	r24, r28
}
    c39e:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c3a0:	0c 94 b5 4e 	jmp	0x9d6a	; 0x9d6a <LBMapSprite>

0000c3a4 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c3a4:	cf 93       	push	r28
    c3a6:	fc 01       	movw	r30, r24
    c3a8:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c3aa:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c3ac:	8e e1       	ldi	r24, 0x1E	; 30
    c3ae:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c3b0:	80 91 cc 0d 	lds	r24, 0x0DCC
    c3b4:	82 30       	cpi	r24, 0x02	; 2
    c3b6:	11 f4       	brne	.+4      	; 0xc3bc <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c3b8:	82 ee       	ldi	r24, 0xE2	; 226
    c3ba:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c3bc:	22 81       	ldd	r18, Z+2	; 0x02
    c3be:	33 81       	ldd	r19, Z+3	; 0x03
    c3c0:	24 50       	subi	r18, 0x04	; 4
    c3c2:	31 09       	sbc	r19, r1
    c3c4:	2d 3b       	cpi	r18, 0xBD	; 189
    c3c6:	31 05       	cpc	r19, r1
    c3c8:	38 f0       	brcs	.+14     	; 0xc3d8 <update_level_hazard+0x34>
    c3ca:	27 85       	ldd	r18, Z+15	; 0x0f
    c3cc:	88 e0       	ldi	r24, 0x08	; 8
    c3ce:	28 9f       	mul	r18, r24
    c3d0:	90 01       	movw	r18, r0
    c3d2:	11 24       	eor	r1, r1
    c3d4:	33 83       	std	Z+3, r19	; 0x03
    c3d6:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c3d8:	cf 01       	movw	r24, r30
    c3da:	85 96       	adiw	r24, 0x25	; 37
    c3dc:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c3e0:	40 e0       	ldi	r20, 0x00	; 0
    c3e2:	bc 01       	movw	r22, r24
    c3e4:	8c 2f       	mov	r24, r28
}
    c3e6:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c3e8:	0c 94 b5 4e 	jmp	0x9d6a	; 0x9d6a <LBMapSprite>

0000c3ec <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c3ec:	cf 93       	push	r28
    c3ee:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c3f0:	0c 96       	adiw	r24, 0x0c	; 12
    c3f2:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    c3f6:	40 e0       	ldi	r20, 0x00	; 0
    c3f8:	bc 01       	movw	r22, r24
    c3fa:	8c 2f       	mov	r24, r28
}
    c3fc:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c3fe:	0c 94 b5 4e 	jmp	0x9d6a	; 0x9d6a <LBMapSprite>

0000c402 <update_enemies>:
}

void update_enemies()
{
    c402:	cf 92       	push	r12
    c404:	df 92       	push	r13
    c406:	ef 92       	push	r14
    c408:	ff 92       	push	r15
    c40a:	0f 93       	push	r16
    c40c:	1f 93       	push	r17
    c40e:	cf 93       	push	r28
    c410:	df 93       	push	r29
    c412:	8a ed       	ldi	r24, 0xDA	; 218
    c414:	e8 2e       	mov	r14, r24
    c416:	8e e0       	ldi	r24, 0x0E	; 14
    c418:	f8 2e       	mov	r15, r24
    c41a:	cf ec       	ldi	r28, 0xCF	; 207
    c41c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c41e:	19 e0       	ldi	r17, 0x09	; 9
    c420:	f7 01       	movw	r30, r14
    c422:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c424:	80 81       	ld	r24, Z
    c426:	97 01       	movw	r18, r14
    c428:	21 50       	subi	r18, 0x01	; 1
    c42a:	31 09       	sbc	r19, r1
    c42c:	69 01       	movw	r12, r18
    c42e:	84 ff       	sbrs	r24, 4
    c430:	0d c0       	rjmp	.+26     	; 0xc44c <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c432:	d7 01       	movw	r26, r14
    c434:	0c 91       	ld	r16, X
    c436:	f9 01       	movw	r30, r18
    c438:	20 81       	ld	r18, Z
    c43a:	41 2f       	mov	r20, r17
    c43c:	be 01       	movw	r22, r28
    c43e:	63 5d       	subi	r22, 0xD3	; 211
    c440:	7f 4f       	sbci	r23, 0xFF	; 255
    c442:	ce 01       	movw	r24, r28
    c444:	08 96       	adiw	r24, 0x08	; 8
    c446:	0e 94 2b 60 	call	0xc056	; 0xc056 <map_explosion>
    c44a:	2e c0       	rjmp	.+92     	; 0xc4a8 <update_enemies+0xa6>
    c44c:	f7 01       	movw	r30, r14
    c44e:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c450:	80 81       	ld	r24, Z
    c452:	88 23       	and	r24, r24
    c454:	49 f1       	breq	.+82     	; 0xc4a8 <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c456:	d7 01       	movw	r26, r14
    c458:	11 96       	adiw	r26, 0x01	; 1
    c45a:	ec 91       	ld	r30, X
    c45c:	8e 2f       	mov	r24, r30
    c45e:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c460:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c462:	89 30       	cpi	r24, 0x09	; 9
    c464:	91 05       	cpc	r25, r1
    c466:	e8 f4       	brcc	.+58     	; 0xc4a2 <update_enemies+0xa0>
    c468:	fc 01       	movw	r30, r24
    c46a:	e8 5c       	subi	r30, 0xC8	; 200
    c46c:	ff 4f       	sbci	r31, 0xFF	; 255
    c46e:	0c 94 14 74 	jmp	0xe828	; 0xe828 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c472:	ce 01       	movw	r24, r28
    c474:	0e 94 2a 61 	call	0xc254	; 0xc254 <update_spider_enemy>
    c478:	17 c0       	rjmp	.+46     	; 0xc4a8 <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    c47a:	ce 01       	movw	r24, r28
    c47c:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <update_turret_enemy>
    c480:	13 c0       	rjmp	.+38     	; 0xc4a8 <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c482:	ce 01       	movw	r24, r28
    c484:	0e 94 89 61 	call	0xc312	; 0xc312 <update_drone_enemy>
    c488:	0f c0       	rjmp	.+30     	; 0xc4a8 <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c48a:	ce 01       	movw	r24, r28
    c48c:	0e 94 c2 61 	call	0xc384	; 0xc384 <update_shark_enemy>
    c490:	0b c0       	rjmp	.+22     	; 0xc4a8 <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c492:	ce 01       	movw	r24, r28
    c494:	0e 94 99 61 	call	0xc332	; 0xc332 <update_globe_enemy>
    c498:	07 c0       	rjmp	.+14     	; 0xc4a8 <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    c49a:	ce 01       	movw	r24, r28
    c49c:	0e 94 a9 61 	call	0xc352	; 0xc352 <update_xwing_enemy>
    c4a0:	03 c0       	rjmp	.+6      	; 0xc4a8 <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    c4a2:	ce 01       	movw	r24, r28
    c4a4:	0e 94 d2 61 	call	0xc3a4	; 0xc3a4 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c4a8:	f6 01       	movw	r30, r12
    c4aa:	90 81       	ld	r25, Z
    c4ac:	d7 01       	movw	r26, r14
    c4ae:	8c 91       	ld	r24, X
    c4b0:	98 9f       	mul	r25, r24
    c4b2:	10 0d       	add	r17, r0
    c4b4:	11 24       	eor	r1, r1
    c4b6:	b5 e3       	ldi	r27, 0x35	; 53
    c4b8:	eb 0e       	add	r14, r27
    c4ba:	f1 1c       	adc	r15, r1
    c4bc:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c4be:	e3 ee       	ldi	r30, 0xE3	; 227
    c4c0:	ee 16       	cp	r14, r30
    c4c2:	ef e0       	ldi	r30, 0x0F	; 15
    c4c4:	fe 06       	cpc	r15, r30
    c4c6:	09 f0       	breq	.+2      	; 0xc4ca <update_enemies+0xc8>
    c4c8:	ab cf       	rjmp	.-170    	; 0xc420 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c4ca:	df 91       	pop	r29
    c4cc:	cf 91       	pop	r28
    c4ce:	1f 91       	pop	r17
    c4d0:	0f 91       	pop	r16
    c4d2:	ff 90       	pop	r15
    c4d4:	ef 90       	pop	r14
    c4d6:	df 90       	pop	r13
    c4d8:	cf 90       	pop	r12
    c4da:	08 95       	ret

0000c4dc <update_enemy_shots>:

void update_enemy_shots()
{
    c4dc:	6f 92       	push	r6
    c4de:	7f 92       	push	r7
    c4e0:	9f 92       	push	r9
    c4e2:	af 92       	push	r10
    c4e4:	bf 92       	push	r11
    c4e6:	cf 92       	push	r12
    c4e8:	df 92       	push	r13
    c4ea:	ef 92       	push	r14
    c4ec:	ff 92       	push	r15
    c4ee:	0f 93       	push	r16
    c4f0:	1f 93       	push	r17
    c4f2:	cf 93       	push	r28
    c4f4:	df 93       	push	r29
    c4f6:	1f 92       	push	r1
    c4f8:	cd b7       	in	r28, 0x3d	; 61
    c4fa:	de b7       	in	r29, 0x3e	; 62
    c4fc:	8d ed       	ldi	r24, 0xDD	; 221
    c4fe:	68 2e       	mov	r6, r24
    c500:	8e e0       	ldi	r24, 0x0E	; 14
    c502:	78 2e       	mov	r7, r24
    c504:	0a ee       	ldi	r16, 0xEA	; 234
    c506:	1e e0       	ldi	r17, 0x0E	; 14
    c508:	94 ee       	ldi	r25, 0xE4	; 228
    c50a:	e9 2e       	mov	r14, r25
    c50c:	9e e0       	ldi	r25, 0x0E	; 14
    c50e:	f9 2e       	mov	r15, r25
    c510:	25 ee       	ldi	r18, 0xE5	; 229
    c512:	a2 2e       	mov	r10, r18
    c514:	2e e0       	ldi	r18, 0x0E	; 14
    c516:	b2 2e       	mov	r11, r18
    c518:	30 e1       	ldi	r19, 0x10	; 16
    c51a:	d3 2e       	mov	r13, r19
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c51c:	cc 24       	eor	r12, r12
    c51e:	c3 94       	inc	r12
    c520:	90 ef       	ldi	r25, 0xF0	; 240
    c522:	9d 0d       	add	r25, r13
    c524:	6f ef       	ldi	r22, 0xFF	; 255
    c526:	6d 0d       	add	r22, r13
    c528:	f3 01       	movw	r30, r6
    c52a:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c52c:	80 81       	ld	r24, Z
    c52e:	35 97       	sbiw	r30, 0x05	; 5
    c530:	82 30       	cpi	r24, 0x02	; 2
    c532:	09 f4       	brne	.+2      	; 0xc536 <update_enemy_shots+0x5a>
    c534:	5b c0       	rjmp	.+182    	; 0xc5ec <update_enemy_shots+0x110>
    c536:	20 81       	ld	r18, Z
    c538:	22 23       	and	r18, r18
    c53a:	09 f4       	brne	.+2      	; 0xc53e <update_enemy_shots+0x62>
    c53c:	57 c0       	rjmp	.+174    	; 0xc5ec <update_enemy_shots+0x110>
    c53e:	d3 01       	movw	r26, r6
    c540:	2c 91       	ld	r18, X
    c542:	2c 33       	cpi	r18, 0x3C	; 60
    c544:	08 f4       	brcc	.+2      	; 0xc548 <update_enemy_shots+0x6c>
    c546:	52 c0       	rjmp	.+164    	; 0xc5ec <update_enemy_shots+0x110>
		{
			game.enemies[i].shot_frame_count = 0;	
    c548:	1c 92       	st	X, r1
    c54a:	f8 01       	movw	r30, r16
    c54c:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c54e:	20 81       	ld	r18, Z
    c550:	27 30       	cpi	r18, 0x07	; 7
    c552:	09 f0       	breq	.+2      	; 0xc556 <update_enemy_shots+0x7a>
    c554:	52 c0       	rjmp	.+164    	; 0xc5fa <update_enemy_shots+0x11e>
    c556:	f8 01       	movw	r30, r16
				{
					if (!game.enemies[i].shot[j].active)
    c558:	22 91       	ld	r18, -Z
    c55a:	21 11       	cpse	r18, r1
    c55c:	42 c0       	rjmp	.+132    	; 0xc5e2 <update_enemy_shots+0x106>
					{
						game.enemies[i].shot[j].active = 1;
    c55e:	c0 82       	st	Z, r12
    c560:	f3 01       	movw	r30, r6
    c562:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c564:	20 81       	ld	r18, Z
    c566:	31 81       	ldd	r19, Z+1	; 0x01
    c568:	f3 01       	movw	r30, r6
    c56a:	34 83       	std	Z+4, r19	; 0x04
    c56c:	23 83       	std	Z+3, r18	; 0x03
    c56e:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c570:	40 81       	ld	r20, Z
    c572:	51 81       	ldd	r21, Z+1	; 0x01
    c574:	fa 01       	movw	r30, r20
    c576:	e8 7f       	andi	r30, 0xF8	; 248
    c578:	16 96       	adiw	r26, 0x06	; 6
    c57a:	fc 93       	st	X, r31
    c57c:	ee 93       	st	-X, r30
    c57e:	15 97       	sbiw	r26, 0x05	; 5
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c580:	84 30       	cpi	r24, 0x04	; 4
    c582:	11 f4       	brne	.+4      	; 0xc588 <update_enemy_shots+0xac>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c584:	f8 01       	movw	r30, r16
    c586:	15 c0       	rjmp	.+42     	; 0xc5b2 <update_enemy_shots+0xd6>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c588:	85 30       	cpi	r24, 0x05	; 5
    c58a:	71 f4       	brne	.+28     	; 0xc5a8 <update_enemy_shots+0xcc>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c58c:	f8 01       	movw	r30, r16
    c58e:	80 81       	ld	r24, Z
    c590:	d7 01       	movw	r26, r14
    c592:	8c 93       	st	X, r24
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c594:	20 91 db 0d 	lds	r18, 0x0DDB
    c598:	30 91 dc 0d 	lds	r19, 0x0DDC
    c59c:	42 17       	cp	r20, r18
    c59e:	53 07       	cpc	r21, r19
    c5a0:	00 f1       	brcs	.+64     	; 0xc5e2 <update_enemy_shots+0x106>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c5a2:	81 95       	neg	r24
    c5a4:	8c 93       	st	X, r24
    c5a6:	1d c0       	rjmp	.+58     	; 0xc5e2 <update_enemy_shots+0x106>
							}
						}
						else if (game.enemies[i].enemy_type == ENEMY_BOSS_EYE && i % 2 != 0)
    c5a8:	87 30       	cpi	r24, 0x07	; 7
    c5aa:	31 f4       	brne	.+12     	; 0xc5b8 <update_enemy_shots+0xdc>
    c5ac:	90 ff       	sbrs	r25, 0
    c5ae:	04 c0       	rjmp	.+8      	; 0xc5b8 <update_enemy_shots+0xdc>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shared.vx;
    c5b0:	f5 01       	movw	r30, r10
    c5b2:	80 81       	ld	r24, Z
    c5b4:	d7 01       	movw	r26, r14
    c5b6:	f6 cf       	rjmp	.-20     	; 0xc5a4 <update_enemy_shots+0xc8>
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c5b8:	f8 01       	movw	r30, r16
    c5ba:	90 80       	ld	r9, Z
    c5bc:	89 2d       	mov	r24, r9
    c5be:	81 95       	neg	r24
    c5c0:	d5 01       	movw	r26, r10
    c5c2:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    c5c4:	80 91 d9 0d 	lds	r24, 0x0DD9
    c5c8:	90 91 da 0d 	lds	r25, 0x0DDA
    c5cc:	82 17       	cp	r24, r18
    c5ce:	93 07       	cpc	r25, r19
    c5d0:	40 f0       	brcs	.+16     	; 0xc5e2 <update_enemy_shots+0x106>
    c5d2:	69 83       	std	Y+1, r22	; 0x01
    c5d4:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    c5d8:	69 81       	ldd	r22, Y+1	; 0x01
    c5da:	81 11       	cpse	r24, r1
    c5dc:	02 c0       	rjmp	.+4      	; 0xc5e2 <update_enemy_shots+0x106>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c5de:	f5 01       	movw	r30, r10
    c5e0:	90 82       	st	Z, r9
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c5e2:	c3 01       	movw	r24, r6
    c5e4:	03 96       	adiw	r24, 0x03	; 3
    c5e6:	0e 94 f6 61 	call	0xc3ec	; 0xc3ec <update_basic_shot>
    c5ea:	07 c0       	rjmp	.+14     	; 0xc5fa <update_enemy_shots+0x11e>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c5ec:	80 81       	ld	r24, Z
    c5ee:	88 23       	and	r24, r24
    c5f0:	21 f0       	breq	.+8      	; 0xc5fa <update_enemy_shots+0x11e>
		{
			game.enemies[i].shot_frame_count++;
    c5f2:	d3 01       	movw	r26, r6
    c5f4:	8c 91       	ld	r24, X
    c5f6:	8f 5f       	subi	r24, 0xFF	; 255
    c5f8:	8c 93       	st	X, r24
    c5fa:	d3 94       	inc	r13
    c5fc:	b5 e3       	ldi	r27, 0x35	; 53
    c5fe:	6b 0e       	add	r6, r27
    c600:	71 1c       	adc	r7, r1
    c602:	0b 5c       	subi	r16, 0xCB	; 203
    c604:	1f 4f       	sbci	r17, 0xFF	; 255
    c606:	e5 e3       	ldi	r30, 0x35	; 53
    c608:	ee 0e       	add	r14, r30
    c60a:	f1 1c       	adc	r15, r1
    c60c:	f5 e3       	ldi	r31, 0x35	; 53
    c60e:	af 0e       	add	r10, r31
    c610:	b1 1c       	adc	r11, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c612:	85 e1       	ldi	r24, 0x15	; 21
    c614:	d8 12       	cpse	r13, r24
    c616:	84 cf       	rjmp	.-248    	; 0xc520 <update_enemy_shots+0x44>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c618:	0f 90       	pop	r0
    c61a:	df 91       	pop	r29
    c61c:	cf 91       	pop	r28
    c61e:	1f 91       	pop	r17
    c620:	0f 91       	pop	r16
    c622:	ff 90       	pop	r15
    c624:	ef 90       	pop	r14
    c626:	df 90       	pop	r13
    c628:	cf 90       	pop	r12
    c62a:	bf 90       	pop	r11
    c62c:	af 90       	pop	r10
    c62e:	9f 90       	pop	r9
    c630:	7f 90       	pop	r7
    c632:	6f 90       	pop	r6
    c634:	08 95       	ret

0000c636 <animate_enemies>:

void animate_enemies()
{
    c636:	2f 92       	push	r2
    c638:	3f 92       	push	r3
    c63a:	4f 92       	push	r4
    c63c:	5f 92       	push	r5
    c63e:	6f 92       	push	r6
    c640:	7f 92       	push	r7
    c642:	8f 92       	push	r8
    c644:	9f 92       	push	r9
    c646:	af 92       	push	r10
    c648:	cf 92       	push	r12
    c64a:	df 92       	push	r13
    c64c:	ef 92       	push	r14
    c64e:	ff 92       	push	r15
    c650:	0f 93       	push	r16
    c652:	1f 93       	push	r17
    c654:	cf 93       	push	r28
    c656:	df 93       	push	r29
    c658:	00 d0       	rcall	.+0      	; 0xc65a <animate_enemies+0x24>
    c65a:	00 d0       	rcall	.+0      	; 0xc65c <animate_enemies+0x26>
    c65c:	cd b7       	in	r28, 0x3d	; 61
    c65e:	de b7       	in	r29, 0x3e	; 62
    c660:	46 ed       	ldi	r20, 0xD6	; 214
    c662:	24 2e       	mov	r2, r20
    c664:	4e e0       	ldi	r20, 0x0E	; 14
    c666:	34 2e       	mov	r3, r20
    c668:	59 ed       	ldi	r21, 0xD9	; 217
    c66a:	65 2e       	mov	r6, r21
    c66c:	5e e0       	ldi	r21, 0x0E	; 14
    c66e:	75 2e       	mov	r7, r21
    c670:	6a ed       	ldi	r22, 0xDA	; 218
    c672:	86 2e       	mov	r8, r22
    c674:	6e e0       	ldi	r22, 0x0E	; 14
    c676:	96 2e       	mov	r9, r22
    c678:	8f ec       	ldi	r24, 0xCF	; 207
    c67a:	9e e0       	ldi	r25, 0x0E	; 14
    c67c:	9c 83       	std	Y+4, r25	; 0x04
    c67e:	8b 83       	std	Y+3, r24	; 0x03
    c680:	a7 ed       	ldi	r26, 0xD7	; 215
    c682:	be e0       	ldi	r27, 0x0E	; 14
    c684:	ba 83       	std	Y+2, r27	; 0x02
    c686:	a9 83       	std	Y+1, r26	; 0x01
    c688:	41 2c       	mov	r4, r1
    c68a:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    c68c:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c68e:	70 e1       	ldi	r23, 0x10	; 16
    c690:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c692:	f1 01       	movw	r30, r2
    c694:	80 81       	ld	r24, Z
    c696:	88 23       	and	r24, r24
    c698:	09 f4       	brne	.+2      	; 0xc69c <animate_enemies+0x66>
    c69a:	ab c0       	rjmp	.+342    	; 0xc7f2 <animate_enemies+0x1bc>
    c69c:	a9 81       	ldd	r26, Y+1	; 0x01
    c69e:	ba 81       	ldd	r27, Y+2	; 0x02
    c6a0:	8c 91       	ld	r24, X
    c6a2:	84 fd       	sbrc	r24, 4
    c6a4:	a6 c0       	rjmp	.+332    	; 0xc7f2 <animate_enemies+0x1bc>
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c6a6:	eb 81       	ldd	r30, Y+3	; 0x03
    c6a8:	fc 81       	ldd	r31, Y+4	; 0x04
    c6aa:	20 81       	ld	r18, Z
    c6ac:	31 81       	ldd	r19, Z+1	; 0x01
    c6ae:	e0 91 b7 0d 	lds	r30, 0x0DB7
    c6b2:	f0 91 b8 0d 	lds	r31, 0x0DB8
    c6b6:	2e 17       	cp	r18, r30
    c6b8:	3f 07       	cpc	r19, r31
    c6ba:	10 f1       	brcs	.+68     	; 0xc700 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
    c6bc:	ab 81       	ldd	r26, Y+3	; 0x03
    c6be:	bc 81       	ldd	r27, Y+4	; 0x04
    c6c0:	12 96       	adiw	r26, 0x02	; 2
    c6c2:	ed 90       	ld	r14, X+
    c6c4:	fc 90       	ld	r15, X
    c6c6:	13 97       	sbiw	r26, 0x03	; 3
    c6c8:	80 91 bf 0d 	lds	r24, 0x0DBF
    c6cc:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c6ce:	e8 16       	cp	r14, r24
    c6d0:	f9 06       	cpc	r15, r25
    c6d2:	b0 f0       	brcs	.+44     	; 0xc700 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c6d4:	88 53       	subi	r24, 0x38	; 56
    c6d6:	9f 4f       	sbci	r25, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
    c6d8:	8e 15       	cp	r24, r14
    c6da:	9f 05       	cpc	r25, r15
    c6dc:	88 f0       	brcs	.+34     	; 0xc700 <animate_enemies+0xca>
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c6de:	cf 01       	movw	r24, r30
    c6e0:	80 52       	subi	r24, 0x20	; 32
    c6e2:	9f 4f       	sbci	r25, 0xFF	; 255
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c6e4:	82 17       	cp	r24, r18
    c6e6:	93 07       	cpc	r25, r19
    c6e8:	c8 f4       	brcc	.+50     	; 0xc71c <animate_enemies+0xe6>
    c6ea:	d2 01       	movw	r26, r4
    c6ec:	a5 52       	subi	r26, 0x25	; 37
    c6ee:	b1 4f       	sbci	r27, 0xF1	; 241
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c6f0:	8c 91       	ld	r24, X
    c6f2:	81 11       	cpse	r24, r1
    c6f4:	13 c0       	rjmp	.+38     	; 0xc71c <animate_enemies+0xe6>
    c6f6:	d4 01       	movw	r26, r8
    c6f8:	12 97       	sbiw	r26, 0x02	; 2
				 game.enemies[i].enemy_type == ENEMY_SPIDER &&
    c6fa:	8c 91       	ld	r24, X
    c6fc:	81 30       	cpi	r24, 0x01	; 1
    c6fe:	71 f4       	brne	.+28     	; 0xc71c <animate_enemies+0xe6>
				 game.enemies[i].direction == D_RIGHT))
			{
				game.enemies[i].active = 0;
    c700:	f1 01       	movw	r30, r2
    c702:	10 82       	st	Z, r1
				game.active_enemies--;
    c704:	80 91 d2 0d 	lds	r24, 0x0DD2
    c708:	81 50       	subi	r24, 0x01	; 1
    c70a:	80 93 d2 0d 	sts	0x0DD2, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c70e:	d4 01       	movw	r26, r8
    c710:	0c 91       	ld	r16, X
    c712:	f3 01       	movw	r30, r6
    c714:	20 81       	ld	r18, Z
    c716:	40 e0       	ldi	r20, 0x00	; 0
    c718:	60 ee       	ldi	r22, 0xE0	; 224
    c71a:	7e c0       	rjmp	.+252    	; 0xc818 <animate_enemies+0x1e2>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c71c:	02 2f       	mov	r16, r18
    c71e:	0e 1b       	sub	r16, r30
    c720:	20 91 e5 0d 	lds	r18, 0x0DE5
    c724:	22 0f       	add	r18, r18
    c726:	22 0f       	add	r18, r18
    c728:	22 0f       	add	r18, r18
    c72a:	40 91 e4 0d 	lds	r20, 0x0DE4
    c72e:	44 0f       	add	r20, r20
    c730:	44 0f       	add	r20, r20
    c732:	44 0f       	add	r20, r20
    c734:	80 91 d9 0d 	lds	r24, 0x0DD9
    c738:	98 e0       	ldi	r25, 0x08	; 8
    c73a:	a9 2e       	mov	r10, r25
    c73c:	38 e0       	ldi	r19, 0x08	; 8
    c73e:	c3 2e       	mov	r12, r19
    c740:	60 91 db 0d 	lds	r22, 0x0DDB
    c744:	8e 1b       	sub	r24, r30
    c746:	0e 94 52 4e 	call	0x9ca4	; 0x9ca4 <LBCollides>
    c74a:	88 23       	and	r24, r24
    c74c:	b9 f0       	breq	.+46     	; 0xc77c <animate_enemies+0x146>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c74e:	80 91 e1 0d 	lds	r24, 0x0DE1
    c752:	84 fd       	sbrc	r24, 4
    c754:	13 c0       	rjmp	.+38     	; 0xc77c <animate_enemies+0x146>
			)
			{
				SFX_PLAYER_EXPLODE;
    c756:	80 91 de 0f 	lds	r24, 0x0FDE
    c75a:	88 23       	and	r24, r24
    c75c:	21 f0       	breq	.+8      	; 0xc766 <animate_enemies+0x130>
    c75e:	80 91 d0 0d 	lds	r24, 0x0DD0
    c762:	82 30       	cpi	r24, 0x02	; 2
    c764:	29 f0       	breq	.+10     	; 0xc770 <animate_enemies+0x13a>
    c766:	41 e0       	ldi	r20, 0x01	; 1
    c768:	6f ef       	ldi	r22, 0xFF	; 255
    c76a:	85 e0       	ldi	r24, 0x05	; 5
    c76c:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
				game.player.shield = 0;
    c770:	10 92 e8 0d 	sts	0x0DE8, r1
				game.player.flags = EXPLODING;
    c774:	80 e1       	ldi	r24, 0x10	; 16
    c776:	80 93 e1 0d 	sts	0x0DE1, r24
				return;
    c77a:	74 c0       	rjmp	.+232    	; 0xc864 <animate_enemies+0x22e>
    c77c:	c2 01       	movw	r24, r4
    c77e:	89 54       	subi	r24, 0x49	; 73
    c780:	92 4f       	sbci	r25, 0xF2	; 242
    c782:	fc 01       	movw	r30, r24
    c784:	ec 5d       	subi	r30, 0xDC	; 220
    c786:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c788:	20 81       	ld	r18, Z
    c78a:	22 30       	cpi	r18, 0x02	; 2
    c78c:	69 f4       	brne	.+26     	; 0xc7a8 <animate_enemies+0x172>
    c78e:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c790:	e0 80       	ld	r14, Z
    c792:	01 e0       	ldi	r16, 0x01	; 1
    c794:	d4 01       	movw	r26, r8
    c796:	2c 91       	ld	r18, X
    c798:	f3 01       	movw	r30, r6
    c79a:	40 81       	ld	r20, Z
    c79c:	61 2f       	mov	r22, r17
    c79e:	8b 81       	ldd	r24, Y+3	; 0x03
    c7a0:	9c 81       	ldd	r25, Y+4	; 0x04
    c7a2:	0e 94 76 60 	call	0xc0ec	; 0xc0ec <animate_sprite>
    c7a6:	3b c0       	rjmp	.+118    	; 0xc81e <animate_enemies+0x1e8>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c7a8:	e1 2c       	mov	r14, r1
    c7aa:	00 e0       	ldi	r16, 0x00	; 0
    c7ac:	d4 01       	movw	r26, r8
    c7ae:	2c 91       	ld	r18, X
    c7b0:	f3 01       	movw	r30, r6
    c7b2:	40 81       	ld	r20, Z
    c7b4:	61 2f       	mov	r22, r17
    c7b6:	8b 81       	ldd	r24, Y+3	; 0x03
    c7b8:	9c 81       	ldd	r25, Y+4	; 0x04
    c7ba:	0e 94 76 60 	call	0xc0ec	; 0xc0ec <animate_sprite>
    c7be:	82 30       	cpi	r24, 0x02	; 2
    c7c0:	70 f1       	brcs	.+92     	; 0xc81e <animate_enemies+0x1e8>
			{
				SFX_ENEMY_EXPLODE;
    c7c2:	80 91 de 0f 	lds	r24, 0x0FDE
    c7c6:	88 23       	and	r24, r24
    c7c8:	21 f0       	breq	.+8      	; 0xc7d2 <animate_enemies+0x19c>
    c7ca:	80 91 d0 0d 	lds	r24, 0x0DD0
    c7ce:	82 30       	cpi	r24, 0x02	; 2
    c7d0:	29 f0       	breq	.+10     	; 0xc7dc <animate_enemies+0x1a6>
    c7d2:	41 e0       	ldi	r20, 0x01	; 1
    c7d4:	6f ef       	ldi	r22, 0xFF	; 255
    c7d6:	86 e0       	ldi	r24, 0x06	; 6
    c7d8:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c7dc:	a9 81       	ldd	r26, Y+1	; 0x01
    c7de:	ba 81       	ldd	r27, Y+2	; 0x02
    c7e0:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    c7e2:	f1 01       	movw	r30, r2
    c7e4:	10 82       	st	Z, r1
				game.active_enemies--;
    c7e6:	80 91 d2 0d 	lds	r24, 0x0DD2
    c7ea:	81 50       	subi	r24, 0x01	; 1
    c7ec:	80 93 d2 0d 	sts	0x0DD2, r24
    c7f0:	16 c0       	rjmp	.+44     	; 0xc81e <animate_enemies+0x1e8>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c7f2:	a9 81       	ldd	r26, Y+1	; 0x01
    c7f4:	ba 81       	ldd	r27, Y+2	; 0x02
    c7f6:	8c 91       	ld	r24, X
    c7f8:	84 ff       	sbrs	r24, 4
    c7fa:	11 c0       	rjmp	.+34     	; 0xc81e <animate_enemies+0x1e8>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c7fc:	eb 81       	ldd	r30, Y+3	; 0x03
    c7fe:	fc 81       	ldd	r31, Y+4	; 0x04
    c800:	42 81       	ldd	r20, Z+2	; 0x02
    c802:	80 91 bf 0d 	lds	r24, 0x0DBF
    c806:	48 1b       	sub	r20, r24
    c808:	60 81       	ld	r22, Z
    c80a:	80 91 b7 0d 	lds	r24, 0x0DB7
    c80e:	68 1b       	sub	r22, r24
    c810:	d4 01       	movw	r26, r8
    c812:	0c 91       	ld	r16, X
    c814:	f3 01       	movw	r30, r6
    c816:	20 81       	ld	r18, Z
    c818:	81 2f       	mov	r24, r17
    c81a:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c81e:	d4 01       	movw	r26, r8
    c820:	9c 91       	ld	r25, X
    c822:	f3 01       	movw	r30, r6
    c824:	80 81       	ld	r24, Z
    c826:	98 9f       	mul	r25, r24
    c828:	10 0d       	add	r17, r0
    c82a:	11 24       	eor	r1, r1
    c82c:	f5 e3       	ldi	r31, 0x35	; 53
    c82e:	2f 0e       	add	r2, r31
    c830:	31 1c       	adc	r3, r1
    c832:	85 e3       	ldi	r24, 0x35	; 53
    c834:	48 0e       	add	r4, r24
    c836:	51 1c       	adc	r5, r1
    c838:	95 e3       	ldi	r25, 0x35	; 53
    c83a:	69 0e       	add	r6, r25
    c83c:	71 1c       	adc	r7, r1
    c83e:	a5 e3       	ldi	r26, 0x35	; 53
    c840:	8a 0e       	add	r8, r26
    c842:	91 1c       	adc	r9, r1
    c844:	eb 81       	ldd	r30, Y+3	; 0x03
    c846:	fc 81       	ldd	r31, Y+4	; 0x04
    c848:	f5 96       	adiw	r30, 0x35	; 53
    c84a:	fc 83       	std	Y+4, r31	; 0x04
    c84c:	eb 83       	std	Y+3, r30	; 0x03
    c84e:	89 81       	ldd	r24, Y+1	; 0x01
    c850:	9a 81       	ldd	r25, Y+2	; 0x02
    c852:	c5 96       	adiw	r24, 0x35	; 53
    c854:	9a 83       	std	Y+2, r25	; 0x02
    c856:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c858:	99 e0       	ldi	r25, 0x09	; 9
    c85a:	49 16       	cp	r4, r25
    c85c:	91 e0       	ldi	r25, 0x01	; 1
    c85e:	59 06       	cpc	r5, r25
    c860:	09 f0       	breq	.+2      	; 0xc864 <animate_enemies+0x22e>
    c862:	17 cf       	rjmp	.-466    	; 0xc692 <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c864:	0f 90       	pop	r0
    c866:	0f 90       	pop	r0
    c868:	0f 90       	pop	r0
    c86a:	0f 90       	pop	r0
    c86c:	df 91       	pop	r29
    c86e:	cf 91       	pop	r28
    c870:	1f 91       	pop	r17
    c872:	0f 91       	pop	r16
    c874:	ff 90       	pop	r15
    c876:	ef 90       	pop	r14
    c878:	df 90       	pop	r13
    c87a:	cf 90       	pop	r12
    c87c:	af 90       	pop	r10
    c87e:	9f 90       	pop	r9
    c880:	8f 90       	pop	r8
    c882:	7f 90       	pop	r7
    c884:	6f 90       	pop	r6
    c886:	5f 90       	pop	r5
    c888:	4f 90       	pop	r4
    c88a:	3f 90       	pop	r3
    c88c:	2f 90       	pop	r2
    c88e:	08 95       	ret

0000c890 <animate_enemy_shots>:

void animate_enemy_shots()
{
    c890:	2f 92       	push	r2
    c892:	3f 92       	push	r3
    c894:	4f 92       	push	r4
    c896:	5f 92       	push	r5
    c898:	6f 92       	push	r6
    c89a:	7f 92       	push	r7
    c89c:	8f 92       	push	r8
    c89e:	9f 92       	push	r9
    c8a0:	af 92       	push	r10
    c8a2:	bf 92       	push	r11
    c8a4:	cf 92       	push	r12
    c8a6:	df 92       	push	r13
    c8a8:	ef 92       	push	r14
    c8aa:	ff 92       	push	r15
    c8ac:	0f 93       	push	r16
    c8ae:	1f 93       	push	r17
    c8b0:	cf 93       	push	r28
    c8b2:	df 93       	push	r29
    c8b4:	49 ee       	ldi	r20, 0xE9	; 233
    c8b6:	84 2e       	mov	r8, r20
    c8b8:	4e e0       	ldi	r20, 0x0E	; 14
    c8ba:	94 2e       	mov	r9, r20
    c8bc:	54 ee       	ldi	r21, 0xE4	; 228
    c8be:	45 2e       	mov	r4, r21
    c8c0:	5e e0       	ldi	r21, 0x0E	; 14
    c8c2:	55 2e       	mov	r5, r21
    c8c4:	cb ed       	ldi	r28, 0xDB	; 219
    c8c6:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c8c8:	10 e0       	ldi	r17, 0x00	; 0
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    c8ca:	60 e1       	ldi	r22, 0x10	; 16
    c8cc:	b6 2e       	mov	r11, r22
    c8ce:	8f e0       	ldi	r24, 0x0F	; 15
    c8d0:	f8 2e       	mov	r15, r24
    c8d2:	f1 0e       	add	r15, r17
    c8d4:	f4 01       	movw	r30, r8
    c8d6:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c8d8:	80 81       	ld	r24, Z
    c8da:	87 30       	cpi	r24, 0x07	; 7
    c8dc:	09 f0       	breq	.+2      	; 0xc8e0 <animate_enemy_shots+0x50>
    c8de:	9d c0       	rjmp	.+314    	; 0xca1a <animate_enemy_shots+0x18a>
			{
				if (game.enemies[i].shot[j].active)
    c8e0:	f4 01       	movw	r30, r8
    c8e2:	80 81       	ld	r24, Z
    c8e4:	88 23       	and	r24, r24
    c8e6:	09 f4       	brne	.+2      	; 0xc8ea <animate_enemy_shots+0x5a>
    c8e8:	91 c0       	rjmp	.+290    	; 0xca0c <animate_enemy_shots+0x17c>
    c8ea:	3e 01       	movw	r6, r28
    c8ec:	f5 e0       	ldi	r31, 0x05	; 5
    c8ee:	6f 0e       	add	r6, r31
    c8f0:	71 1c       	adc	r7, r1
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c8f2:	c3 01       	movw	r24, r6
    c8f4:	0e 94 02 5c 	call	0xb804	; 0xb804 <out_of_bounds>
    c8f8:	81 11       	cpse	r24, r1
    c8fa:	4f c0       	rjmp	.+158    	; 0xc99a <animate_enemy_shots+0x10a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c8fc:	41 e0       	ldi	r20, 0x01	; 1
    c8fe:	61 e0       	ldi	r22, 0x01	; 1
    c900:	c3 01       	movw	r24, r6
    c902:	0e 94 9c 5c 	call	0xb938	; 0xb938 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c906:	81 11       	cpse	r24, r1
    c908:	48 c0       	rjmp	.+144    	; 0xc99a <animate_enemy_shots+0x10a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    c90a:	6f 80       	ldd	r6, Y+7	; 0x07
    c90c:	78 84       	ldd	r7, Y+8	; 0x08
    c90e:	2d 80       	ldd	r2, Y+5	; 0x05
    c910:	3e 80       	ldd	r3, Y+6	; 0x06
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c912:	d0 90 b7 0d 	lds	r13, 0x0DB7
    c916:	02 2d       	mov	r16, r2
    c918:	0d 19       	sub	r16, r13
    c91a:	20 91 e5 0d 	lds	r18, 0x0DE5
    c91e:	22 0f       	add	r18, r18
    c920:	22 0f       	add	r18, r18
    c922:	22 0f       	add	r18, r18
    c924:	40 91 e4 0d 	lds	r20, 0x0DE4
    c928:	44 0f       	add	r20, r20
    c92a:	44 0f       	add	r20, r20
    c92c:	44 0f       	add	r20, r20
    c92e:	80 91 d9 0d 	lds	r24, 0x0DD9
    c932:	98 e0       	ldi	r25, 0x08	; 8
    c934:	a9 2e       	mov	r10, r25
    c936:	38 e0       	ldi	r19, 0x08	; 8
    c938:	c3 2e       	mov	r12, r19
    c93a:	e6 2c       	mov	r14, r6
    c93c:	60 91 db 0d 	lds	r22, 0x0DDB
    c940:	8d 19       	sub	r24, r13
    c942:	0e 94 52 4e 	call	0x9ca4	; 0x9ca4 <LBCollides>
    c946:	88 23       	and	r24, r24
    c948:	59 f1       	breq	.+86     	; 0xc9a0 <animate_enemy_shots+0x110>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    c94a:	80 91 de 0f 	lds	r24, 0x0FDE
    c94e:	88 23       	and	r24, r24
    c950:	21 f0       	breq	.+8      	; 0xc95a <animate_enemy_shots+0xca>
    c952:	80 91 d0 0d 	lds	r24, 0x0DD0
    c956:	82 30       	cpi	r24, 0x02	; 2
    c958:	29 f0       	breq	.+10     	; 0xc964 <animate_enemy_shots+0xd4>
    c95a:	41 e0       	ldi	r20, 0x01	; 1
    c95c:	6f ef       	ldi	r22, 0xFF	; 255
    c95e:	84 e0       	ldi	r24, 0x04	; 4
    c960:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    c964:	80 91 e8 0d 	lds	r24, 0x0DE8
    c968:	f4 01       	movw	r30, r8
    c96a:	31 97       	sbiw	r30, 0x01	; 1
    c96c:	90 81       	ld	r25, Z
    c96e:	89 1b       	sub	r24, r25
    c970:	80 93 e8 0d 	sts	0x0DE8, r24
#endif
						if (game.player.shield <= 0)
    c974:	18 16       	cp	r1, r24
    c976:	8c f0       	brlt	.+34     	; 0xc99a <animate_enemy_shots+0x10a>
						{
							SFX_PLAYER_EXPLODE;
    c978:	80 91 de 0f 	lds	r24, 0x0FDE
    c97c:	88 23       	and	r24, r24
    c97e:	21 f0       	breq	.+8      	; 0xc988 <animate_enemy_shots+0xf8>
    c980:	80 91 d0 0d 	lds	r24, 0x0DD0
    c984:	82 30       	cpi	r24, 0x02	; 2
    c986:	29 f0       	breq	.+10     	; 0xc992 <animate_enemy_shots+0x102>
    c988:	41 e0       	ldi	r20, 0x01	; 1
    c98a:	6f ef       	ldi	r22, 0xFF	; 255
    c98c:	85 e0       	ldi	r24, 0x05	; 5
    c98e:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
							game.player.shield = 0;
    c992:	10 92 e8 0d 	sts	0x0DE8, r1
							game.player.flags = EXPLODING;
    c996:	b0 92 e1 0d 	sts	0x0DE1, r11
						}
						game.enemies[i].shot[j].active = 0;
    c99a:	f4 01       	movw	r30, r8
    c99c:	10 82       	st	Z, r1
    c99e:	36 c0       	rjmp	.+108    	; 0xca0c <animate_enemy_shots+0x17c>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    c9a0:	00 91 d1 0d 	lds	r16, 0x0DD1
    c9a4:	60 2f       	mov	r22, r16
    c9a6:	f4 01       	movw	r30, r8
    c9a8:	34 97       	sbiw	r30, 0x04	; 4
    c9aa:	80 81       	ld	r24, Z
    c9ac:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <LBMoveDelta>
    c9b0:	28 0e       	add	r2, r24
    c9b2:	39 1e       	adc	r3, r25
    c9b4:	3e 82       	std	Y+6, r3	; 0x06
    c9b6:	2d 82       	std	Y+5, r2	; 0x05
    c9b8:	28 81       	ld	r18, Y
						if ((i % 2) == 0 && (game.enemies[i].enemy_type == ENEMY_BOSS_TURRET || game.enemies[i].enemy_type == ENEMY_BOSS_EYE))
    c9ba:	10 fd       	sbrc	r17, 0
    c9bc:	09 c0       	rjmp	.+18     	; 0xc9d0 <animate_enemy_shots+0x140>
    c9be:	3a ef       	ldi	r19, 0xFA	; 250
    c9c0:	32 0f       	add	r19, r18
    c9c2:	32 30       	cpi	r19, 0x02	; 2
    c9c4:	28 f4       	brcc	.+10     	; 0xc9d0 <animate_enemy_shots+0x140>
						{
							game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    c9c6:	28 0e       	add	r2, r24
    c9c8:	39 1e       	adc	r3, r25
    c9ca:	3e 82       	std	Y+6, r3	; 0x06
    c9cc:	2d 82       	std	Y+5, r2	; 0x05
    c9ce:	0c c0       	rjmp	.+24     	; 0xc9e8 <animate_enemy_shots+0x158>
						}
						else if (game.enemies[i].enemy_type == ENEMY_BOSS_EYE && game.frame_counter % 10 == 0)
    c9d0:	27 30       	cpi	r18, 0x07	; 7
    c9d2:	51 f4       	brne	.+20     	; 0xc9e8 <animate_enemy_shots+0x158>
    c9d4:	80 2f       	mov	r24, r16
    c9d6:	6a e0       	ldi	r22, 0x0A	; 10
    c9d8:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    c9dc:	91 11       	cpse	r25, r1
    c9de:	04 c0       	rjmp	.+8      	; 0xc9e8 <animate_enemy_shots+0x158>
						{
							game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shared.vy;
    c9e0:	f2 01       	movw	r30, r4
    c9e2:	80 81       	ld	r24, Z
    c9e4:	81 95       	neg	r24
    c9e6:	80 83       	st	Z, r24
						}
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    c9e8:	60 2f       	mov	r22, r16
    c9ea:	f2 01       	movw	r30, r4
    c9ec:	80 81       	ld	r24, Z
    c9ee:	0e 94 0b 4d 	call	0x9a16	; 0x9a16 <LBMoveDelta>
    c9f2:	86 0d       	add	r24, r6
    c9f4:	97 1d       	adc	r25, r7
    c9f6:	98 87       	std	Y+8, r25	; 0x08
    c9f8:	8f 83       	std	Y+7, r24	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    c9fa:	90 91 bf 0d 	lds	r25, 0x0DBF
    c9fe:	48 2f       	mov	r20, r24
    ca00:	49 1b       	sub	r20, r25
    ca02:	6d 81       	ldd	r22, Y+5	; 0x05
    ca04:	6d 19       	sub	r22, r13
    ca06:	01 e0       	ldi	r16, 0x01	; 1
    ca08:	21 e0       	ldi	r18, 0x01	; 1
    ca0a:	04 c0       	rjmp	.+8      	; 0xca14 <animate_enemy_shots+0x184>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    ca0c:	01 e0       	ldi	r16, 0x01	; 1
    ca0e:	21 e0       	ldi	r18, 0x01	; 1
    ca10:	40 e0       	ldi	r20, 0x00	; 0
    ca12:	60 ee       	ldi	r22, 0xE0	; 224
    ca14:	8f 2d       	mov	r24, r15
    ca16:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ca1a:	1f 5f       	subi	r17, 0xFF	; 255
    ca1c:	f5 e3       	ldi	r31, 0x35	; 53
    ca1e:	8f 0e       	add	r8, r31
    ca20:	91 1c       	adc	r9, r1
    ca22:	85 e3       	ldi	r24, 0x35	; 53
    ca24:	48 0e       	add	r4, r24
    ca26:	51 1c       	adc	r5, r1
    ca28:	e5 96       	adiw	r28, 0x35	; 53
    ca2a:	15 30       	cpi	r17, 0x05	; 5
    ca2c:	09 f0       	breq	.+2      	; 0xca30 <animate_enemy_shots+0x1a0>
    ca2e:	4f cf       	rjmp	.-354    	; 0xc8ce <animate_enemy_shots+0x3e>
				}
			}
			slot += 1;
		}
	}
}
    ca30:	df 91       	pop	r29
    ca32:	cf 91       	pop	r28
    ca34:	1f 91       	pop	r17
    ca36:	0f 91       	pop	r16
    ca38:	ff 90       	pop	r15
    ca3a:	ef 90       	pop	r14
    ca3c:	df 90       	pop	r13
    ca3e:	cf 90       	pop	r12
    ca40:	bf 90       	pop	r11
    ca42:	af 90       	pop	r10
    ca44:	9f 90       	pop	r9
    ca46:	8f 90       	pop	r8
    ca48:	7f 90       	pop	r7
    ca4a:	6f 90       	pop	r6
    ca4c:	5f 90       	pop	r5
    ca4e:	4f 90       	pop	r4
    ca50:	3f 90       	pop	r3
    ca52:	2f 90       	pop	r2
    ca54:	08 95       	ret

0000ca56 <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    ca56:	af 92       	push	r10
    ca58:	bf 92       	push	r11
    ca5a:	cf 92       	push	r12
    ca5c:	df 92       	push	r13
    ca5e:	ef 92       	push	r14
    ca60:	ff 92       	push	r15
    ca62:	0f 93       	push	r16
    ca64:	1f 93       	push	r17
    ca66:	cf 93       	push	r28
    ca68:	df 93       	push	r29
    ca6a:	1f 92       	push	r1
    ca6c:	cd b7       	in	r28, 0x3d	; 61
    ca6e:	de b7       	in	r29, 0x3e	; 62
    ca70:	5c 01       	movw	r10, r24
    ca72:	06 2f       	mov	r16, r22
    ca74:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    ca76:	8e e0       	ldi	r24, 0x0E	; 14
    ca78:	e8 2e       	mov	r14, r24

void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    ca7a:	f5 01       	movw	r30, r10
    ca7c:	84 91       	lpm	r24, Z
    ca7e:	83 32       	cpi	r24, 0x23	; 35
    ca80:	61 f1       	breq	.+88     	; 0xcada <stream_text_middle+0x84>
	{
		ln = strnlen_P(dialogue, 255);
    ca82:	6f ef       	ldi	r22, 0xFF	; 255
    ca84:	70 e0       	ldi	r23, 0x00	; 0
    ca86:	c5 01       	movw	r24, r10
    ca88:	0e 94 a1 75 	call	0xeb42	; 0xeb42 <strnlen_P>
		x = 14 - ln / 2;
    ca8c:	86 95       	lsr	r24
    ca8e:	fe 2c       	mov	r15, r14
    ca90:	f8 1a       	sub	r15, r24
    ca92:	fa 18       	sub	r15, r10
    ca94:	8a 2d       	mov	r24, r10
    ca96:	8f 0d       	add	r24, r15
		while ((c = pgm_read_byte(dialogue++)))
    ca98:	9f ef       	ldi	r25, 0xFF	; 255
    ca9a:	a9 1a       	sub	r10, r25
    ca9c:	b9 0a       	sbc	r11, r25
    ca9e:	f5 01       	movw	r30, r10
    caa0:	31 97       	sbiw	r30, 0x01	; 1
    caa2:	14 91       	lpm	r17, Z
    caa4:	11 23       	and	r17, r17
    caa6:	b9 f0       	breq	.+46     	; 0xcad6 <stream_text_middle+0x80>
		{
#if JAMMA
			handle_coin_insert();
    caa8:	89 83       	std	Y+1, r24	; 0x01
    caaa:	0e 94 eb 4c 	call	0x99d6	; 0x99d6 <handle_coin_insert>
#endif
			LBPrintChar(x++, y, c);
    caae:	41 2f       	mov	r20, r17
    cab0:	60 2f       	mov	r22, r16
    cab2:	89 81       	ldd	r24, Y+1	; 0x01
    cab4:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    cab8:	60 e0       	ldi	r22, 0x00	; 0
    caba:	8d e4       	ldi	r24, 0x4D	; 77
    cabc:	9e e0       	ldi	r25, 0x0E	; 14
    cabe:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_A)) LBWaitUs(delay);
    cac2:	80 91 51 0e 	lds	r24, 0x0E51
    cac6:	90 91 52 0e 	lds	r25, 0x0E52
    caca:	90 fd       	sbrc	r25, 0
    cacc:	e3 cf       	rjmp	.-58     	; 0xca94 <stream_text_middle+0x3e>
    cace:	c6 01       	movw	r24, r12
    cad0:	0e 94 92 4e 	call	0x9d24	; 0x9d24 <LBWaitUs>
    cad4:	df cf       	rjmp	.-66     	; 0xca94 <stream_text_middle+0x3e>
		}
		y++;
    cad6:	0f 5f       	subi	r16, 0xFF	; 255
    cad8:	d0 cf       	rjmp	.-96     	; 0xca7a <stream_text_middle+0x24>
	}
}
    cada:	0f 90       	pop	r0
    cadc:	df 91       	pop	r29
    cade:	cf 91       	pop	r28
    cae0:	1f 91       	pop	r17
    cae2:	0f 91       	pop	r16
    cae4:	ff 90       	pop	r15
    cae6:	ef 90       	pop	r14
    cae8:	df 90       	pop	r13
    caea:	cf 90       	pop	r12
    caec:	bf 90       	pop	r11
    caee:	af 90       	pop	r10
    caf0:	08 95       	ret

0000caf2 <print_scroll>:

void print_scroll(const unsigned char text[])
{
    caf2:	0f 93       	push	r16
    caf4:	cf 93       	push	r28
    caf6:	df 93       	push	r29
    caf8:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    cafa:	40 e0       	ldi	r20, 0x00	; 0
    cafc:	6d e0       	ldi	r22, 0x0D	; 13
    cafe:	71 e3       	ldi	r23, 0x31	; 49
    cb00:	80 e0       	ldi	r24, 0x00	; 0
    cb02:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    cb06:	01 e0       	ldi	r16, 0x01	; 1
    cb08:	21 e0       	ldi	r18, 0x01	; 1
    cb0a:	40 e3       	ldi	r20, 0x30	; 48
    cb0c:	60 e5       	ldi	r22, 0x50	; 80
    cb0e:	80 e0       	ldi	r24, 0x00	; 0
    cb10:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    cb14:	40 e0       	ldi	r20, 0x00	; 0
    cb16:	6a e0       	ldi	r22, 0x0A	; 10
    cb18:	71 e3       	ldi	r23, 0x31	; 49
    cb1a:	81 e0       	ldi	r24, 0x01	; 1
    cb1c:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    cb20:	21 e0       	ldi	r18, 0x01	; 1
    cb22:	40 e3       	ldi	r20, 0x30	; 48
    cb24:	60 e6       	ldi	r22, 0x60	; 96
    cb26:	81 e0       	ldi	r24, 0x01	; 1
    cb28:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    cb2c:	40 e0       	ldi	r20, 0x00	; 0
    cb2e:	67 e0       	ldi	r22, 0x07	; 7
    cb30:	71 e3       	ldi	r23, 0x31	; 49
    cb32:	82 e0       	ldi	r24, 0x02	; 2
    cb34:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    cb38:	21 e0       	ldi	r18, 0x01	; 1
    cb3a:	40 e3       	ldi	r20, 0x30	; 48
    cb3c:	60 e7       	ldi	r22, 0x70	; 112
    cb3e:	82 e0       	ldi	r24, 0x02	; 2
    cb40:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    cb44:	40 e0       	ldi	r20, 0x00	; 0
    cb46:	64 e0       	ldi	r22, 0x04	; 4
    cb48:	71 e3       	ldi	r23, 0x31	; 49
    cb4a:	83 e0       	ldi	r24, 0x03	; 3
    cb4c:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    cb50:	21 e0       	ldi	r18, 0x01	; 1
    cb52:	40 e3       	ldi	r20, 0x30	; 48
    cb54:	60 e8       	ldi	r22, 0x80	; 128
    cb56:	83 e0       	ldi	r24, 0x03	; 3
    cb58:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    cb5c:	40 e0       	ldi	r20, 0x00	; 0
    cb5e:	61 e0       	ldi	r22, 0x01	; 1
    cb60:	71 e3       	ldi	r23, 0x31	; 49
    cb62:	84 e0       	ldi	r24, 0x04	; 4
    cb64:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    cb68:	21 e0       	ldi	r18, 0x01	; 1
    cb6a:	40 e3       	ldi	r20, 0x30	; 48
    cb6c:	60 e9       	ldi	r22, 0x90	; 144
    cb6e:	84 e0       	ldi	r24, 0x04	; 4
    cb70:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	LBRotateSprites();
    cb74:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	stream_text_middle((const char*) text, 12, CHARACTER_DELAY_US);
    cb78:	40 e7       	ldi	r20, 0x70	; 112
    cb7a:	57 e1       	ldi	r21, 0x17	; 23
    cb7c:	6c e0       	ldi	r22, 0x0C	; 12
    cb7e:	ce 01       	movw	r24, r28
    cb80:	0e 94 2b 65 	call	0xca56	; 0xca56 <stream_text_middle>
	LBWaitSeconds(2);
    cb84:	82 e0       	ldi	r24, 0x02	; 2
}
    cb86:	df 91       	pop	r29
    cb88:	cf 91       	pop	r28
    cb8a:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12, CHARACTER_DELAY_US);
	LBWaitSeconds(2);
    cb8c:	0c 94 a6 4e 	jmp	0x9d4c	; 0x9d4c <LBWaitSeconds>

0000cb90 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    cb90:	ef 92       	push	r14
    cb92:	ff 92       	push	r15
    cb94:	0f 93       	push	r16
    cb96:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    cb98:	c8 2f       	mov	r28, r24
    cb9a:	e6 2e       	mov	r14, r22
    cb9c:	f1 2c       	mov	r15, r1
    cb9e:	e8 0e       	add	r14, r24
    cba0:	f1 1c       	adc	r15, r1
    cba2:	8c 2f       	mov	r24, r28
    cba4:	90 e0       	ldi	r25, 0x00	; 0
    cba6:	8e 15       	cp	r24, r14
    cba8:	9f 05       	cpc	r25, r15
    cbaa:	7c f4       	brge	.+30     	; 0xcbca <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    cbac:	40 e0       	ldi	r20, 0x00	; 0
    cbae:	65 e2       	ldi	r22, 0x25	; 37
    cbb0:	71 e3       	ldi	r23, 0x31	; 49
    cbb2:	8c 2f       	mov	r24, r28
    cbb4:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cbb8:	01 e0       	ldi	r16, 0x01	; 1
    cbba:	21 e0       	ldi	r18, 0x01	; 1
    cbbc:	40 e0       	ldi	r20, 0x00	; 0
    cbbe:	60 ee       	ldi	r22, 0xE0	; 224
    cbc0:	8c 2f       	mov	r24, r28
    cbc2:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cbc6:	cf 5f       	subi	r28, 0xFF	; 255
    cbc8:	ec cf       	rjmp	.-40     	; 0xcba2 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cbca:	cf 91       	pop	r28
    cbcc:	0f 91       	pop	r16
    cbce:	ff 90       	pop	r15
    cbd0:	ef 90       	pop	r14
    cbd2:	08 95       	ret

0000cbd4 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    cbd4:	61 e0       	ldi	r22, 0x01	; 1
    cbd6:	81 e0       	ldi	r24, 0x01	; 1
    cbd8:	0e 94 66 4c 	call	0x98cc	; 0x98cc <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cbdc:	64 e1       	ldi	r22, 0x14	; 20
    cbde:	80 e0       	ldi	r24, 0x00	; 0
    cbe0:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
	LBRotateSprites();
    cbe4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	ClearVram();
    cbe8:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cbec:	60 e0       	ldi	r22, 0x00	; 0
    cbee:	81 e0       	ldi	r24, 0x01	; 1
    cbf0:	0c 94 5a 4c 	jmp	0x98b4	; 0x98b4 <FadeIn>

0000cbf4 <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    cbf4:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	StartSong(spacesong);
    cbf8:	86 e4       	ldi	r24, 0x46	; 70
    cbfa:	94 e0       	ldi	r25, 0x04	; 4
    cbfc:	0e 94 f6 40 	call	0x81ec	; 0x81ec <StartSong>
	Screen.scrollX = 0;
    cc00:	e2 eb       	ldi	r30, 0xB2	; 178
    cc02:	fc e0       	ldi	r31, 0x0C	; 12
    cc04:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    cc06:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    cc08:	80 e2       	ldi	r24, 0x20	; 32
    cc0a:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    cc0c:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    cc0e:	82 ec       	ldi	r24, 0xC2	; 194
    cc10:	91 e0       	ldi	r25, 0x01	; 1
    cc12:	0e 94 79 65 	call	0xcaf2	; 0xcaf2 <print_scroll>
	StopSong();
    cc16:	0c 94 1f 41 	jmp	0x823e	; 0x823e <StopSong>

0000cc1a <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    cc1a:	0f 93       	push	r16
    cc1c:	cf 93       	push	r28
    cc1e:	df 93       	push	r29
    cc20:	c8 2f       	mov	r28, r24
    cc22:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    cc24:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    cc28:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 29;
    cc2c:	8d e1       	ldi	r24, 0x1D	; 29
    cc2e:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayTileTable = tiles_data;
    cc32:	88 e2       	ldi	r24, 0x28	; 40
    cc34:	91 e3       	ldi	r25, 0x31	; 49
    cc36:	90 93 b4 0c 	sts	0x0CB4, r25
    cc3a:	80 93 b3 0c 	sts	0x0CB3, r24
	Screen.overlayHeight = 3;
    cc3e:	83 e0       	ldi	r24, 0x03	; 3
    cc40:	80 93 b2 0c 	sts	0x0CB2, r24
	clear_overlay(2);
    cc44:	82 e0       	ldi	r24, 0x02	; 2
    cc46:	0e 94 60 58 	call	0xb0c0	; 0xb0c0 <clear_overlay>
	game.current_level_index = index;
    cc4a:	c0 93 cc 0d 	sts	0x0DCC, r28
	game.level_ended = 0;
    cc4e:	10 92 d4 0d 	sts	0x0DD4, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cc52:	10 92 52 0e 	sts	0x0E52, r1
    cc56:	10 92 51 0e 	sts	0x0E51, r1
	p->pressed = 0;
    cc5a:	10 92 4e 0e 	sts	0x0E4E, r1
    cc5e:	10 92 4d 0e 	sts	0x0E4D, r1
	p->released = 0;
    cc62:	10 92 50 0e 	sts	0x0E50, r1
    cc66:	10 92 4f 0e 	sts	0x0E4F, r1
	p->held_cycles = 0;
    cc6a:	10 92 53 0e 	sts	0x0E53, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cc6e:	10 92 cd 0e 	sts	0x0ECD, r1
    cc72:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    cc76:	10 92 c9 0e 	sts	0x0EC9, r1
    cc7a:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    cc7e:	10 92 cb 0e 	sts	0x0ECB, r1
    cc82:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    cc86:	10 92 ce 0e 	sts	0x0ECE, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    cc8a:	8c 2f       	mov	r24, r28
    cc8c:	90 e0       	ldi	r25, 0x00	; 0
    cc8e:	8a 30       	cpi	r24, 0x0A	; 10
    cc90:	91 05       	cpc	r25, r1
    cc92:	d8 f4       	brcc	.+54     	; 0xccca <load_level+0xb0>
    cc94:	fc 01       	movw	r30, r24
    cc96:	ef 5b       	subi	r30, 0xBF	; 191
    cc98:	ff 4f       	sbci	r31, 0xFF	; 255
    cc9a:	0c 94 14 74 	jmp	0xe828	; 0xe828 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    cc9e:	8d e5       	ldi	r24, 0x5D	; 93
    cca0:	90 e7       	ldi	r25, 0x70	; 112
    cca2:	11 c0       	rjmp	.+34     	; 0xccc6 <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    cca4:	8c e5       	ldi	r24, 0x5C	; 92
    cca6:	9f e6       	ldi	r25, 0x6F	; 111
    cca8:	0e c0       	rjmp	.+28     	; 0xccc6 <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    ccaa:	8b e5       	ldi	r24, 0x5B	; 91
    ccac:	9e e6       	ldi	r25, 0x6E	; 110
    ccae:	0b c0       	rjmp	.+22     	; 0xccc6 <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    ccb0:	8a e5       	ldi	r24, 0x5A	; 90
    ccb2:	9d e6       	ldi	r25, 0x6D	; 109
    ccb4:	08 c0       	rjmp	.+16     	; 0xccc6 <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    ccb6:	88 e5       	ldi	r24, 0x58	; 88
    ccb8:	9b e6       	ldi	r25, 0x6B	; 107
    ccba:	05 c0       	rjmp	.+10     	; 0xccc6 <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    ccbc:	89 e5       	ldi	r24, 0x59	; 89
    ccbe:	9c e6       	ldi	r25, 0x6C	; 108
    ccc0:	02 c0       	rjmp	.+4      	; 0xccc6 <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    ccc2:	87 e5       	ldi	r24, 0x57	; 87
    ccc4:	9a e6       	ldi	r25, 0x6A	; 106
    ccc6:	0e 94 a0 5a 	call	0xb540	; 0xb540 <map_level_info>
	}
	game.column_count = 0;
    ccca:	10 92 c8 0d 	sts	0x0DC8, r1
	game.camera_x = get_camera_x(index);
    ccce:	10 92 b8 0d 	sts	0x0DB8, r1
    ccd2:	10 92 b7 0d 	sts	0x0DB7, r1
	game.camera_y = get_camera_y(index);
    ccd6:	10 92 bf 0d 	sts	0x0DBF, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    ccda:	88 e1       	ldi	r24, 0x18	; 24
    ccdc:	90 e0       	ldi	r25, 0x00	; 0
    ccde:	90 93 da 0d 	sts	0x0DDA, r25
    cce2:	80 93 d9 0d 	sts	0x0DD9, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    cce6:	88 ea       	ldi	r24, 0xA8	; 168
    cce8:	90 e0       	ldi	r25, 0x00	; 0
    ccea:	90 93 dc 0d 	sts	0x0DDC, r25
    ccee:	80 93 db 0d 	sts	0x0DDB, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    ccf2:	28 ed       	ldi	r18, 0xD8	; 216
    ccf4:	37 e0       	ldi	r19, 0x07	; 7
    ccf6:	30 93 55 0e 	sts	0x0E55, r19
    ccfa:	20 93 54 0e 	sts	0x0E54, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    ccfe:	90 93 57 0e 	sts	0x0E57, r25
    cd02:	80 93 56 0e 	sts	0x0E56, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cd06:	8d e1       	ldi	r24, 0x1D	; 29
    cd08:	80 93 c0 0d 	sts	0x0DC0, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cd0c:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cd10:	8a e1       	ldi	r24, 0x1A	; 26
    cd12:	80 93 c1 0d 	sts	0x0DC1, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cd16:	80 93 c5 0d 	sts	0x0DC5, r24
	game.scroll_x = 0;
    cd1a:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    cd1e:	10 92 c3 0d 	sts	0x0DC3, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    cd22:	8a e0       	ldi	r24, 0x0A	; 10
    cd24:	80 93 d3 0d 	sts	0x0DD3, r24
	game.flags = 0;
    cd28:	10 92 d6 0d 	sts	0x0DD6, r1
	render_camera_view();
    cd2c:	0e 94 a0 58 	call	0xb140	; 0xb140 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    cd30:	4e ed       	ldi	r20, 0xDE	; 222
    cd32:	53 e0       	ldi	r21, 0x03	; 3
    cd34:	6d e1       	ldi	r22, 0x1D	; 29
    cd36:	80 e0       	ldi	r24, 0x00	; 0
    cd38:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    cd3c:	41 ed       	ldi	r20, 0xD1	; 209
    cd3e:	53 e0       	ldi	r21, 0x03	; 3
    cd40:	6d e1       	ldi	r22, 0x1D	; 29
    cd42:	82 e1       	ldi	r24, 0x12	; 18
    cd44:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    cd48:	47 ed       	ldi	r20, 0xD7	; 215
    cd4a:	53 e0       	ldi	r21, 0x03	; 3
    cd4c:	6e e1       	ldi	r22, 0x1E	; 30
    cd4e:	80 e0       	ldi	r24, 0x00	; 0
    cd50:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    cd54:	46 ee       	ldi	r20, 0xE6	; 230
    cd56:	53 e0       	ldi	r21, 0x03	; 3
    cd58:	6e e1       	ldi	r22, 0x1E	; 30
    cd5a:	81 e1       	ldi	r24, 0x11	; 17
    cd5c:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    cd60:	4e ea       	ldi	r20, 0xAE	; 174
    cd62:	53 e0       	ldi	r21, 0x03	; 3
    cd64:	6f e1       	ldi	r22, 0x1F	; 31
    cd66:	81 e1       	ldi	r24, 0x11	; 17
    cd68:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cd6c:	21 e0       	ldi	r18, 0x01	; 1
    cd6e:	40 91 e8 0d 	lds	r20, 0x0DE8
    cd72:	6d e1       	ldi	r22, 0x1D	; 29
    cd74:	89 e0       	ldi	r24, 0x09	; 9
    cd76:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cd7a:	40 91 bd 0d 	lds	r20, 0x0DBD
    cd7e:	50 91 be 0d 	lds	r21, 0x0DBE
    cd82:	21 e0       	ldi	r18, 0x01	; 1
    cd84:	6d e1       	ldi	r22, 0x1D	; 29
    cd86:	8b e1       	ldi	r24, 0x1B	; 27
    cd88:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cd8c:	21 e0       	ldi	r18, 0x01	; 1
    cd8e:	40 91 ca 0d 	lds	r20, 0x0DCA
    cd92:	6e e1       	ldi	r22, 0x1E	; 30
    cd94:	89 e0       	ldi	r24, 0x09	; 9
    cd96:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cd9a:	40 91 bb 0d 	lds	r20, 0x0DBB
    cd9e:	50 91 bc 0d 	lds	r21, 0x0DBC
    cda2:	21 e0       	ldi	r18, 0x01	; 1
    cda4:	6e e1       	ldi	r22, 0x1E	; 30
    cda6:	8b e1       	ldi	r24, 0x1B	; 27
    cda8:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cdac:	40 91 b9 0d 	lds	r20, 0x0DB9
    cdb0:	50 91 ba 0d 	lds	r21, 0x0DBA
    cdb4:	21 e0       	ldi	r18, 0x01	; 1
    cdb6:	6f e1       	ldi	r22, 0x1F	; 31
    cdb8:	8b e1       	ldi	r24, 0x1B	; 27
    cdba:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cdbe:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    cdc2:	81 11       	cpse	r24, r1
    cdc4:	37 c0       	rjmp	.+110    	; 0xce34 <load_level+0x21a>
    cdc6:	dd 23       	and	r29, r29
    cdc8:	a9 f1       	breq	.+106    	; 0xce34 <load_level+0x21a>
	{
		map_ship();
    cdca:	0e 94 8b 5a 	call	0xb516	; 0xb516 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cdce:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cdd0:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
            waitForVSync();
    cdd2:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cdd6:	8c 2f       	mov	r24, r28
    cdd8:	90 e0       	ldi	r25, 0x00	; 0
    cdda:	88 3a       	cpi	r24, 0xA8	; 168
    cddc:	91 05       	cpc	r25, r1
    cdde:	74 f0       	brlt	.+28     	; 0xcdfc <load_level+0x1e2>
			{
				LBMapSprite(0, map_hero_idle, 0);
    cde0:	40 e0       	ldi	r20, 0x00	; 0
    cde2:	69 ef       	ldi	r22, 0xF9	; 249
    cde4:	70 e3       	ldi	r23, 0x30	; 48
    cde6:	80 e0       	ldi	r24, 0x00	; 0
    cde8:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cdec:	03 e0       	ldi	r16, 0x03	; 3
    cdee:	22 e0       	ldi	r18, 0x02	; 2
    cdf0:	48 ea       	ldi	r20, 0xA8	; 168
    cdf2:	68 e1       	ldi	r22, 0x18	; 24
    cdf4:	80 e0       	ldi	r24, 0x00	; 0
    cdf6:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
				ship_increment = -3;
    cdfa:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cdfc:	8d e2       	ldi	r24, 0x2D	; 45
    cdfe:	9e e0       	ldi	r25, 0x0E	; 14
    ce00:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    ce04:	40 e0       	ldi	r20, 0x00	; 0
    ce06:	bc 01       	movw	r22, r24
    ce08:	86 e0       	ldi	r24, 0x06	; 6
    ce0a:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    ce0e:	02 e0       	ldi	r16, 0x02	; 2
    ce10:	24 e0       	ldi	r18, 0x04	; 4
    ce12:	4c 2f       	mov	r20, r28
    ce14:	68 e0       	ldi	r22, 0x08	; 8
    ce16:	86 e0       	ldi	r24, 0x06	; 6
    ce18:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
			ship_y += ship_increment;
    ce1c:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    ce1e:	39 f4       	brne	.+14     	; 0xce2e <load_level+0x214>
			{
				clear_sprites(6, 8);
    ce20:	68 e0       	ldi	r22, 0x08	; 8
    ce22:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    ce24:	df 91       	pop	r29
    ce26:	cf 91       	pop	r28
    ce28:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    ce2a:	0c 94 c8 65 	jmp	0xcb90	; 0xcb90 <clear_sprites>
				break;
			}
			LBRotateSprites();
    ce2e:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
		}
    ce32:	cf cf       	rjmp	.-98     	; 0xcdd2 <load_level+0x1b8>
	}
}
    ce34:	df 91       	pop	r29
    ce36:	cf 91       	pop	r28
    ce38:	0f 91       	pop	r16
    ce3a:	08 95       	ret

0000ce3c <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    ce3c:	0f 93       	push	r16
    ce3e:	1f 93       	push	r17
    ce40:	cf 93       	push	r28
    ce42:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    ce44:	18 2f       	mov	r17, r24
    ce46:	c6 2f       	mov	r28, r22
    ce48:	d0 e0       	ldi	r29, 0x00	; 0
    ce4a:	c8 0f       	add	r28, r24
    ce4c:	d1 1d       	adc	r29, r1
    ce4e:	81 2f       	mov	r24, r17
    ce50:	90 e0       	ldi	r25, 0x00	; 0
    ce52:	8c 17       	cp	r24, r28
    ce54:	9d 07       	cpc	r25, r29
    ce56:	4c f4       	brge	.+18     	; 0xce6a <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    ce58:	01 e0       	ldi	r16, 0x01	; 1
    ce5a:	21 e0       	ldi	r18, 0x01	; 1
    ce5c:	40 e0       	ldi	r20, 0x00	; 0
    ce5e:	60 ee       	ldi	r22, 0xE0	; 224
    ce60:	81 2f       	mov	r24, r17
    ce62:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    ce66:	1f 5f       	subi	r17, 0xFF	; 255
    ce68:	f2 cf       	rjmp	.-28     	; 0xce4e <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    ce6a:	df 91       	pop	r29
    ce6c:	cf 91       	pop	r28
    ce6e:	1f 91       	pop	r17
    ce70:	0f 91       	pop	r16
    ce72:	08 95       	ret

0000ce74 <handle_continue>:
	}
}


#if JAMMA
u8 handle_continue() {
    ce74:	cf 92       	push	r12
    ce76:	df 92       	push	r13
    ce78:	ef 92       	push	r14
    ce7a:	ff 92       	push	r15
    ce7c:	0f 93       	push	r16
    ce7e:	1f 93       	push	r17
    ce80:	cf 93       	push	r28
    ce82:	df 93       	push	r29
    u8 x = Screen.scrollX / 8;
    u8 y = Screen.scrollY / 8;
    ce84:	00 91 b6 0c 	lds	r16, 0x0CB6
    ce88:	06 95       	lsr	r16
    ce8a:	06 95       	lsr	r16
    ce8c:	06 95       	lsr	r16
    u8 count_down = 9;

    DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    ce8e:	10 e0       	ldi	r17, 0x00	; 0
}


#if JAMMA
u8 handle_continue() {
    u8 x = Screen.scrollX / 8;
    ce90:	c0 91 b5 0c 	lds	r28, 0x0CB5
    ce94:	c6 95       	lsr	r28
    ce96:	c6 95       	lsr	r28
    ce98:	c6 95       	lsr	r28
    u8 y = Screen.scrollY / 8;
    u8 count_down = 9;

    DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    ce9a:	d0 e0       	ldi	r29, 0x00	; 0
    ce9c:	c8 01       	movw	r24, r16
    ce9e:	06 96       	adiw	r24, 0x06	; 6
    cea0:	2e e1       	ldi	r18, 0x1E	; 30
    cea2:	e2 2e       	mov	r14, r18
    cea4:	f1 2c       	mov	r15, r1
    cea6:	b7 01       	movw	r22, r14
    cea8:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    ceac:	9e 01       	movw	r18, r28
    ceae:	28 5f       	subi	r18, 0xF8	; 248
    ceb0:	3f 4f       	sbci	r19, 0xFF	; 255
    ceb2:	4c ea       	ldi	r20, 0xAC	; 172
    ceb4:	59 e5       	ldi	r21, 0x59	; 89
    ceb6:	68 2f       	mov	r22, r24
    ceb8:	82 2f       	mov	r24, r18
    ceba:	8f 71       	andi	r24, 0x1F	; 31
    cebc:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
    LBPrint((x+10)%32, (y+9)%30, (char*) strContinue);
    cec0:	c8 01       	movw	r24, r16
    cec2:	09 96       	adiw	r24, 0x09	; 9
    cec4:	b7 01       	movw	r22, r14
    cec6:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    ceca:	d8 2e       	mov	r13, r24
    cecc:	9e 01       	movw	r18, r28
    cece:	26 5f       	subi	r18, 0xF6	; 246
    ced0:	3f 4f       	sbci	r19, 0xFF	; 255
    ced2:	2f 71       	andi	r18, 0x1F	; 31
    ced4:	33 27       	eor	r19, r19
    ced6:	c2 2e       	mov	r12, r18
    ced8:	4b e1       	ldi	r20, 0x1B	; 27
    ceda:	54 e0       	ldi	r21, 0x04	; 4
    cedc:	68 2f       	mov	r22, r24
    cede:	82 2f       	mov	r24, r18
    cee0:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint((x+11)%32, (y+12)%30, (char*) strCreditCount);
    cee4:	c8 01       	movw	r24, r16
    cee6:	0c 96       	adiw	r24, 0x0c	; 12
    cee8:	b7 01       	movw	r22, r14
    ceea:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    ceee:	08 2f       	mov	r16, r24
    cef0:	2b 96       	adiw	r28, 0x0b	; 11
    cef2:	cf 71       	andi	r28, 0x1F	; 31
    cef4:	dd 27       	eor	r29, r29
    cef6:	1c 2f       	mov	r17, r28
    cef8:	45 e2       	ldi	r20, 0x25	; 37
    cefa:	54 e0       	ldi	r21, 0x04	; 4
    cefc:	68 2f       	mov	r22, r24
    cefe:	8c 2f       	mov	r24, r28
    cf00:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>

    hide_sprites(0, MAX_EXTENDED_SPRITES);
    cf04:	64 e1       	ldi	r22, 0x14	; 20
    cf06:	80 e0       	ldi	r24, 0x00	; 0
    cf08:	0e 94 1e 67 	call	0xce3c	; 0xce3c <hide_sprites>
    LBRotateSprites();
    cf0c:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	game.frame_counter = 0;
    cf10:	10 92 d1 0d 	sts	0x0DD1, r1

#if JAMMA
u8 handle_continue() {
    u8 x = Screen.scrollX / 8;
    u8 y = Screen.scrollY / 8;
    u8 count_down = 9;
    cf14:	c9 e0       	ldi	r28, 0x09	; 9
    LBRotateSprites();
	game.frame_counter = 0;
    while (1)
    {
        waitForVSync();
		LBPrintByte((x+10)%32+10, (y+9)%30, count_down, false);
    cf16:	da e0       	ldi	r29, 0x0A	; 10
    cf18:	dc 0d       	add	r29, r12
		LBPrintByte((x+11)%32+9, (y+12)%30, credits_available(), false);
    cf1a:	17 5f       	subi	r17, 0xF7	; 247
    hide_sprites(0, MAX_EXTENDED_SPRITES);
    LBRotateSprites();
	game.frame_counter = 0;
    while (1)
    {
        waitForVSync();
    cf1c:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
		LBPrintByte((x+10)%32+10, (y+9)%30, count_down, false);
    cf20:	20 e0       	ldi	r18, 0x00	; 0
    cf22:	4c 2f       	mov	r20, r28
    cf24:	6d 2d       	mov	r22, r13
    cf26:	8d 2f       	mov	r24, r29
    cf28:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
		LBPrintByte((x+11)%32+9, (y+12)%30, credits_available(), false);
    cf2c:	20 e0       	ldi	r18, 0x00	; 0
    cf2e:	40 91 dc 0f 	lds	r20, 0x0FDC
    cf32:	60 2f       	mov	r22, r16
    cf34:	81 2f       	mov	r24, r17
    cf36:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
        if (game.frame_counter == 60) {
    cf3a:	80 91 d1 0d 	lds	r24, 0x0DD1
    cf3e:	8c 33       	cpi	r24, 0x3C	; 60
    cf40:	21 f4       	brne	.+8      	; 0xcf4a <handle_continue+0xd6>
            if (count_down > 0) count_down--;
    cf42:	c1 11       	cpse	r28, r1
    cf44:	c1 50       	subi	r28, 0x01	; 1
			game.frame_counter = 0;
    cf46:	10 92 d1 0d 	sts	0x0DD1, r1
        }
        if (count_down <= 0) {
    cf4a:	cc 23       	and	r28, r28
    cf4c:	f9 f0       	breq	.+62     	; 0xcf8c <handle_continue+0x118>
           return 0; 
        }
        LBGetJoyPadState(&game.player.controls, 0);
    cf4e:	60 e0       	ldi	r22, 0x00	; 0
    cf50:	8d e4       	ldi	r24, 0x4D	; 77
    cf52:	9e e0       	ldi	r25, 0x0E	; 14
    cf54:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBGetJoyPadState>
        if (game.player.controls.pressed & BTN_START && credits_available())
    cf58:	80 91 4d 0e 	lds	r24, 0x0E4D
    cf5c:	90 91 4e 0e 	lds	r25, 0x0E4E
    cf60:	83 ff       	sbrs	r24, 3
    cf62:	0b c0       	rjmp	.+22     	; 0xcf7a <handle_continue+0x106>
    cf64:	80 91 dc 0f 	lds	r24, 0x0FDC
    cf68:	88 23       	and	r24, r24
    cf6a:	49 f0       	breq	.+18     	; 0xcf7e <handle_continue+0x10a>
        {
            acquire_credit();
    cf6c:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <acquire_credit>
            game.lives = LIVES;
    cf70:	83 e0       	ldi	r24, 0x03	; 3
    cf72:	80 93 ca 0d 	sts	0x0DCA, r24
            return 1; 
    cf76:	81 e0       	ldi	r24, 0x01	; 1
    cf78:	0a c0       	rjmp	.+20     	; 0xcf8e <handle_continue+0x11a>
        }
        else if (game.player.controls.pressed)
    cf7a:	89 2b       	or	r24, r25
    cf7c:	09 f0       	breq	.+2      	; 0xcf80 <handle_continue+0x10c>
        {
            if (count_down > 0) count_down--;
    cf7e:	c1 50       	subi	r28, 0x01	; 1
        }
		game.frame_counter++;
    cf80:	80 91 d1 0d 	lds	r24, 0x0DD1
    cf84:	8f 5f       	subi	r24, 0xFF	; 255
    cf86:	80 93 d1 0d 	sts	0x0DD1, r24
    }
    cf8a:	c8 cf       	rjmp	.-112    	; 0xcf1c <handle_continue+0xa8>
        if (game.frame_counter == 60) {
            if (count_down > 0) count_down--;
			game.frame_counter = 0;
        }
        if (count_down <= 0) {
           return 0; 
    cf8c:	80 e0       	ldi	r24, 0x00	; 0
        {
            if (count_down > 0) count_down--;
        }
		game.frame_counter++;
    }
}
    cf8e:	df 91       	pop	r29
    cf90:	cf 91       	pop	r28
    cf92:	1f 91       	pop	r17
    cf94:	0f 91       	pop	r16
    cf96:	ff 90       	pop	r15
    cf98:	ef 90       	pop	r14
    cf9a:	df 90       	pop	r13
    cf9c:	cf 90       	pop	r12
    cf9e:	08 95       	ret

0000cfa0 <stream_text_anywhere>:
	return (p->pressed & BTN_SELECT);
#endif
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    cfa0:	ff 92       	push	r15
    cfa2:	0f 93       	push	r16
    cfa4:	1f 93       	push	r17
    cfa6:	cf 93       	push	r28
    cfa8:	df 93       	push	r29
    cfaa:	f6 2e       	mov	r15, r22
    cfac:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    cfae:	fc 01       	movw	r30, r24
    cfb0:	24 91       	lpm	r18, Z
    cfb2:	23 32       	cpi	r18, 0x23	; 35
    cfb4:	b1 f0       	breq	.+44     	; 0xcfe2 <stream_text_anywhere+0x42>
    cfb6:	ec 01       	movw	r28, r24
    cfb8:	0f 2d       	mov	r16, r15
    cfba:	08 1b       	sub	r16, r24
    cfbc:	8c 2f       	mov	r24, r28
    cfbe:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cfc0:	21 96       	adiw	r28, 0x01	; 1
    cfc2:	fe 01       	movw	r30, r28
    cfc4:	31 97       	sbiw	r30, 0x01	; 1
    cfc6:	44 91       	lpm	r20, Z
    cfc8:	44 23       	and	r20, r20
    cfca:	41 f0       	breq	.+16     	; 0xcfdc <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    cfcc:	61 2f       	mov	r22, r17
    cfce:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
			LBWaitUs(CHARACTER_DELAY_US);
    cfd2:	80 e7       	ldi	r24, 0x70	; 112
    cfd4:	97 e1       	ldi	r25, 0x17	; 23
    cfd6:	0e 94 92 4e 	call	0x9d24	; 0x9d24 <LBWaitUs>
    cfda:	f0 cf       	rjmp	.-32     	; 0xcfbc <stream_text_anywhere+0x1c>
		}
		y++;
    cfdc:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cfde:	ce 01       	movw	r24, r28
    cfe0:	e6 cf       	rjmp	.-52     	; 0xcfae <stream_text_anywhere+0xe>
			LBWaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cfe2:	df 91       	pop	r29
    cfe4:	cf 91       	pop	r28
    cfe6:	1f 91       	pop	r17
    cfe8:	0f 91       	pop	r16
    cfea:	ff 90       	pop	r15
    cfec:	08 95       	ret

0000cfee <map_particles>:

void map_particles()
{
    cfee:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    cff0:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    cff2:	40 e0       	ldi	r20, 0x00	; 0
    cff4:	69 e1       	ldi	r22, 0x19	; 25
    cff6:	71 e3       	ldi	r23, 0x31	; 49
    cff8:	8c 2f       	mov	r24, r28
    cffa:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    cffe:	cf 5f       	subi	r28, 0xFF	; 255
    d000:	c4 31       	cpi	r28, 0x14	; 20
    d002:	b9 f7       	brne	.-18     	; 0xcff2 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    d004:	cf 91       	pop	r28
    d006:	08 95       	ret

0000d008 <place_particles>:

void place_particles()
{
    d008:	0f 93       	push	r16
    d00a:	1f 93       	push	r17
    d00c:	cf 93       	push	r28
    d00e:	df 93       	push	r29
    d010:	1f 92       	push	r1
    d012:	cd b7       	in	r28, 0x3d	; 61
    d014:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    d016:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    d018:	68 ec       	ldi	r22, 0xC8	; 200
    d01a:	80 e0       	ldi	r24, 0x00	; 0
    d01c:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <LBRandom>
    d020:	48 2f       	mov	r20, r24
    d022:	60 ee       	ldi	r22, 0xE0	; 224
    d024:	80 e0       	ldi	r24, 0x00	; 0
    d026:	49 83       	std	Y+1, r20	; 0x01
    d028:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <LBRandom>
    d02c:	68 2f       	mov	r22, r24
    d02e:	01 e0       	ldi	r16, 0x01	; 1
    d030:	21 e0       	ldi	r18, 0x01	; 1
    d032:	49 81       	ldd	r20, Y+1	; 0x01
    d034:	81 2f       	mov	r24, r17
    d036:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    d03a:	1f 5f       	subi	r17, 0xFF	; 255
    d03c:	14 31       	cpi	r17, 0x14	; 20
    d03e:	61 f7       	brne	.-40     	; 0xd018 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    d040:	0f 90       	pop	r0
    d042:	df 91       	pop	r29
    d044:	cf 91       	pop	r28
    d046:	1f 91       	pop	r17
    d048:	0f 91       	pop	r16
    d04a:	08 95       	ret

0000d04c <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    d04c:	ef 92       	push	r14
    d04e:	ff 92       	push	r15
    d050:	0f 93       	push	r16
    d052:	1f 93       	push	r17
    d054:	cf 93       	push	r28
    d056:	df 93       	push	r29
    d058:	d8 2f       	mov	r29, r24
    d05a:	16 2f       	mov	r17, r22
    d05c:	8e e0       	ldi	r24, 0x0E	; 14
    d05e:	e8 2e       	mov	r14, r24
    d060:	80 e1       	ldi	r24, 0x10	; 16
    d062:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    d064:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    d066:	f7 01       	movw	r30, r14
    d068:	40 81       	ld	r20, Z
    d06a:	4d 0f       	add	r20, r29
    d06c:	01 e0       	ldi	r16, 0x01	; 1
    d06e:	21 e0       	ldi	r18, 0x01	; 1
    d070:	31 97       	sbiw	r30, 0x01	; 1
    d072:	60 81       	ld	r22, Z
    d074:	8c 2f       	mov	r24, r28
    d076:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    d07a:	f7 01       	movw	r30, r14
    d07c:	80 81       	ld	r24, Z
    d07e:	89 3c       	cpi	r24, 0xC9	; 201
    d080:	50 f0       	brcs	.+20     	; 0xd096 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    d082:	60 ee       	ldi	r22, 0xE0	; 224
    d084:	80 e0       	ldi	r24, 0x00	; 0
    d086:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <LBRandom>
    d08a:	21 e0       	ldi	r18, 0x01	; 1
    d08c:	41 2f       	mov	r20, r17
    d08e:	68 2f       	mov	r22, r24
    d090:	8c 2f       	mov	r24, r28
    d092:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    d096:	cf 5f       	subi	r28, 0xFF	; 255
    d098:	f4 e0       	ldi	r31, 0x04	; 4
    d09a:	ef 0e       	add	r14, r31
    d09c:	f1 1c       	adc	r15, r1
    d09e:	c4 31       	cpi	r28, 0x14	; 20
    d0a0:	11 f7       	brne	.-60     	; 0xd066 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    d0a2:	df 91       	pop	r29
    d0a4:	cf 91       	pop	r28
    d0a6:	1f 91       	pop	r17
    d0a8:	0f 91       	pop	r16
    d0aa:	ff 90       	pop	r15
    d0ac:	ef 90       	pop	r14
    d0ae:	08 95       	ret

0000d0b0 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    d0b0:	82 50       	subi	r24, 0x02	; 2
    d0b2:	87 30       	cpi	r24, 0x07	; 7
    d0b4:	48 f4       	brcc	.+18     	; 0xd0c8 <get_emarald_map+0x18>
    d0b6:	e8 2f       	mov	r30, r24
    d0b8:	f0 e0       	ldi	r31, 0x00	; 0
    d0ba:	ee 0f       	add	r30, r30
    d0bc:	ff 1f       	adc	r31, r31
    d0be:	ee 5f       	subi	r30, 0xFE	; 254
    d0c0:	fa 4f       	sbci	r31, 0xFA	; 250
    d0c2:	80 81       	ld	r24, Z
    d0c4:	91 81       	ldd	r25, Z+1	; 0x01
    d0c6:	08 95       	ret
    d0c8:	8d e0       	ldi	r24, 0x0D	; 13
    d0ca:	91 e3       	ldi	r25, 0x31	; 49
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    d0cc:	08 95       	ret

0000d0ce <music_transition>:

void music_transition()
{
	if (is_space())
    d0ce:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    d0d2:	88 23       	and	r24, r24
    d0d4:	19 f0       	breq	.+6      	; 0xd0dc <music_transition+0xe>
	{
		StartSong(spacesong);
    d0d6:	86 e4       	ldi	r24, 0x46	; 70
    d0d8:	94 e0       	ldi	r25, 0x04	; 4
    d0da:	06 c0       	rjmp	.+12     	; 0xd0e8 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    d0dc:	80 91 cc 0d 	lds	r24, 0x0DCC
    d0e0:	88 23       	and	r24, r24
    d0e2:	21 f0       	breq	.+8      	; 0xd0ec <music_transition+0x1e>
	{
		StartSong(planetsong);
    d0e4:	86 ee       	ldi	r24, 0xE6	; 230
    d0e6:	9a e0       	ldi	r25, 0x0A	; 10
    d0e8:	0c 94 f6 40 	jmp	0x81ec	; 0x81ec <StartSong>
    d0ec:	08 95       	ret

0000d0ee <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d0ee:	cf 92       	push	r12
    d0f0:	df 92       	push	r13
    d0f2:	ef 92       	push	r14
    d0f4:	ff 92       	push	r15
    d0f6:	0f 93       	push	r16
    d0f8:	1f 93       	push	r17
    d0fa:	cf 93       	push	r28
    d0fc:	df 93       	push	r29
    d0fe:	1f 92       	push	r1
    d100:	cd b7       	in	r28, 0x3d	; 61
    d102:	de b7       	in	r29, 0x3e	; 62
    d104:	c8 2e       	mov	r12, r24
    d106:	e6 2e       	mov	r14, r22
    d108:	12 2f       	mov	r17, r18
    d10a:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    d10c:	49 83       	std	Y+1, r20	; 0x01
    d10e:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	Screen.scrollX = 0;
    d112:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    d116:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    d11a:	80 e2       	ldi	r24, 0x20	; 32
    d11c:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    d120:	10 92 b2 0c 	sts	0x0CB2, r1
	game.scroll_x = 0;
    d124:	10 92 c2 0d 	sts	0x0DC2, r1
	game.scroll_y = 0;
    d128:	10 92 c3 0d 	sts	0x0DC3, r1
	map_particles();
    d12c:	0e 94 f7 67 	call	0xcfee	; 0xcfee <map_particles>
	map_ship();
    d130:	0e 94 8b 5a 	call	0xb516	; 0xb516 <map_ship>
	place_particles();
    d134:	0e 94 04 68 	call	0xd008	; 0xd008 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    d138:	40 e1       	ldi	r20, 0x10	; 16
    d13a:	59 e5       	ldi	r21, 0x59	; 89
    d13c:	69 81       	ldd	r22, Y+1	; 0x01
    d13e:	80 e0       	ldi	r24, 0x00	; 0
    d140:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	game.current_level_index = index;
    d144:	c0 92 cc 0d 	sts	0x0DCC, r12
	music_transition();
    d148:	0e 94 67 68 	call	0xd0ce	; 0xd0ce <music_transition>
	if (!is_space())
    d14c:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    d150:	81 11       	cpse	r24, r1
    d152:	0f c0       	rjmp	.+30     	; 0xd172 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    d154:	8c 2d       	mov	r24, r12
    d156:	0e 94 58 68 	call	0xd0b0	; 0xd0b0 <get_emarald_map>
    d15a:	40 e0       	ldi	r20, 0x00	; 0
    d15c:	bc 01       	movw	r22, r24
    d15e:	88 e0       	ldi	r24, 0x08	; 8
    d160:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    d164:	01 e0       	ldi	r16, 0x01	; 1
    d166:	21 e0       	ldi	r18, 0x01	; 1
    d168:	40 e3       	ldi	r20, 0x30	; 48
    d16a:	60 e7       	ldi	r22, 0x70	; 112
    d16c:	88 e0       	ldi	r24, 0x08	; 8
    d16e:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d172:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
        waitForVSync();
    d174:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    d178:	8d e2       	ldi	r24, 0x2D	; 45
    d17a:	9e e0       	ldi	r25, 0x0E	; 14
    d17c:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    d180:	40 e0       	ldi	r20, 0x00	; 0
    d182:	bc 01       	movw	r22, r24
    d184:	80 e0       	ldi	r24, 0x00	; 0
    d186:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    d18a:	02 e0       	ldi	r16, 0x02	; 2
    d18c:	24 e0       	ldi	r18, 0x04	; 4
    d18e:	48 e6       	ldi	r20, 0x68	; 104
    d190:	68 e6       	ldi	r22, 0x68	; 104
    d192:	80 e0       	ldi	r24, 0x00	; 0
    d194:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
		frame_counter++;
    d198:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    d19a:	8d 2d       	mov	r24, r13
    d19c:	8f 70       	andi	r24, 0x0F	; 15
    d19e:	29 f4       	brne	.+10     	; 0xd1aa <planet_transition+0xbc>
    d1a0:	90 91 b6 0c 	lds	r25, 0x0CB6
    d1a4:	9e 0d       	add	r25, r14
    d1a6:	90 93 b6 0c 	sts	0x0CB6, r25
		animate_particles(dy, oy);
    d1aa:	6f 2d       	mov	r22, r15
    d1ac:	81 2f       	mov	r24, r17
    d1ae:	0e 94 26 68 	call	0xd04c	; 0xd04c <animate_particles>
		LBRotateSprites();
    d1b2:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    d1b6:	8f ef       	ldi	r24, 0xFF	; 255
    d1b8:	d8 12       	cpse	r13, r24
    d1ba:	dc cf       	rjmp	.-72     	; 0xd174 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    d1bc:	82 e0       	ldi	r24, 0x02	; 2
    d1be:	80 93 cb 0d 	sts	0x0DCB, r24
	ClearVram();
    d1c2:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d1c6:	64 e1       	ldi	r22, 0x14	; 20
    d1c8:	80 e0       	ldi	r24, 0x00	; 0
    d1ca:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
	LBRotateSprites();
    d1ce:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	fade_through();
    d1d2:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	game.level_score = 0;
    d1d6:	10 92 bc 0d 	sts	0x0DBC, r1
    d1da:	10 92 bb 0d 	sts	0x0DBB, r1
	load_level(index, true);
    d1de:	61 e0       	ldi	r22, 0x01	; 1
    d1e0:	8c 2d       	mov	r24, r12
    d1e2:	0e 94 0d 66 	call	0xcc1a	; 0xcc1a <load_level>
	init_player_state();
    d1e6:	0e 94 30 54 	call	0xa860	; 0xa860 <init_player_state>
	init_boss_state();
    d1ea:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_boss_state>
	init_enemy_state();
}
    d1ee:	0f 90       	pop	r0
    d1f0:	df 91       	pop	r29
    d1f2:	cf 91       	pop	r28
    d1f4:	1f 91       	pop	r17
    d1f6:	0f 91       	pop	r16
    d1f8:	ff 90       	pop	r15
    d1fa:	ef 90       	pop	r14
    d1fc:	df 90       	pop	r13
    d1fe:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d200:	0c 94 99 4f 	jmp	0x9f32	; 0x9f32 <init_enemy_state>

0000d204 <intro>:
}


void intro()
{
    d204:	0f 93       	push	r16
	fade_through();
    d206:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	game.lives = LIVES;
    d20a:	e7 eb       	ldi	r30, 0xB7	; 183
    d20c:	fd e0       	ldi	r31, 0x0D	; 13
    d20e:	83 e0       	ldi	r24, 0x03	; 3
    d210:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d212:	13 82       	std	Z+3, r1	; 0x03
    d214:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d216:	15 82       	std	Z+5, r1	; 0x05
    d218:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d21a:	17 82       	std	Z+7, r1	; 0x07
    d21c:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    d21e:	86 ee       	ldi	r24, 0xE6	; 230
    d220:	9a e0       	ldi	r25, 0x0A	; 10
    d222:	0e 94 f6 40 	call	0x81ec	; 0x81ec <StartSong>
	print_scroll(strIntro);
    d226:	88 e7       	ldi	r24, 0x78	; 120
    d228:	92 e0       	ldi	r25, 0x02	; 2
    d22a:	0e 94 79 65 	call	0xcaf2	; 0xcaf2 <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    d22e:	07 ec       	ldi	r16, 0xC7	; 199
    d230:	2d ef       	ldi	r18, 0xFD	; 253
    d232:	4c e1       	ldi	r20, 0x1C	; 28
    d234:	61 e0       	ldi	r22, 0x01	; 1
    d236:	80 e0       	ldi	r24, 0x00	; 0
    d238:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <planet_transition>
}
    d23c:	0f 91       	pop	r16
    d23e:	08 95       	ret

0000d240 <demo_load>:

void demo_load(u8 idx)
{
    d240:	cf 93       	push	r28
    d242:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    d244:	e7 eb       	ldi	r30, 0xB7	; 183
    d246:	fd e0       	ldi	r31, 0x0D	; 13
    d248:	83 e0       	ldi	r24, 0x03	; 3
    d24a:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d24c:	13 82       	std	Z+3, r1	; 0x03
    d24e:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d250:	15 82       	std	Z+5, r1	; 0x05
    d252:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d254:	17 82       	std	Z+7, r1	; 0x07
    d256:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    d258:	82 e0       	ldi	r24, 0x02	; 2
    d25a:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    d25c:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d260:	64 e1       	ldi	r22, 0x14	; 20
    d262:	80 e0       	ldi	r24, 0x00	; 0
    d264:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
	LBRotateSprites();
    d268:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	fade_through();
    d26c:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	load_level(idx, true);
    d270:	61 e0       	ldi	r22, 0x01	; 1
    d272:	8c 2f       	mov	r24, r28
    d274:	0e 94 0d 66 	call	0xcc1a	; 0xcc1a <load_level>
	init_player_state();
    d278:	0e 94 30 54 	call	0xa860	; 0xa860 <init_player_state>
	init_boss_state();
    d27c:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_boss_state>
	init_enemy_state();
}
    d280:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d282:	0c 94 99 4f 	jmp	0x9f32	; 0x9f32 <init_enemy_state>

0000d286 <load_splash>:
}

void load_splash()
{
	fade_through();
    d286:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	Screen.scrollX = 0;
    d28a:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    d28e:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    d292:	80 e2       	ldi	r24, 0x20	; 32
    d294:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    d298:	10 92 b2 0c 	sts	0x0CB2, r1
	game.current_screen = SPLASH;
    d29c:	10 92 cb 0d 	sts	0x0DCB, r1
	game.selection = START_SELECTED;
    d2a0:	10 92 d0 0d 	sts	0x0DD0, r1
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d2a4:	64 e1       	ldi	r22, 0x14	; 20
    d2a6:	80 e0       	ldi	r24, 0x00	; 0
    d2a8:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
	LBRotateSprites();
    d2ac:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
#if JAMMA
    if (credits_available()) {
    d2b0:	80 91 dc 0f 	lds	r24, 0x0FDC
    d2b4:	88 23       	and	r24, r24
    d2b6:	19 f0       	breq	.+6      	; 0xd2be <load_splash+0x38>
        LBPrint(8, 15, (char*) str1Player);
    d2b8:	4e e2       	ldi	r20, 0x2E	; 46
    d2ba:	54 e0       	ldi	r21, 0x04	; 4
    d2bc:	02 c0       	rjmp	.+4      	; 0xd2c2 <load_splash+0x3c>
    } else {
        LBPrint(8, 15, (char*) strInsertCoin);
    d2be:	4a e3       	ldi	r20, 0x3A	; 58
    d2c0:	54 e0       	ldi	r21, 0x04	; 4
    d2c2:	6f e0       	ldi	r22, 0x0F	; 15
    d2c4:	88 e0       	ldi	r24, 0x08	; 8
    d2c6:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
    }
    LBPrint(18, 24, (char*) strCreditCount);
    d2ca:	45 e2       	ldi	r20, 0x25	; 37
    d2cc:	54 e0       	ldi	r21, 0x04	; 4
    d2ce:	68 e1       	ldi	r22, 0x18	; 24
    d2d0:	82 e1       	ldi	r24, 0x12	; 18
    d2d2:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
    LBPrintByte(27, 24, credits_available(), false);
    d2d6:	20 e0       	ldi	r18, 0x00	; 0
    d2d8:	40 91 dc 0f 	lds	r20, 0x0FDC
    d2dc:	68 e1       	ldi	r22, 0x18	; 24
    d2de:	8b e1       	ldi	r24, 0x1B	; 27
    d2e0:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
#else	
    LBPrint(8, 15, (char*) str1Player);
	LBPrint(8, 16, (char*) strHighScores);
	LBMapSprite(0, map_right_arrow, 0);
#endif
	LBPrint(4, 20, (char*) strCopyright);
    d2e4:	4e ee       	ldi	r20, 0xEE	; 238
    d2e6:	53 e0       	ldi	r21, 0x03	; 3
    d2e8:	64 e1       	ldi	r22, 0x14	; 20
    d2ea:	84 e0       	ldi	r24, 0x04	; 4
    d2ec:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
    DrawMap2(6, 5, map_splash);
    d2f0:	45 e3       	ldi	r20, 0x35	; 53
    d2f2:	5a e5       	ldi	r21, 0x5A	; 90
    d2f4:	65 e0       	ldi	r22, 0x05	; 5
    d2f6:	86 e0       	ldi	r24, 0x06	; 6
    d2f8:	0c 94 e8 4b 	jmp	0x97d0	; 0x97d0 <DrawMap>

0000d2fc <exit_demo>:
}

#if JAMMA
void exit_demo()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d2fc:	64 e1       	ldi	r22, 0x14	; 20
    d2fe:	80 e0       	ldi	r24, 0x00	; 0
    d300:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
	LBRotateSprites();
    d304:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	init_player_state();
    d308:	0e 94 30 54 	call	0xa860	; 0xa860 <init_player_state>
	init_boss_state();
    d30c:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_boss_state>
	init_enemy_state();
    d310:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <init_enemy_state>
	StopSong();
    d314:	0e 94 1f 41 	call	0x823e	; 0x823e <StopSong>
	load_splash();
    d318:	0c 94 43 69 	jmp	0xd286	; 0xd286 <load_splash>

0000d31c <update_splash>:
{
#if JAMMA
    static u16 demo_counter = 0;
    static u8 demo_choice = 0;

    if (game.player.controls.pressed) demo_counter = 0;
    d31c:	20 91 4d 0e 	lds	r18, 0x0E4D
    d320:	30 91 4e 0e 	lds	r19, 0x0E4E
    d324:	21 15       	cp	r18, r1
    d326:	31 05       	cpc	r19, r1
    d328:	21 f0       	breq	.+8      	; 0xd332 <update_splash+0x16>
    d32a:	10 92 f6 0c 	sts	0x0CF6, r1
    d32e:	10 92 f5 0c 	sts	0x0CF5, r1
    d332:	80 91 dc 0f 	lds	r24, 0x0FDC

    if (select_pressed(&game.player.controls) && credits_available())
    d336:	23 ff       	sbrs	r18, 3
    d338:	13 c0       	rjmp	.+38     	; 0xd360 <update_splash+0x44>
    d33a:	88 23       	and	r24, r24
    d33c:	89 f0       	breq	.+34     	; 0xd360 <update_splash+0x44>
    {
        acquire_credit();
    d33e:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <acquire_credit>
        SFX_NAVIGATE;
    d342:	80 91 de 0f 	lds	r24, 0x0FDE
    d346:	88 23       	and	r24, r24
    d348:	21 f0       	breq	.+8      	; 0xd352 <update_splash+0x36>
    d34a:	80 91 d0 0d 	lds	r24, 0x0DD0
    d34e:	82 30       	cpi	r24, 0x02	; 2
    d350:	29 f0       	breq	.+10     	; 0xd35c <update_splash+0x40>
    d352:	41 e0       	ldi	r20, 0x01	; 1
    d354:	6f ef       	ldi	r22, 0xFF	; 255
    d356:	82 e0       	ldi	r24, 0x02	; 2
    d358:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
        intro();
    d35c:	0c 94 02 69 	jmp	0xd204	; 0xd204 <intro>
        return;
    }
    else if (demo_counter >= DEMO_WAIT)
    d360:	20 91 f5 0c 	lds	r18, 0x0CF5
    d364:	30 91 f6 0c 	lds	r19, 0x0CF6
    d368:	28 35       	cpi	r18, 0x58	; 88
    d36a:	32 40       	sbci	r19, 0x02	; 2
    d36c:	f8 f0       	brcs	.+62     	; 0xd3ac <update_splash+0x90>
    {
        demo_counter = 0;
    d36e:	10 92 f6 0c 	sts	0x0CF6, r1
    d372:	10 92 f5 0c 	sts	0x0CF5, r1
        if (!credits_available()) {
    d376:	81 11       	cpse	r24, r1
    d378:	19 c0       	rjmp	.+50     	; 0xd3ac <update_splash+0x90>
            game.selection = DEMO_SELECTED;
    d37a:	82 e0       	ldi	r24, 0x02	; 2
    d37c:	80 93 d0 0d 	sts	0x0DD0, r24
            demo_load(demo_choice++);
    d380:	80 91 f4 0c 	lds	r24, 0x0CF4
    d384:	91 e0       	ldi	r25, 0x01	; 1
    d386:	98 0f       	add	r25, r24
    d388:	90 93 f4 0c 	sts	0x0CF4, r25
    d38c:	0e 94 20 69 	call	0xd240	; 0xd240 <demo_load>
            if (demo_choice == 2) demo_choice = 3;
    d390:	80 91 f4 0c 	lds	r24, 0x0CF4
    d394:	82 30       	cpi	r24, 0x02	; 2
    d396:	19 f4       	brne	.+6      	; 0xd39e <update_splash+0x82>
    d398:	83 e0       	ldi	r24, 0x03	; 3
    d39a:	80 93 f4 0c 	sts	0x0CF4, r24
            if (demo_choice == 5) demo_choice = 0;
    d39e:	80 91 f4 0c 	lds	r24, 0x0CF4
    d3a2:	85 30       	cpi	r24, 0x05	; 5
    d3a4:	29 f5       	brne	.+74     	; 0xd3f0 <update_splash+0xd4>
    d3a6:	10 92 f4 0c 	sts	0x0CF4, r1
    d3aa:	08 95       	ret
            return;
        }

    }
    demo_counter++;
    d3ac:	20 91 f5 0c 	lds	r18, 0x0CF5
    d3b0:	30 91 f6 0c 	lds	r19, 0x0CF6
    d3b4:	2f 5f       	subi	r18, 0xFF	; 255
    d3b6:	3f 4f       	sbci	r19, 0xFF	; 255
    d3b8:	30 93 f6 0c 	sts	0x0CF6, r19
    d3bc:	20 93 f5 0c 	sts	0x0CF5, r18
    if (credits_available()) {
    d3c0:	88 23       	and	r24, r24
    d3c2:	19 f0       	breq	.+6      	; 0xd3ca <update_splash+0xae>
        LBPrint(8, 15, (char*) str1Player);
    d3c4:	4e e2       	ldi	r20, 0x2E	; 46
    d3c6:	54 e0       	ldi	r21, 0x04	; 4
    d3c8:	02 c0       	rjmp	.+4      	; 0xd3ce <update_splash+0xb2>
    } else {
        LBPrint(8, 15, (char*) strInsertCoin);
    d3ca:	4a e3       	ldi	r20, 0x3A	; 58
    d3cc:	54 e0       	ldi	r21, 0x04	; 4
    d3ce:	6f e0       	ldi	r22, 0x0F	; 15
    d3d0:	88 e0       	ldi	r24, 0x08	; 8
    d3d2:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
    }
    LBPrint(18, 24, (char*) strCreditCount);
    d3d6:	45 e2       	ldi	r20, 0x25	; 37
    d3d8:	54 e0       	ldi	r21, 0x04	; 4
    d3da:	68 e1       	ldi	r22, 0x18	; 24
    d3dc:	82 e1       	ldi	r24, 0x12	; 18
    d3de:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
    LBPrintByte(27, 24, credits_available(), false);
    d3e2:	20 e0       	ldi	r18, 0x00	; 0
    d3e4:	40 91 dc 0f 	lds	r20, 0x0FDC
    d3e8:	68 e1       	ldi	r22, 0x18	; 24
    d3ea:	8b e1       	ldi	r24, 0x1B	; 27
    d3ec:	0c 94 e8 4d 	jmp	0x9bd0	; 0x9bd0 <LBPrintByte>
    d3f0:	08 95       	ret

0000d3f2 <load_high_scores>:
	}
#endif
}

void load_high_scores()
{
    d3f2:	2f 92       	push	r2
    d3f4:	3f 92       	push	r3
    d3f6:	5f 92       	push	r5
    d3f8:	6f 92       	push	r6
    d3fa:	7f 92       	push	r7
    d3fc:	8f 92       	push	r8
    d3fe:	9f 92       	push	r9
    d400:	af 92       	push	r10
    d402:	bf 92       	push	r11
    d404:	cf 92       	push	r12
    d406:	df 92       	push	r13
    d408:	ef 92       	push	r14
    d40a:	ff 92       	push	r15
    d40c:	0f 93       	push	r16
    d40e:	1f 93       	push	r17
    d410:	cf 93       	push	r28
    d412:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d414:	81 e0       	ldi	r24, 0x01	; 1
    d416:	80 93 cb 0d 	sts	0x0DCB, r24
	game.high_score_index = -1;
    d41a:	8f ef       	ldi	r24, 0xFF	; 255
    d41c:	80 93 c9 0d 	sts	0x0DC9, r24
	fade_through();
    d420:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	Screen.scrollX = 0;
    d424:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    d428:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    d42c:	80 e2       	ldi	r24, 0x20	; 32
    d42e:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    d432:	10 92 b2 0c 	sts	0x0CB2, r1
	load_eeprom(&scores);
    d436:	86 e9       	ldi	r24, 0x96	; 150
    d438:	9d e0       	ldi	r25, 0x0D	; 13
    d43a:	0e 94 3e 58 	call	0xb07c	; 0xb07c <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d43e:	43 e0       	ldi	r20, 0x03	; 3
    d440:	54 e0       	ldi	r21, 0x04	; 4
    d442:	63 e0       	ldi	r22, 0x03	; 3
    d444:	89 e0       	ldi	r24, 0x09	; 9
    d446:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d44a:	40 e0       	ldi	r20, 0x00	; 0
    d44c:	6d e0       	ldi	r22, 0x0D	; 13
    d44e:	71 e3       	ldi	r23, 0x31	; 49
    d450:	80 e0       	ldi	r24, 0x00	; 0
    d452:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d456:	40 e0       	ldi	r20, 0x00	; 0
    d458:	6a e0       	ldi	r22, 0x0A	; 10
    d45a:	71 e3       	ldi	r23, 0x31	; 49
    d45c:	81 e0       	ldi	r24, 0x01	; 1
    d45e:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d462:	01 e0       	ldi	r16, 0x01	; 1
    d464:	21 e0       	ldi	r18, 0x01	; 1
    d466:	48 e1       	ldi	r20, 0x18	; 24
    d468:	68 e3       	ldi	r22, 0x38	; 56
    d46a:	80 e0       	ldi	r24, 0x00	; 0
    d46c:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d470:	21 e0       	ldi	r18, 0x01	; 1
    d472:	48 e1       	ldi	r20, 0x18	; 24
    d474:	68 ea       	ldi	r22, 0xA8	; 168
    d476:	81 e0       	ldi	r24, 0x01	; 1
    d478:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
    d47c:	88 e9       	ldi	r24, 0x98	; 152
    d47e:	a8 2e       	mov	r10, r24
    d480:	8d e0       	ldi	r24, 0x0D	; 13
    d482:	b8 2e       	mov	r11, r24
    d484:	99 e9       	ldi	r25, 0x99	; 153
    d486:	c9 2e       	mov	r12, r25
    d488:	9d e0       	ldi	r25, 0x0D	; 13
    d48a:	d9 2e       	mov	r13, r25
    d48c:	2a e9       	ldi	r18, 0x9A	; 154
    d48e:	82 2e       	mov	r8, r18
    d490:	2d e0       	ldi	r18, 0x0D	; 13
    d492:	92 2e       	mov	r9, r18
    d494:	74 01       	movw	r14, r8
    d496:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d498:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d49a:	35 e0       	ldi	r19, 0x05	; 5
    d49c:	53 2e       	mov	r5, r19
    d49e:	41 eb       	ldi	r20, 0xB1	; 177
    d4a0:	64 2e       	mov	r6, r20
    d4a2:	4d e0       	ldi	r20, 0x0D	; 13
    d4a4:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d4a6:	11 e4       	ldi	r17, 0x41	; 65
    d4a8:	0e 2d       	mov	r16, r14
    d4aa:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d4ac:	80 2f       	mov	r24, r16
    d4ae:	65 2d       	mov	r22, r5
    d4b0:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    d4b4:	41 e0       	ldi	r20, 0x01	; 1
    d4b6:	48 0f       	add	r20, r24
    d4b8:	20 e0       	ldi	r18, 0x00	; 0
    d4ba:	6c 2f       	mov	r22, r28
    d4bc:	89 e0       	ldi	r24, 0x09	; 9
    d4be:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d4c2:	40 e2       	ldi	r20, 0x20	; 32
    d4c4:	6c 2f       	mov	r22, r28
    d4c6:	8a e0       	ldi	r24, 0x0A	; 10
    d4c8:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d4cc:	f5 01       	movw	r30, r10
    d4ce:	40 81       	ld	r20, Z
    d4d0:	6c 2f       	mov	r22, r28
    d4d2:	8b e0       	ldi	r24, 0x0B	; 11
    d4d4:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d4d8:	f6 01       	movw	r30, r12
    d4da:	40 81       	ld	r20, Z
    d4dc:	6c 2f       	mov	r22, r28
    d4de:	8c e0       	ldi	r24, 0x0C	; 12
    d4e0:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d4e4:	f7 01       	movw	r30, r14
    d4e6:	40 81       	ld	r20, Z
    d4e8:	6c 2f       	mov	r22, r28
    d4ea:	8d e0       	ldi	r24, 0x0D	; 13
    d4ec:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d4f0:	40 e2       	ldi	r20, 0x20	; 32
    d4f2:	6c 2f       	mov	r22, r28
    d4f4:	8e e0       	ldi	r24, 0x0E	; 14
    d4f6:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d4fa:	f7 01       	movw	r30, r14
    d4fc:	21 80       	ldd	r2, Z+1	; 0x01
    d4fe:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d500:	21 e0       	ldi	r18, 0x01	; 1
    d502:	a1 01       	movw	r20, r2
    d504:	6c 2f       	mov	r22, r28
    d506:	83 e1       	ldi	r24, 0x13	; 19
    d508:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d50c:	20 91 b9 0d 	lds	r18, 0x0DB9
    d510:	30 91 ba 0d 	lds	r19, 0x0DBA
    d514:	22 16       	cp	r2, r18
    d516:	33 06       	cpc	r3, r19
    d518:	08 f0       	brcs	.+2      	; 0xd51c <load_high_scores+0x12a>
    d51a:	5a c0       	rjmp	.+180    	; 0xd5d0 <load_high_scores+0x1de>
    d51c:	80 91 c9 0d 	lds	r24, 0x0DC9
    d520:	8f 3f       	cpi	r24, 0xFF	; 255
    d522:	09 f0       	breq	.+2      	; 0xd526 <load_high_scores+0x134>
    d524:	55 c0       	rjmp	.+170    	; 0xd5d0 <load_high_scores+0x1de>
    d526:	80 91 d0 0d 	lds	r24, 0x0DD0
    d52a:	82 30       	cpi	r24, 0x02	; 2
    d52c:	09 f4       	brne	.+2      	; 0xd530 <load_high_scores+0x13e>
    d52e:	50 c0       	rjmp	.+160    	; 0xd5d0 <load_high_scores+0x1de>
    d530:	a1 eb       	ldi	r26, 0xB1	; 177
    d532:	bd e0       	ldi	r27, 0x0D	; 13
    d534:	cd 01       	movw	r24, r26
    d536:	05 97       	sbiw	r24, 0x05	; 5
    d538:	4e e1       	ldi	r20, 0x1E	; 30
    d53a:	48 0f       	add	r20, r24
    d53c:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d53e:	04 17       	cp	r16, r20
    d540:	40 f4       	brcc	.+16     	; 0xd552 <load_high_scores+0x160>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d542:	fc 01       	movw	r30, r24
    d544:	45 2d       	mov	r20, r5
    d546:	01 90       	ld	r0, Z+
    d548:	0d 92       	st	X+, r0
    d54a:	4a 95       	dec	r20
    d54c:	e1 f7       	brne	.-8      	; 0xd546 <load_high_scores+0x154>
    d54e:	dc 01       	movw	r26, r24
    d550:	f1 cf       	rjmp	.-30     	; 0xd534 <load_high_scores+0x142>
			}
			scores.data[i] = 'A';
    d552:	f5 01       	movw	r30, r10
    d554:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d556:	f6 01       	movw	r30, r12
    d558:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d55a:	f7 01       	movw	r30, r14
    d55c:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d55e:	32 83       	std	Z+2, r19	; 0x02
    d560:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d562:	f5 01       	movw	r30, r10
    d564:	40 81       	ld	r20, Z
    d566:	6c 2f       	mov	r22, r28
    d568:	8b e0       	ldi	r24, 0x0B	; 11
    d56a:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d56e:	f6 01       	movw	r30, r12
    d570:	40 81       	ld	r20, Z
    d572:	6c 2f       	mov	r22, r28
    d574:	8c e0       	ldi	r24, 0x0C	; 12
    d576:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d57a:	f7 01       	movw	r30, r14
    d57c:	40 81       	ld	r20, Z
    d57e:	6c 2f       	mov	r22, r28
    d580:	8d e0       	ldi	r24, 0x0D	; 13
    d582:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d586:	40 91 b9 0d 	lds	r20, 0x0DB9
    d58a:	50 91 ba 0d 	lds	r21, 0x0DBA
    d58e:	21 e0       	ldi	r18, 0x01	; 1
    d590:	6c 2f       	mov	r22, r28
    d592:	83 e1       	ldi	r24, 0x13	; 19
    d594:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
			game.high_score_index = i;
    d598:	00 93 c9 0d 	sts	0x0DC9, r16
			LBMapSprite(2, map_down_arrow, 0);
    d59c:	40 e0       	ldi	r20, 0x00	; 0
    d59e:	6f e1       	ldi	r22, 0x1F	; 31
    d5a0:	71 e3       	ldi	r23, 0x31	; 49
    d5a2:	82 e0       	ldi	r24, 0x02	; 2
    d5a4:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d5a8:	40 e0       	ldi	r20, 0x00	; 0
    d5aa:	6c e1       	ldi	r22, 0x1C	; 28
    d5ac:	71 e3       	ldi	r23, 0x31	; 49
    d5ae:	83 e0       	ldi	r24, 0x03	; 3
    d5b0:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d5b4:	01 e0       	ldi	r16, 0x01	; 1
    d5b6:	21 e0       	ldi	r18, 0x01	; 1
    d5b8:	4d 2f       	mov	r20, r29
    d5ba:	68 e5       	ldi	r22, 0x58	; 88
    d5bc:	82 e0       	ldi	r24, 0x02	; 2
    d5be:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d5c2:	21 e0       	ldi	r18, 0x01	; 1
    d5c4:	40 e1       	ldi	r20, 0x10	; 16
    d5c6:	4d 0f       	add	r20, r29
    d5c8:	68 e5       	ldi	r22, 0x58	; 88
    d5ca:	83 e0       	ldi	r24, 0x03	; 3
    d5cc:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
		}
		
		ypos += 2;
    d5d0:	ce 5f       	subi	r28, 0xFE	; 254
    d5d2:	f5 e0       	ldi	r31, 0x05	; 5
    d5d4:	af 0e       	add	r10, r31
    d5d6:	b1 1c       	adc	r11, r1
    d5d8:	85 e0       	ldi	r24, 0x05	; 5
    d5da:	c8 0e       	add	r12, r24
    d5dc:	d1 1c       	adc	r13, r1
    d5de:	e5 e0       	ldi	r30, 0x05	; 5
    d5e0:	ee 0e       	add	r14, r30
    d5e2:	f1 1c       	adc	r15, r1
    d5e4:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d5e6:	c3 31       	cpi	r28, 0x13	; 19
    d5e8:	09 f0       	breq	.+2      	; 0xd5ec <load_high_scores+0x1fa>
    d5ea:	5e cf       	rjmp	.-324    	; 0xd4a8 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d5ec:	4f e0       	ldi	r20, 0x0F	; 15
    d5ee:	54 e0       	ldi	r21, 0x04	; 4
    d5f0:	66 e1       	ldi	r22, 0x16	; 22
    d5f2:	89 e0       	ldi	r24, 0x09	; 9
}
    d5f4:	df 91       	pop	r29
    d5f6:	cf 91       	pop	r28
    d5f8:	1f 91       	pop	r17
    d5fa:	0f 91       	pop	r16
    d5fc:	ff 90       	pop	r15
    d5fe:	ef 90       	pop	r14
    d600:	df 90       	pop	r13
    d602:	cf 90       	pop	r12
    d604:	bf 90       	pop	r11
    d606:	af 90       	pop	r10
    d608:	9f 90       	pop	r9
    d60a:	8f 90       	pop	r8
    d60c:	7f 90       	pop	r7
    d60e:	6f 90       	pop	r6
    d610:	5f 90       	pop	r5
    d612:	3f 90       	pop	r3
    d614:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d616:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <LBPrint>

0000d61a <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d61a:	64 e1       	ldi	r22, 0x14	; 20
    d61c:	80 e0       	ldi	r24, 0x00	; 0
    d61e:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
	LBRotateSprites();
    d622:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	init_player_state();
    d626:	0e 94 30 54 	call	0xa860	; 0xa860 <init_player_state>
	init_boss_state();
    d62a:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_boss_state>
	init_enemy_state();
    d62e:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <init_enemy_state>
	StopSong();
    d632:	0e 94 1f 41 	call	0x823e	; 0x823e <StopSong>
	load_high_scores();
    d636:	0c 94 f9 69 	jmp	0xd3f2	; 0xd3f2 <load_high_scores>

0000d63a <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{	
    d63a:	0f 93       	push	r16
    d63c:	80 91 4d 0e 	lds	r24, 0x0E4D
    d640:	90 91 4e 0e 	lds	r25, 0x0E4E
    d644:	81 70       	andi	r24, 0x01	; 1
    d646:	91 70       	andi	r25, 0x01	; 1
#if JAMMA
    if ((game.player.controls.pressed & BTN_A) || (game.player.controls.pressed & BTN_B))
    d648:	89 2b       	or	r24, r25
    d64a:	e1 f0       	breq	.+56     	; 0xd684 <update_high_scores+0x4a>
    {
        game.high_score_counter = 0;
    d64c:	10 92 d8 0d 	sts	0x0DD8, r1
        SFX_NAVIGATE;
    d650:	80 91 de 0f 	lds	r24, 0x0FDE
    d654:	88 23       	and	r24, r24
    d656:	21 f0       	breq	.+8      	; 0xd660 <update_high_scores+0x26>
    d658:	80 91 d0 0d 	lds	r24, 0x0DD0
    d65c:	82 30       	cpi	r24, 0x02	; 2
    d65e:	29 f0       	breq	.+10     	; 0xd66a <update_high_scores+0x30>
    d660:	41 e0       	ldi	r20, 0x01	; 1
    d662:	6f ef       	ldi	r22, 0xFF	; 255
    d664:	82 e0       	ldi	r24, 0x02	; 2
    d666:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
        game.high_score_index = -1;
    d66a:	8f ef       	ldi	r24, 0xFF	; 255
    d66c:	80 93 c9 0d 	sts	0x0DC9, r24
        game.score = 0;
    d670:	10 92 ba 0d 	sts	0x0DBA, r1
    d674:	10 92 b9 0d 	sts	0x0DB9, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d678:	86 e9       	ldi	r24, 0x96	; 150
    d67a:	9d e0       	ldi	r25, 0x0D	; 13
    d67c:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <EepromWriteBlock>
        game.high_score_counter = 0;
        SFX_NAVIGATE;
        game.high_score_index = -1;
        game.score = 0;
        save_eeprom(&scores);
        load_splash();
    d680:	0e 94 43 69 	call	0xd286	; 0xd286 <load_splash>
    }
    if ((game.player.controls.held & BTN_Y) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    d684:	80 91 51 0e 	lds	r24, 0x0E51
    d688:	81 ff       	sbrs	r24, 1
    d68a:	1f c0       	rjmp	.+62     	; 0xd6ca <update_high_scores+0x90>
    d68c:	80 91 53 0e 	lds	r24, 0x0E53
    d690:	8f 3f       	cpi	r24, 0xFF	; 255
    d692:	d9 f4       	brne	.+54     	; 0xd6ca <update_high_scores+0x90>
    d694:	80 91 c9 0d 	lds	r24, 0x0DC9
    d698:	8f 3f       	cpi	r24, 0xFF	; 255
    d69a:	b9 f4       	brne	.+46     	; 0xd6ca <update_high_scores+0x90>
    {
        game.high_score_counter = 0;
    d69c:	10 92 d8 0d 	sts	0x0DD8, r1
        SFX_NAVIGATE;
    d6a0:	80 91 de 0f 	lds	r24, 0x0FDE
    d6a4:	88 23       	and	r24, r24
    d6a6:	21 f0       	breq	.+8      	; 0xd6b0 <update_high_scores+0x76>
    d6a8:	80 91 d0 0d 	lds	r24, 0x0DD0
    d6ac:	82 30       	cpi	r24, 0x02	; 2
    d6ae:	29 f0       	breq	.+10     	; 0xd6ba <update_high_scores+0x80>
    d6b0:	41 e0       	ldi	r20, 0x01	; 1
    d6b2:	6f ef       	ldi	r22, 0xFF	; 255
    d6b4:	82 e0       	ldi	r24, 0x02	; 2
    d6b6:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
        init_default_high_scores();
    d6ba:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <init_default_high_scores>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d6be:	86 e9       	ldi	r24, 0x96	; 150
    d6c0:	9d e0       	ldi	r25, 0x0D	; 13
    d6c2:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <EepromWriteBlock>
    {
        game.high_score_counter = 0;
        SFX_NAVIGATE;
        init_default_high_scores();
        save_eeprom(&scores);
        load_high_scores();
    d6c6:	0e 94 f9 69 	call	0xd3f2	; 0xd3f2 <load_high_scores>
    }

    if (game.high_score_index != -1)
    d6ca:	30 91 c9 0d 	lds	r19, 0x0DC9
    d6ce:	3f 3f       	cpi	r19, 0xFF	; 255
    d6d0:	09 f4       	brne	.+2      	; 0xd6d4 <update_high_scores+0x9a>
    d6d2:	9f c0       	rjmp	.+318    	; 0xd812 <update_high_scores+0x1d8>
    {
        game.high_score_counter = 0;
    d6d4:	10 92 d8 0d 	sts	0x0DD8, r1
        if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d6d8:	20 91 4d 0e 	lds	r18, 0x0E4D
    d6dc:	27 ff       	sbrs	r18, 7
    d6de:	26 c0       	rjmp	.+76     	; 0xd72c <update_high_scores+0xf2>
    d6e0:	83 2f       	mov	r24, r19
    d6e2:	65 e0       	ldi	r22, 0x05	; 5
    d6e4:	0e 94 de 73 	call	0xe7bc	; 0xe7bc <__divmodqi4>
    d6e8:	92 30       	cpi	r25, 0x02	; 2
    d6ea:	01 f1       	breq	.+64     	; 0xd72c <update_high_scores+0xf2>
        {
            SFX_NAVIGATE;
    d6ec:	80 91 de 0f 	lds	r24, 0x0FDE
    d6f0:	88 23       	and	r24, r24
    d6f2:	21 f0       	breq	.+8      	; 0xd6fc <update_high_scores+0xc2>
    d6f4:	80 91 d0 0d 	lds	r24, 0x0DD0
    d6f8:	82 30       	cpi	r24, 0x02	; 2
    d6fa:	29 f0       	breq	.+10     	; 0xd706 <update_high_scores+0xcc>
    d6fc:	41 e0       	ldi	r20, 0x01	; 1
    d6fe:	6f ef       	ldi	r22, 0xFF	; 255
    d700:	82 e0       	ldi	r24, 0x02	; 2
    d702:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
            game.high_score_index++;
    d706:	80 91 c9 0d 	lds	r24, 0x0DC9
    d70a:	8f 5f       	subi	r24, 0xFF	; 255
    d70c:	80 93 c9 0d 	sts	0x0DC9, r24
            LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d710:	60 91 f1 0f 	lds	r22, 0x0FF1
    d714:	68 5f       	subi	r22, 0xF8	; 248
    d716:	01 e0       	ldi	r16, 0x01	; 1
    d718:	21 e0       	ldi	r18, 0x01	; 1
    d71a:	40 91 f2 0f 	lds	r20, 0x0FF2
    d71e:	82 e0       	ldi	r24, 0x02	; 2
    d720:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
            LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d724:	60 91 f5 0f 	lds	r22, 0x0FF5
    d728:	68 5f       	subi	r22, 0xF8	; 248
    d72a:	27 c0       	rjmp	.+78     	; 0xd77a <update_high_scores+0x140>
        }
        else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d72c:	26 ff       	sbrs	r18, 6
    d72e:	2c c0       	rjmp	.+88     	; 0xd788 <update_high_scores+0x14e>
    d730:	83 2f       	mov	r24, r19
    d732:	65 e0       	ldi	r22, 0x05	; 5
    d734:	0e 94 de 73 	call	0xe7bc	; 0xe7bc <__divmodqi4>
    d738:	99 23       	and	r25, r25
    d73a:	31 f1       	breq	.+76     	; 0xd788 <update_high_scores+0x14e>
        {
            SFX_NAVIGATE;
    d73c:	80 91 de 0f 	lds	r24, 0x0FDE
    d740:	88 23       	and	r24, r24
    d742:	21 f0       	breq	.+8      	; 0xd74c <update_high_scores+0x112>
    d744:	80 91 d0 0d 	lds	r24, 0x0DD0
    d748:	82 30       	cpi	r24, 0x02	; 2
    d74a:	29 f0       	breq	.+10     	; 0xd756 <update_high_scores+0x11c>
    d74c:	41 e0       	ldi	r20, 0x01	; 1
    d74e:	6f ef       	ldi	r22, 0xFF	; 255
    d750:	82 e0       	ldi	r24, 0x02	; 2
    d752:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
            game.high_score_index--;
    d756:	80 91 c9 0d 	lds	r24, 0x0DC9
    d75a:	81 50       	subi	r24, 0x01	; 1
    d75c:	80 93 c9 0d 	sts	0x0DC9, r24
            LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d760:	60 91 f1 0f 	lds	r22, 0x0FF1
    d764:	68 50       	subi	r22, 0x08	; 8
    d766:	01 e0       	ldi	r16, 0x01	; 1
    d768:	21 e0       	ldi	r18, 0x01	; 1
    d76a:	40 91 f2 0f 	lds	r20, 0x0FF2
    d76e:	82 e0       	ldi	r24, 0x02	; 2
    d770:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
            LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d774:	60 91 f5 0f 	lds	r22, 0x0FF5
    d778:	68 50       	subi	r22, 0x08	; 8
    d77a:	21 e0       	ldi	r18, 0x01	; 1
    d77c:	40 91 f6 0f 	lds	r20, 0x0FF6
    d780:	83 e0       	ldi	r24, 0x03	; 3
    d782:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
    d786:	45 c0       	rjmp	.+138    	; 0xd812 <update_high_scores+0x1d8>
        }
        else if (game.player.controls.pressed & BTN_UP)
    d788:	24 ff       	sbrs	r18, 4
    d78a:	1b c0       	rjmp	.+54     	; 0xd7c2 <update_high_scores+0x188>
        {
            SFX_NAVIGATE;
    d78c:	80 91 de 0f 	lds	r24, 0x0FDE
    d790:	88 23       	and	r24, r24
    d792:	21 f0       	breq	.+8      	; 0xd79c <update_high_scores+0x162>
    d794:	80 91 d0 0d 	lds	r24, 0x0DD0
    d798:	82 30       	cpi	r24, 0x02	; 2
    d79a:	29 f0       	breq	.+10     	; 0xd7a6 <update_high_scores+0x16c>
    d79c:	41 e0       	ldi	r20, 0x01	; 1
    d79e:	6f ef       	ldi	r22, 0xFF	; 255
    d7a0:	82 e0       	ldi	r24, 0x02	; 2
    d7a2:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
            scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d7a6:	80 91 c9 0d 	lds	r24, 0x0DC9
    d7aa:	e8 2f       	mov	r30, r24
    d7ac:	ff 27       	eor	r31, r31
    d7ae:	e7 fd       	sbrc	r30, 7
    d7b0:	f0 95       	com	r31
    d7b2:	ea 56       	subi	r30, 0x6A	; 106
    d7b4:	f2 4f       	sbci	r31, 0xF2	; 242
    d7b6:	92 81       	ldd	r25, Z+2	; 0x02
    d7b8:	91 50       	subi	r25, 0x01	; 1
            if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d7ba:	91 34       	cpi	r25, 0x41	; 65
    d7bc:	f0 f4       	brcc	.+60     	; 0xd7fa <update_high_scores+0x1c0>
    d7be:	91 e4       	ldi	r25, 0x41	; 65
    d7c0:	1c c0       	rjmp	.+56     	; 0xd7fa <update_high_scores+0x1c0>
            LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
        }
        else if (game.player.controls.pressed & BTN_DOWN)
    d7c2:	25 ff       	sbrs	r18, 5
    d7c4:	26 c0       	rjmp	.+76     	; 0xd812 <update_high_scores+0x1d8>
        {
            SFX_NAVIGATE;
    d7c6:	80 91 de 0f 	lds	r24, 0x0FDE
    d7ca:	88 23       	and	r24, r24
    d7cc:	21 f0       	breq	.+8      	; 0xd7d6 <update_high_scores+0x19c>
    d7ce:	80 91 d0 0d 	lds	r24, 0x0DD0
    d7d2:	82 30       	cpi	r24, 0x02	; 2
    d7d4:	29 f0       	breq	.+10     	; 0xd7e0 <update_high_scores+0x1a6>
    d7d6:	41 e0       	ldi	r20, 0x01	; 1
    d7d8:	6f ef       	ldi	r22, 0xFF	; 255
    d7da:	82 e0       	ldi	r24, 0x02	; 2
    d7dc:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
            scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d7e0:	80 91 c9 0d 	lds	r24, 0x0DC9
    d7e4:	e8 2f       	mov	r30, r24
    d7e6:	ff 27       	eor	r31, r31
    d7e8:	e7 fd       	sbrc	r30, 7
    d7ea:	f0 95       	com	r31
    d7ec:	ea 56       	subi	r30, 0x6A	; 106
    d7ee:	f2 4f       	sbci	r31, 0xF2	; 242
    d7f0:	92 81       	ldd	r25, Z+2	; 0x02
    d7f2:	9f 5f       	subi	r25, 0xFF	; 255
            if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d7f4:	9b 35       	cpi	r25, 0x5B	; 91
    d7f6:	08 f0       	brcs	.+2      	; 0xd7fa <update_high_scores+0x1c0>
    d7f8:	9a e5       	ldi	r25, 0x5A	; 90
    d7fa:	92 83       	std	Z+2, r25	; 0x02
            LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d7fc:	65 e0       	ldi	r22, 0x05	; 5
    d7fe:	0e 94 de 73 	call	0xe7bc	; 0xe7bc <__divmodqi4>
    d802:	68 2f       	mov	r22, r24
    d804:	66 0f       	add	r22, r22
    d806:	69 5f       	subi	r22, 0xF9	; 249
    d808:	42 81       	ldd	r20, Z+2	; 0x02
    d80a:	8b e0       	ldi	r24, 0x0B	; 11
    d80c:	89 0f       	add	r24, r25
    d80e:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <LBPrintChar>
        }
    }
    if (game.high_score_counter >= HIGH_SCORES_LENGTH)
    d812:	80 91 d8 0d 	lds	r24, 0x0DD8
    d816:	8f 3f       	cpi	r24, 0xFF	; 255
    d818:	c1 f4       	brne	.+48     	; 0xd84a <update_high_scores+0x210>
    {
        game.high_score_counter = 0;
    d81a:	10 92 d8 0d 	sts	0x0DD8, r1
        SFX_NAVIGATE;
    d81e:	80 91 de 0f 	lds	r24, 0x0FDE
    d822:	88 23       	and	r24, r24
    d824:	21 f0       	breq	.+8      	; 0xd82e <update_high_scores+0x1f4>
    d826:	80 91 d0 0d 	lds	r24, 0x0DD0
    d82a:	82 30       	cpi	r24, 0x02	; 2
    d82c:	29 f0       	breq	.+10     	; 0xd838 <update_high_scores+0x1fe>
    d82e:	41 e0       	ldi	r20, 0x01	; 1
    d830:	6f ef       	ldi	r22, 0xFF	; 255
    d832:	82 e0       	ldi	r24, 0x02	; 2
    d834:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
        game.high_score_index = -1;
    d838:	8f ef       	ldi	r24, 0xFF	; 255
    d83a:	80 93 c9 0d 	sts	0x0DC9, r24
        game.score = 0;
    d83e:	10 92 ba 0d 	sts	0x0DBA, r1
    d842:	10 92 b9 0d 	sts	0x0DB9, r1
        load_splash();
    d846:	0e 94 43 69 	call	0xd286	; 0xd286 <load_splash>
    }
    game.high_score_counter++;
    d84a:	80 91 d8 0d 	lds	r24, 0x0DD8
    d84e:	8f 5f       	subi	r24, 0xFF	; 255
    d850:	80 93 d8 0d 	sts	0x0DD8, r24
		game.score = 0;
		load_splash();
	}
	game.high_score_counter++;
#endif
}
    d854:	0f 91       	pop	r16
    d856:	08 95       	ret

0000d858 <tally_score>:
	}
}
#endif

void tally_score(char* title, u16 bonus)
{
    d858:	3f 92       	push	r3
    d85a:	4f 92       	push	r4
    d85c:	5f 92       	push	r5
    d85e:	6f 92       	push	r6
    d860:	7f 92       	push	r7
    d862:	8f 92       	push	r8
    d864:	9f 92       	push	r9
    d866:	af 92       	push	r10
    d868:	bf 92       	push	r11
    d86a:	cf 92       	push	r12
    d86c:	df 92       	push	r13
    d86e:	ef 92       	push	r14
    d870:	ff 92       	push	r15
    d872:	0f 93       	push	r16
    d874:	1f 93       	push	r17
    d876:	cf 93       	push	r28
    d878:	df 93       	push	r29
    d87a:	6c 01       	movw	r12, r24
    d87c:	5b 01       	movw	r10, r22
	u8 x = Screen.scrollX / 8;
    d87e:	c0 91 b5 0c 	lds	r28, 0x0CB5
    d882:	c6 95       	lsr	r28
    d884:	c6 95       	lsr	r28
    d886:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d888:	e0 90 b6 0c 	lds	r14, 0x0CB6
    d88c:	e6 94       	lsr	r14
    d88e:	e6 94       	lsr	r14
    d890:	e6 94       	lsr	r14
	u16 tally = game.score;
    d892:	00 91 b9 0d 	lds	r16, 0x0DB9
    d896:	10 91 ba 0d 	lds	r17, 0x0DBA
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d89a:	64 e1       	ldi	r22, 0x14	; 20
    d89c:	80 e0       	ldi	r24, 0x00	; 0
    d89e:	0e 94 1e 67 	call	0xce3c	; 0xce3c <hide_sprites>
	LBRotateSprites();
    d8a2:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
	
	StopSong();
    d8a6:	0e 94 1f 41 	call	0x823e	; 0x823e <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d8aa:	f1 2c       	mov	r15, r1
    d8ac:	d0 e0       	ldi	r29, 0x00	; 0
    d8ae:	c7 01       	movw	r24, r14
    d8b0:	06 96       	adiw	r24, 0x06	; 6
    d8b2:	2e e1       	ldi	r18, 0x1E	; 30
    d8b4:	82 2e       	mov	r8, r18
    d8b6:	91 2c       	mov	r9, r1
    d8b8:	b4 01       	movw	r22, r8
    d8ba:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    d8be:	9e 01       	movw	r18, r28
    d8c0:	28 5f       	subi	r18, 0xF8	; 248
    d8c2:	3f 4f       	sbci	r19, 0xFF	; 255
    d8c4:	4c ea       	ldi	r20, 0xAC	; 172
    d8c6:	59 e5       	ldi	r21, 0x59	; 89
    d8c8:	68 2f       	mov	r22, r24
    d8ca:	82 2f       	mov	r24, r18
    d8cc:	8f 71       	andi	r24, 0x1F	; 31
    d8ce:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d8d2:	c7 01       	movw	r24, r14
    d8d4:	07 96       	adiw	r24, 0x07	; 7
    d8d6:	b4 01       	movw	r22, r8
    d8d8:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    d8dc:	9e 01       	movw	r18, r28
    d8de:	26 5f       	subi	r18, 0xF6	; 246
    d8e0:	3f 4f       	sbci	r19, 0xFF	; 255
    d8e2:	a6 01       	movw	r20, r12
    d8e4:	68 2f       	mov	r22, r24
    d8e6:	82 2f       	mov	r24, r18
    d8e8:	8f 71       	andi	r24, 0x1F	; 31
    d8ea:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d8ee:	c7 01       	movw	r24, r14
    d8f0:	09 96       	adiw	r24, 0x09	; 9
    d8f2:	b4 01       	movw	r22, r8
    d8f4:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    d8f8:	68 2e       	mov	r6, r24
    d8fa:	78 2e       	mov	r7, r24
    d8fc:	6e 01       	movw	r12, r28
    d8fe:	29 e0       	ldi	r18, 0x09	; 9
    d900:	c2 0e       	add	r12, r18
    d902:	d1 1c       	adc	r13, r1
    d904:	8f e1       	ldi	r24, 0x1F	; 31
    d906:	c8 22       	and	r12, r24
    d908:	dd 24       	eor	r13, r13
    d90a:	4e ea       	ldi	r20, 0xAE	; 174
    d90c:	53 e0       	ldi	r21, 0x03	; 3
    d90e:	66 2d       	mov	r22, r6
    d910:	8c 2d       	mov	r24, r12
    d912:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d916:	c7 01       	movw	r24, r14
    d918:	0b 96       	adiw	r24, 0x0b	; 11
    d91a:	b4 01       	movw	r22, r8
    d91c:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    d920:	38 2e       	mov	r3, r24
    d922:	48 2e       	mov	r4, r24
    d924:	46 ee       	ldi	r20, 0xE6	; 230
    d926:	53 e0       	ldi	r21, 0x03	; 3
    d928:	68 2f       	mov	r22, r24
    d92a:	8c 2d       	mov	r24, r12
    d92c:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d930:	c7 01       	movw	r24, r14
    d932:	0c 96       	adiw	r24, 0x0c	; 12
    d934:	b4 01       	movw	r22, r8
    d936:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    d93a:	d8 2e       	mov	r13, r24
    d93c:	58 2e       	mov	r5, r24
    d93e:	41 ed       	ldi	r20, 0xD1	; 209
    d940:	53 e0       	ldi	r21, 0x03	; 3
    d942:	68 2f       	mov	r22, r24
    d944:	8c 2d       	mov	r24, r12
    d946:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d94a:	c7 01       	movw	r24, r14
    d94c:	0d 96       	adiw	r24, 0x0d	; 13
    d94e:	b4 01       	movw	r22, r8
    d950:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    d954:	e8 2e       	mov	r14, r24
    d956:	f8 2e       	mov	r15, r24
    d958:	4f eb       	ldi	r20, 0xBF	; 191
    d95a:	53 e0       	ldi	r21, 0x03	; 3
    d95c:	68 2f       	mov	r22, r24
    d95e:	8c 2d       	mov	r24, r12
    d960:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d964:	64 96       	adiw	r28, 0x14	; 20
    d966:	cf 71       	andi	r28, 0x1F	; 31
    d968:	dd 27       	eor	r29, r29
    d96a:	dc 2f       	mov	r29, r28
    d96c:	21 e0       	ldi	r18, 0x01	; 1
    d96e:	a8 01       	movw	r20, r16
    d970:	66 2d       	mov	r22, r6
    d972:	8c 2f       	mov	r24, r28
    d974:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d978:	40 91 bb 0d 	lds	r20, 0x0DBB
    d97c:	50 91 bc 0d 	lds	r21, 0x0DBC
    d980:	21 e0       	ldi	r18, 0x01	; 1
    d982:	63 2d       	mov	r22, r3
    d984:	8c 2f       	mov	r24, r28
    d986:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d98a:	40 91 bd 0d 	lds	r20, 0x0DBD
    d98e:	50 91 be 0d 	lds	r21, 0x0DBE
    d992:	21 e0       	ldi	r18, 0x01	; 1
    d994:	6d 2d       	mov	r22, r13
    d996:	8c 2f       	mov	r24, r28
    d998:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d99c:	21 e0       	ldi	r18, 0x01	; 1
    d99e:	a5 01       	movw	r20, r10
    d9a0:	6e 2d       	mov	r22, r14
    d9a2:	8c 2f       	mov	r24, r28
    d9a4:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	
	LBWaitSeconds(2);
    d9a8:	82 e0       	ldi	r24, 0x02	; 2
    d9aa:	0e 94 a6 4e 	call	0x9d4c	; 0x9d4c <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d9ae:	c0 90 bb 0d 	lds	r12, 0x0DBB
    d9b2:	d0 90 bc 0d 	lds	r13, 0x0DBC
	while (counter > 0)
    d9b6:	c1 14       	cp	r12, r1
    d9b8:	d1 04       	cpc	r13, r1
    d9ba:	29 f1       	breq	.+74     	; 0xda06 <tally_score+0x1ae>
	{
        waitForVSync();
    d9bc:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
		SFX_HIT;
    d9c0:	80 91 de 0f 	lds	r24, 0x0FDE
    d9c4:	88 23       	and	r24, r24
    d9c6:	21 f0       	breq	.+8      	; 0xd9d0 <tally_score+0x178>
    d9c8:	80 91 d0 0d 	lds	r24, 0x0DD0
    d9cc:	82 30       	cpi	r24, 0x02	; 2
    d9ce:	29 f0       	breq	.+10     	; 0xd9da <tally_score+0x182>
    d9d0:	41 e0       	ldi	r20, 0x01	; 1
    d9d2:	6f ef       	ldi	r22, 0xFF	; 255
    d9d4:	84 e0       	ldi	r24, 0x04	; 4
    d9d6:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
		tally += 10;
    d9da:	06 5f       	subi	r16, 0xF6	; 246
    d9dc:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 10;
    d9de:	2a e0       	ldi	r18, 0x0A	; 10
    d9e0:	c2 1a       	sub	r12, r18
    d9e2:	d1 08       	sbc	r13, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d9e4:	21 e0       	ldi	r18, 0x01	; 1
    d9e6:	a8 01       	movw	r20, r16
    d9e8:	67 2d       	mov	r22, r7
    d9ea:	8d 2f       	mov	r24, r29
    d9ec:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d9f0:	21 e0       	ldi	r18, 0x01	; 1
    d9f2:	a6 01       	movw	r20, r12
    d9f4:	64 2d       	mov	r22, r4
    d9f6:	8d 2f       	mov	r24, r29
    d9f8:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
		LBWaitUs(TALLY_DELAY);
    d9fc:	84 e6       	ldi	r24, 0x64	; 100
    d9fe:	90 e0       	ldi	r25, 0x00	; 0
    da00:	0e 94 92 4e 	call	0x9d24	; 0x9d24 <LBWaitUs>
    da04:	d8 cf       	rjmp	.-80     	; 0xd9b6 <tally_score+0x15e>
	}
	
	// Tally Time
	counter = game.time;
    da06:	c0 90 bd 0d 	lds	r12, 0x0DBD
    da0a:	d0 90 be 0d 	lds	r13, 0x0DBE
	while (counter > 0)
    da0e:	c1 14       	cp	r12, r1
    da10:	d1 04       	cpc	r13, r1
    da12:	09 f4       	brne	.+2      	; 0xda16 <tally_score+0x1be>
    da14:	4c c0       	rjmp	.+152    	; 0xdaae <tally_score+0x256>
	{
        waitForVSync();
    da16:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
		SFX_HIT;
    da1a:	80 91 de 0f 	lds	r24, 0x0FDE
    da1e:	88 23       	and	r24, r24
    da20:	21 f0       	breq	.+8      	; 0xda2a <tally_score+0x1d2>
    da22:	80 91 d0 0d 	lds	r24, 0x0DD0
    da26:	82 30       	cpi	r24, 0x02	; 2
    da28:	29 f0       	breq	.+10     	; 0xda34 <tally_score+0x1dc>
    da2a:	41 e0       	ldi	r20, 0x01	; 1
    da2c:	6f ef       	ldi	r22, 0xFF	; 255
    da2e:	84 e0       	ldi	r24, 0x04	; 4
    da30:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    da34:	c8 01       	movw	r24, r16
    da36:	02 97       	sbiw	r24, 0x02	; 2
    da38:	8e 3f       	cpi	r24, 0xFE	; 254
    da3a:	9f 4f       	sbci	r25, 0xFF	; 255
    da3c:	18 f4       	brcc	.+6      	; 0xda44 <tally_score+0x1ec>
	counter = game.time;
	while (counter > 0)
	{
        waitForVSync();
		SFX_HIT;
		tally -= 1;
    da3e:	01 50       	subi	r16, 0x01	; 1
    da40:	11 09       	sbc	r17, r1
    da42:	02 c0       	rjmp	.+4      	; 0xda48 <tally_score+0x1f0>
		if (tally == 0 || tally == 65535) tally = 0;
    da44:	00 e0       	ldi	r16, 0x00	; 0
    da46:	10 e0       	ldi	r17, 0x00	; 0
		counter -= 1;
    da48:	81 e0       	ldi	r24, 0x01	; 1
    da4a:	c8 1a       	sub	r12, r24
    da4c:	d1 08       	sbc	r13, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    da4e:	21 e0       	ldi	r18, 0x01	; 1
    da50:	a8 01       	movw	r20, r16
    da52:	67 2d       	mov	r22, r7
    da54:	8d 2f       	mov	r24, r29
    da56:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    da5a:	21 e0       	ldi	r18, 0x01	; 1
    da5c:	a6 01       	movw	r20, r12
    da5e:	65 2d       	mov	r22, r5
    da60:	8d 2f       	mov	r24, r29
    da62:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
		LBWaitUs(TALLY_DELAY);
    da66:	84 e6       	ldi	r24, 0x64	; 100
    da68:	90 e0       	ldi	r25, 0x00	; 0
    da6a:	0e 94 92 4e 	call	0x9d24	; 0x9d24 <LBWaitUs>
    da6e:	cf cf       	rjmp	.-98     	; 0xda0e <tally_score+0x1b6>
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
	{
        waitForVSync();
    da70:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
		SFX_HIT;
    da74:	80 91 de 0f 	lds	r24, 0x0FDE
    da78:	88 23       	and	r24, r24
    da7a:	e9 f0       	breq	.+58     	; 0xdab6 <tally_score+0x25e>
    da7c:	80 91 d0 0d 	lds	r24, 0x0DD0
    da80:	82 30       	cpi	r24, 0x02	; 2
    da82:	c9 f4       	brne	.+50     	; 0xdab6 <tally_score+0x25e>
		tally += 10;
    da84:	06 5f       	subi	r16, 0xF6	; 246
    da86:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 10;
    da88:	2a e0       	ldi	r18, 0x0A	; 10
    da8a:	a2 1a       	sub	r10, r18
    da8c:	b1 08       	sbc	r11, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    da8e:	21 e0       	ldi	r18, 0x01	; 1
    da90:	a8 01       	movw	r20, r16
    da92:	67 2d       	mov	r22, r7
    da94:	8d 2f       	mov	r24, r29
    da96:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    da9a:	21 e0       	ldi	r18, 0x01	; 1
    da9c:	a5 01       	movw	r20, r10
    da9e:	6f 2d       	mov	r22, r15
    daa0:	8d 2f       	mov	r24, r29
    daa2:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
		LBWaitUs(TALLY_DELAY);
    daa6:	84 e6       	ldi	r24, 0x64	; 100
    daa8:	90 e0       	ldi	r25, 0x00	; 0
    daaa:	0e 94 92 4e 	call	0x9d24	; 0x9d24 <LBWaitUs>
		LBWaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    daae:	a1 14       	cp	r10, r1
    dab0:	b1 04       	cpc	r11, r1
    dab2:	f1 f6       	brne	.-68     	; 0xda70 <tally_score+0x218>
    dab4:	06 c0       	rjmp	.+12     	; 0xdac2 <tally_score+0x26a>
	{
        waitForVSync();
		SFX_HIT;
    dab6:	41 e0       	ldi	r20, 0x01	; 1
    dab8:	6f ef       	ldi	r22, 0xFF	; 255
    daba:	84 e0       	ldi	r24, 0x04	; 4
    dabc:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <TriggerFx>
    dac0:	e1 cf       	rjmp	.-62     	; 0xda84 <tally_score+0x22c>
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
		LBWaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
    dac2:	10 93 ba 0d 	sts	0x0DBA, r17
    dac6:	00 93 b9 0d 	sts	0x0DB9, r16
	game.time = 0;
    daca:	10 92 be 0d 	sts	0x0DBE, r1
    dace:	10 92 bd 0d 	sts	0x0DBD, r1
	LBWaitSeconds(2);
    dad2:	82 e0       	ldi	r24, 0x02	; 2
}
    dad4:	df 91       	pop	r29
    dad6:	cf 91       	pop	r28
    dad8:	1f 91       	pop	r17
    dada:	0f 91       	pop	r16
    dadc:	ff 90       	pop	r15
    dade:	ef 90       	pop	r14
    dae0:	df 90       	pop	r13
    dae2:	cf 90       	pop	r12
    dae4:	bf 90       	pop	r11
    dae6:	af 90       	pop	r10
    dae8:	9f 90       	pop	r9
    daea:	8f 90       	pop	r8
    daec:	7f 90       	pop	r7
    daee:	6f 90       	pop	r6
    daf0:	5f 90       	pop	r5
    daf2:	4f 90       	pop	r4
    daf4:	3f 90       	pop	r3
		LBWaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    daf6:	0c 94 a6 4e 	jmp	0x9d4c	; 0x9d4c <LBWaitSeconds>

0000dafa <handle_player_death>:
}
#else
#endif

u8 handle_player_death(Player* player)
{
    dafa:	cf 93       	push	r28
   if (player == &game.boss) {
    dafc:	84 55       	subi	r24, 0x54	; 84
    dafe:	9e 40       	sbci	r25, 0x0E	; 14
    db00:	29 f4       	brne	.+10     	; 0xdb0c <handle_player_death+0x12>
        game.level_ended = 1;
    db02:	81 e0       	ldi	r24, 0x01	; 1
    db04:	80 93 d4 0d 	sts	0x0DD4, r24
        return 1;
    db08:	c1 e0       	ldi	r28, 0x01	; 1
    db0a:	3d c0       	rjmp	.+122    	; 0xdb86 <handle_player_death+0x8c>
    }
#if JAMMA
    game.lives--;
    db0c:	80 91 ca 0d 	lds	r24, 0x0DCA
    db10:	81 50       	subi	r24, 0x01	; 1
    db12:	80 93 ca 0d 	sts	0x0DCA, r24
    clear_sprites(0, 6);
    db16:	66 e0       	ldi	r22, 0x06	; 6
    db18:	80 e0       	ldi	r24, 0x00	; 0
    db1a:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
    LBRotateSprites();
    db1e:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
    if (game.lives == 0)
    db22:	80 91 ca 0d 	lds	r24, 0x0DCA
    db26:	81 11       	cpse	r24, r1
    db28:	0e c0       	rjmp	.+28     	; 0xdb46 <handle_player_death+0x4c>
    {
        if (!handle_continue()) {
    db2a:	0e 94 3a 67 	call	0xce74	; 0xce74 <handle_continue>
    db2e:	c8 2f       	mov	r28, r24
    db30:	81 11       	cpse	r24, r1
    db32:	09 c0       	rjmp	.+18     	; 0xdb46 <handle_player_death+0x4c>
            tally_score((char*) strGameOver, 0);
    db34:	60 e0       	ldi	r22, 0x00	; 0
    db36:	70 e0       	ldi	r23, 0x00	; 0
    db38:	85 eb       	ldi	r24, 0xB5	; 181
    db3a:	93 e0       	ldi	r25, 0x03	; 3
    db3c:	0e 94 2c 6c 	call	0xd858	; 0xd858 <tally_score>
            exit_game();
    db40:	0e 94 0d 6b 	call	0xd61a	; 0xd61a <exit_game>
    db44:	20 c0       	rjmp	.+64     	; 0xdb86 <handle_player_death+0x8c>
            return 0;
        }
    }
    FadeOut(FRAMES_PER_FADE, true);
    db46:	61 e0       	ldi	r22, 0x01	; 1
    db48:	81 e0       	ldi	r24, 0x01	; 1
    db4a:	0e 94 66 4c 	call	0x98cc	; 0x98cc <FadeOut>
    ClearVram();
    db4e:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <ClearVram>
    clear_sprites(0, MAX_EXTENDED_SPRITES);
    db52:	64 e1       	ldi	r22, 0x14	; 20
    db54:	80 e0       	ldi	r24, 0x00	; 0
    db56:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
    LBRotateSprites();
    db5a:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
    FadeIn(FRAMES_PER_FADE, false);
    db5e:	60 e0       	ldi	r22, 0x00	; 0
    db60:	81 e0       	ldi	r24, 0x01	; 1
    db62:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <FadeIn>
    init_player_state();
    db66:	0e 94 30 54 	call	0xa860	; 0xa860 <init_player_state>
    init_boss_state();
    db6a:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_boss_state>
    init_enemy_state();
    db6e:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <init_enemy_state>
	game.time = 0;
    db72:	10 92 be 0d 	sts	0x0DBE, r1
    db76:	10 92 bd 0d 	sts	0x0DBD, r1
    load_level(game.current_level_index, false);
    db7a:	60 e0       	ldi	r22, 0x00	; 0
    db7c:	80 91 cc 0d 	lds	r24, 0x0DCC
    db80:	0e 94 0d 66 	call	0xcc1a	; 0xcc1a <load_level>
    return 0;
    db84:	c0 e0       	ldi	r28, 0x00	; 0
	init_boss_state();
	init_enemy_state();
	load_level(game.current_level_index, false);
	return 0;
#endif
}
    db86:	8c 2f       	mov	r24, r28
    db88:	cf 91       	pop	r28
    db8a:	08 95       	ret

0000db8c <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    db8c:	ef 92       	push	r14
    db8e:	ff 92       	push	r15
    db90:	0f 93       	push	r16
    db92:	1f 93       	push	r17
    db94:	cf 93       	push	r28
    db96:	df 93       	push	r29
    db98:	1f 92       	push	r1
    db9a:	cd b7       	in	r28, 0x3d	; 61
    db9c:	de b7       	in	r29, 0x3e	; 62
    db9e:	7c 01       	movw	r14, r24
    dba0:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	handle_music_toggle(&player->controls);
	handle_demo_play(player);
    dba2:	0e 94 4b 5c 	call	0xb896	; 0xb896 <handle_demo_play>
	
	if (player->flags & EXPLODING)
    dba6:	f7 01       	movw	r30, r14
    dba8:	00 85       	ldd	r16, Z+8	; 0x08
    dbaa:	04 ff       	sbrs	r16, 4
    dbac:	17 c0       	rjmp	.+46     	; 0xdbdc <update_player+0x50>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    dbae:	04 85       	ldd	r16, Z+12	; 0x0c
    dbb0:	23 85       	ldd	r18, Z+11	; 0x0b
    dbb2:	41 2f       	mov	r20, r17
    dbb4:	b7 01       	movw	r22, r14
    dbb6:	64 59       	subi	r22, 0x94	; 148
    dbb8:	7f 4f       	sbci	r23, 0xFF	; 255
    dbba:	c7 01       	movw	r24, r14
    dbbc:	08 96       	adiw	r24, 0x08	; 8
    dbbe:	0e 94 2b 60 	call	0xc056	; 0xc056 <map_explosion>
    dbc2:	88 23       	and	r24, r24
    dbc4:	09 f4       	brne	.+2      	; 0xdbc8 <update_player+0x3c>
    dbc6:	02 c2       	rjmp	.+1028   	; 0xdfcc <update_player+0x440>
		{
			return handle_player_death(player);
    dbc8:	c7 01       	movw	r24, r14
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    dbca:	0f 90       	pop	r0
    dbcc:	df 91       	pop	r29
    dbce:	cf 91       	pop	r28
    dbd0:	1f 91       	pop	r17
    dbd2:	0f 91       	pop	r16
    dbd4:	ff 90       	pop	r15
    dbd6:	ef 90       	pop	r14
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    dbd8:	0c 94 7d 6d 	jmp	0xdafa	; 0xdafa <handle_player_death>
		}
	}
	else if (is_space())
    dbdc:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    dbe0:	88 23       	and	r24, r24
    dbe2:	09 f4       	brne	.+2      	; 0xdbe6 <update_player+0x5a>
    dbe4:	a6 c0       	rjmp	.+332    	; 0xdd32 <update_player+0x1a6>
	{
		if (game.current_level_index == 9)
    dbe6:	80 91 cc 0d 	lds	r24, 0x0DCC
    dbea:	89 30       	cpi	r24, 0x09	; 9
    dbec:	09 f0       	breq	.+2      	; 0xdbf0 <update_player+0x64>
    dbee:	4d c0       	rjmp	.+154    	; 0xdc8a <update_player+0xfe>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    dbf0:	80 91 b7 0d 	lds	r24, 0x0DB7
    dbf4:	90 91 b8 0d 	lds	r25, 0x0DB8
    dbf8:	e3 e0       	ldi	r30, 0x03	; 3
    dbfa:	96 95       	lsr	r25
    dbfc:	87 95       	ror	r24
    dbfe:	ea 95       	dec	r30
    dc00:	e1 f7       	brne	.-8      	; 0xdbfa <update_player+0x6e>
    dc02:	4c 96       	adiw	r24, 0x1c	; 28
    dc04:	82 3d       	cpi	r24, 0xD2	; 210
    dc06:	91 05       	cpc	r25, r1
    dc08:	08 f4       	brcc	.+2      	; 0xdc0c <update_player+0x80>
    dc0a:	3f c0       	rjmp	.+126    	; 0xdc8a <update_player+0xfe>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    dc0c:	05 ff       	sbrs	r16, 5
    dc0e:	02 c0       	rjmp	.+4      	; 0xdc14 <update_player+0x88>
				{
					space_ship_speed = 0;
    dc10:	00 e0       	ldi	r16, 0x00	; 0
    dc12:	01 c0       	rjmp	.+2      	; 0xdc16 <update_player+0x8a>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    dc14:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(game.flags & BOSS_APROACHING))
    dc16:	80 91 d6 0d 	lds	r24, 0x0DD6
    dc1a:	86 fd       	sbrc	r24, 6
    dc1c:	07 c0       	rjmp	.+14     	; 0xdc2c <update_player+0xa0>
				{
					game.flags |= BOSS_APROACHING;
    dc1e:	80 64       	ori	r24, 0x40	; 64
    dc20:	80 93 d6 0d 	sts	0x0DD6, r24
					explode_all_enemies();
    dc24:	0e 94 2f 5c 	call	0xb85e	; 0xb85e <explode_all_enemies>
					StopSong();
    dc28:	0e 94 1f 41 	call	0x823e	; 0x823e <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(game.flags & BOSS_REACHED))
    dc2c:	80 91 b7 0d 	lds	r24, 0x0DB7
    dc30:	90 91 b8 0d 	lds	r25, 0x0DB8
    dc34:	73 e0       	ldi	r23, 0x03	; 3
    dc36:	96 95       	lsr	r25
    dc38:	87 95       	ror	r24
    dc3a:	7a 95       	dec	r23
    dc3c:	e1 f7       	brne	.-8      	; 0xdc36 <update_player+0xaa>
    dc3e:	4c 96       	adiw	r24, 0x1c	; 28
    dc40:	8a 3f       	cpi	r24, 0xFA	; 250
    dc42:	91 05       	cpc	r25, r1
    dc44:	68 f0       	brcs	.+26     	; 0xdc60 <update_player+0xd4>
    dc46:	80 91 d6 0d 	lds	r24, 0x0DD6
    dc4a:	87 fd       	sbrc	r24, 7
    dc4c:	09 c0       	rjmp	.+18     	; 0xdc60 <update_player+0xd4>
				{
					game.flags |= BOSS_REACHED;
    dc4e:	80 68       	ori	r24, 0x80	; 128
    dc50:	80 93 d6 0d 	sts	0x0DD6, r24
					init_enemy_boss_turrets();
    dc54:	0e 94 63 57 	call	0xaec6	; 0xaec6 <init_enemy_boss_turrets>
					StartSong(planetsong);
    dc58:	86 ee       	ldi	r24, 0xE6	; 230
    dc5a:	9a e0       	ldi	r25, 0x0A	; 10
    dc5c:	0e 94 f6 40 	call	0x81ec	; 0x81ec <StartSong>
				}
				if ((game.flags & BOSS_REACHED) && (game.active_enemies == 0))
    dc60:	80 91 d6 0d 	lds	r24, 0x0DD6
    dc64:	87 ff       	sbrs	r24, 7
    dc66:	12 c0       	rjmp	.+36     	; 0xdc8c <update_player+0x100>
    dc68:	80 91 d2 0d 	lds	r24, 0x0DD2
    dc6c:	81 11       	cpse	r24, r1
    dc6e:	0e c0       	rjmp	.+28     	; 0xdc8c <update_player+0x100>
				{
					init_enemy_boss_eyes();
    dc70:	0e 94 83 57 	call	0xaf06	; 0xaf06 <init_enemy_boss_eyes>
					game.eye_clusters--;
    dc74:	80 91 d5 0d 	lds	r24, 0x0DD5
    dc78:	81 50       	subi	r24, 0x01	; 1
    dc7a:	80 93 d5 0d 	sts	0x0DD5, r24
					if (game.eye_clusters == 0)
    dc7e:	81 11       	cpse	r24, r1
    dc80:	05 c0       	rjmp	.+10     	; 0xdc8c <update_player+0x100>
					{
						game.level_ended = 1;
    dc82:	81 e0       	ldi	r24, 0x01	; 1
    dc84:	80 93 d4 0d 	sts	0x0DD4, r24
    dc88:	01 c0       	rjmp	.+2      	; 0xdc8c <update_player+0x100>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    dc8a:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    dc8c:	f7 01       	movw	r30, r14
    dc8e:	80 85       	ldd	r24, Z+8	; 0x08
    dc90:	85 ff       	sbrs	r24, 5
    dc92:	08 c0       	rjmp	.+16     	; 0xdca4 <update_player+0x118>
    dc94:	80 91 cc 0d 	lds	r24, 0x0DCC
    dc98:	89 30       	cpi	r24, 0x09	; 9
    dc9a:	21 f0       	breq	.+8      	; 0xdca4 <update_player+0x118>
			player->shared.vx = space_ship_speed*2;
    dc9c:	00 0f       	add	r16, r16
    dc9e:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    dca0:	14 82       	std	Z+4, r1	; 0x04
    dca2:	43 c0       	rjmp	.+134    	; 0xdd2a <update_player+0x19e>
		} else {
			player->shared.vy = 0;
    dca4:	f7 01       	movw	r30, r14
    dca6:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    dca8:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    dcaa:	e8 58       	subi	r30, 0x88	; 136
    dcac:	ff 4f       	sbci	r31, 0xFF	; 255
    dcae:	20 81       	ld	r18, Z
    dcb0:	25 ff       	sbrs	r18, 5
    dcb2:	11 c0       	rjmp	.+34     	; 0xdcd6 <update_player+0x14a>
    dcb4:	f7 01       	movw	r30, r14
    dcb6:	82 81       	ldd	r24, Z+2	; 0x02
    dcb8:	93 81       	ldd	r25, Z+3	; 0x03
    dcba:	63 e0       	ldi	r22, 0x03	; 3
    dcbc:	96 95       	lsr	r25
    dcbe:	87 95       	ror	r24
    dcc0:	6a 95       	dec	r22
    dcc2:	e1 f7       	brne	.-8      	; 0xdcbc <update_player+0x130>
    dcc4:	01 96       	adiw	r24, 0x01	; 1
    dcc6:	40 91 c7 0d 	lds	r20, 0x0DC7
    dcca:	50 e0       	ldi	r21, 0x00	; 0
    dccc:	84 17       	cp	r24, r20
    dcce:	95 07       	cpc	r25, r21
    dcd0:	10 f4       	brcc	.+4      	; 0xdcd6 <update_player+0x14a>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    dcd2:	8c e3       	ldi	r24, 0x3C	; 60
    dcd4:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    dcd6:	27 ff       	sbrs	r18, 7
    dcd8:	11 c0       	rjmp	.+34     	; 0xdcfc <update_player+0x170>
    dcda:	f7 01       	movw	r30, r14
    dcdc:	40 81       	ld	r20, Z
    dcde:	51 81       	ldd	r21, Z+1	; 0x01
    dce0:	48 5e       	subi	r20, 0xE8	; 232
    dce2:	5f 4f       	sbci	r21, 0xFF	; 255
    dce4:	80 91 b7 0d 	lds	r24, 0x0DB7
    dce8:	90 91 b8 0d 	lds	r25, 0x0DB8
    dcec:	80 52       	subi	r24, 0x20	; 32
    dcee:	9f 4f       	sbci	r25, 0xFF	; 255
    dcf0:	48 17       	cp	r20, r24
    dcf2:	59 07       	cpc	r21, r25
    dcf4:	18 f4       	brcc	.+6      	; 0xdcfc <update_player+0x170>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    dcf6:	8c e3       	ldi	r24, 0x3C	; 60
    dcf8:	80 0f       	add	r24, r16
    dcfa:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dcfc:	26 ff       	sbrs	r18, 6
    dcfe:	0c c0       	rjmp	.+24     	; 0xdd18 <update_player+0x18c>
    dd00:	f7 01       	movw	r30, r14
    dd02:	40 81       	ld	r20, Z
    dd04:	51 81       	ldd	r21, Z+1	; 0x01
    dd06:	80 91 b7 0d 	lds	r24, 0x0DB7
    dd0a:	90 91 b8 0d 	lds	r25, 0x0DB8
    dd0e:	84 17       	cp	r24, r20
    dd10:	95 07       	cpc	r25, r21
    dd12:	10 f4       	brcc	.+4      	; 0xdd18 <update_player+0x18c>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    dd14:	0c 53       	subi	r16, 0x3C	; 60
    dd16:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    dd18:	24 ff       	sbrs	r18, 4
    dd1a:	07 c0       	rjmp	.+14     	; 0xdd2a <update_player+0x19e>
    dd1c:	f7 01       	movw	r30, r14
    dd1e:	82 81       	ldd	r24, Z+2	; 0x02
    dd20:	93 81       	ldd	r25, Z+3	; 0x03
    dd22:	89 2b       	or	r24, r25
    dd24:	11 f0       	breq	.+4      	; 0xdd2a <update_player+0x19e>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    dd26:	84 ec       	ldi	r24, 0xC4	; 196
    dd28:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    dd2a:	c7 01       	movw	r24, r14
    dd2c:	8c 5a       	subi	r24, 0xAC	; 172
    dd2e:	9f 4f       	sbci	r25, 0xFF	; 255
    dd30:	46 c1       	rjmp	.+652    	; 0xdfbe <update_player+0x432>
	}
	else if (player->flags & (IDLE|RUNNING))
    dd32:	80 2f       	mov	r24, r16
    dd34:	8a 70       	andi	r24, 0x0A	; 10
    dd36:	09 f4       	brne	.+2      	; 0xdd3a <update_player+0x1ae>
    dd38:	98 c0       	rjmp	.+304    	; 0xde6a <update_player+0x2de>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    dd3a:	f7 01       	movw	r30, r14
    dd3c:	44 85       	ldd	r20, Z+12	; 0x0c
    dd3e:	63 85       	ldd	r22, Z+11	; 0x0b
    dd40:	c7 01       	movw	r24, r14
    dd42:	0e 94 c5 5a 	call	0xb58a	; 0xb58a <on_solid_ground>
    dd46:	81 11       	cpse	r24, r1
    dd48:	06 c0       	rjmp	.+12     	; 0xdd56 <update_player+0x1ca>
		{
			player->shared.gravity = GRAVITY;
    dd4a:	88 ec       	ldi	r24, 0xC8	; 200
    dd4c:	f7 01       	movw	r30, r14
    dd4e:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    dd50:	81 e0       	ldi	r24, 0x01	; 1
    dd52:	80 87       	std	Z+8, r24	; 0x08
    dd54:	12 c1       	rjmp	.+548    	; 0xdf7a <update_player+0x3ee>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    dd56:	f7 01       	movw	r30, r14
    dd58:	e8 58       	subi	r30, 0x88	; 136
    dd5a:	ff 4f       	sbci	r31, 0xFF	; 255
    dd5c:	20 81       	ld	r18, Z
    dd5e:	25 ff       	sbrs	r18, 5
    dd60:	26 c0       	rjmp	.+76     	; 0xddae <update_player+0x222>
			{
				player->shared.y += 16;
    dd62:	f7 01       	movw	r30, r14
    dd64:	82 81       	ldd	r24, Z+2	; 0x02
    dd66:	93 81       	ldd	r25, Z+3	; 0x03
    dd68:	40 96       	adiw	r24, 0x10	; 16
    dd6a:	93 83       	std	Z+3, r25	; 0x03
    dd6c:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    dd6e:	82 85       	ldd	r24, Z+10	; 0x0a
    dd70:	81 30       	cpi	r24, 0x01	; 1
    dd72:	29 f4       	brne	.+10     	; 0xdd7e <update_player+0x1f2>
				{
					player->shared.x -= 8;
    dd74:	80 81       	ld	r24, Z
    dd76:	91 81       	ldd	r25, Z+1	; 0x01
    dd78:	08 97       	sbiw	r24, 0x08	; 8
    dd7a:	91 83       	std	Z+1, r25	; 0x01
    dd7c:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    dd7e:	f7 01       	movw	r30, r14
    dd80:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    dd82:	84 e0       	ldi	r24, 0x04	; 4
    dd84:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    dd86:	83 e0       	ldi	r24, 0x03	; 3
    dd88:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    dd8a:	81 e0       	ldi	r24, 0x01	; 1
    dd8c:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(slot+3, 3);
    dd8e:	63 e0       	ldi	r22, 0x03	; 3
    dd90:	83 e0       	ldi	r24, 0x03	; 3
    dd92:	81 0f       	add	r24, r17
    dd94:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    dd98:	24 e0       	ldi	r18, 0x04	; 4
    dd9a:	12 9f       	mul	r17, r18
    dd9c:	f0 01       	movw	r30, r0
    dd9e:	11 24       	eor	r1, r1
    dda0:	e7 51       	subi	r30, 0x17	; 23
    dda2:	f0 4f       	sbci	r31, 0xF0	; 240
    dda4:	43 81       	ldd	r20, Z+3	; 0x03
    dda6:	c7 01       	movw	r24, r14
    dda8:	8c 59       	subi	r24, 0x9C	; 156
    ddaa:	9f 4f       	sbci	r25, 0xFF	; 255
    ddac:	44 c0       	rjmp	.+136    	; 0xde36 <update_player+0x2aa>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    ddae:	27 ff       	sbrs	r18, 7
    ddb0:	1c c0       	rjmp	.+56     	; 0xddea <update_player+0x25e>
    ddb2:	f7 01       	movw	r30, r14
    ddb4:	80 81       	ld	r24, Z
    ddb6:	91 81       	ldd	r25, Z+1	; 0x01
    ddb8:	53 e0       	ldi	r21, 0x03	; 3
    ddba:	96 95       	lsr	r25
    ddbc:	87 95       	ror	r24
    ddbe:	5a 95       	dec	r21
    ddc0:	e1 f7       	brne	.-8      	; 0xddba <update_player+0x22e>
    ddc2:	02 96       	adiw	r24, 0x02	; 2
    ddc4:	40 91 c6 0d 	lds	r20, 0x0DC6
    ddc8:	50 e0       	ldi	r21, 0x00	; 0
    ddca:	84 17       	cp	r24, r20
    ddcc:	95 07       	cpc	r25, r21
    ddce:	68 f4       	brcc	.+26     	; 0xddea <update_player+0x25e>
			{
				player->shared.vx = RUN_SPEED;
    ddd0:	8c e3       	ldi	r24, 0x3C	; 60
    ddd2:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    ddd4:	82 e0       	ldi	r24, 0x02	; 2
    ddd6:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    ddd8:	81 e0       	ldi	r24, 0x01	; 1
    ddda:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    dddc:	c7 01       	movw	r24, r14
    ddde:	8c 5a       	subi	r24, 0xAC	; 172
    dde0:	9f 4f       	sbci	r25, 0xFF	; 255
    dde2:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    dde6:	40 e0       	ldi	r20, 0x00	; 0
    dde8:	2a c0       	rjmp	.+84     	; 0xde3e <update_player+0x2b2>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    ddea:	26 ff       	sbrs	r18, 6
    ddec:	16 c0       	rjmp	.+44     	; 0xde1a <update_player+0x28e>
    ddee:	f7 01       	movw	r30, r14
    ddf0:	20 81       	ld	r18, Z
    ddf2:	31 81       	ldd	r19, Z+1	; 0x01
    ddf4:	80 91 b7 0d 	lds	r24, 0x0DB7
    ddf8:	90 91 b8 0d 	lds	r25, 0x0DB8
    ddfc:	82 17       	cp	r24, r18
    ddfe:	93 07       	cpc	r25, r19
    de00:	60 f4       	brcc	.+24     	; 0xde1a <update_player+0x28e>
			{
				player->shared.vx = -RUN_SPEED;
    de02:	84 ec       	ldi	r24, 0xC4	; 196
    de04:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    de06:	82 e0       	ldi	r24, 0x02	; 2
    de08:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    de0a:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    de0c:	c7 01       	movw	r24, r14
    de0e:	8c 5a       	subi	r24, 0xAC	; 172
    de10:	9f 4f       	sbci	r25, 0xFF	; 255
    de12:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    de16:	41 e0       	ldi	r20, 0x01	; 1
    de18:	12 c0       	rjmp	.+36     	; 0xde3e <update_player+0x2b2>
			}
			else
			{
				player->flags = IDLE;
    de1a:	88 e0       	ldi	r24, 0x08	; 8
    de1c:	f7 01       	movw	r30, r14
    de1e:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    de20:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    de22:	24 e0       	ldi	r18, 0x04	; 4
    de24:	12 9f       	mul	r17, r18
    de26:	f0 01       	movw	r30, r0
    de28:	11 24       	eor	r1, r1
    de2a:	e7 51       	subi	r30, 0x17	; 23
    de2c:	f0 4f       	sbci	r31, 0xF0	; 240
    de2e:	43 81       	ldd	r20, Z+3	; 0x03
    de30:	c7 01       	movw	r24, r14
    de32:	84 5b       	subi	r24, 0xB4	; 180
    de34:	9f 4f       	sbci	r25, 0xFF	; 255
    de36:	49 83       	std	Y+1, r20	; 0x01
    de38:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    de3c:	49 81       	ldd	r20, Y+1	; 0x01
    de3e:	bc 01       	movw	r22, r24
    de40:	81 2f       	mov	r24, r17
    de42:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
			}
			if (player->controls.pressed & BTN_A && !(player->flags & PRONE))
    de46:	f7 01       	movw	r30, r14
    de48:	ec 58       	subi	r30, 0x8C	; 140
    de4a:	ff 4f       	sbci	r31, 0xFF	; 255
    de4c:	80 81       	ld	r24, Z
    de4e:	91 81       	ldd	r25, Z+1	; 0x01
    de50:	90 ff       	sbrs	r25, 0
    de52:	bc c0       	rjmp	.+376    	; 0xdfcc <update_player+0x440>
    de54:	f7 01       	movw	r30, r14
    de56:	80 85       	ldd	r24, Z+8	; 0x08
    de58:	82 fd       	sbrc	r24, 2
    de5a:	b8 c0       	rjmp	.+368    	; 0xdfcc <update_player+0x440>
			{
				player->shared.vy = -JUMP_SPEED;
    de5c:	81 e8       	ldi	r24, 0x81	; 129
    de5e:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    de60:	88 ec       	ldi	r24, 0xC8	; 200
    de62:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    de64:	81 e0       	ldi	r24, 0x01	; 1
    de66:	80 87       	std	Z+8, r24	; 0x08
    de68:	84 c0       	rjmp	.+264    	; 0xdf72 <update_player+0x3e6>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    de6a:	00 ff       	sbrs	r16, 0
    de6c:	4c c0       	rjmp	.+152    	; 0xdf06 <update_player+0x37a>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    de6e:	f7 01       	movw	r30, r14
    de70:	e8 58       	subi	r30, 0x88	; 136
    de72:	ff 4f       	sbci	r31, 0xFF	; 255
    de74:	60 81       	ld	r22, Z
    de76:	c7 01       	movw	r24, r14
    de78:	84 5a       	subi	r24, 0xA4	; 164
    de7a:	9f 4f       	sbci	r25, 0xFF	; 255
    de7c:	67 ff       	sbrs	r22, 7
    de7e:	18 c0       	rjmp	.+48     	; 0xdeb0 <update_player+0x324>
    de80:	f7 01       	movw	r30, r14
    de82:	20 81       	ld	r18, Z
    de84:	31 81       	ldd	r19, Z+1	; 0x01
    de86:	43 e0       	ldi	r20, 0x03	; 3
    de88:	36 95       	lsr	r19
    de8a:	27 95       	ror	r18
    de8c:	4a 95       	dec	r20
    de8e:	e1 f7       	brne	.-8      	; 0xde88 <update_player+0x2fc>
    de90:	2e 5f       	subi	r18, 0xFE	; 254
    de92:	3f 4f       	sbci	r19, 0xFF	; 255
    de94:	40 91 c6 0d 	lds	r20, 0x0DC6
    de98:	50 e0       	ldi	r21, 0x00	; 0
    de9a:	24 17       	cp	r18, r20
    de9c:	35 07       	cpc	r19, r21
    de9e:	40 f4       	brcc	.+16     	; 0xdeb0 <update_player+0x324>
		{
			player->shared.vx = RUN_SPEED;
    dea0:	2c e3       	ldi	r18, 0x3C	; 60
    dea2:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    dea4:	21 e0       	ldi	r18, 0x01	; 1
    dea6:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    dea8:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    deac:	40 e0       	ldi	r20, 0x00	; 0
    deae:	20 c0       	rjmp	.+64     	; 0xdef0 <update_player+0x364>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    deb0:	66 ff       	sbrs	r22, 6
    deb2:	11 c0       	rjmp	.+34     	; 0xded6 <update_player+0x34a>
    deb4:	f7 01       	movw	r30, r14
    deb6:	40 81       	ld	r20, Z
    deb8:	51 81       	ldd	r21, Z+1	; 0x01
    deba:	20 91 b7 0d 	lds	r18, 0x0DB7
    debe:	30 91 b8 0d 	lds	r19, 0x0DB8
    dec2:	24 17       	cp	r18, r20
    dec4:	35 07       	cpc	r19, r21
    dec6:	38 f4       	brcc	.+14     	; 0xded6 <update_player+0x34a>
		{
			player->shared.vx = -RUN_SPEED;
    dec8:	24 ec       	ldi	r18, 0xC4	; 196
    deca:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    decc:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    dece:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    ded2:	41 e0       	ldi	r20, 0x01	; 1
    ded4:	0d c0       	rjmp	.+26     	; 0xdef0 <update_player+0x364>
		}
		else
		{
			player->shared.vx = 0;
    ded6:	f7 01       	movw	r30, r14
    ded8:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    deda:	24 e0       	ldi	r18, 0x04	; 4
    dedc:	12 9f       	mul	r17, r18
    dede:	f0 01       	movw	r30, r0
    dee0:	11 24       	eor	r1, r1
    dee2:	e7 51       	subi	r30, 0x17	; 23
    dee4:	f0 4f       	sbci	r31, 0xF0	; 240
    dee6:	43 81       	ldd	r20, Z+3	; 0x03
    dee8:	49 83       	std	Y+1, r20	; 0x01
    deea:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    deee:	49 81       	ldd	r20, Y+1	; 0x01
    def0:	bc 01       	movw	r22, r24
    def2:	81 2f       	mov	r24, r17
    def4:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    def8:	f7 01       	movw	r30, r14
    defa:	86 81       	ldd	r24, Z+6	; 0x06
    defc:	81 11       	cpse	r24, r1
    defe:	66 c0       	rjmp	.+204    	; 0xdfcc <update_player+0x440>
		{
			player->flags = IDLE;
    df00:	88 e0       	ldi	r24, 0x08	; 8
    df02:	80 87       	std	Z+8, r24	; 0x08
    df04:	63 c0       	rjmp	.+198    	; 0xdfcc <update_player+0x440>
		}
	}
	else if (player->flags & PRONE)
    df06:	02 ff       	sbrs	r16, 2
    df08:	61 c0       	rjmp	.+194    	; 0xdfcc <update_player+0x440>
	{
		if (player->controls.pressed & BTN_UP)
    df0a:	f7 01       	movw	r30, r14
    df0c:	ec 58       	subi	r30, 0x8C	; 140
    df0e:	ff 4f       	sbci	r31, 0xFF	; 255
    df10:	80 81       	ld	r24, Z
    df12:	91 81       	ldd	r25, Z+1	; 0x01
    df14:	84 ff       	sbrs	r24, 4
    df16:	16 c0       	rjmp	.+44     	; 0xdf44 <update_player+0x3b8>
		{
			player->flags = IDLE;	
    df18:	88 e0       	ldi	r24, 0x08	; 8
    df1a:	f7 01       	movw	r30, r14
    df1c:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    df1e:	82 81       	ldd	r24, Z+2	; 0x02
    df20:	93 81       	ldd	r25, Z+3	; 0x03
    df22:	40 97       	sbiw	r24, 0x10	; 16
    df24:	93 83       	std	Z+3, r25	; 0x03
    df26:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    df28:	82 85       	ldd	r24, Z+10	; 0x0a
    df2a:	81 30       	cpi	r24, 0x01	; 1
    df2c:	29 f4       	brne	.+10     	; 0xdf38 <update_player+0x3ac>
			{
				player->shared.x += 8;
    df2e:	80 81       	ld	r24, Z
    df30:	91 81       	ldd	r25, Z+1	; 0x01
    df32:	08 96       	adiw	r24, 0x08	; 8
    df34:	91 83       	std	Z+1, r25	; 0x01
    df36:	80 83       	st	Z, r24
			}
			player->width = 2;
    df38:	82 e0       	ldi	r24, 0x02	; 2
    df3a:	f7 01       	movw	r30, r14
    df3c:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    df3e:	83 e0       	ldi	r24, 0x03	; 3
    df40:	84 87       	std	Z+12, r24	; 0x0c
    df42:	44 c0       	rjmp	.+136    	; 0xdfcc <update_player+0x440>
		}
		else if (player->controls.pressed & BTN_A)
    df44:	90 ff       	sbrs	r25, 0
    df46:	28 c0       	rjmp	.+80     	; 0xdf98 <update_player+0x40c>
		{
			player->flags = JUMPING;
    df48:	81 e0       	ldi	r24, 0x01	; 1
    df4a:	f7 01       	movw	r30, r14
    df4c:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    df4e:	82 81       	ldd	r24, Z+2	; 0x02
    df50:	93 81       	ldd	r25, Z+3	; 0x03
    df52:	40 97       	sbiw	r24, 0x10	; 16
    df54:	93 83       	std	Z+3, r25	; 0x03
    df56:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    df58:	82 85       	ldd	r24, Z+10	; 0x0a
    df5a:	81 30       	cpi	r24, 0x01	; 1
    df5c:	29 f4       	brne	.+10     	; 0xdf68 <update_player+0x3dc>
			{
				player->shared.x += 8;
    df5e:	80 81       	ld	r24, Z
    df60:	91 81       	ldd	r25, Z+1	; 0x01
    df62:	08 96       	adiw	r24, 0x08	; 8
    df64:	91 83       	std	Z+1, r25	; 0x01
    df66:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    df68:	81 e8       	ldi	r24, 0x81	; 129
    df6a:	f7 01       	movw	r30, r14
    df6c:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    df6e:	88 ec       	ldi	r24, 0xC8	; 200
    df70:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    df72:	82 e0       	ldi	r24, 0x02	; 2
    df74:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    df76:	83 e0       	ldi	r24, 0x03	; 3
    df78:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    df7a:	24 e0       	ldi	r18, 0x04	; 4
    df7c:	12 9f       	mul	r17, r18
    df7e:	f0 01       	movw	r30, r0
    df80:	11 24       	eor	r1, r1
    df82:	e7 51       	subi	r30, 0x17	; 23
    df84:	f0 4f       	sbci	r31, 0xF0	; 240
    df86:	43 81       	ldd	r20, Z+3	; 0x03
    df88:	c7 01       	movw	r24, r14
    df8a:	84 5a       	subi	r24, 0xA4	; 164
    df8c:	9f 4f       	sbci	r25, 0xFF	; 255
    df8e:	49 83       	std	Y+1, r20	; 0x01
    df90:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    df94:	49 81       	ldd	r20, Y+1	; 0x01
    df96:	16 c0       	rjmp	.+44     	; 0xdfc4 <update_player+0x438>
		}
		else if (player->controls.pressed & BTN_LEFT)
    df98:	86 ff       	sbrs	r24, 6
    df9a:	09 c0       	rjmp	.+18     	; 0xdfae <update_player+0x422>
		{
			player->direction = D_LEFT;
    df9c:	f7 01       	movw	r30, r14
    df9e:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    dfa0:	c7 01       	movw	r24, r14
    dfa2:	8c 59       	subi	r24, 0x9C	; 156
    dfa4:	9f 4f       	sbci	r25, 0xFF	; 255
    dfa6:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    dfaa:	41 e0       	ldi	r20, 0x01	; 1
    dfac:	0b c0       	rjmp	.+22     	; 0xdfc4 <update_player+0x438>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    dfae:	87 ff       	sbrs	r24, 7
    dfb0:	0d c0       	rjmp	.+26     	; 0xdfcc <update_player+0x440>
		{
			player->direction = D_RIGHT;
    dfb2:	81 e0       	ldi	r24, 0x01	; 1
    dfb4:	f7 01       	movw	r30, r14
    dfb6:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    dfb8:	c7 01       	movw	r24, r14
    dfba:	8c 59       	subi	r24, 0x9C	; 156
    dfbc:	9f 4f       	sbci	r25, 0xFF	; 255
    dfbe:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    dfc2:	40 e0       	ldi	r20, 0x00	; 0
    dfc4:	bc 01       	movw	r22, r24
    dfc6:	81 2f       	mov	r24, r17
    dfc8:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
		}
	}
	return 1;
}
    dfcc:	81 e0       	ldi	r24, 0x01	; 1
    dfce:	0f 90       	pop	r0
    dfd0:	df 91       	pop	r29
    dfd2:	cf 91       	pop	r28
    dfd4:	1f 91       	pop	r17
    dfd6:	0f 91       	pop	r16
    dfd8:	ff 90       	pop	r15
    dfda:	ef 90       	pop	r14
    dfdc:	08 95       	ret

0000dfde <update_level>:
	load_splash();
}
#endif

u8 update_level()
{
    dfde:	cf 92       	push	r12
    dfe0:	df 92       	push	r13
    dfe2:	ef 92       	push	r14
    dfe4:	ff 92       	push	r15
    dfe6:	0f 93       	push	r16
    dfe8:	cf 93       	push	r28
    dfea:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    dfec:	e0 90 d9 0d 	lds	r14, 0x0DD9
    dff0:	f0 90 da 0d 	lds	r15, 0x0DDA
    dff4:	c0 90 b7 0d 	lds	r12, 0x0DB7
    dff8:	d0 90 b8 0d 	lds	r13, 0x0DB8
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    dffc:	80 91 d1 0d 	lds	r24, 0x0DD1
    e000:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    e002:	8c 33       	cpi	r24, 0x3C	; 60
    e004:	19 f0       	breq	.+6      	; 0xe00c <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    e006:	80 93 d1 0d 	sts	0x0DD1, r24
    e00a:	0f c0       	rjmp	.+30     	; 0xe02a <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    e00c:	10 92 d1 0d 	sts	0x0DD1, r1
		if (game.time != 65535) game.time++;
    e010:	80 91 bd 0d 	lds	r24, 0x0DBD
    e014:	90 91 be 0d 	lds	r25, 0x0DBE
    e018:	8f 3f       	cpi	r24, 0xFF	; 255
    e01a:	2f ef       	ldi	r18, 0xFF	; 255
    e01c:	92 07       	cpc	r25, r18
    e01e:	29 f0       	breq	.+10     	; 0xe02a <update_level+0x4c>
    e020:	01 96       	adiw	r24, 0x01	; 1
    e022:	90 93 be 0d 	sts	0x0DBE, r25
    e026:	80 93 bd 0d 	sts	0x0DBD, r24
	}
	
	if (is_space())
    e02a:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    e02e:	88 23       	and	r24, r24
    e030:	a1 f1       	breq	.+104    	; 0xe09a <update_level+0xbc>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    e032:	c6 01       	movw	r24, r12
    e034:	23 e0       	ldi	r18, 0x03	; 3
    e036:	96 95       	lsr	r25
    e038:	87 95       	ror	r24
    e03a:	2a 95       	dec	r18
    e03c:	e1 f7       	brne	.-8      	; 0xe036 <update_level+0x58>
    e03e:	4c 96       	adiw	r24, 0x1c	; 28
    e040:	20 91 c6 0d 	lds	r18, 0x0DC6
    e044:	30 e0       	ldi	r19, 0x00	; 0
    e046:	82 17       	cp	r24, r18
    e048:	93 07       	cpc	r25, r19
    e04a:	70 f4       	brcc	.+28     	; 0xe068 <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    e04c:	20 91 cc 0d 	lds	r18, 0x0DCC
    e050:	29 30       	cpi	r18, 0x09	; 9
    e052:	39 f4       	brne	.+14     	; 0xe062 <update_level+0x84>
    e054:	82 3d       	cpi	r24, 0xD2	; 210
    e056:	91 05       	cpc	r25, r1
    e058:	20 f0       	brcs	.+8      	; 0xe062 <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    e05a:	80 91 d1 0d 	lds	r24, 0x0DD1
    e05e:	80 fd       	sbrc	r24, 0
    e060:	34 c0       	rjmp	.+104    	; 0xe0ca <update_level+0xec>
    e062:	0e 94 72 5a 	call	0xb4e4	; 0xb4e4 <move_camera_x>
    e066:	31 c0       	rjmp	.+98     	; 0xe0ca <update_level+0xec>
    e068:	80 91 e1 0d 	lds	r24, 0x0DE1
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x+24 >= game.camera_x+CAMERA_WIDTH*8 && game.current_level_index != 9)
    e06c:	a7 01       	movw	r20, r14
    e06e:	48 5e       	subi	r20, 0xE8	; 232
    e070:	5f 4f       	sbci	r21, 0xFF	; 255
    e072:	96 01       	movw	r18, r12
    e074:	20 52       	subi	r18, 0x20	; 32
    e076:	3f 4f       	sbci	r19, 0xFF	; 255
    e078:	42 17       	cp	r20, r18
    e07a:	53 07       	cpc	r21, r19
    e07c:	50 f0       	brcs	.+20     	; 0xe092 <update_level+0xb4>
    e07e:	90 91 cc 0d 	lds	r25, 0x0DCC
    e082:	99 30       	cpi	r25, 0x09	; 9
    e084:	31 f0       	breq	.+12     	; 0xe092 <update_level+0xb4>
		{
			game.level_ended = 1;
    e086:	91 e0       	ldi	r25, 0x01	; 1
    e088:	90 93 d4 0d 	sts	0x0DD4, r25
			game.player.flags ^= END_OF_SPACE;
    e08c:	90 e2       	ldi	r25, 0x20	; 32
    e08e:	89 27       	eor	r24, r25
    e090:	01 c0       	rjmp	.+2      	; 0xe094 <update_level+0xb6>
		} else {
			game.player.flags |= END_OF_SPACE;
    e092:	80 62       	ori	r24, 0x20	; 32
    e094:	80 93 e1 0d 	sts	0x0DE1, r24
    e098:	18 c0       	rjmp	.+48     	; 0xe0ca <update_level+0xec>
		}
	}
	else if (game.player.shared.vx > 0 &&
    e09a:	80 91 de 0d 	lds	r24, 0x0DDE
    e09e:	18 16       	cp	r1, r24
    e0a0:	a4 f4       	brge	.+40     	; 0xe0ca <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    e0a2:	c7 01       	movw	r24, r14
    e0a4:	8c 19       	sub	r24, r12
    e0a6:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    e0a8:	80 37       	cpi	r24, 0x70	; 112
    e0aa:	91 05       	cpc	r25, r1
    e0ac:	70 f0       	brcs	.+28     	; 0xe0ca <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    e0ae:	96 01       	movw	r18, r12
    e0b0:	83 e0       	ldi	r24, 0x03	; 3
    e0b2:	36 95       	lsr	r19
    e0b4:	27 95       	ror	r18
    e0b6:	8a 95       	dec	r24
    e0b8:	e1 f7       	brne	.-8      	; 0xe0b2 <update_level+0xd4>
    e0ba:	24 5e       	subi	r18, 0xE4	; 228
    e0bc:	3f 4f       	sbci	r19, 0xFF	; 255
    e0be:	80 91 c6 0d 	lds	r24, 0x0DC6
    e0c2:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    e0c4:	28 17       	cp	r18, r24
    e0c6:	39 07       	cpc	r19, r25
    e0c8:	60 f2       	brcs	.-104    	; 0xe062 <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    e0ca:	21 e0       	ldi	r18, 0x01	; 1
    e0cc:	40 91 e8 0d 	lds	r20, 0x0DE8
    e0d0:	6d e1       	ldi	r22, 0x1D	; 29
    e0d2:	89 e0       	ldi	r24, 0x09	; 9
    e0d4:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    e0d8:	40 91 bd 0d 	lds	r20, 0x0DBD
    e0dc:	50 91 be 0d 	lds	r21, 0x0DBE
    e0e0:	21 e0       	ldi	r18, 0x01	; 1
    e0e2:	6d e1       	ldi	r22, 0x1D	; 29
    e0e4:	8b e1       	ldi	r24, 0x1B	; 27
    e0e6:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    e0ea:	21 e0       	ldi	r18, 0x01	; 1
    e0ec:	40 91 ca 0d 	lds	r20, 0x0DCA
    e0f0:	6e e1       	ldi	r22, 0x1E	; 30
    e0f2:	89 e0       	ldi	r24, 0x09	; 9
    e0f4:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    e0f8:	40 91 bb 0d 	lds	r20, 0x0DBB
    e0fc:	50 91 bc 0d 	lds	r21, 0x0DBC
    e100:	21 e0       	ldi	r18, 0x01	; 1
    e102:	6e e1       	ldi	r22, 0x1E	; 30
    e104:	8b e1       	ldi	r24, 0x1B	; 27
    e106:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    e10a:	40 91 b9 0d 	lds	r20, 0x0DB9
    e10e:	50 91 ba 0d 	lds	r21, 0x0DBA
    e112:	21 e0       	ldi	r18, 0x01	; 1
    e114:	6f e1       	ldi	r22, 0x1F	; 31
    e116:	8b e1       	ldi	r24, 0x1B	; 27
    e118:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    e11c:	80 91 d4 0d 	lds	r24, 0x0DD4
    e120:	88 23       	and	r24, r24
    e122:	09 f4       	brne	.+2      	; 0xe126 <update_level+0x148>
    e124:	90 c0       	rjmp	.+288    	; 0xe246 <update_level+0x268>
    e126:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    e12a:	81 11       	cpse	r24, r1
    e12c:	6a c0       	rjmp	.+212    	; 0xe202 <update_level+0x224>
    e12e:	80 91 e1 0d 	lds	r24, 0x0DE1
    e132:	8e 70       	andi	r24, 0x0E	; 14
    e134:	09 f4       	brne	.+2      	; 0xe138 <update_level+0x15a>
    e136:	87 c0       	rjmp	.+270    	; 0xe246 <update_level+0x268>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    e138:	40 e0       	ldi	r20, 0x00	; 0
    e13a:	69 ef       	ldi	r22, 0xF9	; 249
    e13c:	70 e3       	ldi	r23, 0x30	; 48
    e13e:	80 e0       	ldi	r24, 0x00	; 0
    e140:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
		if (game.player.flags & PRONE) {
    e144:	80 91 e1 0d 	lds	r24, 0x0DE1
    e148:	82 ff       	sbrs	r24, 2
    e14a:	1a c0       	rjmp	.+52     	; 0xe180 <update_level+0x1a2>
			game.player.shared.y -= 16;
    e14c:	40 91 db 0d 	lds	r20, 0x0DDB
    e150:	50 91 dc 0d 	lds	r21, 0x0DDC
    e154:	40 51       	subi	r20, 0x10	; 16
    e156:	51 09       	sbc	r21, r1
    e158:	50 93 dc 0d 	sts	0x0DDC, r21
    e15c:	40 93 db 0d 	sts	0x0DDB, r20
			game.player.width = 2;
    e160:	82 e0       	ldi	r24, 0x02	; 2
    e162:	80 93 e4 0d 	sts	0x0DE4, r24
			game.player.height = 3;
    e166:	83 e0       	ldi	r24, 0x03	; 3
    e168:	80 93 e5 0d 	sts	0x0DE5, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    e16c:	60 91 d9 0d 	lds	r22, 0x0DD9
    e170:	80 91 b7 0d 	lds	r24, 0x0DB7
    e174:	68 1b       	sub	r22, r24
    e176:	03 e0       	ldi	r16, 0x03	; 3
    e178:	22 e0       	ldi	r18, 0x02	; 2
    e17a:	80 e0       	ldi	r24, 0x00	; 0
    e17c:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    e180:	6b e0       	ldi	r22, 0x0B	; 11
    e182:	89 e0       	ldi	r24, 0x09	; 9
    e184:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
		LBRotateSprites();
    e188:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
		map_ship();
    e18c:	0e 94 8b 5a 	call	0xb516	; 0xb516 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    e190:	d3 e0       	ldi	r29, 0x03	; 3
#endif

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    e192:	c0 e0       	ldi	r28, 0x00	; 0
}
#endif

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    e194:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
            waitForVSync();
    e196:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    e19a:	8c 2f       	mov	r24, r28
    e19c:	90 e0       	ldi	r25, 0x00	; 0
    e19e:	88 3a       	cpi	r24, 0xA8	; 168
    e1a0:	91 05       	cpc	r25, r1
    e1a2:	3c f0       	brlt	.+14     	; 0xe1b2 <update_level+0x1d4>
			{
				clear_sprites(0, 6);
    e1a4:	66 e0       	ldi	r22, 0x06	; 6
    e1a6:	80 e0       	ldi	r24, 0x00	; 0
    e1a8:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
				LBRotateSprites();
    e1ac:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
				ship_increment = -3;
    e1b0:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    e1b2:	8d e2       	ldi	r24, 0x2D	; 45
    e1b4:	9e e0       	ldi	r25, 0x0E	; 14
    e1b6:	0e 94 36 4d 	call	0x9a6c	; 0x9a6c <LBGetNextFrame>
    e1ba:	40 e0       	ldi	r20, 0x00	; 0
    e1bc:	bc 01       	movw	r22, r24
    e1be:	86 e0       	ldi	r24, 0x06	; 6
    e1c0:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    e1c4:	02 e0       	ldi	r16, 0x02	; 2
    e1c6:	24 e0       	ldi	r18, 0x04	; 4
    e1c8:	4c 2f       	mov	r20, r28
    e1ca:	6e 2d       	mov	r22, r14
    e1cc:	86 e0       	ldi	r24, 0x06	; 6
    e1ce:	0e 94 07 4f 	call	0x9e0e	; 0x9e0e <LBMoveSprite>
			ship_y += ship_increment;
    e1d2:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    e1d4:	99 f4       	brne	.+38     	; 0xe1fc <update_level+0x21e>
			{
				clear_sprites(6, 8);
    e1d6:	68 e0       	ldi	r22, 0x08	; 8
    e1d8:	86 e0       	ldi	r24, 0x06	; 6
    e1da:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <clear_sprites>
				LBRotateSprites();
    e1de:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
				tally_score((char*) strLevelClear, 200);
    e1e2:	68 ec       	ldi	r22, 0xC8	; 200
    e1e4:	70 e0       	ldi	r23, 0x00	; 0
    e1e6:	85 ec       	ldi	r24, 0xC5	; 197
    e1e8:	93 e0       	ldi	r25, 0x03	; 3
    e1ea:	0e 94 2c 6c 	call	0xd858	; 0xd858 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    e1ee:	80 91 cc 0d 	lds	r24, 0x0DCC
    e1f2:	00 e0       	ldi	r16, 0x00	; 0
    e1f4:	23 e0       	ldi	r18, 0x03	; 3
    e1f6:	4a e1       	ldi	r20, 0x1A	; 26
    e1f8:	6f ef       	ldi	r22, 0xFF	; 255
    e1fa:	22 c0       	rjmp	.+68     	; 0xe240 <update_level+0x262>
				break;
			}
			LBRotateSprites();
    e1fc:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
		}
    e200:	ca cf       	rjmp	.-108    	; 0xe196 <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    e202:	80 91 cc 0d 	lds	r24, 0x0DCC
    e206:	89 30       	cpi	r24, 0x09	; 9
    e208:	79 f4       	brne	.+30     	; 0xe228 <update_level+0x24a>
			tally_score((char*) strLevelClear, 200*game.lives);
    e20a:	60 91 ca 0d 	lds	r22, 0x0DCA
    e20e:	88 ec       	ldi	r24, 0xC8	; 200
    e210:	68 9f       	mul	r22, r24
    e212:	b0 01       	movw	r22, r0
    e214:	11 24       	eor	r1, r1
    e216:	85 ec       	ldi	r24, 0xC5	; 197
    e218:	93 e0       	ldi	r25, 0x03	; 3
    e21a:	0e 94 2c 6c 	call	0xd858	; 0xd858 <tally_score>
			congratulations();
    e21e:	0e 94 fa 65 	call	0xcbf4	; 0xcbf4 <congratulations>
			exit_game();
    e222:	0e 94 0d 6b 	call	0xd61a	; 0xd61a <exit_game>
    e226:	29 c0       	rjmp	.+82     	; 0xe27a <update_level+0x29c>
			return 1;
		} else {
			tally_score((char*) strLevelClear, 200);
    e228:	68 ec       	ldi	r22, 0xC8	; 200
    e22a:	70 e0       	ldi	r23, 0x00	; 0
    e22c:	85 ec       	ldi	r24, 0xC5	; 197
    e22e:	93 e0       	ldi	r25, 0x03	; 3
    e230:	0e 94 2c 6c 	call	0xd858	; 0xd858 <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    e234:	80 91 cc 0d 	lds	r24, 0x0DCC
    e238:	07 ec       	ldi	r16, 0xC7	; 199
    e23a:	2d ef       	ldi	r18, 0xFD	; 253
    e23c:	4c e1       	ldi	r20, 0x1C	; 28
    e23e:	61 e0       	ldi	r22, 0x01	; 1
    e240:	8f 5f       	subi	r24, 0xFF	; 255
    e242:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    e246:	80 91 d0 0d 	lds	r24, 0x0DD0
    e24a:	82 30       	cpi	r24, 0x02	; 2
    e24c:	11 f0       	breq	.+4      	; 0xe252 <update_level+0x274>
			exit_game();
#endif
			return 1;
		}
	}
	return 0;
    e24e:	80 e0       	ldi	r24, 0x00	; 0
    e250:	23 c0       	rjmp	.+70     	; 0xe298 <update_level+0x2ba>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    e252:	80 91 f7 0c 	lds	r24, 0x0CF7
    e256:	90 91 f8 0c 	lds	r25, 0x0CF8
    e25a:	01 96       	adiw	r24, 0x01	; 1
    e25c:	90 93 f8 0c 	sts	0x0CF8, r25
    e260:	80 93 f7 0c 	sts	0x0CF7, r24
		if (ReadJoypad(0) || ReadJoypad(1) || (demo_counter >= DEMO_LENGTH))
    e264:	80 e0       	ldi	r24, 0x00	; 0
    e266:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <ReadJoypad>
    e26a:	89 2b       	or	r24, r25
    e26c:	41 f0       	breq	.+16     	; 0xe27e <update_level+0x2a0>
		{
			demo_counter = 0;
    e26e:	10 92 f8 0c 	sts	0x0CF8, r1
    e272:	10 92 f7 0c 	sts	0x0CF7, r1
#if JAMMA
			exit_demo();
    e276:	0e 94 7e 69 	call	0xd2fc	; 0xd2fc <exit_demo>
#else
			exit_game();
#endif
			return 1;
    e27a:	81 e0       	ldi	r24, 0x01	; 1
    e27c:	0d c0       	rjmp	.+26     	; 0xe298 <update_level+0x2ba>
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
		if (ReadJoypad(0) || ReadJoypad(1) || (demo_counter >= DEMO_LENGTH))
    e27e:	81 e0       	ldi	r24, 0x01	; 1
    e280:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <ReadJoypad>
    e284:	89 2b       	or	r24, r25
    e286:	99 f7       	brne	.-26     	; 0xe26e <update_level+0x290>
    e288:	80 91 f7 0c 	lds	r24, 0x0CF7
    e28c:	90 91 f8 0c 	lds	r25, 0x0CF8
    e290:	84 38       	cpi	r24, 0x84	; 132
    e292:	93 40       	sbci	r25, 0x03	; 3
    e294:	60 f7       	brcc	.-40     	; 0xe26e <update_level+0x290>
    e296:	db cf       	rjmp	.-74     	; 0xe24e <update_level+0x270>
			return 1;
		}
	}
	return 0;
	
}
    e298:	df 91       	pop	r29
    e29a:	cf 91       	pop	r28
    e29c:	0f 91       	pop	r16
    e29e:	ff 90       	pop	r15
    e2a0:	ef 90       	pop	r14
    e2a2:	df 90       	pop	r13
    e2a4:	cf 90       	pop	r12
    e2a6:	08 95       	ret

0000e2a8 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    e2a8:	cf 92       	push	r12
    e2aa:	df 92       	push	r13
    e2ac:	ff 92       	push	r15
    e2ae:	0f 93       	push	r16
    e2b0:	1f 93       	push	r17
    e2b2:	cf 93       	push	r28
    e2b4:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e2b6:	20 91 cc 0d 	lds	r18, 0x0DCC
    e2ba:	f2 2e       	mov	r15, r18
    e2bc:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e2be:	e2 eb       	ldi	r30, 0xB2	; 178
    e2c0:	fc e0       	ldi	r31, 0x0C	; 12
    e2c2:	84 81       	ldd	r24, Z+4	; 0x04
    e2c4:	86 95       	lsr	r24
    e2c6:	86 95       	lsr	r24
    e2c8:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e2ca:	08 2f       	mov	r16, r24
    e2cc:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e2ce:	c3 81       	ldd	r28, Z+3	; 0x03
    e2d0:	c6 95       	lsr	r28
    e2d2:	c6 95       	lsr	r28
    e2d4:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e2d6:	d0 e0       	ldi	r29, 0x00	; 0
    e2d8:	c8 01       	movw	r24, r16
    e2da:	06 96       	adiw	r24, 0x06	; 6
    e2dc:	2e e1       	ldi	r18, 0x1E	; 30
    e2de:	c2 2e       	mov	r12, r18
    e2e0:	d1 2c       	mov	r13, r1
    e2e2:	b6 01       	movw	r22, r12
    e2e4:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    e2e8:	9e 01       	movw	r18, r28
    e2ea:	29 5f       	subi	r18, 0xF9	; 249
    e2ec:	3f 4f       	sbci	r19, 0xFF	; 255
    e2ee:	4a e4       	ldi	r20, 0x4A	; 74
    e2f0:	59 e5       	ldi	r21, 0x59	; 89
    e2f2:	68 2f       	mov	r22, r24
    e2f4:	82 2f       	mov	r24, r18
    e2f6:	8f 71       	andi	r24, 0x1F	; 31
    e2f8:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e2fc:	c8 01       	movw	r24, r16
    e2fe:	09 96       	adiw	r24, 0x09	; 9
    e300:	b6 01       	movw	r22, r12
    e302:	0e 94 00 74 	call	0xe800	; 0xe800 <__divmodhi4>
    e306:	be 01       	movw	r22, r28
    e308:	68 5f       	subi	r22, 0xF8	; 248
    e30a:	7f 4f       	sbci	r23, 0xFF	; 255
    e30c:	6f 71       	andi	r22, 0x1F	; 31
    e30e:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e310:	93 e2       	ldi	r25, 0x23	; 35
    e312:	f9 9e       	mul	r15, r25
    e314:	90 01       	movw	r18, r0
    e316:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e318:	48 2f       	mov	r20, r24
    e31a:	c9 01       	movw	r24, r18
    e31c:	8e 5e       	subi	r24, 0xEE	; 238
    e31e:	9e 4f       	sbci	r25, 0xFE	; 254
    e320:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <stream_text_anywhere>
	LBWaitSeconds(3);
    e324:	83 e0       	ldi	r24, 0x03	; 3
    e326:	0e 94 a6 4e 	call	0x9d4c	; 0x9d4c <LBWaitSeconds>
	game.boss.active = 1;
    e32a:	81 e0       	ldi	r24, 0x01	; 1
    e32c:	80 93 61 0e 	sts	0x0E61, r24
	render_camera_view();
}
    e330:	df 91       	pop	r29
    e332:	cf 91       	pop	r28
    e334:	1f 91       	pop	r17
    e336:	0f 91       	pop	r16
    e338:	ff 90       	pop	r15
    e33a:	df 90       	pop	r13
    e33c:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e33e:	0c 94 a0 58 	jmp	0xb140	; 0xb140 <render_camera_view>

0000e342 <ai_set_position_flag>:
}

void ai_set_position_flag(Player* player, u8 flag)
{
    e342:	fc 01       	movw	r30, r24
	if (player->ai_flags & AI_START) player->ai_flags ^= AI_START;
    e344:	91 85       	ldd	r25, Z+9	; 0x09
    e346:	91 ff       	sbrs	r25, 1
    e348:	03 c0       	rjmp	.+6      	; 0xe350 <ai_set_position_flag+0xe>
    e34a:	82 e0       	ldi	r24, 0x02	; 2
    e34c:	89 27       	eor	r24, r25
    e34e:	81 87       	std	Z+9, r24	; 0x09
	if (player->ai_flags & AI_LEFT) player->ai_flags ^= AI_LEFT;
    e350:	91 85       	ldd	r25, Z+9	; 0x09
    e352:	94 ff       	sbrs	r25, 4
    e354:	03 c0       	rjmp	.+6      	; 0xe35c <ai_set_position_flag+0x1a>
    e356:	80 e1       	ldi	r24, 0x10	; 16
    e358:	89 27       	eor	r24, r25
    e35a:	81 87       	std	Z+9, r24	; 0x09
	if (player->ai_flags & AI_MIDDLE) player->ai_flags ^= AI_MIDDLE;
    e35c:	91 85       	ldd	r25, Z+9	; 0x09
    e35e:	93 ff       	sbrs	r25, 3
    e360:	03 c0       	rjmp	.+6      	; 0xe368 <ai_set_position_flag+0x26>
    e362:	88 e0       	ldi	r24, 0x08	; 8
    e364:	89 27       	eor	r24, r25
    e366:	81 87       	std	Z+9, r24	; 0x09
	if (player->ai_flags & AI_RIGHT) player->ai_flags ^= AI_RIGHT;
    e368:	91 85       	ldd	r25, Z+9	; 0x09
    e36a:	92 ff       	sbrs	r25, 2
    e36c:	03 c0       	rjmp	.+6      	; 0xe374 <ai_set_position_flag+0x32>
    e36e:	84 e0       	ldi	r24, 0x04	; 4
    e370:	89 27       	eor	r24, r25
    e372:	81 87       	std	Z+9, r24	; 0x09
	player->ai_flags |= flag;
    e374:	81 85       	ldd	r24, Z+9	; 0x09
    e376:	68 2b       	or	r22, r24
    e378:	61 87       	std	Z+9, r22	; 0x09
    e37a:	08 95       	ret

0000e37c <ai_determine_start_state>:
}

void ai_determine_start_state(Player* player)
{
    e37c:	cf 93       	push	r28
    e37e:	df 93       	push	r29
    e380:	ec 01       	movw	r28, r24
	ai_set_position_flag(player, AI_START);
    e382:	62 e0       	ldi	r22, 0x02	; 2
    e384:	0e 94 a1 71 	call	0xe342	; 0xe342 <ai_set_position_flag>
	game.ai_prone_counter = 0;
    e388:	10 92 d7 0d 	sts	0x0DD7, r1
	if (player->ai_flags & AI_DO_PRONE) player->ai_flags ^= AI_DO_PRONE;
    e38c:	99 85       	ldd	r25, Y+9	; 0x09
    e38e:	95 ff       	sbrs	r25, 5
    e390:	03 c0       	rjmp	.+6      	; 0xe398 <ai_determine_start_state+0x1c>
    e392:	80 e2       	ldi	r24, 0x20	; 32
    e394:	89 27       	eor	r24, r25
    e396:	89 87       	std	Y+9, r24	; 0x09
	player->controls.held = BTN_LEFT;
    e398:	c8 58       	subi	r28, 0x88	; 136
    e39a:	df 4f       	sbci	r29, 0xFF	; 255
    e39c:	80 e4       	ldi	r24, 0x40	; 64
    e39e:	90 e0       	ldi	r25, 0x00	; 0
    e3a0:	99 83       	std	Y+1, r25	; 0x01
    e3a2:	88 83       	st	Y, r24
}
    e3a4:	df 91       	pop	r29
    e3a6:	cf 91       	pop	r28
    e3a8:	08 95       	ret

0000e3aa <ai_determine_right_edge_state>:

void ai_determine_right_edge_state(Player* player)
{
    e3aa:	cf 93       	push	r28
    e3ac:	df 93       	push	r29
    e3ae:	ec 01       	movw	r28, r24
	if (game.current_level_index == 2 && !(player->ai_flags & AI_RIGHT))
    e3b0:	80 91 cc 0d 	lds	r24, 0x0DCC
    e3b4:	82 30       	cpi	r24, 0x02	; 2
    e3b6:	29 f4       	brne	.+10     	; 0xe3c2 <ai_determine_right_edge_state+0x18>
    e3b8:	89 85       	ldd	r24, Y+9	; 0x09
    e3ba:	82 fd       	sbrc	r24, 2
    e3bc:	02 c0       	rjmp	.+4      	; 0xe3c2 <ai_determine_right_edge_state+0x18>
	{
		player->ai_flags |= AI_DO_PRONE;
    e3be:	80 62       	ori	r24, 0x20	; 32
    e3c0:	89 87       	std	Y+9, r24	; 0x09
	}
	ai_set_position_flag(player, AI_RIGHT);
    e3c2:	64 e0       	ldi	r22, 0x04	; 4
    e3c4:	ce 01       	movw	r24, r28
    e3c6:	0e 94 a1 71 	call	0xe342	; 0xe342 <ai_set_position_flag>
	if (player->ai_flags & AI_DO_PRONE)
    e3ca:	89 85       	ldd	r24, Y+9	; 0x09
    e3cc:	85 ff       	sbrs	r24, 5
    e3ce:	06 c0       	rjmp	.+12     	; 0xe3dc <ai_determine_right_edge_state+0x32>
	{
		player->controls.held |= BTN_DOWN;
    e3d0:	c8 58       	subi	r28, 0x88	; 136
    e3d2:	df 4f       	sbci	r29, 0xFF	; 255
    e3d4:	88 81       	ld	r24, Y
    e3d6:	99 81       	ldd	r25, Y+1	; 0x01
    e3d8:	80 62       	ori	r24, 0x20	; 32
    e3da:	0b c0       	rjmp	.+22     	; 0xe3f2 <ai_determine_right_edge_state+0x48>
	}
	else if (game.current_level_index != 6 && game.current_level_index != 8)
    e3dc:	80 91 cc 0d 	lds	r24, 0x0DCC
    e3e0:	86 30       	cpi	r24, 0x06	; 6
    e3e2:	49 f0       	breq	.+18     	; 0xe3f6 <ai_determine_right_edge_state+0x4c>
    e3e4:	88 30       	cpi	r24, 0x08	; 8
    e3e6:	39 f0       	breq	.+14     	; 0xe3f6 <ai_determine_right_edge_state+0x4c>
	{
		player->controls.pressed |= BTN_A;
    e3e8:	cc 58       	subi	r28, 0x8C	; 140
    e3ea:	df 4f       	sbci	r29, 0xFF	; 255
    e3ec:	88 81       	ld	r24, Y
    e3ee:	99 81       	ldd	r25, Y+1	; 0x01
    e3f0:	91 60       	ori	r25, 0x01	; 1
    e3f2:	99 83       	std	Y+1, r25	; 0x01
    e3f4:	88 83       	st	Y, r24
	}
}
    e3f6:	df 91       	pop	r29
    e3f8:	cf 91       	pop	r28
    e3fa:	08 95       	ret

0000e3fc <ai_determine_left_edge_state>:

void ai_determine_left_edge_state(Player* player)
{
    e3fc:	cf 93       	push	r28
    e3fe:	df 93       	push	r29
    e400:	ec 01       	movw	r28, r24
	if (game.current_level_index == 2 && !(player->ai_flags & AI_LEFT))
    e402:	80 91 cc 0d 	lds	r24, 0x0DCC
    e406:	82 30       	cpi	r24, 0x02	; 2
    e408:	29 f4       	brne	.+10     	; 0xe414 <ai_determine_left_edge_state+0x18>
    e40a:	89 85       	ldd	r24, Y+9	; 0x09
    e40c:	84 fd       	sbrc	r24, 4
    e40e:	02 c0       	rjmp	.+4      	; 0xe414 <ai_determine_left_edge_state+0x18>
	{
		player->ai_flags |= AI_DO_PRONE;
    e410:	80 62       	ori	r24, 0x20	; 32
    e412:	89 87       	std	Y+9, r24	; 0x09
	}
	ai_set_position_flag(player, AI_LEFT);
    e414:	60 e1       	ldi	r22, 0x10	; 16
    e416:	ce 01       	movw	r24, r28
    e418:	0e 94 a1 71 	call	0xe342	; 0xe342 <ai_set_position_flag>
	if (player->ai_flags & AI_DO_PRONE)
    e41c:	89 85       	ldd	r24, Y+9	; 0x09
    e41e:	85 ff       	sbrs	r24, 5
    e420:	06 c0       	rjmp	.+12     	; 0xe42e <ai_determine_left_edge_state+0x32>
	{
		player->controls.held |= BTN_DOWN;
    e422:	c8 58       	subi	r28, 0x88	; 136
    e424:	df 4f       	sbci	r29, 0xFF	; 255
    e426:	88 81       	ld	r24, Y
    e428:	99 81       	ldd	r25, Y+1	; 0x01
    e42a:	80 62       	ori	r24, 0x20	; 32
    e42c:	0b c0       	rjmp	.+22     	; 0xe444 <ai_determine_left_edge_state+0x48>
	}
	else if (game.current_level_index != 6 && game.current_level_index != 8)
    e42e:	80 91 cc 0d 	lds	r24, 0x0DCC
    e432:	86 30       	cpi	r24, 0x06	; 6
    e434:	49 f0       	breq	.+18     	; 0xe448 <ai_determine_left_edge_state+0x4c>
    e436:	88 30       	cpi	r24, 0x08	; 8
    e438:	39 f0       	breq	.+14     	; 0xe448 <ai_determine_left_edge_state+0x4c>
	{
		player->controls.pressed |= BTN_A;
    e43a:	cc 58       	subi	r28, 0x8C	; 140
    e43c:	df 4f       	sbci	r29, 0xFF	; 255
    e43e:	88 81       	ld	r24, Y
    e440:	99 81       	ldd	r25, Y+1	; 0x01
    e442:	91 60       	ori	r25, 0x01	; 1
    e444:	99 83       	std	Y+1, r25	; 0x01
    e446:	88 83       	st	Y, r24
	}
}
    e448:	df 91       	pop	r29
    e44a:	cf 91       	pop	r28
    e44c:	08 95       	ret

0000e44e <ai_determine_mid_state>:

void ai_determine_mid_state(Player* player)
{
    e44e:	cf 93       	push	r28
    e450:	df 93       	push	r29
    e452:	ec 01       	movw	r28, r24
	if ((game.current_level_index == 4 || game.current_level_index == 8) && !(player->ai_flags & AI_MIDDLE))
    e454:	80 91 cc 0d 	lds	r24, 0x0DCC
    e458:	84 30       	cpi	r24, 0x04	; 4
    e45a:	11 f0       	breq	.+4      	; 0xe460 <ai_determine_mid_state+0x12>
    e45c:	88 30       	cpi	r24, 0x08	; 8
    e45e:	29 f4       	brne	.+10     	; 0xe46a <ai_determine_mid_state+0x1c>
    e460:	89 85       	ldd	r24, Y+9	; 0x09
    e462:	83 fd       	sbrc	r24, 3
    e464:	02 c0       	rjmp	.+4      	; 0xe46a <ai_determine_mid_state+0x1c>
	{
		player->ai_flags |= AI_DO_PRONE;
    e466:	80 62       	ori	r24, 0x20	; 32
    e468:	89 87       	std	Y+9, r24	; 0x09
	}
	ai_set_position_flag(player, AI_MIDDLE);
    e46a:	68 e0       	ldi	r22, 0x08	; 8
    e46c:	ce 01       	movw	r24, r28
    e46e:	0e 94 a1 71 	call	0xe342	; 0xe342 <ai_set_position_flag>
	if (player->ai_flags & AI_DO_PRONE)
    e472:	89 85       	ldd	r24, Y+9	; 0x09
    e474:	85 ff       	sbrs	r24, 5
    e476:	06 c0       	rjmp	.+12     	; 0xe484 <ai_determine_mid_state+0x36>
	{
		player->controls.held |= BTN_DOWN;
    e478:	c8 58       	subi	r28, 0x88	; 136
    e47a:	df 4f       	sbci	r29, 0xFF	; 255
    e47c:	88 81       	ld	r24, Y
    e47e:	99 81       	ldd	r25, Y+1	; 0x01
    e480:	80 62       	ori	r24, 0x20	; 32
    e482:	09 c0       	rjmp	.+18     	; 0xe496 <ai_determine_mid_state+0x48>
	}
	else if (game.current_level_index != 8)
    e484:	80 91 cc 0d 	lds	r24, 0x0DCC
    e488:	88 30       	cpi	r24, 0x08	; 8
    e48a:	39 f0       	breq	.+14     	; 0xe49a <ai_determine_mid_state+0x4c>
	{
		player->controls.pressed |= BTN_A;
    e48c:	cc 58       	subi	r28, 0x8C	; 140
    e48e:	df 4f       	sbci	r29, 0xFF	; 255
    e490:	88 81       	ld	r24, Y
    e492:	99 81       	ldd	r25, Y+1	; 0x01
    e494:	91 60       	ori	r25, 0x01	; 1
    e496:	99 83       	std	Y+1, r25	; 0x01
    e498:	88 83       	st	Y, r24
	}
}
    e49a:	df 91       	pop	r29
    e49c:	cf 91       	pop	r28
    e49e:	08 95       	ret

0000e4a0 <ai_determine_prone_state>:

void ai_determine_prone_state(Player* player)
{
	game.ai_prone_counter++;
    e4a0:	20 91 d7 0d 	lds	r18, 0x0DD7
    e4a4:	2f 5f       	subi	r18, 0xFF	; 255
	if (game.ai_prone_counter >= 60)
    e4a6:	2c 33       	cpi	r18, 0x3C	; 60
    e4a8:	18 f4       	brcc	.+6      	; 0xe4b0 <ai_determine_prone_state+0x10>
	}
}

void ai_determine_prone_state(Player* player)
{
	game.ai_prone_counter++;
    e4aa:	20 93 d7 0d 	sts	0x0DD7, r18
    e4ae:	08 95       	ret
	if (game.ai_prone_counter >= 60)
	{
		game.ai_prone_counter = 0;
    e4b0:	10 92 d7 0d 	sts	0x0DD7, r1
		player->controls.held ^= BTN_DOWN;
    e4b4:	fc 01       	movw	r30, r24
    e4b6:	e8 58       	subi	r30, 0x88	; 136
    e4b8:	ff 4f       	sbci	r31, 0xFF	; 255
    e4ba:	20 81       	ld	r18, Z
    e4bc:	31 81       	ldd	r19, Z+1	; 0x01
    e4be:	40 e2       	ldi	r20, 0x20	; 32
    e4c0:	24 27       	eor	r18, r20
    e4c2:	31 83       	std	Z+1, r19	; 0x01
    e4c4:	20 83       	st	Z, r18
		player->controls.pressed |= BTN_UP;
    e4c6:	34 97       	sbiw	r30, 0x04	; 4
    e4c8:	20 81       	ld	r18, Z
    e4ca:	31 81       	ldd	r19, Z+1	; 0x01
    e4cc:	20 61       	ori	r18, 0x10	; 16
    e4ce:	31 83       	std	Z+1, r19	; 0x01
    e4d0:	20 83       	st	Z, r18
		if (player->ai_flags & AI_DO_PRONE) player->ai_flags ^= AI_DO_PRONE;
    e4d2:	fc 01       	movw	r30, r24
    e4d4:	31 85       	ldd	r19, Z+9	; 0x09
    e4d6:	35 ff       	sbrs	r19, 5
    e4d8:	03 c0       	rjmp	.+6      	; 0xe4e0 <ai_determine_prone_state+0x40>
    e4da:	20 e2       	ldi	r18, 0x20	; 32
    e4dc:	23 27       	eor	r18, r19
    e4de:	21 87       	std	Z+9, r18	; 0x09
    e4e0:	08 95       	ret

0000e4e2 <update_player_ai>:
	}
}

void update_player_ai(Player* player) 
{	 
    e4e2:	ef 92       	push	r14
    e4e4:	ff 92       	push	r15
    e4e6:	0f 93       	push	r16
    e4e8:	1f 93       	push	r17
    e4ea:	cf 93       	push	r28
    e4ec:	df 93       	push	r29
    e4ee:	ec 01       	movw	r28, r24
	if (player->ai_flags == AI_NOT_READY)
    e4f0:	99 85       	ldd	r25, Y+9	; 0x09
    e4f2:	91 11       	cpse	r25, r1
    e4f4:	09 c0       	rjmp	.+18     	; 0xe508 <update_player_ai+0x26>
	 {
		 ai_determine_start_state(player);
    e4f6:	ce 01       	movw	r24, r28
		 if (player->controls.held & BTN_DOWN)
		 {
			 ai_determine_prone_state(player);
		 }
	 }
}
    e4f8:	df 91       	pop	r29
    e4fa:	cf 91       	pop	r28
    e4fc:	1f 91       	pop	r17
    e4fe:	0f 91       	pop	r16
    e500:	ff 90       	pop	r15
    e502:	ef 90       	pop	r14

void update_player_ai(Player* player) 
{	 
	if (player->ai_flags == AI_NOT_READY)
	 {
		 ai_determine_start_state(player);
    e504:	0c 94 be 71 	jmp	0xe37c	; 0xe37c <ai_determine_start_state>
	 }
	 else if (player->ai_flags & AI_START)
    e508:	91 ff       	sbrs	r25, 1
    e50a:	29 c0       	rjmp	.+82     	; 0xe55e <update_player_ai+0x7c>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e50c:	fe 01       	movw	r30, r28
    e50e:	ec 58       	subi	r30, 0x8C	; 140
    e510:	ff 4f       	sbci	r31, 0xFF	; 255
    e512:	15 82       	std	Z+5, r1	; 0x05
    e514:	14 82       	std	Z+4, r1	; 0x04
	p->pressed = 0;
    e516:	11 82       	std	Z+1, r1	; 0x01
    e518:	10 82       	st	Z, r1
	p->released = 0;
    e51a:	13 82       	std	Z+3, r1	; 0x03
    e51c:	12 82       	std	Z+2, r1	; 0x02
	p->held_cycles = 0;
    e51e:	16 82       	std	Z+6, r1	; 0x06
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    e520:	80 91 b7 0d 	lds	r24, 0x0DB7
    e524:	90 91 b8 0d 	lds	r25, 0x0DB8
    e528:	23 e0       	ldi	r18, 0x03	; 3
    e52a:	96 95       	lsr	r25
    e52c:	87 95       	ror	r24
    e52e:	2a 95       	dec	r18
    e530:	e1 f7       	brne	.-8      	; 0xe52a <update_player_ai+0x48>
    e532:	4c 96       	adiw	r24, 0x1c	; 28
    e534:	20 91 c6 0d 	lds	r18, 0x0DC6
    e538:	30 e0       	ldi	r19, 0x00	; 0
    e53a:	82 17       	cp	r24, r18
    e53c:	93 07       	cpc	r25, r19
    e53e:	08 f4       	brcc	.+2      	; 0xe542 <update_player_ai+0x60>
    e540:	8c c0       	rjmp	.+280    	; 0xe65a <update_player_ai+0x178>
		 {
			 challenge();
    e542:	0e 94 54 71 	call	0xe2a8	; 0xe2a8 <challenge>
			 player->ai_flags |= AI_MOVING;
    e546:	89 85       	ldd	r24, Y+9	; 0x09
    e548:	81 60       	ori	r24, 0x01	; 1
			 player->ai_flags ^= AI_START;
    e54a:	92 e0       	ldi	r25, 0x02	; 2
    e54c:	89 27       	eor	r24, r25
    e54e:	89 87       	std	Y+9, r24	; 0x09
			 player->controls.held = BTN_LEFT;
    e550:	c8 58       	subi	r28, 0x88	; 136
    e552:	df 4f       	sbci	r29, 0xFF	; 255
    e554:	80 e4       	ldi	r24, 0x40	; 64
    e556:	90 e0       	ldi	r25, 0x00	; 0
    e558:	99 83       	std	Y+1, r25	; 0x01
    e55a:	88 83       	st	Y, r24
    e55c:	7e c0       	rjmp	.+252    	; 0xe65a <update_player_ai+0x178>
		 }
	 }
	 else if (player->ai_flags & AI_MOVING) 
    e55e:	90 ff       	sbrs	r25, 0
    e560:	7c c0       	rjmp	.+248    	; 0xe65a <update_player_ai+0x178>
	 {
		 player->controls.pressed = 0;
    e562:	8e 01       	movw	r16, r28
    e564:	0c 58       	subi	r16, 0x8C	; 140
    e566:	1f 4f       	sbci	r17, 0xFF	; 255
    e568:	f8 01       	movw	r30, r16
    e56a:	11 82       	std	Z+1, r1	; 0x01
    e56c:	10 82       	st	Z, r1
		 if (game.frame_counter % 15 == 0)
    e56e:	80 91 d1 0d 	lds	r24, 0x0DD1
    e572:	6f e0       	ldi	r22, 0x0F	; 15
    e574:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    e578:	91 11       	cpse	r25, r1
    e57a:	04 c0       	rjmp	.+8      	; 0xe584 <update_player_ai+0xa2>
		 {
			 player->controls.pressed = BTN_B;
    e57c:	81 e0       	ldi	r24, 0x01	; 1
    e57e:	90 e0       	ldi	r25, 0x00	; 0
    e580:	91 83       	std	Z+1, r25	; 0x01
    e582:	80 83       	st	Z, r24
		 }
		 if (player->shared.x >= game.camera_x+(CAMERA_WIDTH*8/2-40) && player->shared.x <= game.camera_x+(CAMERA_WIDTH*8/2+40))
    e584:	28 81       	ld	r18, Y
    e586:	39 81       	ldd	r19, Y+1	; 0x01
    e588:	80 91 b7 0d 	lds	r24, 0x0DB7
    e58c:	90 91 b8 0d 	lds	r25, 0x0DB8
    e590:	ac 01       	movw	r20, r24
    e592:	48 5b       	subi	r20, 0xB8	; 184
    e594:	5f 4f       	sbci	r21, 0xFF	; 255
    e596:	24 17       	cp	r18, r20
    e598:	35 07       	cpc	r19, r21
    e59a:	40 f0       	brcs	.+16     	; 0xe5ac <update_player_ai+0xca>
    e59c:	88 56       	subi	r24, 0x68	; 104
    e59e:	9f 4f       	sbci	r25, 0xFF	; 255
    e5a0:	82 17       	cp	r24, r18
    e5a2:	93 07       	cpc	r25, r19
    e5a4:	18 f0       	brcs	.+6      	; 0xe5ac <update_player_ai+0xca>
		 {
			 ai_determine_mid_state(player);
    e5a6:	ce 01       	movw	r24, r28
    e5a8:	0e 94 27 72 	call	0xe44e	; 0xe44e <ai_determine_mid_state>
		 }
		 if (player->shared.x <= game.camera_x)
    e5ac:	28 81       	ld	r18, Y
    e5ae:	39 81       	ldd	r19, Y+1	; 0x01
    e5b0:	80 91 b7 0d 	lds	r24, 0x0DB7
    e5b4:	90 91 b8 0d 	lds	r25, 0x0DB8
    e5b8:	ae 01       	movw	r20, r28
    e5ba:	48 58       	subi	r20, 0x88	; 136
    e5bc:	5f 4f       	sbci	r21, 0xFF	; 255
    e5be:	7a 01       	movw	r14, r20
    e5c0:	82 17       	cp	r24, r18
    e5c2:	93 07       	cpc	r25, r19
    e5c4:	18 f0       	brcs	.+6      	; 0xe5cc <update_player_ai+0xea>
		 {
			 player->controls.held = BTN_RIGHT;
    e5c6:	40 e8       	ldi	r20, 0x80	; 128
    e5c8:	50 e0       	ldi	r21, 0x00	; 0
    e5ca:	08 c0       	rjmp	.+16     	; 0xe5dc <update_player_ai+0xfa>
			 if (game.current_level_index == 8) {
				 player->controls.pressed |= BTN_A;
			 }
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    e5cc:	ac 01       	movw	r20, r24
    e5ce:	40 53       	subi	r20, 0x30	; 48
    e5d0:	5f 4f       	sbci	r21, 0xFF	; 255
    e5d2:	24 17       	cp	r18, r20
    e5d4:	35 07       	cpc	r19, r21
    e5d6:	78 f0       	brcs	.+30     	; 0xe5f6 <update_player_ai+0x114>
		 {
			 player->controls.held = BTN_LEFT;
    e5d8:	40 e4       	ldi	r20, 0x40	; 64
    e5da:	50 e0       	ldi	r21, 0x00	; 0
    e5dc:	f7 01       	movw	r30, r14
    e5de:	51 83       	std	Z+1, r21	; 0x01
    e5e0:	40 83       	st	Z, r20
			 if (game.current_level_index == 8) {
    e5e2:	40 91 cc 0d 	lds	r20, 0x0DCC
    e5e6:	48 30       	cpi	r20, 0x08	; 8
    e5e8:	31 f4       	brne	.+12     	; 0xe5f6 <update_player_ai+0x114>
				 player->controls.pressed |= BTN_A;
    e5ea:	f8 01       	movw	r30, r16
    e5ec:	40 81       	ld	r20, Z
    e5ee:	51 81       	ldd	r21, Z+1	; 0x01
    e5f0:	51 60       	ori	r21, 0x01	; 1
    e5f2:	51 83       	std	Z+1, r21	; 0x01
    e5f4:	40 83       	st	Z, r20
			 }
		 }
		 if (player->controls.held == BTN_RIGHT && player->shared.x >= game.camera_x+3*8 && player->shared.x <=  game.camera_x+4*8)
    e5f6:	f7 01       	movw	r30, r14
    e5f8:	40 81       	ld	r20, Z
    e5fa:	51 81       	ldd	r21, Z+1	; 0x01
    e5fc:	40 38       	cpi	r20, 0x80	; 128
    e5fe:	51 05       	cpc	r21, r1
    e600:	71 f4       	brne	.+28     	; 0xe61e <update_player_ai+0x13c>
    e602:	ac 01       	movw	r20, r24
    e604:	48 5e       	subi	r20, 0xE8	; 232
    e606:	5f 4f       	sbci	r21, 0xFF	; 255
    e608:	24 17       	cp	r18, r20
    e60a:	35 07       	cpc	r19, r21
    e60c:	c8 f0       	brcs	.+50     	; 0xe640 <update_player_ai+0x15e>
    e60e:	80 96       	adiw	r24, 0x20	; 32
    e610:	82 17       	cp	r24, r18
    e612:	93 07       	cpc	r25, r19
    e614:	a8 f0       	brcs	.+42     	; 0xe640 <update_player_ai+0x15e>
		 {
			 ai_determine_left_edge_state(player);
    e616:	ce 01       	movw	r24, r28
    e618:	0e 94 fe 71 	call	0xe3fc	; 0xe3fc <ai_determine_left_edge_state>
    e61c:	11 c0       	rjmp	.+34     	; 0xe640 <update_player_ai+0x15e>
		 }
		 else if (player->controls.held == BTN_LEFT && player->shared.x >= game.camera_x+(CAMERA_WIDTH*8)-6*8 && player->shared.x <=  game.camera_x+(CAMERA_WIDTH*8)-5*8)
    e61e:	40 34       	cpi	r20, 0x40	; 64
    e620:	51 05       	cpc	r21, r1
    e622:	71 f4       	brne	.+28     	; 0xe640 <update_player_ai+0x15e>
    e624:	ac 01       	movw	r20, r24
    e626:	40 55       	subi	r20, 0x50	; 80
    e628:	5f 4f       	sbci	r21, 0xFF	; 255
    e62a:	24 17       	cp	r18, r20
    e62c:	35 07       	cpc	r19, r21
    e62e:	40 f0       	brcs	.+16     	; 0xe640 <update_player_ai+0x15e>
    e630:	88 54       	subi	r24, 0x48	; 72
    e632:	9f 4f       	sbci	r25, 0xFF	; 255
    e634:	82 17       	cp	r24, r18
    e636:	93 07       	cpc	r25, r19
    e638:	18 f0       	brcs	.+6      	; 0xe640 <update_player_ai+0x15e>
		 {
			ai_determine_right_edge_state(player);
    e63a:	ce 01       	movw	r24, r28
    e63c:	0e 94 d5 71 	call	0xe3aa	; 0xe3aa <ai_determine_right_edge_state>
		 }
		 if (player->controls.held & BTN_DOWN)
    e640:	f7 01       	movw	r30, r14
    e642:	80 81       	ld	r24, Z
    e644:	85 ff       	sbrs	r24, 5
    e646:	09 c0       	rjmp	.+18     	; 0xe65a <update_player_ai+0x178>
		 {
			 ai_determine_prone_state(player);
    e648:	ce 01       	movw	r24, r28
		 }
	 }
}
    e64a:	df 91       	pop	r29
    e64c:	cf 91       	pop	r28
    e64e:	1f 91       	pop	r17
    e650:	0f 91       	pop	r16
    e652:	ff 90       	pop	r15
    e654:	ef 90       	pop	r14
		 {
			ai_determine_right_edge_state(player);
		 }
		 if (player->controls.held & BTN_DOWN)
		 {
			 ai_determine_prone_state(player);
    e656:	0c 94 50 72 	jmp	0xe4a0	; 0xe4a0 <ai_determine_prone_state>
		 }
	 }
}
    e65a:	df 91       	pop	r29
    e65c:	cf 91       	pop	r28
    e65e:	1f 91       	pop	r17
    e660:	0f 91       	pop	r16
    e662:	ff 90       	pop	r15
    e664:	ef 90       	pop	r14
    e666:	08 95       	ret

0000e668 <load_credits>:
}
#endif

void load_credits()
{
	fade_through();
    e668:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <fade_through>
	Screen.scrollX = 0;
    e66c:	e2 eb       	ldi	r30, 0xB2	; 178
    e66e:	fc e0       	ldi	r31, 0x0C	; 12
    e670:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    e672:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    e674:	80 e2       	ldi	r24, 0x20	; 32
    e676:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    e678:	10 82       	st	Z, r1
	stream_text_middle((const char*) strCredits, 5, 100);
    e67a:	44 e6       	ldi	r20, 0x64	; 100
    e67c:	50 e0       	ldi	r21, 0x00	; 0
    e67e:	65 e0       	ldi	r22, 0x05	; 5
    e680:	8f e1       	ldi	r24, 0x1F	; 31
    e682:	93 e0       	ldi	r25, 0x03	; 3
    e684:	0e 94 2b 65 	call	0xca56	; 0xca56 <stream_text_middle>
	LBWaitSeconds(8);
    e688:	88 e0       	ldi	r24, 0x08	; 8
    e68a:	0c 94 a6 4e 	jmp	0x9d4c	; 0x9d4c <LBWaitSeconds>

0000e68e <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e68e:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <GetTrueRandomSeed>
    e692:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e696:	88 eb       	ldi	r24, 0xB8	; 184
    e698:	95 e1       	ldi	r25, 0x15	; 21
    e69a:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <InitMusicPlayer>
	ClearVram();
    e69e:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <ClearVram>
	SetMasterVolume(0x05);
    e6a2:	85 e0       	ldi	r24, 0x05	; 5
    e6a4:	0e 94 88 44 	call	0x8910	; 0x8910 <SetMasterVolume>
	SetTileTable(tiles_data);
    e6a8:	88 e2       	ldi	r24, 0x28	; 40
    e6aa:	91 e3       	ldi	r25, 0x31	; 49
    e6ac:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e6b0:	87 e3       	ldi	r24, 0x37	; 55
    e6b2:	97 e1       	ldi	r25, 0x17	; 23
    e6b4:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e6b8:	88 ee       	ldi	r24, 0xE8	; 232
    e6ba:	98 e5       	ldi	r25, 0x58	; 88
    e6bc:	90 93 89 0d 	sts	0x0D89, r25
    e6c0:	80 93 88 0d 	sts	0x0D88, r24
	LBSetFontTilesMap((char*) map_font);
#if JAMMA
    read_dip_switches();
    e6c4:	0e 94 50 58 	call	0xb0a0	; 0xb0a0 <read_dip_switches>
#endif
	init_default_high_scores();
    e6c8:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_credits();
    e6cc:	0e 94 34 73 	call	0xe668	; 0xe668 <load_credits>
	load_splash();
    e6d0:	0e 94 43 69 	call	0xd286	; 0xd286 <load_splash>
#endif
	while (1)
	{
        waitForVSync();
    e6d4:	0e 94 79 4f 	call	0x9ef2	; 0x9ef2 <waitForVSync>
		LBGetJoyPadState(&game.player.controls, 0);
    e6d8:	60 e0       	ldi	r22, 0x00	; 0
    e6da:	8d e4       	ldi	r24, 0x4D	; 77
    e6dc:	9e e0       	ldi	r25, 0x0E	; 14
    e6de:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e6e2:	80 91 cb 0d 	lds	r24, 0x0DCB
    e6e6:	82 30       	cpi	r24, 0x02	; 2
    e6e8:	09 f0       	breq	.+2      	; 0xe6ec <main+0x5e>
    e6ea:	50 c0       	rjmp	.+160    	; 0xe78c <main+0xfe>
		{
			if (update_level()) continue;
    e6ec:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <update_level>
    e6f0:	81 11       	cpse	r24, r1
    e6f2:	f0 cf       	rjmp	.-32     	; 0xe6d4 <main+0x46>
			if (update_player(&game.player, PLAYER_SLOT))
    e6f4:	60 e0       	ldi	r22, 0x00	; 0
    e6f6:	89 ed       	ldi	r24, 0xD9	; 217
    e6f8:	9d e0       	ldi	r25, 0x0D	; 13
    e6fa:	0e 94 c6 6d 	call	0xdb8c	; 0xdb8c <update_player>
    e6fe:	88 23       	and	r24, r24
    e700:	d9 f0       	breq	.+54     	; 0xe738 <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e702:	66 e0       	ldi	r22, 0x06	; 6
    e704:	89 ed       	ldi	r24, 0xD9	; 217
    e706:	9d e0       	ldi	r25, 0x0D	; 13
    e708:	0e 94 3a 5b 	call	0xb674	; 0xb674 <update_shot>
				update_enemies();
    e70c:	0e 94 01 62 	call	0xc402	; 0xc402 <update_enemies>
				update_enemy_shots();
    e710:	0e 94 6e 62 	call	0xc4dc	; 0xc4dc <update_enemy_shots>
				animate_enemies();
    e714:	0e 94 1b 63 	call	0xc636	; 0xc636 <animate_enemies>
				animate_enemy_shots();
    e718:	0e 94 48 64 	call	0xc890	; 0xc890 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e71c:	40 e0       	ldi	r20, 0x00	; 0
    e71e:	64 e5       	ldi	r22, 0x54	; 84
    e720:	7e e0       	ldi	r23, 0x0E	; 14
    e722:	89 ed       	ldi	r24, 0xD9	; 217
    e724:	9d e0       	ldi	r25, 0x0D	; 13
    e726:	0e 94 ee 60 	call	0xc1dc	; 0xc1dc <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e72a:	46 e0       	ldi	r20, 0x06	; 6
    e72c:	64 e5       	ldi	r22, 0x54	; 84
    e72e:	7e e0       	ldi	r23, 0x0E	; 14
    e730:	89 ed       	ldi	r24, 0xD9	; 217
    e732:	9d e0       	ldi	r25, 0x0D	; 13
    e734:	0e 94 aa 5e 	call	0xbd54	; 0xbd54 <animate_shot>
#if JAMMA
#else
				update_pause();
#endif
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e738:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <is_space>
    e73c:	81 11       	cpse	r24, r1
    e73e:	2f c0       	rjmp	.+94     	; 0xe79e <main+0x110>
    e740:	80 91 b7 0d 	lds	r24, 0x0DB7
    e744:	90 91 b8 0d 	lds	r25, 0x0DB8
    e748:	88 3f       	cpi	r24, 0xF8	; 248
    e74a:	96 40       	sbci	r25, 0x06	; 6
    e74c:	40 f1       	brcs	.+80     	; 0xe79e <main+0x110>
    e74e:	69 e0       	ldi	r22, 0x09	; 9
    e750:	84 e5       	ldi	r24, 0x54	; 84
    e752:	9e e0       	ldi	r25, 0x0E	; 14
    e754:	0e 94 c6 6d 	call	0xdb8c	; 0xdb8c <update_player>
    e758:	88 23       	and	r24, r24
    e75a:	09 f1       	breq	.+66     	; 0xe79e <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e75c:	6f e0       	ldi	r22, 0x0F	; 15
    e75e:	84 e5       	ldi	r24, 0x54	; 84
    e760:	9e e0       	ldi	r25, 0x0E	; 14
    e762:	0e 94 3a 5b 	call	0xb674	; 0xb674 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e766:	49 e0       	ldi	r20, 0x09	; 9
    e768:	69 ed       	ldi	r22, 0xD9	; 217
    e76a:	7d e0       	ldi	r23, 0x0D	; 13
    e76c:	84 e5       	ldi	r24, 0x54	; 84
    e76e:	9e e0       	ldi	r25, 0x0E	; 14
    e770:	0e 94 ee 60 	call	0xc1dc	; 0xc1dc <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e774:	4f e0       	ldi	r20, 0x0F	; 15
    e776:	69 ed       	ldi	r22, 0xD9	; 217
    e778:	7d e0       	ldi	r23, 0x0D	; 13
    e77a:	84 e5       	ldi	r24, 0x54	; 84
    e77c:	9e e0       	ldi	r25, 0x0E	; 14
    e77e:	0e 94 aa 5e 	call	0xbd54	; 0xbd54 <animate_shot>
				update_player_ai(&game.boss);
    e782:	84 e5       	ldi	r24, 0x54	; 84
    e784:	9e e0       	ldi	r25, 0x0E	; 14
    e786:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <update_player_ai>
    e78a:	09 c0       	rjmp	.+18     	; 0xe79e <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    e78c:	81 11       	cpse	r24, r1
    e78e:	03 c0       	rjmp	.+6      	; 0xe796 <main+0x108>
		{
			update_splash();
    e790:	0e 94 8e 69 	call	0xd31c	; 0xd31c <update_splash>
    e794:	04 c0       	rjmp	.+8      	; 0xe79e <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e796:	81 30       	cpi	r24, 0x01	; 1
    e798:	11 f4       	brne	.+4      	; 0xe79e <main+0x110>
		{
			update_high_scores();
    e79a:	0e 94 1d 6b 	call	0xd63a	; 0xd63a <update_high_scores>
			
		}
		LBRotateSprites();
    e79e:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <LBRotateSprites>
    e7a2:	98 cf       	rjmp	.-208    	; 0xe6d4 <main+0x46>

0000e7a4 <__udivmodqi4>:
    e7a4:	99 1b       	sub	r25, r25
    e7a6:	79 e0       	ldi	r23, 0x09	; 9
    e7a8:	04 c0       	rjmp	.+8      	; 0xe7b2 <__udivmodqi4_ep>

0000e7aa <__udivmodqi4_loop>:
    e7aa:	99 1f       	adc	r25, r25
    e7ac:	96 17       	cp	r25, r22
    e7ae:	08 f0       	brcs	.+2      	; 0xe7b2 <__udivmodqi4_ep>
    e7b0:	96 1b       	sub	r25, r22

0000e7b2 <__udivmodqi4_ep>:
    e7b2:	88 1f       	adc	r24, r24
    e7b4:	7a 95       	dec	r23
    e7b6:	c9 f7       	brne	.-14     	; 0xe7aa <__udivmodqi4_loop>
    e7b8:	80 95       	com	r24
    e7ba:	08 95       	ret

0000e7bc <__divmodqi4>:
    e7bc:	87 fb       	bst	r24, 7
    e7be:	08 2e       	mov	r0, r24
    e7c0:	06 26       	eor	r0, r22
    e7c2:	87 fd       	sbrc	r24, 7
    e7c4:	81 95       	neg	r24
    e7c6:	67 fd       	sbrc	r22, 7
    e7c8:	61 95       	neg	r22
    e7ca:	0e 94 d2 73 	call	0xe7a4	; 0xe7a4 <__udivmodqi4>
    e7ce:	0e f4       	brtc	.+2      	; 0xe7d2 <__divmodqi4_1>
    e7d0:	91 95       	neg	r25

0000e7d2 <__divmodqi4_1>:
    e7d2:	07 fc       	sbrc	r0, 7
    e7d4:	81 95       	neg	r24

0000e7d6 <__divmodqi4_exit>:
    e7d6:	08 95       	ret

0000e7d8 <__udivmodhi4>:
    e7d8:	aa 1b       	sub	r26, r26
    e7da:	bb 1b       	sub	r27, r27
    e7dc:	51 e1       	ldi	r21, 0x11	; 17
    e7de:	07 c0       	rjmp	.+14     	; 0xe7ee <__udivmodhi4_ep>

0000e7e0 <__udivmodhi4_loop>:
    e7e0:	aa 1f       	adc	r26, r26
    e7e2:	bb 1f       	adc	r27, r27
    e7e4:	a6 17       	cp	r26, r22
    e7e6:	b7 07       	cpc	r27, r23
    e7e8:	10 f0       	brcs	.+4      	; 0xe7ee <__udivmodhi4_ep>
    e7ea:	a6 1b       	sub	r26, r22
    e7ec:	b7 0b       	sbc	r27, r23

0000e7ee <__udivmodhi4_ep>:
    e7ee:	88 1f       	adc	r24, r24
    e7f0:	99 1f       	adc	r25, r25
    e7f2:	5a 95       	dec	r21
    e7f4:	a9 f7       	brne	.-22     	; 0xe7e0 <__udivmodhi4_loop>
    e7f6:	80 95       	com	r24
    e7f8:	90 95       	com	r25
    e7fa:	bc 01       	movw	r22, r24
    e7fc:	cd 01       	movw	r24, r26
    e7fe:	08 95       	ret

0000e800 <__divmodhi4>:
    e800:	97 fb       	bst	r25, 7
    e802:	07 2e       	mov	r0, r23
    e804:	16 f4       	brtc	.+4      	; 0xe80a <__divmodhi4+0xa>
    e806:	00 94       	com	r0
    e808:	07 d0       	rcall	.+14     	; 0xe818 <__divmodhi4_neg1>
    e80a:	77 fd       	sbrc	r23, 7
    e80c:	09 d0       	rcall	.+18     	; 0xe820 <__divmodhi4_neg2>
    e80e:	0e 94 ec 73 	call	0xe7d8	; 0xe7d8 <__udivmodhi4>
    e812:	07 fc       	sbrc	r0, 7
    e814:	05 d0       	rcall	.+10     	; 0xe820 <__divmodhi4_neg2>
    e816:	3e f4       	brtc	.+14     	; 0xe826 <__divmodhi4_exit>

0000e818 <__divmodhi4_neg1>:
    e818:	90 95       	com	r25
    e81a:	81 95       	neg	r24
    e81c:	9f 4f       	sbci	r25, 0xFF	; 255
    e81e:	08 95       	ret

0000e820 <__divmodhi4_neg2>:
    e820:	70 95       	com	r23
    e822:	61 95       	neg	r22
    e824:	7f 4f       	sbci	r23, 0xFF	; 255

0000e826 <__divmodhi4_exit>:
    e826:	08 95       	ret

0000e828 <__tablejump2__>:
    e828:	ee 0f       	add	r30, r30
    e82a:	ff 1f       	adc	r31, r31
    e82c:	05 90       	lpm	r0, Z+
    e82e:	f4 91       	lpm	r31, Z
    e830:	e0 2d       	mov	r30, r0
    e832:	09 94       	ijmp

0000e834 <__subsf3>:
    e834:	50 58       	subi	r21, 0x80	; 128

0000e836 <__addsf3>:
    e836:	bb 27       	eor	r27, r27
    e838:	aa 27       	eor	r26, r26
    e83a:	0e d0       	rcall	.+28     	; 0xe858 <__addsf3x>
    e83c:	e5 c0       	rjmp	.+458    	; 0xea08 <__fp_round>
    e83e:	d6 d0       	rcall	.+428    	; 0xe9ec <__fp_pscA>
    e840:	30 f0       	brcs	.+12     	; 0xe84e <__addsf3+0x18>
    e842:	db d0       	rcall	.+438    	; 0xe9fa <__fp_pscB>
    e844:	20 f0       	brcs	.+8      	; 0xe84e <__addsf3+0x18>
    e846:	31 f4       	brne	.+12     	; 0xe854 <__addsf3+0x1e>
    e848:	9f 3f       	cpi	r25, 0xFF	; 255
    e84a:	11 f4       	brne	.+4      	; 0xe850 <__addsf3+0x1a>
    e84c:	1e f4       	brtc	.+6      	; 0xe854 <__addsf3+0x1e>
    e84e:	cb c0       	rjmp	.+406    	; 0xe9e6 <__fp_nan>
    e850:	0e f4       	brtc	.+2      	; 0xe854 <__addsf3+0x1e>
    e852:	e0 95       	com	r30
    e854:	e7 fb       	bst	r30, 7
    e856:	c1 c0       	rjmp	.+386    	; 0xe9da <__fp_inf>

0000e858 <__addsf3x>:
    e858:	e9 2f       	mov	r30, r25
    e85a:	e7 d0       	rcall	.+462    	; 0xea2a <__fp_split3>
    e85c:	80 f3       	brcs	.-32     	; 0xe83e <__addsf3+0x8>
    e85e:	ba 17       	cp	r27, r26
    e860:	62 07       	cpc	r22, r18
    e862:	73 07       	cpc	r23, r19
    e864:	84 07       	cpc	r24, r20
    e866:	95 07       	cpc	r25, r21
    e868:	18 f0       	brcs	.+6      	; 0xe870 <__addsf3x+0x18>
    e86a:	71 f4       	brne	.+28     	; 0xe888 <__addsf3x+0x30>
    e86c:	9e f5       	brtc	.+102    	; 0xe8d4 <__addsf3x+0x7c>
    e86e:	ff c0       	rjmp	.+510    	; 0xea6e <__fp_zero>
    e870:	0e f4       	brtc	.+2      	; 0xe874 <__addsf3x+0x1c>
    e872:	e0 95       	com	r30
    e874:	0b 2e       	mov	r0, r27
    e876:	ba 2f       	mov	r27, r26
    e878:	a0 2d       	mov	r26, r0
    e87a:	0b 01       	movw	r0, r22
    e87c:	b9 01       	movw	r22, r18
    e87e:	90 01       	movw	r18, r0
    e880:	0c 01       	movw	r0, r24
    e882:	ca 01       	movw	r24, r20
    e884:	a0 01       	movw	r20, r0
    e886:	11 24       	eor	r1, r1
    e888:	ff 27       	eor	r31, r31
    e88a:	59 1b       	sub	r21, r25
    e88c:	99 f0       	breq	.+38     	; 0xe8b4 <__addsf3x+0x5c>
    e88e:	59 3f       	cpi	r21, 0xF9	; 249
    e890:	50 f4       	brcc	.+20     	; 0xe8a6 <__addsf3x+0x4e>
    e892:	50 3e       	cpi	r21, 0xE0	; 224
    e894:	68 f1       	brcs	.+90     	; 0xe8f0 <__addsf3x+0x98>
    e896:	1a 16       	cp	r1, r26
    e898:	f0 40       	sbci	r31, 0x00	; 0
    e89a:	a2 2f       	mov	r26, r18
    e89c:	23 2f       	mov	r18, r19
    e89e:	34 2f       	mov	r19, r20
    e8a0:	44 27       	eor	r20, r20
    e8a2:	58 5f       	subi	r21, 0xF8	; 248
    e8a4:	f3 cf       	rjmp	.-26     	; 0xe88c <__addsf3x+0x34>
    e8a6:	46 95       	lsr	r20
    e8a8:	37 95       	ror	r19
    e8aa:	27 95       	ror	r18
    e8ac:	a7 95       	ror	r26
    e8ae:	f0 40       	sbci	r31, 0x00	; 0
    e8b0:	53 95       	inc	r21
    e8b2:	c9 f7       	brne	.-14     	; 0xe8a6 <__addsf3x+0x4e>
    e8b4:	7e f4       	brtc	.+30     	; 0xe8d4 <__addsf3x+0x7c>
    e8b6:	1f 16       	cp	r1, r31
    e8b8:	ba 0b       	sbc	r27, r26
    e8ba:	62 0b       	sbc	r22, r18
    e8bc:	73 0b       	sbc	r23, r19
    e8be:	84 0b       	sbc	r24, r20
    e8c0:	ba f0       	brmi	.+46     	; 0xe8f0 <__addsf3x+0x98>
    e8c2:	91 50       	subi	r25, 0x01	; 1
    e8c4:	a1 f0       	breq	.+40     	; 0xe8ee <__addsf3x+0x96>
    e8c6:	ff 0f       	add	r31, r31
    e8c8:	bb 1f       	adc	r27, r27
    e8ca:	66 1f       	adc	r22, r22
    e8cc:	77 1f       	adc	r23, r23
    e8ce:	88 1f       	adc	r24, r24
    e8d0:	c2 f7       	brpl	.-16     	; 0xe8c2 <__addsf3x+0x6a>
    e8d2:	0e c0       	rjmp	.+28     	; 0xe8f0 <__addsf3x+0x98>
    e8d4:	ba 0f       	add	r27, r26
    e8d6:	62 1f       	adc	r22, r18
    e8d8:	73 1f       	adc	r23, r19
    e8da:	84 1f       	adc	r24, r20
    e8dc:	48 f4       	brcc	.+18     	; 0xe8f0 <__addsf3x+0x98>
    e8de:	87 95       	ror	r24
    e8e0:	77 95       	ror	r23
    e8e2:	67 95       	ror	r22
    e8e4:	b7 95       	ror	r27
    e8e6:	f7 95       	ror	r31
    e8e8:	9e 3f       	cpi	r25, 0xFE	; 254
    e8ea:	08 f0       	brcs	.+2      	; 0xe8ee <__addsf3x+0x96>
    e8ec:	b3 cf       	rjmp	.-154    	; 0xe854 <__addsf3+0x1e>
    e8ee:	93 95       	inc	r25
    e8f0:	88 0f       	add	r24, r24
    e8f2:	08 f0       	brcs	.+2      	; 0xe8f6 <__addsf3x+0x9e>
    e8f4:	99 27       	eor	r25, r25
    e8f6:	ee 0f       	add	r30, r30
    e8f8:	97 95       	ror	r25
    e8fa:	87 95       	ror	r24
    e8fc:	08 95       	ret

0000e8fe <__fixsfsi>:
    e8fe:	04 d0       	rcall	.+8      	; 0xe908 <__fixunssfsi>
    e900:	68 94       	set
    e902:	b1 11       	cpse	r27, r1
    e904:	b5 c0       	rjmp	.+362    	; 0xea70 <__fp_szero>
    e906:	08 95       	ret

0000e908 <__fixunssfsi>:
    e908:	98 d0       	rcall	.+304    	; 0xea3a <__fp_splitA>
    e90a:	88 f0       	brcs	.+34     	; 0xe92e <__fixunssfsi+0x26>
    e90c:	9f 57       	subi	r25, 0x7F	; 127
    e90e:	90 f0       	brcs	.+36     	; 0xe934 <__fixunssfsi+0x2c>
    e910:	b9 2f       	mov	r27, r25
    e912:	99 27       	eor	r25, r25
    e914:	b7 51       	subi	r27, 0x17	; 23
    e916:	a0 f0       	brcs	.+40     	; 0xe940 <__fixunssfsi+0x38>
    e918:	d1 f0       	breq	.+52     	; 0xe94e <__fixunssfsi+0x46>
    e91a:	66 0f       	add	r22, r22
    e91c:	77 1f       	adc	r23, r23
    e91e:	88 1f       	adc	r24, r24
    e920:	99 1f       	adc	r25, r25
    e922:	1a f0       	brmi	.+6      	; 0xe92a <__fixunssfsi+0x22>
    e924:	ba 95       	dec	r27
    e926:	c9 f7       	brne	.-14     	; 0xe91a <__fixunssfsi+0x12>
    e928:	12 c0       	rjmp	.+36     	; 0xe94e <__fixunssfsi+0x46>
    e92a:	b1 30       	cpi	r27, 0x01	; 1
    e92c:	81 f0       	breq	.+32     	; 0xe94e <__fixunssfsi+0x46>
    e92e:	9f d0       	rcall	.+318    	; 0xea6e <__fp_zero>
    e930:	b1 e0       	ldi	r27, 0x01	; 1
    e932:	08 95       	ret
    e934:	9c c0       	rjmp	.+312    	; 0xea6e <__fp_zero>
    e936:	67 2f       	mov	r22, r23
    e938:	78 2f       	mov	r23, r24
    e93a:	88 27       	eor	r24, r24
    e93c:	b8 5f       	subi	r27, 0xF8	; 248
    e93e:	39 f0       	breq	.+14     	; 0xe94e <__fixunssfsi+0x46>
    e940:	b9 3f       	cpi	r27, 0xF9	; 249
    e942:	cc f3       	brlt	.-14     	; 0xe936 <__fixunssfsi+0x2e>
    e944:	86 95       	lsr	r24
    e946:	77 95       	ror	r23
    e948:	67 95       	ror	r22
    e94a:	b3 95       	inc	r27
    e94c:	d9 f7       	brne	.-10     	; 0xe944 <__fixunssfsi+0x3c>
    e94e:	3e f4       	brtc	.+14     	; 0xe95e <__fixunssfsi+0x56>
    e950:	90 95       	com	r25
    e952:	80 95       	com	r24
    e954:	70 95       	com	r23
    e956:	61 95       	neg	r22
    e958:	7f 4f       	sbci	r23, 0xFF	; 255
    e95a:	8f 4f       	sbci	r24, 0xFF	; 255
    e95c:	9f 4f       	sbci	r25, 0xFF	; 255
    e95e:	08 95       	ret

0000e960 <__floatunsisf>:
    e960:	e8 94       	clt
    e962:	09 c0       	rjmp	.+18     	; 0xe976 <__floatsisf+0x12>

0000e964 <__floatsisf>:
    e964:	97 fb       	bst	r25, 7
    e966:	3e f4       	brtc	.+14     	; 0xe976 <__floatsisf+0x12>
    e968:	90 95       	com	r25
    e96a:	80 95       	com	r24
    e96c:	70 95       	com	r23
    e96e:	61 95       	neg	r22
    e970:	7f 4f       	sbci	r23, 0xFF	; 255
    e972:	8f 4f       	sbci	r24, 0xFF	; 255
    e974:	9f 4f       	sbci	r25, 0xFF	; 255
    e976:	99 23       	and	r25, r25
    e978:	a9 f0       	breq	.+42     	; 0xe9a4 <__floatsisf+0x40>
    e97a:	f9 2f       	mov	r31, r25
    e97c:	96 e9       	ldi	r25, 0x96	; 150
    e97e:	bb 27       	eor	r27, r27
    e980:	93 95       	inc	r25
    e982:	f6 95       	lsr	r31
    e984:	87 95       	ror	r24
    e986:	77 95       	ror	r23
    e988:	67 95       	ror	r22
    e98a:	b7 95       	ror	r27
    e98c:	f1 11       	cpse	r31, r1
    e98e:	f8 cf       	rjmp	.-16     	; 0xe980 <__floatsisf+0x1c>
    e990:	fa f4       	brpl	.+62     	; 0xe9d0 <__floatsisf+0x6c>
    e992:	bb 0f       	add	r27, r27
    e994:	11 f4       	brne	.+4      	; 0xe99a <__floatsisf+0x36>
    e996:	60 ff       	sbrs	r22, 0
    e998:	1b c0       	rjmp	.+54     	; 0xe9d0 <__floatsisf+0x6c>
    e99a:	6f 5f       	subi	r22, 0xFF	; 255
    e99c:	7f 4f       	sbci	r23, 0xFF	; 255
    e99e:	8f 4f       	sbci	r24, 0xFF	; 255
    e9a0:	9f 4f       	sbci	r25, 0xFF	; 255
    e9a2:	16 c0       	rjmp	.+44     	; 0xe9d0 <__floatsisf+0x6c>
    e9a4:	88 23       	and	r24, r24
    e9a6:	11 f0       	breq	.+4      	; 0xe9ac <__floatsisf+0x48>
    e9a8:	96 e9       	ldi	r25, 0x96	; 150
    e9aa:	11 c0       	rjmp	.+34     	; 0xe9ce <__floatsisf+0x6a>
    e9ac:	77 23       	and	r23, r23
    e9ae:	21 f0       	breq	.+8      	; 0xe9b8 <__floatsisf+0x54>
    e9b0:	9e e8       	ldi	r25, 0x8E	; 142
    e9b2:	87 2f       	mov	r24, r23
    e9b4:	76 2f       	mov	r23, r22
    e9b6:	05 c0       	rjmp	.+10     	; 0xe9c2 <__floatsisf+0x5e>
    e9b8:	66 23       	and	r22, r22
    e9ba:	71 f0       	breq	.+28     	; 0xe9d8 <__floatsisf+0x74>
    e9bc:	96 e8       	ldi	r25, 0x86	; 134
    e9be:	86 2f       	mov	r24, r22
    e9c0:	70 e0       	ldi	r23, 0x00	; 0
    e9c2:	60 e0       	ldi	r22, 0x00	; 0
    e9c4:	2a f0       	brmi	.+10     	; 0xe9d0 <__floatsisf+0x6c>
    e9c6:	9a 95       	dec	r25
    e9c8:	66 0f       	add	r22, r22
    e9ca:	77 1f       	adc	r23, r23
    e9cc:	88 1f       	adc	r24, r24
    e9ce:	da f7       	brpl	.-10     	; 0xe9c6 <__floatsisf+0x62>
    e9d0:	88 0f       	add	r24, r24
    e9d2:	96 95       	lsr	r25
    e9d4:	87 95       	ror	r24
    e9d6:	97 f9       	bld	r25, 7
    e9d8:	08 95       	ret

0000e9da <__fp_inf>:
    e9da:	97 f9       	bld	r25, 7
    e9dc:	9f 67       	ori	r25, 0x7F	; 127
    e9de:	80 e8       	ldi	r24, 0x80	; 128
    e9e0:	70 e0       	ldi	r23, 0x00	; 0
    e9e2:	60 e0       	ldi	r22, 0x00	; 0
    e9e4:	08 95       	ret

0000e9e6 <__fp_nan>:
    e9e6:	9f ef       	ldi	r25, 0xFF	; 255
    e9e8:	80 ec       	ldi	r24, 0xC0	; 192
    e9ea:	08 95       	ret

0000e9ec <__fp_pscA>:
    e9ec:	00 24       	eor	r0, r0
    e9ee:	0a 94       	dec	r0
    e9f0:	16 16       	cp	r1, r22
    e9f2:	17 06       	cpc	r1, r23
    e9f4:	18 06       	cpc	r1, r24
    e9f6:	09 06       	cpc	r0, r25
    e9f8:	08 95       	ret

0000e9fa <__fp_pscB>:
    e9fa:	00 24       	eor	r0, r0
    e9fc:	0a 94       	dec	r0
    e9fe:	12 16       	cp	r1, r18
    ea00:	13 06       	cpc	r1, r19
    ea02:	14 06       	cpc	r1, r20
    ea04:	05 06       	cpc	r0, r21
    ea06:	08 95       	ret

0000ea08 <__fp_round>:
    ea08:	09 2e       	mov	r0, r25
    ea0a:	03 94       	inc	r0
    ea0c:	00 0c       	add	r0, r0
    ea0e:	11 f4       	brne	.+4      	; 0xea14 <__fp_round+0xc>
    ea10:	88 23       	and	r24, r24
    ea12:	52 f0       	brmi	.+20     	; 0xea28 <__fp_round+0x20>
    ea14:	bb 0f       	add	r27, r27
    ea16:	40 f4       	brcc	.+16     	; 0xea28 <__fp_round+0x20>
    ea18:	bf 2b       	or	r27, r31
    ea1a:	11 f4       	brne	.+4      	; 0xea20 <__fp_round+0x18>
    ea1c:	60 ff       	sbrs	r22, 0
    ea1e:	04 c0       	rjmp	.+8      	; 0xea28 <__fp_round+0x20>
    ea20:	6f 5f       	subi	r22, 0xFF	; 255
    ea22:	7f 4f       	sbci	r23, 0xFF	; 255
    ea24:	8f 4f       	sbci	r24, 0xFF	; 255
    ea26:	9f 4f       	sbci	r25, 0xFF	; 255
    ea28:	08 95       	ret

0000ea2a <__fp_split3>:
    ea2a:	57 fd       	sbrc	r21, 7
    ea2c:	90 58       	subi	r25, 0x80	; 128
    ea2e:	44 0f       	add	r20, r20
    ea30:	55 1f       	adc	r21, r21
    ea32:	59 f0       	breq	.+22     	; 0xea4a <__fp_splitA+0x10>
    ea34:	5f 3f       	cpi	r21, 0xFF	; 255
    ea36:	71 f0       	breq	.+28     	; 0xea54 <__fp_splitA+0x1a>
    ea38:	47 95       	ror	r20

0000ea3a <__fp_splitA>:
    ea3a:	88 0f       	add	r24, r24
    ea3c:	97 fb       	bst	r25, 7
    ea3e:	99 1f       	adc	r25, r25
    ea40:	61 f0       	breq	.+24     	; 0xea5a <__fp_splitA+0x20>
    ea42:	9f 3f       	cpi	r25, 0xFF	; 255
    ea44:	79 f0       	breq	.+30     	; 0xea64 <__fp_splitA+0x2a>
    ea46:	87 95       	ror	r24
    ea48:	08 95       	ret
    ea4a:	12 16       	cp	r1, r18
    ea4c:	13 06       	cpc	r1, r19
    ea4e:	14 06       	cpc	r1, r20
    ea50:	55 1f       	adc	r21, r21
    ea52:	f2 cf       	rjmp	.-28     	; 0xea38 <__fp_split3+0xe>
    ea54:	46 95       	lsr	r20
    ea56:	f1 df       	rcall	.-30     	; 0xea3a <__fp_splitA>
    ea58:	08 c0       	rjmp	.+16     	; 0xea6a <__fp_splitA+0x30>
    ea5a:	16 16       	cp	r1, r22
    ea5c:	17 06       	cpc	r1, r23
    ea5e:	18 06       	cpc	r1, r24
    ea60:	99 1f       	adc	r25, r25
    ea62:	f1 cf       	rjmp	.-30     	; 0xea46 <__fp_splitA+0xc>
    ea64:	86 95       	lsr	r24
    ea66:	71 05       	cpc	r23, r1
    ea68:	61 05       	cpc	r22, r1
    ea6a:	08 94       	sec
    ea6c:	08 95       	ret

0000ea6e <__fp_zero>:
    ea6e:	e8 94       	clt

0000ea70 <__fp_szero>:
    ea70:	bb 27       	eor	r27, r27
    ea72:	66 27       	eor	r22, r22
    ea74:	77 27       	eor	r23, r23
    ea76:	cb 01       	movw	r24, r22
    ea78:	97 f9       	bld	r25, 7
    ea7a:	08 95       	ret

0000ea7c <__mulsf3>:
    ea7c:	0b d0       	rcall	.+22     	; 0xea94 <__mulsf3x>
    ea7e:	c4 cf       	rjmp	.-120    	; 0xea08 <__fp_round>
    ea80:	b5 df       	rcall	.-150    	; 0xe9ec <__fp_pscA>
    ea82:	28 f0       	brcs	.+10     	; 0xea8e <__mulsf3+0x12>
    ea84:	ba df       	rcall	.-140    	; 0xe9fa <__fp_pscB>
    ea86:	18 f0       	brcs	.+6      	; 0xea8e <__mulsf3+0x12>
    ea88:	95 23       	and	r25, r21
    ea8a:	09 f0       	breq	.+2      	; 0xea8e <__mulsf3+0x12>
    ea8c:	a6 cf       	rjmp	.-180    	; 0xe9da <__fp_inf>
    ea8e:	ab cf       	rjmp	.-170    	; 0xe9e6 <__fp_nan>
    ea90:	11 24       	eor	r1, r1
    ea92:	ee cf       	rjmp	.-36     	; 0xea70 <__fp_szero>

0000ea94 <__mulsf3x>:
    ea94:	ca df       	rcall	.-108    	; 0xea2a <__fp_split3>
    ea96:	a0 f3       	brcs	.-24     	; 0xea80 <__mulsf3+0x4>

0000ea98 <__mulsf3_pse>:
    ea98:	95 9f       	mul	r25, r21
    ea9a:	d1 f3       	breq	.-12     	; 0xea90 <__mulsf3+0x14>
    ea9c:	95 0f       	add	r25, r21
    ea9e:	50 e0       	ldi	r21, 0x00	; 0
    eaa0:	55 1f       	adc	r21, r21
    eaa2:	62 9f       	mul	r22, r18
    eaa4:	f0 01       	movw	r30, r0
    eaa6:	72 9f       	mul	r23, r18
    eaa8:	bb 27       	eor	r27, r27
    eaaa:	f0 0d       	add	r31, r0
    eaac:	b1 1d       	adc	r27, r1
    eaae:	63 9f       	mul	r22, r19
    eab0:	aa 27       	eor	r26, r26
    eab2:	f0 0d       	add	r31, r0
    eab4:	b1 1d       	adc	r27, r1
    eab6:	aa 1f       	adc	r26, r26
    eab8:	64 9f       	mul	r22, r20
    eaba:	66 27       	eor	r22, r22
    eabc:	b0 0d       	add	r27, r0
    eabe:	a1 1d       	adc	r26, r1
    eac0:	66 1f       	adc	r22, r22
    eac2:	82 9f       	mul	r24, r18
    eac4:	22 27       	eor	r18, r18
    eac6:	b0 0d       	add	r27, r0
    eac8:	a1 1d       	adc	r26, r1
    eaca:	62 1f       	adc	r22, r18
    eacc:	73 9f       	mul	r23, r19
    eace:	b0 0d       	add	r27, r0
    ead0:	a1 1d       	adc	r26, r1
    ead2:	62 1f       	adc	r22, r18
    ead4:	83 9f       	mul	r24, r19
    ead6:	a0 0d       	add	r26, r0
    ead8:	61 1d       	adc	r22, r1
    eada:	22 1f       	adc	r18, r18
    eadc:	74 9f       	mul	r23, r20
    eade:	33 27       	eor	r19, r19
    eae0:	a0 0d       	add	r26, r0
    eae2:	61 1d       	adc	r22, r1
    eae4:	23 1f       	adc	r18, r19
    eae6:	84 9f       	mul	r24, r20
    eae8:	60 0d       	add	r22, r0
    eaea:	21 1d       	adc	r18, r1
    eaec:	82 2f       	mov	r24, r18
    eaee:	76 2f       	mov	r23, r22
    eaf0:	6a 2f       	mov	r22, r26
    eaf2:	11 24       	eor	r1, r1
    eaf4:	9f 57       	subi	r25, 0x7F	; 127
    eaf6:	50 40       	sbci	r21, 0x00	; 0
    eaf8:	8a f0       	brmi	.+34     	; 0xeb1c <__mulsf3_pse+0x84>
    eafa:	e1 f0       	breq	.+56     	; 0xeb34 <__mulsf3_pse+0x9c>
    eafc:	88 23       	and	r24, r24
    eafe:	4a f0       	brmi	.+18     	; 0xeb12 <__mulsf3_pse+0x7a>
    eb00:	ee 0f       	add	r30, r30
    eb02:	ff 1f       	adc	r31, r31
    eb04:	bb 1f       	adc	r27, r27
    eb06:	66 1f       	adc	r22, r22
    eb08:	77 1f       	adc	r23, r23
    eb0a:	88 1f       	adc	r24, r24
    eb0c:	91 50       	subi	r25, 0x01	; 1
    eb0e:	50 40       	sbci	r21, 0x00	; 0
    eb10:	a9 f7       	brne	.-22     	; 0xeafc <__mulsf3_pse+0x64>
    eb12:	9e 3f       	cpi	r25, 0xFE	; 254
    eb14:	51 05       	cpc	r21, r1
    eb16:	70 f0       	brcs	.+28     	; 0xeb34 <__mulsf3_pse+0x9c>
    eb18:	60 cf       	rjmp	.-320    	; 0xe9da <__fp_inf>
    eb1a:	aa cf       	rjmp	.-172    	; 0xea70 <__fp_szero>
    eb1c:	5f 3f       	cpi	r21, 0xFF	; 255
    eb1e:	ec f3       	brlt	.-6      	; 0xeb1a <__mulsf3_pse+0x82>
    eb20:	98 3e       	cpi	r25, 0xE8	; 232
    eb22:	dc f3       	brlt	.-10     	; 0xeb1a <__mulsf3_pse+0x82>
    eb24:	86 95       	lsr	r24
    eb26:	77 95       	ror	r23
    eb28:	67 95       	ror	r22
    eb2a:	b7 95       	ror	r27
    eb2c:	f7 95       	ror	r31
    eb2e:	e7 95       	ror	r30
    eb30:	9f 5f       	subi	r25, 0xFF	; 255
    eb32:	c1 f7       	brne	.-16     	; 0xeb24 <__mulsf3_pse+0x8c>
    eb34:	fe 2b       	or	r31, r30
    eb36:	88 0f       	add	r24, r24
    eb38:	91 1d       	adc	r25, r1
    eb3a:	96 95       	lsr	r25
    eb3c:	87 95       	ror	r24
    eb3e:	97 f9       	bld	r25, 7
    eb40:	08 95       	ret

0000eb42 <strnlen_P>:
    eb42:	fc 01       	movw	r30, r24
    eb44:	05 90       	lpm	r0, Z+
    eb46:	61 50       	subi	r22, 0x01	; 1
    eb48:	70 40       	sbci	r23, 0x00	; 0
    eb4a:	01 10       	cpse	r0, r1
    eb4c:	d8 f7       	brcc	.-10     	; 0xeb44 <strnlen_P+0x2>
    eb4e:	80 95       	com	r24
    eb50:	90 95       	com	r25
    eb52:	8e 0f       	add	r24, r30
    eb54:	9f 1f       	adc	r25, r31
    eb56:	08 95       	ret

0000eb58 <_exit>:
    eb58:	f8 94       	cli

0000eb5a <__stop_program>:
    eb5a:	ff cf       	rjmp	.-2      	; 0xeb5a <__stop_program>
